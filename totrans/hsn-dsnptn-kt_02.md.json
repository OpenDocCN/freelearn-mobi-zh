["```kt\nclass Cat\n```", "```kt\nval firstCat = Cat()\nval secondCat = Cat()\nval yetAnotherCat = Cat()\n```", "```kt\nobject MySingelton{}\n```", "```kt\nobject CounterSingleton {\n    private val counter = AtomicInteger(0)\n```", "```kt\n\n    fun increment() = counter.incrementAndGet()\n}\n```", "```kt\nfor (i in 1..10) {\n    println(CounterSingleton.increment())\n}\n```", "```kt\nobject CounterSingleton {\n\n    init {\n        println(\"I was accessed for the first time\")\n    }\n    // More code goes here\n}\n```", "```kt\nclass Cat {\n    val name = \"Cat\"\n}\n```", "```kt\nfun catFactory() : Cat {\n    return Cat()\n}\n```", "```kt\nval c = catFactory() \nprintln(c.name) // Indeed prints \"Cat\"\n```", "```kt\nclass Dog {\n    val name = \"Dog\"\n}\n```", "```kt\nfun animalFactory(animalType: String) : Cat {\n    return Cat()\n}\n```", "```kt\ninterface Animal {\n   val name : String\n}\n```", "```kt\nreturn when(animalType.toLowerCase()) {\n    \"cat\" -> Cat()\n    \"dog\" -> Dog()\n    else -> throw RuntimeException(\"Unknown animal $animalType\")\n}\n```", "```kt\ndog, dog, cat, dog, cat, cat\n```", "```kt\nval animalTypes = listOf(\"dog\", \"dog\", \"cat\", \"dog\", \"cat\", \"cat\")\n\nfor (t in animalTypes) {\n  val c = animalFactory(t) \n    println(c.name)\n} \n```", "```kt\ninterface Animal {\n   val id : Int\n   // Same as before\n}\n\nclass Cat(override val id: Int) : Animal { \n    // Same as before\n}\n\nclass Dog(override val id: Int) : Animal {\n    // Same as before\n}\n```", "```kt\nclass AnimalFactory { \n    var counter = 0\n\n    fun createAnimal(animalType: String) : Animal {\n        return when(animalType.trim().toLowerCase()) {\n            \"cat\" -> Cat(++counter)\n            \"dog\" -> Dog(++counter)\n            else -> throw RuntimeException(\"Unknown animal $animalType\")\n        }\n    } \n}\n```", "```kt\nval factory = AnimalFactory()\nfor (t in animalTypes) {\n    val c = factory.createAnimal(t) \n    println(\"${c.id} - ${c.name}\")\n} \n```", "```kt\n1 - Dog \n2 - Dog \n3 - Cat \n4 - Dog \n5 - Cat \n6 - Cat\n```", "```kt\nval animalTypes = listOf(\"dog\" to \"bulldog\", \n                         \"dog\" to \"beagle\", \n                         \"cat\" to \"persian\", \n                         \"dog\" to \"poodle\", \n                         \"cat\" to \"russian blue\", \n                         \"cat\" to \"siamese\")\n```", "```kt\nclass AnimalFactory {\n    var counter = 0\n    private val dogFactory = DogFactory()\n    private val catFactory = CatFactory()\n\n    fun createAnimal(animalType: String, animalBreed: String) : Animal {\n        return when(animalType.trim().toLowerCase()) {\n            \"cat\" -> catFactory.createDog(animalBreed, ++counter)\n            \"dog\" -> dogFactory.createDog(animalBreed, ++counter)\n            else -> throw RuntimeException(\"Unknown animal $animalType\")\n        }\n    }\n}\n```", "```kt\nclass DogFactory {\n    fun createDog(breed: String, id: Int) = when(breed.trim().toLowerCase()) {\n        \"beagle\" -> Beagle(id)\n        \"bulldog\" -> Bulldog(id)\n        else -> throw RuntimeException(\"Unknown dog breed $breed\")\n    }\n}\n```", "```kt\nfor ((type, breed) in animalTypes) {\n    val c = factory.createAnimal(type, breed)\n    println(c.name)\n}\n```", "```kt\nLong l1 = new Long(\"1\");\nLong l2 = Long.valueOf(\"1\");\n```", "```kt\nclass NumberMaster {\n    companion object {\n        fun valueOf(hopefullyNumber: String) : Long {\n            return hopefullyNumber.toLong()\n        }\n    }\n}\n```", "```kt\nprintln(NumberMaster.valueOf(\"123\")) // Prints 123\n```", "```kt\nprintln(NumberMaster().valueOf(\"123\")) // Won't compile\n```", "```kt\nprivate static class MyClass { \n\n // Don't want anybody to use it but me \n  private MyClass() { \n  } \n\n // This will replace the public constructor \n  public static MyClass create() { \n    return new MyClass(); \n  } \n} \n```", "```kt\nMyClass myClass = MyClass.create(); \n```", "```kt\n   class NumberMaster { \n       companion object { \n           fun valueOf(hopefullyNumber: String) : Long { \n               return hopefullyNumber.toLong() \n           }  \n       } \n   } \n```", "```kt\nprintln(NumberMaster.valueOf(\"123\")) // Prints 123 \n```", "```kt\nprintln(NumberMaster().valueOf(\"123\")) // Won't compile \n```", "```kt\nprivate class MyClass private constructor() { \n\n    companion object { \n        fun create(): MyClass { \n            return MyClass() \n        } \n    } \n} \n```", "```kt\n// This won't compile \n//val instance = MyClass() \n\n// But this works as it should \nval instance = MyClass.create() \n```", "```kt\ninterface Building<in UnitType, out ProducedUnit> \n        where UnitType : Enum<*>, ProducedUnit : Unit {\n    fun build(type: UnitType) : ProducedUnit\n}\n```", "```kt\n    val listOfStrings = mutableListOf(\"a\", \"b\", \"c\") \n```", "```kt\nlistOfStrings.add(1) \n```", "```kt\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> \n```", "```kt\nclass Box<T> { \n    private var inside: T? = null \n\n    fun put(t: T) { \n        inside = t \n    }    \n    fun get(): T? = inside \n} \n```", "```kt\nclass Cat \n```", "```kt\nval box = Box<Cat>() \n```", "```kt\nbox.put(Cat()) // This will work \nval cat = box.get() // This will always return a Cat, because that's what our box holds \nbox.put(\"Cat\") // This won't work, String is not a Cat \n```", "```kt\nclass HQ {\n    val buildings = mutableListOf<Building<*, Unit>>()\n\n    fun buildBarracks(): Barracks {\n        val b = Barracks()\n        buildings.add(b)\n        return b\n    }\n\n    fun buildVehicleFactory(): VehicleFactory {\n        val vf = VehicleFactory()\n        buildings.add(vf)\n        return vf\n    }\n}\n```", "```kt\ninterface Unit \n\ninterface Vehicle : Unit\n\ninterface Infantry : Unit\n```", "```kt\nclass Rifleman : Infantry\n\nclass RocketSoldier : Infantry\n\nenum class InfantryUnits {\n    RIFLEMEN,\n    ROCKET_SOLDIER\n}\n```", "```kt\nclass APC : Vehicle\n\nclass Tank : Vehicle\n\nenum class VehicleUnits {\n    APC,\n    TANK\n}\n```", "```kt\nclass Barracks : Building<InfantryUnits, Infantry> {\n    override fun build(type: InfantryUnits): Infantry {\n        return when (type) {\n            RIFLEMEN -> Rifleman()\n            ROCKET_SOLDIER -> RocketSoldier()\n        }\n    }\n}\n```", "```kt\nclass VehicleFactory : Building<VehicleUnits, Vehicle> {\n    override fun build(type: VehicleUnits) = when (type) {\n        APC -> APC()\n        TANK -> Tank()\n    }\n}\n```", "```kt\nval hq = HQ()\nval barracks1 = hq.buildBarracks()\nval barracks2 = hq.buildBarracks()\nval vehicleFactory1 = hq.buildVehicleFactory()\n```", "```kt\nval units = listOf(\n        barracks1.build(InfantryUnits.RIFLEMEN),\n        barracks2.build(InfantryUnits.ROCKET_SOLDIER),\n        barracks2.build(InfantryUnits.ROCKET_SOLDIER),\n        vehicleFactory1.build(VehicleUnits.TANK),\n        vehicleFactory1.build(VehicleUnits.APC),\n        vehicleFactory1.build(VehicleUnits.APC)\n)\n```", "```kt\nfun buildBarracks(): Building<InfantryUnits, Infantry> {\n    val b = object : Building<InfantryUnits, Infantry> {\n        override fun build(type: InfantryUnits): Infantry {\n            return when (type) {\n                InfantryUnits.RIFLEMEN -> Rifleman()\n                InfantryUnits.ROCKET_SOLDIER -> RocketSoldier()\n            }\n        }\n    }\n    buildings.add(b)\n    return b\n}\n```", "```kt\nfun buildVehicleFactory(): Building<VehicleUnits, Vehicle> {\n    val vf = object : Building<VehicleUnits, Vehicle> {\n        override fun build(type: VehicleUnits) = when (type) {\n            VehicleUnits.APC -> APC()\n            VehicleUnits.TANK -> Tank()\n        }\n    }\n    buildings.add(vf)\n\n    return vf\n}\n```", "```kt\ninterface HQ {\n    fun buildBarracks(): Building<InfantryUnits, Infantry>\n    fun buildVehicleFactory(): Building<VehicleUnits, Vehicle>\n}\n```", "```kt\nclass CatHQ : HQ { \n// Remember to add override to your methods\n}\n```", "```kt\ndata class Mail(val to: String, \n           val cc: List<String>, \n           val bcc: List<String>,\n           val title: String?,\n           val message: String)\n```", "```kt\nval mail = Mail(\"manager@company.com\", // TO\n    null,   // CC\n    null,   // BCC\n    \"Ping\", // Title\n    null    // Message)\n```", "```kt\nval mail = Mail(\"manager@company.com\", // TO\n    listOf(),  // CC\n    listOf(),  // BCC\n    \"Ping\",    // Title\n    null       // Message) \n```", "```kt\ndata class Mail(val to: String, \n           val cc: List<String>, \n           val bcc: List<String>,\n           val title: String?,\n           val message: String?,\n           val attachments: List<java.io.File>)\n```", "```kt\nval mail = Mail(\"manager@company.com\", // TO\n    listOf(), listOf(),\n    \"Ping\",\n    null) // Compilation error, No value passed for for parameter 'attachments'\n```", "```kt\nMail(\"manager@company.com\").title(\"Ping\").cc(listOf<String>())\n```", "```kt\ndata class Mail(// Stays the same\n                private var _message: String = \"\",\n                // ...) {\n    fun message(message: String) : Mail {\n        _message = message\n        return this\n    }\n```", "```kt\n    // Pattern repeats for every other variable\n}\n```", "```kt\ndata class Mail(val to: String, \n    val title: String = \"\",\n    val message: String = \"\",\n    val cc: List<String> = listOf(), \n    val bcc: List<String> = listOf(), \n    val attachments: List<java.io.File> = listOf())\n```", "```kt\nval mail = Mail(\"one@recepient.org\", \"Hi\", \"How are you\")\n```", "```kt\nval mail = Mail(title= \"Hello\", message=\"There\", to=\"my@dear.cat\")\n```", "```kt\nval mail = Mail(\"hello@mail.com\").apply {\n    message = \"Something\"\n    title = \"Apply\"\n}\n```", "```kt\n   val mail = Mail(\"manager@company.com\") \n   mail.title(\"Ping\") \n   mail.cc(listOf<String>()) \n```", "```kt\nMail(\"manager@company.com\").title(\"Ping\").cc(listOf<String>())\n```", "```kt\n   data class Mail(// Stays the same \n                   private var _message: String = \"\", \n                   // ...) { \n       fun message(message: String) : Mail { \n           _message = message \nreturn this } \n       // Pattern repeats for every other variable \n   } \n```", "```kt\nclass MailBuilder(val to: String) { \n    private var mail: Mail = Mail(to) \n    fun title(title: String): MailBuilder { \n        mail.title = title \n        return this \n    }\n    // Repeated for other properties \n    fun build(): Mail { \n        return mail \n    } \n} \n```", "```kt\nval email = MailBuilder(\"hello@hello.com\").title(\"What's up?\").build()\n```", "```kt\ndata class PC(val motherboard: String = \"Terasus XZ27\",\n             val cpu: String = \"Until Atom K500\",\n             val ram: String = \"8GB Microcend BBR5\",\n             val graphicCard: String = \"nKCF 8100TZ\")\n```", "```kt\nval pc = PC()\n```", "```kt\nval pcFromWarehouse = PC() // Our boring PC\n\nval pwnerPC = pcFromWarehouse.copy(graphicCard = \"nKCF 8999ZTXX\",\n        ram = \"16GB BBR6\") // Amazing PC\n\nprintln(pwnerPC) // Make sure that PC created correctly\n```"]