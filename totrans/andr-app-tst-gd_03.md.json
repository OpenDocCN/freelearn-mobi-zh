["```java\npublic void testNotImplementedYet() { fail(\"Not implemented yet\");\n}\n\n```", "```java\npublic void testShouldThrowException() {\ntry {\nMyFirstProjectActivity.methodThatShouldThrowException(); fail(\"Exception was not thrown\");\n} catch ( Exception ex ) {\n// do nothing\n}\n}\n\n```", "```java\npublic void testMax() {\nfinal int a = 1;\nfinal int b = 2;\nfinal int expected = b;\nfinal int actual = Math.max(a, b); assertEquals(\"Expection \" + expected + \" but was \" + actual,\nexpected, actual);\n}\n\n```", "```java\npublic void testAlignment() {\nfinal int margin = 0;\n... android.test.ViewAsserts.assertRightAligned( mMessage, mCapitalize, margin);\n}\n\n```", "```java\nimport static android.test.ViewAsserts.assertRightAligned;\npublic void testAlignment() {\nfinal int margin = 0;\nassertRightAligned(mMessage, mCapitalize, margin);\n}\n\n```", "```java\npublic void testUserInterfaceLayout() {\nfinal int margin = 0;\nfinal View origin = mActivity.getWindow().getDecorView(); assertOnScreen(origin, mMessage);\nassertOnScreen(origin, mCapitalize);\nassertRightAligned(mMessage, mCapitalize, margin);\n}\n\n```", "```java\n@UiThreadTest\npublic void testNoErrorInCapitalization() {\nfinal String msg = \"this is a sample\";\nmMessage.setText(msg);\nmCapitalize.performClick();\nfinal String actual = mMessage.getText().toString();\nfinal String notExpectedRegexp = \"(?i:ERROR)\"; assertNotContainsRegex(\"Capitalization found error:\",\nnotExpectedRegexp, actual);\n}\n\n```", "```java\npublic void testListScrolling() {\nmListView.scrollTo(0, 0);\nTouchUtils.dragQuarterScreenUp(this, mActivity);\nTouchUtils.dragQuarterScreenUp(this, mActivity);\nTouchUtils.dragQuarterScreenUp(this, mActivity);\nTouchUtils.dragQuarterScreenUp(this, mActivity);\nTouchUtils.tapView(this, mListView);\nfinal int expectedItemPosition = 6;\nfinal int actualItemPosition = mListView.getFirstVisiblePosition();\nassertEquals(\"Wrong position\", expectedItemPosition, actualItemPosition);\nfinal String expected = \"Anguilla\";\nfinal String actual = mListView.getAdapter(). getItem(expectedItemPosition).toString();\nassertEquals(\"Wrong content\", actual, expected);\n}\n\n```", "```java\npublic class MyTestCase extends TestCase { public MyTestCase() {\nthis(\"MyTestCase Default Name\");\n}\npublic MyTestCase(String name) {\nsuper(name);\n}\n}\n\n```", "```java\npublic void assertActivityRequiresPermission (String packageName, String className, String permission)\n\n```", "```java\npublic void testActivityPermission() {\nfinal String PKG = \"com.example.aatg.myfirstproject\";\nfinal String ACTIVITY = PKG + \".MyFirstProjectActivity\";\nfinal String PERMISSION = android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\nassertActivityRequiresPermission(PKG, ACTIVITY, PERMISSION);\n}\n\n```", "```java\npublic void assertReadingContentUriRequiresPermission ( Uri uri, String permission)\n\n```", "```java\npublic void testReadingContacts() {\nfinal Uri URI = ContactsContract.AUTHORITY_URI;\nfinal String PERMISSION = android.Manifest.permission.READ_CONTACTS;\nassertReadingContentUriRequiresPermission(URI, PERMISSION);\n}\n\n```", "```java\npublic void assertWritingContentUriRequiresPermission( Uri uri, String permission)\n\n```", "```java\npublic void testWritingContacts() {\nfinal Uri URI = ContactsContract.AUTHORITY_URI;\nfinal String PERMISSION = android.Manifest.permission.WRITE_CONTACTS;\nassertWritingContentUriRequiresPermission(URI, PERMISSION);\n}\n\n```", "```java\n<instrumentation\nandroid:targetPackage=\"com.example.aatg.myfirstproject\"\nandroid:name=\"android.test.InstrumentationTestRunner\"\nandroid:label=\"MyFirstProject Tests\"/>\n\n```", "```java\n<TextView android:layout_width=\"fill_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string/home\"\nandroid:layout_gravity=\"center\" android:gravity=\"center\"\nandroid:autoLink=\"web\" android:id=\"@+id/link\" />\n\n```", "```java\npublic void testFollowLink() {\nfinal Instrumentation inst = getInstrumentation();\nIntentFilter intentFilter = new IntentFilter( Intent.ACTION_VIEW);\nintentFilter.addDataScheme(\"http\");\nintentFilter.addCategory(Intent.CATEGORY_BROWSABLE);\nActivityMonitor monitor = inst.addMonitor( intentFilter, null, false);\nassertEquals(0, monitor.getHits());\nTouchUtils.clickView(this, mLink);\nmonitor.waitForActivityWithTimeout(5000); assertEquals(1, monitor.getHits());\ninst.removeMonitor(monitor);\n}\n\n```", "```java\npublic final T launchActivity( String pkg, Class<T> activityCls, Bundle extras)\n\n```", "```java\npublic final T launchActivityWithIntent( String pkg, Class<T> activityCls, Intent intent)\n\n```", "```java\npublic void testSendKeyInts() {\ntry {\nrunTestOnUiThread(new Runnable() {\npublic void run() {\nmMessage.requestFocus();\n}\n});\n} catch (Throwable e) {\nfail(\"Couldn't set focus\");\n}\nsendKeys(KeyEvent.KEYCODE_H,\nKeyEvent.KEYCODE_E,\nKeyEvent.KEYCODE_E,\nKeyEvent.KEYCODE_E,\nKeyEvent.KEYCODE_Y,\nKeyEvent.KEYCODE_ALT_LEFT,\nKeyEvent.KEYCODE_1,\nKeyEvent.KEYCODE_DPAD_DOWN,\nKeyEvent.KEYCODE_ENTER);\nfinal String expected = \"HEEEY!\";\nfinal String actual = mMessage.getText().toString();\nassertEquals(expected, actual);\n}\n\n```", "```java\npublic void testSendKeyString() {\ntry {\nrunTestOnUiThread(new Runnable() {\npublic void run() {\nmMessage.requestFocus();\n}\n});\n} catch (Throwable e) {\nfail(\"Couldn't set focus\");\n}\nsendKeys(\"H 3*E Y ALT_LEFT 1 DPAD_DOWN ENTER\");\nfinal String expected = \"HEEEY!\";\nfinal String actual = mMessage.getText().toString();\nassertEquals(expected, actual);\n}\n\n```", "```java\npublic void testSendRepeatedKeys() {\ntry {\nrunTestOnUiThread(new Runnable() {\npublic void run() {\nmMessage.requestFocus();\n}\n});\n} catch (Throwable e) {\nfail(\"Couldn't set focus\");\n}\nsendRepeatedKeys(1, KeyEvent.KEYCODE_H,\n3, KeyEvent.KEYCODE_E,\n1, KeyEvent.KEYCODE_Y,\n1, KeyEvent.KEYCODE_ALT_LEFT,\n1, KeyEvent.KEYCODE_1,\n1, KeyEvent.KEYCODE_DPAD_DOWN,\n1, KeyEvent.KEYCODE_ENTER);\nfinal String expected = \"HEEEY!\";\nfinal String actual = mMessage.getText().toString();\nassertEquals(expected, actual);\n}\n\n```", "```java\npublic void testCapitalizationSendingKeys() {\nfinal String keysSequence = \"T E S T SPACE M E\"; runTestOnUiThread(new Runnable() {\npublic void run() {\nmMessage.requestFocus();\n}\n});\nmInstrumentation.waitForIdleSync();\nsendKeys(keysSequence);\nTouchUtils.clickView(this, mCapitalize);\nfinal String expected = \"test me\".toUpperCase();\nfinal String actual = mMessage.getText().toString();\nassertEquals(expected, actual);\n}\n\n```", "```java\nprotected void scrubClass (Class<?> testCaseClass)\n\n```", "```java\nActivityInstrumentationTestCase2(Class<T> activityClass)\n\n```", "```java\nprotected void setUp() throws Exception {\nsuper.setUp();\n// this must be called before getActivity()\n// disabling touch mode allows for sending key events\nsetActivityInitialTouchMode(false);\nmActivity = getActivity();\nmInstrumentation = getInstrumentation();\nmLink = (TextView) mActivity.findViewById( com.example.aatg.myfirstproject.R.id.link);\nmMessage = (EditText) mActivity.findViewById( com.example.aatg.myfirstproject.R.id.message);\nmCapitalize = (Button) mActivity.findViewById(com.example. aatg.myfirstproject.R.id.capitalize);\n}\n\n```", "```java\nprotected void tearDown() throws Exception { super.tearDown();\n}\n\n```", "```java\npublic void testPreconditions() {\nassertNotNull(mActivity);\nassertNotNull(mInstrumentation);\nassertNotNull(mLink);\nassertNotNull(mMessage);\nassertNotNull(mCapitalize);\n}\n\n```", "```java\nProviderTestCase2(Class<T> providerClass, String providerAuthority)\n\n```", "```java\npublic void testQuery() {\nUri uri = Uri.withAppendedPath( MyProvider.CONTENT_URI, \"dummy\");\nfinal Cursor c = mProvider.query(uri, null, null, null, null);\nfinal int expected = 2;\nfinal int actual = c.getCount();\nassertEquals(expected, actual);\n}\n\n```", "```java\npublic void testDelete() {\nUri uri = Uri.withAppendedPath( MyProvider.CONTENT_URI, \"dummy\");\nfinal int actual = mProvider.delete( uri, \"_id = ?\", new String[] { \"1\" });\nfinal int expected = 1;\nassertEquals(expected, actual);\n}\n\n```", "```java\nServiceTestCase(Class<T> serviceClass)\n\n```", "```java\n 01-02 06:31:26.656: INFO/TestRunner(4569): java.lang.RuntimeException: Exception during suite construction\n01-02 06:31:26.656: INFO/TestRunner(4569): at android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests.testSuiteConstructionFailed(TestSuiteBuilder.java:239)\n01-02 06:31:26.656: INFO/TestRunner(4569): at java.lang.reflect.Method.invokeNative(Native Method)\n[...]\n01-02 06:31:26.656: INFO/TestRunner(4569): at android.test.InstrumentationTestRunner.onStart(InstrumentationTestRunner.java:520)\n01-02 06:31:26.656: INFO/TestRunner(4569): at android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1447)\n\n```", "```java\npackage com.example.aatg.myfirstproject; import com.example.libdummy.Dummy;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.EditText;\npublic class MyFirstProjectActivity extends Activity {\nprivate EditText mMessage;\nprivate Button mCapitalize;\nprivate Dummy mDummy;\n/** Called when the activity is first created. */\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nmMessage = (EditText) findViewById(R.id.message);\nmCapitalize = (Button) findViewById(R.id.capitalize);\nmCapitalize.setOnClickListener(new OnClickListener() {\npublic void onClick(View v) {\nmMessage.setText(mMessage.getText().toString(). toUpperCase());\n}\n}); mDummy = new Dummy();\n}\npublic static void methodThatShouldThrowException() throws Exception {\nthrow new Exception(\"This is an exception\");\n} public Dummy getDummy() {\nreturn mDummy;\n}\n}\n\n```", "```java\npublic void testDummy() {\nassertNotNull(mActivity.getDummy());\n}\n\n```"]