- en: Chapter 11. Publishing an App to the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An app is useful if everyone can enjoy it, and this means finding a way to
    make it available to the masses. In this chapter, we will take a look at the various
    aspects of getting your app ready for deployment and discuss the various options
    available for publishing the Android application to market. In this chapter, we
    will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing application for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing a signed APK for uploading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different app distribution options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing on Google Play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the application for release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your application is fully developed, the moment when you put a significant
    amount of effort to verify each of the key functional modules is crucial. Many
    developers prefer to test the app using different test automation frameworks (such
    as Robotium, Appium, Xamarin Test Cloud, and so on), or some developers use manual
    testing to verify the app on targeted devices. Once you're convinced that the
    application doesn't contain any obvious glitches and works as smoothly as expected,
    you're ready to deploy the app to the app store.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections discuss the various aspects to be considered prior to
    producing a release APK.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling the debug mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'During the development of an application, Xamarin Studio supports debugging
    Xamarin.Android apps using **Java Debug Wire Protocol** (**JDWP**). This is great
    for development purposes but poses security risks for deployed applications and
    thus needs to be disabled in the released apps. There are two different ways to
    accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the application `android:debuggable` property in the `AndroidManifest.xml`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `AssemblyInfo.cs` conditional directives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To remove the debug mode using the Android `AndroidManifest.xml` descriptor,
    you need to set the value of the `android:debuggable` property to `false`. The
    following listing shows how to turn off the JDWP debugging from the manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way of disabling the debug mode is using the conditional directive
    in the `AssemblyInfo.cs` file. The following listing shows how to use a conditional
    directive to turn the JDWP debugging off or on based on the configuration that
    is selected. This approach has the advantage of being based on the currently selected
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Configuring linking options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, the release mode turns off using shared runtime and turns on linking
    so that your distribution APK only contains the portions of the Xamarin.Android
    runtime required by your app. The linker does this by performing a static analysis
    of your compiled code in order to determine which assemblies, types, and type
    members are used by your application. All unused assemblies, types, and members
    are striped out in order to reduce the overall size of the application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Linker Options** can be viewed and set in the **Project Options** dialog
    under the **Android Build** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/kGBIis26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When viewing and adjusting **Linker Options**, make sure to first select **Release**
    from the **Configuration** drop-down box. Xamarin.Android provides the following
    linking behaviors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Don''t link**: This turns off the linker; no linking will be performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link SDK assemblies only**: This will only link the assemblies that are required
    by Xamarin.Android. Other assemblies will not be linked; they will be distributed
    as separate assemblies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link all assemblies**: This will link all assemblies that are required by
    the application and not just the ones required by Xamarin.Android.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Side effects of linking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, linking can have some unintended side effects, including needed
    types and members being accidentally discarded. It is very important for an application
    that is compiled and linked in a release mode to be put through a thorough testing
    cycle in order to ensure that the app does not suffer from this side effect. In
    fact, in most cases, testing beyond the initial developer's testing should be
    conducted using an APK file and produced in the release mode.
  prefs: []
  type: TYPE_NORMAL
- en: If you encounter runtime exceptions or build failure issues related to missing
    types or have trouble locating specific methods, you may need to provide a custom
    linker file that gives explicit instructions concerning specific types or members
    to the linker.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following listing is an example of a custom linking file that directs the
    linker to always include a specific type and specific set of members for the type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A custom linking file can be added to a project as a simple XML file. After
    adding the file to the project, select the file, open the **Properties** pad,
    and choose **LinkDescription** from the **Build action** menu, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/gcixsNDU.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Selecting supported ABIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android supports several different CPU architectures. The Android platform defines
    a set of **Application Binary Interfaces** (**ABIs**) that correspond to different
    CPU architectures. By default, Xamarin.Android assumes that **armeabi-v7a** is
    appropriate in most circumstances. If you need to support additional architectures,
    then you must check each one that applies. This will cause the build process to
    generate the code that will run on all the target ABIs as well as include native
    libraries that are appropriate for each architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Supported ABIs can be specified in the **Project Options** dialog under the
    **Android Build** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/WNxGP7Da.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One scenario where I have run into the need of specifying additional ABIs is
    the testing process. I have worked with a group of testers many times; some of
    which have physical devices and some of which use emulators. To support the use
    of the x86 emulator, you will need to include x86 in the supported ABI's list.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the package name, icon, and app version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several additional manifest properties that you need to verify before
    preparing a release build for uploading it to the Android market. This section
    will take you through some of those key items.
  prefs: []
  type: TYPE_NORMAL
- en: The package name
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A package name is a unique identifier for your application in Google Play. An
    application package name is defined in the `AndroidManifest.xml` file. Once your
    application is deployed to the market with this name, you cannot change it later.
    Changing the app package name means that it will be treated as a completely new
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The Android application package name should be unique and the name may contain
    the uppercase or lowercase letters ('A' through 'Z'), numbers, and underscores
    ('_'). Usually, it is a best practice to use your Internet domain ownership as
    the basis for your package names. For example, applications published by Yahoo
    will start with `com.yahoo.&lt;app id&gt;`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the app settings can be either controlled directly by editing the `AndroidManifest.xml`
    file or from the project **Options** window. To modify the package name in the
    `AndroidManifest.xml`, you need to use the `package` attribute, as shown in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on your project in the Xamarin Solution Explorer and select **Options**
    to open the **Project Options** window. The following screenshot depicts the project
    options window in Xamarin Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/KDV0sTwL.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The application name and icon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Making an app that works in a device isn't just enough. You will need to provide
    a high-quality app icon that represents your brand or product. After all, the
    app icon is the first thing that a user will notice after the app is installed
    on the device. You must prepare your app launcher icon for devices of mdpi, hdpi,
    xhdpi, and xxhdpi density.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the launcher icons are ready, add them to their respective drawable resource
    folder for different screen densities. You can set the app name by setting the
    `android:label` property to the `&lt;application&gt;` element in the `AndroidManifest.xml`
    file, and for setting the application icon, you can use the `android:icon` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can refer to the official Google app icon design guidelines at [http://www.google.com/design/spec/style/icons.html#icons-product-icons](http://www.google.com/design/spec/style/icons.html#icons-product-icons).
  prefs: []
  type: TYPE_NORMAL
- en: The application versioning scheme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The application versioning scheme is used to track different build versions.
    This also helps notify a user when there is an upgrade version of the application
    available for download. Android uses the following two different manifest attributes
    to define the build version information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`android:versionCode`: This is an integer value that represents the current
    build version of the application. Internally, Google Play uses this property to
    handle the build update process such as notifying the user when a new version
    of the app is available. You must increase the value of `versionCode` for each
    successive release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:verionName`: This is a string that represents the release version
    of the application. This version code will be displayed publicly to the user on
    Google Play. Note that this string is not made mandatory on Google Play and is
    not used internally, but it is just displayed it to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both of these attributes can be set either from the **Project Options** window
    or from the application manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Review user permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Android application must declare the list of permissions it requires for
    accessing certain features in the app. Android app permissions are declared in
    the `AndroidManifest.xml` file using the `&lt;uses-permission&gt;` tag. When an
    application is being installed on the user device, the Android system reads the
    manifest file and displays the list to the user. The user must decide to allow
    the permissions for the installation to complete. The following screenshot depicts
    the app permissions dialog while downloading the Facebook mobile app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aInBxN41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While preparing a release version build of your application, verify that your
    app manifest file defines only the permissions that are required for your application.
    For example, a camera application that requests for the read call log permission
    could be a reason for annoyance with a high degree of a chance for the user to
    not download your application.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a signed APK for uploading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have completed all the previous steps, we will proceed to the final
    step of preparing a signed APK to be published on different app stores. The following
    sections discuss the steps of producing a signed APK from within Xamarin Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Android keystores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **keystore** is a database of security certificates created and managed by
    the **keytool** program from the Java SDK. The keystore is an important aspect
    of creating a release version of the Android app. The Android device cannot run
    applications that have not been digitally signed. This may come as some surprise
    because we have been running our app for some time now. During the development
    process, Xamarin.Android uses a **debug keystore** that signs the build while
    running the application from an IDE, and as such the apps to run on the device.
    This keystore works for debugging purposes only, but will not be recognized as
    a valid keystore for the distribution of released apps.
  prefs: []
  type: TYPE_NORMAL
- en: A keystore must be kept safe as the same keystore key is required for publishing
    all of the future versions of an application. If a keystore is lost, it will not
    be possible to publish updates to an app on Google Play. The only solution would
    be to create a new keystore and publish the new version as a completely new app.
  prefs: []
  type: TYPE_NORMAL
- en: 'A keystore can be created using a **keytool** and **jarsigner** command-line
    tool available in Java JDK. The following command is used to create a keystore
    using the Java keytool utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Zb4RUfjg.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the preceding command prompts the user to provide the password and
    other required details in order to generate the **release.keystore** key.
  prefs: []
  type: TYPE_NORMAL
- en: While the command-line keytool utility can be used directly to create and manage
    keystores, Xamarin.Android provides a user interface to the tool, which is integrated
    into the publishing process. The following section will guide you with the steps
    to create a keystore and prepare a signed Android build for publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing from Xamarin.Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will guide you through creating a new keystore as part
    of the process while creating a signed `.apk` file:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Run Configuration** drop-down box, select the **Release** option:![](img/fpt2MwXn.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Build** | **Achieve for Publishing** option in the Xamarin
    Studio toolbar. You will see a list of the latest `POIApp` builds, as shown in
    the following screenshot. If you have never build your code, it will build and
    generate one for you:![](img/OOxtJgQS.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the latest build from the list and click on the **Sign and Distribute…**
    button from the bottom-right corner. You will see two options: **Ad-Hoc** or **Google
    Play**. If you select the **Ad-Hoc** option, it will create a build and save it
    in your disk. You need to manually publish the app to Google Play. However, the
    **Google Play** option allows you to distribute your app on Google Play directly
    from Xamarin Studio.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'However, it is always a good idea to create a signed build and save it in your
    computer so that you can verify all the features before publishing it to Google
    Play:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/y0zfZ2ZF.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Let''s select **Ad-Hoc** and click on **Next**. Notice that it will open the
    **Android Signing Identity** wizard with two buttons: **Create a New Key** and
    **Import an Existing Key**. If you have created the keystore using the Java keytool
    command-line utility as explained earlier, you will need to directly select **Import
    Existing Key**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, I have selected **Create a New Key** button to demonstrate
    how Xamarin Studio facilitates the process of creating a new keystore.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Create a New Key** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in all of the required details, such as alias, password, full name, validity,
    and so on, and then select **OK** to confirm:![](img/fi7OrH2o.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will create a new key and display the **Android Signing Identity** dialog.
    Select the key and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that it will display a confirmation dialog, as shown in the following
    screenshot:![](img/faPYUaIb.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Publish**. It will prompt you to select the location to save the apk
    file. As prompted, you need to provide the keystore password while generating
    the signed APK:![](img/avi4HWgt.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resulting APK is ready for final testing and potential distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Republishing the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The keystore that was created while deploying the very first version of an application
    is very important and should be kept safe. The keystore, alias, and passwords
    should be kept secure so that only those authorized to publish a new version of
    the app will have access to them.
  prefs: []
  type: TYPE_NORMAL
- en: Different app distribution options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android developers have a number of options for distributing their applications,
    which include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Self-publishing via a private Cloud or via website links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributing via e-mail attachments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing in Google Play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing in third-party app stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-publishing via website links or e-mails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Website links and e-mail attachments are pretty straightforward, easy to accomplish,
    and may be suitable for some apps that are used internally by a company or by
    a small group of associates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prior to installing apps from a website link or an e-mail attachment, you must
    first update your device security settings to allow apps to be installed from
    **Unknown sources**. Let''s take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/EVdkKSLM.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After enabling this option, you will be prompted to install an app when selecting
    an e-mail attachment or a web link that is an APK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that for general consumers, website links and e-mails as a means of distribution
    are not ideal. Marketplaces such as Google Play and Amazon Appstore provide significant
    advantages over self-publishing methods. The following are some of the advantages
    of distributing your application via an app store:'
  prefs: []
  type: TYPE_NORMAL
- en: Most app stores provide a review process to ensure that apps are not malicious
    in nature. Google has recently introduced an app store review process that verifies
    the violation of the Android developer policy, build size, permissions, and so
    on. The review process strengthens the Android community and helps to build consumers'
    trust.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides a robust infrastructure to reach out to millions of consumers by distributing
    apps on App Store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Promotes apps and allow content rating from consumers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handles financial settlements for applications that use subscriptions or purchases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing on Google Play
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Play is an ideal marketplace to upload and distribute your application
    to a wider range of audience. It is a single platform that allows an app publisher
    to distribute, advertise, make dollars by selling your app, and analyze the usage
    and stats of your application. On the other hand, every Android device is shipped
    with a Google Play Android app through which your published application will be
    discovered and downloaded to users.
  prefs: []
  type: TYPE_NORMAL
- en: Before your application is pushed into the wild, it is always valuable to get
    some real-world feedback from users. Developers prefer to distribute an alpha/beta
    version of their application to a group of users and gather feedback. Beta testing
    helps you get the early feedback from real users and address them before heading
    to the production move.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play allows you to set up and distribute the alpha beta staging release
    of your app. After the release version of your application is prepared and uploaded
    to the beta stage, you can invite a group of testers to whom you would like to
    distribute your application. The testers with an invitation can download the app,
    provide the feedback, and rate your application. This book does not include the
    detailed steps to use the Google Play beta testing program. For more details,
    you can visit [http://developer.android.com/distribute/tools/launch-checklist.html](http://developer.android.com/distribute/tools/launch-checklist.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'To publish your application to Google Play, you need to follow some of the
    specific steps described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To distribute apps on Google Play, you will require a developer account. To
    register as a developer, there is a one time registration fee of $25 USD. You
    can follow the on-screen instructions to register as a developer, which is available
    at [https://play.google.com/apps/publish/signup/](https://play.google.com/apps/publish/signup/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Prepare the promotional assets such as graphics, video, and promotional messages
    required while uploading your application. The following is the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare the promotional messages, including an application title, a short description,
    and a full description
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: High-resolution application icons of size 512 w x 512 h
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature graphic of size 1024 w x 500 h
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Promo graphic of size 180 w x 120 h
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional promo YouTube video showcasing your application
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you are ready with the release version of APK and the promotional contents,
    the application can be uploaded to Google Play. This is done by logging to the
    Google Play publisher dashboard:![](img/S2d52OQ0.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add new application** button to help you with the process of
    uploading an APK:![](img/iRs16e1G.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a **Title** for your app to be displayed on Google Play and click on
    **Upload APK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the APK is uploaded, you need to complete the **Store listing** details
    by uploading the required screenshots and other promotional materials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While uploading, all the apps must be rated according to the Google Play ratings
    system. To learn more about the new content rating system, you can refer to [https://support.google.com/googleplay/android-developer/answer/188189](https://support.google.com/googleplay/android-developer/answer/188189).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Pricing and Distribution** tab on the dashboard allows you to select the
    geo location for your app availability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you furnish all the particulars required, you can now click on the **Publish
    app** button to make your application live for download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Third-party app stores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Play is not the only option available to distribute your application
    to the world. You should consider using other distribution channels such as Mall.Soc.io
    ([http://soc.io/apps](http://soc.io/apps)), GetJar ([http://www.getjar.com/](http://www.getjar.com/)),
    Amazon Appstore, and so on. There is no restriction imposed on Google for redistributing
    the same application on other marketplaces. Consider all the available options
    to make the most of your efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we briefly discussed the process to prepare and sign the release
    version of an APK. We also discussed the different app distribution channels that
    are available to developers for distributing the Android apps.
  prefs: []
  type: TYPE_NORMAL
- en: We have now completed the `POIApp` app that exercises many of the Xamarin.Android
    features you will need while developing a professional Android application. However,
    there are tons of great features in Android that remained undiscovered in this
    book, which include audio, video, face recognition, Bluetooth, NFC, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of this starter guide, we simply do not have enough space to
    cover all features that are supported in Android. Make sure that you explore the
    [http://developer.android.com/index.html](http://developer.android.com/index.html)
    and [http://developer.xamarin.com/](http://developer.xamarin.com/) to enhance
    your knowledge on the other interesting Android features.
  prefs: []
  type: TYPE_NORMAL
- en: I wish you good luck with the Xamain.Android development! Happy coding!
  prefs: []
  type: TYPE_NORMAL
