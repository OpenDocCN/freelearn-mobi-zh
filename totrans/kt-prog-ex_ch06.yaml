- en: Building the Messenger Android App – Part II
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we went full steam ahead with the development of the
    Messenger Android application. By doing so, we examined both Kotlin and Android
    application development in depth. We explored the **Model-View-Presenter** (**MVP**)
    pattern and how to use it to build powerful and fully functional Android applications.
    In addition to this, we covered the basics of Reactive programming and learned
    how to use RxJava and RxAndroid in our applications. We also learned about some
    of the available means by which we can communicate with a remote server. We learned
    about OkHttp and Retrofit, and then went one step further by implementing a fully
    functional Retrofit service to facilitate communication with the messenger API
    that we made in [Chapter 4](kt-prog-ex_ch04.html), *Designing and Implementing
    the Messenger Backend with Spring Boot 2.0*. Putting all this knowledge pertaining
    to Android and Kotlin together, we created both a login and signup user interface
    for the Messenger app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will finish the development of the Messenger app. In the
    process of doing so, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with application settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with ChatKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android application testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing background tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's continue the development of our Messenger app by implementing the Main
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Main UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to what we have done in implementing the Login UI and SignUp UI, we
    will create a model, view, and presenter for the Main UI. We are not going to
    focus as much on explanations as we did in the process of implementing the previous
    two UI views. Instead, only new concepts will be explained.
  prefs: []
  type: TYPE_NORMAL
- en: Without further ado, let's create a `MainView`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MainView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we proceed with creating the main view, it is imperative that we have
    a clear understanding of the user interface that we want to implement. A good
    place to start is to clearly write out sentences that describe how we want the
    `MainView` to function. Let''s go ahead and do that:'
  prefs: []
  type: TYPE_NORMAL
- en: The main view should display the active conversations of the currently logged-in
    user upon launch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main view should allow a logged-in user to create a new conversation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main view should be able to show the contacts of a currently logged-in user
    (in the case of this application, this is a list of all the registered users on
    the Messenger platform)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user must be able to access the settings screen directly from the `MainView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user should be able to log out of the application directly from the `MainView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All right, great! We have our list of brief statements describing what the `MainView` can
    do. With this list, it is possible to get on with creating the `MainView` (in
    terms of programming, that is). We are not going to do this yet. Let''s create
    a few visual sketches of `MainView` to give us a clearer idea of how it will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48cec2cb-c814-47c5-b74c-ae97f62c8528.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As can be seen from the preceding diagram, `MainActivity` can render two completely
    separate views to a user. The first view is the Conversations Screen and the second
    the Contacts Screen. A perfect way to implement this is to employ two use fragments
    within the `MainActivity`. In this case, we will require two distinct fragments.
    These are the conversations fragment and the contacts fragment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a clear idea of what the `MainView` is going to contain, we
    need to implement a proper interface to declare the behaviors of the `MainView`.
    The following is the `MainView` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Great work! We will save the implementation of the `MainView` by `MainActivity` for
    later. For now, we will work on the `MainInteractor`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MainInteractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want the user to be able to view other users (contacts) on the Messenger
    platform and view their active conversations on the main screen. In addition to
    this, we want a user to be able to log out of the platform directly from the main
    screen. As a result of these requirements, `MainInteractor` must be capable of
    loading contacts, loading conversations, and logging the user out of the platform.
    The following is the `MainInteractor` interface. Ensure to put it and all other `Main_` files
    in the `com.example.messenger.ui.main` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We added the `OnConversationsLoadFinishedListener`, `OnContactsLoadFinishedListener`,
    and `OnLogoutFinishedListener` interfaces to the `MainInteractor` interface. These
    are all interfaces that will be implemented by a `MainPresenter`. These callbacks
    are necessary for the presenter to perform appropriate actions regardless of the
    success or failure of a conversation load, contact load, or user logout process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MainInteractorImpl` class with an implemented `loadContacts()` method
    is given below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s load all users registered on the Messenger API platform. These users
    are contacts that can be communicated with by the currently logged in user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the contacts were loaded successfully. `onContactsLoadSuccess()` is called
    with the API response data passed as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If the contact load failed, hence, `onContactsLoadError()` is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`loadContacts()` makes use of `UserRepository` to load a list of all available
    users on the messenger platform. If the users were successfully retrieved, the
    listener''s `onContactsLoadSuccess()` is invoked with the list of the users loaded
    passed as an argument. Otherwise, `onContactsLoadError()` is invoked and the error
    is printed to the standard system output .'
  prefs: []
  type: TYPE_NORMAL
- en: We are not done with `MainInteractorImpl` yet. We must still add functions for
    `loadConversations()` and `logout()`. These two required functions are given in
    the following code snippet. Add them to `MainInteractorImpl`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It retrieves all conversations of the currently logged in user using conversational
    repository instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When login out clear user data from shared preferences file and invokes listener''s
    `onLogoutSuccess()` callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`loadConversations()` works similarly to `loadContacts()`. The difference being
    that `ConversationRepository` is being used to retrieve active conversations that
    the user currently has instead of a list of contacts. `logout()` simply clears
    the preferences file used by the application to remove the currently logged in
    user''s data, after which the `onLogoutSuccess()` method of the provided `OnLogoutFinishedListener`
    invoked.'
  prefs: []
  type: TYPE_NORMAL
- en: That's all for the `MainInteractorImpl` class. Next on our agenda is the implementation
    of the `MainPresenter`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MainPresenter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As always, the first thing we must do is create a presenter interface that
    defines functions to be implemented by a presenter implementation class. The following
    is the `MainPresenter` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `loadConversations()`, `loadContacts()`, and `executeLogout()` functions
    will be invoked by the `MainView` and must be implemented by the `MainPresenterImpl` class.
    Our `MainPresenterImpl` class with its defined properties, and `onConversationsLoadSuccess()`
    and `onConversationsLoadError()` methods is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check if currently logged in user has active conversations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After retrieving conversations from API, we add each conversation to `ConversationFragment`''s
    conversations list and conversations adapter is notified after every item addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, add the `onContactsLoadSuccess()`, `onContactsLoadError()` , `onLogoutSuccess()`,
    `loadConversations()`, `loadContacts()` and `executeLogout()` functions given
    below to `MainPresenterImpl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s clear previously loaded contacts in contacts list and notify adapter
    pf data set change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add each contact retrieved from API to `ContactsFragment`''s contacts
    list and contacts adapter is notified after every item addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We have successfully created our `MainInteractor` and `MainPresenter`. At this
    point, it is time to finish up our work on the `MainView` and its layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up the MainView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First and foremost, we must work on the `activity_main.xml` layout file. Modify
    the file to contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the root view of the layout file, we have a single `LinearLayout`. This
    `ViewGroup` will act as a container for the conversations and contacts fragments.
    Speaking of conversations and contacts fragments, we must create appropriate layouts
    for them as well. Create a `fragment_conversations.xml` layout file in the project''s
    layout `resource` directory with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We made use of two child views within the `CoordinatorLayout` root view. The
    first is a `RecyclerView` and the second is a `FloatingActionButton`. A `RecyclerView` is
    an Android widget that is used as a container for displaying large sets of data
    that can be scrolled through efficiently by maintaining a limited number of views.
    We are able to make use of the `RecyclerView` widget because we added its dependency
    to our project''s module-level `build.gradle` script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As we are making use of the `RecyclerView` widgets, we need to create appropriate
    view holder layouts for each `RecyclerView` widget. Create a `vh_contacts.xml` file
    and a `vh_conversations.xml` file within the layouts resource directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the `vh_contacts.xml` layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `vh_conversations.xml` layout should contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As written in the Android developers reference, *Floating action buttons are
    used for a special type of promoted action. They are distinguished by a circled
    icon floating above the UI and have special motion behaviors related to morphing,
    launching, and the transferring anchor point*. We can make use of the `FloatingActionButton` widget
    because we added the Android support design library dependency to the project''s `build.gradle` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `fragment_contacts.xml` layout file within the layout resource directory
    containing the following XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it is time to finish up the `MainActivity` class. There is a lot we need
    to get done to complete `MainActivity`. First and foremost we must declare the
    necessary class properties. Next, we need to provide implementations for the following
    methods: `bindViews()`, `showConversationsLoadError()`, `showContactsLoadError()`,
    `showConversationsScreen()`, `showContactsScreen()`, `getContext()`, `getContactsFragment()`,
    `getConversationsFragment()`, `navigateToLogin()` and `navigateToSettings()`.
    Finally, we will create `ConversationsFragment` and `ContactsFragment` classes.'
  prefs: []
  type: TYPE_NORMAL
- en: That is a lot to get done. We will start first and foremost with the addition
    of `ConversationsFragment` and `ContactsFragment` to `MainActivity`.  `ConversationsFragment`
    is given below. Add it within `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following method is called, when user interface of `ConversationsFragment`
    is being drawn for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting the layout manager of conversations recycler and let''s see how to
    view a linear layout manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`ConversationsFragment` possesses a `RecyclerView` layout element. Recycler
    views need adapters to provide a binding from a data set to views that are displayed
    within the `RecyclerView`. Simply put, a `RecyclerView` make use of an `Adapter`
    to provide data for the views it renders to the display.  Add `ConversationsAdapter`
    below as a nested class (an inner class) of `ConversationsFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s set `View.OnClickListener` of `itemLayout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create the `ViewHolder` layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When creating a recycler view `Adapter`, there are some important methods that
    you must provide custom implementations for. These methods are: `onCreateViewHolder()`,
    `onBindViewHolder()`, and `getItemCount()`.  `onCreateViewHolder()` is invoked
    when the recycler view needs a new view holder instance. `onBindViewHolder()`
    is called by the recycler view in order to display data in the data set at a specified
    position. `getItemCount()` is called to get the number of items in the data set.
    A `ViewHolder` describes an item view in use as well as metadata about its place
    in a `RecyclerView`.'
  prefs: []
  type: TYPE_NORMAL
- en: An inner class is a class nested in another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having understood what is going on in `ConversationsFragment`, let us proceed
    by implementing `ContactsFragment`. First and  add the following `ContactsFragment` class
    to `MainActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'As you most likely noticed, similar to `ConversationsFragment`, `ContactsFragment`
    makes use of a `RecyclerView` to render contact view elements to an application''s
    user. The corresponding adapter class for this `RecyclerView` is `ContactsAdapter`.
    It is given in the following code snippet. Add it as an inner class of `ContactsFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'So far so good. Having created the necessary fragments, we can get to work
    on the properties and methods of `MainActivity`. Add the property definitions
    below to the top of the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, modify `onCreate()` to reflect the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the `bindViews()`, `showConversationsLoadError()`, `showContactsLoadError()`,
    and `showConversationsScreen()` and `showContactsScreen()` methods below to `MainActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s begin a new fragment transaction and replace any fragment present in
    activity''s fragment container with a `ConversationsFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the `showNoConversations()`, `onOptionsItemSelected()`, `getContext()`,
    `getContactsFragment()`, `getConversationsFragment()`, `navigateToLogin()` and
    `navigateToSettings()`  functions below to `MainActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Comments were placed in some areas within the preceding code snippets have been
    heavily commented to give you more understanding of what was done. Ensure you
    go through the comments carefully to fully grasp what we have done.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MainActivity menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `onCreateOptionsMenu(Menu)` function of `MainActivity`, we inflated
    a menu that we have not yet implemented. Add a `main.xml` file in the `menu` package
    under the application resource directory. `main.xml` should contain the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Fantastic work! We are one step closer to finishing this project. It is now
    time for us to work on the chat user The `showConversationLoadError()` and `showMessageSendError()`
    are functions that, interface (where the actual chatting happens).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Chat UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chat UI we are about to create must display the message thread of an active
    conversation as well as enable a user to send a new message to the individual
    they are chatting with. We will start this section by creating the view layout
    that will be rendered to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the chat layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will make use of an open source library called ChatKit to create the chat
    view's layout. ChatKit is an Android library that provides flexible components
    for chat user interface implementation in Android projects as well as utilities
    for chat-user-interface data management and customization.
  prefs: []
  type: TYPE_NORMAL
- en: 'We added ChatKit to the Messenger project with the following line of code in
    the `build.gradle` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned earlier, ChatKit provides a number of useful user interface widgets
    for creating a chat UI. Two of these widgets are `MessagesList` and `MessageInput`.
    The `MessagesList` is a widget for the display and management of messages in conversation
    threads. `MessageInput` is a widget for entering text messages. In addition to
    supporting several styling options, `MessageInput` supports simple input validation
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can use `MessagesList` and `MessageInput` in a layout file.
    Create a new `chat` package within `com.example.messenger.ui` and add a new empty
    activity named `ChatActivity` to it. Open the `ChatActivity` activities layout
    file (`activity_chat.xml`) and add the following XML to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding XML, we made use of ChatKit's `MessagesList`
    and `MessageInput` UI widgets just as we would any other Android widgets. Both
    `MessagesList` and `MessageInput` are located within the `com.stfalcon.chatkit.messages`
    package. Open the layout design window to see how the layout looks visually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next on our agenda is the creation of a `ChatView` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Within `ChatView`, we defined a `ChatAdapter` interface declaring a single `navigateToChat(String,
    Long, Long)` function. This interface should be implemented by adapters that are
    capable of directing a user to the `ChatView`. Both the `ConversationsAdapter` and `ContactsAdapter` that we
    earlier created implement this interface.
  prefs: []
  type: TYPE_NORMAL
- en: The `showConversationLoadError()` and `showMessageSendError()` are functions
    that, when implemented, must display appropriate error messages when the loading
    of a conversation and the loading of a message fail, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: ChatKit's `MessagesList` UI widget must possess a `MessagesListAdapter` for
    the management of its messages dataset. `getMessageListAdapter()` is a function
    that, when implemented by a `ChatView`, will return the `MessagesListAdapter` of
    the UI's `MessagesList`.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing chat UI models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to add messages to the `MessagesListAdapter` of a `MessageList`,
    we must implement ChatKit''s `IMessage` interface in an appropriate Model. We
    will implement this model here. Create a `com.example.messenger.utils.message` package
    and add the following  `Message` class within it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to this, we need to create an `Author` class that implements ChatKit''s `IUser` interface.
    The implementation of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `Author` class models the user details of a message author, such as the
    name of the author, their ID, and an avatar (if they have one).
  prefs: []
  type: TYPE_NORMAL
- en: We have done enough with views and layouts for now. Let's go ahead and implement
    a `ChatInteractor` and `ChatPresenter`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ChatInteractor and ChatPresenter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now, we already understand what presenters and interactors are meant to
    do, so let''s go straight to creating code. The following is the `ChatInteractor` interface.
    This and all other `Chat_` files belong to the `com.example.messenger.ui.chat` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a corresponding `ChatInteractorImpl` class for the `ChatInteractor` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The method below will be called to load the messages of a conversation thread:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The method below will be called to send a message to a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s handle the `ChatPresenter` and `ChatPresenterImpl` code. For the `ChatPresenter`,
    we need to create an interface that enforces the declaration of two functions: `sendMessage(Long,
    String)` and `loadMessages(Long)`. The following is the `ChatPresenter` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ChatPresenter` interface''s implementation class is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s iterate over conversation message loaded from API, and create a new
    `IMessage` object for message currently iterated upon and add `IMessage` to the
    start of `MessagesListAdapter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Keeping with our practice thus far, explanatory comments have been left within
    the preceding code snippet to aid your understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Last, but not the least, we will work on the `ChatActivity`.  First and foremost,
    we shall begin by declaring the required properties for our activity and working
    on its `onCreate()` lifecycle method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify `ChatActivity` to contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s parse extras bundle from intent which launched the `ChatActivity`. If
    either of the extras identified by the keys `CONVERSATION_ID` and `RECIPIENT_ID`
    does not exist, -1 is returned as a default value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'If `conversationId` is not equal to -1, then the `conversationId` is valid,
    hence load messages in the conversation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, we created `recipientId`, `messageList`, `messageInput`,
    `preferences`, `presenter`, and `messageListAdapter` properties which are of the
    type `Long`, `MessageList`, `MessageInput`, `AppPreferences`, `ChatPresenter`
    and `MessageListAdapter` respectively. `messageList` is a view which renders distinct
    views for messages provided to it by `messageListAdapter`. All the logic contained
    within `onCreate()` has to do with the initialization of views within the activity.
    The code within `onCreate()` has been commented to give you full understanding
    of what is going on. Go through each line of the comments patiently before proceeding.
    `ChatActivity` implements `MessageInput.InputListener`. Classes which implement
    this interface must provide an appropriate `onSubmit()` method. Let's go ahead
    and do that. Add the following method to `ChatActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Function override from `MessageInput.InputListener` called when a user submits
    a message with the `MessageInput` widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '`onSubmit()` takes a `CharSequence` of the message submitted by the `MessageInput`
    and creates an appropriate Message instance for it. This instance is then added
    to the start of the `MessageList` by invoking `messageListAdapter.addToStart()`
    with the Message instance passed as an argument. After adding the created `Message`
    to `MessageList`, the `ChatPresenter` instance is used to initialize the sending
    procedure to the server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let us work on other method overrides we must do.  Add the `showConversationLoadError()`,
    `showMessageSendError()`, `getContext()` and `getMessageListAdapter()` methods
    shown below to `ChatActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally override `bindViews()`, `onOptionsItemSelected()`,  and `onBackPressed()`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: So far, so good! You have successfully created the majority of the Messenger
    app. Go ahead and give yourself a round of applause. The only thing that remains
    for us to do before wrapping up this chapter is to create a settings activity
    from which users can update their profile statuses. Feel free to take a well-deserved
    coffee break before proceeding to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application's settings activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is now the time to develop a simple application settings activity from which
    a user can update their profile status. Create a new package within `com.example.messenger.ui`
    named `settings`. Within this package, create a new settings activity. Name the
    activity `SettingsActivity`. To create a settings activity, right-click on the
    `settings` package, then select New | Activity | Settings Activity. Input the
    necessary details of the new settings activity, such as an activity name and activity
    title, then click Finish.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the process of creating a new `SettingsActivity`, Android Studio will add
    a number of additional files to your project. In addition to this, a new `.xml` resource
    directory (`app` | `res` | `xml`) will be added to your project. This directory
    should contain the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pref_data_sync.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pref_general.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pref_headers.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pref_notification.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may choose to delete the `pref_notification.xml` and `pref_data_sync.xml` files.
    We will not make use of them in this project. Let''s take a look at `pref_general.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The root view of this `xml` layout file is a `PreferenceScreen`. A `PreferenceScreen` is
    the root of a `Preference` hierarchy. A `PreferenceScreen` in itself is a top-level `Preference`.
    The word `Preference` has been used a few times now. Let's define what a `Preference` is.
    It is a representation of the basic `Preference` user-interface building block
    that is displayed in the form of a list by a `PreferenceActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: The `Preference` class provides an appropriate view for a preference to be displayed
    within a `PreferenceActivity` and its associated `SharedPreferences` for the storage
    and retrieval of preference data. `SwitchPreference`, `EditTextPreference`, and
    `ListPreference` in the preceding code snippet are all subclasses of `DialogPreference`,
    which in turn is a subclass of the `Preference` class. A `PreferenceActivity` is
    the base class needed by an activity in order to display a hierarchy of preferences
    to a user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `SwitchPreference`, `EditTextPreference`, and `ListPreference` views in `pref_general.xml` are
    not needed. Remove them from the XML file now. We need a preference that enables
    the user to update their status on our Messenger platform. This is a highly specific
    use case and thus it comes as no surprise that there''s no preference widget that
    provides us with this ability. No worries! We will implement a custom preference
    that does the job. Let''s call it `ProfileStatusPreference`. Create a new `ProfileStatusPreference`
    class containing the following code in the `settings` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The following snippet binds `ProfileStatusPreference`''s `EditText` to `etStatus`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use `MessengerApiService` to update the user''s status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will store the updated user details if status update is successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The `ProfileStatusPreference` class extends `EditTextPreference`. `EditTextPreference`
    is a `Preference` that permits string input in an `EditText`. `EditTextPreference` is
    a `DialogPreference`, and, as such, presents a dialog to the user containing the `Preference` view
    when the `Preference` is clicked. When a dialog of the `DialogPreference` is closed,
    its `onDialogClosed(Boolean)` method is invoked. A positive `Boolean` value argument, `true`,
    is passed to `onDialogClosed()` when the dialog is dismissed with a positive result.
    `false` is passed to `onDialogClosed()` when the dialog is dismissed with a negative
    result, for example, when the dialog's cancel button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: The `ProfileStatusPreference` overrides the `onDialogClosed()` function of `EditTextPreference`.
    If the dialog is closed with a positive result, the validity of the status contained
    within the `EditText` function of `ProfileStatusPreference` is checked. If the
    status message is valid, the status is updated with the API, otherwise an error
    message is shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having created `ProfileStatusPreference`, go back to `pref_general.xml` and
    update it to reflect the XML in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen in the preceding code, we made use of `ProfileStatusPreference` in
    the code snippet as we would any other preference bundled within the Android application
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on to other aspects, let''s check out `pref_headers.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The preference header file defines headers for various preferences in the `SettingsActivity`.
    Modify the file to contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Perfectly done! Now we have to work on the `SettingsActivity`. Modify the body
    of `SettingsActivity` to contain the content shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '`PreferenceActivity` presenting a set of application settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function `onBuildHeaders()` is called when the activity needs
    a list of headers build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The below method preventing fragment injection from malicious applications
    and all unknown fragments should be denied here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The below fragment shows general preferences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The `SettingsActivity` extends `AppCompatPreferenceActivity`—an activity that
    implements the required calls to be used with `AppCompat`. `SettingsActivity` is
    a `PreferenceActivity` that represents a set of application settings. The `onBuildHeaders()`
    function of `SettingsActivity` is called when the activity needs a list of headers
    built. `isValidFragment()` prevents malicious applications from injecting fragments
    into the `SettingsActivity`. The `isValidFragment()` returns true when a fragment
    is valid and false otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Within `SettingsActivity`, we defined a `GeneralPreferenceFragment` class. `GeneralPreferenceFragment`
    extends `PreferenceFragment`. The `PreferenceFragment` fragment is an abstract
    class defined in the Android application framework. A `PreferenceFragment` shows
    a hierarchy of `Preference` instances as lists.
  prefs: []
  type: TYPE_NORMAL
- en: Preferences from `pref_general.xml` are added to the `GeneralPreferenceFragment`
    in the `onCreate()` method by the invocation of `addPreferencesFromResource(R.xml.pref_general)`.
  prefs: []
  type: TYPE_NORMAL
- en: With these changes made to the `SettingsActivity`, I am pleased to inform you
    that you have successfully finished work on the settings of the Messenger application.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed the `SettingsActivity`, we are now ready to run the Messenger
    app. Go ahead and build and run the Messenger application on a device (virtual
    or physical). Once the app launches, you will be directed straight to the `LoginActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we must do is register a new user on the Messenger platform.
    We can do this on the `SignUpActivity`. Go ahead and click on the DON''T HAVE
    AN ACCOUNT? SIGN UP! button. You will be directed to the `SignUpActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ece09890-08ea-4057-9946-197b1d09d492.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new user in this activity. Enter `popeye` as the username, as well
    as a phone number and a password, then click the SIGN UP button. A new user will
    be registered on the Messenger platform with the username `popeye`. Once the registration
    is completed, you will be directed to the `MainActivity` and the conversations
    view will be rendered immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d1c0a6f-1487-4722-9e76-47c6eedbb428.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As the newly registered user does not have any active conversations, a toast
    message informing them of this will be displayed. We need to create another user
    on the messenger platform to demonstrate the chat functionality. Log out of popeye''s
    account by clicking the three dots at the top-right corner of the screen and selecting
    logout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/400e3aa8-68c2-4aa1-8138-67e41513e2a1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once logged out, create a new Messenger account with the username `dexter`.
    After logging in as `dexter`, click on the new message creation floating action
    button at the bottom-right of the conversations view. The contacts view will be
    rendered to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f40a4b3a-4e08-4208-a44e-6d24e5921647.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the popeye contact will open the `ChatActivity`. Let''s send a
    message to `popeye`. Type `Hey Popeye!` into the message input field at the bottom
    of the screen and click Send. The message will immediately be sent to `popeye`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0bc732a-8b7c-404f-8912-5c342208aa42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon going back to the conversation view of the `MainActivity`, you will notice
    a conversation item now exists for the conversation initiated with `popeye`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/551361ee-a183-428a-8afe-74a29caa9f1f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check whether the message has actually been delivered to `popeye`. Log
    out of the Messenger platform and then log in as `popeye`. Upon login, you will
    be greeted by the new conversation initiated by `dexter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f058435d-1e79-4761-a5a8-19924160672e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fantastic! It''s been delivered. Now let''s reply to `dexter`. Open the conversation
    and send `dexter` a message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6923be76-81a7-4e8c-86c9-62c55a85377d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We sent a simple `How are you Dexter?` in the preceding screenshot. It is time
    to update popeye''s profile status. Navigate back to the main activity and access
    the settings activity (click the three dots on the action bar and select Settings).
    Tapping Account in the launched settings activity will display the general preference
    fragment. Click on the Profile status preference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb6fbf2e-f5ed-4fbd-8007-d9166531da25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A dialog containing an `EditText` in which you can input a new profile status
    will pop up. Input a status message of your choosing and click OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/863a5158-eed9-415e-9c92-847a539c5665.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The status of the current profile will be updated immediately.
  prefs: []
  type: TYPE_NORMAL
- en: At this juncture, I am pleased to inform you that you have successfully implemented
    the Messenger application in its entirety. Feel free to make modifications and
    additions to the code we created in this chapter—you will learn a lot more if
    you do. Before we conclude this chapter, there are two topics we need to cover
    briefly. The first is application testing, and the second is performing background
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Android application testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Application testing is the process by which a developed software application
    is tested to assert its software quality. Many factors contribute to software
    quality. Such factors include application usability, functionality, reliability,
    and consistency. A number of advantages arise from testing an Android application.
    These advantages include but are not limited to:'
  prefs: []
  type: TYPE_NORMAL
- en: Fault detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased software stability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The integrals of Android application testing span far and wide, and, as such,
    are beyond the scope of this book. Nevertheless, the following is a list of Android-testing
    resources you may choose to (and probably should) explore in your free time:'
  prefs: []
  type: TYPE_NORMAL
- en: Espresso ([https://developer.android.com/training/testing/espresso/index.html](https://developer.android.com/training/testing/espresso/index.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roboelectric ([http://robolectric.org](http://robolectric.org))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mockito ([http://site.mockito.org](http://site.mockito.org))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calabash ([https://github.com/calabash/calabash-android](https://github.com/calabash/calabash-android))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing background operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We made use of RxAndroid extensively in the process of developing the Messenger
    application to perform asynchronous operations. In many cases, when using RxAndroid,
    we observed the outcome of background operations on the main thread of the Android
    application. In some cases, you may not want to use a third-party library, such
    as RxAndroid, to do this. Instead, you may want to use a solution bundled in the
    Android application framework. Android provides a number of options to achieve
    this goal. One such option is AsyncTask.
  prefs: []
  type: TYPE_NORMAL
- en: AsyncTask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `AsyncTask` class enables the performance of background operations and the
    publishing of operation results on the application UI thread without the burden
    of managing handlers and threads. `AsyncTask` is best used in situations where
    short operations need to be run. The computations of an `AsyncTask` run on a background
    thread and their results are published to the UI thread.  You can find out more
    about `AsyncTask` here: [https://developer.android.com/reference/android/os/AsyncTask.html](https://developer.android.com/reference/android/os/AsyncTask.html).
  prefs: []
  type: TYPE_NORMAL
- en: IntentService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An `IntentService` is a good candidate for performing scheduled operations that
    run in the background, independent of an activity. As described in the Android
    developer reference, `IntentService` is a base class for services that handle
    asynchronous requests (expressed as Intents) on demand. Clients send requests
    through `startService` (Intent) calls; the service is started as needed and handles
    each Intent in turn using a worker thread, and stops itself when it runs out of
    work. You can learn more about `IntentService` here: [https://developer.android.com/reference/android/app/IntentService.html](https://developer.android.com/reference/android/app/IntentService.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we completed the development of the Messenger Android application. In
    the process of doing so, we learned how to make use of ChatKit—a third-party library
    for creating beautiful chat user interfaces. In addition to this, we further explored
    the utilities offered to us by the Android application framework. We got a firsthand
    look at the development of a settings activity in Android, which helped us to
    learn about `PreferenceScreen`, `PreferenceActivity`, `DialogPreference`, `Preference`,
    and `PreferenceFragment`. Finally, we briefly discussed Android application testing
    and performing background operations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the various storage options provided to
    us by the Android application framework.
  prefs: []
  type: TYPE_NORMAL
