- en: Chapter 2. Installing LevelDB and Building for iOS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basics of getting LevelDB downloaded and unpacked are the same as in the
    beginning of [Chapter 1](ch01.html "Chapter 1. Downloading LevelDB and Building
    with OS X"), *Downloading LevelDB and Building with OS X*, but we will be rebuilding
    the library and need to vary the build steps a bit for iOS. Building for iOS is
    referred to as **cross-compilation** as the code being generated is for a different
    processor architecture from that running the compiler.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Building the static LevelDB library for iOS
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start with, we are going to rebuild the `libleveldb.a` file. This time,
    we are building without snappy and building for multiple architectures: the 32
    bit x86 for the simulator and armv6 and armv7 for iOS devices. We''ll finish by
    renaming it for iOS.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'First up, remove snappy compression in a terminal in your snappy directory:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now change the directory back to your LevelDB source and clean, then try making
    for iOS. If you are using LevelDB 1.10, this will fail due to a bug in the makefile:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The bug that occurs in LevelDB 1.10 is fixed in LevelDB 1.14.0
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'The makefile included with LevelDB v1.10 has a bug (logged as issue 177 [https://code.google.com/p/leveldb/issues/detail?id=177](https://code.google.com/p/leveldb/issues/detail?id=177)),
    because the command-line compilers moved after Xcode 4.3\. Apple moved these several
    times and so different vintages of open source projects run into this problem.
    You can grab the associated `MakefileASD` from the Packt Publishing website or
    edit a copy of makefile as described:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Open makefile in a text editor and go down to the end where there is a section
    starting with:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You need to change the two lines starting with:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And just remove the `$(DEVICEROOT)/usr/bin/` so they start with `$(CC)` and
    `$(CXX)`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assuming you save this file as `MakefileASD`, you can repeat the make:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This generates and then copies the static library `libleveldb_IOS.a` with the
    standard C++11 libc++ library, instead of the default, so it matches a default
    Xcode project. If you look at the log, you will see the `lipo` command is used
    to combine binaries of different processor type. You can also use `lipo` to check
    a library:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Lipo can inspect or operate on either individual object files or compiled libraries.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Creating a minimal iOS Testbed
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start with, we're going to create the simplest iOS program possible that
    can run and show feedback on the device. It will just display an alert to indicate
    we have made a database.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: If you're keeping things together with a workspace, as recommended in an earlier
    chapter, open up that workspace in Xcode.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Now navigate to **File** | **New** | **Project…** which presents a template
    chooser. Choose an iOS application in the left panel and click on **Empty Application**
    in the icons provided, then click on **Next**. Leave the **Use Automatic Reference
    Counting** checkbox checked and uncheck **Include Unit Tests**. Make sure you
    specify the **Product Name** and **Company Identifier**. You will see as you type
    in those entries that the Bundle Identifier is being generated from them, for
    example, `Packt.LevelDB-iOS-Sample02`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Click in the project navigator to select the **AppDelegate** (for example, `GSwLDBAppDelegate.m`)
    source. This is the only program source we're going to customize for this test.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'For a simple test like this we just need to customize the method `application:
    didFinishLaunchingWithOptions` which initially contains:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Before the `return` statement, add the lines:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Choose one of the **Simulator** schemes from the pop-up near the **Run** button.
    And click on **Run** to compile and see the app run and show the little alert.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Adding LevelDB to the iOS Testbed
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We basically repeat the steps done for the OS X project:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Add the include paths to find the LevelDB headers, `/usr/local/include`, into
    the **User Header Search Paths**
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the library `/usr/local/lib/libleveldb_IOS.a` into the **Link Binary With
    Libraries** panel
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `/usr/local/lib` to the **Library Search Paths**
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To include some C++ code into our Objective-C file we need to tell the compiler
    to treat it as Objective-C++ which is done by changing the file extension from
    `.m` to `.mm`. Click on the filename in the project navigator and hit *Enter*
    to be able to edit the name.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can add the `#include` statements as we did in `Sample01`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the same database statements as we did in OS X, so the entire method looks
    like the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can again click on **Run** and see that this runs within the simulator.
    After it runs, go and have a look in the directory `/tmp/testdbios` and you will
    see your files created there. However, this works only because the simulator is
    running with full access to your OS X filesystem. You can't create files in arbitrary
    directories in this way on an iOS device.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Plug in a registered iOS device and change the **Scheme** to point to that
    device so you can run on the device. Now run the application. You will see the
    application appear but not the expected alert. The Xcode **Output** window shows
    an error message like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is because the app can't access the path `/tmp`. The iOS filesystem is
    guarded with a **sandbox** for every application and within that are some directories
    with different significance to the OS. Some are caches that can be flushed without
    your application being told if space runs low. Some are synchronized to iCloud.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will put our data into the standard cache area `NSCachesDirectory`
    (which currently maps to `Library/Caches`). This is for temporary data and may
    be flushed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following helper method earlier in your `GSwLDBAppDelegate.mm` source
    file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `GSwLDBAppDelegate.mm` 源文件中尽早添加以下辅助方法：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now fix our database opening code, replacing the line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在修复我们的数据库打开代码，替换以下行：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With these two lines, which use our helper to find the cache directory:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两行代码，这些代码使用我们的辅助方法来查找缓存目录：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running on the device now will work and show the alert. Running on the simulator
    still works but is putting the file in a location that will vary. If you put a
    breakpoint on the last line you can see the value of `tempPath` in the debugger
    on a device, which will appear as:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在设备上运行将正常工作并显示警报。在模拟器上运行仍然有效，但会将文件放在一个会变化的位置。如果你在最后一行设置断点，你可以在设备上的调试器中看到 `tempPath`
    的值，它将显示为：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'But in the simulator, it''s an absolute path on your desktop, like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但在模拟器中，它是在你的桌面上的绝对路径，例如：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this path, the simulator type varies and the next directory down is the iOS
    version, then eventually the library directory from which it's the same as on
    a device.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个路径中，模拟器类型会变化，下一个目录是 iOS 版本，然后最终是库目录，这与设备上的相同。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Once again we built the LevelDB static library and learned how to choose a different
    standard C++ library to match Xcode's defaults. Creating a trivial iOS application,
    we were able to link it with a LevelDB library suitable for both simulator and
    iOS devices. We then saw how that runs in the simulator compared to the sandboxed
    filesystem of a device.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建 LevelDB 静态库，并学习了如何选择一个不同的标准 C++ 库以匹配 Xcode 的默认设置。创建一个简单的 iOS 应用程序，我们能够将其与适用于模拟器和
    iOS 设备的 LevelDB 库链接起来。然后我们看到了它在模拟器中的运行情况与设备上沙盒文件系统的对比。
