- en: Chapter 6. Apple Pay API Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You process Apple Pay transactions in three phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparation**: Create a payment request and populate it with payment information
    and details about the product the user is purchasing.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Payment sheet interaction**: Respond to user interactions with the payment
    sheet (such as changes to the shipping address or the desired shipping method)
    through the methods of the `PKPaymentAuthorizationViewControllerDelegate` protocol.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Payment processing**: Process the Apple Pay transaction on the user''s device
    and your own servers through the API provided by your payment gateway and HTTP
    requests to your order processing web app.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Earlier chapters showed the workflows you use to interact with the major actors
    in Apple Pay transactions. This chapter provides helpful information on the classes,
    methods, and properties of the Apple Pay API that you must become familiar with
    to use it effectively. However, when you need even more detailed information,
    you should consult the Apple developer documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the major Apple Pay classes involved in
    payment transactions, such as the `PKPaymentReqest` and `PKPaymentSummaryItem`
    classes. You will also learn how to respond to payment sheet events through the
    `PKPaymentAuthorizationViewControllerDelegate` protocol. Finally, the chapter
    will describe the additional classes that the Apple Pay API uses to work with
    addresses, such as the `PKContact` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Major Apple Pay classes involved in payment transactions, such as the `PKPaymentReqest`
    and `PKPaymentSummaryItem` classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responses to payment sheet events through the `PKPaymentAuthorizationViewControllerDelegate`
    protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional classes that the Apple Pay API uses to work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section describes the major Apple Pay classes you use to process Apple
    Pay transactions. These classes include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKPaymentButton`: You use this class to display a **Pay** button, which the
    user uses to begin an Apple Pay transaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentRequest`: This class represents a payment request, which the user
    authorizes or cancels in the payment sheet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentSummaryItem`: Instances of this class represent summary items (such
    as subtotal, shipping costs, and total) in the payment sheet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentMethod`: This class provides access to information about the payment
    card used in Apple Pay transaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKShippingMethod`: Instances of this class represent the shipment methods
    you support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentAuthorizationViewController`: This class determines whether the user
    can use Apple Pay on the device. It is also used to present the payment sheet
    on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPayment`: Instances of this class store payment information for Apple Pay
    transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentToken`: Instances of this class contain encrypted payment information
    ready to be submitted to a payment processor to charge the user''s payment card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PKPaymentButton class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PKPaymentButton` class provides users with a button they tap to start an
    Apple Pay transaction. You should use Apple Pay buttons to start only Apple Pay
    transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Before displaying the **Apple** **Pay** button, you must ensure that the device
    supports Apple Pay by calling the `canMakePayments` method of the `PKPaymentAuthorizationViewController`
    class. You should also call either `canMakePaymentsUsingNetworks:` or `canMakePaymentsUsingNetworks:capabilities:`
    of the same class to ensure that the user's payment cards support the payment
    networks and payment processor capabilities you require. Refer to *The PKPaymentAuthorizationViewController
    class* later in this section for details.
  prefs: []
  type: TYPE_NORMAL
- en: If the device does not support Apple Pay, or the payment cards that the user
    has added to the device are not compatible with the payment networks and payment
    processor capabilities you require, use a standard button with a title such as
    **Buy** to start standard payment transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the button
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use this method to create a **Apple** **Pay** button. Use Apple Pay buttons
    only for Apple Pay transactions.
  prefs: []
  type: TYPE_NORMAL
- en: +buttonWithType:style
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This method provides an **Apple** **Pay** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type` (`PKPaymentButtonType`): This specifies the button''s title. The options
    are plain (**Pay**), buy (**Buy with Pay**), and set up (**Set up Pay**). To learn
    more about using the last option, refer to *Apple Pay Programming Guide* in the
    Apple Developer library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style` (`PKPaymentButtonStyle`): This specifies the button''s appearance.
    Use it to ensure that the button stands out from the background. The options are
    white, white outline, and black.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PKPaymentRequest class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PKPaymentRequest` class represents a request for payment for particular
    goods. This is the main class you use in Apple Pay transactions. You can use one
    instance of this class per Apple Pay transaction. A payment request contains information
    about the merchant requesting the payment, the country where the payment is to
    be processed, the currency to use, the price of the items for which the payment
    is requested (including shipping cost, tax, and so on), and the supported payment
    networks (such as Amex, Discover, and Visa).
  prefs: []
  type: TYPE_NORMAL
- en: When the user authorizes a payment request in the payment sheet, you will get
    a `PKPayment` object, which you need to submit to your payment gateway to obtain
    a `PKPaymentToken` object (or a substitute), which, in turn, you can use in your
    order processing system to charge the user's payment card.
  prefs: []
  type: TYPE_NORMAL
- en: Payment processing information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These required properties specify information that your payment gateway uses
    to process the payment. These should be the first things you set on a payment
    request.
  prefs: []
  type: TYPE_NORMAL
- en: countryCode (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a two-letter code (ISO 3166) for the country in which the payment is
    to be processed, for example `"US"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This code sets the `countryCode` property of a payment request to `US`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: currencyCode (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a three-letter code (ISO 4217) for the currency to be used to process
    the payment, for example `"USD".`
  prefs: []
  type: TYPE_NORMAL
- en: merchantCapabilities (PKMerchantCapability)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These are the payment processing protocols your payment gateway supports. The
    3-D Secure protocol is required. Other protocols available are EMV (Europay, MasterCard,
    Visa), credit card, and debit card.
  prefs: []
  type: TYPE_NORMAL
- en: 'These constants identify the following payment processing capabilities that
    Apple Pay supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKMerchantCapability3DS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKMerchantCapabilityEMV`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKMerchantCapabilityCredit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKMerchantCapabilityDebit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code sets the `merchantCapabilities` property of a payment request
    to 3D Secure and EMV:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: merchantIdentifier (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a merchant identifier stored in your project's `Entitlements` file.
  prefs: []
  type: TYPE_NORMAL
- en: supportedNetworks (NSArray<NSString*>*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This includes the payment networks (or associations) you support. The options
    available are Discover, MasterCard, Visa, and private label (store card).
  prefs: []
  type: TYPE_NORMAL
- en: 'These constants identify the following payment networks that Apple Pay supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkAmex`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkDiscover`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkMasterCard`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkPrivateLabel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkVisa`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, this code sets the `supportedNetworks` property of a payment request
    to Amex and MasterCard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Payment summary items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Summary items identify and price the product that the customer is purchasing
    (the subtotal) and related items, such as the tax, shipping cost, and total.
  prefs: []
  type: TYPE_NORMAL
- en: paymentSummaryItems (NSArray<PKPaymentSummaryItem*>*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is an array of summary items, which specify a label and price for each
    item. Additionally, you can identify an item as *pending* (the price is not yet
    set, but it will be determined after the service is complete, such as for a taxi
    ride) or *final*. Refer to the *The PKSummaryItem class* section for details.
  prefs: []
  type: TYPE_NORMAL
- en: The required address fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These properties specify which fields of the billing and shipping address you
    require to be entered in the payment sheet so that they are available in the `PKPayment`
    object provided by the payment sheet when the user authorizes the payment request.
  prefs: []
  type: TYPE_NORMAL
- en: requiredBillingAddressFields (PKAddressField), requiredShippingAddressFields
    (PKAddressField)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you require a name, e-mail, and postal address in the shipping information,
    you can use code similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the address field specifier constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKAddressFieldNone` (no field is required)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKAddressFieldPostalAddress`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKAddressFieldPhone`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKAddressFieldEmail`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKAddressFieldName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKAddressFieldAll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Billing and shipping contacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These properties specify the billing and shipping contact information. You can
    set them before displaying the payment sheet (however, this is not recommended
    because the user is most likely to have up-to-date contact information). The user
    can also change them by picking or specifying a different contact on the payment
    sheet.
  prefs: []
  type: TYPE_NORMAL
- en: billingContact (PKContact*), shippingContact (PKContact*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'These are the components of a `PKContact` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`emailAddress (NSString*)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name (NSPersonNameComponents*)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phoneNumber (CNPhoneNumber*)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postalAddress (CNPostalAddress*)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shipping methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Shipping methods are the shipping options (carriers or speed) that you support.
  prefs: []
  type: TYPE_NORMAL
- en: shippingMethods (NSArray<PKShippingMethod*>*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This property contains the set of shipping methods available to the customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each `PKShippingMethod` object has these properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`detail (NSString*)`: This describes the shipping method to the user, for example
    `"Delivers in four days"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`identifier (NSString*)`: This identifies the shipping method within the app.
    When the user selects a shipping method, use this property to identify the method
    chosen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shipping type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This specifies the way in which the product is transported, for example whether
    it is shipped by the merchant, or picked up by the customer from the merchant's
    store.
  prefs: []
  type: TYPE_NORMAL
- en: shippingType (PKShippingType)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'These are the shipping types available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKShippingTypeShipping` (default): The merchant ships the product to the customer
    using the shipping method that the customer selects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKShippingTypeDelivery`: The merchant delivers (using a vehicle) the product
    to the customer. This is used for food, groceries, furniture, or specialty items
    that cannot be shipped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKShippingTypeStorePickup`: The customer picks up the product from the merchant''s
    store. In this case, set `shippingContact` to your store''s address or hide it
    from the payment sheet by setting `requiredShippingAddressFields` to `PKAddressFieldNone`.
    Remember to confirm the pickup location with the customer in a reliable way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKShippingTypeServicePickup`: The merchant picks up an object from the address
    specified in `shippingContact` (for example, when the customer is paying to have
    something delivered).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property stores the hash of an `NSData` object.
  prefs: []
  type: TYPE_NORMAL
- en: applicationData (NSData*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When set, this property contains a hash of the data specified (it does not,
    however, contain the value of the data). If your payment gateway supports it,
    the `paymentData` property of the `PKPaymentToken` object you get from the payment
    gateway API is set to the same hash value generated when you set `applicationData`.
    You can send this hash as part of sending payment information to your order-processing
    server. Separately, you can send the actual data to your server. You can then
    compute the hash on your server and compare the two hashes to ensure that the
    data was not changed in transit.
  prefs: []
  type: TYPE_NORMAL
- en: The PKPaymentSummaryItem class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PKPaymentSummaryItem` class represents an item for which the customer is
    paying, such as the subtotal representing the product price, tax, shipping cost,
    and so on. You can identify one or more items as "pending" (the price cannot be
    determined until some time in the future) or "final". The payment sheet does not
    show the price of "pending" items; therefore, you should set the price of such
    items to zero. You can compute the actual price when the service (such as a taxi
    ride) is completed and report it to the customer when the transaction is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a summary item
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These methods create summary items.
  prefs: []
  type: TYPE_NORMAL
- en: '+summaryItemWithLabel:amount:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This creates a "final" summary item with a label and amount.
  prefs: []
  type: TYPE_NORMAL
- en: '+summaryItemWithLabel:amount:type:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This creates a "pending" or "final" summary item with a label and amount.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code creates a "pending" summary item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Summary item components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These properties access the components of a summary item.
  prefs: []
  type: TYPE_NORMAL
- en: label (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the label of the summary item.
  prefs: []
  type: TYPE_NORMAL
- en: amount (NSDecimalNumber*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the price of the summary item (it is shown in the payment sheet if the
    item is "final").
  prefs: []
  type: TYPE_NORMAL
- en: Pending or final
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property determines the type of the summary item.
  prefs: []
  type: TYPE_NORMAL
- en: type (PKPaymentSummaryItemType)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This specifies whether the item is "pending" or "final."
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the possible values of the `type` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKPaymentSummaryItemTypeFinal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentSummaryItemTypePending`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PKPaymentMethod class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PKPaymentMethod` class provides access to information about the payment
    card used in an Apple Pay transaction. When the user selects a payment card in
    the payment sheet, the payment sheet calls the `paymentAuthorizationViewController:didSelectPaymentMethod:completion:`
    method of its delegate.
  prefs: []
  type: TYPE_NORMAL
- en: Card tame
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property identifies the payment card for the `payment` method.
  prefs: []
  type: TYPE_NORMAL
- en: displayName (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This identifies the payment card to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Card type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property identifies the type of the payment card.
  prefs: []
  type: TYPE_NORMAL
- en: type (PKPaymentMethodType)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This identifies the type of payment card used (Amex, Visa, and so on). Old cards
    may not have this information; in this case, the value of this property is `PKPaymentMethodTypeUnknown`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These constants identify the types of cards that Apple Pay supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKPaymentMethodTypeUnknown`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentMethodTypeDebit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentMethodTypeCredit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentMethodTypePrepaid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentMethodTypeStore`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payment network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property identifies the payment network.
  prefs: []
  type: TYPE_NORMAL
- en: network (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This identifies the card's payment network (or association).
  prefs: []
  type: TYPE_NORMAL
- en: 'These constants identify the payment networks that Apple Pay supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkAmex`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkDiscover`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkMasterCard`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkPrivateLabel` (this is for store cards)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkVisa`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payment pass
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property is used with a payment pass.
  prefs: []
  type: TYPE_NORMAL
- en: paymentPass (PKPaymentPass*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can use this, for example, to support custom branded payment cards. Take
    a look at Apple's documentation for more details.
  prefs: []
  type: TYPE_NORMAL
- en: The PKShippingMethod class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PKShippingMethod` class represents a shipping method you support for the
    delivery of goods to a customer.
  prefs: []
  type: TYPE_NORMAL
- en: User-friendly description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property provides the user with information about the shipping method.
  prefs: []
  type: TYPE_NORMAL
- en: detail (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This describes the shipping method to the user, for example: *"Delivers in
    four days"*.'
  prefs: []
  type: TYPE_NORMAL
- en: App-level identifier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property identifies the shipping method within the app.
  prefs: []
  type: TYPE_NORMAL
- en: identifier (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the user changes the shipping method, use this property to identify the
    shipping method chosen.
  prefs: []
  type: TYPE_NORMAL
- en: The PKPaymentAuthorizationViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `PKPaymentAuthorizationViewController` class has two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: To determine whether the user can make payments with Apple Pay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To present the payment sheet to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This class communicates with its delegate (which you implement) using the methods
    of the `PKPaymentAuthorizationViewControllerDelegate` protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Determining Apple Pay support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following methods determine whether the device supports Apple Pay and whether
    the payment cards that the user has added support particular payment networks
    and payment processing capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: +canMakePayments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This indicates whether the device supports Apple Pay.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to determine whether the device supports Apple Pay, you can use
    code similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '+canMakePaymentsUsingNetworks:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This indicates whether the user can use Apple Pay through the networks you support.
    If the user has not added a payment card to the device, the method returns `NO`.
  prefs: []
  type: TYPE_NORMAL
- en: You can call this method after calling `canMakePayments`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to accept only payment cards from Visa or Amex, use code similar
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'These constants identify the payment networks that Apple Pay supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkAmex`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkDiscover`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkMasterCard`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkPrivateLabel` (this is for store cards)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentNetworkVisa`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '+canMakePaymentsUsingNetworks:capabilities:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This indicates whether the user can use Apple Pay on the device through the
    payment networks and payment processing capabilities you support (such as 3D Secure
    and EMV). If the user has not added a compatible payment card to the device, the
    method returns `NO`.
  prefs: []
  type: TYPE_NORMAL
- en: You can call this method after calling `canMakePayments`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to accept only payment cards from Visa or Amex that support the
    3D Secure and EMV protocols, you can use this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'These constants identify the payment processing capabilities that Apple Pay
    supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKMerchantCapability3DS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKMerchantCapabilityEMV`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKMerchantCapabilityCredit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKMerchantCapabilityDebit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing and presenting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following methods prepare and present a payment sheet.
  prefs: []
  type: TYPE_NORMAL
- en: '-initWithPaymentRequest:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This initializes an allocated `PKPaymentAuthorizationViewController` object
    with a payment request.
  prefs: []
  type: TYPE_NORMAL
- en: '-initWithPaymentRequest:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the user can use Apple Pay, this method initializes a payment authorization
    view controller (payment sheet) with the provided `PKPaymentRequest` object.
  prefs: []
  type: TYPE_NORMAL
- en: You can call this method after you configure a payment request.
  prefs: []
  type: TYPE_NORMAL
- en: Payment sheet delegate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property identifies the object to which the payment sheet reports changes
    to the payment request:'
  prefs: []
  type: TYPE_NORMAL
- en: delegate id <PKPaymentAuthorizationViewControllerDelegate>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the object that adopts the `PKPaymentAuthorizationViewControllerDelegate`
    protocol to respond to payment sheet user events.
  prefs: []
  type: TYPE_NORMAL
- en: The PKPayment class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PKPayment` class represents a user-authorized payment. You will get a `PKPayment`
    object when the user authorizes a payment request in the payment sheet (through
    the `paymentAuthorizationViewController:didAuthorizePayment:completion:` method
    of the `PKPaymentAuthorizationViewControllerDelegate` protocol). A `PKPayment`
    object has the payment information required by your payment gateway and the issuing
    and acquiring banks to process the payment, charge the user's card, and deposit
    the funds in your account. This is also for your order processing web app to initiate
    the service or ship the purchased goods to the customer after the issuing bank
    authorizes the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Payment information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property contains information about the payment, which identifies the
    payment card used, the banks involved in the transaction, and other details:'
  prefs: []
  type: TYPE_NORMAL
- en: token (PKPaymentToken*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the encrypted payment information used by the payment gateway, the issuing
    bank, and the acquiring bank.
  prefs: []
  type: TYPE_NORMAL
- en: Billing and shipping contacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property contains the billing and shipping information marked as “required”
    in the payment request used to initialize the payment sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: billingContact (PKContact*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This contains the billing contact information for the transaction. Only the
    fields identified in the `requiredBillingAddressFields` property of the payment
    request are populated. If no fields are requested, this property will be `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: shippingContact (PKContact*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the shipping contact information for the transaction. Only the fields
    identified in the `requiredShippingAddressFields` property of the payment request
    are populated. If no fields are requested, this property will be `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: shippingMethod
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This identifies the shipping method chosen by the user from the list of shipping
    methods in the `shippingMethods` property of the payment request.
  prefs: []
  type: TYPE_NORMAL
- en: The PKPaymentToken class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `PKPaymentToken` object contains the encrypted payment information used by
    the payment gateway and banks, the type of payment card used to fund the payment
    (debit, credit, or private label), and an identifier for the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Note that some payment gateway APIs do not use this class in their workflow.
    Instead, they provide their own payment token class. The example project, which
    uses Stripe, uses the `STPToken` class. Take a look at the `process_ApplePay_payment_with_Stripe:completion:`
    method of the `ProductCard` class (`ProductCard.m`) for details.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypted payment information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property is decrypted only by the entities authorized to do so, such as
    your payment gateway.
  prefs: []
  type: TYPE_NORMAL
- en: paymentData (NSData*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the encrypted payment information for the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Payment method and transaction identifier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These properties provide information about the payment token.
  prefs: []
  type: TYPE_NORMAL
- en: paymentMethod (PKPaymentMethod*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the payment method to use for the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: transactionIdentifier (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the identifier for the transaction that is assigned by your payment
    gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Payment sheet user event protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes the protocol used by the payment sheet to communicate
    with its delegate.
  prefs: []
  type: TYPE_NORMAL
- en: The PKPaymentAuthorizationViewControllerDelegate protocol
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PKPaymentAuthorizationViewControllerDelegate` protocol specifies the set
    of methods that the payment sheet uses to communicate events to its delegate (which
    you can implement to respond to calls to these methods). The following sections
    identify the actions that the user can perform in the payment sheet and the delegate
    methods called when the user performs them.
  prefs: []
  type: TYPE_NORMAL
- en: The user chooses a payment card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The user can switch payment cards in the payment sheet (that is, if the user
    added more than one payment card to Apple Pay on the device).
  prefs: []
  type: TYPE_NORMAL
- en: '-paymentAuthorizationViewController:didSelectPaymentMethod: completion:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is called when the user chooses a payment card. If the payment card affects
    the payment request's summary items (for example, if you provide a discount to
    use a store card), you must compute the summary items (which are an array of `PKPaymentSummaryItem`
    objects) for the payment request. In any event, you must provide the summary items
    array as the argument to this method's completion handler.
  prefs: []
  type: TYPE_NORMAL
- en: The user selects a shipping address
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The user can select a shipping address from a list of previously entered addresses
    or enter a new one in the payment sheet.
  prefs: []
  type: TYPE_NORMAL
- en: '-paymentAuthorizationViewController:didSelectShippingContact: completion:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is called after the user specifies a shipping address. The payment sheet
    provides the shipping address in the `PKContact* contact` parameter. This shipping
    address is anonymized (that is, it excludes personal information). In the U.S.,
    this information includes only city, state, and zip code.
  prefs: []
  type: TYPE_NORMAL
- en: If your shipping methods vary depending on the shipping address, in this method,
    you should create an array of the shipping methods that are available for the
    new shipping address. You should also recompute the summary item array for the
    payment request using the first shipping method in the recomputed shipping method
    array to compute shipping costs (the payment sheet selects the first shipping
    method in the shipping method array).
  prefs: []
  type: TYPE_NORMAL
- en: 'The completion block for this method takes three arguments: `status`, `shippingMethods`,
    and `summaryItems`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`status`: This indicates whether the shipping address is valid. If the shipping
    address the user specified is correct, set this argument to `PKPaymentAuthorizationStatusSuccess`.
    Otherwise, set its value to `PKPaymentAuthorizationStatusInvalidShippingPostalAddress`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shippingMethods`: This is the recomputed shipping method array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`summaryItems`: This is the recomputed summary item array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user selects a shipping method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The user can select a shipping method from the list of shipping methods you
    support (this is stored in the `shippingMethods` property of the payment request).
  prefs: []
  type: TYPE_NORMAL
- en: '-paymentAuthorizationViewController:didSelectShippingMethod: completion:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is called when the user selects a shipment method. If the shipment method
    that the user chooses affects the payment request's summary items (for example,
    if the shipment methods have different prices), you must recompute the summary
    items (an array of `PKPaymentSummaryItem` objects) for the payment request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completion block for this method takes two arguments: `status`, and `summaryItems`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`status`: This indicates whether the shipping method and shipping address (specified
    in the call to the `paymentAuthorizationViewController:didSelectShippingContact:completion:`
    delegate method) are valid. If the shipping address the user specified is correct,
    set this argument to `PKPaymentAuthorizationStatusSuccess`. Otherwise, set its
    value to `PKPaymentAuthorizationStatusInvalidShippingPostalAddress`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`summaryItems`: This is the recomputed summary item array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user authorizes the payment request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the user confirms or changes the information in the payment sheet, the
    user can authorize the payment request to proceed with the Apple Pay transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '-paymentAuthorizationViewControllerWillAuthorizePayment:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is called after the user authenticates the payment sheet but before `paymentAuthorizationViewController:didAuthorizePayment:completion:`
    is called. Use this method to prepare for authorization.
  prefs: []
  type: TYPE_NORMAL
- en: '-paymentAuthorizationViewController:didAuthorizePayment: completion:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is called after the user authorizes the payment request. This is where
    you process the payment with your payment gateway. When done, you must call the
    completion handler block (`(void (^)(PKPaymentAuthorizationStatus status)) completion`)
    with the appropriate value for the status argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the possible values for the `status` argument of the completion handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKPaymentAuthorizationStatusSuccess`: This indicates successful payment authorization
    by the payment card''s issuing bank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentAuthorizationStatusFailure`: This indicates failure due to a failed
    authorization by the payment card''s issuing bank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentAuthorizationStatusInvalidBillingPostalAddress`: This indicates failure
    due to an invalid billing address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentAuthorizationStatusInvalidShippingPostalAddress`: This indicates
    failure due to an invalid shipping address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentAuthorizationStatusInvalidShippingContact`: This indicates failure
    due to an invalid shipping contact'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The payment sheet is done
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The payment sheet is done after the user authorizes the payment request and
    the app processes the Apple Pay transaction, or the user cancels the payment sheet.
  prefs: []
  type: TYPE_NORMAL
- en: '-paymentAuthorizationViewControllerDidFinish:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is called when the transaction is done or the user cancels the payment
    sheet. You must dismiss the payment sheet and perform any other necessary updates.
  prefs: []
  type: TYPE_NORMAL
- en: Auxiliary classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section describes some additional classes you must use to work with the
    Apple Pay API. The classes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKContact`: This is used to represent contact information (name, phone number,
    and e-mail) and addresses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CNPhoneNumber`: This is used to represent a phone number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CNPostalAddress`: This is used to represent addresses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PKContact class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `PKContact` class contains properties that represent the components of
    a billing or shipping address. The payment sheet provides instances of this class
    to its delegate when the user selects a shipping address (`paymentAuthorizationViewController:
    didSelectShippingContact:completion:`), and in the `PKPayment` object it provides
    when the user authorizes the payment request (`paymentAuthorizationViewController:didAuthorizePayment:completion:`).'
  prefs: []
  type: TYPE_NORMAL
- en: Contact address components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These properties contain the information requested in the `requiredBillingAddressFields`
    or `requiredShippingAddressFields` properties of the `PKPaymentRequest` object.
    The value of properties corresponding to the unrequested address fields is `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: emailAddress (NSString*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the contact's e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: name (NSPersonNameComponents*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the contact's name.
  prefs: []
  type: TYPE_NORMAL
- en: phoneNumber (CNPhoneNumber*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the contact's phone number.
  prefs: []
  type: TYPE_NORMAL
- en: postalAddress (CNPostalAddress*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the contact's postal address.
  prefs: []
  type: TYPE_NORMAL
- en: The NSPersonNameComponents class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `NSPersonNameComponents` class contains properties that represent the components
    of a person's name.
  prefs: []
  type: TYPE_NORMAL
- en: Person name components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These properties represent the components of a person's name.
  prefs: []
  type: TYPE_NORMAL
- en: namePrefix (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a prefix (or title) used in front of a person's name, for example `"Dr."`,
    `"Ms."`, or `"Mr."`.
  prefs: []
  type: TYPE_NORMAL
- en: givenName (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the given name (or first name) of the person.
  prefs: []
  type: TYPE_NORMAL
- en: middleName (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the second name of the person.
  prefs: []
  type: TYPE_NORMAL
- en: familyName (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the family name of the person (generally shared with siblings).
  prefs: []
  type: TYPE_NORMAL
- en: nameSuffix (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These are the letters added to a person's full name that provide additional
    information about the person, for example `"Jr."` or `"Ph.D."`.
  prefs: []
  type: TYPE_NORMAL
- en: nickname (NSString)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the familiar or humorous name used for the person.
  prefs: []
  type: TYPE_NORMAL
- en: phoneticRepresentation (NSPersonNameComponents*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If specified, this is the phonetic representation of each of the other properties
    in this class, except `phoneticRepresentation`.
  prefs: []
  type: TYPE_NORMAL
- en: The CNPhoneNumber class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `CNPhoneNumber` class represents the phone number component of a `PKContact`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a phone number
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating a `PKContact` object, to set its `phoneNumber` property, use this
    method to create the `CNPhoneNumber` value to store in the property.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, this code sets the phone number of a contact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '+phoneNumberWithStringValue:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This creates a phone number component with the text provided.
  prefs: []
  type: TYPE_NORMAL
- en: Phone number string
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property contains a string representing the contact's phone number.
  prefs: []
  type: TYPE_NORMAL
- en: stringValue (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the text representing the phone number.
  prefs: []
  type: TYPE_NORMAL
- en: The CNPostalAddress class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `CNPostalAddress` class represents the postal address component of a `PKContact`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Postal address components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These properties represent the components of an address.
  prefs: []
  type: TYPE_NORMAL
- en: street (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the street address for the contact.
  prefs: []
  type: TYPE_NORMAL
- en: city (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the city where the contact is located.
  prefs: []
  type: TYPE_NORMAL
- en: state (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the state where the contact is located.
  prefs: []
  type: TYPE_NORMAL
- en: postalCode (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the postal (or zip) code on which the contact is located.
  prefs: []
  type: TYPE_NORMAL
- en: country (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the country where the contact is located.
  prefs: []
  type: TYPE_NORMAL
- en: ISOCountryCode (NSString*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the ISO 3166 country code for the country property.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter described most of the classes you have to work with to process
    Apple Pay payments. It also described the protocol used by the payment sheet to
    communicate user actions to its delegate so that you can respond appropriately.
    Finally, the chapter listed a few additional classes that you must work with to
    access address components, such as a person's name, phone number, and postal address.
  prefs: []
  type: TYPE_NORMAL
- en: This is the end of *Apple Pay Essentials*, conceived to help you add Apple Pay
    support to your apps. This book introduced the world of online payments, describing
    how payment associations, payment gateways, and banks work together to transfer
    funds from a customer's payment card to a merchant's account. Apple Pay improves
    on this model by adding convenience, privacy, and security to the process.
  prefs: []
  type: TYPE_NORMAL
- en: You learned about using the REST API in your client app to communicate with
    server web apps that provide the information that the app needs (such as details
    about the products you have for sale and the shipping methods you support), and
    to process payments and orders from the app.
  prefs: []
  type: TYPE_NORMAL
- en: The book provided an example workflow for displaying product information to
    your customers and displaying an **Apple** **Pay** button when appropriate. You
    learned how to create a payment request and add payment and order information
    to it, and to present the main Apple Pay user interface and the payment sheet.
    The book showed how to respond to the changes that the user makes in the payment
    sheet, such as selecting a different payment card, shipping address, or shipping
    method.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to process payment and order information in your app and backend
    servers after the user authorizes the payment request. The book also showed how
    to dispose of the payment sheet when the transaction is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the book described the major elements and processes of an order management
    system, using `Node.js` to process orders and payments and the Mongoose module
    to interact with a document-based database.
  prefs: []
  type: TYPE_NORMAL
- en: With this knowledge, you are now able to provide the users of your apps with
    the convenience and security of Apple Pay-based payments.
  prefs: []
  type: TYPE_NORMAL
