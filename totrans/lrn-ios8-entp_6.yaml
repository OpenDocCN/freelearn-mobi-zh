- en: Chapter 6. Using iCloud and Security Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to store your data on cloud, that is, on
    iCloud and security services for iOS, through which we can secure our data, passwords,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with iCloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving data using the keychain process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS Touch ID authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with iCloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basically, **iCloud** is a service that helps users synchronize their data across
    devices. The main purpose is to let users easily store their data, whether it's
    a file or document, so that they can access it on any of their iOS devices. While
    you can use other cloud services to save files or data, the core idea behind iCloud
    is to eliminate explicit or wired connection between devices. Apple does not want
    users to think of the cloud servers and the syncing. Everything simply works seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: The same design philosophy also applies to developers. When we adopt iCloud,
    we do not need to know how to interact with the cloud server or upload data to
    iCloud. The iOS handles all the heavy lifting. Our focus is on the content such
    as managing the change of data or developing a connection between a cloud and
    a device.
  prefs: []
  type: TYPE_NORMAL
- en: 'iCloud offers three kinds of storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key-value storage**: This is used to store content such as settings, preferences,
    and app states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document storage**: This is used to store file type content such as WordPress
    documents, drawings, and complex app states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Core data storage**: This is used for multi-device database solutions for
    structured content. iCloud core data storage is built on document storage and
    employs the same iCloud APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s understand how iCloud actually works. To use iCloud, we need an iOS
    developer account. Assuming that we have an iOS developer account, proceed with
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://idmsa.apple.com/IDMSWebAuth/login?&appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&path=%2F%2Faccount%2Findex.action](https://idmsa.apple.com/IDMSWebAuth/login?&appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&path=%2F%2Faccount%2Findex.action).
    We will first create the app ID with the iCloud feature available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in to the iOS Provisioning Portal, select the app IDs, and then create
    a new app ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the iCloud service for your app by selecting the **iCloud** option. Select
    the Xcode that you are using (if you are using Xcode 5, then select Xcode 5) and
    click on **Continue**, as shown in the following screenshot:![Working with iCloud](img/1829OT_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, give the name of our project in the **Name** text field, write the bundle
    ID in the **Bundle ID** text field, and click on **Continue**, as shown in the
    following screenshot:![Working with iCloud](img/1829OT_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, it will show the enabled services for our app. Make sure **iCloud** is
    enabled or configurable, as shown in the following screenshot:![Working with iCloud](img/1829OT_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, go to **Xcode** and build a new single-view application. After that, go
    to **Capabilities** in **Xcode** and turn on **iCloud**; this will include iCloud
    entitlements, iCloud containers, and the link to the Cloud framework, as shown
    in the following screenshot:![Working with iCloud](img/1829OT_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the entitlements are created automatically. The following screenshot
    shows the entitlements created:![Working with iCloud](img/1829OT_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `ViewController` class and existing view in the storyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will empty the storyboard and create a new objective-C class, a subclass
    of `tableViewController`, and name it (for example, `NoteListViewController`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag one table view controller to the storyboard and embed it in Navigation
    Controller. Now, give a name to this table view controller from the Attribute
    Inspector; it should be the same as the class name. Do the same thing one more
    time for a new class and name it (for example, `AddNoteViewController`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we have two table views in the storyboard. For `NoteListViewController`,
    drag a button to the top-right part of the navigation bar and set the identifier
    as `add`. This will automatically change the button to a **+** button, as shown
    in the following screenshot. Next, select the prototype cell and change its style
    to **Basic**.![Working with iCloud](img/1829OT_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigation Controller and Note List View Controller
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For `AddNoteViewController`, drag the bar buttons into the navigation bar. Name
    one as `Cancel` and the other as `Save`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the table view and set the content to **Static Cells**. Finally,
    add one static row to the table view and add a text field, as shown here:![Working
    with iCloud](img/1829OT_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigation Controller and Note List View Controller
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AddNoteViewController` will be shown when the user taps on the **+** button.
    So, press and hold the *Ctrl* key, click on the **+** button, and drag it to **Add
    Note View Controller**. Select **Modal** as the Segue action. Our storyboard should
    now look like this:![Working with iCloud](img/1829OT_06_08.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The table view showing Add Note View Controller
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, link up the text field to `AddNoteViewController` and create two action
    methods: `Cancel` and `Save`. Our code in `AddNoteViewController.h` should like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to implement the `NoteListViewController` class so that we can display
    the notes available on the cloud in the table view. Open `NoteListViewController.h`
    and add this property to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The purpose of the property is to save notes locally. We''ll display the notes
    in the table view when needed. Next, we need to make a lazy instantiation of this
    property. Lazy instantiation is a good technique if we have an object that only
    needs to be configured once and has some configuration involved that we don''t
    want to clutter in our `init` method. Add the following code in `NoteListViewController.m`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `viewDidLoad`, we need to create the notification method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: iCloud data synchronization is achieved using the `NSUbiquitousKeyValueStore`
    class. `NSUbiquitousKeyValueStore` is a subclass of `NSObject`, and it is available
    in iOS 5.0 and later. An `NSNotificationCenter` object provides a mechanism to
    broadcast information or messages within a program. It is also a subclass of `NSObject`,
    and it is available in iOS 2.0 and later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our `viewDidLoad` method will probably look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Working with iCloud](img/1829OT_06_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now, we have to implement methods that are executed when the preceding notifications
    are called. The `didAddNewNote` method will be invoked when users save a new note:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to display the notes in table view. We have already retrieved the notes
    saved in iCloud; the rest of the implementation is to display the notes in the
    table view. In `NoteListViewController.m`, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have now come to the last part of the process: implementing `AddNoteViewController`
    to add notes to the cloud. Go to the implementation file of `AddNoteViewController`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test the note app, we have to compile and deploy it onto an actual device.
    If you are using a simulator that supports iOS 7.1 or later, then you will be
    able to use the simulator for testing. Make sure that you enable iCloud on both
    devices. Launch the app, add a note on one device, and you'll see the note appear
    on the other device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keychain Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Keychain Services** is a programming interface that enables developers to
    add, find, modify, and remove keychain items. In iOS and OS X, a keychain is an
    encrypted container that stores passwords and other private data that need to
    be secured. In iOS, each application has its own keychain to which it has access.
    This ensures that our data is secured by the third party and other users.'
  prefs: []
  type: TYPE_NORMAL
- en: Keychain provides a small space on which we can only store specific data such
    as passwords, account numbers, private numbers, and so on. With this article,
    I hope to convince you of the value of using the keychain in iOS and OS X instead
    of, for example, the application's user-defaults database, which stores its data
    in plain text without any form of security. Saving our data in keychain is better
    than the default database, because keychain is far more secure and robust.
  prefs: []
  type: TYPE_NORMAL
- en: 'In iOS, an application can use the keychain through the Keychain Services API.
    This API provides a number of functionalities to manipulate the data stored in
    the application''s keychain. The APIs are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SecItemAdd`: This API is used to add data in keychain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecItemCopyMatching`: This API is used to find the existing data in keychain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecItemDelete`: This API is used to remove the data from the application''s
    keychain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecItemUpdate`: This API is used to update the data in the application''s
    keychain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Keychain Services API is a C-based API, but this doesn't prevent us from
    using it. Each of the preceding functions accepts a dictionary (`CFDictionaryRef`).
  prefs: []
  type: TYPE_NORMAL
- en: Encryption and decryption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of us know about two types of encryption: symmetric and asymmetric encryption.
    Symmetric encryption, on the one hand, uses one shared key to encrypt and decrypt
    data. Asymmetric encryption, on the other hand, uses one key to encrypt data and
    another separate, but related, key to decrypt data.'
  prefs: []
  type: TYPE_NORMAL
- en: In iOS, to encrypt and decrypt data, a Security framework is available. This
    process takes place under the hood, so we won't be directly interacting with this
    framework. We'll use symmetric encryption in our example application.
  prefs: []
  type: TYPE_NORMAL
- en: The Security framework offers a number of other services, such as Randomize
    services to generate cryptographically-secure random numbers; Certificate, Key
    and Trust services to manage certificates; public and private keys; and trust
    policies. The Security framework is a low-level framework available in both iOS
    and OS X with C-based APIs.
  prefs: []
  type: TYPE_NORMAL
- en: iOS keychain concepts and structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The keychain is a secure and encrypted way to store our precious data. It is
    important that your app, and all subsequent versions of it, are signed by the
    same mobile-provision profile. If they aren't, you will have many troubles later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: A keychain is a unit of sensitive data stored in your app. Keychain items are
    accompanied by one or more attributes. The attributes describe the keychain item,
    and which attributes we can use depends on the item class of the keychain item.
    The item class refers to the type of data we are going to store. This can be a
    username/password combination, a certificate, a generic password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the application flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start building the application, we need to know about the application
    flow, which is explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: When the user launches the application, it presents the user with a view to
    sign in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it hasn't created an account yet, its credentials are added to the keychain
    and signed in. If it has an account but enters an incorrect password, an error
    message is shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it has signed in, it has access to the data collected with the application.
    The data is securely stored by the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever it takes data with the text field, this data is encrypted and stored
    in the application's `Documents` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever it switches to another application or the device gets locked, it automatically
    signs out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s start an activity on the Keychain. Just follow these steps to accomplish
    the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode and make a single-view application. Then, go to **KeyChainSample**
    | **Capabilities** and turn on the **Keychain Sharing** option, as shown in the
    following screenshot:![Understanding the application flow](img/1829OT_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After turning on the **Keychain Sharing** option, it will automatically create
    **Entitlements File** for us, as shown in the following screenshot:![Understanding
    the application flow](img/1829OT_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't forget to add **Security framework** (shown in the following screenshot);
    without it, the keychain will not work:![Understanding the application flow](img/1829OT_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, make a user interface in the storyboard like this:![Understanding the application
    flow](img/1829OT_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new Objective-C file to the project subclass of `NSObject`. Then, write
    the following code in the interface file of the new file. Also, import `security.h`
    on the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our interface file will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Understanding the application flow](img/1829OT_06_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Write the following code in the implementation file of the new file that we
    added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `_bridge` object is used to transfer a pointer between Objective-C and
    the core foundation, with no transfer of ownership. Our interface file will probably
    look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Understanding the application flow](img/1829OT_06_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the UI components to our `viewController.h` file. Import `KeyChain`
    (the newly added Objective-C file) on top of the file and create an object of
    the `KeyChain` class in the interface as follows:![Understanding the application
    flow](img/1829OT_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the code in the `IBAction` methods of our button with some more code as
    follows in the `viewController.m` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our interface file will probably look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Understanding the application flow](img/1829OT_06_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Compile and run the project; our simulator looks like the following screenshot.
    Enter the values and click on the **Save** button:![Understanding the application
    flow](img/1829OT_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on the **Save** button, one pop up will appear (as shown in the
    following screenshot) with a message that our data is saved in the keychain securely.![Understanding
    the application flow](img/1829OT_06_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now write the **Key** value in the text field that exists in the keychain storage
    and click on the **Find** button. It will show data in a pop-up message as follows:![Understanding
    the application flow](img/1829OT_06_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Touch ID API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple introduced a new feature in iOS 7 called **Touch ID authentication**.
    Previously, there was only four-digit passcode security in iPhones; now, Apple
    has extended security and introduced a new security pattern in iPhones. In Touch
    ID authentication, our fingerprint acts as a password. After launching the Touch
    ID fingerprint-recognition technology in the iPhone 5S last year, Apple is now
    providing it for developers with iOS 8\. Now, third-party apps will be able to
    use Touch ID for authentication in the new iPhone and iPad OSes. Accounting apps,
    and other apps that contain personal and important data, will be protected with
    Touch ID. Now, you can protect all your apps with your fingerprint password.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Touch ID API](img/1829OT_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are two ways to use Touch ID as an authentication mechanism in our iOS
    8 applications. They are explained in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Touch ID through touch authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Local Authentication API is an API that returns a Boolean value to accept
    and decline the fingerprint. If there is an error, then an error code gets executed
    and tells us what the issue is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Certain conditions have to be met when using Local Authentication. They are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The application must be in the foreground (this doesn't work with background
    processes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're using the straight Local Authentication method, you will be responsible
    for handling all the errors and properly responding with your UI to ensure that
    there is an alternative method to log in to your apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touch ID through Keychain Access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Keychain Access includes the new Touch ID integration in iOS 8\. In Keychain
    Access, we don't have to work on implementation details; it automatically handles
    the passcode implementation using the user's passcode. Several keychain items
    can be chosen to use Touch ID to unlock the item when requested in code through
    the use of the new **Access** **Control Lists** (**ACLs**). ACL is a feature of
    iOS 8\. If Touch ID has been locked out, then it will allow the user to enter
    the device's passcode to proceed without any interruption.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some features of Keychain Access that make it the best option for
    us. They are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Keychain Access uses Touch ID, and its attributes won't be synced by any cloud
    services. So, these features make it very safe to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If users overlay more than one query, then the system gets confused about correct
    user, and it will pop up a dialog box with multiple touch issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Local Authentication framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apple provides a framework to use Touch ID in our app called **Local Authentication**.
    This framework was introduced for iOS 8\. To make an app, including the Touch
    ID authentication, we need to import this framework in our code. It is present
    in the framework library of Apple. Let''s see how to use the Local Authentication
    framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the Local Authentication framework as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This framework will work on Xcode 6 and above.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To use this API, we have to create a Local Authentication context, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, check whether Touch ID is available or not and whether it can be used
    for authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To display Touch ID, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Take a look at the following example of Touch ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to push your data to iCloud and how to save
    your private data, such as passwords, account numbers, ATM pins, and so on, to
    Keychain. We also focused on the Touch ID API, which was introduced in iOS 8\.
    In the next chapter, you will learn how to push your app on the App Store.
  prefs: []
  type: TYPE_NORMAL
