- en: Chapter 4. Payment Processing Workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the user authorizes the payment request, the *user app*, the *payment
    gateway*, and the *order processing web app* team up to securely deliver payment
    information to the issuing bank to transfer the funds from the user's account
    to the acquiring bank and to inform the user of the transaction status (that is,
    whether it is approved or declined).
  prefs: []
  type: TYPE_NORMAL
- en: 'The payment processing workflow is made up of three phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preprocess phase**: In this phase, the app gets a charge token from the payment
    gateway and sends the order information (including the charge token) to the order
    processing server'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Process phase**: In this phase, the order processing web app (running on
    your server) charges the user''s card through the payment gateway, updates the
    order and inventory data if the charge is successful, and sends the transaction
    status to the user app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Postprocess phase**: In this, the user app informs the user about the status
    of the transaction and dismisses the payment sheet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This chapter will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduce the actors and operations in the payment processing workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe each phase of the payment processing workflow and the steps taken within
    each phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As the payment gateway API does not run appropriately in the Simulator app in
    general, you must use an actual iOS device to test the payment processing workflow
    in your development environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Actors and operations in the processing workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *payment processing workflow* is the process by which the payment information
    generated by Apple Pay, from the payment request and the information the user
    entered into the payment sheet, is transmitted to your payment gateway and the
    card's issuing bank in order to charge the card and make the payment's funds available
    in your acquiring bank.
  prefs: []
  type: TYPE_NORMAL
- en: The workflow starts when the payment sheet calls the `paymentAuthorizationViewController:didAuthorizePayment:completion:`
    delegate method, providing the user app with the general order information (such
    as the shipping and billing information) and a payment token containing the encrypted
    payment data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This diagram depicts the actors, operations, and data that are part of the
    payment processing workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Actors and operations in the processing workflow](img/B05093_04_01.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'These are the operations and data that are part of the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**payment authorized**: The payment sheet tells the app that the user authorized
    the payment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**payment token**: The app provides the payment token to the payment gateway,
    which returns a **charge token**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order info and charge token**: the app sends information about the order
    and the charge token to the order processing web app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**charge card**: The web app charges the card through the payment gateway'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**approved or declined**: The payment gateway tells the web app whether the
    payment is approved or declined'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transaction result and order metadata**: The web app provides the user app
    with the result of the transaction and order information such as the order number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transaction result**: The app tells the payment sheet the result of the payment
    transaction—that is, whether it is approved or declined'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**payment sheet done**: The payment sheet tells the app that the transaction
    is complete'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dismiss**: The app dismisses the payment sheet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preprocess phase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Preprocess* phase, the user app uses the payment information that the
    payment sheet generates (in the form of a `PKPayment` object) as a result of the
    user's authorization. The app sends this information to the payment gateway and
    obtains a charge token (this item may be identified using different names, such
    as the registration ID, depending on the payment gateway; the order processing
    web app uses the charge token to charge the user's card). The app then packages
    the charge token along with pertinent information about the order (such as *billing
    information*, *shipping information*, *shipping method*, and so on) and sends
    it to the order processing web app on your server.
  prefs: []
  type: TYPE_NORMAL
- en: The following three sections describe the steps of the *Preprocess* phase.
  prefs: []
  type: TYPE_NORMAL
- en: The merchant app receives the payment token
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the user authorizes the payment request, the payment sheet calls the `paymentAuthorizationViewController:didAuthorizePayment:completion`:
    delegate method (which is part of the `PKPaymentAuthorizationViewControllerDelegate`
    protocol). This method provides the payment information (a `PKPayment` object)
    and a completion block.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the components of a `PKPayment` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '**payment token** (`PKPaymentToken`): This is generated when the user authorizes
    the payment request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**billing contact**: This is the billing contact information, including the
    e-mail address (`NSString`), name (`NSPersonNameComponents`), phone number (`CNPhoneNumber`),
    and postal address (`CNPostalAddress`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shipping contact**: This is the shipping contact information (which has the
    same components as the billing contact)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shipping method** (`PKShippingMethod`): This is the shipping method selected
    by the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are the components of a `PKPaymentToken` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '**payment data** (an encrypted `NSData` object): This is the data used by the
    payment gateway and issuing bank to charge the user''s card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**payment method** (`PKPaymentMethod`): This identifies the type of card used
    for the transaction, such as debit, credit, prepaid, or store card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transaction identifier** (`NSString`): This is a user-friendly identifier
    for the payment transaction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The example merchant app implementation of the `paymentAuthorizationViewController:didAuthorizePayment:completion:`
    method is listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The method calls `process_ApplePay_payment_with_Stripe:completion:` to start
    processing the payment. This method is tailored for a particular payment gateway.
    The `payment_info` parameter contains the payment token, and the shipping and
    billing information requested in the payment request. The `payment_completion`
    parameter defines the block that tells the payment sheet that the transaction
    is processed.
  prefs: []
  type: TYPE_NORMAL
- en: The merchant app receives the charge token from the payment gateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the app gets the payment information (a `PKPayment` object), it uses the
    payment gateway API to obtain a charge token, which is used by the order processing
    web app to charge the card. (Some payment gateways provide a native iOS API to
    issue the charge token; others require that the app makes an HTTP request to their
    payment server.) The APIs of some payment gateways operate on the payment token
    (`PKPaymentToken`), while others require the `PKPayment` object.
  prefs: []
  type: TYPE_NORMAL
- en: In the example merchant app, the `process_ApplePay_payment_with_Stripe:completion:`
    method of the `ProductCard` class calls the native iOS API provided by the Stripe
    payment gateway, which operates on the `PKPayment` object, returning a charge
    token (an `STPToken` object). Other payment gateways have a similar native or
    web API that provides the same functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the `process_ApplePay_payment_with_Stripe:completion`: method in the
    example merchant app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If the method that creates the charge token (`createTokenWithPayment:completion:`
    of the `STPAPIClient` class) reports an error, this method calls the payment completion
    block with the `PKPaymentAuthorizationStatusFailure` argument, which effectively
    ends the transaction. Otherwise, it calls the `backend_process_payment_info:gateway:charge_token:completion:`
    method, which is described in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The merchant app sends the order information to the order processing system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After obtaining the payment information (`PKPayment`) from the payment sheet
    and the charge token from the payment gateway, the app packages the charge token
    and other information required by the order processing web app and sends it to
    your server through an HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example merchant app, the `backend_process_payment_info:gateway:charge_token:completion:`
    method of the `ProductCard` class packages the required information into a JSON
    object (the payload) and sends it to the order processing web app through an HTTP
    `POST` request to the `http://red:12345/payment` unique resource identifier (URI).
    Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `payment_info` parameter is the `PKPayment` object provided by the payment
    sheet in the `paymentAuthorizationViewController:didAuthorizePayment:completion:`
    delegate method. The `gateway` parameter identifies the payment gateway the app
    uses to get the charge token; this could be useful for merchant apps that use
    more than one payment gateway but only one order processing web app. The `charge_token`
    parameter is the charge token obtained from the payment gateway API. The `payment_completion`
    parameter is the same completion block provided in the `paymentAuthorizationViewController:didAuthorizePayment:completion:`
    delegate method.
  prefs: []
  type: TYPE_NORMAL
- en: In the order processing web app, the handler for the `/payment` request takes
    a JSON object (which is stored in the `order_info_package_json` variable in the
    `backend_process_payment_info:` method) with the required information. In the
    example project's web app, this information is the name of the payment gateway,
    the information the payment processor requires to charge the payment card (the
    payment token, the payment amount, and the payment's currency), and the shipping
    details.
  prefs: []
  type: TYPE_NORMAL
- en: The process phase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Process* phase of the payment processing workflow, the order processing
    web app charges the user's card, updates the ordering and inventory data, and
    returns the transaction's status (that is, whether it is approved or declined)
    to the user app on the user's device as an HTTP response to the app's original
    HTTP request. This web app uses the payment gateway's server-side API to communicate
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example order processing web app (a Node.js web app), the HTTP request
    from the user app is handled by the middleware, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This middleware is divided into four steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Parse the request's JSON content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Charge the card using the API provided by the payment gateway; in this case,
    the `charge` function is provided in the `Stripe JavaScript` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the transaction is approved, create the order and update the quantity on
    hand of the ordered product.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send the transaction result (including the order number if the payment was approved)
    to the user's device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The postprocess phase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Postprocess* phase of the payment processing workflow, the app analyzes
    the response the order processing web app gave to the HTTP request that the app
    made in the *Preprocess* phase. In general terms, the response indicates whether
    the issuing bank approved or declined the payment. The response may also include
    an order number, order status, and other details that you deem useful for the
    user; the app may display a custom confirmation sheet containing this information.
    Finally, the app dismisses the payment sheet.
  prefs: []
  type: TYPE_NORMAL
- en: The following three sections describe the steps of the *Postprocess* phase.
  prefs: []
  type: TYPE_NORMAL
- en: The merchant app receives the transaction status from the order processing web
    app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The example user app receives the response from the order processing web app
    in a block in the `backend_process_payment_info:gateway:charge_token:completion:`
    method. The block''s arguments are an `NSURLResponse` object and an `NSData` object.
    The code that processes the response and returned data is highlighted here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If the HTTP response code is `200`, there were no server-side problems generating
    the response. In this case, the method transforms the JSON that makes up the returned
    content into an `NSDictionary` object (`result`), which contains several entries
    describing the transaction (refer to the *Process* Phase section for details).
    The method focuses on one entry in particular: the `"status"` key.'
  prefs: []
  type: TYPE_NORMAL
- en: The merchant app conveys the transaction status to the user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the example merchant app receives the response from the order processing
    web app (as a JSON object in the HTTP response payload), it determines whether
    the transaction was approved or declined by examining the returned data. Then,
    it calls the `payment_completion` block to inform the payment sheet of the transaction
    status so that the sheet can convey this information to the user. The highlighted
    code in this listing performs this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the value for the `"status"` key in the returned data is `"succeeded"`, it
    means that the payment was approved by the issuing bank, and the funds will be
    available in the acquiring bank sometime in the near future. In this case, the
    method calls the completion block the payment sheet provided (`payment_completion`)
    to indicate that the payment was approved with `PKPaymentAuthorizationStatusSuccess`
    as the argument. If the HTTP response code is not `200` or the value for the `"status"`
    key in the returned data is not `"succeeded"`, the method calls the completion
    block with `PKPaymentAuthorizationStatusFailure` as the argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calling the `payment_completion` block with `PKPaymentAuthorizationStatusSuccess`
    results in the payment sheet displaying a checkmark, indicating that the payment
    was approved, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The merchant app conveys the transaction status to the user](img/B05093_04_02.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can display an additional sheet providing more information about the transaction,
    such as the order number and estimated delivery date.
  prefs: []
  type: TYPE_NORMAL
- en: The merchant app dismisses the payment sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the payment sheet is done (either because the transaction was approved
    or declined, or because the user canceled the transaction), it calls the `paymentAuthorizationViewControllerDidFinish:`
    delegate method. Here, you can perform any necessary cleanup or app-state updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the example merchant app implements the delegate method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how Apple Pay payments are processed. The
    chapter has described each of the phases of the payment processing workflow, identifying
    the steps that make up each phase. The *Processing phase*, in particular, is where
    all the components are linked to securely charge the user's card and make the
    funds available in your acquiring bank.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter has based its explanations on the example project that accompanies
    this book. This project will be described in the next chapter.
  prefs: []
  type: TYPE_NORMAL
