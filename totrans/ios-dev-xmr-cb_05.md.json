["```swift\n    private class PickerModel : UIPickerViewModel\n    ```", "```swift\n    public PickerModel (PickerViewAppViewController controller) {\n      this.parentController = controller;\n      this.transportList = new List<string>() { \"On foot\", \"Bicycle\", \"Motorcycle\", \"Car\", \"Bus\" };\n      this.distanceList = new List<string>() { \"0.5\", \t\"1\", \"5\", \"10\", \"100\" };\n      this.unitList = new List<string>() { \"mi\", \"km\" };\n      this.transportSelected = this.transportList[0];\n      this.distanceSelected = this.distanceList[0];\n      this.unitSelected = this.unitList[0];\n    }\n    private PickerViewAppViewController parentController;\n    private List<string> transportList;\n    private List<string> distanceList;\n    private List<string> unitList;\n    string transportSelected;\n    string distanceSelected;\n    string unitSelected;\n    ```", "```swift\n    public override int GetComponentCount (UIPickerView picker) {\n      return 3;\n    }\n    public override int GetRowsInComponent(UIPickerView picker, int component) {\n      switch (component) {\n      case 0: \n        return this.transportList.Count;\n      case 1:\n        return this.distanceList.Count;\n      default:\n        return this.unitList.Count;\n      }\n    }\n    public override string GetTitle (UIPickerView picker, int row, int component) {\n      switch (component) {\n      case 0:\n        return this.transportList[row];\n      case 1:\n        return this.distanceList[row];\n      default:\n        return this.unitList[row];\n      }\n    }\n    public override void Selected (UIPickerView picker, int row, int component) {\n      switch (component) {\n        case 0:\n          this.transportSelected = this.transportList[row];\n        break;\n        case 1:\n          this.distanceSelected = this.distanceList[row];\n        break;\n        default:\n          this.unitSelected = this.unitList[row];\n        break;\n      }\n      this.parentController.lblStatus.Text = String.Format(\"Transport: {0}\\nDistance: {1}{2}\", this.transportSelected, this.distanceSelected, this.unitSelected);\n    } \n    ```", "```swift\n    this.pickerView.Model = new PickerModel (this);\n    ```", "```swift\nswitch (component)\n{\ncase 0:\n  return this.transportList[row];\ncase 1:\n  return this.distanceList[row];\ndefault:\n  return this.unitList[row];\n}\n```", "```swift\n    public class TableController : UITableViewController\n    ```", "```swift\n    private class TableSource : UITableViewSource\n    {\n      public TableSource ()\n      {\n        this.cellID = \"cellIdentifier\";\n        this.tableData = new Dictionary<int, string> () {\n          {0, \"Music\"},\n          {1, \"Videos\"},\n          {2, \"Images\"}\n        };\n      }\n      private readonly string cellID;\n      private Dictionary<int, string> tableData;\n      public override int RowsInSection (UITableView tableview, int section)\n      {\n        return this.tableData.Count;\n      }\n      public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)\n      {\n        int rowIndex = indexPath.Row;\n        UITableViewCell cell = tableView.DequeueReusableCell (this.cellID);\n        if (null == cell)\n        {\n          cell = new UITableViewCell (UITableViewCellStyle.Default, this.cellID);\n        }\n        cell.TextLabel.Text = this.tableData[rowIndex];\n        return cell;\n      }\n    }\n    ```", "```swift\n    this.TableView.Source = new TableSource ();\n    ```", "```swift\n    TableController tableController = new TableController();\n    UINavigationController navController = new UINavigationController(tableController);\n    window.RootViewController = navController;\n    ```", "```swift\nprivate class TableSource : UITableViewSource\n```", "```swift\nthis.cellID = \"cellIdentifier\";\nthis.tableData = new Dictionary<int, string> () {\n  {0, \"Music\"},\n  {1, \"Videos\"},\n  {2, \"Images\"}\n};\n```", "```swift\nreturn this.tableData.Count;\n```", "```swift\nUITableViewCell cell = tableView.DequeueReusableCell (this.cellID);\n```", "```swift\ncell = new UITableViewCell (UITableViewCellStyle.Default, this.cellID);\n```", "```swift\ncell.TextLabel.Text = this.tableData[rowIndex];\nreturn cell;\n```", "```swift\npublic override void RowSelected (UITableView tableView, NSIndexPath indexPath)\n{\n  tableView.DeselectRow (indexPath, true);\n}\n```", "```swift\n    [Register(\"CustomCell\")]\n    public partial class CustomCell : UITableViewCell {\n      public const string CELLID = \"CustomCell\";\n      public CustomCell (IntPtr handle) : base(handle) {}\n      [Outlet(\"lblTitle\")]\n      public UILabel LabelTitle { get; private set; }\n      [Outlet(\"imgView\")]\n      public UIImageView ImgView { get; private set; }\n    }\n    ```", "```swift\n    public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath) {\n      int rowIndex = indexPath.Row;\n      CustomCell cell = (CustomCell)tableView.DequeueReusableCell(CustomCell.CELLID);\n      cell.LabelTitle.Text = this.tableData[rowIndex];\n      return cell;\n    }\n    ```", "```swift\n    this.TableView.RegisterNibForCellReuse (UINib.FromName(\"CustomCell\", NSBundle.MainBundle), CustomCell.CellID);\n    ```", "```swift\n    TableController tableController = new TableController();\n    UINavigationController navController = new UINavigationController();\n    window.RootViewController = navController;\n    ```", "```swift\nthis.TableView.RegisterNibForCellReuse (UINib.FromName(\"CustomCell\", NSBundle.MainBundle), CustomCell.CellID);\n```", "```swift\nCustomCell cell = (CustomCell)tableView.DequeueReusableCell(CustomCell.CELLID);\n```", "```swift\npublic override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath) {\n  return 44f; // Or whatever height we want the particular row to have.\n}\n```", "```swift\nUINib nib = UINib.FromName(\"CustomCell\", NSBundle.MainBundle);\n```", "```swift\n// Inside our custom cell class:\nthis.ContentView.AddSubview(myView);\n```", "```swift\n    public List<string> TableData { get; private set; }\n    ```", "```swift\n    this.TableData = new List<string>() { \"Music\", \"Videos\", \"Images\" };\n    ```", "```swift\n    public override void CommitEditingStyle (UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath) {\n      if (editingStyle == UITableViewCellEditingStyle.Delete) {\n        this.tableData.RemoveAt(indexPath.Row);\n        tableView.DeleteRows(new NSIndexPath[] { indexPath }, UITableViewRowAnimation.Automatic);\n      }\n    }\n    ```", "```swift\n    UIBarButtonItem btnAdd;\n    public override ViewDidLoad() {\n      // â€¦ existing code here.\n      this.btnAdd = new UIBarButtonItem(UIBarButtonSystemItem.Add, (s, e) => {\n        TableSource tableSource = (TableSource)this.TableView.Source;\n        int itemCount = tableSource.TableData.Count;\n        tableSource.TableData.Add(string.Format(\"Inserted item: {0}\", itemCount));\n        this.TableView.InsertRows(new NSIndexPath[] { \n          NSIndexPath.FromRowSection(itemCount, 0)\n        }, UITableViewRowAnimation.Automatic);\n      };\n      this.NavigationItem.SetRightBarButtonItem(this.btnAdd, false);\n    }\n    ```", "```swift\nthis.tableData.RemoveAt(indexPath.Row);\ntableView.DeleteRows(new NSIndexPath[] { indexPath }, UITableViewRowAnimation.Automatic);\n```", "```swift\ntableSource.TableData.Add(string.Format(\"Inserted item: {0}\", itemCount));\nthis.TableView.InsertRows(new NSIndexPath[] { \n  NSIndexPath.FromRowSection(itemCount, 0)\n}, UITableViewRowAnimation.Automatic);\n```", "```swift\nthis.TableView.SetEditing(true, true);\n```", "```swift\npublic override UITableViewCellEditingStyle EditingStyleForRow(UITableView tableView, NSIndexPath indexPath) {\n  // To disable the editing style of a row:\n  // return UITableViewCellEditingStyle.None;\n  return UITableViewCellEditingStyle.Delete;\n}\n```", "```swift\n    public override int NumberOfSections (UITableView tableView)\n    {\n      return this.tableData.Count;\n    }\n    public override string TitleForHeader (UITableView tableView, int section)\n    {\n      return Convert.ToString (this.tableData[section][0]);\n    }\n    public override string[] SectionIndexTitles (UITableView tableView)\n    {\n      return this.tableData.Select (s => Convert.ToString (s[0])).Distinct ().ToArray ();\n    }\n    ```", "```swift\npublic override string TitleForHeader (UITableView tableView, int section)\n{\n  return Convert.ToString (this.tableData[section][0]);\n}\n```", "```swift\npublic override string[] SectionIndexTitles (UITableView tableView)\n{\n  return this.tableData.Select (s => Convert.ToString (s[0])).Distinct ().ToArray ();\n}\n```", "```swift\n    private List<string> filterDataList;\n    ```", "```swift\n    private class SearchDelegate : UISearchDisplayDelegate\n    {\n      public SearchDelegate (TableController controller)\n      {\n        this.parentController = controller;\n      }\n      private TableController parentController;\n      public override bool ShouldReloadForSearchString (UISearchDisplayController controller, string forSearchString)\n      {\n        this.parentController.filterDataList = this.parentController.tableData\n          .Where (s => s.ToLower ().Contains (forSearchString.ToLower ()))\n            .ToList ();\n        this.parentController.filterDataList.Sort (delegate(string firstStr, string secondStr) {\n            return firstStr.CompareTo (secondStr);\n          });\n        return true;\n      }\n    }\n    ```", "```swift\n    this.TableView.Source = new TableSource (this);\n    this.SearchDisplayController.SearchResultsSource = new TableSource(this);\n    this.SearchDisplayController.Delegate = new SearchDelegate(this);\n    ```", "```swift\nprivate class SearchDelegate : UISearchDisplayDelegate\n```", "```swift\nthis.parentController.filterDataList = this.parentController.tableData\n  .Where (s => s.ToLower ().Contains (forSearchString.ToLower ()))\n  .ToList ();\n```", "```swift\nthis.parentController.filterDataList.Sort (delegate(string firstStr, string secondStr) {\n  return firstStr.CompareTo (secondStr);\n});\nreturn true;\n```", "```swift\nthis.TableView.Source = new TableSource (this);\nthis.SearchDisplayController.SearchResultsSource = new TableSource(this);\n```", "```swift\npublic override int RowsInSection (UITableView tableview, int section)\n{\n  if (tableview.Equals (this.parentController.TableView))\n  {\n    return this.parentController.tableData.Count;\n  } else\n  {\n    return this.parentController.filterDataList.Count;\n  }\n}\n```", "```swift\nif (tableView.Equals (this.parentController.TableView))\n{\n  cell.TextLabel.Text = this.parentController.tableData[rowIndex];\n} else\n{\n  cell.TextLabel.Text = this.parentController.filterDataList[rowIndex];\n}\n```", "```swift\nthis.SearchDisplayController.SearchBar.SearchButtonClicked += (s, e) => {\n  this.SearchDisplayController.SetActive(false, true);\n};\n```", "```swift\n    public override void ViewDidAppear (bool animated)\n    {\n      NSUrl url = new NSUrl (\"http://software.tavlikos.com\");\n      NSUrlRequest urlRequest = new NSUrlRequest (url);\n      this.webView.LoadRequest (urlRequest);\n    }\n    ```", "```swift\nNSUrl url = new NSUrl (\"http://software.tavlikos.com\");\n```", "```swift\n    public class ImageCell : UICollectionViewCell {\n      public const string CELLID = \"ImageCell\";\n      public ImageCell(IntPtr handle) : base(handle) {\n        this.Initialize();\n      }\n      public UIImageView ImageView { get; private set; }\n      private void Initialize() {\n        this.ImageView = new UIImageView(this.ContentView.Bounds);\n        this.ContentView.AddSubview(this.ImageView);\n      }\n    }\n    ```", "```swift\n    private class CollectionSource : UICollectionViewSource {\n      public CollectionSource(CollectionViewAppViewController parentController) {\n        this.parentController = parentController;\n      }\n      private CollectionViewAppViewController parentController;\n      public override int GetItemsCount(UICollectionView collectionView, int section) {\n        return this.parentController.collectionData.Count;\n      }\n      public override UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath) {\n        ImageCell cell = (ImageCell)collectionView.DeqeueReusableCell((NSString)ImageCell.Cell, indexPath);\n        cell.ImageView.Image = this.parentController.collectionData[indexPath.Row];\n        return cell;\n      }\n    }\n    ```", "```swift\n    private List<UIImage> collectionData;\n    public override ViewDidLoad() {\n      base.ViewDidLoad();\n      this.collectionData = new List<UIImage>();\n      for (int i = 0; i < 30; i++) {\n        this.collectionData.Add(UIImage.FromBundle(\"shapes\"));\n      }\n      this.collectionView.RegisterClassForCell(typeof(ImageCell), (NSString)ImageCell.CELLID);\n      this.collectionView.Source = new CollectionSource(this);\n    }\n    ```", "```swift\nprivate class CollectionSource : UICollectionViewSource {\n```", "```swift\npublic override int GetItemsCount(UICollectionView collectionView, int section) {\n  return this.parentController.collectionData.Count;\n}\npublic override UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath) {\n  ImageCell cell = (ImageCell)collectionView.DeqeueReusableCell((NSString)ImageCell.Cell, indexPath);\n  cell.ImageView.Image = this.parentController.collectionData[indexPath.Row];\n  return cell;\n}\n```", "```swift\npublic class ImageCell : UICollectionViewCell\n```", "```swift\nthis.collectionView.RegisterClassForCell(typeof(ImageCell), (NSString)ImageCell.CELLID);\n```", "```swift\npublic class CollectionHeader : UICollectionReusableView\n```", "```swift\npublic override UICollectionReusableView GetViewForSupplementaryElement(UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath) {\n  CollectionHeader header = (CollectionHeader)collectionView.DequeueReusableSupplementaryView(UICollectionElementKindSection.Header, viewIdentifier, indexPath);\n  return header;\n}\n```", "```swift\nthis.collectionView.RegisterClassForSupplementaryView(typeof(CollectionHeader), UICollectionElementKindSection.Header, viewIdentifier);\n```", "```swift\n    UICollectionViewFlowLayout flowLayout = new UICollectionViewFlowLayout();\n    flowLayout.MinimumLineSpacing = 20f;\n    flowLayout.MinimumInteritemSpacing = 4f;\n    flowLayout.SectionInset = new UIEdgeInset(4f, 4f, 4f, 4f);\n    flowLayout.ItemSize = new SizeF(20f, 20f);\n    this.collectionView.CollectionViewLayout = flowLayout;\n    ```", "```swift\n[Export(\"collectionView:layout:sizeForItemAtIndexPath:\")]\npublic SizeF GetSizeForItem(UICollectionView collectionView, UICollectionViewLayout layout, NSIndexPath indexPath) {\n  if (indexPath.Item > 11 && indexPath.Item < 19) {\n    return new SizeF(40f, 40f);\n  } else {\n    return new SizeF(20f, 20f);\n  }\n}\n```"]