["```swift\nxcrun swiftc --help\n\n```", "```swift\nswiftc -emit-sil sourceFile.swift -o outputFile\n\n```", "```swift\nvar result = 0\nfor _ in 0...10000000 {\n  let a = Int(arc4random())\n  result += a\n}\n// Average Time - 0.162666518447804\n\nvar result = 0\nfor _ in 0...10000000 {\n  var a = Int(arc4random())\n  result += a\n}\n// Average Time - 0.160957522349781\n```", "```swift\nvar result = 0\nfor _ in 0...100000000 {\n  let a = Int(arc4random_uniform(10))\n  let b = a + Int(arc4random_uniform(10))\n  let c = b * Int(arc4random_uniform(10))\n\n  result += c\n}\n// Average Time - 12.6813167635002\n\nvar result = 0\nfor _ in 0...100000000 {\n  var a = Int(arc4random_uniform(10))\n  a += Int(arc4random_uniform(10))\n  a *= Int(arc4random_uniform(10))\n  result += a\n}\n// Average Time - 12.6813167635102\n```", "```swift\n[dog bark] // dog is a target and bark is a message\n```", "```swift\nobjc_msgSend(dog, @selector(bark))\n```", "```swift\nid objc_msgSend ( id obj, SEL _cmd, ... )\n{\n    Class c = object_getClass(obj);\n    IMP imp = CacheLookup(c, _cmd);\n    if (!imp) {\n        imp = class_getMethodImplementation(c, _cmd);\n    }\n    jump imp(obj, op, ...);\n}\n```", "```swift\ndog.bark()\n```", "```swift\nmethodImplementation = dog->class.vtable[indexOfBark] methodImplementation()\n```", "```swift\n_TFC12methodsCalls3Dog4barkfS0_FT_T_()\n//this method is equal to- methodsCalls.Dog.bark()\n```", "```swift\nrbx = __TFC11Performance3DogCfMS0_FT_S0_(); // Create dog instance\nr15 = *(*rbx + 0x48); //get the location of bark method\n(r15)(rbx); // call the method\n```", "```swift\nclass Number {\n\n  func add(x: Int, y: Int) -> Int {\n    return x + y\n  }\n}\n```", "```swift\nlet number = Number()\nmeasure(\"Sum\", times: 20) {\n  var result: Int = 0\n  for i in 0...1000000000 {\n    result += number.add(i, y: i + 1)\n  }\n  print(result)\n}\n```", "```swift\n//  KKNumber.h\n@import Foundation;\n\n@interface KKNumber : NSObject\n\n- (NSInteger)add:(NSInteger)num number:(NSInteger)num2;\n\n@end\n\n//  KKNumber.m\n#import \"KKNumber.h\"\n\n@implementation KKNumber\n\n- (NSInteger)add:(NSInteger)num number:(NSInteger)num2 {\n  return num + num2;\n}\n\n@end\n\nKKNumber *number = [[KKNumber alloc] init];\n\n[Measure measure:20 call:^{\n  NSInteger result = 0;\n  for (int i  = 0; i < 1000000000; ++i) {\n    result += [number add:i number:i + 1];\n  }\n  NSLog(@\"Result %ld\", (long)result);\n}];\n```", "```swift\ncall       __TZFC4test3Dog5speakfMS0_FT_T_\n```", "```swift\nclass Dog {\n  class func bark() {\n    print(\"Bark\")\n  }\n}\n\nclass BigDog: Dog {\n  override class func bark() {\n    print(\"big loud BARK\")\n  }\n}\n\nfunc getDog() -> Dog.Type {\n  return arc4random() % 2 == 0 ? Dog.self : BigDog.self\n}\n\nlet dog = getDog()\ndog.bark()\n```", "```swift\nrax = __TF4test6getDogFT_MCS_3Dog(); // call getDog()\n*__Tv4test3dogMCS_3Dog = rax;    // convert result to Dog.Type.\n(*(rax + 0x48))(rax);         // call bark method, vtable lookup\n```", "```swift\nDog.bark()\n\n// Pseudo assembly code\n__TTSf4d___TZFC4test3Dog4barkfMS0_FT_T_\n```", "```swift\nstatic func speak() {}\nfinal class func speak() {}\n```", "```swift\nclass Dog {\n\n  static func speak() {\n    print(\"I don't speak\")\n  }\n}\n\nDog.speak()\nBigDog.speak()\n```", "```swift\ncall       __TZFC4test3Dog5speakfMS0_FT_T_\n```", "```swift\nclass Dog {\n  var name = \"\"\n\nfunc changeName(name: String) {\n    self.name = name\n  }\n}\n\nlet someDog = Dog()\nsomeDog.changeName(\"Cocoa\")\n```", "```swift\nrbx = __TFC4test3DogCfMS0_FT_S0_(); // Create Dog()\n*__Tv4test7someDogCS_3Dog = rbx;  //Assign Dog instance to a someDog variable\nr15 = *(*rbx + 0x68);    // Get changeName method, vtable lookup\n(r15)(\"Coca\", 0x4, 0x0, rbx); // call method and pass arguments\n```", "```swift\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n}\n\nclass NumOperation {\n\n  func addI(x: Int, y: Int) -> Int\n  class func addC(x: Int, y: Int) -> Int\n  static func addS(x: Int, y: Int) -> Int\n}\n\nclass BigNumOperation: NumOperation {\n\n  override func addI(x: Int, y: Int) -> Int\n  override class func addC(x: Int, y: Int) -> Int\n}\n```", "```swift\nmeasure(\"addC\") {\n  var result = 0\n  for i in 0...2000000000 {\n    result += NumOperation.addC(i, y: i + 1)\n    // result += test different method\n  }\n  print(result)\n}\n```", "```swift\nr14 = 0x0;\ndo {\n  rbx = \"Function name Here\"(r14 + 0x1, r14) + rbx;\n  r14 = r14 + 0x1;\n} while (r14 != 0x3ea);\n```", "```swift\n      let num = NumOperation()\n      num.addI(10, y: 11)\n    ```", "```swift\n      let bigNum = BigNumOperation()\n      bigNum.addI()\n    ```", "```swift\nif (rax == 0x0) {\n  rax = _swift_getInitializedObjCClass (\n    objc_class__TtC4test12NumOperation);\n  *__TMLC4test12NumOperation = rax;\n}\nvar_78 = _swift_allocObject(rax, 0x10, 0x7);\n```", "```swift\nlet baseNumType = arc4random_uniform(2) == 1 ? \n  BigNumOperation.self : NumOperation.self\n\n  for i in 0...loopCount {\n    result += baseNumType.addC(i, y: i + 1)\n  }\n  print(result)\n```", "```swift\nclass Object {\n\n  func nothing() {  \n  }\n}\n\nlet object = Object()\nobject.nothing()\nobject.nothing()\n```", "```swift\nlet object = Object()\n```", "```swift\nclass Object {\n  let x: Int\n  let y: Int\n  let z: Int\n\n  init(x: Int) {\n    self.x = x\n    self.y = x * 2\n    self.z = y * 2\n  }\n\n  func nothing() {\n  }\n}\n```", "```swift\nfor i in 0...1_000_000 {\n  let object = Object(x: i)\n  object.nothing()\n  object.nothing()\n}\nprint(\"Done\")\n```", "```swift\nfor i in 0...1_000_000 {\n}\n```", "```swift\nfor i in 0...1_000_000 {\n  print(i)\n}\n```", "```swift\nmov        qword [ss:rbp+var_20], rbx                 \ninc        rbx                //increase i\nmov        rdi, r14          // save stack state for function call                  \nmov        rsi, r15                                   \ncall       __TFSs5printurFq_T_   //call print\ncmp        rbx, 0xf4241      // check loop condition i > 1_000_000\njne        0x100155fb0      // continue loop if condition is true\n```", "```swift\nfunc nothing() {\n  print(x + y + z)\n}\n```", "```swift\n// Initial Source Code\nfor i in 0...1_000 {\n  let object = Object(x: i)\n  object.nothing()\n  object.nothing()\n}\n\n// Optimized Code\nvar x = 0, y = 0, z = 0\nfor i in 0...1_000_000 {\n\n  x = i\n  y = x * 2\n  z = y * 2\n\n  print(x + y + z)\n  print(x + y + z)\n}\n```", "```swift\n//print(\"A\")\n```", "```swift\nfunc D_print(items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n  #if DEBUG\n    print(items, separator: separator, terminator: terminator)\n  #endif\n}\n```", "```swift\nfunc nothing() {\n  D_print(x + y + z)\n}\n```", "```swift\nclass Optimizable {\n  let x = 10\n}\n\n// Use-case\nlet o = Optimizable()\n```", "```swift\nclass Optimizable {\n  let x = 10\n  let a = \"\"\n}\n\n// Use-case\nlet o = Optimizable()\n```", "```swift\nif (*__TMLC4test11Optimizable == 0x0) {\n  *__TMLC4test11Optimizable = _swift_getInitializedObjCClass();\n  // Initialize objc_class__TtC4test11Optimizable\n}\nrax = _swift_allocObject();\n*(rax + 0x10) = 0xa;\n*(rax + 0x18) = \"\";\n```", "```swift\nobjc_class__TtC4test11Optimizable:\ndq         __TMmC4test11Optimizable; metaclass,\ndq         _OBJC_CLASS_$_SwiftObject; superclass\ndq         __objc_empty_cache; cache\ndq         __objc_empty_vtable; vtable\ndq         0x1001bf7e1; data (Swift class)\n```", "```swift\n    class NotOptimizableTypes {\n\n      let a: String = \"\"\n      let b: String? = nil\n      let c: Array<Int> = [1]\n      let obj = Object()\n      let d: Int -> Int = { $0 + 1 }\n\n      let e: Set<Int> = [1]\n      let f: Dictionary<Int, Int> = [1 : 1]\n    }\n    ```", "```swift\nstruct NotOptimizableInStruct {\n\n  let a: String = \"\"\n  let b: Array<Int> = [1]\n  let obj = Object()\n  let c: Int -> Int = { $0 + 1 }\n}\n```", "```swift\nclass Animal {\n\n  final var name: String  = \"\"\n  final func feed() {\n  }\n}\n```", "```swift\n@inline(__always) func someFunc () {\n}\n\n@inline(never) func someFunc () {\n}\n```", "```swift\nstruct NumberValue {\n  let x: Int\n}\n\nclass NumberReference {\n  let x: Int\n  init(x: Int) {\n    self.x = x\n  }\n}\n```", "```swift\nvar x = NumberValue(x: 1)\nvar xres = x.x\nx = NumberValue(x: 2)\nxres += x.x\n\nvar y = NumberReference(x: 10)\nvar yres = y.x\ny = NumberReference(x: 20)\nyres += y.x\n```", "```swift\n    rax = __TFV4test11NumberValueCfMS0_FT1xSi_S0_(0x1);\n    *__Tv4test1xVS_11NumberValue = rax;\n    *__Tv4test4xresSi = rax;\n\n    // NumberValue(x: 2)\n    rax = __TFV4test11NumberValueCfMS0_FT1xSi_S0_(0x2);\n    *__Tv4test1xVS_11NumberValue = rax;\n    *__Tv4test4xresSi = *__Tv4test4xresSi + rax;\n    ```", "```swift\nrax = __TFC4test15NumberReferenceCfMS0_FT1xSi_S0_(0xa);\n*__Tv4test1yCS_15NumberReference = rax;\n*__Tv4test4yresSi = *(rax + 0x10);\n```", "```swift\n// NumberReference(x: 10)\nrax = __TFC4test15NumberReferenceCfMS0_FT1xSi_S0_(0x14);\nrdi = *__Tv4test1yCS_15NumberReference;\n*__Tv4test1yCS_15NumberReference = rax;\n_swift_release(rdi, r14);\nrax = *__Tv4test1yCS_15NumberReference;\n*__Tv4test4yresSi = *__Tv4test4yresSi + *(rax + 0x10);\n```", "```swift\nvar result = NumberValue(x: 0)\nfor i in 0...1_000 {\n  var x = NumberValue(x: result.x + i)\n  result = x\n}\n\nprint(result)\n\nvar refResult = NumberReference(x: 0)\nfor i in 0...1_000 {\n  var x = NumberReference(x: refResult.x + i)\n  refResult = x\n}\nprint(refResult)\n```", "```swift\nNumberValue: 500500\nNumberReference: 500500\n\n```", "```swift\nvar_30 = 0x7a314;                          // save 500500\n__TFSs5printU__FQ_T_(var_30, 0x1001ba538); // call print\n```", "```swift\nif (r14 == 0x0) {\n  r14 = _swift_getInitializedObjCClass();\n  *__TMLC4test15NumberReference = r14;\n}\nr15 = _swift_allocObject();\n*(r15 + 0x10) = 0x0;\nrbx = 0x0;\ndo {\n  r13 = rbx + 0x1;\n  rbx = rbx + *(r15 + 0x10);\n  r12 = _swift_allocObject();\n  *(r12 + 0x10) = rbx;\n  _swift_release(r15, 0x18);\n  r15 = r12;\n  rbx = r13;\n} while (r13 != 0x3e9);\nvar_38 = r12;\n__TFSs5printU__FQ_T_(var_38, r14);\n```", "```swift\nNumberValue Time - 0.000438838000263786\nNumberReference Time - 8.49874957299835\n```", "```swift\nNumberValue Time - 4.31753185200068\nNumberReference Time - 15.4483174900015\n\n```", "```swift\nvar num = 10\nvar ar = [1, 2]\n\nfunc printNumber(x: UnsafePointer<Int>) {\n  x.memory\n}\n\nprintNumber(&num)\nprintNumber(ar)\n```", "```swift\nprintNumber(nil)\n```", "```swift\nExecution was interrupted, reason: EXC_BAD_ACCESS (code=1, address=0x0).\n\n```", "```swift\nfunc changeNumber(x: UnsafeMutablePointer<Int>) {\n  x.memory = 9901\n}\n\nchangeNumber(&num)\nchangeNumber(&ar)\nnum // 9901\nar // [9901, 2]\n```", "```swift\nvar num = 10\nvar ar = [1, 2]\n\nvar numPtr = UnsafeMutablePointer<Int>.initialize(&num)\nnumPtr(10)\nnum //10\n\nvar numArPtr = UnsafeMutablePointer<[Int]>.initialize(&ar)\nnumArPtr([1])\nar  //[1]\n```", "```swift\nvar numberPtr = UnsafeMutablePointer<Int>.alloc(1)\nnumberPtr.memory = 20\nnumberPtr.memory // 20\nnumberPtr.dealloc(1)\n```", "```swift\nlet count = 3_000_0\nmeasure(\"C Arrays\") {\n  let array = UnsafeMutablePointer<Int>.alloc(count)\n  for a in 0..<count {\n    array[a] = Int(arc4random())\n  }\n\n  // Sort\n  for _ in 0..<count {\n    for j in 0..<count - 1 {\n      if array[j] > array[j + 1] {\n        swap(&array[j], &array[j + 1])\n      }\n    }\n  }\n  array.dealloc(count)\n}\n```", "```swift\nlet count = 3_000_0\nmeasure(\"Swift Arrays\") {\n  var array = Array(count: count, repeatedValue: 0)\n\n  for i in 0..<count {\n    array[i] = Int(arc4random())\n  }\n\n  // Sort\n  for _ in 0..<count {\n    for j in 0..<count - 1 {\n      if array[j] > array[j + 1] {\n        swap(&array[j], &array[j + 1])\n      }\n    }\n  }\n}\n```", "```swift\nlet array = UnsafeMutablePointer<Int>.alloc(count)\n...\narray.dealloc(count)\n```", "```swift\n  var array = Array(count: count, repeatedValue: 0)\n```", "```swift\n  for _ in 0...100 {\n    _ = NSObject()\n  }\n```", "```swift\nrbx = 0x65;\n  do {\n    rax = [_OBJC_CLASS_$_NSObject allocWithZone:0x0];\n    rax = [rax init];\n    [rax release];\n    rbx = rbx - 0x1;\n    COND = rbx != 0x0;\n  } while (COND);\n```", "```swift\nclass MyNSObject: NSObject {\n}\n\nfor _ in 0...100 {\n  _ = MyNSObject()\n}\n```", "```swift\nclass MyObject {\n}\n\nfor _ in 0...100 {\n  _ = MyObject()\n}\n```", "```swift\nclass MyObject {\n  dynamic func getName() -> String {\n    return \"Name\"\n  }\n\n  dynamic var fullName: String {\n    return \"Full Name\"\n  }\n}\n\nlet object = MyObject()\nobject.fullName\nobject.getName()\n```"]