["```swift\n{\"employees\":[\n  {\"name\": \"James\", \"email\": \"james.notmyemail@gmail.com\"},\n  {\"name\": \"Lea\", \"email\": \"lea.dontemailme@gmail.com\"}\n]}\n```", "```swift\n<employees>\n    <employee>\n        <name>James</name>\n        <email>james.notmyemail@gmail.com</email>\n    </employee>\n    <employee>\n        <name>Lea</name>\n        <email>lea.dontemailme@gmail.com</email>\n    </employee>\n</employees>\n```", "```swift\n<uses-permission\n    android:name=\"android.permission.INTERNET\" />\n```", "```swift\nimplementation 'com.squareup.retrofit2:retrofit:(insert latest version)'\n```", "```swift\ninterface TheCatApiService {\n    @GET(\"images/search\")\n    fun searchImages(\n        @Query(\"limit\") limit: Int,\n        @Query(\"size\") format: String\n    ): Call<String>\n}\n```", "```swift\nval retrofit = Retrofit.Builder()\n    .baseUrl(\"https://api.thecatapi.com/v1/\").build()\nval theCatApiService =\n    retrofit.create(TheCatApiService::class.java)\n```", "```swift\nval retrofit = Retrofit.Builder()\n    .baseUrl(\"https://api.thecatapi.com/v1/\")\n    .addConverterFactory(ScalarsConverterFactory.create())\n    .build()\n```", "```swift\nimplementation 'com.squareup.retrofit2:converter-scalars:(insert latest version)'\n```", "```swift\n    <manifest xmlns:android=\n        \"http://schemas.android.com/apk/res/android\"\n        package=\"com.example.catagentprofile\">\n        <uses-permission\n        android:name=\"android.permission.INTERNET\" />\n        <application ...> ... </application>\n    </manifest>\n    ```", "```swift\n    dependencies {\n        ...\n        implementation\n            'com.squareup.retrofit2:retrofit:2.9.0'\n        implementation 'com.squareup.retrofit2:\n            converter-scalars:2.9.0'\n        ...\n    }\n    ```", "```swift\ndependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib\n        :$kotlin_version\"\n    ...\n    implementation\n        'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:\n        converter-scalars:2.9.0'\n    ...\n}\n```", "```swift\n    <TextView\n        android:id=\"@+id/main_server_response\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        ... />\n    ```", "```swift\n    interface TheCatApiService {\n        @GET(\"images/search\")\n        fun searchImages(\n            @Query(\"limit\") limit: Int,\n            @Query(\"size\") format: String\n        ) : Call<String>\n    }\n    ```", "```swift\n    class MainActivity : AppCompatActivity() {\n        private val retrofit by lazy {\n            Retrofit.Builder()\n                .baseUrl(\"https://api.thecatapi.com/v1/\")\n                .addConverterFactory(\n                    ScalarsConverterFactory.create()\n                ).build()\n        }\n        private val theCatApiService by lazy {\n            retrofit.create(TheCatApiService::class.java)\n        }\n        ...\n    }\n    ```", "```swift\n    class MainActivity : AppCompatActivity() {\n        private val serverResponseView: TextView by lazy {\n            findViewById(R.id.main_server_response)\n        }\n    ```", "```swift\n    override fun onCreate(savedInstanceState: Bundle?) {\n      ...\n    }\n    private fun getCatImageResponse() {\n      val call = theCatApiService.searchImages(1,\n        \"full\")\n      call.enqueue(object : Callback<String> {\n        override fun onFailure(call: Call<String>, t:\n        Throwable) {\n          Log.e(\"MainActivity\", \"Failed to get\n          search results\", t)\n        }\n        override fun onResponse(\n          call: Call<String>, response: Response<String>\n        ) {\n          if (response.isSuccessful) {\n            serverResponseView.text = response.body()\n                } else {\n            Log.e(\n              \"MainActivity\",\n              \"Failed to get search results\\n${\n                response.errorBody()?.string().orEmpty()\n              }\"\n            )\n          }\n        }\n      })\n    }\n    ```", "```swift\n    override fun onCreate(savedInstanceState: Bundle?) {\n        ...\n        getCatImageResponse()\n    }\n    ```", "```swift\nimplementation 'com.squareup.retrofit2:converter-moshi:2.9.0'\n```", "```swift\ndata class UserData(\n    @field:Json(name = \"fn\") val firstName: String,\n    @field:Json(name = \"last\") val lastName: String\n)\n```", "```swift\ndata class ImageResultData(\n    @field:Json(name = \"url\") val imageUrl: String,\n    val breeds: List<CatBreedData>\n)\ndata class CatBreedData(\n    val name: String,\n    val temperament: String\n)\n```", "```swift\n@GET(\"images/search\")\nfun searchImages(\n    @Query(\"limit\") limit: Int,\n    @Query(\"size\") format: String\n) : Call<List<ImageResultData>>\n```", "```swift\n    implementation 'com.squareup.retrofit2: retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2: \n    converter-moshi:2.9.0'\n    testImplementation 'junit:junit:4.13.2'\n    ```", "```swift\n    package com.example.catagentprofile.model\n    data class CatBreedData(\n        val name: String,\n        val temperament: String\n    )\n    ```", "```swift\n    package com.example.catagentprofile.model\n    import com.squareup.moshi.Json\n    data class ImageResultData(\n        @field:Json(name = \"url\") val imageUrl: String,\n        val breeds: List<CatBreedData>\n    )\n    ```", "```swift\n        @GET(\"images/search\")\n        fun searchImages(\n            @Query(\"limit\") limit: Int,\n            @Query(\"size\") format: String\n        ) : Call<List<ImageResultData>>\n    ```", "```swift\n        private val retrofit by lazy {\n            Retrofit.Builder()\n            .baseUrl(\"https://api.thecatapi.com/v1/\")\n            .addConverterFactory(MoshiConverterFactor\n    .create())\n            .build()\n        }\n    ```", "```swift\n    private fun getCatImageResponse() {\n      val call = theCatApiService.searchImages(1, \"full\")\n      call.enqueue(object : Callback<List<ImageResultData>> {\n        override fun onFailure(\n          call: Call<List<ImageResultData>>,\n          t: Throwable) {\n          Log.e(\"MainActivity\", \"Failed to get search \n          results\", t)\n          }\n          override fun onResponse(\n            call: Call<List<ImageResultData>>,\n            response: Response<List<ImageResultData>>\n          ) {\n            if (response.isSuccessful) {\n              val imageResults = response.body()\n              val firstImageUrl =\n                imageResults?.firstOrNull()?\n                .imageUrl ?: \"No URL\"\n              serverResponseView.text =\n                \"Image URL: $firstImageUrl\"\n            } else {\n              Log.e(\"MainActivity\", \"Failed to get search \n              results\\n${response.errorBody()?.string().orEmpty()}\"\n            )\n          }\n        }\n      })\n    }\n    ```", "```swift\ndependencies {\n    implementation 'com.github.bumptech.glide:glide:4.14.2'\n    ...\n}\n```", "```swift\ninterface ImageLoader {\n    fun loadImage(imageUrl: String, imageView: ImageView)\n}\n```", "```swift\nclass GlideImageLoader(private val context: Context) : ImageLoader {\n    override fun loadImage(imageUrl: String, imageView:\n    ImageView) {\n        Glide.with(context)\n            .load(imageUrl).centerCrop().into(imageView)\n    }\n}\n```", "```swift\n<TextView\n    ...\n    app:layout_constraintBottom_toTopOf=\"@+id/\n    main_profile_image\"\n    ... />\n<ImageView\n    android:id=\"@+id/main_profile_image\"\n    android:layout_width=\"150dp\"\n    android:layout_height=\"150dp\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\napp:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toBottomOf=\"@+id/\n    main_server_response\" />\n```", "```swift\nprivate val imageLoader: ImageLoader by lazy {\n    GlideImageLoader(this) }\n```", "```swift\nval firstImageUrl = imageResults?.firstOrNull()?.imageUrl\n    .orEmpty()\nif (!firstImageUrl.isBlank()) {\n    imageLoader.loadImage(firstImageUrl, profileImageView)\n} else {\n    Log.d(\"MainActivity\", \"Missing image URL\")\n}\n```", "```swift\n    dependencies {\n        ...\n        implementation 'com.github.bumptech.glide:glide:4.14.2'\n        ...\n    }\n    ```", "```swift\n    interface ImageLoader {\n        fun loadImage(imageUrl: String, imageView: ImageView)\n    }\n    ```", "```swift\n    class GlideImageLoader(private val context: Context) : ImageLoader {\n        override fun loadImage(imageUrl: String,\n        imageView: ImageView) {\n            Glide.with(context).load(imageUrl)\n                .centerCrop().into(imageView)\n        }\n    }\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <androidx.constraintlayout.widget.ConstraintLayout\n    ...>\n        <TextView\n            android:id=\"@+id/main_server_response\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Hello World!\"\n            app:layout_constraintBottom_toTopOf=\"@+id/\n                main_profile_image\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n        <ImageView\n            android:id=\"@+id/main_profile_image\"\n            android:layout_width=\"150dp\"\n            android:layout_height=\"150dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\n                \"@+id/main_server_response\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n    ```", "```swift\n    private val serverResponseView: TextView by lazy {\n        findViewById(R.id.main_server_response) }\n    private val profileImageView: ImageView by lazy {\n        findViewById(R.id.main_profile_image) }\n    ```", "```swift\n    private val imageLoader: ImageLoader by lazy {\n        GlideImageLoader(this) }\n    override fun onCreate(savedInstanceState: Bundle?) {\n    ```", "```swift\n    private fun getCatImageResponse() {\n      val call = theCatApiService.searchImages(1, \"full\")\n      call.enqueue(object : Callback<List<ImageResultData>> {\n        override fun onFailure(...) { ... }\n        override fun onResponse(...) {\n          if (response.isSuccessful) {\n            val imageResults = response.body()\n            val firstImageUrl = imageResults\n              ?.firstOrNull()?.imageUrl.orEmpty()\n            if (firstImageUrl.isNotBlank()) {\n              imageLoader.loadImage(\n                firstImageUrl, profileImageView)\n            } else {\n              Log.d(\"MainActivity\", \"Missing image URL\")\n            }\n            serverResponseView.text =\n              \"Image URL: $firstImageUrl\"\n          } else {\n            Log.e(\"MainActivity\", \"Failed to get search \n            results\\n${response.errorBody()?.string().\n            orEmpty()}\"\n            )\n          }\n        }\n      })\n    }\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android=\n      \"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\">\n        <TextView\n            android:id=\"@+id/main_agent_breed_label\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:padding=\"16dp\"\n            android:text=\"Agent breed:\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n        <TextView\n            android:id=\"@+id/main_agent_breed_value\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:paddingTop=\"16dp\"\n            app:layout_constraintStart_toEndOf=\n                \"@+id/main_agent_breed_label\"\n            app:layout_constraintTop_toTopOf=\n                \"@+id/main_agent_breed_label\" />\n        <ImageView\n            android:id=\"@+id/main_profile_image\"\n            android:layout_width=\"150dp\"\n            android:layout_height=\"150dp\"\n            android:layout_margin=\"16dp\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\n                \"@+id/main_agent_breed_label\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n    ```", "```swift\n    private val serverResponseView: TextView by lazy {\n        findViewById(R.id.main_server_response) }\n    ```", "```swift\nprivate val agentBreedView: TextView by lazy {\n    findViewById(R.id.main_agent_breed_value) }\n```", "```swift\n    private fun getCatImageResponse() {\n      val call = theCatApiService.searchImages(1, \"full\")\n      call.enqueue(object :\n      Callback<List<ImageResultData>> {\n        override fun onFailure(call:\n          Call<List<ImageResultData>>, t: Throwable) {\n          Log.e(\"MainActivity\", \"Failed to get search \n          results\", t)\n        }\n        override fun onResponse(\n          call: Call<List<ImageResultData>>,\n          response: Response<List<ImageResultData>>\n        ) {\n          if (response.isSuccessful) {\n            val imageResults = response.body()\n            val firstImageUrl = imageResults\n              ?.firstOrNull()?.imageUrl.orEmpty()\n            if (!firstImageUrl.isBlank()) {\n              imageLoader.loadImage(\n              firstImageUrl, profileImageView)\n            } else {\n              Log.d(\"MainActivity\", \"Missing image URL\")\n            }\n            agentBreedView.text = imageResults\n              ?.firstOrNull()?.breeds?.firstOrNull()\n              ?.name ?: \"Unknown\"\n          } else {\n            Log.e(\"MainActivity\", \"Failed to get search \n            results\\n${response.errorBody()?.string().\n            orEmpty()}\")\n          }\n        }\n      })\n    }\n    ```"]