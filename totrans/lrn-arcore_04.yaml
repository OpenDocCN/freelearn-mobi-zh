- en: ARCore on the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously, most AR development would need to be done on a native installed
    app. Except, with the advent of ARCore, Google has added support for AR development
    on the web, which, allows users to access AR applications through a browser. Of
    course, AR web applications may never be as robust or feature rich as a similar
    app done with Android or Unity. Yet ARCore extends its browser support to include
    iOS as well as Android. So if you need a cross-platform AR app, then you likely
    want to focus on ARCore web development.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we continue our work of setting up our environment for ARCore
    web development. Listed here are the main topics we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing WebARonARCore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the samples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging web apps on Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3D and three.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if you have no interest in web development, you should still review this
    chapter. We will be using elements from this chapter in the final project, [Chapter
    10](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml), *Mixing in Mixed Reality*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing WebARonARCore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to run ARCore from the web, we also need a browser that supports ARCore
    or ARKit. At the time of writing (beta preview), no browser supports ARCore or
    ARKit, and therefore, we need to install a special or experimental browser. The
    experimental browser we will install is called WebARonARCore.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Google ARCore is in the beta preview. If Google ARCore
    is in full release (1.0) and supported in a browser on your device, then you can
    bypass this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing WebARonARCore is quite simple and just requires you to point a browser
    on your device and install an APK. Follow the given steps to install WebARonARCore:'
  prefs: []
  type: TYPE_NORMAL
- en: Point a browser on your device to [https://github.com/google-ar/WebARonARCore](https://github.com/google-ar/WebARonARCore)
    or just Google `git WebARonARCore`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions in the `README` file to find and click on the WebARonARCore APK
    download link. This will download the APK to your device. If you get a security
    warning about the APK file type, just bypass it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Open after the file downloads. If your device is set to block installation
    of apps from unknown sources, you will get a warning. To bypass the warning, do
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap on Settings.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap on Unknown sources to enable it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Install to install the APK to your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the WebARonARCore app on your device and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap on Allow, through the security warnings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will launch the WebARCore experimental browser and point it at the same
    GitHub page we pulled the APK from. Leave the app open on your device as we will
    use it in an upcoming section. In the next section, we will learn to install Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: You can test your web development on an iOS device by installing WebARonARKit.
    Unfortunately, the code for WebARonARKit source must be built, compiled, and deployed
    manually. These steps are not covered in this book, but if you are interested
    in setting up for an iOS device, follow [https://github.com/google-ar/WebARonARKit](https://github.com/google-ar/WebARonARKit).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike the other platforms, we don''t need to install anything more on the
    device to use an AR web app. However, we do need a way to serve up our web application
    pages to a device. Typically, this is done with a web server, like IIS, Tomcat,
    Jetty, Node, or others. For our purpose, we just need a simple HTTP server to
    serve up static HTML content. Fortunately, Node provides a package just for running
    a simple HTTP server from a folder. In order to get this package, we first need
    to install Node. Follow the given steps to install Node:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the **Long Term Support** (**LTS**) version of Node.js
    from [Nodejs.org](http://nodejs.org). Just follow the instructions on the page
    and installer. Ensure that you set the `PATH` when installing to Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Node.js is a lightweight, non-blocking, and event-driven JavaScript runtime
    built on top of Chrome's JavaScript runtime. It has become hugely popular due
    to its massive library of modules or packages. We are installing Node.js just
    to use a Node.js package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Command Prompt or shell and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you have everything installed correctly, you should see a message showing
    the `npm` usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Node Package Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Node Package Manager** (**npm**) is a command-line tool used to install the
    packages for Node.js. We will use this tool to download and install our simple
    HTTP server. Follow the given steps to install the HTTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From your device, open Command Prompt or shell and enter this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will download and install `http-server` as a global tool. Now, let's test
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use your Command Prompt or shell and change your folder to `Android`, like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run `http-server` from the `Android` folder by entering the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see a list of endpoint URLs. Choose an endpoint that is on the same
    subnet as your Wi-Fi, the same subnet as your device. Copy or write down the text
    of the endpoint, as shown in the following excerpt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40a69ca4-c713-4fbb-9759-19c44cf7b720.png)'
  prefs: []
  type: TYPE_IMG
- en: Picking an endpoint URL
  prefs: []
  type: TYPE_NORMAL
- en: Open a web browser on your device and enter the endpoint you selected in the
    preceding step. After you start making connections, you will see the log output
    shown in the preceding screen excerpt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are unable to connect with your device, ensure that you are entering
    the full endpoint including the protocol, `http://192.168.1.118:9999` in the example,
    but your endpoint will likely be different. Ensure that you allow any exceptions
    in your firewall for port `9999`. Alternatively, you can turn off your firewall
    for testing. Just don't leave it off.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the `Android` folder listing in your browser, as we have configured
    our server to just list the contents of the `Android` folder. The following is
    an example of how this will look in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d5d6dae-e1c7-41a6-a915-549ab5c6fbfc.png)'
  prefs: []
  type: TYPE_IMG
- en: Browser showing the Android folder listing
  prefs: []
  type: TYPE_NORMAL
- en: Good! Now we have a way to simply server up any static web pages we need. In
    the next section, we will pull down the web ARCore examples and review them.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the samples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have an AR-enabled web browser, we can proceed to exploring some
    examples. Follow the instructions in the mentioned steps to explore the samples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Command Prompt or shell to the `Android` folder and enter this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that your `http-server` web browser is running from the `Android` folder.
    If you need to start the server again, just run the command from the last exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Point your web AR-enabled browser (WebARCore) on your device to a valid endpoint
    URL. Again, check the last exercise if you forgot how to do this. If the page
    goes black or is unresponsive, you may have to reset the app. Just shut down the
    WebARCore browser app and restart it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse to the `three.ar.js/examples/` folder. Inside this folder, you will
    find a set of example HTML pages of AR apps developed with `three.js` and `three.ar.js`.
    The following table outlines each of the examples, with a description of what
    they do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Page** | **Description** | **Concepts** |'
  prefs: []
  type: TYPE_TB
- en: '| `boilerplate.html` | A simple project for building on | Basic |'
  prefs: []
  type: TYPE_TB
- en: '| `graffiti.html` | Touch interaction and drawing in AR | Touch, environment
    |'
  prefs: []
  type: TYPE_TB
- en: '| `record-at-camera.html` | Record 3D spatial audio at a point | Touch, spatial
    audio |'
  prefs: []
  type: TYPE_TB
- en: '| `reticle.html` | Tracks the pose of a surface | Motion, pose tracking – environment
    |'
  prefs: []
  type: TYPE_TB
- en: '| `spawn-at-camera.html` | Touch spawn an object at the camera position | Touch,
    environment |'
  prefs: []
  type: TYPE_TB
- en: '| `spawn-at-surface.html` | Touch spawn object on a identified surface or plane
    | Touch, environment |'
  prefs: []
  type: TYPE_TB
- en: '| `surfaces.html` | Identifies surfaces or planes in the environment | Environment
    |'
  prefs: []
  type: TYPE_TB
- en: At the time of writing these were the examples available. There likely will
    be some new samples added that have some of the newer features or other ways of
    doing things. Be sure to check your folder and spend some time exploring each
    of those samples.
  prefs: []
  type: TYPE_NORMAL
- en: Browse through each of the samples on your device. These samples are excellent
    examples of the concepts we will cover in the later chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the screen goes black while running the WebAR browser, then just force close
    the app and restart it. What typically happens is that Chrome's **Developer tools** (**DevTools**)
    and the app get out of sync and just need to be restarted.
  prefs: []
  type: TYPE_NORMAL
- en: We now have an HTTP server running on our development machine serving up web
    AR apps to our device. This is great, but how will we edit the code and debug?
    Being able to debug code will also be critical to our success when we start writing
    new code. Therefore, in the next section, we will learn how to set up remote web
    debugging to an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging web apps on Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned at the end of the last section, debugging/logging will be critical
    for us when we start writing new code. If you have ever tried to fix an issue
    blind without a log or ability to debug, then you will quickly appreciate the
    value of a good debugger. As it so happens, Chrome has a great set of tools that
    will help us do just that. Work through the following steps to set up remote web
    debugging on your Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect your device to your computer with a USB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Command Prompt window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Validate your connection by entering this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The output of that command should show your connected device. You may be able
    to get away with bypassing this step, but you can avoid plenty of frustration
    later by just running this simple check.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that all instances of the Chrome browser on your Android device are shut
    down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open an instance of the WebARCore browser. Remember that this browser is just
    an experimental extension of Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the open browser, navigate to one of the samples. It really doesn't matter
    which just yet. This example will use `spawn-at-camera.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting Chrome Developer tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, believe it or not, we are connected and ready to debug at this point. Now,
    we just need to set up our debugging tools on the development machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Chrome on your development machine. If you don't have Chrome installed,
    you will need to do this. Of course, if you are reading a book on Google ARCore,
    you likely already have Chrome installed, right?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Chrome Developer tools by pressing *command* + *option* + *I* (Mac),
    *Ctrl* + *Shift* + *I* (Windows, Linux), or from the menu: More tools | Developer
    tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From Chrome''s Developer tools menu, select More tools | Remote devices, as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42c433e0-1784-4d5b-afc5-75e40855d0de.png)'
  prefs: []
  type: TYPE_IMG
- en: Locating the remote debugging menu option
  prefs: []
  type: TYPE_NORMAL
- en: 'A new tab, Remote devices, will open and should show your connected device,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9b0e8bfc-a2e5-4f6f-800a-49ac690bca03.png)'
  prefs: []
  type: TYPE_IMG
- en: The Remote devices tab showing the connected device and page
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the tab, you should see the address you are currently pointing
    to on your device. If this is not the case, there may be a text box allowing you
    to manually enter it and then connect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Inspect button. This will open a new Chrome window with Developers
    Tools on one side and an image of your device on the other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugging with Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, if you have experience using the Chrome DevTools, you are good
    to start debugging. Of course, if this is all relatively new to you, follow the
    given steps to learn how to debug in DevTools:'
  prefs: []
  type: TYPE_NORMAL
- en: Switch your view to the Chrome window we opened in the last section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Sources tab of the DevTools window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `spawn-at-camera.html` or the one you used in your testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down through the HTML and JavaScript until you see the `onClick()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the line number 229 (229 in the example, but yours may differ), just
    left of the highlighted code to set a break point. This is also demonstrated in
    the following excerpt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e3862532-e405-482e-892d-d63ce9f4ebaa.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting a JavaScript break point
  prefs: []
  type: TYPE_NORMAL
- en: Switch back to the device that is running the app. Touch on the screen to spawn
    an object. When you do this, your app should display a Paused in debugger message at
    the top and then graciously freeze.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to your development machine and the Developer Tools window. You
    will see the app paused at your break point. Now, you can use your mouse to hover
    over code to inspect variables and anything else you may be debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feel free to explore setting other break points and even stepping through the
    code. We will leave it up to the reader to explore more of the DevTools functionality
    on their own.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can remote debug an AR web app running on your device. This also completes
    most of our initial basic setup. We can now get into the details of working with
    AR in 3D, starting in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 3D and three.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We live in a 3D world. Therefore, for us to convincingly fool our users into
    believing that their reality is being augmented or altered, we need to work with
    their world in three dimensions. Now, each of the platforms we are working with
    (web, Android, and Unity), all have 3D engines we will be using. In the case of
    Unity, it is the 3D engine and without a doubt the easiest to use with little
    or no programming or math knowledge required. Android and OpenGL ES is a distant
    second, as it will require some knowledge of 3D math. The third and last option
    is our 3D engine for web, which will be `three.js` library. The `three.js` will
    be the most difficult platform to work with when using 3D, which makes it our
    perfect candidate to start with.
  prefs: []
  type: TYPE_NORMAL
- en: The Unreal platform, as we mentioned in [Chapter 1](0286da30-b952-456e-9a59-75cd7a909933.xhtml), *Getting
    Started*, is another ARCore platform option. Unreal is similar to Unity in the
    manner that it provides great tools to work in 3D, although those tools are more
    technical and will require understanding of 3D maths to be successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike in the previous chapters, we will not do just a simple text change to
    test our ability to change and deploy code. Instead, in this section, we will
    modify the 3D object we spawn. This will be a good dive into the deep end of 3D
    and get us ready for the rest of the book. Let''s get started by following the
    given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a text editor such as Notepad, Notepad++, vi, or something else to open
    the `spawn-at-camera.html` file located in the `Android/three.ar.js/example` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down in the code until you see the following section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Comment out or delete the entire section of code. Use `//` to convert a line
    as a comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the new code just before the highlighted line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This first new line replaces the geometry with a torus. The `TorusGeometry`
    is a helper function for creating a torus. There are plenty of other helpers for
    creating many other geometries or even loading mesh objects. The second line creates
    a new basic single color material. Then, it wraps that material around the geometry
    and creates our object (mesh), which for now, we will keep calling cube. If you
    feel the need to change the variable name, then by all means go ahead, but do
    be careful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your code changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to your device and refresh the page. Then, tap the screen to spawn
    the new object. At first, you may think that nothing worked; walk away and move
    around. You will likely only see the edges of a very large bright yellow torus.
    If you still have some issues, just ensure that you saved changes and try reconnecting
    everything.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we have a number of problems to understand and solve, as outlined
    in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: The object is too big or out of scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The object is orientated or rotated wrong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The object needs to be moved or transformed to just in front of the camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to change the color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding left- or right-handed coordinate systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While a good understanding of 3D math will certainly be helpful, it isn''t
    entirely essential. All you need to know, for now, is that we define an object
    in three dimensions (hence, 3D) using a common notation of x, y, and z, where
    x is the position along the *x* axis, y along *y* axis, and z along *z* axis.
    Furthermore, we define the position of these axes using a term called left-handed
    or right-handed coordinate system, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a465e4c5-b6ca-4006-a40e-1aa9ad2ebc5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Definition of left-handed and right-handed coordinate systems
  prefs: []
  type: TYPE_NORMAL
- en: Hold up your left hand, as shown in the preceding diagram, and point your middle
    finger at the screen. Your thumb now points to positive x, your index finger points
    to positive y, and your middle finger to positive z. Many times, to avoid confusion
    between left- or right-hand systems, we will just denote the axis by the direction
    they are pointing. Thus, right is used for positive x, up for positive y, and
    forward for positive z. Fortunately, for all of our platforms, we will use the
    left-hand coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: 3D scale, rotation, and transformation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing we need to understand is how to apply scale, rotation, and transformation
    to an object and thus solve the problems we identified. Without getting deep into
    the math, let''s just understand what those terms mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scale**: It allows us to define how large or small an object is. In our example,
    our object is too big and thus we need to scale the object down. We will learn
    how to do that shortly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rotation**: It defines how an object is orientated or posed. We will use
    both terms interchangeably. Rotation is a bit more complex, and we won''t worry
    about it for this example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transformation**: It defines the position of an object, where a position
    of 0,0,0 represents the origin. In our example, we want to position the torus
    slightly in front of the camera.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We use a mathematical concept called a matrix to apply operations of scale,
    rotation, and transformation to a 3D object in 3D space. The cool thing about
    matrices is that they can represent all three operations of scale, rotation, and
    transformation simultaneously. However, this also means that we have to be careful
    about the order in which we apply these operations. Let''s get back into the code
    and see how we can apply each of these operations to our torus:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your text editor to the `spawn-at-camera.html` example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll to the highlighted code and enter the following lines right after it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Comment out the line of code beneath that, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Save your work and run the app in your device. You can now see how we move and
    scale our spawned object. Feel free to try and move, scale, and even rotate the
    object further.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As for changing the color from that blinding yellow to something else more
    appealing, we leave that up to the reader for their homework. Here''s the line
    of code that needs to be changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you struggled with any of the material in the last section, you really should
    pick up a book, read a blog/wiki, or take a course on 3D and/or 3D math. Another
    good option for learning 3D concepts is working with 3D modeling software like
    Blender, SketchUp, Max, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We will, of course, cover more 3D concepts throughout the book and in much more
    detail in the later chapters. For now though, if this is your first exposure to
    3D programming, welcome aboard and get ready for a bumpy ride.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we completed the last of our major setup tasks for the ARCore
    environments we will explore in later chapters. We first jumped in and installed
    the prerequisite AR-enabled experimental Chrome browser. Then, we downloaded and
    installed Node.js as a requirement for running a simple HTTP server. This gave
    us the ability to pull the examples from the `three.ar.js` source onto our local
    machine. We then used the HTTP server to serve up the sample AR web-enabled applications
    to our device. Next, we tackled the problem of debugging JavaScript code remotely
    to an Android device. After that, we took a brief tour of 3D and explored ways
    in which we could scale and transform 3D objects in our AR scenes. Then, we finally
    learned that good knowledge of 3D concepts and/or math is essential for our success
    as AR developers.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are done with the essential setup tasks, it is time to move on to
    building AR applications of our own. In the next chapter, we will explore the
    AR concept of motion tracking using our web platform.
  prefs: []
  type: TYPE_NORMAL
