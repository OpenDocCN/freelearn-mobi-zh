- en: ARCore on the Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARCore 在网页上
- en: Previously, most AR development would need to be done on a native installed
    app. Except, with the advent of ARCore, Google has added support for AR development
    on the web, which, allows users to access AR applications through a browser. Of
    course, AR web applications may never be as robust or feature rich as a similar
    app done with Android or Unity. Yet ARCore extends its browser support to include
    iOS as well as Android. So if you need a cross-platform AR app, then you likely
    want to focus on ARCore web development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，大多数AR开发都需要在本地安装的应用中进行。然而，随着ARCore的出现，谷歌增加了对网页AR开发的支持，这使用户可以通过浏览器访问AR应用。当然，AR网页应用可能永远不会像使用Android或Unity开发的类似应用那样强大或功能丰富。但ARCore扩展了其浏览器支持，包括iOS和Android。因此，如果您需要一个跨平台AR应用，那么您可能需要专注于ARCore网页开发。
- en: 'In this chapter, we continue our work of setting up our environment for ARCore
    web development. Listed here are the main topics we will cover in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们继续为ARCore网页开发设置我们的环境。以下是本章我们将涵盖的主要主题：
- en: Installing WebARonARCore
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 WebARonARCore
- en: Installing Node.js
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Node.js
- en: Exploring the samples
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索示例
- en: Debugging web apps on Android
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android上调试网页应用
- en: 3D and three.js
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D和three.js
- en: Even if you have no interest in web development, you should still review this
    chapter. We will be using elements from this chapter in the final project, [Chapter
    10](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml), *Mixing in Mixed Reality*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您对网页开发没有兴趣，您也应该阅读这一章。我们将在最终项目[第10章](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml)，*混合现实中的混合*中使用这一章的内容。
- en: Installing WebARonARCore
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 WebARonARCore
- en: In order to run ARCore from the web, we also need a browser that supports ARCore
    or ARKit. At the time of writing (beta preview), no browser supports ARCore or
    ARKit, and therefore, we need to install a special or experimental browser. The
    experimental browser we will install is called WebARonARCore.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从网页上运行ARCore，我们还需要一个支持ARCore或ARKit的浏览器。截至撰写时（beta预览），没有浏览器支持ARCore或ARKit，因此我们需要安装一个特殊或实验性浏览器。我们将安装的实验性浏览器称为WebARonARCore。
- en: At the time of writing, Google ARCore is in the beta preview. If Google ARCore
    is in full release (1.0) and supported in a browser on your device, then you can
    bypass this section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写时，Google ARCore处于beta预览阶段。如果Google ARCore已全面发布（1.0）并在您的设备上的浏览器中得到支持，那么您可以跳过这一部分。
- en: 'Installing WebARonARCore is quite simple and just requires you to point a browser
    on your device and install an APK. Follow the given steps to install WebARonARCore:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安装WebARonARCore非常简单，只需在您的设备上打开浏览器并安装一个APK。按照以下步骤安装WebARonARCore：
- en: Point a browser on your device to [https://github.com/google-ar/WebARonARCore](https://github.com/google-ar/WebARonARCore)
    or just Google `git WebARonARCore`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的设备上的浏览器指向[https://github.com/google-ar/WebARonARCore](https://github.com/google-ar/WebARonARCore)或直接在Google上搜索`git
    WebARonARCore`。
- en: Follow the instructions in the `README` file to find and click on the WebARonARCore APK
    download link. This will download the APK to your device. If you get a security
    warning about the APK file type, just bypass it.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照README文件中的说明查找并点击WebARonARCore APK下载链接。这将下载APK到您的设备。如果您收到关于APK文件类型的警告，只需忽略它即可。
- en: 'Click on Open after the file downloads. If your device is set to block installation
    of apps from unknown sources, you will get a warning. To bypass the warning, do
    this:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件下载后，点击“打开”。如果您的设备设置为阻止从未知来源安装应用，您将收到警告。为了绕过警告，请执行以下操作：
- en: Tap on Settings.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“设置”。
- en: Tap on Unknown sources to enable it.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“未知来源”以启用它。
- en: Click on Install to install the APK to your device.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“安装”以将APK安装到您的设备。
- en: Locate the WebARonARCore app on your device and open it.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的设备上找到WebARonARCore应用并打开它。
- en: Tap on Allow, through the security warnings.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“允许”，通过安全警告。
- en: This will launch the WebARCore experimental browser and point it at the same
    GitHub page we pulled the APK from. Leave the app open on your device as we will
    use it in an upcoming section. In the next section, we will learn to install Node.js.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动WebARCore实验性浏览器并将其指向我们从那里拉取APK的同一GitHub页面。请保持应用在您的设备上打开，因为我们将在接下来的部分中使用它。在下一节中，我们将学习如何安装Node.js。
- en: You can test your web development on an iOS device by installing WebARonARKit.
    Unfortunately, the code for WebARonARKit source must be built, compiled, and deployed
    manually. These steps are not covered in this book, but if you are interested
    in setting up for an iOS device, follow [https://github.com/google-ar/WebARonARKit](https://github.com/google-ar/WebARonARKit).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过安装 WebARonARKit 在 iOS 设备上测试您的网页开发。不幸的是，WebARonARKit 源代码必须手动构建、编译和部署。这些步骤在本书中没有涵盖，但如果您对为
    iOS 设备设置感兴趣，请遵循 [https://github.com/google-ar/WebARonARKit](https://github.com/google-ar/WebARonARKit)。
- en: Installing Node.js
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Node.js
- en: 'Unlike the other platforms, we don''t need to install anything more on the
    device to use an AR web app. However, we do need a way to serve up our web application
    pages to a device. Typically, this is done with a web server, like IIS, Tomcat,
    Jetty, Node, or others. For our purpose, we just need a simple HTTP server to
    serve up static HTML content. Fortunately, Node provides a package just for running
    a simple HTTP server from a folder. In order to get this package, we first need
    to install Node. Follow the given steps to install Node:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他平台不同，我们不需要在设备上安装任何其他东西来使用 AR 网页应用。然而，我们确实需要一个方法来将我们的网页应用程序页面提供给设备。通常，这是通过一个网页服务器，如
    IIS、Tomcat、Jetty、Node 或其他服务器来完成的。对于我们的目的，我们只需要一个简单的 HTTP 服务器来提供静态 HTML 内容。幸运的是，Node
    提供了一个仅用于从文件夹运行简单 HTTP 服务器的包。为了获取此包，我们首先需要安装 Node。按照以下步骤安装 Node：
- en: Download and install the **Long Term Support** (**LTS**) version of Node.js
    from [Nodejs.org](http://nodejs.org). Just follow the instructions on the page
    and installer. Ensure that you set the `PATH` when installing to Windows.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [Nodejs.org](http://nodejs.org) 下载并安装 Node.js 的 **长期支持** (**LTS**) 版本。只需遵循页面上的说明和安装程序。确保在安装到
    Windows 时设置 `PATH`。
- en: Node.js is a lightweight, non-blocking, and event-driven JavaScript runtime
    built on top of Chrome's JavaScript runtime. It has become hugely popular due
    to its massive library of modules or packages. We are installing Node.js just
    to use a Node.js package.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是一个基于 Chrome 的 JavaScript 运行时之上的轻量级、非阻塞和事件驱动的 JavaScript 运行时。由于其庞大的模块或包库，它已经变得非常流行。我们安装
    Node.js 只是为了使用 Node.js 包。
- en: 'Open Command Prompt or shell and enter the following:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符或 shell，并输入以下内容：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you have everything installed correctly, you should see a message showing
    the `npm` usage.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切安装正确，你应该会看到一个显示 `npm` 用法的消息。
- en: The Node Package Manager
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点包管理器
- en: '**Node Package Manager** (**npm**) is a command-line tool used to install the
    packages for Node.js. We will use this tool to download and install our simple
    HTTP server. Follow the given steps to install the HTTP server:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Node 包管理器** (**npm**) 是一个用于安装 Node.js 包的命令行工具。我们将使用此工具下载并安装我们的简单 HTTP 服务器。按照以下步骤安装
    HTTP 服务器：'
- en: 'From your device, open Command Prompt or shell and enter this:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的设备打开命令提示符或 shell，并输入以下内容：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will download and install `http-server` as a global tool. Now, let's test
    it.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将下载并安装 `http-server` 作为全局工具。现在，让我们测试它。
- en: 'Use your Command Prompt or shell and change your folder to `Android`, like
    this:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的命令提示符或 shell，将文件夹更改为 `Android`，如下所示：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run `http-server` from the `Android` folder by entering the following:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Android` 文件夹中运行 `http-server`，输入以下内容：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will see a list of endpoint URLs. Choose an endpoint that is on the same
    subnet as your Wi-Fi, the same subnet as your device. Copy or write down the text
    of the endpoint, as shown in the following excerpt:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个端点 URL 的列表。选择一个与您的 Wi-Fi 相同子网、与您的设备相同的子网的端点。复制或写下端点的文本，如下面的摘录所示：
- en: '![](img/40a69ca4-c713-4fbb-9759-19c44cf7b720.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40a69ca4-c713-4fbb-9759-19c44cf7b720.png)'
- en: Picking an endpoint URL
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 选择端点 URL
- en: Open a web browser on your device and enter the endpoint you selected in the
    preceding step. After you start making connections, you will see the log output
    shown in the preceding screen excerpt.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的设备上打开网页浏览器，并输入上一步骤中选择的端点。开始建立连接后，你将看到前面屏幕截图中显示的日志输出。
- en: If you are unable to connect with your device, ensure that you are entering
    the full endpoint including the protocol, `http://192.168.1.118:9999` in the example,
    but your endpoint will likely be different. Ensure that you allow any exceptions
    in your firewall for port `9999`. Alternatively, you can turn off your firewall
    for testing. Just don't leave it off.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法与您的设备连接，请确保您输入了完整的端点，包括协议，例如示例中的 `http://192.168.1.118:9999`，但您的端点可能不同。确保您允许防火墙中端口
    `9999` 的任何异常。或者，您可以关闭防火墙进行测试。只是不要将其关闭。
- en: 'You should see the `Android` folder listing in your browser, as we have configured
    our server to just list the contents of the `Android` folder. The following is
    an example of how this will look in your browser:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该在浏览器中看到`Android`文件夹的列表，因为我们已经配置了我们的服务器，只列出`Android`文件夹的内容。以下是在您的浏览器中它将看起来如何的示例：
- en: '![](img/7d5d6dae-e1c7-41a6-a915-549ab5c6fbfc.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d5d6dae-e1c7-41a6-a915-549ab5c6fbfc.png)'
- en: Browser showing the Android folder listing
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器显示Android文件夹列表
- en: Good! Now we have a way to simply server up any static web pages we need. In
    the next section, we will pull down the web ARCore examples and review them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！现在我们有一种简单的方式来提供我们需要的任何静态网页。在下一节中，我们将下载Web ARCore示例并对其进行审查。
- en: Exploring the samples
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索样本
- en: 'Now that we have an AR-enabled web browser, we can proceed to exploring some
    examples. Follow the instructions in the mentioned steps to explore the samples:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了支持AR的网页浏览器，我们可以继续探索一些示例。按照提到的步骤中的说明来探索样本：
- en: 'Open Command Prompt or shell to the `Android` folder and enter this:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符或shell到`Android`文件夹，并输入以下内容：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ensure that your `http-server` web browser is running from the `Android` folder.
    If you need to start the server again, just run the command from the last exercise.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的`http-server`网页浏览器从`Android`文件夹中运行。如果您需要再次启动服务器，只需运行最后一个练习中的命令。
- en: Point your web AR-enabled browser (WebARCore) on your device to a valid endpoint
    URL. Again, check the last exercise if you forgot how to do this. If the page
    goes black or is unresponsive, you may have to reset the app. Just shut down the
    WebARCore browser app and restart it.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的设备上支持Web AR的浏览器（WebARCore）指向一个有效的端点URL。再次检查最后一个练习，以防您忘记了如何操作。如果页面变黑或无响应，您可能需要重置应用程序。只需关闭WebARCore浏览器应用并重新启动。
- en: 'Browse to the `three.ar.js/examples/` folder. Inside this folder, you will
    find a set of example HTML pages of AR apps developed with `three.js` and `three.ar.js`.
    The following table outlines each of the examples, with a description of what
    they do:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到`three.ar.js/examples/`文件夹。在这个文件夹中，您将找到使用`three.js`和`three.ar.js`开发的AR应用程序的示例HTML页面集合。以下表格概述了每个示例，以及它们的功能描述：
- en: '| **Page** | **Description** | **Concepts** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **页面** | **描述** | **概念** |'
- en: '| `boilerplate.html` | A simple project for building on | Basic |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `boilerplate.html` | 一个用于构建的简单项目 | 基础 |'
- en: '| `graffiti.html` | Touch interaction and drawing in AR | Touch, environment
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `graffiti.html` | 在AR中进行触摸交互和绘图 | 触摸，环境 |'
- en: '| `record-at-camera.html` | Record 3D spatial audio at a point | Touch, spatial
    audio |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `record-at-camera.html` | 在一个点上录制3D空间音频 | 触摸，空间音频 |'
- en: '| `reticle.html` | Tracks the pose of a surface | Motion, pose tracking – environment
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `reticle.html` | 跟踪表面的姿态 | 运动，姿态跟踪 – 环境 |'
- en: '| `spawn-at-camera.html` | Touch spawn an object at the camera position | Touch,
    environment |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `spawn-at-camera.html` | 在相机位置触摸生成对象 | 触摸，环境 |'
- en: '| `spawn-at-surface.html` | Touch spawn object on a identified surface or plane
    | Touch, environment |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `spawn-at-surface.html` | 在识别的表面或平面上触摸生成对象 | 触摸，环境 |'
- en: '| `surfaces.html` | Identifies surfaces or planes in the environment | Environment
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `surfaces.html` | 识别环境中的表面或平面 | 环境 |'
- en: At the time of writing these were the examples available. There likely will
    be some new samples added that have some of the newer features or other ways of
    doing things. Be sure to check your folder and spend some time exploring each
    of those samples.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，这些是可用的示例。可能还会添加一些具有一些新功能或其他操作方式的新的样本。请确保检查您的文件夹，并花些时间探索每个样本。
- en: Browse through each of the samples on your device. These samples are excellent
    examples of the concepts we will cover in the later chapters.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的设备上浏览每个样本。这些样本是我们将在后续章节中涵盖的概念的优秀示例。
- en: If the screen goes black while running the WebAR browser, then just force close
    the app and restart it. What typically happens is that Chrome's **Developer tools** (**DevTools**)
    and the app get out of sync and just need to be restarted.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行WebAR浏览器时屏幕变黑，只需强制关闭应用并重新启动。通常发生的情况是Chrome的**开发者工具**（**DevTools**）和应用程序失去了同步，只需要重新启动。
- en: We now have an HTTP server running on our development machine serving up web
    AR apps to our device. This is great, but how will we edit the code and debug?
    Being able to debug code will also be critical to our success when we start writing
    new code. Therefore, in the next section, we will learn how to set up remote web
    debugging to an Android device.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在我们的开发机器上运行一个 HTTP 服务器，为我们的设备提供 Web AR 应用。这很好，但我们如何编辑代码和调试呢？能够调试代码在我们开始编写新代码时也将对我们成功至关重要。因此，在下一节中，我们将学习如何设置远程
    Web 调试到 Android 设备。
- en: Debugging web apps on Android
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Android 上调试 Web 应用
- en: 'As we mentioned at the end of the last section, debugging/logging will be critical
    for us when we start writing new code. If you have ever tried to fix an issue
    blind without a log or ability to debug, then you will quickly appreciate the
    value of a good debugger. As it so happens, Chrome has a great set of tools that
    will help us do just that. Work through the following steps to set up remote web
    debugging on your Android device:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在上一节末尾提到的，当我们开始编写新代码时，调试/记录对我们来说将至关重要。如果你曾经尝试在没有日志或调试能力的情况下盲目修复问题，那么你很快就会欣赏到一个好的调试器的价值。碰巧的是，Chrome
    有一个很棒的工具集，可以帮助我们做到这一点。按照以下步骤在你的 Android 设备上设置远程 Web 调试：
- en: Connect your device to your computer with a USB.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 USB 将您的设备连接到您的计算机。
- en: Open Command Prompt window.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符窗口。
- en: 'Validate your connection by entering this:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下内容来验证您的连接：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The output of that command should show your connected device. You may be able
    to get away with bypassing this step, but you can avoid plenty of frustration
    later by just running this simple check.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那个命令的输出应该显示你的连接设备。你可能可以绕过这一步，但通过运行这个简单的检查，你可以避免以后的很多挫折。
- en: Ensure that all instances of the Chrome browser on your Android device are shut
    down.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的 Android 设备上所有 Chrome 浏览器实例都已关闭。
- en: Open an instance of the WebARCore browser. Remember that this browser is just
    an experimental extension of Chrome.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 WebARCore 浏览器的一个实例。记住，这个浏览器只是 Chrome 的一个实验性扩展。
- en: Using the open browser, navigate to one of the samples. It really doesn't matter
    which just yet. This example will use `spawn-at-camera.html`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用打开的浏览器导航到一个示例。现在还真的不重要。这个例子将使用 `spawn-at-camera.html`。
- en: Connecting Chrome Developer tools
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接 Chrome 开发者工具
- en: 'So, believe it or not, we are connected and ready to debug at this point. Now,
    we just need to set up our debugging tools on the development machine:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，信不信由你，我们现在已经连接并准备好调试了。现在，我们只需要在开发机器上设置我们的调试工具：
- en: Open Chrome on your development machine. If you don't have Chrome installed,
    you will need to do this. Of course, if you are reading a book on Google ARCore,
    you likely already have Chrome installed, right?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的开发机器上打开 Chrome。如果你没有安装 Chrome，你需要做这个。当然，如果你正在阅读一本关于 Google ARCore 的书，你很可能已经安装了
    Chrome，对吧？
- en: Open the Chrome Developer tools by pressing *command* + *option* + *I* (Mac),
    *Ctrl* + *Shift* + *I* (Windows, Linux), or from the menu: More tools | Developer
    tools.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *command* + *option* + *I*（Mac），*Ctrl* + *Shift* + *I*（Windows、Linux）或从菜单中选择更多工具
    | 开发者工具来打开 Chrome 开发者工具。
- en: 'From Chrome''s Developer tools menu, select More tools | Remote devices, as
    shown:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Chrome 的开发者工具菜单中选择更多工具 | 远程设备，如图所示：
- en: '![](img/42c433e0-1784-4d5b-afc5-75e40855d0de.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/42c433e0-1784-4d5b-afc5-75e40855d0de.png)'
- en: Locating the remote debugging menu option
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 定位远程调试菜单选项
- en: 'A new tab, Remote devices, will open and should show your connected device,
    as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会打开一个新的标签页，远程设备，并应显示你的连接设备，如下所示：
- en: '![](img/9b0e8bfc-a2e5-4f6f-800a-49ac690bca03.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9b0e8bfc-a2e5-4f6f-800a-49ac690bca03.png)'
- en: The Remote devices tab showing the connected device and page
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 显示连接设备和页面的远程设备标签
- en: At the bottom of the tab, you should see the address you are currently pointing
    to on your device. If this is not the case, there may be a text box allowing you
    to manually enter it and then connect.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签页底部，你应该能看到您当前在设备上指向的地址。如果不是这样，可能有一个文本框允许您手动输入它，然后连接。
- en: Click on the Inspect button. This will open a new Chrome window with Developers
    Tools on one side and an image of your device on the other.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击检查按钮。这将打开一个新的 Chrome 窗口，一侧是开发者工具，另一侧是您的设备图像。
- en: Debugging with Chrome
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Chrome 调试
- en: 'At this point, if you have experience using the Chrome DevTools, you are good
    to start debugging. Of course, if this is all relatively new to you, follow the
    given steps to learn how to debug in DevTools:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，如果你有使用 Chrome DevTools 的经验，你可以开始调试了。当然，如果你对这一切都相对陌生，请按照以下步骤学习如何在 DevTools
    中调试：
- en: Switch your view to the Chrome window we opened in the last section.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到上一节中我们打开的Chrome窗口。
- en: Click on the Sources tab of the DevTools window.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击DevTools窗口的“源”标签。
- en: Select `spawn-at-camera.html` or the one you used in your testing.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`spawn-at-camera.html`或你在测试中使用的文件。
- en: Scroll down through the HTML and JavaScript until you see the `onClick()` function.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTML和JavaScript中向下滚动，直到看到`onClick()`函数。
- en: 'Click on the line number 229 (229 in the example, but yours may differ), just
    left of the highlighted code to set a break point. This is also demonstrated in
    the following excerpt:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击行号229（示例中为229，但你的可能不同），在突出显示的代码左侧设置断点。这也在以下摘录中演示：
- en: '![](img/e3862532-e405-482e-892d-d63ce9f4ebaa.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e3862532-e405-482e-892d-d63ce9f4ebaa.png)'
- en: Setting a JavaScript break point
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 设置JavaScript断点
- en: Switch back to the device that is running the app. Touch on the screen to spawn
    an object. When you do this, your app should display a Paused in debugger message at
    the top and then graciously freeze.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回运行应用的设备。触摸屏幕以生成一个对象。当你这样做时，你的应用应该在顶部显示“调试器暂停”消息，然后优雅地冻结。
- en: Switch back to your development machine and the Developer Tools window. You
    will see the app paused at your break point. Now, you can use your mouse to hover
    over code to inspect variables and anything else you may be debugging.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回你的开发机器和开发者工具窗口。你会看到应用在断点处暂停。现在，你可以使用鼠标悬停在代码上以检查变量和任何其他你可能正在调试的内容。
- en: Feel free to explore setting other break points and even stepping through the
    code. We will leave it up to the reader to explore more of the DevTools functionality
    on their own.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 随意探索设置其他断点，甚至逐步执行代码。我们将把探索更多DevTools功能留给读者自行探索。
- en: Now you can remote debug an AR web app running on your device. This also completes
    most of our initial basic setup. We can now get into the details of working with
    AR in 3D, starting in the next section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以远程调试在设备上运行的AR Web应用。这也完成了我们的大部分初始基本设置。我们现在可以深入了解在3D中与AR合作，从下一节开始。
- en: 3D and three.js
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D和three.js
- en: We live in a 3D world. Therefore, for us to convincingly fool our users into
    believing that their reality is being augmented or altered, we need to work with
    their world in three dimensions. Now, each of the platforms we are working with
    (web, Android, and Unity), all have 3D engines we will be using. In the case of
    Unity, it is the 3D engine and without a doubt the easiest to use with little
    or no programming or math knowledge required. Android and OpenGL ES is a distant
    second, as it will require some knowledge of 3D math. The third and last option
    is our 3D engine for web, which will be `three.js` library. The `three.js` will
    be the most difficult platform to work with when using 3D, which makes it our
    perfect candidate to start with.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活在一个三维世界中。因此，为了让我们用户相信他们的现实正在被增强或改变，我们需要以三维的方式与他们所处的世界合作。现在，我们正在合作的每个平台（Web、Android和Unity），都有我们将要使用的3D引擎。在Unity的情况下，它是3D引擎，毫无疑问，它是最容易使用的，几乎不需要编程或数学知识。Android和OpenGL
    ES是第二选择，因为它将需要一些3D数学知识。第三和最后一个选择是我们用于Web的3D引擎，它将是`three.js`库。`three.js`将是使用3D时最难的平台，这使得它成为我们理想的起点。
- en: The Unreal platform, as we mentioned in [Chapter 1](0286da30-b952-456e-9a59-75cd7a909933.xhtml), *Getting
    Started*, is another ARCore platform option. Unreal is similar to Unity in the
    manner that it provides great tools to work in 3D, although those tools are more
    technical and will require understanding of 3D maths to be successful.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第1章](0286da30-b952-456e-9a59-75cd7a909933.xhtml)“入门”中提到的，Unreal平台是另一个ARCore平台选项。Unreal在提供用于3D工作的优秀工具方面与Unity相似，尽管这些工具更技术化，并且需要理解3D数学才能成功。
- en: 'Unlike in the previous chapters, we will not do just a simple text change to
    test our ability to change and deploy code. Instead, in this section, we will
    modify the 3D object we spawn. This will be a good dive into the deep end of 3D
    and get us ready for the rest of the book. Let''s get started by following the
    given steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章不同，我们不会仅仅进行简单的文本更改来测试我们更改和部署代码的能力。相反，在本节中，我们将修改我们生成的3D对象。这将是一次深入3D的好机会，并为我们准备本书的其余部分。让我们按照以下步骤开始：
- en: Use a text editor such as Notepad, Notepad++, vi, or something else to open
    the `spawn-at-camera.html` file located in the `Android/three.ar.js/example` folder.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用记事本、Notepad++、vi或其他文本编辑器打开位于`Android/three.ar.js/example`文件夹中的`spawn-at-camera.html`文件。
- en: 'Scroll down in the code until you see the following section:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码中向下滚动，直到看到以下部分：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Comment out or delete the entire section of code. Use `//` to convert a line
    as a comment.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将整个代码部分注释掉或删除。使用 `//` 将一行转换为注释。
- en: 'Enter the new code just before the highlighted line:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在高亮行之前输入新代码：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This first new line replaces the geometry with a torus. The `TorusGeometry`
    is a helper function for creating a torus. There are plenty of other helpers for
    creating many other geometries or even loading mesh objects. The second line creates
    a new basic single color material. Then, it wraps that material around the geometry
    and creates our object (mesh), which for now, we will keep calling cube. If you
    feel the need to change the variable name, then by all means go ahead, but do
    be careful.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这第一行新代码将几何形状替换为环面。`TorusGeometry` 是一个用于创建环面的辅助函数。还有许多其他辅助函数用于创建许多其他几何形状或甚至加载网格对象。第二行创建了一个新的基本单色材质。然后，它将这个材质包裹在几何形状周围，并创建我们的对象（网格），现在我们仍然将其称为立方体。如果你觉得需要更改变量名，那么请随意进行更改，但请务必小心。
- en: Save your code changes.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的代码更改。
- en: Switch back to your device and refresh the page. Then, tap the screen to spawn
    the new object. At first, you may think that nothing worked; walk away and move
    around. You will likely only see the edges of a very large bright yellow torus.
    If you still have some issues, just ensure that you saved changes and try reconnecting
    everything.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回你的设备并刷新页面。然后，轻触屏幕以生成新对象。一开始，你可能认为没有任何效果；走开并四处移动。你可能会看到一个非常大的亮黄色环面的边缘。如果你仍然有一些问题，只需确保你已保存更改并尝试重新连接一切。
- en: 'At this point, we have a number of problems to understand and solve, as outlined
    in the following list:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们有一系列问题需要理解和解决，如下列所示：
- en: The object is too big or out of scale
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物体太大或比例不合适
- en: The object is orientated or rotated wrong
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物体的方向或旋转错误
- en: The object needs to be moved or transformed to just in front of the camera
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要将物体移动或变换到摄像头正前方
- en: We want to change the color
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想要改变颜色
- en: Understanding left- or right-handed coordinate systems
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解左手系或右手系坐标系统
- en: 'While a good understanding of 3D math will certainly be helpful, it isn''t
    entirely essential. All you need to know, for now, is that we define an object
    in three dimensions (hence, 3D) using a common notation of x, y, and z, where
    x is the position along the *x* axis, y along *y* axis, and z along *z* axis.
    Furthermore, we define the position of these axes using a term called left-handed
    or right-handed coordinate system, as shown in the following diagram:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对3D数学的良好理解当然会有所帮助，但它并不是完全必要的。目前你所需要知道的是，我们使用x、y和z的通用符号定义三维（3D）中的对象，其中x是沿*x*轴的位置，y是沿*y*轴，z是沿*z*轴。此外，我们使用左手系或右手系坐标系统这个术语来定义这些轴的位置，如下面的图所示：
- en: '![](img/a465e4c5-b6ca-4006-a40e-1aa9ad2ebc5d.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a465e4c5-b6ca-4006-a40e-1aa9ad2ebc5d.png)'
- en: Definition of left-handed and right-handed coordinate systems
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 左手系和右手系坐标系统的定义
- en: Hold up your left hand, as shown in the preceding diagram, and point your middle
    finger at the screen. Your thumb now points to positive x, your index finger points
    to positive y, and your middle finger to positive z. Many times, to avoid confusion
    between left- or right-hand systems, we will just denote the axis by the direction
    they are pointing. Thus, right is used for positive x, up for positive y, and
    forward for positive z. Fortunately, for all of our platforms, we will use the
    left-hand coordinate system.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 按照前面的图示，举起你的左手，并将你的中指指向屏幕。现在，你的大拇指指向正x轴，食指指向正y轴，中指指向正z轴。很多时候，为了避免左手系或右手系之间的混淆，我们只需用它们指向的方向来表示轴。因此，右用于正x轴，上用于正y轴，前用于正z轴。幸运的是，对于我们的所有平台，我们将使用左手系坐标系统。
- en: 3D scale, rotation, and transformation
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D缩放、旋转和变换
- en: 'The next thing we need to understand is how to apply scale, rotation, and transformation
    to an object and thus solve the problems we identified. Without getting deep into
    the math, let''s just understand what those terms mean:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要理解的是如何将缩放、旋转和变换应用于对象，从而解决我们确定的问题。不深入数学，让我们只理解这些术语的含义：
- en: '**Scale**: It allows us to define how large or small an object is. In our example,
    our object is too big and thus we need to scale the object down. We will learn
    how to do that shortly.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：它允许我们定义对象的大小。在我们的例子中，我们的对象太大，因此我们需要缩小对象。我们很快就会学习如何做到这一点。'
- en: '**Rotation**: It defines how an object is orientated or posed. We will use
    both terms interchangeably. Rotation is a bit more complex, and we won''t worry
    about it for this example.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转**：它定义了物体的方向或姿态。我们将这两个术语交替使用。旋转稍微复杂一些，我们在这个例子中不会担心它。'
- en: '**Transformation**: It defines the position of an object, where a position
    of 0,0,0 represents the origin. In our example, we want to position the torus
    slightly in front of the camera.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变换**：它定义了物体的位置，其中位置0,0,0代表原点。在我们的例子中，我们希望将环面稍微放置在相机前方。'
- en: 'We use a mathematical concept called a matrix to apply operations of scale,
    rotation, and transformation to a 3D object in 3D space. The cool thing about
    matrices is that they can represent all three operations of scale, rotation, and
    transformation simultaneously. However, this also means that we have to be careful
    about the order in which we apply these operations. Let''s get back into the code
    and see how we can apply each of these operations to our torus:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个称为矩阵的数学概念来在三维空间中对三维物体应用缩放、旋转和变换操作。矩阵的酷之处在于它们可以同时表示缩放、旋转和变换的所有三种操作。然而，这也意味着我们必须注意这些操作的顺序。让我们回到代码中，看看我们如何将每个操作应用到我们的环面上：
- en: Open up your text editor to the `spawn-at-camera.html` example.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的文本编辑器到`spawn-at-camera.html`示例。
- en: 'Scroll to the highlighted code and enter the following lines right after it:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到高亮显示的代码，并在其后输入以下行：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Comment out the line of code beneath that, like this:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下面那行代码注释掉，就像这样：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save your work and run the app in your device. You can now see how we move and
    scale our spawned object. Feel free to try and move, scale, and even rotate the
    object further.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的工作，并在你的设备上运行应用程序。你现在可以看到我们如何移动和缩放生成的对象。你可以随意尝试进一步移动、缩放甚至旋转对象。
- en: 'As for changing the color from that blinding yellow to something else more
    appealing, we leave that up to the reader for their homework. Here''s the line
    of code that needs to be changed:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 至于将颜色从那刺眼的黄色改为更吸引人的颜色，我们留给读者作为他们的家庭作业。以下是需要更改的代码行：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you struggled with any of the material in the last section, you really should
    pick up a book, read a blog/wiki, or take a course on 3D and/or 3D math. Another
    good option for learning 3D concepts is working with 3D modeling software like
    Blender, SketchUp, Max, and so on.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在上一个部分中遇到了任何困难，你真的应该找一本书，阅读博客/维基百科，或者参加3D和/或3D数学的课程。学习3D概念的另一个好方法是使用Blender、SketchUp、Max等3D建模软件。
- en: We will, of course, cover more 3D concepts throughout the book and in much more
    detail in the later chapters. For now though, if this is your first exposure to
    3D programming, welcome aboard and get ready for a bumpy ride.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们将在本书中以及在后几章中更详细地介绍更多的3D概念。不过，如果你是第一次接触3D编程，欢迎加入我们，并准备好迎接一段颠簸的旅程。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we completed the last of our major setup tasks for the ARCore
    environments we will explore in later chapters. We first jumped in and installed
    the prerequisite AR-enabled experimental Chrome browser. Then, we downloaded and
    installed Node.js as a requirement for running a simple HTTP server. This gave
    us the ability to pull the examples from the `three.ar.js` source onto our local
    machine. We then used the HTTP server to serve up the sample AR web-enabled applications
    to our device. Next, we tackled the problem of debugging JavaScript code remotely
    to an Android device. After that, we took a brief tour of 3D and explored ways
    in which we could scale and transform 3D objects in our AR scenes. Then, we finally
    learned that good knowledge of 3D concepts and/or math is essential for our success
    as AR developers.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们完成了我们在后续章节中将要探索的ARCore环境的主要设置任务中的最后一个。我们首先跳进去安装了预置的AR启用实验性Chrome浏览器。然后，我们下载并安装了Node.js，作为运行简单HTTP服务器的需求。这使得我们能够将`three.ar.js`源中的示例拉到我们的本地机器上。然后，我们使用HTTP服务器为我们设备上的样本AR网络启用应用程序提供服务。接下来，我们解决了远程调试JavaScript代码到Android设备的问题。在那之后，我们简要地游览了3D世界，并探讨了在AR场景中缩放和变换3D对象的方法。然后，我们最终了解到，对3D概念和/或数学的良好了解对于我们的AR开发者成功至关重要。
- en: Now that we are done with the essential setup tasks, it is time to move on to
    building AR applications of our own. In the next chapter, we will explore the
    AR concept of motion tracking using our web platform.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了基本的设置任务，是时候开始构建我们自己的AR应用程序了。在下一章中，我们将探索使用我们的网络平台进行运动跟踪的AR概念。
