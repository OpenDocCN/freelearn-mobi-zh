["```kt\n      compile \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\" \n```", "```kt\n    class ToDoApp:Application() { \n      override fun onCreate() { \n        super.onCreate() \n        instance = this \n      } \n\n      companion object { \n        var instance:ToDoApp? = null \n      } \n    } \n```", "```kt\n    <application \n      android:allowBackup=\"true\" \n      android:icon=\"@mipmap/ic_launcher\" \n      android:label=\"@string/app_name\" \n      android:roundIcon=\"@mipmap/ic_launcher_round\" \n      android:supportsRtl=\"true\" \n      android:theme=\"@style/AppTheme\" \n android:name=\".ToDoApp\"> \n      .... \n    </application> \n```", "```kt\n    abstract class BaseActivity : AppCompatActivity() { \n       final override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n        onCreateBaseActivity(savedInstanceState) \n       } \n abstract fun onCreateBaseActivity(savedInstanceState: Bundle?) \n    } \n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <android.support.design.widget.CoordinatorLayout \n\n     android:layout_width=\"match_parent\" \n     android:layout_height=\"match_parent\" \n     tools:context=\"com.rivuchk.todoapplication.\n     todolist.TodoListActivity\"> \n\n     <android.support.design.widget.AppBarLayout \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"wrap_content\" \n       android:theme=\"@style/AppTheme.AppBarOverlay\"> \n\n     <android.support.v7.widget.Toolbar \n       android:id=\"@+id/toolbar\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"?attr/actionBarSize\" \n       android:background=\"?attr/colorPrimary\" \n       app:popupTheme=\"@style/AppTheme.PopupOverlay\" /> \n\n     </android.support.design.widget.AppBarLayout> \n\n <android.support.v7.widget.RecyclerView android:id=\"@+id/rvToDoList\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"match_parent\" \n       app:layoutManager=\"LinearLayoutManager\" \n       android:orientation=\"vertical\" \n       app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"/> \n\n <android.support.design.widget.FloatingActionButton android:id=\"@+id/fabAddTodo\" \n       android:layout_width=\"wrap_content\" \n       android:layout_height=\"wrap_content\" \n       android:layout_gravity=\"bottom|end\" \n       android:layout_margin=\"@dimen/fab_margin\" \n       app:srcCompat=\"@drawable/ic_add\" /> \n\n    </android.support.design.widget.CoordinatorLayout> \n```", "```kt\n    lateinit var adapter: ToDoAdapter \n\n    private val INTENT_EDIT_TODO: Int = 100 \n\n    private val INTENT_ADD_TODO: Int = 101 \n\n    override fun onCreateBaseActivity(savedInstanceState: Bundle?) { \n      setContentView(R.layout.activity_todo_list) \n      setSupportActionBar(toolbar) \n\n      fabAddTodo.setOnClickListener { _ -> \n         startActivityForResult(intentFor<AddTodoActivity>\n         (),INTENT_ADD_TODO) \n      } \n\n      adapter = ToDoAdapter(this,{ \n       todoItem-> \n       startActivityForResult(intentFor<TodoDetailsActivity>\n       (Pair(Constants.INTENT_TODOITEM,todoItem)),INTENT_EDIT_TODO) \n      }) \n      rvToDoList.adapter = adapter \n\n      fetchTodoList() \n    } \n```", "```kt\n    class ToDoAdapter( \n private val context:Context, //(1) val onItemClick:(ToDoModel?)->Unit = {}//(2) \n      ):RecyclerView.Adapter<ToDoAdapter.ToDoViewHolder>() { \n private val inflater:LayoutInflater =  \n      LayoutInflater.from(context)//(3) private val   \n      todoList:ArrayList<ToDoModel> = arrayListOf()//(4) fun\n      setDataset(list:List<ToDoModel>) {//(5) \n        todoList.clear() \n        todoList.addAll(list) \n        notifyDataSetChanged() \n      } \n\n      override fun getItemCount(): Int = todoList.size \n\n      override fun onBindViewHolder(holder: ToDoViewHolder?,\n      position: Int) { \n        holder?.bindView(todoList[position]) \n      } \n\n      override fun onCreateViewHolder\n      (parent: ViewGroup?, viewType: Int): ToDoViewHolder { \n        return ToDoViewHolder\n        (inflater.inflate(R.layout.item_todo,parent,false)) \n      } \n\n      inner class ToDoViewHolder(itemView:View):\n      RecyclerView.ViewHolder(itemView) { \n        fun bindView(todoItem:ToDoModel?) { \n with(itemView) {//(6) \n             txtID.text = todoItem?.id?.toString() \n             txtDesc.text = todoItem?.todoDescription \n             txtStatus.text = todoItem?.status \n             txtDate.text = todoItem?.todoTargetDate \n\n             onClick { \n this@ToDoAdapter.onItemClick(todoItem)//(7) \n             } \n          } \n        } \n      } \n    } \n```", "```kt\n    { \n      \"error_code\": 0, \n      \"error_message\": \"\", \n      \"data\": [ \n       { \n         \"id\": 1, \n         \"todoDescription\": \"Lorem ipsum dolor sit amet, consectetur \n          adipiscing elit. Integer tincidunt quis lorem id rhoncus. Sed \n          tristique arcu non sapien consequat commodo. Nulla dolor \n          tellus, molestie nec ipsum at, eleifend bibendum quam.\", \n          \"todoTargetDate\": \"2017/11/18\", \n          \"status\": \"complete\" \n        } \n       ] \n    } \n```", "```kt\n    open class BaseAPIResponse ( \n      @SerializedName(\"error_code\") \n      val errorCode:Int, \n      @SerializedName(\"error_message\") \n      val errorMessage:String): Serializable \n```", "```kt\n    open class GetToDoListAPIResponse( \n      errorCode:Int, \n      errorMessage:String, \n      val data:ArrayList<ToDoModel> \n    ):BaseAPIResponse(errorCode,errorMessage) \n```", "```kt\n    data class ToDoModel ( \n      val id:Int, \n      var todoDescription:String, \n      var todoTargetDate:String, \n      var status:String \n    ):Serializable \n```", "```kt\n    class APIClient { \n      private var retrofit: Retrofit? = null \n      fun getClient(): Retrofit { \n\n        if(null == retrofit) { \n\n          val client = OkHttpClient.Builder().connectTimeout(3,\n          TimeUnit.MINUTES) \n          .writeTimeout(3, TimeUnit.MINUTES) \n          .readTimeout(3,\n          TimeUnit.MINUTES).addInterceptor(interceptor).build() \n\n           retrofit = Retrofit.Builder() \n             .baseUrl(Constants.BASE_URL) \n             .addConverterFactory(GsonConverterFactory.create()) \n             .client(client) \n             .build() \n          } \n\n          return retrofit!! \n         } \n\n         fun getAPIService() =\n         getClient().create(APIService::class.java) \n    } \n```", "```kt\n    interface APIService { \n      @POST(Constants.GET_TODO_LIST) \n      fun getToDoList(): Call<GetToDoListAPIResponse> \n\n      @FormUrlEncoded \n      @POST(Constants.EDIT_TODO) \n      fun editTodo( \n            @Field(\"todo_id\") todoID:String, \n            @Field(\"todo\") todo:String \n      ): Call<BaseAPIResponse> \n\n      @FormUrlEncoded \n      @POST(Constants.ADD_TODO) \n      fun addTodo(@Field(\"newtodo\") todo:String): Call<BaseAPIResponse> \n     } \n```", "```kt\n    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0 ' \n    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1' \n    implementation 'io.reactivex.rxjava2:rxkotlin:2.1.0' \n```", "```kt\n    class APIClient { \n      private var retrofit: Retrofit? = null \n      enum class LogLevel { \n        LOG_NOT_NEEDED, \n        LOG_REQ_RES, \n        LOG_REQ_RES_BODY_HEADERS, \n        LOG_REQ_RES_HEADERS_ONLY \n      }  \n      /** \n       * Returns Retrofit builder to create \n       * @param logLevel - to print the log of Request-Response \n       * @return retrofit \n       */ \n      fun getClient(logLevel: Int): Retrofit { \n\n        val interceptor = HttpLoggingInterceptor() \n        when(logLevel) { \n            LogLevel.LOG_NOT_NEEDED -> \n                interceptor.level = HttpLoggingInterceptor.Level.NONE \n            LogLevel.LOG_REQ_RES -> \n                interceptor.level = HttpLoggingInterceptor.Level.BASIC \n            LogLevel.LOG_REQ_RES_BODY_HEADERS -> \n                interceptor.level = HttpLoggingInterceptor.Level.BODY \n            LogLevel.LOG_REQ_RES_HEADERS_ONLY -> \n                interceptor.level =\n            HttpLoggingInterceptor.Level.HEADERS \n         }  \n\n        val client = OkHttpClient.Builder().connectTimeout(3, \n        TimeUnit.MINUTES) \n          .writeTimeout(3, TimeUnit.MINUTES) \n          .readTimeout(3,\n          TimeUnit.MINUTES).addInterceptor(interceptor).build() \n\n          if(null == retrofit) { \n            retrofit = Retrofit.Builder() \n              .baseUrl(Constants.BASE_URL) \n              .addConverterFactory(GsonConverterFactory.create()) \n .addCallAdapterFactory\n              (RxJava2CallAdapterFactory.create()) \n              .client(client) \n              .build() \n           } \n\n           return retrofit!! \n         } \n\n         fun getAPIService(logLevel: LogLevel =   \n         LogLevel.LOG_REQ_RES_BODY_HEADERS) = \n         getClient(logLevel).create(APIService::class.java)  \n    } \n```", "```kt\n    interface APIService { \n      @POST(Constants.GET_TODO_LIST) \n      fun getToDoList(): Observable<GetToDoListAPIResponse> \n\n      @POST(Constants.EDIT_TODO) \n      fun editTodo( \n            @Body todo:String \n      ): Observable<BaseAPIResponse> \n\n      @POST(Constants.ADD_TODO) \n      fun addTodo(@Body todo:String): Observable<BaseAPIResponse> \n    }  \n```", "```kt\n    private fun fetchTodoList() { \n      APIClient() \n      .getAPIService() \n      .getToDoList() \n .subscribeOn(Schedulers.computation()) .observeOn(AndroidSchedulers.mainThread()) \n      .subscribeBy( \n         onNext = { response -> \n                    adapter.setDataset(response.data) \n                  }, \n         onError = { \n                     e-> e.printStackTrace() \n                   } \n       ) \n    } \n```", "```kt\n    class ToDoAdapter( \n      private val context:Context, //(1) \n      val onClickTodoSubject:Subject<Pair<View,ToDoModel?>>//(2) \n      ):RecyclerView.Adapter<ToDoAdapter.ToDoViewHolder>() { \n      private val inflater:LayoutInflater = \n      LayoutInflater.from(context)//(3) \n      private val todoList:ArrayList<ToDoModel> = arrayListOf()//(4) \n\n      fun setDataset(list:List<ToDoModel>) {//(5) \n        todoList.clear() \n        todoList.addAll(list) \n        notifyDataSetChanged() \n      } \n\n      override fun getItemCount(): Int = todoList.size \n\n      override fun onBindViewHolder(holder: ToDoViewHolder?,\n      position: Int) { \n        holder?.bindView(todoList[position]) \n      } \n\n      override fun onCreateViewHolder\n      (parent: ViewGroup?, viewType: Int): ToDoViewHolder { \n        return ToDoViewHolder(inflater.inflate\n        (R.layout.item_todo,parent,false)) \n      } \n\n     inner class ToDoViewHolder(itemView:View):\n     RecyclerView.ViewHolder(itemView) { \n       fun bindView(todoItem:ToDoModel?) { \n         with(itemView) {//(6) \n           txtID.text = todoItem?.id?.toString() \n           txtDesc.text = todoItem?.todoDescription \n           txtStatus.text = todoItem?.status \n           txtDate.text = todoItem?.todoTargetDate \n\n           onClick { \n             onClickTodoSubject.onNext(Pair\n            (itemView,todoItem))//(7) \n          } \n         } \n       } \n     } \n   } \n```", "```kt\n    implementation 'com.jakewharton.rxbinding2:rxbinding-kotlin:2.0.0' \n```", "```kt\n    itemView.clicks() \n    .subscribeBy { \n       onClickTodoSubject.onNext(Pair(itemView,todoItem)) \n    }\n```", "```kt\n    textview.textChanges().subscribeBy {  \n      changedText->Log.d(\"Text Changed\",changedText) \n    } \n```", "```kt\n    fun View.getBitmap(): Bitmap { \n      val bmp = Bitmap.createBitmap(width, height,\n      Bitmap.Config.ARGB_8888) \n      val canvas = Canvas(bmp) \n      draw(canvas) \n      canvas.save() \n      return bmp \n    } \n```", "```kt\n    fun Activity.hideSoftKeyboard() { \n      if (currentFocus != null) { \n        val inputMethodManager = getSystemService(Context \n          .INPUT_METHOD_SERVICE) as InputMethodManager \n        inputMethodManager.hideSoftInputFromWindow\n        (currentFocus!!.windowToken, 0) \n      } \n    } \n```"]