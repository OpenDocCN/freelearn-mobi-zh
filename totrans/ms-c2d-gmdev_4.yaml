- en: Chapter 4. Sound and Music
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is all about the different ways to present music and sound effects
    to the player of the game using Cocos2d, and why high-quality music and sound
    effects matter in a great game. Trust me, there's more to sound effects than just
    playing a sound file when an event happens. Otherwise, why would it have an entire
    chapter? Although there are a lot of users who play with the sound off on mobile
    devices, it's still an immersive part of some players' experience, so we have
    to pay close attention to not only the sounds we choose but also how they're implemented.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading and unloading effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing sound effects and loop background music in creative ways
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the played sound on the fly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other good examples of sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the code up to this point, open the **Chapter 4** project and the sound
    effects from the `Sounds` directory in the book's included files.
  prefs: []
  type: TYPE_NORMAL
- en: It's recommended that you follow the code provided, as this chapter, along with
    future chapters, will be referencing methods and classes that are provided or
    mentioned within the book.
  prefs: []
  type: TYPE_NORMAL
- en: If there are any gameplay bugs or imbalances in the prototype, that's fine;
    we'll cover polishing in a later chapter. Remember, the prototype was done quickly
    with the sole purpose of showing others the core concept of the game, not providing
    them with a finished product.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you've copied the sound files to your project. If they aren't there,
    no matter how many times you try to preload, unload, play, or loop, the sound
    files simply won't play. Unlike the sprite sheets used with TexturePacker and
    the BMFonts created with Glyph Designer, it's best to drag the sound files into
    your project and have the **Copy items if needed** checkbox checked, as shown
    in the following screenshot. This will ensure that the files are in your project
    until you decide to delete them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/image00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Seeing the difference in audio types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're wondering what the differences are between MP3, CAF, and other file
    and data formats for audio, check out [http://www.raywenderlich.com/69365/audio-tutorial-ios-file-data-formats-2014-edition](http://www.raywenderlich.com/69365/audio-tutorial-ios-file-data-formats-2014-edition),
    a detailed explanation on all the different types of audio. It's not necessary
    for this book, but if you're trying to save space or wondering if you can use
    certain audio files, this link will be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to be using MP3 in this chapter (and subsequently in the rest of
    the book's content) as it's a very common format, as well as a format that's supported
    by OALSimpleAudio and the iPhone natively.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about OALSimpleAudio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've ever wanted an easy way to play sound files, OALSimpleAudio is the
    thing you need. It can very easily load a large variety of sound files, play effects,
    loop background music, and a lot more. Its existence and integration with Cocos2d
    makes it much easier to bring your game to life with the immersive capabilities
    of sound and music.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you've programmed in Cocos2d before and are wondering where SimpleAudioEngine
    is, starting in Cocos2d v3.0, OALSimpleAudio is the new way to play sound effects.
    It's basically everything that SimpleAudioEngine was.
  prefs: []
  type: TYPE_NORMAL
- en: Preloading effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you try to play an effect using OALSimpleAudio, there will be a slight freeze,
    or delay, as the device tries to quickly load the effect into the memory and then
    play it right away. Luckily, there's a way to load the sound effects and music
    such that it doesn't freeze in front of your users when you try to play an effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'OALSimpleAudio allows preloading of effects, which essentially reads the sound
    effect into the memory long before you''ll need the effect. The choice is up to
    you whether to do this at the beginning of the game (when users first launch it
    from their home screen), or between levels by unloading and reloading the effects
    for the upcoming level. The way to load sound files into the memory with OALSimpleAudio
    is by adding the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `buffer` variable assignment is optional and is used if you need to print
    out various pieces of information about the sound file such as frequency or bits
    of the buffer.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the preceding code example shows `.mp3` as the file extension, OALSimpleAudio
    can load any sound file that's supported by iOS.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you want to cut down on the time it takes to load all your in-game
    sounds, you can do so in the background, which is known as loading asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: Loading files asynchronously
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loading your files asynchronously is the best way to cut down on load time while
    simultaneously getting all the files loaded. However, note that because loading
    this way occurs in the background, there's no guarantee that the files will be
    ready when the user begins to interact with your game.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to make certain sound effects available for them at the beginning
    of the game (at the loading screen, before the main menu starts, right when the
    main menu starts, or whatever you see the beginning of your game as), it's recommended
    to load the minimum amount of sound needed if you still wish to load the majority
    of your effects asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way to do this is with the following line of code. It will push the loading
    into the background and notify you when it''s done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Unloading effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you know you're not going to use the sound effect for a while, or you often
    run into memory warnings, unloading your sound effects can be useful. For example,
    if your game uses a certain sound file for a voice-over in the tutorial only,
    once the user passes the tutorial, you can unload this sound effect to free up
    some memory. OALSimpleAudio will not unload sound effects that are either playing
    or paused.
  prefs: []
  type: TYPE_NORMAL
- en: 'To unload a specific sound effect, you can use this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To unload all your sound effects at once, you can use the following line of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A recommended place to put these unloading calls is your `applicationDidReceiveMemoryWarning`
    method in the `AppDelegate` class.
  prefs: []
  type: TYPE_NORMAL
- en: Playing sound effects and loop background music
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obviously, you wouldn't just want to be loading and unloading your sound effects
    all day, so let's get into the actual playing of these sounds here.
  prefs: []
  type: TYPE_NORMAL
- en: Getting some background music going
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's always important to set the tone of the voice through the music that gets
    played in the background. Whether that means a bleak, withering tone or a happy-go-lucky,
    upbeat tone, the music can help bring in the player so that they become more engaged
    with the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the background music will likely be playing for the majority of the
    time throughout the game, it''s not entirely important to preload it. However,
    it''s still recommended, as it will prevent the slight bit of lag at the beginning
    of the game when the music first starts playing. You can preload the background
    music using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'With the preceding line of code added, you can simply play the background music
    on loop with one call. To play preloaded background music, add this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'So, for this book''s project, we''re going to play background music throughout
    the time the game is being played. Thus, we want the user to be immersed as early
    as possible, so we''re going to preload the background music even before the first
    scene loads, and start playing it as soon as possible. Open `AppDelegate.m`, and
    go to the `startScene` method. Right above the return statement, add this line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have made OALSimpleAudio aware of what our background music is,
    we can immediately play the file on loop, so by the time the first scene gets
    displayed, there''s already music playing. So, right below the preloading line,
    add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Isn't that lovely? But background music alone isn't going to be enough. Let's
    add in some sound effects when the user does different activities in the game.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds when a button is clicked on
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the human psychological traits that exists is the desire for feedback
    when an action is taken. Thus, when a button is pressed in digital space, we need
    to give the user feedback that their action has been received. This is why the
    button darkens slightly to indicate that it's being pressed down. Upon release
    of this button, we'd like to also play a sound effect telling the user their action
    is being processed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To play a sound effect when a button is pressed in Cocos2d, just add the line
    of code required to play the sound file to whichever method the button calls.
    So, for this project, open `MainScene.m`, go to the `goToMenu` method, and add
    this line of code right before the line where the `replaceScene` method gets called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will play the sound effect once, right before everything starts to load
    for the next scene. Do the same for the **Restart** button, by going to the `restartGame`
    method and the `goToGame` method in `MenuScene.m`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you notice a slight delay before the sound effect the first time you click
    on a button, that's a sign that you should preload the sound effect before the
    user can press the given button.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if all we have is background music and button clicks, we surely need to
    engross the user even more. Thus, we'll add some sound when the user moves a unit
    distance on the game board.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds on unit movements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the button click effects, we want to play the effect whenever the
    `moveUnit` method gets called. Why here and not in the `Unit` class? Because,
    if we called it in the Unit class, we'd possibly be calling the method 81 times
    at once (9 x 9 grid). Yes, this is hard to obtain, but technically possible. Calling
    it up to 81 times at once will cause the effects to stack on top of each other
    and become a lot louder than we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, open `MainScene.m` and go to the `moveUnit` method. Here, right after we
    update the position of the unit the user wants to move, we''ll play the sound
    effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When you run the game and move a unit, you should hear a very subtle sound.
    The reason it's so subtle is that the user will be doing this for the entire game.
    We don't want to overwhelm them with the movement sound effect, as it might irritate
    some players, causing them to turn the sound off or simply quit playing, the latter
    of which we don't want to happen.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds on unit combination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the movement happens literally every turn (or else a turn won't happen),
    two units combining may not be the case every turn. Therefore, we want to give
    the player a rewarding feeling when they combine two weak units to make one strong
    unit.
  prefs: []
  type: TYPE_NORMAL
- en: Because our unit combination code is a bit scattered, we have to be careful
    where to place the code so that the unit combination sound effect happens only
    once per combination. For example, if all three units move into one square at
    the same time, we should only play the effect only once instead of twice by accident.
    This makes it a bit tricky, but for now, let's not worry about the three- or four-unit
    combinations, and just handle the two-unit combinations. It's going to play twice
    and three times respectively for the three- and four-unit combinations, but that's
    okay for an early version of the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open your `MainScene.m` file and add this method anywhere in your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then go to the `checkForAnyDirectionCombineWithUnit` method and add the following
    lines of code right under the `NSInteger fv` and `NSInteger ov` lines (`fv` and
    `ov` stand for first value and other value respectively, and they will hold the
    values of the first unit and the other unit that get passed to this method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Also, go to the `checkForCombineWithUnit` method and add these lines of code
    at the same spot (below the two `NSInteger` declarations).
  prefs: []
  type: TYPE_NORMAL
- en: The reason we have the `if` statement is that we need to make sure the sound
    effect only plays when a friendly unit is combined with another friendly unit.
    We don't need to check `other` because we only call this method with two units
    of the same type. As for the `fv+ov` and `total` parameters, those will be used
    later in this chapter, so just hold on for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, in the `playUnitCombineSound` method, you''ll need to add the following
    line of code so that the effect actually plays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you run the game now, you will hear a sound when one friendly unit combines
    with another. There's just one more type of sound effect we want to add in this
    early version of the game.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds when the user loses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Last but not least, we want to include some sounds that play when a user loses
    their game. It's not entirely motivating to hear the losing sound effect over
    and over, but it is effective in keep user retention high, as it emphasizes the
    "let me try that one more time, I almost had it" feeling. Picking the right sound
    for this can be a bit hard, but once you've found a sound effect that you feel
    is sufficient, you can go ahead and add it to the **Game Over** screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'So first, we need a **Game Over** screen to exist. Similar to the `Unit` class,
    create a `GameOverScene` class with a subclass of type `CCScene`. Your `GameOverScene.h`
    file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then open your `GameOverScene.m` file. It looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `init` method of the `GameOverScene`, we want the Game Over sound effect
    to play. We''re adding it here so that the sound effect plays as soon as the Game
    Over scene loads. So, right under the line of code for the background color, add
    the following to play the Game Over sound effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To hear the sound play, we need to send the user to the GameOverScene when
    they lose, so go to the `endGame` method in the `MainScene.m` file, and change
    that line of code to this (don''t forget to add the `#include "GameOverScene.h"`
    line of code at the top of the file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And there you have it—a Game Over sound effect! So, up to this point, we have
    all the sound effects in place: the unit movements, the combinations, Game Over,
    the background music, and so on. But after a while, the sound gets a little repetitive,
    so let''s modify the sounds a bit to lessen the annoyance of a repeated sound.'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the sound effect on the fly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing that's so cool about using OALSimpleAudio (and was also true about
    SimpleAudioEngine) is that you can modify how the audio file sounds when it gets
    played back to the user. For example, if you wish to have a series of coins collected,
    and each coin collected in rapid succession plays a slightly higher-pitched sound
    than the previous one, you can simply modify the pitch based on how many coins
    were collected.
  prefs: []
  type: TYPE_NORMAL
- en: The volume (or gain), pitch, and pan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With one simple call that adds a few parameters to the default `playEffect`
    method, you can modify the loudness of the effect, the pitch of the sound effect,
    and where in the speakers your effect plays. You can do so with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Stopping looped sound effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''ve said "Yes" to the preceding loop and wish to stop it at some point,
    you have to grab the return value of the preceding function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then call the respective stop function on the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the combine sound effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ideally, we don't want the user to hear the same sound effect over and over
    every time they combine units. Not only will it become obnoxious and annoying
    to the user but it will also make the game feel more boring and less exciting.
    With that said, we want to modify the combining sound effect so slightly so that
    as the user gets a higher number of unit combinations, they feel emboldened by
    their success, making them wish to play longer.
  prefs: []
  type: TYPE_NORMAL
- en: One of the approaches is to modify the pitch of the sound effect. This will
    work up to a certain point, until the sound effect becomes so pushed in one direction
    that it's simply better to provide another sound effect for truly large unit combinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `MainScene.m` file and scroll to the `playUnitCombineSoundWithValue`
    method. Here, you''re going to modify the code to look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When you run the game and combine a unit, you will hear the sound effect getting
    deeper and deeper until a certain value (the tipping point—in this case, a new
    unit value of 50 or more). At this point, we want to play a different sound effect,
    which is what the inner `if` statement handles.
  prefs: []
  type: TYPE_NORMAL
- en: Other great sound places
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are a couple of examples of games that make great use of sound
    effects. These games not only engage the user more, but are also great examples
    of how you can use sound effects for more than just basic events such as simple
    user movements or button clicks:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Threes!*: This game has faces on the cards, and if you don''t do anything,
    after a few moments, you''ll hear the cards making random noises. Also, if you
    try to slide the cards into a position that doesn''t move anything (an invalid
    move), you will hear one of the cards say "Nope!" It''s really cute and is just
    another way the ambience of the game is upheld through the sounds. Take a look
    at the UI of the game, as shown in the following screenshot:![Other great sound
    places](img/image00246.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Crossy Road*: In this game, every now and then, you''ll come across a vehicle
    that''s playing music, a police car, or a garbage truck. All of these are fairly
    rare, but when the player experiences them and hears the extra level of sound,
    it becomes more enjoyable, as it''s not just another car driving by. Plus, with
    all the cars and trains in the game, if you''re wearing headphones, you''ll hear
    the vehicle''s music go from one ear to the other. Have a look at the UI of this
    game:![Other great sound places](img/image00247.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter taught you how to preload, unload, play, and modify sound files
    using `OALSimpleAudio` and Cocos2d. You also saw some cool ways in which we integrated
    the use of sound in this book's project. Because the game is still in that prototype-esque
    phase, the sounds may change or be modified. However, the vast majority of them
    are implemented. Also, if you want to learn how to turn on/off sound or music
    in your game via an option in the menu or settings, read [Chapter 6](part0049.xhtml
    "Chapter 6. Tidying Up and Polishing"), *Tidying Up and Polishing*, as that chapter
    will cover more such details.
  prefs: []
  type: TYPE_NORMAL
- en: There are also a lot of situational methods in `OALSimpleAudio` that were not
    covered in this chapter. If you wish to read more about them, you can view the
    documentation at [http://www.learn-cocos2d.com/api-ref/1.0/ObjectAL/html/interface_o_a_l_simple_audio.html#aaf877e4f0526408d569fd12f37e8e1f7](http://www.learn-cocos2d.com/api-ref/1.0/ObjectAL/html/interface_o_a_l_simple_audio.html#aaf877e4f0526408d569fd12f37e8e1f7).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll cover some really cool concepts and mechanics that
    most game developers don't take time to implement in their game—and it's more
    than just Game Center or iCloud support.
  prefs: []
  type: TYPE_NORMAL
