["```swift\nstruct DocTags {\n  static let BOOKS_TAG = \"books\"\n  static let BOOK_TAG = \"book\"\n\n  static let AUTHOR_TAG = \"author\"\n  static let PUBLISHER_TAG = \"publisher\"\n  static let NAME_TAG = \"name\"\n  static let CATEGORY_TAG = \"category\"\n  static let DESCRIPTION_TAG = \"description\"\n}\n```", "```swift\nclass Book {\n  var name = \"\"\n  var author = \"\"\n  var publisher = \"\"\n  var category = \"\"\n  var description = \"\"\n}\n```", "```swift\nfunc addValue(tagName: String, withValue value: String) {\n  switch tagName {\n  case DocTags.NAME_TAG:\n    self.name = value\n  case DocTags.AUTHOR_TAG:\n    self.author = value\n  case DocTags.PUBLISHER_TAG:\n    self.publisher = value\n  case DocTags.CATEGORY_TAG:\n    self.category = value\n  case DocTags.DESCRIPTION_TAG:\n    self.description = value\n  default:\n    break\n  }\n}\n```", "```swift\n<?xml version=\"1.0\"?>\n<books>\n  <book name=\"iOS and OS X Network Development Cookbook\">\n    <author>Jon Hoffman</author>\n    <publisher>PacktPub</publisher>\n    <category>Programming</category>\n    <description>Network development for iOS and OS X</description>\n  </book>\n  <book name=\"Mastering Swift\">\n    <author>Jon Hoffman</author>\n    <publisher>PacktPub</publisher>\n    <category>Programming</category>\n    <description>Learning Swift</description>\n  </book>\n</books>\n```", "```swift\nclass MyXMLParser: NSObject, NSXMLParserDelegate {\n\n  }\n```", "```swift\nvar books: [Book]?\nvar book: Book?\nvar elementData = \"\"\n```", "```swift\nfunc parseXmlString(xmlString: String) {\n   let xmlData = xmlString.dataUsingEncoding(NSUTF8StringEncoding)\n   let parser = NSXMLParser(data: xmlData!)\n   parser.delegate = self\n   parser.parse()\n}\n```", "```swift\nfunc parserDidStartDocument(parser: NSXMLParser!) {\n  println(\"Started XML parser\")\n}\n```", "```swift\nfunc parser(parser: NSXMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String]) {\n    if elementName == DocTags.BOOKS_TAG {\n        books = []\n    } else if elementName == DocTags.BOOK_TAG {\n        book = Book()\n        if let name = attributeDict[DocTags.NAME_TAG] {\n            book!.addValue(DocTags.NAME_TAG, withValue: name as!)\n        }\n\n    }\n}\n```", "```swift\nfunc parser(parser: NSXMLParser, foundCharacters string: String) {\n  elementData += string\n}\n```", "```swift\nfunc parser(parser: NSXMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?) {\n    if elementName == DocTags.BOOK_TAG {\n        if let myBook = book {\n            if var _ = books {\n                books!.append(myBook)\n            }\n        }\n        book = Book()\n    } else if let myBook = book {\n        myBook.addValue(elementName, withValue: elementData)\n    }\n    elementData = \"\"\n}\n```", "```swift\nfunc parserDidEndDocument(parser: NSXMLParser) {\n  if let myBooks = books {\n    for myBook in myBooks {\n      println(\"Found - \\(myBook.name) \\(myBook.author)\")\n    }\n  }\n}\n```", "```swift\nfunc parser(parser: NSXMLParser parseErrorOccurred parseError: NSError {\n  print\"Parse Error occurred (parseError)\")\n}\n```", "```swift\nvar xmlParser = MyXMLParser()\nxmlParser.parseXmlString(xmlString)\n```", "```swift\nfunc buildXMLString(books: [Book]?)] -> String {\n  if let myBooks = books {\n    let xmlRoot = NSXMLElement(name: DocTags.BOOKS_TAG)\n    let xmlData = NSXMLDocument(rootElement: xmlRoot)\n    for book in myBooks {\n      let bookElement = NSXMLElement(name: DocTags.BOOK_TAG)\n      xmlRoot.addChild(bookElement)\n      let nameAttribute = NSXMLNode.attributeWithName(DocTags.NAME_TAG, stringValue:book.name) as NSXMLNode\n      bookElement.addAttribute(nameAttribute)\n      bookElement.addChild(NSXMLElement(name: DocTags.AUTHOR_TAG, stringValue: book.author))\n      bookElement.addChild(NSXMLElement(name: DocTags.CATEGORY_TAG, stringValue: book.category))\n      bookElement.addChild(NSXMLElement(name: DocTags.DESCRIPTION_TAG, stringValue: book.description))\n      bookElement.addChild(NSXMLElement(name: DocTags.PUBLISHER_TAG, stringValue: book.publisher))\n    }\n    return xmlData.XMLString\n  }\n  else {\n    return \"\"\n  }\n}\n```", "```swift\nfunc buildXMLString(books: [Book]?) -> String {\n  var xmlString = \"\"\n  if let myBooks = books {\n    xmlString = \"<\\(DocTags.BOOKS_TAG)>\"\n    for book in myBooks {\n      xmlString += \"<\\(DocTags.BOOK_TAG) \\(DocTags.NAME_TAG)=\\\"\\(book.name)\\\">\"\n      xmlString += getElementString(DocTags.AUTHOR_TAG, elementValue: book.author)\n      xmlString += getElementString(DocTags.CATEGORY_TAG, elementValue: book.category)\n      xmlString += getElementString(DocTags.DESCRIPTION_TAG, elementValue: book.description)\n      xmlString += getElementString(DocTags.PUBLISHER_TAG, elementValue: book.publisher)\n      xmlString += \"<\\\\\\(DocTags.BOOK_TAG)>\"\n    }\n    xmlString += \"<\\\\\\(DocTags.BOOKS_TAG)>\"\n  }\n  return xmlString\n}\nfunc getElementString(elementName: String, elementValue: String) ->String {\n  return \"<\\(elementName)>\\\"\\(elementValue)\\\"<\\\\\\(elementName)>\"\n}\n```", "```swift\nswitch jsonResponse {\ncase is NSDictionary:\n  // Code to parse a NSDictionary\ncase is NSArray:\n  // Code to parse an NSArray\ndefault:\n  // Code to handle unknown type\n}\n```", "```swift\n{\n  \"books\": [\n    {\n      \"name\": \"iOS and OS X Network Development Cookbook\",\n      \"author\": \"Jon Hoffman\",\n      \"publisher\": \"PacktPub\",\n      \"category\": \"Programming\",\n      \"description\": \"Network development for iOS and OS X\"\n    },\n    {\n      \"name\": \"Mastering Swift\",\n      \"author\": \"Jon Hoffman\",\n      \"publisher\": \"PacktPub\",\n      \"category\": \"Programming\",\n      \"description\": \"Learning Swift\"\n    }\n  ]\n}\n```", "```swift\nfunc parseJson() throws {\n    var myBooks: [Book] = []\n    let jsonData = jsonString.dataUsingEncoding(NSUTF8StringEncoding)\n    if let data = jsonData {\n\n        let jsonDoc : AnyObject = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.AllowFragments)\n\n        if let books = jsonDoc.objectForKey(DocTags.BOOKS_TAG) as? NSArray {           \n            for var i=0; i < books.count; i++ {\n                if let dict = books.objectAtIndex(i) as? NSDictionary {\n                    let book = Book()\n                    addValueToBook(book, elementName: DocTags.AUTHOR_TAG, elementValue: (dict.objectForKey(DocTags.AUTHOR_TAG) as? String))\n                    addValueToBook(book, elementName: DocTags.CATEGORY_TAG, elementValue: (dict.objectForKey(DocTags.CATEGORY_TAG) as? String))\n                    addValueToBook(book, elementName: DocTags.DESCRIPTION_TAG, elementValue: (dict.objectForKey(DocTags.DESCRIPTION_TAG) as? String))\n                    addValueToBook(book, elementName: DocTags.NAME_TAG, elementValue: (dict.objectForKey(DocTags.NAME_TAG) as? String))\n                    addValueToBook(book, elementName: DocTags.PUBLISHER_TAG, elementValue: (dict.objectForKey(DocTags.PUBLISHER_TAG) as? String))\n                    myBooks.append(book)\n                }\n            }\n\n            for book in myBooks {\n                print(\"Found - \\(book.name) \\(book.author)\")\n            }\n        }\n    }\n}\n```", "```swift\nif let data = jsonData\n```", "```swift\nif let books = jsonDoc.objectForKey(DocTags.BOOKS_TAG) as? NSArray\n```", "```swift\nif let dict = books[i] as? NSDictionary \n```", "```swift\nfunc addValueToBook(book: Book, elementName: String, elementValue: String?) {\n    if let value = elementValue {\n      book.addValue(elementName, withValue: value)\n    }\n}\n```", "```swift\nfunc buildJSON(value: AnyObject) throws -> String {\n    if NSJSONSerialization.isValidJSONObject(value) {\n        let data = try NSJSONSerialization.dataWithJSONObject(value, options: [])\n        if let string = NSString(data: data, encoding: NSUTF8StringEncoding) {\n           return string as String\n        }\n    }\n    return \"\"\n}\n```"]