- en: Chapter 1. What is Unity and why should I care?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the world of Unity! In this book we will explore from beginning to
    end how to develop games utilizing what is one of the most exciting and accessible
    game development technologies available for mobile devices.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter you will learn the basics of getting up and running with Unity
    Technologies' game development product Unity. Together we will explore how to
    utilize this development platform to deliver games on iOS devices.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we shall:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn about the value of Unity as a development platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to configure the Apple Developer Portal to support development and
    publishing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure our development environment for publishing to an iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish a sample application to our iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This may not sound like a lot, but with iOS development there are many things
    that you can do incorrectly, which will lead to difficulties when working with
    Unity. Rather than assume that you'll get it all right, we're going to talk through
    it step by step to make sure that you can spend your time building games and not
    trying to decipher mysterious error messages.
  prefs: []
  type: TYPE_NORMAL
- en: So let's get on with it...
  prefs: []
  type: TYPE_NORMAL
- en: Important preliminary points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter assumes that you have already installed XCode and the Apple iOS
    SDK 4.x or later. If you don't have either of these tools installed, you can get
    them from [http://developer.apple.com](http://developer.apple.com).
  prefs: []
  type: TYPE_NORMAL
- en: Further, it is assumed that you have downloaded and installed Unity from [http://www.unity3d.com](http://www.unity3d.com).
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also assumes that you have set up an account at the iOS Dev Center
    located at [http://developer.apple.com](http://developer.apple.com). Since iOS
    applications must be signed before they can be published to an application store,
    or distributed to devices, you must have an account set up and have the requisite
    certificates installed on your machine. There are a number of videos on the Dev
    Center website, which can help you get your certificates set up.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that the screenshots in the book represent the Mac OSX version of
    Unity, as the OSX platform is the official development environment for iPhone
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: What is Unity?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine for a moment that you want to build a game for the iPhone and you want
    to take advantage of all the platforms' features, but you don't know Objective-C
    and you don't want to build a 3D engine. There are a large number of solutions
    in the marketplace for developing applications that will run on iOS — including
    the tried and tested method of creating an Objective-C project and writing a game
    engine using OpenGL ES that is specifically tailored to your content.
  prefs: []
  type: TYPE_NORMAL
- en: Given those facts, what is Unity and why should you care?
  prefs: []
  type: TYPE_NORMAL
- en: With hundreds of millions of mobile devices in the hands of consumers, and more
    arriving seemingly every day, it has become clear that the mobile device is one
    of the fastest growing areas for game developers. While the prospect of such an
    amazing audience is tantalizing, there are numerous operating systems, video technologies,
    touch interfaces, cellular network technologies, 3D accelerators, and so on that
    would make it difficult to truly deliver compelling content to this large an audience,
    profitably, without some mechanism to abstract above the platform differences
    and allow you to focus on what's important — delivering a great gaming experience.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally there are a substantial number of approaches for delivering the
    various aspects of a game to the end-user. Consider for a moment the number of
    techniques available for providing sound, music, 3d artwork, physics, networking,
    or even force feedback for a game. Consider further the level of effort that would
    be necessary to have an environment where you can rapidly construct and test your
    ideas.
  prefs: []
  type: TYPE_NORMAL
- en: To truly be successful in this new multi-screen market you need an environment
    that allows you to focus your energies on creating great experiences and not the
    tedious details of the different hardware platforms on which the game will be
    played, or the mechanics behind how the game delivers that experience to the end-user.
    This is what Unity provides for you — and that is why you should care!
  prefs: []
  type: TYPE_NORMAL
- en: Getting a real application running on a device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To illustrate the type of content that is possible using Unity3d, we're going
    to get started by getting a real application running on a device. There are a
    number of steps that you have to perform to get this right, especially if you're
    a new developer to the iOS platform so I'm going to take some time to make sure
    you understand what's going on. iOS development can be very unforgiving if you
    don't do things the right way — but once you walk through it a few times it becomes
    second nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to walk through each of the steps necessary to produce commercial
    content for Unity3 that can be deployed to an iOS device:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting iOS as the target platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing the application to our device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play our content on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action — Loading a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to start the Unity development environment by clicking on
    the **Unity IDE** icon.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — Loading a project](img/978-1-84969-040-9_1_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you're familiar with Unity version 2, it is important to note that there
    is no longer a separate application for Unity iPhone. One of the new features
    in Unity 3 is that there is no longer a distinct environment for every deployment
    target — you have one IDE for everything. This has a number of benefits, as we
    will see throughout the course of the book.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you will see when the environment starts is the Project Wizard.
    In this chapter we are simply going to load and deploy an existing project so
    that we can walk through the workflow of getting everything setup for publishing
    to the iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Open Other...** button, navigate to where you installed the assets
    for the book and select the `Chapter 1` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unity will then load this project and you will be greeted with the standard
    Unity interface:![Time for action — Loading a project](img/978-1-84969-040-9_1_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you noticed, in the middle of the previous screenshot, the title bar for
    the application you will see the standard VCR controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you click on the **play** button, the game will start on your machine and
    you will be able to play around with the game in the Unity IDE. Play around with
    it for a second because you want to have some idea of how the application should
    look and behave when it is installed on a regular iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just loaded the sample game project in the Unity environment and run
    it on our development machine. In the normal development lifecycle you will find
    that you will perform the code-debug-test cycle on your machine and export it
    to your device to ensure that the performance is adequate or test the device-specific
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Select iPhone as a target platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we''ve had a chance to understand what our game will look, and play like,
    when it gets on our iOS device, it''s time to deploy the application to our target
    iOS device. In the Unity IDE you accomplish this by changing the build settings
    for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — Select iPhone as a target platform](img/978-1-84969-040-9_1_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s examine the **Build Settings** dialog for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — Select iPhone as a target platform](img/978-1-84969-040-9_1_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Build Settings** dialog there are a couple of activities we want to
    perform:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we want to make sure that we have something in our game world. Since
    you're loading an existing project you should already have scenes in your build.
    If for some reason you don't, you can press the **Add Current** button. This tells
    Unity that the scene that you've been playing around with is the one that you
    want to have included in your iOS game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we want to make sure we're targeting the correct platform. In the platform
    list you can tell which platform is being targeted by looking for the one with
    the Unity logo next to it. In our case we make sure that it is next to "iOS"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I know your urge is strong to press the **Build And Run** button at this point.
    However, remember that iOS applications have to be signed before they can be deployed
    to devices, or sold on the Apple App store. Since we haven''t told Unity anything
    about which developer profile and application identifier it should be publishing
    for, it will not be able to publish the application to the device. Thus, if you
    do follow through on this urge you will be greeted by this dialog box when you
    try to **Build And Run** for your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — Select iPhone as a target platform](img/978-1-84969-040-9_1_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just chosen the publishing target for our game. Since Unity can publish
    to multiple platforms, you would perform this step for each platform that you
    want to target. Thus, if you are targeting Android, the web, or even a game console
    you simply select that platform in the dialog and Unity will produce a distribution
    that will run on that platform.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of this writing Unity provides publishing for other platforms such
    as Android, Xbox360, PS3, and the Nintendo Wii, with many other platforms in development.
    These additional platforms will require the purchase of the Pro version of Unity,
    in addition to any fees required to publish to the specific platform.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Publishing to our device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To publish to our device we will have to provide a bundle identifier for Unity.
    To create one we will have to provide one within the iOS Provisioning Portal.
    This portal is located within the iOS Dev Center accessible at [http://developer.apple.com](http://developer.apple.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'On the main page for the iOS developer program you will find a link that will
    take you to the **iOS Provisioning Portal**. In addition, you will see links to
    the **iTunes Connect** portal that is used for publishing your product and getting
    information about sales and market performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — Publishing to our device](img/978-1-84969-040-9_1_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the **iOS Provisioning Portal** you will select the **App IDs** setting so
    that you can create a new application ID (which is the same as the bundle identifier
    which Unity is looking for):![Time for action — Publishing to our device](img/978-1-84969-040-9_1_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we create **App IDs** for our applications:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action — Publishing to our device](img/978-1-84969-040-9_1_8.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'An **App ID** for an iOS application is very important, as it is the mechanism
    through which the application will be uniquely identified by Game Center, in App
    Purchases, Push Notifications, and inside of the Unity development environment:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action — Publishing to our device](img/978-1-84969-040-9_1_9.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: An application identifier has a description, a prefix and a suffix. The prefix
    is a collection of characters that are randomized for uniqueness, and the suffix
    represents the unique identifier for the application. When Unity refers to the
    **Bundle Identifier**, it is referring only to the suffix.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create your **App ID** with a clear description of what this application is
    so that it will be easy to find it later. This is important, as over time you
    will end up with a large number of **App IDs** for all the games you will be creating.
    For the Seed ID itself, simply leave that set to **Generate New.**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: For your **Bundle Identifier**, use the standard reverse-domain name notation
    to come up with the identifier for your app. Once this is created we just need
    a way to move this over to our development environment.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For the bundle identifier make sure that you do not append a wildcard character
    to the end as this will limit you later as you seek to add more advanced functionality.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We now need to associate this application ID with a provisioning profile. If
    you already have a provisioning profile, you can modify the one you already have
    and change the **App ID** that it represents. If you don't have one, or don't
    want to modify an existing one, enter the **Provisioning** section of the **iOS
    Provisioning Portal:**![Time for action — Publishing to our device](img/978-1-84969-040-9_1_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once there, create a new profile for this **App ID** and fill in all of the
    fields, making sure to select the appropriate **App ID** in the drop-down list
    box:![Time for action — Publishing to our device](img/978-1-84969-040-9_1_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You may not have noticed it, but this example illustrates what happens when
    you follow the bad practice of not coming up with very descriptive names for your
    **App IDs**. While in this case I know that I want **Chapter 1**, if I were developing
    several books — I would not be able to identify which Chapter 1 this App ID represented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice that I have selected all of the devices that I want this application
    to be provisioned for. If you don't select a device here, you won't be able to
    deploy the application to that device.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Your provisioning profile is created, you now need to press **Download** so
    that it will be downloaded to your development environment:![Time for action —
    Publishing to our device](img/978-1-84969-040-9_1_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded (you should have a `.mobileprovision` file), double-click on
    the file on your machine. As this is a registered file type for XCode it should
    install it into XCode for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If for some reason it doesn''t, you can open up the Organizer in XCode (**Window
    | Organizer**), select the **Provisioning Profiles** entry in the organizer. XCode
    will then install the profile and it will be synchronized to all devices that
    can accept the profile:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — Publishing to our device](img/978-1-84969-040-9_1_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'XCode has the ability to automatically provision devices that are configured
    in the iOS developer portal within XCode. This makes it easy to ensure that your
    profiles are added to your target devices. To do this, ensure that the **Automatic
    Device Provisioning** checkbox is checked:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action — Publishing to our device](img/978-1-84969-040-9_1_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Once performed, XCode will communicate with the iOS developer portal and download
    all of your configured devices and display them in the Organizer:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action — Publishing to our device](img/978-1-84969-040-9_1_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We are now able to configure Unity to publish content for this application ID
    on our target device. We accomplish this by entering the **Bundle Identifier**
    and setting the **App ID** suffix for our application. In the case of our example,
    it would be `com.gregorypierce.chapter1:`![Time for action — Publishing to our
    device](img/978-1-84969-040-9_1_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that step completed, the hardest part of building games for Unity is over!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run this application by selecting the **Build and Run** option from the File
    menu (File | **Build and Run)**. This time when you select "Build and Run," Unity
    will build a player for your content and deploy the application to the iOS device
    connected to the machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't be alarmed when you see XCode open and start building your application,
    as this means that the process is working and very shortly you should see the
    sample application start on your device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What Unity is doing behind the scenes is taking all of the assets and scripts
    from the Unity IDE and putting together a player that will be able to playback
    the content and all of its scenarios based on input from the user. This is a very
    important concept to understand as the content within the Unity IDE is largely
    platform agnostic and can be readily redeployed after a simple recompile within
    the Unity environment. This player is what becomes the actual application that
    is deployed to the iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: 'We spent a large number of steps creating some artifacts within the iOS Developer
    Portal. These artifacts were: the certificate, the App ID, and the provisioning
    profile. These artifacts form a circle of trust between the developer, Apple,
    and the iOS devices in the hands of developers and consumers.'
  prefs: []
  type: TYPE_NORMAL
- en: The certificate is a credential that is created in the Apple environment that
    allows content to be signed specifically by the developer, so that it is clear
    who authored the content. Without a certificate it is possible that someone could
    claim to be the developer and sign applications on his/her behalf.
  prefs: []
  type: TYPE_NORMAL
- en: The App ID is a unique identifier that allows the iOS device and the Apple services
    to know, without ambiguity, which application is trying to do something. Finally,
    the provisioning profile defines.
  prefs: []
  type: TYPE_NORMAL
- en: The provisioning profile associates the certificates, devices, and an app ID.
    Without a provisioning profile on your machine you will not be able to sign or
    deploy applications to either a device or to the application store.
  prefs: []
  type: TYPE_NORMAL
- en: Once we provided Unity the App ID, it was able to communicate with XCode and
    tell XCode which profile and certificates should be used to sign our application
    and deploy it the iOS device. On the device itself, when XCode deployed the application
    it transferred the provisioning profile to the device, so that the iOS device
    could identify that this was a device that it should run, even though the Apple
    App Store did not provide it.
  prefs: []
  type: TYPE_NORMAL
- en: We have just performed all of the steps necessary to setup our development environment
    and publish content to Unity. Further, we have built our own mini testing lab
    using Unity Remote so we can utilize our device yet debug the game in our development
    environment. This is a crucial milestone as we can now focus entirely on customizing
    Unity and building games.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz - The fundamentals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of these platforms can Unity not publish content for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Web
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. Consoles
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. iOS Devices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. Android Devices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: e. Linux
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Where can you go to set up an application ID for your iOS device?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Apple Developer Forums
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. XCode Organizer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. iTunes Connect
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. iOS Provisioning Portal
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: e. XCode SDK
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There remains uncertainty about whether or not Unity developed applications
    can be published to iOS devices within Apple's Terms of Service? (true/false)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have the following App ID 255U952NTW.com.gregorypierce.chapter1, what
    should you provide to Unity as your Bundle Identifier?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Chapter1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. com.gregorypierce.chapter1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. 255U952NTW
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. 255U952NTW.com.gregorypierce.chapter1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: e. 255U952NTW.com.gregorypierce.chapter1.*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can publish an iOS application without creating a developer account? (true/false)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned a lot about how to set up everything for publishing
    to iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we covered:'
  prefs: []
  type: TYPE_NORMAL
- en: How to load Unity and open a new project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create an Application ID for signing and publishing an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deploy an application to an iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've learned about setting up our development platform we're ready
    to really dive into Unity and explore its capabilities — which is the topic of
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
