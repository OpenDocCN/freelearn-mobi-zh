["```swift\n protocol CarVisitor {\n  func visit(car: DSCar)\n  func visit(car: RenaultCar)\n  func visit(car: CitroenCar)\n}\n```", "```swift\nprotocol Car {\n  func accept(visitor: CarVisitor)\n}\n```", "```swift\nclass DSCar: Car {\n  var price = 29000.0\n  func accept(visitor: CarVisitor) { visitor.visit(self) }\n}\nclass RenaultCar: Car {\n  var price = 17000.0\n  func accept(visitor: CarVisitor) { visitor.visit(self) }\n}\nclass CitroenCar: Car {\n  var price = 19000.0\n  func accept(visitor: CarVisitor) { visitor.visit(self) }\n}\n```", "```swift\nclass PriceVisitor: CarVisitor {\n  var price = 0.0\n  func visit(car: DSCar)  { price = car.price * 0.8  }\n  func visit(car: RenaultCar) { price = car.price * 0.9 }\n  func visit(car: CitroenCar)  { price = car.price * 0.9 }\n}\n```", "```swift\nlet cars: [Car] = [DSCar(), RenaultCar(), CitroenCar()]\n```", "```swift\nlet prices = cars.map { (car: Car) -> Double in\n  let visitor = PriceVisitor()\n  car.accept(visitor)\n  return visitor.price\n}\n```", "```swift\nextension String {\n  func subStringFrom(pos: Int) -> String {\n    var substr = \"\"\n    let start = self.startIndex.advancedBy(pos)\n    let end = self.endIndex\n    let range = start..<end\n    substr = self[range]\n    return substr\n  }\n}\n```", "```swift\nclass Context {\n  var input: String!\n  var output: Int = 0\n\n  init(input: String){\n    self.input = input\n  }\n}\n```", "```swift\nclass Expression {\n  func interpret(context: Context) {\n    if context.input.characters.count == 0 {\n      return\n    }\n\n    if context.input.hasPrefix(nine()){\n      context.output = context.output + (9 * multiplier())\n      context.input = context.input.subStringFrom(2)\n    } else  if context.input.hasPrefix(four()){\n      context.output = context.output + (4 * multiplier())\n      context.input = context.input.subStringFrom(2)\n    } else  if context.input.hasPrefix(five()){\n      context.output = context.output + (5 * multiplier())\n      context.input = context.input.subStringFrom(1)\n    }\n\n    while context.input.hasPrefix(one()) {\n      context.output = context.output + (1 * multiplier())\n      context.input = context.input.subStringFrom(1)\n    }\n  }\n\n  func one() -> String {\n    fatalError(\"this method must be implemented in a subclass\")\n  }\n\n  func four() -> String {\n      fatalError(\"this method must be implemented in a subclass\")\n  }\n\n  func five() -> String {\n      fatalError(\"this method must be implemented in a subclass\")\n  }\n  func nine() -> String {\n      fatalError(\"this method must be implemented in a subclass\")\n  }\n  func multiplier() -> Int {\n      fatalError(\"this method must be implemented in a subclass\")\n  }\n}\n```", "```swift\nclass ThousandExpression: Expression {\n  override func one() -> String {\n    return \"M\"\n  }\n  override func four() -> String {\n    return \" \"\n  }\n  override func five() -> String {\n    return \" \"\n  }\n  override func nine() -> String {\n    return \" \"\n  }\n  override func multiplier() -> Int {\n    return 1000\n  }\n}\n\nclass HundredExpression: Expression {\n  override func one() -> String {\n    return \"C\"\n  }\n  override func four() -> String {\n    return \"CD\"\n  }\n  override func five() -> String {\n    return \"D\"\n  }\n  override func nine() -> String {\n    return \"CM\"\n  }\n  override func multiplier() -> Int {\n    return 100\n  }\n}\n\nclass TenExpression: Expression {\n  override func one() -> String {\n    return \"X\"\n  }\n  override func four() -> String {\n    return \"XL\"\n  }\n  override func five() -> String {\n    return \"L\"\n  }\n  override func nine() -> String {\n    return \"XC\"\n  }\n  override func multiplier() -> Int {\n    return 10\n  }\n}\n\nclass OneExpression: Expression {\n  override func one() -> String {\n    return \"I\"\n  }\n  override func four() -> String {\n    return \"IV\"\n  }\n  override func five() -> String {\n    return \"V\"\n  }\n  override func nine() -> String {\n    return \"IX\"\n  }\n  override func multiplier() -> Int {\n    return 1\n  }\n}\n```", "```swift\nclass RomanToDecimalConverter {\n  var tree = [ThousandExpression(), HundredExpression(), TenExpression(),OneExpression()]\n\n  func calculate(romanString: String) -> Int {\n    let context = Context(input: romanString)\n    for t in tree {\n      t.interpret(context)\n    }\n    return context.output\n  }\n}\n```", "```swift\nenum FormatError: ErrorType {\n case RomanNumberFormatError\n}\n\n//Helper\nclass RomanToDecimalConverter {\n static let pattern = \"^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n let validation = NSPredicate(format: \"SELF MATCHES %@\", pattern)\n\n  var tree = [ThousandExpression(), HundredExpression(), TenExpression(),OneExpression()]\n\n func calculate(romanString: String) throws -> Int {\n guard validate(romanString) else {\n throw FormatError.RomanNumberFormatError\n }\n\n    let context = Context(input: romanString)\n    for t in tree {\n      t.interpret(context)\n    }\n    return context.output\n  }\n\n func validate(romanString: String) -> Bool {\n return validation.evaluateWithObject(romanString)\n }\n}\n```", "```swift\nlet romanNumberToTest = [\"XIV\", \"MCCMXXVIII\",\"MCMXXVIII\"]\nvar converter = RomanToDecimalConverter()\nfor roman in romanNumberToTest {\n  var decimal = try? converter.calculate(roman)\n  guard (decimal != nil) else {\n    print(\"\\(roman) is not a correct roman number\")\n    continue\n  }\n  print(decimal!)\n}\n```", "```swift\nvar decimal = try? converter.calculate(roman)\n```", "```swift\nstruct GameState {\n  var level: Int\n  var weapon: String\n  var points: Int\n}\n```", "```swift\nprotocol Originator {\n  func createMemento() -> GameMemento  func setMemento(memento: GameMemento)\n}\n```", "```swift\nstruct GameMemento {\n  private let entries: [Int: GameState]\n  private let nextId: Int\n  private let totalPoints: Int\n\n  init(checkPoint: CheckPoint){\n    self.entries = checkPoint.entries\n    self.nextId = checkPoint.nextId\n    self.totalPoints = checkPoint.totalPoints\n  }\n\n  func apply(checkPoint: CheckPoint) {\n    print(\"Restoring a game state to a checkpoint...\")\n    checkPoint.nextId = nextId\n    checkPoint.totalPoints = totalPoints\n    checkPoint.entries = entries\n  }\n}\n```", "```swift\nclass CheckPoint: Originator {\n  private var entries: [Int: GameState] = [:]\n  private var totalPoints: Int  = 0\n  private var nextId: Int = 0\n\n  func addGameStateEntry(level: Int, weapon: String, points: Int) {\n    let entry = GameState(level: level, weapon: weapon, points: points)\n    entries[nextId++] = entry\n    totalPoints += points\n  }\n\n  func createMemento() -> GameMemento {\n    return GameMemento(checkPoint: self)\n  }\n\n  func setMemento(memento: GameMemento) {\n       memento.apply(self)\n  }\n\n  func printCheckPoint() {\n    print(\"Printing checkPoint....\")\n    entries.sort {$0.0 < $1.0 }\n.map {\n        print(\"Level: \\($0.1.level)   Weapon: \\($0.1.weapon)   Points: \\($0.1.points) \")\n    }\n    print(\"Total Points: \\(totalPoints)\\n\")\n  }\n}\n```", "```swift\n    entries.sort {$0.0 < $1.0 }\n.map {\n        print(\"Level: \\($0.1.level)   Weapon: \\($0.1.weapon)   Points: \\($0.1.points) \")\n    }\n```", "```swift\nlet checkPoint = CheckPoint()\ncheckPoint.addGameStateEntry(0, weapon: \"gun\", points: 1200)\ncheckPoint.addGameStateEntry(1, weapon: \"tommy gun\", points: 2250)\ncheckPoint.printCheckPoint()\n\nlet memento = checkPoint.createMemento()\ncheckPoint.addGameStateEntry(2, weapon: \"bazooka\", points: 2400)\ncheckPoint.addGameStateEntry(4, weapon: \"knife\", points: 3000)\ncheckPoint.printCheckPoint()\n\ncheckPoint.setMemento(memento)\ncheckPoint.printCheckPoint()\n```", "```swift\nPrinting checkPoint....\nLevel: 0   Weapon: gun   Points: 1200 \nLevel: 1   Weapon: tommy gun   Points: 2250 \nTotal Points: 3450\n```", "```swift\nlet memento = checkPoint.createMemento()\n\n```", "```swift\ncheckPoint.addGameStateEntry(2, weapon: \"bazooka\", points: 2400)\ncheckPoint.addGameStateEntry(4, weapon: \"knife\", points: 3000)\ncheckPoint.printCheckPoint()\n```", "```swift\nPrinting checkPoint....\nLevel: 0   Weapon: gun   Points: 1200 \nLevel: 1   Weapon: tommy gun   Points: 2250 \nLevel: 2   Weapon: bazooka   Points: 2400 \nLevel: 4   Weapon: knife   Points: 3000 \nTotal Points: 8850\n```", "```swift\ncheckPoint.setMemento(memento)\ncheckPoint.printCheckPoint()\n```", "```swift\nRestoring a game state to a checkpoint...\nPrinting checkPoint....\nLevel: 0   Weapon: gun   Points: 1200 \nLevel: 1   Weapon: tommy gun   Points: 2250 \nTotal Points: 3450\n```"]