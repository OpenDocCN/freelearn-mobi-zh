["```java\nthis.camera.depthTextureMode = DepthTextureMode.depth;\n```", "```java\n// create the off-screen particles textureRenderTexture yourParticlesRenderTexture = RenderTexture.GetTemporary(\n  Screen.width, // yourLowerResolutionIntegerValue \n  Screen.height, // yourLowerResolutionIntegerValue \n  0\n);\n```", "```java\nyourMainCamera.targetTexture = yourParticlesRenderTexture;\nyourMainCamera.backgroundColor = Color.black;\nyourMainCamera.cullingMask = yourLayerMask.value;\nyourMainCamera.depthTextureMode = DepthTextureMode.None;\nyourMainCamera.clearFlags = CameraClearFlags.SolidColor;\n```", "```java\nShader.SetGlobalVector(\n  \"_Your_Camera_Depth_Texture_Size\",\n  Vector4(\n    this.camera.pixelWidth, this.camera.pixelHeight, 0.0, 0.0\n  )\n);\ndepthCamera.RenderWithShader(\n  Shader.Find(\"Pro/Unity/Performance/Particles/Off-Screen\"), \n  \"RenderType\"\n);\nMaterial yourMixedMaterial = YouClassHelper.GetMaterialByShader(\n  Shader.Find(\"Pro/Unity/Performance/Particles/Off-Screen\")\n);\nVector2 yourTexelOffset = Vector2.Scale(\n  source.GetTexelOffset(), \n  Vector2(source.width, source.height)\n);\nGraphics.BlitMultiTap(\n  yourParticlesRenderTexture, source, yourMixedMaterial,  yourTexelOffset\n);\n```", "```java\nRenderTexture.ReleaseTemporary(yourParticlesRenderTexture);\nGraphics.Blit(source, destination);\n```", "```java\nYourPoolClass.cs\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class YourPoolClass : MonoBehaviour\n{\n      private static readonly Dictionary<string, YourPoolClass> \n      namesOfObjects = new Dictionary<string, YourPoolClass>();\n\n      public static YourPoolClass GetPoolByName(string name) { \n    return namesOfObjects[name]; \n  }\n\n      [SerializeField]\n      private string nameOfYourPool = string.Empty;\n\n      [SerializeField]\n      private Transform yourPoolPrefab = null;\n\n      [SerializeField]\n      private int initialObjectCounter = 23;\n\n      [SerializeField]\n      private bool isParentEnabled = true;\n\n      private readonly Stack<Transform> yourObjectsStack = new Stack<Transform>();\n\n      void Awake()\n      {\n    System.Diagnostics.Debug.Assert(yourPoolPrefab);\n    namesOfObjects[nameOfYourPool] = this;\n\n          for (int i = 0; i < initialObjectCounter; i++)\n          {\n                var t = Instantiate(yourPoolPrefab) as Transform;\n                AdjustingYourObject(t);\n                LiberationObject(t);\n          }\n      }\n\n      public Transform GetObject(Vector3 position = new Vector3())\n      {\n          Transform t = null;\n\n          if (yourObjectsStack.Count > 0) \n    {\n                t = yourObjectsStack.Pop();\n          } \n    else \n    {\n                Debug.LogWarning(\n        nameOfYourPool + \" pool error!\", this\n      );\n                t = Instantiate(yourPoolPrefab) as Transform;\n          }\n\n          t.position = position;\n          AdjustingYourObject(t);\n\n          return t;\n      }\n\n      private void AdjustingYourObject(Transform obj)\n      {\n         if (isParentEnabled)\n         {\n                obj.parent = transform;\n          }\n\n          obj.gameObject.SetActiveRecursively(true);\n          obj.BroadcastMessage(\n      \"OnCreateEvent\", \n      this, \n      SendMessageOptions.DontRequireReceiver\n    );\n      }\n\n      public void LiberationObject(Transform obj)\n      {\n         obj.BroadcastMessage(\n      \"OnLiberationEvent\", \n      this, \n      SendMessageOptions.DontRequireReceiver\n    );\n          obj.gameObject.SetActiveRecursively(false);\n          yourObjectsStack.Push(obj);\n      }\n}\n```", "```java\nusing UnityEngine;\n\npublic class YourPoolExampleUsage : MonoBehaviour {\n  void Start() {\n    YourPoolClass pool = YourPoolClass.GetPoolByName(\"Bang\");\n    Transform obj = pool.GetObject(Vector3.zero);\n  }\n}\n```", "```java\nusing UnityEngine;\nusing System.Collections;\n\n[RequireComponent(typeof(ParticleSystem))]\npublic class YourPoolParticleSystem : MonoBehaviour\n{\n    private YourPoolClass yourPoolClass;\n\n    void OnCreateEvent(YourPoolClass ypc)\n    {\n        yourPoolClass = ypc;\n\n        particleSystem.renderer.enabled = true;\n        particleSystem.time = 0;\n        particleSystem.Clear(true);\n        particleSystem.Play(true);\n    }\n\n    void OnLiberationEvent()\n    {\n        particleSystem.Stop();\n        particleSystem.time = 0;\n        particleSystem.Clear(true);\n        particleSystem.renderer.enabled = false;\n    }\n\n    void Update()\n    {\n        if (!particleSystem.IsAlive(true) && particleSystem.renderer.enabled)\n        {\n            yourPoolClass.LiberationObject(transform);\n        }\n    }\n}\n```", "```java\n  function Start () {\n        Profiler.logFile = \"yourName.log\";\n\n        Profiler.enableBinaryLog = true; // writes to \"yourName.log.data\"\n\n        Profiler.enabled = true;\n  }\n```", "```java\nProfiler.AddFramesFromFile (\"yourName.log\");\n```", "```java\nUnityEditorInternal.ProfilerDriver\n```", "```java\nProfiler.BeginSample(\"Your Label Name\");\nProfiler.EndSample();\nProfiler.GetRuntimeMemorySize(o : Object) : int\n```", "```java\nusing UnityEngine;\n\npublic class ExampleProfilerClass\n{\n  int counter = 0;\n\n  float startedTime = 0;\n  float totalTime = 0;\n  float endTime = 0;\n  float elapsedTime = 0;\n\n  bool wasStartedFlag = false;\n\n  public string indexStr;\n\n  public float TotalTime {\n    get { \n      return totalTime; \n    }\n  }\n\n  public int Counter {\n    get { \n      return counter;\n    }\n  }\n\n  public ExampleProfilerClass(string indexStr)\n  {\n    this.indexStr = indexStr;\n  }\n\n  void ShowError() {\n    Debug.LogError(\"ExampleProfilerClass {START / END} ERROR: [index] = [\" + indexStr + \"]\");  \n  }\n\n  public void Start() {\n    if (wasStartedFlag) { \n      ShowError(); \n    }\n\n    counter++;\n\n    wasStartedFlag = true;\n\n    startedTime = Time.realtimeSinceStartup;\n  }\n\n  public void End() {\n    endTime = Time.realtimeSinceStartup;\n\n    if (false == wasStartedFlag) { \n      ShowError(); \n    }\n\n    wasStartedFlag = false;\n\n    elapsedTime = (endTime - startedTime);\n\n    totalTime += elapsedTime;\n  }\n\n  public void ClearStatistics() {\n    wasStartedFlag = false;\n\n    totalTime = 0;\n\n    counter = 0;\n  }\n}\n```", "```java\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class SimpleProfiler : MonoBehaviour {\n  float startedTime = 0;\n  float followingTime = 1;\n  float totalTimeInMilliSeconds = 0;\n  float averageTimeInMilliSeconds = 0;\n  float framesPerSecond = 0;\n  float savedTimeInMilliSeconds = 0;\n  float percentageSavedFromTotal = 0;\n  float timeInMilliSecondsPerFrame = 0;\n  float timeInMilliSecondsPerCall = 0;\n  float callsNumberPerFrame = 0;\n\n  int frameCount = 0;\n  int colWidth = 30;\n\n  static Dictionary<string, ExampleProfilerClass> statistics = new Dictionary<string, ExampleProfilerClass>();\n\n  string profilerInfo = \"ALREADY STARTED !\";\n\n  Rect windowRect = new Rect(25, 25, 800, 300);\n\n  void Awake() {\n    startedTime = Time.time;\n  }\n\n  void OnGUI() {\n    GUI.Box(windowRect,\"Simple Profiler\");\n    GUI.Label(windowRect, profilerInfo);\n  }\n\n  public static void Start(string indexStr) {\n    if (false == statistics.ContainsKey(indexStr)) {\n      statistics[indexStr] = new ExampleProfilerClass(indexStr);\n    }\n\n    statistics[indexStr].Start();\n  }\n\n  public static void End(string indexStr) {\n    statistics[indexStr].End();\n  }\n\n  void Update() {\n    frameCount++;\n\n    if (Time.time > followingTime)\n    {\n      profilerInfo = \"\\n\\n\\n\";\n\n      totalTimeInMilliSeconds = (Time.time - startedTime) * 1000;\n      averageTimeInMilliSeconds = (totalTimeInMilliSeconds / frameCount);\n      framesPerSecond = (1000 / (totalTimeInMilliSeconds / frameCount));\n\n      profilerInfo += \"Frames per Second: \";\n      profilerInfo += framesPerSecond.ToString(\"0.#\") + \" frames; \\nAverage Frame Time: \";\n      profilerInfo += averageTimeInMilliSeconds.ToString(\"0.#\") + \" ms \\n\\n\\n\";\n      profilerInfo += \"Time Percentages\".PadRight(colWidth);\n      profilerInfo += \"ms per Frame\".PadRight(colWidth);\n      profilerInfo += \"ms per Call\".PadRight(colWidth);\n      profilerInfo += \"Calls number per Frame\".PadRight(colWidth);\n      profilerInfo += \"NameIndex\";\n      profilerInfo += \"\\n\";\n\n      foreach(ExampleProfilerClass statisticsRecord in statistics.Values)\n      {\n        savedTimeInMilliSeconds = (statisticsRecord.TotalTime * 1000);\n        percentageSavedFromTotal = (savedTimeInMilliSeconds * 100) / totalTimeInMilliSeconds;\n        callsNumberPerFrame = statisticsRecord.Counter / (float)frameCount;\n        timeInMilliSecondsPerCall = savedTimeInMilliSeconds / statisticsRecord.Counter;\n        timeInMilliSecondsPerFrame = savedTimeInMilliSeconds / frameCount;\n\n        profilerInfo += (percentageSavedFromTotal.ToString(\"0.000\") + \"%\").PadRight(colWidth);\n        profilerInfo += (timeInMilliSecondsPerFrame.ToString(\"0.000\") + \" ms\").PadRight(colWidth);\n        profilerInfo += (timeInMilliSecondsPerCall.ToString(\"0.0000\") + \" ms\").PadRight(colWidth);\n        profilerInfo += (callsNumberPerFrame.ToString(\"0.000\")).PadRight(colWidth);\n        profilerInfo += (statisticsRecord.indexStr);\n        profilerInfo += \"\\n\";\n\n        statisticsRecord.ClearStatistics();\n      }\n\n      frameCount = 0;\n\n      startedTime = Time.time;\n\n      followingTime = Time.time + 1;\n    }   \n  }\n}\n```", "```java\nusing UnityEngine;\n\npublic class TestProfilerCode : MonoBehaviour {\n  float tmpFloat;\n\n  void Update () {\n    SimpleProfiler.Start(\"YOUR_UNIQUE_LABEL_1\");\n\n    for (int i = 0; i < 10; i++) {\n      for (int degree = 0; degree < 360; degree++) {\n        tmpFloat = Mathf.Cos(degree * Mathf.Deg2Rad);\n      }\n    }\n\n    SimpleProfiler.End(\"YOUR_UNIQUE_LABEL_1\");\n\n    ///////////////////////////////////////////////////\n\n    SimpleProfiler.Start(\"YOUR_UNIQUE_LABEL_2\");\n\n    for (int i = 0; i < 50; i++) {\n      for (int degree = 0; degree < 180; degree++) {\n        tmpFloat = Mathf.Sqrt(Mathf.Cos(degree * Mathf.Deg2Rad) + Mathf.Sin(degree * Mathf.Deg2Rad));\n      }\n    }\n\n    SimpleProfiler.End(\"YOUR_UNIQUE_LABEL_2\");\n  }\n}\n```"]