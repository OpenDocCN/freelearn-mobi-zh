["```kt\npublic void Update()\n{\n#if UNITY_EDITOR\n        // Set _GlobalLightEstimation to 1 in editor, if the value is not set, all materials\n        // using light estimation shaders will be black.\n        Shader.SetGlobalFloat(\"_GlobalLightEstimation\", 1.0f);\n#else\n if (Frame.TrackingState != FrameTrackingState.Tracking)\n        {\n            return;\n        }\n\n        // Use the following function to compute color scale:\n        // * linear growth from (0.0, 0.0) to (1.0, LinearRampThreshold)\n        // * slow growth from (1.0, LinearRampThreshold)\n            const float LinearRampThreshold = 0.8f;\n            const float MiddleGray = 0.18f;\n            const float Inclination = 0.4f;\n\n        float normalizedIntensity = Frame.LightEstimate.PixelIntensity / MiddleGray;\n        float colorScale = 1.0f;\n\n        if (normalizedIntensity < 1.0f)\n        {\n            colorScale = normalizedIntensity * LinearRampThreshold;\n        }\n        else\n        {\n            float b = LinearRampThreshold / Inclination - 1.0f;\n            float a = (b + 1.0f) / b * LinearRampThreshold;\n            colorScale = a * (1.0f - (1.0f / (b * normalizedIntensity + 1.0f)));\n        }\n\n        Shader.SetGlobalFloat(\"_GlobalLightEstimation\", colorScale);\n#endif\n    }\n}\n```", "```kt\nconst float MiddleGray = 1.0f;\n```", "```kt\nShader \"ARCore/DiffuseWithLightEstimation\"\n{\n    Properties\n    {\n        _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n    }\n\n    SubShader\n    {\n        Tags { \"RenderType\"=\"Opaque\" }\n        LOD 150\n\n        CGPROGRAM\n    #pragma surface surf Lambert noforwardadd finalcolor:lightEstimation\n\n        sampler2D _MainTex;\n        fixed _GlobalLightEstimation;\n\n        struct Input\n        {\n            float2 uv_MainTex;\n        };\n\n    void lightEstimation(Input IN, SurfaceOutput o, inout fixed4   \n                         color)\n    {\n        color *= _GlobalLightEstimation;\n    }\n\n    void surf (Input IN, inout SurfaceOutput o)\n    {\n        fixed4 c = tex2D(_MainTex, IN.uv_MainTex);\n        o.Albedo = c.rgb;\n        o.Alpha = c.a;\n    }\n    ENDCG\n  }\n\n    Fallback \"Mobile/VertexLit\"\n}\n```", "```kt\nShader \"ARCore/DiffuseWithLightEstimation\"\n```", "```kt\nLOD 150\n```", "```kt\n#pragma surface surf Lambert noforwardadd finalcolor:lightEstimation\n\n#pragma surface surfaceFunction lightModel [optionalparams]\n\n```", "```kt\nvoid surf (Input IN, inout SurfaceOutput o)\n{\n fixed4 c = tex2D(_MainTex, IN.uv_MainTex);\n o.Albedo = c.rgb;\n o.Alpha = c.a;\n }\n```", "```kt\ncolor *= _GlobalLightEstimation;\n```", "```kt\npublic class EnvironmentalLight : MonoBehaviour\n{ //after me\n  public GameObject SceneCamera;\n  public GameObject SceneLight;\n  private float maxGlobal = float.MinValue;\n  private Vector3 maxLightDirection;\n```", "```kt\nconst float Inclination = 0.4f; //after me\nvar pi = Frame.LightEstimate.PixelIntensity;\nif(pi > maxGlobal)\n{\n  maxGlobal = pi;\n  SceneLight.transform.rotation = Quaternion.LookRotation(-SceneCamera.transform.forward);\n}\n\n```", "```kt\nvar pi = Frame.LightEstimate.PixelIntensity; //after me\nmaxGlobal *= .98f;\nif(pi > maxGlobal){ //before me\n```"]