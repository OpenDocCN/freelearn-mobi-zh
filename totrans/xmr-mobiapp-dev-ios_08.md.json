["```swift\nInvokeOnMainThread(delegate () {â€¦});\n```", "```swift\nusing (var pool = new NSAutoreleasePool()) {\n  pool.InvokeOnMainThread(delegate() {\n    // do something on the UI thread\n  });\n}\n```", "```swift\n// thread 1\nlock(typeof(int)) {\n  Thread.Sleep(1000);\n  lock(typeof(float)) {\n    Console.WriteLine(\"Thread 1 got both locks\");\n  }\n}\n\n// thread 2\nlock(typeof(float)) {\n  Thread.Sleep(1000);\n  lock(typeof(int)) {\n    Console.WriteLine(\"Thread 2 got both locks\");\n  }\n}\n```", "```swift\nusing System.Threading;\n...\nprivate int i = 0;\n\npublic override void ViewDidLoad() {\n  base.ViewDidLoad();\n  var first = new Thread(new ThreadStart(firstThread));\n  var second = new Thread(new ThreadStart(secondThread));\n  btnStart.TouchUpInside += delegate {\n    first.Start();\n    Thread.Sleep(10);\n// causes a 10ms delay between starting the next thread\n\n    second.Start();\n  };\n}\n\nprivate void firstThread() {\n  string text = string.Empty;\n  while (i < 10) {\n    text = string.Format(\"1st thread going i from {0} to {1}\",i, ++i);\n    InvokeOnMainThread(delegate() {thread1.Text = text;\n    });\n    Thread.Sleep(100);\n  }\n}\n\nprivate void secondThread() {\n  string text = string.Empty;\n  while (i < 10) {\n    text = string.Format(\"2nd thread going i from {0} to {1}\",i, ++i);\n    InvokeOnMainThread(delegate() {\n      thread2.Text = text;\n    });\n    Thread.Sleep(100);\n  }\n}\n```", "```swift\nprivate int i = 0;\nprivate object lock_i = new object();\npublic override void ViewDidLoad() {\n  base.ViewDidLoad();\n  var first = new Thread(new ThreadStart(firstThread));\n  var second = new Thread(new ThreadStart(secondThread));\n  btnStart.TouchUpInside += delegate {\n    first.Start();\n    Thread.Sleep(10);\n    // causes a 10ms delay between starting the next thread\n\n        second.Start();\n  };\n}\nprivate void firstThread() {\n  string text = string.Empty;\n  do {\n    lock(this.lock_i) {\n      if (i >= 10) return;\n      text = string.Format(\"1st thread going i from {0} to {1}\",i, ++i);\n      InvokeOnMainThread(delegate() {\n        thread1.Text = text;\n      });\n    }\n    Thread.Sleep(100);\n  }\n  while(true);\n}\nprivate void secondThread() {\n  string text = string.Empty;\n  do {\n    lock(this.lock_i) {\n      if (i >= 10) return;\n      text = string.Format(\"2nd thread going i from {0} to {1}\",i, ++i);\n      InvokeOnMainThread(delegate() {\n        thread2.Text = text;\n      });\n    }\n    Thread.Sleep(100);\n  }\n  while(true);\n}\n```"]