["```swift\n- (BOOL)application:(UIApplication *)application\n didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    // Register for push notifications\n    [application registerForRemoteNotificationTypes:\n                                 UIRemoteNotificationTypeBadge |\n                                 UIRemoteNotificationTypeAlert |             \n                                 UIRemoteNotificationTypeSound];\n    ...\n}\n```", "```swift\n- (void)application:(UIApplication *)application\ndidRegisterForRemoteNotificationsWithDeviceToken:(NSData *)newDeviceToken {\n    // Store the deviceToken in the current installation and save it to Parse.\n    PFInstallation *currentInstallation = [PFInstallation currentInstallation];\n    [currentInstallation setDeviceTokenFromData:newDeviceToken];\n    [currentInstallation saveInBackground];\n}\n```", "```swift\n- (void)application:(UIApplication *)application\ndidReceiveRemoteNotification:(NSDictionary *)userInfo {\n    [PFPush handlePush:userInfo];\n}\n```", "```swift\n// Create our Installation query\nPFQuery *pushQuery = [PFInstallation query];\n[pushQuery whereKey:@\"deviceType\" equalTo:@\"ios\"];\n\n// Send push notifications to query\n[PFPush sendPushMessageToQueryInBackground:pushQuery\t\n                               withMessage:@\"Hello World!\"];\n```", "```swift\nParse.Cloud.afterSave(\"Comment\", function(request) {\n  // Our \"Comment\" class has a \"text\" key with the body of the comment itself\n  var commentText = request.object.get('text');\n\n  var pushQuery = new Parse.Query(Parse.Installation);\n  pushQuery.equalTo('deviceType', 'ios');\n\n  Parse.Push.send({\n    where: pushQuery, // Set our Installation query\n    data: {\n      alert: \"New comment: \" + commentText\n    }\n  }, {\n    success: function() {\n      // Push was successful\n    },\n    error: function(error) {\n      throw \"Got an error \" + error.code + \" : \" + error.message;\n    }\n  });\n});\n```", "```swift\n// When users Comment, we subscribe them to that channel.\nPFInstallation *currentInstallation = [PFInstallation currentInstallation];\n[currentInstallation addUniqueObject:@\"Comments\" forKey:@\"channels\"];\n[currentInstallation saveInBackground];\n```", "```swift\nobjectId:yvoZDtAxUR channels:[\"Comments\"]\n```", "```swift\n// When users indicate they are no longer Giants fans, we unsubscribe them.\nPFInstallation *currentInstallation = [PFInstallation currentInstallation];\n[currentInstallation removeObject:@\"Comments\" forKey:@\"channels\"];\n[currentInstallation saveInBackground];\n```", "```swift\nNSArray *subscribedChannels = [PFInstallation currentInstallation].channels;\n```", "```swift\n// Send a notification to all devices subscribed to the \"Giants\" channel.\nPFPush *push = [[PFPush alloc] init];\n[push setChannel:@\"Comments\"];\n[push setMessage:@\"Thats the new comment!\"];\n[push sendPushInBackground];\n```", "```swift\nNSArray *channels = [NSArray arrayWithObjects:@\"Comments\", @\"Mets\", nil];\nPFPush *push = [[PFPush alloc] init];\n\n// Be sure to use the plural 'setChannels'.\n[push setChannels:channels];\n[push setMessage:@\"Multiple channel comments.\"];\n[push sendPushInBackground];\n```", "```swift\n// Store app language and version\nPFInstallation *installation = [PFInstallation currentInstallation];\n[installation setObject:[NSNumber numberWithBool:YES] forKey:@\"Like\"];\n[installation setObject:[NSNumber numberWithBool:YES] forKey:@\"Comment\"];\n[installation setObject:[NSNumber numberWithBool:YES] forKey:@\"Posts\"];\n[installation saveInBackground];\n```", "```swift\n// Create our Installation query\nPFQuery *pushQuery = [PFInstallation query];\n[pushQuery whereKey:@\"Comments\" equalTo:[NSNumber numberWithBool:YES]];\n\n// Send push notifications to query\nPFPush *push = [[PFPush alloc] init];\n[push setQuery:pushQuery]; // Set our Installation query\n[push setMessage:@\"This is the test comment.\"];\n[push sendPushInBackground];\n```", "```swift\n// Find users near a given location\nPFQuery *userQuery = [PFUser query];\n[userQuery whereKey:@\"location\"\n        nearGeoPoint:partyLocation\n         withinMiles:[NSNumber numberWithInt:1]]\n\n// Find devices associated with these users\nPFQuery *pushQuery = [PFInstallation query];\n[pushQuery whereKey:@\"user\" matchesQuery:userQuery];\n\n// Send push notifications to query\nPFPush *push = [[PFPush alloc] init];\n[push setQuery:pushQuery]; // Set our Installation query\n[push setMessage:@\"Party tickets free to all nearby users!\"];\n[push sendPushInBackground];\n```", "```swift\nNSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:\n    @\"New comment!\", @\"alert\",\n    @\"Increment\", @\"badge\",\n    @\"demo.caf\", @\"sound\",\n    nil];\nPFPush *push = [[PFPush alloc] init];\n[push setChannels:[NSArray arrayWithObjects:@\"Mets\", nil]];\n[push setData:data];\n[push sendPushInBackground];\n```", "```swift\n// Create date object for tomorrow\nNSDateComponents *comps = [[NSDateComponents alloc] init];\n[comps setYear:2013];\n[comps setMonth:8];\n[comps setDay:27];\nNSCalendar *gregorian =[[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];\nNSDate *date = [gregorian dateFromComponents:comps];\n\n// Send push notifications with expiration date\nPFPush *push = [[PFPush alloc] init];\n[push expireAtDate:date];\n[push setQuery:everyoneQuery];\n[push setMessage:@\"Movie tickets on sale until August 27th\"];\n[push sendPushInBackground];\n```", "```swift\nPFQuery *query = [PFInstallation query];\n[query whereKey:@\"channels\" equalTo:@\"suitcaseOwners\"];\n\n// Notification for Android users\n[query whereKey:@\"deviceType\" equalTo:@\"android\"];\nPFPush *androidPush = [[PFPush alloc] init];\n[androidPush setMessage:@\"Your suitcase has been filled with tiny robots!\"];\n[androidPush setQuery:query];\n[androidPush sendPushInBackground];\n\n// Notification for iOS users\n[query whereKey:@\"deviceType\" equalTo:@\"ios\"];\nPFPush *iOSPush = [[PFPush alloc] init];\n[iOSPush setMessage:@\"Your suitcase has been filled with tiny apples!\"];\n[iOSPush setChannel:@\"suitcaseOwners\"];\n[iOSPush setQuery:query];\n[iOSPush sendPushInBackground];\n\n// Notification for Windows 8 users\n[query whereKey:@\"deviceType\" equalTo:@\"winrt\"];\nPFPush *winPush = [[PFPush alloc] init];\n[winPush setMessage:@\"Your suitcase has been filled with tiny glass!\"];\n[winPush setQuery:query];\n[winPush sendPushInBackground];\n\n// Notification for Windows 8 users\n[query whereKey:@\"deviceType\" equalTo:@\"winphone\"];\nPFPush *winPush = [[PFPush alloc] init];\n[wpPush setMessage:@\"Your suitcase is very hip; very metro.\"];\n[wpPush setQuery:query];\n[wpPush sendPushInBackground];\n```", "```swift\nNSDictionary *data = @{\n  @\"alert\": @\"James commented on your photo!\",\n  @\"p\": @\"vmRZXZ1Dvo\" // Photo's object id\n};\nPFPush *push = [[PFPush alloc] init];\n[push setQuery:photoOwnerQuery];\n[push setData:data];\n[push sendPushInBackground];\n```", "```swift\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  . . .\n  // Extract the notification data\n  NSDictionary *notificationPayload = launchOptions[UIApplicationLaunchOptionsRemoteNotificationKey];\n\n  // Create a pointer to the Post object\n  NSString *postId = [notificationPayload objectForKey:@\"p\"];\n  PFObject *targetPost = [PFObject objectWithoutDataWithClassName:@\"Post\"objectId:postId];\n\n  // Fetch photo object\n  [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {\n    // Show post view controller\n    if (!error && [PFUser currentUser]) {\n      PostVC *viewController = [[PostVC alloc] initWithPost:object];\n      [self.navController pushViewController:viewController animated:YES];\n    }\n  }];\n}\n```", "```swift\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {\n  // Create empty post object\n  NSString *postId = [userInfo objectForKey:@\"p\"];\n  PFObject *targetPost = [PFObject objectWithoutDataWithClassName:@\"Post\"objectId:postId];\n\n  // Fetch photo object\n  [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {\n    // Show photo view controller\n    if (!error && [PFUser currentUser]) {\n      PostVC *viewController = [[PostVC alloc] initWithPost:object];\n      [self.navController pushViewController:viewController animated:YES];\n    }\n  }];\n}\n```"]