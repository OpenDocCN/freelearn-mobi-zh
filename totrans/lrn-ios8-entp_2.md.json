["```swift\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n\n    UIView *view = [[UIView alloc] initWithFrame:self.window.bounds];\n    [view setBackgroundColor:[UIColor blueColor]];\n    [self.window addSubview:view];\n\n    [self.window makeKeyAndVisible];\n    return YES;\n}\n```", "```swift\nCGRect labelFrame = CGRectMake( 10, 40, 100, 30 );\nUILabel* label = [[UILabel alloc] initWithFrame: labelFrame];\n[label setText: @\"HELLO\"];\n[label setTextColor: [UIColor orangeColor]];\n[view addSubview: label];\n```", "```swift\nCGRect buttonFrame = CGRectMake( 10, 80, 100, 30 );\nUIButton *button = [[UIButton alloc] initWithFrame: buttonFrame];\n[button setTitle: @\"My Button\" forState: UIControlStateNormal];\n[button setTitleColor: [UIColor redColor] forState: UIControlStateNormal];\n[button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n[view addSubview: button];\n```", "```swift\n- (void)buttonAction:(id)sender\n{\n    NSLog(@\"button clicked\");\n}\n```", "```swift\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n\n    UIView *view = [[UIView alloc] initWithFrame:self.window.bounds];\n    [view setBackgroundColor:[UIColor blueColor]];\n    [self.window addSubview:view];\n\n    CGRect labelFrame = CGRectMake( 10, 40, 100, 30 );\n    UILabel* label = [[UILabel alloc] initWithFrame: labelFrame];\n    [label setText: @\"HELLO\"];\n    [label setTextColor: [UIColor orangeColor]];\n    [view addSubview: label];\n\n    CGRect buttonFrame = CGRectMake( 10, 80, 100, 30 );\n    UIButton *button = [[UIButton alloc] initWithFrame: buttonFrame];\n    [button setTitle: @\"My Button\" forState: UIControlStateNormal];\n    [button setTitleColor: [UIColor redColor] forState:                                                                                                               UIControlStateNormal];\n    [button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n    [view addSubview: button];\n\n    [self.window makeKeyAndVisible];\n    return YES;\n}\n```", "```swift\n       @property (weak , nonatomic) IBOutlet UIPickerView *Picker\n    ```", "```swift\n    #import <UIKit/UIKit.h>\n    @interface ViewController : UIViewController<UIPickerViewDataSource, UIPickerViewDelegate>\n\n    @property (weak, nonatomic) IBOutlet UIPickerView *picker;\n    @end\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n          [super viewDidLoad];\n\n          // Initialize Data\n          NSArray *pickerData;\n          pickerData = @[@\"Item 1\", @\"Item 2\", @\"Item 3\", @\"Item 4\",@\"Item5\"];\n\n          // Connect data\n          self.picker.dataSource = self;\n          self.picker.delegate = self;\n    }\n    ```", "```swift\n    - (void)didReceiveMemoryWarning\n    {\n       [super didReceiveMemoryWarning];\n    }\n    // The number of columns of data\n    - (int)numberOfComponentsInPickerView:(UIPickerView *)pickerView\n    {\n       return 1;\n    }\n    // The number of rows of data\n    - (int)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component\n    {\n       return pickerData.count;\n    }\n\n    // The data to return for the row and component (column) that's being passed in\n    - (NSString*)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component\n    {\n       return pickerData[row];\n    }\n    ```", "```swift\n        @property (weak, nonatomic) IBOutlet UIWebView *viewSite;\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n        [super viewDidLoad];\n\n        NSString *String = @\"http://www.facebook.com\";\n        NSURL *url = [NSURL URLWithString:String];      //passing string in url\n        NSURLRequest *requestObj = [NSURLRequest requestWithURL:url];\n        [self.viewSite loadRequest:requestObj];\n    }\n    ```", "```swift\n-(UITableViewCell *)cellForRowAtIndexPath:(NSIndexPath *)indexPath\n- (void)deleteRowsAtIndexPaths:(NSArray *)indexPathswithRowAnimation:(UITableViewRowAnimation)animation\n- (id)dequeueReusableCellWithIdentifier:(NSString *)identifier\n- (id)dequeueReusableCellWithIdentifier:(NSString *)identifierforIndexPath:(NSIndexPath *)indexPath\n- (void)reloadData\n- (void)reloadRowsAtIndexPaths:(NSArray *)indexPaths\n   withRowAnimation:(UITableViewRowAnimation)animation\n- (NSArray *)visibleCells\n```", "```swift\n    @interface  TableViewController : UIViewController <UITableViewDelegate, UITableViewDataSource> \n    ```", "```swift\n    @implementation TableViewControler\n    {\n       NSArray *Recipelist;\n    }\n       -(void)viewDidLoad\n       {\n          [super viewDidLoad];\n          // Initialize table data\n          Recipelist =  @[@\"Crispy Egg\",@\"Braised Pork\", @\"Domestic Cheese\", @\"Roasted baby beets\"];}\n    ```", "```swift\n    - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n    {\n       return [Recipelist count];\n    }\n\n    - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n    {\n        //create identifier for cell\n        NSString *TableIdentifier = @\"TableCell\";\n\n        // dequeReusableCell is method to reuse the cell\n        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:TableIdentifier];\n        if (cell == nil) {\n          cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:TableIdentifier];\n        }\n\n        //set the text for each cell as per our array objects\n        cell.textLabel.text = [Recipelist objectAtIndex:indexPath.row];\n        return cell;\n    }\n    ```"]