["```\nimport UIKit\nimport Foundation\nextension PhotoFilterViewController: UIDropInteractionDelegate {\n}\n```", "```\nfunc dropInteraction(_ interaction: UIDropInteraction, canHandle session: UIDropSession) -> Bool {\n    if session.localDragSession == nil {\n        return session.canLoadObjects(ofClass: UIImage.self)\n    }\n    else { return false }\n}\n```", "```\nfunc dropInteraction(_ interaction: UIDropInteraction, sessionDidUpdate session: UIDropSession) -> UIDropProposal {\n    let operation: UIDropOperation\n    if session.localDragSession == nil {\n        operation = .copy\n    }\n    else { operation = .copy }\n    return UIDropProposal(operation: operation)\n\n}\n```", "```\nfunc dropInteraction(_ interaction: UIDropInteraction, performDrop session: UIDropSession) {\n    if session.localDragSession == nil {\n        for dragItem in session.items {\n            loadImage(dragItem.itemProvider)\n        }\n    }\n}\n```", "```\nfunc dropInteraction(_ interaction: UIDropInteraction, previewForDropping item: UIDragItem, withDefault defaultPreview: UITargetedDragPreview) -> UITargetedDragPreview? {\n    if item.localObject == nil {\n        return nil\n    } else {\n        let target = UIDragPreviewTarget(container: view, center: imgExample.center)\n        return defaultPreview.retargetedPreview(with: target)\n    }\n}\n```", "```\nimport UIKit\nimport Foundation\n\nextension PhotoFilterViewController: UIDropInteractionDelegate {\n\n    func dropInteraction(_ interaction: UIDropInteraction, canHandle session: UIDropSession) -> Bool {\n        if session.localDragSession == nil {\n            return session.canLoadObjects(ofClass: UIImage.self)        }\n        else { return false }\n    }\n\n    func dropInteraction(_ interaction: UIDropInteraction, sessionDidUpdate session: UIDropSession) -> UIDropProposal {\n        let operation: UIDropOperation\n        if session.localDragSession == nil {\n            operation = .copy\n        }\n        else { operation = .copy  }\n        return UIDropProposal(operation: operation)\n    }\n\n    func dropInteraction(_ interaction: UIDropInteraction, performDrop session: UIDropSession) {\n        if session.localDragSession == nil {\n            for dragItem in session.items {\n                loadImage(dragItem.itemProvider)\n            }\n        }\n    }\n\n    func dropInteraction(_ interaction: UIDropInteraction, previewForDropping item: UIDragItem, withDefault defaultPreview: UITargetedDragPreview) -> UITargetedDragPreview? {\n        if item.localObject == nil {\n            return nil\n        } else {\n            let target = UIDragPreviewTarget(container: view, center: imgExample.center)\n            return defaultPreview.retargetedPreview(with: target)\n        }\n    }\n}\n```", "```\nfunc addDropInteraction() {\n    view.addInteraction(UIDropInteraction(delegate: self))\n}\n```", "```\nfunc initialize() {\n    requestAccess()\n    addDropInteraction()\n    setupCollectionView()\n    checkDevice()\n}\n```", "```\nelse { return session.canLoadObjects(ofClass: FilterItem.self) }\n```", "```\nfunc dropInteraction(_ interaction: UIDropInteraction, canHandle session: UIDropSession) -> Bool {\n    if session.localDragSession == nil {\n        return session.canLoadObjects(ofClass: UIImage.self)\n    }\n    else { return session.canLoadObjects(ofClass: FilterItem.self) }\n}\n```", "```\nelse {\n    for dragItem in session.items {\n        let itemProvider = dragItem.itemProvider\n        itemProvider.loadObject(ofClass: FilterItem.self) { (object, error) in\n            if let error = error {\n                print(error.localizedDescription)\n            } else {\n                DispatchQueue.main.async {\n                    if let item = object as? FilterItem {\n                        print(\"filter \\(item.filter)\")\n                        self.filterSelected(item: item)\n                    }\n                }\n            }\n        }\n    }\n}\n```", "```\nfunc dropInteraction(_ interaction: UIDropInteraction, performDrop session: UIDropSession) {\n    if session.localDragSession == nil {\n        for dragItem in session.items {\n            loadImage(dragItem.itemProvider)\n        }\n    }\n    else {\n        for dragItem in session.items {\n            let itemProvider = dragItem.itemProvider\n            itemProvider.loadObject(ofClass: FilterItem.self) { (object, error) in\n                if let error = error {\n                    print(error.localizedDescription)\n                } else {\n                    DispatchQueue.main.async {\n                        if let item = object as? FilterItem {\n                            print(\"filter \\(item.filter)\")\n                            self.filterSelected(item: item)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```", "```\nrequired init(itemProviderData data: Data, typeIdentifier: String) throws {\n    if typeIdentifier == FilterItem.typeIdentifier {\n        let item = try? JSONDecoder().decode(FilterItem.self, from: data)\n        if let i = item {\n            self.name = i.name\n            self.filter = i.filter\n            return\n        }\n    }\n\n    throw ParseError.decodingFailed(\"Invalid type!\")\n\n}\n```", "```\nimport UIKit\nimport MobileCoreServices\n\nextension FilterItem: NSItemProviderReading {\n\n    static var readableTypeIdentifiersForItemProvider: [String] {\n        return [FilterItem.typeIdentifier]\n    }\n\n    static func object(withItemProviderData data: Data, \n      typeIdentifier: String) throws -> Self {\n        switch typeIdentifier {\n        case FilterItem.typeIdentifier:\n            return try! JSONDecoder().decode(self, from: data)\n        default:\n            throw ParseError.decodingFailed(\"Invalid type!\")\n        }\n    }\n}\n```", "```\nextension FilterItem: NSItemProviderWriting {\n    static var writableTypeIdentifiersForItemProvider: [String] {\n        return [FilterItem.typeIdentifier, kUTTypeUTF8PlainText as String]\n    }\n\n    func loadData(withTypeIdentifier typeIdentifier: String, forItemProviderCompletionHandler completionHandler: @escaping (Data?, Error?) -> Void) -> Progress? {\n        let data: Data?\n        switch typeIdentifier {\n        case FilterItem.typeIdentifier:\n            data = try? JSONEncoder().encode(self)\n        case kUTTypeUTF8PlainText as NSString as String:\n            data = \"\\(name), \\(filter)\".data(using: .utf8)\n        default:\n            data = nil\n        }\n        completionHandler(data, nil)\n        return nil\n    }\n}\n```", "```\ncollectionView?.dragDelegate = self\n```", "```\nfunc setupCollectionView() {\n    let layout = UICollectionViewFlowLayout()\n    if Device.isPhone { layout.scrollDirection = .horizontal }\n    else { layout.scrollDirection = .vertical }\n    layout.sectionInset = UIEdgeInsets(top: 7, left: 7, bottom: 7, right: 7)\n    layout.minimumInteritemSpacing = 0\n    layout.minimumLineSpacing = 7\n\n    collectionView?.collectionViewLayout = layout\n    collectionView?.dragDelegate = self\n}\n```", "```\nimport UIKit\n\nextension PhotoFilterViewController: UICollectionViewDragDelegate {\n    func collectionView(_ collectionView: UICollectionView, itemsForBeginning session: UIDragSession, at indexPath: IndexPath) -> [UIDragItem] {\n        let itemProvider = NSItemProvider(object: data[indexPath.item])\n        let dragItem = UIDragItem(itemProvider: itemProvider)\n        return [dragItem]\n    }\n}\n```"]