- en: Multimedia
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多媒体
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Playing sound effects with `SoundPool`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `SoundPool` 播放声音效果
- en: Playing audio with `MediaPlayer`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `MediaPlayer` 播放音频
- en: Responding to hardware media controls in your app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的应用中响应用户硬件媒体控件
- en: Taking a photo with the default camera app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用默认相机应用拍照
- en: Taking a picture using the Camera2 API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Camera2 API 拍照
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Now that we''ve explored graphics and animations in the previous chapters,
    it''s time to look at the sound options available in Android. The two most popular
    options to play sound are the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中我们已经探讨了图形和动画，现在是时候看看 Android 中可用的声音选项了。播放声音最常用的两个选项如下：
- en: '`SoundPool`: This is for short sound clips'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SoundPool`：这是用于短声音片段的'
- en: '`MediaPlayer`: This is designed for larger sound files (such as music) and
    video files'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MediaPlayer`：这是为较大的声音文件（如音乐）和视频文件设计的'
- en: The first two recipes will look at using these libraries. We'll also look at
    how to use hardware related to sound, such as the volume controls and media playback
    controls (play, pause, next and previous, often available on headphones).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个教程将探讨如何使用这些库。我们还将探讨如何使用与声音相关的硬件，例如音量控制和媒体播放控制（播放、暂停、下一曲和上一曲，通常在耳机上可用）。
- en: The rest of the chapter will focus on using the camera, both indirectly through
    Intents (to pass the camera request to the default camera application) and directly
    using the camera APIs. We'll show a complete example using  the  Camera2 APIs
    released with Android 5.0 Lollipop (API 21).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将专注于使用相机，无论是通过 Intents（将相机请求传递到默认相机应用）还是直接使用相机 API。我们将展示一个使用 Android
    5.0 Lollipop（API 21）发布的 Camera2 API 的完整示例。
- en: Playing sound effects with SoundPool
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SoundPool 播放声音效果
- en: When you need sound effects in your application, `SoundPool` is usually a good
    starting point.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要在您的应用程序中使用声音效果时，`SoundPool` 通常是一个好的起点。
- en: '`SoundPool` is interesting in that it allows us to create special effects with
    our sounds by changing the play rate and by allowing multiple sounds to play simultaneously.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`SoundPool` 很有趣，因为它允许我们通过改变播放速率和允许同时播放多个声音来创建声音的特殊效果。'
- en: 'Popular audio file types supported include:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的流行音频文件类型包括：
- en: 3GPP (`.3gp`)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: 3GPP (`.3gp`)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: FLAC (`.flac`)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FLAC (`.flac`)
- en: MP3 (`.mp3`)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MP3 (`.mp3`)
- en: MIDI Type 0 and 1 (`.mid`, `.xmf`, and `.mxmf`)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIDI 类型 0 和 1 (`.mid`, `.xmf`, 和 `.mxmf`)
- en: Ogg (`.ogg`)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ogg (`.ogg`)
- en: WAVE (`.wav`)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WAVE (`.wav`)
- en: See the Supported Media Formats link for a complete list, including network
    protocols.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 查看支持的媒体格式链接，以获取完整的列表，包括网络协议。
- en: As is common in Android, new releases to the OS bring changes to the APIs. `SoundPool`
    is no exception and the original `SoundPool` constructor was deprecated in Lollipop
    (API 21). Rather than setting our minimum API to 21 or relying on deprecated code
    (which may stop working at some point), we'll implement both the old and the new
    approach and check the OS version at runtime to use the appropriate method.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如同 Android 中的常见做法，新版本的操作系统发布会带来 API 的变化。`SoundPool` 也不例外，原始的 `SoundPool` 构造函数在
    Lollipop（API 21）中被弃用。我们不会将我们的最小 API 设置为 21 或依赖弃用的代码（这可能在某个时刻停止工作），我们将实现旧的和新的方法，并在运行时检查操作系统版本以使用适当的方法。
- en: This recipe will demonstrate how to play sound effects using the Android `SoundPool`
    library. To demonstrate playing sounds simultaneously, we'll create two buttons,
    and each will play a sound when pressed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将演示如何使用 Android 的 `SoundPool` 库播放声音效果。为了演示同时播放声音，我们将创建两个按钮，每个按钮在被按下时都会播放一个声音。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `SoundPool`. Use the default
    Phone & Tablet options, and select Empty Activity when prompted for Activity Type.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `SoundPool`。使用默认的 Phone & Tablet 选项，并在提示活动类型时选择
    Empty Activity。
- en: To demonstrate playing sounds simultaneously, we need at least two audio files
    in the project. We went to SoundBible.com ([http://soundbible.com/royalty-free-sounds-5.html](http://soundbible.com/royalty-free-sounds-5.html)) and
    found two royalty-free, public-domain sounds to include in the downloaded project
    files.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示同时播放声音，项目中至少需要两个音频文件。我们访问了 SoundBible.com ([http://soundbible.com/royalty-free-sounds-5.html](http://soundbible.com/royalty-free-sounds-5.html))
    并找到了两个免费、公有领域的声音，以包含在下载的项目文件中。
- en: 'The first sound is a longer playing sound: [http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个声音是一个较长的播放声音：[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)
- en: 'The second sound is shorter: [http://soundbible.com/1615-Metal-Drop.html](http://soundbible.com/1615-Metal-Drop.html)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个声音较短：[http://soundbible.com/1615-Metal-Drop.html](http://soundbible.com/1615-Metal-Drop.html)
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'As explained before, we''ll need two audio files to include in the project.
    Once you have your sound files ready, follow these steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要在项目中包含两个音频文件。一旦你的音频文件准备就绪，请按照以下步骤操作：
- en: Create a new raw folder (File | New | Android resource directory) and choose
    raw in the Resource type drop-down.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的原始文件夹（文件 | 新建 | Android资源目录）并在资源类型下拉菜单中选择原始。
- en: Copy your sound files to `res/raw` as `sound_1` and `sound_2`. (Keep their original
    extensions.)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的音频文件复制到`res/raw`作为`sound_1`和`sound_2`。 （保留它们的原始扩展名。）
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    buttons:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`并用以下按钮替换现有的`TextView`：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open `ActivityMain.java` and add the following global variables:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`ActivityMain.java`并添加以下全局变量：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Modify the existing `onCreate()` method as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改现有的`onCreate()`方法如下：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the `createSoundPoolNew()` method:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`createSoundPoolNew()`方法：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the `createSoundPoolOld()` method:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`createSoundPoolOld()`方法：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the button `onClick()` methods:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加按钮的`onClick()`方法：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Override the `onStop()` callback as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如此覆盖`onStop()`回调：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run the application on a device or emulator.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first detail to notice is how we construct the object itself. As we mentioned
    in the introduction, the `SoundPool` constructor was changed in Lollipop (API
    21). The old constructor was deprecated in favor of using `SoundPool.Builder()`.
    With a constantly changing environment such as Android, changes in the API are
    very common, so it''s a good idea to learn how to work with the changes. As you
    can see, it''s not difficult in this case. We just check the current OS version
    and call the appropriate method. It is worth noting the two method annotations. 
    The first specifies the target API:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的细节是如何构建对象本身。正如我们在介绍中提到的，`SoundPool`构造函数在Lollipop（API 21）中发生了变化。旧的构造函数已被弃用，转而使用`SoundPool.Builder()`。在像Android这样的不断变化的环境中，API的变化非常常见，因此学习如何处理这些变化是个好主意。正如你所看到的，在这种情况下并不困难。我们只需检查当前的操作系统版本并调用相应的方法。值得注意的是这两个方法注解。第一个指定了目标API：
- en: '`@TargetApi(Build.VERSION_CODES.LOLLIPOP)`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`@TargetApi(Build.VERSION_CODES.LOLLIPOP)`'
- en: 'And the second suppresses the deprecation warning:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并且第二个抑制了弃用警告：
- en: '`@SuppressWarnings("deprecation")`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SuppressWarnings("deprecation")`'
- en: After creating `SoundPool`, we set a `setOnLoadCompleteListener()` listener.
    Enabling the buttons is mostly for demonstration purposes to illustrate that `SoundPool`
    needs to load sound resources before they are available.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`SoundPool`后，我们设置一个`setOnLoadCompleteListener()`监听器。启用按钮主要是为了演示目的，以说明`SoundPool`在可用之前需要加载音效资源。
- en: The final point to make on using `SoundPool` is the call to `play()`. We need
    to pass in the `soundID`, which was returned when we loaded the sound using `load()`.
    `play()` gives us a few options, including sound volume (left and right), loop
    count, and playback rate. To demonstrate its flexibility, we play the first sound
    (which is longer) at a lower volume to create more of a background effect with
    the running water. The second sound plays at a higher volume and we play it twice.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`SoundPool`的最后一个要点是调用`play()`。我们需要传递`soundID`，这是我们在使用`load()`加载声音时返回的。`play()`给我们一些选项，包括音量（左右）、循环次数和播放速率。为了展示其灵活性，我们将第一个声音（较长的声音）以较低的音量播放，以创造更多的背景效果。第二个声音以较高的音量播放，并且我们播放它两次。
- en: There's more...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you only need a basic sound effect, such as a click, you can use the `AudioManager`
    `playSoundEffect()` method. Here''s an example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只需要一个基本的音效，例如点击声，你可以使用`AudioManager`的`playSoundEffect()`方法。以下是一个示例：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can only specify a sound from the `SoundEffectConstants`; you cannot use
    your own sound files.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你只能指定来自`SoundEffectConstants`的声音；你不能使用你自己的音频文件。
- en: See also
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`SoundPool` Developer Docs: [https://developer.android.com/reference/android/media/SoundPool.html](https://developer.android.com/reference/android/media/SoundPool.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SoundPool`开发者文档：[https://developer.android.com/reference/android/media/SoundPool.html](https://developer.android.com/reference/android/media/SoundPool.html)'
- en: '`AudioManager` Developer Docs: [https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AudioManager`开发者文档：[https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
- en: Playing audio with MediaPlayer
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MediaPlayer播放音频
- en: 'MediaPlayer is probably one of the most important classes for adding multimedia
    capability to your applications. It supports the following media sources:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`MediaPlayer` 可能是向您的应用程序添加多媒体功能最重要的类之一。它支持以下媒体源：'
- en: Project resources
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目资源
- en: Local files
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地文件
- en: External resources (such as URLs, including streaming)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部资源（例如 URL，包括流媒体）
- en: 'MediaPlayer supports the following popular audio files:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`MediaPlayer` 支持以下流行的音频文件：'
- en: 3GPP (`.3gp`)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: 3GPP (`.3gp`)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: FLAC (`.flac`)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FLAC (`.flac`)
- en: MP3 (`.mp3`)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MP3 (`.mp3`)
- en: MIDI Type 0 and 1 (`.mid`, `.xmf`, and `.mxmf`)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIDI 类型 0 和 1 (`.mid`, `.xmf`, 和 `.mxmf`)
- en: Ogg (`.ogg`)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ogg (`.ogg`)
- en: WAVE (`.wav`)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WAVE (`.wav`)
- en: 'And it supports these popular file types:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 它还支持以下流行的文件类型：
- en: 3GPP (`.3gp`)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: Matroska (`.mkv`)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matroska (`.mkv`)
- en: WebM (`.webm`)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebM (`.webm`)
- en: MPEG-4 (`.mp4`, `.m4a`)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MPEG-4 (`.mp4`, `.m4a`)
- en: See the Supported Media Formats link for a complete list, including network
    protocols.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整列表，包括网络协议，请参阅支持的媒体格式链接。
- en: This recipe will demonstrate how to set up `MediaPlayer` in your app to play
    a sound included with your project. (For a complete review of the full capability
    offered by `MediaPlayer`, see the Developer Docs link at the end of this recipe.)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将演示如何在您的应用程序中设置 `MediaPlayer` 以播放项目中的声音。（有关 `MediaPlayer` 提供的完整功能的详细审查，请参阅本食谱末尾的开发者文档链接。）
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `MediaPlayer`. Use the default
    Phone & Tablet options and select Empty Activity when prompted for Activity Type.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `MediaPlayer`。使用默认的 Phone & Tablet 选项，并在提示活动类型时选择
    Empty Activity。
- en: 'We will also need a sound for this recipe and will use the same longer playing
    "water" sound used in the previous recipe:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为这个食谱准备一个声音，并将使用之前食谱中使用的相同较长的“水”声音：
- en: '[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)'
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'As explained previously, we''ll need a sound file to include in the project.
    Once you have your sound file ready, follow these steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要一个声音文件包含在项目中。一旦您准备好了声音文件，请按照以下步骤操作：
- en: Create a new raw folder (File | New | Android resource directory) and chose
    raw in the Resource type dropdown.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 raw 文件夹（文件 | 新 | Android 资源目录），并在资源类型下拉菜单中选择 raw。
- en: Copy your sound file to `res/raw` as `sound_1`. (Keep the original extension.)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的声音文件复制到 `res/raw` 目录下，命名为 `sound_1`。（保留原始扩展名。）
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    buttons:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 并将现有的 `TextView` 替换为以下按钮：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, open `ActivityMain.java` and add the following global variable:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `ActivityMain.java` 并添加以下全局变量：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the `buttonPlay()` method:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `buttonPlay()` 方法：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the `buttonPause()` method:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `buttonPause()` 方法：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the `buttonStop()` method:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `buttonStop()` 方法：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, override the `onStop()` callback with the following code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下代码覆盖 `onStop()` 回调：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以运行应用程序在设备或模拟器上。
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The code here is pretty straightforward. We create MediaPlayer with our sound
    and start playing the sound. The buttons will replay, pause, and stop accordingly.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的代码相当简单。我们使用我们的声音创建 `MediaPlayer` 并开始播放声音。按钮将相应地重播、暂停和停止。
- en: Even this basic example illustrates one very important concept regarding MediaPlayer,
    and that is the state. If you're making serious use of MediaPlayer, review the
    link provided later for detailed information.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这个基本示例也说明了关于 `MediaPlayer` 的一个非常重要的概念，那就是状态。如果您正在认真使用 `MediaPlayer`，请查看稍后提供的链接以获取详细信息。
- en: There's more...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'To make our demonstration easier to follow, we use the UI thread for all our
    operations. For this example, using a short audio file included with the project,
    we aren''t likely to experience any UI delays. In general, it''s a good idea to
    use a background thread when preparing `MediaPlayer`. To make this common task
    easier, `MediaPlayer` already includes an asynchronous prepare method called `prepareAsync()`.
    The following code will create an `OnPreparedListener()` listener and use the
    `prepareAsync()` method:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的演示更容易理解，我们使用 UI 线程进行所有操作。对于此示例，使用项目中的短音频文件，我们不太可能遇到任何 UI 延迟。通常，在准备 `MediaPlayer`
    时使用后台线程是一个好主意。为了使这个常见任务更容易，`MediaPlayer` 已经包含了一个名为 `prepareAsync()` 的异步准备方法。以下代码将创建一个
    `OnPreparedListener()` 监听器并使用 `prepareAsync()` 方法：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Playing music in the background
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在后台播放音乐
- en: Our example is meant to play audio when the application is in the foreground,
    and will release the `MediaPlayer` resources in the `onStop()` callback. What
    if you are creating a music player and want to play music in the background, even
    when the user is using another application? In that scenario, you'll want to use
    `MediaPlayer` in a service, instead of an activity. You'll use the `MediaPlayer`
    library the same way; you'll just need to pass information (such as sound selection)
    from the UI to your service.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例旨在当应用处于前台时播放音频，并在 `onStop()` 回调中释放 `MediaPlayer` 资源。如果你正在创建音乐播放器，并希望在用户使用其他应用时也能在后台播放音乐，那会怎样？在这种情况下，你将需要在服务中使用
    `MediaPlayer` 而不是活动。你将以相同的方式使用 `MediaPlayer` 库；你只需要从 UI 传递信息（如声音选择）到你的服务。
- en: Note that since a service runs in the same UI thread as the activities, you
    still do not want to perform potentially blocking operations in a service. MediaPlayer
    does handle background threads to prevent blocking your UI thread; otherwise,
    you would want to perform threading yourself. (See [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml),
    *Getting Your App Ready for the Play Store* for more information on threading
    and options.)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于服务在同一个 UI 线程上运行，因此你仍然不希望在服务中执行可能阻塞的操作。MediaPlayer 可以处理后台线程以防止阻塞你的 UI 线程；否则，你可能需要自己进行线程处理。（有关线程和选项的更多信息，请参阅[第15章](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml)，*为应用商店准备你的应用*。）
- en: Using hardware volume keys to control your app's audio volume
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用硬件音量键控制你应用的音频音量
- en: 'If you want the volume controls to control the volume in your app, use the
    `setVolumeControlStream()` method to specify your application''s audio stream,
    as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望音量控制可以控制你应用中的音量，请使用 `setVolumeControlStream()` 方法指定你的应用程序的音频流，如下所示：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See the `AudioManager` link below for other streaming options.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 参见下方的 `AudioManager` 链接以获取其他流选项。
- en: See also
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Supported media formats: [https://developer.android.com/guide/appendix/media-formats.html](https://developer.android.com/guide/appendix/media-formats.html)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的媒体格式：[https://developer.android.com/guide/appendix/media-formats.html](https://developer.android.com/guide/appendix/media-formats.html)
- en: '`MediaPlayer` developer docs: [http://developer.android.com/reference/android/media/MediaPlayer.html](http://developer.android.com/reference/android/media/MediaPlayer.html)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MediaPlayer` 开发者文档：[http://developer.android.com/reference/android/media/MediaPlayer.html](http://developer.android.com/reference/android/media/MediaPlayer.html)'
- en: '`AudioManager` developer docs: [https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AudioManager` 开发者文档：[https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
- en: Responding to hardware media controls in your app
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的应用中响应用户硬件媒体控制
- en: Having your app respond to media controls (like on headphones), such as Play,
    Pause, Skip, and so on, is a nice touch your users will appreciate. Android makes
    this possible through the media library. As with the *Playing sound effects with
    SoundPool* recipe earlier, the Lollipop release changed how this is done. Unlike
    the `SoundPool` example, this recipe is able to take advantage of another approach,
    the compatibility library.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让你的应用响应用户媒体控制（如耳机上的控制），例如播放、暂停、跳过等，这是一个用户会喜欢的贴心功能。Android 通过媒体库实现了这一点。与之前提到的
    *使用 SoundPool 播放声音效果* 的配方一样，Lollipop 版本改变了这种操作方式。与 `SoundPool` 示例不同，这个配方能够利用另一种方法，即兼容性库。
- en: This recipe will show you how to set up `MediaSession` to respond to the hardware
    buttons, which will work on Lollipop and later, as well as previous Lollipop versions
    using the `MediaSessionCompat` library. (The compatibility library will take care
    of checking the OS version and using the correct API calls automatically.)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将向你展示如何设置 `MediaSession` 以响应用户硬件按钮，这将适用于 Lollipop 及更高版本，以及使用 `MediaSessionCompat`
    库的早期 Lollipop 版本。（兼容性库将负责检查操作系统版本并自动使用正确的 API 调用。）
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `HardwareMediaControls`.  Use
    the default Phone & Tablet options and select Empty Activity on the Add an Activity
    to Mobile dialog.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `HardwareMediaControls`。使用默认的 Phone & Tablet
    选项，并在“添加活动到移动”对话框中选择 Empty Activity。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll just be using Toast messages to respond to the hardware events and therefore
    will not need to make any changes to the activity layout. The first step is to
    add the V13 support library to the project. Start by opening `build.gradle (Module:
    app)` and perform the following steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将只使用 Toast 消息来响应硬件事件，因此不需要对活动布局进行任何更改。第一步是将 V13 支持库添加到项目中。首先打开 `build.gradle
    (Module: app)` 并执行以下步骤：'
- en: 'Add the following library to the dependency section:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在依赖关系部分添加以下库：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, open `ActivityMain.java` and add the following `mMediaSessionCallback`
    to the class declaration:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 `ActivityMain.java` 并将以下 `mMediaSessionCallback` 添加到类声明中：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following code to the existing `onCreate()` callback:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的 `onCreate()` 回调中：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Run the application on a device or emulator with media controls (such as headphones)
    to see the Toast messages.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在具有媒体控制（如耳机）的设备或模拟器上运行应用程序以查看 Toast 消息。
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are four steps to setting this up:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 设置此功能有四个步骤：
- en: Create a `MediaSession.Callback` and attach it to `MediaSession`
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `MediaSession.Callback` 并将其附加到 `MediaSession`
- en: Set the `MediaSession` flags to indicate we want media buttons
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `MediaSession` 标志以指示我们想要媒体按钮
- en: Set `SessionState` to active
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `SessionState` 设置为活动状态
- en: Set `PlayBackState` with the actions we're going to handle
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们将要处理的操作设置 `PlayBackState`
- en: Steps 4 and 1 work together as the callback will only get the events set in
    the `PlayBackState`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 4 和步骤 1 一起工作，因为回调函数只会获取在 `PlayBackState` 中设置的 `events`。
- en: Since we're not actually controlling any playback in this recipe, we just demonstrate
    how to respond to the hardware events. You'll want to implement actual functionality
    in `PlayBackState` and include a call to `setState()` after the `setActions()`
    call.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这个菜谱中实际上并没有控制任何播放，所以我们只是演示如何响应硬件事件。你将需要在 `PlayBackState` 中实现实际的功能，并在调用
    `setActions()` 之后调用 `setState()`。
- en: This is a very nice example of how the changes to the API can make things easier.
    And since the new `MediaSession` and `PlaybackState` were rolled into the `Compatibility`
    library, we can take advantage of these new APIs on older versions of the OS.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的例子，说明了 API 的更改可以使事情变得更容易。由于新的 `MediaSession` 和 `PlaybackState` 被整合到 `Compatibility`
    库中，我们可以在旧版本的操作系统上利用这些新 API。
- en: There's more...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: With all the variety of hardware available on the market, how can your app check
    what is being used?
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有各种各样的硬件，你的应用如何检查正在使用什么？
- en: Checking the hardware type
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查硬件类型
- en: 'If you want your app to respond differently based on the current output hardware,
    you can use `AudioManager` to check. The following is an example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让你的应用根据当前输出硬件的不同而以不同的方式响应，你可以使用 `AudioManager` 来检查。以下是一个示例：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See also
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`MediaSession` developer docs: [https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MediaSession` 开发者文档：[https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)'
- en: '`MediaSessionCompat` developer docs: [https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html](https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MediaSessionCompat` 开发者文档：[https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html](https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html)'
- en: '`PlaybackState` developer docs: [https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PlaybackState` 开发者文档：[https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
- en: '`PlaybackStateCompat` developer docs: [https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PlaybackStateCompat` 开发者文档：[https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
- en: Taking a photo with the default camera app
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用默认相机应用拍照
- en: If your application needs an image from the camera, but is not a camera replacement
    app, it may be better to allow the default camera app to take the picture. This
    also respects your user's preferred camera application.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用需要从相机获取图片，但不是相机替换应用，可能允许默认的相机应用拍照会更好。这也尊重了用户的首选相机应用。
- en: When you take a photo, unless it is specific to your application, it's considered
    good practice to make the photo publicly available. (This allows it to be included
    in the user's photo gallery.) This recipe will demonstrate using the default photo
    application to click a picture, save it to the public folder, and display the
    image.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拍照时，除非它特定于你的应用，否则将其公开可用是一种良好的实践。（这允许它被包含在用户的照片库中。）本食谱将演示使用默认的照片应用拍照，将其保存到公共文件夹，并显示图片。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `UsingTheDefaultCameraApp`.  Use
    the default Phone & Tablet options and select Empty Activity on the Add an Activity
    to Mobile dialog.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `UsingTheDefaultCameraApp`。使用默认的 Phone & Tablet
    选项，并在“添加到移动设备”对话框中选择 Empty Activity。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create a layout with an ImageView and button. The button will
    create an Intent to launch the default Camera app. When the camera app is done,
    our app will get a callback. We''ll check the result and display the picture if
    available. Start by opening the Android Manifest and follow these steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含 ImageView 和按钮的布局。按钮将创建一个 Intent 以启动默认的相机应用。当相机应用完成后，我们的应用将收到回调。我们将检查结果并在有照片的情况下显示图片。首先打开
    Android Manifest 并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open `activity_main.xml` and replace the existing TextView with the following
    views:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 并用以下视图替换现有的 TextView：
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open `MainActivity.java` and add the following global variables to the `MainActivity`
    class:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 并将以下全局变量添加到 `MainActivity` 类中：
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following method to create the URI for the photo:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以创建照片的 URI：
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following method to handle the button click:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以处理按钮点击：
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add a new method to override `onActivityResult()` as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新方法以覆盖 `onActivityResult()`，如下所示：
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '7\. Add the following code to the end of the existing `onCreate()` method:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 7. 将以下代码添加到现有的 `onCreate()` 方法末尾：
- en: '[PRE26]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 8\. You're ready to run the application on a device or emulator.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 8. 你可以准备在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There are two parts to working with the default camera app. The first is to
    set up the Intent to launch the app. We create the Intent using `MediaStore.ACTION_IMAGE_CAPTURE`
    to indicate we want a photo app. We verify a default app exists by checking the
    results from `resolveActivity()`. As long as it's not null, we know an application
    is available to handle the Intent. (Otherwise, our app will crash.) We create
    a filename and add it to the Intent with `putExtra(MediaStore.EXTRA_OUTPUT, mLastPhotoURI)`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 与默认相机应用一起工作有两个部分。第一部分是设置启动应用的 Intent。我们使用 `MediaStore.ACTION_IMAGE_CAPTURE`
    创建 Intent 以指示我们想要一个照片应用。我们通过检查 `resolveActivity()` 的结果来验证是否存在默认应用。只要它不为 null，我们就知道有一个应用可以处理该
    Intent。（否则，我们的应用会崩溃。）我们创建一个文件名并将其添加到 Intent 中，使用 `putExtra(MediaStore.EXTRA_OUTPUT,
    mLastPhotoURI)`。
- en: When we get the callback in `onActivityResult()`, we first make sure it's `PHOTO_RESULT`
    and `RESULT_OK` (the user could have cancelled), then we load the photo in ImageView.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 `onActivityResult()` 中收到回调时，我们首先确保它是 `PHOTO_RESULT` 和 `RESULT_OK`（用户可能已取消），然后我们在
    ImageView 中加载照片。
- en: You might be wondering what the `StrictMode` calls are for in `onCreate()`.
    Basically, those lines of code disable an additional security check made by the
    OS. If we don't disable StrictMode, the app will crash when creating the file
    URI with a `FileUriExposedException` exception.  For a production app, one solution
    would be to create a FileProvider as we did in the *Accessing External Storage
    with Scoped Directories* recipe from [Chapter 7](2bf1b0ac-516b-48e1-95f6-ce76f2046d20.xhtml),
    *Data Storage*. Refer to the *See also* section for other options.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道 `onCreate()` 中的 `StrictMode` 调用有什么用。基本上，这些代码行禁用了操作系统进行的额外安全检查。如果我们不禁用
    StrictMode，当创建文件 URI 时应用会因 `FileUriExposedException` 异常而崩溃。对于生产应用，一个解决方案是创建一个
    FileProvider，就像我们在第 7 章 *数据存储* 的 *使用有作用域目录访问外部存储* 食谱中所做的那样。有关其他选项，请参阅 *另请参阅* 部分。
- en: There's more...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you don''t care where the picture is stored, you can call the Intent without
    using the `MediaStore.EXTRA_OUTPUT` extra. If you don''t specify the output file,
    `onActivityResult()` will include a thumbnail of the image in the data Intent.
    The following is how you can display the thumbnail:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不在乎图片存储在哪里，你可以不使用 `MediaStore.EXTRA_OUTPUT` 额外信息调用 Intent。如果你不指定输出文件，`onActivityResult()`
    将在数据 Intent 中包含图像的缩略图。以下是如何显示缩略图的方法：
- en: '[PRE27]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here''s the code to load the full resolution image, using the URI returned
    in the data Intent:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是加载全分辨率图像的代码，使用在 data Intent 中返回的 URI：
- en: '[PRE28]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Calling the default video app
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用默认视频应用程序
- en: 'It''s the same process if you want to call the default video capture application.
    Just change the Intent in step 5, as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想调用默认的视频捕获应用程序，过程是相同的。只需在步骤 5 中更改 Intent，如下所示：
- en: '[PRE29]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can get the URI to the video in `onActivityResult()`, as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `onActivityResult()` 中获取视频的 URI，如下所示：
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: See also
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Scaling down large images to avoid Out of Memory exceptions* recipe in
    [Chapter 10](a9bb5495-da76-415c-b83e-c75d0b8ce4fd.xhtml)*, Graphics and Animation*
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 10 章](a9bb5495-da76-415c-b83e-c75d0b8ce4fd.xhtml) 的 *将大图像缩小以避免内存不足异常* 配方中，*图形和动画*
- en: The *Accessing External Storage with Scoped Directories* recipe in [Chapter
    7](2bf1b0ac-516b-48e1-95f6-ce76f2046d20.xhtml), *Data Storage*
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 7 章](2bf1b0ac-516b-48e1-95f6-ce76f2046d20.xhtml) 的 *使用作用域目录访问外部存储* 配方中，*数据存储*
- en: Taking a picture using the Camera2 API
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Camera2 API 拍照
- en: The previous recipe demonstrated how to use an Intent to call the default photo
    application. If you only need a quick photo, the Intent is probably the ideal
    solution. If not, and you need more control over the camera, this recipe will
    show you how to use the camera directly with the Camera2 API.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的配方演示了如何使用 Intent 调用默认的拍照应用程序。如果你只需要快速拍照，Intent 可能是理想的解决方案。如果不是，并且你需要对相机有更多控制，这个配方将展示如何直接使用
    Camera2 API 使用相机。
- en: Now that 85% of devices are using Android 5.0 or later, this recipe focuses
    only on the Camera2 API.  (Google has already deprecated the original Camera API.)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现在 85% 的设备都在使用 Android 5.0 或更高版本，这个配方只关注 Camera2 API。 （Google 已经弃用了原始的 Camera
    API。）
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: 'Create a new project in Android Studio and call it Camera2API. In the Target
    Android Devices dialog, select the Phone & Tablet option and choose API 21: Android
    5.0 (Lollipop), or later, for the minimum SDK. Select Empty Activity on the Add
    an Activity to Mobile dialog.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 Camera2API。在目标 Android 设备对话框中，选择手机和平板选项，并选择
    API 21：Android 5.0 (Lollipop) 或更高版本作为最小 SDK。在“添加到移动”对话框中选择“Empty Activity”。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'As you''ll see, there''s a lot of code for this recipe. Start by opening the
    Android Manifest and following these steps:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如您将看到的，这个配方有很多代码。首先打开 AndroidManifest.xml 并按照以下步骤操作：
- en: 'Add the following two permissions:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下两个权限：
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, open `activity_main.xml` and replace the existing TextView with the following
    views:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `activity_main.xml` 并将现有的 TextView 替换为以下视图：
- en: '[PRE32]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, open `MainActivity.java `and add the following global variables to the
    `MainActivity` class:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `MainActivity.java` 并将以下全局变量添加到 `MainActivity` 类中：
- en: '[PRE33]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the following `Comparator` class to the `MainActivity` class:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `Comparator` 类添加到 `MainActivity` 类中：
- en: '[PRE34]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following `CameraCaptureSession.StateCallback`:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `CameraCaptureSession.StateCallback`：
- en: '[PRE35]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the following `SurfaceTextureListener`:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `SurfaceTextureListener`：
- en: '[PRE36]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add `CameraDevice.StateCallback` as follows:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `CameraDevice.StateCallback` 如下：
- en: '[PRE37]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following `CaptureCallback` class to receive the capture completed
    event:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `CaptureCallback` 类以接收捕获完成事件：
- en: '[PRE38]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following code to the existing `onCreate()` callback:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的 `onCreate()` 回调中：
- en: '[PRE39]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add the following methods to override `onPause()` and `onResume()`:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加以重写 `onPause()` 和 `onResume()`：
- en: '[PRE40]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add the `openCamera()` method:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `openCamera()` 方法：
- en: '[PRE41]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add the `startPreview()` method:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `startPreview()` 方法：
- en: '[PRE42]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the `getPictureFile()` method:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `getPictureFile()` 方法：
- en: '[PRE43]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add the following method to save the image file:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以保存图像文件：
- en: '[PRE44]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the following method to handle the button click:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以处理按钮点击：
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the final code to actually set up the camera and take the picture:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加最终代码以实际设置相机并拍照：
- en: '[PRE46]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Run the application on a device or emulator with a camera.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在带有相机的设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see, there are a lot of steps for this recipe, but at a high level,
    it''s pretty simple:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个配方有很多步骤，但从高层次来看，它相当简单：
- en: Set up the camera preview
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置相机预览
- en: Capture the image
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获图像
- en: Now, we'll look at each in detail.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将逐一详细说明。
- en: Setting up the camera preview
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置相机预览
- en: 'Here''s a rundown on how the code sets up the preview:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码如何设置预览的概述：
- en: First, we set up the `TextureView.SurfaceTextureListener` with the `setSurfaceTextureListener()`
    method in `onCreate()`
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用 `setSurfaceTextureListener()` 方法在 `onCreate()` 中设置 `TextureView.SurfaceTextureListener`
- en: When we get the `onSurfaceTextureAvailable()` callback, we open the camera
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们收到 `onSurfaceTextureAvailable()` 回调时，我们打开相机
- en: We pass our `CameraDevice.StateCallback` class to the `openCamera()` method,
    which eventually calls the `onOpened()` callback
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将我们的`CameraDevice.StateCallback`类传递给`openCamera()`方法，它最终会调用`onOpened()`回调
- en: '`onOpened()` gets the surface for the preview by calling `getSurfaceTexture()`
    and passes it to the `CameraDevice` by calling `createCaptureSession()`'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`onOpened()`通过调用`getSurfaceTexture()`获取预览的表面，并通过调用`createCaptureSession()`将其传递给`CameraDevice`'
- en: Finally, when `CameraCaptureSession.StateCallback` `onConfigured()` is called,
    we start the preview with the `setRepeatingRequest()` method
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当`CameraCaptureSession.StateCallback`的`onConfigured()`被调用时，我们使用`setRepeatingRequest()`方法开始预览
- en: Capturing the image
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获图片
- en: 'Even though the `takePicture()` method may appear to be procedural, capturing
    an image also involves several classes and relies on callbacks. Here''s a breakdown
    of how the code works:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`takePicture()`方法可能看起来是过程性的，捕获图片也涉及到几个类并依赖于回调。以下是代码工作原理的分解：
- en: The process starts when the Take Picture button is clicked.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当点击拍照按钮时，这个过程开始。
- en: Then the code queries the camera to find the largest available image size
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后代码查询相机以找到最大的可用图像大小
- en: Then an ImageReader is created.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建一个ImageReader。
- en: Next, the code sets up `OnImageAvailableListener`, and saves the image in the
    `onImageAvailable()` callback.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，代码设置`OnImageAvailableListener`，并在`onImageAvailable()`回调中保存图片。
- en: Then it creates `CaptureRequest.Builder` and includes the `ImageReader` surface.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后它创建`CaptureRequest.Builder`并包含`ImageReader`表面。
- en: Next it creates `CameraCaptureSession.CaptureCallback`, which defines
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，它创建`CameraCaptureSession.CaptureCallback`，这定义了
- en: the `onCaptureCompleted()` callback. When the capture is complete, it restarts
    the preview.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`onCaptureCompleted()`回调。当捕获完成后，它重新开始预览。'
- en: Finally, the `createCaptureSession()` method is called, creating a `CameraCaptureSession.StateCallback`.
    This is where the `capture()` method is called, passing in the `CameraCaptureSession.CaptureCallback`
    created earlier.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，调用`createCaptureSession()`方法，创建一个`CameraCaptureSession.StateCallback`。这是调用之前创建的`capture()`方法的地方，传递`CameraCaptureSession.CaptureCallback`。
- en: There's more...
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We've just created the base code to demonstrate a working Camera application.
    There are many areas for improvement. First, you should handle the device orientation,
    for both the preview and when saving the images. (See the following links.) Also,
    with Android 6.0 (API 23) having over 60% of the market share, your apps should
    already be using the new permission model. Instead of just checking for an exception
    as we do in the `openCamera()` method, it would be better to check for the required
    permission.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了基础代码来演示一个可工作的相机应用程序。有许多改进的地方。首先，你应该处理设备的方向，无论是预览还是保存图片时。（见以下链接。）此外，由于Android
    6.0（API 23）拥有超过60%的市场份额，你的应用程序应该已经使用新的权限模型。而不是像我们在`openCamera()`方法中那样只是检查异常，最好是检查所需的权限。
- en: See also
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Camera2 API Developer Docs [https://developer.android.com/reference/android/hardware/camera2/package-summary.html](https://developer.android.com/reference/android/hardware/camera2/package-summary.html)
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Camera2 API 开发者文档 [https://developer.android.com/reference/android/hardware/camera2/package-summary.html](https://developer.android.com/reference/android/hardware/camera2/package-summary.html)
- en: For examples on detecting the current device orientation, refer to [Chapter
    9](9ec1f7c4-f4c5-4cb3-b10a-59915ba73449.xhtml), *Using the Touchscreen and Sensors*
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于检测当前设备方向的示例，请参阅第9章，*使用触摸屏和传感器*
- en: The *The Android 6.0 Runtime Permission Model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml),
    *Getting your app ready for the Play Store*
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第15章的*为Play商店准备你的应用程序*中，*Android 6.0 运行时权限模型*配方
