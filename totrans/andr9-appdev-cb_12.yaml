- en: Multimedia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Playing sound effects with `SoundPool`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing audio with `MediaPlayer`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to hardware media controls in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a photo with the default camera app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a picture using the Camera2 API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve explored graphics and animations in the previous chapters,
    it''s time to look at the sound options available in Android. The two most popular
    options to play sound are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SoundPool`: This is for short sound clips'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MediaPlayer`: This is designed for larger sound files (such as music) and
    video files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two recipes will look at using these libraries. We'll also look at
    how to use hardware related to sound, such as the volume controls and media playback
    controls (play, pause, next and previous, often available on headphones).
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the chapter will focus on using the camera, both indirectly through
    Intents (to pass the camera request to the default camera application) and directly
    using the camera APIs. We'll show a complete example using  the  Camera2 APIs
    released with Android 5.0 Lollipop (API 21).
  prefs: []
  type: TYPE_NORMAL
- en: Playing sound effects with SoundPool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you need sound effects in your application, `SoundPool` is usually a good
    starting point.
  prefs: []
  type: TYPE_NORMAL
- en: '`SoundPool` is interesting in that it allows us to create special effects with
    our sounds by changing the play rate and by allowing multiple sounds to play simultaneously.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Popular audio file types supported include:'
  prefs: []
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FLAC (`.flac`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MP3 (`.mp3`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIDI Type 0 and 1 (`.mid`, `.xmf`, and `.mxmf`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ogg (`.ogg`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAVE (`.wav`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the Supported Media Formats link for a complete list, including network
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: As is common in Android, new releases to the OS bring changes to the APIs. `SoundPool`
    is no exception and the original `SoundPool` constructor was deprecated in Lollipop
    (API 21). Rather than setting our minimum API to 21 or relying on deprecated code
    (which may stop working at some point), we'll implement both the old and the new
    approach and check the OS version at runtime to use the appropriate method.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to play sound effects using the Android `SoundPool`
    library. To demonstrate playing sounds simultaneously, we'll create two buttons,
    and each will play a sound when pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `SoundPool`. Use the default
    Phone & Tablet options, and select Empty Activity when prompted for Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate playing sounds simultaneously, we need at least two audio files
    in the project. We went to SoundBible.com ([http://soundbible.com/royalty-free-sounds-5.html](http://soundbible.com/royalty-free-sounds-5.html)) and
    found two royalty-free, public-domain sounds to include in the downloaded project
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first sound is a longer playing sound: [http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second sound is shorter: [http://soundbible.com/1615-Metal-Drop.html](http://soundbible.com/1615-Metal-Drop.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As explained before, we''ll need two audio files to include in the project.
    Once you have your sound files ready, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new raw folder (File | New | Android resource directory) and choose
    raw in the Resource type drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy your sound files to `res/raw` as `sound_1` and `sound_2`. (Keep their original
    extensions.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `ActivityMain.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the existing `onCreate()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `createSoundPoolNew()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `createSoundPoolOld()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the button `onClick()` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Override the `onStop()` callback as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first detail to notice is how we construct the object itself. As we mentioned
    in the introduction, the `SoundPool` constructor was changed in Lollipop (API
    21). The old constructor was deprecated in favor of using `SoundPool.Builder()`.
    With a constantly changing environment such as Android, changes in the API are
    very common, so it''s a good idea to learn how to work with the changes. As you
    can see, it''s not difficult in this case. We just check the current OS version
    and call the appropriate method. It is worth noting the two method annotations. 
    The first specifies the target API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@TargetApi(Build.VERSION_CODES.LOLLIPOP)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'And the second suppresses the deprecation warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@SuppressWarnings("deprecation")`'
  prefs: []
  type: TYPE_NORMAL
- en: After creating `SoundPool`, we set a `setOnLoadCompleteListener()` listener.
    Enabling the buttons is mostly for demonstration purposes to illustrate that `SoundPool`
    needs to load sound resources before they are available.
  prefs: []
  type: TYPE_NORMAL
- en: The final point to make on using `SoundPool` is the call to `play()`. We need
    to pass in the `soundID`, which was returned when we loaded the sound using `load()`.
    `play()` gives us a few options, including sound volume (left and right), loop
    count, and playback rate. To demonstrate its flexibility, we play the first sound
    (which is longer) at a lower volume to create more of a background effect with
    the running water. The second sound plays at a higher volume and we play it twice.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you only need a basic sound effect, such as a click, you can use the `AudioManager`
    `playSoundEffect()` method. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can only specify a sound from the `SoundEffectConstants`; you cannot use
    your own sound files.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`SoundPool` Developer Docs: [https://developer.android.com/reference/android/media/SoundPool.html](https://developer.android.com/reference/android/media/SoundPool.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AudioManager` Developer Docs: [https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing audio with MediaPlayer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MediaPlayer is probably one of the most important classes for adding multimedia
    capability to your applications. It supports the following media sources:'
  prefs: []
  type: TYPE_NORMAL
- en: Project resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External resources (such as URLs, including streaming)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MediaPlayer supports the following popular audio files:'
  prefs: []
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FLAC (`.flac`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MP3 (`.mp3`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIDI Type 0 and 1 (`.mid`, `.xmf`, and `.mxmf`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ogg (`.ogg`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAVE (`.wav`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And it supports these popular file types:'
  prefs: []
  type: TYPE_NORMAL
- en: 3GPP (`.3gp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matroska (`.mkv`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebM (`.webm`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MPEG-4 (`.mp4`, `.m4a`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the Supported Media Formats link for a complete list, including network
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up `MediaPlayer` in your app to play
    a sound included with your project. (For a complete review of the full capability
    offered by `MediaPlayer`, see the Developer Docs link at the end of this recipe.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `MediaPlayer`. Use the default
    Phone & Tablet options and select Empty Activity when prompted for Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need a sound for this recipe and will use the same longer playing
    "water" sound used in the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As explained previously, we''ll need a sound file to include in the project.
    Once you have your sound file ready, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new raw folder (File | New | Android resource directory) and chose
    raw in the Resource type dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy your sound file to `res/raw` as `sound_1`. (Keep the original extension.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `ActivityMain.java` and add the following global variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `buttonPlay()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `buttonPause()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `buttonStop()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, override the `onStop()` callback with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code here is pretty straightforward. We create MediaPlayer with our sound
    and start playing the sound. The buttons will replay, pause, and stop accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Even this basic example illustrates one very important concept regarding MediaPlayer,
    and that is the state. If you're making serious use of MediaPlayer, review the
    link provided later for detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make our demonstration easier to follow, we use the UI thread for all our
    operations. For this example, using a short audio file included with the project,
    we aren''t likely to experience any UI delays. In general, it''s a good idea to
    use a background thread when preparing `MediaPlayer`. To make this common task
    easier, `MediaPlayer` already includes an asynchronous prepare method called `prepareAsync()`.
    The following code will create an `OnPreparedListener()` listener and use the
    `prepareAsync()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Playing music in the background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our example is meant to play audio when the application is in the foreground,
    and will release the `MediaPlayer` resources in the `onStop()` callback. What
    if you are creating a music player and want to play music in the background, even
    when the user is using another application? In that scenario, you'll want to use
    `MediaPlayer` in a service, instead of an activity. You'll use the `MediaPlayer`
    library the same way; you'll just need to pass information (such as sound selection)
    from the UI to your service.
  prefs: []
  type: TYPE_NORMAL
- en: Note that since a service runs in the same UI thread as the activities, you
    still do not want to perform potentially blocking operations in a service. MediaPlayer
    does handle background threads to prevent blocking your UI thread; otherwise,
    you would want to perform threading yourself. (See [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml),
    *Getting Your App Ready for the Play Store* for more information on threading
    and options.)
  prefs: []
  type: TYPE_NORMAL
- en: Using hardware volume keys to control your app's audio volume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want the volume controls to control the volume in your app, use the
    `setVolumeControlStream()` method to specify your application''s audio stream,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See the `AudioManager` link below for other streaming options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Supported media formats: [https://developer.android.com/guide/appendix/media-formats.html](https://developer.android.com/guide/appendix/media-formats.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MediaPlayer` developer docs: [http://developer.android.com/reference/android/media/MediaPlayer.html](http://developer.android.com/reference/android/media/MediaPlayer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AudioManager` developer docs: [https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to hardware media controls in your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having your app respond to media controls (like on headphones), such as Play,
    Pause, Skip, and so on, is a nice touch your users will appreciate. Android makes
    this possible through the media library. As with the *Playing sound effects with
    SoundPool* recipe earlier, the Lollipop release changed how this is done. Unlike
    the `SoundPool` example, this recipe is able to take advantage of another approach,
    the compatibility library.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to set up `MediaSession` to respond to the hardware
    buttons, which will work on Lollipop and later, as well as previous Lollipop versions
    using the `MediaSessionCompat` library. (The compatibility library will take care
    of checking the OS version and using the correct API calls automatically.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `HardwareMediaControls`.  Use
    the default Phone & Tablet options and select Empty Activity on the Add an Activity
    to Mobile dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll just be using Toast messages to respond to the hardware events and therefore
    will not need to make any changes to the activity layout. The first step is to
    add the V13 support library to the project. Start by opening `build.gradle (Module:
    app)` and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following library to the dependency section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open `ActivityMain.java` and add the following `mMediaSessionCallback`
    to the class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Run the application on a device or emulator with media controls (such as headphones)
    to see the Toast messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four steps to setting this up:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `MediaSession.Callback` and attach it to `MediaSession`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `MediaSession` flags to indicate we want media buttons
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `SessionState` to active
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `PlayBackState` with the actions we're going to handle
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Steps 4 and 1 work together as the callback will only get the events set in
    the `PlayBackState`.
  prefs: []
  type: TYPE_NORMAL
- en: Since we're not actually controlling any playback in this recipe, we just demonstrate
    how to respond to the hardware events. You'll want to implement actual functionality
    in `PlayBackState` and include a call to `setState()` after the `setActions()`
    call.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very nice example of how the changes to the API can make things easier.
    And since the new `MediaSession` and `PlaybackState` were rolled into the `Compatibility`
    library, we can take advantage of these new APIs on older versions of the OS.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With all the variety of hardware available on the market, how can your app check
    what is being used?
  prefs: []
  type: TYPE_NORMAL
- en: Checking the hardware type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want your app to respond differently based on the current output hardware,
    you can use `AudioManager` to check. The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`MediaSession` developer docs: [https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MediaSessionCompat` developer docs: [https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html](https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PlaybackState` developer docs: [https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PlaybackStateCompat` developer docs: [https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a photo with the default camera app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your application needs an image from the camera, but is not a camera replacement
    app, it may be better to allow the default camera app to take the picture. This
    also respects your user's preferred camera application.
  prefs: []
  type: TYPE_NORMAL
- en: When you take a photo, unless it is specific to your application, it's considered
    good practice to make the photo publicly available. (This allows it to be included
    in the user's photo gallery.) This recipe will demonstrate using the default photo
    application to click a picture, save it to the public folder, and display the
    image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `UsingTheDefaultCameraApp`.  Use
    the default Phone & Tablet options and select Empty Activity on the Add an Activity
    to Mobile dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to create a layout with an ImageView and button. The button will
    create an Intent to launch the default Camera app. When the camera app is done,
    our app will get a callback. We''ll check the result and display the picture if
    available. Start by opening the Android Manifest and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and replace the existing TextView with the following
    views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variables to the `MainActivity`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to create the URI for the photo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to handle the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new method to override `onActivityResult()` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '7\. Add the following code to the end of the existing `onCreate()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 8\. You're ready to run the application on a device or emulator.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two parts to working with the default camera app. The first is to
    set up the Intent to launch the app. We create the Intent using `MediaStore.ACTION_IMAGE_CAPTURE`
    to indicate we want a photo app. We verify a default app exists by checking the
    results from `resolveActivity()`. As long as it's not null, we know an application
    is available to handle the Intent. (Otherwise, our app will crash.) We create
    a filename and add it to the Intent with `putExtra(MediaStore.EXTRA_OUTPUT, mLastPhotoURI)`.
  prefs: []
  type: TYPE_NORMAL
- en: When we get the callback in `onActivityResult()`, we first make sure it's `PHOTO_RESULT`
    and `RESULT_OK` (the user could have cancelled), then we load the photo in ImageView.
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering what the `StrictMode` calls are for in `onCreate()`.
    Basically, those lines of code disable an additional security check made by the
    OS. If we don't disable StrictMode, the app will crash when creating the file
    URI with a `FileUriExposedException` exception.  For a production app, one solution
    would be to create a FileProvider as we did in the *Accessing External Storage
    with Scoped Directories* recipe from [Chapter 7](2bf1b0ac-516b-48e1-95f6-ce76f2046d20.xhtml),
    *Data Storage*. Refer to the *See also* section for other options.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you don''t care where the picture is stored, you can call the Intent without
    using the `MediaStore.EXTRA_OUTPUT` extra. If you don''t specify the output file,
    `onActivityResult()` will include a thumbnail of the image in the data Intent.
    The following is how you can display the thumbnail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the code to load the full resolution image, using the URI returned
    in the data Intent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Calling the default video app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s the same process if you want to call the default video capture application.
    Just change the Intent in step 5, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get the URI to the video in `onActivityResult()`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Scaling down large images to avoid Out of Memory exceptions* recipe in
    [Chapter 10](a9bb5495-da76-415c-b83e-c75d0b8ce4fd.xhtml)*, Graphics and Animation*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Accessing External Storage with Scoped Directories* recipe in [Chapter
    7](2bf1b0ac-516b-48e1-95f6-ce76f2046d20.xhtml), *Data Storage*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a picture using the Camera2 API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipe demonstrated how to use an Intent to call the default photo
    application. If you only need a quick photo, the Intent is probably the ideal
    solution. If not, and you need more control over the camera, this recipe will
    show you how to use the camera directly with the Camera2 API.
  prefs: []
  type: TYPE_NORMAL
- en: Now that 85% of devices are using Android 5.0 or later, this recipe focuses
    only on the Camera2 API.  (Google has already deprecated the original Camera API.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it Camera2API. In the Target
    Android Devices dialog, select the Phone & Tablet option and choose API 21: Android
    5.0 (Lollipop), or later, for the minimum SDK. Select Empty Activity on the Add
    an Activity to Mobile dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you''ll see, there''s a lot of code for this recipe. Start by opening the
    Android Manifest and following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `activity_main.xml` and replace the existing TextView with the following
    views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `MainActivity.java `and add the following global variables to the
    `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `Comparator` class to the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `CameraCaptureSession.StateCallback`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `SurfaceTextureListener`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `CameraDevice.StateCallback` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `CaptureCallback` class to receive the capture completed
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following methods to override `onPause()` and `onResume()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `openCamera()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `startPreview()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `getPictureFile()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to save the image file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to handle the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the final code to actually set up the camera and take the picture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Run the application on a device or emulator with a camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see, there are a lot of steps for this recipe, but at a high level,
    it''s pretty simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the camera preview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capture the image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we'll look at each in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the camera preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a rundown on how the code sets up the preview:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we set up the `TextureView.SurfaceTextureListener` with the `setSurfaceTextureListener()`
    method in `onCreate()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we get the `onSurfaceTextureAvailable()` callback, we open the camera
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We pass our `CameraDevice.StateCallback` class to the `openCamera()` method,
    which eventually calls the `onOpened()` callback
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`onOpened()` gets the surface for the preview by calling `getSurfaceTexture()`
    and passes it to the `CameraDevice` by calling `createCaptureSession()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, when `CameraCaptureSession.StateCallback` `onConfigured()` is called,
    we start the preview with the `setRepeatingRequest()` method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Capturing the image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Even though the `takePicture()` method may appear to be procedural, capturing
    an image also involves several classes and relies on callbacks. Here''s a breakdown
    of how the code works:'
  prefs: []
  type: TYPE_NORMAL
- en: The process starts when the Take Picture button is clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then the code queries the camera to find the largest available image size
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then an ImageReader is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, the code sets up `OnImageAvailableListener`, and saves the image in the
    `onImageAvailable()` callback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then it creates `CaptureRequest.Builder` and includes the `ImageReader` surface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next it creates `CameraCaptureSession.CaptureCallback`, which defines
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the `onCaptureCompleted()` callback. When the capture is complete, it restarts
    the preview.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, the `createCaptureSession()` method is called, creating a `CameraCaptureSession.StateCallback`.
    This is where the `capture()` method is called, passing in the `CameraCaptureSession.CaptureCallback`
    created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've just created the base code to demonstrate a working Camera application.
    There are many areas for improvement. First, you should handle the device orientation,
    for both the preview and when saving the images. (See the following links.) Also,
    with Android 6.0 (API 23) having over 60% of the market share, your apps should
    already be using the new permission model. Instead of just checking for an exception
    as we do in the `openCamera()` method, it would be better to check for the required
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Camera2 API Developer Docs [https://developer.android.com/reference/android/hardware/camera2/package-summary.html](https://developer.android.com/reference/android/hardware/camera2/package-summary.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For examples on detecting the current device orientation, refer to [Chapter
    9](9ec1f7c4-f4c5-4cb3-b10a-59915ba73449.xhtml), *Using the Touchscreen and Sensors*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *The Android 6.0 Runtime Permission Model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml),
    *Getting your app ready for the Play Store*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
