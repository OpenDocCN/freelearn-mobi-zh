- en: Building Our App Structure in Storyboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we created our Tab Bar Controller. In this chapter, we
    will be creating other View Controllers that we need in our app. Our goal for
    the end of this chapter is to be able to navigate through the app with the least
    amount of code needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Collection View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we begin setting up our Collection View Controller, you will need to
    add two files, `ExploreViewController` and `RestaurantViewController`, which you'd
    have downloaded from Packt's website or GitHub. By adding these files and then
    a bit of code, we will be able to focus on the design of our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Later in the book, we will delete these files, and create them ourselves. But,
    for the purposes of this chapter, let''s add these two files into our project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the project `assets` folder that you downloaded from Packt''s website
    or GitHub. Open `Chapter_08` and drag the two files in the folder into your project
    in the Navigator panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dac41712-72f1-443c-8b7c-22a896e13a81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you drop the folder, you will get the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc963047-00ae-4ba1-9f24-ecac8a6144a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure you have both Copy items if needed and Create groups selected. Then,
    hit Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we can add code to these new files, which will allow us to dismiss modals
    that we will create later in this chapter. A modal is a container that opens on
    top of the current content showing in an app, and allows you to take more action
    without opening up all of the information on the screen being viewed. Let''s add
    the code to enable us to dismiss modals:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `ExploreViewController.swift` file and, under where it says `// Add
    Unwind here` at the bottom of the file, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/254432a2-3608-4247-85ff-7b05cf3003ed.png)'
  prefs: []
  type: TYPE_IMG
- en: If we look at our app design, which we reviewed earlier in this book, in our
    first tab, the Explore tab, we show a grid of food cuisines as well as a list
    of locations. First, we will set up our grid.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Collection View Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we discussed earlier in the book, Collection View Controllers allow us to
    display elements within a grid. Let''s set up our Collection View:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Main.storyboard` file, making sure that you are zoomed out and can
    see all of your scenes. In the Utilities panel, ensure that you have the object
    library tab selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in the filter field, type: `collectionview`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2d03077-fa58-4f92-8dc6-7473c043ce1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on and drag Collection View, and drop it onto the Explore View Controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f44bf39f-a4c7-4f1d-a162-29f1ed7f5573.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you drop it onto the scene, you will see small boxes around the entire
    Collection View component. Select the Pin icon, and enter the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e9b27992-f007-42f6-bb3b-8de87017010f.png)'
  prefs: []
  type: TYPE_IMG
- en: All values under Add New Constraints are set to `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Click on Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have our Collection View component set up for our Explore tab.
  prefs: []
  type: TYPE_NORMAL
- en: Hooking up our outlets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now link our file, `ExploreViewController`, to our `UIViewController`
    in storyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'While still in the `Main.storyboard` file, select the `UIViewController` with
    the Collection View that we just created, by clicking on the left-most icon at
    the top of that controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/efec4212-7ead-4873-93dd-eff73cb2e848.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Utilities panel, select the Identity Inspector, which is the third
    icon from the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40860bbe-444e-4af8-882e-6a5a835026c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Under Custom Class, in the Class dropdown menu, select `ExploreViewController`
    and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you hit *Enter*, select the Connections Inspector, the last icon on the
    right, in the Utilities panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/acabb04d-9b04-41fb-b27a-aaf6cc941d14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under Outlets, you will see collectionView and an empty circle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a2db1e3-3e49-4ada-a4f3-166042f574d1.png)`IBOutlet` is a way to a connect
    to a UI element. We have a Collection View on our `UIViewController`; now, we
    are hooking into that variable. Later in the book, you will learn how to create
    these variables.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the collectionView circle, and drag from the circle to the Collection
    View that we just added inside of the `UIViewController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29ba7deb-48f4-42f5-8769-54a5a9fdcc81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you release it, you will see the circle become filled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6475920c-1d10-4d45-9f62-f68636a87f26.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to hook up the data source and delegate. This allows us to pass
    data to our Collection View, as well as know when our Collection View has some
    kind of interaction.
  prefs: []
  type: TYPE_NORMAL
- en: The `dataSource` property is what is used to supply the data for our Collection
    View, so we need to pass whatever data we have to this property. On the other
    hand, the `delegate` property, which supplies the behavior, does not require us
    to supply anything, as it receives interactions that happen within our Collection
    View.
  prefs: []
  type: TYPE_NORMAL
- en: In your scene, select your Collection View and then, in the Utilities panel,
    select the Connections Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Outlets section, you will see two empty circles, `dataSource` and
    `delegate`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a0ad791-5071-4909-8fe9-710e90245306.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on and drag from the empty circle of the `dataSource` property to the
    Explore View Controller in your Outline view, and then release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1ce7db31-ec91-489c-976c-cc4743b8d894.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat for the `delegate` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86efc494-4da5-421b-9222-558d968a1103.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's set up our Collection View prototype cell to have a color.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom color
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Xcode 9, we are now able to add colors to your `Assets.xcassets` folder.
    This is great when you want to have all your colors in one location. Before we
    update our explore cell, let''s create a new color:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Assets.xcassets` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click inside of the `Assets.xcassets`, where you will see folders, and
    create a new folder called colors:![](img/6ac0f8cc-7541-4516-92dd-8b9580276e33.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, right-click the `Color` folder, and this time, select New Color Set.
    You will see a new color added to your folder. Select the Attributes inspector
    in the Utilities panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/51fb249c-dc6b-41d2-8d43-9ea04f80d4f8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Under Color set, update name: `Demo Grey`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under Color, click on the color, and you will see a color panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f0a3f6ec-fbab-4a4f-9d0b-34205345258d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the second tab, Color Slider, and change the Hex Color # value to `AAAAAA`.
    When you are done, you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/944e7e68-a927-422c-ba7c-a6fecb733431.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have a color, we will be able to find our new color in the Color
    drop-down, as you will see next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up our cell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up our cell, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In `Main.storyboard`, select the Collection View prototype cell, which is the
    small box inside of your Collection View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Attributes inspector in the Utilities panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4106dba3-92d7-41e9-8902-9ec472de8d2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Update the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Identifier: `exploreCell`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Background: Demo Grey'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to update the background, you will need to click on the drop-down
    arrow under Background. You will see that our Demo Grey has been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e159f61b-f6c2-4e1f-8694-d7f7fe0db594.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should now see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c54ec16-00df-4aa7-80d4-943b5c1f1ec4.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to add a section header.
  prefs: []
  type: TYPE_NORMAL
- en: Section header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our section header will include the page title, selected location, and a button
    that we will use to see the locations:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Collection View in the `Main.storyboard` outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, in your Utilities panel, select the Attributes inspector and, under Collection
    View Accessories, select the checkbox next to **section header**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5987211d-837f-4f39-89b0-e7338785501c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you will see a box appear above our Demo Grey cell, which is our new
    section header; you should select this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a645b8fb-2be6-48d3-aab2-9e9ce3b86067.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, in the Attributes inspector in the Utilities panel, update Identifier
    to Header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/429dca3c-3302-4f33-aa44-aedc8a140fbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd* +
    *R*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0057c303-5124-4619-970d-6f4b011a0fb8.png)'
  prefs: []
  type: TYPE_IMG
- en: You will see that you now have a grid of boxes and some white space (the section
    header) near the top of the grid. Before we work on the section header, let's
    update our grid to match our design of two items per row with a particular size
    cell.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to update our grid, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use *cmd* + *Shift* + *O*, and in the Open Quickly window, type `Main.storyboard`,
    and then hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Collection View, and then, in the Utilities panel, select Size Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the following values, based on the simulator that you are currently
    using. These values may need to be changed so that your grid has two columns of
    cells, so feel free to alter the values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For iPhone 7, use the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee06d59a-9c3e-45b6-b512-f43575150a39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For iPhone 7 Plus, use the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/caf4656d-f4e0-4c1a-a8a8-cb0f7f5f6f62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For iPhone 4/iPhone SE/iPhone 5/iPhone 5s, use the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0522565b-4276-4ef7-8085-f5c6ed89af89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what everything should look like when you are done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37498974-a3ff-4377-9125-2aeecb6ada2b.png)'
  prefs: []
  type: TYPE_IMG
- en: For now, as we just did, we will use storyboard settings to get our cells set
    up. Later in the book, we will make this dynamic so that our widths and heights
    adjust with code. Next, we will work on our section header.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a modal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s review the design for the section header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ee30136-2e16-412c-a26e-37dea6261bbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that we have a + Location button that will display our locations. Let''s
    add that modal now:'
  prefs: []
  type: TYPE_NORMAL
- en: While in the `Main.storyboard` file, select the object library and, in the filter
    field at the bottom of the Library pane, type `button`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, drag and drop the `Button` component into the section header we created
    in our Explore View Controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e45a7a85-98a4-41b9-b232-a704f91ad725.png)'
  prefs: []
  type: TYPE_IMG
- en: We will format the button later in terms of location and size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add another View Controller to our storyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: In the filter, type `viewcontroller`, and drag and drop the `ViewController`
    component above the Explore View Controller in the `Main.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the View Controller selected, navigate to Editor | EmbedIn | NavigationController.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, Ctrl + drag from where it says Button in the View Controller under the
    Explore tab to the Navigation Controller that was just created (you can also do
    this within Outline view by, Ctrl dragging from the button to the new Navigation
    Controller you just created):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f7849e8f-bdd8-47a3-89b0-d0e342484993.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you let go, you will be presented with the following menu, and you should
    select Present Modally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac8cfc22-0ba0-4107-adf6-e621405420cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's run the project by hitting the Play button (or use *cmd* *+* *R*).
    You will see that our button now launches a modal. In the next chapter, we will
    make this button match our design.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8d0ed02-fb9b-4511-8810-603b0d8652b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Currently, as you can see in the preceding screenshot, we cannot dismiss this
    modal. Therefore, we need a cancel button and a done button to dismiss the view.
    Let''s fix this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Main.storyboard` and select the segue that is connected to the button
    in the header. It should now be highlighted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2fc9e412-f674-4735-a852-6e827a3e9dd9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, go to your View Controller (not the Navigation Controller) of your modal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f7c1196-0815-4774-8aa7-9d6b10713423.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, type in `bar button` into the filter area of the objects library in the
    Utilities panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag and drop a Bar Button Item into the right area of the Navigation Bar of
    your `View Controller Scene`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/697e07b4-6eae-43ee-96a3-35a1be85643b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Drag another Bar Button Item into the left area of the Navigation Bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d9e63d8-3931-4047-bbbd-cbe704351293.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should now have two Bar Button Items that both say Item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/706af21b-2bc9-4d6b-934b-a513cd27e27d.png)'
  prefs: []
  type: TYPE_IMG
- en: Updating Bar Button Items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we need to update both of the Bar Button Items to say cancel and done:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the left Bar Button Item, and, in the Utilities panel, select the Attributes
    inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on System Item and select Cancel in the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the right Bar Button Item, and, while still in the Attributes inspector
    in the Utilities panel, update System Item to Done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you should see Cancel on the left and Done on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c39cd58d-68b5-41a2-a7c5-74c1c2e7c1c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Unwinding our Cancel button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our buttons, we want to dismiss the modal when a user hits
    Cancel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Main.storyboard`, Ctrl drag from the Cancel button to Exit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37b24ffe-0535-4bd1-8b51-3140fcdfcabd.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also do this in the Outline view.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see a window popup that says Action Segue and unwindLocationCancelWithSegue.
    Select `unwindLocationCancelWithSegue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f8334b3-e9bc-4a09-9019-5ae2ed8d3277.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's build and run the project by hitting the Play button (or use *cmd* *+**R*),
    and test our Cancel button. It should now dismiss the View. We will update the
    Done button when we add code later.
  prefs: []
  type: TYPE_NORMAL
- en: Adding our first Table View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s add a `UITableView` into our `UIViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Utilities panel of `Main.storyboard`, in the filter field, type `tableview`;
    then, drag the Table View onto the scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d72bf081-65cc-4de4-b538-c157a0949835.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Pin icon and enter the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set all values under Add New Constraints to `0`
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The Constrain to margins checkbox should be unchecked
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, click on Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you build and run the project, and then launch the modal, you will see an
    empty Table View. We will complete this Table View later.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are about halfway through the setup of our UI structure. In this chapter,
    we created our Collection View with a dummy cell. This allows us to continue to
    work on the basic structure of our app and focus on the design of the app, getting
    all of the assets ready to go before we add code. We also added our first prototype
    header, as well as presenting a modal to the user.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we complete the rest of our basic structure, before concentrating
    on adapting our structure to match our design.
  prefs: []
  type: TYPE_NORMAL
