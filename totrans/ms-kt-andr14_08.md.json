["```kt\nretrofit = \"2.9.0\"\nretrofitSerializationConverter = \"1.0.0\"\nserializationJson = \"1.5.1\"\ncoroutines = \"1.7.3\"\nokhttp3 = \"4.11.0\"\n```", "```kt\nretrofit = { module = \"com.squareup.retrofit2:retrofit\" , version.ref = \"retrofit\" }\nretrofit-serialization = { module = \"com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter\", version.ref = \"retrofitSerializationConverter\" }\ncoroutines = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-core\" , version.ref = \"coroutines\" }\ncoroutines-android = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-android\" , version.ref = \"coroutines\" }\nserialization-json = { module = \"org.jetbrains.kotlinx:kotlinx-serialization-json\", version.ref = \"serializationJson\" }\nokhttp3 = { module = \"com.squareup.okhttp3:okhttp\", version.ref = \"okhttp3\" }\n```", "```kt\nnetworking = [\"retrofit\", \"retrofit-serialization\", \"serialization-json\", \"coroutines\", \"coroutines-android\"]\n```", "```kt\nid(\"org.jetbrains.kotlin.plugin.serialization\") version \"1.8.20\" apply false\n```", "```kt\nid(\"kotlinx-serialization\")\n```", "```kt\nimplementation(libs.bundles.networking)\n```", "```kt\nsingle {\n    Retrofit.Builder()\n        .addConverterFactory(\n            Json.asConverterFactory(contentType = \"application/json\".toMediaType())\n        )\n        .baseUrl(\"https://cataas.com/api/\")\n        .build()\n}\n```", "```kt\n@GET(\"cats\")\nsuspend fun fetchCats(\n    @Query(\"tag\") tag: String,\n): Response<List<Cat>>\n```", "```kt\n@Serializable\ndata class Cat(\n    @SerialName (\"createdAt\")\n    val createdAt: String,\n    @SerialName(\"_id\")\n    val id: String,\n    @SerialName(\"owner\")\n    val owner: String,\n    @SerialName(\"tags\")\n    val tags: List<String>,\n    @SerialName(\"updatedAt\")\n    val updatedAt: String\n)\n```", "```kt\nsingle { get<Retrofit>().create(CatsAPI::class.java) }\n```", "```kt\nsealed class NetworkResult<out T> {\n    data class Success<out T>(val data: T) : NetworkResult<T>()\n    data class Error(val error: String) : NetworkResult<Nothing>()\n}\n```", "```kt\ninterface PetsRepository {\n    suspend fun getPets(): NetworkResult<List<Cat>>\n}\n```", "```kt\nclass PetsRepositoryImpl(\n    private  val catsAPI: CatsAPI,\n    private val dispatcher: CoroutineDispatcher\n): PetsRepository {\n    override suspend fun getPets(): NetworkResult<List<Cat>> {\n        return withContext(dispatcher) {\n            try {\n                val response = catsAPI.fetchCats(\"cute\")\n                if (response.isSuccessful) {\n                    NetworkResult.Success(response.body()!!)\n                } else {\n                    NetworkResult.Error(response.errorBody().toString())\n                }\n            } catch (e: Exception) {\n                NetworkResult.Error(e.message ?: \"Unknown error\")\n            }\n        }\n    }\n}\n```", "```kt\nsingle<PetsRepository> { PetsRepositoryImpl(get(), get()) }\nsingle { Dispatchers.IO }\n```", "```kt\ndata class PetsUIState(\n    val isLoading: Boolean = false,\n    val pets: List<Cat> = emptyList(),\n    val error: String? = null\n)\n```", "```kt\nval petsUIState = MutableStateFlow(PetsUIState())\n```", "```kt\nprivate fun getPets() {\n    petsUIState.value = PetsUIState(isLoading = true)\n    viewModelScope.launch {\n        when (val result = petsRepository.getPets()) {\n            is NetworkResult.Success -> {\n                petsUIState.update {\n                    it.copy(isLoading = false, pets = result.data)\n                }\n            }\n            is NetworkResult.Error -> {\n                petsUIState.update {\n                    it.copy(isLoading = false, error = result.error)\n                }\n            }\n        }\n    }\n}\n```", "```kt\ninit {\n    getPets()\n}\n```", "```kt\ncoil-compose = \"io.coil-kt:coil-compose:2.4.0\"\n```", "```kt\ncompose = [\"compose.ui\", \"compose.ui.graphics\", \"compose.ui.tooling\", \"compose.material3\", \"compose.viewmodel\", \"coil-compose\"]\n```", "```kt\n@OptIn(ExperimentalLayoutApi::class)\n@Composable\nfun PetListItem(cat: Cat) {\n    ElevatedCard(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(6.dp)\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(bottom = 10.dp)\n        ) {\n            AsyncImage(\n                model = \"https://cataas.com/cat/${cat.id}\",\n                contentDescription = \"Cute cat\",\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(200.dp),\n                contentScale = ContentScale.FillWidth\n            )\n            FlowRow(\n                modifier = Modifier\n                    .padding(start = 6.dp, end = 6.dp)\n            ) {\n                repeat(cat.tags.size) {\n                    SuggestionChip(\n                        modifier = Modifier\n                            .padding(start = 3.dp, end = 3.dp),\n                        onClick = { },\n                        label = {\n                            Text(text = cat.tags[it])\n                        }\n                    )\n                }\n            }\n        }\n    }\n}\n```", "```kt\n@Composable\nfun PetList(modifier: Modifier) {\n    val petsViewModel: PetsViewModel = koinViewModel()\n    val petsUIState by petsViewModel.petsUIState.collectAsStateWithLifecycle()\n    Column(\n        modifier = modifier\n            .padding(16.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        AnimatedVisibility(\n            visible = petsUIState.isLoading\n        ) {\n            CircularProgressIndicator()\n        }\n        AnimatedVisibility(\n            visible = petsUIState.pets.isNotEmpty()\n        ) {\n            LazyColumn {\n                items(petsUIState.pets) { pet ->\n                    PetListItem(cat = pet)\n                }\n            }\n        }\n        AnimatedVisibility(\n            visible = petsUIState.error != null\n        ) {\n            Text(text = petsUIState.error ?: \"\")\n        }\n    }\n}\n```", "```kt\ncompose-lifecycle = { module = \"androidx.lifecycle:lifecycle-runtime-compose\", version.ref = \"lifecycle\" }\n```", "```kt\ncompose = [\"compose.ui\", \"compose.ui.graphics\", \"compose.ui.tooling\", \"compose.material3\", \"compose.viewmodel\", \"coil-compose\", \"compose-lifecycle\"]\n```", "```kt\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```"]