["```java\n#include \"DHT.h\"\n\n// DHT sensor\n#define DHTPIN 7\n#define DHTTYPE DHT11\n\n// DHT instance\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup()\n{\n  // Initialize the Serial port\n  Serial.begin(9600);\n\n  // Init DHT\n  dht.begin();\n}\n\nvoid loop()\n{\n  // Measure from DHT\n  float temperature = dht.readTemperature();\n  float humidity = dht.readHumidity();\n\n  // Measure light level\n  float sensor_reading = analogRead(A0);\n  float light = sensor_reading/1024*100;\n\n  // Display temperature\n  Serial.print(\"Temperature: \");\n  Serial.print((int)temperature);\n  Serial.println(\" C\");\n\n   // Display humidity\n  Serial.print(\"Humidity: \");\n  Serial.print(humidity);\n  Serial.println(\"%\");\n\n  // Display light level\n  Serial.print(\"Light: \");\n  Serial.print(light);\n  Serial.println(\"%\");\n  Serial.println(\"\");\n\n  // Wait 500 ms\n  delay(500);\n\n}\n```", "```java\n#include \"DHT.h\"\n```", "```java\n#define DHTPIN 7 \n\n#define DHTTYPE DHT11\n```", "```java\nDHT dht(DHTPIN, DHTTYPE);\n```", "```java\nSerial.begin(9600);\n```", "```java\ndht.begin();\n```", "```java\nfloat temperature = dht.readTemperature();\nfloat humidity = dht.readHumidity();\n```", "```java\nfloat sensor_reading = analogRead(A0);\nfloat light = sensor_reading/1024*100;\n```", "```java\nSerial.print(\"Temperature: \");\nSerial.print((int)temperature);\nSerial.println(\" C\");\n```", "```java\ndelay(500);\n```", "```java\nTemperature: 26 C\nHumidity: 35%\nLight: 75.42%\n```", "```java\n// Control Arduino board from BLE\n\n// Enable lightweight\n#define LIGHTWEIGHT 1\n\n// Libraries\n#include <SPI.h>\n#include \"Adafruit_BLE_UART.h\"\n#include <aREST.h>\n#include \"DHT.h\"\n\n// Pins\n#define ADAFRUITBLE_REQ 10\n#define ADAFRUITBLE_RDY 2\n#define ADAFRUITBLE_RST 9\n\n// DHT sensor\n#define DHTPIN 7\n#define DHTTYPE DHT11\n\n// DHT instance\nDHT dht(DHTPIN, DHTTYPE);\n\n// Create aREST instance\naREST rest = aREST();\n\n// BLE instance\nAdafruit_BLE_UART BTLEserial = Adafruit_BLE_UART(ADAFRUITBLE_REQ, ADAFRUITBLE_RDY, ADAFRUITBLE_RST);\n\n// Variables to be exposed to the API\nint temperature;\nint humidity;\nint light;\n\nvoid setup(void)\n{  \n  // Start Serial\n  Serial.begin(9600);\n\n  // Start BLE\n  BTLEserial.begin();\n\n  // Give name and ID to device\n  rest.set_id(\"001\");\n  rest.set_name(\"weather_station\");\n\n  // Expose variables to API\n  rest.variable(\"temperature\",&temperature);\n  rest.variable(\"humidity\",&humidity);\n  rest.variable(\"light\",&light);\n\n   // Init DHT\n  dht.begin();\n\n  // Welcome message\n  Serial.println(\"Weather station started\");\n}\n\nvoid loop() {  \n\n  // Measure from DHT\n  float t = dht.readTemperature();\n  float h = dht.readHumidity();\n  temperature = (int)t;\n  humidity = (int)h;\n\n  // Measure light level\n  float sensor_reading = analogRead(A0);\n  light = (int)(sensor_reading/1024*100);\n\n  // Tell the nRF8001 to do whatever it should be working on.\n  BTLEserial.pollACI();\n\n  // Ask what is our current status\n  aci_evt_opcode_t status = BTLEserial.getState();\n\n  // Handle REST calls\n  if (status == ACI_EVT_CONNECTED) {\n    rest.handle(BTLEserial);\n  }\n }\n```", "```java\n#define LIGHTWEIGHT 1\n```", "```java\n#include <SPI.h>\n#include \"Adafruit_BLE_UART.h\"\n#include <aREST.h>\n#include \"DHT.h\"\n```", "```java\n#define ADAFRUITBLE_REQ 10\n#define ADAFRUITBLE_RDY 2    \n#define ADAFRUITBLE_RST 9\n```", "```java\naREST rest = aREST();\n```", "```java\nAdafruit_BLE_UART BTLEserial = Adafruit_BLE_UART(ADAFRUITBLE_REQ, ADAFRUITBLE_RDY, ADAFRUITBLE_RST);\n```", "```java\nint temperature;\nint humidity;\nint light;\n```", "```java\nBTLEserial.begin();\n```", "```java\nrest.set_id(\"001\");\nrest.set_name(\"weather_station\");\n```", "```java\nrest.variable(\"temperature\",&temperature);\nrest.variable(\"humidity\",&humidity);\nrest.variable(\"light\",&light);\n```", "```java\nBTLEserial.pollACI();\n```", "```java\naci_evt_opcode_t status = BTLEserial.getState();\n```", "```java\nif (status == ACI_EVT_CONNECTED) {\n    rest.handle(BTLEserial);\n}\n```", "```java\ndataOutput = (TextView) findViewById(R.id.dataOutputTextView);\nconnectionOutput = (TextView) findViewById(R.id.connectionStatusView);\n\nadapter = BluetoothAdapter.getDefaultAdapter();\ntemperature = (Button) findViewById(R.id.temperatureButton);\nlight = (Button) findViewById(R.id.lightButton);\nhumidity = (Button) findViewById(R.id.humidityButton);\n```", "```java\ntemperature.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                String setTempMessage = \"/temperature /\";\n                tx.setValue(setTempMessage.getBytes(Charset.forName(\"UTF-8\")));\n                if (gatt.writeCharacteristic(tx)) {\n                    writeLine(\"Sent: \" + setTempMessage);\n                } else {\n                    writeLine(\"Couldn't write TX characteristic!\");\n                }\n\n            }\n        });\n\n        light.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                String setLightMessage = \"/light /\";\n                tx.setValue(setLightMessage.getBytes(Charset.forName(\"UTF-8\")));\n                if (gatt.writeCharacteristic(tx)) {\n                    writeLine(\"Sent: \" + setLightMessage);\n                }\n                else {\n                    writeLine(\"Couldn't write TX characteristic!\");\n                }\n            }\n        });\n\n        humidity.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                String setHumidityMessage = \"/humidity /\";\n                tx.setValue(setHumidityMessage.getBytes(Charset.forName(\"UTF-8\")));\n                if (gatt.writeCharacteristic(tx)) {\n                    writeLine(\"Sent: \" + setHumidityMessage);\n                }\n                else {\n                    writeLine(\"Couldn't write TX characteristic!\");\n                }\n            }\n        });\n```", "```java\nprivate void writeLine(final CharSequence text) {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                connectionOutput.setText(\"\");\n                connectionOutput.append(text);\n                connectionOutput.append(\"\\n\");\n            }\n        });\n    }\n\n    //Implement the method below to output temperature/humidity/light readings to dataOutputView\n\n    private void writeSensorData(final CharSequence text) {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                Log.e(LOG_TAG,text.toString());\n                output=text.toString().trim();\n                if (output.length() > 0 && output.length() <=3) {\n\n                    dataOutput.setText(output);\n                }\n                else {\n                    return;\n                }\n            }\n        });\n    }\n```", "```java\npublic void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {\n            super.onCharacteristicChanged(gatt, characteristic);\n            writeSensorData(characteristic.getStringValue(0));\n        }\n```", "```java\n<uses-permission android:name=\"android.permission.BLUETOOTH\"/>\n      <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/>\n```", "```java\nandroid:textSize=\"200dp\"\n    android:gravity=\"center\"\n```", "```java\n<TextView\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"wrap_content\"             \nandroid:textAppearance=\"?android:attr/textAppearanceLarge\"\n            android:id=\"@+id/dataOutputTextView\"\n            android:layout_gravity=\"center_vertical\"\n            android:textSize=\"200dp\"\n            android:gravity=\"center\"\n            android:text=\"99\" />\n```", "```java\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n    <shape >\n        android:shape=\"rectangle\" >\n        <corners\n            android:radius=\"10dp\"\n            />\n        <solid\n            android:color=\"#FFFFFF\"\n            />\n        <padding\n            android:left=\"0dp\"\n            android:top=\"0dp\"\n            android:right=\"0dp\"\n            android:bottom=\"0dp\"\n            />\n        <size\n            android:width=\"85dp\"\n            android:height=\"99dp\"\n            />\n        <stroke\n            android:width=\"2dp\"\n            android:color=\"#4A90E2\"\n            />\n    </shape>\n    ```", "```java\n    android:background=\"@drawable/buttonshape\"\n    ```", "```java\n    android:textColor=\"#4A90E2\"\n    ```"]