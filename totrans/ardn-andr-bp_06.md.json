["```java\n#include <Servo.h>\n\n// Create servo object\nServo myservo;\n\n// Servo position\nint pos = 0;   \n\nvoid setup()\n{\n  // Attaches the servo on pin 7 to the servo object\n  myservo.attach(7);  \n}\n\nvoid loop()\n{\n  // Goes from 0 degrees to 180 degrees\n  for(pos = 0; pos < 180; pos += 1)\n  {                                  \n    myservo.write(pos);              \n    delay(15);                       \n  }\n\n  // Goes from 180 degrees to 0 degrees\n  for(pos = 180; pos >= 1; pos -= 1)     \n  {                                \n    myservo.write(pos);              \n    delay(15);                  \n  }\n}\n```", "```java\n#include <Servo.h>\n```", "```java\nServo myservo;\n```", "```java\nint pos = 0;   \n```", "```java\nmyservo.attach(7);   \n```", "```java\nfor(pos = 0; pos < 180; pos += 1)\n{                                  \n  myservo.write(pos);              \n  delay(15);                       \n}\n```", "```java\n#include <SPI.h>\n#include \"Adafruit_BLE_UART.h\"\n#include <aREST.h>\n#include <Servo.h>\n\n// Lightweight mode\n#define LIGHTWEIGHT 1\n\n// Pins\n#define ADAFRUITBLE_REQ 10\n#define ADAFRUITBLE_RDY 2     // This should be pin 2 or 3\n#define ADAFRUITBLE_RST 9\n\n// Create servo object\nServo myservo;\n\n// Create aREST instance\naREST rest = aREST();\n\n// Servo position\nint pos = 0;   \n\n// BLE instance\nAdafruit_BLE_UART BTLEserial = Adafruit_BLE_UART(ADAFRUITBLE_REQ, ADAFRUITBLE_RDY, ADAFRUITBLE_RST);\n\nvoid setup()\n{\n   // Start Serial\n  Serial.begin(115200);\n\n  // Attaches the servo on pin 7 to the servo object\n  myservo.attach(7);  \n\n  // Start BLE\n  BTLEserial.begin();\n\n  // Give name and ID to device\n  rest.set_id(\"001\");\n  rest.set_name(\"servo_control\");\n\n  // Expose function to API\n  rest.function(\"servo\",servoControl);\n}\n\nvoid loop()\n{\n  // Tell the nRF8001 to do whatever it should be working on.\n  BTLEserial.pollACI();\n\n  // Ask what is our current status\n  aci_evt_opcode_t status = BTLEserial.getState();\n\n  // Handle REST calls\n  if (status == ACI_EVT_CONNECTED) {\n    rest.handle(BTLEserial);\n  }\n}\n\n// Control servo from REST API\nint servoControl(String command) {\n\n  // Get position from command\n  int pos = command.toInt();\n  Serial.println(pos);\n\n  myservo.write(pos);              \n\n  return 1;\n}\n```", "```java\n#include <SPI.h>\n#include \"Adafruit_BLE_UART.h\"\n#include <aREST.h>\n#include <Servo.h>\n```", "```java\n#define LIGHTWEIGHT 1\n```", "```java\n#define ADAFRUITBLE_REQ 10\n#define ADAFRUITBLE_RDY 2     // This should be an interrupt pin, on Uno thats #2 or #3\n#define ADAFRUITBLE_RST 9\n```", "```java\nServo myservo;\n```", "```java\naREST rest = aREST();\n```", "```java\nAdafruit_BLE_UART BTLEserial = Adafruit_BLE_UART(ADAFRUITBLE_REQ, ADAFRUITBLE_RDY, ADAFRUITBLE_RST);\n```", "```java\nmyservo.attach(7);  \n```", "```java\nBTLEserial.begin();\n```", "```java\nrest.set_id(\"001\");\nrest.set_name(\"servo_control\");\n```", "```java\nrest.function(\"servo\",servoControl);\n```", "```java\nBTLEserial.pollACI();\n```", "```java\naci_evt_opcode_t status = BTLEserial.getState();\n```", "```java\nif (status == ACI_EVT_CONNECTED) {\n  rest.handle(BTLEserial);\n}\n```", "```java\nint servoControl(String command) {\n\n  // Get position from command\n  int pos = command.toInt();\n  Serial.println(pos);\n\n  myservo.write(pos);              \n\n  return 1;\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n    package=\"com.arduinoandroid.androidarduinosensserv\" >\n\n    <uses-permission android:name=\"android.hardware.sensor.gyroscope\"/>\n    <uses-permission android:name=\"android.permission.BLUETOOTH\"/>\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/>\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@drawable/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/AppTheme\" >\n        <activity\n            android:name=\".MainScreen\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```", "```java\n<LinearLayout \n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:orientation=\"vertical\"\n    android:weightSum=\"1\">\n\n    <TextView\n        android:id=\"@+id/btView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:layout_marginTop=\"80dp\"\n        android:text=\"bluetooth text\"\n        android:textAppearance=\"?android:attr/textAppearanceSmall\" />\n\n    <Button\n        android:id=\"@+id/refreshButton\"\n        style=\"?android:attr/buttonStyleSmall\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:layout_marginTop=\"60dp\"\n        android:text=\"Refresh\" />\n\n    <TextView\n        android:id=\"@+id/tv\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"bottom|center_horizontal\"\n        android:layout_marginTop=\"250dp\"\n        android:text=\"Gyro output\" />\n</LinearLayout>\n```", "```java\npublic class MainScreen extends Activity implements SensorEventListener {\n```", "```java\n    // UUIDs for UAT service and associated characteristics.\n    public static UUID UART_UUID = UUID.fromString(\"6E400001-B5A3-F393-E0A9-E50E24DCCA9E\");\n    public static UUID TX_UUID = UUID.fromString(\"6E400002-B5A3-F393-E0A9-E50E24DCCA9E\");\n    public static UUID RX_UUID = UUID.fromString(\"6E400003-B5A3-F393-E0A9-E50E24DCCA9E\");\n// UUID for the BTLE client characteristic which is necessary for notifications.\n    public static UUID CLIENT_UUID = UUID.fromString(\"00002902-0000-1000-8000-00805f9b34fb\");\n\n    //Getting the name for Log Tags\n    private final String LOG_TAG = MainScreen.class.getSimpleName();\n\n    /**\n     * Indicates which angle we are currently pointing the phone (and hence servo) in:\n     * -2: 0-45 degrees\n     * -1: 45-90 degrees\n     * 0: 90 degrees\n     * 1: 90-135 degrees\n     * 2: 135-180 degrees\n     * <p/>\n     * Default is the neutral position, i.e. 0.\n     */\n    int currentPosition = 0;\n\n    long lastSensorChangedEventTimestamp = 0;\n\n    //Declaring UI Elements\n    private TextView gyroTextView;\n    private TextView bluetoothTv;\n\n    //Declaring SensorManager variables\n    private SensorManager sensorManager;\n\n    //Sensor Delay Methods\n    int PERIOD = 1000000000; // read sensor data each second\n    Handler handler;\n    boolean canTransmitSensorData = false;\n    boolean isHandlerLive = false;\n\n    private boolean areServicesAccessible = false;\n```", "```java\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main_screen);\n\n        handler = new Handler();\n\n        // Setup the refresh button\n        final Button refreshButton = (Button) findViewById(R.id.refreshButton);\n        refreshButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                restartScan();\n            }\n        });\n\n        //get the TextView from the layout file\n        gyroTextView = (TextView) findViewById(R.id.tv);\n        bluetoothTv = (TextView) findViewById(R.id.btView);\n\n        //get a hook to the sensor service\n        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);\n    }\n```", "```java\n    @Override\n    protected void onStart() {\n        super.onResume();\n\n        /*register the sensor listener to listen to the gyroscope sensor, use the\n        callbacks defined in this class, and gather the sensor information as quick\n        as possible*/\n        sensorManager.registerListener(this,\n                sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION),\n                SensorManager.SENSOR_DELAY_NORMAL\n        );\n\n        //handler.post(processSensors);\n\n        // Scan for all BTLE devices.\n        // The first one with the UART service will be chosen--see the code in the scanCallback.\n\n        bluetoothAdaper = BluetoothAdapter.getDefaultAdapter();\n\n        startScan();\n    }\n```", "```java\n    //When this Activity isn't visible anymore\n    @Override\n    protected void onStop() {\n        //unregister the sensor listener\n        sensorManager.unregisterListener(this);\n        //disconnect and close Bluetooth Connection for better reliability\n        if (gatt != null) {\n            gatt.disconnect();\n            gatt.close();\n            gatt = null;\n            tx = null;\n            rx = null;\n        }\n\n        super.onStop();\n        areServicesAccessible = false;\n    }\n```", "```java\n    //SENSOR METHODS\n\n    private final Runnable processSensors = new Runnable() {\n        @Override\n        public void run() {\n            // Do work with the sensor values.\n            canTransmitSensorData = !canTransmitSensorData;\n            // The Runnable is posted to run again here:\n            handler.postDelayed(this, PERIOD);\n        }\n    };\n\n    @Override\n    public void onAccuracyChanged(Sensor arg0, int arg1) {\n        //Do nothing.\n    }\n\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n\n        if ((event.accuracy != SensorManager.SENSOR_STATUS_UNRELIABLE)\n                && (event.timestamp - lastSensorChangedEventTimestamp > PERIOD)) {\n\n            System.out.println(event.timestamp - lastSensorChangedEventTimestamp);\n            lastSensorChangedEventTimestamp = event.timestamp;\n\n            // Truncate to an integer, since precision loss is really not a serious\n            // matter here, and it will make it much easier (and cheaper) to compare.\n            // We will also log the integer values of [2]\n            int xTilt = (int) event.values[2];\n            int yTilt = (int) event.values[1];\n            int zTilt = (int) event.values[0];\n\n            gyroTextView.setText(\"Orientation X (Roll) :\" + xTilt + \"\\n\" +\n                    \"Orientation Y (Pitch) :\" + yTilt + \"\\n\" +\n                    \"Orientation Z (Yaw) :\" + zTilt);\n\n            //Log.i(LOG_TAG, \"The XTilt is:\" + String.valueOf(xTilt));\n\n            if (areServicesAccessible) {\n                turnServoFinegrained(xTilt);\n            }\n        }\n    }\n\n    private void turnServoFinegrained(int xTilt) {\n\n        // Default to vertical position\n        int rotationAngle = 90;\n\n        // Turn left\n        if (xTilt > 0) {\n            rotationAngle = 90 - xTilt;\n        }\n\n        // Turn right\n        else {\n            rotationAngle = 90 + Math.abs(xTilt);\n        }\n\n        String setServoMessage = \"/servo?params=\" + rotationAngle + \" /\";\n        tx.setValue(setServoMessage.getBytes(Charset.forName(\"UTF-8\")));\n        if (gatt.writeCharacteristic(tx)) {\n            writeSensorData(\"Sent: \" + setServoMessage);\n        } else {\n            writeSensorData(\"Couldn't write TX characteristic!\");\n        }\n    }\n```", "```java\n    private void writeSensorData(final CharSequence text) {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                Log.e(LOG_TAG, text.toString());\n                //bluetoothTv = (TextView) findViewById(R.id.btView);\n                output = text.toString();\n                bluetoothTv.setText(output);\n            }\n        });\n    }\n}\n```"]