["```swift\n    this.lblOutput.BackgroundColor = UIColor.Green;\n    this.btnAnimate.TouchUpInside += (sender, e) => {\n      RectangleF labelFrame = this.lblOutput.Frame;\n      labelFrame.Y = 380f;\n      UIView.Animate(1d, 0d, UIViewAnimationOptions.CurveEaseInOut, \n        () => this.lblOutput.Frame = labelFrame, \n        () => {\n          this.lblOutput.Text = \"Animation ended!\";\n          this.lblOutput.BackgroundColor = UIColor.Red;\n        });\n    };\n    ```", "```swift\nUIView.Animate(1d, 0d, UIViewAnimationOptions.CurveEaseInOut, \n    () => this.lblOutput.Frame = labelFrame, \n    () => {\n      this.lblOutput.Text = \"Animation ended!\";\n      this.lblOutput.BackgroundColor = UIColor.Red;\n    });\n```", "```swift\n    () => this.lblOutput.Frame = labelFrame,\n    ```", "```swift\nawait UIView.AnimateAsync(1, () => this.lblOutput.Frame = labelFrame);\n```", "```swift\n    using MonoTouch.CoreGraphics;\n    ```", "```swift\n    private double rotationAngle;\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      this.btnRotate.TouchUpInside += async (sender, e) => {\n        this.rotationAngle += 90;\n        CGAffineTransform rotation = \n        CGAffineTransform.MakeRotation((float)this.DegreesToRadians(this.rotationAngle));\n        await UIView.AnimateAsync(0.5d, () => this.lblOutput.Transform = rotation);\n        this.lblOutput.Text = string.Format(\"Rotated to {0} degrees.\", this.rotationAngle);\n        if (this.rotationAngle >= 360) {\n          this.rotationAngle = 0;\n          this.lblOutput.Transform = CGAffineTransform.MakeIdentity();\n        }\n      };\n    }\n    ```", "```swift\n    public double DegreesToRadians(double degrees)\n    {\n      return (degrees * Math.PI / 180);\n    }\n    ```", "```swift\nCGAffineTransform rotation = CGAffineTransform.MakeRotation((float)this.DegreesToRadians(this.rotationAngle));\n```", "```swift\nawait UIView.AnimateAsync(0.5d, () => this.lblOutput.Transform = rotation);\n```", "```swift\nthis.rotationAngle = 0;\nthis.lblOutput.Transform = CGAffineTransform.MakeIdentity();\n```", "```swift\n    this.imgView.ContentMode = UIViewContentMode.ScaleAspectFit;\n    this.imgView.AnimationImages = new UIImage[] {\n      UIImage.FromFile(\"Kastoria.jpg\"),\n      UIImage.FromFile(\"Parga02.jpg\"),\n      UIImage.FromFile(\"Toroni.jpg\")\n    };\n    this.imgView.AnimationDuration = 3;\n    this.imgView.AnimationRepeatCount = 10;\n    this.btnStart.TouchUpInside += (sender, e) => {\n      if (!this.imgView.IsAnimating) {\n        this.imgView.StartAnimating();\n      }\n    };\n    this.btnStop.TouchUpInside += (sender, e) => {\n      if (this.imgView.IsAnimating) {\n        this.imgView.StopAnimating();\n      }\n    };\n    ```", "```swift\nthis.imageView.AnimationImages = new UIImage[] {\n  UIImage.FromFile(\"Kastoria.jpg\"),\n  UIImage.FromFile(\"Parga02.jpg\"),\n  UIImage.FromFile(\"Toroni.jpg\")\n};\n```", "```swift\nthis.imageView.AnimationDuration = 3;\nthis.imageView.AnimationRepeatCount = 10;\n```", "```swift\n    using MonoTouch.CoreAnimation;\n    ```", "```swift\n    private CALayer copyLayer;\n    ```", "```swift\n    this.btnCopy.TouchUpInside += (s, e) => {\n      this.lblTarget.Text = string.Empty;\n      this.lblTarget.BackgroundColor = UIColor.Blue;\n      this.copyLayer = new CALayer();\n      this.copyLayer.Frame = this.lblSource.Frame;\n      this.copyLayer.Contents = this.lblSource.Layer.Contents;\n      this.View.Layer.AddSublayer(this.copyLayer);\n      CABasicAnimation positionAnimation = CABasicAnimation.FromKeyPath(\"position\");\n      positionAnimation.To = NSValue.FromPointF(this.lblTarget.Center);\n      positionAnimation.Duration = 1;\n      positionAnimation.RemovedOnCompletion = true;\n      positionAnimation.TimingFunction = CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseInEaseOut);\n      positionAnimation.AnimationStopped += delegate {\n        this.lblTarget.BackgroundColor = this.lblSource.BackgroundColor;\n        this.lblTarget.Text = this.lblSource.Text;\n        this.lblTarget.TextColor = this.lblSource.TextColor;\n       this.copyLayer.RemoveFromSuperLayer();\n      } ;\n      CABasicAnimation sizeAnimation = CABasicAnimation.FromKeyPath(\"bounds\");\n      sizeAnimation.To = NSValue.FromRectangleF(new RectangleF(0f, 0f, this.lblSource.Bounds.Width * 2f, this.lblSource.Bounds.Height * 2));\n      sizeAnimation.Duration = positionAnimation.Duration / 2;\n      sizeAnimation.RemovedOnCompletion = true;\n      sizeAnimation.AutoReverses = true;\n      this.copyLayer.AddAnimation(positionAnimation, \"PositionAnimation\");\n    this.copyLayer.AddAnimation(sizeAnimation, \"SizeAnimation\");\n    } ;\n    ```", "```swift\n  this.copyLayer = new CALayer();\n  this.copyLayer.Frame = this.lblSource.Frame;\n  this.copyLayer.Contents = this.lblSource.Layer.Contents;\n  this.View.Layer.AddSublayer(this.copyLayer);\n```", "```swift\nthis.copyLayer.AddAnimation(positionAnimation, \"PositionAnimation\");\nthis.copyLayer.AddAnimation(sizeAnimation, \"SizeAnimation\");\n```", "```swift\n    public class DrawingView : UIView\n    ```", "```swift\n    using MonoTouch.CoreGraphics;\n    using MonoTouch.UIKit;\n    using System.Drawing;\n    ```", "```swift\n    public DrawingView(RectangleF frame) : base(frame) {}\n    ```", "```swift\n    public override void Draw (RectangleF rect)\n    {\n      base.Draw (rect);\n      Console.WriteLine(\"DrawingView draw!\");\n      CGContext context = UIGraphics.GetCurrentContext();\n      context.SetLineWidth(5f);\n      context.SetStrokeColorWithColor(UIColor.Green.CGColor);\n      context.AddLines(new PointF[] { \n        new PointF(0f, this.Bounds.Height),\n        new PointF(this.Bounds.Width, 0f)\n      } );\n      context.StrokePath();\n      context.SetStrokeColorWithColor(UIColor.Red.CGColor);\n      context.MoveTo(0, this.Bounds.Height);\n      context.AddCurveToPoint(0f, this.Bounds.Height, 50f, this.Bounds.Height / 2f, this.Bounds.Width, 0f);\n      context.StrokePath();\n    }\n    ```", "```swift\n    DrawingView drawingView = new DrawingView(new RectangleF(0f, 20f, this.View.Bounds.Width, this.View.Bounds.Height));\n    drawingView.BackgroundColor = UIColor.Gray;\n    this.View.AddSubview(drawingView);\n    ```", "```swift\npublic override void Draw (RectangleF rect)\n```", "```swift\nCGContext context = UIGraphics.GetCurrentContext();\n```", "```swift\ncontext.SetLineWidth(5f);\ncontext.SetStrokeColorWithColor(UIColor.Green.CGColor);\ncontext.AddLines(new PointF[] { \n  new PointF(0f, this.Bounds.Height),\n  new PointF(this.Bounds.Width, 0f)\n} );\n```", "```swift\ncontext.StrokePath();\n```", "```swift\n    CGContext context = UIGraphics.GetCurrentContext();\n    context.SetFillColorWithColor(UIColor.Blue.CGColor);\n    context.SetShadow(new SizeF(10f, 10f), 5f);\n    context.AddEllipseInRect(new RectangleF(100f, 100f, 100f, 100f));\n    context.FillPath();\n    context.SetFillColorWithColor(UIColor.Red.CGColor);\n    context.AddRect(new RectangleF(150f, 150f, 100f, 100f));\n    context.FillPath();\n    ```", "```swift\n    DrawingView drawView = new DrawingView(new RectangleF(0f, 20f, this.View.Bounds.Width, this.View.Bounds.Height));\n    drawView.BackgroundColor = UIColor.DarkGray;\n    this.View.AddSubview(drawView);\n    ```", "```swift\ncontext.SetFillColorWithColor(UIColor.Blue.CGColor);\n```", "```swift\ncontext.AddEllipseInRect(new RectangleF(100f, 100f, 100f, 100f));\n```", "```swift\ncontext.FillPath();\n```", "```swift\ncontext.SetShadow(new SizeF(10f, 10f), 5f);\n```", "```swift\ncontext.SetFillColorWithColor(new CGColor(1f, 0f, 0f, 0.5f));\n```", "```swift\n    CGContext context = UIGraphics.GetCurrentContext();\n    PointF location = new PointF(10f, 100f);\n    UIFont font = UIFont.FromName(\"Verdana-Bold\", 28f);\n    NSString drawText = new NSString(\"This text is drawn!\");\n    context.SetTextDrawingMode(CGTextDrawingMode.Stroke);\n    context.SetStrokeColorWithColor(UIColor.Black.CGColor);\n    context.SetLineWidth(4f);\n    drawText.DrawString(location, font);\n    context.SetTextDrawingMode(CGTextDrawingMode.Fill);\n    context.SetFillColorWithColor(UIColor.Yellow.CGColor);\n    drawText.DrawString(location, font);\n    ```", "```swift\n    DrawingView drawView = new DrawingView(new RectangleF(0f, 20f, this.View.Bounds.Width, this.View.Bounds.Height));\n    drawView.BackgroundColor = UIColor.DarkGray;\n    this.View.AddSubview(drawView);\n    ```", "```swift\ncontext.SetTextDrawingMode(CGTextDrawingMode.Stroke);\n```", "```swift\ncontext.SetStrokeColorWithColor(UIColor.Black.CGColor);\ncontext.SetLineWidth(4f);\ndrawText.DrawString(location, font);\n```", "```swift\ncontext.SetTextDrawingMode(CGTextDrawingMode.Fill);\n```", "```swift\ndrawText.DrawString(location, font);\n```", "```swift\nConsole.WriteLine(\"Text size: {0}\", drawText.StringSize(UIFont.FromName(\"Verdana-Bold\", 28f)));\n```", "```swift\n    public class CanvasView : UIView\n    {\n      public CanvasView (RectangleF frame) : base(frame)\n      {\n        this.drawPath = new CGPath();\n      }\n      private PointF touchLocation;\n      private PointF previousTouchLocation;\n      private CGPath drawPath;\n      private bool fingerDraw;\n      public override void TouchesBegan (NSSet touches, UIEvent evt)\n      {\n        base.TouchesBegan (touches, evt);\n        UITouch touch = touches.AnyObject as UITouch;\n        this.fingerDraw = true;\n        this.touchLocation = touch.LocationInView(this);\n        this.previousTouchLocation = touch.PreviousLocationInView(this);\n        this.SetNeedsDisplay();\n      }\n      public override void TouchesMoved (NSSet touches, UIEvent evt)\n      {\n        base.TouchesMoved (touches, evt);\n        UITouch touch = touches.AnyObject as UITouch;\n        this.touchLocation = touch.LocationInView(this);\n        this.previousTouchLocation = touch.PreviousLocationInView(this);\n        this.SetNeedsDisplay();\n      }\n      public override void Draw (RectangleF rect)\n      {\n        base.Draw (rect);\n        if (this.fingerDraw)\n        {\n          using (CGContext context = UIGraphics.GetCurrentContext())\n          {\n            context.SetStrokeColorWithColor(UIColor.Blue.CGColor);\n            context.SetLineWidth(5f);\n            context.SetLineJoin(CGLineJoin.Round);\n            context.SetLineCap(CGLineCap.Round);\n            this.drawPath.MoveToPoint(this.previousTouchLocation);\n            this.drawPath.AddLineToPoint(this.touchLocation);\n            context.AddPath(this.drawPath);\n            context.DrawPath(CGPathDrawingMode.Stroke);\n          }\n        }\n      }\n    }\n    ```", "```swift\n    CanvasView canvasView = new CanvasView(new RectangleF(0f, 20f, this.View.Bounds.Width, this.View.Bounds.Height));\n    canvasView.BackgroundColor = UIColor.Gray;\n    this.View.AddSubview(canvasView);\n    ```", "```swift\ncontext.AddPath(this.drawPath);\ncontext.DrawPath(CGPathDrawingMode.Stroke);\n```", "```swift\n    public UIImage GetDrawingImage()\n    {\n      UIImage toReturn = null;\n      UIGraphics.BeginImageContext(this.Bounds.Size);\n      using (CGContext context = UIGraphics.GetCurrentContext())\n      {\n        context.SetStrokeColorWithColor(UIColor.Blue.CGColor);\n        context.SetLineWidth(10f);\n        context.SetLineJoin(CGLineJoin.Round);\n        context.SetLineCap(CGLineCap.Round);\n        context.AddPath(this.drawPath);\n        context.DrawPath(CGPathDrawingMode.Stroke);\n        toReturn = UIGraphics.GetImageFromCurrentImageContext();\n      }\n      UIGraphics.EndImageContext();\n      return toReturn;\n    }\n    public void ClearDrawing()\n    {\n      this.fingerDraw = false;\n      this.drawPath.Dispose();\n      this.drawPath = new CGPath();\n      this.SetNeedsDisplay();\n    }\n    ```", "```swift\n    CanvasView canvasView = new CanvasView(new RectangleF(0f, 0f, this.btnSave.Frame.Top - 10f, this.View.Bounds.Width));\n    canvasView.BackgroundColor = UIColor.Gray;\n    this.View.AddSubview(canvasView);\n    this.btnSave.TouchUpInside += (sender, e) => {\n      UIImage drawingImage = canvasView.GetDrawingImage();\n      drawingImage.SaveToPhotosAlbum((img, err) => {\n        if (null != err)\n        {\n          Console.WriteLine(\"Error saving image! {0}\", err.LocalizedDescription);\n        }\n      });\n    };\n    this.btnClear.TouchUpInside += (sender, e) => canvasView.ClearDrawing ();\n    ```", "```swift\nUIGraphics.BeginImageContext(this.Bounds.Size);\n```", "```swift\ntoReturn = UIGraphics.GetImageFromCurrentImageContext();\n```", "```swift\nUIGraphics.EndImageContext();\nreturn toReturn;\n```", "```swift\nthis.fingerDraw = false;\nthis.drawPath.Dispose();\nthis.drawPath = new CGPath();\n```", "```swift\nthis.SetNeedsDisplay();\n```"]