["```kt\ncom.packt.learn_spring_for_android_application_development\n```", "```kt\nrepositories {\n    maven {\n        url 'https://repo.spring.io/libs-milestone'\n    }\n}\n\ndependencies {\n    //.......\n    implementation 'org.springframework.android:spring-android-rest-template:2.0.0.M3'\n}\n```", "```kt\npackage com.packt.learn_spring_for_android_application_development\n```", "```kt\nval readOnly = 3\nvar mutable = 3\n```", "```kt\nfun changeMutable() {\n    mutable = 4\n}\n```", "```kt\nclass Foo {\n    val readOnly = 3\n    var mutable = 3\n\n    fun changeMutable() {\n        mutable = 4\n    }\n}\n```", "```kt\nclass Bar {\n    companion object {\n        const val NAME = \"Igor\"\n\n        fun printName() = println(NAME)\n    }\n}\n```", "```kt\nfun test() {\n    Bar.NAME\n    Bar.printName()\n}\n```", "```kt\nBar.Companion.printName();\n```", "```kt\nfun firstClass() {\n    println(\"First class function\")\n}\n```", "```kt\nclass A {\n    fun classMember() {\n        println(\"Class member\")\n    }\n}\n```", "```kt\nfun outer() {\n    fun local() {\n        println(\"Local\")\n    }\n\n    local()\n}\n```", "```kt\nfun imperative() {\nval numbers = listOf(1, 4, 6, 2, 9)\nfor (i in 0 until numbers.lastIndex) {\nif (numbers[i] > 4) {\nprintln(numbers)\n        }\n    }\n}\n```", "```kt\nfun declarative() {\n    println(listOf(1, 4, 6, 2, 9).find { it > 4 })\n}\n```", "```kt\nfun A.extension() {\n    println(\"Extension\")\n}\n```", "```kt\nfun testExtension() {\n    A().extension()\n}\n```", "```kt\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n```", "```kt\n{x: Int -> println(x)}\n```", "```kt\npublic object Unit {\n    override fun toString() = \"kotlin.Unit\"\n}\n```", "```kt\nval predicate: (Int) -> Unit = { println(it) }\n```", "```kt\npredicate(3)\n```", "```kt\nfun ifStatement() {\n    val a = 4\n    if (a < 5) {\n        println(a)\n    }\n}\n```", "```kt\nfun ifExpression() {\n    val a = 5\n    val b = 4\n    val max = if (a > b) a else b\n}\n```", "```kt\nfun whenStatement() {\n    val x = 1\n    when (x) {\n        1 -> println(\"1\")\n        2 -> println(\"2\")\n        else -> {\n            println(\"else\")\n        }\n    }\n}\n```", "```kt\nfun whenExpression(x: Int) = when (x) {\n    1 -> println(\"1\")\n    2 -> println(\"2\")\n    else -> {\n        println(x)\n    }\n}\n```", "```kt\nsealed class Method\nclass POST: Method()\nclass GET: Method()\n```", "```kt\nfun handleRequest(method: Method): String = when(method) {\n    is POST -> TODO(\"Handle POST\")\n    is GET -> TODO(\"Handle GET\")\n}\n```", "```kt\npublic interface Iterator<E> {\n\n    boolean hasNext();\n\n    E next();\n}\n```", "```kt\nclass Numbers(val numbers: Array<Int>) {\n\n    private var currentIndex: Int = 0\n\n    operator fun iterator(): Numbers = Numbers(numbers)\n\n    operator fun hasNext(): Boolean = currentIndex < numbers.lastIndex\n\n    operator fun next(): Int = numbers[currentIndex ++]\n}\n```", "```kt\nfun testForLoop() {\n    val numbers = Numbers(arrayOf(1, 2, 3))\n    for (item in numbers) {\n        //......\n    }\n}\n```", "```kt\nclass Numbers(val numbers: Array<Int>)\n\nprivate var currentIndex = 0\noperator fun Numbers.iterator(): Numbers {\n    currentIndex = 0\n    return this\n}\noperator fun Numbers.hasNext(): Boolean = currentIndex < numbers.lastIndex\noperator fun Numbers.next(): Int = numbers[currentIndex ++]\n```", "```kt\nfun testWhileLoop() {\n    val array = arrayOf(1, 2, 3)\n    do {\n        var index = 0\n        println(array[index++])\n    } while (index < array.lastIndex)\n}\n```", "```kt\npublic operator fun rangeTo(other: Byte): LongRange = LongRange(this, other)\n\npublic operator fun rangeTo(other: Short): LongRange = LongRange(this, other)\n\npublic operator fun rangeTo(other: Int): LongRange = LongRange(this, other)\n\npublic operator fun rangeTo(other: Long): LongRange = LongRange(this, other)\n```", "```kt\nfor (i in 0..100) {\n    // .....\n}\n```", "```kt\n0 until 100\n```", "```kt\n1..100 step 2\n```", "```kt\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, ... 99]\n```", "```kt\n(0..100)\n        .filter { it > 50 }\n        .map { it * 2 }\n```", "```kt\nvar number = 1\nval string = \"number is $number\" \n```", "```kt\nval name = \"Igor\"\nval lengthOfName = \"length is ${name.length}\"\n```", "```kt\nvar name = \"Igor\"\nname = null\n```", "```kt\nvar name: String? = \"Igor\"\nname = null\n```", "```kt\nname.length\n```", "```kt\nname?.length\n```", "```kt\nname?.length?.compareTo(4)\n```", "```kt\nname?.length?.compareTo(4) ?: { println(\"name is null\") }()\n```", "```kt\nval reference: KClass<String> = String::class\n```", "```kt\nfun isOdd(number: Int): Boolean = number % 2 == 0\nval odds = listOf(1, 2, 3, 4, 5).filter(::isOdd)\n```", "```kt\nval referenceToOddsPreperty = ::odds\n```", "```kt\npublic annotation class JvmStatic\n```", "```kt\nclass Example1 {\n    companion object {\n        fun companionClassMember() {}\n    }\n}\n```", "```kt\npublic final class Example1 {\n   public static final Example1.Companion Companion = new Example1.Companion((DefaultConstructorMarker)null);\n\n   public static final class Companion {\n      public final void companionClassMember() {\n      }\n\n      private Companion() {\n      }\n\n      // $FF: synthetic method\n      public Companion(DefaultConstructorMarker $constructor_marker) {\n         this();\n      }\n   }\n}\n```", "```kt\npublic final class Example1 {\n   public static final Example1.Companion Companion = new Example1.Companion((DefaultConstructorMarker)null);\n\n   @JvmStatic\n   public static final void companionClassMember() {\n      Companion.companionClassMember();\n   }\n\n   public static final class Companion {\n      @JvmStatic\n      public final void companionClassMember() {}\n\n      private Companion() {}\n\n      // $FF: synthetic method\n      public Companion(DefaultConstructorMarker $constructor_marker) {\n         this();\n      }\n   }\n}\n```"]