- en: Chapter 7.  Voice Interactions, Sensors, and Tracking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 语音交互、传感器和跟踪
- en: '|   | *"All I have is a voice."* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|    | *"All I have is a voice."* |'
- en: '|   | --*W. H. Auden* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|    | --*W. H. Auden* |'
- en: In this chapter, we cover the voice capabilities offered by the Wear API and
    define voice actions interfacing with our `Today` app from the previous chapter.
    We also introduce device sensors and discuss how they can be used to track data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Wear API提供的语音功能，并定义了与上一章中的“Today”应用交互的语音操作。我们还介绍了设备传感器，并讨论了如何使用它们来跟踪数据。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: The code accompanying this chapter is available for reference on GitHub ([https://github.com/siddii/mastering-android-wear/tree/master/Chapter_7](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_7)).
    For the sake of brevity, only code snippets are included as needed. The reader
    is encouraged to download the referenced code from GitHub and follow along as
    they progress through the chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在GitHub上参考([https://github.com/siddii/mastering-android-wear/tree/master/Chapter_7](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_7))。为了简洁起见，只包括所需的代码片段。鼓励读者从GitHub下载引用的代码，并在阅读本章时跟随。
- en: Voice capabilities
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语音功能
- en: 'If you lived your adolescence through the eighties, chances are you got all
    your knowledge of wearable device voice interactions from this guy:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是在80年代度过你的青少年时期，那么你关于可穿戴设备语音交互的所有知识可能都来自这个人：
- en: '![Voice capabilities](img/image00194.jpeg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![语音功能](img/image00194.jpeg)'
- en: Three decades on, here you are, itching to find out whether the `Wear` API offers
    a system-provided voice action that enables you to summon your car. I'm afraid,
    not yet. The complete list of system-provided voice actions is presented in the
    subsection that follows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 三十年过去了，你现在正迫不及待地想知道Wear API是否提供了系统提供的语音操作，让你能够召唤你的汽车。恐怕，目前还没有。完整的系统提供的语音操作列表将在下面的子节中展示。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: You can visit the Android's developer site ([https://developer.android.com/training/wearables/apps/voice.html](https://developer.android.com/training/wearables/apps/voice.html))
    for more insight on the voice capabilities for your wearable app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问Android开发者网站([https://developer.android.com/training/wearables/apps/voice.html](https://developer.android.com/training/wearables/apps/voice.html))，了解更多关于你的可穿戴应用语音功能的信息。
- en: By system-provided voice actions, we mean the voice actions that are built into
    the Wear platform, that is, provided out of the box for developer use.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过系统提供的语音操作，我们指的是内置在Wear平台中的语音操作，即开发者开箱即用的操作。
- en: In contrast, the term app-provided voice actions refer to those that are specific
    to your app.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，术语应用提供的语音操作指的是特定于你的应用的那些操作。
- en: System-provided voice actions
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统提供的语音操作
- en: System-provided voice actions must be filtered according to the specific activity
    you want to start when the phrase corresponding to the voice action is spoken.
    For instance, note to self.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 系统提供的语音操作必须根据你想要启动的具体活动进行过滤。例如，记下自用笔记。
- en: 'The Wear platform supports the following voice intents:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Wear平台支持以下语音意图：
- en: Take a note
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记笔记
- en: Call a car/taxi
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打电话叫车/出租车
- en: Set alarm
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置闹钟
- en: Set timer
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置计时器
- en: Start/stop a run
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始/停止跑步
- en: Start/stop a bike ride
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始/停止骑行
- en: Start stopwatch
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始计时器
- en: Start/stop a run
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始/停止跑步
- en: Start/stop a workout
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始/停止锻炼
- en: Show step count
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示步数
- en: Show heart rate
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示心率
- en: App-provided voice actions
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用提供的语音操作
- en: Depending on your needs, the system-provided voice actions may not be enough.
    In that case, you can choose to register a start action for your app the same
    way you register a launcher icon on a handheld.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的需求，系统提供的语音操作可能不够用。在这种情况下，你可以选择以注册手持设备上的启动器图标相同的方式为你的应用注册一个启动操作。
- en: 'To start `TodayActivity` using a voice action, specify a label attribute with
    a text value set to whatever you say after the `Start` keyword. In this sample
    code, we use our app name as the label attribute. The existence of an intent-filter
    tag recognizes the voice action `Start Today` and launches the `TodayActivity`
    activity:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用语音操作启动`TodayActivity`，请指定一个标签属性，其文本值设置为在`Start`关键字之后所说的任何内容。在这个示例代码中，我们使用我们的应用名称作为标签属性。存在一个intent-filter标签可以识别语音操作`Start
    Today`并启动`TodayActivity`活动：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: New feature - adding to-do items through voice commands
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新功能 - 通过语音命令添加待办事项
- en: Let's get ready to write some code. In the last chapter, we augmented our `Today`
    app to allow us to add to-do items through a paired handheld app. The wearable
    then surfaced notifications based on configured contexts.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备好编写一些代码。在上一个章节中，我们增强了 `Today` 应用，使我们能够通过配对的便携式应用添加待办事项。然后，可穿戴设备根据配置的上下文显示通知。
- en: Now, let's spice that up by adding voice interactions to the mix. We'll use
    the wearable app to take to-do notes through voice commands. This will involve
    extending the context-aware notifications feature we implemented with the ability
    to add to-do items using voice inputs. Furthermore, we will supply the context
    along with the to-do item.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过添加语音交互来增加一些趣味。我们将使用可穿戴应用通过语音命令来记录待办事项。这将涉及扩展我们实现的有上下文感知通知功能，并能够使用语音输入添加待办事项。此外，我们将提供上下文以及待办事项。
- en: For example, if we were to say "home make dinner", our wearable app will create
    a to-do item named *Make dinner* and associate it with the `Home` context. In
    the same way, if we were to say "work set up monthly review meeting", the app
    will create a to-do item named *Set up monthly review meeting* and associate it
    with the `Work` context.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们说“home make dinner”，我们的可穿戴应用将创建一个名为 *Make dinner* 的待办事项，并将其与 `Home` 上下文相关联。同样，如果我们说“work
    set up monthly review meeting”，应用将创建一个名为 *Set up monthly review meeting* 的待办事项，并将其与
    `Work` 上下文相关联。
- en: 'A few things to keep in mind before we step through the code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们逐步查看代码之前，有一些事情需要记住：
- en: At the time of this writing, Android Wear emulators do not support voice inputs.
    So we opted to use a physical wear device.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在撰写本文时，Android Wear 模拟器不支持语音输入。因此，我们选择使用物理可穿戴设备。
- en: Now, if you recall, we had mentioned previously that we don't really need a
    physical device to build Android Wear apps. While that is true for the most part,
    there are cases where the emulators cannot emulate physical device behaviors such
    as voice inputs, motion sensing, and so on. In these cases, we really have no
    option besides getting hold of a physical device for a fuller Android wear development
    experience. Besides, if you're serious about Android Wear development, you might
    as well consider getting a physical device because it really helps speed up your
    development.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，如果您还记得，我们之前提到过，我们实际上并不需要物理设备来构建 Android Wear 应用。虽然这在很大程度上是正确的，但有些情况下模拟器无法模拟物理设备的行为，例如语音输入、运动感应等。在这些情况下，我们别无选择，只能获取物理设备以获得更完整的
    Android Wear 开发体验。此外，如果您对 Android Wear 开发认真负责，您不妨考虑购买物理设备，因为它真的有助于加快您的开发速度。
- en: It is important to note that while voice interactions are not presently supported
    in Android Wear emulators, Google might up their support for voice interactions
    in the future. We'll be keeping an eye on that.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重要的是要注意，尽管语音交互目前在 Android Wear 模拟器中不受支持，但 Google 可能会在未来提高对语音交互的支持。我们将密切关注这一点。
- en: Add to-do Item - a new action in the wearable app
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加待办事项 - 可穿戴应用中的新操作
- en: 'Let''s get started. One of the first things we will do is add an `Add Todo
    Item` action to our `arrays.xml` file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。我们将要做的第一件事是将 `Add Todo Item` 操作添加到我们的 `arrays.xml` 文件中：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This newly configured action is now displayed on our screen, as shown here:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新配置的操作现在显示在我们的屏幕上，如下所示：
- en: '![Add to-do Item - a new action in the wearable app](img/image00195.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![添加待办事项 - 可穿戴应用中的新操作](img/image00195.jpeg)'
- en: The AddTodoItem activity in the wearable app
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可穿戴应用中的 AddTodoItem 活动
- en: 'We wire in the handler for the selection of the `AddTodoItem` activity:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 `AddTodoItem` 活动的选择连接了处理程序：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Clicking on the **Add Todo Item** action has the following effect:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **添加待办事项** 操作会产生以下效果：
- en: '![The AddTodoItem activity in the wearable app](img/image00196.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![可穿戴应用中的 AddTodoItem 活动](img/image00196.jpeg)'
- en: Handling speech inputs
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理语音输入
- en: 'The `onActivityResult` method callback fires when the speech recognizer returns
    with the voice input intent. Note how we extract the spoken text and then call
    the `GoogleApiClient` API if the voice command begins with one of our predefined
    contexts, namely `home` or `work`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当语音识别器返回带有语音输入意图时，`onActivityResult` 方法回调被触发。注意我们如何提取语音文本，然后在语音命令以我们预定义的上下文之一（即
    `home` 或 `work`）开始时调用 `GoogleApiClient` API：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Android Wear parses the speech input and presents the spoken text as a confirmation,
    as shown here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Android Wear 解析语音输入，并将语音文本作为确认显示，如下所示：
- en: '![Handling speech inputs](img/image00197.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![处理语音输入](img/image00197.jpeg)'
- en: 'Once `GoogleClient` is connected, that is, the `onConnected` handler fires,
    we extract the `todoItem` text after excluding the context (`home` or `work`)
    and send the to-do item as a message to the handheld app using the `Wearable Data`
    API:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`GoogleClient`连接成功，即`onConnected`处理程序被触发，我们将在排除上下文（`home`或`work`）之后提取`todoItem`文本，并使用`Wearable
    Data` API将待办事项作为消息发送到手持应用：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Handheld app
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手持应用
- en: 'Over on the handheld app, we implement the `onMessageReceived` handler to process
    the message received from the wearable. Remember, the handheld app is where we
    do the heavy-lifting work. In this case, it is the creation of a to-do item:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在手持应用上，我们实现`onMessageReceived`处理程序来处理从可穿戴设备接收到的消息。记住，手持应用是我们进行繁重工作的地方。在这种情况下，它是创建待办事项：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The added to-do item is displayed in the to-do list on our handheld''s `Today
    - Todos` app, as shown here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 添加的待办事项在手持设备的`Today - Todos`应用中的待办事项列表中显示，如图所示：
- en: '![Handheld app](img/image00198.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![手持应用](img/image00198.jpeg)'
- en: Motion sensors
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运动传感器
- en: Motion sensors let us monitor the motion of a device through space, such as
    a rotation, swing, shake, or tilt. The movement may be relative to its immediate
    environment as is the case when you mimic a steering wheel in a car simulation.
    In this case, we monitor its motion relative to its own frame of reference or
    that of the application running on it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 运动传感器使我们能够通过空间监控设备的运动，例如旋转、摆动、摇晃或倾斜。这种运动可能与其直接环境相关，例如在汽车模拟中模仿方向盘时的情况。在这种情况下，我们监控其相对于自身参考系或运行在其上的应用程序的参考系的运动。
- en: However, the movement may also be relative to the environment surrounding the
    device, namely the world. An example of the latter is determining absolute speed
    from inside a moving vehicle. The device may be stationary inside the vehicle,
    but it is moving with respect to the earth at the same speed as the vehicle itself.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种运动也可能相对于设备周围的环境，即世界。后者的一个例子是从移动车辆内部确定绝对速度。设备可能在车辆内部是静止的，但它以与车辆本身相同的速度相对于地球移动。
- en: The Android platform lets us monitor the motion of a device using a broad array
    of sensors—some are hardware-based, such as the gyroscope and accelerometer. Others
    are software-based or they may be hardware-based but dependent on other hardware
    sensors. Examples are the rotation vector sensor, the gravity sensor, the significant
    motion sensor, the step counter sensor and the step detector sensor. You can read
    all about these on the developers site ([https://developer.android.com/guide/topics/sensors/sensors_motion.html](https://developer.android.com/guide/topics/sensors/sensors_motion.html)).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓平台使我们能够通过一系列传感器监控设备的运动——一些是基于硬件的，例如陀螺仪和加速度计。其他是基于软件的，或者可能是基于硬件的，但依赖于其他硬件传感器。例如，旋转矢量传感器、重力传感器、显著运动传感器、步数计数传感器和步检测传感器。你可以在开发者网站上了解所有这些信息（[https://developer.android.com/guide/topics/sensors/sensors_motion.html](https://developer.android.com/guide/topics/sensors/sensors_motion.html)）。
- en: Our concern in this section is to provide a very brief treatment of two hardware
    sensors that are at the very heart of all motion sensing the gyroscope and the
    accelerometer. Understanding the principles underlying these sensors will give
    us an appreciation for the physics that pervades the behavior of all motion sensors
    and will leave us with an intuitive sense of how to go about solving our application
    problems through the indirect use of these sensors via the API available to us.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们的关注点是简要介绍两个位于所有运动传感核心的硬件传感器：陀螺仪和加速度计。理解这些传感器背后的原理将使我们欣赏到贯穿所有运动传感器行为的物理学，并让我们对如何通过API间接使用这些传感器来解决我们的应用程序问题有一个直观的认识。
- en: Gyroscope
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陀螺仪
- en: A gyroscope is, at its most basic level, a device consisting of a wheel or disk
    mounted so that it can spin freely about an axis without being influenced by the
    orientation of the mount that encloses it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 陀螺仪在最基本层面上，是一个由轮子或圆盘组成，安装得使其能够绕轴自由旋转，而不会受到包围它的安装方向的任何影响的装置。
- en: 'The following image helps us better visualize the construction:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像有助于我们更好地可视化其结构：
- en: '![Gyroscope](img/image00199.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![陀螺仪](img/image00199.jpeg)'
- en: For the purposes of gaining an intuitive understanding, we just need to digest
    the fact that the properties of a gyroscope are only manifested while the rotor
    (disk) is rotating about its axis. When the disk is not rotating, the device does
    not exhibit any useful properties. But when rotating, the orientation of this
    axis is unaffected by the tilting or rotation of the mounting. This is in accordance
    with the conservation of angular momentum, and in essence, this is what makes
    a gyroscope useful for measuring or maintaining orientation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得直观的理解，我们只需要消化这样一个事实：陀螺仪的特性仅在转子（盘）绕其轴旋转时才会显现。当盘不旋转时，设备不会表现出任何有用的特性。但是当旋转时，该轴的取向不受安装倾斜或旋转的影响。这与角动量守恒定律相符，本质上，这也是陀螺仪用于测量或保持方向的原因。
- en: Accelerometer
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加速度计
- en: An accelerometer is an instrument for measuring acceleration, typically that
    of an automobile, ship, aircraft, or spacecraft, or that involved in the vibration
    of a machine, building, or other structure.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度计是一种测量加速度的仪器，通常用于测量汽车、船舶、飞机或宇宙飞船的加速度，或涉及机器、建筑物或其他结构的振动。
- en: Accelerometers find application in many fields of science and industry. For
    example, accelerometers are used to detect and monitor vibrations in rotating
    machinery. They are also used in tablets and digital cameras to ensure that images
    are always displayed upright on screen.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度计在科学和工业的许多领域都有应用。例如，加速度计用于检测和监控旋转机械的振动。它们也被用于平板电脑和数码相机，以确保图像始终在屏幕上正确显示。
- en: In the domain of wear devices, an acceleration sensor measures the acceleration
    applied to the device, which includes the forces of gravity. In general, the accelerometer
    is typically a good choice if you are monitoring device motion. It is available
    in almost every Android-powered handheld and tablet. It consumes significantly
    less power than the other motion sensors.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在可穿戴设备领域，加速度传感器测量作用于设备上的加速度，包括重力。一般来说，如果您正在监控设备运动，加速度计通常是一个不错的选择。它几乎在所有基于Android的手持设备和平板电脑上都有。它比其他运动传感器消耗的电量要少得多。
- en: New feature - tracking our steps
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新功能 - 跟踪我们的步数
- en: Everyone loves step counters. How about we build one for our wearable device?
    Not much to talk about here, so let's dive into the code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都喜欢步数计数器。我们为什么不为我们的可穿戴设备构建一个呢？这里没有太多可说的，所以让我们直接进入代码。
- en: Add to-do item - a new action in the wearable app
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加待办事项 - 可穿戴应用中的新操作
- en: 'The first thing we will do here is to add a menu `item` to the wearable app.
    Let''s call it `Step Count`. Our changes to `arrays.xml` file would be as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里要做的第一件事是为可穿戴应用添加一个菜单项。让我们称它为“步数计数”。我们对`arrays.xml`文件的更改如下：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This action should now show up on the wearable app, as shown in the following
    figure:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该可以在可穿戴应用中看到这个操作，如图所示：
- en: '![Add to-do item - a new action in the wearable app](img/image00200.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![添加待办事项 - 可穿戴应用中的新操作](img/image00200.jpeg)'
- en: 'Click on the `Step Count` menu item to launch the corresponding `StepCounterActivity`
    activity. The code for that class is given here. Note how the activity implements
    the `SensorEventListener` class. We hook up the correct sensor type using the
    `SensorManager` class in the `onCreate` handler for this activity. Take note of
    the other handlers you would expect this activity to be associated with owing
    to its implementation of the `SensorEventListener` class:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“步数计数”菜单项以启动相应的`StepCounterActivity`活动。该类的代码如下。注意该活动如何实现`SensorEventListener`类。我们使用`SensorManager`类在该活动的`onCreate`处理程序中连接正确的传感器类型。请注意，由于该活动实现了`SensorEventListener`类，您期望与之关联的其他处理程序：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is how our new activity appears on the wearable device:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的新活动在可穿戴设备上的外观：
- en: '![Add to-do item - a new action in the wearable app](img/image00201.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![添加待办事项 - 可穿戴应用中的新操作](img/image00201.jpeg)'
- en: As shown in the preceding code, the type of sensor we use here is denoted by
    the `TYPE_STEP_COUNTER` constant of the `Sensor` class. This type of sensor gets
    the number of steps that the user has taken since the last reboot of the wearable
    device. The important thing to remember about this sensor type is that applications
    need to stay registered because the step counter does not track steps if it is
    not activated.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，我们在这里使用的传感器类型由`Sensor`类的`TYPE_STEP_COUNTER`常量表示。这种类型的传感器获取用户自上次可穿戴设备重启以来所走的步数。关于这种传感器类型，需要记住的重要一点是，应用程序需要保持注册状态，因为如果未激活，步数计数器不会跟踪步数。
- en: We chose this basic type of sensor because our focus was on using the API. Feel
    free to explore the `Sensor` API class here to study the other sensors available
    to you. In particular, take a look at the `TYPE_STEP_DETECTOR` sensor type. This
    one triggers an event every time the user takes a step. Unlike the step counter,
    which tracks steps taken over a period of time, the step detector is ideal for
    detecting a step at the very moment it is taken.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择这种基本类型的传感器，因为我们关注的重点是使用API。请随意探索这里的`Sensor` API类，以研究您可用的其他传感器。特别是，看看`TYPE_STEP_DETECTOR`传感器类型。这种传感器每次用户迈步时都会触发一个事件。与追踪一段时间内所迈步数的计步器不同，步数检测器非常适合在迈步的瞬间检测步数。
- en: You can also think about how you would go about implementing a step counter
    for a given day—an exercise left to the interested reader who wants to make the
    most of our `Today` app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以思考一下如何实现给定一天的计步器——这是一个留给有兴趣的读者去充分利用我们的`Today`应用的练习。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we demonstrated the creation of app-provided voice actions
    using the `Wear` API to launch our `Today Todo` app. We also introduced motion
    sensor concepts and examined the API classes that let us avail of these sensors.
    We then applied these concepts to augment our sample `Today` application with
    a simple activity that tracks the number of steps a user has taken.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们展示了使用`Wear` API创建应用提供的语音动作，以启动我们的`Today Todo`应用。我们还介绍了运动传感器概念，并检查了让我们可以利用这些传感器的API类。然后，我们将这些概念应用于增强我们的示例`Today`应用，通过一个简单的活动来跟踪用户所迈步数。
