["```\nfunc checkNotifications() {\n   UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .b adge]) { (isGranted, error) in\n   }\n}\n```", "```\nimport UserNotifications\n```", "```\ncheckNotifications()\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\n   setupDefaultColors()\n   checkNotifications()\n   return true\n}\n```", "```\n@IBAction func onTimeTapped(sender: UIButton) {\n}\n```", "```\nfunc showNotification(sender:String?) {\n   print(sender as Any)\n}\n```", "```\nshowNotification(sender: sender.titleLabel?.text)\n```", "```\nimport UserNotifications\n```", "```\nlet content = UNMutableNotificationContent()\nif let name = selectedRestaurant?.name { content.title = name }\nif let time = sender { content.body = \"Table for 7, tonight at \\(time) \" }\ncontent.subtitle = \"Restaurant Reservation\"\ncontent.badge = 1\ncontent.sound = UNNotificationSound.default()\nlet trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)\nlet identifier = \"letsEatReservation\"\nlet request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)\nUNUserNotificationCenter.current().add(request, withCompletionHandler: { error in\n   // handle error\n})\n```", "```\nfunc setupNotificationDefaults() {\n   UNUserNotificationCenter.current().delegate = self\n}\n```", "```\nextension RestaurantDetailViewController: UNUserNotificationCenterDelegate {\n   func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -&gt; Void) {\n          completionHandler([.alert, .sound])\n   }\n}\n```", "```\nfunc initialize() {\n   setupLabels()\n   setupMap()\n   setupNotificationDefaults()\n}\n```", "```\nlet trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)\nlet identifier = \"letsEatReservation\"\nlet request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)\nUNUserNotificationCenter.current().add(request, withCompletionHandler: { error in\n   // handle error\n})\n```", "```\ndo {\n   let url = Bundle.main.url(forResource: \"sample-restaurant-img@3x\", withExtension: \"png\")\n   if let imgURL = url {\n          let attachment = try UNNotificationAttachment(identifier: \"letsEatReservation\", url: imgURL, options: nil)\n          content.attachments = [attachment]\n          let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)\n          let identifier = \"letsEatReservation\"\n          let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)\n          UNUserNotificationCenter.current().add(request, withCompletionHandler: { error in\n                 // handle error\n          })\n   }\n}\ncatch {\n   print(\"there was an error with the notification\")\n}\n```", "```\ncontent.categoryIdentifier = \"reservationCategory\"\n```", "```\nenum Identifier:String {\n   case reservationCategory\n   case reservationIdentifier = \"letsEatReservation\"\n}\nenum Option:String {\n   case one = \"optionOne\"\n   case two = \"optionTwo\"\n}\n```", "```\nlet optionOne = UNNotificationAction(identifier: Option.one.rawValue, title: \"Yes\", options: [.foreground])\nlet optionTwo = UNNotificationAction(identifier: Option.two.rawValue, title: \"No\", options: [.foreground])\nlet category = UNNotificationCategory(identifier: Identifier.reservationCategory.rawValue, actions: [optionOne, optionTwo], intentIdentifiers: [], options: [])\nUNUserNotificationCenter.current().setNotificationCategories([category])\n```", "```\nfunc userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -&gt; Void) {\n   if let identifier = Option(rawValue: response.actionIdentifier) {\n          switch identifier {\n          case .one :\n                 print(\"User selected yes\")\n          case .two:\n                 print(\"User selected no\")\n          }\n   }\n   completionHandler()\n}\n```"]