- en: Telephony, Networks, and the Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: How to make a phone call
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring phone call events
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to send SMS (text) messages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving SMS messages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a web page in your application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking online status and connection type
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone number blocking API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll start this chapter by looking at telephony functionality with *How to
    make a phone call*. After exploring how to make a call, we'll look at how to monitor
    a phone call with monitoring phone call events. We'll move on to SMS messaging
    in the How to send SMS messages section, and then we'll cover receiving SMS messages
    in the Receiving SMS messages section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: We'll then explore `WebView` for adding browser functionality to your app. At
    its basic level, `WebView` is a basic HTML viewer. We'll show how you can extend
    a `WebViewClient` class and modify the settings through `WebSettings` to create
    full browser functionality, including JavaScript and Zoom features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The last recipe of this chapter will explore a new API (added in Android 7.0
    Nougat) for blocking phone numbers at the OS level.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: How to make a phone call
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve seen in previous recipes, we can call the default applications simply
    by using an Intent. There are two Intents for phone calls:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '`ACTION_DIAL`: Uses the default phone application to make the phone call (no
    permission required)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CALL_PHONE`: Bypasses the UI to directly dial the number (requires permission)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the code to set and call the Intent for using the default Phone app:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since your application is not doing the dialing and the user must press the
    Dial button, your app does not need any dialing permissions. The recipe that follows
    will show you how to place a call directly, bypassing the Dialer app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `DialPhone`. Use the default
    Phone & Tablet option and select Empty Activity when prompted for Activity Type.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to add the appropriate permission to make the call. Then, we
    need to add a button to call our Dial method. Start by opening the Android Manifest
    and follow these steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    button:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add this method, which will check whether your app has been granted the `CALL_PHONE`
    permission:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the code to dial the number:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Before running this on your device, be sure to replace 0123456789 with a valid
    number.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the introduction, using the `CALL_PHONE` Intent requires
    the appropriate permission. We add the required permission to the manifest in
    step 1 and use the method in step 3 to verify the permission before actually calling
    the Intent in step 4. Starting with Android 6.0 Marshmallow (API 23), permissions
    are no longer granted during installation. Therefore, we check whether the application
    has permission before attempting to dial.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to *The Android 6.0 Runtime Permission Model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml), *Getting
    Your App Ready for the Play Store*, for more information on the new runtime permissions
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考第15章中的*The Android 6.0 Runtime Permission Model*配方，*为Play商店准备您的应用程序*，以获取有关新运行时权限的更多信息。
- en: Monitoring phone call events
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控电话呼叫事件
- en: In the previous recipe, we demonstrated how to make a phone call, both with
    an Intent to call the default application, as well as by directly dialing the
    number with no UI.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配方中，我们演示了如何进行电话呼叫，无论是通过Intent调用默认应用程序，还是直接拨打电话而不显示UI。
- en: What if you want to be notified when the calls ends? This is where it gets a
    bit more complicated, as you'll need to monitor the Telephony events and track
    the phone state. In this recipe, we'll demonstrate how to create a `PhoneStateListener`
    to read phone state events.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在电话结束时收到通知怎么办？这会变得稍微复杂一些，因为您需要监控Telephony事件并跟踪电话状态。在这个配方中，我们将演示如何创建一个`PhoneStateListener`来读取电话状态事件。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `PhoneStateListener`. Use
    the default Phone & Tablet options and select Empty Activity in the Add an Activity
    to Mobile dialog.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，命名为`PhoneStateListener`。使用默认的“电话和平板”选项，并在“添加到移动”对话框中选择“Empty
    Activity”。
- en: Although it's not required, you can use the previous recipe to initiate a phone
    call. Otherwise, use the default dialer and/or watch the events from an incoming
    call.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是必需的，但您可以使用之前的配方来发起电话。否则，使用默认拨号器并/或监视来电事件。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We only need a single `TextView` on the layout to display the event information.
    Open the `activity_main.xml` file and follow these steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在布局中添加一个`TextView`来显示事件信息。打开`activity_main.xml`文件并按照以下步骤操作：
- en: 'Add or modify the `TextView` as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加或修改`TextView`如下：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following permission to the Android Manifest:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下权限添加到AndroidManifest.xml中：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open `MainActivity.java` and add the following `PhoneStateListener` class to
    the `MainActivity` class:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`并将以下`PhoneStateListener`类添加到`MainActivity`类中：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Modify `onCreate()` to set up the listener:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`onCreate()`以设置监听器：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the application on a device and initiate and/or receive phone calls. Upon
    returning to this app, you'll see the list of events.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上运行应用程序并发起和/或接收电话。返回此应用程序后，您将看到事件列表。
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To demonstrate using the listener, we create the Telephony listener in the
    `onCreate()` method with this code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示使用监听器，我们在`onCreate()`方法中创建Telephony监听器，使用以下代码：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When a `PhoneState` event occurs, it is sent to our `PhoneStateListener` class.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生`PhoneState`事件时，它会被发送到我们的`PhoneStateListener`类。
- en: There's more...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'In this recipe, we are monitoring the Call State events, as indicated with
    this constant: `LISTEN_CALL_STATE`. The other interesting options include the
    following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们正在监控呼叫状态事件，如常量`LISTEN_CALL_STATE`所示。其他有趣的选项包括以下内容：
- en: '`LISTEN_CALL_FORWARDING_INDICATOR`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LISTEN_CALL_FORWARDING_INDICATOR`'
- en: '`LISTEN_DATA_CONNECTION_STATE`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LISTEN_DATA_CONNECTION_STATE`'
- en: '`LISTEN_SIGNAL_STRENGTHS`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LISTEN_SIGNAL_STRENGTHS`'
- en: Take a look at the `PhoneStateListener` link in *See also* for a complete list.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 查看*参见*中的`PhoneStateListener`链接，获取完整列表。
- en: 'When we''re done listening for events, call the `listen()` method and pass
    `LISTEN_NONE`, as shown here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成对事件的监听后，调用`listen()`方法并传递`LISTEN_NONE`，如下所示：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See also
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Developer Docs: `PhoneStateListener` at [https://developer.android.com/reference/android/telephony/PhoneStateListener.html](https://developer.android.com/reference/android/telephony/PhoneStateListener.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：`PhoneStateListener`在[https://developer.android.com/reference/android/telephony/PhoneStateListener.html](https://developer.android.com/reference/android/telephony/PhoneStateListener.html)
- en: How to send SMS (text) messages
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何发送短信（文本）消息
- en: Since you're probably already familiar with SMS (or text) messages, we won't
    spend time explaining what they are or why they are important. (If you're not
    familiar with SMS or want more information, see the link provided in the See also
    section of this recipe.) This recipe will demonstrate how to send an SMS message.
    (The next recipe will demonstrate how to receive notifications of new messages
    and how to read existing messages.)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您可能已经熟悉短信（或文本）消息，我们不会花时间解释它们是什么或为什么它们很重要。（如果您不熟悉短信或需要更多信息，请参阅本配方“参见”部分中提供的链接。）本配方将演示如何发送短信消息。（下一个配方将演示如何接收新消息的通知以及如何读取现有消息。）
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `SendSMS`. Use the default Phone
    & Tablet options and select Empty Activity in the Add an Activity to Mobile dialog.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`SendSMS`。使用默认的Phone & Tablet选项，并在“添加一个活动到移动”对话框中选择Empty
    Activity。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First, we need to add the necessary permissions for sending an SMS. Then, we''ll
    create a layout with phone number and message fields and a Send button. When the
    Send button is clicked, we''ll create and send the SMS. Here are the steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加发送短信所需的必要权限。然后，我们将创建一个包含电话号码和消息字段以及发送按钮的布局。当点击发送按钮时，我们将创建并发送短信。以下是步骤：
- en: 'Open the Android Manifest and add the following permission:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开AndroidManifest并添加以下权限：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Open `activity_main.xml` and replace the existing layout with the following
    XML:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`并用以下XML替换现有的布局：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open `MainActivity.java` and add the following global variables:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`并添加以下全局变量：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following code to the existing `onCreate()` callback:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的`onCreate()`回调中：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following method to check the permissions:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来检查权限：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Override `onRequestPermissionsResult()` to handle the permission
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onRequestPermissionsResult()`来处理权限
- en: 'request response:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请求响应：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And finally, add the method to actually send the SMS:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加实际发送短信的方法：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You're ready to run the application on a device or emulator. (Use the emulator
    device number when sending to another emulator. The first emulator is 5554; the
    second is 5556, and it continues incrementing by two for each additional emulator.)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以运行应用程序在设备或模拟器上。（在发送到另一个模拟器时使用模拟器设备号码。第一个模拟器是5554；第二个是5556，每个额外的模拟器递增2。）
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The code for sending an SMS is only two lines, as shown here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 发送短信的代码只有两行，如下所示：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `sendTextMessage()` method does the actual sending. Most of the code for
    this recipe is for checking and obtaining the required permissions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`sendTextMessage()`方法执行实际的发送。这个菜谱的大多数代码是用来检查和获取所需的权限。'
- en: There's more...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As simple as it is to send SMS messages, we still have a few more options.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然发送短信消息很简单，但我们还有一些其他选项。
- en: Multipart messages
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多部分消息
- en: 'Although it can vary depending on the carrier, 160 is typically the maximum
    characters allowed per text message. You could modify the preceding code to check
    whether the message exceeds 160 characters, and if so, you can call the SMSManager
    divideMessage() method. The method returns `ArrayList`, which you can send to
    `sendMultipartTextMessage()`. Here''s an example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这取决于运营商，但通常每个短信允许的最大字符数是160个。你可以修改前面的代码来检查消息是否超过160个字符，如果是的话，你可以调用SMSManager的divideMessage()方法。该方法返回`ArrayList`，你可以将其发送到`sendMultipartTextMessage()`。以下是一个示例：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that messages sent with `sendMultipartTextMessage()` may not work correctly
    when using an emulator, so be sure to test on a real device.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使用`sendMultipartTextMessage()`发送的消息在模拟器上可能无法正确工作，因此请确保在真实设备上进行测试。
- en: Delivery status notification
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投递状态通知
- en: 'If you''d like to be notified of the status of the messages, there are two
    optional fields you can use. Here''s the `sendTextMessage()` method as defined
    in the SMSManager documentation:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望被通知消息的状态，有两个可选字段你可以使用。以下是SMSManager文档中定义的`sendTextMessage()`方法：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can include a pending Intent to be notified of the send status and/or delivery
    status. Upon receipt of your pending Intent, it will include a result code with
    either Activity. `RESULT_OK`, if it sent successfully, or an error code as defined
    in the SMSManager documentation (see the following links):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以包含一个待处理的Intent来通知发送状态和/或投递状态。在你收到待处理的Intent时，它将包含一个结果代码，要么是Activity的`RESULT_OK`，如果发送成功，或者是一个在SMSManager文档中定义的错误代码（见以下链接）：
- en: '`RESULT_ERROR_GENERIC_FAILURE`: Generic failure cause'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESULT_ERROR_GENERIC_FAILURE`：通用失败原因'
- en: '`RESULT_ERROR_NO_SERVICE`: Failed because service is currently unavailable'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESULT_ERROR_NO_SERVICE`：由于服务当前不可用而失败'
- en: '`RESULT_ERROR_NULL_PDU`: Failed because no PDU was provided'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESULT_ERROR_NULL_PDU`：由于没有提供PDU而失败'
- en: '`RESULT_ERROR_RADIO_OFF`: Failed because radio was explicitly turned off'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESULT_ERROR_RADIO_OFF`：由于无线电被明确关闭而失败'
- en: See also
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Short Message Service on Wikipedia at [https://en.wikipedia.org/wiki/Short_Message_Service](https://en.wikipedia.org/wiki/Short_Message_Service)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的短信息服务[https://en.wikipedia.org/wiki/Short_Message_Service](https://en.wikipedia.org/wiki/Short_Message_Service)
- en: 'Developer Docs: SMSManager at [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：SMSManager 在 [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)
- en: Receiving SMS messages
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接收短信消息
- en: This recipe will demonstrate how to set up a broadcast receiver to notify you
    of new SMS messages. It's useful to note that your app does not need to be running
    to receive the SMS Intent. Android will start your service to process the SMS.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将演示如何设置一个广播接收器来通知你新的短信消息。值得注意的是，你的应用不需要运行就可以接收短信意图。Android 将启动你的服务来处理短信。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `ReceiveSMS`. Use the default Phone
    & Tablet options and select Empty Activity in the Add an Activity to Mobile dialog.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `ReceiveSMS`。使用默认的 Phone & Tablet 选项，并在“添加一个活动到移动”对话框中选择
    Empty Activity。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We won''t be using a layout in this demonstration as all the work will be in
    the Broadcast Receiver. We''ll use Toasts to display incoming SMS messages. Open
    the Android Manifest and follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们不会使用布局，因为所有的工作都将放在广播接收器中。我们将使用 Toast 显示传入的短信消息。打开 AndroidManifest 并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following declaration for the broadcast receiver to the application element:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下广播接收器声明添加到应用程序元素中：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open `MainActivity.java` and add the following method:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 并添加以下方法：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Modify the existing `onCreate()` callback to check the permission:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改现有的 `onCreate()` 回调以检查权限：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add a new Java class to the project, called `SMSBroadcastReceiver`, using the
    following code:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码在项目中添加一个新的 Java 类，命名为 `SMSBroadcastReceiver`：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 6\. You're ready to run the application on a device or emulator.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 你现在可以在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Just like in the previous recipe on sending SMS messages, we first need to check
    whether the app has permission. (On pre-Android 6.0 devices, the manifest declaration
    will automatically provide the permission, but for Marshmallow and later, we'll
    need to prompt the user as we do here.)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在之前的发送短信食谱中一样，我们首先需要检查应用是否有权限。（在 Android 6.0 之前的设备上，清单声明将自动提供权限，但对于 Marshmallow
    及以后的版本，我们需要像这里一样提示用户。）
- en: 'As you can see, the Broadcast receiver receives the notification of new SMS
    messages. We tell the system we want to receive the new SMS Received Broadcasts
    using this code in the Android Manifest:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，广播接收器接收新短信消息的通知。我们通过在 AndroidManifest 中使用以下代码告诉系统我们想要接收新的短信接收广播：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The notification comes in through the standard `onRecieve()` callback so we
    check the action using this code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通知通过标准的 `onReceive()` 回调传入，因此我们使用以下代码检查操作：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This is probably the most complicated line of code in this recipe:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是这个食谱中最复杂的一行代码：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Basically, it calls the SmsMessage library to create an SMSMessage object from
    the PDU. (The PDU, short for Protocol Data Unit, is the binary data format for
    SMS messages.) If you're not familiar with the PDU formation, you don't need to
    be. The SmsMessage library will take care of it for you and return an SMSMessage
    object.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，它调用 SmsMessage 库从 PDU 创建一个 SMSMessage 对象。（PDU，即协议数据单元，是短信消息的二进制数据格式。）如果你不熟悉
    PDU 结构，你不需要了解。SmsMessage 库会为你处理并返回一个 SMSMessage 对象。
- en: 'If your app is not receiving SMS broadcast messages, an existing application
    may be blocking your app. You can try increasing the priority value in intent-filter
    as shown here, or disabling/uninstalling the other app(s):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用没有接收短信广播消息，可能是因为其他现有应用阻止了你的应用。你可以尝试增加 intent-filter 中的优先级值，如所示，或者禁用/卸载其他应用：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: There's more...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: This recipe demonstrates displaying SMS messages as they are received, but what
    about reading existing messages?
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱演示了如何显示接收到的短信消息，但关于读取现有消息怎么办？
- en: Reading existing SMS messages
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取现有短信消息
- en: 'First, to read existing messages, you''ll need the following permission:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了读取现有消息，你需要以下权限：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here''s an example of getting a cursor using the SMS content provider:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 SMS 内容提供程序获取游标的示例：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'At the time of writing, the SMS content provider has over 30 columns. Here
    are the first 12, which are the most useful (remember, the column count starts
    at zero):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，SMS 内容提供程序有超过 30 列。以下是前 12 列，它们是最有用的（记住，列数从零开始）：
- en: '`_id`'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`_id`'
- en: '`thread_id`'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`thread_id`'
- en: '`address`'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`address`'
- en: '`person`'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`person`'
- en: '`date`'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`date`'
- en: '`protocol`'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`protocol`'
- en: '`read`'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`read`'
- en: '`status`'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status`'
- en: '`type`'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`type`'
- en: '`reply_path_present`'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`reply_path_present`'
- en: '`subject`'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`subject`'
- en: '`body`'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`body`'
- en: See also
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'Developer Docs: `SmsManager` at [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：`SmsManager` 在 [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)
- en: '**Protocol Data Unit** (**PDU**) at [https://en.wikipedia.org/wiki/Protocol_data_unit](https://en.wikipedia.org/wiki/Protocol_data_unit)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协议数据单元** (**PDU**) 在 [https://en.wikipedia.org/wiki/Protocol_data_unit](https://en.wikipedia.org/wiki/Protocol_data_unit)'
- en: 'Developer Docs: `Telephony.Sms.Intents` at [https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html](https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：`Telephony.Sms.Intents` 在 [https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html](https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html)
- en: Displaying a web page in your application
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的应用程序中显示网页
- en: 'When you want to show a web page, you have two choices: call the default browser
    or display the content in your app. If you just want to call the default browser,
    use an Intent as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想显示一个网页时，你有两个选择：调用默认浏览器或在你的应用程序中显示内容。如果你只想调用默认浏览器，使用以下 Intent：
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you need to display the content in your own application, you can use `WebView`.
    This recipe will show how to display a web page in your application, as can be
    seen in this screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要在你的应用程序中显示内容，你可以使用 `WebView`。这个示例将展示如何在你的应用程序中显示一个网页，如截图所示：
- en: '![](img/bac4a050-ddd1-431b-adfa-0c824a1b451c.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bac4a050-ddd1-431b-adfa-0c824a1b451c.png)'
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `WebView`. Use the default Phone
    & Tablet options and select Empty Activity in the Add an Activity to Mobile dialog.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `WebView`。使用默认的 Phone & Tablet 选项，并在“添加一个活动到移动”对话框中选择
    Empty Activity。
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the WebView through code so we won''t be modifying the
    layout. We''ll start by opening the Android Manifest and following these steps:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过代码创建 WebView，因此不会修改布局。我们首先打开 Android Manifest 并按照以下步骤进行：
- en: 'Add the following permission:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE33]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Modify the existing `onCreate()` to include the following code:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改现有的 `onCreate()` 方法以包含以下代码：
- en: '[PRE34]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以运行应用程序在设备或模拟器上。
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We create a WebView to use as our layout and load our webpage with `loadUrl()`.
    The preceding code works, but, at this level, it is very basic and only displays
    the first page. If you click on any links, the default browser will handle the
    request.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个 WebView 作为布局，并使用 `loadUrl()` 加载我们的网页。前面的代码是有效的，但在这一级别，它非常基础，只显示第一页。如果你点击任何链接，默认浏览器将处理请求。
- en: There's more...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'What if you want full web browsing functionality so any link the user clicks
    on still loads in your `WebView`? Create `WebViewClient` as shown in this code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要全功能的网页浏览功能，即用户点击的任何链接都仍在你的 `WebView` 中加载，创建 `WebViewClient` 如下代码所示：
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Controlling page navigation
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制页面导航
- en: 'If you want more control over the page navigation, you can create your own
    `WebViewClient` class. If you want to only allow links within your own website, override
    the `shouldOverrideUrlLoading()` callback as shown here:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要对页面导航有更多控制，你可以创建自己的 `WebViewClient` 类。如果你只想允许链接在你的网站内，则覆盖 `shouldOverrideUrlLoading()`
    回调，如下所示：
- en: '[PRE36]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, use the following code to set the client:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下代码设置客户端：
- en: '[PRE37]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How to enable JavaScript
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何启用 JavaScript
- en: 'There are many other WebView options we can customize through WebSetting. If
    you want to enable JavaScript, get `webSettings` from the WebView and call `setJavaScriptEnabled()`,
    as shown here:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 WebSetting 来自定义许多其他的 WebView 选项。如果你想要启用 JavaScript，从 WebView 中获取 `webSettings`
    并调用 `setJavaScriptEnabled()`，如下所示：
- en: '[PRE38]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Enable built-in zoom
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用内置缩放
- en: 'Another `webSettings` option is `setBuiltInZoomControls()`. Continuing from
    the preceding code, just add this:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个 `webSettings` 选项是 `setBuiltInZoomControls()`。从前面的代码继续，只需添加以下内容：
- en: '[PRE39]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Check the webSettings link in the next section for a large list of additional
    options.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中查看 webSettings 链接，以获取大量其他选项。
- en: See also
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'Developer Docs: `WebView` at [https://developer.android.com/reference/android/webkit/WebView.html](https://developer.android.com/reference/android/webkit/WebView.html)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：`WebView` 在 [https://developer.android.com/reference/android/webkit/WebView.html](https://developer.android.com/reference/android/webkit/WebView.html)
- en: Developer Docs: `webSettings` at [https://developer.android.com/reference/android/webkit/WebSettings.html](https://developer.android.com/reference/android/webkit/WebSettings.html)
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：`webSettings` 在 [https://developer.android.com/reference/android/webkit/WebSettings.html](https://developer.android.com/reference/android/webkit/WebSettings.html)
- en: 'Developer Docs: `android.webkit` at [https://developer.android.com/reference/android/webkit/package-summary.html](https://developer.android.com/reference/android/webkit/package-summary.html)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：`android.webkit` 在 [https://developer.android.com/reference/android/webkit/package-summary.html](https://developer.android.com/reference/android/webkit/package-summary.html)
- en: Checking online status and connection type
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查在线状态和连接类型
- en: 'This is a simple recipe, but one that is very common and will probably be included
    in every internet application you build: checking online status. While checking
    online status, we can also check the connection type: `WIFI` or `MOBILE`.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的配方，但也是一个非常常见的配方，可能被包含在你构建的每一个互联网应用中：检查在线状态。在检查在线状态时，我们还可以检查连接类型：`WIFI`
    或 `MOBILE`。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `isOnline`. Use the default Phone
    & Tablet options and select Empty Activity in the Add an Activity to Mobile dialog.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `isOnline`。使用默认的 `Phone & Tablet` 选项，并在“添加活动到移动”对话框中选择
    Empty Activity。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, we need to add the necessary permissions to access the network. Then,
    we''ll create a simple layout with `Button` and `TextView`. To get started, open
    the Android Manifest and follow these steps:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加必要的权限来访问网络。然后，我们将创建一个简单的布局，包含 `Button` 和 `TextView`。要开始，打开 Android
    Manifest 并按照以下步骤操作：
- en: 'Add the following permissions:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE40]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Open the `activity_main.xml` file and replace the existing layout with the
    following:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 文件，并用以下内容替换现有的布局：
- en: '[PRE41]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add this method to check the connection status:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此方法添加到检查连接状态：
- en: '[PRE42]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the following method to handle the button click:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来处理按钮点击：
- en: '[PRE43]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以运行应用在设备或模拟器上。
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We created the `isOnline()` method to make it easy to reuse this code.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了 `isOnline()` 方法，使其易于重用此代码。
- en: 'To check the status, we get an instance of `ConnectivityManager` to read the
    `NetworkInfo` state. If it reports we are connected, we get the name of the active
    network by calling `getType()`, which returns one of the following constants:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查状态，我们通过调用 `getType()` 来获取 `ConnectivityManager` 的实例，读取 `NetworkInfo` 状态。如果它报告我们已连接，我们将通过调用
    `getType()` 获取活动网络的名称，它返回以下常量之一：
- en: '`TYPE_MOBILE`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_MOBILE`'
- en: '`TYPE_WIFI`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_WIFI`'
- en: '`TYPE_WIMAX`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_WIMAX`'
- en: '`TYPE_ETHERNET`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_ETHERNET`'
- en: '`TYPE_BLUETOOTH`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_BLUETOOTH`'
- en: Also, see the `ConnectivityManager` link later for additional constants. For
    display purposes, we call `getTypeName()`. We could call `getType()` to get a
    numeric constant instead.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以查看后面的 `ConnectivityManager` 链接以获取其他常量。为了显示目的，我们调用 `getTypeName()`。我们也可以调用
    `getType()` 来获取一个数字常量。
- en: There's more...
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can also set it up so our app will be notified when the network status changes.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以设置应用在网络状态变化时被通知。
- en: Monitoring network state changes
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控网络状态变化
- en: 'If your application needs to respond to changes in the network status, take
    a look at `CONNECTIVITY_ACTION` in `ConnectivityManager`.  There are two ways
    to set up the filters to be notified of connectivity change events:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用需要响应网络状态的变化，请查看 `ConnectivityManager` 中的 `CONNECTIVITY_ACTION`。设置过滤器以通知连接状态变化事件有两种方式：
- en: Through the Android Manifest
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Android Manifest
- en: Through code
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过代码
- en: 'Here''s an example of how to include the action in the receiver''s intent filter
    through the Android Manifest:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个如何在 Android Manifest 中通过接收器意图过滤器包含动作的示例：
- en: '[PRE44]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Be careful using the Android Manifest as it will notify your app every time
    the network state changes, even if your app isn't being used. This can cause unnecessary
    drain on the battery.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Android Manifest 时要小心，因为它会在网络状态改变时通知你的应用，即使你的应用没有被使用。这可能导致不必要的电池消耗。
- en: Apps targeting Android 7.0 and later will no longer receive `CONNECTIVITY_CHANGE`
    when declared in the Manifest. (This is to prevent unnecessary battery drain).
    Instead, register the Intent Filter through code as shown next.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 针对 Android 7.0 及以后的版本的应用将不再在 Manifest 中接收 `CONNECTIVITY_CHANGE`。（这是为了防止不必要的电池消耗）。相反，通过代码注册意图过滤器，如下所示。
- en: 'The better solution (and required for Android 7.0 and later) is to register
    your intent filter through code. Here is an example:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的解决方案（并且对于 Android 7.0 及以后的版本是必需的）是通过代码注册你的意图过滤器。以下是一个示例：
- en: '[PRE45]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Take a look at the recipe in the file downloads for an example of logging `CONNECTIVITY_CHANGE`
    events.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 查看文件下载中的食谱示例，了解如何记录`CONNECTIVITY_CHANGE`事件。
- en: See also
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Developer Docs: `ConnectivityManager` at [https://developer.android.com/reference/android/net/ConnectivityManager.html](https://developer.android.com/reference/android/net/ConnectivityManager.html)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：`ConnectivityManager`在[https://developer.android.com/reference/android/net/ConnectivityManager.html](https://developer.android.com/reference/android/net/ConnectivityManager.html)
- en: 'Developer Docs: `NetworkInfo` at [https://developer.android.com/reference/android/net/NetworkInfo.html](https://developer.android.com/reference/android/net/NetworkInfo.html)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：`NetworkInfo`在[https://developer.android.com/reference/android/net/NetworkInfo.html](https://developer.android.com/reference/android/net/NetworkInfo.html)
- en: Phone number blocking API
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电话号码阻止API
- en: 'A new feature introduced in Android Nougat (API 24) is the ability to handle
    blocking phone numbers at the OS level. This provides a consistent experience
    for the user across multiple devices with the following:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Android Nougat（API 24）引入的新功能是在操作系统级别处理阻止电话号码的能力。这为用户在多个设备上提供了一致的用户体验：
- en: Blocked Numbers block both incoming calls and text messages
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被阻止的号码会阻止所有来电和短信
- en: Blocked Numbers can be backed up using the Backup & Restore feature
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被阻止的号码可以使用备份和还原功能进行备份
- en: All apps on the device share the same Blocked Numbers list
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备上的所有应用程序共享相同的被阻止号码列表
- en: In this recipe, we will look at the code to add a number to block, remove the
    number, and how to check whether the number is already blocked.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将查看如何添加一个号码到阻止列表、移除号码以及检查号码是否已被阻止的代码。
- en: Getting ready
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it `BlockedCallList`. In the Target
    Android Devices dialog, select the Phone & Tablet option and choose API 24: Android
    7.0 Nougat (or higher) for the Minimum SDK. Select Empty Activity in the Add an
    Activity to Mobile dialog.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`BlockedCallList`。在`Target Android Devices`对话框中，选择`Phone
    & Tablet`选项，并将最小SDK选择为API 24：Android 7.0 Nougat（或更高）。在`Add an Activity to Mobile`对话框中选择`Empty
    Activity`。
- en: How to do it...
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will start by creating a UI with an `EditText` to enter a phone number and
    three buttons: `Block`, `Unblock`, and `isBlocked`. To start, open `activity_main.xml` and
    follow these steps:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个带有`EditText`输入电话号码和三个按钮（`Block`、`Unblock`和`isBlocked`）的用户界面。首先，打开`activity_main.xml`并按照以下步骤操作：
- en: 'Replace the existing layout with the following XML code:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下XML代码替换现有的布局：
- en: '[PRE46]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Open `MainActivity.java` and add the following code to the class declaration:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`并在类声明中添加以下代码：
- en: '[PRE47]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the following line of code to the end of the `onCreate()` method:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到`onCreate()`方法的末尾：
- en: '[PRE48]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the three methods to handle the button clicks:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加处理按钮点击的三个方法：
- en: '[PRE49]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add the following function to block the number:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下函数以阻止号码：
- en: '[PRE50]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the following function to unblock the number:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下函数以取消阻止号码：
- en: '[PRE51]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add the following function to check whether the number is blocked:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下函数以检查号码是否被阻止：
- en: '[PRE52]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: You're ready to run the application on a device or emulator running at least
    Android 7.0.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在至少运行Android 7.0的设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Before we call the `BlockedNumberContract` APIs, we check to make sure we have
    permission by calling `canCurrentUserBlockNumbers()`, as shown in this code:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们调用`BlockedNumberContract` API之前，我们通过调用`canCurrentUserBlockNumbers()`来检查我们是否有权限，就像以下代码所示：
- en: '[PRE53]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: If true, we make the actual API call.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为真，我们进行实际的API调用。
- en: 'Important: Only the following apps can read and write to the `BlockedNumber`
    provider: the default SMS application, the default phone app, and carrier apps. The
    user can choose their default SMS and Phone app.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 重要：只有以下应用程序可以读取和写入`BlockedNumber`提供者：默认短信应用程序、默认电话应用程序和运营商应用程序。用户可以选择他们的默认短信和电话应用程序。
- en: Adding and deleting numbers from the `BlockedNumber` list uses the standard
    Service Provider format.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 从`BlockedNumber`列表中添加和删除号码使用标准的Service Provider格式。
- en: The Update method is not supported; use the `Add` and `Delete` methods instead.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 更新方法不受支持；请使用`Add`和`Delete`方法代替。
- en: 'To check whether a number is already in the block list, call the `isBlocked()` method,
    passing in the current context and the number to check, as we do in this code:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个号码是否已在阻止列表中，调用`isBlocked()`方法，传入当前上下文和要检查的号码，就像我们在以下代码中所做的那样：
- en: '[PRE54]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There's more...
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'To get the list of all currently blocked numbers, use the following code to
    create a cursor with the list:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取所有当前被阻止号码的列表，使用以下代码创建一个带有列表的游标：
- en: '[PRE55]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: See also
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: For more information, see the `BlockedNumberContract` reference documentation: [https://developer.android.com/reference/android/provider/BlockedNumberContract](https://developer.android.com/reference/android/provider/BlockedNumberContract)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参阅`BlockedNumberContract`参考文档：[https://developer.android.com/reference/android/provider/BlockedNumberContract](https://developer.android.com/reference/android/provider/BlockedNumberContract)
