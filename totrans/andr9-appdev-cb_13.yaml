- en: Telephony, Networks, and the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to make a phone call
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring phone call events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to send SMS (text) messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving SMS messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a web page in your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking online status and connection type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone number blocking API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll start this chapter by looking at telephony functionality with *How to
    make a phone call*. After exploring how to make a call, we'll look at how to monitor
    a phone call with monitoring phone call events. We'll move on to SMS messaging
    in the How to send SMS messages section, and then we'll cover receiving SMS messages
    in the Receiving SMS messages section.
  prefs: []
  type: TYPE_NORMAL
- en: We'll then explore `WebView` for adding browser functionality to your app. At
    its basic level, `WebView` is a basic HTML viewer. We'll show how you can extend
    a `WebViewClient` class and modify the settings through `WebSettings` to create
    full browser functionality, including JavaScript and Zoom features.
  prefs: []
  type: TYPE_NORMAL
- en: The last recipe of this chapter will explore a new API (added in Android 7.0
    Nougat) for blocking phone numbers at the OS level.
  prefs: []
  type: TYPE_NORMAL
- en: How to make a phone call
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve seen in previous recipes, we can call the default applications simply
    by using an Intent. There are two Intents for phone calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ACTION_DIAL`: Uses the default phone application to make the phone call (no
    permission required)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CALL_PHONE`: Bypasses the UI to directly dial the number (requires permission)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the code to set and call the Intent for using the default Phone app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Since your application is not doing the dialing and the user must press the
    Dial button, your app does not need any dialing permissions. The recipe that follows
    will show you how to place a call directly, bypassing the Dialer app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `DialPhone`. Use the default
    Phone & Tablet option and select Empty Activity when prompted for Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to add the appropriate permission to make the call. Then, we
    need to add a button to call our Dial method. Start by opening the Android Manifest
    and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this method, which will check whether your app has been granted the `CALL_PHONE`
    permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the code to dial the number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Before running this on your device, be sure to replace 0123456789 with a valid
    number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the introduction, using the `CALL_PHONE` Intent requires
    the appropriate permission. We add the required permission to the manifest in
    step 1 and use the method in step 3 to verify the permission before actually calling
    the Intent in step 4. Starting with Android 6.0 Marshmallow (API 23), permissions
    are no longer granted during installation. Therefore, we check whether the application
    has permission before attempting to dial.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to *The Android 6.0 Runtime Permission Model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml), *Getting
    Your App Ready for the Play Store*, for more information on the new runtime permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring phone call events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we demonstrated how to make a phone call, both with
    an Intent to call the default application, as well as by directly dialing the
    number with no UI.
  prefs: []
  type: TYPE_NORMAL
- en: What if you want to be notified when the calls ends? This is where it gets a
    bit more complicated, as you'll need to monitor the Telephony events and track
    the phone state. In this recipe, we'll demonstrate how to create a `PhoneStateListener`
    to read phone state events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `PhoneStateListener`. Use
    the default Phone & Tablet options and select Empty Activity in the Add an Activity
    to Mobile dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Although it's not required, you can use the previous recipe to initiate a phone
    call. Otherwise, use the default dialer and/or watch the events from an incoming
    call.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We only need a single `TextView` on the layout to display the event information.
    Open the `activity_main.xml` file and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add or modify the `TextView` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following permission to the Android Manifest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following `PhoneStateListener` class to
    the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify `onCreate()` to set up the listener:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Run the application on a device and initiate and/or receive phone calls. Upon
    returning to this app, you'll see the list of events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate using the listener, we create the Telephony listener in the
    `onCreate()` method with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When a `PhoneState` event occurs, it is sent to our `PhoneStateListener` class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we are monitoring the Call State events, as indicated with
    this constant: `LISTEN_CALL_STATE`. The other interesting options include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LISTEN_CALL_FORWARDING_INDICATOR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LISTEN_DATA_CONNECTION_STATE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LISTEN_SIGNAL_STRENGTHS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a look at the `PhoneStateListener` link in *See also* for a complete list.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we''re done listening for events, call the `listen()` method and pass
    `LISTEN_NONE`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developer Docs: `PhoneStateListener` at [https://developer.android.com/reference/android/telephony/PhoneStateListener.html](https://developer.android.com/reference/android/telephony/PhoneStateListener.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to send SMS (text) messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since you're probably already familiar with SMS (or text) messages, we won't
    spend time explaining what they are or why they are important. (If you're not
    familiar with SMS or want more information, see the link provided in the See also
    section of this recipe.) This recipe will demonstrate how to send an SMS message.
    (The next recipe will demonstrate how to receive notifications of new messages
    and how to read existing messages.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `SendSMS`. Use the default Phone
    & Tablet options and select Empty Activity in the Add an Activity to Mobile dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to add the necessary permissions for sending an SMS. Then, we''ll
    create a layout with phone number and message fields and a Send button. When the
    Send button is clicked, we''ll create and send the SMS. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Android Manifest and add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and replace the existing layout with the following
    XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to check the permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Override `onRequestPermissionsResult()` to handle the permission
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'request response:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, add the method to actually send the SMS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator. (Use the emulator
    device number when sending to another emulator. The first emulator is 5554; the
    second is 5556, and it continues incrementing by two for each additional emulator.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code for sending an SMS is only two lines, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `sendTextMessage()` method does the actual sending. Most of the code for
    this recipe is for checking and obtaining the required permissions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As simple as it is to send SMS messages, we still have a few more options.
  prefs: []
  type: TYPE_NORMAL
- en: Multipart messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although it can vary depending on the carrier, 160 is typically the maximum
    characters allowed per text message. You could modify the preceding code to check
    whether the message exceeds 160 characters, and if so, you can call the SMSManager
    divideMessage() method. The method returns `ArrayList`, which you can send to
    `sendMultipartTextMessage()`. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note that messages sent with `sendMultipartTextMessage()` may not work correctly
    when using an emulator, so be sure to test on a real device.
  prefs: []
  type: TYPE_NORMAL
- en: Delivery status notification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''d like to be notified of the status of the messages, there are two
    optional fields you can use. Here''s the `sendTextMessage()` method as defined
    in the SMSManager documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can include a pending Intent to be notified of the send status and/or delivery
    status. Upon receipt of your pending Intent, it will include a result code with
    either Activity. `RESULT_OK`, if it sent successfully, or an error code as defined
    in the SMSManager documentation (see the following links):'
  prefs: []
  type: TYPE_NORMAL
- en: '`RESULT_ERROR_GENERIC_FAILURE`: Generic failure cause'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RESULT_ERROR_NO_SERVICE`: Failed because service is currently unavailable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RESULT_ERROR_NULL_PDU`: Failed because no PDU was provided'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RESULT_ERROR_RADIO_OFF`: Failed because radio was explicitly turned off'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Short Message Service on Wikipedia at [https://en.wikipedia.org/wiki/Short_Message_Service](https://en.wikipedia.org/wiki/Short_Message_Service)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer Docs: SMSManager at [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving SMS messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up a broadcast receiver to notify you
    of new SMS messages. It's useful to note that your app does not need to be running
    to receive the SMS Intent. Android will start your service to process the SMS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `ReceiveSMS`. Use the default Phone
    & Tablet options and select Empty Activity in the Add an Activity to Mobile dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We won''t be using a layout in this demonstration as all the work will be in
    the Broadcast Receiver. We''ll use Toasts to display incoming SMS messages. Open
    the Android Manifest and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following declaration for the broadcast receiver to the application element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the existing `onCreate()` callback to check the permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new Java class to the project, called `SMSBroadcastReceiver`, using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 6\. You're ready to run the application on a device or emulator.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like in the previous recipe on sending SMS messages, we first need to check
    whether the app has permission. (On pre-Android 6.0 devices, the manifest declaration
    will automatically provide the permission, but for Marshmallow and later, we'll
    need to prompt the user as we do here.)
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the Broadcast receiver receives the notification of new SMS
    messages. We tell the system we want to receive the new SMS Received Broadcasts
    using this code in the Android Manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The notification comes in through the standard `onRecieve()` callback so we
    check the action using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is probably the most complicated line of code in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Basically, it calls the SmsMessage library to create an SMSMessage object from
    the PDU. (The PDU, short for Protocol Data Unit, is the binary data format for
    SMS messages.) If you're not familiar with the PDU formation, you don't need to
    be. The SmsMessage library will take care of it for you and return an SMSMessage
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your app is not receiving SMS broadcast messages, an existing application
    may be blocking your app. You can try increasing the priority value in intent-filter
    as shown here, or disabling/uninstalling the other app(s):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates displaying SMS messages as they are received, but what
    about reading existing messages?
  prefs: []
  type: TYPE_NORMAL
- en: Reading existing SMS messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, to read existing messages, you''ll need the following permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example of getting a cursor using the SMS content provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'At the time of writing, the SMS content provider has over 30 columns. Here
    are the first 12, which are the most useful (remember, the column count starts
    at zero):'
  prefs: []
  type: TYPE_NORMAL
- en: '`_id`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`thread_id`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`address`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`person`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`date`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`protocol`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`read`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`status`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`type`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`reply_path_present`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`subject`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`body`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developer Docs: `SmsManager` at [https://developer.android.com/reference/android/telephony/SmsManager.html](https://developer.android.com/reference/android/telephony/SmsManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protocol Data Unit** (**PDU**) at [https://en.wikipedia.org/wiki/Protocol_data_unit](https://en.wikipedia.org/wiki/Protocol_data_unit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer Docs: `Telephony.Sms.Intents` at [https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html](https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a web page in your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you want to show a web page, you have two choices: call the default browser
    or display the content in your app. If you just want to call the default browser,
    use an Intent as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to display the content in your own application, you can use `WebView`.
    This recipe will show how to display a web page in your application, as can be
    seen in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bac4a050-ddd1-431b-adfa-0c824a1b451c.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `WebView`. Use the default Phone
    & Tablet options and select Empty Activity in the Add an Activity to Mobile dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to create the WebView through code so we won''t be modifying the
    layout. We''ll start by opening the Android Manifest and following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the existing `onCreate()` to include the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We create a WebView to use as our layout and load our webpage with `loadUrl()`.
    The preceding code works, but, at this level, it is very basic and only displays
    the first page. If you click on any links, the default browser will handle the
    request.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What if you want full web browsing functionality so any link the user clicks
    on still loads in your `WebView`? Create `WebViewClient` as shown in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Controlling page navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want more control over the page navigation, you can create your own
    `WebViewClient` class. If you want to only allow links within your own website, override
    the `shouldOverrideUrlLoading()` callback as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, use the following code to set the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How to enable JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many other WebView options we can customize through WebSetting. If
    you want to enable JavaScript, get `webSettings` from the WebView and call `setJavaScriptEnabled()`,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Enable built-in zoom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another `webSettings` option is `setBuiltInZoomControls()`. Continuing from
    the preceding code, just add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Check the webSettings link in the next section for a large list of additional
    options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developer Docs: `WebView` at [https://developer.android.com/reference/android/webkit/WebView.html](https://developer.android.com/reference/android/webkit/WebView.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developer Docs: `webSettings` at [https://developer.android.com/reference/android/webkit/WebSettings.html](https://developer.android.com/reference/android/webkit/WebSettings.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer Docs: `android.webkit` at [https://developer.android.com/reference/android/webkit/package-summary.html](https://developer.android.com/reference/android/webkit/package-summary.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking online status and connection type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a simple recipe, but one that is very common and will probably be included
    in every internet application you build: checking online status. While checking
    online status, we can also check the connection type: `WIFI` or `MOBILE`.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `isOnline`. Use the default Phone
    & Tablet options and select Empty Activity in the Add an Activity to Mobile dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to add the necessary permissions to access the network. Then,
    we''ll create a simple layout with `Button` and `TextView`. To get started, open
    the Android Manifest and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `activity_main.xml` file and replace the existing layout with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this method to check the connection status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to handle the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created the `isOnline()` method to make it easy to reuse this code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the status, we get an instance of `ConnectivityManager` to read the
    `NetworkInfo` state. If it reports we are connected, we get the name of the active
    network by calling `getType()`, which returns one of the following constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TYPE_MOBILE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_WIFI`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_WIMAX`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_ETHERNET`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_BLUETOOTH`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, see the `ConnectivityManager` link later for additional constants. For
    display purposes, we call `getTypeName()`. We could call `getType()` to get a
    numeric constant instead.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also set it up so our app will be notified when the network status changes.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring network state changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your application needs to respond to changes in the network status, take
    a look at `CONNECTIVITY_ACTION` in `ConnectivityManager`.  There are two ways
    to set up the filters to be notified of connectivity change events:'
  prefs: []
  type: TYPE_NORMAL
- en: Through the Android Manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Through code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an example of how to include the action in the receiver''s intent filter
    through the Android Manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Be careful using the Android Manifest as it will notify your app every time
    the network state changes, even if your app isn't being used. This can cause unnecessary
    drain on the battery.
  prefs: []
  type: TYPE_NORMAL
- en: Apps targeting Android 7.0 and later will no longer receive `CONNECTIVITY_CHANGE`
    when declared in the Manifest. (This is to prevent unnecessary battery drain).
    Instead, register the Intent Filter through code as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: 'The better solution (and required for Android 7.0 and later) is to register
    your intent filter through code. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the recipe in the file downloads for an example of logging `CONNECTIVITY_CHANGE`
    events.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developer Docs: `ConnectivityManager` at [https://developer.android.com/reference/android/net/ConnectivityManager.html](https://developer.android.com/reference/android/net/ConnectivityManager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer Docs: `NetworkInfo` at [https://developer.android.com/reference/android/net/NetworkInfo.html](https://developer.android.com/reference/android/net/NetworkInfo.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone number blocking API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A new feature introduced in Android Nougat (API 24) is the ability to handle
    blocking phone numbers at the OS level. This provides a consistent experience
    for the user across multiple devices with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Blocked Numbers block both incoming calls and text messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocked Numbers can be backed up using the Backup & Restore feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All apps on the device share the same Blocked Numbers list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will look at the code to add a number to block, remove the
    number, and how to check whether the number is already blocked.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio and call it `BlockedCallList`. In the Target
    Android Devices dialog, select the Phone & Tablet option and choose API 24: Android
    7.0 Nougat (or higher) for the Minimum SDK. Select Empty Activity in the Add an
    Activity to Mobile dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by creating a UI with an `EditText` to enter a phone number and
    three buttons: `Block`, `Unblock`, and `isBlocked`. To start, open `activity_main.xml` and
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the existing layout with the following XML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following code to the class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to the end of the `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the three methods to handle the button clicks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following function to block the number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following function to unblock the number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following function to check whether the number is blocked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator running at least
    Android 7.0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we call the `BlockedNumberContract` APIs, we check to make sure we have
    permission by calling `canCurrentUserBlockNumbers()`, as shown in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: If true, we make the actual API call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important: Only the following apps can read and write to the `BlockedNumber`
    provider: the default SMS application, the default phone app, and carrier apps. The
    user can choose their default SMS and Phone app.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding and deleting numbers from the `BlockedNumber` list uses the standard
    Service Provider format.
  prefs: []
  type: TYPE_NORMAL
- en: The Update method is not supported; use the `Add` and `Delete` methods instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether a number is already in the block list, call the `isBlocked()` method,
    passing in the current context and the number to check, as we do in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the list of all currently blocked numbers, use the following code to
    create a cursor with the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information, see the `BlockedNumberContract` reference documentation: [https://developer.android.com/reference/android/provider/BlockedNumberContract](https://developer.android.com/reference/android/provider/BlockedNumberContract)
  prefs: []
  type: TYPE_NORMAL
