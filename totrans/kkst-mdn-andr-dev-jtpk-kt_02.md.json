["```kt\n@Composable\nfun FriendlyMessage(name: String) {\n   Text(text = \"Greetings $name!\")\n}\n```", "```kt\n@Composable\nfun SuggestiveButton() {\n    Button(onClick = { }) {\n        Row() {\n            Image(painter = \n                     painterResource(R.drawable.drawable),\n                  contentDescription = \"\")\n            Text(text = \"Press me\")\n        }\n    }\n}\n```", "```kt\n@Composable\nfun MailButton(\n    mailId: Int,\n    mailPressedCallback: (Int) -> Unit\n) {\n    Button(onClick = { mailPressedCallback(mailId) }) {\n        Text(text = \"Expand mail $mailId\")\n    }\n}\n```", "```kt\nvar seconds by mutableStateOf(0)\nval stopWatchTimer = timer(period = 1000) { seconds++ }\n   ...\n@Composable\nfun TimerText(seconds: Int) {\n   Text(text = \"Elapsed: $seconds\")\n}\n```", "```kt\nimport androidx.activity.compose.setContent\nclass MainActivity : ComponentActivity() {\n   override fun onCreate(savedInstanceState: Bundle?) {\n       super.onCreate(savedInstanceState)\n       setContent {\n           Text(\"Hello world\")\n       }\n   }\n}\n```", "```kt\n@Preview(showBackground = true)\n@Composable\nfun FriendlyMessage() {\n   Text(text = \"Greetings!\")\n}\n```", "```kt\n@Preview(\n    name = \"Greeting preview\",\n    showSystemUi = true,\n    device = Devices.PIXEL_2_XL\n)\n@Composable\nfun FriendlyMessagePreview() { Text(text = \"Greetings!\") }\n@Preview(\n        showSystemUi = true,\n        device = Devices.NEXUS_5)\n@Composable\nfun FriendlyMessagePreview2() { Text(text = \"Goodbye!\") }\n```", "```kt\nText(text = \"Greetings $name!\")\n```", "```kt\n@Composable\nfun MyAppText() {\n   Text(\n       text = stringResource(id = R.string.app_name),\n       fontStyle = FontStyle.Italic,\n       textAlign = TextAlign.Center,\n       color = Color.Magenta,\n       fontSize = 24.sp,\n       fontWeight = FontWeight.ExtraBold)\n}\n```", "```kt\n@Composable\nfun ClickableButton() {\n   Button(\n       onClick = { /* callback */ },\n       colors = ButtonDefaults.buttonColors(\n           backgroundColor = Color.Blue,\n           contentColor = Color.Red),\n       shape = MaterialTheme.shapes.medium\n   ) { Text(\"Press me\") }\n}\n```", "```kt\n@Composable\nfun NameInput() {\n   val textState = remember { mutableStateOf(\"\") }\n   TextField(\n        value = textState.value,\n        onValueChange = { newValue ->\n            textState.value = newValue\n        },\n        label = { Text(\"Your name\") })\n}\n```", "```kt\n@Composable\nfun BeautifulImage() {\n    Image(\n        painter =\n           painterResource(R.drawable.ic_launcher_foreground),\n        contentDescription = \"My app icon\",\n        contentScale = ContentScale.Fit\n    )\n}\n```", "```kt\n@Composable\nfun ColoredBox() {\n   Box(modifier = Modifier.size(120.dp))\n}\n```", "```kt\n@Composable\nfun ColoredBox() {\n   Box(modifier = Modifier\n           .size(120.dp)\n           .background(Color.Green)\n           .padding(16.dp)\n           .clip(RoundedCornerShape(size = 20.dp))\n           .background(Color.Red))\n}\n```", "```kt\n@Composable\nfun HorizontalNumbersList() {\n   Row(\n       horizontalArrangement = Arrangement.Start,\n       verticalAlignment = Alignment.CenterVertically,\n       modifier = Modifier.fillMaxWidth()\n   ) {\n       Text(\"1\", fontSize = 36.sp)\n       Text(\"2\", fontSize = 36.sp)\n       Text(\"3\", fontSize = 36.sp)\n       Text(\"4\", fontSize = 36.sp)\n   }\n}\n```", "```kt\n@Composable\nfun NamesVerticalList() {\n   Column(verticalArrangement = Arrangement.SpaceEvenly,\n       horizontalAlignment = Alignment.CenterHorizontally,\n       modifier = Modifier.fillMaxSize()\n   ) {\n       Text(\"John\", fontSize = 36.sp)\n       Text(\"Amanda\", fontSize = 36.sp)\n       Text(\"Mike\", fontSize = 36.sp)\n       Text(\"Alma\", fontSize = 36.sp)\n   }\n}\n```", "```kt\n@Composable\nfun MyFloatingActionButton() {\n   Box {\n       Surface(\n           modifier = Modifier.size(32.dp),\n           color = Color.Green,\n           shape = CircleShape,\n           content = { })\n       Text(text = \"+\",\n            modifier = Modifier.align(Alignment.Center))\n   }\n}\n```", "```kt\nbuildscript {\n    […]\n    dependencies {\n        classpath \"com.android.tools.build:gradle:7.0.2\"\n        classpath \"org.jetbrains.kotlin:kotlin-gradle- \n            plugin:1.6.10\"\n      […]\n    }\n}\n```", "```kt\nplugins {\n    […]\n    id 'org.jetbrains.kotlin.android' version '1.6.10' \n        apply false\n}\n```", "```kt\nbuildscript {\n    ext {\n        compose_version = '1.1.1'\n    }\n    repositories {…}\n    dependencies {…}\n}\n```", "```kt\nplugins { ... }\nandroid {\n    [...]\n    buildFeatures { compose true }\n    composeOptions {\n        kotlinCompilerExtensionVersion compose_version\n    }\n    packagingOptions { ... }\n}\n```", "```kt\ndependencies {\n    implementation 'androidx.core:core-ktx:1.7.0'\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'com.google.android.material:\n        material:1.5.0'\n    implementation \"androidx.compose.ui:ui:\n        $compose_version\"\n    implementation \"androidx.compose.material:\n        material:$compose_version\"\n    implementation \"androidx.compose.ui:ui-tooling-\n        preview:$compose_version\"\n    implementation 'androidx.lifecycle:lifecycle-\n        runtime-ktx:2.4.1'\n    implementation 'androidx.activity:activity-\n        compose:1.4.0'\n    testImplementation 'junit:junit:4.+'\n    androidTestImplementation\n        'androidx.test.ext:junit:1.1.3'\n    androidTestImplementation \n        'androidx.test.espresso:espresso-core:3.4.0'\n    androidTestImplementation \"androidx.compose.ui:ui-\n        test-junit4:$compose_version\"\n    debugImplementation \"androidx.compose.ui:ui-\n        tooling:$compose_version\"\n}\n```", "```kt\nsetContent {\n   RestaurantsAppTheme {\n       Surface(color = MaterialTheme.colors.background) {\n           Greeting(\"Android\")\n       }\n   }\n}\n```", "```kt\n@Composable\nfun RestaurantsAppTheme(\n   darkTheme: Boolean = isSystemInDarkTheme(),\n   content: @Composable() -> Unit\n) {\n   ...\n   MaterialTheme(\n       colors = colors,\n       typography = Typography,\n       shapes = Shapes,\n       content = content)\n}\n```", "```kt\n    @Composable\n    fun RestaurantsScreen() {\n       RestaurantItem()\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantItem() {\n        Card(elevation = 4.dp,\n             modifier = Modifier.padding(8.dp)\n        ) {\n            Row(verticalAlignment =\n                    Alignment.CenterVertically,\n                modifier = Modifier.padding(8.dp)) {\n                RestaurantIcon(\n                    Icons.Filled.Place,\n                    Modifier.weight(0.15f))\n                RestaurantDetails(Modifier.weight(0.85f))\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    private fun RestaurantIcon(icon: ImageVector, modifier: Modifier) {\n       Image(imageVector = icon,\n             contentDescription = \"Restaurant icon\",\n             modifier = modifier.padding(8.dp))\n    }\n    ```", "```kt\n    @Composable\n    private fun RestaurantDetails(modifier: Modifier) {\n       Column(modifier = modifier) {\n           Text(text = \"Alfredo's dishes\",\n                style = MaterialTheme.typography.h6)\n           CompositionLocalProvider(\n               LocalContentAlpha provides \n                   ContentAlpha.medium) {\n               Text(text = \"At Alfredo's … seafood dishes.\",\n                    style = MaterialTheme.typography.body2)\n           }\n       }\n    }\n    ```", "```kt\n    @Preview(showBackground = true)\n    @Composable\n    fun DefaultPreview() {\n       RestaurantsAppTheme {\n           RestaurantsScreen()\n       }\n    }\n    ```", "```kt\n    setContent {\n       RestaurantsAppTheme {\n           RestaurantsScreen()\n       }\n    }\n    ```", "```kt\n    data class Restaurant(val id: Int,\n                          val title: String,\n                          val description: String)\n    ```", "```kt\n    data class Restaurant(val id: Int,\n                          val title: String,\n                          val description: String)\n    val dummyRestaurants = listOf(\n        Restaurant(0, \"Alfredo foods\", \"At Alfredo's …\"),\n        [...],\n        Restaurant(13, \"Mike and Ben's food pub\", \"\")\n    )\n    ```", "```kt\n    @Composable\n    fun RestaurantItem(item: Restaurant) {\n        Card(...) {\n            Row(...) {\n                RestaurantIcon(...)\n                RestaurantDetails(\n                    item.title,\n                    item.description,\n                    Modifier.weight(0.85f)\n                )\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantDetails(title: String, description: String, modifier: Modifier){\n       Column(modifier = modifier) {\n           Text(text = title, ...)\n           CompositionLocalProvider( … ) {\n               Text(text = description, ...)\n           }\n       }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen() {\n       Column {\n           dummyRestaurants.forEach { restaurant ->\n               RestaurantItem(restaurant)\n           }\n       }\n    }\n    ```", "```kt\n@Composable\nfun RestaurantsScreen() {\n   Column(Modifier.verticalScroll(rememberScrollState())) {\n       ...\n   }\n}\n```", "```kt\n@Composable\nfun LazyColumn(\n   ...\n   content: LazyListScope.() -> Unit\n) { … }\n```", "```kt\nLazyColumn {\n   item() {\n       Text(text = \"Custom header item\")\n   }\n   items(myLongList) { myItem ->\n       MyComposable(myItem)\n   }\n   item(2) {\n       Text(text = \"Custom footer item\")\n   }\n}\n```", "```kt\n@Composable\nfun RestaurantsScreen() {\n   LazyColumn(\n       contentPadding = PaddingValues(\n           vertical = 8.dp,\n           horizontal = 8.dp)) {\n       items(dummyRestaurants) { restaurant ->\n           RestaurantItem(restaurant)\n       }\n   }\n}\n```"]