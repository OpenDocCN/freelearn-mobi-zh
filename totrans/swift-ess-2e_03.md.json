["```swift\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n  var window: UIWindow?\n  func application(application: UIApplication,\n   didFinishLaunchingWithOptions launchOptions:\n   [NSObject:AnyObject]?) -> Bool {\n    window = UIWindow()\n    window?.rootViewController = ViewController()\n    window?.makeKeyAndVisible()\n    return true\n  }\n}\n```", "```swift\nclass ViewController: UIViewController {\n  override func viewDidLoad() {\n    super.viewDidLoad()\n view.backgroundColor = UIColor.blackColor()\n let label = UILabel(frame:view.bounds)\n label.textColor = UIColor.whiteColor()\n label.textAlignment = .Center\n label.text = \"Welcome to Swift\"\n\n view.addSubview(label)\n  }\n}\n```", "```swift\nclass GitHubRepository {\n  var id:UInt64 = 0\n  var name:String = \"\"\n  func detailsURL() -> String {\n    return \"https://api.github.com/repositories/\\(id)\"\n  }\n}\n```", "```swift\nlet repo = GitHubRepository()\nrepo.id = 1\nrepo.name = \"Grit\"\nrepo.detailsURL() // returns https://api.github.com/repositories/1\n```", "```swift\nclass GitHubRepository {\n  // does not work in Swift 1.0 or 1.1\n  static let api = \"https://api.github.com\"\n  …\n  class func detailsURL(id:String) -> String {\n    return \"\\(api)/repositories/\\(id)\"\n  }\n}\n```", "```swift\nclass GitHubRepository {\n  class var api:String {\n    get {\n      return \"https://api.github.com\"\n    }\n  }\n  func detailsURL() -> String {\n    return \"\\(GitHubRepository.api)/repositories/\\(id)\"\n  }\n}\n```", "```swift\nimport XCTest\nclass GitHubRepositoryTest: XCTestCase {\n  func testRepository() {\n    let repo = GitHubRepository()\n    repo.id = 1\n    repo.name = \"Grit\"\n    XCTAssertEqual(\n      repo.detailsURL(),\n      \"https://api.github.com/repositories/1\",\n      \"Repository details\"\n    )\n  }\n}\n```", "```swift\nprotocol GitHubDetails {\n  func detailsURL() -> String\n  // protocol needs @objc if using optional protocols\n  // optional doNotNeedToImplement()\n}\n```", "```swift\nclass GitHubRepository: GitHubDetails {\n  func detailsURL() -> String {\n    // implementation as before\n  }\n}\n```", "```swift\nenum Suit {\n  case Clubs, Diamonds, Hearts // many on one line\n  case Spades // or each on separate lines\n}\n```", "```swift\nvar suit:Suit = Suit.Clubs\n```", "```swift\nvar suit:Suit = .Clubs\n```", "```swift\nenum Rank: Int {\n  case Two = 2, Three, Four, Five, Six, Seven, Eight, Nine, Ten\n  case Jack, Queen, King, Ace\n}\n```", "```swift\nRank.Two.rawValue == 2\nRank(rawValue:14)! == .Ace\n```", "```swift\nenum Card {\n  case Face(Rank, Suit)\n  case Joker\n}\n```", "```swift\nvar aceOfSpades: Card = .Face(.Ace,.Spades)\nvar twoOfHearts: Card = .Face(.Two,.Hearts)\nvar theJoker: Card = .Joker\n```", "```swift\nvar card = aceOfSpades // or theJoker or twoOfHearts ...\nswitch card {\n  case .Face(let rank, let suit): \n    print(\"Got a face card \\(rank) of \\(suit)\");\n  case .Joker: \n    print(\"Got the joker card\")\n}\n```", "```swift\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate,\n   UISplitViewControllerDelegate {\n  var window: UIWindow?\n  ...\n}\n```", "```swift\nfunc application(\n application: UIApplication,\n didFinishLaunchingWithOptions launchOptions:\n  [NSObject: AnyObject]?) -> Bool {\n  // Override point for customization after application launch.\n  ...\n}\n```", "```swift\nlet splitViewController = \n self.window!.rootViewController as! UISplitViewController\nsplitViewController.delegate = self\n```", "```swift\nlet navigationController = splitViewController.viewController\n [splitViewController.viewControllers.count-1]\n as! UINavigationController\nnavigationController.topViewController\n .navigationItem.leftBarButtonItem =\n splitViewController.displayModeButtonItem()\n```", "```swift\nclass MasterViewController: UITableViewController {\n  var detailViewcontroller: DetailViewController? = nil\n  var objects = [AnyObject]()\n  override func viewDidLoad() {…}\n  func insertNewObject(sender: AnyObject) {…}\n  …\n}\n```", "```swift\noverride func viewDidLoad() {\n  super.viewDidLoad()\n  self.navigationItem.leftBarButtonItem = self.editButtonItem()\n  let addButton = UIBarButtonItem(\n    barButtonSystemItem: .Add, target: self, \n    action: \"insertNewObject:\")\n  self.navigationItem.rightBarButtonItem = addButton\n  if let split = self.splitViewController {\n    let controllers = split.viewControllers\n    self.detailViewController = (controllers[controllers.count-1] as! UINavigationController).topViewController as? DetailViewController\n}\n```", "```swift\nfunc insertNewObject(sender: AnyObject) {\n  objects.insertObject(NSDate.date(), atIndex: 0)\n  let indexPath = NSIndexPath(forRow: 0, inSection: 0)\n  self.tableView.insertRowsAtIndexPaths(\n   [indexPath], withRowAnimation: .Automatic)\n}\n```", "```swift\noverride func numberOfSectionsInTableView(\n tableView: UITableView) -> Int {\n  return 1\n}\noverride func tableView(tableView: UITableView,\n numberOfRowsInSection section: Int) -> Int {\n  return objects.count\n}\noverride func tableView(tableView: UITableView,\n cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell{\n  let cell = tableView.dequeueReusableCellWithIdentifier(\n   \"Cell\", forIndexPath: indexPath)\n  let object = objects[indexPath.row] as! NSDate\n  cell.textLabel!.text = object.description\n  return cell\n}\noverride func tableView(tableView: UITableView,\n canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {\n  return true\n}\n```", "```swift\noverride func tableView(tableView: UITableView,\n canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {\n  return true\n}\noverride func tableView(tableView: UITableView,\n commitEditingStyle editingStyle: UITableViewCellEditingStyle,\n forRowAtIndexPath indexPath: NSIndexPath) {\n  if editingStyle == .Delete {\n    objects.removeObjectAtIndex(indexPath.row)\n    tableView.deleteRowsAtIndexPaths([indexPath],\n     withRowAnimation: .Fade)\n  }\n}\n```", "```swift\nclass DetailViewController: UIViewController {\n  var detailItem: AnyObject? {\n    didSet {\n      self.configureView()\n    }\n  }\n  … \n}\n```", "```swift\nclass MasterViewController: UIViewController {\n  …\n  override func prepareForSegue(\n   segue: UIStoryboardSegue, sender: AnyObject?) {\n    super.prepareForSegue(segue, sender: sender)\n    if segue.identifier == \"showDetail\" {\n      if let indexPath = \n       self.tableView.indexPathForSelectedRow() {\n        let object = objects[indexPath.row] as! NSDate\n        let controller = (segue.destinationViewController \n         as! UINavigationController)\n         .topViewController as! DetailViewController\n        controller.detailItem = object\n        controller.navigationItem.leftBarButtonItem =\n         self.splitViewController?.displayModeButtonItem()\n        controller.navigationItem.leftItemsSupplementBackButton =\n         true\n      }\n    } \n  }\n}\n```", "```swift\nclass DetailViewController {\n  ...\n  @IBOutlet weak var detailDescriptionLabel: UILabel!\n  function configureView() {\n    if let detail: AnyObject = self.detailItem {\n      if let label = self.detailDescriptionLabel {\n        label.text = detail.description\n      }\n    }\n  }\n}\n```"]