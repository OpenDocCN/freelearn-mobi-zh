["```kt\n class ClassA() {\n    private val b: ClassB = ClassB()\n    fun executeA() {\n        b.executeB()\n    }\n}\nclass ClassB() {\n    fun executeB() {\n\n    }\n}\n```", "```kt\nclass ClassB(private val myFlag: Boolean) {\n\n    fun executeB() {\n        if (myFlag) {\n            // Do something\n        } else {\n            // Do something else\n        }\n    }\n}\n```", "```kt\nclass ClassA() {\n    private val b: ClassB = ClassB(true)\n    fun executeA() {\n        b.executeB()\n    }\n}\n```", "```kt\nclass ClassA(private val b: ClassB) {\n    fun executeA() {\n        b.executeB()\n    }\n}\n```", "```kt\nclass Injector() {\n    fun createA(b: ClassB) = ClassA(b)\n    fun createB() = ClassB(true)\n}\n```", "```kt\nfun main(args : Array<String>) {\n    val injector = Injector()\n    val b = injector.createB()\n    val a = injector.createA(b)\n}\n```", "```kt\nclass ClassA(private val b: ClassB) {\n    fun executeA() {\n        b.executeB()\n    }\n}\ninterface ClassB {\n    fun executeB()\n}\nclass ClassB1() : ClassB {\n    override fun executeB() {\n        // Do something\n    }\n}\nclass ClassB2() : ClassB {\n    override fun executeB() {\n        // Do something else\n    }\n}\n```", "```kt\nclass Injector() {\n    fun createA(b: ClassB) = ClassA(b)\n    fun createB() = ClassB1()\n}\n```", "```kt\nplugins {\n    … \n    id 'kotlin-kapt'\n    …\n}\n```", "```kt\ndependencies {\n    …\n    implementation 'com.google.dagger:dagger:2.40.5'\n    kapt 'com.google.dagger:dagger-compiler:2.40.5'\n    …\n}\n```", "```kt\nclass ClassA(private val b: ClassB) {\n    fun executeA() {\n        b.executeB()\n    }\n}\ninterface ClassB {\n    fun executeB()\n}\nclass ClassB1() : ClassB {\n    override fun executeB() {\n        // Do something\n    }\n}\nclass ClassB2() : ClassB {\n    override fun executeB() {\n        // Do something else\n    }\n}\n```", "```kt\n@Module\nclass ApplicationModule {\n    @Provides\n    fun provideClassA(b: ClassB): ClassA = ClassA(b)\n    @Provides\n    fun provideClassB(): ClassB = ClassB1()\n}\n```", "```kt\nclass ClassA @Inject constructor(private val b: ClassB) {\n   …\n}\nclass ClassB1 @Inject constructor() : ClassB {\n    …\n}\nclass ClassB2 @Inject constructor() : ClassB {\n    …\n}\n```", "```kt\n@Module\nabstract class ApplicationModule {\n    @Binds\n    abstract fun bindClassB(b: ClassB1): ClassB\n}\n```", "```kt\n@Singleton\n@Component(modules = [ApplicationModule::class])\ninterface ApplicationComponent\n```", "```kt\nclass MyApplication : Application() {\n    lateinit var component: ApplicationComponent\n    override fun onCreate() {\n        super.onCreate()\n        component = DaggerApplicationComponent.create()\n    }\n}\n```", "```kt\n@Singleton\n@Component(modules = [ApplicationModule::class])\ninterface ApplicationComponent {\n    fun inject(mainActivity: MainActivity)\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    @Inject\n    lateinit var a: ClassA\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        (application as \n             MyApplication).component.inject(this)\n        a.executeA()\n    }\n}\n```", "```kt\n@Scope\n@MustBeDocumented\n@kotlin.annotation.Retention(AnnotationRetention.RUNTIME)\nannotation class ActivityScope\n```", "```kt\n@ActivityScope\n@Subcomponent(modules = [ApplicationModule::class])\ninterface MainSubcomponent {\n    fun inject(mainActivity: MainActivity)\n} \n```", "```kt\n@Singleton\n@Component\ninterface ApplicationComponent {\n    fun createMainSubcomponent(): MainSubcomponent\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    @Inject\n    lateinit var a: ClassA\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        (application as MyApplication).component.\n            createMainSubcomponent().inject(this)\n        a.executeA()\n    }\n}\n```", "```kt\nbuildscript {\n    repositories {\n        …\n    }\n    dependencies {\n        …\n        classpath 'com.google.dagger:hilt-android-gradle-\n            plugin:2.40.5'\n    }\n}\n```", "```kt\nplugins {\n    …\n    id 'kotlin-kapt'\n    id 'dagger.hilt.android.plugin'\n}\n```", "```kt\ndependencies {\n    …\n    implementation 'com.google.dagger:hilt-android:2.40.5'\n    kapt 'com.google.dagger:hilt-compiler:2.40.5'\n    …\n}\n```", "```kt\nclass ClassA @Inject constructor(private val b: ClassB) {\n    fun executeA() {\n        b.executeB()\n    }\n}\ninterface ClassB {\n    fun executeB()\n}\nclass ClassB1 @Inject constructor() : ClassB {\n    override fun executeB() {\n        // Do something\n    }\n}\nclass ClassB2 @Inject constructor() : ClassB {\n    override fun executeB() {\n        // Do something else\n    }\n}\n```", "```kt\n@Module\n@InstallIn(SingletonComponent::class)\nabstract class ApplicationModule {\n    @Binds\n    abstract fun bindClassB(b: ClassB1): ClassB\n}\n```", "```kt\n@HiltAndroidApp\nclass MyApplication : Application()\n```", "```kt\n@AndroidEntryPoint\nclass MainActivity : AppCompatActivity() {\n    @Inject\n    lateinit var a: ClassA\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        a.executeA()\n    }\n}\n```", "```kt\n    buildscript {\n        repositories {\n            …\n        }\n        dependencies {\n            …\n            classpath 'com.google.dagger:hilt-android-\n                gradle-plugin:2.40.5'\n        }\n    }\n    ```", "```kt\n    plugins {\n        …\n        id 'dagger.hilt.android.plugin'\n    }\n    ```", "```kt\n    dependencies {\n        …\n        implementation 'com.google.dagger:hilt-android\n            :2.40.5'\n        kapt 'com.google.dagger:hilt-compiler:2.40.5'\n        implementation 'androidx.hilt:hilt-navigation-\n            compose:1.0.0-rc01'\n        …\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    class NetworkModule {\n        @Provides\n        fun provideOkHttpClient(): OkHttpClient = \n            OkHttpClient\n            .Builder()\n            .readTimeout(15, TimeUnit.SECONDS)\n            .connectTimeout(15, TimeUnit.SECONDS)\n            .build()\n        @Provides\n        fun provideMoshi(): Moshi = Moshi.Builder().\n            add(KotlinJsonAdapterFactory()).build()\n        @Provides\n        fun provideRetrofit(okHttpClient: OkHttpClient, \n            moshi: Moshi): Retrofit = Retrofit.Builder()\n            .baseUrl(\"https://jsonplaceholder.typicode.com/\")\n            .client(okHttpClient)\n            .addConverterFactory(MoshiConverterFactory.create\n        (moshi))\n            .build()\n        @Provides\n        fun provideUserService(retrofit: Retrofit): \n            UserService =\n                retrofit.create(UserService::class.java)\n    }\n    ```", "```kt\n    val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = \"my_preferences\")\n    @Module\n    @InstallIn(SingletonComponent::class)\n    class PersistenceModule {\n        @Provides\n        fun provideAppDatabase(@ApplicationContext \n            context: Context): AppDatabase =\n            Room.databaseBuilder(\n                context,\n                AppDatabase::class.java, \"my-database\"\n            ).build()\n        @Provides\n        fun provideUserDao(appDatabase: AppDatabase): \n            UserDao = appDatabase.userDao()\n        @Provides\n        fun provideAppDataStore(@ApplicationContext \n            context: Context) = AppDataStore\n                (context.dataStore)\n    }\n    ```", "```kt\n    class MainTextFormatter @Inject constructor(@ApplicationContext private val applicationContext: Context) {\n        fun getCounterText(count: Int) =\n            applicationContext.getString(R.string.total_\n                request_count, count)\n    }\n    ```", "```kt\n    @HiltAndroidApp\n    class MyApplication : Application()\n    ```", "```kt\n    @HiltViewModel\n    class MainViewModel @Inject constructor(\n        private val userService: UserService,\n        private val userDao: UserDao,\n        private val appDataStore: AppDataStore,\n        private val mainTextFormatter: MainTextFormatter\n    ) : ViewModel() {\n       …\n    }\n    ```", "```kt\n    @Composable\n    fun Users(\n        navController: NavController,\n        viewModel: MainViewModel\n    ) {\n        …\n    }\n    ```", "```kt\n    @Composable\n    fun App(navController: NavHostController) {\n        NavHost(navController, startDestination = AppNavigation.Users.route) {\n            composable(route = AppNavigation.Users.route) {\n                Users(navController, hiltViewModel())\n            }\n            composable(\n                route = AppNavigation.User.route,\n                arguments = listOf(navArgument\n                    (AppNavigation.User.argumentName) {\n                    type = NavType.StringType\n                })\n            ) {\n                User(it.arguments?.getString(AppNavigation.User.\n        argumentName).orEmpty())\n            }\n        }\n    }\n    ```", "```kt\n    @AndroidEntryPoint\n    class MainActivity : ComponentActivity() {\n        …\n    }\n    ```", "```kt\n    android.jetifier.ignorelist=moshi-1.13.0\n    ```"]