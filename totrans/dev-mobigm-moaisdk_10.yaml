- en: Chapter 10. Creating a HUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Heads-Up Display** (**HUD**) is a key technique that game designers use
    in order to provide information to the user. It's basically a set of graphics
    or text that are detached from the world itself and that are used to tell the
    player things such as how much life or *mana* they have left, or what their score
    is.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to create a simple HUD that will give us really useful information
    such as the direction in which the character is going and its position in world
    coordinates. This will be enough to illustrate how to create a HUD. You will want
    to display more useful information in your own game. So let's go!
  prefs: []
  type: TYPE_NORMAL
- en: The basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a file called `hud.lua`, require it from `game.lua`, and let's start
    our module.
  prefs: []
  type: TYPE_NORMAL
- en: Our HUD implementation will be based on the idea that we don't want world coordinates
    to position objects that are not inside the world. Also, we're more used to designing
    layouts for UIs thinking about (0, 0) on the top-left corner and the `Y` axis
    growing downward.
  prefs: []
  type: TYPE_NORMAL
- en: 'So that''s what we''re going to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to use a different coordinate system, we'll create a new viewport.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This viewport will have the same size as the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It won't use world coordinates. Instead, it will use screen coordinates, but
    we'll invert the `Y` axis so that it grows downward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now here's something new. The `setOffset` method is used to move the viewport
    using the projection space. The projection space is a 2 x 2 rectangle with its
    `Y` axis pointing upwards. Passing `-1` as the `X` value to `setOffset` moves
    this projection space half a screen to the left, and passing `1` as the `Y` value
    moves it half a screen to the top, achieving our goal of having the (0, 0) coordinate
    on the top-left corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see here that this is pretty useful; you could move the (0, 0) to wherever
    you want and the positions will be calculated based on that.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After this, we create a layer and load it into the render table like we''re
    used to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a call to `HUD:initialize ()` at the bottom of `Game:initialize` and you
    should be good to go.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we're ready to start creating our `HUD` elements.
  prefs: []
  type: TYPE_NORMAL
- en: Left or right, that's the question
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we''re going to display our information on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to define a font in `game.lua` inside the `resource_definitions`
    table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We provided one with the source code for this chapter, but you can use whatever
    font you like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should be familiar, since we talked about it in [Chapter 6](ch06.html "Chapter 6. Resource
    Manager"), *Resource Manager*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we know `hudFont` will reference our font.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s go back to `hud.lua`, create a method called `initializeDebugHud`, and
    call it from `HUD:initialize`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We use the font resource that we''ve just created as the font for our textboxes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we call an auxiliary method that we will create in a moment. It will receive
    the font size and a rectangle where the text will be placed. The rectangle consists
    of the coordinates for the upper-left and bottom-right corners of the box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First of all, we create `MOAITextBox`. This is the class that will be used
    to display text. It inherits from `MOAIProp`, so you''ll be able to move it, insert
    it into a layer, and do everything else you can do with `MOAIProp`:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'We set the font we loaded previously:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we set the size using the `size` parameter:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use multiple text styles in `MOAITextBox`; take a look at `setStyle`
    and `MOAITextStyle` in the documents.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We split the `rectangle` table into parameters using `unpack`:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The rectangle defines a box on the screen to which the text is confined. Text
    won't render outside the rectangle defined using `setRect`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We insert the textbox in the HUD's layer.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: And finally return the textbox, so it can be referenced later.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Now we have our `HUD` layer populated with the textboxes, but there is one more
    thing we need in order to finish our goal.
  prefs: []
  type: TYPE_NORMAL
- en: Updating information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to write something into those textboxes. What we''ll do in this case
    is call an `update` method in `HUD` periodically, so that it can refresh the data
    and print it on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the scale that we used to set the character''s direction, and store
    it in a local variable `x`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you remember what we did before, this should be pretty clear. In order to
    turn right we scaled the character's `prop` to `-1` in the `x` axis, and to `1`
    to turn the character to the left. So that's what we're doing here. If the `x`
    value of the scale is positive, then we're facing left. Otherwise, if it is `-1`,
    we're facing right. Then, depending on the case, we use `MOAITextBox:setString`
    to update the string with the correct direction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally we update the textbox; we get the position from the physics body. Using
    the `..` operator to concatenate strings, we generate the correct string formatted
    as `(x, y)`. We then use `math.floor` to round down the position, since it's a
    decimal number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The only thing we need to do now is add a call to `HUD:update ()` on the `while`
    loop inside `Game:start` and we should see both debug strings on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are uncertain about the size and layout of the boxes, you can use `MOAIDebugLines.setStyle(MOAIDebugLines.TEXT_BOX)`
    in order to debug them. This will display a line around each textbox.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned the basics about how to implement a `HUD` with Moai
    SDK. We dug deeper into the `MOAIViewport` configuration in order to create a
    special viewport that used a different coordinate system than the one we've been
    using so far. We also displayed text for the first time using `MOAITextBox`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we''ll dive into another important aspect of games: sound
    and music.'
  prefs: []
  type: TYPE_NORMAL
