["```java\nISharedPreferences prefs = Application.Context.GetSharedPreferences (\"PREF_NAME\", FileCreationMode.Private);\n```", "```java\nISharedPreferencesEditor editor = prefs.Edit();\neditor.PutInt(\"your_key1\" ,10);\neditor.PutString(\"your_key2\", \"Xamarin Example\");\neditor.Apply();\n```", "```java\nvar value1 = prefs.GetInt (\"your_key1\", 0);\nvar value2 = prefs.GetString (\"your_key2\", null);\n```", "```java\nusing SQLite;\nnamespace POIApp\n{\n  [Table(\"POITable\")]\n  public class PointOfInterest\n  {\n    [PrimaryKey, AutoIncrement, Column(\"_id\")]\n    public int Id { get; set;}\n     [NotNull]\n    public string Name { get; set; }\n     [MaxLength(1000)]\n    public string Description { get; set; }\n     [MaxLength(150)]\n    public string Address { get; set; }\n     public string Image { get; set; }\n    public double? Latitude { get; set; }\n    public double? Longitude { get; set; }\n  }\n}\n```", "```java\n    public class DBManager\n    {\n      private DBManager() \n        {\n      }\n    }\n    ```", "```java\nprivate static readonly DBManager instance = new DBManager();\npublic static DBManager Instance\n{\n  get \n  {\n    return instance;\n  }\n}\n```", "```java\nSQLiteConnection dbConn;\nprivate const string DB_NAME = \"PointOfInterest_DB.db3\";\n public void CreateTable()\n{\n  var path = System.Environment.GetFolderPath (System.Environment.SpecialFolder.Personal);\n  dbConn = new SQLiteConnection (System.IO.Path.Combine (path, DB_NAME));\n  dbConn.CreateTable&lt;PointOfInterest&gt; ();\n}\n```", "```java\npublic int SavePOI(PointOfInterest poi) \n{\n  int result = dbConn.InsertOrReplace (poi);\n  Console.WriteLine (\"{0} record updated!\", result);\n  return result;\n}\n```", "```java\npublic List&lt;PointOfInterest&gt; GetPOIListFromCache() \n{\n  var poiListData = new List&lt;PointOfInterest&gt; ();\n  IEnumerable&lt;PointOfInterest&gt; table = dbConn.Table&lt;PointOfInterest&gt; ();\n  foreach (PointOfInterest poi in table) \n  {\n    poiListData.Add (poi);\n  }\n  return poiListData;\n}\n```", "```java\npublic PointOfInterest  GetPOI(int poiId)\n{\n  PointOfInterest poi = dbConn.Table&lt;PointOfInterest&gt;().Where(a =&gt; a.Id.Equals(poiId)).FirstOrDefault();\n  return poi;\n}\n```", "```java\npublic int DeletePOI(int poiId) \n{\n  int result = dbConn.Delete&lt;PointOfInterest&gt;(poiId);\n  Console.WriteLine(\"{0} record effected!\", result);\n  return result;\n}\n public int ClearPOICache()\n{\n  int result = dbConn.DeleteAll&lt;PointOfInterest&gt;();\n  Console.WriteLine(\"{0} records effected!\", result);\n  return result;\n}\n```", "```java\n    [TestFixture]\n    public class POITestFixture\n    {\n      [SetUp]\n      public void Setup ()\n      {\n        DBManager.Instance.CreateTable ();\n      }\n    }\n    ```", "```java\n[Test]\npublic void CreatePOI ()\n{\n  int testId = 1091;\n  PointOfInterest newPOI = new PointOfInterest ();\n  newPOI.Id = testId;\n  newPOI.Name = \"New POI\";\n  newPOI.Description = \"POI to test creating a new POI\";\n  newPOI.Address = \"100 Main Street\\nAnywhere, TX 75069\";\n   //Saving poi record\n  int recordsUpdated = DBManager.Instance.SavePOI (newPOI);\n   //Check if the number of records updated are same as expected\n  Assert.AreEqual (1, recordsUpdated);\n   // verify if the newly create POI exists\n  PointOfInterest poi = DBManager.Instance.GetPOI (testId);\n  Assert.NotNull (poi);\n  Assert.AreEqual (poi.Name, \"New POI\");\n}\n```", "```java\n[Test]\npublic void DeletePOI ()\n{\n  int testId = 1019;\n  PointOfInterest testPOI = new PointOfInterest ();\n  testPOI.Id = testId;\n  testPOI.Name = \"Delete POI\";\n  testPOI.Description = \"POI being saved so we can test delete\";\n  testPOI.Address = \"100 Main Street\\nAnywhere, TX 75069\";\n  DBManager.Instance.SavePOI (testPOI);\n   PointOfInterest deletePOI = DBManager.Instance.GetPOI (testId);\n  Assert.NotNull (deletePOI);\n\n  DBManager.Instance.DeletePOI(testId);  \n\n  PointOfInterest poi = DBManager.Instance.GetPOI (testId);\n  Assert.Null (poi);\n}\n```", "```java\n[Test]\npublic void ClearCache ()\n{\n  DBManager.Instance.ClearPOICache ();\n  List&lt;PointOfInterest&gt; poiList = DBManager.Instance.GetPOIListFromCache ();\n  Assert.AreEqual (0, poiList.Count);\n}\n```", "```java\n    DBManager.Instance.CreateTable();\n    ```", "```java\npublic async void DownloadPoisListAsync(){\n      POIService service = new POIService ();\n      if (!service.isConnected (activity)) {\n        Toast toast = Toast.MakeText (activity, \"Not conntected to internet. Please check your device network settings.\", ToastLength.Short);\n        toast.Show ();\n        poiListData = DBManager.Instance.GetPOIListFromCache ();\n      } else {\n        progressBar.Visibility = ViewStates.Visible;\n        poiListData = await service.GetPOIListAsync ();\n         //Clear cached data\n        DBManager.Instance.ClearPOICache ();\n         //Save updated POI data\n        DBManager.Instance.InsertAll (poiListData); progressBar.Visibility = ViewStates.Gone;\n      }\n       poiListAdapter = new POIListViewAdapter (activity, poiListData);\n      this.ListAdapter = poiListAdapter;\n      ListView.Post(() =&gt; {\n        ListView.SetSelection(scrollPosition);\n      });\n}\n```", "```java\nprivate async void CreateOrUpdatePOIAsync(PointOfInterest poi){\n      .....\n      .....\n      if (!string.IsNullOrEmpty (response)) {\n        Toast toast = Toast.MakeText (activity, String.Format (\"{0} saved.\", _poi.Name), ToastLength.Short);\n        toast.Show();\n         DBManager.Instance.SavePOI (poi);\n         if(!POIListActivity.isDualMode)\n          activity.Finish ();\n      } else {\n        Toast toast = Toast.MakeText (activity, \"Something went Wrong!\", ToastLength.Short);\n        toast.Show();\n      }\n}\n```", "```java\npublic async void DeletePOIAsync(){\n     .....\n     ....\n      string response = await service.DeletePOIAsync (_poi.Id);\n      if (!string.IsNullOrEmpty (response)) {\n        Toast toast = Toast.MakeText (activity, String.Format (\"{0} deleted.\", _poi.Name), ToastLength.Short);\n        toast.Show();\n         DBManager.Instance.DeletePOI (poi);\n       if(!POIListActivity.isDualMode)\n          activity.Finish ();\n\n      } else {\n        Toast toast = Toast.MakeText (activity, \"Something went Wrong!\", ToastLength.Short);\n        toast.Show();\n      }\n}\n```"]