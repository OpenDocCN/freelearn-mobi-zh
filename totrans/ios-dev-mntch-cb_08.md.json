["```swift\n    this.buttonCall.TouchUpInside += delegate {\n    NSUrl url = new NSUrl(\"tel:+123456789012\");\n    if (UIApplication.SharedApplication.CanOpenUrl(url)){\n    UIApplication.SharedApplication.OpenUrl(url);\n    } else{\n    Console.WriteLine(\"Cannot open url: {0}\", url.AbsoluteString);\n    }\n    } ;\n\n    ```", "```swift\nUIApplication.SharedApplication.OpenUrl(url);\n\n```", "```swift\nif (UIApplication.SharedApplication.CanOpenUrl(url))\n\n```", "```swift\nCTCallCenter callCenter = new CTCallCenter();\ncallCenter.CallEventHandler = delegate(CTCall call) {\nConsole.WriteLine(call.CallState);\n} ;\n\n```", "```swift\nNSUrl url = new NSUrl(\"http://www.packtpub.com\");\n\n```", "```swift\n    this.buttonSendText.TouchUpInside += delegate {\n    NSUrl textUrl = new NSUrl(\"sms:\");\n    if (UIApplication.SharedApplication.CanOpenUrl(textUrl)){\n    UIApplication.SharedApplication.OpenUrl(textUrl);\n    } else{\n    Console.WriteLine(\"Cannot send text message!\");\n    }\n    } ;\n    this.buttonSendEmail.TouchUpInside += delegate {\n    NSUrl emailUrl = new NSUrl(\"mailto:\");\n    if (UIApplication.SharedApplication.CanOpenUrl(emailUrl)){\n    UIApplication.SharedApplication.OpenUrl(emailUrl);\n    } else{\n    Console.WriteLine(\"Cannot send e-mail message!\");\n    }\n    } ;\n\n    ```", "```swift\nUIApplication.SharedApplication.OpenUrl(new NSUrl(\"sms:+123456789012\"));\n\n```", "```swift\nUIApplication.SharedApplication.OpenUrl(new NSUrl(\"mailto:\"));\n\n```", "```swift\nUIApplication.SharedApplication.OpenUrl(\"mailto:recipient@example.com?subject=Email%20with%20MonoTouch!&body=This%20is%20the%20message%20body!\");\n\n```", "```swift\n    using MonoTouch.MessageUI;\n\n    ```", "```swift\n    private MFMessageComposeViewController messageController;\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.buttonSendMessage.TouchUpInside += delegate {\n    if (MFMessageComposeViewController.CanSendText){\n    this.messageController = new MFMessageComposeViewController();\n    this.messageController.Recipients = new string[] { \"+123456789012\" };\n    this.messageController.Body = \"Text from MonoTouch\";\n    this.messageController.MessageComposeDelegate = new MessageComposerDelegate();\n    this.PresentModalViewController( this.messageController, true);\n    } else{\n    Console.WriteLine(\"Cannot send text message!\");\n    }\n    } ;\n    }\n\n    ```", "```swift\n    private class MessageComposerDelegate : MFMessageComposeViewControllerDelegate{\n    public override void Finished (MFMessageComposeViewController controller, MessageComposeResult result){\n    switch (result){\n    case MessageComposeResult.Sent:\n    Console.WriteLine(\"Message sent!\");\n    break;\n    case MessageComposeResult.Cancelled:\n    Console.WriteLine(\"Message cancelled!\");\n    break;\n    default:\n    Console.WriteLine(\"Message sending failed!\");\n    break;\n    }\n    controller.DismissModalViewControllerAnimated(true);\n    }\n    }\n\n    ```", "```swift\nprivate class MessageComposerDelegate : MFMessageComposeViewControllerDelegate\n\n```", "```swift\ncontroller.DismissModalViewControllerAnimated(true);\n\n```", "```swift\nthis.messageController.Recipients = new string[] { \"+123456789012\" };\nthis.messageController.Body = \"Text from MonoTouch\";\n\n```", "```swift\n    this.buttonSendEmail.TouchUpInside += delegate {\n    this.mailController = new MFMailComposeViewController();\n    this.mailController.SetToRecipients(new string[] { \"recipient@example.com\" });\n    this.mailController.SetSubject(\"Email from MonoTouch!\");\n    this.mailController.SetMessageBody(\"This is the message body!\", false);\n    this.mailController.Finished += this.MailController_Finished;\n    if (MFMailComposeViewController.CanSendMail){\n    this.PresentModalViewController(this.mailController, true);\n    } else{\n    Console.WriteLine(\"Cannot send email!\");\n    }\n    } ;\n\n    ```", "```swift\n    private void MailController_Finished (object sender, MFComposeResultEventArgs e){\n    switch (e.Result){\n    case MFMailComposeResult.Sent:\n    Console.WriteLine(\"Email sent!\");\n    break;\n    case MFMailComposeResult.Saved:\n    Console.WriteLine(\"Email saved!\");\n    break;\n    case MFMailComposeResult.Cancelled:\n    Console.WriteLine(\"Email sending cancelled!\");\n    break;\n    case MFMailComposeResult.Failed:\n    Console.WriteLine(\"Email sending failed!\");\n    if (null != e.Error){\n    Console.WriteLine(\"Error message: {0}\", e.Error.LocalizedDescription);\n    }\n    break;\n    }\n    e.Controller.DismissModalViewControllerAnimated(true);\n    }\n\n    ```", "```swift\nthis.mailController.SetToRecipients(new string[] { \"recipient@example.com\" });\nthis.mailController.SetSubject(\"Email from MonoTouch!\");\nthis.mailController.SetMessageBody(\"This is the message body!\", false);\n\n```", "```swift\nthis.mailController.AddAttachmentData(UIImage.FromFile(\"image.jpg\"). AsJPEG(), \"image/jpg\", \"image.jpg\");\n\n```", "```swift\n    using MonoTouch.AddressBook;\n\n    ```", "```swift\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.buttonGetContacts.TouchUpInside += delegate {\n    ABAddressBook addressBook = new ABAddressBook();\n    ABPerson[] contacts = addressBook.GetPeople();\n    foreach (ABPerson eachPerson in contacts){\n    Console.WriteLine(string.Format(\"{0} {1}\", eachPerson.LastName, eachPerson.FirstName));\n    }\n    } ;\n    }\n\n    ```", "```swift\nABAddressBook addressBook = new ABAddressBook();\n\n```", "```swift\nABPerson[] contacts = addressBook.GetPeople();\n\n```", "```swift\nConsole.WriteLine(string.Format(\"{0} {1}\", eachPerson.LastName, eachPerson.FirstName));\n\n```", "```swift\nABMultiValue<string> phones = eachPerson.GetPhones();\nConsole.WriteLine(phones[0].Value);\n\n```", "```swift\nABMutableMultiValue<string> newPhones = phones.ToMutableMultiValue();\n\n```", "```swift\nnewPhones.Add(\"+120987654321\", ABPersonPhoneLabel.iPhone);\neachPerson.SetPhones(newPhones);\naddressBook.Save();\n\n```", "```swift\n    UINavigationController navController;\n\n    ```", "```swift\n    this.navController = new UINavigationController(new MainController());\n\n    ```", "```swift\n    window.RootViewController = this.navController;\n\n    ```", "```swift\n    ABAddressBook addressBook = new ABAddressBook();\n    ABPerson[] contacts = addressBook.GetPeople();\n    ABPersonViewController personController = new ABPersonViewController();\n    personController.DisplayedPerson = contacts[0];\n    this.buttonDisplayContact.TouchUpInside += delegate {\n    this.NavigationController.PushViewController( personController, true);\n    } ;\n\n    ```", "```swift\nABPersonViewController personController = new ABPersonViewController();\npersonController.DisplayedPerson = contacts[0];\n\n```", "```swift\nthis.NavigationController.PushViewController(personController, true);\n\n```", "```swift\npersonController.AllowsEditing = true;\n\n```", "```swift\n    this.buttonDisplayEvents.TouchUpInside += delegate {\n    EKEventStore evStore = new EKEventStore();\n    NSPredicate evPredicate = evStore.PredicateForEvents( DateTime.Now, DateTime.Now.AddDays(30), evStore.Calendars);\n    evStore.EnumerateEvents(\n    evPredicate, delegate(EKEvent calEvent, ref bool stop) {\n    if (null != calEvent){\n    stop = false;\n    Console.WriteLine(\"Event title: {0}\\nEvent start date: {1}\", calEvent.Title, calEvent.StartDate);\n    }\n    } );\n    } ;\n\n    ```", "```swift\nEKEventStore evStore = new EKEventStore();\n\n```", "```swift\nNSPredicate evPredicate = evStore.PredicateForEvents(DateTime.Now, DateTime.Now.AddDays(30), evStore.Calendars);\n\n```", "```swift\nevStore.EnumerateEvents(evPredicate, delegate(EKEvent calEvent, ref bool stop) {\n//...\n\n```", "```swift\nEKEvent newEvent = EKEvent.FromStore(evStore);\nnewEvent.StartDate = DateTime.Now.AddDays(1);\nnewEvent.EndDate = DateTime.Now.AddDays(1.1);\nnewEvent.Title = \"MonoTouch event!\";\nnewEvent.Calendar = evStore.DefaultCalendarForNewEvents;\nNSError error = null;\nevStore.SaveEvent(newEvent, EKSpan.ThisEvent, out error);\n\n```"]