- en: Chapter 10. Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animation is the illusion of movement of static (still) images. To do this,
    typically something has to move roughly every 1/25th of a second. The more the
    steps used for moving something, the smoother the motion and the easier it is
    to fool the brain. We've already seen [Chapter 6](../Text/part0035.html#page "Chapter 6. Events"),
    *Events*, how animation can be achieved using `UIAlertView`. Now we need to see
    how we can do this normally using the `CoreAnimation` and `CoreGraphics` namespaces.
    This is not going to be an exhaustive study but it will give you a grounding in
    the basics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Handling bitmaps (scaling and rotation)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Freeing memory after use
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling bitmaps
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A bitmap image can be created either inside or outside of an app. External
    bitmaps are rendered to `UIImageView` as shown in the following code:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can get the image in, so let's do something with it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Scaling the image
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scaling can be achieved by setting the scale factor.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If `scaleFactor` is not specified, it is `1.0f` by default.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, you could create a kind of animation as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This gives the impression of the image growing. It's not very good, but gives
    you an idea. To get further than this (such as rotation), we need to start looking
    at `CoreGraphics` and `CoreAnimation`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the image – Part 1
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I will assume here that there is a small-enough `UIImageView` widget set onto
    a view (say 122 x 122) in the middle of the screen. As before, the image is loaded
    in, but this time the `CoreGraphics` image is required.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The image is loaded and rotated. The rotation is static (in other words, instant).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: For animation, `CoreAnimation` needs to be used. However, before doing a rotation
    animation, let's start off on something simpler—moving something across the screen
    and back. To do this, let's look at some code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are two important points to note about this code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The code operates on `UIView` rather than `UIImageView`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bindings between Xamarin.iOS and the underpinning Objective-C become very
    visible for animation and drawing in general (the binding is the selector)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underpinning bindings
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding example, the code is creating an interface layer for the underpinning
    Objective-C. The compiler handles this in a slightly different manner compared
    to normal code. Adding this sort of `Selector` code can be used in other ways
    as well (for example, to access private API code—though this should be avoided
    as it will debar apps from being accepted into the app store). It should be noted
    that the bindings to the Objective-C layer may sometimes cause issues with submission
    to the Apple store.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Analysis of the code
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The analysis of the preceding code can be summed up as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: startPoint is the position of the image at the start.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To tell the app there is going to be an animation, `BeginAnimations` needs to
    be called.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Duration` is the length of the animation and `RepeatCount` is the number of
    times the animation is called.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RepeatAnimationCurve` defines how the animation is to proceed (in this case,
    to repeat the animation curve, a curve does not have to be an arc on a circle,
    it can be a straight line).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EaseInOut` starts the animation slowly and builds up and slows down.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EaseIn` starts the animation slowly.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EaseOut` slows it at the end'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Linear` gives a uniform speed.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The binding resets the image to the center once the animation has ended.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CommitAnimations` sets the animation going. Xamarin.iOS provides a very good
    example of animation using blocks that will provide further support on this topic.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Freeing memory after use
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typically, once a class has gone out of scope, the **garbage collector** (**GC**)
    will free up memory used by the processes within that class. However, as Xamarin.iOS
    works as a binding layer to the underpinning Objective-C, there are times when
    freeing memory becomes important; this mostly happens when dealing with animation
    and graphics.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Probably the simplest way to clean up is provided when a new View Controller
    is created.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For example, to release `uiImageView` do as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the code doesn't cause a memory warning, `ViewDidDisappear()` can also be
    used to free the memory in the same way.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Another simple method of freeing memory is to allow the GC to do its job once
    the code has gone out of scope. Consider the following (simplistic) code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The code executes and loads `UIImageView` with the image as directed by the
    returned string. If `condition` is met (that is, it's `true`), the method returns.
    If `condition` is not met, the method jumps to `callNewMethod`. Neither of these
    are big issues, except that the GC does not get called until the class itself
    goes out of scope. So any memory occupied by the `UIImageView` control is still
    used, despite it only being used for three lines in one class. With too many images
    and too many manipulations, memory soon vanishes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: If you consider an average animation, there may be 300 images with backgrounds
    and so the memory is soon drained.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple solution is to only create and use what you need and use code that
    calls the GC once it has gone out of scope. The following lines of code demonstrate
    how to do this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: While this looks similar, the image being created is used and once completed,
    the memory being used is freed up again, rather than having to wait until the
    class goes out of scope.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the image – Part 2
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get an image to rotate, the `CoreGraphics` image has to be used followed
    by conversion to a bitmap. The following gives you an idea of how to do the rotation.
    Altering `RotateCTM` and `TranslateCTM` from positive to negative (and vice versa)
    should give different results.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animation and graphics handling is an extensive topic on iOS. While this chapter
    has been a whistle-stop over the subject, I would recommend you have a look at
    *Learning MonoTouch* by *Michael Bluestein*, Pearson Education, Inc. His book
    covers the topic in much greater detail than space allows here.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上，动画和图形处理是一个广泛的主题。虽然本章对这一主题进行了简要概述，但我建议您阅读由Michael Bluestein所著、Pearson Education,
    Inc.出版的*《学习MonoTouch》*。他的书对这一主题的覆盖比这里所允许的更为详细。
