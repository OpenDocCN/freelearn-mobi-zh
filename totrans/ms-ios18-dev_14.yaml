- en: <st c="0">14</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">14</st>
- en: <st c="3">Improving the App Quality with Swift Testing</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="3">使用Swift Testing提升应用质量</st>
- en: <st c="48">Why is testing part of a coding book?</st> <st c="87">Isn’t testing
    part of the</st> **<st c="113">Quality Assurance</st>** <st c="130">(</st>**<st
    c="132">QA</st>**<st c="134">)</st> <st c="137">team’s remit?</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48">为什么测试是编程书籍的一部分呢？</st> <st c="87">测试不是</st> **<st c="113">质量保证</st>**
    <st c="130">(</st>**<st c="132">QA</st>**<st c="134">)** <st c="137">团队职责的一部分吗？</st>
- en: <st c="150">You will soon discover that testing is part of our development cycle
    and our culture as iOS developers.</st> <st c="255">Many developers see testing
    as an essential task that they don’t have time for.</st> <st c="335">Unfortunately,
    they pay the price later with bugs and</st> <st c="389">long refactors.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="150">你很快会发现，测试是我们作为iOS开发者开发周期和文化的一部分。</st> <st c="255">许多开发者认为测试是一项重要的任务，但他们没有时间去做。</st>
    <st c="335">不幸的是，他们最终会因bug和</st> <st c="389">长久的重构而付出代价。</st>
- en: <st c="404">In this chapter, we will do</st> <st c="433">the following:</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="404">在本章中，我们将做以下事情：</st>
- en: <st c="447">Understand the importance</st> <st c="474">of testing</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="447">理解测试的重要性</st>
- en: <st c="484">Learn the testing history</st> <st c="511">of Xcode</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="484">学习Xcode的测试</st> <st c="511">历史</st>
- en: <st c="519">Explore the Swift Testing</st> <st c="546">framework basics</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="519">探索Swift Testing</st> <st c="546">框架的基本知识</st>
- en: <st c="562">Understand how to manage tests with suites, test plans,</st> <st
    c="619">and</st> *<st c="623">Schemes</st>*
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="562">了解如何使用套件、测试计划和</st> <st c="619">方案</st>来管理测试
- en: <st c="630">Learn tips that can help us maintain</st> <st c="668">our tests</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="630">学习可以帮助我们维护</st> <st c="668">测试</st>的技巧
- en: <st c="677">By the end of this chapter, you will be ready to leverage your testing
    skills with</st> <st c="761">Swift Testing.</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="677">在本章结束时，你将准备好利用Swift Testing来提升你的测试技能。</st>
- en: <st c="775">Before we answer the</st> *<st c="797">how</st>* <st c="800">question,
    let’s start with</st> <st c="828">the</st> *<st c="832">why</st>*<st c="835">.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="775">在我们回答</st> *<st c="797">如何</st>* <st c="800">问题之前，让我们先从</st> <st
    c="828">为什么</st> <st c="832">开始。</st>
- en: <st c="836">Technical requirements</st>
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="836">技术要求</st>
- en: <st c="859">You must download Xcode version 16.0 or above for this chapter from
    Apple’s</st> <st c="936">App Store.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="859">你必须从Apple的</st> <st c="936">App Store</st>下载16.0或更高版本的Xcode，用于本章。</st>
- en: <st c="946">You’ll also need to run the latest version of macOS (Ventura or
    above).</st> <st c="1019">Search for</st> `<st c="1030">Xcode</st>` <st c="1035">in
    the App Store, and select and download the latest version.</st> <st c="1098">Launch
    Xcode, and follow any additional installation instructions that your system may
    prompt you with.</st> <st c="1202">Once Xcode has fully launched, you’re ready</st>
    <st c="1246">to go.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="946">你还需要运行最新版本的macOS（Ventura或更高版本）。</st> <st c="1019">在App Store中搜索</st>
    `<st c="1030">Xcode</st>` <st c="1035">，选择并下载最新版本。</st> <st c="1098">启动Xcode，并遵循系统可能提示的任何附加安装说明。</st>
    <st c="1202">一旦Xcode完全启动，你就可以开始了。</st>
- en: <st c="1252">This chapter includes many code examples, some of which can be
    found in the following GitHub</st> <st c="1346">repository:</st> [<st c="1358">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter14</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter14)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1252">本章包含许多代码示例，其中一些可以在以下GitHub</st> <st c="1346">仓库</st>中找到：[<st c="1358">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter14</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter14)
- en: <st c="1441">Understanding the importance of testing</st>
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1441">理解测试的重要性</st>
- en: <st c="1481">For many developers, testing</st> <st c="1510">is an unnecessary
    overhead they must deal with when</st> <st c="1563">writing code.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1481">对于许多开发者来说，测试</st> <st c="1510">是他们编写代码时必须处理的一个不必要的开销。</st>
- en: <st c="1576">This way of thinking is somehow understandable.</st> <st c="1625">We’ve
    finished writing our code, built an application, and seen that everything runs
    as expected.</st> <st c="1723">Instead of moving to our next task, we need to
    change the target, adding a test function just so we can see again that it works
    fine.</st> <st c="1857">Why waste our time</st> <st c="1876">on it?</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1576">这种思维方式在某种程度上是可以理解的。</st> <st c="1625">我们已经完成了代码的编写，构建了一个应用程序，并看到一切按预期运行。</st>
    <st c="1723">我们不需要移动到下一个任务，我们需要更改目标，添加一个测试函数，只是为了再次确认它运行良好。</st> <st c="1857">为什么要在上面浪费时间</st>
    <st c="1876">呢？</st>
- en: <st c="1882">Also, in many cases, writing these test functions takes a lot of
    work.</st> <st c="1954">How can we test a SwiftUI view or a network call?</st>
    <st c="2004">What does it</st> <st c="2017">even mean?</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1882">此外，在许多情况下，编写这些测试函数需要大量的工作。</st> <st c="1954">我们如何测试 SwiftUI 视图或网络调用呢？</st>
    <st c="2004">这甚至意味着什么？</st>
- en: <st c="2027">These all summarize why testing is not a common practice, or at
    least</st> <st c="2098">not enough.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2027">这些总结说明了为什么测试不是一种常见的做法，或者至少</st> <st c="2098">不够。</st>
- en: <st c="2109">The root of this problem is how developers approach testing and
    writing code in general.</st> <st c="2199">Testing is more than checking whether
    our functions run as expected; it’s about code structure, separation of concerns,
    the writing process, working culture, and how we treat our</st> <st c="2378">day-to-day
    jobs.</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2109">这个问题的根源在于开发者如何处理测试和编写代码。</st> <st c="2199">测试不仅仅是检查我们的函数是否按预期运行；它还涉及到代码结构、关注点的分离、编写过程、工作文化和我们对待日常工作的方式。</st>
    <st c="2378">我们的日常工作的处理方式。</st>
- en: <st c="2394">Let’s look at the</st> <st c="2413">following function:</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2394">让我们看看</st> <st c="2413">以下函数：</st>
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="2651">This function checks whether a user can add a task to a specific
    list based on criteria, such as permissions, list type, and status.</st> <st c="2785">Now,
    imagine we need to ensure that this function works properly.</st> <st c="2851">How
    can we do that?</st> <st c="2871">Do we need to run our app in different states
    to see</st> <st c="2924">the results?</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2651">这个函数检查用户是否可以根据标准，如权限、列表类型和状态，将任务添加到特定的列表中。</st> <st c="2785">现在，假设我们需要确保这个函数能够正常工作。</st>
    <st c="2851">我们如何做到这一点呢？</st> <st c="2871">我们需要在不同的状态下运行我们的应用程序来查看</st> <st c="2924">结果吗？</st>
- en: <st c="2936">We all know that ensuring our code runs correctly is part of our
    development process.</st> <st c="3023">This is a classic example of how writing
    test cases and running an app in different states can ease our development process.</st>
    <st c="3148">We understand why testing is so important when adding future tasks</st>
    <st c="3214">such as refactoring and</st> <st c="3239">bug fixes.</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2936">我们都知道，确保我们的代码能够正确运行是我们开发过程的一部分。</st> <st c="3023">这是一个经典的例子，说明了编写测试用例和在应用程序的不同状态下运行可以简化我们的开发过程。</st>
    <st c="3148">当我们添加未来的任务时，我们理解测试为什么如此重要，比如</st> <st c="3214">重构和</st> <st c="3239">错误修复。</st>
- en: <st c="3249">Before we delve into Swift Testing, let’s understand the testing
    history in</st> <st c="3326">Apple platforms.</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3249">在我们深入研究 Swift 测试之前，让我们了解 Apple 平台上的测试历史。</st>
- en: <st c="3342">Learning the testing history in Apple platforms</st>
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="3342">学习 Apple 平台上的测试历史</st>
- en: <st c="3390">As Apple development tools</st> <st c="3417">evolved over the years,
    the testing tools</st> <st c="3459">have</st> <st c="3465">also developed.</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3390">随着 Apple 开发工具</st> <st c="3417">多年的发展，测试工具</st> <st c="3459">也得到了</st>
    <st c="3465">发展。</st>
- en: <st c="3480">The first dedicated testing framework</st> <st c="3518">for Apple
    platforms was</st> **<st c="3543">SenTestingKit</st>**<st c="3556">, based on
    the OCUnit open</st> <st c="3583">source framework.</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3480">第一个为 Apple 平台定制的测试框架</st> <st c="3518">是</st> **<st c="3543">SenTestingKit</st>**<st
    c="3556">，基于 OCUnit 开源框架。</st>
- en: <st c="3600">SenTestingKit was introduced in 2005 and integrated into Xcode,
    providing basic functionality for writing and running</st> <st c="3719">Objective-C
    code.</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3600">SenTestingKit 于 2005 年推出，并集成到 Xcode 中，为编写和运行</st> <st c="3719">Objective-C
    代码</st>提供了基本功能。
- en: <st c="3736">In 2013, Apple introduced</st> **<st c="3763">XCTest</st>**<st
    c="3769">, which takes a more modern</st> <st c="3796">approach to testing, with
    better Xcode integration and support for Objective-C</st> <st c="3876">and Swift.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3736">2013 年，Apple 引入了</st> **<st c="3763">XCTest</st>**<st c="3769">，它采用了更现代的测试方法，具有更好的
    Xcode 集成以及对 Objective-C</st> <st c="3876">和 Swift</st>的支持。
- en: <st c="3886">Let’s take the code example in the</st> *<st c="3922">Understanding
    the importance of testing</st>* <st c="3961">section and see an example of an</st>
    <st c="3995">XCTest test:</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3886">让我们看看</st> *<st c="3922">理解测试的重要性</st>* <st c="3961">部分中的代码示例，并看看一个</st>
    <st c="3995">XCTest 测试</st>的例子：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="4345">In this user example, we see a simple</st> <st c="4383">test function
    that tests whether a user can add a task to a</st> <st c="4444">locked list.</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4345">在这个用户示例中，我们看到一个简单的</st> <st c="4383">测试函数，该函数测试用户是否可以将任务添加到受保护的列表中。</st>
- en: <st c="4456">There are a few things</st> <st c="4480">worth noting:</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4456">有几件事情</st> <st c="4480">值得注意：</st>
- en: <st c="4493">The test function is part of the</st> `<st c="4527">CanUserAddTaskTests</st>`
    <st c="4546">class, inherited from the</st> `<st c="4573">XCTestCase</st>` <st
    c="4583">superclass.</st>
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4493">测试函数是</st> `<st c="4527">CanUserAddTaskTests</st>` <st c="4546">类的一部分，继承自</st>
    `<st c="4573">XCTestCase</st>` <st c="4583">超类。</st>
- en: <st c="4595">The test function name starts with the</st> `<st c="4635">test</st>`
    <st c="4639">phrase.</st> <st c="4648">The</st> `<st c="4652">test</st>` <st c="4656">phrase
    indicates the XCTest framework, which is a</st> <st c="4707">testing function.</st>
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4595">测试函数名称以</st> `<st c="4635">test</st>` <st c="4639">短语开头。</st> <st
    c="4648">该</st> `<st c="4652">test</st>` <st c="4656">短语表示 XCTest 框架，这是一个</st>
    <st c="4707">测试函数。</st>
- en: <st c="4724">The test validation expression is done by a specific function (</st>`<st
    c="4788">XCTAssertFalse</st>`<st c="4803">) that checks whether a particular expression
    is</st> `<st c="4853">false</st>`<st c="4858">. We have a list of functions for</st>
    <st c="4892">various conditions.</st>
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4724">测试验证表达式是通过一个特定的函数（</st>`<st c="4788">XCTAssertFalse</st>`<st c="4803">）完成的，该函数检查特定的表达式是否</st>
    `<st c="4853">为假</st>`<st c="4858">。我们有一系列用于</st> <st c="4892">各种条件的函数。</st>
- en: <st c="4911">While these are all part of how we write tests</st> <st c="4958">in
    Xcode, they are not aligned with the modern Swift/SwiftUI approach – working with
    structs, macros, and more simple and generic Swift functions.</st> <st c="5106">That’s
    where Swift Testing comes into</st> <st c="5144">the picture.</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4911">虽然这些都是我们在 Xcode 中编写测试的一部分，但它们与现代 Swift/SwiftUI 方法不匹配——使用结构体、宏以及更简单和通用的
    Swift 函数。</st> <st c="5106">这就是 Swift 测试出现的原因。</st>
- en: <st c="5156">Let’s explore Swift</st> <st c="5177">Testing together.</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5156">让我们一起来探索 Swift</st> <st c="5177">测试。</st>
- en: <st c="5194">Exploring the Swift Testing basics</st>
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="5194">探索 Swift 测试基础</st>
- en: <st c="5229">We will start our journey</st> <st c="5255">by adding the Swift
    Testing framework to an</st> <st c="5300">existing project.</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5229">我们将从将 Swift 测试框架添加到现有项目</st> <st c="5255">开始我们的旅程。</st>
- en: <st c="5317">Select</st> **<st c="5325">File</st>** <st c="5329">|</st> **<st
    c="5332">New</st>** <st c="5335">|</st> **<st c="5338">Target</st>** <st c="5344">from
    the Xcode’s menu to do that.</st> <st c="5379">Then, in the template chooser,
    locate</st> **<st c="5417">Unit Testing Bundle</st>** <st c="5436">and select
    it (</st>*<st c="5452">Figure 14</st>**<st c="5462">.1</st>*<st c="5464">):</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5317">从 Xcode 的菜单中选择</st> **<st c="5325">文件</st>** <st c="5329">|</st>
    **<st c="5332">新建</st>** <st c="5335">|</st> **<st c="5338">目标</st>** <st c="5344">来完成此操作。</st>
    <st c="5379">然后，在模板选择器中，找到</st> **<st c="5417">单元测试包</st>** <st c="5436">并选择它（</st>*<st
    c="5452">图 14</st>**<st c="5462">.1</st>*<st c="5464">）：</st>
- en: '![Figure 14.1: The new target template chooser](img/B21795_14_1.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1：新的目标模板选择器](img/B21795_14_1.jpg)'
- en: '<st c="5636">Figure 14.1: The new target template chooser</st>'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5636">图 14.1：新的目标模板选择器</st>
- en: '*<st c="5680">Figure 14</st>**<st c="5690">.1</st>* <st c="5692">shows the
    template chooser window in Xcode.</st> <st c="5737">When performing a search for
    testing,</st> **<st c="5775">Unit Testing Bundle</st>** <st c="5794">is easy to
    locate.</st> <st c="5814">Note that we also have a</st> **<st c="5839">UI Testing
    Bundle</st>** <st c="5856">template.</st> <st c="5867">However, UI testing isn’t
    supported yet in Swift Testing, so we’ll focus now on</st> <st c="5947">unit testing.</st>'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="5680">图 14</st>**<st c="5690">.1</st>* <st c="5692">显示了 Xcode 中的模板选择器窗口。</st>
    <st c="5737">在执行测试搜索时，**<st c="5775">单元测试包</st>** <st c="5794">很容易找到。</st> <st
    c="5814">请注意，我们还有一个</st> **<st c="5839">UI 测试包</st>** <st c="5856">模板。</st> <st
    c="5867">然而，在 Swift 测试中目前还不支持 UI 测试，所以现在我们将专注于</st> <st c="5947">单元测试。</st>'
- en: <st c="5960">How can we perform UI testing?</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5960">我们如何进行 UI 测试？</st>
- en: <st c="5991">UI testing, also known</st> <st c="6014">as end-to-end testing,
    is a different</st> <st c="6052">topic in app testing.</st> <st c="6075">It is
    also what we call “black-box” testing, meaning that the test function doesn’t
    know the internal code, only the user interface components.</st> <st c="6219">The
    basic way to conduct a UI test is to use XCTest, Apple’s previous testing framework.</st>
    <st c="6308">However, there are services that provide simpler or multi-platform
    ways of running UI</st> <st c="6394">tests remotely.</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5991">UI 测试，也称为端到端测试，是应用测试中的一个不同</st> <st c="6014">主题。</st> <st c="6052">它也被我们称为“黑盒”测试，意味着测试函数不知道内部代码，只知道用户界面组件。</st>
    <st c="6075">进行 UI 测试的基本方法是使用 XCTest，苹果之前使用的测试框架。</st> <st c="6219">然而，有一些服务提供更简单或跨平台的远程运行
    UI</st> <st c="6394">测试的方法。</st>
- en: <st c="6409">Once you select the</st> **<st c="6430">Unit Testing Bundle</st>**
    <st c="6449">template, hit</st> **<st c="6464">Next</st>**<st c="6468">. Now,
    we’ll need to fill in some details about our new test target (</st>*<st c="6537">Figure
    14</st>**<st c="6547">.2</st>*<st c="6549">):</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6409">一旦你选择了</st> **<st c="6430">单元测试包</st>** <st c="6449">模板，点击</st>
    **<st c="6464">下一步</st>**<st c="6468">。现在，我们需要填写一些关于我们新测试目标（</st>*<st c="6537">图14</st>**<st
    c="6547">.2</st>*<st c="6549">）的详细信息：</st>
- en: '![Figure 14.2: Choosing options for our new test target](img/B21795_14_2.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图14.2：为我们的新测试目标选择选项](img/B21795_14_2.jpg)'
- en: '<st c="6806">Figure 14.2: Choosing options for our new test target</st>'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6806">图14.2：为我们的新测试目标选择选项</st>
- en: <st c="6859">In</st> *<st c="6863">Figure 14</st>**<st c="6872">.2</st>*<st
    c="6874">, we can fill in the target’s name, team, and bundle identifier.</st>
    <st c="6939">We can also choose between the old XCTest and the new Swift Testing
    frameworks.</st> <st c="7019">In this case, we’ll select</st> **<st c="7046">Swift
    Testing</st>**<st c="7059">.</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6859">在</st> *<st c="6863">图14</st>**<st c="6872">.2</st>*<st c="6874">中，我们可以填写目标的名字、团队和包标识符。</st>
    <st c="6939">我们还可以在旧的XCTest和新Swift Testing框架之间进行选择。</st> <st c="7019">在这种情况下，我们将选择</st>
    **<st c="7046">Swift Testing</st>**<st c="7059">。</st>
- en: <st c="7060">Hit</st> **<st c="7065">Save</st>**<st c="7069">, and congratulations
    – you have</st> <st c="7101">a new</st> <st c="7108">testing target!</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7060">点击</st> **<st c="7065">保存</st>**<st c="7069">，恭喜你——你有一个新的</st>
    <st c="7101">测试目标</st> <st c="7108">了！</st>
- en: <st c="7123">Let’s write our</st> <st c="7140">first test!</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7123">让我们编写我们的</st> <st c="7140">第一个测试！</st>
- en: <st c="7151">Adding a basic test</st>
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7151">添加基本测试</st>
- en: <st c="7171">Our template</st> <st c="7185">comes with a basic, empty</st> <st
    c="7211">test function:</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7171">我们的模板</st> <st c="7185">包含一个基本的、空的</st> <st c="7211">测试函数：</st>
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="7395">Even though the code</st> <st c="7416">is very minimal, we can
    see a couple of changes compared</st> <st c="7474">to XCTest:</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7395">尽管代码</st> <st c="7416">非常简洁，但我们可以看到与XCTest相比的一些变化：</st>
- en: '`<st c="7545">Testing</st>`<st c="7552">, and we should import it into every
    file we want</st> <st c="7602">to test.</st>'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="7545">Testing</st>`<st c="7552">，并且我们应该将其导入到我们想要测试的每个文件中。</st> <st
    c="7602">要测试的每个文件中。</st>'
- en: '`<st c="7698">XCTestCase</st>`<st c="7708">, we work with structs in Swift
    Testing.</st> **<st c="7749">Structs</st>** <st c="7756">are not only lighter</st>
    <st c="7777">and easier to use but also more helpful when we try to run our tests
    in parallel.</st> <st c="7860">Remember that structs are value types, meaning
    that each time we pass a struct, we get a copy of the data.</st> <st c="7967">This
    helps when trying to check states</st> <st c="8006">when testing.</st>'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="7698">XCTestCase</st>`<st c="7708">，我们在Swift Testing中使用结构体。</st> **<st
    c="7749">结构体</st>** <st c="7756">不仅更轻量级且易于使用，而且在尝试并行运行测试时也更有帮助。</st> <st c="7860">记住，结构体是值类型，这意味着每次我们传递一个结构体时，我们都会得到数据的一个副本。</st>
    <st c="7967">这有助于在测试时检查状态。</st>'
- en: '`<st c="8031">@Test</st>``<st c="8081">@Test</st>` <st c="8086">macro, which
    helps the SwiftData framework manage</st> <st c="8137">its tests.</st>'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="8031">@Test</st>``<st c="8081">@Test</st>` <st c="8086">宏，它帮助SwiftData框架管理</st>
    <st c="8137">其测试。</st>'
- en: '`<st c="8159">#expect</st>``<st c="8197">XCTAssert</st>` <st c="8206">functions,
    we use the</st> `<st c="8229">#expect</st>` <st c="8236">macro, which is helpful
    for any expression we want</st> <st c="8288">to test.</st>'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="8159">#expect</st>``<st c="8197">XCTAssert</st>` <st c="8206">函数，我们使用</st>
    `<st c="8229">#expect</st>` <st c="8236">宏，这对于我们想要测试的任何表达式都很有帮助。</st> <st c="8288">要测试的表达式。</st>'
- en: <st c="8296">We can run our test quickly by tapping the diamond button next
    to the test function</st> <st c="8380">or pressing</st> *<st c="8393">⌘</st>**<st
    c="8394">U</st>*<st c="8395">. If everything works as expected, our test</st>
    <st c="8439">should pass.</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8296">我们可以通过点击测试函数旁边的菱形按钮或按</st> *<st c="8393">⌘</st>**<st c="8394">U</st>*<st
    c="8395">来快速运行我们的测试。如果一切如预期进行，我们的测试应该通过。</st>
- en: <st c="8451">Now, let’s fill our code with some actual tests.</st> <st c="8501">In
    our example, we have a view model that handles a counter.</st> <st c="8562">We
    have</st> `<st c="8570">increment</st>` <st c="8579">and</st> `<st c="8584">decrement</st>`
    <st c="8593">functions and a</st> `<st c="8610">count</st>` <st c="8615">variable:</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8451">现在，让我们用一些实际的测试来填充我们的代码。</st> <st c="8501">在我们的例子中，我们有一个处理计数器的视图模型。</st>
    <st c="8562">我们有</st> `<st c="8570">increment</st>` <st c="8579">和</st> `<st c="8584">decrement</st>`
    <st c="8593">函数以及一个</st> `<st c="8610">count</st>` <st c="8615">变量：</st>
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="8783">Let’s test the</st> `<st c="8799">CounterViewModel</st>` <st c="8815">functionality
    using</st> <st c="8836">Swift Testing.</st>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Swift Testing 测试`CounterViewModel`的功能。
- en: <st c="8850">The first thing we need to do is provide Swift Testing with access
    to our</st> <st c="8925">app target:</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是向 Swift Testing 提供对我们的应用目标的访问权限：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="8963">We add the</st> `<st c="8975">@testable</st>` <st c="8984">attribute
    to the</st> `<st c="9002">import</st>` <st c="9008">command to enable access to</st>
    <st c="9037">internal entities.</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`@testable`属性添加到`import`命令中，以启用对内部实体的访问。
- en: <st c="9055">Now, let’s write our first</st> <st c="9083">test</st> <st c="9087">function:</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写我们的第一个测试函数：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="9306">In our test function, we initialize the view model, call its increment
    function, and verify the results.</st> <st c="9412">The test fails if the expression
    inside the</st> `<st c="9456">#expect</st>` <st c="9463">macro function</st> <st
    c="9479">is</st> `<st c="9482">false</st>`<st c="9487">.</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试函数中，我们初始化视图模型，调用其增加函数，并验证结果。如果`#expect`宏函数内的表达式为`false`，则测试失败。
- en: <st c="9488">These three stages – preparation, execution, and verification –
    are part of any test flow, regardless of whether we use Swift Testing or any other</st>
    <st c="9636">testing framework.</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个阶段——准备、执行和验证——是任何测试流程的一部分，无论我们使用 Swift Testing 还是任何其他测试框架。
- en: <st c="9654">Now, let’s rename our struct (which contains this test)</st> `<st
    c="9711">CounterViewModelTests</st>` <st c="9732">and run</st> <st c="9741">our
    test.</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将包含此测试的结构体（`CounterViewModelTests`）重命名，并运行我们的测试。
- en: <st c="9750">In Xcode, we can open the left pane on its tab (or just press</st>
    *<st c="9813">⌘</st>**<st c="9814">6</st>*<st c="9815">), and then we can see
    our test list (</st>*<st c="9853">Figure 14</st>**<st c="9863">.3</st>*<st c="9865">):</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 中，我们可以通过标签页打开左侧面板（或者直接按**⌘6**），然后我们可以看到我们的测试列表（**图 14.3**）：
- en: '![Figure 14.3: The tests listed in Xcode](img/B21795_14_3.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![**图 14.3**：Xcode 中列出的测试](img/B21795_14_3.jpg)'
- en: '<st c="10513">Figure 14.3: The tests listed in Xcode</st>'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 14.3**：Xcode 中列出的测试'
- en: <st c="10551">In</st> *<st c="10555">Figure 14</st>**<st c="10564">.3</st>*<st
    c="10566">, we can see the structure of our tests on the testing pane, which is
    reflected in the way we create our struct and</st> <st c="10682">tes</st><st c="10685">t
    functions.</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在**图 14.3**中，我们可以看到测试面板上我们的测试结构，这反映在我们创建结构体和测试函数的方式上。
- en: <st c="10698">At the beginning of this chapter, we discussed the differences
    between Swift Testing and Xcode by examining a simple code example.</st> <st c="10830">One
    of these changes was the usage of the</st> `<st c="10872">@</st>``<st c="10873">Test</st>`
    <st c="10877">macro.</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头，我们通过检查一个简单的代码示例来讨论了 Swift Testing 和 Xcode 之间的区别。其中之一的变化是使用`@Test`宏。
- en: <st c="10884">Besides indicating a test</st> <st c="10910">function, the</st>
    `<st c="10925">@Test</st>` <st c="10930">macro has additional features to help
    us configure</st> <st c="10982">our tests.</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 除了指示一个测试函数，`@Test` 宏还有额外的功能帮助我们配置测试。
- en: <st c="10992">For example, let’s use the</st> `<st c="11020">@Test</st>` <st
    c="11025">macro to provide a name to our</st> <st c="11057">test function.</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们使用`@Test`宏为我们的测试函数提供一个名称。
- en: <st c="11071">Providing names to our test functions</st>
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为我们的测试函数提供名称
- en: <st c="11109">Providing expressive and meaningful</st> <st c="11145">names to
    test functions</st> <st c="11170">is crucial and can be valuable when we have
    hundreds of tests in</st> <st c="11235">our project.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为测试函数提供有表达力和意义的名称至关重要，并且当我们在项目中拥有数百个测试时，这可能会很有价值。
- en: <st c="11247">To do this in XCTest, we need to rename the test function to something</st>
    <st c="11319">like this:</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XCTest 中，为了做到这一点，我们需要将测试函数重命名为类似以下的内容：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="11395">The function name describes the test correctly, but it feels cumbersome
    and awkward, especially when we have hundreds of</st> <st c="11517">test functions.</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11395">函数名称正确地描述了测试，但感觉笨拙且不自然，尤其是当我们有成百上千的</st> <st c="11517">测试函数时。</st>
- en: <st c="11532">With the</st> `<st c="11542">@Test</st>` <st c="11547">Swift macro,
    we can provide a readable name for</st> <st c="11596">each test:</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11532">使用</st> `<st c="11542">@Test</st>` <st c="11547">Swift 宏，我们可以为每个测试提供一个可读的名称：</st>
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="11699">Adding the test description to the</st> `<st c="11735">@Test</st>`
    <st c="11740">Swift macro makes it much more readable, and it also integrates
    nicely with Xcode (</st>*<st c="11824">Figure 14</st>**<st c="11834">.4</st>*<st
    c="11836">):</st>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11699">将测试描述添加到</st> `<st c="11735">@Test</st>` <st c="11740">Swift 宏中使其更易于阅读，并且它还很好地与
    Xcode 集成（</st>*<st c="11824">图 14</st>**<st c="11834">.4</st>*<st c="11836">）：</st>
- en: '![Figure 14.4: The test pane in Xcode, with a custom name](img/B21795_14_4.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.4：Xcode 中的测试面板，带有自定义名称](img/B21795_14_4.jpg)'
- en: '<st c="11983">Figure 14.4: The test pane in Xcode, with a custom name</st>'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11983">图 14.4：Xcode 中的测试面板，带有自定义名称</st>
- en: '*<st c="12038">Figure 14</st>**<st c="12048">.4</st>* <st c="12050">shows the
    same test function as before, now with a readable and</st> <st c="12115">meaningful
    name.</st>'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="12038">图 14</st>**<st c="12048">.4</st>* <st c="12050">显示了之前相同的测试函数，现在有一个可读的并且</st>
    <st c="12115">有意义的名称。</st>'
- en: <st c="12131">The</st> `<st c="12136">@Test</st>` <st c="12141">Swift macro
    provides much more than just naming our functions.</st> <st c="12205">We can also
    use it to disable and enable tests.</st> <st c="12253">Let’s see how to</st> <st
    c="12270">do that.</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12131">The</st> `<st c="12136">@Test</st>` <st c="12141">Swift 宏不仅提供了为我们的函数命名。</st>
    <st c="12205">我们还可以用它来禁用和启用测试。</st> <st c="12253">让我们看看如何</st> <st c="12270">做到这一点。</st>
- en: <st c="12278">Enabling and disabling tests</st>
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="12278">启用和禁用测试</st>
- en: <st c="12307">Sometimes, a test can become</st> <st c="12336">irrelevant, and
    we want to remove it from our test list temporarily.</st> <st c="12406">We can
    delete it or comment on it.</st> <st c="12441">However, these solutions may need
    to be more comfortable and practical in the long run.</st> <st c="12529">So, let’s
    use the</st> `<st c="12547">@Test</st>` <st c="12552">macro to make that</st>
    <st c="12572">more elegant.</st>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12307">有时，一个测试可能变得</st> <st c="12336">无关紧要，我们希望暂时将其从测试列表中删除。</st> <st
    c="12406">我们可以删除它或对其注释。</st> <st c="12441">然而，这些解决方案可能需要更舒适和实用的长期解决方案。</st> <st
    c="12529">因此，让我们使用</st> `<st c="12547">@Test</st>` <st c="12552">宏来使其更加优雅。</st>
- en: <st c="12585">In Swift Testing, all tests are enabled by default.</st> <st c="12638">To
    disable a specific test, we can use the</st> `<st c="12681">disabled()</st>` <st
    c="12691">function:</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12585">在 Swift 测试中，所有测试默认启用。</st> <st c="12638">要禁用特定测试，我们可以使用</st> `<st
    c="12681">disabled()</st>` <st c="12691">函数：</st>
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="12808">We can see that the</st> `<st c="12829">disabled()</st>` <st c="12839">function
    is now one of the</st> `<st c="12867">@Test</st>` <st c="12872">parameters.</st>
    <st c="12885">In this case, the test function won’t run, and we can also see that
    the function is now disabled in the test pane (</st>*<st c="13000">Figure 14</st>**<st
    c="13010">.5</st>*<st c="13012">):</st>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12808">我们可以看到</st> `<st c="12829">disabled()</st>` <st c="12839">函数现在是</st>
    `<st c="12867">@Test</st>` <st c="12872">参数之一。</st> <st c="12885">在这种情况下，测试函数将不会运行，我们还可以看到该函数现在在测试面板中已禁用（</st>*<st
    c="13000">图 14</st>**<st c="13010">.5</st>*<st c="13012">）：</st>
- en: '![Figure 14.5: A disabled test in the test pane](img/B21795_14_5.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.5：测试面板中的禁用测试](img/B21795_14_5.jpg)'
- en: '<st c="13159">Figure 14.5: A disabled test in the test pane</st>'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13159">图 14.5：测试面板中的禁用测试</st>
- en: '*<st c="13204">Figure 14</st>**<st c="13214">.5</st>* <st c="13216">shows our
    test function grayed out.</st> <st c="13253">In this case, performing an entire
    test run will skip</st> <st c="13307">that test.</st>'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="13204">图 14</st>**<st c="13214">.5</st>* <st c="13216">显示了我们的测试函数变为灰色。</st>
    <st c="13253">在这种情况下，执行整个测试运行将跳过</st> <st c="13307">该测试。</st>'
- en: <st c="13317">However, there are cases where we need our test function to run
    only under specific conditions, such as when a user is logged in or in one particular
    A/B</st> <st c="13472">test condition.</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13317">然而，有些情况下我们需要我们的测试函数仅在特定条件下运行，例如当用户登录或处于特定的 A/B</st> <st c="13472">测试条件下。</st>
- en: <st c="13487">In this case, we will implement the condition within the test
    function as a guard statement, which makes the test function succeed.</st> <st
    c="13620">But that doesn’t sound like a good solution – having a test function
    succeed when it’s</st> <st c="13707">not running.</st>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13487">在这种情况下，我们将在测试函数中实现条件作为保护语句，从而使测试函数成功。</st> <st c="13620">但这听起来不是一个好办法——当测试函数没有运行时，它成功。</st>
- en: <st c="13719">Fortunately, enabling a test function based on specific criteria
    is a feature Swift Testing supports.</st> <st c="13822">All we need to do is add
    the enabled function within the</st> `<st c="13879">@Test</st>` <st c="13884">macro
    head, including a</st> <st c="13909">Boolean expression:</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13719">幸运的是，基于特定标准的测试函数启用是 Swift 测试支持的功能。</st> <st c="13822">我们只需要在 `<st
    c="13879">@Test</st>` <st c="13884">宏头中添加 enabled 函数，包括一个</st> <st c="13909">布尔表达式：</st>
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: extension Tag {
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: extension Tag {
- en: '@Tag static let critical: Self'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@Tag static let critical: Self'
- en: '}'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '@Test("Test the reset function", <st c="16511">.tags(.critical))</st> func
    testResetFunction() {'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test("测试重置函数", <st c="16511">.tags(.critical))</st> func testResetFunction()
    {'
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: .tags(.critical, .calculations, .performance))
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: .tags(.critical, .calculations, .performance))
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: struct UnitConverter {
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: struct UnitConverter {
- en: 'static func metersToYards(_ meters: Double) -> Double {'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'static func metersToYards(_ meters: Double) -> Double {'
- en: return meters * 1.09361
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return meters * 1.09361
- en: '}'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: struct UnitConverterTests {
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: struct UnitConverterTests {
- en: '@Test func testConvertingMetersToYards_1meter() {'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@Test func testConvertingMetersToYards_1meter() {'
- en: '#expect(UnitConverter.metersToYards(1.0) =='
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#expect(UnitConverter.metersToYards(1.0) =='
- en: 1.09361)
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.09361)
- en: '}'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '@Test func testConvertingMetersToYards_3_5meter() {'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@Test func testConvertingMetersToYards_3_5meter() {'
- en: '#expect(UnitConverter.metersToYards(3.5) =='
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#expect(UnitConverter.metersToYards(3.5) =='
- en: 3.827635)
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 3.827635)
- en: '}'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '@Test func testConvertingMetersToYards () {'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test func testConvertingMetersToYards () {'
- en: '#expect(UnitConverter.metersToYards(1.0) == 1.09361)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#expect(UnitConverter.metersToYards(1.0) == 1.09361)'
- en: '#expect(UnitConverter.metersToYards(3.5) == 3.827635)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#expect(UnitConverter.metersToYards(3.5) == 3.827635)'
- en: '}'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '@Test(<st c="20621">arguments</st>: [(1.0, 1.09361), (3.5, 3.827635)])'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test(参数：<st c="20621">arguments</st>: [(1.0, 1.09361), (3.5, 3.827635)])'
- en: 'func testConvertingMetersToYards(data: <st c="20708">(Double,</st>'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'func testConvertingMetersToYards(data: <st c="20708">(Double,</st>'
- en: <st c="20716">Double)</st>) {
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20716">Double)</st>) {
- en: '#expect(UnitConverter.metersToYards<st c="20764">(data.0) ==</st>'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#expect(UnitConverter.metersToYards<st c="20764">(data.0) ==</st>'
- en: <st c="20776">data.1)</st> }
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20776">data.1)</st> }
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'let convertingTests: [(Double, Double)] = [(1.0, 1.09361),'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'let convertingTests: [(Double, Double)] = [(1.0, 1.09361),'
- en: (3.5, 3.827635)]
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (3.5, 3.827635)]
- en: struct UnitConverterTests {
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: struct UnitConverterTests {
- en: '@Test(arguments: convertingTests)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@Test(arguments: convertingTests)'
- en: 'func testConvertingMetersToYards(data: (Double,'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'func testConvertingMetersToYards(data: (Double,'
- en: Double)) {
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Double)) {
- en: '#expect(UnitConverter.metersToYards(data.0) =='
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#expect(UnitConverter.metersToYards(data.0) =='
- en: data.1)
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: data.1)
- en: '}'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: <st c="25905">struct UnitConverterTests</st> {
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25905">struct UnitConverterTests</st> {
- en: '@Test func testConvertingMetersToYards_1meter() {'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@Test func testConvertingMetersToYards_1meter() {'
- en: '#expect(UnitConverter.metersToYards(1.0) =='
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#expect(UnitConverter.metersToYards(1.0) =='
- en: 1.09361)
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.09361)
- en: '}'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: <st c="26458">@Suite("Unit converter tests")</st> struct UnitConverterTests
    {
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26458">@Suite("单位转换器测试")</st> struct UnitConverterTests {
- en: '@Test func testConvertingMetersToYards_1meter() {'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@Test func testConvertingMetersToYards_1meter() {'
- en: '#expect(UnitConverter.metersToYards(1.0) =='
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#expect(UnitConverter.metersToYards(1.0) =='
- en: 1.09361}
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.09361}
- en: '}'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '@Suite("Unit converter tests", .<st c="27352">tags(.critical)</st>)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '@Suite("单位转换器测试", .<st c="27352">tags(.critical)</st>)'
- en: struct UnitConverterTests {
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: struct UnitConverterTests {
- en: '}'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '@Suite("Unit converter tests", .<st c="27703">disabled()</st>)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '@Suite("单位转换器测试", .<st c="27703">disabled()</st>)'
- en: struct UnitConverterTests {
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: struct UnitConverterTests {
- en: '}'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: <st c="27970">@Suite("Unit converter tests")</st> struct UnitConverterTests
    { <st c="28030">@Suite("From meters to yards")</st> struct FromMetersToYardsTests
    {
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27970">@Suite("单位转换器测试")</st> struct UnitConverterTests { <st c="28030">@Suite("从米到码")</st>
    struct FromMetersToYardsTests {
- en: // our test functions
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 我们的测试函数
- en: '}'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE22]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: class NumberFilter {
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: class NumberFilter {
- en: 'var numbers: [Int] = []'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var numbers: [Int] = []'
- en: 'var filteredNumbers: [Int] = [] <st c="41914">func filterNumbers(predicate:
    (Int) -> Bool) {</st> self.filteredNumbers ='
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var filteredNumbers: [Int] = [] <st c="41914">func filterNumbers(predicate:
    (Int) -> Bool) {</st> self.filteredNumbers ='
- en: self.numbers.filter(predicate)
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.numbers.filter(predicate)
- en: '}'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'func filterNumbers(_ numbers: [Int], predicate: (Int) -> Bool) -> [Int] {'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'func filterNumbers(_ numbers: [Int], predicate: (Int) -> Bool) -> [Int] {'
- en: return numbers.filter(predicate)
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return numbers.filter(predicate)
- en: '}'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE24]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'func processAndSaveData(_ input: String) -> Bool {'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'func processAndSaveData(_ input: String) -> Bool {'
- en: // Data processing
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: // 数据处理
- en: let processedData = // <perform some data manipulation
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: let processedData = // <执行一些数据操作
- en: code>
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: code>
- en: // Data saving
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: // 数据保存
- en: return databaseService.saveData(processedData)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: return databaseService.saveData(processedData)
- en: '}'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE25]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'func processAndSaveData(_ input: String) -> Bool {'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 'func processAndSaveData(_ input: String) -> Bool {'
- en: // Data processing
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 数据处理
- en: let processedData = processData(input)
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let processedData = processData(input)
- en: // Data saving
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 数据保存
- en: return databaseService.saveData(processedData)
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return databaseService.saveData(processedData)
- en: '} <st c="44306">private func processData(_ input: String) -> String {</st>'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '} <st c="44306">private func processData(_ input: String) -> String {</st>'
- en: <st c="44359">return input.reversed()</st> }
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44359">return input.reversed()</st> }
- en: '[PRE26]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: class UserViewModel {
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: class UserViewModel {
- en: 'private let networkService<st c="44933">: NetworkServiceProtocol</st> var user:
    User? init(networkService<st c="44994">: NetworkServiceProtocol)</st> {'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'private let networkService<st c="44933">: NetworkServiceProtocol</st> var user:
    User? init(networkService<st c="44994">: NetworkServiceProtocol)</st> {'
- en: self.networkService = networkService
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.networkService = networkService
- en: '}'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: 'func fetchUserDetails(for userId: String, completion:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'func fetchUserDetails(for userId: String, completion:'
- en: '@escaping () -> Void) {'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@escaping () -> Void) {'
- en: 'networkService.fetchUserDetails(for: userId) {'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'networkService.fetchUserDetails(for: userId) {'
- en: '[weak self] user in'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[weak self] user in'
- en: self?.user = user
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self?.user = user
- en: completion()
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: completion()
- en: '}'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE27]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'class MockNetworkService: NetworkServiceProtocol {'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 'class MockNetworkService: NetworkServiceProtocol {'
- en: 'var userToReturn: User? func fetchUserDetails(for userId: String, completion:'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var userToReturn: User? func fetchUserDetails(for userId: String, completion:'
- en: '@escaping (User?) -> Void) {'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@escaping (User?) -> Void) {'
- en: completion(userToReturn)
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: completion(userToReturn)
- en: '}'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE28]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
