- en: <st c="0">14</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3">Improving the App Quality with Swift Testing</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="48">Why is testing part of a coding book?</st> <st c="87">Isn’t testing
    part of the</st> **<st c="113">Quality Assurance</st>** <st c="130">(</st>**<st
    c="132">QA</st>**<st c="134">)</st> <st c="137">team’s remit?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="150">You will soon discover that testing is part of our development cycle
    and our culture as iOS developers.</st> <st c="255">Many developers see testing
    as an essential task that they don’t have time for.</st> <st c="335">Unfortunately,
    they pay the price later with bugs and</st> <st c="389">long refactors.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="404">In this chapter, we will do</st> <st c="433">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="447">Understand the importance</st> <st c="474">of testing</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="484">Learn the testing history</st> <st c="511">of Xcode</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="519">Explore the Swift Testing</st> <st c="546">framework basics</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="562">Understand how to manage tests with suites, test plans,</st> <st
    c="619">and</st> *<st c="623">Schemes</st>*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="630">Learn tips that can help us maintain</st> <st c="668">our tests</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="677">By the end of this chapter, you will be ready to leverage your testing
    skills with</st> <st c="761">Swift Testing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="775">Before we answer the</st> *<st c="797">how</st>* <st c="800">question,
    let’s start with</st> <st c="828">the</st> *<st c="832">why</st>*<st c="835">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="836">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="859">You must download Xcode version 16.0 or above for this chapter from
    Apple’s</st> <st c="936">App Store.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="946">You’ll also need to run the latest version of macOS (Ventura or
    above).</st> <st c="1019">Search for</st> `<st c="1030">Xcode</st>` <st c="1035">in
    the App Store, and select and download the latest version.</st> <st c="1098">Launch
    Xcode, and follow any additional installation instructions that your system may
    prompt you with.</st> <st c="1202">Once Xcode has fully launched, you’re ready</st>
    <st c="1246">to go.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1252">This chapter includes many code examples, some of which can be
    found in the following GitHub</st> <st c="1346">repository:</st> [<st c="1358">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter14</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter14)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1441">Understanding the importance of testing</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1481">For many developers, testing</st> <st c="1510">is an unnecessary
    overhead they must deal with when</st> <st c="1563">writing code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1576">This way of thinking is somehow understandable.</st> <st c="1625">We’ve
    finished writing our code, built an application, and seen that everything runs
    as expected.</st> <st c="1723">Instead of moving to our next task, we need to
    change the target, adding a test function just so we can see again that it works
    fine.</st> <st c="1857">Why waste our time</st> <st c="1876">on it?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1882">Also, in many cases, writing these test functions takes a lot of
    work.</st> <st c="1954">How can we test a SwiftUI view or a network call?</st>
    <st c="2004">What does it</st> <st c="2017">even mean?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2027">These all summarize why testing is not a common practice, or at
    least</st> <st c="2098">not enough.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2109">The root of this problem is how developers approach testing and
    writing code in general.</st> <st c="2199">Testing is more than checking whether
    our functions run as expected; it’s about code structure, separation of concerns,
    the writing process, working culture, and how we treat our</st> <st c="2378">day-to-day
    jobs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2394">Let’s look at the</st> <st c="2413">following function:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="2651">This function checks whether a user can add a task to a specific
    list based on criteria, such as permissions, list type, and status.</st> <st c="2785">Now,
    imagine we need to ensure that this function works properly.</st> <st c="2851">How
    can we do that?</st> <st c="2871">Do we need to run our app in different states
    to see</st> <st c="2924">the results?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2936">We all know that ensuring our code runs correctly is part of our
    development process.</st> <st c="3023">This is a classic example of how writing
    test cases and running an app in different states can ease our development process.</st>
    <st c="3148">We understand why testing is so important when adding future tasks</st>
    <st c="3214">such as refactoring and</st> <st c="3239">bug fixes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3249">Before we delve into Swift Testing, let’s understand the testing
    history in</st> <st c="3326">Apple platforms.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3342">Learning the testing history in Apple platforms</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3390">As Apple development tools</st> <st c="3417">evolved over the years,
    the testing tools</st> <st c="3459">have</st> <st c="3465">also developed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3480">The first dedicated testing framework</st> <st c="3518">for Apple
    platforms was</st> **<st c="3543">SenTestingKit</st>**<st c="3556">, based on
    the OCUnit open</st> <st c="3583">source framework.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3600">SenTestingKit was introduced in 2005 and integrated into Xcode,
    providing basic functionality for writing and running</st> <st c="3719">Objective-C
    code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3736">In 2013, Apple introduced</st> **<st c="3763">XCTest</st>**<st
    c="3769">, which takes a more modern</st> <st c="3796">approach to testing, with
    better Xcode integration and support for Objective-C</st> <st c="3876">and Swift.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3886">Let’s take the code example in the</st> *<st c="3922">Understanding
    the importance of testing</st>* <st c="3961">section and see an example of an</st>
    <st c="3995">XCTest test:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4345">In this user example, we see a simple</st> <st c="4383">test function
    that tests whether a user can add a task to a</st> <st c="4444">locked list.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4456">There are a few things</st> <st c="4480">worth noting:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4493">The test function is part of the</st> `<st c="4527">CanUserAddTaskTests</st>`
    <st c="4546">class, inherited from the</st> `<st c="4573">XCTestCase</st>` <st
    c="4583">superclass.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4595">The test function name starts with the</st> `<st c="4635">test</st>`
    <st c="4639">phrase.</st> <st c="4648">The</st> `<st c="4652">test</st>` <st c="4656">phrase
    indicates the XCTest framework, which is a</st> <st c="4707">testing function.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4724">The test validation expression is done by a specific function (</st>`<st
    c="4788">XCTAssertFalse</st>`<st c="4803">) that checks whether a particular expression
    is</st> `<st c="4853">false</st>`<st c="4858">. We have a list of functions for</st>
    <st c="4892">various conditions.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4911">While these are all part of how we write tests</st> <st c="4958">in
    Xcode, they are not aligned with the modern Swift/SwiftUI approach – working with
    structs, macros, and more simple and generic Swift functions.</st> <st c="5106">That’s
    where Swift Testing comes into</st> <st c="5144">the picture.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5156">Let’s explore Swift</st> <st c="5177">Testing together.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5194">Exploring the Swift Testing basics</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="5229">We will start our journey</st> <st c="5255">by adding the Swift
    Testing framework to an</st> <st c="5300">existing project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5317">Select</st> **<st c="5325">File</st>** <st c="5329">|</st> **<st
    c="5332">New</st>** <st c="5335">|</st> **<st c="5338">Target</st>** <st c="5344">from
    the Xcode’s menu to do that.</st> <st c="5379">Then, in the template chooser,
    locate</st> **<st c="5417">Unit Testing Bundle</st>** <st c="5436">and select
    it (</st>*<st c="5452">Figure 14</st>**<st c="5462">.1</st>*<st c="5464">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1: The new target template chooser](img/B21795_14_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="5636">Figure 14.1: The new target template chooser</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="5680">Figure 14</st>**<st c="5690">.1</st>* <st c="5692">shows the
    template chooser window in Xcode.</st> <st c="5737">When performing a search for
    testing,</st> **<st c="5775">Unit Testing Bundle</st>** <st c="5794">is easy to
    locate.</st> <st c="5814">Note that we also have a</st> **<st c="5839">UI Testing
    Bundle</st>** <st c="5856">template.</st> <st c="5867">However, UI testing isn’t
    supported yet in Swift Testing, so we’ll focus now on</st> <st c="5947">unit testing.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5960">How can we perform UI testing?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5991">UI testing, also known</st> <st c="6014">as end-to-end testing,
    is a different</st> <st c="6052">topic in app testing.</st> <st c="6075">It is
    also what we call “black-box” testing, meaning that the test function doesn’t
    know the internal code, only the user interface components.</st> <st c="6219">The
    basic way to conduct a UI test is to use XCTest, Apple’s previous testing framework.</st>
    <st c="6308">However, there are services that provide simpler or multi-platform
    ways of running UI</st> <st c="6394">tests remotely.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6409">Once you select the</st> **<st c="6430">Unit Testing Bundle</st>**
    <st c="6449">template, hit</st> **<st c="6464">Next</st>**<st c="6468">. Now,
    we’ll need to fill in some details about our new test target (</st>*<st c="6537">Figure
    14</st>**<st c="6547">.2</st>*<st c="6549">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2: Choosing options for our new test target](img/B21795_14_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="6806">Figure 14.2: Choosing options for our new test target</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6859">In</st> *<st c="6863">Figure 14</st>**<st c="6872">.2</st>*<st
    c="6874">, we can fill in the target’s name, team, and bundle identifier.</st>
    <st c="6939">We can also choose between the old XCTest and the new Swift Testing
    frameworks.</st> <st c="7019">In this case, we’ll select</st> **<st c="7046">Swift
    Testing</st>**<st c="7059">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7060">Hit</st> **<st c="7065">Save</st>**<st c="7069">, and congratulations
    – you have</st> <st c="7101">a new</st> <st c="7108">testing target!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7123">Let’s write our</st> <st c="7140">first test!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7151">Adding a basic test</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7171">Our template</st> <st c="7185">comes with a basic, empty</st> <st
    c="7211">test function:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="7395">Even though the code</st> <st c="7416">is very minimal, we can
    see a couple of changes compared</st> <st c="7474">to XCTest:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="7545">Testing</st>`<st c="7552">, and we should import it into every
    file we want</st> <st c="7602">to test.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="7698">XCTestCase</st>`<st c="7708">, we work with structs in Swift
    Testing.</st> **<st c="7749">Structs</st>** <st c="7756">are not only lighter</st>
    <st c="7777">and easier to use but also more helpful when we try to run our tests
    in parallel.</st> <st c="7860">Remember that structs are value types, meaning
    that each time we pass a struct, we get a copy of the data.</st> <st c="7967">This
    helps when trying to check states</st> <st c="8006">when testing.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="8031">@Test</st>``<st c="8081">@Test</st>` <st c="8086">macro, which
    helps the SwiftData framework manage</st> <st c="8137">its tests.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="8159">#expect</st>``<st c="8197">XCTAssert</st>` <st c="8206">functions,
    we use the</st> `<st c="8229">#expect</st>` <st c="8236">macro, which is helpful
    for any expression we want</st> <st c="8288">to test.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8296">We can run our test quickly by tapping the diamond button next
    to the test function</st> <st c="8380">or pressing</st> *<st c="8393">⌘</st>**<st
    c="8394">U</st>*<st c="8395">. If everything works as expected, our test</st>
    <st c="8439">should pass.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8451">Now, let’s fill our code with some actual tests.</st> <st c="8501">In
    our example, we have a view model that handles a counter.</st> <st c="8562">We
    have</st> `<st c="8570">increment</st>` <st c="8579">and</st> `<st c="8584">decrement</st>`
    <st c="8593">functions and a</st> `<st c="8610">count</st>` <st c="8615">variable:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8783">Let’s test the</st> `<st c="8799">CounterViewModel</st>` <st c="8815">functionality
    using</st> <st c="8836">Swift Testing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8850">The first thing we need to do is provide Swift Testing with access
    to our</st> <st c="8925">app target:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8963">We add the</st> `<st c="8975">@testable</st>` <st c="8984">attribute
    to the</st> `<st c="9002">import</st>` <st c="9008">command to enable access to</st>
    <st c="9037">internal entities.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9055">Now, let’s write our first</st> <st c="9083">test</st> <st c="9087">function:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9306">In our test function, we initialize the view model, call its increment
    function, and verify the results.</st> <st c="9412">The test fails if the expression
    inside the</st> `<st c="9456">#expect</st>` <st c="9463">macro function</st> <st
    c="9479">is</st> `<st c="9482">false</st>`<st c="9487">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9488">These three stages – preparation, execution, and verification –
    are part of any test flow, regardless of whether we use Swift Testing or any other</st>
    <st c="9636">testing framework.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9654">Now, let’s rename our struct (which contains this test)</st> `<st
    c="9711">CounterViewModelTests</st>` <st c="9732">and run</st> <st c="9741">our
    test.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9750">In Xcode, we can open the left pane on its tab (or just press</st>
    *<st c="9813">⌘</st>**<st c="9814">6</st>*<st c="9815">), and then we can see
    our test list (</st>*<st c="9853">Figure 14</st>**<st c="9863">.3</st>*<st c="9865">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3: The tests listed in Xcode](img/B21795_14_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="10513">Figure 14.3: The tests listed in Xcode</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10551">In</st> *<st c="10555">Figure 14</st>**<st c="10564">.3</st>*<st
    c="10566">, we can see the structure of our tests on the testing pane, which is
    reflected in the way we create our struct and</st> <st c="10682">tes</st><st c="10685">t
    functions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10698">At the beginning of this chapter, we discussed the differences
    between Swift Testing and Xcode by examining a simple code example.</st> <st c="10830">One
    of these changes was the usage of the</st> `<st c="10872">@</st>``<st c="10873">Test</st>`
    <st c="10877">macro.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10884">Besides indicating a test</st> <st c="10910">function, the</st>
    `<st c="10925">@Test</st>` <st c="10930">macro has additional features to help
    us configure</st> <st c="10982">our tests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10992">For example, let’s use the</st> `<st c="11020">@Test</st>` <st
    c="11025">macro to provide a name to our</st> <st c="11057">test function.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11071">Providing names to our test functions</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="11109">Providing expressive and meaningful</st> <st c="11145">names to
    test functions</st> <st c="11170">is crucial and can be valuable when we have
    hundreds of tests in</st> <st c="11235">our project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11247">To do this in XCTest, we need to rename the test function to something</st>
    <st c="11319">like this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11395">The function name describes the test correctly, but it feels cumbersome
    and awkward, especially when we have hundreds of</st> <st c="11517">test functions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11532">With the</st> `<st c="11542">@Test</st>` <st c="11547">Swift macro,
    we can provide a readable name for</st> <st c="11596">each test:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11699">Adding the test description to the</st> `<st c="11735">@Test</st>`
    <st c="11740">Swift macro makes it much more readable, and it also integrates
    nicely with Xcode (</st>*<st c="11824">Figure 14</st>**<st c="11834">.4</st>*<st
    c="11836">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4: The test pane in Xcode, with a custom name](img/B21795_14_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="11983">Figure 14.4: The test pane in Xcode, with a custom name</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="12038">Figure 14</st>**<st c="12048">.4</st>* <st c="12050">shows the
    same test function as before, now with a readable and</st> <st c="12115">meaningful
    name.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12131">The</st> `<st c="12136">@Test</st>` <st c="12141">Swift macro
    provides much more than just naming our functions.</st> <st c="12205">We can also
    use it to disable and enable tests.</st> <st c="12253">Let’s see how to</st> <st
    c="12270">do that.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12278">Enabling and disabling tests</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="12307">Sometimes, a test can become</st> <st c="12336">irrelevant, and
    we want to remove it from our test list temporarily.</st> <st c="12406">We can
    delete it or comment on it.</st> <st c="12441">However, these solutions may need
    to be more comfortable and practical in the long run.</st> <st c="12529">So, let’s
    use the</st> `<st c="12547">@Test</st>` <st c="12552">macro to make that</st>
    <st c="12572">more elegant.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12585">In Swift Testing, all tests are enabled by default.</st> <st c="12638">To
    disable a specific test, we can use the</st> `<st c="12681">disabled()</st>` <st
    c="12691">function:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="12808">We can see that the</st> `<st c="12829">disabled()</st>` <st c="12839">function
    is now one of the</st> `<st c="12867">@Test</st>` <st c="12872">parameters.</st>
    <st c="12885">In this case, the test function won’t run, and we can also see that
    the function is now disabled in the test pane (</st>*<st c="13000">Figure 14</st>**<st
    c="13010">.5</st>*<st c="13012">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5: A disabled test in the test pane](img/B21795_14_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="13159">Figure 14.5: A disabled test in the test pane</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="13204">Figure 14</st>**<st c="13214">.5</st>* <st c="13216">shows our
    test function grayed out.</st> <st c="13253">In this case, performing an entire
    test run will skip</st> <st c="13307">that test.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13317">However, there are cases where we need our test function to run
    only under specific conditions, such as when a user is logged in or in one particular
    A/B</st> <st c="13472">test condition.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13487">In this case, we will implement the condition within the test
    function as a guard statement, which makes the test function succeed.</st> <st
    c="13620">But that doesn’t sound like a good solution – having a test function
    succeed when it’s</st> <st c="13707">not running.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13719">Fortunately, enabling a test function based on specific criteria
    is a feature Swift Testing supports.</st> <st c="13822">All we need to do is add
    the enabled function within the</st> `<st c="13879">@Test</st>` <st c="13884">macro
    head, including a</st> <st c="13909">Boolean expression:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: extension Tag {
  prefs: []
  type: TYPE_NORMAL
- en: '@Tag static let critical: Self'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '@Test("Test the reset function", <st c="16511">.tags(.critical))</st> func
    testResetFunction() {'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: .tags(.critical, .calculations, .performance))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: struct UnitConverter {
  prefs: []
  type: TYPE_NORMAL
- en: 'static func metersToYards(_ meters: Double) -> Double {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return meters * 1.09361
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: struct UnitConverterTests {
  prefs: []
  type: TYPE_NORMAL
- en: '@Test func testConvertingMetersToYards_1meter() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#expect(UnitConverter.metersToYards(1.0) =='
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 1.09361)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@Test func testConvertingMetersToYards_3_5meter() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#expect(UnitConverter.metersToYards(3.5) =='
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.827635)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '@Test func testConvertingMetersToYards () {'
  prefs: []
  type: TYPE_NORMAL
- en: '#expect(UnitConverter.metersToYards(1.0) == 1.09361)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#expect(UnitConverter.metersToYards(3.5) == 3.827635)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '@Test(<st c="20621">arguments</st>: [(1.0, 1.09361), (3.5, 3.827635)])'
  prefs: []
  type: TYPE_NORMAL
- en: 'func testConvertingMetersToYards(data: <st c="20708">(Double,</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="20716">Double)</st>) {
  prefs: []
  type: TYPE_NORMAL
- en: '#expect(UnitConverter.metersToYards<st c="20764">(data.0) ==</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="20776">data.1)</st> }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'let convertingTests: [(Double, Double)] = [(1.0, 1.09361),'
  prefs: []
  type: TYPE_NORMAL
- en: (3.5, 3.827635)]
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: struct UnitConverterTests {
  prefs: []
  type: TYPE_NORMAL
- en: '@Test(arguments: convertingTests)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func testConvertingMetersToYards(data: (Double,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double)) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#expect(UnitConverter.metersToYards(data.0) =='
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: data.1)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: <st c="25905">struct UnitConverterTests</st> {
  prefs: []
  type: TYPE_NORMAL
- en: '@Test func testConvertingMetersToYards_1meter() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#expect(UnitConverter.metersToYards(1.0) =='
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 1.09361)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: <st c="26458">@Suite("Unit converter tests")</st> struct UnitConverterTests
    {
  prefs: []
  type: TYPE_NORMAL
- en: '@Test func testConvertingMetersToYards_1meter() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#expect(UnitConverter.metersToYards(1.0) =='
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 1.09361}
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '@Suite("Unit converter tests", .<st c="27352">tags(.critical)</st>)'
  prefs: []
  type: TYPE_NORMAL
- en: struct UnitConverterTests {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '@Suite("Unit converter tests", .<st c="27703">disabled()</st>)'
  prefs: []
  type: TYPE_NORMAL
- en: struct UnitConverterTests {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: <st c="27970">@Suite("Unit converter tests")</st> struct UnitConverterTests
    { <st c="28030">@Suite("From meters to yards")</st> struct FromMetersToYardsTests
    {
  prefs: []
  type: TYPE_NORMAL
- en: // our test functions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: class NumberFilter {
  prefs: []
  type: TYPE_NORMAL
- en: 'var numbers: [Int] = []'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var filteredNumbers: [Int] = [] <st c="41914">func filterNumbers(predicate:
    (Int) -> Bool) {</st> self.filteredNumbers ='
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.numbers.filter(predicate)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'func filterNumbers(_ numbers: [Int], predicate: (Int) -> Bool) -> [Int] {'
  prefs: []
  type: TYPE_NORMAL
- en: return numbers.filter(predicate)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'func processAndSaveData(_ input: String) -> Bool {'
  prefs: []
  type: TYPE_NORMAL
- en: // Data processing
  prefs: []
  type: TYPE_NORMAL
- en: let processedData = // <perform some data manipulation
  prefs: []
  type: TYPE_NORMAL
- en: code>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Data saving
  prefs: []
  type: TYPE_NORMAL
- en: return databaseService.saveData(processedData)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'func processAndSaveData(_ input: String) -> Bool {'
  prefs: []
  type: TYPE_NORMAL
- en: // Data processing
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: let processedData = processData(input)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Data saving
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return databaseService.saveData(processedData)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '} <st c="44306">private func processData(_ input: String) -> String {</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44359">return input.reversed()</st> }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: class UserViewModel {
  prefs: []
  type: TYPE_NORMAL
- en: 'private let networkService<st c="44933">: NetworkServiceProtocol</st> var user:
    User? init(networkService<st c="44994">: NetworkServiceProtocol)</st> {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.networkService = networkService
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func fetchUserDetails(for userId: String, completion:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@escaping () -> Void) {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'networkService.fetchUserDetails(for: userId) {'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[weak self] user in'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self?.user = user
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: completion()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'class MockNetworkService: NetworkServiceProtocol {'
  prefs: []
  type: TYPE_NORMAL
- en: 'var userToReturn: User? func fetchUserDetails(for userId: String, completion:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@escaping (User?) -> Void) {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: completion(userToReturn)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
