- en: Chapter 3. Subclasses and Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parse provides you with the quick Plug and Play approach to get started with
    your application development. You can save and fetch data on Parse using `PFObject`,
    and any data field of your object can be accessed using the `objectForKey` method.
    To reduce the complexity along with improving readability and scalability to the
    codebase, you can use subclass for your `PFObject`. This also helps you to mold
    the application architecture in model view controller architecture. In this chapter,
    we will learn how to subclass `PFObject` along with ways of saving your files
    on the Parse Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Subclassing PFObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PFObject can be subclassed to provide the flexibility to the code. Basically
    it helps you to mold the backend code in an object-oriented format to improve
    the readability and application architecture. It also helps to make your code
    re-usable. For example, you can save your data on Parse by following the traditional
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After subclassing, you can transform the previous code into the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By subclassing PFObject to create the `Course object`, you can easily interact
    with business objects. Additionally, by using the properties in the code, it increases
    the readability to your codebase, and, as a result, it simplifies your code architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a subclass of PFObject:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a subclass of `PFObject` to follow the PFSubclassing protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the class method `parseClassName`. This method will return the name
    of the class as `string`, which you would pass to `initWithClassName:`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The implementation file (`.m` file) imports `PFObject + Subclass`. This class
    includes all the methods in PFSubclassing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `ApplicationDelegate` before `userInfo setApplicationId:clientKey:` call
    the `[YourClass registerSubclass]` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code demonstrates the `Course` subclass of `PFObject`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Customizing properties and methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To encapsulate your custom business logic, you can add custom properties and
    methods to your `PFObject` subclass. By using the PFSubclassing approach, you
    can simplify and organize your code in one place instead of having it scattered
    in different classes. PFObject supports dynamic synthesis of the properties. You
    can declare properties as you would normally declare; however, this time you need
    to use `@dynamic` in place of `@synthesis` in your implementation file. Dynamic
    properties tell the compiler that the setter and getter methods are not implemented
    by class, but somewhere else as a superclass. Let''s say you need to add a property
    in your `Course` class. The following code will add the properties to your `Course`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can access the `courseName` and `courseDuration` properties using `course.courseName`
    or `[course courseName]`, whereas if you want to set the data to properties you
    can use `course.courseName = @"MBA"` or `[course setCourseName:@"MBA"]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you have `NSNumber` as a data type, you can implement it in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: While fetching the data you can use `course [object objectForKey:@"isGameOver"]`,
    which will return `NSNumber`, which can be accessed using `boolValue`. Whereas
    in case of an amount, you can access it using the `floatValue` method. The dynamic
    getter methods will automatically convert the `float` or `bool` value, and the
    dynamic setter methods will wrap all the primitive data type methods under `NSNumber`.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing subclasses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create new objects using the `object` class method. This will automatically
    create an auto-released instance of provided types, and handles further subclassing.
    You can use this `objectWithoutDataWithObjectId:` method for creating the reference
    of the current object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The previous line of code will create a reference of your existing Parse object;
    that is `Course` in our case.
  prefs: []
  type: TYPE_NORMAL
- en: Creating queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can create a query for the subclass objects using the `query` class method.
    Parse provides you with the `PFQuery` class, which allows you to fetch and save
    data on the Parse Cloud. PFQuery provides you with lots of methods to set and
    get data from the Parse Cloud. Let''s say you need to create a query for your
    `Course` class, you need to use the following method to create a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The previous code creates a query to fetch your `Course` class data with the
    `courseName` filter. You will get an array of all the courses subscribed by the
    current user. This operation will be executed asynchronously as we are executing
    this on the background thread. PFQuery provides you with variations of methods
    to fetch and save data on the Parse Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Handling files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In applications, sometimes we need to store our files and data in the database
    or backend. The file can be of any type, it can be our image file, video file,
    audio file or data file. Parse provides us with the Plug and Play feature to save
    data and files on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: PFFile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Parse application can support any type of file such as images, video files,
    audio files or any other kind of data file, but their size should be less than
    10 megabytes. PFFile helps you to store your application-related files on the
    Parse Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'For saving the data on the cloud, you need to convert your files into NSData.
    Then you can create a PFFile object from that and pass NSData to the PFFile object
    to save on the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'PFFile provides the `fileWithName: data:` method to save your files on the
    Parse Cloud. You can save any kind of file on Parse such as images, text files,
    and data files. You need to convert all your files to NSData before saving them
    on Parse. In the previous code, we have converted our `Hello world!` string into
    NSData before saving it to the Parse Cloud. The filename should be in NSString
    format, in our case, we have used `brochure.txt` as the filename.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous lines of code, we have used the name of the file as `demo.txt`.
    Remember the following key points:'
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to worry about the filename collision on the cloud, as Parse
    will automatically take care of these things by providing a unique identifier
    for all your files, so you can have multiple files of the same name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's recommended to provide an extension to your data files, as this will help
    Parse to understand your file format and handle the files appropriately. So while
    storing images you should use `.png` or `.jpg` as extensions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now you can save your file to the cloud. All the save methods are available
    to PFFile as well. You can use any method that fits your requirement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully saving your file, you can associate your file with PFObject
    just as you associate other data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous lines of code will associate your `brochure` file with the `Course`
    class. You can fetch the same file from Parse by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To fetch data from the Parse Cloud you can use the `getData:` method and its
    variants. Parse provides you with all the variants of the `getData` method just
    like what we have seen for saving PFObject on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Saving images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save your images on the cloud, you have to convert your images into NSData
    and then you can save that data to the cloud. Let''s say you have an image and
    you have to save it to the cloud, then you should perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the previous lines of code, we started by converting an image file into NSData.
    Then we created a PFFile object with that data as the value for the image key
    named as `picture.png`. Then we called the `save` function on the PFFile object
    to save the file. So now this PFFile object can be used as a value for any other
    Parse object. Next we created an object on the `UserPhoto` class and saved the
    PFFile object as a value for our `imageFile` key. Then finally we have invoked
    the `save` method on the `UserPhoto` parse object.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking progress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Parse helps you to track the progress of your uploads and downloads from your
    PFFile using the following provided methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the following method you can track the progress of the data you are saving
    on the cloud:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the following method you can track the progress while fetching data from
    the cloud:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s take an example to illustrate how to use your application in progress
    tracking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've explored the various ways to save our data to Parse.
    Data can be anything, such as an image file, audio file, video files or simple
    binary data files.
  prefs: []
  type: TYPE_NORMAL
- en: We started by exploring the steps to subclass our PFObject. Then we learned
    about the `PFFile` class, which allows us to save our data to the cloud. We also
    learned about saving our data to the cloud and saving images to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we saw various ways to track the progress of our file.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about Parse analytics and the various ways
    to track your application.
  prefs: []
  type: TYPE_NORMAL
