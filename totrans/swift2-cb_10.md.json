["```swift\n    #include <sqlite3.h>\n    ```", "```swift\n    public class SQLite {\n        public enum Status {\n            case CONNECTED,\n            DISCONNECTED\n        }\n    ```", "```swift\n        private var _connection:COpaquePointer = nil\n        private var _status = SQLite.Status.DISCONNECTED\n    ```", "```swift\n        public var status:SQLite.Status {\n            return _status\n        }\n    ```", "```swift\n        public func connect(filename:String)-> Bool{\n            let documentsPath = (NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as NSString).stringByAppendingPathComponent(filename)\n            let error = sqlite3_open(documentsPath,&self._connection)\n            if error == SQLITE_OK {\n                // Adding a table just in case\n                let statement = \"CREATE TABLE IF NOT EXISTS ips \" +\n                                \"(ipstart text, ipend text, \" +\n                                \"iipstart integer, iipend integer, \" +\n                                \"country text);\" as NSString\n                var errmessage:UnsafeMutablePointer<CChar> = nil\n                if sqlite3_exec(self._connection, statement.UTF8String, nil, nil, &errmessage) == SQLITE_OK {\n                    self._status = .CONNECTED\n                    return true\n                }\n                return false\n            return false\n        }\n    ```", "```swift\n        deinit {\n            switch self._status {\n                case .CONNECTED:\n                    sqlite3_close(self._connection)\n                default:\n                    break;\n            }\n        }\n    }\n    ```", "```swift\n        @IBOutlet var databaseNameTextField: UITextField!\n    ```", "```swift\n        @IBAction func createDatabase(sender: AnyObject) {\n            var database = SQLite()\n            if self.databaseNameTextField.text == \"\" {\n            let alert = UIAlertController(title: \"No database name\", message: \"You must introduce a database name\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n\n            return\n\n    }\n            let dbname = self.databaseNameTextField.text + \".sqlite\"\n            if database.connect(dbname) {\n                UIAlertView(title: nil, message: \"Database was created\", delegate: nil, cancelButtonTitle: \"OK\").show()\n                let alert = UIAlertController(title: nil, message: \"Database was created\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n\n            }else {\n                let alert = UIAlertController(title: nil, message: \"Failed creating the database\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n            }\n\n        }\n    ```", "```swift\n        func exec(statement: String) -> Bool {\n            var errmessage:UnsafeMutablePointer<CChar> = nil\n            return sqlite3_exec(self._connection, (statement as NSString).UTF8String, nil, nil, &errmessage) == SQLITE_OK\n        }\n\n        func query(statement:String) -> [[String]]? {\n            var sqliteStatement:COpaquePointer = nil\n            if sqlite3_prepare_v2(self._connection, (statement as NSString).UTF8String , -1, &sqliteStatement, nil) != SQLITE_OK {\n                return nil\n            }\n            var result = [[String]]()\n            while sqlite3_step(sqliteStatement) == SQLITE_ROW {\n                var row = [String]()\n                for i in 0..<sqlite3_column_count(sqliteStatement) {\n                   row.append(String.fromCString(UnsafePointer<CChar>(sqlite3_column_text(sqliteStatement, i)))!)\n                }\n                result.append(row)\n            }\n            return result\n        }\n    ```", "```swift\n    func csv2array(filename: String) -> [[String]]? {\n        var error: NSErrorPointer = nil\n        var url = NSBundle.mainBundle().URLForResource(filename, withExtension: \"csv\")\n        if let  fileContent = String(contentsOfURL: url!, encoding: NSUTF8StringEncoding, error: error){\n            var records = [[String]] ()\n            fileContent.enumerateLines({ (line, _) -> () in\n                var fields:[String] = line.componentsSeparatedByString(\",\").map({ (field:String) -> String in\n                    return field.stringByTrimmingCharactersInSet(NSCharacterSet(charactersInString: \"\\\"\"))\n                })\n                if isIPv4(fields[0]) {\n                    records.append(fields)\n                }\n            })\n\n            return records\n        }else {\n            return nil\n        }\n    }\n    ```", "```swift\n    func isIPv4(ip:String) -> Bool {\n        var error: NSErrorPointer = nil\n        return try NSRegularExpression(pattern: \"^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$\", options: .CaseInsensitive, error: error)!.matchesInString(ip, options: nil, range:NSMakeRange(0, countElements(ip))).count > 0\n    }\n    ```", "```swift\n        func ip2int(ip:String) -> UInt32 {\n            return CFSwapInt32(inet_addr((ip as NSString).UTF8String))\n        }\n    ```", "```swift\n        @IBOutlet var inputLabel: UILabel!\n        @IBOutlet var createButton: UIButton!\n        @IBOutlet var populateButton: UIButton!\n        @IBOutlet var searchButton: UIButton!\n    ```", "```swift\n     var database = SQLite()\n        @IBAction func createDatabase(sender: AnyObject) {\n\n            if self.databaseNameTextField.text == \"\" {\n    ```", "```swift\n        @IBAction func createDatabase(sender: AnyObject) {\n\n            if self.databaseNameTextField.text == \"\" {\n                let alert = UIAlertController(title: \"No database name\", message: \"You must introduce a database name\", preferredStyle:.Alert)\n                self.presentViewController(alert, animated: true, completion: nil)\n\n                return\n            }\n            let dbname = self.databaseNameTextField.text + \".sqlite\"\n            if database.connect(dbname) {\n                let alert = UIAlertController(title: nil, message: \"Database was created\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n\n                self.createButton.hidden = true\n                self.populateButton.hidden = false\n                self.inputLabel.text = \"\"\n                self.databaseNameTextField.text = \"\"\n                self.databaseNameTextField.hidden = true\n            }else {\n                let alert = UIAlertController(title: nil, message: \"Failed creating database\", preferredStyle:.Alert)\n                self.presentViewController(alert, animated: true, completion: nil)\n            }\n        }\n    ```", "```swift\n        @IBAction func populate(sender: AnyObject) {\n            if let data = csv2array(\"dbip-country-2014-12\"){\n                print(\"total \\(data.count)\")\n                var statements = data.map{ record -> String in\n                    return \"INSERT INTO ips (ipstart, ipend, iipstart, iipend, country) VALUES \" +\n                    \"('\\(record[0])', '\\(record[1])', \\(ip2int(record[0])), \\(ip2int(record[1])),\" +\n                        \"'\\(record[2])' )\"\n                }\n\n                database.exec(\"delete from ips;\")\n\n                for statement in statements {\n                    database.exec(statement)\n                }\n                self.searchButton.hidden = false\n                self.populateButton.hidden = true\n                self.inputLabel.text = \"Enter an IP\"\n                self.databaseNameTextField.text = \"\"\n                self.databaseNameTextField.hidden = false\n            }\n            else {\n                let alert = UIAlertController(title: nil, message: \"Unable to parse the file\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n            }\n        }\n    ```", "```swift\n        @IBAction func search(sender: AnyObject) {\n            let iptext = self.databaseNameTextField.text\n            if !isIPv4(iptext) {\n                UIAlertView(title: \"Error\", message: \"Wrong format\", delegate: nil, cancelButtonTitle: \"OK\").show()\n                return\n            }\n            let ipnumber = ip2int(iptext)\n            let sql = \"SELECT country FROM ips where \\(ipnumber) between iipstart and iipend\"\n            if let result = database.query(sql){\n                if result.count > 0 && result[0].count > 0 {\n                  let alert = UIAlertController(title: \"Found\", message: \" This ip belongs to \\(result[0][0])\", preferredStyle:.Alert)\n                  self.presentViewController(alert, animated: true, completion: nil)\n                }else {\n                  let alert = UIAlertController(title: \"Not found\", message: \"No result was found\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n\n     }\n            }else {\n              let alert = UIAlertController(title: \"Error\", message: \"Failed to execute your query\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n\n    }\n        }\n    ```", "```swift\n        @IBOutlet var textView: UITextView!\n    ```", "```swift\n        @IBAction func printRecords(sender: AnyObject) {\n        }\n    ```", "```swift\n    import SQLite\n    import CoreLocation\n    ```", "```swift\n    typealias activityTuple = (activity: Query, id:Expression<Int>,\n        latitude: Expression<Double?>, longitude:Expression<Double?>,\n        time:Expression<String>, away:Expression<Bool>)\n    ```", "```swift\n    class ViewController: UIViewController, CLLocationManagerDelegate {\n    ```", "```swift\n        var database:Database?\n        var locationManager = CLLocationManager()\n        var lastLocation: CLLocation?\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            if !openDatabase(){\n              let alert = UIAlertController(title: \"Error\", message: \"Cant open the database\", preferredStyle:.Alert)\n              self.presentViewController(alert, animated: true, completion: nil)\n\n              return\n            }\n            if !createStructure() {\n                UIAlertView(title: \"Error\", message: \"Can't create database structure\", delegate: nil, cancelButtonTitle: \"OK\").show()\n                return\n            }\n            setLocationManager()\n            setProximitySensor()\n        }\n    ```", "```swift\n        private func openDatabase() -> Bool{\n            let documentsPath = (NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as NSString).stringByAppendingPathComponent(\"database.sqlite\")\n            database = Database(documentsPath)\n            return database != nil\n        }\n    ```", "```swift\n        private func createStructure() -> Bool {\n            var actVars = self.activityVars()\n            var result = database!.create(table: actVars.activity, ifNotExists: true) { t in\n                // Autoincrement means that we don't have to set this value because it will be automatic.\n                t.column(actVars.id, primaryKey: .Autoincrement)\n                t.column(actVars.latitude)\n                t.column(actVars.longitude)\n                t.column(actVars.time, unique: true)\n                t.column(actVars.away)\n            }\n            return !result.failed\n        }\n    ```", "```swift\n        private func setLocationManager(){\n            locationManager.delegate = self\n            locationManager.distanceFilter = kCLDistanceFilterNone\n            locationManager.desiredAccuracy = kCLLocationAccuracyBest\n\n            if (UIDevice.currentDevice().systemVersion as NSString).floatValue >= 8 && CLLocationManager.authorizationStatus() != CLAuthorizationStatus.AuthorizedAlways {\n                locationManager.requestAlwaysAuthorization()\n            }\n            locationManager.startUpdatingLocation() \n        }\n    ```", "```swift\n        func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!){\n            if locations.count > 0 {\n                lastLocation = locations[0] as? CLLocation\n            }\n        }\n    ```", "```swift\n        private func setProximitySensor(){\n            var device = UIDevice.currentDevice()\n            device.proximityMonitoringEnabled = true\n            if device.proximityMonitoringEnabled {\n                NSNotificationCenter.defaultCenter().addObserver(self, selector: Selector(\"proximity:\"), name: UIDeviceProximityStateDidChangeNotification, object: device)\n            }\n        }\n    ```", "```swift\n        func proximity(notification:NSNotification){\n            var device: AnyObject? = notification.object\n            var latitude:Double?\n            var longitude:Double?\n            if lastLocation != nil {\n                latitude = lastLocation!.coordinate.latitude\n                longitude = lastLocation!.coordinate.longitude\n            }\n            let dateFormatter = NSDateFormatter()\n            dateFormatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\" // superset of OP's format\n            let dateString:String = dateFormatter.stringFromDate(NSDate())\n\n            let actVars = self.activityVars()\n\n            if let id = actVars.activity.insert(actVars.away <- !device!.proximityState!,\n                actVars.time <- dateString, actVars.latitude <- latitude, actVars.longitude <- longitude ) {\n                print(\"Register inserted with id \\(id)\")\n            }\n        }\n    ```", "```swift\n        private func activityVars() -> activityTuple{\n            return (activity:database![\"activity\"], id:Expression<Int>(\"id\"),\n                latitude: Expression<Double?>(\"latitude\"), longitude:Expression<Double?>(\"longitude\"),\n                time:Expression<String>(\"time\"), away:Expression<Bool>(\"away\") )\n        }\n    ```", "```swift\n        @IBAction func printRecords(sender: AnyObject) {\n            self.textView.text = \"\"\n            let actVars = activityVars()\n            for record in actVars.activity {\n\n                textView.text = textView.text +  \"id: \\(record[actVars.id]), time: \\(record[actVars.time]), away: \\(record[actVars.away])\"\n                if record[actVars.latitude] != nil {\n                textView.text = textView.text +  \", latitude: \\(record[actVars.latitude]!), longitude: \\(record[actVars.longitude]!)\"\n                }\n                textView.text = textView.text +  \"\\n\"\n            }\n        }\n    ```", "```swift\n    import CoreData\n    ```", "```swift\n    class ViewController: UIViewController, UITableViewDataSource {\n    ```", "```swift\n        @IBOutlet var tableView: UITableView!\n        var products = [NSManagedObject]()\n    ```", "```swift\n        func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int{\n            return products.count\n        }\n\n        func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n            var cell: UITableViewCell? = tableView.dequeueReusableCellWithIdentifier(\"cell\") as UITableViewCell?\n            if (cell == nil) {\n                cell = UITableViewCell(style: UITableViewCellStyle.Value1, reuseIdentifier: \"cell\")\n            } \n            cell!.textLabel?.text = products[indexPath.row].valueForKey(\"name\") as? String\n            var units = products[indexPath.row].valueForKey(\"units\") as? Int\n            cell!.detailTextLabel?.text = \"\\(units!) units\"   \n            return cell!\n        }\n    ```", "```swift\n        override func viewWillAppear(animated: Bool) {\n            var appDelegate:AppDelegate = UIApplication.sharedApplication().delegate as AppDelegate\n            var moc: NSManagedObjectContext = appDelegate.managedObjectContext!\n            var request = NSFetchRequest(entityName: \"Product\")\n            request.returnsObjectsAsFaults = false\n\n            do {\n              try products  = moc.executeFetchRequest(request) as [NSManagedObject]\n        } catch {\n            let alert = UIAlertController(title: \"Error\", message: \"Error fetching the data.\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n        }\n            self.tableView.reloadData()\n        }\n    ```", "```swift\n        @IBOutlet weak var nameTextField: UITextField!\n        @IBOutlet weak var priceTextField: UITextField!\n        @IBOutlet weak var unitsTextField: UITextField!\n    ```", "```swift\n    import CoreData\n    ```", "```swift\n        @IBAction func save(sender: UIButton) {\n            var appDelegate:AppDelegate = UIApplication.sharedApplication().delegate as AppDelegate\n            var moc: NSManagedObjectContext = appDelegate.managedObjectContext!\n\n            var newProduct = NSEntityDescription.insertNewObjectForEntityForName(\"Product\", inManagedObjectContext: moc) as NSManagedObject\n            newProduct.setValue(self.nameTextField.text, forKey: \"name\")\n                newProduct.setValue( (priceTextField.text as NSString).floatValue, forKey: \"price\")\n            newProduct.setValue(unitsTextField.text.toInt()!, forKey: \"units\")\n            var err:NSError?\n            moc.save(&err)\n            if let error = err {\n                print(error.localizedDescription)\n            }else{\n                print(newProduct)\n            }\n            self.navigationController?.popViewControllerAnimated(true)\n        }\n    ```", "```swift\n    {\n       \"_id\": \"608d7c9174f7caba4ab618d6810004cf\",\n       \"question\": \"What is your favorite computer programming language?\",\n       \"answers\": [\n           {\n               \"answer\": \"Swift\",\n               \"votes\": []\n           },\n           {\n               \"answer\": \"Objective-C\",\n               \"votes\": []\n           },\n           {\n               \"answer\": \"C\",\n               \"votes\": []\n           }\n       ]\n    }\n    ```", "```swift\n    {\n       \"_id\": \"608d7c9174f7caba4ab618d681001467\",\n       \"_rev\": \"3-41c057820d6cbd595e7db2bdf05610fe\",\n       \"question\": \"What is your favorite book?\",\n       \"answers\": [\n           {\n               \"answer\": \"Swift cookbook\",\n               \"votes\": []\n           },\n           {\n               \"answer\": \"Divine Comedy\",\n               \"votes\": []\n           },\n           {\n               \"answer\": \"Oxford dictionary\",\n               \"votes\": []\n           }\n       ]\n    }\n    ```", "```swift\n    {\n       \"_id\": \"_design/voting\",\n       \"updates\": {\n           \"addvote\": \"function(doc, req) { var json = JSON.parse(req.body); doc.answers[parseInt(json.answer)].votes.push(json.uid); return [doc, toJSON(doc)]}\"\n       }\n    }\n    ```", "```swift\n        @IBOutlet var questionLabel: UILabel!\n        @IBOutlet var answer1button: UIButton!\n        @IBOutlet var answer2button: UIButton!\n        @IBOutlet var answer3button: UIButton!\n    ```", "```swift\n        var documentId:String?\n\n        let baseurl = \"http://127.0.0.1:5984/voting/\"\n    ```", "```swift\n        @IBAction func vote(sender: UIButton) {\n        }\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.chooseQuestion()\n        }\n    ```", "```swift\n        private func chooseQuestion(){\n            var url = NSURL(string: baseurl + \"_all_docs\")!\n            var task = NSURLSession.sharedSession().dataTaskWithURL(url, completionHandler: {\n                data, response, error -> Void in\n                if error != nil {\n                    print(error.localizedDescription)\n                }\n          var jsonResult = [:]\n                do {\n                jsonResult = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers) as NSDictionary\n        } catch {\n            let alert = UIAlertController(title: \"Error\", message: \"Error parsing JSON\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n        }\n\n    var invalid = true\n                var docid:String = \"\"\n                while invalid {\n                let rows  = jsonResult.valueForKey(\"rows\") as NSArray\n                srandom(UInt32(time(nil)))\n                var choosenRow:Int = random() % rows.count\n                docid = (rows[choosenRow] as NSDictionary).valueForKey(\"id\") as String\n                    invalid = startsWith(docid, \"_\")\n                }\n                self.getQuestion( docid )\n            })\n            task.resume()\n        }\n    ```", "```swift\n        private func getQuestion(id:String){\n            self.documentId = id\n            var url = NSURL(string: baseurl + id)!\n            var task = NSURLSession.sharedSession().dataTaskWithURL(url, completionHandler: {\n                data, response, error -> Void in\n                if error != nil {\n                    print(error.localizedDescription)\n                }\n          var jsonResult = [:]\n                do {\n           jsonResult = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers) as NSDictionary\n        } catch {\n            let alert = UIAlertController(title: \"Error\", message: \"Error parsing JSON\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n        }\n\n                dispatch_async(dispatch_get_main_queue(), {\n                    self.questionLabel.text = jsonResult.valueForKey(\"question\")\n                    var answers = jsonResult.valueForKey(\"answers\") as [NSDictionary]\n                    self.answer1button.setTitle(answers[0].valueForKey(\"answer\") as? String, forState: .Normal)\n                    self.answer2button.setTitle(answers[1].valueForKey(\"answer\") as? String, forState: .Normal)\n                    self.answer3button.setTitle(answers[2].valueForKey(\"answer\") as? String, forState: .Normal)\n\n                })\n            })\n            task.resume()\n        }\n    ```", "```swift\n       @IBAction func vote(sender: UIButton) {\n            var answer:Int\n            switch sender {\n            case answer1button:\n                answer = 0\n            case answer2button:\n                answer = 1\n            case answer3button:\n                answer = 2\n            default:\n                return\n            }\n            // input\n            var params = [\"answer\":\"\\(answer)\", \"uid\":UIDevice.currentDevice().identifierForVendor.UUIDString] as Dictionary<String, String>\n            var request = NSMutableURLRequest(URL: NSURL(string: baseurl + \"_design/voting/_update/addvote/\\(documentId!)\")!)\n            request.HTTPMethod = \"POST\"\n            do {\n            request.HTTPBody = try NSJSONSerialization.dataWithJSONObject(params, options: nil)\n        } catch {\n            let alert = UIAlertController(title: \"Error\", message: \"Error getting HTTP header\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n        }\n            request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            request.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n            var task = NSURLSession.sharedSession().dataTaskWithRequest(request, completionHandler: {data, response, error -> Void in\n                UIAlertView(title: nil, message: \"Thanks for voting\", delegate: nil, cancelButtonTitle: \"OK\").show()\n            })\n            task.resume()\n        }\n    ```"]