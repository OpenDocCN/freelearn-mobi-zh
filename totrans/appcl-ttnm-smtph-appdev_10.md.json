["```java\n<modules>\n<module version=\"1.0\">ti.paypal</module>\n</modules>\n\n```", "```java\nTi.Paypal = require('ti.paypal');\n\n```", "```java\nvar ppButton = Ti.Paypal.createPaypalButton({\nwidth: 294,\nheight: 50,\nbottom: 50,\nappId: \"YOUR_PAYPAL_APP_ID\",\nbuttonStyle: Ti.Paypal.BUTTON_294x43,\npaypalEnvironment: Ti.Paypal.PAYPAL_ENV_SANDBOX,\nfeePaidByReceiver: false,\ntransactionType: Ti.Paypal.PAYMENT_TYPE_DONATION,\nenableShipping: false,\npayment: {\namount: win.data.amt,\ntax: 0.00,\nshipping: 0.00,\ncurrency: \"USD\",\nrecipient: \"osama@x.com\",\nitemDescription: \"Donation\",\nmerchantName: \"American Red Cross\"\n}\n});\nppButton.addEventListener(\"paymentCanceled\", function(e){\nTi.API.info(\"Payment Canceled\");\n});\nppButton.addEventListener(\"paymentSuccess\", function(e){\nTi.API.info(\"Success\");\nwin.fireEvent(\"completeEvent\", {data: win.data, transid: e.transactionID});\n});\nppButton.addEventListener(\"paymentError\", function(e){\nTi.API.info(\"Payment Error\");\n});\n\n```", "```java\nppButton.addEventListener(\"paymentCanceled\", function(e){\nTitanium.API.info(\"Payment Canceled\");\n});\nppButton.addEventListener(\"paymentSuccess\", function(e){\nTitanium.API.info(\"Payment Success. TransactionID: \" +\ne.transactionID);\n});\nppButton.addEventListener(\"paymentError\", function(e){\nTitanium.API.info(\"Payment Error\");\nTitanium.API.info(\"errorCode: \" + e.errorCode);\nTitanium.API.info(\"errorMessage: \" + e.errorMessage);\n});\n\n```", "```java\ntitanium create --platform=iphone --type=module --dir=~/tmp --name=test --id=com.packtpub.testmodule\n\n```", "```java\ntitanium create --platform=iphone --type=module --dir=~/Projects --name=BitlyModule --id=com.packtpub.BitlyModule\n\n```", "```java\n#import \"TiModule.h\"\n#import <Foundation/Foundation.h>\n@interface ComPacktpubBitlyModuleModule : TiModule\n{\n}\n@end\n\n```", "```java\n#import \"ComPacktpubBitlyModuleModule.h\"\n#import \"TiBase.h\"\n#import \"TiHost.h\"\n#import \"TiUtils.h\"\n#import \"SBJson.h\"\n#import \"SBJsonParser.h\"\n@implementation ComPacktpubBitlyModuleModule\n#pragma mark Internal\n// this is generated for your module, please do not change it\n-(id)moduleGUID\n{\nreturn @\"a33e440e-ef62-4ec7-89cd-8939d264e46e\";\n}\n// this is generated for your module, please do not change it\n-(NSString*)moduleId\n{\nreturn @\"com.packtpub.BitlyModule\";\n}\n#pragma mark Lifecycle\n-(void)startup\n{\n// this method is called when the module is first loaded\n// you *must* call the superclass\n[super startup];\nNSLog(@\"[INFO] %@ loaded\",self);\n}\n-(void)shutdown:(id)sender\n{\n// this method is called when the module is being unloaded\n// typically this is during shutdown. make sure you don't\ndo too\n// much processing here or the app will be quit forceably\n// you *must* call the superclass\n[super shutdown:sender];\n}\n#pragma mark Cleanup\n-(void)dealloc\n{\n// release any resources that have been retained by the module\n[super dealloc];\n}\n#pragma mark Internal Memory Management\n-(void)didReceiveMemoryWarning:(NSNotification*)notification\n{\n// optionally release any resources that can be dynamically\n// reloaded once memory is available - such as caches\n[super didReceiveMemoryWarning:notification];\n}\n#pragma mark Listener Notifications\n-(void)_listenerAdded:(NSString *)type count:(int)count\n{\nif (count == 1 && [type isEqualToString:@\"my_event\"])\n{\n// the first (of potentially many) listener is being added\n// for event named 'my_event'\n}\n}\n-(void)_listenerRemoved:(NSString *)type count:(int)count\n{\nif (count == 0 && [type isEqualToString:@\"my_event\"])\n{\n// the last listener called for event named 'my_event' has\n// been removed, we can optionally clean up any resources\n// since no body is listening at this point for that event\n}\n}\n#pragma Public APIs\n-(id)example:(id)args\n{\n// example method\nreturn @\"hello world\";\n}\n///creates the short url from bitly\n- (id)getShortUrl:(id)value\n{\nNSString *baseURLString = @\"http://api.bit.ly/shorten?version=2.0.1&longUrl=\";\nNSString *longUrl = [TiUtils stringValue:value];\nlongUrl = [longUrl stringByReplacingOccurrencesOfString:@\"(\"\nwithString:@\"\"];\nlongUrl = [longUrl stringByReplacingOccurrencesOfString:@—)—\nwithString:@\"\"];\nlongUrl = [longUrl stringByReplacingOccurrencesOfString:@\"\\\"\"\nwithString:@\"\"];\nlongUrl = [longUrl\nstringByTrimmingCharactersInSet:[NSCharacterSet\nwhitespaceAndNewlineCharacterSet]];\nbaseURLString = [baseURLString\nstringByAppendingString:longUrl];\nbaseURLString = [baseURLString\nstringByAppendingString:\n@\"&login=REPLACE_YOUR_LOGIN&apiKey=REPLACE_YOUR_KEY\"];\nNSURL* baseURL = [[NSURL alloc]\ninitWithString:baseURLString];\nNSMutableURLRequest *req = [[NSMutableURLRequest alloc]\ninitWithURL:baseURL];\nNSHTTPURLResponse* urlResponse = nil;\nNSError *error = [[[NSError alloc] init] autorelease];\nNSData *data = [NSURLConnection sendSynchronousRequest:req\nreturningResponse:&urlResponse error:&error];\nif ([urlResponse statusCode] >= 200 && [urlResponse\nstatusCode] < 300)\n{\nNSLog(@\"Got a response from bit.ly\");\nSBJsonParser* jsonParser = [SBJsonParser new];\nNSString* jsonString = [[NSString alloc]\ninitWithData:data encoding:NSUTF8StringEncoding];\nNSDictionary* dict = (NSDictionary*)[jsonParser\nobjectWithString:jsonString];\n[jsonString release];\n[jsonParser release];\nNSString *statusCode = [dict\nobjectForKey:@\"statusCode\"];\nif([statusCode isEqualToString:@\"OK\"])\n{\n// retrieve shortURL from results\nNSLog([dict description]);\nNSString *shortURL = [[[dict\nobjectForKey:@\"results\"]\nobjectForKey:longUrl]\nobjectForKey:@\"shortUrl\"];\nreturn shortURL;\n}\nelse\n{\nreturn @\"Unable to shorten this URL,\nplease check its format.\";\n}\n}\nreturn baseURLString;\n}\n@end\n\n```", "```java\nCGFloat f = [TiUtils floatValue:arg];\nNSInteger f = [TiUtils intValue:arg];\nNSString *value = [TiUtils stringValue:arg];\nNSString *value = [TiUtils stringValue:@\"key\" properties:dict def:@\"default\"];\nTiColor *bgcolor = [TiUtils colorValue:arg];\n\n```", "```java\n// This is a test harness for your module\n// You should do something interesting in this harness\n// to test out the module and to provide instructions\n// to users on how to use it by example.\n// write your module tests here\nvar bitlymodule = require('com.packtpub.BitlyModule');\nTi.API.info(\"module is => \" + bitlymodule);\n// open a single window\nvar window = Ti.UI.createWindow({\nbackgroundColor:'white'\n});\nvar txtLongUrl = Ti.UI.createTextField({\ntop: 10,\nleft: 10,\nwidth: 300,\nheight: 30,\nborderStyle: 1,\nhintText: 'Enter your long url...'\n});\nwindow.add(txtLongUrl);\nvar btnShorten = Ti.UI.createButton({\ntitle: 'Shorten it with Bit.ly!',\nwidth: 200,\nright: 10,\nheight: 30,\ntop: 50\n});\nbtnShorten.addEventListener('click', function(e){\nvar result = bitlymodule.getShortUrl(txtLongUrl.value);\ntxtShortUrl.value = result;\n});\nwindow.add(btnShorten);\nvar txtShortUrl = Ti.UI.createTextField({\ntop: 100,\nleft: 10,\nwidth: 300,\nheight: 30,\nborderStyle: 1,\nhintText: 'Your short url appears here...'\n});\nwindow.add(txtShortUrl);\nwindow.open();\n\n```", "```java\nvar bitlymodule = require('com.packtpub.BitlyModule');\n\n```", "```java\nvar result = bitlymodule.getShortUrl(txtLongUrl.value);\ntxtShortUrl.value = result;\n\n```", "```java\nversion: 0.1\ndescription: My module\nauthor: Your Name\nlicense: Specify your license\ncopyright: Copyright (c) 2011 by Your Company\n# these should not be edited\nname: bitlymodule\nmoduleid: com.packtpub.BitlyModule\nguid: a33e440e-ef62-4ec7-89cd-8939d264e46e\nplatform: iphone\nminsdk: 1.7.2\n\n```"]