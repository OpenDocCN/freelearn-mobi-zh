- en: '25'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Swift Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple introduced **Swift Testing** during WWDC24\. It is a new framework that
    makes it easy for you to test your Swift code using expressive and intuitive APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll create and run tests for the `JournalEntry` class to
    make sure it works as intended.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll start by adding a new **Unit Testing** target to your app. Next, you’ll
    write some tests for the `JournalEntry` class, and finally, you’ll run the tests
    on your `JournalEntry` class to make sure it works as it should.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to write tests for the classes
    in your app to make sure that they work as intended. This will be useful for larger
    projects involving many people, where you are not able to view the source code
    for all the classes in your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Swift Testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Unit Testing target to your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests for the `JournalEntry` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the `JournalEntry` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` project that you modified in *Chapter
    23*, *Getting Started with SwiftData*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter25` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/se9ae9wrYC8](https://youtu.be/se9ae9wrYC8%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by learning about Swift Testing and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Swift Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are the lead developer of a large project involving many developers,
    it would not be practical for you to review everyone’s source code in detail,
    and in some cases, you would not be able to view the source code at all. Instead,
    you would issue specifications on what a class is supposed to do, and it would
    be the developer’s job to write the class for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let’s look at the initializer code for the `JournalEntry` class
    in the *JRNL* app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, you can only create valid `JournalEntry` instances if `entryTitle`
    and `entryBody` are not empty and `rating` is between 0 and 5 inclusive. If these
    requirements are not met, the initializer will return `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: Assume that you’re not able to view the source code for the `JournalEntry` class.
    How would you know that this class works as intended? This is where Swift Testing
    comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Swift Testing has a clear and expressive API built using macros, which makes
    it easy to write tests to determine that your code is working properly. It works
    on all major platforms supported by Swift, and it is open source.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Swift Testing, you can watch Apple’s WWDC24 video on
    it here: [https://developer.apple.com/videos/play/wwdc2024/10179/](https://developer.apple.com/videos/play/wwdc2024/10179/).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll see how to add a Unit Testing target to your project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Unit Testing target to your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to be able to test the `JournalEntry` class, you’ll add a Unit Testing
    target to your app. You will be able to write all the tests for classes in your
    app here. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, choose **File** | **New** | **Target** to open the template selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. In the **Test** section, click **Unit Testing
    Bundle** and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_25_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.1: Template chooser window'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Choose options for your new target:** window, leave all the options
    at their default values and click **Finish**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_25_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.2: Options window'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the **JRNLTests** folder is visible in the Project navigator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_25_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.3: Project navigator showing JRNLTests folder'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully added the Unit Testing target to your app! In the next
    section, you’ll write some tests to ensure that the `JournalEntry` class works
    as it should.
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests for the JournalEntry class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you have seen, the initializer for the `JournalEntry` class will only return
    a `JournalEntry` instance if `title` and `body` are not empty, and `rating` is
    between 0 and 5 inclusive. If these conditions are not met, the initializer will
    return `nil`. To test this, you will write tests to confirm that a valid `JournalEntry`
    instance is created when the above conditions are met, and `nil` is returned when
    they are not. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **JRNLTests** file inside the **JRNLTests** folder in the Project
    navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents of this file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This imports the Swift Testing framework.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This makes all the code inside the `JRNL` project available for testing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This function is used to confirm that valid instances of the `JournalEntry`
    class are created when `entryTitle` has a value, `entryBody` has a value, and
    `rating` is between 0 and 5 inclusive. The `#expect` macro checks that both `zeroRatingJournalEntry`
    and `positiveRatingJournalEntry` are not `nil`, therefore confirming that a valid
    `JournalEntry` instance has been created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This function is used to confirm that `nil` will be returned when `entryTitle`
    is empty, `entryBody` is empty, and `rating` is not between 0 and 5 inclusive.
    The `#expect` macro will determine if `entryTitleEmptyJournalEntry`, `entryBodyEmptyJournalEntry`,
    `negativeRatingJournalEntry`, and `invalidRatingJournalEntry` are all `nil`, therefore
    confirming that a `JournalEntry` instance has not been created.
  prefs: []
  type: TYPE_NORMAL
- en: Since this is a brief introduction to Swift Testing, multiple conditions are
    checked in a single function, but for clarity, professional programmers typically
    use one function to perform one test.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve completed writing all the tests for the `JournalEntry` class. In the
    next section, you’ll run the tests to confirm that the `JournalEntry` class works
    as it should.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the JournalEntry class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since you have completed writing all the tests for the `JournalEntry` class
    in the previous section, you will now run the test to see if the `JournalEntry`
    class works as expected. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, choose **Test** from the **Product** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Xcode will automatically run all your tests. Upon completion, you will see
    the following results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_25_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.4: Canvas showing widget preview'
  prefs: []
  type: TYPE_NORMAL
- en: The green squares with tick marks show that all the tests have been completed
    successfully and the `JournalEntry` class works as expected. Great job!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you tested the JournalEntry class to determine if it works
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: First, you added a new **Unit Testing** target to your app. Next, you wrote
    some tests for the `JournalEntry` class, and finally, you ran tests on your `JournalEntry`
    class to make sure it works as it should.
  prefs: []
  type: TYPE_NORMAL
- en: You have now learned how to write tests for the classes in your app to make
    sure that they work as intended. This will be useful for larger projects involving
    many people, where you are not able to view the source code for all the classes
    in your project, and also ensure that changes made anywhere in the app do not
    break existing functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn about **Apple Intelligence**, Apple’s implementation
    of AI technology introduced during WWDC24.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
