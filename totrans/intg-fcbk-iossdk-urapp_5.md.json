["```swift\n#import &lt;Foundation/Foundation.h&gt;\n @interface LBBook : NSObject\n @property (strong, nonatomic) NSString *title;\n @property (strong, nonatomic) NSString *author;\n @property (strong, nonatomic) NSString *review;\n @property (strong, nonatomic) NSNumber *vote;\n @end\n```", "```swift\n#import \"LBBook.h\"\n @interface LBViewController ()\n @property (strong, nonatomic) LBBook *book;\n @end\n```", "```swift\n#import \"LBViewController.h\"\n#import \"LBBook.h\"\n#import \"LBFacebookViewController.h\"\n\n@interface LBViewController ()\n @property (strong, nonatomic) LBBook *book;\n // UI input fields\n@property (weak, nonatomic) IBOutlet UITextField *titleField;\n@property (weak, nonatomic) IBOutlet UITextField *authorField;\n@property (weak, nonatomic) IBOutlet UITextView *reviewField;\n@property (weak, nonatomic) IBOutlet UITextField *voteField;\n @end\n```", "```swift\n- (IBAction)onGoSocialClick:(id)sender {\n    // check if self.book is already initialized\n    if (self.book == nil) {\n        // init self.book\n        self.book = [[LBBook alloc] init];\n    }\n    // set book title using the correspondent field text or empty string\n    self.book.title = self.titleField.text ? self.titleField.text : @\"\";\n\n    // set book author using the correspondent field text or empty string\n    self.book.author = self.authorField.text ? self.authorField.text : @\"\";\n\n    // set book review using the correspondent field text or empty string\n    self.book.review = self.reviewField.text ? self.reviewField.text : @\"\";\n\n    // set book review using the correspondent field text or empty string\n    self.book.vote = self.voteField.text ? [NSNumber numberWithInt:self.voteField.text.intValue] : [NSNumber numberWithInt:-1];\n}\n```", "```swift\n#import \"LBBook.h\"\n @interface LBFacebookViewController : UIViewController\n // Current book data. Initialized by LBViewController using segue\n@property (weak, nonatomic) LBBook *book;\n @end\n```", "```swift\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n```", "```swift\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    if ([segue.identifier isEqualToString:@\"GoSocialSegue\"]) {\n        if ([segue.destinationViewController isKindOfClass:[LBFacebookViewController class]]) {\n            LBFacebookViewController *facebookController = segue.destinationViewController;\n            [facebookController setBook:self.book];\n        }\n    }\n}\n```", "```swift\n- (IBAction)onBookOnFeedClick:(id)sender {\n\n    if (![FBNativeDialogs canPresentShareDialogWithSession:nil]) {\n        UIAlertView *pickWallMessage  = [[UIAlertView alloc] initWithTitle:@\"Where to post\"\n                                                                   message:@\"Pick a Wall\"\n                                                                  delegate:self\n                                                         cancelButtonTitle:@\"cancel\"\n                                                         otherButtonTitles:@\"mine\", @\"friend's\", nil];\n        [pickWallMessage show];\n    } else {\n        [self checkForPublishPermissionAndPublish];\n    }\n}\n```", "```swift\n- (void)showDeniedPermissionAlertMessage:(NSString *)message\n{\n    UIAlertView *deniedPermissionMessage = [[UIAlertView alloc] initWithTitle:@\"Permission Error\"\n                                                                      message:message\n                                                                     delegate:nil\n                                                            cancelButtonTitle:nil\n                                                            otherButtonTitles:@\"OK\", nil];\n    [deniedPermissionMessage show];\n}\n```", "```swift\npresentDialogModallyWithSession:parameters:handler\n```", "```swift\n- (void)displayWebPostDialog:(NSDictionary *)params\n{\n    [FBWebDialogs presentFeedDialogModallyWithSession:FBSession.activeSession\n                                           parameters:params\n                                              handler:\n     ^(FBWebDialogResult result, NSURL *resultURL, NSError *error) {\n         if (error) {\n             NSLog(@\"Error publishing story.\");\n         } else {\n             if (result == FBWebDialogResultDialogNotCompleted) {\n                 NSLog(@\"User canceled story publishing.\");\n             } else {\n                 NSLog(@\"Story posted\");\n             }\n         }\n     }];\n}\n```", "```swift\n- (void)publishCurrentBook\n{\n    BOOL displayNativePostDialog = [self displayNativePostDialog];\n\n    // NO FACEBOOK INTEGRATION\n    if (!displayNativePostDialog) {\n        // Create dictionary for Facebook web dialog\n        NSString *name = [NSString stringWithFormat:@\"Checkout %@\", self.book.title];\n        NSString *caption = [NSString stringWithFormat:@\"Score %@\", self.book.vote];\n        NSString *description = self.book.review;\n        NSString *pictureUrl = @\"http://www.iconpot.com/icon/thumbnail/open-book-vector.jpg\";\n\n        NSMutableDictionary *params = [NSMutableDictionary dictionaryWithObjectsAndKeys:\n                                       name, @\"name\",\n                                       caption, @\"caption\",\n                                       description, @\"description\",\n                                       pictureUrl, @\"picture\",\n                                       nil];\n\n        if (!self.myWall) {\n            [params setObject:self.selectedFriend.id forKey:@\"to\"];\n            self.myWall = YES;\n        }\n\n        [self displayWebPostDialog:params];\n    }\n}\n```", "```swift\n- (void)checkForPublishPermissionAndPublish\n{\n    // Ask for publish_actions permissions in context\n    if ([FBSession.activeSession.permissions indexOfObject:@\"publish_actions\"] == NSNotFound) {\n        [FBSession.activeSession requestNewPublishPermissions:[NSArray arrayWithObject:@\"publish_actions\"]\n                                              defaultAudience:FBSessionDefaultAudienceFriends\n                                            completionHandler:^(FBSession *session, NSError *error) {\n                                                if (!error) {\n                                                    [self publishCurrentBook];\n                                                } else {\n                                                    if (error.fberrorCategory == FBErrorCategoryUserCancelled) {\n                                                        [self showDeniedPermissionAlertMessage:@\"Publish Action Permission was not granted\"];\n                                                    }\n                                                }\n                                            }];\n    } else { // If permissions present, publish the story\n        [self publishCurrentBook];\n    }\n}\n```", "```swift\n@interface LBFacebookViewController () &lt;FBLoginViewDelegate, FBFriendPickerDelegate, UIAlertViewDelegate&gt;\n```", "```swift\n- (IBAction)onBookOnFeedClick:(id)sender {\n\n    if (![FBNativeDialogs canPresentShareDialogWithSession:nil]) {\n        UIAlertView *pickWallMessage  = [[UIAlertView alloc] initWithTitle:@\"Where to post\"\n                                                                   message:@\"Pick a Wall\"\n                                                                  delegate:self\n                                                         cancelButtonTitle:@\"cancel\"\n                                                         otherButtonTitles:@\"mine\", @\"friend's\", nil];\n        [pickWallMessage show];\n    } else {\n        [self checkForPublishPermissionAndPublish];\n    }\n}\n```", "```swift\n- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex\n{\n    switch (buttonIndex) {\n        case 1: //mine button was clicked\n            self.myWall = YES;\n            [self checkForPublishPermissionAndPublish];\n            break;\n        case 2: //friend's button was clicked\n            self.myWall = NO;\n            [self showFriendPickerViewControllerWithMultiSelection:YES];\n            break;\n        default:\n            self.myWall = YES;\n            break;\n    }\n}\n```", "```swift\n- (void)showFriendPickerViewControllerWithMultiSelection:(BOOL)multiSelection\n{\n    if (self.friendPickerViewController == nil) {\n        self.friendPickerViewController = [[LBFriendPickerViewController alloc] init];\n        self.friendPickerViewController.title = @\"Pick a Friend\";\n        [self.friendPickerViewController setDelegate:self];\n    }\n\n    [self.friendPickerViewController setAllowsMultipleSelection:multiSelection];\n\n    [self.friendPickerViewController loadData];\n    [self.friendPickerViewController clearSelection];\n\n    [self presentViewController:self.friendPickerViewController animated:YES completion:^{\n        NSLog(@\"Friends list ready\");\n    }];\n}\n```", "```swift\n- (IBAction)onFriendsClick:(id)sender {\n    [self showFriendPickerViewControllerWithMultiSelection:YES];\n}\n```", "```swift\n#pragma mark - FBFriendPickerViewController delegate\n- (void)facebookViewControllerDoneWasPressed:(id)sender {\n\n    LBFriendPickerViewController *friendPicker = (LBFriendPickerViewController *)sender;\n\n    // Checking for user friend selections\n    if ([[friendPicker selection] count] &gt; 0) {\n        self.selectedFriend = [[friendPicker selection] objectAtIndex:0];\n    } else {\n        // resetting previous selction\n        self.myWall = YES;\n    }\n\n    [self dismissViewControllerAnimated:YES completion:^{\n        if (!self.myWall) {\n            // Posting new story on the friends wall\n            [self checkForPublishPermissionAndPublish];\n        }\n    }];\n}\n```", "```swift\nif (!self.myWall) {\n        [params setObject:self.selectedFriend.id forKey:@\"to\"];\n        self.myWall = YES;\n}\n```", "```swift\n- (BOOL)displayNativePostDialog\n{\n    // You can get an img from any source: camera or image library\n    UIImage *img = [UIImage imageNamed:@\"book.jpg\"];\n    NSString *bookTitle = [NSString stringWithFormat:@\"Checkout %@\", self.book.title];\n\n    bool displayNativeDialog = [FBNativeDialogs presentShareDialogModallyFrom:self\n                                                                  initialText:bookTitle\n                                                                        image:img\n                                                                          url:nil\n                                                                      handler:^(FBNativeDialogResult result, NSError *error) {}];\n    return displayNativeDialog;\n}\n```", "```swift\n- (void)publishCurrentBook\n{\n    BOOL displayNativePostDialog = [self displayNativePostDialog];\n\n    // NO FACEBOOK INTEGRATION\n    if (!displayNativePostDialog) {\n        // Create dictionary for Facebook web dialog\n        NSString *name = [NSString stringWithFormat:@\"Checkout %@\", self.book.title];\n        NSString *caption = [NSString stringWithFormat:@\"Score %@\", self.book.vote];\n        NSString *description = self.book.review;\n        NSString *pictureUrl = @\"http://www.iconpot.com/icon/thumbnail/open-book-vector.jpg\";\n\n        NSMutableDictionary *params = [NSMutableDictionary dictionaryWithObjectsAndKeys:\n                                       name, @\"name\",\n                                       caption, @\"caption\",\n                                       description, @\"description\",\n                                       pictureUrl, @\"picture\",\n                                       nil];\n\n        if (!self.myWall) {\n            [params setObject:self.selectedFriend.id forKey:@\"to\"];\n            self.myWall = YES;\n        }\n\n        [self displayWebPostDialog:params];\n    }\n}\n```"]