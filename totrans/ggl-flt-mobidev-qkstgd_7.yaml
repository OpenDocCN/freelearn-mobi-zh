- en: Firebase - Flutter's Best Friend
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase - Flutter的最佳伙伴
- en: Building apps using **Firebase** is one of the fastest-growing technology trends
    in the world. Using Firebase, developers can build apps at a rapid pace without
    managing the infrastructure, including authentication, storing and syncing data,
    securely hosting web assets, and cloud storage. Firebase has a base plan that
    is free, allowing 1 GB the storage and 100 simultaneous connections. If you wish
    to upgrade, you can check out the plans here: [https://firebase.google.com/pricing/](https://firebase.google.com/pricing/).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Firebase**构建应用是世界上增长最快的科技趋势之一。使用Firebase，开发者可以快速构建应用，无需管理基础设施，包括身份验证、存储和同步数据、安全托管Web资产和云存储。Firebase有一个免费的基础计划，提供1
    GB的存储空间和100个并发连接。如果您想升级，您可以在此查看计划：[https://firebase.google.com/pricing/](https://firebase.google.com/pricing/)。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Connecting with Firebase
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Firebase连接
- en: Creating the Cloud Firestore database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Cloud Firestore数据库
- en: Firebase Cloud Messaging
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase云消息传递
- en: Firebase Remote Config
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase远程配置
- en: Connecting with Firebase
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Firebase连接
- en: 'Let''s first take a look at how to connect with Firebase. We will first need
    to ensure whether the connections to the Firebase are made properly; to do so,
    follow these steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何连接到Firebase。我们首先需要确保与Firebase的连接是否正确建立；为此，请按照以下步骤操作：
- en: Create a new Flutter project in your IDE or editor
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的IDE或编辑器中创建一个新的Flutter项目
- en: Open the file `pubspec.yaml` file
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`pubspec.yaml`文件
- en: 'Add the following dependency:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下依赖项：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For details of the latest version of the Cloud Firestore plugin for Flutter,
    visit the Pub site:[ https://pub.dartlang.org/packages/cloud_firestore](https://pub.dartlang.org/packages/cloud_firestore).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Flutter Cloud Firestore插件的最新版本详情，请访问Pub网站：[https://pub.dartlang.org/packages/cloud_firestore](https://pub.dartlang.org/packages/cloud_firestore)。
- en: 'Next, to make your connection, in your IDE or using command line run the following:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为了建立连接，在您的IDE或使用命令行运行以下命令：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a Firebase project
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Firebase项目
- en: 'Once the connection has been made, the next step will be to create a Firebase
    project. So, let''s get started. Follow the given steps to create your project:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立连接，下一步就是创建一个Firebase项目。那么，让我们开始吧。按照以下步骤创建您的项目：
- en: Open the website [https://firebase.google.com](https://firebase.google.com)
    and log in or sign up. You can use your Google credentials to log in here.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开网站[https://firebase.google.com](https://firebase.google.com)并登录或注册。您可以使用您的Google凭证在此处登录。
- en: Next, click on Add Project.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击添加项目。
- en: 'Once you click this option, you will see the following screen:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击此选项，您将看到以下屏幕：
- en: '![](img/b04f4a22-a72d-44a7-b6d8-f5a196155b8e.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b04f4a22-a72d-44a7-b6d8-f5a196155b8e.png)'
- en: 'Add a Project name (for example: `Firebase Flutter Demo App` in our case).
    The **Project ID** gets auto-generated, or you could type a unique project ID
    of your own. They are globally unique identifiers.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加项目名称（例如：在我们的案例中为`Firebase Flutter Demo App`）。**项目ID**会自动生成，或者您可以输入您自己的唯一项目ID。它们是全球唯一的标识符。
- en: Select the country in Locations and then proceed to accept the terms and conditions
    before you click Create project**. **
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在位置中选择国家，然后点击创建项目**。**之前接受条款和条件。
- en: 'Click the Create project option, and wait a few seconds before the Firebase
    console shows the message displayed in the following screenshot:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建项目选项，等待几秒钟，直到Firebase控制台显示以下截图中的消息：
- en: '![](img/38a93117-ba5f-4bb5-8838-54eef11a6727.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38a93117-ba5f-4bb5-8838-54eef11a6727.png)'
- en: If your screen shows the **Your new project is ready** text, as shown in the
    preceding screenshot, you can click the **Continue **button.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的屏幕显示**您的项目已准备好**文本，如前一张截图所示，您可以点击**继续**按钮。
- en: 'Once that is done, you will be shown the project settings dashboard of the
    app as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您将看到应用的以下项目设置仪表板：
- en: '![](img/28e7ff8a-a759-44d1-917d-f019ee7c78ef.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28e7ff8a-a759-44d1-917d-f019ee7c78ef.png)'
- en: Choose platform-specific Firebase configurations, based on which app platform
    you will be building an app for, and click on the respective icon. In our case,
    since we are building an Android app, we will click on the Android icon to proceed.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您将为哪个应用平台构建应用选择平台特定的Firebase配置，并点击相应的图标。在我们的案例中，因为我们正在构建Android应用，所以我们将点击Android图标继续。
- en: Registering an app using a package name
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用包名注册应用
- en: 'This step is needed to register your app''s platform-specific ID with Firebase.
    This will generate configuration files that we will add to our project folders.
    Note that in the top-level directory of your Flutter app, iOS and Android are
    two of the subdirectories that hold the respective platform-specific configuration
    files:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤需要将您应用的平台特定ID注册到Firebase。这将生成我们将添加到项目文件夹中的配置文件。请注意，在您的Flutter应用顶级目录中，iOS和Android是包含相应平台特定配置文件的子目录之一：
- en: '![](img/66815961-af58-4e30-ae9e-39f3b71315bd.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66815961-af58-4e30-ae9e-39f3b71315bd.png)'
- en: In the top-level directory of your Flutter app, you can see subdirectories;
    called Android and iOS. Here,you'll find platform-specific configuration files
    for iOS and Android.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Flutter应用顶级目录中，您可以看到子目录；称为Android和iOS。在这里，您将找到iOS和Android的平台特定配置文件。
- en: 'The most important field here is the Android package name**. **This is generally
    the`applicationId` in your app-level `build.gradle` file. Another way to find
    the package name is to follow these steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里最重要的字段是Android包名**。**这通常是您app-level `build.gradle`文件中的`applicationId`。另一种找到包名的方法是按照以下步骤操作：
- en: In the Flutter app directory, check the `android/app/src/main/AndroidManifest.xml` file.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Flutter应用目录中，检查`android/app/src/main/AndroidManifest.xml`文件。
- en: Under the Manifest tag, find the string value of the package, which will be
    the value of the package name.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Manifest标签下，找到包名的字符串值，这将是包名的值。
- en: In the Firebase dialog, paste the copied package name from step 2 into the Android
    package name field.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Firebase对话框中，将步骤2中复制的包名粘贴到Android包名字段中。
- en: If you are developing the Flutter app for both iOS and Android, you need to
    register both the iOS and Android versions within the same Firebase project. But
    if you are developing it just for one platform, you can just click one of them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在为iOS和Android两个平台开发Flutter应用，您需要在同一个Firebase项目中注册iOS和Android版本。但如果您只为一个平台开发，您只需点击其中一个即可。
- en: Next, you can add the App nickname, which is an optional field. There is another
    optional field **Debug signing certificate SHA-1,** which has to be used in the
    same cases if the app uses features such as Google Sign in for Authentication,
    Dynamic Links, and Invites. In this case, you have to find the debug certificate
    fingerprint value that you can grab and paste in the field. Refer to the link
    here, [https://developers.google.com/android/guides/client-auth](https://developers.google.com/android/guides/client-auth),
    for understanding how to build client auth. Since, in this example, we are not
    using any of these features, we will leave it blank. Click on Register app.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以添加应用昵称，这是一个可选字段。还有一个可选字段**调试签名证书SHA-1**，如果应用使用如Google Sign in进行身份验证、Dynamic
    Links和Invites等功能，则必须使用。在这种情况下，您必须找到调试证书指纹值，并将其复制粘贴到字段中。有关如何构建客户端身份验证的说明，请参阅此链接，[https://developers.google.com/android/guides/client-auth](https://developers.google.com/android/guides/client-auth)。由于在此示例中我们没有使用这些功能，我们将留空。点击注册应用。
- en: Downloading and setting up the config file
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和设置配置文件
- en: 'The next part will be to download and set up the config file. Follow the given
    steps to to download and set up the config file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是下载并设置配置文件。按照以下步骤下载并设置配置文件：
- en: After clicking **Register app**, the console in this step will generate the `google-services.json`
    file. Download this file to your computer.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册应用**后，此步骤中的控制台将生成`google-services.json`文件。将此文件下载到您的计算机上。
- en: Once the file has been downloaded, go to your Flutter app directory, and move
    the `google-services.json` file that you downloaded previously into the `android/app`
    directory.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件下载完成后，前往您的Flutter应用目录，并将之前下载的`google-services.json`文件移动到`android/app`目录中。
- en: 'After the file has been moved, in the Firebase console, click Next as shown
    in the following screenshot:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件移动后，在Firebase控制台中，点击下一步，如图所示：
- en: '![](img/8cdc637f-5749-4b21-b578-dda78daa6801.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cdc637f-5749-4b21-b578-dda78daa6801.png)'
- en: Adding Firebase SDK
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Firebase SDK
- en: 'Now that we have downloaded and set up the config file, the penultimate step
    is to add Firebase SDK to your project. The Google services plugin for Gradle
    ensures that the JSON file you downloaded is read. In order to enable Google APIs
    or Firebase services in your application, you have to add a `google-services`
    dependency. Two minor modifications are needed to `build.gradle` files to use
    the plugin. Take a look at the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经下载并设置了配置文件，倒数第二步是将 Firebase SDK 添加到你的项目中。Gradle 的 Google 服务插件确保你下载的 JSON
    文件被读取。为了在应用中启用 Google API 或 Firebase 服务，你必须添加一个 `google-services` 依赖项。需要对 `build.gradle`
    文件进行两个小的修改以使用该插件。请看以下内容：
- en: 'Project-level `build.gradle` (`<project>/build.gradle`):'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '项目级别的 `build.gradle` (`<project>/build.gradle`):'
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'App-level `build.gradle` (`<project>/<app-module>/build.gradle`):'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '应用级别的 `build.gradle` (`<project>/<app-module>/build.gradle`):'
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Click the **Sync Now** option to complete this process.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**立即同步**选项以完成此过程。
- en: Verifying the configuration
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证配置
- en: 'Once the previous steps are complete, we have to verify whether your Flutter
    app is connected to Firebase. To ensure this, follow these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完成前面的步骤后，我们必须验证你的 Flutter 应用是否连接到 Firebase。为了确保这一点，请按照以下步骤操作：
- en: Build the project and run it on the device connected to your computer.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目并在连接到你的计算机的设备上运行它。
- en: 'Once the app gets run on the phone, the Firebase console automatically detects
    the configurations and displays a success message as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦应用在手机上运行，Firebase 控制台将自动检测配置并显示如下成功消息：
- en: '![](img/964ea405-ea49-4315-9399-35ac557b61bd.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/964ea405-ea49-4315-9399-35ac557b61bd.png)'
- en: 'After you click Continue to console, you will be taken to the console showing
    the project name and the other settings:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击继续到控制台后，你将被带到显示项目名称和其他设置的控制台：
- en: '![](img/d330d3de-d403-4b32-ab77-32c097d27638.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d330d3de-d403-4b32-ab77-32c097d27638.png)'
- en: In the next section, we will see how to connect to the Cloud Database.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何连接到云数据库。
- en: Creating a Cloud Firestore Database
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Cloud Firestore 数据库
- en: 'Once the Firebase-Flutter set up is complete, you are all set to build the
    app. We will now set up a Cloud Firestore database and initialize some values.
    Follow these steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Firebase-Flutter 设置完成，你就可以开始构建应用了。我们现在将设置 Cloud Firestore 数据库并初始化一些值。按照以下步骤操作：
- en: Under the Develop option, click on Database.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发选项下，点击数据库。
- en: 'In the panel shown, click Create database:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在显示的面板中，点击创建数据库：
- en: '![](img/82461193-593c-406a-bb05-fb2bf5622ff1.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/82461193-593c-406a-bb05-fb2bf5622ff1.png)'
- en: 'After clicking, you will see a pop-up panel: Security rules for Cloud Firestore.
    Select Start in test mode and enable it:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击后，你会看到一个弹出面板：Cloud Firestore 的安全规则。选择以测试模式启动并启用：
- en: '![](img/ead5da71-68cd-4755-9cfb-841c8a461650.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ead5da71-68cd-4755-9cfb-841c8a461650.png)'
- en: We select test mode because we want anyone with the database reference to be
    able to read or write to the database. When you build the production version of
    the app, ensure you set up security rules. You can read about these rules here: [https://firebase.google.com/docs/reference/rules/rules](https://firebase.google.com/docs/reference/rules/rules). 
    After clicking Enable, the Cloud Firestore will be provisioned with security rules
    and will be ready for use.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择测试模式，因为我们希望任何拥有数据库引用的人都能读取或写入数据库。当你构建应用的正式版本时，请确保你设置了安全规则。你可以在这里了解这些规则：[https://firebase.google.com/docs/reference/rules/rules](https://firebase.google.com/docs/reference/rules/rules)。点击启用后，Cloud
    Firestore 将配置安全规则并准备好使用。
- en: 'From the following panel, click Add collection:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下面板中，点击添加集合：
- en: '![](img/6e7ad662-eb70-47ef-935d-4a59deaec5e3.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6e7ad662-eb70-47ef-935d-4a59deaec5e3.png)'
- en: 'We presume that we would have just one collection in Firestore, called Votes.
    A **collection** is a set of documents that comprise the data:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们假设在 Firestore 中我们只有一个集合，称为 Votes。**集合**是一组文档，构成了数据：
- en: '![](img/0fd3ae41-6da4-4e00-b64b-3ba4e23acbec.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0fd3ae41-6da4-4e00-b64b-3ba4e23acbec.png)'
- en: Click Next.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步。
- en: A collection must contain at least one document, which is Cloud Firestore's
    unit of storage. You can either use an auto-generated ID or have a custom ID.
    In our case, we use partyvotes.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个集合必须至少包含一个文档，这是 Cloud Firestore 的存储单元。你可以使用自动生成的 ID 或自定义 ID。在我们的例子中，我们使用 partyvotes。
- en: 'For the existing Field, enter the value of the name (in our case, it''s VoteCount),
    select the data Type, then enter the Value of partyvotes. Since its an Integer,
    we select the number and set its initial value to be 0:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于现有的字段，输入名称的值（在我们的例子中，它是 VoteCount），选择数据类型，然后输入 partyvotes 的值。由于它是一个整数，我们选择数字并将其初始值设置为
    0：
- en: '![](img/7cb97e95-da8c-4ecc-87d4-37ab0a25e859.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cb97e95-da8c-4ecc-87d4-37ab0a25e859.png)'
- en: Click Save.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 保存。
- en: 'After adding several documents to your collection, your database should look
    something like this:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向你的集合添加了几个文档之后，你的数据库应该看起来像这样：
- en: '![](img/29a54618-ee2e-4166-ab11-315b67d494c2.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29a54618-ee2e-4166-ab11-315b67d494c2.png)'
- en: 'Firestore is a NoSQL database, which means that we would not be working with
    rows and columns. Now we will build the layout of the app. Using the Firestore
    details, we will construct the list layout, which will generate the list items
    runtime based on the values in the Firestore and read/update the fresh values
    when tapped on the list item into the Firestore database. The following is the
    `main.dart` file:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Firestore 是一个 NoSQL 数据库，这意味着我们不会与行和列一起工作。现在我们将构建应用的布局。使用 Firestore 的详细信息，我们将构建列表布局，这将根据
    Firestore 中的值在运行时生成列表项，并在点击列表项时读取/更新 Firestore 数据库中的新值。以下是 `main.dart` 文件：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We have the collection ready on Firestore Cloud. In the previous example, we
    have used the `party`object. It''s time we now use the Firestore cloud data from
    our collection to be shown. We can do that by calling Cloud Firestore using a `Firestore.instance`reference.
    For example, if you wish to call a specific collection from your Firestore Cloud
    database, you can use the following command to return a stream of snapshots:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Firestore 云上准备好了集合。在前面的例子中，我们使用了 `party` 对象。现在是时候使用 Firestore 云数据从我们的集合中显示了。我们可以通过调用
    Cloud Firestore 使用一个 `Firestore.instance` 引用来做到这一点。例如，如果你希望从你的 Firestore 云数据库中调用一个特定的集合，你可以使用以下命令来返回一个快照流：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Streams are of two types: single subscription or broadcast. Streams are responsible
    for providing an asynchronous sequence of data. User-generated events and data
    read from files are the two data sequences. Now, using `StreamBuilder` widget,
    we will inject the stream of data into the user interface we have created. One
    of the classic use cases of the `StreamBuilder` is that, whenever there is a change
    in the Firestore values, the list gets updated automatically.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 流有两种类型：单订阅或广播。流负责提供异步数据序列。用户生成的事件和从文件中读取的数据是两种数据序列。现在，使用 `StreamBuilder` 小部件，我们将数据流注入我们创建的用户界面。`StreamBuilder`
    的一个经典用例是，每当 Firestore 值发生变化时，列表会自动更新。
- en: 'Look for the `_buildBody` method in the previous code and replace the content
    with this code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中查找 `_buildBody` 方法，并将内容替换为以下代码：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding the preceding snippet will produce some errors. The `_buildListItem`
    method still thinks it's getting a map. Hence, we will need to make a couple of
    changes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 添加前面的片段会产生一些错误。`_buildListItem` 方法仍然认为它正在获取一个映射。因此，我们需要做一些修改。
- en: 'Firstly, make the method to accept `DocumentSnapshot` instead of a list of
    a map:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将方法修改为接受 `DocumentSnapshot` 而不是映射列表：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Secondly, use the constructor `Record.fromSnapshot()` to build the record.
    The method''s updated code as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，使用构造函数 `Record.fromSnapshot()` 来构建记录。该方法更新的代码如下：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, use the `onTap: ()` method to ensure whenever a list item is clicked,
    the votes are updated into the Firestore database. Whenever you click List Item, Cloud
    Firestore notifies all listeners with the updated snapshot. The app is actively
    engaged using `StreamBuilder`, which acts to update with the new data. For a single
    user, it is fine, but when you have multiple users, there is a chance of **Race
    Condition** may occur.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，使用 `onTap: ()` 方法确保每次点击列表项时，投票都会更新到 Firestore 数据库中。每次点击列表项时，Cloud Firestore
    都会通知所有监听器更新后的快照。应用通过 `StreamBuilder` 激活参与，该小部件用于更新新数据。对于单个用户来说，这是可以的，但是当有多个用户时，可能会发生
    **竞态条件**。'
- en: 'The complete code for `main.dart` is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.dart` 的完整代码如下：'
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once you run the code, try clicking on List Items and you will see the updates
    values mapped on the Firestore Cloud database. You could also try updating the
    List Item names (in our case, the Party names) in the Firestore Cloud database,
    and you will see the List Item option updating.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行代码，尝试点击列表项，你将看到更新后的值映射在 Firestore 云数据库上。你也可以尝试在 Firestore 云数据库中更新列表项名称（在我们的例子中，是派对名称），你将看到列表项选项正在更新。
- en: Firebase Cloud Messaging
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase Cloud Messaging
- en: '**Firebase Cloud Messaging** (**FCM**) is an effective way to drive engagement
    within the app using the app notification.  Using FCM, you can send two kinds
    of messages to the client device:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Firebase Cloud Messaging** (**FCM**) 是一种通过应用通知来提高应用内参与度的有效方式。使用 FCM，你可以向客户端设备发送两种类型的消息：'
- en: Notification messages that are directly handled by FCM SDK
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由FCM SDK直接处理的推送通知消息
- en: Data messages
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据消息
- en: Both these messages have a maximum payload of 4KB. When sending messages from
    the Firebase console, there is a 1,024 character limit. Firebase has Cloud Messaging
    as well as In-App messaging, but in this section, we will discuss only Firebase
    Cloud messaging.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这两条消息的最大有效载荷为4KB。当从Firebase控制台发送消息时，字符限制为1,024个字符。Firebase拥有云消息传递以及应用内消息传递，但在这个部分，我们将仅讨论Firebase云消息传递。
- en: 'In the Firebase console, click on **Grow | Cloud Messaging** in the left panel.
    Follow this by clicking Send your first message**.** as shown in the following
    screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firebase控制台中，点击左侧面板中的**增长 | 云消息传递**。随后点击**发送第一条消息**，如图所示：
- en: '![](img/564de0dc-d7cb-4179-9abb-037698ad19ea.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/564de0dc-d7cb-4179-9abb-037698ad19ea.png)'
- en: 'To test the message on your device, FCM tokens are needed. Use the following
    Android code to generate these tokens:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的设备上测试消息，需要FCM令牌。使用以下Android代码生成这些令牌：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: FCM also allows configuring messages specific to targets such as `GeoLocations`,
    versions of the app, Languages, and User Audiences. This case is ideal when you
    wish to send notifications to a specific set of users.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: FCM还允许针对特定目标配置消息，例如`GeoLocations`、应用的版本、语言和用户受众。当您希望向特定用户组发送通知时，这种情况非常理想。
- en: Firebase Remote Config
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase远程配置
- en: Using Firebase's Remote Config API, you can make changes to the app without
    the user actually downloading an app update. One example of this is when you push
    a new update to the app in production, you can show the pop-up message to the
    user when they launch the app about the update.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firebase的远程配置API，您可以在不实际下载应用更新的情况下更改应用。一个例子是在生产环境中推送新的应用更新时，当用户启动应用时，您可以向用户显示有关更新的弹出消息。
- en: 'To set up Firebase Remote Config, head over to the Grow tab in the Firebase
    console and click on Remote Config as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Firebase远程配置，请转到Firebase控制台中的“增长”标签页，并点击“远程配置”，如图所示：
- en: '![](img/1e9edec7-62aa-44a4-a151-fc3015d5d364.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e9edec7-62aa-44a4-a151-fc3015d5d364.png)'
- en: Add the Parameter key and the Default value. There is an optional field for
    adding the description. Click Add Parameter to proceed. Avoid storing any confidential
    information in the remote config. Firebase also allows the setting of conditions
    for the parameter. For example, if you want to show a specific welcome message
    to a user in India and a different message to a user in the USA, remote configuration
    can come in handy.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 添加参数键和默认值。有一个可选字段用于添加描述。点击“添加参数”继续。请勿在远程配置中存储任何机密信息。Firebase还允许为参数设置条件。例如，如果您想向印度的用户显示特定的欢迎消息，而向美国的用户显示不同的消息，远程配置将非常有用。
- en: 'Disclaimer: Some of the code files are are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0) and
    are available on [https://firebase.google.com/docs/cloud-messaging/android/client](https://firebase.google.com/docs/cloud-messaging/android/client).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 免责声明：一些代码文件是在[Apache 2.0许可证](https://www.apache.org/licenses/LICENSE-2.0)下授权的，并且可在[https://firebase.google.com/docs/cloud-messaging/android/client](https://firebase.google.com/docs/cloud-messaging/android/client)上找到。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started this chapter by looking at how Firebase can help us build apps quicker
    using the Firestore Cloud database—the NoSQL way to help app developers build
    apps in real-time. We also looked at an example that captured `ListView` with
    the Firestore Cloud database. This section was followed by looking at how Cloud
    messaging works. In the last section, we discussed some use cases for using Firebase
    Remote Config for your apps.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章开始时探讨了如何使用Firestore云数据库——NoSQL方式帮助应用开发者实时构建应用，从而加快应用构建速度。我们还查看了一个使用Firestore云数据库捕获`ListView`的示例。本节之后，我们探讨了云消息传递的工作原理。在最后一节中，我们讨论了在您的应用中使用Firebase远程配置的一些用例。
- en: In the next chapter, we will take a look at how to deploy your Flutter applications.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何部署您的Flutter应用程序。
