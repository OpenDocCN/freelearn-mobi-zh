- en: Firebase - Flutter's Best Friend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building apps using **Firebase** is one of the fastest-growing technology trends
    in the world. Using Firebase, developers can build apps at a rapid pace without
    managing the infrastructure, including authentication, storing and syncing data,
    securely hosting web assets, and cloud storage. Firebase has a base plan that
    is free, allowing 1 GB the storage and 100 simultaneous connections. If you wish
    to upgrade, you can check out the plans here: [https://firebase.google.com/pricing/](https://firebase.google.com/pricing/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting with Firebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Cloud Firestore database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase Cloud Messaging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase Remote Config
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting with Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first take a look at how to connect with Firebase. We will first need
    to ensure whether the connections to the Firebase are made properly; to do so,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Flutter project in your IDE or editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file `pubspec.yaml` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For details of the latest version of the Cloud Firestore plugin for Flutter,
    visit the Pub site:[ https://pub.dartlang.org/packages/cloud_firestore](https://pub.dartlang.org/packages/cloud_firestore).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to make your connection, in your IDE or using command line run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Firebase project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the connection has been made, the next step will be to create a Firebase
    project. So, let''s get started. Follow the given steps to create your project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the website [https://firebase.google.com](https://firebase.google.com)
    and log in or sign up. You can use your Google credentials to log in here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on Add Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you click this option, you will see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b04f4a22-a72d-44a7-b6d8-f5a196155b8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a Project name (for example: `Firebase Flutter Demo App` in our case).
    The **Project ID** gets auto-generated, or you could type a unique project ID
    of your own. They are globally unique identifiers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the country in Locations and then proceed to accept the terms and conditions
    before you click Create project**. **
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Create project option, and wait a few seconds before the Firebase
    console shows the message displayed in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38a93117-ba5f-4bb5-8838-54eef11a6727.png)'
  prefs: []
  type: TYPE_IMG
- en: If your screen shows the **Your new project is ready** text, as shown in the
    preceding screenshot, you can click the **Continue **button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once that is done, you will be shown the project settings dashboard of the
    app as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28e7ff8a-a759-44d1-917d-f019ee7c78ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose platform-specific Firebase configurations, based on which app platform
    you will be building an app for, and click on the respective icon. In our case,
    since we are building an Android app, we will click on the Android icon to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Registering an app using a package name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This step is needed to register your app''s platform-specific ID with Firebase.
    This will generate configuration files that we will add to our project folders.
    Note that in the top-level directory of your Flutter app, iOS and Android are
    two of the subdirectories that hold the respective platform-specific configuration
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66815961-af58-4e30-ae9e-39f3b71315bd.png)'
  prefs: []
  type: TYPE_IMG
- en: In the top-level directory of your Flutter app, you can see subdirectories;
    called Android and iOS. Here,you'll find platform-specific configuration files
    for iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important field here is the Android package name**. **This is generally
    the`applicationId` in your app-level `build.gradle` file. Another way to find
    the package name is to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Flutter app directory, check the `android/app/src/main/AndroidManifest.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Manifest tag, find the string value of the package, which will be
    the value of the package name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Firebase dialog, paste the copied package name from step 2 into the Android
    package name field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are developing the Flutter app for both iOS and Android, you need to
    register both the iOS and Android versions within the same Firebase project. But
    if you are developing it just for one platform, you can just click one of them.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can add the App nickname, which is an optional field. There is another
    optional field **Debug signing certificate SHA-1,** which has to be used in the
    same cases if the app uses features such as Google Sign in for Authentication,
    Dynamic Links, and Invites. In this case, you have to find the debug certificate
    fingerprint value that you can grab and paste in the field. Refer to the link
    here, [https://developers.google.com/android/guides/client-auth](https://developers.google.com/android/guides/client-auth),
    for understanding how to build client auth. Since, in this example, we are not
    using any of these features, we will leave it blank. Click on Register app.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and setting up the config file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next part will be to download and set up the config file. Follow the given
    steps to to download and set up the config file:'
  prefs: []
  type: TYPE_NORMAL
- en: After clicking **Register app**, the console in this step will generate the `google-services.json`
    file. Download this file to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the file has been downloaded, go to your Flutter app directory, and move
    the `google-services.json` file that you downloaded previously into the `android/app`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the file has been moved, in the Firebase console, click Next as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8cdc637f-5749-4b21-b578-dda78daa6801.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding Firebase SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have downloaded and set up the config file, the penultimate step
    is to add Firebase SDK to your project. The Google services plugin for Gradle
    ensures that the JSON file you downloaded is read. In order to enable Google APIs
    or Firebase services in your application, you have to add a `google-services`
    dependency. Two minor modifications are needed to `build.gradle` files to use
    the plugin. Take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project-level `build.gradle` (`<project>/build.gradle`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'App-level `build.gradle` (`<project>/<app-module>/build.gradle`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Click the **Sync Now** option to complete this process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verifying the configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the previous steps are complete, we have to verify whether your Flutter
    app is connected to Firebase. To ensure this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Build the project and run it on the device connected to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the app gets run on the phone, the Firebase console automatically detects
    the configurations and displays a success message as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/964ea405-ea49-4315-9399-35ac557b61bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you click Continue to console, you will be taken to the console showing
    the project name and the other settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d330d3de-d403-4b32-ab77-32c097d27638.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will see how to connect to the Cloud Database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Cloud Firestore Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the Firebase-Flutter set up is complete, you are all set to build the
    app. We will now set up a Cloud Firestore database and initialize some values.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Under the Develop option, click on Database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the panel shown, click Create database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/82461193-593c-406a-bb05-fb2bf5622ff1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking, you will see a pop-up panel: Security rules for Cloud Firestore.
    Select Start in test mode and enable it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ead5da71-68cd-4755-9cfb-841c8a461650.png)'
  prefs: []
  type: TYPE_IMG
- en: We select test mode because we want anyone with the database reference to be
    able to read or write to the database. When you build the production version of
    the app, ensure you set up security rules. You can read about these rules here: [https://firebase.google.com/docs/reference/rules/rules](https://firebase.google.com/docs/reference/rules/rules). 
    After clicking Enable, the Cloud Firestore will be provisioned with security rules
    and will be ready for use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the following panel, click Add collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e7ad662-eb70-47ef-935d-4a59deaec5e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We presume that we would have just one collection in Firestore, called Votes.
    A **collection** is a set of documents that comprise the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0fd3ae41-6da4-4e00-b64b-3ba4e23acbec.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A collection must contain at least one document, which is Cloud Firestore's
    unit of storage. You can either use an auto-generated ID or have a custom ID.
    In our case, we use partyvotes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the existing Field, enter the value of the name (in our case, it''s VoteCount),
    select the data Type, then enter the Value of partyvotes. Since its an Integer,
    we select the number and set its initial value to be 0:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7cb97e95-da8c-4ecc-87d4-37ab0a25e859.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After adding several documents to your collection, your database should look
    something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29a54618-ee2e-4166-ab11-315b67d494c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Firestore is a NoSQL database, which means that we would not be working with
    rows and columns. Now we will build the layout of the app. Using the Firestore
    details, we will construct the list layout, which will generate the list items
    runtime based on the values in the Firestore and read/update the fresh values
    when tapped on the list item into the Firestore database. The following is the
    `main.dart` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We have the collection ready on Firestore Cloud. In the previous example, we
    have used the `party`object. It''s time we now use the Firestore cloud data from
    our collection to be shown. We can do that by calling Cloud Firestore using a `Firestore.instance`reference.
    For example, if you wish to call a specific collection from your Firestore Cloud
    database, you can use the following command to return a stream of snapshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Streams are of two types: single subscription or broadcast. Streams are responsible
    for providing an asynchronous sequence of data. User-generated events and data
    read from files are the two data sequences. Now, using `StreamBuilder` widget,
    we will inject the stream of data into the user interface we have created. One
    of the classic use cases of the `StreamBuilder` is that, whenever there is a change
    in the Firestore values, the list gets updated automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for the `_buildBody` method in the previous code and replace the content
    with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adding the preceding snippet will produce some errors. The `_buildListItem`
    method still thinks it's getting a map. Hence, we will need to make a couple of
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, make the method to accept `DocumentSnapshot` instead of a list of
    a map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, use the constructor `Record.fromSnapshot()` to build the record.
    The method''s updated code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use the `onTap: ()` method to ensure whenever a list item is clicked,
    the votes are updated into the Firestore database. Whenever you click List Item, Cloud
    Firestore notifies all listeners with the updated snapshot. The app is actively
    engaged using `StreamBuilder`, which acts to update with the new data. For a single
    user, it is fine, but when you have multiple users, there is a chance of **Race
    Condition** may occur.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code for `main.dart` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once you run the code, try clicking on List Items and you will see the updates
    values mapped on the Firestore Cloud database. You could also try updating the
    List Item names (in our case, the Party names) in the Firestore Cloud database,
    and you will see the List Item option updating.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase Cloud Messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Firebase Cloud Messaging** (**FCM**) is an effective way to drive engagement
    within the app using the app notification.  Using FCM, you can send two kinds
    of messages to the client device:'
  prefs: []
  type: TYPE_NORMAL
- en: Notification messages that are directly handled by FCM SDK
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data messages
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both these messages have a maximum payload of 4KB. When sending messages from
    the Firebase console, there is a 1,024 character limit. Firebase has Cloud Messaging
    as well as In-App messaging, but in this section, we will discuss only Firebase
    Cloud messaging.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Firebase console, click on **Grow | Cloud Messaging** in the left panel.
    Follow this by clicking Send your first message**.** as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/564de0dc-d7cb-4179-9abb-037698ad19ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To test the message on your device, FCM tokens are needed. Use the following
    Android code to generate these tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: FCM also allows configuring messages specific to targets such as `GeoLocations`,
    versions of the app, Languages, and User Audiences. This case is ideal when you
    wish to send notifications to a specific set of users.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase Remote Config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Firebase's Remote Config API, you can make changes to the app without
    the user actually downloading an app update. One example of this is when you push
    a new update to the app in production, you can show the pop-up message to the
    user when they launch the app about the update.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up Firebase Remote Config, head over to the Grow tab in the Firebase
    console and click on Remote Config as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e9edec7-62aa-44a4-a151-fc3015d5d364.png)'
  prefs: []
  type: TYPE_IMG
- en: Add the Parameter key and the Default value. There is an optional field for
    adding the description. Click Add Parameter to proceed. Avoid storing any confidential
    information in the remote config. Firebase also allows the setting of conditions
    for the parameter. For example, if you want to show a specific welcome message
    to a user in India and a different message to a user in the USA, remote configuration
    can come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Disclaimer: Some of the code files are are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0) and
    are available on [https://firebase.google.com/docs/cloud-messaging/android/client](https://firebase.google.com/docs/cloud-messaging/android/client).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started this chapter by looking at how Firebase can help us build apps quicker
    using the Firestore Cloud database—the NoSQL way to help app developers build
    apps in real-time. We also looked at an example that captured `ListView` with
    the Firestore Cloud database. This section was followed by looking at how Cloud
    messaging works. In the last section, we discussed some use cases for using Firebase
    Remote Config for your apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at how to deploy your Flutter applications.
  prefs: []
  type: TYPE_NORMAL
