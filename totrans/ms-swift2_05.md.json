["```swift\nclass MyClass {\n  // MyClass definition\n}\n\nstruct MyStruct {\n  // MyStruct definition\n}\n```", "```swift\nstruct MyStruct {\n  let c = 5\n  var v = \"\"\n}\n\nclass MyClass {\n  let c = 5\n  var v = \"\"\n}\n```", "```swift\nvar myStruct = MyStruct()\nvar myClass = MyClass()\n```", "```swift\nvar myStruct = MyStruct(v: \"Hello\")\n```", "```swift\nstruct MyStruct {\n  let c: Int\n  var v = \"\"\n}\n```", "```swift\nvar myStruct = MyStruct(c: 10, v: \"Hello\")\n```", "```swift\nvar x = myClass.c\nmyClass.v = \"Howdy\"\n```", "```swift\nstruct EmployeeStruct {\n  var firstName = \"\"\n  var lastName = \"\"\n  var salaryYear = 0.0\n}\n\npublic class EmployeeClass {\n  var firstName = \"\"\n  var lastName = \"\"\n  var salaryYear = 0.0\n}\n```", "```swift\nself.firstName = \"Jon\"\nself.lastName = \"Hoffman\"\n```", "```swift\nvar salaryWeek: Double {\nget{\n  return self.salaryYear/52\n  }\n}\n```", "```swift\nvar salaryWeek: Double {\n  return self.salaryYear/52\n}\n```", "```swift\nvar salaryWeek: Double {\n  get {\n    return self.salaryYear/52\n  }\n  set (newSalaryWeek){\n    self.salaryYear = newSalaryWeek*52\n  }\n}\n```", "```swift\nvar salaryWeek: Double {\n  get{\n    return self.salaryYear/52\n  }\t\n  set{\n    self.salaryYear = newValue*52\n  }\n}\n```", "```swift\npublic class EmployeeClass {\n  var firstName = \"\"\n  var lastName = \"\"\n  var salaryYear = 0.0\n  var salaryWeek: Double {\n    get{\n      return self.salaryYear/52\n    }\n    set (newSalaryWeek){\n      self.salaryYear = newSalaryWeek*52\n    }\n  }\n}\n```", "```swift\nstruct EmployeeStruct {\n    var firstName = \"\"\n    var lastName = \"\"\n    var salaryYear = 0.0\n    var salaryWeek: Double {\n        get{\n            return self.salaryYear/52\n        }\n        set (newSalaryWeek){\n            self.salaryYear = newSalaryWeek*52\n        }\n    }\n}\n```", "```swift\nvar f = EmployeeStruct(firstName: \"Jon\", lastName: \"Hoffman\", salaryYear: 39000)\n\nprint(f.salaryWeek) //prints 750.00 to the console\nf.salaryWeek = 1000\nprint(f.salaryWeek) //prints 1000.00 to the console\nprint(f.salaryYear) //prints 52000.00 to the console\n```", "```swift\nvar salaryYear: Double = 0.0 {\n  willSet(newSalary) {\n    print(\"About to set salaryYear to \\(newSalary)\")\n  }\n  didSet {\n    if salaryWeek > oldValue {\n      print(\"\\(firstName) got a raise\")\n    }\n    else {\n      print(\"\\(firstName) did not get a raise\")\n    }\n  }\n}\n```", "```swift\nwillSet {\n    print(\"About to set salaryYear to \\(newValue)\")\n}\n```", "```swift\nfunc getFullName() -> String {\n    return firstName + \" \" + lastName\n}\n```", "```swift\nvar e = EmployeeClass()\nvar f = EmployeeStruct(firstName: \"Jon\", lastName: \"Hoffman\", salaryYear: 50000)\n\ne.firstName = \"Jon\"\ne.lastName = \"Hoffman\"\ne.salaryYear = 50000.00\n\nprint(e.getFullName()) //Jon Hoffman is printed to the console\nprint(f.getFullName()) //Jon Hoffman is printed to the console\n```", "```swift\nfunc giveRaise(amount: Double) {\n  self.salaryYear += amount\n}\n```", "```swift\nmutating func giveRase(amount: Double) {\n    self.salaryYear += amount\n}\n```", "```swift\nfunc compareFirstName(firstName: String) -> Bool {\n  return self.firstName == firstName\n}\n```", "```swift\ninit() {\n  //Perform initialization here\n}\n```", "```swift\ninit() {\n  self.firstName = \"\"\n  self.lastName = \"\"\n  self.salaryYear = 0.0\n}\n\ninit(firstName: String, lastName: String) {\n  self.firstName = firstName\n  self.lastName = lastName\n  self.salaryYear = 0.0\n}\n\ninit(firstName: String, lastName: String, salaryYear: Double) {\n  self.firstName = firstName\n  self.lastName = lastName\n  self.salaryYear = salaryYear\n}\n```", "```swift\nvar g = EmployeeClass()\nvar h = EmployeeStruct(firstName: \"Me\", lastName: \"Moe\")\nvar i = EmployeeClass(firstName: \"Me\", lastName: \"Moe\", salaryYear: 45000)\n```", "```swift\ninit(employeeWithFirstName firstName: String, lastName lastName: String, andSalary salaryYear: Double) {\n  self.firstName = firstName\n  self.lastName = lastName\n  self.salaryYear = salaryYear\n}\n```", "```swift\nvar i = EmployeeClass(employeeWithFirstName: \"Me\", lastName: \"Moe\", andSalary: 45000)\n```", "```swift\ninit?(firstName: String, lastName: String, salaryYear: Double) {\n  self.firstName = firstName\n  self.lastName = lastName\n  self.salaryYear = salaryYear\n  if self.salaryYear < 20000 {\n    return nil\n  }\n}\n```", "```swift\nif let f = EmployeeClass(firstName: \"Jon\", lastName: \"Hoffman\", \n  salaryYear: 29000) {\n  print(f.getFullName())\n} else {\n  print(\"Failed to initialize\")\n}\n```", "```swift\nif let f = EmployeeClass(firstName: \"Jon\", lastName: \"Hoffman\", salaryYear: 19000) {\n  print(f.getFullName())\n  print(f.compareFirstName(\"Jon\"))\n} else {\n  print(\"Failed to initialize\")\n}\n```", "```swift\nprivate struct EmployeeStruct {}\npublic class EmployeeClass {}\ninternal class EmployeeClass2 {}\npublic var firstName = \"Jon\"\ninternal var lastName = \"Hoffman\"\nprivate var salaryYear = 0.0\npublic func getFullName() -> String {}\nprivate func giveRaise(amount: Double) {}\n```", "```swift\nclass Plant {\n    var height = 0.0\n    var age = 0\n\n    func growHeight(inches: Double) {\n        self.height +=  inches;\n    }\n}\n```", "```swift\nclass Tree: Plant {\n  private var limbs = 0\n\n  func limbGrow() {\n    self.limbs++\n  }\n  func limbFall() {\n    self.limbs--\n  }\n}\n```", "```swift\nvar tree = Tree()\ntree.age = 5\ntree.height = 4\ntree.limbGrow()\ntree.limbGrow()\n```", "```swift\nclass PineTree: Tree {\n  var needles = 0\n}\n\nclass OakTree: Tree {\n  var leaves = 0\n}\n```", "```swift\nclass Plant {\n  var height = 0.0\n  var age = 0\n\n  func growHeight(inches: Double) {\n    self.height +=  inches;\n  }\n\n  func getDetails() -> String {\n    return \"Plant Details\"\n  }\n}\n```", "```swift\nclass Tree: Plant {\n  private var limbs = 0\n\n  func limbGrow() {\n    self.limbs++\n  }\n  func limbFall() {\n    self.limbs--\n  }\n\n  override func getDetails() -> String {\n    return \"Tree Details\"\n  }\n}\n```", "```swift\nvar plant = Plant()\nvar tree = Tree()\nprint(\"Plant: \\(plant.getDetails())\")\nprint(\"Tree: \\(tree.getDetails())\")\n```", "```swift\nPlant: Plant Details\nTree: Tree Details\n```", "```swift\nfunc getDetails() -> String {\n    return \"Height:  \\(height)  age:  \\(age)\"\n}\n```", "```swift\noverride func getDetails() -> String {\n  var details = super.getDetails()\n  return \"\\(details)  limbs:  \\(limbs)\"\n}\n```", "```swift\nvar tree = Tree()\ntree.age = 5\ntree.height = 4\ntree.limbGrow()\ntree.limbGrow()\nprint(tree.getDetails())\n```", "```swift\nHeight:  4.0  age:  5  limbs:  2\n```", "```swift\noverride func getDetails() -> String {\n  let details = super.getDetails()\n  return \"\\(details)  Leaves:  \\(leaves)\"\n}\n```", "```swift\nvar tree = OakTree()\ntree.age = 5\ntree.height = 4\ntree.leaves = 50\ntree.limbGrow()\ntree.limbGrow()\nprint(tree.getDetails())\n```", "```swift\nHeight:  4.0  age:  5  limbs:  2  Leaves:  50\n```", "```swift\nvar description: String {\n  get {\n    return \"Base class is Plant.\"\n  }\n}\n```", "```swift\noverride var description: String {\n  return \"\\(super.description)  I am a Tree class.\"\n}\n```", "```swift\nprotocol MyProtocol {\n  //protocol definition here\n}\n```", "```swift\nclass myClass: MyProtocol {\n  //class implementation here\n}\n```", "```swift\nclass MyClass: MyProtocol, AnotherProtocol, ThirdProtocol {\n  // class implementation here\n}\n```", "```swift\nClass MyClass: MySuperClass, MyProtocol, MyProtocol2 {\n  // Class implementation here\n}\n```", "```swift\nprotocol FullName {\n  var firstName: String {get set}\n  var lastName: String {get set}\n}\n```", "```swift\n var readOnly: String {get}\n```", "```swift\nclass Scientist: FullName {\n  var firstName = \"\"\n  var lastName = \"\"\n}\n```", "```swift\nprotocol FullName {\n  var firstName: String {get set}\n  var lastName: String {get set}\n\n  func getFullName() -> String\n}\n```", "```swift\nclass Scientist: FullName {\n  var firstName = \"\"\n  var lastName = \"\"\n  var field = \"\"   \n\n  func getFullName() -> String {\n    return \"\\(firstName) \\(lastName) studies \\(field)\"\n  }\n}\n```", "```swift\nstruct FootballPlayer: FullName {\n    var firstName = \"\"\n    var lastName = \"\"\n    var number = 0\n\n    func getFullName() -> String {\n        return \"\\(firstName) \\(lastName) has the number \\(number)\"\n    }\n}\n```", "```swift\nvar scientist = Scientist()\nscientist.firstName = \"Kara\"\nscientist.lastName = \"Hoffman\"\nscientist.field = \"Physics\"\n\nvar player = FootballPlayer();\nplayer.firstName = \"Dan\"\nplayer.lastName = \"Marino\"\nplayer.number = 13\n\nvar person: FullName\nperson = scientist\nprint(person.getFullName())\nperson = player\nprint(player.getFullName())\n```", "```swift\n@objc protocol Phone {\n  var phoneNumber: String {get set}\n  optional var emailAddress: String {get set}\n\n  func dialNumber()\n  optional func getEmail()\n}\n```", "```swift\nextension String {\n  //add new functionality here\n}\n```", "```swift\nextension String {\n    var firstLetter: Character {\n        get {\n            return self.characters.first\n        }\n    }\n\n    func reverse() -> String {\n        var reverse = \"\"\n        for letter in self.characters {\n            reverse = \"\\(letter)\" + reverse\n        }\n        return reverse\n    }\n}\n```", "```swift\nclass MyClass {\n  var name = \"\"\n}\n\nstruct MyStruct {\n  var name = \"\"\n}\n```", "```swift\nfunc showPass(myc: MyClass, var mys: MyStruct) {\n    print(\"Received Class: \\(myc.name) Struct: \\(mys.name)\")\n    myc.name = \"Set in function - class\"\n    mys.name = \"Set in function - struct\"\n    print(\"Set  Class: \\(myc.name) Struct: \\(mys.name)\")\n}\n```", "```swift\nvar mci = MyClass()\nmci.name = \"set in main - class\"\n\nvar msi = MyStruct()\nmsi.name = \"set in main - struct\"\n\nprint(\"Main  Class: \\(mci.name) Struct: \\(msi.name)\")\n\nshowPass(mci, msi)\nprint(\"Main  Class: \\(mci.name) Struct: \\(msi.name)\")\n```", "```swift\nReceived Class: set in main - class Struct: set in main - struct\nSet Class: Set in function - class Struct: Set in function - struct\nMain Class: Set in function - class Struct: set in main – struct\n```", "```swift\nclass MyClass {\n  var name = \"\"\n  init(name: String) {\n    self.name = name\n    print(\"Initializing class with name \\(self.name)\")\n  }\n  deinit {\n   print(\"Releasing class with name \\(self.name)\")\n  }\n}\n```", "```swift\n  var class1ref1: MyClass? = MyClass(name: \"One\")\n  var class2ref1: MyClass? = MyClass(name: \"Two\")\n  var class2ref2: MyClass? = class2ref1\n\n  print(\"Setting class1ref1 to nil\")\n  class1ref1 = nil\n\n  print(\"Setting class2ref1 to nil\")\n  class2ref1 = nil\n\n  print(\"Setting class2ref2 to nil\")\n  class2ref2 = nil\n```", "```swift\nInitializing class with name One\nInitializing class with name Two\nSetting class1ref1 to nil\nReleasing class with name One\nSetting class2ref1 to nil\nSetting class2ref2 to nil\nReleasing class with name Two\n```", "```swift\nclass MyClass1 {\n  var name = \"\"\n  var class2: MyClass2?\n\n  init(name: String) {\n    self.name = name\n    print(\"Initializing class with name \\(self.name)\")\n  }\n  deinit {\n    print(\"Releaseing class with name \\(self.name)\")\n  }\n\n}\n\nclass MyClass2 {\n  var name = \"\"\n  var class1: MyClass1?\n\n  init(name: String) {\n    self.name = name\n    print(\"Initializing class2 with name \\(self.name)\")\n  }\n  deinit {\n    print(\"Releaseing class2 with name \\(self.name)\")\n  }\n\n}\n```", "```swift\nvar class1: MyClass1? = MyClass1(name: \"Class1\")\nvar class2: MyClass2? = MyClass2(name: \"Class2\")\n//class1 and class2 each have a reference count of 1\n       .\nclass1?.class2 = class2\n//Class2 now has a reference count of 2\nclass2?.class1 = class1\n//class1 now has a reference count of 2\n       .\nprint(\"Setting classes to nil\")\nclass2 = nil\n//class2 now has a reference count of 1, not destroyed\nclass1 = nil\n//class1 now has a reference count of 1, not destroyed\n```", "```swift\nclass MyClass3 {\n    var name = \"\"\n    unowned let class4: MyClass4\n\n    init(name: String, class4: MyClass4) {\n        self.name = name\n        self.class4 = class4\n        print(\"Initializing class3 with name \\(self.name)\")\n    }\n    deinit {\n        print(\"Releasing class3 with name \\(self.name)\")\n    }\n\n}\n\nclass MyClass4{\n    var name = \"\"\n    var class3: MyClass3?\n\n    init(name: String) {\n        self.name = name\n        print(\"Initializing class4 with name \\(self.name)\")\n    }\n    deinit {\n        print(\"Releasing class4 with name \\(self.name)\")\n    }\n}\n```", "```swift\nvar class4 = MyClass4(name: \"Class4\")\nvar class3: MyClass3? = MyClass3(name: \"class3\", class4: class4)\n\nclass4.class3 = class3\n\nprint(\"Classes going out of scope\")\n```", "```swift\nInitializing class4 with name Class4\nInitializing class3 with name class3\nClasses going out of scope.\nReleasing class4 with name Class4\nReleasing class3 with name class3\n```", "```swift\nclass MyClass5 {\n  var name = \"\"\n  var class6: MyClass6?\n  init(name: String) {\n    self.name = name\n    print(\"Initializing class5 with name \\(self.name)\")\n  }\n  deinit {\n    print(\"Releasing class5 with name \\(self.name)\")\n  }\n}\n\nclass MyClass6 {\n  var name = \"\"\n  weak var class5: MyClass5?\n  init(name: String) {\n    self.name = name\n    print(\"Initializing class6 with name \\(self.name)\")\n  }\n  deinit {\n    print(\"Releasing class6 with name \\(self.name)\")\n  }\n}\n```", "```swift\nvar class5: MyClass5? = MyClass5(name: \"Class5\")\nvar class6: MyClass6? = MyClass6(name: \"Class6\")\n\nclass5?.class6 = class6\nclass6?.class5 = class5\n\nprint(\"Classes going out of scope \")\n```", "```swift\nInitializing class5 with name Class5\nInitializing class6 with name Class6\nClasses going out of scope.\nReleasing class5 with name Class5\nReleasing class6 with name Class6\n```"]