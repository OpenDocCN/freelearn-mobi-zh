["```kt\n<color name=\"red\">#ff0000</color>\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.os.Bundle;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.app.Activity;\n\npublic class FullscreenActivity extends Activity{\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n //Set our game to full screen mode\n        getWindow().setFlags\n        (WindowManager.LayoutParams.FLAG_FULLSCREEN,\n        WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n //Set no title on screen\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n\n setContentView(new GameView(this));\n    }\n}\n\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"nikhil.nikmlnkr.game\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity\n            android:screenOrientation=\"landscape\"\n            android:name=\".FullscreenActivity\"\n            android:configChanges=\"orientation\n            |keyboardHidden|screenSize\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/FullscreenTheme\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\n                \"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\n\npublic class BackgroundImage {\n\n    private int xc, yc, dxc;\n    private Bitmap backgroundImage;\n\n    public BackgroundImage(Bitmap res)\n    {\n        backgroundImage = res;\n    }\n\n    public void setVector(int dxc)\n    {\n        this.dxc = dxc;\n    }\n\n    public void update()\n    {\n        xc += dxc;\n        if(xc < -GameView.WIDTH){\n            xc=0;\n        }\n    }\n\n    public void draw(Canvas canvas)\n    {\n        canvas.drawBitmap(backgroundImage, xc, yc,null);\n        if(xc < 0)\n        {\n            canvas.drawBitmap\n            (backgroundImage, xc + GameView.WIDTH, yc, null);\n        }\n    }\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\nimport android.graphics.Canvas;\nimport android.view.SurfaceHolder;\n\npublic class MainGameThread extends Thread\n{\n    private int framesPerSecond = 30;\n    private double averageFPS;\n    private SurfaceHolder surfaceHolder;\n    private GameView gameView;\n    private boolean running;\n    public static Canvas canvas;\n\n    public MainGameThread(SurfaceHolder surfaceHolder, GameView \n    gameView){\n        super();\n        this.surfaceHolder = surfaceHolder;\n        this.gameView = gameView;\n    }\n\n    public void setRunning(boolean b){\n        running=b;\n    }\n\n    @Override\n    public void run(){\n        long startTime;\n        long timeMillis;\n        long waitTime;\n        long totalTime = 0;\n        int frameCount =0;\n        long targetTime = 1000/framesPerSecond;\n\n        while(running) {\n            startTime = System.nanoTime();\n            canvas = null;\n\n            //try locking the canvas for pixel editing\n            try {\n                canvas = this.surfaceHolder.lockCanvas();\n                synchronized (surfaceHolder) {\n                    this.gameView.update();\n                    this.gameView.draw(canvas);\n                }\n            } catch (Exception e) {\n            }\n            finally{\n                if(canvas!=null)\n                {\n                    try {\n                        surfaceHolder.unlockCanvasAndPost(canvas);\n                    }\n                    catch(Exception e){e.printStackTrace();}\n                }\n            }\n            timeMillis = (System.nanoTime() - startTime) / 1000000;\n            waitTime = targetTime-timeMillis;\n\n            try{\n                this.sleep(waitTime);\n            }catch(Exception e){}\n\n            totalTime += System.nanoTime()-startTime;\n            frameCount++;\n            if(frameCount == framesPerSecond){\n                averageFPS = 1000/((totalTime/frameCount)/1000000);\n                frameCount = 0;\n                totalTime = 0;\n                System.out.println(averageFPS);\n            }\n        }\n    }\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.content.Context;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.view.MotionEvent;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\n\npublic class GameView extends SurfaceView implements SurfaceHolder.Callback {\n    public static final int WIDTH = 1920;\n    public static final int HEIGHT = 1080;\n    private MainGameThread mainThread;\n    private BackgroundImage bgImg;\n\n    public GameView(Context context){\n        super(context);\n\n        //set callback to the surfaceholder to track events\n        getHolder().addCallback(this);\n\n        mainThread = new MainGameThread(getHolder(), this);\n\n        //make gamePanel focusable so it can handle events\n        setFocusable(true);\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, \n    int width, int height){}\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder){\n        boolean retry = true;\n        while(retry){\n            try{\n                mainThread.setRunning(false);\n                mainThread.join();\n            }catch(InterruptedException e){e.printStackTrace();}\n            retry = false;\n        }\n\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder){\n\n        bgImg = new BackgroundImage(BitmapFactory.decodeResource\n        (getResources(), R.drawable.background_image));\n        bgImg.setVector(-5);\n\n        //we can safely start the game loop\n        mainThread.setRunning(true);\n        mainThread.start();\n\n    }\n    @Override\n    public boolean onTouchEvent(MotionEvent event){\n        return super.onTouchEvent(event);\n    }\n\n    public void update(){\n        bgImg.update();\n    }\n\n    @Override\n    public void draw(Canvas canvas){\n        final float scaleFactorX = getWidth()/WIDTH;\n        final float scaleFactorY = getHeight()/HEIGHT;\n        if(canvas != null) {\n            final int savedState = canvas.save();\n            canvas.scale(scaleFactorX, scaleFactorY);\n            bgImg.draw(canvas);\n            canvas.restoreToCount(savedState);\n        }\n    }\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.app.Activity;\n\npublic class FullscreenActivity extends Activity{\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        //Set our game to full screen mode\n        getWindow().setFlags\n        (WindowManager.LayoutParams.FLAG_FULLSCREEN,\n        WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n        //Set no title on screen\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n\n        setContentView(new GameView(this));\n    }\n}\n\n```"]