- en: Chapter 2. Structuring and Planning a Game Using iOS 9 Storyboards and Segues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Video game development has had an interesting history. It started as an offshoot
    of both electrical engineering and computer science. Games were a great challenge
    for engineers to make the most out of the limited hardware and, of course, make
    something fun. Today, video games and video game development are still built on
    those foundations of technology, math, and engineering but, for decades, have
    also been major players in the world of entertainment, storytelling, and media.
  prefs: []
  type: TYPE_NORMAL
- en: Be it if you are a major studio, a small team, or creating games all by yourself,
    planning and structuring your game projects can give you the foundation needed
    to save time in the development process, divide the work out to others if on a
    team, and of course, bring your game to life as close as possible to how you imagined
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with iOS 5, Apple took a page from the entertainment industry in how
    to structure and plan a project, big or small; by using the concept of storyboards.
    Storyboards are a graphic representation of the various steps and structures of
    a project; be it an animation, a movie, or in our case, iOS games. Storyboards
    will graphically show the flow of a production or app. In animation, for example,
    storyboards are used to flesh out major frames or story points of the production.
    Once it's agreed on as to what the series of events in a scene will be, animators
    will animate around those key points. Depending on whether the production is prelay
    or ADR, voice acting could also be placed into the storyboard process, which gives
    the animators even more specific content to work with.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the actual game application, storyboards can represent major
    parts of your game, such as the Intro scene, Opening Menu screen, Pause Screen,
    Game Over Screen, or the generic look of a main game level. Apple named these
    structures in Xcode **storyboards**, and the paths between them are known as **segues**.
    Throughout this chapter, we shall be looking into how to make use of these features
    while making a game app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Structuring and Planning a Game Using iOS 9 Storyboards and Segues](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding is an example of a simple iOS Storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Model-View-Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get into storyboards in iOS 9, it's best that we first discuss the
    basic flow of an iOS app and the concept of **Model-View-Controller** (**MVC**).
    Model-View-Controller is an architectural paradigm used in software engineering,
    programming, and even now in web design. We can think of the model portion of
    MVC as the logic or *brains* of an application's behavior. This logic is usually
    independent of the user interface and determines what to do with the app's data.
  prefs: []
  type: TYPE_NORMAL
- en: We've actually already gone over the model portion of MVC! The Swift programming
    language discussed in the previous chapter is that model; this is the case with
    its Objective-C predecessor and any other programming language used in iOS or
    any other game development. Your game's code controls what to do with the player,
    level, and enemy/goal data.
  prefs: []
  type: TYPE_NORMAL
- en: The view portion of MVC is the visual representation of the model. This of course
    would include the numerous visual aspects of our games, from our player's animation
    frames, various in-game stats on the HUD, particle effects, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The controller portion of MVC can be thought of as the *glue* that holds the
    model and view together. It is also the point at which the user of your game interacts
    with. Be it actions, such as a button press, a basic touch, a swipe, or other
    gestures, recognized by your iOS device, the controller takes that user input,
    manipulates your model and then the model updates your view accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Model-View-Controller](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This diagram is taken from Apple's own Adventure Game Example.
  prefs: []
  type: TYPE_NORMAL
- en: When we work with iOS apps, the first recommended entry point for code and storyboard
    info is the Root View Controller. As we'll come to find out, MVC is intrinsically
    built into iOS app development and the Xcode IDE. Storyboards are a collection
    of different types of view controllers with varying tasks that are linked by segues.
  prefs: []
  type: TYPE_NORMAL
- en: An iOS app's lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we move on to working with storyboards, segues, and the foundation of
    our game apps, it's best we go over the overall lifecycle of an iOS app as it's
    important to know the entry points of our code and various objects/structures
    of our apps.
  prefs: []
  type: TYPE_NORMAL
- en: Insert app lifecycle imagery here before we move on to working with storyboards,
    segues, and the foundation of our game apps. It's best we go over the overall
    lifecycle of an iOS app as it's important to know the entry points of our code
    and various objects/structures of our apps.
  prefs: []
  type: TYPE_NORMAL
- en: '![An iOS app''s lifecycle](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html](https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Anyone who has worked with C/C++, Java, or other languages will be familiar
    with the `main()` function. The `main()` function is used to designate your program's
    main entry point. The preceding example is how Apple designates the typical main
    function for apps. Essentially what this is doing is calling the first class in
    the typical lifecycle of iOS apps, the `AppDelegate` class.
  prefs: []
  type: TYPE_NORMAL
- en: The main() function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s the code with the `main()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note how the `main()` function is written in Objective-C. Swift again makes
    declaring the entry of your application easier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: While building an iOS app with Swift, the `main.m` file seen in prior Objective-C
    projects is no longer needed. Instead, we use an Attribute call, `@UIApplicationMain`,
    just before the declaration of the class that is first called.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Swift attributes**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes, beginning with the *at* character, `@`, are used to add additional
    information to a declaration or a type. In Swift, they have the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As in other programming languages, attributes, depending on their functionality,
    can be used to describe objects, functions, and even entire classes.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `@objc` attribute is used to declare code that is readable
    in Objective-C.
  prefs: []
  type: TYPE_NORMAL
- en: As we'll see while using and linking various objects in the storyboards with
    our code, the attributes `@IBOutlet` and `@IBAction` are used to describe objects
    and functions representing objects we create in Xcode's Interface Builder.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss more on Attributes in [Chapter 7](part0055_split_000.html#1KEEU2-d06b23b4a4554b3182353558917969c2
    "Chapter 7. Publishing Our iOS Game"), *Publishing Our iOS 9.0 Game*.
  prefs: []
  type: TYPE_NORMAL
- en: The UIApplication class/object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`UIApplication` is the object responsible for controlling an app''s event-loop
    as well as handling other upper-level app processes. Game app or not, this is
    present in all iOS apps and is what is first called at the main entry point and
    works together with the `AppDelegate` class. Though it is possible to subclass
    `UIApplication`, it''s usually not recommended. Customizations to what your game
    does during various app states are what we use the `AppDelegate` class and `ViewControllers`
    for, even if storyboards are not utilized (that is if you choose to mostly hardcode
    your game).'
  prefs: []
  type: TYPE_NORMAL
- en: The AppDelegate class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can think of the `AppDelegate` class as your app's main hub. It's the top
    level of general customization for your game. While making an app in Swift (game
    or not), it's the class that is given the `@UIApplicationMain` attribute because
    it's the general first entry of your game's model/code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code that Apple provides with almost every iOS app preset in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is the direct code and comments (as of Xcode 6.4) that Apple provides for
    us when using the iOS 9 game preset. Before we dive into structuring our games
    with storyboards and the two main frameworks (SpriteKit and SceneKit), it's best
    to understand what happens in this class. Events that happen to your game app
    relating to the device, particularly those that are outside of the player's control,
    such as incoming phone calls, notifications, and the device shutting down due
    to low battery power, as well as those controlled by the player (that is pausing
    the game), are handled by this class. As we see, Apple already provides great
    instructions for what each function of this class does, so be sure to review them.
    We will come back to these as we create our games and handle those specific situations.
    Note that the `AppDelegate` class has an optional variable (meaning it can be
    nil) named window and is of the type, `UIWindow`. A `UIWindow` object is a child
    of `UIView` and can allocate various displays/objects that can be put into the
    view of the user. Technically, we can use objects of `UIWindow` and `UIView` in
    code directly to create the visuals of our game, but Apple provides more robust
    objects that handle both the user's interaction with the screen and view. These
    objects are what make up iOS storyboards; the ably named, `ViewControllers`.
  prefs: []
  type: TYPE_NORMAL
- en: View controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: View controllers are probably one of the most vital structures of iOS development
    and are what storyboards are visually representing when designing them in Xcode's
    Interface Builder. In terms of their typical entry point order, it's `MAIN` -->
    `AppDelegate` --> `RootViewController` --> [calls to any additional `ViewControllers`
    instance].
  prefs: []
  type: TYPE_NORMAL
- en: 'When we create a new app project in Xcode, Apple will make a default Root View
    Controller named `ViewController` for us. Here''s it''s code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the starter code given to us in Xcode with the default `ViewController.swift`
    class. As we see, it's a subclass of `UIViewController` and thus inherits all
    of its parent class's functions. One of them shown here is the function `viewDidLoad()`.
    In Swift, when we wish to override a function of a parent class, we use the keyword
    `override` before the function declaration. We also see that `super.viewDidLoad()`
    is called as well. What this does is call the parent's own version of this function
    before we add our own code/customizations and is recommended when using any of
    the functions of `UIViewController`. The `UIViewController` functions handle various
    view states; `viewDidLoad()` handles when the view is first loaded and is called
    once for the life of the `UIViewController` object during an app's lifecycle.
    If we want to call some code every time a view is seen, we can use the `viewDidAppear()`
    function of `UIViewController` instead.
  prefs: []
  type: TYPE_NORMAL
- en: Here's a visual representation of these view states.
  prefs: []
  type: TYPE_NORMAL
- en: '![View controllers](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here storyboards and segues, as we'll see, essentially give us a visual and
    customizable representation of these very states and the transitions between them
    without using too much code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To dive even deeper into the `UIViewController` methods, check out Apple''s
    documentation on the subject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For anyone familiar with the game development engine Unity (which has scripts
    written in either C#, JavaScript, or the Python derivative), one way we can imagine
    the `UIViewController` functions `viewDidLoad()` and `viewDidAppear()` is that
    they are somewhat similar to the Unity functions `Awake()` and `OnEnabled()`,
    respectively. One function is called when the scene is first loaded and the other
    just before the first frame that the object is visible/enabled. The `UIViewController`
    functions however are on a more upper-level basis for the entirety of the app
    as opposed to a per `gameObject` basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information and graphics on the entire iOS app lifecycle, check out
    the full documentation here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html](https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html)'
  prefs: []
  type: TYPE_NORMAL
- en: View controller types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: View controllers come in a number of types and we can create our own by subclassing
    them. The two main types are **container** view controller, which hold other view
    controllers, and content view controllers, which as we can imagine, are what display
    the content. Content view controllers include the `RootViewController`, which
    is the first view controller accessed after the app's entry point and is also
    the first view controller seen in the default `Main.Storyboard` file in a preset
    Xcode project's inspector. There are also other special types of view controllers,
    like the `UITableViewController`, used to display data listed in table cell formats
    and the `NavigationController`, which controls the navigation logic/imagery of
    the app when moving between other view controllers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a more in-depth look at the various view controllers available in UIKit,
    check out the official documentation seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/index.html#//apple_ref/doc/uid/TP40007457-CH2-SW1](https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/index.html#//apple_ref/doc/uid/TP40007457-CH2-SW1)'
  prefs: []
  type: TYPE_NORMAL
- en: It's actually at this point that we can begin to code our game, albeit entirely
    programming the MVC model. In the beginning of iOS game development, this was
    essentially how one would go about developing a game for the original iPhone.
    We'd programmatically work with the `UIWindow` and `ViewController` objects and
    our game's own custom classes to craft the app. As the family of iOS devices grew,
    an obvious issue began to arise. Though we can, and sometimes might have to. programmatically
    change code based on the device, dealing with a growing number of screen sizes
    and device types made it so that our code would always have to be refactored and
    produced ever increasing ambiguity whenever a new Apple iOS device was announced.
    Also, let's not forget that game development is as much of a visual designer /
    animator's work as it is a programmer's. Editing, positioning, refining, and later
    updating various visual aspects of a game can be very time consuming if done entirely
    via code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Storyboards were made to help alleviate this issue by allowing us to visually
    design our game in the project itself as oppose to having our own possibly handwritten
    storyboards that describe just a model-based, code-centric design. With the introduction
    of Auto Layout in Xcode 5, we can, without using any code, make one project and
    general view for all varieties of iOS devices. We shall touch on AutoLayout as
    we now finally move on to working with Storyboards and segues, but for a more
    in-depth look on Auto Layout, check out the official documentation on Apple''s
    developer portal: [https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG).'
  prefs: []
  type: TYPE_NORMAL
- en: Storyboards and segues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now finally get to working with these tools and learn the basics of structuring
    game apps on a broader storyboard level. As of the writing of this book, the latest
    version of Xcode available is version 7.0\. This will be the version we shall
    work with, but Xcode is always updating with even a beta version available to
    separately test the newest features.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    to download and read up on all that Xcode has to offer for iOS developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start structuring your app using storyboards, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: First, open Xcode in your `Applications` folder (or in your Dock if you placed
    it there for easy access).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Create a new Xcode Project**.![Storyboards and segues](img/00006.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now be asked to choose a template preset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the sake of just understanding storyboards and segues, select the Single
    View Application template. (Don't worry, we will be using the game template in
    the next chapter).![Storyboards and segues](img/00007.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we choose our project's options. Name your project `StoryBoardExample`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Language** dropdown, make sure that it is set to **Swift** and ensure
    the **Devices** dropdown is set to **Universal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There should be other fields filled in by Xcode, such as your organization name
    and organization identifier. Those are involved with the information that will
    be published with your app when it comes to deployment as well as the content
    of your code's copyright comments. We can for now keep these at their default
    setting that Xcode has filled in.![Storyboards and segues](img/00008.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** and then select a valid location in your files to save this
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have our default app created by the template. We should see on the left-hand
    side, in the File Navigator Pane, various files and folders created for us. As
    we can see, the `AppDelegate.swift` and the `ViewController.swift` files were
    automatically created for us and right below that, we'd find the `Main.Storyboard`
    file. This is our storyboard and when you click on it, you should see the two
    panes open at the center of your Xcode window. The left side is the view controller
    **Scene** dropdown, which shows the hierarchy of the scene controlled by the provided
    the view controller. The right pane in the center allows us to visually see the
    view controller and eventually elements that we can place in it. The main visual
    part of the storyboard can be zoomed in and zoomed out. As we add more scenes
    to it, this will allow us to see the entirety of our storyboard or the portions
    we are working on.
  prefs: []
  type: TYPE_NORMAL
- en: You might have to zoom out slightly to see it (using your mouse or using the
    pinching gesture on your trackpad with a MacBook), but to the left of the View
    Controller scene there's a gray arrow. This is the entry point and the first View
    Controller scene attached to this arrow is your `RootViewController`/Initial scene.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When adding more scenes to your storyboard, for either debugging purposes or
    design choice, you can simply change the scene that is first entered by clicking
    and dragging that arrow to the left of that scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a separate scene for our storyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the **Utilities** panel (the far right panel of the Xcode project),
    there are four icons designating the various snippets and objects we can place
    in our project's code and the storyboard. Click on the third icon from the left
    if it's not already selected. This will open the Object Library.![Storyboards
    and segues](img/00009.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that the very top of the Object Library has a **View Controller**
    object.![Storyboards and segues](img/00010.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag this onto the storyboard's canvas, preferably to the right of the initial
    scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the **Utilities** panel isn't open, click on the upper right-most icon at
    the top of your project's toolbar window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Storyboards and segues](img/00011.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The three buttons in your toolbar can be toggled to close the **Navigation**
    pane, **Debug** pane, and **Utilities** pane, respectively. Closing these when
    applicable can help expand the general view, known as the canvas of your storyboard
    scenes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we have two scenes in our storyboard, but nothing is there to tell us what
    they are. They are just two blank scenes!
  prefs: []
  type: TYPE_NORMAL
- en: Let's put a **Label** object in these scenes to represent what they are and
    at runtime tell us which one we are in.
  prefs: []
  type: TYPE_NORMAL
- en: To keep this in the mindset of developing a game, let's put a label in the first
    one called **Intro Scene**, where we'd maybe have an intro animation to our game
    with a **Start/Options** menu, and in the next one, put the label `Game Scene`
    to represent that this is where that actual gameplay would occur.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the bottom of the **Utilities** panel and use the search field to search
    `label`. This will isolate the `label` object, so you don't have to scroll through
    the entire list.![Storyboards and segues](img/00012.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `label` object to the canvas of the first scene. If it doesn't look
    like it's trying to snap to the scene's canvas, you might have to select the **View**
    portion of that view controller scene's hierarchy, using the left pane of the
    Main/Storyboard's main view. Alternately, you can also double-click the view in
    the Inspector to get the scene in focus so that you can place the label onto it.![Storyboards
    and segues](img/00013.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we drag it, try to center the label as best as possible. The canvas will
    indicate that we are at the vertical and/or horizontal part of that scene with
    dotted blue lines. Drop it in the center.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Utilities** pane should have some fields visible when selecting the label
    to control various aspects of its text like font size, alignment, and style.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Storyboards and segues](img/00014.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The label will just say `Label` as the default, so let's rename it to `Intro
    Scene` for the first scene by either double-clicking the label itself in the canvas,
    or changing the name in the second field down from **Text** in the **Utilities**
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's make this label a bit more prominent, so single-click on the label, click
    on the [T] icon in the **Font** field, and make the style bold with a size of
    28.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note how the label is clipped from the size increase and hardly visible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Storyboards and segues](img/00015.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Simply click on the label and expand out any one of the eight scaling icons
    at the corners of the label object on the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reposition the label to return it to the center of the scene.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Storyboards and segues](img/00016.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Create the same label for the second scene we added by simply typing *Command*
    + *D* to duplicate the label (as to not have to repeat all of the steps) and then
    drag it to the center of the other scene. Zoom out as needed and possibly click
    back on to the view part of the hierarchy if the focus change prevents the ability
    to drag the label across.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Though rather rudimentary and with still some more work to do with, this is
    all it takes to create separate scenes visually. If you have an idea of how you
    want to structure your game, this is where you can start with the use of storyboards.
    Of course, there is still more to do here before we make this storyboard have
    any function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that Xcode is giving us the following warning:'
  prefs: []
  type: TYPE_NORMAL
- en: Scene is unreachable due to lack of entry points and does not have an identifier
    for runtime access via `-instantiateViewControllerWithIdentifier`.
  prefs: []
  type: TYPE_NORMAL
- en: This is referring to the Game Scene object that is essentially orphaned due
    to no connection to the Intro Scene nor the app's entry point.
  prefs: []
  type: TYPE_NORMAL
- en: This is where segues come into play. Yet, before we work with segues and create
    a flow to these scenes and more, if we were to run this app, we'd note another
    issue. We could have sworn that we centered the text, but if simulating or running
    this in, say, an iPhone 6s, the text is completely off to the upper-right side.
    This is because the default canvas is a generalized *all device* template to begin
    with via Auto Layout.
  prefs: []
  type: TYPE_NORMAL
- en: Auto Layout has gotten easier with each new build of Xcode, but one could still
    argue it's still a bit of a hassle at times to fine tune, particularly when creating
    constraints (set spaces/margining between various storyboard objects). Let's take
    a quick look at how to work with constraints.
  prefs: []
  type: TYPE_NORMAL
- en: One quick way to alleviate the issue we have here is to just work with the **Base
    Values** panel found at the bottom center of the storyboard canvas by clicking
    on the **w/Any h/Any** text. Once clicked, a pop-up table of cells will appear.
    Rolling over with your mouse or trackpad to the various cells will bring up a
    number of different configurations as oppose to w/Any h/Any. What's great about
    this is that you can change/add and delete various objects simply based on the
    device type using these options.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before storyboards and Auto Layout, this would involve huge amounts of testing
    and refactoring of code in a view controller or Nib classes to get the layout
    just the way you'd like visually. Apple would then create the next device with
    a different screen size to prior devices, it would become an even greater hassle
    or the developer would risk a broken game on the newest device.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the labels be in the center for all iPhones in portrait mode for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Hover and click on the center left-hand side of the Auto Layout panel where
    it'll say **Compact Width | Any Height** at the top of that pop-up panel/table.![Storyboards
    and segues](img/00017.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should now change the display text at the bottom of the canvas to **w/Compact
    h/Any** and shrink the width of the scene as this layout represents all iPhones
    in Portrait and of any height (so it could be a bit off in height on an older
    iPhone 4S as oppose to the iPhone 5 or later).![Storyboards and segues](img/00018.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note how the labels are off center toward the upper right. This is what would
    have been seen in the simulator or on an actual iPhone in the portrait orientation.
    Drag them back to the center, and they should now look as they are seen in this
    configuration of the storyboard's canvas. If designing for iPad, then the other
    configurations would need to be changed for that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Pinning with constraints could actually streamline this process. For example,
    let's say that you want to place a **Pause** button at the upper right corner
    of your Game Scene and you know that no matter the orientation, it will always
    be at a certain distance (in percentages or pixels) away from the right and top
    of a device's screen. We can click on the pin button ![Storyboards and segues](img/00019.jpeg)
    at the bottom of the canvas to create these constraints in the **w/Any h/Any**
    configuration and skip manually adjusting the icon on every one of the base configurations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Xcode already gives us a scene, the `LaunchScreen.xib` file, which, if you have
    already ran your code, was actually what was seen first before the first view
    controller in the storyboard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To have just your `Main.Storyboard` file be at startup you can select the main
    project file at the top left corner in the **Navigation** pane and in the **Launch
    Screen** dropdown of the **Apps Icons and Launch Images** section, select `Main.Storyboard`.
    Then, you can delete the `LaunchScreen.xib` file if no longer needed. It can be
    a good file to see working constraints, and if so be it, it can be your initial
    splash screen for your game. More on constraints can be found here in the official
    documentation: [https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithConstraintsinInterfaceBuidler.html](https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithConstraintsinInterfaceBuidler.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Segues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Games have scenes, and all scenes have transitions between them. Segues are
    simply transitions between scenes in a storyboard. Segues come in various types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Show**: This pushes the next view controller on top of the current one; it
    also allows for calling back if using a `UINavigationController` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Detail**: When using `UISplitViewController`, a Container view controller
    is typically used in iPad apps to browse news/email apps, where the left side
    of the page is a `UITableViewController` object and the other side of the same
    page are the details of that table/list. This calls the details for the `DetailView`
    controller portion of the page when triggered by a gesture from the selected item
    on the `UITableViewController` side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Present modally**: This presents the next view controller over the current
    but in such a way that it can be canceled, such as a full-page popup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Popover**: This is like Present modally but with more options in sizing to
    create a smaller pop-up window that can be closed and disposed of.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom**: This is a version of a segue that you can completely customize
    with OOP code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The typical storyboard structure when building say, an e-mail app, will more
    than likely need to make use of a navigation controller and `UITableView` controllers
    to structure the data and flow of the app. Now, we can very well do the same thing
    for game apps. Game Over, Menu, Rankings, and Pause screens could make use of
    these view controllers. For our example, we'll keep it simple and unrestricted
    to let you, the developer, have a better starting point to branch from.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our example here is rather simple, but in addition to providing code for this
    project, an even more detailed storyboard will be available using various view
    controllers and objects.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take care of that warning and link up these scenes as well as begin to
    show the overall structure of a typical game using storyboards.
  prefs: []
  type: TYPE_NORMAL
- en: First, in the **Intro Scene**, place a button labeled **START** right under
    the **Intro Scene** label. Placing a button on a storyboard is done exactly the
    same as with a label. Search for `button` or scroll down the objects in the **Utilities**
    panel and then drag and drop the button onto the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now create two more buttons on the Game Scene view; one button labeled **Pause**
    at the top-right corner of the scene and another named **Quit** opposite the Pause
    button on the upper-left corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `ViewController` object on the scene, preferably above or below
    the Game Scene on the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the new Pause Scene, create a label `PAUSED` the same way the `Game Scene`
    and `Intro Scene` labels were made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, add two buttons, **Quit** and **Resume**, and place them right under the
    **PAUSED** label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now to create the segues visually using the storyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Control-Click the **START** button object on the Intro Scene and then while
    still pressing Control-Click, drag the object toward the **Game Scene** on the
    canvas. You should see a blue line follow your cursor as you drag across. (if
    you need more space, zoom out a bit and also temporarily close the **Navigation**
    and **Utilities** panels using the toll bar buttons).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drop this point anywhere on the view that isn't another object; you should see
    the entire view glow blue while doing so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A popup asking for the type of Segue will come up. Select **Show**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! You've created a segue, and you've also told the storyboard that
    when the user clicks that button, it'll open the Game Scene—View Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before you move on to creating more segues, click on the door-like symbol on
    the canvas that represents the segue. On the top right in the **Utilities** panel''s
    Assets inspector, you should see an empty **Identifier** field. We can leave the
    segue empty if we''d like, but naming it could be of use if we wish to call the
    segue in code with the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now repeat steps *1* through *3* to create the following segues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Link Game Scene's **Quit** button back to Intro Scene.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Link Game Scene's **Pause** button to the PAUSED Scene.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Link PAUSED Scene's **Resume** button to the Game Scene.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Link PAUSED Scene's **Quit** button to the Intro Scene.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The warning should now be gone as all of the scenes are connected with segues,
    and after possibly some Auto Layout fixes, running the app now has a game-like
    scene structure that transition the way we'd normally see in other games. We can
    go from here and make other scenes, such as a Game Over scene, a Stage Win scene,
    or others. Even if this might not be the way you'd like your final game's transitions
    to end up (particularly since the default transition of the Show segue does a
    quick vertical), this can be a very quick way of prototyping your game right off
    the bat. Custom segues and segues triggered with code are how we can dive deeper
    into fine tuning when the default setting might not match with our vision of our
    games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s more documentation on making custom segue classes if you really want
    to dive deeper into segues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIStoryboardSegue_Class/index.html#//apple_ref/doc/uid/TP40010911-CH1-SW11](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIStoryboardSegue_Class/index.html#//apple_ref/doc/uid/TP40010911-CH1-SW11)'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly to how we Control-Dragged the button's linkage to the next view controller
    scene, we can do the same to our `ViewController.swift` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a summery on how to do that for the first view controller:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the previous segue. One way to do so is to right-click the button and
    to click on **x** in the **Triggered Segues** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Intro Scene's view in the hierarchy to get it in focus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Control-Drag a blue line from the yellow icon on the top left of the Intro Scene's
    view controller to the Game Scene's view controller and select the Show type of
    segue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the segue icon in the canvas and now give the identifier of this segue
    the name `startGame`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Assistant Editor (the two interlocking circles button on the top-right
    portion of the Xcode toolbar); close some panes to make any needed room.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Control-Drag the **Start** button into the `ViewController` class; preferably
    at the bottom of the code but still within the class's closing brackets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will prompt the outlet/action popup. Select the **Action** option in the
    **Connection** dropdown and name it `startButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will create the `IBAction` function: `@IBAction func startButton(sender:
    AnyObject) {}`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code between the braces: `self.performSegueWithIdentifier("startGame",
    sender: nil)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This tells the view controller to perform the segue when this button is prompted
    using code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Storyboards versus coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's no single correct way to do the design structure of your app as long
    as the MVC model is followed. Actually, there are programmers out there who are
    completely fine with just using the initial view controller and never use a single
    Nib or storyboard file; thus purely building their game controlled by the logic
    of their code and calls to the various View objects programmatically. In iOS development,
    there's somewhat of a design split between three main branches, hardcoding, Nibs,
    and storyboards. The original methodology was coding; Nibs came in later to first
    allow direct visual editing in Xcode and then that evolved into Storyboards, further
    built upon with the addition of Auto Layout.
  prefs: []
  type: TYPE_NORMAL
- en: The reason there's a split between some developers and studios on the visual
    structure methodology of an iOS app is because one drawback to Nibs and storyboards
    are their lack of portability. If you wanted to port your game to another platform,
    such as Android, at descent pace, heavy use of storyboards would make it a rather
    tough to port the app to the other platform since these design features are specific
    to the iOS platform. This is when pure code would be more beneficial. Storyboards
    though give us developers an editable, visual representation of the app/game we
    wish to make and the ability to do little to no changes as the family of devices
    change.
  prefs: []
  type: TYPE_NORMAL
- en: Even other game development engines, such as Unity, Unreal Engine, and more,
    work on a more sandboxing, visual representation methodology with your code acting
    as more of a component to the visual as opposed to the full structure of everything
    that appears before your game characters even get rendered to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went over a number of app project structuring and introduction
    topics. First, we went over the Model-View-Controller paradigm followed by all
    apps, game or not, and the overall lifecycle of an iOS app that follows this structuring.
    Next, we reviewed the entry point(s) and pathway of your code in a typical app
    as well as the upper-level objects used along the way, such as the Application
    system object, the `AppDelegate` class, and view controller. Last but not least,
    we discussed the main topic of the chapter—storyboards, segues, and instructions
    on how to create a simple game flow structure. From here, we can see how relatively
    easy and quick it can be to structure various scenes for your game and transition
    between them with segues. Again, note that although storyboards are recommended,
    they can simply start as a general guide toward the final product, which gives
    you, the developer, the ability to visualize your game even if in the end preferring
    a more code-heavy design choice.
  prefs: []
  type: TYPE_NORMAL
- en: In the next two chapters, we are going to finally get into really coding and
    designing actual playable games. We will start off with 2D games, and since iOS
    7, Apple has given iOS developers it's own framework to handle 2D sprites and
    game physics. This framework is amply named Spritekit.
  prefs: []
  type: TYPE_NORMAL
