- en: Chapter 7. Multimedia Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting images and videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing media with the camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing music and sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording with the microphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing album items directly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important features of today's smartphones and tablets is their
    ability to capture and manage multimedia resources. Be it photos, videos, or audio,
    an app targeted at these devices that can handle multimedia effectively is very
    important.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how to manage media stored on the device. We will
    also learn how to use the device's multimedia capturing devices (a camera and
    microphone) to capture content and create an app that will provide a rich experience
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UIImagePickerController`: This is a controller that provides access to the
    saved photos and videos on the device through a user interface, but also a camera
    interface for capturing photos through the device''s camera hardware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPMoviePlayerController`: This is a controller that allows us to play and
    stream video files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPMediaPickerController`: This is the default user interface to access the
    saved content managed by the native iPod app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPMusicPlayerController`: This is the object that is responsible for playing
    the iPod content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AVAudioPlayer`: This is the class that allows us to play sound files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AVAudioRecorder`: This is the class that allows us to use the microphone to
    record audio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALAssetsLibrary`: This is the class that provides access to the device''s
    available assets and their metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting images and videos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to provide the user with the ability to import
    images and videos from the device album.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Single View Application** in Xamarin Studio and name it `ImagePickerApp`.
    For this recipe, we will need some images to be stored in the simulator's photo
    albums.
  prefs: []
  type: TYPE_NORMAL
- en: An easy way to add images to the simulator is by navigating to a web page with
    Safari. Long-tapping (click + hold) on any image in Safari will show us an action
    sheet with a **Save** option. Tapping the option saves the image to the photo
    albums.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ImagePickerAppViewController.xib` file in Interface Builder and add
    `UIImageView` and `UIButton` to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code in the `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the handler methods for the `FinishedPickingMedia` and `Canceled`
    events as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator. Tap on the button you added in the
    initial steps to present the image picker and select an image by tapping on its
    thumbnail. The image will be displayed in the image view. The `UIImagePickerController`
    is shown in the following screenshot:![How to do it...](img/8924OT_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just before the first time `UIImagePickerController` is shown in an app, iOS
    will display an alert, asking the user for permission to access the photo albums.
    Handling this situation is described in the *Managing album items directly* recipe
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`UIImagePickerController` is a special view controller that iOS provides to
    select images and videos that are saved on the device album or even to capture
    new media from the camera.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After initializing the image picker object, we need to subscribe to its `FinishedPickingMedia`
    event, which provides us with the media that the user has selected. In the handler
    we assign to it, we get the selected image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Info` property returns an `NSDictionary` object that contains various
    kinds of information about the picked media. We retrieve the image, passing the
    `UIImagePickerController.OriginalImage` constant as key. As the values of the
    dictionary are of the `NSObject` type, we cast the return value to `UIImage`.
    After we assign the image to the `UIImageView` to be displayed, we dismiss the
    controller by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `Canceled` event is triggered when the user taps on the controller's **Cancel**
    button. We must subscribe to it to dismiss the controller, because it will not
    be dismissed automatically when the user taps on the **Cancel** button.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can define the source of the images/videos the image picker will read from
    through its `SourceType` property. In this example, we use `UIImagePickerController.PhotoLibrary`
    because the simulator does not support the camera hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Picking videos
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`UIImagePickerController` displays only images by default. To support videos,
    its `MediaType` property must be set. It accepts a `string[]` parameter, with
    the specified media names as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To determine the media type the user has picked, we check the `MediaType` key
    of the dictionary in the `FinishedPickingMedia` handler. If it is a video, we
    get its URL with the `MediaUrl` key, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Capturing media with the camera* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing album items directly* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing media with the camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the device camera to capture the media.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the `ImagePickerApp` project that we created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The camera functionality is not available on iOS Simulator. This example can
    only run on the device. Refer to [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the ViewDidLoad method of the controller class, replace `this.imagePicker.SourceType
    = UIImagePickerControllerSourceType.PhotoLibrary;` with the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `FinishedPickingMedia` handler, add the following code before the dismissal
    of the image picker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the device. Tap the button to open the camera and
    take a picture. The picture will be saved to the device album.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before presenting the camera viewfinder, we have to make sure that the device
    that the app is running on actually has the appropriate hardware. We do this by
    calling the static `IsSourceTypeAvailable` method of the `UIImagePickerController`
    class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If this returns `true`, we set the source type to `Camera` by using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will cause the image picker controller to start the camera device instead
    of loading the device albums.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user takes a photo (or video) through our application, it is not automatically
    saved on the device. To save it, we use the `SaveToPhotosAlbum` method of the
    `UIImage` class. This method accepts a delegate of the `UIImage.SaveStatus` type,
    which will report an error if something goes wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The camera view can also be customized. To disable the default camera controls,
    set the `ShowsCameraControls` property to `false`. Then, pass a custom view with
    the controls you want to the `CameraOverlayView` property. To trigger the shutter
    of the camera, call the `TakePicture` method.
  prefs: []
  type: TYPE_NORMAL
- en: Image editing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The camera supports a simple editing function after capturing an image. This
    editing function allows the user to select a specific part of the image and even
    zoom to a specific area. To present the editing controls, set the `AllowsEditing`
    property to `true`. The edited image can be retrieved from the dictionary in the
    `FinishedPickingMedia` handler, passing the `UIImagePickerController.EditedImage`
    key. The editing interface is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image editing](img/8924OT_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Selecting images and videos* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing videos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to display a video player interface and play
    video files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Single View Application** in Xamarin Studio and name it `PlayVideoApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a button to the main view of the controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a video file to the project and set its **Build Action** to **Content**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `ViewDidLoad` method of the controller class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following methods in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator. Tap on the button and the video will
    load and start playing. Watch the messages displayed in the **Application Output**
    pad in Xamarin Studio. The following screenshot shows us the video that is playing
    on the simulator:![How to do it...](img/8924OT_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MPMoviePlayerController` controller plays video files stored locally or
    streamed from the network. We initialize the controller with the constructor that
    accepts an `NSUrl` parameter, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `NSUrl` class is the standard iOS class for URLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the instance, we define a frame for its view and add it to our
    view by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code in the preceding section adds observers to the default
    notification center so that we will be notified when the state of the playback
    changes or finishes. Then, we call its `Play` method and the `MPMoviePlayerController`
    controller's view is displayed, and the video starts playing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `MoviePlayer_PlaybackStateChanged` method, we output the `PlaybackState`
    property by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This property informs us about the status of the playback, for example, `Paused`,
    `Playing`, `SeekingForward`, and `SeekingBackward`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apart from the ones used in this example, we can add observers for more notifications
    of an `MPMoviePlayerController` controller, some of which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DidEnterFullscreenNotification`: This notifies us that the user has tapped
    the fullscreen control and the controller has entered the fullscreen mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DidExitFullscreenNotification`: It notifies that the controller has left fullscreen
    mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DurationAvailableNotification`: This notifies us that the controller has received
    information on the duration of the video'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LoadStateDidChangeNotification`: This is useful for network playback; it is
    triggered when the controller has finished preloading the media in the buffer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NaturalSizeAvailableNotification`: This is triggered when the dimensions of
    the movie frame are made available. The size can be retrieved through the player''s
    `NaturalSize` property'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NowPlayingMovieDidChangeNotification`: This is triggered when the video content
    of the player has changed. The current content is available through its `ContentUrl`
    property'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless streaming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting from iOS Version 4.3, `MPMoviePlayerController` can be used to stream
    video to Apple's AirPlay-enabled devices. To enable wireless streaming, set the
    `MPMoviePlayerController` instance's `AllowsAirPlay` property to `true`. When
    `controller` is displayed, it will present an interface that will allow the user
    to select the devices it detects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Playing music and sounds* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing music and sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to play both simple audio files and songs
    stored on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Single View Application** in Xamarin Studio and name it `PlayMusicApp`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example will not work on the simulator. You will also need at least one
    song stored on the device's iTunes library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add three buttons to the view of the controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` directive in the `PlayMusicAppViewController.cs`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following two fields in the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code in the `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following methods in the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the device. Tap the **Select songs** button and select
    one or more songs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MPMediaPickerController` controller provides the same user interface as
    the native *Music* app for selecting songs. The `MPMusicPlayerController` controller
    is responsible for playing the songs stored on the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first initialize the media picker, passing the type of media we want it
    to look for in its constructor by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we subscribe to its `ItemsPicked` and `DidCancel` events so that
    we can capture the feedback from the user by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code in the preceding section shows us how to initialize the
    music player object. The option demonstrated here, `MPMusicPlayerController.ApplicationMusicPlayer`,
    creates an instance that is specific only to the app. The other option that is
    available, `MPMusicPlayerController.iPodMusicPlayer`, creates an instance that
    allows the media to be played even if the app is in the background, similar to
    the native *Music* app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MediaPicker_ItemsPicked` handler, we set the songs that were picked
    by the user to the music player through its `SetQueue` method, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: After this, we dismiss the modal media picker controller. Playing and stopping
    songs is achieved through the `Play()` and `Stop()` methods of `MPMusicPlayerController`,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MPMusicPlayerController` holds information on the item that is being played
    currently. This information can be accessed through its `NowPlayingItem` property.
    It is of the `MPMediaItem` type and holds various types of information of the
    media that is being played currently. The following example outputs the title
    of the song that is being played:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Playing sound files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `MPMusicPlayerController` controller is an object that is specifically designed
    to manage and play items and playlists stored on the device's music library.
  prefs: []
  type: TYPE_NORMAL
- en: 'To play simple sound files, Xamarin.iOS provides another wrapper to the iOS''s
    class, `AVAudioPlayer`. The following code is an example of its most simple usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Playing videos* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording with the microphone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the device's microphone to record sounds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Xamarin Studio and name it `RecordSoundApp`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example will not work on the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add two buttons and a label to the view of the controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following `using` directives in the `RecordSoundAppViewController.cs`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `ViewDidLoad` method and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the device. Tap the **Start** recording button to
    start recording the audio, for example, say something in order to record your
    voice. Tap the **Stop** **recording** button to stop recording and listen to the
    playback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AVAudioRecorder` class provides the recording functionality. It does this
    by streaming the captured audio directly to the filesystem. Prior to starting
    the actual recording, we need to prepare the shared audio session by using the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We need to adjust the audio session according to our app's needs so that the
    system *knows* how to handle the audio from other sources. By setting the category
    to `AVAudioSession.CategoryPlayAndRecord`, we state that our app will be able
    to play back the audio while it is getting recorded.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first time we set the shared audio session''s category to any value that
    requires the usage of the microphone, iOS automatically prompts the user to give
    permission to the app. By calling the `RequestRecordPermission` method, we can
    determine whether the user has granted microphone access to our app, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have prepared the shared audio session, it''s time to initialize
    an instance of `AVAudioRecorder` by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If the file that corresponds to the `NSUrl` variable already exists, it will
    be overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `recordingSettings` variable is of the `NSDictionary` type and contains
    the settings for the output sound file. We must provide at least some minimal
    settings to the `AVAudioRecorder` upon the initialization. Here, we set the sound
    format to plain WAV by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To instruct the recorder to start recording, we just call its `Record()` method
    by using the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user taps on the **Stop recording** button, the recording stops and
    the saved sound starts playing with the `AVAudioPlayer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AVAudioRecorder` class provides sound metering options as well. To enable
    the sound metering, set its `MeteringEnabled` property to `true`. We can then
    output the peak power in decibels on a specific channel. To do this for the first
    channel of our recording, add the following code right after the `Record()` method
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `PeakPower` method accepts the zero-based index of the channel and returns
    the peak of the channel in decibels. Call `UpdateMeters()` right before calling
    the `PeakPower` method to get the most recent reading.
  prefs: []
  type: TYPE_NORMAL
- en: Note that enabling the metering on the recorder requires using the CPU resources.
    Do not enable it if you do not intend on using the metering values.
  prefs: []
  type: TYPE_NORMAL
- en: Recording for a predefined amount of time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To record the audio for a predefined amount of time without the need for the
    user to stop the recording, call the `RecordFor(double)` method. Its parameter
    is the amount of time in seconds for which we want to record.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Playing music and sounds* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing album items directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to programmatically access the device's
    photo album.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Single View Application** in Xamarin Studio and name it `ManageAlbumApp`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example works on the simulator. At least one image must exist in the simulator's
    photo album.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a button on the main view of the controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following `using` directive in the `MainController.cs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code in the `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following methods in the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app. Tap the **Enumerate** button and watch the URLs of
    the saved photos get displayed in the **Application Output** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ALAssetsLibrary` class provides access to the album items of the device.
    These items are represented by the `ALAsset` class and are divided into groups,
    represented by the `ALAssetGroup` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is enumerate the asset groups. To do this, call
    the `Enumerate` method by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is of the `ALAssetGroupTypes` type, and it instructs the
    assets library on the asset groups to be enumerated. Passing `ALAssetGroupTypes.All`
    means that we want to enumerate all the asset groups. The other two parameters
    are delegate types. The `GroupsEnumeration` method is where we read the group's
    data, while the `GroupsEnumerationFailure` method will be triggered if an error
    occurs. When the `Enumerate` method is called for the first time, the user is
    asked to grant access to the app to access the device's assets. If the user denies
    the access, the failure method will be triggered. The next time the `Enumerate`
    method gets called, the access message appears again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The signature of the `GroupsEnumeration` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `assetGroup` parameter contains the group's information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the `stop` parameter, which is declared as a `ref` parameter. When the
    enumeration occurs, the method is being triggered once to return the first group
    and does not get called for the second time, no matter how many more groups exist.
    To force it to keep getting called to enumerate all the groups, we have to set
    the `stop` variable to `false`. When all groups have been enumerated, the method
    gets called one last time, with the `assetGroup` variable set to `null`. So we
    need to check this. To put all this in code, take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'After calling the `SetAssetsFilter` method on the instance of the `ALAssetGroup`
    class, we instruct it to filter what types of assets we want it to look for. After
    this, the process becomes similar to the group''s enumeration. The `ALAssetGroup`
    class also contains an `Enumerate` method. It accepts a parameter of a delegate
    type, represented here by the `AssetsEnumeration` method. Its implementation is
    similar to the `GroupsEnumeration` method, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `ALAsset` class contains various kinds of information and properties. Most
    of the information is stored in its `DefaultRepresentation` property, which is
    of the `ALAssetRepresentation` type.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the asset we are interested in is an image, we can get the actual image
    through the `DefaultRepresentation` property by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Reading EXIF data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can read a photo''s **EXchangeable Image File** (**EXIF**) format metadata
    through the `Metadata` property of `ALAssetRepresentation`, which is of the `NSDictionary`
    type, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving individual assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also retrieve an individual asset, if we know the asset's URL, through
    the `AssetForUrl` method of `ALAssetLibrary`.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for permission
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can check whether the user has granted access to the asset library through
    the `ALAssetsLibrary.AuthorizationStatus` static property. The possible values
    of the `ALAuthorizationStatus` enumeration are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Authorized`: This means that the user has authorized our app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Denied`: This means that the user has denied access to the albums.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NotDetermined`: This means that our app never requested access to the albums.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Restricted`: This means that the app is not authorized to access the albums
    and the user cannot grant access, possibly due to parental restrictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that accessing the `AuthorizationStatus` property does not prompt the user
    for permission. When we actually try to access the library in this example, by
    calling the `Enumerate` method, is when iOS prompts the user for permission.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Selecting images and videos* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
