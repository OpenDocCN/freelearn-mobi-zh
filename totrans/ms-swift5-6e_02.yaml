- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Swift Documentation and Installing Swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I spent a lot of my career working as a Linux System Administrator and Network
    Security Administrator. These positions required me to compile and install packages
    from source. There are a lot of advantages to building packages from source rather
    than downloading prebuilt binaries. The biggest advantage, in my opinion, is that
    you can get the latest version without having to wait for someone else to build
    it. This allows me to patch my systems with the latest security updates without
    delay. With Swift, we are also able to download the latest code and compile ourselves
    without having to wait for someone else to build it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: About the swift.org website and what it offers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to find the latest documentation on Swift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ways to install Swift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build Swift from source with its full toolchain and package manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous chapter, we mentioned that Apple has released Swift as an open
    source project with the [swift.org](http://swift.org) site dedicated to the Swift
    community. This means we can download the source code for the Swift language,
    examine it, and build Swift ourselves. Before we really dive into the Swift language
    and develop with it, let's look at how we can build Swift from source and the
    resources that Apple has made available to us. We will start by looking at the
    [swift.org](http://swift.org) site.
  prefs: []
  type: TYPE_NORMAL
- en: Swift.org
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On December 3, 2015, Apple officially released the Swift language, supporting
    libraries, the debugger, and the package manager to the open source community
    under the Apache 2.0 license. At that time, the [swift.org](http://swift.org)
    site was created as the community's gateway to the project. This site has a wealth
    of information and should be your primary site to find out what is happening in
    the Swift community and the language itself. The blog posts will keep you up to
    date with new releases of Swift, new Swift open source libraries, changes to the
    standard library, and other Swift news.
  prefs: []
  type: TYPE_NORMAL
- en: You can also download pre-built binaries for several flavors of Linux. At the
    time this book is being written, we can download pre-built binaries for Ubuntu
    16.04, Ubuntu 18.04, Ubuntu 20.04, CentOS 8, and Amazon Linux 2\. The getting
    started page provides a list of dependencies for the previously mentioned flavors
    of Linux and instructions on how to install the binaries.
  prefs: []
  type: TYPE_NORMAL
- en: The website also includes the official Swift documentation, which includes things
    like the language guide, a Swift introduction, and an API design guideline. Understanding
    the API design guideline is essential to ensuring that your code meets the recommended
    coding standards. In *Chapter 18*, *Swift Formatting and Style Guide*, we provide
    recommendations for coding standards in Swift, which go hand in hand with Apple's
    recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: You will also find information on how to contribute to the Swift community,
    where the Swift source code can be downloaded, and there is even a section on
    recommended Google Summer of Code projects with Swift. If you really want to get into
    Swift development, whether it be server-side, Mac, or iOS development, I would
    recommend making regular visits to the [swift.org](http://swift.org) site to keep
    up to date with what is happening in the Swift community.
  prefs: []
  type: TYPE_NORMAL
- en: Apple and the Swift community also have a number of documentation resources
    that you can use for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Swift documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple and the Swift community, as a whole, have released a number of resources
    to help developers program in Swift. Apple's official documentation, which can
    be found at [https://developer.apple.com/documentation/](https://developer.apple.com/documentation/),
    includes API documentation for Swift as well as all of Apple's frameworks. Only
    a small portion of Apple's frameworks are open source and work across all platforms;
    however if you are looking to get started on one of Apple's frameworks this is
    definitely the place to start. However it can be hard to find documentation on
    specific Swift APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To quickly find documentation on Swift''s API, my favorite site is [https://swiftdoc.org](https://swiftdoc.org).
    This site is incredibly easy to navigate and has autogenerated documentation for
    all types, protocols, operators, and global functions that make up the Swift language.
    I have noticed that this site does not always stay up to date; however, it is
    a great reference for any Swift developer. The code that generates this site is
    open source as well and can be found on GitHub here: [https://github.com/SwiftDocOrg/swift-doc](https://github.com/SwiftDocOrg/swift-doc).
    The GitHub page gives directions on how you can generate your own offline documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final site that I am going to mention here is one that I recently discovered
    on one of my favorite Swift sites. It is the Swift knowledge base on the Hacking
    with Swift site located here: [https://www.hackingwithswift.com/example-code/](https://www.hackingwithswift.com/example-code/).
    Once you learn Swift and need to know how to do something like parsing JSON, extracting
    a PDF, or any other specific function, there is a good chance you can find what
    you need here.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know where to look for documentation on Swift, let's see the different
    ways that we can install Swift.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Swift from swift.org
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are developing on and for the Apple platform, I strongly suggest that
    you stick with the version of Swift that comes with Xcode. Apple will not approve
    an app that was compiled using a version of Swift that is different than the one
    that came with the version of Xcode that you are using. This may seem a little
    extreme, but it ensures that the apps are compiled with a stable version of Swift
    and one that has been fully vetted to work with your version of Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using one of the flavors of Linux that has pre-built binaries on
    the [swift.org](http://swift.org) site, it is recommended that you use those.
    They are the easiest and quickest path to getting Swift up and running. You can
    also find complete installation instructions with a list of dependencies on the
    [swift.org](http://swift.org) site under the *Getting Started* section.
  prefs: []
  type: TYPE_NORMAL
- en: If pre-built binaries are not provided for your flavor of Linux, if you want
    to try the latest version of Swift, or if you just want to see what it is like
    to build Swift from source, you can do that as well.
  prefs: []
  type: TYPE_NORMAL
- en: Building Swift and the Swift toolchain from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of sites that show you how to build Swift from source, but
    unfortunately most of these sites give directions for building just the Swift
    language itself without the toolchain. I find that not very useful, unless you
    are only writing very simple applications. In my opinion, building Swift for Linux
    without the entire toolchain and the package manager is more of an exercise of
    *"Can I do it"* rather than building something you can use long term.
  prefs: []
  type: TYPE_NORMAL
- en: While using the latest build of Swift is not recommended for production systems,
    it does enable us to use the latest features of the language and also verify that
    changes introduced in our application are compatible with future versions of the
    Swift language.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at how we can build Swift, its entire toolchain,
    and the Swift package manager from source. Since each flavor of Linux and macOS
    are somewhat different, I need to pick one platform to write these instructions
    on; therefore I am using Ubuntu 18.04 and the current Swift 5.3 development release
    at the time of writing this book. For other flavors or versions of Linux, you
    may have to make changes to the dependencies that are installed or how they are
    installed. The command to build Swift itself will be the same across all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Some of these commands can be quite large to type. All of the commands are in
    text files that you can cut and paste from in the downloadable code for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's start building Swift by installing the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Installing dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we need to do is to make sure we have all of the dependencies
    required. The following command includes dependencies I have needed to install
    on different flavors of Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may find that your distribution already has some of these preinstalled
    but to make sure you have everything, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: One thing to note is dependencies can change and if you attempt to compile from
    source and you receive an error that something is missing, add it with the `apt-get
    install` command or the package manager on your system. Now that we have all of the
    dependencies installed, we need to download the Swift source code.
  prefs: []
  type: TYPE_NORMAL
- en: Swift source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To download the Swift source code, we will want to create a new directory that
    we can download the code to, change to that directory, and then run the `git`
    command to retrieve the source. The following commands will download the Swift
    source to a directory named `swift-source`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the source and have cloned what we need, let's build Swift.
  prefs: []
  type: TYPE_NORMAL
- en: Building Swift
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you begin building Swift, you will need to understand that this will
    take hours to build depending on your system or virtual machine setup. If you
    are using a virtual machine, like VirtualBox, I would strongly recommend that
    you allocate multiple cores to your virtual machine; it will dramatically shorten
    the build time. The following command will build Swift, its toolchain, and the
    package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once this has built everything, we need to install it somewhere and put the
    binaries in our path.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Swift
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have built Swift and its toolchain, we are ready to install it.
    I like to install Swift under the `/opt` directory, others prefer installing it
    under the `/usr/local/share` directory. What directory you put it under is totally
    up to you. I will walk you through installing it under the `/opt` directory, if
    you would like to put it someplace else then simply replace the `/opt` in the
    paths with the directory that you wish to install it to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start the installation by changing to the /opt directory and creating
    a new directory named `swift`. We need to change the permissions for this directory
    so that we can read, write, and execute files. The following commands will do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The command `chmod 777 swift` adds read, write, and execute permissions for
    all users of this computer. I like to use this mode because then any user on the
    system can use Swift; however, this can be considered a security issue because
    it also means anyone can modify the files. Use this at your own risk and for production
    systems, I would really look at who needs permissions for this directly and lock
    it down more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we need to move the Swift binaries that we built to the `swift` directory.
    To do this we will change to the `swift` directory, create a new directory for
    our build, change to the directory, and copy the files over. The following commands
    will do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we want to make a symlink to this directory called `swift-current`. The
    reason for this is it enables us to add an entry to our `PATH` environmental variable
    so that the operating system can find the Swift executables without us needing
    to enter the full path. If we set up this entry using the `swift-current` path
    rather than the `swift.5.3-dev` path, it enables us, when we install new versions
    of Swift, to simply change where the `swift-current` symlink points to and have
    everything work. We can do this with the following command from the `/opt/swift`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to create the entry in our `PATH` variable. To do this we add the
    `/opt/swift/swift-current/usr/bin/` directory to the `PATH` variable in our `.profile`
    file located in your home directory. Then update the environment. The following
    commands do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We should now have Swift installed and ready to go. The last thing we want to
    do is to test our installation.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last thing we need to do is to verify that Swift has been successfully
    installed. To do this, we can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look something like this but with the version of Swift that
    you installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If the output looks similar to this, then congratulations, Swift has been successfully
    installed on your system. If there is an issue, and your system is unable to find
    the `swift` command, then the issue probably lies within the path. The first thing
    you will want to do is to echo your `PATH` variable to verify that `/opt/swift/swift-current/usr/bin/`
    is in your path. The following command will do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If `/opt/swift/swift-current/usr/bin/` is not in your path, you can attempt
    to run the `PATH=$PATH:/opt/swift/swift-current/usr/bin/` command manually rather
    than adding it to your `.profile` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally let''s verify that the package manager was also properly installed.
    To do this, we want to create a `swift-code` directory under your home directory
    and create a new package as the following commands show:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to use Swift and the package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Swift package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a lot that you can do with the package manager that makes it a necessity
    for creating complex applications on the Linux platform. It helps with adding
    dependencies to projects and enables us to break our code up into multiple files
    and create library projects. You can use the package manager on the Mac platform
    as well, but I do find it easier to use Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the examples in this book, we will not need to add dependencies or use
    multiple files. Let''s see how we can simply build and run an executable project
    in the package manager so you can use it to run the examples from this book if
    you would like. Keep in mind you are able to use the package manager on the Apple
    platform as well. When the package manager created `main.swift` in the `Sources/test/`
    directory it added the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code gives us the basic `Hello World` application. You can replace this
    code with examples from this book as you are going through it. To see how we would
    build and run an application using the package manager, let''s leave the code
    as is for now and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `swift build` command compiled our application, and the `swift run` command
    ran the executable that was built with the previous command. Most of the code
    in this book doesn't need the package manager to run, and it may be easier to
    simply use the compiler. Just keep in mind that for anything larger than a simple
    example, you will want to use the package manager or Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's see how to use the Swift compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Swift compiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Swift compiler is the basic utility to build Swift code and it is used
    by the package manager, Xcode, and any other utility that builds Swift code into
    executables. We can also call it ourselves. To see how to call it ourselves, create
    a file named `hello.swift` and add the `print("Hello, world!")` code to it as
    shown with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can compile this code with the following command, which calls the Swift
    compiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally we can execute the newly created application like we would any other
    executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: And we will be greeted with our `Hello, world!` message.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at some of the different documentation that Apple
    and the Swift community offer. This documentation can be essential as you are
    learning Swift and also for reference once you have mastered the language itself.
    We also looked at how we can build and install Swift and its full toolchain. While
    using the latest build of Swift is not recommended for production systems, I usually
    keep a virtual machine or my desktop setup with a recent build. This enables me
    to use the latest features of the language and also run my code against it to
    make sure I am not introducing changes that are not compatible with future versions
    of the language.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start to get into the language itself and we will
    see how to use variables and constants in Swift. We will also look at the various
    data types and how to use operators in Swift.
  prefs: []
  type: TYPE_NORMAL
