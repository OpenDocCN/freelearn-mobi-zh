["```java\n/**\n* Test method for {@link method()}.\n*/\n\n```", "```java\n    public TemperatureConverterActivityTests() {\n    this(\"TemperatureConverterActivityTests\");\n    }\n    public TemperatureConverterActivityTests(String name) {\n    super(TemperatureConverterActivity.class);\n    setName(name);\n    }\n\n    ```", "```java\nprotected void setUp() throws Exception {\nsuper.setUp();\nmActivity = getActivity();\n}\n\n```", "```java\npublic final void testPreconditions() {\nassertNotNull(mActivity);\n}\n\n```", "```java\nmCelsius = (EditText)\nmActivity.findViewById(com.example.aatg.tc.R.id.celsius);\nmFahrenheit = (EditText) mActivity.findViewById(com.example.aatg.tc.R.id.fahrenheit);\n\n```", "```java\npublic final void testHasInputFields() {\nassertNotNull(mCelsius);\nassertNotNull(mFahrenheit);\n}\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n\nandroid:orientation=\"vertical\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\"> <TextView\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string/message\" />\n<TextView\nandroid:id=\"@+id/celsius_label\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string/celsius\" />\n<EditText\nandroid:id=\"@+id/celsius\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"EditText\" />\n<TextView\nandroid:id=\"@+id/fahrenheit_label\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string/fahrenheit\" />\n<EditText\nandroid:id=\"@+id/fahrenheit\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"EditText\" />\n</LinearLayout>\n\n```", "```java\npublic final void testFieldsShouldStartEmpty() {\nassertEquals(\"\", mCelsius.getText().toString());\nassertEquals(\"\", mFahrenheit.getText().toString());\n}\n\n```", "```java\npublic final void testFieldsOnScreen() {\nfinal Window window = mActivity.getWindow();\nfinal View origin = window.getDecorView();\nassertOnScreen(origin, mCelsius);\nassertOnScreen(origin, mFahrenheit);\n}\n\n```", "```java\npublic final void testAlignment() {\nassertLeftAligned(mCelsiusLabel, mCelsius);\nassertLeftAligned(mFahrenheitLabel, mFahrenheit);\nassertLeftAligned(mCelsius, mFahrenheit);\nassertRightAligned(mCelsius, mFahrenheit);\n}\n\n```", "```java\npublic final void testCelsiusInputFieldCoverEntireScreen() {\nfinal int expected = LayoutParams.MATCH_PARENT;\nfinal LayoutParams lp = mCelsius.getLayoutParams();\nassertEquals(\"mCelsius layout width is not MATCH_PARENT\", expected, lp.width);\n}\npublic final void testFahrenheitInputFieldCoverEntireScreen() {\nfinal int expected = LayoutParams.MATCH_PARENT;\nfinal LayoutParams lp = mFahrenheit.getLayoutParams();\nassertEquals(\"mFahrenheit layout width is not MATCH_PARENT\", expected, lp.width);\n}\n\n```", "```java\n<EditText android:layout_height=\"wrap_content\"\nandroid:id=\"@+id/celsius\" android:layout_width=\"match_parent\"\n/>\n\n```", "```java\npublic final void testFontSizes() {\nfinal float expected = 24.0f;\nassertEquals(expected, mCelsiusLabel.getTextSize());\nassertEquals(expected, mFahrenheitLabel.getTextSize());\n}\n\n```", "```java\npublic final void testMargins() {\nLinearLayout.LayoutParams lp;\nfinal int expected = 6;\nlp = (LinearLayout.LayoutParams) mCelsius.getLayoutParams();\nassertEquals(expected, lp.leftMargin);\nassertEquals(expected, lp.rightMargin);\nlp = (LinearLayout.LayoutParams) mFahrenheit.getLayoutParams();\nassertEquals(expected, lp.leftMargin);\nassertEquals(expected, lp.rightMargin);\n}\n\n```", "```java\npublic final void testJustification() {\nfinal int expected = Gravity.RIGHT|Gravity.CENTER_VERTICAL;\nint actual = mCelsius.getGravity();\nassertEquals(String.format(\"Expected 0x%02x but was 0x%02x\", expected, actual), expected, actual);\nactual = mFahrenheit.getGravity();\nassertEquals(String.format(\"Expected 0x%02x but was 0x%02x\", expected, actual), expected, actual);\n}\n\n```", "```java\nandroid:gravity=\"right|center_vertical\"\n\n```", "```java\npublic final void testVirtualKeyboardSpaceReserved() {\nfinal int expected = 280;\nfinal int actual = mFahrenheit.getBottom();\nassertTrue(actual <= expected);\n}\n\n```", "```java\n@UiThreadTest\npublic final void testFahrenheitToCelsiusConversion() { mCelsius.clear();\nmFahrenheit.clear();\nfinal double f = 32.5;\nmFahrenheit.requestFocus(); mFahrenheit.setNumber(f);\nmCelsius.requestFocus(); final double expectedC =\nTemperatureConverter.fahrenheitToCelsius(f);\nfinal double actualC = mCelsius.getNumber();\nfinal double delta = Math.abs(expectedC - actualC);\nfinal String msg = \"\" + f + \"F -> \" + expectedC + \"C but was \" + actualC + \"C (delta \" + delta + \")\";\nfinal String msg = \"\" + f + \"F -> \" + expectedC + \"C but was \" + actualC + \"C (delta \" + delta + \")\";\nassertTrue(msg, delta < 0.005);\n}\n\n```", "```java\npublic class TemperatureConverterActivityTests extends\nActivityInstrumentationTestCase2<TemperatureConverterActivity> {\nprivate TemperatureConverterActivity mActivity; private EditNumber mCelsius;\nprivate EditNumber mFahrenheit;\nprivate TextView mCelsiusLabel;\nprivate TextView mFahrenheitLabel;\nâ€¦\n\n```", "```java\n<com.example.aatg.tc.EditNumber\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/celsius\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_margin=\"@dimen/margin\"\nandroid:gravity=\"right|center_vertical\"\nandroid:saveEnabled=\"true\" />\n\n```", "```java\n/**\n* Test method for {@link com.example.aatg.tc. TemperatureConverter#fahrenheitToCelsius(double)}.\n*/\npublic final void testFahrenheitToCelsius() { for (double c: conversionTableDouble.keySet()) {\nfinal double f = conversionTableDouble.get(c);\nfinal double ca = TemperatureConverter.fahrenheitToCelsius(f);\nfinal double delta = Math.abs(ca - c);\nfinal String msg = \"\" + f + \"F -> \" + c + \"C but is \" + ca + \" (delta \" + delta + \")\";\nassertTrue(msg, delta < 0.0001);\n}\n}\n\n```", "```java\nprivate static final HashMap<Double, Double> conversionTableDouble = new HashMap<Double, Double>();\nstatic {\n// initialize (c, f) pairs\nconversionTableDouble.put(0.0, 32.0);\nconversionTableDouble.put(100.0, 212.0);\nconversionTableDouble.put(-1.0, 30.20);\nconversionTableDouble.put(-100.0, -148.0);\nconversionTableDouble.put(32.0, 89.60);\nconversionTableDouble.put(-40.0, -40.0);\nconversionTableDouble.put(-273.0, -459.40);\n}\n\n```", "```java\npublic class TemperatureConverter {\npublic static final double ABSOLUTE_ZERO_C = -273.15d;\npublic static final double ABSOLUTE_ZERO_F = -459.67d;\nprivate static final String ERROR_MESSAGE_BELOW_ZERO_FMT =\n\"Invalid temperature: %.2f%c below absolute zero\";\npublic static double fahrenheitToCelsius(double f) {\nif (f < ABSOLUTE_ZERO_F) {\nthrow new InvalidTemperatureException(\nString.format(ERROR_MESSAGE_BELOW_ZERO_FMT, f, 'F'));\n}\nreturn ((f - 32) / 1.8d);\n}\n}\n\n```", "```java\npublic class InvalidTemperatureException extends RuntimeException {\npublic InvalidTemperatureException(String msg) {\nsuper(msg);\n}\n}\n\n```", "```java\n/**\n* Constructor\n*/\npublic EditNumberTests() {\nthis(\"EditNumberTests\");\n}\n/**\n* @param name\n*/\npublic EditNumberTests(String name) {\nsetName(name);\n}\n\n```", "```java\n/* (non-Javadoc)\n* @see junit.framework.TestCase#setUp()\n*/\nprotected void setUp() throws Exception {\nsuper.setUp();\nmEditNumber = new EditNumber(mContext);\nmEditNumber.setFocusable(true);\n}\n\n```", "```java\n/**\n* Test method for {@link com.example.aatg.tc.EditNumber#clear()}.\n*/\npublic final void testClear() {\nfinal String value = \"123.45\";\nmEditNumber.setText(value);\nmEditNumber.clear();\nString expectedString = \"\";\nString actualString = mEditNumber.getText().toString();\nassertEquals(expectedString, actualString);\n}\n\n```", "```java\npublic void clear() {\nsetText(\"\");\n}\n\n```", "```java\n/**\n* Test method for {@link com.example.aatg.tc.EditNumber#setNumber(double)}.\n*/\npublic final void testSetNumber() {\nmEditNumber.setNumber(123.45);\nfinal String expected = \"123.45\";\nfinal String actual = mEditNumber.getText().toString();\nassertEquals(expected, actual);\n}\n\n```", "```java\nprivate static final String DEFAULT_FORMAT = \"%.2f\";\npublic void setNumber(double f) {super.setText( String.format(DEFAULT_FORMAT, f));\n}\n\n```", "```java\n/**\n* Test method for {@link com.example.aatg.tc.EditNumber#getNumber()}.\n*/\npublic final void testGetNumber() {\nmEditNumber.setNumber(123.45);\nfinal double expected = 123.45;\nfinal double actual = mEditNumber.getNumber();\nassertEquals(expected, actual);\n}\n\n```", "```java\npublic double getNumber() {\nLog.d(\"EditNumber\", \"getNumber() returning value of '\" + getText().toString() + \"'\");\nreturn Double.valueOf(getText().toString());\n}\n\n```", "```java\n/**\n* Changes fields values when text changes applying the corresponding method.\n*\n*/\npublic class TemperatureChangedWatcher implements TextWatcher {\nprivate final EditNumber mSource;\nprivate final EditNumber mDest;\nprivate OP mOp;\n/**\n* @param mDest\n* @param convert\n* @throws NoSuchMethodException\n* @throws SecurityException\n*/\npublic TemperatureChangedWatcher(TemperatureConverter.OP op) {\nif ( op == OP.C2F ) {\nthis.mSource = mCelsius;\nthis.mDest = mFahrenheit;\n}\nelse {\nthis.mSource = mFahrenheit;\nthis.mDest = mCelsius;\n}\nthis.mOp = op;\n}\n/* (non-Javadoc)\n* @see android.text.TextWatcher#afterTextChanged( android.text.Editable)\n*/\npublic void afterTextChanged(Editable s) {\n// TODO Auto-generated method stub\n}\n/* (non-Javadoc)\n* @see android.text.TextWatcher#beforeTextChanged( java.lang.CharSequence, int, int, int)\n*/\npublic void beforeTextChanged( CharSequence s, int start, int count, int after) {\n// TODO Auto-generated method stub\n}\n/* (non-Javadoc)\n* @see android.text.TextWatcher#onTextChanged( java.lang.CharSequence, int, int, int)\n*/\npublic void onTextChanged(CharSequence s, int start, int before, int count) {\nif (!mDest.hasWindowFocus() || mDest.hasFocus() || s == null )\n{\nreturn;\n}\nfinal String str = s.toString();\nif ( \"\".equals(str) ) {\nmDest.setText(\"\");\nreturn;\n}\ntry {\nfinal double temp = Double.parseDouble(str);\nfinal double result = (mOp == OP.C2F) ? TemperatureConverter.celsiusToFahrenheit(temp) :\nTemperatureConverter.fahrenheitToCelsius(temp);\nfinal String resultString = String.format(\"%.2f\", result);\nmDest.setNumber(result);\nmDest.setSelection(resultString.length());\n} catch (NumberFormatException e) {\n// WARNING\n// this is generated while a number is entered,\n// for example just a '-'\n// so we don't want to show the error\n} catch (Exception e) {\nmSource.setError(\"ERROR: \" + e.getLocalizedMessage());\n}\n}\n}\n\n```", "```java\n/**\n* C2F: celsiusToFahrenheit\n* F2C: fahrenheitToCelsius\n*/\npublic static enum OP { C2F, F2C };\n\n```", "```java\n/** Called when the activity is first created. */\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nmCelsius = (EditNumber) findViewById(R.id.celsius);\nmFahrenheit = (EditNumber) findViewById(R.id.fahrenheit); mCelsius.addTextChangedListener(\nnew TemperatureChangedWatcher(OP.C2F));\nmFahrenheit.addTextChangedListener(\nnew TemperatureChangedWatcher(OP.F2C));\n}\n\n```", "```java\n/**\n* Test method for {@link com.example.aatg.tc.TemperatureConverter#celsiusToFahrenheit(double)}.\n*/\npublic final void testCelsiusToFahrenheit() {\nfor (double c: conversionTableDouble.keySet()) {\nfinal double f = conversionTableDouble.get(c);\nfinal double fa = TemperatureConverter.celsiusToFahrenheit(c);\nfinal double delta = Math.abs(fa - f);\nfinal String msg = \"\" + c + \"C -> \" + f + \"F but is \" + fa + \" (delta \" + delta + \")\";\nassertTrue(msg, delta < 0.0001);\n}\n}\n\n```", "```java\npublic static double celsiusToFahrenheit(double c) {\nif (c < ABSOLUTE_ZERO_C) {\nthrow new InvalidTemperatureException(\nString.format(ERROR_MESSAGE_BELOW_ZERO_FMT, c, 'C'));\n}\nreturn (c * 1.8d + 32);\n}\n\n```", "```java\npublic final void testExceptionForLessThanAbsoluteZeroF() {\ntry {\nTemperatureConverter.fahrenheitToCelsius( TemperatureConverter.ABSOLUTE_ZERO_F-1);\nfail();\n}\ncatch (InvalidTemperatureException ex) {\n// do nothing\n}\n}\n\n```", "```java\npublic final void testExceptionForLessThanAbsoluteZeroC() {\ntry {\nTemperatureConverter.celsiusToFahrenheit( TemperatureConverter.ABSOLUTE_ZERO_C-1);\nfail();\n}\ncatch (InvalidTemperatureException ex) {\n// do nothing\n}\n}\n\n```", "```java\npublic void testInputFilter() throws Throwable {\nrunTestOnUiThread(new Runnable() {\n@Override\npublic void run() {\nmCelsius.requestFocus();\n}\n});\nfinal Double n = -1.234d;\nsendKeys(\"MINUS 1 PERIOD 2 PERIOD 3 PERIOD 4\");\nObject nr = null;\ntry {\nnr = mCelsius.getNumber();\n}\ncatch (NumberFormatException e) {\nnr = mCelsius.getText();\n}\nfinal String msg = \"-1.2.3.4 should be filtered to \" + n +\n\" but is \" + nr;\nassertEquals(msg, n, nr);\n}\n\n```", "```java\n/**\n* Initialization.\n* Set filter.\n*\n*/\nprivate void init() {\n// DigistKeyListener.getInstance(true, true) returns an\n// instance that accepts digits, sign and decimal point\nfinal InputFilter[] filters = new InputFilter[] { DigitsKeyListener.getInstance(true, true) };\nsetFilters(filters);\n}\nThen from the constructors we should invoke this method:\n/**\n* @param context\n* @param attrs\n*/\npublic EditNumber(Context context, AttributeSet attrs) {\nsuper(context, attrs);\ninit();>\n}\n\n```"]