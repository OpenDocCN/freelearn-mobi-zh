["```swift\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.lblOutput.BackgroundColor = UIColor.Green;\n    this.buttonAnimate.TouchUpInside += delegate {\n    RectangleF labelFrame = this.lblOutput.Frame;\n    labelFrame.Y = 380f;\n    UIView.BeginAnimations(\"LabelPositionAnimation\");\n    UIView.SetAnimationDuration(1);\n    UIView.SetAnimationCurve(UIViewAnimationCurve.EaseInOut);\n    UIView.SetAnimationDelegate(this);\n    UIView.SetAnimationDidStopSelector(new Selector(\"LabelPositionAnimationStopped\"));\n    this.lblOutput.Frame = labelFrame;\n    UIView.CommitAnimations();\n    };\n    }\n\n    ```", "```swift\n    [Export(\"LabelPositionAnimationStopped\")]\n    public void LabelAnimationStopped(){\n    this.lblOutput.Text = \"Animation ended!\";\n    this.lblOutput.BackgroundColor = UIColor.Red;\n    }\n\n    ```", "```swift\nUIView.BeginAnimations(\"LabelPositionAnimation\");\n\n```", "```swift\nUIView.SetAnimationDuration(1);\nUIView.SetAnimationCurve(UIViewAnimationCurve.EaseInOut);\n\n```", "```swift\nUIView.SetAnimationDelegate(this);\n\n```", "```swift\nUIView.SetAnimationDidStopSelector(new Selector(\"LabelPositionAnimationStopped\"));\n\n```", "```swift\nusing MonoTouch.ObjCRuntime;\n\n```", "```swift\nthis.lblOutput.Frame = labelFrame;\nUIView.CommitAnimations();\n\n```", "```swift\nUIView.Animate(1, 0, UIViewAnimationOptions.CurveEaseInOut, delegate { this.lblOutput.Frame = labelFrame; }, delegate { this.LabelAnimationStopped(); } );\n\n```", "```swift\n    using MonoTouch.CoreGraphics;\n\n    ```", "```swift\n    private double rotationAngle;\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.buttonRotate.TouchUpInside += delegate {\n    this.rotationAngle += 90;\n    CGAffineTransform transform = CGAffineTransform.MakeRotation( (float)this.DegreesToRadians(this.rotationAngle));\n    UIView.BeginAnimations(\"RotateLabelAnimation\");\n    UIView.SetAnimationDuration(0.5f);\n    this.lblOutput.Transform = transform;\n    UIView.CommitAnimations();\n    this.lblOutput.Text = string.Format(\"Rotated to {0} degrees.\", this.rotationAngle);\n    if (this.rotationAngle >= 360){\n    this.rotationAngle = 0;\n    this.lblOutput.Transform = CGAffineTransform.MakeIdentity();\n    }\n    };\n    }\n    public double DegreesToRadians (double degrees){\n    return (degrees * Math.PI / 180);\n    }\n\n    ```", "```swift\nCGAffineTransform transform = CGAffineTransform.MakeRotation( (float)this.DegreesToRadians(this.rotationAngle));\n\n```", "```swift\nUIView.BeginAnimations(\"RotateLabelAnimation\");\nUIView.SetAnimationDuration(0.5f);\nthis.lblOutput.Transform = transform;\nUIView.CommitAnimations();\n\n```", "```swift\nthis.rotationAngle = 0;\nthis.lblOutput.Transform = CGAffineTransform.MakeIdentity();\n\n```", "```swift\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.imageView.ContentMode = UIViewContentMode.ScaleAspectFit;\n    this.imageView.AnimationImages = new UIImage[] {\n    UIImage.FromFile(\"images/Kastoria.jpg\"),\n    UIImage.FromFile(\"images/Parga02.jpg\"),\n    UIImage.FromFile(\"images/Toroni.jpg\")\n    } ;\n    this.imageView.AnimationDuration = 3;\n    this.imageView.AnimationRepeatCount = 10;\n    this.buttonAnimate.TouchUpInside += delegate {\n    if (!this.imageView.IsAnimating){\n    this.imageView.StartAnimating();\n    }\n    };\n    this.buttonStop.TouchUpInside += delegate {\n    if (this.imageView.IsAnimating){\n    this.imageView.StopAnimating();\n    }\n    };\n    }\n\n    ```", "```swift\nthis.imageView.AnimationImages = new UIImage[] {\nUIImage.FromFile(\"images/Kastoria.jpg\"),\nUIImage.FromFile(\"images/Parga02.jpg\"),\nUIImage.FromFile(\"images/Toroni.jpg\")\n} ;\n\n```", "```swift\nthis.imageView.AnimationDuration = 3;\nthis.imageView.AnimationRepeatCount = 10;\n\n```", "```swift\n    using MonoTouch.CoreAnimation;\n\n    ```", "```swift\n    private CALayer copyLayer;\n\n    ```", "```swift\n    this.buttonCopy.TouchUpInside += delegate {\n    this.lblTarget.Text = string.Empty;\n    this.lblTarget.BackgroundColor = UIColor.Blue;\n    this.copyLayer = new CALayer();\n    this.copyLayer.Frame = this.lblSource.Frame;\n    this.copyLayer.Contents = this.lblSource.Layer.Contents;\n    this.View.Layer.AddSublayer(this.copyLayer);\n     CABasicAnimation positionAnimation = CABasicAnimation.FromKeyPath(\"position\");\n    positionAnimation.To = NSValue.FromPointF(this.lblTarget.Center);\n    positionAnimation.Duration = 1;\n    positionAnimation.RemovedOnCompletion = true;\n    positionAnimation.TimingFunction = CAMediaTimingFunction.FromName( CAMediaTimingFunction.EaseInEaseOut);\n    positionAnimation.AnimationStopped += delegate {\n    this.lblTarget.BackgroundColor = this.lblSource.BackgroundColor;\n    this.lblTarget.Text = this.lblSource.Text;\n    this.lblTarget.TextColor = this.lblSource.TextColor;\n    this.copyLayer.RemoveFromSuperLayer();\n    };\n    CABasicAnimation sizeAnimation = CABasicAnimation.FromKeyPath(\"bounds\");\n    sizeAnimation.To = NSValue.FromRectangleF(new RectangleF(0f, 0f, this.lblSource.Bounds.Width * 2f, this.lblSource.Bounds.Height * 2));\n    sizeAnimation.Duration = positionAnimation.Duration / 2;\n    sizeAnimation.RemovedOnCompletion = true;\n    sizeAnimation.AutoReverses = true; \n    this.copyLayer.AddAnimation(positionAnimation, \"PositionAnimation\");\n    this.copyLayer.AddAnimation(sizeAnimation, \"SizeAnimation\");\n    } ;\n\n    ```", "```swift\nthis.copyLayer = new CALayer();\nthis.copyLayer.Frame = this.lblSource.Frame;\nthis.copyLayer.Contents = this.lblSource.Layer.Contents;\nthis.View.Layer.AddSublayer(this.copyLayer);\n\n```", "```swift\nthis.copyLayer.AddAnimation(positionAnimation, \"PositionAnimation\");\nthis.copyLayer.AddAnimation(sizeAnimation, \"SizeAnimation\");\n\n```", "```swift\n    public class DrawingView : UIView\n\n    ```", "```swift\n    using MonoTouch.CoreGraphics;\n\n    ```", "```swift\n    public override void Draw (RectangleF rect){\n    base.Draw (rect);\n    Console.WriteLine(\"DrawingView draw!\");\n    using (CGContext context = UIGraphics.GetCurrentContext()){\n    context.SetLineWidth(5f);\n    context.SetStrokeColorWithColor(UIColor.Green.CGColor);\n    context.AddLines(new PointF[] {\n    new PointF(0f, this.Bounds.Height),\n    new PointF(this.Bounds.Width, 0f)\n    } );\n    context.StrokePath();\n    context.SetStrokeColorWithColor(UIColor.Red.CGColor);\n     context.MoveTo(0, this.Bounds.Height);\n    context.AddCurveToPoint(0f, this.Bounds.Height, 50f, this.Bounds.Height / 2f, this.Bounds.Width, 0f); \n    context.StrokePath();\n    }\n    }\n\n    ```", "```swift\n    DrawingView drawingView = new DrawingView(this.View.Bounds);\n    drawingView.BackgroundColor = UIColor.Gray;\n    this.View.AddSubview(this.drawingView);\n\n    ```", "```swift\npublic override void Draw (RectangleF rect)\n\n```", "```swift\nusing (CGContext context = UIGraphics.GetCurrentContext())\n\n```", "```swift\ncontext.SetLineWidth(5f);\ncontext.SetStrokeColorWithColor(UIColor.Green.CGColor);\ncontext.AddLines(new PointF[] {\nnew PointF(0f, this.Bounds.Height),\nnew PointF(this.Bounds.Width, 0f)\n} );\n\n```", "```swift\ncontext.StrokePath();\n\n```", "```swift\n    using (CGContext context = UIGraphics.GetCurrentContext()){\n    context.SetFillColorWithColor(UIColor.Blue.CGColor);\n    context.SetShadow(new SizeF(10f, 10f), 5f);\n    context.AddEllipseInRect(new RectangleF(100f, 100f, 100f, 100f));\n    context.FillPath();\n    context.SetFillColorWithColor(UIColor.Red.CGColor);\n    context.AddRect(new RectangleF(150f, 150f, 100f, 100f));\n    context.FillPath();\n    }\n\n    ```", "```swift\ncontext.SetFillColorWithColor(UIColor.Blue.CGColor);\n\n```", "```swift\ncontext.AddEllipseInRect(new RectangleF(100f, 100f, 100f, 100f));\n\n```", "```swift\ncontext.FillPath();\n\n```", "```swift\ncontext.SetShadow(new SizeF(10f, 10f), 5f);\n\n```", "```swift\ncontext.SetFillColorWithColor(new CGColor(1f, 0f, 0f, 0.5f));\n\n```", "```swift\n    using (CGContext context = UIGraphics.GetCurrentContext()){\n    context.SetFillColorWithColor(UIColor.Yellow.CGColor);\n    context.SetTextDrawingMode(CGTextDrawingMode.FillStroke);\n    NSString drawText = new NSString(\"This text is drawn!\");\n    drawText.DrawString(new PointF(10f, 100f), UIFont.FromName(\"Verdana-Bold\", 28f));\n    }\n\n    ```", "```swift\ncontext.SetTextDrawingMode(CGTextDrawingMode.FillStroke);\n\n```", "```swift\ndrawText.DrawString(new PointF(10f, 100f), UIFont.FromName( \"Verdana-Bold\", 28f));\n\n```", "```swift\ncontext.SelectFont(\"Verdana-Bold\", 28f, CGTextEncoding.MacRoman);\n\n```", "```swift\ncontext.ShowTextAtPoint(10, 100, drawText.ToString());\n\n```", "```swift\ncontext.TextMatrix = new CGAffineTransform(1, 0, 0, -1, 0, 0);\n\n```", "```swift\ncontext.TextMatrix = new CGAffineTransform(1, 1, 0, -1, 0, 0);\n\n```", "```swift\nConsole.WriteLine(\"Text size: {0}\", drawText.StringSize(UIFont.FromName(\"Verdana-Bold\", 28f)));\n\n```", "```swift\n    public class CanvasView : UIView{\n    public CanvasView (RectangleF frame) : base(frame){\n    this.drawPath = new CGPath();\n    }\n    private PointF touchLocation;\n    private PointF previousTouchLocation;\n    private CGPath drawPath;\n    private bool fingerDraw;\n    public override void TouchesBegan (NSSet touches, UIEvent evt){\n    base.TouchesBegan (touches, evt);\n    UITouch touch = touches.AnyObject as UITouch;\n    this.fingerDraw = true;\n    this.touchLocation = touch.LocationInView(this);\n    this.previousTouchLocation = touch.PreviousLocationInView(this);\n    this.SetNeedsDisplay();\n    }\n    public override void TouchesMoved (NSSet touches, UIEvent evt){\n    base.TouchesMoved (touches, evt);\n    UITouch touch = touches.AnyObject as UITouch;\n    this.touchLocation = touch.LocationInView(this);\n    this.previousTouchLocation = touch.PreviousLocationInView(this);\n    this.SetNeedsDisplay();\n    }\n    public override void Draw (RectangleF rect){\n    base.Draw (rect);\n    if (this.fingerDraw){\n    using (CGContext context = UIGraphics.GetCurrentContext()){\n    context.SetStrokeColorWithColor(UIColor.Blue.CGColor);\n    context.SetLineWidth(5f);\n     context.SetLineJoin(CGLineJoin.Round);\n    context.SetLineCap(CGLineCap.Round); \n    this.drawPath.MoveToPoint(this.previousTouchLocation);\n    this.drawPath.AddLineToPoint(this.touchLocation);\n    context.AddPath(this.drawPath);\n    context.DrawPath(CGPathDrawingMode.Stroke);\n    }\n    }\n    }\n    }\n\n    ```", "```swift\ncontext.AddPath(this.drawPath);\ncontext.DrawPath(CGPathDrawingMode.Stroke);\n\n```", "```swift\n    public UIImage GetDrawingImage(){\n    UIImage toReturn = null;\n    UIGraphics.BeginImageContext(this.Bounds.Size);\n    using (CGContext context = UIGraphics.GetCurrentContext()){\n    context.SetStrokeColorWithColor(UIColor.Blue.CGColor);\n    context.SetLineWidth(10f);\n    context.SetLineJoin(CGLineJoin.Round);\n    context.SetLineCap(CGLineCap.Round);\n    context.AddPath(this.drawPath);\n    context.DrawPath(CGPathDrawingMode.Stroke);\n    toReturn = UIGraphics.GetImageFromCurrentImageContext();\n    }\n    UIGraphics.EndImageContext();\n    return toReturn;\n    }\n    public void ClearDrawing(){\n    this.fingerDraw = false;\n    this.drawPath.Dispose();\n    this.drawPath = new CGPath();\n    this.SetNeedsDisplay();\n    }\n\n    ```", "```swift\n    private CanvasView canvasView;\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.canvasView = new CanvasView(new RectangleF( this.View.Bounds.Location, new SizeF(this.View.Bounds.Width, this.buttonClear.Frame.Top - 10f)));\n    this.canvasView.BackgroundColor = UIColor.Gray;\n    this.View.AddSubview(this.canvasView);\n    this.buttonSave.TouchUpInside += delegate {\n    UIImage drawingImage = this.canvasView.GetDrawingImage();\n    drawingImage.SaveToPhotosAlbum(delegate( UIImage image, NSError error) {\n    if (error != null){\n    Console.WriteLine(\"Error saving image! {0}\", error.LocalizedDescription);\n    }\n    } );\n    } ;\n    this.buttonClear.TouchUpInside += delegate {\n    this.canvasView.ClearDrawing();\n    } ;\n    }\n\n    ```", "```swift\nUIGraphics.BeginImageContext(this.Bounds.Size);\n\n```", "```swift\ntoReturn = UIGraphics.GetImageFromCurrentImageContext();\n\n```", "```swift\nUIGraphics.EndImageContext();\nreturn toReturn;\n\n```", "```swift\nthis.fingerDraw = false;\nthis.drawPath.Dispose();\nthis.drawPath = new CGPath();\n\n```", "```swift\nthis.SetNeedsDisplay();\n\n```"]