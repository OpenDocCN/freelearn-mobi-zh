["```swift\nimport Foundation\nlet url = URL(string: 'https://apple.com')!\nlet task = URLSession.shared.dataTask(with: url) {\n  data, response, error in\n  if let data = data {\n    print(data)\n  }\n  if let response = response {\n    print(response)\n  }\n  if let error = error {\n    print(error)\n  }\n}\ntask.resume() \n```", "```swift\nimport PlaygroundSupport\nPlaygroundPage.current.needsIndefiniteExecution = true\n```", "```swift\n{ data, response, error in\n  guard let data = data, error == nil\n    else { return }\n\n  let responseString = String(data: data, encoding: .utf8)\n  print(responseString as Any)\n}\n```", "```swift\nlet api_key = 'YOUR_API_KEY_HERE'\nvar urlString = 'https://api.themoviedb.org/3/search/movie/'\nurlString = urlString.appending('?api_key=\\(api_key)')\nurlString = urlString.appending('&query=Swift')\nlet movieURL = URL(string: urlString)!\nvar urlRequest = URLRequest(url: movieURL)\nurlRequest.httpMethod = 'GET'\nurlRequest.setValue('application/json', forHTTPHeaderField: 'Accept')\nlet movieTask = URLSession.shared.dataTask(with: urlRequest) { data, response, error in\n  print(response as Any)\n}\nmovieTask.resume()\n```", "```swift\nguard let data = data, let json = try? JSONSerialization.jsonObject(with: data, options: []) else { return }\nprint(json)\n```", "```swift\nguard let data = data,\n  let json = try? JSONSerialization.jsonObject(with: data,\n  options: []),\n  let jsonDict = json as? [String: AnyObject],\n  let resultsArray = jsonDict['results'] as? [[String: Any]] \n  else { return }\nlet firstMovie = resultsArray[0]\nlet movieTitle = firstMovie['title'] as! String print(movieTitle)\n```", "```swift\nstruct MoviesResponse: Codable {\n  let results: [Movie]\n}\nstruct Movie: Codable {\n  let id: Int\n  let title: String\n  let popularity: Float\n}\n```", "```swift\nlet decoder = JSONDecoder()\nguard let data = data,\nlet movies = try? decoder.decode(MoviesResponse.self, from: data) else { return }\nprint(movies.results[0].title)\n```", "```swift\nstruct Movie: Codable {\n  enum CodingKeys: String, CodingKey {\n    case id, title, popularity\n    case posterPath = 'poster_path'\n  }\n  let id: Int\n  let title: String\n  let popularity: Float \n  let posterPath: String?\n}\n```", "```swift\nlet decoder = JSONDecoder()\ndecoder.keyDecodingStrategy = .convertFromSnakeCase\n```", "```swift\nstruct MovieDBHelper {\n  typealias MovieDBCallback = (Double?) -> Void\n  let apiKey = 'YOUR_API_KEY_HERE'\n  func fetchRating(forMovie movie: String, callback: @escaping\n  MovieDBCallback) {\n  }\n  private func url(forMovie movie: String) -> URL? {\n    guard let query = \n      movie.addingPercentEncoding(withAllowedCharacters: \n       .urlHostAllowed) else { return nil }\n    var urlString = \n    'https://api.themoviedb.org/3/search/movie/'\n    urlString = urlString.appending('?api_key=\\(apiKey)')\n    urlString = urlString.appending('&query=\\(query)')\n    return URL(string: urlString)\n  }\n}\n```", "```swift\ntypealias MovieDBCallback = (Double?) -> Void\n```", "```swift\nstruct MovieDBLookupResponse: Codable {\n  struct MovieDBMovie: Codable {\n    let popularity: Double?\n  }\n  let results: [MovieDBMovie]\n}\n```", "```swift\nfunc fetchRating(forMovie movie: String, callback: @escaping MovieDBCallback) {\n  guard let searchUrl = url(forMovie: movie) else {\n    callback(nil)\n    return\n  }\n  let task = URLSession.shared.dataTask(with: searchUrl) { \n    data, response, error in\n    var rating: Double? = nil\n    defer {\n      callback(rating)\n    }\n    let decoder = JSONDecoder()\n    guard error == nil,\n          let data = data,\n          let lookupResponse = try? \n          decoder.decode(MovieDBLookupResponse.self, from: \n          data),\n          let popularity = \n          lookupResponse.results.first?.popularity\n    else { return }\n    rating = popularity\n  }\n  task.resume()\n}\n```", "```swift\n    var rating: Double? = nil\n    defer {\n      callback(rating)\n    }\n```", "```swift\nlet helper = MovieDBHelper()\nhelper.fetchRating(forMovie: name) { rating in\n  guard let rating = rating else { return }\n  moc.persist {\n    movie.popularity = rating\n  }\n}\n```", "```swift\nmovie.popularity = rating\ndo {\n  try moc.save()\n} catch {\n  moc.rollback()\n}\n```", "```swift\ncell.detailTextLabel?.text = 'Rating: \\(movie.popularity)'\n```", "```swift\n@objc func managedObjectContextDidChange(notification: NSNotification) {\n  guard let userInfo = notification.userInfo else { return }\n  if let updatedObjects = userInfo[NSUpdatedObjectsKey] as? \n     Set<FamilyMember>,\nlet familyMember = self.familyMember, \n     updatedObjects.contains(familyMember) {\ntableView.reloadData() \n  }\n  if let updatedObjects = userInfo[NSUpdatedObjectsKey] as? \n  Set<Movie> {\n    for object in updatedObjects {\n      if object.familyMember == familyMember {\n        tableView.reloadData()\n        break\n      }\n    }\n  }\n}\n```"]