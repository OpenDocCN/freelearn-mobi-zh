- en: Foodie Reviews
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 食品评论
- en: We are all familiar with reviews, from food reviews to App Store reviews. Seeing
    reviews for websites and apps is common place. In this chapter, we will create
    a review form that has a custom five-star rating component that we will add to
    it. We will learn about `UIControls` and how powerful they are. We will also look
    at literals and how to use them in our code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都熟悉评论，从食品评论到App Store评论。看到网站和应用的评论很常见。在本章中，我们将创建一个包含自定义五星级评分组件的评论表单，并将其添加到其中。我们将了解`UIControls`及其强大功能。我们还将探讨字面量及其在代码中的使用方法。
- en: 'In this chapter, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: Creating a form that users can use to write a review
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户可以用来写评论的表单
- en: Creating a custom star rating
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义星级评分
- en: Image and color literals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像和颜色字面量
- en: Getting started with reviews
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始创建评论
- en: Our review form UI is set up, but we need to make a slight change to it. Right
    now, we have an image displayed for ratings. We are going to build a custom rating
    component that we will use in both restaurant details and our Review form.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的评论表单UI已经设置好了，但我们需要对其进行一些小的修改。目前，我们显示了一个用于评分的图像。我们将构建一个自定义评分组件，我们将在餐厅详情和我们的评论表单中使用它。
- en: We add it to our restaurant details first, then once we are finished, we add
    it to the Review form. We want our ratings view to be able to show ratings from
    zero stars to five stars. We also want the user to be able to select half stars
    when rating, so it will also need to show half stars.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将其添加到餐厅详情中，然后完成之后，再添加到评论表单中。我们希望我们的评分视图能够显示从零星到五星的评分。我们还希望用户在评分时能够选择半星，因此它还需要显示半星。
- en: 'The first thing we do is start creating our custom `UIControl`. `UIButtons`
    and `UISwitches` are sub-classes of `UIControls`, and without getting super technical,
    we are going to create our control:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是开始创建我们的自定义`UIControl`。`UIButtons`和`UISwitches`是`UIControls`的子类，而且不需要过于技术化，我们将创建我们的控件：
- en: Right click the `Reviews Form` folder and select New File.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击“评论表单”文件夹并选择“新建文件”。
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top, and then Cocoa Touch Class. Then, hit Next.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择新文件模板”屏幕中，在顶部选择iOS，然后选择Cocoa Touch Class。然后点击“下一步”。
- en: 'In the options screen that appears, add the following:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 新建文件：
- en: 'Class: `RatingsView`'
  id: totrans-14
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`RatingsView`
- en: 'Subclass: `UIControl`'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UIControl`
- en: 'Language: `Swift`'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next, and then Create.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”，然后点击“创建”。
- en: 'Now that we have created our file, we want to be able to hook it up to a `UIView`
    in storyboard. Let''s do the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了文件，我们希望能够在故事板中将它连接到一个`UIView`。让我们做以下操作：
- en: Open up `RestaurantDetail.storyboard`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`RestaurantDetail.storyboard`。
- en: In the object library of the Utilities panel, type `view` in the filter field.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“实用工具”面板的对象库中，在过滤器字段中输入`view`。
- en: Delete the image with the five empty stars.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除带有五个空星星的图像。
- en: Then, drag out a View into the cell with the empty stars.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将一个带有空星星的视图拖入单元格中。
- en: 'Select the View and, in the Size inspector, update the following values:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择视图，然后在“大小检查器”中更新以下值：
- en: 'X: `151`'
  id: totrans-24
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: X：`151`
- en: 'Y: `43`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y：`43`
- en: 'Width: `205`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`205`
- en: 'Height: `34`'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`34`
- en: 'Select the View, and then the Pin icon. Enter the following values:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择视图，然后点击“固定”图标。输入以下值：
- en: 'Top: `13`'
  id: totrans-29
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部：`13`
- en: 'Left: `` `0` ``'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左：`0`
- en: 'Width: `205` (checked)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`205`（已勾选）
- en: 'Height: `34` (checked)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`34`（已勾选）
- en: 'Constrain to margins: Unchecked'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制到边距：未勾选
- en: Click Add 4 Constraints.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加4个约束”。
- en: Next, select the Restaurant View Controller, then in the Identity inspector,
    update the Custom Class to `RatingsView` and hit *Enter*.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择“餐厅视图控制器”，然后在“身份检查器”中，将自定义类更新为`RatingsView`并按*Enter*键。
- en: Now, we are set up to get started. Open up the `RatingsView.swift` file and
    let's get started.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好开始。打开`RatingsView.swift`文件，让我们开始吧。
- en: Displaying ratings in our custom UIControl
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的自定义`UIControl`中显示评分
- en: 'Inside the `RatingsView.swift` file, we first need to create all of the variables
    we will need to work with. Add the following under the class declaration:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`RatingsView.swift`文件内部，我们首先需要创建所有我们将要使用的变量。在类声明下添加以下内容：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you are having trouble using an image literal, you can use `UIImage(named:)`
    instead.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用图像字面量时遇到麻烦，可以使用`UIImage(named:)`代替。
- en: 'We are doing something in this file. We are using image literals as our variables.
    If you type `Image Literal` in your file and hit return, you will see a small
    icon:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个文件中做一些事情。我们使用图像字面量作为变量。如果你在文件中输入`Image Literal`并按回车键，你会看到一个小的图标：
- en: '![](img/c04a4b00-0504-4bd5-95d6-cb8e59874aaf.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c04a4b00-0504-4bd5-95d6-cb8e59874aaf.png)'
- en: 'Double-click this icon and a modal appears that shows you an image to choose:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 双击此图标，会出现一个模态窗口，显示您可以选择的图片：
- en: '![](img/e032f96b-cec6-4973-8384-83f58b958f75.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e032f96b-cec6-4973-8384-83f58b958f75.png)'
- en: 'You can look and find the three images using this window, or you can just type
    everything you see here, and the image appears. When done you should see the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这个窗口查找并找到三张图片，或者您可以直接在这里输入您看到的所有内容，图片就会显示出来。完成后，您应该看到以下内容：
- en: '![](img/3b4db90e-1392-435f-9d26-f9fa6f20ebb0.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b4db90e-1392-435f-9d26-f9fa6f20ebb0.png)'
- en: The first three variables created are used for drawing our ratings view. The
    next variable, `showBecomeFirstResponder`, is a variable to let us be able to
    respond and handle events as they happen. Next, the rating variable is used for
    keeping track of our current rating. Finally, we have a variable to keep track
    of the total number of stars.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的前三个变量用于绘制我们的评分视图。下一个变量`showBecomeFirstResponder`是一个变量，让我们能够响应和处理事件。下一个变量是评分变量，用于跟踪我们的当前评分。最后，我们有一个变量来跟踪星星的总数。
- en: 'Now let''s add our `init` methods:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加我们的`init`方法：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These are just boilerplate code that you need when creating views. There''s
    nothing really to explain here other than that you need them. Next, we need to
    create a few methods that will handle creating our stars. We need three of them
    for each type of star (full, half, and empty). Add the following after the last
    curly bracket:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是创建视图时需要的一些样板代码。这里没有太多要解释的，除了您需要它们之外。接下来，我们需要创建一些方法来处理创建我们的星星。我们需要每种类型的星星（完整、半和空）三个。在最后一个大括号之后添加以下内容：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These methods just create a full, half, or empty star. We now need to be able
    to draw these stars. `UIView` has a draw method we can use to draw stars. Before
    the `drawStar(frame:highlighted:)` method, add the following method inside of
    the class:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法只是创建一个完整、半或空星星。我们现在需要能够绘制这些星星。`UIView`有一个`draw`方法，我们可以用它来绘制星星。在`drawStar(frame:highlighted:)`方法之前，在类内部添加以下方法：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here is all the code we need to create our stars. Let's break down the code
    and see what is happening. First, we get a graphics context, and we set its fill
    color to be clear. We are using a Color Literal this time, and this allows us
    to create colors and see those colors directly in our Swift file. You can either
    type `Color Literal` and hit *Enter*. You will see a white box has been created
    for you, and if you double-click this box, you can edit the color just like you
    would in storyboard.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们创建星星所需的所有代码。让我们分解代码，看看发生了什么。首先，我们获取一个图形上下文，并将其填充颜色设置为透明。这次我们使用颜色字面量，这允许我们在Swift文件中创建颜色并直接看到这些颜色。您可以输入`Color
    Literal`并按*Enter*键。您将看到一个白色框已经为您创建，如果您双击此框，就可以像在故事板中一样编辑颜色。
- en: 'Next, we create three variables: `availWidth`, `cellWidth`, and `starSide`.
    Since we are using `UIView` in the storyboard, we check to see the size of this
    container. We then determine the size of each star based on the width and the
    number of stars. Finally, we calculate the height of the star.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建三个变量：`availWidth`、`cellWidth`和`starSide`。由于我们在故事板中使用`UIView`，我们检查这个容器的尺寸。然后，我们根据宽度和星星的数量确定每颗星星的大小。最后，我们计算星星的高度。
- en: Then, we loop through each star and create them based on the rating value. Our
    rating can be 0-5, with increments of `0.5`. We also set up the positioning of
    each star using the center point. Finally, we determine, based on the value, whether
    the star should be an empty star, a half star, or a full star. That is our setup
    method and you do not have to get what is going on entirely, just have a basic
    understanding, and the more you code, the more it starts to make sense.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们遍历每一颗星星，并根据评分值创建它们。我们的评分可以是0-5，增量是`0.5`。我们还设置了每个星星的位置，使用中心点。最后，根据值确定星星应该是空星星、半星星还是满星星。这就是我们的设置方法，您不需要完全理解其工作原理，只需有一个基本理解即可，随着您代码量的增加，它开始变得有意义。
- en: 'Before we build the project, open `RestaurantDetailViewController`, and under
    import `UIKit`, add the following import:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建项目之前，打开`RestaurantDetailViewController`，在`import UIKit`下添加以下导入：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s do some cleaning up by moving the `createMap()`, `setupLabels()`, and
    `takeSnapshot(:location)` methods into a private extension. When you are done,
    you should see the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将`createMap()`、`setupLabels()`和`takeSnapshot(:location)`方法移动到一个私有扩展中来做一些清理工作。完成后，您应该看到以下内容：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, add the following method into the private method:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下方法添加到私有方法中：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, open `RestaurantDetail.storyboard` and select the Restaurant View Controller,
    then in the Outlet inspector click and drag from `ratingView` to the `UIView`
    we created earlier. Let''s build and run the project by hitting the Play button
    (or use *cmd* + R). When you get to the restaurant details, you will see that
    we now have 3.5 stars:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`RestaurantDetail.storyboard`，选择餐厅视图控制器，然后在输出检查器中点击并从`ratingView`拖动到我们之前创建的`UIView`。通过点击播放按钮（或使用*cmd*
    + R）来构建和运行项目。当你到达餐厅详情时，你会看到我们现在有了3.5颗星：
- en: '![](img/02c69175-9d42-4b4c-8edc-f1e2d3b7eb32.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02c69175-9d42-4b4c-8edc-f1e2d3b7eb32.jpg)'
- en: This is precisely what we want, but we also need our control be able to handle
    touch events.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们想要的，但我们还需要我们的控件能够处理触摸事件。
- en: Adding our touch events
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加我们的触摸事件
- en: 'Adding touch events will be used to change the rating to the desired rating.
    Open `RatingView` and let''s add the methods we need to get our control to accept
    touch events by adding the following inside the main class:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 添加触摸事件将用于将评分更改为所需的评分。打开`RatingView`，让我们在主类内部添加所需的方法，以便我们的控件能够通过添加以下内容来接受触摸事件：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, add the following into the private extension:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在私有扩展中添加以下内容：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The following code is used to handle touch. First, we set the `canBecomeFirstResponder`
    variable. Next, we have the `beginTracking(touch:event:)`. In this method, we
    set whether our control can accept touch events. If the control is enabled, then
    we allow touches, and we call the `handle()` method and pass it the `UITouch`
    location. Let's discuss the `handle()` method.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码用于处理触摸。首先，我们设置`canBecomeFirstResponder`变量。然后，我们有`beginTracking(touch:event:)`。在这个方法中，我们设置我们的控件是否可以接受触摸事件。如果控件被启用，则允许触摸，并调用`handle()`方法并传递`UITouch`位置。让我们讨论一下`handle()`方法。
- en: In our handle method, we start with three variables. We first get the width
    of the entire rating view. Next, we get the value of the touch location, then
    finally we take the `x` value of the location and divide it by the width. We then
    check the value, figure out whether it is less than `0.5` or greater than `0.5`,
    and round appropriately. Last, we update the rating with the value we calculate.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的处理方法中，我们开始有三个变量。我们首先获取整个评分视图的宽度。然后，我们获取触摸位置的价值，然后最后我们取位置的`x`值并将其除以宽度。然后我们检查这个值，确定它是否小于`0.5`或大于`0.5`，并相应地进行四舍五入。最后，我们使用我们计算出的值更新评分。
- en: In the `updateRating(value:)` method, we check to make sure that our value is
    not equal to the current value and whether the value is greater than zero and
    less than the total number of stars. If these conditions pass, then we set the
    rating to the new value and call the `setNeedsDisplay()` method. This method makes
    sure that our control is redrawn.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`updateRating(value:)`方法中，我们检查我们的值是否不等于当前值，以及该值是否大于零且小于总星数。如果这些条件通过，则我们将评分设置为新的值并调用`setNeedsDisplay()`方法。此方法确保我们的控件被重新绘制。
- en: 'Open `RestaurantDetailsViewController` and in the `createRating()` method,
    add the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`RestaurantDetailsViewController`，在`createRating()`方法中添加以下内容：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We now have a rating, and by setting the rating to 3.5, we should now see 3.5
    stars. We also set the `isEnabled` value to `true`, which means we can touch and
    change the rating. If we set it to `false`, then the value cannot change. In the
    restaurant details, we want to turn off touch, but in the `ReviewFormViewController`
    we want that to be enabled. You can play with this, and when done set the `isEnable`
    value to `false` and remove the rating.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了评分，通过将评分设置为3.5，我们现在应该看到3.5颗星。我们还设置了`isEnabled`值为`true`，这意味着我们可以触摸并更改评分。如果我们将其设置为`false`，则值无法更改。在餐厅详情中，我们希望关闭触摸，但在`ReviewFormViewController`中我们希望它被启用。你可以尝试一下，完成后将`isEnable`值设置为`false`并移除评分。
- en: 'We set the rating later in the book when we start saving reviews:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面设置评分，当我们开始保存评论时：
- en: '![](img/ec8a24b4-f014-4de4-8c7c-4c131537aa0f.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec8a24b4-f014-4de4-8c7c-4c131537aa0f.jpg)'
- en: You can now change the rating from 3.5 to 4.5 by tapping on the view. Now that
    we have this set up, let's get our review form set up.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过点击视图将评分从3.5更改为4.5。现在我们已经设置好了这个，让我们设置我们的评论表单。
- en: Setting up the unwind segues
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置撤销（unwind）转场
- en: 'As we have done before, we need to add code for us to unwind (dismiss) a View
    Controller:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所做的那样，我们需要添加代码以便我们能够撤销（解散）视图控制器：
- en: 'Open the `RestaurantDetailsViewController.swift` file and add the following
    into the private extension:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`RestaurantDetailsViewController.swift`文件，并在私有扩展中添加以下内容：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the file and open the `ReviewForm.storyboard`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并打开`ReviewForm.storyboard`。
- en: 'CTL drag the Cancel button to the Exit icon inside of the same View Controller:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CTL拖动取消按钮到同一视图控制器中的退出图标：
- en: '![](img/395c9bd9-c1ad-40f4-bd17-118a4451a4f3.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/395c9bd9-c1ad-40f4-bd17-118a4451a4f3.png)'
- en: In the screen that appears, under Action Segue, select `unwindReviewCancelWithSegue`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的屏幕中，在操作切换下选择`unwindReviewCancelWithSegue`。
- en: If you build and run the project by hitting the Play button (or use *cmd* +
    *R*), you should now be able to dismiss the Ratings View.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过点击播放按钮（或使用*cmd* + *R*）构建和运行项目，现在应该能够关闭评分视图。
- en: Setting up our rating control
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的评分控制
- en: 'We are now going to set up our rating control:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将设置我们的评分控制：
- en: Open up `ReviewForm.storyboard`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ReviewForm.storyboard`。
- en: In the object library of the Utilities panel, type `view` in the filter field.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实用工具面板的对象库中，在过滤器字段中输入`view`。
- en: Delete the image with the five empty stars.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除带有五个空星的图片。
- en: Then, drag out a View into the cell with the empty stars.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将一个视图拖到带有空星的单元格中。
- en: 'Select the View and, in the Size inspector, update the following values:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择视图，并在“大小检查器”中更新以下值：
- en: 'X: `133`'
  id: totrans-96
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: X：`133`
- en: 'Y: `7`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y：`7`
- en: 'Width: `108`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`108`
- en: 'Height: `17`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`17`
- en: Next, in the Identity inspector, update the **Custom Class** to `RatingsView`
    and hit *Enter*.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在“身份检查器”中，将**自定义类**更新为`RatingsView`并按*Enter*键。
- en: 'Next, select the view inside of the view and then select the Pin icon and enter
    the following values:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择视图内部的视图，然后选择固定图标并输入以下值：
- en: 'Top: `7`'
  id: totrans-102
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部：`7`
- en: 'Constrain to margins: Unchecked'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制到边距：未勾选
- en: 'Width: `108` (should be checked)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`108`（应该被勾选）
- en: 'Height: `17` (should be checked)'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`17`（应该被勾选）
- en: Click Add 3 Constraints.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加3个约束。
- en: Next, click the Align icon and enter the value of Horizontally in Container as
    `0` (should be checked).
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击对齐图标并输入“容器中水平”的值为`0`（应该被勾选）。
- en: Click Add 1 Constraint.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加1个约束。
- en: Select the label that says Tap a Star to Rate.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择标签“点击星星进行评分”。
- en: Then, select the Pin icon and enter the value of Top as `1`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择固定图标并输入“顶部”的值为`1`。
- en: Click Add 1 Constraints.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加1个约束。
- en: Next, select the Restaurant View Controller, then in the Identity inspector,
    update the Custom Class to `RatingsView` and hit *Enter*.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择餐厅视图控制器，然后在“身份检查器”中，将自定义类更新为`RatingsView`并按*Enter*键。
- en: Our form is now updated; let's create our controller next.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已更新了表单；接下来让我们创建我们的控制器。
- en: Creating our review form controller
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的评论表单控制器
- en: Right-click the `Review Form` folder again and select New File.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击“评论表单”文件夹，然后选择“新建文件”。
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top, and then Cocoa Touch Class. Then, hit Next.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕中，在顶部选择iOS，然后选择Cocoa Touch类。然后，点击下一步。
- en: 'In the options screen that appears, add the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `ReviewFormViewController`'
  id: totrans-119
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`ReviewFormViewController`
- en: 'Subclass: `UITableViewController`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UITableViewController`
- en: 'Also create XIB: Unchecked'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也创建XIB：未勾选
- en: 'Language: `Swift`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next, and then Create.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步，然后创建。
- en: 'Delete everything after the `viewDidLoad()` method, as we do not need all of
    the other code. Next, let''s set up our `ReviewFormViewController` by adding the
    following after the class declaration:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 删除`viewDidLoad()`方法之后的所有内容，因为我们不需要其他所有代码。接下来，让我们通过在类声明之后添加以下内容来设置我们的`ReviewFormViewController`：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We also need to add a method when our save button is tapped by adding the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在保存按钮被点击时添加一个方法，如下所示：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s now connect this file with our `UIViewController` and our review form
    in storyboard:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将此文件与我们的`UIViewController`和故事板中的评论表单连接起来：
- en: In the Utilities panel, select the Identity inspector.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实用工具面板中，选择“身份检查器”。
- en: Under Custom Class, in the Class drop-down menu, type/select ReviewFormViewController
    and hit *Enter* in order connect the View Controller to the class.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自定义类下，在类下拉菜单中输入/选择`ReviewFormViewController`并按*Enter*键以将视图控制器连接到该类。
- en: Now, select the Connections inspector in the Utilities panel.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在实用工具面板中选择“连接检查器”。
- en: Now, click and drag from the empty circle of each of the following variables
    we just added under Outlets to their respective elements in either the scene or
    Outline view.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击并拖动我们刚刚添加的以下每个变量的空圆圈到场景或大纲视图中的相应元素。
- en: 'Click and drag from the empty circle for `ratingView` to the `UIView` in the
    storyboard:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并拖动`ratingView`的空圆圈到故事板中的`UIView`：
- en: '![](img/b19321b1-0ee1-491c-908d-d59a011ace3a.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b19321b1-0ee1-491c-908d-d59a011ace3a.png)'
- en: 'Click and drag from the empty circle for `tfTitle` to the `Textfield` in the
    storyboard:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从空圆圈点击并拖动`tfTitle`到故事板中的`Textfield`：
- en: '![](img/baa34c8c-194d-4be9-a52e-7fa14d1aa20e.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/baa34c8c-194d-4be9-a52e-7fa14d1aa20e.png)'
- en: 'Click and drag from the empty circle for `tfName` to the `Textfield` in the
    storyboard:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从空圆圈点击并拖动`tfName`到故事板中的`Textfield`：
- en: '![](img/a1d11d0c-8037-45d3-a7cd-ece9b0cb4004.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1d11d0c-8037-45d3-a7cd-ece9b0cb4004.png)'
- en: 'Click and drag from the empty circle for `tvReview` to the `Text View` in the
    storyboard:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从空圆圈点击并拖动`tvReview`到故事板中的`Text View`：
- en: '![](img/19c47696-86c0-4213-880c-eafe8cba3d7e.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19c47696-86c0-4213-880c-eafe8cba3d7e.png)'
- en: 'Finally, click and drag from the empty circle for `onSaveTapped` to the Save
    button in the Navigation controller:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从空圆圈点击并拖动`onSaveTapped`到导航控制器中的保存按钮：
- en: '![](img/434946ac-b56c-49e7-8083-fda57bd13a93.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/434946ac-b56c-49e7-8083-fda57bd13a93.png)'
- en: Now, that we have an outlet connected to our form, let's build and run the project
    by hitting the Play button (or use *cmd* + *R*). If you go to your form, enter
    the information and hit save so you can see that information in your Output panel.
    Our reviews are now ready to go. Next, we'll create photos with filters.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将出口连接到我们的表单，通过点击播放按钮（或使用*cmd* + *R*）来构建和运行项目。如果你访问你的表单，输入信息并点击保存，你可以在输出面板中看到这些信息。我们的评论现在准备好了。接下来，我们将创建带有滤镜的照片。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created a Review form using a static table view. We worked
    with Text View and Text Fields for the first time. We also set up our first custom
    `UIControl` with our star rating, and we got to use color and Image Literals in
    this chapter. Literals are a great way to see your image or the color you are
    working with visually.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用静态表格视图创建了一个评论表单。我们第一次使用文本视图和文本字段。我们还设置了我们的第一个自定义`UIControl`，即我们的星级评分，并在本章中使用了颜色和图像字面量。字面量是查看你正在工作的图像或颜色的视觉方式的一种好方法。
- en: In the next chapter, we will work on creating a way to add a photo to a restaurant.
    We will also learn how to add filters to our photos.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究创建一种方法来向餐厅添加照片。我们还将学习如何为我们的照片添加滤镜。
