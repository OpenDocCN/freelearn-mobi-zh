- en: Foodie Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are all familiar with reviews, from food reviews to App Store reviews. Seeing
    reviews for websites and apps is common place. In this chapter, we will create
    a review form that has a custom five-star rating component that we will add to
    it. We will learn about `UIControls` and how powerful they are. We will also look
    at literals and how to use them in our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a form that users can use to write a review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom star rating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image and color literals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our review form UI is set up, but we need to make a slight change to it. Right
    now, we have an image displayed for ratings. We are going to build a custom rating
    component that we will use in both restaurant details and our Review form.
  prefs: []
  type: TYPE_NORMAL
- en: We add it to our restaurant details first, then once we are finished, we add
    it to the Review form. We want our ratings view to be able to show ratings from
    zero stars to five stars. We also want the user to be able to select half stars
    when rating, so it will also need to show half stars.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we do is start creating our custom `UIControl`. `UIButtons`
    and `UISwitches` are sub-classes of `UIControls`, and without getting super technical,
    we are going to create our control:'
  prefs: []
  type: TYPE_NORMAL
- en: Right click the `Reviews Form` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top, and then Cocoa Touch Class. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `RatingsView`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UIControl`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next, and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have created our file, we want to be able to hook it up to a `UIView`
    in storyboard. Let''s do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up `RestaurantDetail.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the object library of the Utilities panel, type `view` in the filter field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the image with the five empty stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, drag out a View into the cell with the empty stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the View and, in the Size inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `151`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `43`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `205`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `34`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the View, and then the Pin icon. Enter the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `13`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `` `0` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `205` (checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `34` (checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constrain to margins: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the Restaurant View Controller, then in the Identity inspector,
    update the Custom Class to `RatingsView` and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we are set up to get started. Open up the `RatingsView.swift` file and
    let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying ratings in our custom UIControl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Inside the `RatingsView.swift` file, we first need to create all of the variables
    we will need to work with. Add the following under the class declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you are having trouble using an image literal, you can use `UIImage(named:)`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are doing something in this file. We are using image literals as our variables.
    If you type `Image Literal` in your file and hit return, you will see a small
    icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c04a4b00-0504-4bd5-95d6-cb8e59874aaf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click this icon and a modal appears that shows you an image to choose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e032f96b-cec6-4973-8384-83f58b958f75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can look and find the three images using this window, or you can just type
    everything you see here, and the image appears. When done you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b4db90e-1392-435f-9d26-f9fa6f20ebb0.png)'
  prefs: []
  type: TYPE_IMG
- en: The first three variables created are used for drawing our ratings view. The
    next variable, `showBecomeFirstResponder`, is a variable to let us be able to
    respond and handle events as they happen. Next, the rating variable is used for
    keeping track of our current rating. Finally, we have a variable to keep track
    of the total number of stars.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add our `init` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'These are just boilerplate code that you need when creating views. There''s
    nothing really to explain here other than that you need them. Next, we need to
    create a few methods that will handle creating our stars. We need three of them
    for each type of star (full, half, and empty). Add the following after the last
    curly bracket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'These methods just create a full, half, or empty star. We now need to be able
    to draw these stars. `UIView` has a draw method we can use to draw stars. Before
    the `drawStar(frame:highlighted:)` method, add the following method inside of
    the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here is all the code we need to create our stars. Let's break down the code
    and see what is happening. First, we get a graphics context, and we set its fill
    color to be clear. We are using a Color Literal this time, and this allows us
    to create colors and see those colors directly in our Swift file. You can either
    type `Color Literal` and hit *Enter*. You will see a white box has been created
    for you, and if you double-click this box, you can edit the color just like you
    would in storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create three variables: `availWidth`, `cellWidth`, and `starSide`.
    Since we are using `UIView` in the storyboard, we check to see the size of this
    container. We then determine the size of each star based on the width and the
    number of stars. Finally, we calculate the height of the star.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, we loop through each star and create them based on the rating value. Our
    rating can be 0-5, with increments of `0.5`. We also set up the positioning of
    each star using the center point. Finally, we determine, based on the value, whether
    the star should be an empty star, a half star, or a full star. That is our setup
    method and you do not have to get what is going on entirely, just have a basic
    understanding, and the more you code, the more it starts to make sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we build the project, open `RestaurantDetailViewController`, and under
    import `UIKit`, add the following import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s do some cleaning up by moving the `createMap()`, `setupLabels()`, and
    `takeSnapshot(:location)` methods into a private extension. When you are done,
    you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following method into the private method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open `RestaurantDetail.storyboard` and select the Restaurant View Controller,
    then in the Outlet inspector click and drag from `ratingView` to the `UIView`
    we created earlier. Let''s build and run the project by hitting the Play button
    (or use *cmd* + R). When you get to the restaurant details, you will see that
    we now have 3.5 stars:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02c69175-9d42-4b4c-8edc-f1e2d3b7eb32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is precisely what we want, but we also need our control be able to handle
    touch events.
  prefs: []
  type: TYPE_NORMAL
- en: Adding our touch events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding touch events will be used to change the rating to the desired rating.
    Open `RatingView` and let''s add the methods we need to get our control to accept
    touch events by adding the following inside the main class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following into the private extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The following code is used to handle touch. First, we set the `canBecomeFirstResponder`
    variable. Next, we have the `beginTracking(touch:event:)`. In this method, we
    set whether our control can accept touch events. If the control is enabled, then
    we allow touches, and we call the `handle()` method and pass it the `UITouch`
    location. Let's discuss the `handle()` method.
  prefs: []
  type: TYPE_NORMAL
- en: In our handle method, we start with three variables. We first get the width
    of the entire rating view. Next, we get the value of the touch location, then
    finally we take the `x` value of the location and divide it by the width. We then
    check the value, figure out whether it is less than `0.5` or greater than `0.5`,
    and round appropriately. Last, we update the rating with the value we calculate.
  prefs: []
  type: TYPE_NORMAL
- en: In the `updateRating(value:)` method, we check to make sure that our value is
    not equal to the current value and whether the value is greater than zero and
    less than the total number of stars. If these conditions pass, then we set the
    rating to the new value and call the `setNeedsDisplay()` method. This method makes
    sure that our control is redrawn.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `RestaurantDetailsViewController` and in the `createRating()` method,
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We now have a rating, and by setting the rating to 3.5, we should now see 3.5
    stars. We also set the `isEnabled` value to `true`, which means we can touch and
    change the rating. If we set it to `false`, then the value cannot change. In the
    restaurant details, we want to turn off touch, but in the `ReviewFormViewController`
    we want that to be enabled. You can play with this, and when done set the `isEnable`
    value to `false` and remove the rating.
  prefs: []
  type: TYPE_NORMAL
- en: 'We set the rating later in the book when we start saving reviews:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec8a24b4-f014-4de4-8c7c-4c131537aa0f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now change the rating from 3.5 to 4.5 by tapping on the view. Now that
    we have this set up, let's get our review form set up.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the unwind segues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have done before, we need to add code for us to unwind (dismiss) a View
    Controller:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `RestaurantDetailsViewController.swift` file and add the following
    into the private extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and open the `ReviewForm.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CTL drag the Cancel button to the Exit icon inside of the same View Controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/395c9bd9-c1ad-40f4-bd17-118a4451a4f3.png)'
  prefs: []
  type: TYPE_IMG
- en: In the screen that appears, under Action Segue, select `unwindReviewCancelWithSegue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you build and run the project by hitting the Play button (or use *cmd* +
    *R*), you should now be able to dismiss the Ratings View.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our rating control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now going to set up our rating control:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up `ReviewForm.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the object library of the Utilities panel, type `view` in the filter field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the image with the five empty stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, drag out a View into the cell with the empty stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the View and, in the Size inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `133`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `7`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `108`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `17`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, in the Identity inspector, update the **Custom Class** to `RatingsView`
    and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, select the view inside of the view and then select the Pin icon and enter
    the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `7`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constrain to margins: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `108` (should be checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `17` (should be checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Add 3 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click the Align icon and enter the value of Horizontally in Container as
    `0` (should be checked).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Add 1 Constraint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the label that says Tap a Star to Rate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the Pin icon and enter the value of Top as `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Add 1 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the Restaurant View Controller, then in the Identity inspector,
    update the Custom Class to `RatingsView` and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our form is now updated; let's create our controller next.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our review form controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right-click the `Review Form` folder again and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top, and then Cocoa Touch Class. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `ReviewFormViewController`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UITableViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next, and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delete everything after the `viewDidLoad()` method, as we do not need all of
    the other code. Next, let''s set up our `ReviewFormViewController` by adding the
    following after the class declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to add a method when our save button is tapped by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now connect this file with our `UIViewController` and our review form
    in storyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Utilities panel, select the Identity inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Custom Class, in the Class drop-down menu, type/select ReviewFormViewController
    and hit *Enter* in order connect the View Controller to the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the Connections inspector in the Utilities panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click and drag from the empty circle of each of the following variables
    we just added under Outlets to their respective elements in either the scene or
    Outline view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click and drag from the empty circle for `ratingView` to the `UIView` in the
    storyboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b19321b1-0ee1-491c-908d-d59a011ace3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click and drag from the empty circle for `tfTitle` to the `Textfield` in the
    storyboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/baa34c8c-194d-4be9-a52e-7fa14d1aa20e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click and drag from the empty circle for `tfName` to the `Textfield` in the
    storyboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a1d11d0c-8037-45d3-a7cd-ece9b0cb4004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click and drag from the empty circle for `tvReview` to the `Text View` in the
    storyboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19c47696-86c0-4213-880c-eafe8cba3d7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, click and drag from the empty circle for `onSaveTapped` to the Save
    button in the Navigation controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/434946ac-b56c-49e7-8083-fda57bd13a93.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, that we have an outlet connected to our form, let's build and run the project
    by hitting the Play button (or use *cmd* + *R*). If you go to your form, enter
    the information and hit save so you can see that information in your Output panel.
    Our reviews are now ready to go. Next, we'll create photos with filters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a Review form using a static table view. We worked
    with Text View and Text Fields for the first time. We also set up our first custom
    `UIControl` with our star rating, and we got to use color and Image Literals in
    this chapter. Literals are a great way to see your image or the color you are
    working with visually.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will work on creating a way to add a photo to a restaurant.
    We will also learn how to add filters to our photos.
  prefs: []
  type: TYPE_NORMAL
