- en: Universal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have spent most of this entire book focusing on logic for our app and getting
    the app to work on the iPhone. We have not paid much attention to the app working
    on iPads or other devices. During this chapter, we will look at the app on an
    iPad, as well as updating the app on all iPhone devices. You will be surprised
    at how much is already working and that only minor changes will need to be made
    to get our app to look how we want. We will also take the time to clean up some
    of our design elements to match the design more closely.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Updating our app to be supported on all devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about multitasking and how to code for it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up design elements and using global settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's do some design tweaks before we jump into making our layout work for every
    device and start to get this app more polished.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s compare what we see on the iPhone 8 with the original design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/276a2ef0-2d30-4084-9b40-b274b1196c21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a few things we need to fix:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement rounded corners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the grey background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation bar appears
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix spacing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tab bar color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will fix all of these, but we will focus on first four right now. We have
    rounded corners in our photo filter list. We can implement these here. Open the
    `ExploreCell.swift` file by hitting *cmd* + *Shift* + *o*, type `ExploreCell`,
    and hit *Enter*. Add the following extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Add a `roundedCorners()` call inside the `–layoutSubviews` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have fixed the first issue let''s fix the second by removing the
    background color. Open `Explore.storyboard` and select the `exploreCell` in the
    Outline view. Under the Utility panel, in the Attributes inspector update the
    Background from LetsEat Dark Grey to White Color. The third issue, that the navigation
    bar is displayed, is pretty easy to fix as well.  Open the `ExploreViewController.swift`
    file by hitting *cmd* + *Shift* + *o* and type `ExploreViewController` and hit
    *Enter*. After `viewDidLoad()` add the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That is all we need to do; now, every time we go to this view, we will always
    hide the Navigation bar at the top. Finally, let''s update our app so that our
    tab bar buttons are the correct color. We need to add a new color to our Color
    Set called LetsEat Red and set the Hex value to `D0021B`. Now, open up the `AppDelegate.swift`
    file at the bottom of the file after the last curly brace adds the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now inside the `-application:didFinishLaunchingWithOptions:` add the `initialize()`
    method call. Build and run the project by hitting the Play button (or using ⌘
    + *R*).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2823eee5-1d18-42c4-8622-3b40f6b7eaa1.png)'
  prefs: []
  type: TYPE_IMG
- en: You should now see we have completed the first four items.  Let's address the
    spacing issue next. Before we do, let's first switch our device to any iPad (I
    typically use the iPad Air 2, but you can pick whatever one you like). Then build
    and run the project by hitting the Play button (or using ⌘ + *R*). You will see
    that it is not too bad currently, but the spacing is different on each device.
    Now, we have set up values that only work for one device. However, we need this
    to work on all devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with our `Explore.storyboard`. First, we need to update some Auto
    Layout for our explore cells. Right now, we have a width set up for our image
    that needs to be more dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up `Explore.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the image inside the `exploreCell`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, in the Utilities panel, select the Attributes inspector and change the
    Content Mode under the View section to Aspect Fill. This will keep the images
    from looking stretched, while still filling the entire area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69a6a749-5d34-4618-96e3-8b917e775397.png)'
  prefs: []
  type: TYPE_IMG
- en: 'These are the only updates we need to make to our explore cell. Next, we are
    going to create a file that will let us know which device is used. We can then
    use this to set up different looks, depending on the device. Let''s create this
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Misc` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top and then Swift File. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `Device` and then hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we need to update our `import` statement from `import Foundation` to
    `import UIKit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following to the `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Our new struct will now tell us whether we are on an iPad or an iPhone. Having
    a file like this is good because it allows you to avoid having to rewrite the
    same code. To implement this code, all we need to do is add a snippet of code
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This statement will make our code more readable;  if we need to add any more
    checks for particular devices, we can do it all in the same file. One more great
    use of putting code like this into its file is that, when you build the next app,
    you can just add this file to your project and continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s open the `ExploreViewController.swift` file and make some more
    updates to our code. We need to create a variable that we will use for the spacing
    we want between items. Add the following before our `viewDidLoad()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create a function to set up some default Collection View values.
    We also need to create an `initialize()` method to call our setup function. Add
    the following method call inside of the `initialize()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following inside of the `private` extension after the `initialize()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This method will make sure that we have seven pixels of spacing all the way
    around.  We finally need to create an extension that will let us handle all of
    the spacing programmatically. After the last curly brace add the following extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Adding the `UICollectionViewDelegateFlowLayout` allows us to update our cell
    item size in code. Let's discuss each part of this extension we just added.  The
    `-collectionView:layout:sizeForItemAtIndexPath:` method is used to set the size
    of the cell. Inside of this method, we are using the struct we created. We are
    checking to see if we are using an iPad or an iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: In the if part of the `if...else` statement, we are checking whether the screen
    is compact or not. If the screen is compact, then we want a two-column grid; otherwise,
    we want a three-column grid. We are also distributing our items evenly across
    the width of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: In the else part of the `if...else` statement, we are just setting up a two-column
    grid on all phones. We get the screen width then subtract `21`, and then we divide
    the result by `2` to distribute the cells evenly.
  prefs: []
  type: TYPE_NORMAL
- en: If you run the project, everything will look good.
  prefs: []
  type: TYPE_NORMAL
- en: There is one more thing that's broken if you attempt to rotate the device by
    using ⌘ + right arrow or ⌘ + left arrow. Then, you will see that our layout spacing
    does not update.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to fix this, we need to make one more update. After `-shouldPerformSegueWithIdentifier:sender:`,
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, build and run your project again by hitting the Play button (or using ⌘
    + *R*) and rotate the device. You will see that our layout spacing now updates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7a75460-e4de-483b-804e-2689b9af04fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Explore is now complete; let's move to our locations list.
  prefs: []
  type: TYPE_NORMAL
- en: Location listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s compare our current location listing with the design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47bc3ec3-cbb4-40de-9528-1293124f5f06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have one thing that needs fixing: the large title. This is a simple update.
    Open up the `LocationViewController` and, inside of the `initialize()` method,
    add the following code after `manager.fetch()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we are setting a new iOS 11 feature `prefersLargeTitles` to `true`. 
    If you build and run, you will see that we are good here now. Next, we will direct
    our attention to the restaurant listing page and go into more detail on the iPad
    and multitasking.
  prefs: []
  type: TYPE_NORMAL
- en: Restaurant listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our restaurant listing page, we want a one-column grid on all phones and
    a two-column grid on all iPads. If you build and run the project by hitting the
    Play button (or using ⌘ + *R*) and go to a restaurant listing page, you will see
    that we need to fix the spacing on the iPad to show two columns correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f84d088-f3dc-432f-920c-a11a99911a6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see how we can fix this. Remember that we still want one column on the
    iPhone and a grid on the iPad. Open the `RestaurantViewController.swift` file
    and add the following above the `createData()` method inside of the `private`
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get an error for the `setupCollectionView()` method. Ignore it for
    now, as we will fix it shortly. This method checks if the device is an iPad; if
    it is, it calls the method `setupCollectionView()`. Next, add the following under
    the `initialize()` method we just added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method is the same thing we previously added in the storyboard
    regarding spacing between items, but here we are implementing it programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a couple of more things that we need to address. First, we are going
    to have the size of the screen calculated for us programmatically. Just like we
    did in `ExploreViewController`, we are going to a new extension to handle our
    Collection View layout. Add the following before our `viewDidLoad()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following at the bottom of the file after the last curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This code states that, if the device is an iPhone, a one-column grid will be
    shown; if it is an iPad, a two-column grid will be shown. Now, we need to update
    our `viewDidAppear()` method. Currently, we are calling both `createData()` and
    `setupTitle()`. We need to remove both of these calls and just call `initialize()`
    instead. When you are finished, `viewDidAppear()` should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build and run the project for the iPad by hitting the Play button (or
    using ⌘ + *R*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd2cc7da-f9e2-4133-aaee-1e40debd61be.png)'
  prefs: []
  type: TYPE_IMG
- en: The two-column grid is what we want for the iPad for our restaurant listing
    page, but we need to verify that we did not change the one-column grid on the
    iPhone. Switch the device back to any iPhone simulator and, after building and
    rerunning the project, you should still see a one-column grid on the iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: There are still issues with the iPad setup. Switch back to the iPad and build
    and rerun the project by hitting the Play button (or using ⌘ + *R*). When the
    project launches, hit ⌘ + right arrow to rotate the device. Then, return to your
    restaurant listing page. The first issue is that, if you turn the device, the
    cell spacing does not update. Another problem is that, if you multitask, your
    app resizes and you need to make sure that your layout adjusts accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see multitasking, swipe up from the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b6016ba-1acf-4e27-8d7e-2e7b7bcd0077.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, drag the app to the right side of our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6210c5f5-0596-4870-a30e-5a5e186f9e87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Grab the small tab that will be in the middle of this new screen and pull it
    to the left. This tab will split the screen with our app and allow you to take
    over more (or less, if you move it back to the right) of the screen :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c769c07b-6e75-4969-9936-9fba0e76ed73.png)'
  prefs: []
  type: TYPE_IMG
- en: When you move the tab to the left, you will notice that the *Let's Eat* app
    does not resize the cells and instead shows one column. Our app needs to adjust
    no matter the size it has available when splitting the screen between our app
    and another app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Resolving these problems is a really simple fix. In your `RestaurantViewController`,
    before the last curly brace, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Build and rerun the project by hitting the Play button (or using ⌘ + *R*) and
    rotate the device by using ⌘ + right arrow. You will now see that, every time
    you update the size of the restaurant listing page, the grid updates as well to
    fit the new size. Let's now move to the restaurant detail page.
  prefs: []
  type: TYPE_NORMAL
- en: Updating restaurant details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you click on a restaurant and go to a restaurant detail page, you should
    see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0d573dc-950d-492c-913b-2a500804ed24.png)'
  prefs: []
  type: TYPE_IMG
- en: We do not have much to fix on this screen.  If you scroll down to the bottom,
    you will see that the image we create is not sized correctly. We need to update
    this so that, depending on the device, we render the appropriate image size. We
    also need to update the Auto Layout. You can try other device sizes; you should
    see the same display on all the screens.
  prefs: []
  type: TYPE_NORMAL
- en: Open `RestaurantDetail.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the image map using the Outline view and in the Attributes inspector
    update the Content Mode to Aspect Fill.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you build and run now, you will see that our map now fills the area, but
    our image is stretched. We can leave this but, if this were being submitted, making
    our image size based off device would be a much better way to handle this. We
    are done with cleaning up and making our app ready for the iPad. You should now
    be able to see how powerful Collection Views are and how they make it easy to
    have a custom look with very little code.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now have an app that functions perfectly on all devices. You can see how
    using the Collection View gives your app some variety on different devices with
    very little code. As you get more and more comfortable with this, you will find
    other ways to make your app look unique on various devices.
  prefs: []
  type: TYPE_NORMAL
- en: We could submit the app as-is right now and it would be perfectly fine, but
    why not take advantage of some additional features you can implement?
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will do just that by creating an iMessage app for our
    app.
  prefs: []
  type: TYPE_NORMAL
