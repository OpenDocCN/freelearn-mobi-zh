["```swift\n    // ToDoItemsListViewControllerTests.swift\n    class ToDoItemsListViewControllerTests: XCTestCase {\n\n      var sut: ToDoItemsListViewController!\n\n      override func setUpWithError() throws {\n        // Put setup code here. This ...\n      }\n\n      override func tearDownWithError() throws {\n        // Put teardown code here. This ...\n      }\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    override func setUpWithError() throws {\n      let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n      sut = try XCTUnwrap(\n        storyboard.instantiateInitialViewController()\n        as? ToDoItemsListViewController\n      )\n      sut.loadViewIfNeeded()\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    override func tearDownWithError() throws {\n      sut = nil\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_shouldBeSetup() {\n      XCTAssertNotNil(sut)\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_shouldHaveTableView() {\n      XCTAssertTrue(sut.tableView.isDescendant(of: sut.view))\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    protocol ToDoItemStoreProtocol {\n      var itemPublisher:\n        CurrentValueSubject<[ToDoItem], Never>\n          { get set }\n      func check(_: ToDoItem)\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    class ToDoItemStore: ToDoItemStoreProtocol {\n      // …\n    }\n    ```", "```swift\n    // ToDoItemStoreProtocolMock.swift\n    import Foundation\n    import Combine\n    @testable import ToDo\n\n    class ToDoItemStoreProtocolMock: ToDoItemStoreProtocol {\n      var itemPublisher =\n        CurrentValueSubject<[ToDoItem], Never>([])\n\n      var checkLastCallArgument: ToDoItem?\n      func check(_ item: ToDoItem) {\n        checkLastCallArgument = item\n      }\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    var toDoItemStoreMock: ToDoItemStoreProtocolMock!\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    override func setUpWithError() throws {\n      let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n      sut = try XCTUnwrap(\n        storyboard.instantiateInitialViewController()\n        as? ToDoItemsListViewController\n      )\n      toDoItemStoreMock = ToDoItemStoreProtocolMock()\n      sut.toDoItemStore = toDoItemStoreMock\n      sut.loadViewIfNeeded()\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift \n    class ToDoItemsListViewController: UIViewController { \n\n      @IBOutlet weak var tableView: UITableView! \n      var toDoItemStore: ToDoItemStoreProtocol? \n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_numberOfRows_whenOneItemIsSent_shouldReturnOne() {\n      toDoItemStoreMock.itemPublisher\n        .send([ToDoItem(title: \"dummy 1\")])\n      let result = sut.tableView.numberOfRows(inSection: 0)\n      XCTAssertEqual(result, 1)\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    override func viewDidLoad() {\n      super.viewDidLoad()\n      tableView.dataSource = self\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    extension ToDoItemsListViewController: \n      UITableViewDataSource {\n      func tableView(\n        _ tableView: UITableView,\n        numberOfRowsInSection section: Int) -> Int {\n\n          return 1\n        }\n\n      func tableView(\n        _ tableView: UITableView,\n        cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n\n          return UITableViewCell()\n        }\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_numberOfRows_whenTwoItemsAreSent_shouldReturnTwo() \n    {\n      toDoItemStoreMock.itemPublisher\n        .send([\n          ToDoItem(title: \"dummy 1\"),\n          ToDoItem(title: \"dummy 2\")\n        ])\n      let result = sut.tableView.numberOfRows(inSection: 0)\n      XCTAssertEqual(result, 2)\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    class ToDoItemsListViewController: UIViewController {\n\n      @IBOutlet weak var tableView: UITableView!\n      var toDoItemStore: ToDoItemStoreProtocol?\n      private var items: [ToDoItem] = []\n      private var token: AnyCancellable?\n\n      // …\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    override func viewDidLoad() {\n      super.viewDidLoad()\n      tableView.dataSource = self\n      token = toDoItemStore?.itemPublisher\n        .sink(receiveValue: { [weak self] items in\n          self?.items = items\n      })\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    func tableView(\n      _ tableView: UITableView,\n      numberOfRowsInSection section: Int) -> Int {\n        return items.count\n      }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_cellForRowAt_shouldReturnCellWithTitle() throws \n    {\n      let titleUnderTest = \"dummy 1\"\n      toDoItemStoreMock.itemPublisher\n        .send([ToDoItem(title: titleUnderTest)])\n      let tableView = try XCTUnwrap(sut.tableView)\n      let indexPath = IndexPath(row: 0, section: 0)\n      let cell = try XCTUnwrap(\n        tableView.dataSource?\n          .tableView(tableView,\n                     cellForRowAt: indexPath)\n        as? ToDoItemCell\n      )\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_cellForRowAt_shouldReturnCellWithTitle1() throws {\n      let titleUnderTest = \"dummy 1\"\n      toDoItemStoreMock.itemPublisher\n        .send([ToDoItem(title: titleUnderTest)])\n      let tableView = try XCTUnwrap(sut.tableView)\n      let indexPath = IndexPath(row: 0, section: 0)\n      let cell = try XCTUnwrap(\n        tableView.dataSource?\n          .tableView(tableView,\n                     cellForRowAt: indexPath)\n        as? ToDoItemCell\n      )\n      XCTAssertEqual(cell.titleLabel.text, titleUnderTest)\n    }\n    ```", "```swift\n    // ToDoItemCell.swift\n    class ToDoItemCell: UITableViewCell {\n      let titleLabel = UILabel()\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    func tableView(\n      _ tableView: UITableView,\n      cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = ToDoItemCell()\n        cell.titleLabel.text = \"dummy 1\"\n        return cell\n      }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_cellForRowAt_shouldReturnCellWithTitle2() throws \n    {\n      let titleUnderTest = \"dummy 2\"\n      toDoItemStoreMock.itemPublisher\n        .send([\n          ToDoItem(title: \"dummy 1\"),\n          ToDoItem(title: titleUnderTest)\n        ])\n      let tableView = try XCTUnwrap(sut.tableView)\n      let indexPath = IndexPath(row: 1, section: 0)\n      let cell = try XCTUnwrap(\n        tableView.dataSource?\n          .tableView(tableView,\n                     cellForRowAt: indexPath)\n        as? ToDoItemCell\n      )\n      XCTAssertEqual(cell.titleLabel.text, titleUnderTest)\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    func tableView(\n      _ tableView: UITableView,\n      cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = ToDoItemCell()\n        let item = items[indexPath.row]\n        cell.titleLabel.text = item.title\n        return cell\n      }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    tableView.register(\n      ToDoItemCell.self,\n      forCellReuseIdentifier: \"ToDoItemCell\"\n    )\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    func tableView(\n      _ tableView: UITableView,\n      cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(\n          withIdentifier: \"ToDoItemCell\",\n          for: indexPath\n        ) as! ToDoItemCell\n        let item = items[indexPath.row]\n        cell.titleLabel.text = item.title\n        return cell\n      }\n    ```", "```swift\n    // ToDoItemCellTests.swift\n    import XCTest\n    @testable import ToDo\n    ```", "```swift\n    // ToDoItemCellTests.swift\n    class ToDoItemCellTests: XCTestCase {\n\n      var sut: ToDoItemCell!\n\n      override func setUpWithError() throws {\n        sut = ToDoItemCell()\n      }\n\n      override func tearDownWithError() throws {\n        sut = nil\n      }\n    }\n    ```", "```swift\n    // ToDoItemCellTests.swift\n    func test_hasTitleLabelSubview() {\n      let subview = sut.titleLabel\n      XCTAssertTrue(subview.isDescendant(of: sut.contentView))\n    }\n    ```", "```swift\n    // ToDoItemCell.swift\n    class ToDoItemCell: UITableViewCell {\n      let titleLabel = UILabel()\n      override init(style: UITableViewCell.CellStyle,\n                    reuseIdentifier: String?) {\n        super.init(style: style, \n                   reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(titleLabel)\n      }\n      required init?(coder: NSCoder) { fatalError() }\n    }\n    ```", "```swift\n    // ToDoItemCell.swift\n    class ToDoItemCell: UITableViewCell {\n\n      let titleLabel: UILabel\n\n      override init(style: UITableViewCell.CellStyle,\n                    reuseIdentifier: String?) {\n\n        titleLabel = UILabel()\n\n        super.init(style: style,\n                   reuseIdentifier: reuseIdentifier)\n\n        contentView.addSubview(titleLabel)\n      }\n\n      required init?(coder: NSCoder) { fatalError() }\n    }\n    ```", "```swift\n    // ToDoItemCellTests.swift\n    func test_hasDateLabelSubview() {\n      let subview = sut.dateLabel\n      XCTAssertTrue(subview.isDescendant(of: sut.contentView))\n    }\n    ```", "```swift\n    // ToDoItemCell.swift\n    class ToDoItemCell: UITableViewCell {\n\n      let titleLabel: UILabel\n      let dateLabel: UILabel\n\n      override init(style: UITableViewCell.CellStyle,\n                    reuseIdentifier: String?) {\n\n        titleLabel = UILabel()\n        dateLabel = UILabel()\n\n        super.init(style: style,\n                   reuseIdentifier: reuseIdentifier)\n\n        contentView.addSubview(titleLabel)\n      }\n\n      required init?(coder: NSCoder) { fatalError() }\n    }\n    ```", "```swift\n    // ToDoItemCell.swift\n    contentView.addSubview(dateLabel)\n    ```", "```swift\n    // ToDoItemCellTests.swift\n    func test_hasLocationLabelSubview() {\n      let subview = sut.locationLabel\n      XCTAssertTrue(subview.isDescendant(of: sut.  contentView))\n    }\n    ```", "```swift\n    // ToDoItemCell.swift\n    class ToDoItemCell: UITableViewCell {\n\n      let titleLabel: UILabel\n      let dateLabel: UILabel\n      let locationLabel: UILabel\n\n      override init(style: UITableViewCell.CellStyle,\n                    reuseIdentifier: String?) {\n\n        titleLabel = UILabel()\n        dateLabel = UILabel()\n        locationLabel = UILabel()\n\n        super.init(style: style,\n                   reuseIdentifier: reuseIdentifier)\n\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(dateLabel)\n      }\n\n      required init?(coder: NSCoder) { fatalError() }\n    }\n    ```", "```swift\n    // ToDoItemCell.swift:\n    contentView.addSubview(locationLabel)\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_cellForRowAt_shouldReturnCellWithDate() throws {\n      let date = Date()\n      toDoItemStoreMock.itemPublisher\n        .send([\n          ToDoItem(title: \"dummy 1\",\n                   timestamp: date.timeIntervalSince1970)\n        ])\n      let tableView = try XCTUnwrap(sut.tableView)\n      let indexPath = IndexPath(row: 0, section: 0)\n      let cell = try XCTUnwrap(\n        tableView.dataSource?\n          .tableView(tableView,\n                     cellForRowAt: indexPath)\n        as? ToDoItemCell\n      )\n      XCTAssertEqual(cell.dateLabel.text,\n                     sut.dateFormatter.string(from: date))\n    } \n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    let dateFormatter = DateFormatter()\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    if let timestamp = item.timestamp {\n      let date = Date(timeIntervalSince1970: timestamp)\n      cell.dateLabel.text = dateFormatter.string(from: date)\n    }\n    ```", "```swift\n    // ToDoItem.swift\n    extension ToDoItem: Hashable {\n      func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n      }\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    enum Section {\n      case main\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    private var dataSource:\n      UITableViewDiffableDataSource<Section, ToDoItem>?\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    dataSource = \n    UITableViewDiffableDataSource<Section, ToDoItem>(\n      tableView: tableView,\n      cellProvider: { [weak self] tableView, indexPath, item   in\n        let cell = tableView.dequeueReusableCell(\n          withIdentifier: \"ToDoItemCell\",\n          for: indexPath\n        ) as! ToDoItemCell\n        cell.titleLabel.text = item.title\n        if let timestamp = item.timestamp {\n          let date = Date(timeIntervalSince1970: timestamp)\n          cell.dateLabel.text = self?.dateFormatter\n            .string(from: date)\n        }\n        return cell\n    })\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    private func update(with items: [ToDoItem]) {\n      var snapshot =\n      NSDiffableDataSourceSnapshot<Section, ToDoItem>()\n      snapshot.appendSections([.main])\n      snapshot.appendItems(items)\n      dataSource?.apply(snapshot)\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    token = toDoItemStore?.itemPublisher\n      .sink(receiveValue: { [weak self] items in\n        self?.items = items\n        self?.update(with: items)\n    })\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_numberOfSections_shouldReturnTwo() {\n      var doneItem = ToDoItem(title: \"dummy 2\")\n      doneItem.done = true\n      toDoItemStoreMock.itemPublisher\n        .send([ToDoItem(title: \"dummy 1\"),\n               doneItem])\n      let result = sut.tableView.numberOfSections\n      XCTAssertEqual(result, 2)\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    enum Section {\n      case todo\n      case done\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    private func update(with items: [ToDoItem]) {\n      var snapshot =\n      NSDiffableDataSourceSnapshot<Section, ToDoItem>()\n      snapshot.appendSections([.todo, .done])\n      snapshot.appendItems(\n        items.filter({ false == $0.done }),\n        toSection: .todo)\n      snapshot.appendItems(\n        items.filter({ $0.done }),\n        toSection: .done)\n      dataSource?.apply(snapshot)\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_didSelectCellAt_shouldCallDelegate() throws {\n      let delegateMock = \n        ToDoItemsListViewControllerProtocolMock()\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerProtocolMock.swift\n    import UIKit\n    @testable import ToDo\n    class ToDoItemsListViewControllerProtocolMock:\n      ToDoItemsListViewControllerProtocol {    \n      }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    protocol ToDoItemsListViewControllerProtocol {\n      func selectToDoItem(\n        _ viewController: UIViewController,\n        item: ToDoItem)\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerProtocolMock.swift\n    class ToDoItemsListViewControllerProtocolMock:\n      ToDoItemsListViewControllerProtocol {\n\n      var selectToDoItemReceivedArguments:\n      (viewController: UIViewController, \n       item: ToDoItem)?\n\n      func selectToDoItem(\n        _ viewController: UIViewController,\n        item: ToDoItem) {\n\n          selectToDoItemReceivedArguments =\n          (viewController, item)\n        }\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTest.swift\n    func test_didSelectCellAt_shouldCallDelegate() throws {\n      let delegateMock =\n        ToDoItemsListViewControllerProtocolMock()\n      sut.delegate = delegateMock\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    var delegate: ToDoItemsListViewControllerProtocol?\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_didSelectCellAt_shouldCallDelegate() throws {\n      let delegateMock =\n        ToDoItemsListViewControllerProtocolMock()\n      sut.delegate = delegateMock\n      let toDoItem = ToDoItem(title: \"dummy 1\")\n      toDoItemStoreMock.itemPublisher\n        .send([toDoItem])\n      let tableView = try XCTUnwrap(sut.tableView)\n      let indexPath = IndexPath(row: 0, section: 0)\n      tableView.delegate?.tableView?(\n        tableView,\n        didSelectRowAt: indexPath)\n      XCTAssertEqual(\n        delegateMock.selectToDoItemReceivedArguments?.item,\n        toDoItem)\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    extension ToDoItemsListViewController:\n      UITableViewDelegate {\n\n      func tableView(_ tableView: UITableView,\n                     didSelectRowAt indexPath: IndexPath) {\n\n        let item = items[indexPath.row]\n        delegate?.selectToDoItem(self, item: item)\n      }\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    tableView.delegate = self\n    ```"]