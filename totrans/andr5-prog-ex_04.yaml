- en: Chapter 4. Managing RecyclerViews and Their Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how to work with more than one Activity, but
    the data displayed in both was static. To progress, we need a way to apply a choice
    of data to a predefined layout and ideally present this as part of a list. Android
    5 has introduced the RecyclerView-a more efficient and flexible version of the
    previously used ListView. To implement a RecyclerView, we will need a LayoutManager,
    an Adapter and some data to work with. In this chapter, we will start a new app
    that creates a list of CardViews, each displaying the relevant data and serving
    as a link to more detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a RecyclerView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing a CardView Layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including a LayoutManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Data and an Adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a ViewHolder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to the RecyclerView selections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting a View to a web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a RecyclerView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main Activity of our new project will consist entirely of a RecyclerView
    nested inside the root Layout, and is very quick and simple to construct. However,
    similar to the CardView, it is new to Android 5 and therefore, a part of the V7
    Support Libraries and also, one of the Gradle build files will need to be modified,
    for it to work. The following steps demonstrate how to create a RecyclerView:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new project in the Android studio. Give it an **Application name:**
    of `Ancient Britain`; check the Phone and Tablet checkbox and select **Blank Activity**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Gradle script file, `build.gradle` (Module app) and add the following
    two dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `activity_main.xml` file in `res/layout` and replace the `TextView`
    tag with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a color theme in the same way as we did in previous chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rebuild the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's all there is to it! Our RecyclerView now fills the screen, apart from
    the margins, which are set automatically to Google's recommended design standards.
    Adding dependencies to the Gradle build scripts is something we are already familiar
    with and needs no explanation. The `text_secondary` color name will set smaller
    text to a dark gray.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a CardView with layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our Recycler list will be comprised of CardViews, each conforming to the layout
    that we will design next. By the end of this section, our main Activity will look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a CardView with layout](img/B04321_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first thing we need to do is design our CardView.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **layout** in the project explorer and select **New** | **Layout
    resource file** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call it `card_main` and make sure its root element is a horizontal `LinearLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design a card layout similar to those in the image above, with the following
    component structure and IDs.![Adding a CardView with layout](img/B04321_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The layout components can be moved and reordered directly from the Component
    Tree by dragging and dropping them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Position the two inner `LinearLayout` and `ImageView` instances to match the
    following:![Adding a CardView with layout](img/B04321_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the rest of this section, set the margins and/or padding to your own liking.
    Where `layout_width` and `layout_height` are not mentioned, use `wrap_content`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the corner radius and elevation as you like, but make sure that the following
    properties are included in the `CardView` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that the `ImageView` has the following properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: android:layout_width="0dp"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: android:layout_height="match_parent"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: android:layout_weight="5"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: android:orientation="vertical"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: android:id="@+id/card_name"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: android:textAppearance="?android:attr/textAppearanceLarge"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: android:id="@+id/card_info"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: android:textAppearance="?android:attr/textAppearanceSmall"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Most of the properties set here are the ones we are familiar with: most importantly
    the `id` property, which allows us access through Java. However, one or two things
    may need explaining.'
  prefs: []
  type: TYPE_NORMAL
- en: '`LinearLayout` allows us to allocate proportional amounts of screen space to
    individual views, according to their `layout_weight` property. Instead of telling
    a view to take up as much space as it can (`match_parent`), or as little (`wrap_content`),
    using `layout_weight` allows us to allocate a certain proportion of the parent
    view group. Two views each with a weight of 1 will both take up 50% of the space,
    weights of 1 and 4 would take up 20% and 80% respectively. Here, we used weights
    of 2 and 5, meaning that 2/7 of the available space is allocated to the image
    and 5/7 to the vertical layout. We set the layout widths to `0dp` so as not to
    interfere with the weighting.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The drawable `ic_launcher.png` was simply used as a placeholder to facilitate
    designing the layout; it will be replaced in the code later.
  prefs: []
  type: TYPE_NORMAL
- en: We used `textAppearanceSmall` and `textAppearanceLarge` to set our text sizes.
    This is often preferable to using specific dp amounts, as these settings automatically
    adjust to suit the size of the user's screen.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Despite the obvious advantages of using weights in our layouts, it does need
    pointing out that this can have an adverse effect on performance, as the system
    has to recalculate its/the position more often.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a `RecyclerView` and a `CardView` layout, we can go ahead and
    bring the two together with a `LayoutManager`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a LayoutManager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Views are positioned in the `RecyclerView` by a `RecyclerView.LayoutManager`,
    which in turn communicates with a `RecyclerView.Adapter`, and this binds our data
    to our views. First, let's set up a `LayoutManager`.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MainActivity.Java` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the class, declare the following fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `onCreate()` method, add these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By now, the use of `findViewById()` should be familiar to us. The use of the
    `setFixedSize()` method is very useful. If you know that your list will remain
    the same length during runtime, then setting it to true will improve the performance
    of your app, as it cleverly recycles items when they are out of view, hence the
    name `RecyclerView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Giving the RecyclerView a LayoutManager is as simple as declaring a new `LinearLayoutManager`,
    passing it the current context and using `RecyclerView.setLayoutManager()` to
    set the connection. The `LayoutManager` can be thought of as belonging to the
    RecyclerView and it is the view''s way of communicating with the data adapter,
    which in turn accesses a dataset, as can be seen in this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a LayoutManager](img/B04321_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before we move on to create our `Adapter` class, we will set up some data for
    it to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Android system utilizes SQLite for use with large and complex datasets,
    and we will return to this later in the book. For the purposes of this project,
    we will create the data arrays we need with Java. here''s how this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Java class by right-clicking on **MainActivity** on the project
    explorer and selecting **New** | **Java Class** from the menu. Call it `MainDataDef`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill it out as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have downloaded the project files from the Packt website, then the dataset
    will contain ten records. However, the app will work just fine with any number
    and just the first five are included here. Create another Java class called `MainData`
    and complete it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have downloaded the project files, you will see that the `drawable`
    directory contains images: if not, you will need to add your own. If you are using
    the dataset seen above, then you will need ten images, with the names shown below.
    Make sure the `*_icon.png` files are roughly 160 x 160 px and the `*_large.png`
    files are about 640 x 480 px.![Adding a dataset](img/B04321_04_05.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final part of the data consists of rather long strings. If you have downloaded
    the project files these can be found in the `strings.xml` resource file, if not,
    then you will need five strings of about 100 words a piece, with the following
    names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Putting our data arrays together was quite straightforward, but it is interesting
    to note how we used integers to refer to images and strings, using the automatically
    generated `R` class, which associates each individual resource with a static integer.
    This can be found by selecting **Packages** under **app** | **package name**.
    It cannot be edited, but it is helpful to see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `strings.xml` file to store the long strings. This is not practical
    for lengthy text and usually we would store these resources as text files in the
    raw resource folder, and this is something we will cover later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android TextViews are able to handle basic markup formatting tags, such as
    `<b></b>` and `<i></i>`. Below is a list of some of the formatting tags available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With our data in place, we can now get around to creating our data adapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `RecyclerView.Adapter` is responsible for binding our data to our views.
    We control how this happens through another `RecyclerView` sub-class, the `ViewHolder`,
    which we will create inside our Adapter. This can be achieved by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Java class alongside the others in our project called `MainAdapter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the class declaration to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Directly under this, type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This last line will generate an error, indicated by a red underline. Place the
    cursor somewhere on the class declaration and press *Alt* + *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Implement Methods** from the drop-down list and then all three methods
    shown here:![Creating an Adapter](img/B04321_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Beneath this, add the following class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Complete the `onCreateViewHolder()` method like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, the `onBindViewHolder()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And, the `getItemCount()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `MainActivity` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom of the `onCreate()` method, add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now test the project on an emulator or a handset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Most of the work of the Adapter is carried out by the ViewHolder. This class
    is responsible, as its name suggests, for holding information about each of the
    views in our RecyclerView, including a view's metadata and its position in the
    list. We use the class definition and constructor to define three views that are
    associated with those in our card layout. The ViewHolder requires three callback
    methods, `onCreateViewHolder()`, which inflates the CardView and performs any
    other operations on it such as adding an `onClickListener`, `onBindViewHolder()`.
    This takes the ViewHolder's version of our card's inner views and connects them
    to our data, and `getItemCount()`, which returns the length of our list.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to connect the data to the RecyclerView, we build our ArrayList `mainData`
    and then set up a new `MainAdapter` from `mainData` and connect the RecyclerView
    to its Adapter with the `setAdapter()` method.
  prefs: []
  type: TYPE_NORMAL
- en: With our RecyclerView in place and connected to our dataset with an Adapter,
    we are ready to add a click listener and a second activity.
  prefs: []
  type: TYPE_NORMAL
- en: Responding to the RecyclerView selections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having successfully produced a RecyclerView, and populated it with CardViews
    containing our data, we need to be able to select individual items and do something
    with them. Next, we will provide the RecyclerView with a **click listener** and
    add a new Activity that will present our records in greater detail on a separate
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the OnClickListener
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we create our new Activity, we need an `OnClickListener` that can tell
    which CardView was clicked on. Here''s how it''s done:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MainActivity` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following class member:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign the listener in the `onCreate()` method like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is very similar to the way that we implemented the `OnClickListener` before,
    only here, rather than assigning it to just a single view, we made it available
    to the whole class. This means that we must construct the listener in such a way
    as to pass the `Context` object of the calling view. The `onClick()` method is
    a good time to record which view was clicked on with the RecyclerView's `getChildPosition()`
    method. With this done, it is now a matter of creating the new Activity.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the new Activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last method we entered will have generated an error message, as the class
    `DetailActivity` does not yet exist. The Activity will display greater detail
    about our ancient sites and provide a web link to each site's Wikipedia page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the portrait layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As is often the case, there are two parts to creating an Android Activity,
    and before we can write the code, we need to define its layouts. To do this, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new vertical `LinearLayout` XML file in the `layout` directory and
    call it `activity_detail`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the design mode, create a layout to match the following component tree and
    provide the views with the IDs and contents, as shown:![Creating the portrait
    layout](img/B04321_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have not downloaded the project files, find or create a small image,
    suitable for use as a web icon, about 48 x 48 px. Call it `web_icon.png` and place
    it in your `drawable` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the view's properties to match the structure shown here:![Creating the
    portrait layout](img/B04321_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the following properties on the ImageView `detail_image`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `android:textAppearance="?android:attr/textAppearanceLarge"` to the `detail_name`
    TextView:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The TextView `detail_distance` should have `android:textAppearance="?android:attr/textAppearanceMedium"`
    set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `detail_text` TextView needs these properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the `detail_web_icon` ImageView, set `layout_gravity` to `"right"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is nothing in this process that we have not encountered before, apart
    from the two properties in the `detail_text` TextView, `maxLines` and `scrollbars`,
    and these are self-explanatory. The text we have allocated to this view may well
    be too long for many smaller screens and so we have set this view up to be scrollable.
    There is still a line of code we need to add in Java to fully implement this,
    but we will come to that shortly.
  prefs: []
  type: TYPE_NORMAL
- en: The use of `layout_weight` to define our layout means that, even when we rotate
    the screen, all of the views will remain in view. Nevertheless, if you test this
    on a device, you will see that this is not an attractive or space efficient layout.
    Next, we will redesign the landscape layout to more suitably fit the orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the landscape layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The vertical linear layout we designed is not at all well suited to a landscape
    screen. To best fill the space, it is not enough to simply rearrange the views,
    we will need to change the root layout to a horizontal orientation and insert
    a vertical layout for the text and web icon. Follow these steps to create the
    layout:'
  prefs: []
  type: TYPE_NORMAL
- en: If it is not open already, open the `activity_detail.xml` file in design mode
    or in text mode with the preview pane open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create Landscape Variation** from the preview drop-down, as follows:![Creating
    the landscape layout](img/B04321_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `detail_activity.xml` (land) file in the text mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `detail_image` ImageView, change the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following vertical linear layout, so that it contains the three
    TextViews and the other ImageView:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change these lines in the `detail_text` TextView:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And, add this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The landscape layout should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the landscape layout](img/B04321_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is nothing here that we have not encountered before. However, it is worth
    noting that, although it would have taken more time, we could have used a `RelativeLayout`
    for this purpose and had we done so, we would not have needed the inner vertical
    `LinearLayout`. ViewGroups, such as Layouts, require a considerable amount of
    memory, and although it does not matter for a small app such as this one, it is
    a good practice to keep the number of view containers to a minimum. Rebuilding
    `activity_detail.xml` (land) as a `RelativeLayout` is left as an exercise for
    the reader.
  prefs: []
  type: TYPE_NORMAL
- en: All that remains now is to create the Java Activity class `ActivityDetail`,
    which will select and display its content according to the card that was clicked
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Views to web pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `ActivityDetail` class is not at all complicated, although we do get to
    add the Java component of the code, which will make our TextView scrollable and
    we also get to see how we can use an `Intent` object to launch the browser and
    open a specific web page. Follow these steps to complete the Activity:'
  prefs: []
  type: TYPE_NORMAL
- en: From the project explorer, by right-clicking any of the classes we have already
    constructed, create a new Activity by selecting **New** | **Activity** | **Blank
    Activity**, calling the file `DetailActivity` and accepting the other values the
    dialog suggests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `DetailActivity` Java code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the line `setContentView(R.layout.activity_detail2);` in `onCreate()`
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you created the Activity, the IDE will have created a matching layout file
    `activity_detail2`. Delete this file by selecting it in the project explorer and
    pressing *Delete*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following class wide fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign them like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Still in `onCreate()`, add these lines to link our views to our data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Beneath that, add these lines to program the web link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the app on an emulator or a handset. Hopefully, the second activity will
    look like this:![Connecting Views to web pages](img/B04321_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Activity wizard automatically created a layout file for us, even though
    we had already created one, which is why we had to edit the `ContentView` of the
    Activity and delete the unwanted XML file. We could have of course constructed
    our class from scratch and avoided doing this, but the Activity wizard builds
    a time saving class template for us, including all the required members.
  prefs: []
  type: TYPE_NORMAL
- en: The naming and assigning of our views requires no explanation. However, this
    section of code also provides the final part of our scrollable TextView by calling
    its `setMovementMethod(new ScrollingMovementMethod())`.
  prefs: []
  type: TYPE_NORMAL
- en: We used the public field `currentItem` to access our data, which we kept in
    the same array list for convenience. We filled the distance field with a random
    number for now, but we will return to make this function operate correctly when
    we get to geo-locations later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Linking views to web pages is new and requires explanation. This is the only
    view in the layout that is clickable, so it is a simple matter to provide it with
    its own `OnClickListener`. Here, we get to see the `Intent` object in more detail
    and also just how useful it can be. The `setAction()` method tells the Intent
    which action to perform, in the form of a static, final String which here is `ACTION_VIEW`,
    the most widely used **Intent action**, and it tells the Intent to display the
    data in the most appropriate way. This means that, more often than not, the system
    will select the correct way to display the data, such as displaying images in
    an ImageView, contacts in the contacts app, and web pages in the default browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that, there is a corresponding `Intent.getAction()` method for when we
    need to know what action has been set to an Intent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `addCategory(Intent.CATEGORY_BROWSABLE)` call is not strictly necessary
    and the app will run fine without it in most circumstances. **Intent categories**
    cause the Intent to only consider apps (or more accurately, activities), that
    are labeled with that category when resolving the action. To place an app in one
    or more categories, add them to the `<intent-filter>` tab in the manifest file
    like so: `<category android:name="android.intent.category.CATEGORY"/>`. The `Intent`
    object defines a wide selection of category constants, such as, `APP_MUSIC, APP_MESSAGING`,
    and `APP_CALENDAR`.'
  prefs: []
  type: TYPE_NORMAL
- en: With the second Activity and its layout files in place, we can now display detailed
    information about each of our ancient sites and provide a link to the web page
    with further information. With this done, we have completed the exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have constructed a small but complete app. The structure
    is by no means dictated by the subject matter and is such that it could be applied
    to any number of apps. We took advantage of both of Android's latest widgets and
    produced a RecyclerView list of CardViews, which displayed a simple dataset. In
    doing this, we saw how to connect our data to our views with an Adapter and how
    this in turn uses a ViewHolder to maintain our individual views and layouts. Adding
    an `OnClickListener` allowed the user to select data items and navigate to a new
    screen with further information and a link to a website.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will delve deeper into the RecyclerView and see how to move items up
    and down the list. To do this, we will first have to learn how to detect a swipe
    gesture from the user, using an `OnTouchListener`.
  prefs: []
  type: TYPE_NORMAL
