["```swift\nextension SKNode {\n    class func unarchiveFromFile(file : NSString) -> SKNode? {\n        if let path = NSBundle.mainBundle().pathForResource(file, ofType: \"sks\") {\n            var sceneData = NSData(contentsOfFile: path, options: .DataReadingMappedIfSafe, error: nil)!\n            var archiver = NSKeyedUnarchiver(forReadingWithData: sceneData)\n\n            archiver.setClass(self.classForKeyedUnarchiver(), forClassName: \"SKScene\")\n            let scene = archiver.decodeObjectForKey(NSKeyedArchiveRootObjectKey) as GameScene\n            archiver.finishDecoding()\n            return scene\n        } else {\n            return nil\n        }\n    }\n}\n```", "```swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        if let scene = GameScene.unarchiveFromFile(\"GameScene\") as? GameScene {\n            // Configure the view.\n\n            let skView = self.view as SKView\n            skView.showsFPS = true\n            skView.showsNodeCount = true\n\n            /* Sprite Kit applies additional optimizations to improve rendering performance */\n            skView.ignoresSiblingOrder = true\n\n            /* Set the scale mode to scale to fit the window */\n            scene.scaleMode = .AspectFill\n\n            skView.presentScene(scene)\n        }\n    }\n```", "```swift\n            /* Set the scale mode to scale to fit the window */\n            scene.scaleMode = .ResizeFill\n```", "```swift\nimport SpriteKit\n\nclass MainMenuScene: SKScene {\n\n    override func didMoveToView(view: SKView) {\n\n    }\n\n    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        /* Called when a touch begins */\n\n        for touch: AnyObject in touches {\n            let location = touch.locationInNode(self)\n\n        }\n    }\n}\n```", "```swift\n    override func viewDidLoad() {\n\n        super.viewDidLoad()\n\n            let scene = MainMenuScene(size: view.bounds.size)\n\n            // Configure the view.\n\n            let skView = self.view as SKView\n            skView.showsFPS = true\n            skView.showsNodeCount = true\n\n            /* Sprite Kit applies additional optimizations to improve rendering performance */\n            skView.ignoresSiblingOrder = true\n\n            /* Set the scale mode to scale to fit the window */\n            scene.scaleMode = .ResizeFill\n\n            skView.presentScene(scene)        \n    }\n```", "```swift\nlet BG = SKSpriteNode(imageNamed: \"BG\")\nBG.position = CGPoint(x: viewSize.width/2, y: viewSize.height/2)\nself.addChild(BG)\n```", "```swift\nlet viewSize:CGSize = view.bounds.size\n```", "```swift\nlet myLabel = SKLabelNode(fontNamed:\"Chalkduster\")\n\nmyLabel.text = \"Ms.TinyBazooka\"\n\nmyLabel.fontSize = 65\n\nmyLabel.position = CGPoint(x: viewSize.width/2, y: viewSize.height * 0.8)\n\nself.addChild(myLabel)\n```", "```swift\nlet playBtn = SKSpriteNode(imageNamed: \"playBtn\")\n\nplayBtn.position = CGPoint(x: viewSize.width/2, y: viewSize.height/2)\n\nself.addChild(playBtn)\n\nplayBtn.name = \"playBtn\"\n```", "```swift\n   let _node:SKNode = self.nodeAtPoint(location)\n\n   if(_node.name == \"playBtn\"){\n\n      let scene = GamePlayScene(size: self.size)\n      self.view?.presentScene(scene)\n}\n```", "```swift\nimport SpriteKit\n\nclass GamePlayScene: SKScene {\n\n   required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n\n} // required init\n\n    override init(size: CGSize){\n\n        super.init(size: size)\n\n    } //init function\n\n} //class end\n```", "```swift\nviewSize = size\n```", "```swift\nlet BG = SKSpriteNode(imageNamed: \"BG\")\nBG.position = CGPoint(x: viewSize.width/2, y: viewSize.height/2)\nself.addChild(BG)\n```", "```swift\nlet hero:SKSpriteNode! \n```", "```swift\nhero = SKSpriteNode(imageNamed: \"hero\")\nhero.position = CGPoint(x: viewSize.width/4, y: viewSize.height/2)\nself.addChild(hero)\n```", "```swift\noverride func update(currentTime: CFTimeInterval) {\n\n  updateHero()\n}\n```", "```swift\nlet gravity = CGPoint(x:0.0, y: -1.0)\n```", "```swift\n    func updateHero(){\n\n        hero.position.y += gravity.y\n\n    }\n```", "```swift\nif(hero.position.y - hero.size.height/2 <= 0){\n\n        hero.position.y = hero.size.height/2\n\n}else if (hero.position.y + hero.size.height/2  >= viewSize.height){\n\n        hero.position.y = viewSize.height - hero.size.height/2            \n}\n```", "```swift\noverride func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n  /* Called when a touch begins */\n\n  for touch: AnyObject in touches {\n       let location = touch.locationInNode(self)            \n\n  }\n\n}//touchesBegan \n```", "```swift\n  if(location.x < viewSize.width/2){\n\n        println(\"[GamePlayScene] touchedLeftSide \")\n\n   }else if(location.x > viewSize.width/2){\n\n         println(\"[GamePlayScene] touchedRightSide \")\n\n   }\n```", "```swift\nvar thrust = CGPointZero\n```", "```swift\nthrust.y = 15.0\n```", "```swift\nthrust.y += gravity.y\nhero.position.y += thrust.y\n\nprintln(\"Thrust Y Value: \\(thrust.y)\")\n```", "```swift\n[GamePlayScene] touchedLeftSide \nThrust Y Value: 14.0\nThrust Y Value: 13.0\nThrust Y Value: 12.0\nThrust Y Value: 11.0\nThrust Y Value: 10.0\n```", "```swift\nthrust.y = 0   \n```", "```swift\nimport SpriteKit\n\nclass MovingSprite{\n\n    let _sprite: SKSpriteNode!\n    let _speed : CGPoint!\n\n    init(sprite: SKSpriteNode, speed: CGPoint){\n\n        _sprite = sprite\n        _speed = speed\n\n    }//init\n\n    func moveSprite(){\n\n        _sprite.position.x += _speed.x\n    }\n\n}//class\n```", "```swift\nfunc addRockets(){\n\nlet rocketNode: SKSpriteNode = SKSpriteNode(imageNamed: \"rocket\")\nrocketNode.position = CGPoint(x: hero.position.x + hero.size.width/2 + rocketNode.size.width/2,y: hero.position.y - rocketNode.size.height/2)\n\n   self.addChild(rocketNode)\n\n      let speed: CGPoint = CGPoint(x: 10.0, y: 0.0)\n      let rocket: MovingSprite = MovingSprite(sprite: rocketNode, speed: speed)\n\n}\n```", "```swift\n    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        /* Called when a touch begins */\n\n        for touch: AnyObject in touches {\n            let location = touch.locationInNode(self)\n\n                if(location.x < viewSize.width/2){\n\n                    println(\"[GamePlayScene] touchedLeftSide \")\n\n                    thrust.y = 15.0\n\n                }else if(location.x > viewSize.width/2){\n\n                    println(\"[GamePlayScene] touchedRightSide \")\n\n                    addRockets()\n                }\n\n            }\n        }//touchesBegan\n```", "```swift\nvar rockets:[MovingSprite] = []\n```", "```swift\nfunc updateGameObjects(){\n\nfor(var i:Int = 0; i < rockets.count; i++){\n\n      rockets[i].moveSprite()            \n      var sprite: SKSpriteNode = rockets[i]._sprite\nif((sprite.position.x - sprite.size.width/2) > \n                              viewSize.width){\n\n              sprite.removeFromParent()\n              rockets.removeAtIndex(i)\n        }\n}\n}\n```", "```swift\n    func addRockets(){\n\n        let rocketNode: SKSpriteNode = \nSKSpriteNode(imageNamed: \"rocket\")\n        rocketNode.position = CGPoint(\n                    x: hero.position.x + hero.size.width/2 +\n               rocketNode.size.width/2,\n                    y: hero.position.y - rocketNode.size.height/2)\n                    self.addChild(rocketNode)\n\n        let speed: CGPoint = CGPoint(x: 10.0, y: 0.0)\n        let rocket: MovingSprite = \n   MovingSprite(sprite: rocketNode, speed: speed)\n\n        rockets.append(rocket)\n    }\n```", "```swift\nprintln(\" rockets count: \\(rockets.count)\")\n```", "```swift\nvar enemies:[MovingSprite] = []\n```", "```swift\n\n  let viewSize:CGSize!\n  let hero:SKSpriteNode!\n  let gravity = CGPoint(x:0.0, y: -1.0)\n  var thrust = CGPointZero\n  var rockets:[MovingSprite] = []\n  var enemies:[MovingSprite] = []\n```", "```swift\nfunc addEnemy(){\n\n   var factor = arc4random_uniform(4) + 1\n   var fraction = CGFloat(factor) * 0.20\n   var height = fraction * viewSize.height\n\n   println(\"enemy height: \\(factor), \\(fraction), \\(height)\")    \n\n   var enemyNode:SKSpriteNode = SKSpriteNode(imageNamed: \"enemy\")\n\nenemyNode.position = CGPoint(x: viewSize.width +   enemyNode.size.width/2, y: height)\n\nself.addChild(enemyNode)\n\nenemyNode.name = \"enemy\"\n\n   let speed: CGPoint = CGPoint(x: -5.0, y: 0.0)\n\nvar enemy:MovingSprite = MovingSprite(sprite: enemyNode, speed: speed)\n\nenemies.append(enemy)\n}\n```", "```swift\n    for(var i:Int = 0; i < enemies.count; i++){\n\n       enemies[i].moveSprite()\n\n       var sprite: SKSpriteNode = enemies[i]._sprite\n\n       if((sprite.position.x + sprite.size.width/2) < 0){\n\n           sprite.removeFromParent()\n           enemies.removeAtIndex(i)\n       }\n    }//update enemies \n```", "```swift\n//spawn enemies after delay\nlet callFunc = SKAction.runBlock(addEnemy)\nlet delay = SKAction.waitForDuration(3.0)\nlet sequence = SKAction.sequence([callFunc,delay])\nlet addEnemyActiom = SKAction.repeatActionForever(sequence)\n\nself.runAction(addEnemyActiom)\n```", "```swift\nvar bullets:[MovingSprite] = []  \n```", "```swift\nif(_sprite.name == \"enemy\"){\n\nlet shootActiom = SKAction.repeatActionForever(SKAction.sequence([SKAction.runBlock(shootBullet),SKAction.waitForDuration(3.0)]))\n\n_sprite.runAction(shootActiom)\n}  \n```", "```swift\nfunc shootBullet(){\n\n   let _gameplayScene = _sprite.parent as GamePlayScene\n   _gameplayScene.addBullets(_sprite.position, size: _sprite.size)\n\n} \n```", "```swift\nfunc addBullets(pos:CGPoint, size: CGSize){\n\n   let bulletNode: SKSpriteNode = SKSpriteNode(imageNamed: \" bullet\")\n\nvar newPos = CGPoint(x: pos.x - size.width/2 -     \n                                    bulletNode.size.width/2,\n                        y: pos.y - bulletNode.size.height)\n\n   bulletNode.position = newPos\n   self.addChild(bulletNode)\n\n   let speed: CGPoint = CGPoint(x: -10.0, y: 0.0)\n   let bullet: MovingSprite = MovingSprite(sprite: bulletNode, speed: speed)\n   bullets.append(bullet)\n\n}  \n```", "```swift\nfor(var i:Int = 0; i < bullets.count; i++){\n\n    bullets[i].moveSprite()\n\n    var sprite: SKSpriteNode = bullets[i]._sprite\n\n    if((sprite.position.x + sprite.size.width/2) < 0){\n\n        sprite.removeFromParent()\n        bullets.removeAtIndex(i)\n    }\n}     \n```", "```swift\n//Hero and Bullets\n\nfor bullet in bullets{\n\n    var sprite = bullet._sprite\n\n    if(sprite.intersectsNode(hero)){\n\n        GameOver()\n    }\n}\n```", "```swift\n    override func update(currentTime: CFTimeInterval) {\n        /* Called before each frame is rendered */\n\n            updateGameObjects()\n            updateHero()\n            checkCollision()\n\n    }\n```", "```swift\nvar enemies:[MovingSprite] = []\n    var bullets:[MovingSprite] = []\n    var gameOver = false\n\n```", "```swift\nfunc GameOver(){\n\n   gameOver = true\n\n   self.removeAllActions()\n\n   for enemy in enemies{\n\n       enemy._sprite.removeAllActions()\n   }\n}\n```", "```swift\nfor(var i:Int = 0; i < enemies.count; i++){\n\n       enemies[i].moveSprite()\n\n       var sprite: SKSpriteNode = enemies[i]._sprite\n\n       if((sprite.position.x + sprite.size.width/2) < 0){\n\n           sprite.removeFromParent()\n           enemies.removeAtIndex(i)\n\n           GameOver()\n       }\n}//update enemies\n```", "```swift\noverride func update(currentTime: CFTimeInterval) {\n   /* Called before each frame is rendered */\n            if(!gameOver){\n\n       updateGameObjects()\n       updateHero()\n       checkCollision()\n\n   }\n}\n```", "```swift\noverride func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n\n/* Called when a touch begins */\n\n   for touch: AnyObject in touches {\n\n       let location = touch.locationInNode(self)\n\n       let _node:SKNode = self.nodeAtPoint(location)        \n\n       if(!gameOver){ //if game is not over check for touches\n\n           if(location.x < viewSize.width/2){\n\n               println(\"[GamePlayScene] touchedLeftSide \")\n\n               thrust.y = 15.0\n\n           }else if(location.x > viewSize.width/2){\n\n               println(\"[GamePlayScene] touchedRightSide \")\n\n               addRockets()                \n           }\n        }\n    }      \n }\n```", "```swift\nfor(var i:Int = 0; i < rockets.count; i++){\n\n    var rocketSprite = rockets[i]._sprite\n\n    for(var j:Int = 0 ; j < enemies.count; j++){\n\n        var enemySprite = enemies[j]._sprite\n\n          if(rocketSprite.intersectsNode(enemySprite)){\n\n            enemySprite.removeFromParent()\n            rocketSprite.removeFromParent()\n\n            rockets.removeAtIndex(i)\n            enemies.removeAtIndex(j)\n\n            score++\n\n        }\n    }\n}\n```", "```swift\n    var bullets:[MovingSprite] = []\n    var gameOver = false\n    var score:Int = 0\n\n```", "```swift\nvar scoreLabel: SKLabelNode!\n```", "```swift\nscoreLabel = SKLabelNode(fontNamed:\"Chalkduster\")\nscoreLabel.text = \"Score: 0\"\nscoreLabel.fontSize = 45\nscoreLabel.position = CGPoint(x: viewSize.width/2, y: viewSize.height * 0.9)\nself.addChild(scoreLabel)\n```", "```swift\nrockets.removeAtIndex(i)\nenemies.removeAtIndex(j)\n\nscore++\n\nscoreLabel.text = \"Score: \\(score)\" \n\n```", "```swift\nlet myLabel = SKLabelNode(fontNamed:\"Chalkduster\")\nmyLabel.text = \"GameOver!\"\nmyLabel.fontSize = 65\nmyLabel.position = CGPoint(x: viewSize.width * 0.5, y: viewSize.height * 0.65)\nself.addChild(myLabel)\n```", "```swift\nlet menuBtn = SKSpriteNode(imageNamed: \"menuBtn\")\nmenuBtn.position = CGPoint(x: viewSize.width/2, y: viewSize.height/2)\nself.addChild(menuBtn)\nmenuBtn.name = \"menuBtn\"\n```", "```swift\nelse{ // else check whether main menu button is clicked\n\n     let _node:SKNode = self.nodeAtPoint(location)\n\n     if(_node.name == \"menuBtn\"){\n\n            let scene = MainMenuScene(size: self.size)\n            self.view?.presentScene(scene)                    \n      }\n}\n```", "```swift\nvar currentHighScore = NSUserDefaults.standardUserDefaults().integerForKey(\"tinyBazooka_highscore\")\n```", "```swift\nvar highScoreLabel = SKLabelNode(fontNamed:\"Chalkduster\")\nhighScoreLabel.text = \"\"\nhighScoreLabel.fontSize = 45\nhighScoreLabel.position = CGPoint(x: viewSize.width * 0.5, y: viewSize.height * 0.30)\nself.addChild(highScoreLabel)\n```", "```swift\nif (score > currentHighScore) {\n\nNSUserDefaults.standardUserDefaults().setInteger(score, \n                       forKey: \"tinyBazooka_highscore\")\n\nNSUserDefaults.standardUserDefaults().synchronize()\n\nhighScoreLabel.text = \"New High Score: \\(score) !\"\n\n} else {\n\n    highScoreLabel.text = \"You can Do Better than \\(score)\"\n\n}\n```", "```swift\nlet resetBtn = SKSpriteNode(imageNamed: \"resetBtn\")\n\nresetBtn.position = CGPoint(x: viewSize.width * 0.75, y: viewSize.height/2)\n\nself.addChild(resetBtn)\n\nresetBtn.name = \"resetBtn\"\n```", "```swift\nelse if (_node.name == \"resetBtn\"){\n\nNSUserDefaults.standardUserDefaults().setInteger(0, forKey: \"tinyBazooka_highscore\")\n\nNSUserDefaults.standardUserDefaults().synchronize()\n\n}\n```", "```swift\nclass MainMenuScene: SKScene {\n\n var currentHighScoreLabel: SKLabelNode!\n\n```", "```swift\nvar currentHighScore = NSUserDefaults.standardUserDefaults().integerForKey(\"tinyBazooka_highscore\")\n\ncurrentHighScoreLabel = SKLabelNode(fontNamed:\"Chalkduster\")\n\ncurrentHighScoreLabel.text = \"Current High Score: \\(currentHighScore)\"\n\ncurrentHighScoreLabel.fontSize = 45\ncurrentHighScoreLabel.position = CGPoint(x: viewSize.width * 0.5, y: viewSize.height * 0.20)\n\nself.addChild(currentHighScoreLabel)\n```", "```swift\nelse if (_node.name == \"resetBtn\"){\n\n     NSUserDefaults.standardUserDefaults().setInteger(0, forKey: \"tinyBazooka_highscore\")\n\nNSUserDefaults.standardUserDefaults().synchronize()\n\n var currentHighScore = NSUserDefaults.standardUserDefaults().integerForKey(\"tinyBazooka_highscore\")\n currentHighScoreLabel.text = \"Current High Score: \\(currentHighScore)\"\n\n}\n```"]