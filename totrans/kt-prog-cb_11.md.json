["```kt\ntry {\n    URL url = new URL(\"<api call>\");\n\n    urlConnection = (HttpURLConnection) url.openConnection();\n    urlConnection.setRequestMethod(\"GET\");\n    urlConnection.connect();\n\n    InputStream inputStream = urlConnection.getInputStream();\n    StringBuffer buffer = new StringBuffer();\n    if (inputStream == null) {\n        // Nothing to do.\n        return null;\n    }\n    reader = new BufferedReader(new InputStreamReader(inputStream));\n\n    String line;\n    while ((line = reader.readLine()) != null) {\n        buffer.append(line + \"\\n\");\n    }\n\n    if (buffer.length() == 0) {\n        return null;\n    }\n    result = buffer.toString();\n} catch (IOException e) {\n    Log.e(\"Request\", \"Error \", e);\n    return null;\n} finally{\n    if (urlConnection != null) {\n        urlConnection.disconnect();\n    }\n    if (reader != null) {\n        try {\n            reader.close();\n        } catch (final IOException e) {\n            Log.e(\"Request\", \"Error closing stream\", e);\n        }\n    }\n}\n```", "```kt\nvar response= URL(\"<url>\").readText()\n```", "```kt\ndoAsync {\n    val result= URL(\"https://api.instagram.com/319bad89407ffd7082\").readText()\n    uiThread {\n        toast(result)\n    }\n}\n```", "```kt\nimplementation \"org.jetbrains.anko:anko:1.0\"\n```", "```kt\npublic class Student {\n\n    private String name;\n    private String roll_number;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getRoll_number() {\n        return roll_number;\n    }\n\n    public void setRoll_number(String roll_number) {\n        this.roll_number = roll_number;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n\n    @Override\n    public String toString() {\n        return super.toString();\n    }\n}\n```", "```kt\ndata class Student(var name:String,var roll_number:String,var age:Int)\n```", "```kt\nfun main(args: Array<String>) {\n    val student=Student(\"Aanand\",\"2013001\",21)\n    println(\"Student: name- ${student.name}, roll_number:${student.roll_number}, age:${student.age}\")\n}\n\n//Output: Student: name- Aanand, roll_number:2013001, age:21\n```", "```kt\nprintln(\"${student.toString()}\")\n\n//Output: Student(name=Aanand, roll_number=2013001, age=21)\n```", "```kt\ndata class Student(val name:String,val roll_number:String,var age:Int)\n```", "```kt\nfun main(args: Array<String>) {\n    val student= Student(\"Aanand\", \"2013001\", 21)\n    val (name, roll_number,age)=student\n    println(\"Student: name- $name, roll_number:$roll_number, age:$age\")\n}\n\n//Output: Student: name- Aanand, roll_number:2013001, age:21\n```", "```kt\ndata class Student(val name:String=\"Aanand\",val roll_number:String,var age:Int)\nvar studentA= Student(roll_number =  \"2013001\", age = 21)\nprintln(studentA.toString())\n\n//Output: Student(name=Aanand, roll_number=2013001, age=21)\n```", "```kt\ndata class Student(val name:String,val roll_number:String,var age:Int)\nfun main(args: Array<String>) {\n    var studentA= Student(\"Aanand Roy\", \"2013001\", 21)\n    var olderStudentA=studentA.copy(age = 25)\n    println(olderStudentA.toString())\n}\n\n//Output: Student(name=Aanand Roy, roll_number=2013001, age=25)\n```", "```kt\ncompile 'com.google.code.gson:gson:2.8.2'\n\n```", "```kt\n{\n \"data\": [{\n             \"id\": \"17867282641151111\",\n             \"from\": {\n                 \"id\": \"1391934316\",\n                 \"username\": \"aanandshekharroy\",\n                 \"full_name\": \"Aanand Shekhar Roy\",\n                 \"profile_picture\": \"https://scontent.cdninstagram.com/t51.2885-19/10475071_605790259527941_865730435_a.jpg\"\n                 },\n             \"text\": \"Testing api\",\n             \"created_time\": \"1501571384\"\n         }, {\n             \"id\": \"17892289033060177\",\n             \"from\": {\n                 \"id\": \"1391934316\",\n                 \"username\": \"aanandshekharroy\",\n                 \"full_name\": \"Aanand Shekhar Roy\",\n                 \"profile_picture\": \"https://scontent.cdninstagram.com/t51.2885-19/10475071_605790259527941_865730435_a.jpg\"\n },\n                 \"text\": \"My second test\",\n                 \"created_time\": \"1501571390\"\n             }],\n         \"meta\": {\n         \"code\": 200\n     }\n}\n```", "```kt\n@Generated(\"com.robohorse.robopojogenerator\")\ndata class Response(\n\n   @field:SerializedName(\"data\")\n   val data: List<DataItem?>? = null,\n\n   @field:SerializedName(\"meta\")\n   val meta: Meta? = null\n)\n```", "```kt\n// DataItem -  Class that will hold comments\n@Generated(\"com.robohorse.robopojogenerator\")\ndata class DataItem(\n\n   @field:SerializedName(\"created_time\")\n   val createdTime: String? = null,\n\n   @field:SerializedName(\"from\")\n   val from: From? = null,\n\n   @field:SerializedName(\"id\")\n   val id: String? = null,\n\n   @field:SerializedName(\"text\")\n   val text: String? = null\n)\n```", "```kt\nfun main(args:Array<String>){\n    var response= URL(\"https://api.instagram.com/v1/media/1571595528561539504_5812999640/comments?access_token=5812999640.42ee6f0.9441d5bd909f40319bad89407ffd7082\").readText()\n    var gson= Gson()\n    val comments=gson.fromJson(response,Response::class.java)\n    println(comments.data?.get(0))\n}\n\n//Output: DataItem(createdTime=1501571384, from=From(fullName=Aanand Shekhar Roy, profilePicture=https://scontent.cdninstagram.com/t51.2885-19/10475071_605790259527941_865730435_a.jpg, id=1391934316, username=aanandshekharroy), id=17867282641151111, text=Testing api)\n\n```", "```kt\n//Fuel - Networking in Kotlin\ncompile 'com.github.kittinunf.fuel:fuel:$fuel_version' //for JVM\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout \n\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n    tools:context=\"android.my_company.com.helloworldapp.DownloadFileActivity\"\n    tools:showIn=\"@layout/activity_download_file\">\n\n    <Button\n        android:id=\"@+id/btn_download_file\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"32dp\"\n        android:layout_marginTop=\"32dp\"\n        android:text=\"@string/download_file\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <ProgressBar\n        android:id=\"@+id/progressBar\"\n        style=\"?android:attr/progressBarStyleHorizontal\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        android:progress=\"0\"/>\n</android.support.constraint.ConstraintLayout>\n```", "```kt\nclass DownloadFileActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_download_file)\n        setSupportActionBar(toolbar)\n        Log.d(\"ya\", filesDir.absolutePath + \" \" + filesDir.canonicalPath)\n\n        btn_download_file.onClick {\n            progressBar.progress = 0\n            Fuel.download(\"http://httpbin.org/bytes/32768\").destination { response, url ->\n File.createTempFile(\"abcd\", \".tmp\")\n }.progress { readBytes, totalBytes ->\n val progress = readBytes.toFloat() / totalBytes.toFloat()\n Log.d(\"progress\", progress.toString())\n progressBar.progress = progress.toInt()*100\n }.response { req, res, result ->\n Log.d(\"status result\", result.component1().toString())\n Log.d(\"status res\", res.responseMessage)\n Log.d(\"status req\", req.url.toString())\n }\n\n        }\n    }\n\n}\n```", "```kt\nbtn_download_file.onClick {\n            progressBar.progress = 0\n            Fuel.download(\"http://httpbin.org/bytes/32768\").destination { response, url ->\n File(filesDir , \"abcd.txt\")\n }.progress { readBytes, totalBytes ->\n val progress = readBytes.toFloat() / totalBytes.toFloat()\n Log.d(\"ya\", progress.toString())\n progressBar.progress = progress.toInt()*100\n }.response { req, res, result ->\n Log.d(\"status result\", result.component1().toString())\n Log.d(\"status res\", res.responseMessage)\n Log.d(\"status req\", req.url.toString())\n }\n        }\n```", "```kt\ncompile \"com.squareup.retrofit2:retrofit:$retrofit_version\"\ncompile \"com.squareup.retrofit2:adapter-rxjava2:$retrofit_version\"\ncompile \"com.squareup.retrofit2:converter-gson:$retrofit_version\"\n// RxKotlin - Kotlin version of RxJava\ncompile \"io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion\"\n\n```", "```kt\nRetrofit.Builder()\n        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n        .addConverterFactory(GsonConverterFactory.create())\n        .client(okHttpClient)\n        .baseUrl(AppConstants.INSTAGRAM_BASE_URL)\n        .build()\n```", "```kt\ninterface InstagramApiService {\n\n    @FormUrlEncoded\n    @POST(\"oauth/authorize\")\n    fun getRedirectCode(@Field(\"client_id\") client_id: String,\n                       @Field(\"redirect_uri\") redirect_uri: String,\n                       @Field(\"response_type\") response_type: String): Call<String>\n\n    @FormUrlEncoded\n    @POST(\"oauth/access_token\")\n    fun getAccessToken(@Field(\"client_id\") client_id: String,\n                       @Field(\"client_secret\") client_secret: String,\n                       @Field(\"redirect_uri\") redirect_uri: String,\n                       @Field(\"grant_type\") grant_type: String\n                       , @Field(\"code\") code: String)\n                        :Observable<InstagramLoginResponse>\n\n    @GET(\"v1/users/{user_id}/media/recent/\")\n    fun getInstagramPosts(@Path(\"user_id\") user_id: String?, @Query(\"access_token\") access_token: String?)\n                                                        :Observable<InstagramPostsResponse>\n\n    @GET(\"v1/media/{media_id}/comments\")\n    fun getCommentsForInstagramPost(@Path(\"media_id\") media_id: String?\n                                    , @Query(\"access_token\") access_token: String?)\n            :Observable<InstagramCommentsResponse>\n}\n```", "```kt\nretrofit.create<InstagramApiService>(InstagramApiService::class.java)\n```", "```kt\ninstagramApiService.getCommentsForInstagramPost(instagramId)\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribeBy(onNext={\n                    response: InstagramCommentsResponse ->\n                   // Do something with response\n\n                },onError = {\n                    // Do something with error\n                }))\n```", "```kt\ncompile 'com.android.support:recyclerview-v7:26.1.0'\n\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:layout_height=\"wrap_content\">\n\n    <TextView\n        android:id=\"@+id/recycler_row_text_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"16dp\" />\n\n    <View\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"1dp\"\n        android:layout_alignParentBottom=\"true\"\n        android:alpha=\"0.1\"\n        android:background=\"@android:color/black\" />\n</LinearLayout>\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerView\"\n        android:scrollbars=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n\n</android.support.constraint.ConstraintLayout>\n```", "```kt\nclass RecyclerAdapter(val recyclerList: List<Int>) : RecyclerView.Adapter<RecyclerAdapter.ViewHolder>() {\n    override fun onBindViewHolder(viewHolder: RecyclerAdapter.ViewHolder, position: Int) {\n        viewHolder.bind(recyclerList[position])\n    }\n\n    override fun onCreateViewHolder(viewGroup: ViewGroup, position: Int): RecyclerAdapter.ViewHolder {\n        val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.recycler_row, viewGroup, false)\n        return ViewHolder(view)\n    }\n\n    override fun getItemCount(): Int {\n        return recyclerList.count()\n    }\n\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val itemTextView :TextView= itemView.findViewById(R.id.recycler_row_text_view)\n\n        fun bind(recyclerItemText: Int) {\n            itemTextView.text = recyclerItemText.toString()\n        }\n    }\n\n}\n```", "```kt\nfun updateDataList(dataList: MutableList<Int>) : List<Int> {\n    kotlin.repeat(30) {\n        dataList.add(dataList.size + 1)\n    }\n    return dataList\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    val dataList = mutableListOf<Int>()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val layoutManager = LinearLayoutManager(this)\n        val adapter = RecyclerAdapter(recyclerList = updateDataList(dataList))\n\n        recyclerView.layoutManager = layoutManager\n        recyclerView.adapter = adapter\n        recyclerView.addOnScrollListener(object :                              RecyclerView.OnScrollListener() {\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\n                super.onScrolled(recyclerView, dx, dy)\n                if (!recyclerView.canScrollVertically(1)) {\n                    onScrolledToBottom();\n                }\n        }\n        fun onScrolledToBottom() {\n            val initialSize = dataList.size\n            updateDataList(dataList)\n            val updatedSize = dataList.size\n            adapter.notifyItemRangeInserted(initialSize,updatedSize)\n        }\n})\n}\n```", "```kt\nimplementation \"org.jetbrains.anko:anko:$anko_version\"\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        doAsync {\n            val result= URL(\"https://api.instagram.com/v1/media/1571595528561539504_5812999640/comments?access_token=5812999640.42ee6f0.9441d5bd909f40319bad89407ffd7082\").readText()\n uiThread {\n                toast(result)\n } }\n    }\n}\n```", "```kt\ndependencies {  \n    ...  \n    compile \"org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19.2\" \n}\n```", "```kt\nrepositories {\n jcenter()\n}\n```", "```kt\napply plugin: 'kotlin'\n kotlin {\n    experimental {\n    coroutines 'enable'\n }\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        launch {\n            delay(10000)\n println(\"Hello\")\n        }\n    }\n}\n```", "```kt\nsuspend fun timeConsumingMethod(arg: String): Boolean {\n     //...\n}\n```", "```kt\nsuspend fun longOperationOne(): Int {\n    delay(1000L) \n    return 10\n}\n\nsuspend fun longOperationTwo(): Int {\n    delay(1000L) \n    return 20\n}\n```", "```kt\nval one = async { longOperationOne() }\nval two = async { longOperationTwo() }\nasync {\n    println(\"The answer is ${one.await() + two.await()}\")\n}\n```", "```kt\nval one = async { longOperationOne() }\nval two = async { longOperationTwo() }\nrunBlocking {\n    println(\"The answer is ${one.await() + two.await()}\")\n}\n```", "```kt\nlaunch(UI) {\n     val sum = lengthyJobOne.await() +lengthyJobTwo.await()\n     myTextView.text = \"Sum of results is $sum.\"\n}\n```"]