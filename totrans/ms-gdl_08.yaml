- en: Chapter 8. Migration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are coming from an Ant or Maven background, the first question that
    comes to mind is: why Gradle? We have already discussed this topic in the initial
    chapters. Then, another important question comes up. We already have lots of build
    code written in Ant or Maven; now, if a new script needs to be written into Gradle,
    wouldn''t it be tough to manage two build tools? In this chapter, we will explain
    different techniques to migrate existing Ant or Maven script to Gradle build script.
    In the first section of this chapter, we will discuss different strategies that
    can be applied to migrate from Ant to Gradle and later sections will cover strategies
    from Maven to Gradle migration.'
  prefs: []
  type: TYPE_NORMAL
- en: Migration from Ant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ant is one of the initial build tools that became very popular among developers
    because they can control each and every step of the build process. But writing
    each and every step means a lot of boilerplate code in the build file. Another
    feature which was lacking in the initial Ant releases was complexity in dependency
    management, which was later simplified by introducing an Ivy dependency manager.
    For Ant users, it is very simple and easy to switch to using Gradle as their build
    tool. Gradle provides direct integration with Ant using Groovy''s `AntBuilder`.
    Ant tasks are treated as first class citizens in the Gradle world. In the next
    sections, we will discuss three different strategies: importing Ant file into
    Gradle, script use of `AntBuilder` class and rewriting to Gradle. These strategies
    can be followed to migrate from Ant to Gradle.'
  prefs: []
  type: TYPE_NORMAL
- en: Importing Ant file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is one of the simplest ways of integrating the Ant script with Gradle
    script. It is very useful as the first step of migration where you have lots of
    build scripts, all written in Ant, and you want to start with Gradle without making
    any big changes to the current build structure initially. We will start with a
    sample Ant file. Consider we have the `build.xml` Ant file for a Java project
    and we perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Build project (compile code and generate a JAR file).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate checksum of the JAR file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a ZIP file that contains the JAR file and checksum file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the `build.xml` file to perform all three preceding mentioned
    operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To build the project, you need to run the following target (in Ant, we execute
    a target that can be compared to a Gradle task):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The target will execute other required targets such as compile, clean, setup,
    and so on. This will generate the `sampleproject-1.0.jar` file in the `build/libs`
    directory. Now, to generate checksum for JAR and to bundle it along with the JAR
    file, we can run the following target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This target will run the `makeJar` target and all the other dependent targets
    to create the JAR file and then it will execute the checksum target to generate
    the `md5` checksum for the JAR file. Finally, ZIP task will bundle the checksum
    file and the JAR file, and creates a ZIP file inside the `build/distributions`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a sample build file for a Java project; you can have additional targets
    for customized requirements. We can simply import this `Ant` build file in a Gradle
    build file and will be able to execute Ant targets as Gradle tasks. The content
    of the build file will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This one line is sufficient to import the Ant build file and go ahead with
    Gradle. Now try to execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here we have named the build file as `build_import.gradle`. The preceding command
    executed all Ant tasks, one after another. You can find the ZIP file created in
    the `build/distributions` directory.
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the first steps to migrate from Ant to Gradle. This will help
    initially, if you do not want to play with the existing build script and want
    to use Gradle. Just importing the Ant file in the Gradle build help you to get
    started.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Gradle also enable you to access existing Ant properties and add new properties.
    To access existing Ant properties, you can use `ant.properties`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, Gradle script has fetched properties value from the Ant file and we are
    printing the value in the Gradle task. In a similar fashion, we can set Ant properties
    in Gradle and access these properties in the Ant build file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the build file with the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This property will be read by the `GradleProperties` target in the Ant file,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, on executing the `GradleProperties` target, we can find the comments property
    printed in the console as shown in this code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Update Ant tasks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Gradle also enables you to enhance an existing Ant task. In the same way, we
    enhance any existing Gradle tasks using the `doFirst` or `doLast` closures; Ant
    tasks can be extended in a similar fashion. Add the following statements in the
    build file (file: `build_import.gradle`) to add the `doFirst` and `doLast` closures
    to the `GradleProperties` task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the `GradleProperties` target executes the `doFirst` and `doLast` closures,
    and the console output is displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using AntBuilder API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen how easy it is to just import the Ant `build.xml` into Gradle and
    use Ant targets as Gradle tasks. Another approach is to use the `AntBuilder` class.
    With `AntBuilder` you can call Ant tasks from the Gradle script. An instance of
    `AntBuilder` class called 'ant' is available in the Gradle build file. Using this
    instance, when we call a method, it actually executes an Ant task.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following examples, we will use the same `build.xml` file and will explain
    how to rewrite the tasks to Gradle using `AntBuilder`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting the properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | With AntBuilder |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Cleaning the build directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | With AntBuilder |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Creating new directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | With AntBuilder |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Compiling the Java code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | With AntBuilder |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create JAR file from the compiled source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | With AntBuilder |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate the checksum for JAR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | With AntBuilder |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Bundle the checksum file and JAR file into a ZIP file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | With AntBuilder |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'So the complete build file will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, execute the ZIP task and check the distributions directory. You will find
    the `sampleproject.zip` file, created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note here that `AntBuilder` is most useful for the custom Ant `taskdef` tasks
    that have not been ported over to Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Rewriting to Gradle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, we have seen how easy it is to import an Ant file to a Gradle script.
    We also looked into a different approach, where we used `AntBuilder` instance
    to replicate the same behavior while migrating from Ant to Gradle. Now, in the
    third approach, we will rewrite the Ant script in Groovy.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue with the same Ant `build.xml` file and we will convert this
    to a Gradle build script. In this example, we are building a Java project. As
    we know, to build a Java project Gradle already provides us with a Java plugin;
    you just need to apply the Java plugin in the build file and that is all. The
    Java plugin will take care of all the standard conventions and configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the conventions of the Java plugin that we have already
    discussed in [Chapter 4](ch04.html "Chapter 4. Plugin Management"), *Plugin Management*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Convention used | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `build` | Default build directory name |'
  prefs: []
  type: TYPE_TB
- en: '| `build/libs` | Default jar location |'
  prefs: []
  type: TYPE_TB
- en: '| `src/main/java; src/test/java` | Java source files location |'
  prefs: []
  type: TYPE_TB
- en: '| Project name | Archive filename |'
  prefs: []
  type: TYPE_TB
- en: If the project also follows these conventions, we do not need to write any additional
    configurations for the project. The only configuration needed is to define the
    version property; otherwise the JAR will be created without the version information.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, our new build script will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are done. No need to write any script to create and delete directories,
    compile files, create JAR tasks, and so on. You can find `<projectname>-<version>.jar`
    in the `build/libs` directory after executing the build command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: It is so easy to trim around 30 lines of Ant code to two lines of Gradle code.
    It allowed us to escape all the boilerplate code and concentrate on the main logic.
    However, all projects can't be simply converted just by applying a plugin or following
    some convention. You might need to configure `sourceSets` and other configurations
    if the project does not follow Gradle or Maven conventions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Coming back to the example, we have only created the JAR file; two more tasks
    are pending. We have to generate a file to store the checksum and we need to bundle
    the checksum file and JAR file in to a ZIP file. We can define two additional
    tasks to accomplish this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding build script, checksum task will create the checksum for the
    jar file. Here we are again using Ant. The checksum task creates checksum, as
    this is the simplest way in Gradle. We have configured the ZIP task (of type ZIP)
    to create a ZIP file. Gradle already provides a convention for the build/distributions
    directory as `project.distsDir`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you do not want to follow the convention, Gradle provides an easy way to
    configure projects as per requirement. We will show how to configure previously
    created Ant tasks in Gradle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cleaning the build directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | Gradle way |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Creating new directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | Gradle way |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Compiling the Java code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | Gradle way |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'JAR the compiled classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Ant way | Gradle way |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'So the final build file (`build_conf.gradle`) with configuration will look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, try to execute the ZIP command. You can find the JAR file and checksum
    file created in the `build/libs` directory, and the ZIP file inside the build/distributions
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Migration from Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the size and complexities of Ant files started to increase for enterprise
    software, developers started searching for better solutions. Maven easily fitted
    as a solution, as it introduced the concept of conventions over configurations.
    If you follow certain conventions, it saves a lot of time by skipping boilerplate
    code. Maven also provided a dependency management solution that was one of the
    major drawbacks of the Ant tool. Ant didn't provide any dependency management
    solution whereas Maven came with a built-in dependency manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we discussed migration strategies from Ant to Gradle, you learned that
    the simplest solution is to import the Ant `build.xml` file and use it as it is.
    For Maven migration, we do not have such a feature. Maven users might find it
    easy to migrate from Maven to Gradle, as both follow these common principles:'
  prefs: []
  type: TYPE_NORMAL
- en: Convention over configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency management solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repositories configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To migrate from Maven to Gradle, we will need to write a new Gradle script that
    mimics the functionality. If you have already worked on Maven, you might have
    noticed that Gradle uses most of the Maven concepts; thus, it would not be very
    difficult to migrate from Maven to Gradle. One of the main differences is that
    Gradle uses Groovy as a build script language, whereas Maven uses XML. In this
    section, we will discuss some of the most common tasks to convert a Maven script
    to a Gradle script.
  prefs: []
  type: TYPE_NORMAL
- en: Build filename and project properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `GroupId`, `artifactId`, and `version` are the minimum required properties
    that the user needs to provide in the Maven `pom` file, whereas in Gradle these
    are not mandatory. Default values are assumed if the user does not configure them.
    It is always recommended to specify these values to avoid any conflicts:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Maven way | Gradle way |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: <`groupId>ch8.example</groupId>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<artifactId>SampleMaven</artifactId>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<version>1.0</version>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<packaging>jar</packaging>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`groupid`: Not required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`artifactId`: Default is the project directory name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: If not mentioned, artifact will be created without a version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging depends on the plugin that you apply in the build script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If packaging is not mentioned in Maven, by default it will be JAR. The other
    core packaging are: `pom`, `jar`, `maven-plugin`, `ejb`, `war`, `ear`, `rar`,
    and `par`.'
  prefs: []
  type: TYPE_NORMAL
- en: Properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the ways in which you can define properties in Maven and
    Gradle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Maven way | Gradle way |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Both Maven and Gradle provide a dependency management feature. They manage
    dependency on their own. You do not need to worry about any second- or third-level
    dependencies for your project. Similar to the Maven scope (such as compile and
    runtime), Gradle also provides different configurations such as compile, runtime,
    `testCompile`, and so on. The following table lists the scope supported by both
    Maven and Gradle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Maven scopes | Gradle scopes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: compile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: provided
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`compile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`providedCompile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`runtime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`providedRuntime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`testCompile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`testRutime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'As compared to provided scope in Maven, the Gradle `war` plugin adds two additional
    scopes, `providedCompile` and `providedRuntime`. For test cases also Gradle provides
    two scopes, `testCompile` and `testRuntime`. The following is an example of how
    you use scope while defining dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Maven way | Gradle way |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Exclude transitive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In [Chapter 5](ch05.html "Chapter 5. Dependency Management"), *Dependency Management*,
    you learned how to work with dependency management. Maven doesn''t differ much
    in terms of dependency management features. Here is a sample to exclude transitive
    dependencies in both the build tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Maven way | Gradle way |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Plugin declaration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `maven` plugin is a collection of one or more goals that can be applied to
    a project using the plugins element. A goal in a plugin is executed by the `mvn
    [plugin-name]:[goal-name]` command. In Maven, generally we have two types of plugins:
    build plugins and reporting plugins. Build plugin will executed during build process,
    and should be configured in the `<build/>` element of `pom.xml`. Reporting plugins
    will be executed during site generation, and are configured using the `<reporting/>`
    element. Examples of reporting plugins are Checkstyle, PMD, and so on. In Gradle,
    you just need to apply a plugin statement in the Gradle script or you need to
    define it in the `buildscript` closure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample code, which describes how to include plugins in Maven
    and how we define the same in Gradle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Maven way | Gradle way |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`apply plugin:''<pluginid>''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For custom plugin:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Repository configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Repositories are used to download assets and artifacts, and also to publish
    the artifacts. In Maven, you can define repositories in `pom.xml` or in `settings.xml`.
    In Gradle, you can add repositories in the `init` script (`init.gradle`) or in
    the `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Maven way | Gradle way |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Multi-module declaration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven and Gradle both provide ways to create multi-module projects, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Maven way | Gradle way |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '| Add `settings.gradle` under root project and include subprojects as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Default values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Gradle and Maven both provide default values for certain properties. You can
    use them as they are, if you want to follow convention and update them if required:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Maven way | Gradle way |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Project directory | `${project.basedir}` | `${project.rootDir}` |'
  prefs: []
  type: TYPE_TB
- en: '| Build directory | `${project.basedir}/target` | `${project.rootDir}/build`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Classes directory | `${project.build.directory}/classes` | `${project.rootDir}/build/classes`
    |'
  prefs: []
  type: TYPE_TB
- en: '| JAR name | `${project.artifactId}-${project.version}` | `${project.name}`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Test output directory | `${project.build.directory}/test-classes` | `${project.testResultsDir}`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Source directory | `${project.basedir}/src/main/java` | `${project.rootDir}/src/main/java`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Test source directory | `${project.basedir}/src/test/java` | `${project.rootDir}/src/test/java`
    |'
  prefs: []
  type: TYPE_TB
- en: Gradle init Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Build init` plugin can be used to generate the `build.gradle` file from a
    `pom` file. Command `gradle init --type pom` or `gradle init` creates Gradle build
    files and other artifacts if executed from a project or directory that has a valid
    `pom.xml` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We created one project, `SampleMaven`, that contains Java files in the `src\main\java\ch8`
    directory and the `pom.xml` file under the root project directory. The following
    is the content of the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note that Maven to Gradle is an incubating feature. Current DSL and other configurations
    might change in future. On executing the preceding command, you will find `build.gradle`,
    `settings.gradle`, and Gradle wapper files created in the project directory. The
    auto-generated `build.gradle` file has the following content. It automatically
    adds plugin details, and group and version information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of a system-generated build file is shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This plugin also supports multiproject build, repository configuration, dependency
    management, and a lot of other features.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed migration to Gradle from Ant and Maven. This is
    a very common scenario in any organization where the existing build script is
    written in Ant or Maven and it is trying to upgrade to Gradle. This chapter gives
    some analysis and different approaches, which might help to plan the Gradle migration
    in a better and more organized way.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the deployment aspect of build automation
    with Docker.
  prefs: []
  type: TYPE_NORMAL
