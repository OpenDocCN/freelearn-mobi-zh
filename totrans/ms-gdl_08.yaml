- en: Chapter 8. Migration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。迁移
- en: 'If you are coming from an Ant or Maven background, the first question that
    comes to mind is: why Gradle? We have already discussed this topic in the initial
    chapters. Then, another important question comes up. We already have lots of build
    code written in Ant or Maven; now, if a new script needs to be written into Gradle,
    wouldn''t it be tough to manage two build tools? In this chapter, we will explain
    different techniques to migrate existing Ant or Maven script to Gradle build script.
    In the first section of this chapter, we will discuss different strategies that
    can be applied to migrate from Ant to Gradle and later sections will cover strategies
    from Maven to Gradle migration.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自 Ant 或 Maven 背景，首先想到的问题可能是：为什么是 Gradle？我们已经在初始章节中讨论了这个问题。然后，另一个重要的问题出现了。我们已经在
    Ant 或 Maven 中编写了大量的构建代码；现在，如果需要在新脚本中写入 Gradle，管理两个构建工具不会很困难吗？在本章中，我们将解释将现有的 Ant
    或 Maven 脚本迁移到 Gradle 构建脚本的不同技术。在本章的第一节中，我们将讨论可以应用于从 Ant 迁移到 Gradle 的不同策略，而后续章节将涵盖从
    Maven 迁移到 Gradle 的策略。
- en: Migration from Ant
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Ant 迁移
- en: 'Ant is one of the initial build tools that became very popular among developers
    because they can control each and every step of the build process. But writing
    each and every step means a lot of boilerplate code in the build file. Another
    feature which was lacking in the initial Ant releases was complexity in dependency
    management, which was later simplified by introducing an Ivy dependency manager.
    For Ant users, it is very simple and easy to switch to using Gradle as their build
    tool. Gradle provides direct integration with Ant using Groovy''s `AntBuilder`.
    Ant tasks are treated as first class citizens in the Gradle world. In the next
    sections, we will discuss three different strategies: importing Ant file into
    Gradle, script use of `AntBuilder` class and rewriting to Gradle. These strategies
    can be followed to migrate from Ant to Gradle.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Ant 是最初成为开发者中非常受欢迎的构建工具之一，因为它们可以控制构建过程的每个步骤。但是，编写每个步骤意味着在构建文件中有很多样板代码。Ant 初始版本中缺少的另一个特性是依赖关系管理的复杂性，后来通过引入
    Ivy 依赖关系管理器得到了简化。对于 Ant 用户来说，切换到使用 Gradle 作为他们的构建工具非常简单且容易。Gradle 通过 Groovy 的
    `AntBuilder` 提供了对 Ant 的直接集成。在 Gradle 世界中，Ant 任务被视为一等公民。在接下来的几节中，我们将讨论三种不同的策略：将
    Ant 文件导入 Gradle、`AntBuilder` 类的脚本使用以及重写为 Gradle。这些策略可以遵循从 Ant 迁移到 Gradle。
- en: Importing Ant file
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入 Ant 文件
- en: 'This is one of the simplest ways of integrating the Ant script with Gradle
    script. It is very useful as the first step of migration where you have lots of
    build scripts, all written in Ant, and you want to start with Gradle without making
    any big changes to the current build structure initially. We will start with a
    sample Ant file. Consider we have the `build.xml` Ant file for a Java project
    and we perform the following tasks:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将 Ant 脚本与 Gradle 脚本集成的一种最简单的方法。作为迁移的第一步，当您有很多用 Ant 编写的构建脚本，并且希望在不改变当前构建结构的情况下开始使用
    Gradle 时，它非常有用。我们将从一个示例 Ant 文件开始。假设我们有一个 Java 项目的 `build.xml` Ant 文件，并执行以下任务：
- en: Build project (compile code and generate a JAR file).
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目（编译代码并生成 JAR 文件）。
- en: Generate checksum of the JAR file.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成 JAR 文件的校验和。
- en: Create a ZIP file that contains the JAR file and checksum file.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 JAR 文件和校验和文件的 ZIP 文件。
- en: 'The following is the `build.xml` file to perform all three preceding mentioned
    operations:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要执行所有前面提到的三个操作的 `build.xml` 文件：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To build the project, you need to run the following target (in Ant, we execute
    a target that can be compared to a Gradle task):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建项目，您需要运行以下目标（在 Ant 中，我们执行一个可以与 Gradle 任务相比的目标）：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The target will execute other required targets such as compile, clean, setup,
    and so on. This will generate the `sampleproject-1.0.jar` file in the `build/libs`
    directory. Now, to generate checksum for JAR and to bundle it along with the JAR
    file, we can run the following target:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目标将执行其他所需的目标，如编译、清理、设置等。这将生成 `sampleproject-1.0.jar` 文件在 `build/libs` 目录中。现在，为了生成
    JAR 的校验和并将其与 JAR 文件捆绑在一起，我们可以运行以下目标：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This target will run the `makeJar` target and all the other dependent targets
    to create the JAR file and then it will execute the checksum target to generate
    the `md5` checksum for the JAR file. Finally, ZIP task will bundle the checksum
    file and the JAR file, and creates a ZIP file inside the `build/distributions`
    directory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此目标将运行 `makeJar` 目标以及所有其他依赖目标来创建 JAR 文件，然后它将执行校验和目标以生成 JAR 文件的 `md5` 校验和。最后，ZIP
    任务将打包校验和文件和 JAR 文件，并在 `build/distributions` 目录内创建一个 ZIP 文件。
- en: 'This is a sample build file for a Java project; you can have additional targets
    for customized requirements. We can simply import this `Ant` build file in a Gradle
    build file and will be able to execute Ant targets as Gradle tasks. The content
    of the build file will look as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 Java 项目的示例构建文件；你可以根据定制需求添加额外的目标。我们可以简单地在这个 Gradle 构建文件中导入这个 `Ant` 构建文件，并能够执行
    Ant 目标。构建文件的内容如下所示：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This one line is sufficient to import the Ant build file and go ahead with
    Gradle. Now try to execute the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行足以导入 Ant 构建文件并继续使用 Gradle。现在尝试执行以下操作：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we have named the build file as `build_import.gradle`. The preceding command
    executed all Ant tasks, one after another. You can find the ZIP file created in
    the `build/distributions` directory.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将构建文件命名为 `build_import.gradle`。前面的命令依次执行了所有 Ant 任务。你可以在 `build/distributions`
    目录中找到创建的 ZIP 文件。
- en: This is one of the first steps to migrate from Ant to Gradle. This will help
    initially, if you do not want to play with the existing build script and want
    to use Gradle. Just importing the Ant file in the Gradle build help you to get
    started.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从 Ant 迁移到 Gradle 的第一步之一。如果你不想玩现有的构建脚本而想使用 Gradle，这将非常有帮助。只需将 Ant 文件导入 Gradle
    构建文件，就可以开始使用。
- en: Accessing properties
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问属性
- en: 'Gradle also enable you to access existing Ant properties and add new properties.
    To access existing Ant properties, you can use `ant.properties`, as shown here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 还允许你访问现有的 Ant 属性并添加新属性。要访问现有的 Ant 属性，你可以使用 `ant.properties`，如下所示：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, Gradle script has fetched properties value from the Ant file and we are
    printing the value in the Gradle task. In a similar fashion, we can set Ant properties
    in Gradle and access these properties in the Ant build file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Gradle 脚本已从 Ant 文件中获取属性值，并且我们在 Gradle 任务中打印这些值。以类似的方式，我们可以在 Gradle 中设置 Ant
    属性并在 Ant 构建文件中访问这些属性。
- en: 'Update the build file with the following statement:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下语句更新构建文件：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This property will be read by the `GradleProperties` target in the Ant file,
    as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性将由 Ant 文件中的 `GradleProperties` 目标读取，如下所示：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, on executing the `GradleProperties` target, we can find the comments property
    printed in the console as shown in this code snippet:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在执行 `GradleProperties` 目标时，我们可以在控制台输出中找到显示的注释属性，如下代码片段所示：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Update Ant tasks
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新 Ant 任务
- en: 'Gradle also enables you to enhance an existing Ant task. In the same way, we
    enhance any existing Gradle tasks using the `doFirst` or `doLast` closures; Ant
    tasks can be extended in a similar fashion. Add the following statements in the
    build file (file: `build_import.gradle`) to add the `doFirst` and `doLast` closures
    to the `GradleProperties` task:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 还允许你增强现有的 Ant 任务。同样，我们可以使用 `doFirst` 或 `doLast` 闭包来增强任何现有的 Gradle 任务；Ant
    任务也可以以类似的方式扩展。在构建文件（文件：`build_import.gradle`）中添加以下语句以将 `doFirst` 和 `doLast` 闭包添加到
    `GradleProperties` 任务中：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, the `GradleProperties` target executes the `doFirst` and `doLast` closures,
    and the console output is displayed as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`GradleProperties` 目标执行了 `doFirst` 和 `doLast` 闭包，控制台输出如下所示：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using AntBuilder API
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AntBuilder API
- en: We have seen how easy it is to just import the Ant `build.xml` into Gradle and
    use Ant targets as Gradle tasks. Another approach is to use the `AntBuilder` class.
    With `AntBuilder` you can call Ant tasks from the Gradle script. An instance of
    `AntBuilder` class called 'ant' is available in the Gradle build file. Using this
    instance, when we call a method, it actually executes an Ant task.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，将 Ant 的 `build.xml` 导入 Gradle 并将 Ant 目标作为 Gradle 任务使用是多么简单。另一种方法是使用 `AntBuilder`
    类。使用 `AntBuilder`，你可以在 Gradle 脚本中调用 Ant 任务。在 Gradle 构建文件中有一个名为 'ant' 的 `AntBuilder`
    类实例可用。使用此实例，当我们调用方法时，它实际上执行了一个 Ant 任务。
- en: 'In the following examples, we will use the same `build.xml` file and will explain
    how to rewrite the tasks to Gradle using `AntBuilder`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将使用相同的 `build.xml` 文件，并解释如何使用 `AntBuilder` 重写任务以使用 Gradle：
- en: 'Setting the properties:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置属性：
- en: '| Ant way | With AntBuilder |'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | 使用 AntBuilder |'
- en: '| --- | --- |'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE12]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE13]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Cleaning the build directories:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理构建目录：
- en: '| Ant way | With AntBuilder |'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | 使用 AntBuilder |'
- en: '| --- | --- |'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE14]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE15]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Creating new directories:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新目录：
- en: '| Ant way | With AntBuilder |'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | 使用 AntBuilder |'
- en: '| --- | --- |'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE16]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE17]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Compiling the Java code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译 Java 代码：
- en: '| Ant way | With AntBuilder |'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | 使用 AntBuilder |'
- en: '| --- | --- |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE18]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE19]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Create JAR file from the compiled source code:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从编译后的源代码创建 JAR 文件：
- en: '| Ant way | With AntBuilder |'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | 使用 AntBuilder |'
- en: '| --- | --- |'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE20]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE21]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Generate the checksum for JAR:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 JAR 生成校验和：
- en: '| Ant way | With AntBuilder |'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | 使用 AntBuilder |'
- en: '| --- | --- |'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE22]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '|'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE23]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Bundle the checksum file and JAR file into a ZIP file:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将校验和文件和 JAR 文件打包成 ZIP 文件：
- en: '| Ant way | With AntBuilder |'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | 使用 AntBuilder |'
- en: '| --- | --- |'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE24]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE25]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'So the complete build file will look as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，完整的构建文件将如下所示：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, execute the ZIP task and check the distributions directory. You will find
    the `sampleproject.zip` file, created as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行 ZIP 任务并检查分发目录。您将找到以下创建的 `sampleproject.zip` 文件：
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note here that `AntBuilder` is most useful for the custom Ant `taskdef` tasks
    that have not been ported over to Gradle.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里，`AntBuilder` 对于尚未迁移到 Gradle 的自定义 Ant `taskdef` 任务非常有用。
- en: Rewriting to Gradle
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重写为 Gradle
- en: Until now, we have seen how easy it is to import an Ant file to a Gradle script.
    We also looked into a different approach, where we used `AntBuilder` instance
    to replicate the same behavior while migrating from Ant to Gradle. Now, in the
    third approach, we will rewrite the Ant script in Groovy.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到将 Ant 文件导入 Gradle 脚本是多么容易。我们还探讨了另一种方法，即使用 `AntBuilder` 实例在从 Ant
    迁移到 Gradle 的过程中复制相同的行为。现在，在第三种方法中，我们将用 Groovy 重新编写 Ant 脚本。
- en: We will continue with the same Ant `build.xml` file and we will convert this
    to a Gradle build script. In this example, we are building a Java project. As
    we know, to build a Java project Gradle already provides us with a Java plugin;
    you just need to apply the Java plugin in the build file and that is all. The
    Java plugin will take care of all the standard conventions and configurations.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用相同的 Ant `build.xml` 文件，并将其转换为 Gradle 构建脚本。在这个例子中，我们正在构建一个 Java 项目。正如我们所知，要构建
    Java 项目，Gradle 已经为我们提供了一个 Java 插件；您只需在构建文件中应用 Java 插件即可。Java 插件将负责所有标准约定和配置。
- en: 'The following are some of the conventions of the Java plugin that we have already
    discussed in [Chapter 4](ch04.html "Chapter 4. Plugin Management"), *Plugin Management*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们已经在 [第 4 章](ch04.html "第 4 章。插件管理") 中讨论过的 Java 插件的某些约定，*插件管理*：
- en: '| Convention used | Description |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 使用的约定 | 描述 |'
- en: '| --- | --- |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `build` | Default build directory name |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `build` | 默认构建目录名称 |'
- en: '| `build/libs` | Default jar location |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `build/libs` | 默认 JAR 文件位置 |'
- en: '| `src/main/java; src/test/java` | Java source files location |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `src/main/java; src/test/java` | Java 源文件位置 |'
- en: '| Project name | Archive filename |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 项目名称 | 归档文件名 |'
- en: If the project also follows these conventions, we do not need to write any additional
    configurations for the project. The only configuration needed is to define the
    version property; otherwise the JAR will be created without the version information.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果项目也遵循这些约定，我们就不需要为项目编写任何额外的配置。唯一需要的配置是定义版本属性；否则，将创建不带版本信息的 JAR 文件。
- en: 'So, our new build script will look as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们新的构建脚本将如下所示：
- en: '[PRE28]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, we are done. No need to write any script to create and delete directories,
    compile files, create JAR tasks, and so on. You can find `<projectname>-<version>.jar`
    in the `build/libs` directory after executing the build command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了。不需要编写任何脚本来创建和删除目录、编译文件、创建 JAR 任务等。在执行构建命令后，您可以在 `build/libs` 目录中找到
    `<projectname>-<version>.jar`：
- en: '[PRE29]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It is so easy to trim around 30 lines of Ant code to two lines of Gradle code.
    It allowed us to escape all the boilerplate code and concentrate on the main logic.
    However, all projects can't be simply converted just by applying a plugin or following
    some convention. You might need to configure `sourceSets` and other configurations
    if the project does not follow Gradle or Maven conventions.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将大约 30 行 Ant 代码缩减为两行 Gradle 代码真是太容易了。这使我们摆脱了所有样板代码，并专注于主要逻辑。然而，并非所有项目都可以通过应用插件或遵循某些约定简单地转换。如果项目不遵循
    Gradle 或 Maven 约定，您可能需要配置 `sourceSets` 和其他配置。
- en: 'Coming back to the example, we have only created the JAR file; two more tasks
    are pending. We have to generate a file to store the checksum and we need to bundle
    the checksum file and JAR file in to a ZIP file. We can define two additional
    tasks to accomplish this, as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 回到示例，我们只创建了 JAR 文件；还有两个任务待完成。我们必须生成一个文件来存储校验和，我们需要将校验和文件和 JAR 文件捆绑到一个 ZIP 文件中。我们可以定义两个额外的任务来完成此操作，如下所示：
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the preceding build script, checksum task will create the checksum for the
    jar file. Here we are again using Ant. The checksum task creates checksum, as
    this is the simplest way in Gradle. We have configured the ZIP task (of type ZIP)
    to create a ZIP file. Gradle already provides a convention for the build/distributions
    directory as `project.distsDir`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的构建脚本中，校验和任务将为 jar 文件创建校验和。这里我们再次使用 Ant。校验和任务创建校验和，因为这是 Gradle 中最简单的方式。我们已经配置了
    ZIP 任务（类型为 ZIP）以创建 ZIP 文件。Gradle 已经为构建/分发目录提供了约定，即 `project.distsDir`：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Configuration
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置
- en: 'If you do not want to follow the convention, Gradle provides an easy way to
    configure projects as per requirement. We will show how to configure previously
    created Ant tasks in Gradle:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想遵循约定，Gradle 提供了一种简单的方法来根据需求配置项目。我们将展示如何配置之前创建的 Ant 任务在 Gradle 中：
- en: 'Cleaning the build directories:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理构建目录：
- en: '| Ant way | Gradle way |'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | Gradle 方式 |'
- en: '| --- | --- |'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE32]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE33]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Creating new directories:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新目录：
- en: '| Ant way | Gradle way |'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | Gradle 方式 |'
- en: '| --- | --- |'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE34]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE35]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Compiling the Java code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译 Java 代码：
- en: '| Ant way | Gradle way |'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | Gradle 方式 |'
- en: '| --- | --- |'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE36]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '|'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE37]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'JAR the compiled classes:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将编译的类 JAR 化：
- en: '| Ant way | Gradle way |'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Ant 方式 | Gradle 方式 |'
- en: '| --- | --- |'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE38]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '|'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE39]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '|'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'So the final build file (`build_conf.gradle`) with configuration will look
    as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，带有配置的最终构建文件（`build_conf.gradle`）将如下所示：
- en: '[PRE40]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, try to execute the ZIP command. You can find the JAR file and checksum
    file created in the `build/libs` directory, and the ZIP file inside the build/distributions
    directory:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试执行 ZIP 命令。你可以在 `build/libs` 目录中找到创建的 JAR 文件和校验和文件，以及构建/分发目录中的 ZIP 文件：
- en: '[PRE41]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Migration from Maven
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Maven 迁移
- en: As the size and complexities of Ant files started to increase for enterprise
    software, developers started searching for better solutions. Maven easily fitted
    as a solution, as it introduced the concept of conventions over configurations.
    If you follow certain conventions, it saves a lot of time by skipping boilerplate
    code. Maven also provided a dependency management solution that was one of the
    major drawbacks of the Ant tool. Ant didn't provide any dependency management
    solution whereas Maven came with a built-in dependency manager.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 随着企业软件中 Ant 文件的大小和复杂性的增加，开发者开始寻找更好的解决方案。Maven 很容易成为解决方案，因为它引入了约定优于配置的概念。如果你遵循某些约定，通过跳过样板代码可以节省大量时间。Maven
    还提供了一种依赖管理解决方案，这是 Ant 工具的主要缺点之一。Ant 没有提供任何依赖管理解决方案，而 Maven 带有内置的依赖管理器。
- en: 'When we discussed migration strategies from Ant to Gradle, you learned that
    the simplest solution is to import the Ant `build.xml` file and use it as it is.
    For Maven migration, we do not have such a feature. Maven users might find it
    easy to migrate from Maven to Gradle, as both follow these common principles:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论从 Ant 迁移到 Gradle 的策略时，你了解到最简单的解决方案是导入 Ant 的 `build.xml` 文件并直接使用它。对于 Maven
    迁移，我们没有这样的功能。Maven 用户可能会发现从 Maven 迁移到 Gradle 很容易，因为两者遵循这些共同原则：
- en: Convention over configurations
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约定优于配置
- en: Dependency management solution
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖管理解决方案
- en: Repositories configuration
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库配置
- en: To migrate from Maven to Gradle, we will need to write a new Gradle script that
    mimics the functionality. If you have already worked on Maven, you might have
    noticed that Gradle uses most of the Maven concepts; thus, it would not be very
    difficult to migrate from Maven to Gradle. One of the main differences is that
    Gradle uses Groovy as a build script language, whereas Maven uses XML. In this
    section, we will discuss some of the most common tasks to convert a Maven script
    to a Gradle script.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Maven 迁移到 Gradle，我们需要编写一个新的 Gradle 脚本，以模拟其功能。如果你已经使用过 Maven，你可能已经注意到 Gradle
    使用了大多数 Maven 概念；因此，从 Maven 迁移到 Gradle 不会非常困难。主要区别之一是 Gradle 使用 Groovy 作为构建脚本语言，而
    Maven 使用 XML。在本节中，我们将讨论一些将 Maven 脚本转换为 Gradle 脚本的最常见任务。
- en: Build filename and project properties
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建文件名和项目属性
- en: 'The `GroupId`, `artifactId`, and `version` are the minimum required properties
    that the user needs to provide in the Maven `pom` file, whereas in Gradle these
    are not mandatory. Default values are assumed if the user does not configure them.
    It is always recommended to specify these values to avoid any conflicts:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`GroupId`、`artifactId` 和 `version` 是用户在 Maven `pom` 文件中需要提供的最小必需属性，而在 Gradle
    中这些不是必需的。如果用户没有配置，则假定默认值。始终建议指定这些值以避免任何冲突：'
- en: '| Maven way | Gradle way |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| Maven 方法 | Gradle 方法 |'
- en: '| --- | --- |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: <`groupId>ch8.example</groupId>`
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<`groupId>ch8.example</groupId>`'
- en: '`<artifactId>SampleMaven</artifactId>`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<artifactId>SampleMaven</artifactId>`'
- en: '`<version>1.0</version>`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<version>1.0</version>`'
- en: '`<packaging>jar</packaging>`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<packaging>jar</packaging>`'
- en: '|'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`groupid`: Not required.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupid`：不必要。'
- en: '`artifactId`: Default is the project directory name.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifactId`：默认值为项目目录名。'
- en: '`version`: If not mentioned, artifact will be created without a version.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：如果未提及，则将创建不带版本的组件。'
- en: Packaging depends on the plugin that you apply in the build script.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包取决于你在构建脚本中应用的插件。
- en: '|'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If packaging is not mentioned in Maven, by default it will be JAR. The other
    core packaging are: `pom`, `jar`, `maven-plugin`, `ejb`, `war`, `ear`, `rar`,
    and `par`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Maven 中没有提及打包，则默认为 JAR。其他核心打包方式包括：`pom`、`jar`、`maven-plugin`、`ejb`、`war`、`ear`、`rar`
    和 `par`。
- en: Properties
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: 'The following are the ways in which you can define properties in Maven and
    Gradle:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Maven 和 Gradle 中定义属性的方法：
- en: '| Maven way | Gradle way |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| Maven 方法 | Gradle 方法 |'
- en: '| --- | --- |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE42]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '|'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE43]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '|'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Dependency management
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖管理
- en: 'Both Maven and Gradle provide a dependency management feature. They manage
    dependency on their own. You do not need to worry about any second- or third-level
    dependencies for your project. Similar to the Maven scope (such as compile and
    runtime), Gradle also provides different configurations such as compile, runtime,
    `testCompile`, and so on. The following table lists the scope supported by both
    Maven and Gradle:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 和 Gradle 都提供了依赖管理功能。它们会自行管理依赖。你不需要担心项目中任何二级或三级依赖。类似于 Maven 的范围（如编译和运行时），Gradle
    也提供了不同的配置，例如编译、运行时、`testCompile` 等。以下表格列出了 Maven 和 Gradle 支持的范围：
- en: '| Maven scopes | Gradle scopes |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| Maven 范围 | Gradle 范围 |'
- en: '| --- | --- |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: compile
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译
- en: provided
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: provided
- en: runtime
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时
- en: test
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: system
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: system
- en: '|'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`compile`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`编译`'
- en: '`providedCompile`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`providedCompile`'
- en: '`runtime`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runtime`'
- en: '`providedRuntime`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`providedRuntime`'
- en: '`testCompile`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testCompile`'
- en: '`testRutime`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testRutime`'
- en: '|'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'As compared to provided scope in Maven, the Gradle `war` plugin adds two additional
    scopes, `providedCompile` and `providedRuntime`. For test cases also Gradle provides
    two scopes, `testCompile` and `testRuntime`. The following is an example of how
    you use scope while defining dependencies:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Maven 中的提供范围相比，Gradle 的 `war` 插件增加了两个额外的范围，`providedCompile` 和 `providedRuntime`。对于测试用例，Gradle
    也提供了两个范围，`testCompile` 和 `testRuntime`。以下是如何在定义依赖时使用范围的一个示例：
- en: '| Maven way | Gradle way |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| Maven 方法 | Gradle 方法 |'
- en: '| --- | --- |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE44]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '|'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE45]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Exclude transitive
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排除传递依赖
- en: 'In [Chapter 5](ch05.html "Chapter 5. Dependency Management"), *Dependency Management*,
    you learned how to work with dependency management. Maven doesn''t differ much
    in terms of dependency management features. Here is a sample to exclude transitive
    dependencies in both the build tools:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 5 章](ch05.html "第 5 章。依赖管理") 中，*依赖管理*，你学习了如何使用依赖管理。Maven 在依赖管理功能方面没有太大差异。以下是一个示例，展示了如何在构建工具中排除传递依赖：
- en: '| Maven way | Gradle way |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| Maven 方法 | Gradle 方法 |'
- en: '| --- | --- |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE46]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '|'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '|'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Plugin declaration
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件声明
- en: 'A `maven` plugin is a collection of one or more goals that can be applied to
    a project using the plugins element. A goal in a plugin is executed by the `mvn
    [plugin-name]:[goal-name]` command. In Maven, generally we have two types of plugins:
    build plugins and reporting plugins. Build plugin will executed during build process,
    and should be configured in the `<build/>` element of `pom.xml`. Reporting plugins
    will be executed during site generation, and are configured using the `<reporting/>`
    element. Examples of reporting plugins are Checkstyle, PMD, and so on. In Gradle,
    you just need to apply a plugin statement in the Gradle script or you need to
    define it in the `buildscript` closure.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Maven插件是一组可以应用于项目的目标集合。插件中的目标通过`mvn [plugin-name]:[goal-name]`命令执行。在Maven中，通常有两种类型的插件：构建插件和报告插件。构建插件将在构建过程中执行，应在`pom.xml`的`<build/>`元素中进行配置。报告插件将在生成站点时执行，并使用`<reporting/>`元素进行配置。报告插件的例子包括Checkstyle、PMD等。在Gradle中，你只需在Gradle脚本中添加一个插件声明，或者需要在`buildscript`闭包中定义它。
- en: 'The following is a sample code, which describes how to include plugins in Maven
    and how we define the same in Gradle:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例代码，它描述了如何在Maven中包含插件以及我们如何在Gradle中定义相同的内容：
- en: '| Maven way | Gradle way |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| Maven方式 | Gradle方式 |'
- en: '| --- | --- |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE48]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '|'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`apply plugin:''<pluginid>''`'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apply plugin:''<pluginid>''`'
- en: 'For custom plugin:'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于自定义插件：
- en: '[PRE49]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '|'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Repository configuration
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仓库配置
- en: 'Repositories are used to download assets and artifacts, and also to publish
    the artifacts. In Maven, you can define repositories in `pom.xml` or in `settings.xml`.
    In Gradle, you can add repositories in the `init` script (`init.gradle`) or in
    the `build.gradle` file:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库用于下载资源和工件，并且也用于发布工件。在Maven中，你可以在`pom.xml`或`settings.xml`中定义仓库。在Gradle中，你可以在`init`脚本（`init.gradle`）或`build.gradle`文件中添加仓库：
- en: '| Maven way | Gradle way |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| Maven方式 | Gradle方式 |'
- en: '| --- | --- |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE50]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '|'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE51]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '|'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Multi-module declaration
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多模块声明
- en: 'Maven and Gradle both provide ways to create multi-module projects, as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Maven和Gradle都提供了创建多模块项目的方法，如下所示：
- en: '| Maven way | Gradle way |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| Maven方式 | Gradle方式 |'
- en: '| --- | --- |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE52]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '| Add `settings.gradle` under root project and include subprojects as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '| 在根项目下添加`settings.gradle`并按如下方式包含子项目：'
- en: '[PRE53]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '|'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Default values
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认值
- en: 'Gradle and Maven both provide default values for certain properties. You can
    use them as they are, if you want to follow convention and update them if required:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle和Maven都为某些属性提供了默认值。如果你想遵循约定，可以直接使用它们，如果需要则可以更新它们：
- en: '|   | Maven way | Gradle way |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '|   | Maven方式 | Gradle方式 |'
- en: '| --- | --- | --- |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Project directory | `${project.basedir}` | `${project.rootDir}` |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| 项目目录 | `${project.basedir}` | `${project.rootDir}` |'
- en: '| Build directory | `${project.basedir}/target` | `${project.rootDir}/build`
    |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| 构建目录 | `${project.basedir}/target` | `${project.rootDir}/build` |'
- en: '| Classes directory | `${project.build.directory}/classes` | `${project.rootDir}/build/classes`
    |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 类目录 | `${project.build.directory}/classes` | `${project.rootDir}/build/classes`
    |'
- en: '| JAR name | `${project.artifactId}-${project.version}` | `${project.name}`
    |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| JAR名称 | `${project.artifactId}-${project.version}` | `${project.name}` |'
- en: '| Test output directory | `${project.build.directory}/test-classes` | `${project.testResultsDir}`
    |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 测试输出目录 | `${project.build.directory}/test-classes` | `${project.testResultsDir}`
    |'
- en: '| Source directory | `${project.basedir}/src/main/java` | `${project.rootDir}/src/main/java`
    |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| 源目录 | `${project.basedir}/src/main/java` | `${project.rootDir}/src/main/java`
    |'
- en: '| Test source directory | `${project.basedir}/src/test/java` | `${project.rootDir}/src/test/java`
    |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| 测试源目录 | `${project.basedir}/src/test/java` | `${project.rootDir}/src/test/java`
    |'
- en: Gradle init Plugin
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle init插件
- en: '`Build init` plugin can be used to generate the `build.gradle` file from a
    `pom` file. Command `gradle init --type pom` or `gradle init` creates Gradle build
    files and other artifacts if executed from a project or directory that has a valid
    `pom.xml` file.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`Build init`插件可以从`pom`文件生成`build.gradle`文件。命令`gradle init --type pom`或`gradle
    init`会在有有效`pom.xml`文件的项目或目录中创建Gradle构建文件和其他工件。'
- en: 'We created one project, `SampleMaven`, that contains Java files in the `src\main\java\ch8`
    directory and the `pom.xml` file under the root project directory. The following
    is the content of the `pom.xml` file:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个项目，`SampleMaven`，该项目包含位于根项目目录下的`src\main\java\ch8`目录中的Java文件和`pom.xml`文件。以下为`pom.xml`文件的内容：
- en: '[PRE54]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now, execute the following command:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行以下命令：
- en: '[PRE55]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note that Maven to Gradle is an incubating feature. Current DSL and other configurations
    might change in future. On executing the preceding command, you will find `build.gradle`,
    `settings.gradle`, and Gradle wapper files created in the project directory. The
    auto-generated `build.gradle` file has the following content. It automatically
    adds plugin details, and group and version information.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，从Maven到Gradle是一个孵化特性。当前的DSL和其他配置可能在将来发生变化。执行前面的命令后，你将在项目目录中找到`build.gradle`、`settings.gradle`和Gradle包装文件。自动生成的`build.gradle`文件包含以下内容。它自动添加插件详情，以及组和版本信息。
- en: 'The content of a system-generated build file is shown in the following code
    snippet:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 系统生成的构建文件内容如下所示（以下代码片段）：
- en: '[PRE56]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This plugin also supports multiproject build, repository configuration, dependency
    management, and a lot of other features.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件还支持多项目构建、仓库配置、依赖管理以及许多其他功能。
- en: Summary
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed migration to Gradle from Ant and Maven. This is
    a very common scenario in any organization where the existing build script is
    written in Ant or Maven and it is trying to upgrade to Gradle. This chapter gives
    some analysis and different approaches, which might help to plan the Gradle migration
    in a better and more organized way.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了从Ant和Maven迁移到Gradle的过程。这在任何组织中都是一个非常常见的场景，其中现有的构建脚本是用Ant或Maven编写的，并且正在尝试升级到Gradle。本章提供了一些分析和不同的方法，这些方法可能有助于更好地、更有组织地规划Gradle迁移。
- en: In the next chapter, we will discuss the deployment aspect of build automation
    with Docker.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论使用Docker构建自动化的部署方面。
