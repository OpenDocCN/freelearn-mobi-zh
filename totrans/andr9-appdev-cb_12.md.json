["```kt\n<Button\n    android:id=\"@+id/button1\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Button\"\n    android:onClick=\"playSound1\"/>\n<Button\n    android:id=\"@+id/button2\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Button\"\n    android:onClick=\"playSound2\"\n    app:layout_constraintTop_toBottomOf=\"@+id/button1\"/>\n```", "```kt\nHashMap<Integer, Integer> mHashMap= null;\nSoundPool mSoundPool;\n```", "```kt\nfinal Button button1 = findViewById(R.id.button1);\nbutton1.setEnabled(false);\nfinal Button button2 = findViewById(R.id.button2);\nbutton2.setEnabled(false);\n\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    createSoundPoolNew();\n} else {\n    createSoundPoolOld();\n}\nmSoundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {\n    @Override\n    public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {\n        button1.setEnabled(true);\n        button2.setEnabled(true);\n    }\n});\nmHashMap = new HashMap<>();\nmHashMap.put(1, mSoundPool.load(this, R.raw.sound_1, 1));\nmHashMap.put(2, mSoundPool.load(this, R.raw.sound_2, 1));\n```", "```kt\n@TargetApi(Build.VERSION_CODES.LOLLIPOP)\nprivate void createSoundPoolNew() {\n    AudioAttributes audioAttributes = new AudioAttributes.Builder()\n            .setUsage(AudioAttributes.USAGE_MEDIA)\n            .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\n            .build();\n    mSoundPool = new SoundPool.Builder()\n            .setAudioAttributes(audioAttributes)\n            .setMaxStreams(2)\n            .build();\n}\n```", "```kt\n@SuppressWarnings(\"deprecation\")\nprivate void createSoundPoolOld(){\n    mSoundPool = new SoundPool(2, AudioManager.STREAM_MUSIC, 0);\n}\n```", "```kt\npublic void playSound1(View view){\n    mSoundPool.play(mHashMap.get(1), 0.1f, 0.1f, 1, 0, 1.0f);\n}\npublic void playSound2(View view){\n    mSoundPool.play(mHashMap.get(2), 0.9f, 0.9f, 1, 1, 1.0f);\n}\n```", "```kt\n@Override\nprotected void onStop() {\n    mSoundPool.release();\n    super.onStop();\n}\n```", "```kt\nAudioManager audioManager =(AudioManager)\nthis.getSystemService(Context.AUDIO_SERVICE);\naudioManager.playSoundEffect(SoundEffectConstants.CLICK);\n```", "```kt\n<Button\n    android:id=\"@+id/buttonPlay\"\n    android:layout_width=\"100dp\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Play\"\n    android:onClick=\"buttonPlay\" />\n<Button\n    android:text=\"Pause\"\n    android:layout_width=\"100dp\"\n    android:layout_height=\"wrap_content\"\n    android:id=\"@+id/buttonPause\"\n    android:onClick=\"buttonPause\"\n    app:layout_constraintTop_toBottomOf=\"@+id/buttonPlay\"/>\n<Button\n    android:text=\"Stop\"\n    android:layout_width=\"100dp\"\n    android:layout_height=\"wrap_content\"\n    android:id=\"@+id/buttonStop\"\n    android:onClick=\"buttonStop\"\n    app:layout_constraintTop_toBottomOf=\"@+id/buttonPause\"/>\n```", "```kt\nMediaPlayer mMediaPlayer;\n```", "```kt\npublic void buttonPlay(View view){\n    if (mMediaPlayer==null) {\n        mMediaPlayer = MediaPlayer.create(this, R.raw.sound_1);\n        mMediaPlayer.setLooping(true);\n        mMediaPlayer.start();\n    } else  {\n        mMediaPlayer.start();\n    }\n}\n```", "```kt\npublic void buttonPause(View view){\n    if (mMediaPlayer!=null && mMediaPlayer.isPlaying()) {\n        mMediaPlayer.pause();\n    }\n}\n```", "```kt\npublic void buttonStop(View view){\n    if (mMediaPlayer!=null) {\n        mMediaPlayer.stop();\n        mMediaPlayer.release();\n        mMediaPlayer = null;\n    }\n}\n```", "```kt\n@Override\nprotected void onStop() {\n    super.onStop();\n    if (mMediaPlayer!=null) {\n        mMediaPlayer.release();\n        mMediaPlayer = null;\n    }\n}\n```", "```kt\nmMediaPlayer = new MediaPlayer();\nmMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n    @Override\n    public void onPrepared(MediaPlayer mp) {\n        mMediaPlayer.start();\n    }\n});\ntry {\n    mMediaPlayer.setDataSource(/*URI, URL or path here*/));\n} catch (IOException e) {\n    e.printStackTrace();\n}\nmMediaPlayer.prepareAsync();\n```", "```kt\nsetVolumeControlStream(AudioManager.STREAM_MUSIC);\n```", "```kt\nimplementation 'com.android.support:support-v13:28.0.0-rc02'\n```", "```kt\nMediaSessionCompat.Callback mMediaSessionCallback = new MediaSessionCompat.Callback() {\n    @Override\n    public void onPlay() {\n        super.onPlay();\n        Toast.makeText(MainActivity.this, \"onPlay()\", Toast.LENGTH_SHORT).show();\n    }\n    @Override\n    public void onPause() {\n        super.onPause();\n        Toast.makeText(MainActivity.this, \"onPause()\", Toast.LENGTH_SHORT).show();\n    }\n    @Override\n    public void onSkipToNext() {\n        super.onSkipToNext();\n        Toast.makeText(MainActivity.this, \"onSkipToNext()\", Toast.LENGTH_SHORT).show();\n    }\n    @Override\n    public void onSkipToPrevious() {\n        super.onSkipToPrevious();\n        Toast.makeText(MainActivity.this, \"onSkipToPrevious()\", Toast.LENGTH_SHORT).show();\n    }\n};\n```", "```kt\nMediaSessionCompat mediaSession = \n        new MediaSessionCompat(this, getApplication().getPackageName());\nmediaSession.setCallback(mMediaSessionCallback);\nmediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS);\nmediaSession.setActive(true);\nPlaybackStateCompat state = new PlaybackStateCompat.Builder()\n        .setActions(PlaybackStateCompat.ACTION_PLAY |\n                PlaybackStateCompat.ACTION_PLAY_PAUSE |\n                PlaybackStateCompat.ACTION_PAUSE |\n                PlaybackStateCompat.ACTION_SKIP_TO_NEXT |\n                PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS).build();\nmediaSession.setPlaybackState(state);\n```", "```kt\nAudioManager audioManager =(AudioManager) this.getSystemService(Context.AUDIO_SERVICE);\nif (audioManager.isBluetoothA2dpOn()) {\n    // Adjust output for Bluetooth.\n} else if (audioManager.isSpeakerphoneOn()) {\n    // Adjust output for Speakerphone.\n} else if (audioManager.isWiredHeadsetOn()) {\n    //Only checks if a wired headset is plugged in\n    //May not be the audio output\n} else {\n    // Regular speakers?\n}\n```", "```kt\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n```", "```kt\n<android.support.v7.widget.AppCompatImageView\n android:id=\"@+id/imageView\"\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:src=\"img/ic_launcher\"\n app:layout_constraintTop_toTopOf=\"parent\"\n app:layout_constraintLeft_toLeftOf=\"parent\"\n app:layout_constraintRight_toRightOf=\"parent\" />\n<android.support.v7.widget.AppCompatButton\n android:id=\"@+id/button\"\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:text=\"Take Picture\"\n android:onClick=\"takePicture\"\n app:layout_constraintBottom_toBottomOf=\"parent\"\n app:layout_constraintLeft_toLeftOf=\"parent\"\n app:layout_constraintRight_toRightOf=\"parent\"/>\n```", "```kt\nfinal int PHOTO_RESULT=1;\nprivate Uri mLastPhotoURI=null;\n```", "```kt\nprivate Uri createFileURI() {\n    String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\")\n            .format(System.currentTimeMillis());\n    String fileName = \"PHOTO_\" + timeStamp + \".jpg\";\n    return Uri.fromFile(new File(Environment\n            .getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),fileName));\n}\n```", "```kt\npublic void takePicture(View view) {\n    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\n        mLastPhotoURI = createFileURI();\n        takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, mLastPhotoURI);\n        startActivityForResult(takePictureIntent, PHOTO_RESULT);\n    }\n}\n```", "```kt\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if (requestCode == PHOTO_RESULT && resultCode == RESULT_OK ) {\n        AppCompatImageView imageView = findViewById(R.id.imageView);\n        imageView.setImageBitmap(BitmapFactory.decodeFile(mLastPhotoURI.getPath()));\n    }\n}\n```", "```kt\nStrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();\nStrictMode.setVmPolicy(builder.build());\n\nif (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) \n        != PackageManager.PERMISSION_GRANTED ) {\n    ActivityCompat.requestPermissions(this, \n            new String[] {Manifest.permission.READ_EXTERNAL_STORAGE},0);\n}\n```", "```kt\nif (data != null) {\n    imageView.setImageBitmap((Bitmap) data.getExtras().get(“data”));\n}\n```", "```kt\nif (data != null) {\n    try {\n        imageView.setImageBitmap(\n            MediaStore.Images.Media. getBitmap(getContentResolver(),\n            Uri.parse(data.toUri(Intent.URI_ALLOW_UNSAFE))));\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```", "```kt\nIntent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n```", "```kt\nUri videoUri = intent.getData();\n```", "```kt\n<uses-permission android:name=\"android.permission.CAMERA\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```", "```kt\n<TextureView\n    android:id=\"@+id/textureView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    app:layout_constraintTop_toTopOf=\"parent\"\n    app:layout_constraintBottom_toTopOf=\"@+id/button\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\" />\n<android.support.v7.widget.AppCompatButton\n    android:id=\"@+id/button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Take Picture\"\n    android:onClick=\"takePictureClick\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"/>\n```", "```kt\nprivate CameraDevice mCameraDevice = null;\nprivate CaptureRequest.Builder mCaptureRequestBuilder = null;\nprivate CameraCaptureSession mCameraCaptureSession  = null;\nprivate TextureView mTextureView = null;\nprivate Size mPreviewSize = null;\n```", "```kt\nstatic class CompareSizesByArea implements Comparator<Size> {\n    @Override\n    public int compare(Size lhs, Size rhs) {\n        return Long.signum((long) lhs.getWidth() * lhs.getHeight() \n                - (long) rhs.getWidth() * rhs.getHeight());\n    }\n}\n```", "```kt\nprivate CameraCaptureSession.StateCallback mPreviewStateCallback = new CameraCaptureSession.StateCallback() {\n    @Override\n    public void onConfigured(CameraCaptureSession session) {\n        startPreview(session);\n    }\n    @Override\n    public void onConfigureFailed(CameraCaptureSession session) {}\n};\n```", "```kt\nprivate TextureView.SurfaceTextureListener mSurfaceTextureListener =\n        new TextureView.SurfaceTextureListener() {\n            @Override\n            public void onSurfaceTextureUpdated(SurfaceTexture     \n            surface)                        \n            {\n            }\n            @Override\n            public void onSurfaceTextureSizeChanged(\n                    SurfaceTexture surface, int width, int height) {\n            }\n            @Override\n            public boolean onSurfaceTextureDestroyed(SurfaceTexture \n            surface) {\n                return false;\n            }\n            @Override\n            public void onSurfaceTextureAvailable(\n                    SurfaceTexture surface, int width, int height) {\n                openCamera();\n            }\n        };\n```", "```kt\nprivate CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {\n    @Override\n    public void onOpened(CameraDevice camera) {\n        mCameraDevice = camera;\n        SurfaceTexture texture = mTextureView.getSurfaceTexture();\n        if (texture == null) {\n            return;\n        }\n        texture.setDefaultBufferSize(mPreviewSize.getWidth(), \n        mPreviewSize.getHeight());\n        Surface surface = new Surface(texture);\n        try {\n            mCaptureRequestBuilder = mCameraDevice\n\n        .createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);\n        } catch (CameraAccessException e){\n            e.printStackTrace();\n        }\n        mCaptureRequestBuilder.addTarget(surface);\n        try {\n            mCameraDevice.createCaptureSession(Arrays\n                    .asList(surface), mPreviewStateCallback, null);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n    @Override\n    public void onError(CameraDevice camera, int error) {}\n    @Override\n    public void onDisconnected(CameraDevice camera) {}\n};\n```", "```kt\nfinal CameraCaptureSession.CaptureCallback mCaptureCallback = \n        new CameraCaptureSession.CaptureCallback() {\n    @Override\n    public void onCaptureCompleted(CameraCaptureSession session,  \n     CaptureRequest request,                                  \n     TotalCaptureResult result) {\n        super.onCaptureCompleted(session, request, result);\n        Toast.makeText(MainActivity.this, \"Picture Saved\", \n        Toast.LENGTH_SHORT).show();\n        startPreview(session);\n    }\n};\n```", "```kt\nmTextureView = findViewById(R.id.textureView);\nmTextureView.setSurfaceTextureListener(mSurfaceTextureListener);\n\nif(ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA) \n        != PackageManager.PERMISSION_GRANTED) {\n    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CAMERA}, 1);\n}\n```", "```kt\n@Override\nprotected void onPause() {\n    super.onPause();\n    if (mCameraDevice != null) {\n        mCameraDevice.close();\n        mCameraDevice = null;\n    }\n}\n@Override\npublic void onResume() {\n    super.onResume();\n    if (mTextureView.isAvailable()) {\n        openCamera();\n    } else {\n        mTextureView.setSurfaceTextureListener(\n             mSurfaceTextureListener);\n    }\n}\n```", "```kt\nprivate void openCamera() {\n    CameraManager manager = (CameraManager) getSystemService(CAMERA_SERVICE);\n    try{\n        String cameraId = manager.getCameraIdList()[0];\n        CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);\n        StreamConfigurationMap map = characteristics\n                .get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\n        mPreviewSize = map.getOutputSizes(SurfaceTexture.class) [0];\n        manager.openCamera(cameraId, mStateCallback, null);\n    } catch(CameraAccessException e) {\n        e.printStackTrace();\n    } catch (SecurityException e) {\n        e.printStackTrace();\n    }\n}\n```", "```kt\nprivate void startPreview(CameraCaptureSession session) {\n    mCameraCaptureSession = session;\n    mCaptureRequestBuilder.set(CaptureRequest.CONTROL_MODE, \n    CameraMetadata.CONTROL_MODE_AUTO);\n    HandlerThread backgroundThread = new \n    HandlerThread(\"CameraPreview\");\n    backgroundThread.start();\n    Handler backgroundHandler = new Handler(backgroundThread. \n    getLooper());\n    try {\n        mCameraCaptureSession\n                .setRepeatingRequest(mCaptureRequestBuilder.build(), \n    null, backgroundHandler);\n    } catch (CameraAccessException e) {\n        e.printStackTrace();\n    }\n}\n```", "```kt\nprivate File getPictureFile() {\n    String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\")\n            .format(System.currentTimeMillis());\n    String fileName = \"PHOTO_\" + timeStamp + \".jpg\";\n    return new File(Environment\n            .getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),fileName);\n}\n```", "```kt\nprivate void saveImage(ImageReader reader) {\n    Image image = null;\n    try {\n        image = reader.acquireLatestImage();\n        ByteBuffer buffer = image.getPlanes()[0].getBuffer();\n        byte[] bytes = new byte[buffer.capacity()];\n        buffer.get(bytes);\n        OutputStream output = new FileOutputStream(getPictureFile());\n        output.write(bytes);\n        output.close();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (image != null) {\n            image.close();\n        }\n    }\n}\n```", "```kt\npublic void takePictureClick(View view) {\n    if (null == mCameraDevice) {\n        return;\n    }\n    takePicture();\n}\n```", "```kt\nprivate void takePicture() {\n    CameraManager manager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);\n    try {\n        CameraCharacteristics characteristics = manager\n                .getCameraCharacteristics(mCameraDevice.getId());\n        StreamConfigurationMap configurationMap = characteristics\n\n       .get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\n        if (configurationMap == null) return;\n        Size largest = Collections.max(Arrays.asList(configurationMap\n                .getOutputSizes(ImageFormat.JPEG)), new \n        CompareSizesByArea());\n        ImageReader reader = ImageReader\n                .newInstance(largest.getWidth(), largest.getHeight(), \n        ImageFormat.JPEG, 1);\n        List<Surface> outputSurfaces = new ArrayList<>(2);\n        outputSurfaces.add(reader.getSurface());\n        outputSurfaces.add(new \n        Surface(mTextureView.getSurfaceTexture()));\n        final CaptureRequest.Builder captureBuilder = mCameraDevice\n\n        .createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);\n        captureBuilder.addTarget(reader.getSurface());\n        captureBuilder.set(CaptureRequest.CONTROL_MODE, \n        CameraMetadata.CONTROL_MODE_AUTO);\n        ImageReader.OnImageAvailableListener readerListener =\n                new ImageReader.OnImageAvailableListener() {\n            @Override\n            public void onImageAvailable(ImageReader reader) {\n                saveImage(reader);\n            }\n        };\n        HandlerThread thread = new HandlerThread(\"CameraPicture\");\n        thread.start();\n        final Handler backgroundHandler = new \n        Handler(thread.getLooper());\n        reader.setOnImageAvailableListener(readerListener, \n        backgroundHandler);\n        mCameraDevice.createCaptureSession(outputSurfaces,\n                new CameraCaptureSession.StateCallback() {\n                    @Override\n                    public void onConfigured(CameraCaptureSession \n                    session) {\n                        try {\n                            session.capture(captureBuilder.build(),\n                                    mCaptureCallback, \n                       backgroundHandler);\n                        } catch (CameraAccessException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    @Override\n                    public void onConfigureFailed(CameraCaptureSession \n                   session) { }\n                }, backgroundHandler);\n    } catch (CameraAccessException e) {\n        e.printStackTrace();\n    }\n```"]