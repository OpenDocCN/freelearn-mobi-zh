["```swift\ntypedef void (^FBRequestHandler)(\nFBRequestConnection *connection,\nid result,\nNSError *error);\n```", "```swift\n- (void)fetchUserInfoWithGraphApi\n{\n    [FBRequestConnection startForMeWithCompletionHandler:^(FBRequestConnection *connection, id result, NSError *error) {\n        if (error) {\n            NSString *title = @\"Graph API Error\";\n            NSString *message = @\"Error retrieving user information through Graph API\";\n            UIAlertView *errorGraphAPIMessage = [[UIAlertView alloc] initWithTitle:title\n                                                                              message:message\n                                                                             delegate:nil\n                                                                    cancelButtonTitle:nil\n                                                                    otherButtonTitles:@\"OK\", nil];\n            [errorGraphAPIMessage show];\n        } else {\n            NSLog(@\"User information: %@\", result);\n        }\n    }];\n}\n```", "```swift\n- (void)fetchUserFriendsListWithGraphAPI\n{\n    [FBRequestConnection startForMyFriendsWithCompletionHandler:^(FBRequestConnection *connection, id result, NSError *error) {\n        if (error) {\n            NSString *title = @\"Graph API Error\";\n            NSString *message = @\"Error retrieving user friends list through Graph API\";\n            UIAlertView *errorGraphAPIMessage = [[UIAlertView alloc] initWithTitle:title\n                                                                           message:message\n                                                                          delegate:nil\n                                                                 cancelButtonTitle:nil\n                                                                 otherButtonTitles:@\"OK\", nil];\n            [errorGraphAPIMessage show];\n        } else {\n            NSLog(@\"Friends information: %@\", result);\n        }\n    }];\n}\n```", "```swift\n- (void)fetchUserPhotosWithGraphApi\n{\n    // Ask for user_photos permissions\n    NSString *permission = @\"user_photos\";\n    if ([FBSession.activeSession.permissions indexOfObject:permission] == NSNotFound) {\n        [FBSession.activeSession requestNewReadPermissions:[NSArray arrayWithObject:permission]\n                                         completionHandler:^(FBSession *session, NSError *error) {\n            if (!error) {\n                [self fetchUserPhotos];\n            } else {\n                if (error.fberrorCategory == FBErrorCategoryUserCancelled) {\n                    NSString *title = @\"Permission Error\";\n                    NSString *message = @\"User Photos Permission was not granted\";\n                    UIAlertView *errorGraphAPIMessage = [[UIAlertView alloc] initWithTitle:title\n                                                                                   message:message\n                                                                                  delegate:nil\n                                                                         cancelButtonTitle:nil\n                                                                         otherButtonTitles:@\"OK\", nil];\n                    [errorGraphAPIMessage show];\n                }\n            }\n        }];\n    } else { // If permissions present, fetch photos\n        [self fetchUserPhotos];\n    }\n}\n```", "```swift\n- (void)fetchUserPhotos\n{\n    [FBRequestConnection startWithGraphPath:@\"/me/photos\"\n                          completionHandler:^(FBRequestConnection *connection, id result, NSError *error) {\n        if (error) {\n            NSString *title = @\"Graph API Error\";\n            NSString *message = @\"Error retrieving user photos through Graph API\";\n            UIAlertView *errorGraphAPIMessage = [[UIAlertView alloc] initWithTitle:title\n                                                                           message:message\n                                                                          delegate:nil\n                                                                 cancelButtonTitle:nil\n                                                                 otherButtonTitles:@\"OK\", nil];\n            [errorGraphAPIMessage show];\n        } else {\n            NSLog(@\"User photos information: %@\", result);\n        }\n    }];\n}\n```", "```swift\n- (void)postStatusUpdateUsingGraphAPI\n{\n    // Ask for post update permissions\n    NSString *permission = @\"user_photos\";\n    if ([FBSession.activeSession.permissions indexOfObject:permission] == NSNotFound) {\n        [FBSession.activeSession requestNewPublishPermissions:[NSArray arrayWithObject:permission]\n                                              defaultAudience:FBSessionDefaultAudienceFriends\n                                            completionHandler:^(FBSession *session, NSError *error) {\n                                                if (!error) {\n                                                    [self postStatusUpdate];\n                                                } else {\n                                                    if (error.fberrorCategory == FBErrorCategoryUserCancelled) {\n                                                        NSString *title = @\"Permission Error\";\n                                                        NSString *message = @\"Publish Action Permission was not granted\";\n                                                        UIAlertView *errorGraphAPIMessage = [[UIAlertView alloc] initWithTitle:title\n                                                                                                                       message:message\n                                                                                                                      delegate:nil\n                                                                                                             cancelButtonTitle:nil\n                                                                                                             otherButtonTitles:@\"OK\", nil];\n                                                        [errorGraphAPIMessage show];\n                                                    }\n                                                }\n                                            }];\n    } else { // If permissions present, publish the story\n        [self postStatusUpdate];\n    }\n}\n```", "```swift\n- (void)postStatusUpdate\n{\n    [FBRequestConnection startForPostStatusUpdate:@\"Posting my update through my new app!\"\n                                completionHandler:^(FBRequestConnection *connection, id result, NSError *error) {\n\n        NSString *title = @\"Graph API Success\";\n        NSString *message = @\"Status Update posted\";\n\n        if (error) {\n            title = @\"Graph API Error\";\n            message = @\"Error posting update through Graph API\";\n        } else {\n            NSLog(@\"Post information: %@\", result);\n        }\n\n        UIAlertView *graphAPIMessage = [[UIAlertView alloc] initWithTitle:title\n                                                                  message:message\n                                                                 delegate:nil\n                                                        cancelButtonTitle:nil\n                                                        otherButtonTitles:@\"OK\", nil];\n        [graphAPIMessage show];\n    }];\n}\n```", "```swift\n- (void)postPictureUsingGraphAPI\n{\n    // Ask for post picture permission\n    NSString *permission = @\"photo_upload\";\n    if ([FBSession.activeSession.permissions indexOfObject:permission] == NSNotFound) {\n        [FBSession.activeSession requestNewPublishPermissions:[NSArray arrayWithObject:permission]\n                                              defaultAudience:FBSessionDefaultAudienceFriends\n                                            completionHandler:^(FBSession *session, NSError *error) {\n                                                if (!error) {\n                                                    [self postPhoto];\n                                                } else {\n                                                    if (error.fberrorCategory == FBErrorCategoryUserCancelled) {\n                                                        NSString *title = @\"Permission Error\";\n                                                        NSString *message = @\"Upload Photo Permission was not granted\";\n                                                        UIAlertView *errorGraphAPIMessage = [[UIAlertView alloc] initWithTitle:title\n                                                                                                                       message:message\n                                                                                                                      delegate:nil\n                                                                                                             cancelButtonTitle:nil\n                                                                                                             otherButtonTitles:@\"OK\", nil];\n                                                        [errorGraphAPIMessage show];\n                                                     }\n                                                }\n                                            }];\n    } else { // If permissions present, upload the photo\n        [self postPhoto];\n    }\n}\n```", "```swift\n- (void)postPhoto\n{\n    // You can get an img from any source: camera or image library\n    UIImage *img = [UIImage imageNamed:@\"book.jpg\"];\n    [FBRequestConnection startForUploadPhoto:img\n                           completionHandler:^(FBRequestConnection *connection, id result, NSError *error) {\n                               NSString *title = @\"Graph API Success\";\n                               NSString *message = @\"Picture uploaded\";\n\n                               if (error) {\n                                   title = @\"Graph API Error\";\n                                   message = @\"Error uplaoding picture through Graph API\";\n                               } else {\n                                   NSLog(@\"Picture posted information: %@\", result);\n                               }\n\n                               UIAlertView *graphAPIMessage = [[UIAlertView alloc] initWithTitle:title\n                                                                                         message:message\n                                                                                        delegate:nil\n                                                                               cancelButtonTitle:nil\n                                                                               otherButtonTitles:@\"OK\", nil];\n                               [graphAPIMessage show];\n    }];\n}\n```"]