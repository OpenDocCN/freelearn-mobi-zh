- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing In-App Purchases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in [*Chapter 7*](B18868_07.xhtml#_idTextAnchor232), *Advertising
    Using Unity Ads*, there are many options out there when it comes to selling your
    game on a mobile platform. If you decide to go free-to-play, in addition to showing
    ads, there is also the ability to sell people additional content and/or advantages
    through the use of **In-App Purchases** (**IAPs**). This can be a way to engage
    users of your game and convert them from free players into paying customers.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, these can be options such as removing ads or offering themes to players,
    but you can also do things such as unlock new levels and add additional content
    so that people addicted to your game will be clamoring to give you more of their
    time. Alternatively, you can also think of your IAPs as items that players will
    want to buy in order to enhance their gameplay experiences, such as power-ups
    and upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will integrate Unity’s IAP system into our project and take
    a look at how to create an IAP that is for consumable content as well as permanently
    unlocking features. By the end of the chapter, we will see how to set up Unity’s
    IAP system and create our first possible purchasable item, and then we will see
    how to restore purchases on certain devices before seeing additional resources
    for the various app stores that exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is split into a number of topics. It contains a simple step-by-step
    process from beginning to end. The following is the outline of our tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Unity IAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first purchase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a button to restore purchases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring purchases for the stores of your choice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the *Unity Editor system* *requirements* section.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Unity IAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity IAP is a service that allows us to sell a variety of different items
    to players within our game projects and is currently supported by the iOS App
    Store, Mac App Store, Google Play, Windows Store, Amazon Appstore, and more, by
    default. So, using this, we can easily sell our items in many different places.
    We have already set up Unity Services in [*Chapter 7*](B18868_07.xhtml#_idTextAnchor232),
    *Advertising Using Unity Ads*, so this will be a lot easier to get going. Perform
    the following steps to add Unity IAP:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Services** window by going to **Window** | **Package Manager**, and
    then click on the **Services** button on the top toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From there, scroll down to the **In App Purchasing** item and then click on
    the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.1: The In App Purchasing option from Package Manager](img/B18868_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: The In App Purchasing option from Package Manager'
  prefs: []
  type: TYPE_NORMAL
- en: A window will pop up asking for you to confirm that you would like to activate
    the **Purchasing** service package. Click on the **Ok** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2: Activating the Purchasing service](img/B18868_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Activating the Purchasing service'
  prefs: []
  type: TYPE_NORMAL
- en: Once completed, you can close out of **Package Manager** and then go into the
    **Project Settings** menu by going to **Edit** | **Project Settings** and then
    going to the **Services** section. If all went well, you should see an **In-App
    Purchases** menu section. Select it and you should notice that it has been toggled
    on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The IAP package is created externally from the main engine itself because the
    code is meant to be extremely flexible and can be updated to fit any policies
    that are needed. We can then just update the package instead of having to update
    it to the latest version of Unity, which can be very important when working on
    a large project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3: In-App Purchases are enabled](img/B18868_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: In-App Purchases are enabled'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the IAP system brought into our project, we can now utilize
    it to create our first purchasable object for our players.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first purchase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make our first in-app purchase, we will make use of a feature of Unity that
    was just added to our project, Codeless IAP. It is called Codeless IAP because
    you do not need to write any code for the actual IAP transaction, just the script
    that defines what users get if they make a purchase. It’s by far the easiest way
    to integrate IAPs into Unity games and a great way to start trying out IAPs in
    our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most common IAPs is the ability to disable advertisements in mobile
    games. Using the following steps, let’s add that functionality by creating a button
    that, when clicked, will disable advertisements:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up our Main Menu level by going to the `Assets/Scenes` folder, and then
    double-clicking on the `MainMenu` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From there, return to the **Scene** window if not there already, and then click
    on the **2D** button to go into 2D mode since we’ll be working with the UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will first need to have something to sell and to do that, we will use the
    IAP Catalog, which we can access by going to **Services** | **In-App Purchasing**
    | **IAP Catalog…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4: Opening the IAP Catalog](img/B18868_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Opening the IAP Catalog'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we get to the menu, it should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5: The IAP Catalog](img/B18868_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: The IAP Catalog'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the first thing we’ll need to do is create an ID for our product, which
    is how we will identify our product in different app stores. In our case, let’s
    go with `removeAds`. Then, under **Type**, change it to **Non Consumable**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6: Creating an IAP](img/B18868_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Creating an IAP'
  prefs: []
  type: TYPE_NORMAL
- en: By non-consumable, we mean that the players only need to buy this once, and
    the game will keep that in mind for later. The others are consumable, meaning
    that they are used for things that can be bought over and over again, such as
    special power-ups and subscriptions. These give access to some kind of content
    for a period of time, possibly recurring until a user cancels them.
  prefs: []
  type: TYPE_NORMAL
- en: 4. Next, we can close out of **IAP Catalog** by clicking on **X** in the top-right
    corner of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '5. Select the **Canvas - Scale Physical** object in the **Hierarchy** window.
    From there, select **Services** | **In-App Purchasing** | **Create IAP Button**,
    and we should see a new button created in our scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7: Creating an IAP button](img/B18868_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: Creating an IAP button'
  prefs: []
  type: TYPE_NORMAL
- en: This button will be used to perform an IAP to remove the ads in the game. The
    button currently uses Unity’s legacy text system, but it can easily be adjusted
    to use `TextMeshPro` if you’d like.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that both the **Start** and **Remove Ads** buttons show up correctly
    on the screen, we will create a menu that can hold both of them. This means creating
    another panel as a child of our Safe Area panel.
  prefs: []
  type: TYPE_NORMAL
- en: From the `SafeAreaHolder`.
  prefs: []
  type: TYPE_NORMAL
- en: 6. Afterward, create a child `SafeAreaHolder` and have it fill the entire screen
    as done before. Add a `10`.
  prefs: []
  type: TYPE_NORMAL
- en: 7. Then, add a **Content Size Fitter** component and set the **Vertical Fit**
    and **Horizontal Fit** fields to **Preferred Size**.
  prefs: []
  type: TYPE_NORMAL
- en: 8. Rename the newly added button `Remove Ads Button` and then add a `10` and
    at the `Remove` `Ads` instead.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For a reminder on what these instructions mean and what each step does, check
    out [*Chapter 4*](B18868_04.xhtml#_idTextAnchor165), *Resolution-Independent UI*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, drag and drop the two buttons onto the **Panel** object, with the
    **Play** button in the top half and the **Remove Ads** button below it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8: The Remove Ads button added to the scene](img/B18868_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: The Remove Ads button added to the scene'
  prefs: []
  type: TYPE_NORMAL
- en: Next, with the `IAP Button` class has an **On Purchase Complete (Product)**
    function, which works similarly to **On Click** as we’ve used with **Button**
    components in the past. With that in mind, we will need to create a function that
    we would like to call when the player presses the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B18868_07.xhtml#_idTextAnchor232)*,* *Advertising Using Unity
    Ads*, we created a `static` variable inside the `UnityAdController` class called
    `showAds`. We will use this variable to check whether we should show ads.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to open up the `MainMenuBehaviour` script and add the following
    functions to the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using Unity’s `PlayerPrefs` system in order to save whether a player
    should be shown ads or not. `PlayerPrefs` is cool because it saves information
    between playthroughs of the game and is used often for things such as high scores
    and player preferences (hence the name). To reset the properties for testing,
    you can go to `PlayerPrefs` may be removed if the app is uninstalled or if the
    app’s data is cleared, so we will later add a **Restore Purchases** button that
    will allow the players to restore their purchases on platforms that allow it.
    For platforms that don’t, you’ll want to make an API call to the server to check
    whether the current user has already purchased the non-consumable IAP item. More
    details on this will be covered in the *Adding a button to restore purchases*
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on PlayerPrefs, check out [https://docs.unity3d.com/ScriptReference/PlayerPrefs.html](https://docs.unity3d.com/ScriptReference/PlayerPrefs.html).
  prefs: []
  type: TYPE_NORMAL
- en: Note that I made the `Start` function `virtual`, which means that inherited
    classes can also use this as a foundation for their own scripts. We also marked
    the function as `protected`, which works the same as a `private` function but
    it also is accessible in child classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in mind, we will also need to update the `Start` function of `PauseScreenBehaviour`
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `override` keyword will replace the default behavior of `Start`. However,
    when we call `base.Start()`, we are ensuring that the preceding content from `MainMenuBehaviour`
    will be called—in this case, we ensure that `UnityAdController` has the correct
    value set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will need to adjust the `ObstacleBehaviour` script to handle not
    playing ads as well. Update the `ShowContinue` function to use the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also need to make a slight adjustment to the `ResetGame` method by
    removing or commenting out the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script and dive into Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the `Main Menu` object to the little box below the **Runtime Only** dropdown.
    Then, select **Main Menu Behaviour** | **DisableAds** from the dropdown to the
    right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.9: Adding the DisableAds function call to Purc\uFEFFhase](img/B18868_06_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: Adding the DisableAds function call to Purchase'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, save our scene and start the game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10: The purchase menu appears to work correctly](img/B18868_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: The purchase menu appears to work correctly'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we click on the **Remove Ads** button, it will ask whether we want
    to make the purchase. If we do, it will then make it so that when we go into the
    game, there are no ads. Likewise, now when we die, it will display a **Free**
    **Continue** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11: Making sure the purchase works correctly](img/B18868_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: Making sure the purchase works correctly'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we now have created a simple purchase in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in learning more about Codeless IAP, checkout [https://docs.unity3d.com/Manual/UnityIAPCodelessIAP.html](https://docs.unity3d.com/Manual/UnityIAPCodelessIAP.html).
  prefs: []
  type: TYPE_NORMAL
- en: With this, you can now build as many products as you’d like to have in your
    game. However, certain platforms also have requirements with regard to the functionality
    to restore previous purchases. In the next section, we will see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to restore purchases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On platforms that support it (Google Play and Universal Windows Applications,
    most notably), if you purchase something, uninstall, and then reinstall a game
    using Unity IAP, it automatically restores any products the user owned during
    the first initialization following reinstallation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those on iOS, users must have the ability to restore their purchases via
    a button due to Apple requiring them to reauthenticate their password beforehand.
    Not doing so will prevent our game from being accepted on the iOS App Store, so
    it’s a good idea to include this functionality if we wish to deploy it there.
    Let’s look at the steps to do just that:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Hierarchy** window and select the **Remove Ads Button** object.
    Once selected, duplicate it by pressing *Ctrl +* *D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the duplicate’s name by selecting it and changing its name to `Restore
    Button` in the **Inspector** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Restore Purchases` as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, select the **Restore** object, and then, in the **IAP Button** component,
    go to **Button Type** and select **Restore**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12: Adding the Restore button](img/B18868_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: Adding the Restore button'
  prefs: []
  type: TYPE_NORMAL
- en: You should note that the properties of the **IAP Button** component have changed
    and now only allow you to set **Button Type**, as there is nothing left to customize.
  prefs: []
  type: TYPE_NORMAL
- en: Save your scene and jump into Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you start the game and try to click on **Restore**, you’ll get a warning
    in the **Console** window stating that this isn’t a supported platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13: Warning upon trying to restore on Windows](img/B18868_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.13: Warning upon trying to restore on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: So, with that in mind, we can adjust our game so that the button will only show
    up if we are currently running on a supported platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `Scripts` folder and create a C# script called `RestoreAdsChecker`.
    Once it opens, use the following script for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script goes through all of the stores listed in Unity’s `IAPButton` class,
    and if they are something that can be restored, we set `canRestore` to `true`;
    otherwise, it will stay `false`. Finally, we will remove the object if we cannot
    restore it, without having to create specific things for different builds.
  prefs: []
  type: TYPE_NORMAL
- en: Save the script and dive back into Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach our newly created `RestoreAdsChecker` component to our **Restore** **Button**
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.14: Adding the Restore Ads Checke\uFEFFr component](img/B18868_06_14.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: Adding the Restore Ads Checker component'
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your project and start up the game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.15: The result of the RestoreAdsChecker component](img/B18868_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: The result of the RestoreAdsChecker component'
  prefs: []
  type: TYPE_NORMAL
- en: Now, due to the **RestoreAdsChecker** component that we added on our PC build
    of the game, the **Restore** button doesn’t show up, but if we export for iOS,
    it will show up on our device!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on restoring transactions and how this functionally works,
    check out [https://docs.unity3d.com/Manual/UnityIAPRestoringTransactions.html](https://docs.unity3d.com/Manual/UnityIAPRestoringTransactions.html).
  prefs: []
  type: TYPE_NORMAL
- en: This ensures that our game has this particular feature on each of the different
    platforms that support it. With that in mind, we will next look at some of the
    specific stores and places you may wish to add support for IAPs in your game.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring purchases for the stores of your choice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unfortunately, we do not have enough room in the book to go step by step through
    the process for every store, but I do have pages that you can reference to go
    through the entire process for the following stores:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Apple App Store and Mac App Store: [https://docs.unity3d.com/Manual/UnityIAPAppleConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPAppleConfiguration.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Play Store: [https://docs.unity3d.com/Manual/UnityIAPGoogleConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPGoogleConfiguration.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Windows Store: [https://docs.unity3d.com/Manual/UnityIAPWindowsConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPWindowsConfiguration.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Appstore: [https://docs.unity3d.com/Manual/UnityIAPAmazonConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPAmazonConfiguration.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are some potential issues when trying to publish to multiple Android IAP
    stores (such as Samsung and Google) with the same build. You can find information
    on resolving those issues at [https://docs.unity3d.com/Manual/UnityIAPCrossStoreInstallationIssues.html](https://docs.unity3d.com/Manual/UnityIAPCrossStoreInstallationIssues.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how to create IAPs by making use of Unity in your
    project. We first covered how to set up Unity’s IAP system and then dived into
    using Codeless IAP to easily add a purchasable item to your game. We then created
    the functionality to restore our purchase if we uninstall and reinstall our game
    and went over where we can go to set up our purchases depending on the store we
    want to target. These new skills give you the ability to make additional revenue
    from your game while also allowing you to target multiple stores and platforms,
    making it possible for even more people to see it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, of course, having all these ways to make money isn’t going to help us if
    no one plays our game. In the next chapter, we will get social, learning how we
    can make use of social media to share our score and get other players interested
    in our title.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs: []
  type: TYPE_NORMAL
- en: For more tips and tricks on improving your freemium strategy, I suggest that
    you check out the following article by Pepe Agell at [https://www.chartboost.com/blog/inapp-purchases-for-indie-mobile-games-freemium-strategy](https://www.chartboost.com/blog/inapp-purchases-for-indie-mobile-games-freemium-strategy).
  prefs: []
  type: TYPE_NORMAL
