- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Implementing In-App Purchases
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现应用内购买
- en: As mentioned in [*Chapter 7*](B18868_07.xhtml#_idTextAnchor232), *Advertising
    Using Unity Ads*, there are many options out there when it comes to selling your
    game on a mobile platform. If you decide to go free-to-play, in addition to showing
    ads, there is also the ability to sell people additional content and/or advantages
    through the use of **In-App Purchases** (**IAPs**). This can be a way to engage
    users of your game and convert them from free players into paying customers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*第7章*](B18868_07.xhtml#_idTextAnchor232)中所述，*使用 Unity Ads 进行广告宣传*，当涉及到在移动平台上销售您的游戏时，有许多选择。如果您决定采用免费游玩模式，除了显示广告外，还可以通过使用**应用内购买**（**IAPs**）来向人们销售额外的内容和/或优势。这可以是一种吸引您的游戏用户并将他们从免费玩家转变为付费客户的方式。
- en: Typically, these can be options such as removing ads or offering themes to players,
    but you can also do things such as unlock new levels and add additional content
    so that people addicted to your game will be clamoring to give you more of their
    time. Alternatively, you can also think of your IAPs as items that players will
    want to buy in order to enhance their gameplay experiences, such as power-ups
    and upgrades.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这些可以是移除广告或向玩家提供主题等选项，但您也可以做一些事情，比如解锁新关卡和添加额外内容，这样沉迷于您游戏的人们就会争相给您更多的时间。或者，您也可以将您的IAPs视为玩家想要购买以增强他们的游戏体验的项目，例如增强和升级。
- en: In this chapter, we will integrate Unity’s IAP system into our project and take
    a look at how to create an IAP that is for consumable content as well as permanently
    unlocking features. By the end of the chapter, we will see how to set up Unity’s
    IAP system and create our first possible purchasable item, and then we will see
    how to restore purchases on certain devices before seeing additional resources
    for the various app stores that exist.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将Unity的IAP系统集成到我们的项目中，并查看如何创建一个既适用于消耗性内容又可永久解锁功能的IAP。到本章结束时，我们将看到如何设置Unity的IAP系统并创建我们的第一个可能的购买项目，然后我们将看到如何在某些设备上恢复购买，在查看各种应用商店的额外资源之前。
- en: 'This chapter is split into a number of topics. It contains a simple step-by-step
    process from beginning to end. The following is the outline of our tasks:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为多个主题。它包含了一个从开始到结束的简单分步过程。以下是我们任务的概述：
- en: Setting up Unity IAP
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Unity IAP
- en: Creating our first purchase
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个购买
- en: Adding a button to restore purchases
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个按钮以恢复购买
- en: Configuring purchases for the stores of your choice
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置您选择的商店的购买
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the *Unity Editor system* *requirements* section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用Unity 2022.1.0b16和Unity Hub 3.3.1，但步骤应该在未来版本的编辑器中只需进行最小更改即可。如果您想下载本书中使用的确切版本，并且有新版本发布，您可以访问Unity的下载存档[https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive)。您还可以在*Unity编辑器系统*
    *要求*部分找到Unity的系统要求[https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)。
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件，网址为[https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007)。
- en: Setting up Unity IAP
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Unity IAP
- en: 'Unity IAP is a service that allows us to sell a variety of different items
    to players within our game projects and is currently supported by the iOS App
    Store, Mac App Store, Google Play, Windows Store, Amazon Appstore, and more, by
    default. So, using this, we can easily sell our items in many different places.
    We have already set up Unity Services in [*Chapter 7*](B18868_07.xhtml#_idTextAnchor232),
    *Advertising Using Unity Ads*, so this will be a lot easier to get going. Perform
    the following steps to add Unity IAP:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Unity IAP 是一项服务，允许我们在游戏项目中向玩家销售各种不同的物品，并且默认支持 iOS 应用商店、Mac 应用商店、Google Play、Windows
    商店、Amazon Appstore 等。因此，使用这项服务，我们可以轻松地在许多不同的地方销售我们的物品。我们已经在 [*第 7 章*](B18868_07.xhtml#_idTextAnchor232)
    中设置了 Unity 服务，*使用 Unity Ads 进行广告宣传*，所以这将更容易开始。执行以下步骤以添加 Unity IAP：
- en: Open the **Services** window by going to **Window** | **Package Manager**, and
    then click on the **Services** button on the top toolbar.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 **窗口** | **包管理器** 来打开 **服务** 窗口，然后在顶部工具栏上点击 **服务** 按钮。
- en: From there, scroll down to the **In App Purchasing** item and then click on
    the **Install** button.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，向下滚动到 **应用内购买** 项，然后点击 **安装** 按钮。
- en: '![Figure 6.1: The In App Purchasing option from Package Manager](img/B18868_06_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1：包管理器中的应用内购买选项](img/B18868_06_01.jpg)'
- en: 'Figure 6.1: The In App Purchasing option from Package Manager'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1：包管理器中的应用内购买选项
- en: A window will pop up asking for you to confirm that you would like to activate
    the **Purchasing** service package. Click on the **Ok** button.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个窗口，询问你是否确认要激活 **购买** 服务包。点击 **确定** 按钮。
- en: '![Figure 6.2: Activating the Purchasing service](img/B18868_06_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2：激活购买服务](img/B18868_06_02.jpg)'
- en: 'Figure 6.2: Activating the Purchasing service'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2：激活购买服务
- en: Once completed, you can close out of **Package Manager** and then go into the
    **Project Settings** menu by going to **Edit** | **Project Settings** and then
    going to the **Services** section. If all went well, you should see an **In-App
    Purchases** menu section. Select it and you should notice that it has been toggled
    on.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您可以关闭 **包管理器**，然后通过访问 **编辑** | **项目设置** 并进入 **服务** 部分来进入 **项目设置** 菜单。如果一切顺利，您应该看到一个
    **应用内购买** 菜单部分。选择它，您应该会注意到它已被切换为开启状态。
- en: Important note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The IAP package is created externally from the main engine itself because the
    code is meant to be extremely flexible and can be updated to fit any policies
    that are needed. We can then just update the package instead of having to update
    it to the latest version of Unity, which can be very important when working on
    a large project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: IAP 包是从主引擎外部创建的，因为代码旨在非常灵活，可以更新以适应任何需要的政策。然后我们只需更新包，而不是更新到 Unity 的最新版本，这在处理大型项目时可能非常重要。
- en: '![Figure 6.3: In-App Purchases are enabled](img/B18868_06_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3：应用内购买已启用](img/B18868_06_03.jpg)'
- en: 'Figure 6.3: In-App Purchases are enabled'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3：应用内购买已启用
- en: Now that we have the IAP system brought into our project, we can now utilize
    it to create our first purchasable object for our players.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将 IAP 系统引入到我们的项目中，我们可以利用它来为玩家创建第一个可购买对象。
- en: Creating our first purchase
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的第一个购买
- en: To make our first in-app purchase, we will make use of a feature of Unity that
    was just added to our project, Codeless IAP. It is called Codeless IAP because
    you do not need to write any code for the actual IAP transaction, just the script
    that defines what users get if they make a purchase. It’s by far the easiest way
    to integrate IAPs into Unity games and a great way to start trying out IAPs in
    our project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第一个应用内购买，我们将利用 Unity 项目中刚刚添加的一个功能，即无代码 IAP。它被称为无代码 IAP，因为您不需要为实际的 IAP
    交易编写任何代码，只需编写定义用户在购买时获得什么的脚本。这是将 IAP 集成到 Unity 游戏中迄今为止最简单的方法，也是在我们项目中尝试 IAP 的好方法。
- en: 'One of the most common IAPs is the ability to disable advertisements in mobile
    games. Using the following steps, let’s add that functionality by creating a button
    that, when clicked, will disable advertisements:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的 IAP 之一是能够在移动游戏中禁用广告。使用以下步骤，让我们通过创建一个按钮来添加这个功能，当点击该按钮时，将禁用广告：
- en: Open up our Main Menu level by going to the `Assets/Scenes` folder, and then
    double-clicking on the `MainMenu` file.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 `Assets/Scenes` 文件夹，并双击 `MainMenu` 文件来打开主菜单层级。
- en: From there, return to the **Scene** window if not there already, and then click
    on the **2D** button to go into 2D mode since we’ll be working with the UI.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，如果尚未在**场景**窗口中，请返回，然后单击**2D**按钮进入2D模式，因为我们将处理UI。
- en: 'We will first need to have something to sell and to do that, we will use the
    IAP Catalog, which we can access by going to **Services** | **In-App Purchasing**
    | **IAP Catalog…**:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要有一些东西可以出售，为此，我们将使用IAP目录，我们可以通过转到**服务** | **内购** | **IAP目录…**来访问它：
- en: '![Figure 6.4: Opening the IAP Catalog](img/B18868_06_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4：打开IAP目录](img/B18868_06_04.jpg)'
- en: 'Figure 6.4: Opening the IAP Catalog'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4：打开IAP目录
- en: 'Once we get to the menu, it should look something like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦到达菜单，它应该看起来像这样：
- en: '![Figure 6.5: The IAP Catalog](img/B18868_06_05.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5：IAP目录](img/B18868_06_05.jpg)'
- en: 'Figure 6.5: The IAP Catalog'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：IAP目录
- en: 'Now, the first thing we’ll need to do is create an ID for our product, which
    is how we will identify our product in different app stores. In our case, let’s
    go with `removeAds`. Then, under **Type**, change it to **Non Consumable**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们首先需要为我们的产品创建一个ID，这是我们将在不同的应用商店中识别我们的产品的方式。在我们的例子中，让我们使用`removeAds`。然后，在**类型**下，将其更改为**非消耗品**：
- en: '![Figure 6.6: Creating an IAP](img/B18868_06_06.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6：创建IAP](img/B18868_06_06.jpg)'
- en: 'Figure 6.6: Creating an IAP'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6：创建IAP
- en: By non-consumable, we mean that the players only need to buy this once, and
    the game will keep that in mind for later. The others are consumable, meaning
    that they are used for things that can be bought over and over again, such as
    special power-ups and subscriptions. These give access to some kind of content
    for a period of time, possibly recurring until a user cancels them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的非消耗品是指玩家只需购买一次，游戏会记住这一点以备后用。其他的是消耗品，这意味着它们用于可以重复购买的东西，例如特殊增强和订阅。这些提供了一定时间内的内容访问权限，可能直到用户取消为止。
- en: 4. Next, we can close out of **IAP Catalog** by clicking on **X** in the top-right
    corner of the window.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 接下来，我们可以通过单击窗口右上角的**X**来关闭**IAP目录**。
- en: '5. Select the **Canvas - Scale Physical** object in the **Hierarchy** window.
    From there, select **Services** | **In-App Purchasing** | **Create IAP Button**,
    and we should see a new button created in our scene:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 5. 在**层次结构**窗口中选择**Canvas - Scale Physical**对象。从那里，选择**服务** | **内购** | **创建IAP按钮**，我们应该在我们的场景中看到一个新按钮被创建：
- en: '![Figure 6.7: Creating an IAP button](img/B18868_06_07.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7：创建IAP按钮](img/B18868_06_07.jpg)'
- en: 'Figure 6.7: Creating an IAP button'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：创建IAP按钮
- en: This button will be used to perform an IAP to remove the ads in the game. The
    button currently uses Unity’s legacy text system, but it can easily be adjusted
    to use `TextMeshPro` if you’d like.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此按钮将用于执行内购以移除游戏中的广告。当前按钮使用Unity的旧版文本系统，但可以轻松调整以使用`TextMeshPro`。
- en: To ensure that both the **Start** and **Remove Ads** buttons show up correctly
    on the screen, we will create a menu that can hold both of them. This means creating
    another panel as a child of our Safe Area panel.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保**开始**和**移除广告**按钮都能正确显示在屏幕上，我们将创建一个可以容纳这两个按钮的菜单。这意味着我们需要为我们的安全区域面板创建另一个面板作为子面板。
- en: From the `SafeAreaHolder`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从`SafeAreaHolder`。
- en: 6. Afterward, create a child `SafeAreaHolder` and have it fill the entire screen
    as done before. Add a `10`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 之后，创建一个子`SafeAreaHolder`，并让它像之前一样填充整个屏幕。添加一个`10`。
- en: 7. Then, add a **Content Size Fitter** component and set the **Vertical Fit**
    and **Horizontal Fit** fields to **Preferred Size**.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 7. 然后，添加一个**内容大小适配器**组件，并将**垂直适配**和**水平适配**字段设置为**首选大小**。
- en: 8. Rename the newly added button `Remove Ads Button` and then add a `10` and
    at the `Remove` `Ads` instead.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 8. 将新添加的按钮重命名为`Remove Ads Button`，然后在`Remove` `Ads`处添加一个`10`。
- en: Tip
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: For a reminder on what these instructions mean and what each step does, check
    out [*Chapter 4*](B18868_04.xhtml#_idTextAnchor165), *Resolution-Independent UI*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些说明的含义以及每个步骤的作用的提醒，请参阅[*第4章*](B18868_04.xhtml#_idTextAnchor165)，*分辨率无关UI*。
- en: 'Finally, drag and drop the two buttons onto the **Panel** object, with the
    **Play** button in the top half and the **Remove Ads** button below it, as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将两个按钮拖放到**面板**对象上，**播放**按钮在上半部分，**移除广告**按钮在其下方，如下所示：
- en: '![Figure 6.8: The Remove Ads button added to the scene](img/B18868_06_08.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8：将移除广告按钮添加到场景中](img/B18868_06_08.jpg)'
- en: 'Figure 6.8: The Remove Ads button added to the scene'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：将移除广告按钮添加到场景中
- en: Next, with the `IAP Button` class has an **On Purchase Complete (Product)**
    function, which works similarly to **On Click** as we’ve used with **Button**
    components in the past. With that in mind, we will need to create a function that
    we would like to call when the player presses the button.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，`IAP Button`类有一个**购买完成（产品）**函数，它的工作方式与我们在过去使用**Button**组件时使用的**On Click**类似。考虑到这一点，我们需要创建一个当玩家按下按钮时我们希望调用的函数。
- en: In [*Chapter 7*](B18868_07.xhtml#_idTextAnchor232)*,* *Advertising Using Unity
    Ads*, we created a `static` variable inside the `UnityAdController` class called
    `showAds`. We will use this variable to check whether we should show ads.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第7章*](B18868_07.xhtml#_idTextAnchor232)*，*使用Unity Ads进行广告投放*中，我们在`UnityAdController`类内部创建了一个名为`showAds`的`static`变量。我们将使用这个变量来检查是否应该显示广告。
- en: 'We will need to open up the `MainMenuBehaviour` script and add the following
    functions to the class:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要打开`MainMenuBehaviour`脚本，并将以下函数添加到类中：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we are using Unity’s `PlayerPrefs` system in order to save whether a player
    should be shown ads or not. `PlayerPrefs` is cool because it saves information
    between playthroughs of the game and is used often for things such as high scores
    and player preferences (hence the name). To reset the properties for testing,
    you can go to `PlayerPrefs` may be removed if the app is uninstalled or if the
    app’s data is cleared, so we will later add a **Restore Purchases** button that
    will allow the players to restore their purchases on platforms that allow it.
    For platforms that don’t, you’ll want to make an API call to the server to check
    whether the current user has already purchased the non-consumable IAP item. More
    details on this will be covered in the *Adding a button to restore purchases*
    section of this chapter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在使用Unity的`PlayerPrefs`系统来保存是否应该向玩家显示广告。`PlayerPrefs`很酷，因为它可以在游戏的多次游玩之间保存信息，并且常用于如高分和玩家偏好设置（因此得名）。为了测试重置属性，你可以进入`PlayerPrefs`，如果应用被卸载或应用数据被清除，它可能会被移除，因此我们稍后会添加一个**恢复购买**按钮，允许玩家在允许的平台恢复他们的购买。对于不允许的平台，你需要向服务器发起API调用以检查当前用户是否已经购买了不可消耗的内购项目。更多细节将在本章的**添加恢复购买按钮**部分中介绍。
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on PlayerPrefs, check out [https://docs.unity3d.com/ScriptReference/PlayerPrefs.html](https://docs.unity3d.com/ScriptReference/PlayerPrefs.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`PlayerPrefs`的更多信息，请查看[https://docs.unity3d.com/ScriptReference/PlayerPrefs.html](https://docs.unity3d.com/ScriptReference/PlayerPrefs.html)。
- en: Note that I made the `Start` function `virtual`, which means that inherited
    classes can also use this as a foundation for their own scripts. We also marked
    the function as `protected`, which works the same as a `private` function but
    it also is accessible in child classes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我将`Start`函数设置为`virtual`，这意味着继承的类也可以将其用作自己脚本的基石。我们还标记了该函数为`protected`，它与`private`函数的作用相同，但它也可以在子类中访问。
- en: 'With that in mind, we will also need to update the `Start` function of `PauseScreenBehaviour`
    to the following:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们还需要更新`PauseScreenBehaviour`的`Start`函数，如下所示：
- en: '[PRE1]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `override` keyword will replace the default behavior of `Start`. However,
    when we call `base.Start()`, we are ensuring that the preceding content from `MainMenuBehaviour`
    will be called—in this case, we ensure that `UnityAdController` has the correct
    value set.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`override`关键字将替换`Start`的默认行为。然而，当我们调用`base.Start()`时，我们确保了`MainMenuBehaviour`中的先前内容将被调用——在这种情况下，我们确保`UnityAdController`设置了正确的值。'
- en: 'Finally, we will need to adjust the `ObstacleBehaviour` script to handle not
    playing ads as well. Update the `ShowContinue` function to use the following:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要调整`ObstacleBehaviour`脚本以处理不播放广告的情况。更新`ShowContinue`函数如下：
- en: '[PRE2]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will also need to make a slight adjustment to the `ResetGame` method by
    removing or commenting out the following lines:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要对`ResetGame`方法进行轻微调整，通过删除或注释以下行：
- en: '[PRE3]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save your script and dive into Unity.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本并进入Unity。
- en: 'From the `Main Menu` object to the little box below the **Runtime Only** dropdown.
    Then, select **Main Menu Behaviour** | **DisableAds** from the dropdown to the
    right:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Main Menu`对象到**Runtime Only**下拉菜单下的小框。然后，从右侧下拉菜单中选择**Main Menu Behaviour**
    | **DisableAds**：
- en: "![Figure 6.9: Adding the DisableAds function call to Purc\uFEFFhase](img/B18868_06_09.jpg)"
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9：将DisableAds函数调用添加到购买](img/B18868_06_09.jpg)'
- en: 'Figure 6.9: Adding the DisableAds function call to Purchase'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9：将DisableAds函数调用添加到购买
- en: 'Now, save our scene and start the game:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，保存我们的场景并开始游戏：
- en: '![Figure 6.10: The purchase menu appears to work correctly](img/B18868_06_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10：购买菜单看起来工作正常](img/B18868_06_10.jpg)'
- en: 'Figure 6.10: The purchase menu appears to work correctly'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10：购买菜单看起来工作正常
- en: 'Now, if we click on the **Remove Ads** button, it will ask whether we want
    to make the purchase. If we do, it will then make it so that when we go into the
    game, there are no ads. Likewise, now when we die, it will display a **Free**
    **Continue** button:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们点击**移除广告**按钮，它会询问我们是否想要进行购买。如果我们这样做，它将确保当我们进入游戏时，没有广告。同样，现在当我们死亡时，它将显示一个**免费**
    **继续**按钮：
- en: '![Figure 6.11: Making sure the purchase works correctly](img/B18868_06_11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11：确保购买工作正常](img/B18868_06_11.jpg)'
- en: 'Figure 6.11: Making sure the purchase works correctly'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11：确保购买工作正常
- en: With that, we now have created a simple purchase in Unity.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们现在已经在Unity中创建了一个简单的购买。
- en: Note
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re interested in learning more about Codeless IAP, checkout [https://docs.unity3d.com/Manual/UnityIAPCodelessIAP.html](https://docs.unity3d.com/Manual/UnityIAPCodelessIAP.html).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于无代码IAP的信息，请查看[https://docs.unity3d.com/Manual/UnityIAPCodelessIAP.html](https://docs.unity3d.com/Manual/UnityIAPCodelessIAP.html)。
- en: With this, you can now build as many products as you’d like to have in your
    game. However, certain platforms also have requirements with regard to the functionality
    to restore previous purchases. In the next section, we will see how to do that.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，你现在可以构建你想要在游戏中拥有的任何产品。然而，某些平台对恢复先前购买的功能也有要求。在下一节中，我们将看到如何做到这一点。
- en: Adding a button to restore purchases
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个恢复购买的按钮
- en: On platforms that support it (Google Play and Universal Windows Applications,
    most notably), if you purchase something, uninstall, and then reinstall a game
    using Unity IAP, it automatically restores any products the user owned during
    the first initialization following reinstallation.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持它的平台上（特别是Google Play和通用Windows应用程序），如果你购买了某个产品，卸载，然后使用Unity IAP重新安装游戏，它将自动恢复用户在重新安装后的第一次初始化期间拥有的任何产品。
- en: 'For those on iOS, users must have the ability to restore their purchases via
    a button due to Apple requiring them to reauthenticate their password beforehand.
    Not doing so will prevent our game from being accepted on the iOS App Store, so
    it’s a good idea to include this functionality if we wish to deploy it there.
    Let’s look at the steps to do just that:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于iOS用户，由于苹果要求他们在之前重新验证密码，因此用户必须能够通过按钮恢复他们的购买。如果不这样做，将阻止我们的游戏在iOS应用商店被接受，所以如果我们希望在那里部署，包含这个功能是个好主意。让我们看看如何做到这一点：
- en: Go to the **Hierarchy** window and select the **Remove Ads Button** object.
    Once selected, duplicate it by pressing *Ctrl +* *D*.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**层次结构**窗口并选择**移除广告按钮**对象。一旦选中，通过按*Ctrl +* *D*来复制它。
- en: Change the duplicate’s name by selecting it and changing its name to `Restore
    Button` in the **Inspector** window.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择它并在**检查器**窗口中将名称更改为`Restore Button`来更改副本的名称。
- en: From the `Restore Purchases` as well.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`恢复购买`也是如此。
- en: 'Now, select the **Restore** object, and then, in the **IAP Button** component,
    go to **Button Type** and select **Restore**:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择**恢复**对象，然后在**IAP按钮**组件中，转到**按钮类型**并选择**恢复**：
- en: '![Figure 6.12: Adding the Restore button](img/B18868_06_12.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12：添加恢复按钮](img/B18868_06_12.jpg)'
- en: 'Figure 6.12: Adding the Restore button'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12：添加恢复按钮
- en: You should note that the properties of the **IAP Button** component have changed
    and now only allow you to set **Button Type**, as there is nothing left to customize.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意，**IAP按钮**组件的属性已经更改，现在只能设置**按钮类型**，因为没有其他可以自定义的内容。
- en: Save your scene and jump into Unity.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的场景并跳入Unity。
- en: 'When you start the game and try to click on **Restore**, you’ll get a warning
    in the **Console** window stating that this isn’t a supported platform:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你开始游戏并尝试点击**恢复**时，你会在**控制台**窗口看到一个警告，指出这不是一个受支持的平台：
- en: '![Figure 6.13: Warning upon trying to restore on Windows](img/B18868_06_13.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图6.13：尝试在Windows上恢复时的警告](img/B18868_06_13.jpg)'
- en: 'Figure 6.13: Warning upon trying to restore on Windows'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13：尝试在Windows上恢复时的警告
- en: So, with that in mind, we can adjust our game so that the button will only show
    up if we are currently running on a supported platform.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，考虑到这一点，我们可以调整我们的游戏，使得按钮只有在当前运行在受支持的平台上时才会显示。
- en: 'Go to the `Scripts` folder and create a C# script called `RestoreAdsChecker`.
    Once it opens, use the following script for it:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`脚本`文件夹，创建一个名为`RestoreAdsChecker`的C#脚本。一旦打开，使用以下脚本：
- en: '[PRE4]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This script goes through all of the stores listed in Unity’s `IAPButton` class,
    and if they are something that can be restored, we set `canRestore` to `true`;
    otherwise, it will stay `false`. Finally, we will remove the object if we cannot
    restore it, without having to create specific things for different builds.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本遍历Unity的`IAPButton`类中列出的所有商店，如果它们是可以恢复的，我们将`canRestore`设置为`true`；否则，它将保持`false`。最后，如果我们无法恢复它，我们将删除对象，而无需为不同的构建创建特定的事物。
- en: Save the script and dive back into Unity.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回Unity。
- en: 'Attach our newly created `RestoreAdsChecker` component to our **Restore** **Button**
    object:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们新创建的`RestoreAdsChecker`组件附加到**恢复****按钮**对象：
- en: "![Figure 6.14: Adding the Restore Ads Checke\uFEFFr component](img/B18868_06_14.jpg)"
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14：添加Restore Ads Checker组件](img/B18868_06_14.jpg)'
- en: 'Figure 6.14: Adding the Restore Ads Checker component'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14：添加Restore Ads Checker组件
- en: 'Save your project and start up the game:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的项目并启动游戏：
- en: '![Figure 6.15: The result of the RestoreAdsChecker component](img/B18868_06_15.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图6.15：RestoreAdsChecker组件的结果](img/B18868_06_15.jpg)'
- en: 'Figure 6.15: The result of the RestoreAdsChecker component'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15：RestoreAdsChecker组件的结果
- en: Now, due to the **RestoreAdsChecker** component that we added on our PC build
    of the game, the **Restore** button doesn’t show up, but if we export for iOS,
    it will show up on our device!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于我们在游戏的PC构建中添加了**RestoreAdsChecker**组件，**恢复**按钮不会显示，但如果我们导出为iOS，它将显示在我们的设备上！
- en: Note
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on restoring transactions and how this functionally works,
    check out [https://docs.unity3d.com/Manual/UnityIAPRestoringTransactions.html](https://docs.unity3d.com/Manual/UnityIAPRestoringTransactions.html).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 关于恢复交易和该功能如何工作的更多信息，请查看[https://docs.unity3d.com/Manual/UnityIAPRestoringTransactions.html](https://docs.unity3d.com/Manual/UnityIAPRestoringTransactions.html)。
- en: This ensures that our game has this particular feature on each of the different
    platforms that support it. With that in mind, we will next look at some of the
    specific stores and places you may wish to add support for IAPs in your game.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以确保我们的游戏在每个支持该特性的不同平台上都有这个特定的功能。考虑到这一点，我们将接下来查看一些具体的商店和位置，您可能希望在游戏中添加对IAP的支持。
- en: Configuring purchases for the stores of your choice
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置您选择的商店的购买
- en: 'Unfortunately, we do not have enough room in the book to go step by step through
    the process for every store, but I do have pages that you can reference to go
    through the entire process for the following stores:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，书中没有足够的空间一步一步地介绍每个商店的过程，但我有一些页面可以供您参考，以了解以下商店的整个流程：
- en: 'The Apple App Store and Mac App Store: [https://docs.unity3d.com/Manual/UnityIAPAppleConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPAppleConfiguration.html)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 苹果应用商店和Mac应用商店：[https://docs.unity3d.com/Manual/UnityIAPAppleConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPAppleConfiguration.html)
- en: 'Google Play Store: [https://docs.unity3d.com/Manual/UnityIAPGoogleConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPGoogleConfiguration.html)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Play商店：[https://docs.unity3d.com/Manual/UnityIAPGoogleConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPGoogleConfiguration.html)
- en: 'The Windows Store: [https://docs.unity3d.com/Manual/UnityIAPWindowsConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPWindowsConfiguration.html)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows商店：[https://docs.unity3d.com/Manual/UnityIAPWindowsConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPWindowsConfiguration.html)
- en: 'Amazon Appstore: [https://docs.unity3d.com/Manual/UnityIAPAmazonConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPAmazonConfiguration.html)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊应用商店：[https://docs.unity3d.com/Manual/UnityIAPAmazonConfiguration.html](https://docs.unity3d.com/Manual/UnityIAPAmazonConfiguration.html)
- en: There are some potential issues when trying to publish to multiple Android IAP
    stores (such as Samsung and Google) with the same build. You can find information
    on resolving those issues at [https://docs.unity3d.com/Manual/UnityIAPCrossStoreInstallationIssues.html](https://docs.unity3d.com/Manual/UnityIAPCrossStoreInstallationIssues.html).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试使用相同的构建发布到多个Android IAP商店（如三星和谷歌）时，可能会遇到一些潜在问题。您可以在[https://docs.unity3d.com/Manual/UnityIAPCrossStoreInstallationIssues.html](https://docs.unity3d.com/Manual/UnityIAPCrossStoreInstallationIssues.html)找到解决这些问题的信息。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered how to create IAPs by making use of Unity in your
    project. We first covered how to set up Unity’s IAP system and then dived into
    using Codeless IAP to easily add a purchasable item to your game. We then created
    the functionality to restore our purchase if we uninstall and reinstall our game
    and went over where we can go to set up our purchases depending on the store we
    want to target. These new skills give you the ability to make additional revenue
    from your game while also allowing you to target multiple stores and platforms,
    making it possible for even more people to see it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何通过在项目中使用Unity来创建内购项目。我们首先讲解了如何设置Unity的内购系统，然后深入探讨了如何使用无代码内购轻松添加可购买项目到游戏中。接着，我们创建了在卸载和重新安装游戏时恢复购买的功能，并讨论了根据我们想要的目标商店，我们可以去哪里设置我们的购买。这些新技能使您能够从游戏中获得额外收入，同时允许您针对多个商店和平台，使更多的人能够看到它。
- en: Now, of course, having all these ways to make money isn’t going to help us if
    no one plays our game. In the next chapter, we will get social, learning how we
    can make use of social media to share our score and get other players interested
    in our title.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，拥有所有这些赚钱的方式，如果没有人玩我们的游戏，那也是无济于事的。在下一章中，我们将学习如何利用社交媒体分享我们的得分，并吸引其他玩家对我们游戏标题的兴趣。
- en: Further reading
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For more tips and tricks on improving your freemium strategy, I suggest that
    you check out the following article by Pepe Agell at [https://www.chartboost.com/blog/inapp-purchases-for-indie-mobile-games-freemium-strategy](https://www.chartboost.com/blog/inapp-purchases-for-indie-mobile-games-freemium-strategy).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于提升免费增值策略的小技巧，我建议您阅读Pepe Agell在[https://www.chartboost.com/blog/inapp-purchases-for-indie-mobile-games-freemium-strategy](https://www.chartboost.com/blog/inapp-purchases-for-indie-mobile-games-freemium-strategy)上发表的文章。
