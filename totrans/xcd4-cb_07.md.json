["```swift\n        //  ViewController.h\n        //  MediaPickerExample\n        //  Created by Steven F Daniel on 20/11/12.\n        //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n        #import<UIKit/UIKit.h>\n\n        @interface ViewController : UIViewController<UIImagePickerControllerDelegate, UINavigationControllerDelegate> \n        {\n\n        }\n\n        // Declare the Getters and Setters for each of our objects.\n        @property (strong, nonatomic) IBOutlet UIBarButtonItem         *btnBrowse;\n        @property (strong, nonatomic) IBOutlet UIImageView             *imageView;\n        @property (nonatomic, retain) UIImagePickerController *imagePicker;\n\n        // Declare our class Instance methods\n        - (IBAction)btnBrowse:(id)sender;\n        ```", "```swift\n        @synthesize btnBrowse;\n        @synthesize imagePicker;\n        @synthesize imageView;\n\n        ```", "```swift\n        #pragma mark called when the user presses the Organize button\n        - (IBAction)btnBrowse:(id)sender {\n\n           // Create image picker controller\n           imagePicker = [[UIImagePickerController alloc] init];\n\n           // Checks to make sure that the Photo Library is available.\n          if ([UIImagePickerController isSourceTypeAvailable:\n               UIImagePickerControllerSourceTypePhotoLibrary]) {\n               // Set source to the Photo Library\n               self.imagePicker.delegate = self;\n               self.imagePicker.sourceType =  \n               UIImagePickerControllerSourceTypePhotoLibrary;\n               self.imagePicker.mediaTypes =[UIImagePickerController\n               availableMediaTypesForSourceType:\n               self.imagePicker.sourceType];\n               self.imagePicker.allowsEditing = NO;\n               [self presentViewController:imagePickeranimated:YES\n               completion:nil];\n            }\n            else {\n                NSLog(@\"Unable to access the Photo Library.\");\n            }\n        }\n        ```", "```swift\n        #pragma mark - Image Picker Delegate Methods\n        - (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {\n           [picker dismissViewControllerAnimated:YES completion:nil];\n        }\n\n        #pragma mark Method is called when the user has chosen an item from the image picker.\n        - (void)imagePickerController:(UIImagePickerController *)picker   didFinishPickingMediaWithInfo:(NSDictionary *)info {\n           // Determine the media type of the chosen item \n           NSString *mediaType = [info \n           objectForKey:UIImagePickerControllerMediaType];\n\n           // Determine if we have chosen a image file from library.\n           if ([mediaType isEqualToString:@\"public.image\"]) {\n                UIImage *photoImage = [info \n                objectForKey:UIImagePickerControllerOriginalImage];\n                self.imageView.image = photoImage;\n                self.imageView.contentMode = \n                UIViewContentModeScaleAspectFit;\n            }\n           else if ([mediaType isEqualToString:@\"public.movie\"]) {\n                    NSURL *movieURL = [info \n                    valueForKey:UIImagePickerControllerMediaURL];\n                    NSLog(@\"Movie URL: %@\", movieURL);\n           }\n        // Dismiss the imagePicker Dialog\n           [picker dismissViewControllerAnimated:NO completion:nil];\n        }\n        ```", "```swift\n    //  ViewController.h\n    //  CameraPickerExample\n    //  Created by Steven F Daniel on 20/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import<UIKit/UIKit.h>\n\n    @interface ViewController : UIViewController<UIImagePickerControllerDelegate, UINavigationControllerDelegate>\n    {\n    }\n\n      // Declare the Getters and Setters for each of our objects.\n      @property (strong, nonatomic) IBOutlet UIBarButtonItem           \n      *btnCamera;\n     @property (nonatomic, retain) \n     UIImagePickerController *imagePicker;\n\n      // Declare each of our Class methods\n      - (IBAction)btnCamera:(id)sender;\n    ```", "```swift\n    @synthesize btnCamera;\n    @synthesize imagePicker;\n\n    ```", "```swift\n    #pragma mark called when the user presses the camera button\n    - (IBAction)btnCamera:(id)sender {\n\n       // Checks device to make sure that the Camera is available.\n       if ([UIImagePickerController isSourceTypeAvailable:\n       UIImagePickerControllerSourceTypeCamera]) {\n\n          // Create image picker controller\n          imagePicker = [[UIImagePickerController alloc] init];\n\n          // Set our source to the Camera\n          self.imagePicker.sourceType =  \n          UIImagePickerControllerSourceTypeCamera;\n          self.imagePicker.delegate = self;\n          self.imagePicker.cameraDevice = \n          UIImagePickerControllerCameraDeviceRear;\n          self.imagePicker.allowsEditing = NO;\n          [self presentViewController:imagePicker animated:YES\n                                     completion:nil];\n       }\n       else{\n          NSLog(@\"Use of the Camera is not available.\");\n       }\n    }\n    ```", "```swift\n    #pragma mark - Image Picker Delegate Methods\n    - (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {\n       [picker dismissViewControllerAnimated:YES completion:nil];\n    }\n\n    #pragma mark method is called when the user has finished taking a photo with the camera.\n    - (void)imagePickerController:(UIImagePickerController *)picker \n    didFinishPickingMediaWithInfo:(NSDictionary *)info {\n\n       // Access the uncropped image and Save the image\n       UIImage *image = [info \n       objectForKey:@\"UIImagePickerControllerOriginalImage\"];\n       UIImageWriteToSavedPhotosAlbum(image, self, \n       @selector(image:didFinishSavingWithError:contextInfo:), nil);\n       // Then dismiss the imagePicker Dialog\n       [picker dismissViewControllerAnimated:NO completion:nil];\n    }\n\n    - (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo {\n       // Handle any errors detected during the save\n       if (error) {\n          NSLog(@\"Unable to save the image to the Photo Album\");\n       }\n       else {\n          NSLog(@\"Image successfully saved to the Photo Album\");\n       }\n    }\n    ```", "```swift\n    //  ViewController.h\n    //  PlayVideoExample\n    //  Created by Steven F Daniel on 20/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    #import  <UIKit/UIKit.h>\n    #import <MediaPlayer/MediaPlayer.h>\n\n    @interface ViewController : UIViewController\n\n    // Declare the Getters and Setters for each of our objects.\n    @property  (strong, nonatomic) IBOutlet UIButton *btnPlayVideo;\n    @property (strong, nonatomic) MPMoviePlayerController *moviePlayerController;\n\n    ```", "```swift\n    @synthesize btnPlayVideo;\n    @synthesize moviePlayerController;\n\n    ```", "```swift\n    #pragma mark Handle Playback of the video when button is pressed.\n    - (IBAction)btnPlayVideo:(id)sender\n    {\n       // Initialize our moviePlayer Controller with the video path\n       NSString *moviePath = [[NSBundle\n       mainBundle]pathForResource:@\"GenieCompanyVideo\" \n       ofType:@\"mp4\"];\n       NSURL  *movieURL = [NSURL fileURLWithPath:moviePath\n       isDirectory:NO];\n       self.moviePlayerController = [[MPMoviePlayerController alloc] \n       initWithContentURL:movieURL];\n\n       // Set up our notifications to determine when movie completes\n       [[NSNotificationCenter defaultCenter] addObserver:self\n       selector:@selector(moviePlaybackComplete:)\n       name:MPMoviePlayerPlaybackDidFinishNotification\n       object:self.moviePlayerController];\n\n       // Add the movie player controller to the view and \n       // determine if AirPlay is available\n       [self.view addSubview:self.moviePlayerController.view];\n       if ([self.moviePlayerController\n           respondsToSelector:@selector(setAllowsAirPlay:)]){\n           [self.moviePlayerController setAllowsAirPlay:YES];\n       }\n       // Initialize the movie player properties and play the video.\n       self.moviePlayerController.fullscreen = YES;\n       self.moviePlayerController.scalingMode = \n       MPMovieScalingModeAspectFit;\n      [self.moviePlayerController play];\n    }\n    ```", "```swift\n    #pragma mark Handle once the video has finished playback.\n    - (void)moviePlaybackComplete:(NSNotification *)notification\n    {\n        self.moviePlayerController = [notification object];\n        [[NSNotificationCenter defaultCenter] removeObserver:self\n        name:MPMoviePlayerPlaybackDidFinishNotification\n        object:self.moviePlayerController];\n        [self.moviePlayerController.view removeFromSuperview];\n    }\n    ```", "```swift\n    //  ViewController.h\n    //  MusicPlayerExample\n    //  Created by Steven F Daniel on 20/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import  <UIKit/UIKit.h>\n    #import <MediaPlayer/MediaPlayer.h>\n\n    @interface ViewController : UIViewController<MPMediaPickerControllerDelegate>\n    {\n    }\n\n    // Declare the Getters and Setters for each of our objects.\n    @property (nonatomic, retain) MPMusicPlayerController *mPlayer;\n    @property (nonatomic, retain) MPMediaPickerController *mPicker;\n\n    ```", "```swift\n    @synthesize btnBrowse;\n    @synthesize btnPlay;\n    @synthesize mPicker;\n    @synthesize mPlayer;\n\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n       [super viewDidLoad];\n\n       // Create the Media Picker and Music Player controller's\n       self.mPicker = [[MPMediaPickerController alloc] \n       initWithMediaTypes:MPMediaTypeMusic];\n       self.mPlayer = [[MPMusicPlayerController alloc] init];\n\n       [mPlayer prepareToPlay];   \n       self.view.backgroundColor = [UIColor blackColor];\n    }\n    ```", "```swift\n    #pragma mark called when the user presses the Browse button\n    - (IBAction)btnBrowse:(id)sender {\n       self.mPicker.delegate = self;\n       self.mPicker.allowsPickingMultipleItems = YES;\n       [self presentViewController:mPicker animated:YES\n       completion:nil];\n    }\n    -(IBAction)btnPlay:(id)sender {\n       // Check to see if we are already playing our audio.\n       if (!self.mPlayer.playbackState == \n           MPMusicPlaybackStatePlaying) {\n           [self.btnPlay setTitle :@\"Stop\"];\n           [self.mPlayer play];\n       }\n       else {\n           [self.btnPlay setTitle:@\"Play\"];\n           [self.mPlayer stop];\n       }\n    }\n    #pragma mark - Image Picker Delegate Methods\n    -(void)mediaPicker:(MPMediaPickerController *)mediaPicker\n    didPickMediaItems:(MPMediaItemCollection *)mediaItemCollection{\n        [self.mPlayer\n        setQueueWithItemCollection:mediaItemCollection];\n        [self.mPicker dismissViewControllerAnimated:YES\n        completion:nil];\n    }\n    #pragma mark called when the user cancels the media picker\n    -(void)mediaPickerDidCancel:(MPMediaPickerController *)mediaPicker {\n         [self.mPicker dismissViewControllerAnimated:YES\n       completion:nil];\n    }\n    ```", "```swift\n    //  ViewController.h\n    //  RecorderExample\n    //  Created by Steven F Daniel on 20/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import<UIKit/UIKit.h>\n    #import<AVFoundation/AVFoundation.h>\n\n    @interface ViewController : UIViewController\n\n    // Declare the getters and setters for our Outlets\n    @property (nonatomic, strong) IBOutlet UIBarButtonItem *btnPlay;\n    @property (nonatomic, strong) AVAudioRecorder *aRecorder;\n    @property (nonatomic, strong) AVAudioPlayer   *aPlayer;\n\n    // Declare our class instance methods\n    - (IBAction)startRecord:(id)sender;\n    - (IBAction)startPlayback:(id)sender;\n    ```", "```swift\n    @synthesize btnStart, btnPlay;\n    @synthesize aPlayer, aRecorder;\n\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n      [super viewDidLoad];\n\n       // Initialize our recording sample file properties.\n       NSString *fileName = @\"RecorderExample.caf\";\n       NSArray  *dirPaths = \n       NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,\n                                         NSUserDomainMask, YES);\n       NSString *docsDir = [dirPaths objectAtIndex:0];\n       NSString *soundFilePath = [docsDir\n       stringByAppendingPathComponent:fileName];\n       NSURL *soundFileURL = [NSURL fileURLWithPath:soundFilePath];\n\n       // Initialize the recorder with default settings.\n       NSDictionary *recordSettings = [NSDictionary\n       dictionaryWithObjectsAndKeys:\n          [NSNumber numberWithInt:AVAudioQualityMin],\n                            AVEncoderAudioQualityKey,\n                               [NSNumber numberWithInt:16],\n                               AVEncoderBitRateKey,\n                               [NSNumber numberWithInt:2],\n                               AVNumberOfChannelsKey,\n                               [NSNumber numberWithFloat:44100.0],\n                               AVSampleRateKey, nil];\n\n       // Initialize our audio Recorder settings \n       aRecorder = [[AVAudioRecorder alloc] initWithURL:soundFileURL\n                                        settings:recordSettings\n                                        error:nil];\n\n       [aRecorder prepareToRecord];\n       aRecorder.meteringEnabled = YES;\n       btnPlay.enabled = NO;\n\n       // Set the background color of our view to black\n       self.view.backgroundColor = [UIColor blackColor];\n    }\n    ```", "```swift\n    #pragma mark Handles recording of the audio\n    - (IBAction)startRecord:(id)sender {\n    // Check to see if we are already recording.\n       if (!aRecorder.recording) {\n           [btnStart setTitle :@\"Stop Recording\"  ];\n           btnPlay.enabled = NO;\n           [aRecorder record];\n       }\n       else {\n          [btnStart setTitle:@\"Start Recording\"  ];\n          btnPlay.enabled = YES;\n          [aRecorder stop];\n       }\n    }\n    #pragma mark  Handles playback of our recording.\n    -(IBAction)startPlayback:(id)sender\n    {\n       // Check to see if we are already playing.\n       if (!aPlayer.playing) {\n            [btnPlay setTitle :@\"Stop Playing\"];\n\n          // Grab the recorded file from the url location.\n          aPlayer = [[AVAudioPlayer alloc]\n                   initWithContentsOfURL:aRecorder.url error:nil];\n\n           // Play our audio file\n          [aPlayer prepareToPlay];\n          [aPlayer play];\n       }\n       else {\n          // Stop the audio playback\n          [btnPlay setTitle :@\"Play\"];\n          [aPlayer stop];\n       }\n    }\n    ```", "```swift\n    //  ViewController.m\n    //  AnimateViewExample\n    //  Created by Steven F Daniel on 20/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import \"ViewController.h\"\n\n    @interface ViewController ()\n    @end\n\n    @implementation ViewController\n\n    @synthesize lblAnimateMsg;\n    @synthesize btnAnimate;\n\n    CGRect origPos;\n\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n       [super viewDidLoad];\n\n       // Set the color of our Animation Label and disable button\n       lblAnimateMsg.text = @\"Animating Views Example\";\n       lblAnimateMsg.textColor = [UIColor yellowColor];\n       [self.view setBackgroundColor:[UIColor blackColor]];\n    }\n    ```", "```swift\n    #pragma mark Perform the animation of our Label\n    - (IBAction)doAnimation:(id)sender {\n\n       // Save the original position of our Label\n       origPos = lblAnimateMsg.frame;\n       CGRect AnimateFrame = origPos;\n\n       // Initialize and specify the height of our frame\n       AnimateFrame.size.height = 700;\n\n       // Set the color of our Animation Label and disable button\n       lblAnimateMsg.text = @\"Animating Views Example\";\n       lblAnimateMsg.textColor = [UIColor yellowColor];\n       btnAnimate.enabled = NO;\n\n       // Set up our Animations\n       [UIView beginAnimations:@\"AnimationBegin\" context:nil];\n       [UIView setAnimationDuration:5];\n       [UIView setAnimationDelegate:self];\n       [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];\n       [UIView setAnimationDidStopSelector:\n       @selector(doAnimationStop)];\n\n       // Increase the frame of our Animation message\n       self.lblAnimateMsg.frame = AnimateFrame;\n       [UIView commitAnimations];\n    }\n    ```", "```swift\n    #pragma mark Method is called when animation stops.\n    -(void)doAnimationStop\n    {\n       lblAnimateMsg.frame = origPos;\n       btnAnimate.enabled = YES;\n       lblAnimateMsg.text = @\"Animation has Completed.\";\n       lblAnimateMsg.textColor = [UIColor greenColor];\n    }\n    ```", "```swift\n    - (void)drawRect:(CGRect)rect\n    {\n       // Set up and initialize our Graphics Context\n       CGContextRef context = UIGraphicsGetCurrentContext();\n       CGContextClearRect(context, rect);\n\n       // Specify the text color and font fill style\n       CGContextSetFillColorWithColor(context, [UIColor\n       yellowColor].CGColor);\n       CGContextSetTextDrawingMode(context, kCGTextFillStroke);\n\n       // Finally, draw the text using the specified font.\n       NSString *theString = @\"GENIESOFT STUDIOS...\";\n       [theString drawAtPoint:CGPointMake(20.0f, 100.0f) \n       withFont:[UIFont fontWithName:@\"Verdana-Bold\" \n       size:25]];\n    }\n    ```", "```swift\n    //  ViewController.m\n    //  TextDrawExample\n    //  Created by Steven F Daniel on 20/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import  \"ViewController.h\"\n    #import \"DrawTextView.h\"\n\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n      [super viewDidLoad];\n\n      // Declare and add our custom view as a subView\n      // to the current view.\n      DrawTextView *drawTextView = [[DrawTextView alloc] \n      initWithFrame:self.view.bounds];\n      [self.view addSubview:drawTextView];\n    }\n    ```", "```swift\n    - (void)drawRect:(CGRect)rect\n    {\n       // Set up and initialize our Graphics Context\n       CGContextRef context = UIGraphicsGetCurrentContext();\n       CGContextClearRect(context, rect);\n\n       // Draw our Line to our View\n       CGContextSetLineWidth(context, 5);\n       CGContextSetStrokeColorWithColor(context, [UIColor\n       greenColor].CGColor);\n       CGContextMoveToPoint(context, 0, 0);\n       CGContextAddLineToPoint(context, self.bounds.size.width, \n       self.bounds.size.height);\n       CGContextStrokePath(context);\n\n       // Then, draw and Add the Curve\n       CGContextSetStrokeColorWithColor(context, [UIColor\n       redColor].CGColor);\n       CGContextMoveToPoint(context, 0, self.bounds.size.height);\n       CGContextAddCurveToPoint(context, 0, self.bounds.size.height, \n       5, self.bounds.size.height / 2, self.bounds.size.width, 0);\n       CGContextStrokePath(context); \n    }\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n       [super viewDidLoad];\n\n       // Declare and add our custom view as a subView\n       // to the current view.\n      LinesCurvesView *linesCurvesView = [[LinesCurvesView alloc] \n      initWithFrame:self.view.bounds];\n      [self.view addSubview:linesCurvesView];\n    }\n    ```", "```swift\n    - (void)drawRect:(CGRect)rect\n    {\n       // Set up and initialize our Graphics Context\n       CGContextRef context = UIGraphicsGetCurrentContext();\n       CGContextClearRect(context, rect);\n\n       // Draw our Circle to our view\n       CGContextSetFillColorWithColor(context, [UIColor\n       redColor].CGColor);\n       CGContextAddEllipseInRect(context, CGRectMake(50,50,150,150));\n       CGContextFillPath(context);\n\n       // Draw Square to the Screen\n       CGContextSetFillColorWithColor(context, [UIColor\n       yellowColor].CGColor);\n       CGContextAddRect(context, CGRectMake(50,200,200,200));\n       CGContextFillPath(context);\n\n       // Draw a Triangle to the Screen\n       CGContextMoveToPoint   (context, 150, 100);  // Top    left\n       CGContextAddLineToPoint(context, 300, 100);  // Middle right\n       CGContextAddLineToPoint(context, 150, 300);  // Bottom left\n       CGContextSetFillColorWithColor(context, [UIColor\n       greenColor].CGColor);\n       CGContextFillPath(context);\n    }\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n       [super viewDidLoad];\n\n       // Declare and add our custom view as a subView\n       // to the current view.\n       ShapesView *shapesView = [[ShapesView alloc] \n       initWithFrame:self.view.bounds];\n       [self.view addSubview:shapesView];\n    }\n    ```", "```swift\n    //  ViewController.h\n    //  ColorEffectsExample\n    //  Created by Steven F Daniel on 20/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import <UIKit/UIKit.h>\n\n    #define IMAGENAME @\"Frederick_Prince_of_Wales.jpg\"\n\n    @interface ViewController : UIViewController<UIActionSheetDelegate>\n\n    // Declare the Getters and Setters for each of our objects.\n    @property (strong, nonatomic) IBOutlet UIImageView *imageView;\n    ```", "```swift\n    @synthesize imageView;\n\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n      [super viewDidLoad];\n\n      // Set up and initialize our ImageView Controller.\n      self.imageView.image = [UIImage imageNamed:IMAGENAME];\n      self.imageView.contentMode = UIViewContentModeScaleAspectFill;\n    }\n    ```", "```swift\n    #pragma mark method called when the user taps the screen.\n    -(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {\n       // Initialize our Action Sheet with options\n       UIActionSheet *actionSheet = [[UIActionSheet alloc]\n       initWithTitle:@\"Available Transitions\"\n       delegate:self\n       cancelButtonTitle:@\"Cancel\"\n       destructiveButtonTitle:@\"Close\"\n       otherButtonTitles:@\"Vibrance\",@\"Sepia Tone\",@\"Reset\", nil];\n\n       // Display the actionsheet to the view.\n       [actionSheet showInView:self.view];\n    }\n    ```", "```swift\n    #pragma mark Delegate which handles the option buttons selected\n    - (void)actionSheet:(UIActionSheet *)actionSheetclickedButtonAtIndex:(NSInteger)buttonIndex {\n       CIImage*inputImage = [CIImage\n       imageWithCGImage:[self.imageView.image CGImage]];\n       CIContext *context = [CIContextcontextWithOptions:nil];\n       CIImage   *outputImage;\n       CIFilter  *filter;\n\n       // Determine the button selected and handle accordingly.\n       switch (buttonIndex) {\n          case 1: // Adjusts the saturation of the image \n             filter = [CIFilter filterWithName:@\"CIVibrance\"];\n             [filter setDefaults];\n             [filter setValue: inputImage forKey: @\"inputImage\"];\n             [filter setValue: [NSNumber numberWithFloat:1.00] \n             forKey: @\"inputAmount\"];\n             outputImage = [filter valueForKey: @\"outputImage\"];\n             break;\n          case 2:   // Set the Septia Tone of the image\n             filter = [CIFilter filterWithName:@\"CISepiaTone\"];\n             [filtersetDefaults];\n             [filter setValue: inputImage forKey:@\"inputImage\"];\n             [filter setValue: [NSNumber numberWithFloat:0.8] \n             forKey: @\"inputIntensity\"];\n             outputImage = [filter valueForKey:@\"outputImage\"];\n             break;\n       case 3: // Reset our image to the original state\n             self.imageView.image = [UIImage imageNamed:IMAGENAME];\n             break;\n          default:\n             NSLog(@\"Unsupported option detected.\");\n             break;\n       }\n       // Don't process if the Close and Cancel buttons are pressed\n       if (buttonIndex> 0 &&buttonIndex< 3) {\n          self.imageView.image = [UIImage imageWithCGImage:\n                            [context createCGImage:outputImage\n                                     fromRect:outputImage.extent]];\n       }\n    }\n    ```", "```swift\n    //  ViewController.m\n    //  TransitionsExample\n    //  Created by Steven F Daniel on 20/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import  \"ViewController.h\"\n    #import \"QuartzCore/QuartzCore.h\"\n\n    @synthesize imageView;\n\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n      [super viewDidLoad];\n\n      // Set up and initialize our ImageView Controller.\n      self.imageView.image = [UIImage\n      imageNamed:@\"Prince_Frederick.jpg\"];\n      self.imageView.contentMode = UIViewContentModeScaleAspectFill;\n    }\n    ```", "```swift\n    #pragma mark method called when the user taps the screen.\n    -(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n    {\n       // Applies the Ripple Effect transition to the view.\n       CATransition *animation = nil;\n       animation = [CATransition animation];\n       [animation setDelegate:self];\n       [animation setDuration:3.0f];\n       [animation setType:@\"rippleEffect\" ];\n       [self.view.layer addAnimation:animation forKey:NULL];\n    }\n    ```"]