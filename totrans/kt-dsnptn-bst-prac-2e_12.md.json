["```kt\nval clintEastwoodQuotes = mapOf(\n```", "```kt\n    \"The Good, The Bad, The Ugly\" to \"Every gun makes its       own tune.\",\n```", "```kt\n    \"A Fistful Of Dollars\" to \"My mistake: four coffins.\"\n```", "```kt\n)\n```", "```kt\nval quote = clintEastwoodQuotes[\"Unforgiven\"]\n```", "```kt\nif (quote != null) {\n```", "```kt\n    println(quote)\n```", "```kt\n} \n```", "```kt\nclintEastwoodQuotes[\"Unforgiven\"]?.let {\n```", "```kt\n    println(it)\n```", "```kt\n}\n```", "```kt\nclintEastwoodQuotes[\"Unforgiven\"].let {\n```", "```kt\n    println(it)\n```", "```kt\n}\n```", "```kt\nclass JamesBond { \n```", "```kt\n    lateinit var name: String \n```", "```kt\n    lateinit var movie: String \n```", "```kt\n    lateinit var alsoStarring: String \n```", "```kt\n} \n```", "```kt\nval agent = JamesBond() \n```", "```kt\nagent.name = \"Sean Connery\" \n```", "```kt\nagent.movie = \"Dr. No\"\n```", "```kt\nval `007` = JamesBond().apply { \n```", "```kt\n    this.name = \"Sean Connery\" \n```", "```kt\n    this.movie = \"Dr. No\" \n```", "```kt\n} \n```", "```kt\nprintln(`007`.name)\n```", "```kt\nval `007` = JamesBond().apply { \n```", "```kt\n    name = \"Sean Connery\" \n```", "```kt\n    movie = \"Dr. No\" \n```", "```kt\n}\n```", "```kt\nfun multiply(a: Int, b: Int): Int = a * b\n```", "```kt\nfun multiply(a: Int, b: Int): Int { \n```", "```kt\n    val c = a * b \n```", "```kt\n    println(c) \n```", "```kt\n    return c \n```", "```kt\n}\n```", "```kt\nfun multiply(a: Int, b: Int): Int = \n```", "```kt\n    (a * b).also { println(it) }\n```", "```kt\nval l = (1..100).toList() \n```", "```kt\nl.filter{ it % 2 == 0 } \n```", "```kt\n    // Prints, but doesn't mutate the collection\n```", "```kt\n    .also { println(it) }     \n```", "```kt\n    .map { it * it }\n```", "```kt\nval justAString = \"string\" \n```", "```kt\nval n = justAString.run {  \n```", "```kt\n    this.length \n```", "```kt\n}\n```", "```kt\nval n = justAString.run {  \n```", "```kt\n    length \n```", "```kt\n}\n```", "```kt\nval lowerCaseName = JamesBond().run {\n```", "```kt\n    name = \"ROGER MOORE\"\n```", "```kt\n    movie = \"THE MAN WITH THE GOLDEN GUN\"\n```", "```kt\n    name.toLowerCase() // <= Not JamesBond type\n```", "```kt\n}\n```", "```kt\nprintln(lowerCaseName)\n```", "```kt\n> roger moore\n```", "```kt\n\"scope\".with { ... }\n```", "```kt\nwith(\"scope\") { \n```", "```kt\n    println(this.length) // \"this\" set to the argument of                          // with() \n```", "```kt\n}\n```", "```kt\nwith(\"scope\") { \n```", "```kt\n    length \n```", "```kt\n}\n```", "```kt\ninterface Superhero \n```", "```kt\nclass Batman : Superhero { \n```", "```kt\n    fun callRobin() { \n```", "```kt\n        println(\"To the Bat-pole, Robin!\") \n```", "```kt\n    } \n```", "```kt\n} \n```", "```kt\nclass Superman : Superhero { \n```", "```kt\n    fun fly() { \n```", "```kt\n        println(\"Up, up and away!\") \n```", "```kt\n    } \n```", "```kt\n} \n```", "```kt\nfun doCoolStuff(s: Superhero) { \n```", "```kt\n    if (s is Superman) { \n```", "```kt\n        (s as Superman).fly() \n```", "```kt\n    } \n```", "```kt\n    else if (s is Batman) { \n```", "```kt\n        (a as Batman).callRobin() \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nfun doCoolStuff(s: Superhero) { \n```", "```kt\n    if (s is Superman) { \n```", "```kt\n        s.fly() \n```", "```kt\n    } \n```", "```kt\n    else if (s is Batman) { \n```", "```kt\n        s.callRobin() \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nfun doCoolStuff(s : Superhero) { \n```", "```kt\n    when(s) { \n```", "```kt\n        is Superman -> s.fly() \n```", "```kt\n        is Batman -> s.callRobin() \n```", "```kt\n        else -> println(\"Unknown superhero\") \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\n// Superhero is clearly not a string \n```", "```kt\nval superheroAsString = (s as String)\n```", "```kt\nval superheroAsString = (s as? String)\n```", "```kt\nBufferedReader br = null; // Nulls are bad, we know that \n```", "```kt\ntry { \n```", "```kt\n    br = new BufferedReader(new FileReader\n```", "```kt\n      (\"./src/main/kotlin/7_TryWithResource.kt \"));\n```", "```kt\n    System.out.println(br.readLine());\n```", "```kt\n} \n```", "```kt\nfinally { \n```", "```kt\n    if (br != null) { // Explicit check \n```", "```kt\n        br.close(); // Boilerplate \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\ntry (BufferedReader br = new BufferedReader(new   FileReader(\"/some/path\"))) { \n```", "```kt\n    System.out.println(br.readLine()); \n```", "```kt\n}\n```", "```kt\nval br = BufferedReader(FileReader(\"./src/main   /kotlin/7_TryWithResource.kt\"))\n```", "```kt\nbr.use {\n```", "```kt\n    println(it.readLines())\n```", "```kt\n}\n```", "```kt\ninline fun logBeforeAfter(block: () -> String) { \n```", "```kt\n    println(\"Before\") \n```", "```kt\n    println(block()) \n```", "```kt\n    println(\"After\") \n```", "```kt\n}\n```", "```kt\nlogBeforeAfter { \n```", "```kt\n    \"Inlining\" \n```", "```kt\n}\n```", "```kt\nString var1 = \"Before\"; <- Inline function call \n```", "```kt\nSystem.out.println(var1); \n```", "```kt\nvar1 = \"Inlining\"; \n```", "```kt\nSystem.out.println(var1); \n```", "```kt\nvar1 = \"After\"; \n```", "```kt\nSystem.out.println(var1); \n```", "```kt\nsealed interface Tree<out T>\n```", "```kt\nobject Empty : Tree<Nothing> {\n```", "```kt\n    override fun toString() = \"Empty\"\n```", "```kt\n}\n```", "```kt\ndata class Node<T>(\n```", "```kt\n    val value: T,\n```", "```kt\n    val left: Tree<T> = Empty,\n```", "```kt\n    val right: Tree<T> = Empty\n```", "```kt\n) : Tree<T>\n```", "```kt\nval tree = Node(\n```", "```kt\n    1,\n```", "```kt\n    Empty,\n```", "```kt\n    Node(\n```", "```kt\n        2,\n```", "```kt\n        Node(3)\n```", "```kt\n    )\n```", "```kt\n)\n```", "```kt\nprintln(tree)\n```", "```kt\n> Node(value=1, left=Empty, right=Node(value=2, left=Node(value=3, left=Empty, right=Empty), right=Empty))\n```", "```kt\nfun Tree<Int>.sum(): Long = when (this) {\n```", "```kt\n    Empty -> 0\n```", "```kt\n    is Node -> value + left.sum() + right.sum()\n```", "```kt\n}\n```", "```kt\nfun <T> printIfSameType(a: Number) { \n```", "```kt\n    if (a is T) { // <== Error \n```", "```kt\n        println(a)    \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\n> Cannot check for instance of erased type: T\n```", "```kt\nfun <T : Number> printIfSameType(clazz: KClass<T>, a: \n```", "```kt\n  Number) {\n```", "```kt\n    if (clazz.isInstance(a)) {\n```", "```kt\n        println(\"Yes\")\n```", "```kt\n    } else {\n```", "```kt\n        println(\"No\")\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nprintIfSameType(Int::class, 1) // Prints yes, as 1 is Int\n```", "```kt\nprintIfSameType(Int::class, 2L) // Prints no, as 2 is Long\n```", "```kt\nprintIfSameType(Long::class, 3L) // Prints yes, as 3 is Long\n```", "```kt\ninline fun <reified T : Number> printIfSameReified(a:   Number) {\n```", "```kt\n    if (a is T) {\n```", "```kt\n        println(\"Yes\")\n```", "```kt\n    } else {\n```", "```kt\n        println(\"No\")\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nprintIfSameReified<Int>(1) // Prints yes, as 1 is Int\n```", "```kt\nprintIfSameReified<Int>(2L) // Prints no, as 2 is Long\n```", "```kt\nprintIfSameReified<Long>(3L) // Prints yes, as 3 is Long\n```", "```kt\nfun printList(list: List<Int>) { \n```", "```kt\n    println(\"This is a list of Ints\") \n```", "```kt\n    println(list) \n```", "```kt\n} \n```", "```kt\nfun printList(list: List<Long>) { \n```", "```kt\n    println(\"This is a list of Longs\") \n```", "```kt\n    println(list) \n```", "```kt\n}\n```", "```kt\ninline fun <reified T : Any> printList(list: List<T>) {\n```", "```kt\n    when {\n```", "```kt\n        1 is T -> println(\"This is a list of Ints\")\n```", "```kt\n        1L is T -> println(\"This is a list of Longs\")\n```", "```kt\n        else -> println(\"This is a list of something else\")\n```", "```kt\n    }\n```", "```kt\n    println(list)\n```", "```kt\n}\n```", "```kt\nclass Spock {\n```", "```kt\n    companion object {\n```", "```kt\n        val SENSE_OF_HUMOR = \"None\"\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\npublic class Spock {\n```", "```kt\n    private static final String SENSE_OF_HUMOR = \"None\";\n```", "```kt\n    public String getSENSE_OF_HUMOR() {\n```", "```kt\n        return Spock.SENSE_OF_HUMOR;\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nString var0 = Spock.Companion.getSENSE_OF_HUMOR();\n```", "```kt\nSystem.out.println(var0);\n```", "```kt\nclass Spock { \n```", "```kt\n    companion object { \n```", "```kt\n        const val SENSE_OF_HUMOR = \"None\" \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\npublic class Spock { \n```", "```kt\n   public static final String SENSE_OF_HUMOR = \"None\"; \n```", "```kt\n   ...\n```", "```kt\n}\n```", "```kt\nString var1 = \"None\"; \n```", "```kt\nSystem.out.println(var1);\n```", "```kt\nconst val SPOCK_SENSE_OF_HUMOR = \"NONE\"\n```", "```kt\nobject SensesOfHumor { \n```", "```kt\n    const val SPOCK = \"None\" \n```", "```kt\n}\n```", "```kt\nclass User { \n```", "```kt\n    private final String name; \n```", "```kt\n    private final boolean resetPassword; \n```", "```kt\n    public User(String name) { \n```", "```kt\n        this(name, true); \n```", "```kt\n    } \n```", "```kt\n    public User(String name, boolean resetPassword) { \n```", "```kt\n        this.name = name; \n```", "```kt\n        this.resetPassword = resetPassword; \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nclass User(val name: String, val resetPassword: Boolean) {\n```", "```kt\n    constructor(name: String) : this(name, true)\n```", "```kt\n}\n```", "```kt\nclass User(val name: String, val resetPassword: Boolean =   true)\n```", "```kt\nclass User {\n```", "```kt\n    val resetPassword: Boolean\n```", "```kt\n    val name: String\n```", "```kt\n    constructor(name: String, resetPassword: Boolean = \n```", "```kt\n      true) {\n```", "```kt\n        this.name = name\n```", "```kt\n        this.resetPassword = resetPassword\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n// Will return \"String\" half of the time and null the other \n```", "```kt\n// half \n```", "```kt\nval stringOrNull: String? = if (Random.nextBoolean()) \n```", "```kt\n  \"String\" else null  \n```", "```kt\n// Java-way check \n```", "```kt\nif (stringOrNull != null) { \n```", "```kt\n    println(stringOrNull.length) \n```", "```kt\n}\n```", "```kt\nval alwaysLength = stringOrNull?.length ?: 0 \n```", "```kt\ndata class Response(\n```", "```kt\n    val profile: UserProfile?\n```", "```kt\n)\n```", "```kt\ndata class UserProfile(\n```", "```kt\n    val firstName: String?,\n```", "```kt\n    val lastName: String?\n```", "```kt\n)\n```", "```kt\nval response: Response? = Response(UserProfile(null, null))\n```", "```kt\nprintln(response?.profile?.firstName?.length)\n```", "```kt\nprintln(response?.let { \n```", "```kt\n    it.profile?.let { \n```", "```kt\n        it.firstName?.length \n```", "```kt\n    } \n```", "```kt\n})\n```", "```kt\nprintln(response?.run { \n```", "```kt\n    profile?.run { \n```", "```kt\n        firstName?.length \n```", "```kt\n    } \n```", "```kt\n})\n```", "```kt\nprintln(json!!.User!!.firstName!!.length)\n```", "```kt\nfun CoroutineScope.getResult() = async { \n```", "```kt\n   delay(100) \n```", "```kt\n   \"OK\" \n```", "```kt\n}\n```", "```kt\nprintln(\"${getResult()}\")\n```", "```kt\n> Name: DeferredCoroutine{Active}@...\n```", "```kt\nprintln(\"${getResult().await()}\")\n```", "```kt\nfun CoroutineScope.getResultAsync() = async { \n```", "```kt\n   delay(100) \n```", "```kt\n   \"OK\" \n```", "```kt\n}\n```", "```kt\nfun setCapacity(cap: Int) { \n```", "```kt\n    if (cap < 0) { \n```", "```kt\n        throw IllegalArgumentException() \n```", "```kt\n    } \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nfun setCapacity(cap: Int) { \n```", "```kt\n    require(cap > 0) \n```", "```kt\n}\n```", "```kt\nfun printNameLength(p: Profile) { \n```", "```kt\n    require(p.firstName != null) \n```", "```kt\n}\n```", "```kt\nfun printNameLength(p: Profile) { \n```", "```kt\n    requireNotNull(p.firstName) \n```", "```kt\n}\n```", "```kt\nclass HttpClient { \n```", "```kt\n    var body: String? = null \n```", "```kt\n    var url: String = \"\" \n```", "```kt\n    fun postRequest() { \n```", "```kt\n        check(body != null) { \n```", "```kt\n            \"Body must be set in POST requests\" \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\n// Java-like code that uses enum to represent State\n```", "```kt\nenum class PizzaOrderStatus {\n```", "```kt\n    ORDER_RECEIVED, PIZZA_BEING_MADE, OUT_FOR_DELIVERY,      COMPLETED;\n```", "```kt\n    fun nextStatus(): PizzaOrderStatus {\n```", "```kt\n        return when (this) {\n```", "```kt\n            ORDER_RECEIVED -> PIZZA_BEING_MADE\n```", "```kt\n            PIZZA_BEING_MADE -> OUT_FOR_DELIVERY\n```", "```kt\n            OUT_FOR_DELIVERY -> COMPLETED\n```", "```kt\n            COMPLETED -> COMPLETED\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nsealed class PizzaOrderStatus(protected val orderId: Int) {\n```", "```kt\n    abstract fun nextStatus(): PizzaOrderStatus\n```", "```kt\n}\n```", "```kt\nclass OrderReceived(orderId: Int) : \n```", "```kt\n  PizzaOrderStatus(orderId) {\n```", "```kt\n    override fun nextStatus() = PizzaBeingMade(orderId)\n```", "```kt\n}\n```", "```kt\nclass PizzaBeingMade(orderId: Int) : \n```", "```kt\n  PizzaOrderStatus(orderId) {\n```", "```kt\n    override fun nextStatus() = OutForDelivery(orderId)\n```", "```kt\n}\n```", "```kt\nclass OutForDelivery(orderId: Int) : \n```", "```kt\n  PizzaOrderStatus(orderId) {\n```", "```kt\n    override fun nextStatus() = Completed(orderId)\n```", "```kt\n}\n```", "```kt\nclass Completed(orderId: Int) : PizzaOrderStatus(orderId) {\n```", "```kt\n    override fun nextStatus() = this\n```", "```kt\n}\n```", "```kt\nvar status: PizzaOrderStatus = OrderReceived(123) \n```", "```kt\nwhile (status !is Completed) { \n```", "```kt\n    status = when (status) { \n```", "```kt\n        is OrderReceived -> status.nextStatus() \n```", "```kt\n        is PizzaBeingMade -> status.nextStatus() \n```", "```kt\n        is OutForDelivery -> status.nextStatus() \n```", "```kt\n        is Completed -> status \n```", "```kt\n    } \n```", "```kt\n}\n```"]