- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iPhone Project – Tax Calculator Functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will work on implementing the tax calculation and page navigation
    functionality in our first project, the tax calculator. In the previous chapter,
    we looked at the design of the calculator and broke it down into two views and
    all the components required. We then implemented all the components using SwiftUI.
    At the end of the previous chapter, we effectively only had a fancy wireframe.
    Now, we will implement all the functionality to provide navigation between the
    two views, calculating the tax breakdown and displaying the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will be split into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigating from `ContentView` to `ResultsView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating tax breakdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have created a fully functional tax calculator
    that can be used as a foundation. I’ll provide exercises as we reach the end of
    the chapter to implement more advanced functionality within the tax calculator.
    The code is yours to use, modify, and distribute as you see fit. This will transition
    nicely into our next project, the iPad gallery app.
  prefs: []
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: To install Xcode, just search for `Xcode` in the App Store, and select and download
    the latest version. Open Xcode and follow any additional installation instructions.
    Once Xcode has opened and launched, you’re ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 14 of Xcode has the following features/requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires a Mac running macOS Monterey 12.5 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For further information regarding the technical details, please refer to [*Chapter
    1*](B18783_01.xhtml#_idTextAnchor014).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code files for this chapter and the previous chapter to use as a base can
    be found here: [https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  prefs: []
  type: TYPE_NORMAL
- en: Navigating from ContentView to ResultsView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will finally implement the navigational system for moving
    from `ContentView` to `ResultsView` and back again.
  prefs: []
  type: TYPE_NORMAL
- en: If you recall back to the previous chapter, when viewing the UI for the `ResultsView`,
    we were forced to use the Live Preview Window instead of running the application.
    The reason was that there was no functionality for navigating from `ContentView`
    to `ResultsView`. We have already added the button for calculating the tax, but
    we need to implement the code for the button triggering the navigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to wrap our `VStack` in `ContentView` in a `NavigationView`.
    The `NavigationView` allows us to present a stack of views which is very useful
    for navigation, as it effectively has a history of all previous views, allowing
    an easy and extendable navigation system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We have now implemented `NavigationView`, which allows us to use our existing
    code and design for navigation. There is one extra piece of code we require –
    a `GoToResultsView` function. An empty version has been added to the preceding
    code. We will use it later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'As of now, this won’t have any effect on our application, as we need to modify
    the button to become a `NavigationLink`, which is basically a fancy button allowing
    us to navigate between views. Fortunately for us, it can be styled in any way
    we desire, but first let’s implement a basic `NavigationLink`. To do this, replace
    the button code in `ContentView` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code we just added. The first parameter it takes is the
    destination for the application’s view system, so the new view that will be pushed
    onto the stack. We have specified `ResultsView` but you could easily specify a
    simple component, which would create its own view. The next parameter is called
    `label`; this is similar to the label specified in the button itself. Currently,
    we have a `Text` component, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Basic NavigationLink button](img/Figure_3.01_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Basic NavigationLink button
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s style the `NavigationLink` button and modify the code to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added five main style aspects to the button. Let’s take a look at each
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.bold( )`: Makes the text bold'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.frame( width: 200, height: 50 )`: Sets the size of the button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.background( Color.blue )`: Sets the background color to blue'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.foregroundColor( Color.white )`: Sets the text color to white'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.cornerRadius( 10 )`: Makes the button’s corners rounded, giving a more natural,
    iOS-like feel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After these styles have been applied to the application and, more specifically,
    the button, it will look like the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – NavigationLink button styled](img/Figure_3.02_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – NavigationLink button styled
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now add a navigation title. This provides a nice consistent method
    for adding a title/header to the view. This is simple – add the following code
    to the bottom of the `VStack`, just after the padding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the application will show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Navigation title](img/Figure_3.03_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Navigation title
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating to `ResultsView` by clicking the **Calculate Tax** button will show
    that the back button’s text in the top left is now the same as the navigation
    title that was added. This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Updated back button text](img/Figure_3.04_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Updated back button text
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now update `ResultsView` to use a navigation title instead of a `Text`
    component for the heading of the page. First, we need to remove the `Text` component
    with the following code from `ResultsView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that `ResultsView` has no title, let’s add the navigation link. Like before,
    add the following code after the `VStack`, right after the padding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This little addition will change `ResultsView` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – ResultsView navigation title](img/Figure_3.05_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – ResultsView navigation title
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we have added a fair bit of code. This is what the `ContentView` and `ResultsView`
    code should look like before we move on:'
  prefs: []
  type: TYPE_NORMAL
- en: ContentView
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: ResultsView
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Wow, we have done a lot. Take the time to pat yourself on the back. All this
    allowed us to implement a seamless yet familiar navigation system. We learned
    how to implement a navigation system to navigate to `ResultsView` and back to
    `ContentView` easily.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will validate the salary to make sure we do not pass
    through any data that is incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: Validating salary input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As of now, if you press the **Calculate Tax** button, it takes the user to
    the results page from the front page. However, it does this regardless of input,
    so it will go to the next page even if there is no salary. The following validation
    checks must be done for it to be an acceptable value:'
  prefs: []
  type: TYPE_NORMAL
- en: Does it contain a value that is a number?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the value above 0 (this rules out negatives)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You might be wondering why we can’t just check whether the salary is above
    0 as we have chosen a decimal keypad. There are two main reasons for this:'
  prefs: []
  type: TYPE_NORMAL
- en: The user can insert decimal points in a way that makes the input `4.5.6..`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though the user cannot directly type text due to the keyboard being a decimal
    pad, they can still copy it from another application and paste it into our calculator,
    thus breaking the number-only `TextField`. You may think it’s worth just disabling
    pasting but it’s important to retain this functionality, as the user may legitimately
    want to paste a number instead of typing it out, especially if it isn’t a simple
    small number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not correctly handled, the application will crash upon the user pressing
    the **Calculate Tax** button. The way we will achieve these conditions is explained
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Using a variable to track if the salary is valid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a Boolean variable after the salary string to track whether the
    salary is valid; if it is, then `ResultsView` will be displayed. The salary string
    is only checked when the **Calculate Tax** button is pressed. Add the following
    code before the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: isActive NavigationLink
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will link the `isSalaryValid` variable created previously with `NavigationLink`
    using the `isActive` parameter. Update the `NavigationLink` code to look like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`isActive` is a simple concept – if `true`, it immediately takes you to the
    destination view, and if it is `false`, then nothing happens.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will validate the salary.
  prefs: []
  type: TYPE_NORMAL
- en: Validating the salary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, we will override the tap gesture and call a custom function called
    `GoToResultsView`. Add the following code to the end of all text properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we must check whether the string is valid, then navigate to the results
    view. Add the following function to handle this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s unpack this function to see what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '`if ( Float( salary ) != nil )`: Checks whether the salary is a number. This
    is accomplished by casting the string to a `Float`. If unsuccessful, it is `nil`
    – this allows us to check for this. This also includes validating an empty string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if ( Float( salary )! > 0 )`: Checks whether the salary is greater than zero.
    The exclamation mark says that the variable salary is definitely a `Float` to
    avoid any problems, as it’s already been checked we can do this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isSalaryValid = true`: Sets the `isSalaryValid` check variable to `true`,
    which triggers `ResultsView` and loads it up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these additions should result in the following code in the following
    `ContentView` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code, we validated the salary, and a variable was used to
    track the status of the validation, which allowed us to navigate to `ResultsView`
    when it was validated.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will pass the salary between `ContentView` and `ResultsView`.
  prefs: []
  type: TYPE_NORMAL
- en: Passing the salary through to ResultsView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of now, when we click `ResultsView` is still using dummy data. Let’s change
    that by passing in the salary we validated in the previous section. Doing this
    is simple when using State and Bind. The salary variable in `ContentView` is already
    a state variable, simply meaning when it changes, the part of the view linked
    to it also changes and vice versa. When we change the text in the `TextField`
    salary, our application updates the state variable. We can use a binding variable
    in `ResultsView`, which allows us to pass in data between views.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in `ResultsView`, add the following line above the `taxBreakdown` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This simply declares a `salary` variable of type `String`, which is the same
    format as the `salary` variable in `ContentView`. `@Binding` just states that
    it is expecting this value to be passed in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we must update `NavigationLink` to pass in the `salary` variable from `ContentView`
    to `ResultsView` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Though we have completed all the binding, if we try and run the application,
    the following error will be thrown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Preview error](img/Figure_3.06_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Preview error
  prefs: []
  type: TYPE_NORMAL
- en: 'This error relates to the preview view, which appears usually to the right
    of the code. Without this, the preview cannot run. To fix this error, we can give
    a default hardcoded value just for the preview. Update the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now once we run the application, we get no errors because we solved the missing
    argument error, and can move on to calculating the tax breakdown from the salary
    we passed through.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to test to make sure the variable has been passed through,
    you can use a breakpoint or `print` statement. I will let you do that as an extra
    task.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating tax breakdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we passed through the `salary` variable, but we still
    need to calculate the tax. I will be doing it in line with the UK income tax rates
    of 2023/2024, but this can be adapted easily for any other tax system. In the
    following table, we have the tax rates for 2023/2024:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Income** | **Tax rate** |  |'
  prefs: []
  type: TYPE_TB
- en: '| Up to £12,570 | 0% | Personal allowance |'
  prefs: []
  type: TYPE_TB
- en: '| £12,571 to £37,700 | 20% | Basic rate |'
  prefs: []
  type: TYPE_TB
- en: '| £37,701 to £150,000 | 40% | Higher rate |'
  prefs: []
  type: TYPE_TB
- en: '| over £150,000 | 45% | Additional rate |'
  prefs: []
  type: TYPE_TB
- en: Table 3.1 – Tax brackets
  prefs: []
  type: TYPE_NORMAL
- en: As there are brackets and not a single fixed tax, we will need to do a few calculations
    to figure out the exact tax to be deducted. On top of the income tax, there is
    also national insurance tax. National insurance tax isn’t so simple as there are
    different categories, but let’s keep it at a simple 13%, which it roughly is.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are definitely more aspects to calculating tax, such as pension contributions,
    student loans, and so on; however, we will leave it at this.
  prefs: []
  type: TYPE_NORMAL
- en: Tax calculation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s implement a formula in `ResultsView` to calculate the income tax. Add
    the following code at the start of the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We check each tax bracket and calculate the tax accordingly. Next, we will
    calculate the national insurance. First, add another double variable below `incomeTax`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can simply calculate it by multiplying the salary by `0.13` to get `13%`.
    Add the following code below the income tax calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have all of the taxes calculated, we can move on to working out
    the post-tax salary. This is simple – we just subtract the income tax and national
    insurance tax from the salary. Add the following code beneath the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s format these values into strings, which will be used when displaying
    the tax figures. Add the following code below `post-tax` `salary` calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a string from the respective numbers rounded to two decimal places.
    Next, move the `taxBreakdown` hardcoded pie chart array beneath the formatted
    strings, and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We are using let instead of var as it won’t need to be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are finally ready to start updating each component in the UI. First,
    we will update the `Text` components, which display the `Before Tax` and `After
    Tax` figures like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, update `ProgressView` to display the correct percentage and value
    for the tax and salary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason for dividing the `postTaxSalary` and `incomeTax` variables by `salaryNum`
    and multiplying it by `100` is to work out the percentage for `ProgressView`.
    Before running, update the `VStack` to be returned. There seems to be an issue
    with the code, causing conflicts for the compiler. To resolve this, we need to
    explicitly state what to draw by returning it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run our application and insert the salary of £100,000, `ResultsView`
    will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – ResultsView updated](img/Figure_3.07_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – ResultsView updated
  prefs: []
  type: TYPE_NORMAL
- en: 'That definitely was tiring, all that code. For reference, here is what the
    `ContentView` and `ResultsView` code should look like before moving on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ContentView:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'ResultsView:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will fix an error that occurs in `ContentView`; see
    whether you can figure out what the error is.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the ContentView binding error
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is an error in `ContentView`. It can be triggered by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `ResultsView` by clicking the **Calculate** **Tax** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to `ContentView` by pressing the back arrow on the top left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Input invalid data, which can be any of the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete all the text in `TextField`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Space character
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Any non-numerical character
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Two or more decimal points
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once these steps are complete, the following error will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Invalid input error](img/Figure_3.08_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Invalid input error
  prefs: []
  type: TYPE_NORMAL
- en: 'This occurs because the variable is bound to `ResultsView`, which uses the
    value numerically. As the input is no longer numerical, it crashes. The problem
    is that `Double( salary )` returns `nil` and forces it to be assigned using `!`,
    which makes it crash. We will default assign a value of `0` to the `salaryNum`
    variable and if it’s not `nil`, then cast the salary string as `Double`. Update
    the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the coalescing operator to reduce the preceding
    check as follows: `let salaryNum = Double( salary ) ?? 0`. For more information
    on the coalescing operator, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Nil-Coalescing-Operator](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Nil-Coalescing-Operator).'
  prefs: []
  type: TYPE_NORMAL
- en: First, we change the variable to `var` instead of `let` as it needs to be modifiable
    just for checking whether the cast equates to `nil`. Then, we check that it’s
    not `nil` and assign the value accordingly. *Assigning 0 won’t have any effect
    as the view isn’t visible at this time*. Now if you run the application, it won’t
    crash if you followed the preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will rename `ContentView`.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming ContentView to FrontView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this small section, we will change `ContentView`’s name to `FrontView`. The
    default name of `ContentView` doesn’t provide much information to us. We will
    rename it `FrontView`. You could rename the file and manually change every occurrence
    of `ContentView` to `FrontView`, which wouldn’t be too tedious in an application
    this size. However, in a larger and more complex application, it would take away
    a lot of valuable development time. We can use Xcode’s renaming tool to aid us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply go to any reference to `ContentView` in the application’s code, right-click
    it, and go to **Refactor** | **Rename…**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Rename… button](img/Figure_3.09_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Rename… button
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next view, set the name to `FrontView` and press *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Xcode renaming tool](img/Figure_3.10_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Xcode renaming tool
  prefs: []
  type: TYPE_NORMAL
- en: Renaming files and updating all references is as easy as that. This also works
    for variables and functions; feel free to use it whenever you need to.
  prefs: []
  type: TYPE_NORMAL
- en: We have now completed the calculator application; in the next section, you will
    see some of the extra tasks for you to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Extra tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the application is complete, here is a list of tasks for you to complete
    to enhance your application and also to test your knowledge of the concepts learned
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Show an error when submitting an invalid salary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting salary and tax components with commas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstracting tax brackets and percentages to make the app more dynamic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie chart labeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different types of tax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corporation tax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inheritance tax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide more inputs for the current salary calculator such as pension contributions
    and student loans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back button styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If at any point you require help, feel free to join my Discord group at [https://discord.gg/7e78FxrgqH](https://discord.gg/7e78FxrgqH).
  prefs: []
  type: TYPE_NORMAL
- en: We will summarize what we have covered in this chapter. However, before that,
    I will provide additional code for the extra tasks for you to implement at your
    own leisure.
  prefs: []
  type: TYPE_NORMAL
- en: Different tax options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add different tax options to your code, you can modify `ResultsView` to
    include a picker or segmented control for selecting different tax options. Here’s
    an example of how you can modify your code to add a picker for tax options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'import SwiftUIstruct FrontView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: '@State private var salary: String = ""'
  prefs: []
  type: TYPE_NORMAL
- en: '@State private var isSalaryValid: Bool = false'
  prefs: []
  type: TYPE_NORMAL
- en: '@State private var selectedGeography: Geography = .country("USA") // Default
    geography'
  prefs: []
  type: TYPE_NORMAL
- en: enum Geography {
  prefs: []
  type: TYPE_NORMAL
- en: case country(String)
  prefs: []
  type: TYPE_NORMAL
- en: case state(String, String) // Country, State
  prefs: []
  type: TYPE_NORMAL
- en: 'var displayText: String {'
  prefs: []
  type: TYPE_NORMAL
- en: switch self {
  prefs: []
  type: TYPE_NORMAL
- en: 'case .country(let country):'
  prefs: []
  type: TYPE_NORMAL
- en: return country
  prefs: []
  type: TYPE_NORMAL
- en: 'case .state(let country, let state):'
  prefs: []
  type: TYPE_NORMAL
- en: return "\(state), \(country)"
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs: []
  type: TYPE_NORMAL
- en: NavigationView {
  prefs: []
  type: TYPE_NORMAL
- en: VStack {
  prefs: []
  type: TYPE_NORMAL
- en: Text("Annual Salary")
  prefs: []
  type: TYPE_NORMAL
- en: .padding(.bottom, 75.0)
  prefs: []
  type: TYPE_NORMAL
- en: 'TextField("", text: $salary)'
  prefs: []
  type: TYPE_NORMAL
- en: '.frame(width: 200.0)'
  prefs: []
  type: TYPE_NORMAL
- en: '.border(Color.black, width: 1)'
  prefs: []
  type: TYPE_NORMAL
- en: .padding(.bottom, 75.0)
  prefs: []
  type: TYPE_NORMAL
- en: .keyboardType(.decimalPad)
  prefs: []
  type: TYPE_NORMAL
- en: 'Picker("Geography", selection: $selectedGeography) {'
  prefs: []
  type: TYPE_NORMAL
- en: Text("USA").tag(Geography.country("USA"))
  prefs: []
  type: TYPE_NORMAL
- en: Text("California, USA").tag(Geography.state("USA", "California"))
  prefs: []
  type: TYPE_NORMAL
- en: // Add more geography options as needed
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .pickerStyle(SegmentedPickerStyle())
  prefs: []
  type: TYPE_NORMAL
- en: .padding(.bottom, 75.0)
  prefs: []
  type: TYPE_NORMAL
- en: 'NavigationLink(destination: ResultsView(salary: $salary, geography: selectedGeography),
    isActive: $isSalaryValid) {'
  prefs: []
  type: TYPE_NORMAL
- en: Text("Calculate Tax")
  prefs: []
  type: TYPE_NORMAL
- en: .bold()
  prefs: []
  type: TYPE_NORMAL
- en: '.frame(width: 200, height: 50)'
  prefs: []
  type: TYPE_NORMAL
- en: .background(Color.blue)
  prefs: []
  type: TYPE_NORMAL
- en: .foregroundColor(Color.white)
  prefs: []
  type: TYPE_NORMAL
- en: .cornerRadius(10)
  prefs: []
  type: TYPE_NORMAL
- en: .onTapGesture {
  prefs: []
  type: TYPE_NORMAL
- en: goToResultsView()
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .padding()
  prefs: []
  type: TYPE_NORMAL
- en: .navigationTitle("Main Page")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: func goToResultsView() {
  prefs: []
  type: TYPE_NORMAL
- en: if let salaryFloat = Float(salary), salaryFloat > 0 {
  prefs: []
  type: TYPE_NORMAL
- en: isSalaryValid = true
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'struct ResultsView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: 'var salary: String'
  prefs: []
  type: TYPE_NORMAL
- en: 'var geography: FrontView.Geography'
  prefs: []
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs: []
  type: TYPE_NORMAL
- en: VStack {
  prefs: []
  type: TYPE_NORMAL
- en: Text("Results")
  prefs: []
  type: TYPE_NORMAL
- en: .font(.title)
  prefs: []
  type: TYPE_NORMAL
- en: .padding()
  prefs: []
  type: TYPE_NORMAL
- en: 'Text("Salary: \(salary)")'
  prefs: []
  type: TYPE_NORMAL
- en: .padding()
  prefs: []
  type: TYPE_NORMAL
- en: 'Text("Geography: \(geography.displayText)")'
  prefs: []
  type: TYPE_NORMAL
- en: .padding()
  prefs: []
  type: TYPE_NORMAL
- en: // Calculate and display tax breakdown based on the selected geography
  prefs: []
  type: TYPE_NORMAL
- en: Spacer()
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .navigationTitle("Results")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'struct ContentView_Previews: PreviewProvider {'
  prefs: []
  type: TYPE_NORMAL
- en: 'static var previews: some View {'
  prefs: []
  type: TYPE_NORMAL
- en: FrontView()
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: import SwiftUIimport SwiftUICharts
  prefs: []
  type: TYPE_NORMAL
- en: 'struct ResultsView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: '@Binding var salary: String'
  prefs: []
  type: TYPE_NORMAL
- en: 'var geography: FrontView.Geography'
  prefs: []
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs: []
  type: TYPE_NORMAL
- en: 'let salaryNum: Double = Double(salary) ?? 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'let taxBreakdown = calculateTaxBreakdown(for: salaryNum, in: geography)'
  prefs: []
  type: TYPE_NORMAL
- en: let salaryString = formatCurrency(salaryNum)
  prefs: []
  type: TYPE_NORMAL
- en: let postTaxSalaryString = formatCurrency(taxBreakdown.postTaxSalary)
  prefs: []
  type: TYPE_NORMAL
- en: let incomeTaxString = formatCurrency(taxBreakdown.incomeTax)
  prefs: []
  type: TYPE_NORMAL
- en: let nationalInsuranceTaxString = formatCurrency(taxBreakdown.nationalInsuranceTax)
  prefs: []
  type: TYPE_NORMAL
- en: return VStack {
  prefs: []
  type: TYPE_NORMAL
- en: PieChart()
  prefs: []
  type: TYPE_NORMAL
- en: .data(taxBreakdown.chartData)
  prefs: []
  type: TYPE_NORMAL
- en: '.chartStyle(ChartStyle(backgroundColor: .white, foregroundColor: ColorGradient(.blue,
    .purple)))'
  prefs: []
  type: TYPE_NORMAL
- en: Text("Before Tax")
  prefs: []
  type: TYPE_NORMAL
- en: '.font(.system(size: 32))'
  prefs: []
  type: TYPE_NORMAL
- en: .padding(.vertical)
  prefs: []
  type: TYPE_NORMAL
- en: Text(salaryString)
  prefs: []
  type: TYPE_NORMAL
- en: '.font(.system(size: 32))'
  prefs: []
  type: TYPE_NORMAL
- en: .padding(.vertical)
  prefs: []
  type: TYPE_NORMAL
- en: Text("After Tax")
  prefs: []
  type: TYPE_NORMAL
- en: '.font(.system(size: 32))'
  prefs: []
  type: TYPE_NORMAL
- en: .padding(.vertical)
  prefs: []
  type: TYPE_NORMAL
- en: Text(postTaxSalaryString)
  prefs: []
  type: TYPE_NORMAL
- en: '.font(.system(size: 32))'
  prefs: []
  type: TYPE_NORMAL
- en: .padding(.vertical)
  prefs: []
  type: TYPE_NORMAL
- en: Group {
  prefs: []
  type: TYPE_NORMAL
- en: Text("Post Tax Salary")
  prefs: []
  type: TYPE_NORMAL
- en: 'ProgressView(postTaxSalaryString, value: taxBreakdown.postTaxPercentage, total:
    100)'
  prefs: []
  type: TYPE_NORMAL
- en: Text("Tax")
  prefs: []
  type: TYPE_NORMAL
- en: 'ProgressView(incomeTaxString, value: taxBreakdown.incomeTaxPercentage, total:
    100)'
  prefs: []
  type: TYPE_NORMAL
- en: Text("National Insurance")
  prefs: []
  type: TYPE_NORMAL
- en: 'ProgressView(nationalInsuranceTaxString, value: taxBreakdown.nationalInsurancePercentage,
    total: 100)'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .padding()
  prefs: []
  type: TYPE_NORMAL
- en: .navigationBarTitle("Summary")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'private func calculateTaxBreakdown(for salary: Double, in geography: FrontView.Geography)
    -> TaxBreakdown {'
  prefs: []
  type: TYPE_NORMAL
- en: 'var incomeTax: Double = 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'var nationalInsuranceTax: Double = 0'
  prefs: []
  type: TYPE_NORMAL
- en: if salary > 12570 {
  prefs: []
  type: TYPE_NORMAL
- en: if salary > 37700 {
  prefs: []
  type: TYPE_NORMAL
- en: if salary > 150000 {
  prefs: []
  type: TYPE_NORMAL
- en: incomeTax += (37700 - 12571) * 0.2
  prefs: []
  type: TYPE_NORMAL
- en: incomeTax += (150000 - 37701) * 0.4
  prefs: []
  type: TYPE_NORMAL
- en: incomeTax += (salary - 150000) * 0.45
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: incomeTax += (37700 - 12571) * 0.2
  prefs: []
  type: TYPE_NORMAL
- en: incomeTax += (salary - 37700) * 0.4
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: incomeTax += (salary - 12570) * 0.2
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: nationalInsuranceTax = salary * 0.13
  prefs: []
  type: TYPE_NORMAL
- en: let postTaxSalary = salary - incomeTax - nationalInsuranceTax
  prefs: []
  type: TYPE_NORMAL
- en: 'let chartData: [(String, Double)] = [("Post Tax Salary", postTaxSalary), ("Tax",
    incomeTax), ("National Insurance", nationalInsuranceTax)]'
  prefs: []
  type: TYPE_NORMAL
- en: let totalSalary = salary + nationalInsuranceTax
  prefs: []
  type: TYPE_NORMAL
- en: let postTaxPercentage = postTaxSalary / totalSalary * 100
  prefs: []
  type: TYPE_NORMAL
- en: let incomeTaxPercentage = incomeTax / totalSalary * 100
  prefs: []
  type: TYPE_NORMAL
- en: let nationalInsurancePercentage = nationalInsuranceTax / totalSalary * 100
  prefs: []
  type: TYPE_NORMAL
- en: 'return TaxBreakdown(postTaxSalary: postTaxSalary, incomeTax: incomeTax, nationalInsuranceTax:
    nationalInsuranceTax, chartData: chartData, postTaxPercentage: postTax'
  prefs: []
  type: TYPE_NORMAL
- en: 'Percentage, incomeTaxPercentage: incomeTaxPercentage, nationalInsurancePercentage:
    nationalInsurancePercentage)'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'private func formatCurrency(_ value: Double) -> String {'
  prefs: []
  type: TYPE_NORMAL
- en: let formatter = NumberFormatter()
  prefs: []
  type: TYPE_NORMAL
- en: formatter.numberStyle = .currency
  prefs: []
  type: TYPE_NORMAL
- en: formatter.currencySymbol = "£"
  prefs: []
  type: TYPE_NORMAL
- en: 'return formatter.string(from: NSNumber(value: value)) ?? ""'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: struct TaxBreakdown {
  prefs: []
  type: TYPE_NORMAL
- en: 'var postTaxSalary: Double'
  prefs: []
  type: TYPE_NORMAL
- en: 'var incomeTax: Double'
  prefs: []
  type: TYPE_NORMAL
- en: 'var nationalInsuranceTax: Double'
  prefs: []
  type: TYPE_NORMAL
- en: 'var chartData: [(String, Double)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'var postTaxPercentage: Double'
  prefs: []
  type: TYPE_NORMAL
- en: 'var incomeTaxPercentage: Double'
  prefs: []
  type: TYPE_NORMAL
- en: 'var nationalInsurancePercentage: Double'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'struct ResultsView_Previews: PreviewProvider {'
  prefs: []
  type: TYPE_NORMAL
- en: 'static var previews: some View {'
  prefs: []
  type: TYPE_NORMAL
- en: 'ResultsView(salary: .constant("100"), geography: .country("USA"))'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In this updated code, `ResultsView` now accepts a `geography` parameter of type
    `FrontView.Geography`. The `calculateTaxBreakdown(for:in:)` function is added
    to calculate the tax breakdown based on the salary and selected geography.
  prefs: []
  type: TYPE_NORMAL
- en: The tax breakdown is stored in the `TaxBreakdown` struct, which includes the
    post-tax salary, income tax, national insurance tax, chart data, and percentage
    values for each tax category.
  prefs: []
  type: TYPE_NORMAL
- en: The `formatCurrency(_:)` function is used to format currency values with the
    pound sign (£).
  prefs: []
  type: TYPE_NORMAL
- en: The calculated tax breakdown is used to populate the `PieChart` and `ProgressView`
    components to display the tax breakdown and percentages.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the tax calculation logic in the code provided is based on
    the initial logic and may not be accurate or applicable to real-world tax calculations.
    It serves as an example structure for integrating tax breakdown calculations into
    your SwiftUI code.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we implemented all the calculator’s functionality. We linked
    all the UI components that we implemented in the previous chapter. First, we provided
    a means to navigate to and from `ResultsView`. Then, we checked the salary input
    to make sure it was above zero and didn’t contain any invalid characters. Once
    validated, we passed the salary from `ContentView` to `ResultsView`. Using the
    salary, we calculated the tax breakdown in `ResultsView`, fixed an annoying error,
    and renamed `ContentView` to `FrontView`. Finally, we also implemented a few extra
    tasks for our tax calculator app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll start our next application, which will be a photo
    gallery for the iPad. We will leverage many of the skills learned already, so
    feel free to take a moment and go back over anything you didn’t fully understand.
  prefs: []
  type: TYPE_NORMAL
