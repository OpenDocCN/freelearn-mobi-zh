- en: Do Things That Do Not Scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your very first goal, once you have an MVP, is to push that experiment through
    its first iteration cycle in order to test your hypothesis. At this stage, the
    primary purpose is validated learning. Only after you have proved your hypothesis
    should you consider scaling and optimization.
  prefs: []
  type: TYPE_NORMAL
- en: In the Lean model, improvement happens over time as a result of user feedback.
    When you make that feedback loop the centerpiece of your initial experiments,
    a nontraditional set of business practices begins to emerge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: How to acquire early adopters and establish a small-scale laboratory and why
    doing so can drastically improve your learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to maximize learning with some of the most popular wireframing and prototyping
    tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to balance the need for quality against speed-to-market requirements, budget
    requirements, or other limitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best way to develop a technical debt management plan, which is vital for
    any app that does begin to scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before covering these topics, however, let's look at why you should do things
    that do not scale.
  prefs: []
  type: TYPE_NORMAL
- en: What we mean by "things that do not scale"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your goal at this stage is to conduct an experiment, maximize learning, and
    minimize the time it takes to complete one turn of the build-measure-learn cycle.
    With the feedback loop as your bull's eye, you will find yourself engaging in
    activities that may seem superficially illogical, but which greatly accelerate
    your learning.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, it probably seems extraordinarily inefficient for CEOs or founders
    to interact directly with customers. If a startup wants to shorten the feedback
    loop and understand its customers' needs on a deeper level, though, the purpose
    of this tactic becomes clearer.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, it may seem wasteful to hand users an interactive wireframe or to
    present a prototype made up of coding shortcuts and workarounds. When viewed as
    a stage in an MVP test, however, such an approach makes more sense.
  prefs: []
  type: TYPE_NORMAL
- en: The tools and techniques we explore next may not scale, but they will greatly
    accelerate early learning and prevent technical errors from overwhelming you as
    your MVP evolves.
  prefs: []
  type: TYPE_NORMAL
- en: Three reasons to do things that do not scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Doing things that do not scale within a narrow market has significant benefits
    when it comes to experimentation, learning, and product development. Here are
    three of the biggest reasons to adopt a user-centric focus instead of a traditional
    production-oriented approach.
  prefs: []
  type: TYPE_NORMAL
- en: Improved testing and data collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we will see, the following are the direct interactions with early adopters,
    which will provide information that is much more valuable than downstream data
    collection. Additionally, this feedback will help you implement appropriate changes,
    features, and redesigns. The sooner you receive necessary feedback, the more money
    you will save.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tapping into your customers'' minds early on will help prevent costly errors.
    For instance, take a look at the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Up-front data helps you develop the features that customers actually need instead
    of the ones you think they need
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User testing, especially with some of the tools and methods mentioned as follows,
    will help you create a design that your customers like
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Early interactions with your MVP will also make you aware of usability issues
    sooner rather than later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your first users will help you find the features, designs, and usability workflows
    that matter most, so you can focus on what's important before you start scaling.
  prefs: []
  type: TYPE_NORMAL
- en: Failure that can be controlled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Not every experiment will succeed. If your idea is going to fail, then it is
    better to fail early and fail fast, for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: A low-budget experiment that fails inside a contained environment will have
    a smaller fallout than a full-featured product that fails in a large market
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sooner you discover a mistake or disprove a hypothesis, the sooner you can
    cut your losses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failing early with a small audience will limit or eliminate any impact on you
    or your company's reputation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the Lean methodology is correctly applied, failure becomes a mechanism
    for learning and adaptation, giving you the opportunity to pivot or start over.
  prefs: []
  type: TYPE_NORMAL
- en: Development of products that are more lovable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, an MVP lets you create a product that is targeted,
    relevant, and useful. Functionality, however, is only half of the equation. People
    should use your products not just because they need to, but because they want
    to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lovable products have significant advantages over products that are merely
    usable:'
  prefs: []
  type: TYPE_NORMAL
- en: People who enjoy using a product will use it more often for longer periods of
    time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tribe of passionate users are more likely to talk about your products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers who love your product will stay more loyal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lean, learn-first approach should seek to understand not only what your customers
    want, but how they use apps. When you prioritize the user experience from the
    very start, you can create products that work with your users, their chosen platforms,
    and their lives.
  prefs: []
  type: TYPE_NORMAL
- en: Since early adopters are those who feel the strongest need for your product,
    they will also be your most valuable asset when it comes to improving the user
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: How to acquire early adopters and establish a small-scale laboratory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you conduct your first tests in a real-world laboratory, your strategies
    should aim to accelerate the build-measure-learn cycle. As mentioned, since the
    focus is on learning, not production, much of this early work will be impractical
    on a larger scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'The exact nature of the unscalable work will vary from situation to situation.
    However, the following three strategies will help you accelerate the feedback
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: Working within a narrow marketplace facilitates expansion and provides a miniature
    laboratory within which to work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual recruitment of—and interaction with—your users will give you immediate,
    detailed information about your audience and your ideas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this early stage, perfecting the user experience with early adopters is often
    more effective, more efficient, and more economical than doing it later in the
    process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unscalable work could mean performing tasks manually, doing work outside your
    comfort zone, or working outside your area of expertise. User acquisition and
    customer service, for instance, may be arduous or tedious to a coder.
  prefs: []
  type: TYPE_NORMAL
- en: However, given the overwhelming benefits that these strategies offer the lean
    developer, their importance cannot be emphasized strongly enough. The following
    three strategies will help you establish a testing ground for your MVP, shorten
    the build-measure-learn cycle, and push your experiment closer toward scalability.
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on a narrow marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the beginning, it is very useful to confine an experiment to a narrow marketplace,
    such as a specific geographic area or a small group. There are several reasons
    for this, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Expansion and saturation within a targeted marketplace is much easier than within
    a large one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A narrow market is a good way to achieve a critical mass of users that will
    take you from a tribe of early adopters to a majority of users. Once you achieve
    saturation in one demographic, geographic area, or marketplace, you can use that
    position as leverage to scale even further.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data collection and testing is easier, cheaper, and more useful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think of a small market as a laboratory for the experiment. When proving your
    first hypotheses, it is often better to learn about your customers in a confined
    environment. Doing so on a large scale is usually unaffordable and wasteful.
  prefs: []
  type: TYPE_NORMAL
- en: Manually recruiting early adopters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Paul Graham, cofounder of the renowned startup incubator Y Combinator, probably
    coined the phrase, "Do things that don't scale."
  prefs: []
  type: TYPE_NORMAL
- en: In a much-cited essay bearing the same name, he said, "The most common unscalable
    thing founders have to do at the start is to recruit users manually." While cumbersome
    and slow, Graham says that nearly all startups must do this. To make his point,
    he relates the story of how the payment processing company stripe got started.
    The founders approached new users in person and used their laptops to create new
    stripe accounts right there on the spot.
  prefs: []
  type: TYPE_NORMAL
- en: Though certainly not scalable, manual recruitment may be necessary to acquire
    users. After you have gathered a group of early adopters, you can begin learning
    from them and evolving your product.
  prefs: []
  type: TYPE_NORMAL
- en: Another significant reason to manually acquire users is genchi genbutsu, a core
    principle of the Toyota Production System. Jeffrey Liker wrote about this concept
    in his book, *The Toyota Way*, which represents two decades of study of Toyota.
    He said, "You cannot be sure you really understand any part of any business problem
    unless you go and see for yourself firsthand."
  prefs: []
  type: TYPE_NORMAL
- en: This is why the first users and the firsthand data you collect at this stage
    are worth their weight in gold. Firsthand interaction will tell you how your users
    perceive your idea, whether they see it as useful, and whether you will want to
    pay money for it.
  prefs: []
  type: TYPE_NORMAL
- en: Perfecting the user experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Steve Jobs once said, "You've gotta start with the customer experience and work
    backwards to the technology."
  prefs: []
  type: TYPE_NORMAL
- en: A similar sentiment was echoed by Airbnb's founders, who said, "We start with
    the perfect experience and then work backward." It is worth noting that the user
    experience does not limit itself to a user's interactions with a product—it also
    includes the user's experience with the company and the company's services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since users sit at the center of the lean mindset, it is vital to also place
    them at the center of product designs. Perfecting the user experience during the
    experimental phase accomplishes several goals:'
  prefs: []
  type: TYPE_NORMAL
- en: When you make their experience as good as possible from the very outset, they
    will be more willing to offer feedback and forgive any inevitable usability issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The emotions a product evokes are just as important as how functional it is—improving
    the emotional experience has as much an impact as improving features or usability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Happier users are more likely to become loyal followers and recommend your products
    to others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get the most out of your users' participation—from collecting data to building
    a tribe of advocates—you must do more than just monitor and respond to feedback.
    It is necessary to offer over-the-top concierge treatment. In other words, treat
    your first users like royalty.
  prefs: []
  type: TYPE_NORMAL
- en: In the early years of my old company, I used to call customers directly to see
    if they were happy with the product and their services. I had very little time
    in my schedule, but getting direct feedback from the ones who used my software
    told me where I was making mistakes and helped keep the customers satisfied and
    engaged.
  prefs: []
  type: TYPE_NORMAL
- en: Airbnb's founders also became famous for their hands-on involvement. When their
    product's growth in New York suffered due to low-quality listings, the founders
    flew to New York to personally help users fix the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Chebbia said, "We went door to door with cameras taking pictures of all these
    apartments to put them online. I lived in their living rooms. And home by home,
    block by block, communities started growing. And people would visit New York and
    bring the idea back with them to their city."
  prefs: []
  type: TYPE_NORMAL
- en: This example illustrates not only how far your products must go in order to
    please your users, but also how much you can learn from engaging with them directly.
  prefs: []
  type: TYPE_NORMAL
- en: How to transition from an unscalable MVP to scalable code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the one hand, you have the setting for your experiment, which includes your
    users, the marketplace, and real-world conditions. On the other hand, you have
    the MVP itself. Although its earliest iterations are just an experiment, it is
    also an actual product. From the beginning, it is necessary to plan for potential
    growth.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will discuss tools and techniques that will help you test
    economically and scale sustainably, without being overwhelmed by the ever-present
    danger of technical debt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19b234cc-902c-4238-9a9a-1cdd357cf12b.png)'
  prefs: []
  type: TYPE_IMG
- en: Focusing on learning with wireframes and prototypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed earlier in [Chapter 5](aecbb4ed-9567-4aa2-a498-7e11787dda2f.xhtml),
    *A Pragmatic Approach*, wireframes and prototyping do not directly scale as actual
    software code, but they help avoid a lot of downstream problems by giving you
    something you can present to your users. It is also possible to gather preliminary
    feedback at these early stages by collecting data on how your users react to your
    product. As you move forward with design options, you can incorporate this data
    to determine when and how to add or modify design functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframe sketches and prototypical designs are ideal low-cost options for early
    design stages. These can come, for instance, in the form of hand-drawn sketches,
    photoshop files, or HTML mockups. There are also paid tools that bridge the gap
    between these design files and actual interactive prototypes.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, there are a number of design tools on the market that specifically
    assist teams with collaborative design, development, and user testing. These are
    three of the most popular and useful, although there are others. My team has used
    all three for quite some time and found them to be very useful. Employing these
    tools has saved us a lot of time, money, and customer goodwill by ensuring that
    we learned through prototyping rather than customer complaints.
  prefs: []
  type: TYPE_NORMAL
- en: Zeplin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zeplin is aimed at bridging the gap between designers and developers.
  prefs: []
  type: TYPE_NORMAL
- en: Designers can import files from photoshop or sketch, and Zeplin can be used
    to generate design specs, such as font details and color palettes. It can export
    sized image files, CSS files, and color files for major platforms. It integrates
    with Slack and is very simple to use.
  prefs: []
  type: TYPE_NORMAL
- en: I have found that Zeplin is extremely useful in avoiding past pitfalls, where
    you hand off designs for developers to cut up and apply with the application.
    Often these hand-offs can be messy, in that the tested designs end up compromised
    in the process—either consciously or unconsciously—by the developers. Zeplin hands
    off all the files ready for use, which saves a great deal of time and heartache.
  prefs: []
  type: TYPE_NORMAL
- en: Zeplin is free to try out and pricing can be fairly reasonable, depending on
    your budget, so it is worth a look if you want to ensure that your tested designs
    are followed to the pixel.
  prefs: []
  type: TYPE_NORMAL
- en: InVision
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: InVision is a must-try toolbox for designing and testing in low or high fidelity.
    It allows product teams to collaborate, co-create, and communicate in real-time
    with each other and with users. This software suite is ideal for early-stage UI
    design and experimentation, since you can create interactive designs, present
    them to test users or stakeholders, and collect qualitative data immediately.
  prefs: []
  type: TYPE_NORMAL
- en: InVision also continues to add more tools and features on a regular basis, further
    shortening the gap between the drawing board and the prototype. Craft, for instance,
    allows you to turn sketch or photoshop designs into interactive prototypes that
    can be tested directly on your phone. The Inspect tool operates like Zeplin by
    pulling coding specs—such as font information and color palette information—from
    design files.
  prefs: []
  type: TYPE_NORMAL
- en: UserTesting.com
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UserTesting.com offers a range of testing solutions for apps and websites. Video
    recording, audio recording, and analytics are available for websites, published
    apps, and unpublished apps. Data is turned around quickly, so you can respond
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: One perk of UserTesting.com's tools are that they offer video and audio recording
    via the users' devices. These allow you to present hard data and real human reactions
    to stakeholders and other team members. In some cases, when it's necessary to
    make a case for one design versus another, then this feature can be invaluable
    by giving you executable feedback from test subjects.
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on scaling and sustainability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point in the chapter, you understand how and why it is important to
    acquire early adopters, operate inside a narrow marketplace, and present them
    with interactive designs and prototypes. However, as your experiments progress,
    it will become necessary to transition from unscalable prototypes into scalable
    code. As your MVP evolves, you will be required to make a number of technical
    decisions. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: When to take coding shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to automate and optimize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to handle technical debt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the very beginning of your experiments, these issues should have their
    place on the table. Understanding such technical considerations will help you
    deal with them as they arise, so they do not become too costly or overwhelming.
  prefs: []
  type: TYPE_NORMAL
- en: Writing perfect code versus getting the job done
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At every stage, you must make choices that balance practical needs, such as
    budgets and release dates, against coding efficiency and stability.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how the founders of two extremely successful companies prioritize
    the customer experience and doing whatever it takes to push their product into
    the marketplace. This means, fortunately or unfortunately, that you cannot be
    a perfectionist when it comes to coding. When creating your MVP and working within
    tight constraints, you must put learning first and set aside any attachments to
    ideal code.
  prefs: []
  type: TYPE_NORMAL
- en: To use a phrase that I love, "Don't make perfect the enemy of good."
  prefs: []
  type: TYPE_NORMAL
- en: Perfecting an experiment should be an ongoing process achieved through customer-guided
    iterations. If you perfect designs, code, or features that haven't been validated,
    you run the risk of improving something that will be rejected by your users. To
    avoid burning money, focus on delivering iterations to market as quickly as possible
    so you can learn from the real world.
  prefs: []
  type: TYPE_NORMAL
- en: Automation and optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When speed to market is critical, testing and quick delivery take precedence
    within reason.
  prefs: []
  type: TYPE_NORMAL
- en: At a certain stage in the development lifecycle, you will need to transition
    from unscalable processes to scalable ones. Although such manual, quick-and-dirty
    business practices are more economical and even necessary in small marketplaces,
    they are unsustainable as you improve and grow over time.
  prefs: []
  type: TYPE_NORMAL
- en: Automation—whether in code, deployments, or monitoring—is the foundation of
    stable, secure, and performant apps. It can be delayed at the start of your project,
    so you can learn and adapt quickly, but it must be applied over time so as to
    minimize technical debt and avoid delivering pain to your users via a buggy and
    unreliable app.
  prefs: []
  type: TYPE_NORMAL
- en: How to handle technical debt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technical debt, or the extra work that you accrue when taking coding shortcuts,
    is like financial debt. A little bit can sometimes be necessary but too much can
    kill you.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, if you are a perfectionist, your product will risk going over
    budget or being delayed indefinitely. However, quick-and-dirty programming will
    need to be fixed at some point. While perfectionism can overwhelm you in the short
    run, technical debt can overwhelm you in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: There are different ways of viewing technical debt. You can view it as long-term
    versus short-term, prudent versus reckless, or intentional versus unintentional.
    Practically speaking, technical debt, like financial debt, is sometimes necessary
    to achieve a certain goal. However, in the same way that both types of debt can
    be useful, they can also get out of control.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to manage technical debt is by intentionally and iteratively eliminating
    it from the backlog as you proceed through the lifecycle of your product. Notice
    a pattern here around iterative practices? It is simple; good agile practices
    can help prevent technical debt from burying you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few tips for dealing with technical debt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a technical debt management plan**: A properly executed plan is the
    first step towards tackling technical debt. It should be engaged with consistently
    as part of your sprint cycles and should prioritize debt based on how much it
    affects your customers—from the most impactful to the least impactful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log your debt**: A backlog will help you track when, where, and why certain
    decisions were made. Your log should include estimates for how long shortcuts
    will take to fix, while remembering that every loan you take out accrues interest
    over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quantify the debt financially**: Coding time translates into billable hours.
    Therefore, it should be clear that technical debt translates directly into financial
    costs. Viewing technical debt through a financial lens will help your teams and
    your company understand the impacts of development decision-making so that priorities
    can be set accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute your plan**: A technical debt management plan will not help if no
    one is accountable. Establish documented guidelines, responsible personnel, a
    repayment schedule, and ensure that your debt management plan is executed on a
    regular basis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solid technical debt management plan can help you prevent unnecessary technical
    debt. In cases where debt is unavoidable, a strategically executed plan will help
    you control that debt so that it doesn't control you.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Doing things that do not scale is about prioritizing learning and speed to market
    by shortening the build-measure-learn cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, doing things that do not scale is the only way to get things
    done. During the experimentation phase, the work involved may put you in unfamiliar
    territory and it may seem, superficially, to go against industry best practices.
    However, these early efforts quite often spell the difference between success
    and failure.
  prefs: []
  type: TYPE_NORMAL
- en: When you are fanatically committed to growing, you can collect data on your
    market, quickly pivot, and deliver an MVP that will help you learn, iterate, and
    improve over time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll take a look at how we can learn even more about our
    MVP via Play Store and App Store hacks.
  prefs: []
  type: TYPE_NORMAL
