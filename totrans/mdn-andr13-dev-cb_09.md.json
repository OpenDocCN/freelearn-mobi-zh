["```kt\n    implementation \"androidx.compose.material3:material3-window-size-class:1.1.0\"\n    ```", "```kt\n    @OptIn(ExperimentalContracts::class)\n    ```", "```kt\n    fun cityPosture(foldFeature: FoldingFeature?): Boolean {\n    ```", "```kt\n        contract { returns(true) implies (foldFeature !=\n    ```", "```kt\n            null) }\n    ```", "```kt\n        return foldFeature?.state ==\n    ```", "```kt\n            FoldingFeature.State.HALF_OPENED &&\n    ```", "```kt\n                foldFeature.orientation ==\n    ```", "```kt\n                    FoldingFeature.Orientation.VERTICAL\n    ```", "```kt\n    }\n    ```", "```kt\n    @OptIn(ExperimentalContracts::class)\n    ```", "```kt\n    fun separating(foldFeature: FoldingFeature?): Boolean {\n    ```", "```kt\n        contract { returns(true) implies (foldFeature !=\n    ```", "```kt\n            null) }\n    ```", "```kt\n        return foldFeature?.state ==\n    ```", "```kt\n            FoldingFeature.State.FLAT &&\n    ```", "```kt\n                foldFeature.isSeparating\n    ```", "```kt\n    }\n    ```", "```kt\n    sealed interface DevicePosture {\n    ```", "```kt\n        object NormalPosture : DevicePosture\n    ```", "```kt\n        data class CityPosture(\n    ```", "```kt\n            val hingePosition: Rect\n    ```", "```kt\n        ) : DevicePosture\n    ```", "```kt\n        data class Separating(\n    ```", "```kt\n            val hingePosition: Rect,\n    ```", "```kt\n            var orientation: FoldingFeature.Orientation\n    ```", "```kt\n        ) : DevicePosture\n    ```", "```kt\n    }\n    ```", "```kt\n    val windowSize = calculateWindowSizeClass(activity = this)\n    ```", "```kt\n    val postureStateFlow = WindowInfoTracker.getOrCreate(this).windowLayoutInfo(this)\n    ```", "```kt\n    . . .\n    ```", "```kt\n    when {\n    ```", "```kt\n        cityPosture(foldingFeature) ->\n    ```", "```kt\n          DevicePosture.CityPosture(foldingFeature.bounds)\n    ```", "```kt\n        separating(foldingFeature) ->\n    ```", "```kt\n          DevicePosture.Separating(foldingFeature.bounds,\n    ```", "```kt\n            foldingFeature.orientation)\n    ```", "```kt\n        else -> DevicePosture.NormalPosture\n    ```", "```kt\n    }\n    ```", "```kt\n        }\n    ```", "```kt\n    . . .\n    ```", "```kt\n        )\n    ```", "```kt\n    implementation \"Androidx.constraintlayout:constraintlayout-compose:1.x.x\"\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun AndroidCommunity() {\n    ```", "```kt\n        ConstraintLayout {\n    ```", "```kt\n            val (title, aboutCommunity, AndroidImage) =\n    ```", "```kt\n                createRefs()\n    ```", "```kt\n     . . .\n    ```", "```kt\n    }\n    ```", "```kt\n    Text(\n    ```", "```kt\n        text = stringResource(id =\n    ```", "```kt\n            R.string.Android_community),\n    ```", "```kt\n        modifier = Modifier.constrainAs(title) {\n    ```", "```kt\n            top.linkTo(parent.top)\n    ```", "```kt\n            start.linkTo(parent.start)\n    ```", "```kt\n            end.linkTo(parent.end)\n    ```", "```kt\n        }\n    ```", "```kt\n            .padding(top = 12.dp),\n    ```", "```kt\n        style = TextStyle(\n    ```", "```kt\n            color = Color.Blue,\n    ```", "```kt\n            fontSize = 24.sp\n    ```", "```kt\n        )\n    ```", "```kt\n    )\n    ```", "```kt\nText(\n    text = stringResource(id =\n       R.string.about_community),\n    modifier = Modifier.constrainAs(aboutCommunity) {\n        top.linkTo(title.bottom)\n        start.linkTo(parent.start)\n        end.linkTo(parent.end)\n        width = Dimension.fillToConstraints\n    }\n        .padding(top = 12.dp, start = 12.dp,\n            end = 12.dp),\n    style = TextStyle(\n        fontSize = 18.sp\n    )\n)\n```", "```kt\n    Image(\n    ```", "```kt\n        painter = painterResource(id =\n    ```", "```kt\n            R.drawable.Android),\n    ```", "```kt\n        contentDescription = stringResource(id =\n    ```", "```kt\n            R.string.Android_image),\n    ```", "```kt\n        modifier = Modifier.constrainAs(AndroidImage) {\n    ```", "```kt\n            top.linkTo(aboutCommunity.bottom,\n    ```", "```kt\n                margin = 16.dp)\n    ```", "```kt\n            centerHorizontallyTo(parent)\n    ```", "```kt\n        }\n    ```", "```kt\n    )\n    ```", "```kt\n    . . .\n    ```", "```kt\n    @Preview(showBackground = true)\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun ShowAndroidCommunity() {\n    ```", "```kt\n        TravellerTheme() {\n    ```", "```kt\n            AndroidCommunity()\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    import Androidx.window.layout.FoldableState\n    ```", "```kt\n    val foldState = rememberFoldableState()\n    ```", "```kt\n    when (foldState.state) {\n    ```", "```kt\n        FoldableState.STATE_FLAT -> {\n    ```", "```kt\n            // Our Device is flat (unfolded)do something\n    ```", "```kt\n        }\n    ```", "```kt\n        FoldableState.STATE_HALF_OPENED -> {\n    ```", "```kt\n            //Our Device is partially folded. Do something\n    ```", "```kt\n        }\n    ```", "```kt\n        FoldableState.STATE_CLOSED -> {\n    ```", "```kt\n            //Our Device is fully folded do something\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    val isFolded = foldState.state == FoldableState.STATE_CLOSED\n    ```", "```kt\n    if (isFolded) {\n    ```", "```kt\n        // Create our layout for when the device is folded\n    ```", "```kt\n    } else {\n    ```", "```kt\n        // Create our layout for when the device is\n    ```", "```kt\n           unfolded\n    ```", "```kt\n    }\n    ```", "```kt\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyCustomView()\n        }\n    }\n}\n@Composable\nfun MyCustomView() {\n    Text(text = \"Hello, Android Community!\")\n}\n```", "```kt\n    implementation 'Androidx.compose.material3:material3:1.0.0-alpha14'\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun MyAppMaterialTheme(content: @Composable () -> Unit) {\n    ```", "```kt\n        MaterialTheme(\n    ```", "```kt\n            colorScheme = /**/,\n    ```", "```kt\n            typography = /**/,\n    ```", "```kt\n            shapes = /**/,\n    ```", "```kt\n            content = content\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun MyApp() {\n    ```", "```kt\n        MyAppMaterialTheme {}\n    ```", "```kt\n    }\n    ```"]