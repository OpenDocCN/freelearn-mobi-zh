["```kt\napply plugin: 'kotlin-android-extensions'\n```", "```kt\nclass MainActivity : AppCompatActivity() {}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout     xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n <TextView\n        android:id=\"@+id/text_field\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"56sp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    }\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        text_field.text = \"Bonjour!\"\n    }\n}\n```", "```kt\nclass ViewHolder(override val containerView: View) : ViewHolder(containerView),\n    LayoutContainer {  \n    fun setupItemView(title: String) {  itemTitle.text = \"Hello World!\"  } \n}\n```", "```kt\nimplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.3' \n```", "```kt\nclass MainActivity: AppCompatActivity() {}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n <TextView\n        android:id=\"@+id/text_field\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"56sp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n <Button\n            android:id=\"@+id/cancel_btn\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Cancel\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"/>\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    }\n}\n```", "```kt\nclass MainActivity: AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val job = launch {\n var counter = 1\n            while (true) {\n delay(1000)\n counter++\n withContext(UI) {\n                    text_field.text = counter.toString()\n }\n            }\n        }\n    }\n}\n```", "```kt\nclass MainActivity: AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        text_field.text = \"Bonjour!\"\n\n        val job = launch {\n            var counter = 1\n            while (true) {\n                delay(1000)\n                counter++\n                withContext(UI) {\n                    text_field.text = counter.toString()\n                }\n            }\n        }\n\n cancel_btn.setOnClickListener {\n            job.cancel()\n }\n    }\n}\n```", "```kt\nandroidTestImplementation 'androidx.core:core-ktx:1.0.+'\n```", "```kt\napply plugin: 'kotlin-android-extensions'\n```", "```kt\n@Parcelize\ndata class User(val name: String, val address: Address): Parcelable\n\n@Parcelize\ndata class Address(val street: String, \n                   val number: String, \n                   val city: String): Parcelable\n```", "```kt\n@Test\nfun testUserParcelisation() {\n    // given\n    val originalUser = User(\"Bob\", Address(\"Rue de Paris\", \"123\",\n     \"Warsaw\"))\n    val bundle = Bundle()\n\n    // when\n    bundle.putParcelable(\"my_user\", originalUser)\n\n    // then\n    val deserialisedUser = bundle.get(\"my_user\") as User\n    assertEquals(originalUser, deserialisedUser)\n} \n```", "```kt\nimplementation \"android.arch.lifecycle:runtime:1.1.1\"\n\n```", "```kt\nclass LifecycleAwareLazy<T>(lifecycle: Lifecycle, val initializer: () -> T):             Lazy<T>, GenericLifecycleObserver\n```", "```kt\nclass LifecycleAwareLazy<T>(lifecycle: Lifecycle, val initializer: () -> T):             Lazy<T>, GenericLifecycleObserver {\n    init {\n lifecycle.addObserver(this)\n }\n}\n```", "```kt\nclass LifecycleAwareLazy<T>(lifecycle: Lifecycle, val initializer: () -> T):             Lazy<T>, GenericLifecycleObserver {\n\n    init {\n        lifecycle.addObserver(this)\n    }\n\n    private object UNINITIALIZED_VALUE\n private var _value: Any? = UNINITIALIZED_VALUE }\n```", "```kt\nclass LifecycleAwareLazy<T>(lifecycle: Lifecycle, val initializer: () -> T): Lazy<T>, GenericLifecycleObserver {\n\n    init {\n        lifecycle.addObserver(this)\n    }\n\n    private object UNINITIALIZED_VALUE\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n @get:Synchronized\n    override val value: T get() {\n if (_value === UNINITIALIZED_VALUE) {\n _value = initializer.invoke()\n }\n return _value as T\n        }\n\n override fun isInitialized(): Boolean = _value != UNINITIALIZED_VALUE\n}\n\n```", "```kt\nclass LifecycleAwareLazy<T>(lifecycle: Lifecycle, val initializer: () -> T): Lazy<T>, GenericLifecycleObserver {\n\n    init {\n        lifecycle.addObserver(this)\n    }\n\n    private object UNINITIALIZED_VALUE\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    @get:Synchronized\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer.invoke()\n            }\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value != UNINITIALIZED_VALUE\n\n    override fun onStateChanged(source: LifecycleOwner?, event: Lifecycle.Event?) {\n when (event) {\n Lifecycle.Event.ON_STOP -> {\n _value = UNINITIALIZED_VALUE\n }\n else -> return\n        }\n }\n}\n```", "```kt\nandroidTestImplementation 'androidx.core:core-ktx:1.0.+'\n```", "```kt\nfun getDefaultSharedPreferences() =                                 PreferenceManager.getDefaultSharedPreferences(InstrumentationRegistry.getContext())\n```", "```kt\n@Test\nfun testUserParcelization() {\n val prefs = getDefaultSharedPreferences()\n val userName: String = \"Gonzo\"\n    prefs.edit {\n        putString(\"user_name\", userName)\n }\n}\n```", "```kt\n@Test\nfun testSharedPrefs() {\n    val prefs = getDefaultSharedPreferences()\n    val userName: String = \"Gonzo\"\n    prefs.edit {\n        putString(\"user_name\", userName)\n    }\n\n    val DEFAULT_VALUE = \"empty\"\n    val fetchedUserName = prefs.getString(\"user_name\",\n     DEFAULT_VALUE)\n assertSame(userName, fetchedUserName)\n}\n```", "```kt\nfun Cursor.getString(columnName: String): String? {\n    return getString(getColumnIndex(columnName))\n}\n```", "```kt\nval NOT_SPECIFIED = \"\"\nval content = getContext().contentResolver\nval projection = arrayOf(ContactsContract.Data.DISPLAY_NAME)\nval cursor =\n        content.query(ContactsContract.Contacts.CONTENT_URI,\n                projection,\n                NOT_SPECIFIED,\n                emptyArray(),\n                NOT_SPECIFIED)\n```", "```kt\nval NOT_SPECIFIED = \"\"\nval content = getContext().contentResolver\nval projection = arrayOf(ContactsContract.Data.DISPLAY_NAME)\nval cursor =\n        content.query(ContactsContract.Contacts.CONTENT_URI,\n                projection,\n                NOT_SPECIFIED,\n                emptyArray(),\n                NOT_SPECIFIED)\n\nval contacts = cursor.use {\n    val contactsList = mutableListOf<String?>()\n while (it.moveToNext()) {\n val contactName = it.getString(ContactsContract.Data.DISPLAY_NAME)\n contactsList.add(contactName)\n }\n contactsList\n}\n```", "```kt\nimplementation group: 'junit', name: 'junit', version: '4.12'\n```", "```kt\nimplementation 'com.nhaarman:mockito-kotlin:1.5.0'\n```", "```kt\nclass RegistrationFormController(val api: RegistrationApi) {\n    var currentEmailAddress: String = \"\"\n\n    fun isEmailValid(): Boolean = currentEmailAddress.contains(\"@\")\n\n    fun checkIfEmailCanBeRegistered(): Boolean =\n        isEmailIsValid() && api.isEmailAddressAvailable(currentEmailAddress)\n}\n```", "```kt\ninterface RegistrationApi {\n    fun isEmailAddressAvailable(email: String): Boolean\n} \n```", "```kt\nclass MyTest {\n}\n```", "```kt\nclass MyTest {\n private val api = mock<RegistrationApi>()\n}\n```", "```kt\nclass MyTest {\n    private val api = mock<RegistrationApi>()\n    private var registrationFormController = \n        RegistrationFormController(api = api)\n}\n```", "```kt\nclass MyTest {\n    private val api = mock<RegistrationApi>()\n    private lateinit var registrationFormController: RegistrationFormController\n\n    @Before\n    fun setup() {\n        registrationFormController = RegistrationFormController(api = api)\n    }\n\n    @Test\n    fun `email shouldn't be registered if it's not valid`() {\n // given\n        assertNotNull(registrationFormController)\n whenever(api.isEmailAddressAvailable(anyString())) doReturn(true)\n // when\n        registrationFormController.currentEmailAddress = \"Hilary\"\n        // then\n        assertFalse(registrationFormController.checkIfEmailCanBeRegistered())\n } }\n```", "```kt\nimplementation group: 'junit', name: 'junit', version: '4.12'\n```", "```kt\nimplementation 'com.nhaarman:mockito-kotlin:1.5.0'\n```", "```kt\nclass RegistrationForm(val api: RegistrationApi, val view: TextView) {\n    var currentEmailAddress: String by \n        Delegates.observable(\"\", ::onEmailAddressNewValue)\n\n    fun onEmailAddressNewValue(prop: KProperty<*>, old: String,\n     new: String) {\n        if (checkIfEmailCanBeRegistered()) {\n            view.showSuccessMessage(\"Email address is available!\")\n        } else {\n            view.showErrorMessage(\"This email address is not\n             available.\")\n        }\n    }\n\n    fun checkIfEmailCanBeRegistered(): Boolean =\n            isEmailIsValid() && api.isEmailAddressAvailable(currentEmailAddress)\n\n    fun isEmailIsValid(): Boolean = currentEmailAddress.contains(\"@\")\n\n}\n```", "```kt\ninterface RegistrationApi {\n    fun isEmailAddressAvailable(email: String): Boolean\n} \n```", "```kt\ninterface TextView {\n    fun showSuccessMessage(message: String)\n    fun showErrorMessage(message: String)\n}\n```", "```kt\nclass MyTest {\n}\n```", "```kt\nclass MyTest {\n    private val api = mock<RegistrationApi>()\n}\n```", "```kt\nclass MyTest {\n    private val api = mock<RegistrationApi>()\n private val view = mock<TextView>()\n}\n```", "```kt\nclass MyTest {\n    private val api = mock<RegistrationApi>()\n    private val view = mock<TextView>()\n    private var registrationForm = RegistrationForm(api, view)\n}\n```", "```kt\nclass MyTest {\n    private val api = mock<RegistrationApi>()\n    private val view = mock<TextView>()\n    private var registrationForm = RegistrationForm(api, view)\n\n @Test\n    fun `should display success message when email address is available`() {\n // given\n        assertNotNull(registrationForm)\n // when we update the currentEmailAddress to any String\n        whenever(api.isEmailAddressAvailable(ArgumentMatchers.anyString()))             doReturn(true)\n registrationForm.currentEmailAddress = \"hilary@gmail.com\"\n        // then\n        assertTrue(registrationForm.checkIfEmailCanBeRegistered())\n verify(view).showSuccessMessage(\"Email address is \n         available!\")\n }\n}\n```", "```kt\nclass MyTest {\n    private val api = mock<RegistrationApi>()\n    private val view = mock<TextView>()\n    private var registrationForm = RegistrationForm(api, view)\n\n    @Test\n    fun `should display success message when email address is available`() {\n        // given\n        assertNotNull(registrationForm)\n        // when we update the currentEmailAddress to any String\n        whenever(api.isEmailAddressAvailable(ArgumentMatchers.anyString()))             doReturn(true)\n        registrationForm.currentEmailAddress = \"hilary@gmail.com\"\n        // then\n        assertTrue(registrationForm.checkIfEmailCanBeRegistered())\n        verify(view).showSuccessMessage(\"Email address is available!\")\n    }\n\n    @Test\n fun `should display error message when email address isn't available`() {\n // given\n        assertNotNull(registrationForm)\n // when\n        registrationForm.currentEmailAddress = \"hilary@gmail.com\"\n        whenever(api.isEmailAddressAvailable(ArgumentMatchers.anyString()))             doReturn(false)\n // then\n        assertTrue(registrationForm.isEmailIsValid())\n verify(view).showErrorMessage(anyString())\n }\n}\n```", "```kt\nverify(view).showErrorMessage(anyString())\n```", "```kt\nimplementation group: 'junit', name: 'junit', version: '4.12'\n```", "```kt\nimplementation 'com.nhaarman:mockito-kotlin:1.5.0'\n```", "```kt\nclass Authenticator(val api: Api) {\n\n    fun tryToAuthorise(encodedUserNameAndPassword: ByteArray, \n                       context: CoroutineContext): Deferred<String> =\n            async(context) {\n                var authToken = api.authorise(encodedUserNameAndPassword)\n\n                var retryCount = 0\n                while (authToken.isEmpty() && retryCount <= 8) {\n                    delay(10, TimeUnit.SECONDS)\n                    authToken = api.authorise(encodedUserNameAndPassword)\n                    retryCount++\n                }\n\n                authToken\n            }\n}\n```", "```kt\ninterface Api {\n    // returns a non-empty auth token when the given credentials were authorised\n    fun authorise(encodedUserNameAndPassword: ByteArray): String\n}\n```", "```kt\nclass MyTest {\n}\n```", "```kt\nclass MyTest {\n val api: Api = mock()\n}\n```", "```kt\nclass MyTest {\n    val api: Api = mock()\n val authenticator = Authenticator(api)\n}\n```", "```kt\nclass MyTest {\n    val api: Api = mock()\n    val authenticator = Authenticator(api)\n\n    @Test\n    fun `should retry auth at least 10 times when Api returns empty\n    token`() {\n whenever(api.authorise(any())) doReturn \"\"\n\n        val context = TestCoroutineContext()\n\n runBlocking(context) {\n          authenticator.tryToAuthorise(\"admin:1234\".toByteArray(),\n            context)\n .await()\n context.advanceTimeBy(100, TimeUnit.SECONDS)\n verify(api, atLeast(10)).authorise(any())\n }\n    }\n}\n```"]