- en: '*Chapter 21*: Understanding Core Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your app is almost done! Every screen works as shown in the app tour that you
    went through in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*,
    Setting Up the User Interface*. However, there is one last thing that you need
    to do. In [*Chapter 19*](B17469_19_Final_VK_ePub.xhtml#_idTextAnchor319)*, Getting
    Started with Custom UIControls*, you implemented a **Review Form** screen, which
    lets you enter a review for a particular restaurant. In the previous chapter,
    you implemented a **Photo Filter** screen, which lets you get a photo from the
    camera or photo library and add a filter to it. But there is no way at present
    to save either reviews or photos, and they are lost when the app is closed.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will use **Core Data** to save reviews and photos in your
    app. First, you'll learn about Core Data and its different components. Next, you'll
    create a data model for reviews and photos and create corresponding model objects
    for your app. After that, you'll set up Core Data components for your app.
  prefs: []
  type: TYPE_NORMAL
- en: You'll then learn about the mechanism used to save reviews and photos for a
    particular restaurant using the restaurant identifier. After that, you'll update
    the `ReviewFormViewController` and `PhotoFilterViewController` classes to save
    reviews and photos for a particular restaurant, and modify the `RestaurantDetailViewController`
    class to load and display reviews for a particular restaurant. You'll also calculate
    and display the overall rating for that restaurant.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, on your own, you'll modify the `RestaurantDetailViewController` class
    to load and display photos for a particular restaurant.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll understand how Core Data works. You'll also
    be able to set up Core Data components, and enable an interface between your app
    and Core Data components using a data manager class. You'll have also learned
    to save and load reviews and photos using Core Data, which you will then be able
    to implement in your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Core Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Core Data components for your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how saving and loading works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the `ReviewFormViewController` class to save reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the `PhotoFilterViewController` class to save photos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying saved reviews and photos in the **Restaurant Detail** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating a restaurant's overall rating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter21` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3o81yKK](https://bit.ly/3o81yKK)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by learning about the components of Core Data and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Core Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Core Data is Apple's mechanism for saving app data to your device. It provides
    persistence, undo/redo, background tasks, view synchronization, versioning, and
    migration. You can define your data types and relationships using Xcode's data
    model editor, and Core Data will generate class definitions for your data types
    automatically. Core Data can then create and manage object instances based on
    the class definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about Core Data at this link: [https://developer.apple.com/documentation/coredata](https://developer.apple.com/documentation/coredata).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Core Data provides a set of classes collectively known as the Core Data stack
    to manage and persist object instances, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NSManagedObjectModel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describes your app's types, including their properties and relationships.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`NSManagedObject`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class used to implement instances of your app's types based on data from the
    `NSManagedObjectModel`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`NSManagedObjectContext`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracks changes to instances of your app's types.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`NSPersistentStoreCoordinator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saves and fetches instances of your app's types from stores.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`NSPersistentContainer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets up the model, context, and store coordinator simultaneously.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can learn more about the Core Data stack at this link: [https://developer.apple.com/documentation/coredata/core_data_stack](https://developer.apple.com/documentation/coredata/core_data_stack).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next section, you'll implement Core Data components required for your
    app to save reviews or photos.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Core Data components for your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you implement Core Data components for your app, let's think about what
    you need to do to save reviews or photos.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you're saving a review or photo using Microsoft Word. You first create
    a new Word document template with the relevant fields for a review or photo. You
    then create new Word documents based on the templates and fill in the data. You
    make whatever changes are necessary, perhaps changing the text of the review,
    or changing the effect you're applying to the photo. At this point, you have not
    saved the file yet. When you are happy with your document, you save it to the
    hard disk of your computer. The next time you want to view your review or photo,
    you search your hard disk for the relevant document and double-click it to open
    it in Word so you can see it once more.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an idea of what you need to do, let's review the steps required
    to implement it. First, you need to create a data model for a review or photo.
    You do this by creating **entities** in Xcode's data model editor, which are like
    Microsoft Word templates. Entities can have **attributes**, which are like fields
    in the Microsoft Word templates.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode can then create an `NSManagedObjectModel` class from this data model.
    Core Data will then use this `NSManagedObjectModel` class to create `NSManagedObject`
    instances, similar to Microsoft Word templates being used to create Microsoft
    Word files.
  prefs: []
  type: TYPE_NORMAL
- en: These `NSManagedObject` instances are placed in an `NSManagedObjectContext`
    instance, where your app has access to them, similar to opening Microsoft Word
    files in Microsoft Word. Then, when you bring up the `NSManagedObject` instances,
    and you can modify them as much as you like, similar to Microsoft Word documents
    being edited in Microsoft Word.
  prefs: []
  type: TYPE_NORMAL
- en: When you're done with the review or photo, the `NSManagedObject` instances in
    the `NSManagedObjectContext` instance are saved to a file in your iOS device,
    called the **persistent store**. This is similar to saving Word documents to your
    hard disk when you're done with them.
  prefs: []
  type: TYPE_NORMAL
- en: The `NSPersistentStoreCoordinator` instance manages the flow of information
    between the persistent store and the `NSManagedObjectContext` instance.
  prefs: []
  type: TYPE_NORMAL
- en: You'll use the `NSPersistentContainer` class to create instances of `NSManagedObjectModel`,
    `NSManagedObjectContext`, and `NSPersistentStoreCoordinator` for your app.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about how to set up the Core Data stack at this link: [https://developer.apple.com/documentation/coredata/setting_up_a_core_data_stack](https://developer.apple.com/documentation/coredata/setting_up_a_core_data_stack).'
  prefs: []
  type: TYPE_NORMAL
- en: You'll create entities and attributes to represent a review or photo using Xcode's
    data model editor in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, when you tap **Save** in the **Review Form** screen, the data you
    entered in the fields is just printed to the Debug area, and tapping **Save**
    in the **Photo Filter** screen doesn''t do anything. The first step is to create
    class definitions for objects to store data from the **Review Form** screen and
    the photo from the **Photo Filter** screen. You''ll create entities for reviews
    and photos using Xcode''s data model editor, and Xcode will automatically generate
    the class definitions. Let''s create the entity for reviews first. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Misc` folder in the Project navigator and choose `Core Data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Core Data` group and choose **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data` in the filter field, and select **Data Model**. Click **Next**:![Figure
    21.1: Data Model template selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.01_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.1: Data Model template selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Name the file `LetsEatModel` and click **Create**. The data model editor appears
    in the Editor area:![Figure 21.2: Editor area showing data model editor'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.02_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.2: Editor area showing data model editor'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Add Entity** button:![Figure 21.3: Add Entity button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.3: Add Entity button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An **Entity** appears under the **ENTITIES** section. The **Attributes** for
    this entity appear to the right of the entity:![Figure 21.4: Data model editor
    with Entity selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.4: Data model editor with Entity selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Double-click `Review`:![Figure 21.5: Data model editor with Entity renamed
    to Review'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.05_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.5: Data model editor with Entity renamed to Review'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `name` and the `String`:![Figure 21.6: Data model editor showing
    the name attribute for the Review entity'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.06_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.6: Data model editor showing the name attribute for the Review entity'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll need to create an attribute for each field in the `restaurantID` as
    well to associate the review with the restaurant. Add the following attributes
    and types:![Figure 21.7: Attributes to be added to the Review entity'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.07_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.7: Attributes to be added to the Review entity'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`date` will be automatically set when the `Review` instance is created.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check to see that your `Review` entity''s attributes look like this when done:![Figure
    21.8: The attributes for Review entity'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.08_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.8: The attributes for Review entity'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add one more attribute, `uuid`, of type `UUID`. This is used as a key value
    for each `Review` instance. Click the Data Model inspector, and under `Review`
    instance must have a key value.![Figure 21.9: Data model inspector showing Optional
    unticked for the uuid attribute'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.09_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.9: Data model inspector showing Optional unticked for the uuid attribute'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a second entity, called `RestaurantPhoto`, with the following attributes.
    Core Data can''t store `UIImage` objects, so the `photo` attribute''s type is
    set to `UIImage` objects when you need them to be displayed in your app. `date`
    will be automatically set when the `RestaurantPhoto` instance is created. You''ll
    use `restaurantID` to associate the photo with the restaurant, and `uuid` as the
    key value:![Figure 21.10: Attributes for the RestaurantPhoto entity'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.10_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.10: Attributes for the RestaurantPhoto entity'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For `uuid`, don''t forget to uncheck **Optional** in the Data Model inspector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 21.11: Data model inspector showing Optional unticked for the uuid
    attribute'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.11_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.11: Data model inspector showing Optional unticked for the uuid attribute'
  prefs: []
  type: TYPE_NORMAL
- en: You have finished creating the entities that you need for your app. Build your
    app. Class files for the `Review` and `RestaurantPhoto` entities will be automatically
    created by Xcode, but they will not be visible in the Project navigator. To make
    it easier to work with them, you will create a model object for each entity, starting
    with `ReviewItem` in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating ReviewItem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have created two entities to store reviews and photo data using Xcode's
    data model editor. Xcode will then automatically generate two `NSManagedObject`
    class definitions from the data model, `Review` and `RestaurantPhoto`, but you
    can't see them in the Project navigator.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will create two model objects, `ReviewItem` and `RestaurantPhotoItem`,
    that will work hand-in-hand with `Review` and `RestaurantPhoto` instances. Let''s
    create `ReviewItem` now. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ReviewForm` folder in the Project navigator and choose `Model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Model` folder inside the `ReviewForm` folder and select **New
    File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `ReviewItem`. Click `ReviewItem` file appears in the Project
    navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the file as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the `ReviewItem` structure's properties are the same as the
    `Review` entity's attributes. The initializer creates a `ReviewItem` instance
    and maps the attributes from `Review` to the properties of the `ReviewItem` instance.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll create a second model object, `RestaurantPhotoItem`,
    which will be the model object for the `RestaurantPhoto` entity.
  prefs: []
  type: TYPE_NORMAL
- en: Creating RestaurantPhotoItem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process for creating `RestaurantPhotoItem` is similar to creating `ReviewItem`.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Model` folder inside the `PhotoFilter` folder and choose **New
    File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `RestaurantPhotoItem`. Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the file as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that you have declared and defined `ReviewItem` and `RestaurantPhotoItem`,
    let's create a Core Data manager, which will set up the Core Data components for
    your app, in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Core Data manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, Xcode has automatically generated the `Review` and `RestaurantData`
    class definitions from the data model, and you have declared and defined the corresponding
    model objects, `ReviewItem` and `RestaurantPhotoItem`. Now you''ll create a `CoreDataManager`
    class that will set up the Core Data components for your app. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Core Data` folder inside the `Misc` folder and choose **New
    File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `CoreDataManager`. Click `CoreDataManager` file appears in the
    Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code after the `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This gives you access to the Core Data library.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to declare and define the `CoreDataManager` structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates and initializes instances of `NSManagedObjectModel`, `NSPersistentStoreCoordinator`,
    and `NSManagedObjectContext`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To create an instance of the `CoreDataManager` structure that will be available
    throughout your app, click the `AppDelegate` file in the Project navigator and
    add the following code after the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you''ll add methods to create `Review` and `RestaurantPhoto` instances,
    populate them using `ReviewItem` and `RestaurantPhotoItem` instances, and save
    them to the persistent store. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `CoreDataManager` file in the Project navigator. Add the following
    code after the initializer to implement the `addReview(_:)` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method takes a `ReviewItem` instance as a parameter and gets an empty `Review`
    instance from the `NSManagedObjectContext` instance. The properties of the `ReviewItem`
    instance are assigned to the attributes of the `Review` instance, and the `save()`
    method is called to save the contents of the `NSManagedObjectContext` instance
    to the persistent store. Note that you will see an error as you have not yet implemented
    the `save()` method. Ignore this error for now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code after the `addReview(_:)` method to implement the `addPhoto(_:)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method is similar to `addReview(_:)`. It takes a `RestaurantPhotoItem`
    instance as a parameter and gets an empty `RestaurantPhoto` instance from the
    `NSManagedObjectContext` instance. The properties of the `RestaurantPhotoItem`
    instance are assigned to the properties of the `RestaurantPhoto` instance, and
    the `save()` method is called to save the contents of the `NSManagedObjectContext`
    instance to the persistent store. Note that you will see an error as you have
    not yet implemented the `save()` method. Again, ignore this error for now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Implement the `save()` method by adding the following code before the final
    curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This `do-catch` block saves the contents of the `NSManagedObjectContext` instance
    to the persistent store. If the save was not successful, an error message is printed
    in the Debug area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When you want to retrieve reviews and photos from the persistent store, you
    will use `restaurantID` as an identifier to get reviews and photos for a particular
    restaurant. Let''s implement the methods required for this now. Add the following
    code after the `addPhoto(_:)` method to implement the `fetchReviews(by:)` and
    `fetchPhotos(by:)` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break this down, starting with `fetchReviews(by:)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This gets a reference to the `NSManagedObjectContext` instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This creates a `Review` instances from the persistent store.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This creates a `Review` instances with the specified `restaurantID`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This creates an array, `reviewItems`, that you will use to store the results
    of the fetch request.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This sorts the results of the fetch request by date, with the most recent items
    first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This sets the predicate for the fetch request.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This `do-catch` block performs the fetch request and places the results in the
    `items` array. If unsuccessful, your app will crash and an error message will
    be printed in the Debug area.
  prefs: []
  type: TYPE_NORMAL
- en: '`fetchPhotos(by:)` works the same way as `fetchReview(by:)`, but returns an
    array of `RestaurantPhotoItems` instances instead.'
  prefs: []
  type: TYPE_NORMAL
- en: You've created a `CoreDataManager` class that adds data to and retrieves data
    from the persistent store. Build and run your app to test for errors. It should
    work the same way as it did before.
  prefs: []
  type: TYPE_NORMAL
- en: You've implemented all the components of Core Data in your app. Next, you'll
    configure `RestaurantDetailViewController` to use Core Data to display reviews
    and photos in the **Restaurant Detail** screen. You'll start by learning how the
    **Restaurant Detail** screen will display reviews and photos for a particular
    restaurant.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Since this is a long chapter, you may wish to take a break here.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how saving and loading works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's review what you have done so far. You have created `Review` and `RestaurantPhoto`
    entities using the data model editor, and you have created the corresponding model
    objects for them, named `ReviewItem` and `RestaurantPhotoItem`. You created the
    `CoreDataManager` class to add and get `Review` and `RestaurantPhoto` instances
    from the persistent store. The `CoreDataManager` class uses the restaurant identifier
    to associate reviews and restaurant photos with a specific restaurant, but where
    does it come from?
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Misc` folder in your project, and open the `JSON` folder. If you
    click on any one of the JSON files inside, you''ll see that each restaurant has
    a unique numeric identifier. For example, the identifier for The Tap Trailhouse
    restaurant is `145237`, as shown in the screenshot below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.12: Editor area showing contents for Boston.json'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.12_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.12: Editor area showing contents for Boston.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you save restaurant photos and reviews to the persistent store, you will
    save them together with this identifier. Then, when a particular restaurant is
    displayed in the `RestaurantDetailViewController` will use a `ReviewDataManager`
    instance to retrieve reviews and restaurant photos of that restaurant and display
    them in collection views, as shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.13: iOS Simulator showing Restaurant Detail screen with reviews
    and restaurant photos'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.13_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.13: iOS Simulator showing Restaurant Detail screen with reviews and
    restaurant photos'
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are no reviews or photos, you''ll use the `NoDataView` to inform the
    user there are no reviews or photos, as shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.14: iOS Simulator showing Restaurant Detail screen without reviews
    or restaurant photos'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.14_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.14: iOS Simulator showing Restaurant Detail screen without reviews
    or restaurant photos'
  prefs: []
  type: TYPE_NORMAL
- en: '`RestaurantItem` has a property, `restaurantID`, to store restaurant identifiers.
    When `RestaurantDataManager` loads a JSON file and creates an array of `RestaurantItem`
    instances, the identifier for each restaurant is obtained from the JSON file and
    stored in the `restaurantID` property.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll update `ReviewFormViewController` to save a review
    with a restaurant identifier to the persistent store.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the ReviewFormViewController class to save reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `onSaveTapped(_:)` method to save a review to the persistent store when
    the **Save** button is tapped. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `ReviewFormViewController` file in the Project navigator. Add the
    following property to the `ReviewFormViewController` class before the outlet declarations
    to store the restaurant identifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `private` extension, move the `onSaveTapped(_:)` method into it, and
    modify it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that there is no mechanism to pass a restaurant identifier to `ReviewFormViewController`
    at present. In the next section, you'll see how to get the restaurant identifier
    from `RestaurantDetailViewController` and pass it to `ReviewFormViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: Passing RestaurantID to the ReviewFormViewController instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ReviewFormViewController` get that identifier from? You must pass the
    identifier value from `RestaurantDetailViewController` to `ReviewFormViewController`
    so that it can save reviews with the restaurant identifier for that restaurant.
    As you did before in [*Chapter 17*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248)*,
    Getting Started with JSONFiles*, you''ll use segue identifiers to determine which
    segue is occurring, and then implement methods to pass the identifier value between
    the two view controllers. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `RestaurantDetail` storyboard file and select the segue used to go
    to the **ReviewForm** scene:![Figure 21.15: Editor area showing segue between
    Restaurant Detail and Review Form screens selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.15_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.15: Editor area showing segue between Restaurant Detail and Review
    Form screens selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the Attributes inspector, set `showReview` and press *Return*:![Figure 21.16:
    Attributes inspector with Identifier set to showReview'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.16: Attributes inspector with Identifier set to showReview'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `RestaurantDetailViewController` file in the Project navigator. Add
    the following code after `viewDidLoad()` to implement the `prepare(for:sender:)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `prepare(for:sender:)` method checks to see if the segue has the `showReview`
    segue identifier. If it does, the `showReview(segue:)` method is executed prior
    to transitioning from the `showReview(segue:)` has not been implemented yet. You'll
    add that next.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `showReview(segue:)` method inside the `private` extension, before
    the `createRating()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This sets the `restaurantID` property of `ReviewFormViewController` to the identifier
    of the selected restaurant.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `ReviewFormViewController` file in the Project navigator. Add the
    following code inside the `viewDidLoad()` method to print the restaurant identifier
    to the Debug area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run your project, set a location, and tap **All**. Tap a restaurant,
    and tap the **Add Review** button. In the **Review Form** screen, enter a review
    and tap **Save**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.17: iOS Simulator showing Review Form screen Save button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.17_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.17: iOS Simulator showing Review Form screen Save button'
  prefs: []
  type: TYPE_NORMAL
- en: 'The restaurant identifier will appear in the Debug area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.18: Debug area showing the restaurant identifier'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.18_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.18: Debug area showing the restaurant identifier'
  prefs: []
  type: TYPE_NORMAL
- en: You've successfully passed the restaurant identifier from `RestaurantDetailViewController`
    to `ReviewFormViewController`. Now, let's do the same for photos. You'll update
    `PhotoFilterViewController` to save photos with a restaurant identifier to the
    persistent store when the **Save** button is tapped in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the PhotoFilterViewController class to save photos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code that enables the `PhotoFilterViewController` class to save photos
    to the persistent store is similar to the code you implemented in the `ReviewFormViewController`
    class for saving reviews. You will now update the `PhotoFilterViewController`
    class to save photos when the **Save** button is tapped. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `PhotoFilterViewController` file in the Project navigator. Add the
    following method inside the `private` extension after the `initialize()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember that `mainImageView` is the outlet for the large image view in the
    `saveSelectedPhoto()` method first checks to see if the `image` property of `mainImageView`
    is set. If it is, the image is assigned to `mainImage`. Next, a `RestaurantPhotoItem`
    instance is created and assigned to `restPhotoItem`, and the current date is assigned
    to the `restPhotoItem` instance's `date` property. The `mainImage` instance's
    `preparingThumbnail(of:)` method is used to create a smaller version of the image,
    which is assigned to the `restPhotoItem` instance's `photo` property. After that,
    the `restPhotoItem` instance's `restaurantID` property is set to the selected
    restaurant's identifier. Finally, the `CoreDataManager.shared.addPhoto(_:)` method
    is called to save the photo to the persistent store, and the **Photo Filter**
    screen is dismissed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You need to trigger this method when the `private` extension after the `onPhotoTapped(_:)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method will be connected to the **Save** button later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To assign the `onSaveTapped(_:)` method to the `PhotoFilter` storyboard file
    and click the **Photo Filter View Controller** icon in the **Photo Filter View
    Controller Scene**. Open the Connections inspector. Drag from the **onSaveTapped**
    action to the **Save** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 21.19: Connections inspector showing onSaveTapped: being assigned
    to the Save button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.19_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.19: Connections inspector showing onSaveTapped: being assigned to
    the Save button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can save, you need to pass the restaurant identifier to `PhotoFilterViewController`.
    As you did before, you''ll use segue identifiers to determine which segue is occurring,
    and then implement methods to pass the identifier value between the two view controllers.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `RestaurantDetail` storyboard file in the Project navigator and select
    the segue used to go to the **Photo Filter** screen:![Figure 21.20: Editor area
    showing segue between Restaurant Detail and Photo Filter screens selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.20_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.20: Editor area showing segue between Restaurant Detail and Photo
    Filter screens selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the Attributes inspector, set `showPhotoFilter` and press *Return*:![Figure
    21.21: Attributes inspector with Identifier set to showPhotoFilter'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.21_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.21: Attributes inspector with Identifier set to showPhotoFilter'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `RestaurantDetailViewController` file in the Project navigator. Update
    the `prepare(for:sender:)` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `showPhotoFilter(segue:)` method after the `showReview()` method inside
    your `private` extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This sets `PhotoFilterViewController`'s `restaurantID` property to the identifier
    of the selected restaurant.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build and run your project, set a location, and tap **All**. Tap a restaurant,
    and tap the **Add Photo** button. Select a photo, apply a filter, and tap **Save**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.22: iOS Simulator showing Photo Filter screen with Save button
    selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.22_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.22: iOS Simulator showing Photo Filter screen with Save button selected'
  prefs: []
  type: TYPE_NORMAL
- en: The photo will be saved to the persistent store, and you will be returned to
    the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you can save reviews and photos. Fantastic! In the next section,
    you will add code to load the reviews and photos from the persistent store to
    be displayed on the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying saved reviews and photos on the Restaurant Detail screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `RestaurantDetail.storyboard`, you''ll see that collection views have already
    been set up to display photos and reviews in the static table view cells. All
    you need to do is to implement the respective view controllers for the view and
    collection view cells. You''ll start with the view and collection view cells used
    to display reviews. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `LetsEat` folder in the Project navigator and choose `Reviews`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class**, and then
    click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ReviewCell`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UICollectionViewCell`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click `ReviewCell` file appears in the Project navigator. Enter the following
    code between the curly braces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ReviewCell` now has the properties for all the outlets in the collection view
    cell. Let''s create `ReviewsViewController` next. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Reviews` folder, and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class**, and then
    click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ReviewsViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UIViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click `ReviewsViewController` file appears in the Project navigator. Modify
    this file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `private` extension with the following code, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `private` extension contains the implementation for `initialize()` and `setupCollectionView()`
    methods. `initialize()` just calls `setupCollectionView()`. `setupCollectionView()`
    is used to configure the flow and spacing of the collection views and is similar
    to code you've written before.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following method after `setupCollectionView()` to implement `checkReviews()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This method will retrieve all restaurant reviews for the specified restaurant
    identifier. Let''s break this down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This statement assigns `RestaurantDetailViewController` to a temporary constant,
    `viewController`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This statement assigns the restaurant identifier of the restaurant shown in
    the `restaurantID`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This statement gets an array of reviews matching the given `restaurantID` from
    the persistent store and assigns it to `reviewItems`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If there are reviews for this restaurant, the collection view's background view
    is set to `nil`; otherwise, you create a `NoDataView` instance, set the `title`
    and `desc` properties to `"Reviews"` and `"There are currently no reviews"` respectively,
    and assign it to the collection view's background view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code tells the collection view to redraw itself onscreen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Implement the data source methods for the collection view by adding the following
    extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is similar to what you've done before. The number of cells to be displayed
    in the collection view is the same as the number of items in the `reviewItems`
    array. You set each cell's contents using the properties of the corresponding
    `ReviewItem` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the flow layout delegate methods for the collection view by adding the
    following extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method returns the size of the collection view cell to be displayed. If
    there is only one item in the `reviewItems` array, the cell's width is set to
    the width of the collection view—14 points; otherwise, it is set to the width
    of the collection view—21 points. The height is set to `200` points.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`ReviewsViewController` is now complete. Now, you''ll finish the implementation
    of the `RestaurantDetail` storyboard file. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `RestaurantDetail` storyboard file in the Project navigator. Select
    the `ReviewsViewController,` and press *Return*:![Figure 21.23: Identity inspector
    with Class set to ReviewsViewController'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.23_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.23: Identity inspector with Class set to ReviewsViewController'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The scene name will change to **Reviews View Controller Scene**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the `ReviewCell,` and press *Return*:![Figure 21.24: Identity inspector
    with Class set to ReviewCell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.24_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.24: Identity inspector with Class set to ReviewCell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the view in the document outline. Click the Identity inspector button,
    set `RatingsView,` and press *Return*:![Figure 21.25: Identity inspector with
    Class set to RatingsView'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.25_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.25: Identity inspector with Class set to RatingsView'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select `reviewCell` if it''s not already set:![Figure 21.26: Attributes inspector
    with Identifier set to reviewCell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.26_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.26: Attributes inspector with Identifier set to reviewCell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Connections inspector. Drag from the `dateLabel` outlet to the **Label**
    shown, if it''s not already set:![Figure 21.27: Connections inspector showing
    dateLabel outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.27_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.27: Connections inspector showing dateLabel outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drag from the `nameLabel` outlet to the **Label** shown, if it''s not already
    set:![Figure 21.28: Connections inspector showing nameLabel outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.28_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.28: Connections inspector showing nameLabel outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drag from the `reviewLabel` outlet to the **Label** shown, if it''s not already
    set:![Figure 21.29: Connections inspector showing reviewLabel outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.29_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.29: Connections inspector showing reviewLabel outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drag from the `titleLabel` outlet to the **Label** shown, if it''s not already
    set:![Figure 21.30: Connections inspector shown titleLabel outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.30_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.30: Connections inspector shown titleLabel outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drag from the `ratingsView` outlet to the ratings view shown, if it''s not
    already set:![Figure 21.31: Connections inspector showing the ratingsView outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.31_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.31: Connections inspector showing the ratingsView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the `collectionView` outlet to the **Collection View** as shown, if
    it''s not already set:![Figure 21.32: Connections inspector showing the collectionView
    outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.32_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 21.32: Connections inspector showing the collectionView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select `delegate` and `dataSource` outlets to the **Reviews View Controller**
    icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 21.33: Connections inspector showing the dataSource and delegate outlets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.33_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.33: Connections inspector showing the dataSource and delegate outlets'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. You should see the reviews you added earlier appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.34: iOS Simulator showing Restaurant Detail screen containing reviews'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.34_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.34: iOS Simulator showing Restaurant Detail screen containing reviews'
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of view controllers for the collection view and collection
    view cells used to display reviews is now complete, and your app now can display
    reviews that were entered using the **Review Form** screen earlier. If you have
    more than one review, you can swipe left and right to see each review. Since each
    review has a rating, you can use them to calculate and add an overall rating for
    a restaurant. Let's modify the app to do this next.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating a restaurant's overall rating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `CoreDataManager` to do this. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `CoreDataManager` file inside the Project navigator (inside the `Core
    Data` folder in the `Misc` folder). Add the following method before the `addReview(_:)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this method, all reviews for a particular restaurant are fetched from the
    persistent store and assigned to `reviews`. The `reduce()` method takes a closure,
    which is used to add all the review ratings together. Finally, the average rating
    value is calculated and returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can learn more about the `reduce()` method at this link: [https://developer.apple.com/documentation/swift/array/2298686-reduce](https://developer.apple.com/documentation/swift/array/2298686-reduce).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `RestaurantDetailViewController` file in the Project navigator (inside
    the `RestaurantDetail` folder). Update the `createRating()` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The overall rating will also need to be updated whenever the user adds a new
    review in the `viewDidLoad()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will recalculate the rating when the **Review Form** screen is dismissed
    and the **Restaurant Detail** screen reappears.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build and run your project, and you should now see an overall rating for restaurants
    that have reviews, as well as a corresponding star rating as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.35: iOS Simulator showing Restaurant Detail screen with overall
    ratings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.35_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 21.35: iOS Simulator showing Restaurant Detail screen with overall ratings'
  prefs: []
  type: TYPE_NORMAL
- en: There's still one thing left to do, and that's adding photo reviews. Your challenge
    is to add photo reviews and to display them in the collection view just under
    the collection view used for reviews. The way to do this is very similar to the
    way you used to add reviews. This chapter covers all you need to know, and if
    you get stuck, feel free to use the completed project files for this chapter,
    which you will find in the `Chapter21` folder of the code bundle of this book,
    downloadable from [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).
    You can also watch the CiA video for this chapter, located at [https://bit.ly/3o81yKK](https://bit.ly/3o81yKK).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about Core Data and its different components. You
    created data models for your app named `Review` and `RestaurantPhoto`, and you
    created the corresponding model objects for your app named `ReviewItem` and `RestaurantPhotoItem`.
    After that, you implemented `CoreDataManager` to set up Core Data components for
    your app.
  prefs: []
  type: TYPE_NORMAL
- en: You updated `ReviewFormViewController` and `PhotoFilterViewController` to save
    reviews and photos together with a restaurant identifier to the persistent store.
    You modified `RestaurantDetailViewController` to load reviews for a particular
    restaurant based on the restaurant identifier, and displayed them in a collection
    view. You also calculated and displayed the overall rating for that restaurant.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, on your own, you modified `RestaurantDetailViewController` to load
    photos for a particular restaurant based on the restaurant identifier, and displayed
    them in a collection view.
  prefs: []
  type: TYPE_NORMAL
- en: You now have a basic understanding of how Core Data works. You're also able
    to set up Core Data components and enable an interface between your app and Core
    Data components using a data manager class. You also know how to save and load
    reviews and photos using Core Data, which you will now be able to implement in
    your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: You have come to the end of a long journey, and have now finished building your
    app's primary functionality. All the screens work, and reviews and photos are
    persistent. Fantastic job!
  prefs: []
  type: TYPE_NORMAL
- en: This concludes *Part 3* of this book. In the next part, you'll find out about
    the cool new features Apple has introduced in iOS 15 and how to add them to your
    app, starting with getting your app ready for Apple Macs in the next chapter.
  prefs: []
  type: TYPE_NORMAL
