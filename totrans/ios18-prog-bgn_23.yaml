- en: '20'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with the Camera and Photo Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you created the `RatingView` class and added it to
    the Add New Journal Entry and Journal Entry Detail screens.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will complete the implementation of the Add New Journal
    Entry screen by adding a way for the user to get a photo from the **camera** or
    **photo library**, which they can then add to a new journal entry. You’ll start
    by adding a **tap gesture recognizer** to the image view in the **New Entry Scene**,
    and configure it to display an **image picker controller** instance. Then, you
    will implement methods from the `UIImagePickerControllerDelegate` protocol, which
    allows you to get a photo from the camera or photo library and make the photo
    smaller before it is saved to the journal entry instance. You’ll also modify the
    `Info.plist` file to allow you to access the camera or photo library.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to access the camera or
    photo library in your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new `UIImagePickerController` instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing `UIImagePickerControllerDelegate` methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting permission to use the camera or photo library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` project that you modified in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter20` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/MvOOKyBcVak](https://youtu.be/MvOOKyBcVak%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by modifying the Add New Journal Entry screen to display an image
    picker controller, which allows you to use the device camera or select a photo
    from the user’s photo library.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new UIImagePickerController instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make it easy for a user to use the camera or photo library, Apple implemented
    the `UIImagePickerController` class. This class manages the system interfaces
    for taking photos and choosing items from the user’s photo library. An instance
    of this class is called an image picker controller, and it can display an image
    picker on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have ever added a photo to a social media post, you will have seen what
    the image picker looks like. It typically displays either the view from your camera
    or a grid of photos from your photo library, and you can then choose a photo to
    be added to your post:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_20_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.1: Simulator showing the image picker'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UIImagePickerController` class, see [https://developer.apple.com/documentation/uikit/uiimagepickercontroller](https://developer.apple.com/documentation/uikit/uiimagepickercontroller).
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the image picker on the Add New Journal Entry screen, you’ll add
    a tap gesture recognizer instance to the image view in the **New Entry Scene**,
    and you’ll add a method to create and display an image picker controller when
    the image view is tapped. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project navigator, click the **Main** storyboard file. Click **New Entry
    Scene** in the document outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the image view in the **New Entry** **Scene**. Click the Attributes inspector
    button and, under **View**, tick the **User Interaction Enabled** checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.2: Attributes inspector showing the User Interaction Enabled checkbox'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Library button to display the library. Type `tap` in the filter field.
    A **Tap Gesture Recognizer** object will appear as one of the results. Drag it
    to the image view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.3: Library with Tap Gesture Recognizer object selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Navigator and Inspector buttons if you need more room to work. Click
    the Adjust Editor Options button and choose **Assistant** from the pop-up menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.4: Adjust Editor Options menu with Assistant selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the contents of the `AddJournalEntryViewController` file in
    the assistant editor. *Ctrl* + *Drag* from the **Tap Gesture Recognizer** in the
    document outline to the space between the `locationSwitchValueChanged(_:)` method
    and the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5: Editor area showing drag destination'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the pop-up dialog box, set **Name** to `getPhoto` and set **Type** to `UITapGestureRecognizer`.
    Click **Connect**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.6: Pop-up dialog box for action creation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the `getPhoto(_:)` method has been created in the `AddJournalEntryViewController`
    class. Click the **x** to close the assistant editor window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.7: Assistant editor showing getPhoto(_:) method'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully added a tap gesture recognizer to the image view in the
    **New Entry** **Scene** and linked it to a `getPhoto()` method in the `AddJournalEntryViewController`
    class. Now you’ll modify the `getPhoto()` method to create and display a `UIImagePickerController`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **AddJournalEntryViewController** file.
    Add a new extension after all other code in the file to make the `AddJournalEntryViewController`
    class declaration conform to the `UIImagePickerControllerDelegate` and `UINavigationControllerDelegate`
    protocols:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `getPhoto()` method as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This statement creates an instance of the `UIImagePickerController` class and
    assigns it to `imagePickerController`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This statement sets the image picker controller’s `delegate` property to the
    `AddJournalEntryViewController` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This block of code is known as a conditional compilation block. It starts with
    an `#if` compilation directive and ends with an `#endif` compilation directive.
    If you’re running in Simulator, only the statement setting the image picker controller’s
    `sourceType` property to the photo library is compiled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you’re running on an actual device, the statements setting the image picker
    controller’s `sourceType` property to the camera and displaying the camera controls
    are compiled. This means that the image picker controller will use the photo library
    when running in Simulator and will use the camera when running on an actual device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can learn more about conditional compilation blocks at this link: https://docs.swift.org/swift-book/documentation/the-swift-programming-language/statements/#Conditional-Compilation-Block.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This statement presents the image picker controller on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You’ve implemented all the code required to present the image picker controller
    when the image view is tapped. In the next section, you’ll implement the `UIImagePickerControllerDelegate`
    methods that will be called when the user chooses an image or cancels.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing UIImagePickerControllerDelegate methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `UIImagePickerControllerDelegate` protocol has a set of methods that you
    must implement in your delegate object to interact with the image picker controller
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UIImagePickerControllerDelegate` protocol, see [https://developer.apple.com/documentation/uikit/uiimagepickercontrollerdelegate](https://developer.apple.com/documentation/uikit/uiimagepickercontrollerdelegate).
  prefs: []
  type: TYPE_NORMAL
- en: When the image picker controller appears on screen, the user has the option
    of selecting a photo or canceling. If the user cancels, the `imagePickerControllerDidCancel(_:)`
    method is triggered, and if the user selects a photo, the `imagePickerController(_:didFinishPickingMediaWithInfo:)`
    method is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll implement these methods in your `AddJournalEntryViewController` class
    now. In the Project navigator, click the **AddJournalEntryViewController** file.
    Type the following code in the `UIImagePickerControllerDelegate` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `imagePickerControllerDidCancel(_:)` method is triggered when the user cancels.
    The image picker controller is dismissed and the user is returned to the Add New
    Journal Entry screen.
  prefs: []
  type: TYPE_NORMAL
- en: The `imagePickerController(_:didFinishPickingMediaWithInfo:)` method is triggered
    when the user selects a photo. This photo is then assigned to `selectedImage`.
    Next, the `selectedImage` instance’s `preparingThumbnail(of:)` method will be
    used to create a smaller image with a width and height of 300 points, the same
    as the size of the image view on the Journal Entry Detail screen. This image will
    then be assigned to the `photoImageView` property and the image picker controller
    will be dismissed
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the `preparingThumbnail(of:)` method at this link:
    [https://developer.apple.com/documentation/uikit/uiimage/3750835-preparingthumbnail](https://developer.apple.com/documentation/uikit/uiimage/3750835-preparingthumbnail).'
  prefs: []
  type: TYPE_NORMAL
- en: All the required `UIImagePickerController` delegate methods have been implemented.
    In the next section, you’ll modify the `Info.plist` file so that your app will
    ask for permission to use the camera or photo library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting permission to use the camera or photo library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple stipulates that your app must inform the user if it wishes to access the
    camera or photo library. If you don’t do this, your app will be rejected and will
    not be allowed on the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll modify the `Info.plist` file in your project to make your app display
    messages when it tries to access the camera or photo library. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Info** file in the Project navigator. Move your pointer over the
    **Information Property List** row and click the **+** button to create a new row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the new row, set the **Key** to **Privacy – Photo Library Usage Description**
    and set the **Value** to `This app uses photos in your photo library when creating
    journal entries`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a second row using the **+** button. This time, set the **Key** to **Privacy
    – Camera Usage Description** and set the **Value** to `This app uses your camera
    when creating journal entries`. Your `Info.plist` file should look like the following
    when done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.8: Info.plist with additional keys added'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Go to the Add New Journal Entry screen and tap the
    image view. The image picker will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.9: Simulator showing image picker'
  prefs: []
  type: TYPE_NORMAL
- en: If you run the app on an actual iOS device, a dialog box will appear asking
    for permission to use the camera. Click **OK** to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a photo and it will appear in the image view on the Add New Journal
    Entry screen. Enter sample details for the journal entry and click **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.10: Simulator showing photo on Add New Journal Entry screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be returned to the Journal List screen. Tap the newly added journal
    entry. You will see the photo is displayed on the Journal Entry Detail screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_20_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.11: Simulator showing photo on the Journal Entry Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: You can now add photos to a new journal entry on the Add New Journal Entry screen
    and display them on the Journal Entry Detail screen. Fantastic!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you completed the implementation of the Add New Journal Entry
    screen by adding a way for the user to get a photo from the camera or photo library,
    which then can be added to a new journal entry. First, you added a tap gesture
    recognizer to the image view in the New Entry scene and configured it to display
    an image picker controller. Then, you implemented the `UIImagePickerDelegate`
    protocol, which allows you to get a photo from the camera or the photo library,
    and made the photo smaller before it is saved to the journal entry instance. You
    also modified the `Info.plist` file to allow you to access the camera and photo
    library.
  prefs: []
  type: TYPE_NORMAL
- en: You are now able to write your own apps that import photos from your camera
    or photo library.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll implement a way for the user to search through the
    journal entries on the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
