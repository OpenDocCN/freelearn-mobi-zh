- en: Chapter 4. Getting Started with Material Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：开始使用材料设计
- en: Announced at the 2014 Google I/O conference and making its first appearance
    in Android Lollipop, Material Design is the new design language from Google.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在2014年Google I/O大会上宣布，并在Android Lollipop中首次亮相，材料设计是来自Google的新设计语言。
- en: This is particularly big news for Android, as Material Design's whole purpose
    is to provide a more consistent user experience; and as an open platform Android
    is particularly vulnerable to inconsistencies. Open your Android device's app
    drawer and spend some time flicking through your apps, and chances are you'll
    encounter at least a few apps that will look and feel *very* different from one
    another.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这对Android来说尤其是个大新闻，因为材料设计的整体目的是提供更一致的用户体验；作为一个开放平台，Android特别容易受到不一致性的影响。打开您的Android设备的应用程序抽屉，花些时间翻阅您的应用程序，您可能会遇到至少几个看起来和感觉与其他应用程序*非常*不同的应用程序。
- en: Material Design sets out to change all this by providing the tools and guidelines
    that you need to deliver a more unified user experience.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计旨在通过提供所需的工具和指南，改变这一切，以提供更统一的用户体验。
- en: By adhering to Material Design principles, you can create apps that look good,
    run smoothly, and feel like a seamless extension of the Android platform. And
    who wouldn't want that?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循材料设计原则，您可以创建外观美观、运行流畅，并感觉像是Android平台无缝扩展的应用程序。谁会不想要这样的呢？
- en: However, Material Design is more than just a bunch of technical specifications
    about how much shading you should apply to a button and how opaque your UI's primary
    text should be. So, before we get into *how* to create a UI that perfectly compliments
    Google's new design direction, let's get a better understanding of what Material
    Design is by looking at the theory behind it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，材料设计不仅仅是关于如何给按钮添加阴影、UI的主要文本应该有多不透明的技术规范。因此，在我们深入探讨如何创建一个与Google新设计方向完美匹配的UI之前，让我们通过了解其背后的理论来更好地理解材料设计是什么。
- en: The Material Design ethos
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材料设计的理念
- en: Material Design is based on the idea of translating the physical properties
    of real-world materials into the virtual screen, and it takes much of its inspiration
    from paper, ink, and print techniques.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计基于将现实世界材料的物理属性转化为虚拟屏幕的想法，并且从纸张、墨水和印刷技术中汲取了许多灵感。
- en: Material Design encourages designers and developers to create on-screen objects
    that seem to possess the same qualities as real-world objects. This means using
    techniques such as shadows, light, and elevation to create a sense of depth and
    edges.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计鼓励设计师和开发者创建屏幕上的对象，这些对象似乎具有现实世界对象的相同特性。这意味着使用阴影、光线和高度等技术来创造深度和边缘感。
- en: The way Material Design objects move also mimics how objects move in the physical
    world; for example, two real-world objects cannot occupy the same space simultaneously
    or pass through one another, so your on-screen objects shouldn't either.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计对象的移动方式也模仿了现实世界中物体的移动方式；例如，两个现实世界物体不能同时占据同一空间或相互穿过，因此您的屏幕对象也不应该如此。
- en: To help you create this illusion, Material Design introduces the concept of
    a simulated 3D space where all UI objects possess *X*, *Y*, and *Z* coordinates.
    The *Z* coordinate is particularly important, as the positive *Z* axis extends
    outward toward the user, creating that sense of depth that's so very crucial to
    Material Design.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您创造这种幻觉，材料设计引入了模拟3D空间的概念，其中所有UI对象都拥有*X*、*Y*和*Z*坐标。*Z*坐标尤为重要，因为正*Z*轴向外延伸至用户，创造出对材料设计至关重要的深度感。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Material Design, every object occupies a position on the *Z* axis, and iteach
    object has a standard 1dp thickness.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在材料设计中，每个对象都占据*Z*轴上的一个位置，每个对象都有标准的1dp厚度。
- en: Everything happens within Material Design's simulated 3D environment; objects
    appear, disappear, and transform into new objects without ever breaking the illusion
    of a continuous 3D environment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有操作都在材料设计的模拟3D环境中进行；物体出现、消失，并转化为新的物体，而不会打破连续3D环境的幻觉。
- en: When objects move through the Material Design space, they mimic how paper can
    be shuffled and bound together. For example, you can bind two sheets of material
    together along a common edge or *seam*, so they move together. By contrast, when
    two sheets of material overlap but occupy different positions along the *Z* axis,
    they're *not* bound together, and so can move independent of one another.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当物体在 Material Design 空间中移动时，它们模仿纸张如何被洗牌和装订在一起。例如，你可以沿着一个共同的边缘或 *接缝* 将两片材料绑在一起，使它们一起移动。相比之下，当两片材料重叠但沿着
    *Z* 轴占据不同的位置时，它们 *没有* 被绑定在一起，因此可以独立移动。
- en: These design principles may give your user interface a distinct look and feel,
    but Material Design isn't just about how your UI looks. You can use Material Design
    elements such as depth and shadow to give your users visual clues about your interface's
    hierarchy, subtly guiding them toward the UI elements that they need to interact
    with next. If used correctly, Material Design can help to ensure that your users
    instinctively know how to navigate and interact with your app's user interface.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设计原则可能会给你的用户界面带来独特的视觉和感觉，但 Material Design 不仅仅是关于你的 UI 看起来如何。你可以使用 Material
    Design 元素，如深度和阴影，为用户提供视觉线索，关于你的界面层次结构，微妙地引导他们走向他们需要与之交互的 UI 元素。如果使用得当，Material
    Design 可以帮助确保你的用户本能地知道如何导航和与你的应用程序的用户界面交互。
- en: One of the most effective ways of getting to grips with Material Design is to
    look at some examples of Material Design that are done well, so you know what
    you're aiming for.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握 Material Design 的最有效方法之一是查看一些做得很好的 Material Design 示例，这样你就知道你的目标是什么。
- en: Since Material Design is Google's design language, what better place to look
    for pointers than Google's own apps?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Material Design 是 Google 的设计语言，还有什么地方比 Google 自己的应用程序更好的地方去寻找指导呢？
- en: Case study – Hangouts
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究 – Hangouts
- en: The Hangouts app has undergone a major overhaul to bring it into line with Material
    Design.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Hangouts 应用程序已经进行了重大改造，以符合 Material Design。
- en: One of the most notable UI changes is the **Create New Message** button, which
    now appears as a floating action button, also known as a FAB. As the most important
    action, this FAB is prominently and conveniently located in the bottom-right part
    of the main Hangouts screen, so it's always within easy reach when the user needs
    to create a new message.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最显著的 UI 变化之一是“创建新消息”按钮，现在它以浮动操作按钮的形式出现，也称为 FAB。作为最重要的操作，这个 FAB 在主 Hangouts 屏幕的右下角显著且方便地定位，因此当用户需要创建新消息时，总是触手可及。
- en: '![Case study – Hangouts](img/B05061_4_1.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![案例研究 – Hangouts](img/B05061_4_1.jpg)'
- en: The Hangouts app uses two Material Design staples—elevation and shadows—to create
    the sense that the FAB is floating above all the other UI elements. This naturally
    draws the user's attention toward the screen's most important task; in this instance,
    the most important task is creating a new message.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Hangouts 应用程序使用了两个 Material Design 的基本元素——高度和阴影——来营造出 FAB（浮动操作按钮）似乎漂浮在其他所有 UI
    元素之上的感觉。这自然将用户的注意力引向屏幕上最重要的任务；在这个例子中，最重要的任务是创建一条新消息。
- en: Case study – Google Calendar
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究 – Google Calendar
- en: Material Design encourages the use of bold colors and large images. You'll find
    both of these in the updated Google Calendar app.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Material Design 鼓励使用鲜艳的颜色和大图像。你会在更新的 Google Calendar 应用程序中找到这两者。
- en: '![Case study – Google Calendar](img/B05061_4_2.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![案例研究 – Google Calendar](img/B05061_4_2.jpg)'
- en: Google Calendar is a great example of a UI where colors and images not only
    make the app fun to look at, but also serve a purpose by helping the user pick
    up important information about their schedule at a glance. For example, a quick
    glance at the previous calendar image is all that's needed to see I have running
    club coming up on Monday night, thanks to the large, colorful picture of the running
    shoes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Google Calendar 是一个很好的 UI 示例，其中颜色和图像不仅使应用程序看起来很有趣，而且通过帮助用户一眼就能看到他们的日程安排中的重要信息而发挥作用。例如，只需快速浏览一下之前的日历图像，就可以看到我周一晚上有一个跑步俱乐部，多亏了那双大号、色彩鲜艳的运动鞋图片。
- en: Calendar is also a great example of Material Design animations. Spend some time
    moving around the Calendar app, and you'll encounter different animated flourishes,
    such as the on-screen elements moving on and off the screen, assembling into new
    views.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 日历也是一个很好的 Material Design 动画示例。花些时间在日历应用程序中四处移动，你会遇到不同的动画装饰，例如屏幕上的元素在屏幕上移动进出，组装成新的视图。
- en: These short animations make navigating through the Google Calendar app a more
    fluid, natural, and generally much more enjoyable experience.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些简短动画使在Google Calendar应用中导航变得更加流畅、自然，并且通常更加愉快。
- en: Case study – Google Maps
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究 – Google Maps
- en: Google Maps uses Material Design's concept of **bottom sheets** to create an
    immersive experience, where the user selects a location and then explores all
    the information related to this location without leaving the Maps environment.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps使用Material Design的**底部面板**概念来创建沉浸式体验，用户可以选择一个位置，然后探索与该位置相关的所有信息，而无需离开地图环境。
- en: 'Open the Google Maps app and select a location (whether it''s a huge tourist
    attraction, a famous landmark, or simply your local pub), and you''ll notice a
    bottom sheet peeking up from the bottom of your screen. In its default state,
    this bottom sheet displays a few facts about your chosen location, but when you
    drag the sheet upward, it expands to fill the entire screen. This expanded sheet
    contains much more information, including opening times, contact details, photos,
    and user reviews of your chosen location:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Google Maps应用并选择一个位置（无论是大型旅游景点、著名地标，还是您当地的酒吧），您会注意到从屏幕底部升起的一个底部面板。在其默认状态下，此底部面板显示了一些关于您选择位置的事实，但当您将面板向上拖动时，它会扩展以填充整个屏幕。这个扩展的面板包含更多信息，包括营业时间、联系方式、照片以及您选择位置的用户评价：
- en: '![Case study – Google Maps](img/B05061_4_3.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![案例研究 – Google Maps](img/B05061_4_3.jpg)'
- en: Bottom sheets use shadows and elevation to create the impression that some components
    are positioned higher than others. In our Google Maps screenshot, the photo component
    is styled, so it appears to be lower than the rest of the bottom sheet.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 底部面板使用阴影和提升来营造一些组件位置高于其他组件的印象。在我们的Google Maps截图中，照片组件被样式化，因此看起来比底部面板的其他部分低。
- en: Once you've read everything the bottom sheet has to offer, you can dismiss it
    by dragging the sheet off the screen. The bottom sheet will fold away, revealing
    the main Google Maps screen, leaving you with the impression that this main screen
    was hiding behind the bottom sheet the entire time.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 读完底部面板提供的一切后，您可以通过将面板从屏幕上拖动来关闭它。底部面板将折叠起来，露出主要的Google Maps屏幕，给您留下整个时间主要屏幕都隐藏在底部面板后面的印象。
- en: Getting started with Material Design
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Material Design
- en: Now that we've explored the major concepts behind Material Design and seen a
    few examples of Material Design done well, it's time to look at how you can apply
    some of the core Material Design principles to your own Android apps.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了Material Design背后的主要概念，并看到了一些做得很好的Material Design示例，是时候看看您如何可以将一些核心的Material
    Design原则应用到您自己的Android应用中了。
- en: The next few sections will show you how to give your app a Material Design makeover
    using visual techniques such as shadows and elevation. You will also learn how
    to make some more fundamental changes to the way your app functions, by adding
    things such as FABs, cards, and `RecyclerView`. Let's start by making sure your
    app *looks* the part.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几节将向您展示如何使用视觉技术，如阴影和提升，为您的应用进行Material Design改造。您还将学习如何通过添加FAB、卡片和`RecyclerView`等元素，对应用的功能进行一些更基本的更改。让我们首先确保您的应用看起来符合要求。
- en: Applying the Material theme to your app
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Material主题应用到您的应用
- en: Applying the Material theme is the quickest and easiest way to get a consistent
    Material Design look across your entire app.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 应用Material主题是使整个应用具有一致Material Design外观最快、最简单的方法。
- en: 'Android provides light and dark variations for you to choose from:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了浅色和深色变体供您选择：
- en: '`Theme.Material`: This is the dark version of the Material theme. This is considered
    the default Material theme.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Theme.Material`: 这是Material主题的深色版本。这被认为是默认的Material主题。'
- en: '`Theme.Material.Light`: This is the light variation of the Material theme.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Theme.Material.Light`: 这是Material主题的浅色变体。'
- en: '`Theme.Material.Light.DarkActionBar`: This is the light version of the theme
    but with a dark action bar.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Theme.Material.Light.DarkActionBar`: 这是主题的浅色版本，但具有深色操作栏。'
- en: 'To apply the Material theme to your app, you need to create a new style that
    inherits from the version of the theme that you want to use (`Theme.Material`, `Theme.Material.Light`,
    or `Theme.Material.Light.DarkActionBar`). Open your project''s `res/valus/styles.xml` 
    file, and create a new style that inherits from the theme of your choice:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Material主题应用到您的应用中，您需要创建一个新的样式，该样式继承自您想要使用的主题版本（`Theme.Material`、`Theme.Material.Light`或`Theme.Material.Light.DarkActionBar`）。打开您的项目`res/values/styles.xml`文件，并创建一个新的样式，继承自您选择的主题：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To give your app its own identity while maintaining the look and feel of Material
    Design, you may want to add your own customizations to your inherited Material
    Design style. One of the most common customizations is changing the theme's base
    colors; for example, you may want to change the color of the action bar to match
    your app's *primary color*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在保持Material Design外观和感觉的同时赋予您的应用自己的身份，您可能希望向继承的Material Design样式添加自己的自定义设置。最常见的自定义之一是更改主题的基本颜色；例如，您可能希望将操作栏的颜色更改为与您的应用*主颜色*相匹配。
- en: 'Material Design uses two kinds of colors: primary and accent. As the name suggests,
    the primary color is the main color that''s used throughout your app—in Google
    Hangouts the primary color is green.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Material Design使用两种类型的颜色：主色和强调色。正如其名所示，主色是在整个应用中使用的主体颜色——在Google Hangouts中，主色是绿色。
- en: The accent color is a brighter shade that you use to draw attention to your
    app's most important elements, such as the floating action button or title. By
    using a consistent primary color with the occasional splash of bolder accent color,
    you can create a user interface that's colorful and vibrant but doesn't distract
    the user from your application's content.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 强调颜色是一种更亮的色调，您可以使用它来突出显示应用最重要的元素，例如浮动操作按钮或标题。通过使用一致的基色和偶尔的更醒目的强调颜色，您可以创建一个色彩丰富且充满活力的用户界面，同时不会分散用户对应用内容的注意力。
- en: 'When it''s time to customize the colors used in your inherited Material Design
    theme, there are several available attributes you can use:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要自定义继承的Material Design主题中使用的颜色时，有多个可用的属性可供使用：
- en: '`colorPrimary`: This sets the color of the action bar''s background. This is
    your app''s primary color.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorPrimary`: 这设置操作栏背景的颜色。这是您应用的主颜色。'
- en: '`colorAccent`: This is your app''s accent color. This should compliment your
    app''s primary color, and is a good way of drawing the user''s attention toward
    important UI elements.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorAccent`: 这是您应用的强调颜色。这应该与您应用的主颜色相协调，并且是吸引用户注意重要UI元素的好方法。'
- en: '`colorControlNormal`: This sets the color of your app''s framework controls
    when they''re in their default, non-activated state.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorControlNormal`: 这设置应用框架控制在其默认的非激活状态下的颜色。'
- en: '`colorControlActivated`: This sets the color of your framework controls when
    they''re in their activated state. This attribute overrides `colorAccent`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorControlActivated`: 这设置框架控制在其激活状态下的颜色。此属性覆盖`colorAccent`。'
- en: '`android:textColorPrimary`: This sets the color of the text on your controls.
    On devices running a pre-Lollipop version of Android, this attribute sets the
    color of the overflow menu and the action bar title.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:textColorPrimary`: 这设置控件上的文本颜色。在运行Lollipop版本之前的Android设备上，此属性设置溢出菜单和操作栏标题的颜色。'
- en: 'The following attributes only work on devices running Android 5.0 or higher:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性仅在运行Android 5.0或更高版本的设备上有效：
- en: '`colorPrimaryDark`: This is a dark variant of your app''s primary color. This
    attribute sets the color of your navigation bar (via `navigationBarColor`) and
    status bar (via `statusBarColor`).'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorPrimaryDark`: 这是您应用主颜色的深色变体。此属性设置导航栏（通过`navigationBarColor`）和状态栏（通过`statusBarColor`）的颜色。'
- en: '`colorControlHighlight`: This is the color applied to your app''s framework
    control highlights, such as ripple animations. You can use this attribute to provide
    visual feedback that compliments your app''s color scheme. Just don''t get carried
    away—too much visual feedback and you''re running the risk of overwhelming the
    user.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorControlHighlight`: 这是应用于应用框架控制高亮显示的颜色，例如涟漪动画。您可以使用此属性提供与您的应用配色方案相协调的视觉反馈。但请勿过度使用——过多的视觉反馈可能会让用户感到不知所措。'
- en: '`colorSwitchThumbNormal`: The user interacts with a toggle switch by dragging
    the switch''s `Thumb` section back and forth. This attribute sets the color of
    the `Thumb` element when it''s in the *off* position.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorSwitchThumbNormal`: 用户通过拖动开关的`Thumb`部分来回切换。此属性设置`Thumb`元素在*关闭*位置时的颜色。'
- en: '`android:colorButtonNormal`: This sets the color of a button when it''s in
    its default, non-pressed state.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:colorButtonNormal`: 这设置按钮在其默认的非按下状态下的颜色。'
- en: '`android:colorEdgeEffect`: This sets the color of your app''s overscroll effect,
    which occurs when the user tries to scroll beyond your content''s boundaries.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:colorEdgeEffect`: 这设置应用滚动超出内容边界时的滚动效果颜色。'
- en: '`android:navigationBarColor`: This sets the color of the navigation bar, which
    is the bar that appears at the bottom of your device and contains the  ***Back**,* 
    ***Home**,* and  ***Recent*** softkeys.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:navigationBarColor`：这设置了导航栏的颜色，即出现在设备底部并包含  ***Back**,*  ***Home**,*
    和  ***Recent*** 软键的栏。'
- en: 'To create your own variation of the Material theme, add any of the preceding
    attributes to the style we created earlier:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建材料主题的自己的变体，请将任何前面的属性添加到我们之前创建的样式中：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, you know how to customize the colors in your Material-inspired theme, but
    what colors should you use? Once again, Material Design has the answers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经知道如何自定义受材料启发的主题中的颜色，但您应该使用什么颜色呢？再次强调，材料设计有答案。
- en: Choosing your color scheme
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择您的配色方案
- en: Choosing your color scheme is one of the most important UI decisions you need
    to make, as the colors you pick will affect every single part of your user interface.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您的配色方案是您需要做出的最重要的 UI 决定之一，因为您选择的颜色将影响用户界面的每一个部分。
- en: To help you make this crucial design decision, the Android team released a complete
    palette of primary and accent colors that are designed to compliment one another.
    You can find the complete Material Design palette at [https://www.google.com/design/spec/style/color.html#](https://www.google.com/design/spec/style/color.html)
    .
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您做出这个关键的设计决定，Android 团队发布了一套主色和强调色调色板，这些颜色设计得相互补充。您可以在 [https://www.google.com/design/spec/style/color.html#](https://www.google.com/design/spec/style/color.html)
    找到完整的材料设计调色板。
- en: When choosing your app's color scheme, you should select three hues from the
    primary palette (that's any color marked 500) and one accent color from the secondary
    palette (that's any color *except* the 500 colors).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择您应用的配色方案时，您应该从主调色板中选择三种色调（即任何标记为 500 的颜色）和从辅助调色板中选择一种强调色（即任何不是 500 的颜色）。
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Need some help selecting your palette?**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**需要一些帮助选择您的调色板吗？**'
- en: Struggling to choose from the massive selection of colors and shades on offer?
    You may want to check out one of the many websites that can generate a complete
    Material Design palette for you. Simply select two colors, and the website generates
    a complete palette of primary and accent colors based on your selection. There's
    plenty of palette generators available online, but one of the simplest and easiest
    to use is Material Palette at [http://www.materialpalette.com/](http://www.materialpalette.com/)
    .
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在众多颜色和阴影的选择中感到困惑？您可能想查看许多可以为您生成完整材料设计调色板的网站之一。只需选择两种颜色，网站就会根据您的选择生成一个包含主色和强调色的完整调色板。网上有很多调色板生成器，但其中最简单、最容易使用的是
    Material Palette，网址为 [http://www.materialpalette.com/](http://www.materialpalette.com/)。
- en: Backwards compatibility
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向后兼容性
- en: The Material theme is only available in Android 5.0 (API level 21) and upwards,
    so in its default state you cannot use the Material theme or any other custom
    theme derived from it on devices running earlier versions of Android.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 材料主题仅在 Android 5.0（API 级别 21）及以上版本中可用，因此在其默认状态下，您无法在运行早期版本 Android 的设备上使用材料主题或任何由此派生的自定义主题。
- en: However, you can make the Material theme available to users running API 7 and
    higher using the **AppCompat library**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可以使用 **AppCompat 库** 使材料主题对 API 7 及以上版本的运行用户可用。
- en: To add this library to your project, make sure you've downloaded the latest
    version of **Android Support Library** (if you're using Eclipse) or **Android
    Support Repository** (if you're using Android Studio). AppCompat relies on the
    v4 support library so make sure you've also added this library to your project.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此库添加到您的项目中，请确保您已下载 **Android Support Library** 的最新版本（如果您使用 Eclipse）或 **Android
    Support Repository**（如果您使用 Android Studio）。AppCompat 依赖于 v4 支持库，因此请确保您已将此库添加到您的项目中。
- en: 'Android Studio users need to add AppCompat as a dependency in their module-level
    `build.gradle` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 用户需要在他们的模块级 `build.gradle` 文件中添加 AppCompat 作为依赖项：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Eclipse users will need to locate the AppCompat library in their Android SDK
    directory, copy the library into their project's `libs` directory, right-click
    on the JAR file and select **Build Path**, followed by **Add to Build Path**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 用户需要在他们的 Android SDK 目录中找到 AppCompat 库，将其复制到项目 `libs` 目录中，右键单击 JAR 文件并选择 **Build
    Path**，然后选择 **Add to Build Path**。
- en: 'To use AppCompat, make sure all your project''s activities extend `AppCompatActivity`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 AppCompat，请确保您项目中的所有活动都扩展了 `AppCompatActivity`：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Your theme must also inherit from `Theme.AppCompat`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您的主题还必须继承自 `Theme.AppCompat`：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After this, you're free to customize the Material theme as normal.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，您可以像平常一样自定义材料主题。
- en: Creating a sense of depth
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创造深度感
- en: 'Material Design combines three visual techniques to create a sense of depth:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计结合了三种视觉技术来创造深度感：
- en: '**Lights**: In Material Design''s simulated 3D environment, virtual lights
    illuminate the on-screen objects and allow them to cast shadows. Lighting takes
    the form of either key lights (which cast directional shadows) or ambient lighting
    (which create soft shadows from all angles).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光源**：在材料设计的模拟 3D 环境中，虚拟光源照亮屏幕上的对象，并允许它们投射阴影。照明可以是主光源（投射方向性阴影）或环境照明（从所有角度创建柔和阴影）。'
- en: '**Shadows**: These give your users important visual clues about each object''s
    depth. When an object moves, shadows continue to supply important information
    including the direction the object is moving toward, and whether the distance
    between this object and other on-screen objects is increasing or decreasing. The
    shape an object casts is defined by the object''s background and *not* its content,
    so a circular button will cast a circular shadow, regardless of the shape of the
    button''s icon.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阴影**：这些为用户提供关于每个对象深度的关键视觉线索。当对象移动时，阴影会继续提供重要信息，包括对象移动的方向，以及此对象与其他屏幕上对象之间的距离是增加还是减少。对象投射的形状由对象的背景定义，而不是其内容，因此，无论按钮图标形状如何，圆形按钮都会投射圆形阴影。'
- en: '**Elevation**: Each UI element has its own elevation, which is the object''s
    elevation along the *Z* axis. Elevation can help you communicate the importance
    of each screen''s different UI elements, naturally drawing the user''s eye toward
    the most important on-screen elements.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度**：每个 UI 元素都有自己的高度，这是对象沿 *Z* 轴的高度。高度可以帮助您传达每个屏幕上不同 UI 元素的重要性，自然地将用户的注意力吸引到屏幕上最重要的元素。'
- en: You can create shadows by specifying an object's elevation. When you add an
    elevation, the framework automatically casts a shadow across the items behind
    the object. An object's elevation determines the appearance of its shadow; a view
    with a higher *Z* value will cast a larger, softer shadow.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定对象的高度来创建阴影。当您添加高度时，框架会自动在对象后面的项目上投射阴影。对象的高度决定了其阴影的外观；具有更高 *Z* 值的视图将投射更大、更柔和的阴影。
- en: 'To set a view''s elevation, use the `android:elevation` attribute:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置视图的高度，请使用 `android:elevation` 属性：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Just keep in mind that all material elements have a thickness of 1dp, so elevation
    is the distance from the top of one surface to the top of another.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 只需记住，所有材料元素都具有 1dp 的厚度，因此高度是从一个表面的顶部到另一个表面的顶部的距离。
- en: If you want to set a view's elevation programmatically, use the `View.setElevation`
    and `View.getElevation` methods.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想以编程方式设置视图的高度，请使用 `View.setElevation` 和 `View.getElevation` 方法。
- en: Every object has a default *resting* elevation that should be consistent across
    your app. For example, if you position a floating action button at 10dp on one
    screen, it should be positioned at 10dp on *every* screen.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象都有一个默认的 *静止* 高度，应在您的应用中保持一致。例如，如果您在一个屏幕上将浮动操作按钮定位在 10dp，那么它应该在 *每个* 屏幕上定位在
    10dp。
- en: Objects can also have a responsive elevation, which is where they temporarily
    change their elevation in response to a user action. For example, if the user
    selects a picture in a gallery app, this picture may temporarily increase its
    elevation to indicate its selected status.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对象还可以具有响应式高度，这是指它们根据用户操作临时改变其高度。例如，如果用户在图库应用中选择了一张图片，这张图片可能会临时增加其高度以指示其选中状态。
- en: Responsive elevations should also be consistent across your app, so if the picture
    in a gallery app changes elevation by 5dp, all other images that have responsive
    elevations must display the exact same 5dp behavior.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式高度也应跨您的应用保持一致，因此，如果图库应用中的图片通过 5dp 改变高度，所有其他具有响应式高度的其他图片必须显示完全相同的 5dp 行为。
- en: If an object changes elevation, it should return to its resting elevation as
    soon as possible—typically as soon as the input event is completed or cancelled.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象改变高度，它应尽快返回其原始高度——通常是在输入事件完成或取消后。
- en: When adding components with responsive elevations, check that there's no possibility
    of one component encountering another component while it is changing elevation.
    Remember that in Material Design, objects cannot pass through one another! If
    the space is tight, then one solution is to use animations to temporarily move
    objects out of the way; for example, you could animate one object a few pixels
    to the right in order to clear the way for an object that's changing its elevation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加具有响应式高度的组件时，请确保没有可能发生一个组件在改变高度时遇到另一个组件的情况。请记住，在Material Design中，对象不能相互穿过！如果空间紧张，那么一个解决方案是使用动画暂时将对象移开；例如，您可以将一个对象向右移动几个像素，以便为正在改变高度的另一个对象腾出空间。
- en: Creating a Material Design structure
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Material Design结构
- en: At this point, you've selected your color palette, created a customized version
    of the Material theme, and know how to add elevation to your user interface.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，您已经选择了您的调色板，创建了一个定制的Material主题版本，并且知道如何为用户界面添加高度。
- en: The next step is to look at some of the new structural elements you can add
    to your app, so it doesn't *just* look like a Material app, it acts like a Material
    app, too.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是查看您可以添加到您的应用中的新结构元素，这样它不仅看起来像Material应用，而且也表现得像Material应用。
- en: 'Let''s start with one of the most familiar Material Design features: floating
    action buttons.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最熟悉的Material Design功能之一：浮动操作按钮开始。
- en: Floating action buttons
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮动操作按钮
- en: A FAB is a circular sheet of material that appears to float above the user interface
    (hence the name). If you have a persistent action that needs to be readily available
    to the user, you should consider displaying it as a FAB.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: FAB是一张看似漂浮在用户界面之上的圆形材料片（因此得名）。如果您有一个需要用户随时可用的持久操作，您应该考虑将其显示为FAB。
- en: Floating icon buttons represent a single promoted action, and use the familiar
    system icons.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动图标按钮代表一个单一推荐的操作，并使用熟悉的系统图标。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find all the system icons at [https://www.google.com/design/icons/](https://www.google.com/design/icons/)
    .
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.google.com/design/icons/](https://www.google.com/design/icons/)找到所有系统图标。
- en: Adding a FAB to your project via XML is fairly straightforward, as it uses many
    attributes you're already familiar with, such as `android:id` and `layout_width`.
    However, in our FAB example, we're going to use a new element called `CoordinatorLayout`.
    This attribute lets you control the way your UI elements interact, and is particularly
    useful for telling FABs how they should react when the user scrolls the screen;
    should they move or remain anchored in the same place?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过XML将FAB添加到项目中相对简单，因为它使用了您已经熟悉的许多属性，例如`android:id`和`layout_width`。然而，在我们的FAB示例中，我们将使用一个名为`CoordinatorLayout`的新元素。这个属性允许您控制UI元素之间的交互方式，并且对于告诉FAB在用户滚动屏幕时应该如何反应特别有用；是移动还是保持在同一位置？
- en: 'In this example, we''re placing our FAB inside `CoordinatorLayout` and telling
    it to remain anchored to the bottom of the toolbar:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将FAB放置在`CoordinatorLayout`内部，并告诉它保持在工具栏的底部：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You may notice that we haven't specified the FAB's background color; that's
    because the FAB defaults to your theme's `colorAccent` property unless you specify
    otherwise.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到我们没有指定FAB的背景颜色；这是因为FAB默认使用您主题的`colorAccent`属性，除非您指定了其他颜色。
- en: 'You can add a click event in the usual way. So, to make things interesting,
    I''ll throw in another new element from Material Design: the **Snackbar**.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像往常一样添加点击事件。所以，为了使事情更有趣，我将加入另一个来自Material Design的新元素：**Snackbar**。
- en: 'Snackbars are similar to Toasts, but the key difference is that users can interact
    with them. The user dismisses a Snackbar by swiping it off the screen. Snackbars
    appear at the bottom of the screen. So, they are perfect for displaying a message
    that relates to our FAB, which also happens to be positioned towards the bottom
    of the screen:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Snackbar与Toast类似，但关键区别是用户可以与之交互。用户通过从屏幕上滑动来关闭Snackbar。Snackbar出现在屏幕底部。因此，它们非常适合显示与我们的FAB相关的消息，而FAB恰好位于屏幕底部：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When creating FABs there are a few guidelines you should keep in mind:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建FAB时，有一些指南您应该记住：
- en: '**Be positive**: Only use FABs for positive actions such as **Create**, **Like**, **Share**,
    or **Navigate, **and never for destructive actions such as **Archive** or **Trash**.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持积极**：仅使用FAB进行积极操作，例如**创建**、**喜欢**、**分享**或**导航**，永远不要用于破坏性操作，例如**存档**或**垃圾箱**。'
- en: '**Use consistent spacing**: On mobile devices, you should place your FABs 16dp
    or more from the edge. On tablet-sized devices, floating action buttons should
    be a minimum of 24dp away from the edge.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用一致的间距**：在移动设备上，你应该将FABs放置在边缘16dp或更多的地方。在平板尺寸的设备上，浮动动作按钮应至少距离边缘24dp。'
- en: '**Avoid customized FABs**: Always use the standard circular icon, and don''t
    be tempted to give your action button extra dimensions. If you do want to put
    your own spin on a FAB, you can always animate the icon inside the button.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免自定义FABs**：始终使用标准圆形图标，并且不要被给动作按钮额外尺寸的诱惑所吸引。如果你确实想给FAB添加自己的风格，你总是可以动画化按钮内的图标。'
- en: '**Don''t include overflow actions**: Overflow menus belong in toolbars, not
    in FABs.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要包含溢出动作**：溢出菜单属于工具栏，而不是FABs。'
- en: Tip
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Impress with FAB animations**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**用FAB动画给人留下深刻印象**'
- en: As a prominent UI element, FABs are the perfect opportunity to surprise and
    delight your users with animated flourishes. For example, you could design your
    `Create new email` FAB, so it transforms into a new e-mail when tapped. Experiment
    with different animations and transitions, but don't get carried away! Animations
    should be subtle, finishing touches and never get in the user's way or run the
    risk of distracting them from your app's actual content.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 作为突出的UI元素，FABs是让用户通过动画装饰感到惊喜和愉悦的绝佳机会。例如，你可以设计你的“创建新电子邮件”FAB，使其在点击时变成一封新电子邮件。尝试不同的动画和过渡效果，但不要过分！动画应该是细微的，是最后的润色，永远不要阻碍用户的操作或分散他们对应用实际内容的注意力。
- en: Bottom sheets
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 底部面板
- en: A bottom sheet is a sheet of material that slides up from the bottom of the
    screen in response to user action, for example the sheet that appears when you
    select a point of interest in Google Maps.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 底部面板是一张从屏幕底部滑动的材料面板，是对用户操作的响应，例如在谷歌地图中选择兴趣点时出现的面板。
- en: A bottom sheet's initial height is relative to the height of the list items
    it contains, but a bottom sheet's initial height shouldn't be more than its 16:9
    ratio.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 底部面板的初始高度相对于它包含的列表项的高度，但底部面板的初始高度不应超过其16:9的比例。
- en: Bottom sheets initially only cover a portion of the screen, but they do expand
    to fill the entire screen when the user swipes upward. When a bottom sheet is
    expanded to its full height, the user can scroll through its content; again, the
    Google Maps app is a perfect example of this functionality.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 底部面板最初仅覆盖屏幕的一部分，但当用户向上滑动时，它们会扩展以填充整个屏幕。当底部面板扩展到其完整高度时，用户可以滚动查看其内容；再次，谷歌地图应用是这种功能的完美示例。
- en: Bottom sheets are best suited to displaying three or more actions that don't
    require a description. If you want to display fewer than three actions, or you
    want to include detailed descriptions, then you should consider using a dialogue
    or menu instead.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 底部面板最适合显示三个或更多不需要描述的动作。如果你想要显示少于三个动作，或者你想要包含详细描述，那么你应该考虑使用对话框或菜单。
- en: 'There are two types of bottom sheets:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 底部面板有两种类型：
- en: 'Persistent bottom sheets:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续底部面板：
- en: These are persistent structural elements that appear throughout your application.
    They display in-app content that supplements the main view. Persistent bottom
    sheets remain visible even when they're not actively in use, and they rest at
    the same elevation as the rest of your app. Persistent bottom sheets are useful
    for drawing the user's attention toward important content by presenting it in
    a unique way.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是贯穿整个应用的结构性元素。它们显示补充主视图的应用内内容。即使它们未被积极使用，持续底部面板仍然可见，并且它们与应用其余部分处于相同的高度。持续底部面板通过以独特的方式呈现内容，有助于将用户的注意力吸引到重要内容上。
- en: 'Modal bottom sheets:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模态底部面板：
- en: This is a temporary sheet of material that rests at a higher elevation than
    the rest of your content.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个临时材料面板，其高度高于其他内容。
- en: You can use modal bottom sheets to present actions in a list or grid format
    as an alternative to menus and simple dialogues. It's impossible for the user
    to overlook a modal sheet; when an active modal bottom sheet slides onto the screen,
    the rest of the screen dims. Users have to dismiss the modal sheet before they
    can interact with the underlying content. Modal bottom sheets are handy if you
    need to present the user with a list of actions, and there's no suitable place
    in your user interface where you can insert a menu button.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用模态底部面板以列表或网格格式展示操作，作为菜单和简单对话框的替代方案。用户不可能忽略模态面板；当一个活动的模态底部面板滑入屏幕时，屏幕的其他部分会变暗。用户必须先关闭模态面板，才能与底层内容进行交互。如果你需要向用户展示一系列操作，且用户界面中没有合适的位置插入菜单按钮时，模态底部面板非常方便。
- en: However, on larger screens where space is less restricted, components such as
    dialogues and menus may be more appropriate than modal bottom sheets. This is
    because bottom sheets, as the name suggests, always appear at the bottom of the
    screen. For a user interacting with your app on a larger device, such as a tablet
    held in portrait mode, a modal sheet may appear at a significant distance from
    where the user triggered the sheet. This might not sound like a big deal, but
    little annoyances like this can really add up, chipping away at the user's overall
    experience of your app.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在屏幕空间较少的大屏幕上，对话框和菜单等组件可能比模态底部面板更合适。这是因为，正如其名所示，底部面板总是出现在屏幕底部。对于在较大设备（如横握模式的平板电脑）上与你的应用交互的用户来说，模态面板可能出现在用户触发面板的显著距离之外。这可能听起来不是什么大问题，但这样的小烦恼真的会累积起来，逐渐削弱用户对你的应用的整体体验。
- en: '![Bottom sheets](img/B05061_4_4.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![Bottom sheets](img/B05061_4_4.jpg)'
- en: The preceding screenshot shows an example of a modal bottom sheet in its default
    state before it's expanded.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了模态底部面板在展开前的默认状态。
- en: CardView
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CardView
- en: Cards give you a convenient and consistent way of displaying related content,
    particularly content that comprises of multiple data types. For example, you could
    create a card that contains images, links, text, or video about a specific subject.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片为你提供了一个方便且一致的方式来显示相关内容，特别是包含多种数据类型的内容。例如，你可以创建一个包含关于特定主题的图片、链接、文本或视频的卡片。
- en: Cards are also handy when you want to display data alongside interactive features,
    such as **+1**, comments, and user reviews. Just be wary of overloading your cards
    with too much information.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想在交互式功能（如**+1**、评论和用户评价）旁边显示数据时，卡片也很有用。只是要注意不要让卡片上信息过多。
- en: Cards have a constant width and a variable height that can expand temporarily
    depending on the available space.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片具有恒定的宽度和可变的高度，可以根据可用空间临时扩展。
- en: 'Each card is made up of blocks of content. A typical card consists of the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 每张卡片由内容块组成。一张典型的卡片通常包括以下内容：
- en: '*A header or primary title*. This should indicate what the card is all about.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*标题或主要标题*。这应该表明卡片是关于什么的。'
- en: '*Rich media* such as images or video. Including rich media helps the user get
    valuable information from your card at a glance; for example, if you''re designing
    a weather app, featuring a picture on every card means your users get an idea
    of what the weather is going to be like just by glancing at that card.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*富媒体*，例如图片或视频。包括富媒体可以帮助用户一眼就能从你的卡片中获取有价值的信息；例如，如果你正在设计一个天气应用，每张卡片上都有一个图片，意味着用户只需瞥一眼那张卡片就能对天气情况有一个大致的了解。'
- en: '![CardView](img/B05061_4_5.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![CardView](img/B05061_4_5.jpg)'
- en: '*Supporting text*. Text that provides important information about the card.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*辅助文本*。提供有关卡片的重要信息的文本。'
- en: '*A primary action*. This is the most important action the user can perform
    within the context of this card. Think of this as the card''s equivalent of a
    FAB.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*主要操作*。这是用户可以在卡片上下文中执行的最重要操作。将其视为卡片上的FAB（浮动操作按钮）的等价物。'
- en: '*Optional supplemental actions*. These can be icons, text, or even UI controls
    that give the user the ability to change the card''s content. In our weather example,
    you may include a slider that allows the user to scroll through the weather forecast
    for each hour.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可选的辅助操作*。这些可以是图标、文本，甚至是UI控件，使用户能够更改卡片的内容。在我们的天气示例中，你可以包括一个滑块，允许用户滚动查看每个小时的天气预报。'
- en: When you're designing your card's content hierarchy, you should place the most
    important content at the top, whereas supplemental icons usually belong at the
    very bottom of the card.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当您设计卡片的内容层次结构时，您应该将最重要的内容放置在顶部，而补充图标通常属于卡片的最底部。
- en: 'You add a card to your layout using `CardView`. The following code shows you
    how to add an empty card to your layout via XML:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `CardView` 将卡片添加到您的布局中。以下代码展示了如何通过 XML 添加一个空白的卡片到您的布局中：
- en: '[PRE8]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You add content to `Cardview` in exactly the same way you add content to a
    regular layout. The following example demonstrates how to create a `LinearLayout`
    that contains a `Contacts` card. This `Contacts CardView` displays each person''s
    name and avatar:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您以与添加常规布局内容相同的方式向 `Cardview` 添加内容。以下示例演示了如何创建一个包含 `Contacts` 卡片的 `LinearLayout`。此
    `Contacts CardView` 显示每个人的姓名和头像：
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can use `CardViews` on devices that are running Android 2.1 (API level
    7) and higher by adding the `v7 cardview` library to your project. If you''re
    using Eclipse, you''ll need to add this library to your project''s `libs` directory,
    then select **Build Path**, followed by **Add to Build Path**. Android Studio
    users need to add this library as a dependency in their module-level `build.gradle`
    file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `CardViews` 在运行 Android 2.1（API 级别 7）及更高版本的设备上，通过将 `v7 cardview` 库添加到您的项目中来实现。如果您正在使用
    Eclipse，您需要将此库添加到项目中的 `libs` 目录，然后选择**构建路径**，接着选择**添加到构建路径**。Android Studio 用户需要在他们的模块级
    `build.gradle` 文件中将此库添加为依赖项：
- en: '[PRE10]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Adding a standard `CardView` to your layout is pretty straightforward, but
    if you want to customize Android''s standard `CardView`, you can make the following
    changes:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的布局中添加一个标准的 `CardView` 非常直接，但如果您想自定义 Android 的标准 `CardView`，您可以做出以下更改：
- en: Change a card's corner radius using `cardView:cardCornerRadius`, for example, `card_view:cardCornerRadius="10dp"`.
    Alternatively, you can set the corner radius via your application code using the `cardView.setRadius`
    method.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `cardView:cardCornerRadius` 更改卡片的角度半径，例如，`card_view:cardCornerRadius="10dp"`。或者，您可以通过使用
    `cardView.setRadius` 方法通过您的应用程序代码设置角度半径。
- en: Change a card's background color using `card_view:cardBackgroundColor`.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `card_view:cardBackgroundColor` 更改卡片背景颜色。
- en: Give your card an elevation and create a shadow using `card_view:cardElevation`.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `card_view:cardElevation` 为您的卡片添加一个高度并创建一个阴影。
- en: Lists and RecyclerView
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表和 RecyclerView
- en: Lists give you a way of presenting related data types in a consistent, easy-to-read
    format.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 列表为您提供了一种以一致、易于阅读的格式展示相关数据类型的方法。
- en: A list consists of continuous columns and rows that serve as containers for
    tiles. You should prioritize your most important content within each tile; imagine
    you're designing an e-mail app where each e-mail is represented by a tile. Typically,
    each tile would display the sender's name and the subject heading in a larger
    font, as this is the most important information, and then you'd provide a preview
    of the e-mail's text in a smaller font.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 列表由连续的列和行组成，这些列和行作为瓷砖的容器。您应该在每个瓷砖中优先考虑您最重要的内容；想象您正在设计一个电子邮件应用程序，其中每个电子邮件都由一个瓷砖表示。通常，每个瓷砖会以较大的字体显示发件人的姓名和主题标题，因为这是最重要的信息，然后您会在较小的字体中提供电子邮件文本的预览。
- en: 'A typical list tile contains the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的列表瓷砖包含以下内容：
- en: '**Text**: In a single list, each tile contains a single line of text. In a
    two-line list, each tile contains a maximum of two lines of text. If you need
    to display more than two lines of text, consider using a card instead. The amount
    of text can vary between tiles within the same list.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**：在单行列表中，每个瓷砖包含一行文本。在双行列表中，每个瓷砖最多包含两行文本。如果您需要显示超过两行的文本，请考虑使用卡片。同一列表中的瓷砖之间的文本量可能会有所不同。'
- en: '**Primary actions**: These are consistent throughout every tile in the list.
    In our e-mail example, the primary action might be *open e-mail*, and this primary
    action would appear on every tile within the list.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要操作**：这些在列表中的每个瓷砖上都是一致的。在我们的电子邮件示例中，主要操作可能是*打开电子邮件*，并且此主要操作将出现在列表中的每个瓷砖上。'
- en: '**Optional supplemental actions**: These usually take the form of icons or
    secondary text and should be placed on the right side of each tile.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可选补充操作**：这些通常以图标或辅助文本的形式出现，并且应放置在每个瓷砖的右侧。'
- en: You create a list using the `RecylerView`, which is a container for displaying
    large data sets. `RecylerViews` offers improved performance over `ListViews`,
    as it recycles views directly. When item views are no longer visible to the user, `RecylerView`
    automatically replaces their contents with a different element from the data set,
    resulting in smoother scrolling.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `RecyclerView` 创建列表，`RecyclerView` 是用于显示大量数据集的容器。与 `ListView` 相比，`RecyclerView`
    提供了改进的性能，因为它直接回收视图。当项目视图对用户不再可见时，`RecyclerView` 会自动用数据集中的不同元素替换它们的内 容，从而实现更平滑的滚动。
- en: '`RecylerView` also offers default animations for common operations, such as
    removing items from the list, and it provides layout managers to help you position
    the items within those lists.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`RecyclerView` 还提供了对常见操作（如从列表中删除项目）的默认动画，并提供布局管理器来帮助您在列表中定位项目。'
- en: '`RecyclerView` provides three built-in layout managers for you to choose from:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`RecyclerView` 为您提供了三个内置布局管理器供您选择：'
- en: '`LinearLayoutManager` displays items in a horizontal or vertical scrolling
    list'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinearLayoutManager` 以水平或垂直滚动列表的形式显示项目'
- en: '`GridLayoutManager` displays items in a grid'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GridLayoutManager` 以网格的形式显示项目'
- en: '`StaggeredGridLayoutManager` displays items in a staggered grid'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StaggeredGridLayoutManager` 以交错网格的形式显示项目'
- en: 'To use `RecylerView` in your project, you need to perform the following steps:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要在项目中使用 `RecyclerView`，您需要执行以下步骤：
- en: Add the `RecyclerView` support library to your project's Gradle build file (`com.android.support:recyclerview-v7:23.1.0`).
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `RecyclerView` 支持库添加到项目的 Gradle 构建文件中 (`com.android.support:recyclerview-v7:23.1.0`)。
- en: Define your data source.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义您的数据源。
- en: 'Add `RecylerView` to your layout file, like you''d add a regular view:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `RecyclerView` 添加到布局文件中，就像添加一个常规视图一样：
- en: '[PRE11]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Specify the layout manager you want to use:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定您想要使用的布局管理器：
- en: '[PRE12]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create an adapter. To use `RecylerView`, you need to create an adapter that
    extends the `RecylerView.Adapter` class:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个适配器。要使用 `RecyclerView`，您需要创建一个扩展 `RecyclerView.Adapter` 类的适配器：
- en: '[PRE13]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create `ViewHolder`. The `RecyclerView` adapter relies on the `ViewHolder` object
    that stores references to all your views, so you don't need to use multiple `thefindViewById()`
    methods.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `ViewHolder`。`RecyclerView` 适配器依赖于 `ViewHolder` 对象，该对象存储了对所有视图的引用，因此您不需要使用多个
    `findViewById()` 方法。
- en: '[PRE14]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Assign the adapter to your `RecylerView`, via the `setAdapter` method.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `setAdapter` 方法将适配器分配给您的 `RecyclerView`。
- en: Animations and transitions
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画和过渡
- en: Two more key features of Material Design are new animations and transitions.
    When used correctly, these visual effects don't just look nice, they also serve
    two major purposes.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计的两个更多关键特性是新动画和过渡。当正确使用时，这些视觉效果不仅看起来很棒，而且还服务于两个主要目的。
- en: Reinforcing the Material Design illusion
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加强材料设计的错觉
- en: A crucial aspect of Material Design is the sense that on-screen elements possess
    the same characteristics as physical objects, and animation is a powerful tool
    that can help you really drive this point home.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计的一个关键方面是屏幕上的元素具有与物理对象相同的特性，动画是帮助您真正强调这一点的强大工具。
- en: In the real world, the way objects move varies depending on their physical characteristics.
    By varying your animations, you can create the sense that different on-screen
    objects possess different physical characteristics. For example, you can suggest
    that an object is heavier than others by making it move more slowly. And if the
    user sees an object moving quickly and accelerating rapidly, they'll assume that
    the object is lighter.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，物体的运动方式取决于它们的物理特性。通过改变动画，您可以创造出不同的屏幕对象具有不同的物理特性的感觉。例如，您可以通过使物体移动得更慢来暗示物体比其他物体更重。如果用户看到物体快速移动并迅速加速，他们会认为该物体较轻。
- en: Another fundamental aspect of Material Design is the illusion that all on-screen
    objects appear, disappear, and transform inside a continuous 3D space. One of
    the most powerful ways of making your app feel like a real, 3D environment is
    to create a visual continuity between your app's activities.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计的另一个基本方面是所有屏幕上的对象似乎都在一个连续的 3D 空间中出现、消失和转换的错觉。使您的应用程序感觉像真实的三维环境的最强大方法之一是在应用程序的活动之间创建视觉连续性。
- en: Traditionally, Android apps were designed as a sequence of screens, where each
    activity was a separate screen. Material Design seeks to blur these boundaries
    by using transitionsto ease the user from one activity to the next.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，Android 应用程序被设计为一系列屏幕，其中每个活动都是一个单独的屏幕。材料设计通过使用过渡来模糊这些边界，从而使用户能够轻松地从活动切换到下一个活动。
- en: For example, when a new activity starts, the previous activity's elements might
    fade away, while elements from the new activity animate their way on screen. And
    if these two activities share common elements, you could animate these elements
    so that they appear to rearrange themselves into a new layout, which is actually
    an entirely new activity. In this way, you can create a more fluid and immersive
    user experience where users feel as though they're moving around inside your app's
    environment rather than switching from one screen to the next.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当一个新的活动开始时，之前活动的元素可能会淡出，而新活动的元素则通过动画方式进入屏幕。如果这两个活动有共同元素，你可以对这些元素进行动画处理，使它们看起来重新排列成一个新的布局，这实际上是一个全新的活动。这样，你可以创建一个更加流畅和沉浸式的用户体验，让用户感觉就像是在你的应用环境中移动，而不是从一个屏幕切换到另一个屏幕。
- en: Tip
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Entrances and exits**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**进入和退出**'
- en: Put some thought into the way your objects enter and exit the screen, as these
    are ideal opportunities to strengthen the illusion of Material Design's continuous
    3D environment. If an object enters the screen at a considerable pace, then the
    user will assume that this object has been traveling for some distance off screen,
    picking up speed along the way. If an object slows down as it exits the screen,
    the user will assume this object will come to a halt just off screen.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的对象进入和退出屏幕的方式上多花些心思，因为这些是加强Material Design连续3D环境幻觉的理想机会。如果一个对象以相当快的速度进入屏幕，用户就会认为这个对象已经在屏幕外移动了一段距离，并且在移动过程中加速了。如果一个对象在退出屏幕时减速，用户就会认为这个对象将在屏幕外停下来。
- en: You should also look for opportunities to use these assumptions to your advantage.
    For example, if you have an object that you know will be making a reappearance,
    you could animate it so that it exits the screen at a crawl, and then edges its
    way back on screen when the time is right, giving the user the impression that
    this object has been hovering just off screen the entire time.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该寻找机会利用这些假设来为你带来优势。例如，如果你知道某个对象将会再次出现，你可以让它以缓慢的速度退出屏幕，然后在适当的时候慢慢回到屏幕上，给用户一种这个对象一直在屏幕外悬浮的印象。
- en: Providing the user with a visual feedback
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供用户视觉反馈
- en: Whenever the user interacts with a UI element, your app should provide them
    with some form of visual confirmation that it's successfully registered their
    interaction.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 无论用户何时与UI元素交互，你的应用都应该提供某种形式的视觉确认，表明它已成功记录了他们的交互。
- en: Note
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The most common user interaction is a touch event, so this is the type of event
    I'll be focusing on throughout this section. Just be aware that your app may need
    to handle other forms of user input, such as the user typing on a virtual keyboard
    or speaking commands into their device's microphone.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的用户交互是触摸事件，因此在本节中，我将重点关注这种类型的事件。只是要注意，你的应用可能需要处理其他形式的用户输入，例如用户在虚拟键盘上打字或通过设备麦克风发出指令。
- en: In Material Design, a touch ripple is the main mechanism that you'll use to
    provide the user with this visual confirmation.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在Material Design中，触摸波纹是提供这种视觉确认的主要机制。
- en: A touch ripple effect is a particularly useful animation, as you can use it
    to communicate additional information about the touch event, such as the duration
    of the event, the amount of pressure applied, and where the touch event occurred
    (the touch ripple moves outward from the point of input).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸波纹效果是一种特别有用的动画，你可以用它来传达关于触摸事件的额外信息，例如事件的持续时间、施加的压力量以及触摸事件发生的位置（触摸波纹从输入点向外扩散）。
- en: You may also want to animate material so that it responds to user inputs, such
    as animating a photo so that it appears to lift slightly in response to the user
    long-pressing it.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想让材料动画响应用户输入，例如，当用户长按照片时，让它看起来稍微抬起。
- en: Animations – a word of warning
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动画——一个警告
- en: Animations have the potential to be one of the most powerful or destructive
    tools at your disposal.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 动画可能是你拥有的最有力量或最具破坏性的工具之一。
- en: Our eyes are experts at detecting and tracking movement, but if multiple elements
    are moving at once, or moving in random patterns, then the user won't be able
    to keep up! Bad animation is far worse than no animation at all.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的眼睛擅长检测和跟踪运动，但如果多个元素同时移动，或者以随机模式移动，那么用户将无法跟上！糟糕的动画比没有动画还要糟糕。
- en: You should also avoid using time-consuming animations that serve no purpose
    other than to look pretty. Ideally, you should aim to catch your users off-guard
    with subtle, unexpected uses of animation that enhance their experience in some
    way, rather than simply using animation for the sake of it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该避免使用耗时且没有其他目的，仅仅是为了看起来漂亮的动画。理想情况下，你应该旨在通过微妙、意外的动画使用来让用户感到意外，从而以某种方式增强他们的体验，而不是仅仅为了使用动画。
- en: The finishing touches
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成细节
- en: Now that you've created a user interface with a Material Design look and feel
    and added some structural elements, such as floating action buttons and cards,
    it's time to put the finishing touches to your Material Design application.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个具有材料设计外观和感觉的用户界面，并添加了一些结构元素，如浮动操作按钮和卡片，现在是时候给你的材料设计应用添加完成细节了。
- en: Designing your product icon
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计你的产品图标
- en: Your product icon should communicate your app's identity while also indicating
    your app's purpose and core functionality.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你的产品图标应该传达你的应用身份，同时表明你的应用目的和核心功能。
- en: Tip
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Building your brand**'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**建立你的品牌**'
- en: If you're creating multiple apps, each product icon should be distinct, but
    you should also use each icon as an opportunity to create and reinforce a wider
    brand that spans all your Android offerings. Aim for some consistency across related
    product icons.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在创建多个应用，每个产品图标都应该独特，但你也应该利用每个图标作为机会来创建和加强一个跨越所有Android提供的更广泛品牌。在相关的产品图标之间追求一致性。
- en: Product icons should reflect the same Material Design principles that we've
    explored throughout this chapter, so once again, you should take the physical
    qualities of paper and ink as your main inspiration. Your product icon should
    appear to be cut, folded, and illuminated exactly like other Material Design objects,
    but the real challenge is communicating all this information while also creating
    a product icon that's clean and simple.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 产品图标应该反映我们在本章中探讨的相同材料设计原则，因此，再次提醒，你应该将纸张和墨水的物理特性作为你的主要灵感来源。你的产品图标应该看起来就像其他材料设计对象一样被切割、折叠和照亮，但真正的挑战是在传达所有这些信息的同时，创建一个干净、简单的产品图标。
- en: Two particularly effective examples of Material Design icons are the Google
    Calendar and Gmail product icons. Both of these icons use simple shapes to create
    a sense of shadow, depth, and edges, while clearly communicating the app's main
    purpose and function.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 两个特别有效的材料设计图标示例是Google日历和Gmail产品图标。这两个图标都使用简单的形状来创造阴影、深度和边缘感，同时清楚地传达了应用的主要目的和功能。
- en: 'Here is the Gmail icon:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Gmail的图标：
- en: '![Designing your product icon](img/B05061_4_6.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![设计你的产品图标](img/B05061_4_6.jpg)'
- en: 'And here''s the Google Calendar icon:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Google日历的图标：
- en: '![Designing your product icon](img/B05061_4_7.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![设计你的产品图标](img/B05061_4_7.jpg)'
- en: To make designing your product icon easier, Material Design introduces the concept
    of **product icon anatomy**. These are standardized shapes that you can incorporate
    into your design to help promote a consistent look and feel across product icons.
    You can view these standardized shapes at  [https://www.google.com/design/spec/style/icons.html#icons-product-icons](https://www.google.com/design/spec/style/icons.html#icons-product-icons)
    .
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使设计你的产品图标更容易，材料设计引入了**产品图标解剖学**的概念。这些是你可以纳入你设计的标准化形状，以帮助在产品图标之间促进一致的外观和感觉。你可以在[https://www.google.com/design/spec/style/icons.html#icons-product-icons](https://www.google.com/design/spec/style/icons.html#icons-product-icons)查看这些标准化形状。
- en: 'Each product icon should contain the same structural elements. These elements
    are always viewed straight from above, and each component is positioned at the
    top of the previous component:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 每个产品图标都应该包含相同的结构元素。这些元素总是从正上方观看，并且每个组件都位于前一个组件的顶部：
- en: '**Finish**: This is a soft tint that you should use to highlight the top edge
    of all your product icon elements. You shouldn''t apply this tint to your icon''s
    left, right, or bottom elements.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成**：这是一种柔和的色调，你应该用它来突出所有产品图标元素的上边缘。你不应该将这种色调应用到图标的左侧、右侧或底部元素上。'
- en: '**Material background**: This is a sheet of material that serves as your icon''s
    background.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材料背景**：这是一张作为你图标背景的材料。'
- en: '**Material foreground**: This is an element that''s raised above the material
    background, and casts a shadow across that background.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材料前景**：这是一个位于材料背景之上的元素，并在背景上投下阴影。'
- en: '**Shadows**: This is a soft shadow that appears around all the edges of a raised
    material element. This shadow should be slightly heavier along the product icon''s
    right and bottom lines.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阴影**：这是一种出现在所有凸起材料元素边缘的柔和阴影。这种阴影应该沿着产品图标的右侧和底部线条略微加重。'
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Creating the perfect product icon**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建完美的产品图标**'
- en: Although layering paper elements is effective for creating a sense of depth,
    be careful not to overcomplicate your app by adding lots of layers. You should
    aim for a product icon that has all the shadows, depth, and edges you'd expect
    from a physical object, but it should *still* deliver a simple and streamlined
    look.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然分层纸张元素对于创建深度感是有效的，但请注意不要通过添加过多的层来使您的应用过于复杂。您应该追求一个具有所有阴影、深度和边缘的产品图标，但它应该*仍然*提供简单流畅的外观。
- en: You should supply your icon at 48dp with edges of 1dp.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该提供48dp大小的图标，边缘为1dp。
- en: System icons
  id: totrans-231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 系统图标
- en: In the previous section, we took an in-depth look at product icons, which are
    unique to your application, but what about system icons?
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们深入探讨了产品图标，这些图标是您应用程序独有的，但系统图标又如何呢？
- en: The good news is that the Android team has already given all the system icons
    a Material Design makeover. You should use these standard system icons unless
    you have a very, *very* good reason not to.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，Android团队已经为所有系统图标进行了材料设计的改造。除非您有非常，*非常*充分的理由不这样做，否则您应该使用这些标准系统图标。
- en: You can grab the entire pack from [https://www.google.com/design/spec/style/icons.html#icons-system-icons](https://www.google.com/design/spec/style/icons.html#icons-system-icons)
    .
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://www.google.com/design/spec/style/icons.html#icons-system-icons](https://www.google.com/design/spec/style/icons.html#icons-system-icons)获取整个包。
- en: Typography and writing
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字体和写作
- en: In this section, we'll look at everything you need to know about creating text
    that complies with Material Design principles, from general writing advice through
    to specific guidelines about how opaque your text should be.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨创建符合材料设计原则的文本所需了解的所有内容，从一般写作建议到关于文本不透明度的具体指南。
- en: Typefaces
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字体
- en: 'As an Android developer, there are two main typefaces you need to know about:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名Android开发者，您需要了解两种主要的字体：
- en: '**Roboto**: Since Android 4.0, Roboto has been the standard typeface for Android'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Roboto**：自Android 4.0以来，Roboto一直是Android的标准字体。'
- en: '**Noto**: Since the release of Android 2.2, Noto has been the standard typeface
    for all languages that are not covered by Roboto'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Noto**：自Android 2.2发布以来，Noto一直是所有未覆盖Roboto字体的语言的标准字体。'
- en: Material Design uses both of these typefaces.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计同时使用这两种字体。
- en: Text opacity
  id: totrans-242
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文本透明度
- en: You can give the user visual clues about how important each piece of text is
    using varying degrees of opacity.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用不同级别的透明度来向用户传达每段文本的重要性。
- en: 'The opacity levels you should use will vary depending on the color of your
    text and the color of your app''s background. When you''re adding light text to
    a dark background, you should use the following:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您应使用的透明度级别将根据您的文本颜色和应用程序背景颜色而有所不同。当您向深色背景添加浅色文本时，您应该使用以下：
- en: '**Primary text**: 100% opacity'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要文本**：100%透明度'
- en: '**Secondary text**: 70% opacity'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**次要文本**：70%透明度'
- en: '**Hint text, disabled text, and icons**: 30% opacity'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提示文本、禁用文本和图标**：30%透明度'
- en: 'When you''re adding dark text to a light background, you should use the following:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 当您向浅色背景添加深色文本时，您应该使用以下：
- en: '**Primary text**: 87% opacity'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要文本**：87%透明度'
- en: '**Secondary text**: 54% opacity'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**次要文本**：54%透明度'
- en: '**Hint text, disabled text, and icons**: 38% opacity'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提示文本、禁用文本和图标**：38%透明度'
- en: When adding text to your UI, check that the color of your background doesn't
    make your text difficult to read. Also, be aware that too much contrast can make
    your text equally tricky to read; ideally, your text should maintain a contrast
    ratio of 7:1.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当您向UI添加文本时，请检查您的背景颜色是否会使您的文本难以阅读。此外，请注意，过多的对比度会使您的文本同样难以阅读；理想情况下，您的文本应保持7:1的对比度比。
- en: Writing guidelines
  id: totrans-253
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 写作指南
- en: Now that you know how your text should look on the screen, it's time to turn
    our attention to what your text is actually *saying*.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道您的文本在屏幕上应该是什么样子了，是时候将我们的注意力转向您的文本实际上*要表达的内容*了。
- en: 'To make sure your user interface is as user-friendly as possible, you should
    create text that''s as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您的用户界面尽可能用户友好，您应该创建以下文本：
- en: '**Clear**: Your users will appreciate simple, direct language that doesn''t
    require repeat reading. Choose your words carefully, and look for the simplest
    way of conveying your message; for example, it''s better to say *move onto question
    2* rather than *navigate to question 2*.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清晰**: 用户会欣赏简单、直接的言语，不需要重复阅读。仔细选择你的词汇，并寻找传达信息的最简单方式；例如，说*转到问题2*比说*导航到问题2*更好。'
- en: '**Accessible**: When writing your text, bear in mind that some people may be
    using your app in their second language. Even if you translate your app into other
    languages, culturally-specific phrases and slang may not survive the translation
    process. Your aim should be to write text that''s accessible to *everyone*. On
    a related note, when you create string resources, it''s generally a good idea
    to include detailed descriptions and perhaps even additional comments, so if your
    app does wind up getting translated, you stand a much greater chance of it being
    translated accurately.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于理解**: 在撰写文本时，要考虑到有些人可能在使用你的应用时使用的是第二语言。即使你将你的应用翻译成其他语言，文化特定的短语和俚语可能无法在翻译过程中保留。你的目标应该是写出对*所有人*都易于理解的文本。相关的是，当你创建字符串资源时，通常是一个好主意包括详细的描述，甚至可能还有额外的注释，这样如果应用最终被翻译，你就有更大的机会确保其被准确翻译。'
- en: '**Necessary**: The whole idea of text is to help the user navigate and get
    value from your app, so whenever you''re tempted to add text to your UI, ask yourself—*does
    the user really need to know this?* For example, if you create a screen that consists
    of a form and a **Submit** button, your users will probably know what''s expected
    of them, without you having to add a **Please complete the form and then press
    the Submit button** disclaimer.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必要**: 文本的全部目的是帮助用户导航并从你的应用中获得价值，所以每次你想要在UI中添加文本时，问问自己—*用户真的需要知道这个吗？* 例如，如果你创建了一个包含表单和**提交**按钮的屏幕，你的用户可能不需要你添加**请完成表单然后点击提交按钮**的免责声明，因为他们可能已经知道该怎么做。'
- en: '**Concise**: The text you do decide to include should be short, sweet, and
    to the point. In the interests of keeping text to a minimum, use contractions
    wherever possible (so that''s *can''t* instead of *can not*).'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁**: 你决定包含的文本应该是简短、清晰、直接。为了将文本保持在最短，尽可能使用缩写（比如用*can''t*代替*can not*）。'
- en: '**Lacks punctuation**: Punctuation adds visual clutter, so you should omit
    punctuation wherever possible. In particular you should avoid exclamation marks.
    Every time you''re tempted to add an exclamation point, ask yourself—*do I really
    want to shout this at the user?*'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺少标点符号**: 标点符号会增加视觉杂乱，所以你应该尽可能省略标点符号。特别是你应该避免使用感叹号。每次你想要添加感叹号时，问问自己—*我真的想对用户大喊吗？*'
- en: '**In the present tense**: Most UI events happen in the here and now, so you
    should write in the present tense unless you have a *really* good reason not to.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用现在时态**: 大多数UI事件都发生在现在，所以除非你有一个*非常*充分的理由不这样做，你应该使用现在时态。'
- en: '**Use active verbs**: Make your writing more engaging by opting for active
    verbs over passive ones. The only exception is if the passive version is much
    shorter and simpler than the active version.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用主动动词**: 通过选择主动动词而不是被动动词来使你的写作更具吸引力。唯一的例外是，如果被动形式比主动形式更短、更简单。'
- en: '**Write in the right tone:** The *right* tone is friendly, respectful, and
    focused firmly on the user. You should address the user directly as *you*, and
    avoid the temptation of lumping yourself and the user together as *we*.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用正确的语气**: 正确的语气是友好、尊重的，并且坚定地关注用户。你应该直接称呼用户为*你*，并避免将你自己和用户一起称为*我们*。'
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the core principles of Material Design, including
    creating a UI that has that distinctive Material Design look and feel, and we
    covered how to incorporate some of the new structural features into our application.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了材料设计的核心原则，包括创建具有独特材料设计外观和感觉的用户界面，并介绍了如何将一些新的结构特性纳入我们的应用中。
- en: Over the course of the past few chapters, we've mainly focused on the technical
    aspects of creating a great user interface. In the next few chapters, we'll shift
    focus and look at how to capture the initial spark of inspiration via sketches,
    wireframes, and prototypes.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几章中，我们主要关注了创建优秀用户界面的技术方面。在接下来的几章中，我们将转变焦点，探讨如何通过草图、线框和原型来捕捉灵感的火花。
