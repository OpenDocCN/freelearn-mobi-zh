- en: Testing an Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make an application more usable and attractive, we always concentrate on
    the logos, contents, UI, experiences, and so on, besides we also take care of
    the coding style. We use the latest architectures and frameworks to reduce code
    lines and boiler codes in order to make a robust, simple, and fast application.
    However, many developers forget about the testing phase. Some might not realize
    there's an issue until a crash report generates during application use, because
    they didn't adequately test during the project. Generally, some developers skip testing,
    as they don't want to spend some extra time on writing test cases that are not
    directly used in the project. This is a common mistake and results in falling
    quality.
  prefs: []
  type: TYPE_NORMAL
- en: Applications that randomly crash will always be disliked by the user, which
    is why the most successful Android apps always undergo thorough testing. In-depth
    testing can iron out an app's bugs, and optimize memory use, as well as allowing
    you to improve the condition of an app in regards to functional behavior, usabilities,
    and correctness.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will walk through testing and its use in both Spring and
    Android. This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Software testing
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundamental of testing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing on Spring Boot
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JUnit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: UI testing on Android
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Espresso
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to import some dependencies for both Spring and Android. Here
    are the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Spring**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To implement the dependency for testing, you need to add the testing dependency
    in the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Android**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To test an Android project, we need to implement the testing dependencies in
    the `gradle` file. To add the dependencies, we need to implement in the dependencies
    `{...}` of `build.gradle` (app module) file. Here is a snippet code of this `build.gradle`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The source code with an example for this chapter is available on GitHub at the
    following link: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10).
  prefs: []
  type: TYPE_NORMAL
- en: Software testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software testing is one of the most essential parts of any project. Testing evaluates
    the stability, usability, quality assurance, functionality of components, and ensures
    that the software is ready to publish in the market. It also helps to find out
    the errors, missing requirements of a project, and so on. Testing uses techniques
    to execute some processes in an application or program with the intent to find
    bugs.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](1f77948f-747b-42f1-b15b-fec3910d97d6.xhtml), *Accessing the Database*
    and [Chapter 9](7f273ca8-ce1d-4577-b24c-26d0957f1c74.xhtml), *Creating an Application*,
    we created Spring applications and implemented REST APIs. Then we tested with
    a third-party tool called Insomnia. After this, we mentioned the URL path with
    the HTTP CRUD request functions and checked the output. This system was fine and
    we could see the output directly. However, it can often be difficult to find the
    errors and bugs, as it can't show you the errors or any abnormal behavior. Though
    this project is running, it's not necessarily safe to release to the market. Therefore,
    we need to further test its stability. Let's run through two popular testing tools
    and frameworks, JUnit and Espresso.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JUnit is the most popular testing framework, built for Java, and is open source.
    It has almost all the features and modules necessary to test a Java-based application
    in a test-driven development environment. JUnit mainly focuses on writing tests
    that are automated for a certain class or function. It helps to call a function
    and check for the expected output. Before seeing some examples of JUnit in use,
    let's learn about its advantages.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of JUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JUnit is widely used for testing Java applications because of its user-friendly
    functionalities. It has some powerful advantages, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The JUnit framework is open source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides text-based command lines as well as AWT-based and Swing-based graphical
    test mechanisms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has some annotations to utilize test functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a test runner to test running applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows you to write code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can test automatically and provide feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic annotations of JUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JUnit has some basic and important annotations, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `@BeforeClass`: This runs once before any test functions in the class.
    In this function, you can connect the database or connection pool. This function
    has to be a static method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `@AfterClass`: This runs once after any test functions in the class. In
    this function, you can close the database connection and cleanup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `@Before`: This can run before `@Test` annotated functions. Here you create
    some objects and share to all `@Test` annotated testing functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@After`: This can run after `@Test` annotated functions. Here, you modify
    or clean the objects and share to all `@Test` annotated testing functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `@Test`: This annotated function is the test function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we'll look at an example of how to test a project with JUnit. Here, you
    can learn about the life cycle of the testing annotations and the use of these
    annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a project where we will create REST APIs using a database for users,
    and show a list of the user details. In this project, we will use JDBC, MySQL,
    and Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a project, go to [https://start.spring.io](https://start.spring.io) and
    create a Kotlin-based project with the following given dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDBC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevTools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we'll create some demo code, and we can test them.
  prefs: []
  type: TYPE_NORMAL
- en: Test a project using JUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your project that we generated previously and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the test | kotlin | com.packtpub.sunnat629.testing_application, as in
    this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e8a5f4af-5037-4b0e-bddc-ee636f5bea7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now create a class named `JUnitTestClass.kt` where we will create some test
    cases using the annotations. Here is the sample code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can see that we have written the `@BeforeClass` and `@AfterClass` annotated
    function in the `companion object {}`, which means these functions are static.
    In Kotlin, you have to write the static variables and functions in the `companion
    object {}`.
  prefs: []
  type: TYPE_NORMAL
- en: We have used the `@JvmStatic` annotation. This is especially used in Kotlin
    to specify that this function is static and needs to be generated in the element
    of this function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now run this test by clicking the Run Test icon beside the function name, as
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b7e204dd-d59f-4bf6-9c6f-adf2eae5a0ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After running the test on all the test cases, it will show the results; namely,
    pass or fail. Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ee2aa2c-2ecd-4cc8-95ab-d5b7bb8dc177.png)'
  prefs: []
  type: TYPE_IMG
- en: Here you can see that we had two test cases named `runTest1` and `runTest2`
    that have passed the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now modify our `runTest1` function and write logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have done a very simple equation to check the testing function. We
    have used a method of `Assert` class. The `assertEquals()` is a method of assert,
    and mainly checks the equality with the two inputs. Here, for example, we provide
    `6` and (*2+3*), which is not true and it will show an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the equation is correct, then you will see the test is passed or it will
    show an error with the expected result. Here is what the result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7dd4a81-706e-4d43-af97-f6f34fb2af9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a lot of Assert methods. Here are some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `assertArrayEquals`: This will return the equality of two array types input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertEquals`: This will return the equality of two same types of input
    such as `int`, `long`, `double`, `String`, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `assertTrue`: This will assert that the given condition is `true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertFalse`: This will assert that the given condition is `false`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `assertNotNull`: This will assert that the given object is not null'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `assertNull`: This will assert that the given object is null'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a test case for a Rest API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will see how to test the database using the JPA and Hibernate of a Spring
    project. Here are the steps of how to test the database using JPA:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the social_network project. The link is here: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09/social_network](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09/social_network).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now go to the test | kotlin | com.packtpub.sunnat629.social_network package
    and create a file named `ProfileRepositoryTest.kt` with two annotations named `@RunWith(SpringRunner::class)`
    and `@DataJpaTest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the code of the `ProfileRepositoryTest.kt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an explanation of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The `@RunWith(SpringRunner::class)` is the annotation in the connector between
    the Spring and JUnit. It uses the Spring's testing support to run JUnit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@DataJpaTest` enables the JPA testing features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We autowired the TestEntityManager, which is mainly designed for JPA testing
    and JPA EntityManager's alternative.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getUserTesting()`, which has the `@Test` annotation and is the main testing
    function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we will insert a demo `Profile` object and check if the insertion is working
    or not. To begin with, we have to create a Profile object using the `getNewProfile()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this we save this profile as a new variable, such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used the `entityManager.merge()`, which will insert the profile in
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also autowired the `profileRepository` now use this line to fetch the inserted
    profile by the ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have used the `assertThat()` to check the given logic is correct or
    not. In this function, we have checked the created profile and the fetched profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, if there are any errors regarding insertion or communication with the database,
    it will return an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output of our test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e02ffe30-dff8-4fc9-a22e-b8bdb0977567.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you provide something as a false value, or the test encounters an error,
    it will output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb440c59-99f4-4255-8f6a-19da81ca5a58.png)'
  prefs: []
  type: TYPE_IMG
- en: We have entered a profile name as `naruto`, but we tested the name `Uzumak`,
    which is why it didn't match. The result subsequently failed.
  prefs: []
  type: TYPE_NORMAL
- en: UI testing on Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, people are more dependent on mobile than desktop. If we consider Android,
    millions of applications are on the Play Store and other app stores. So, it is
    very important to test the UI to make a UI bug free and stable product in the
    app store. You need to be very careful during testing as there are myriad devices
    with various display sizes. For the backend, you can test with the JUnit and the
    system is same. But now our test will be UI-based and so we will use Espresso.
    This is the most popular framework for UI testing.
  prefs: []
  type: TYPE_NORMAL
- en: Espresso
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Espresso is an open source framework and an instrumentation-based API, designed
    by Google. It is good practice to create some test cases of various scenarios
    of the project. It helps to find out the unexpected results or bugs of the UI,
    as well as the use case. It automatically syncs the actions of the test with the
    UI of the application. It allows you to test on both real devices and emulators.
    But there is a disadvantage of the use in a real device due to its high price
    to test various size of displays and manufacturers. So an emulator is the best
    solution to reduce the cost and time for testing. According to the Espresso testers,
    almost 99% of bugs on an Android application can be detected by this framework.
    The APIs of Espresso are very small, predictable, and easy to learn. You can also
    customize these APIs if you want.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a project and test it with Espresso.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a simple Android app as a client that will retrieve the REST
    API using the GitHub API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to create an app from Android Studio and put down your
    project and the company domain. Don''t forget to check Include Kotlin support.
    The following screenshot shows the Create Android Project window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab3e546a-93a9-4d6d-a0f5-b5e02688e207.png)'
  prefs: []
  type: TYPE_IMG
- en: Then select the minimum API version from the Phone and Tablet option. There
    is no need to add other options for this project. After clicking Next, in the **add
    an Activity to mobile** field, you can select Empty Activity and then, after renaming
    the activity name and layout, click Finish. After the build, you will be ready
    to start creating an Android app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating the project, we need to implement the dependencies to test.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This project is mainly to test UI the application and so we need to implement
    Espresso. Write down the given lines to implement Espresso in the `dependencies{}`
    block of `build.gradle` (Module—app):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in the same file, add the code to implement the JUnit3 and JUnit4 tests
    against an Android package in the `android{}` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`AndroidJUnitRunner` is the instrumentation runner. It mainly controls the
    test APK, the environment, and all of the test launches.'
  prefs: []
  type: TYPE_NORMAL
- en: Now sync the project to download and add the dependencies to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to create an app based on `RecyclerView` in [Chapter 9](7f273ca8-ce1d-4577-b24c-26d0957f1c74.xhtml),
    *Creating an Application*, so we can just run through the concept of this app.
    We have a user data class with the ID and username. We will insert 100 users in
    the database and show in a custom `RecyclerView`. We also use a `UserItemAdapter`
    to customize the `RecyclerView`.
  prefs: []
  type: TYPE_NORMAL
- en: Clone this project if you want: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10/TestingWithEspresso](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10/TestingWithEspresso).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, you find the `MainActivity.kt` where you can find a list view.
    Here is a piece of code from this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `userLists` is the RecyclerView and we have the `UserItemAdapter`
    custom adapter of a `UserModel`. Here, the `UserModel` code is where we take the
    ID and name of a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will test this list view using Espresso with some major functions that
    are frequently used in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating testing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s write some test cases. To write this code, we need to create new files
    in the androidTest package. To do this, follow the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now go to src | androidTest | java | `module_name` of the project. Here is
    a screenshot of this directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4197e394-9bc9-4bfb-9484-24e771e8a1aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a class named `MainActivityTest.kt` with `@RunWith(AndroidJUnit4::class)`
    annotation. This annotation will link the test and the app features.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create our very first Espresso test:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to connect our `MainActivity` class. To do this, we will
    initialize a variable of `ActivityTestRule<MainActivity>` and it will provide
    all the functionalities for the `MainActivity`. It has an annotation of `@Rule`,
    which means testing for a single activity and here it is `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `getCountUser()` function is for checking the number of your list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ViewMatchers.onView()` means it will take a matcher logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ViewMatchers.withId()` uses to connect the component of your activity''s layout.
    In our `main_activity.xml`, the ID name of the `RecyclerView` is `userLists`,
    so we connect it here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check(..)` will return a Boolean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `matches(itemCount(20)` means it will match the given number with your user
    list number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to create the `itemCount()` manually. To do this, create a class named `CustomUserMatchers.kt`.
    Here, is the code of this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, we create a `CustomUserMatchers.kt` class where we create a static function
    and return a `Matcher<View>`.
  prefs: []
  type: TYPE_NORMAL
- en: '`BoundedMatcher<View, RecyclerView>(RecyclerView::class.java)` have two functions
    named `describeTo(description: Description?)` and `matchesSafely(item: RecyclerView?)`
    and we have overriden these classes.'
  prefs: []
  type: TYPE_NORMAL
- en: In the `matchesSafely`, we will check the equality of the list number with the
    given number.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our output list, we have `100` users but here the given number is `20`.
    So when you run the test, it will fail, as in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d6919af-7300-40b2-8172-497f75c3a35b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you provide `100` and run then you can see that the test is passed, as in
    this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`![](img/34ea9ddd-d353-4a8c-8d6c-67af3492cc9a.png)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now create a test case named `getUserPosition()` to get a specific position
    and click it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `actionOnItemAtPosition<RecyclerView.ViewHolder>` is to select a position
    of the `RecyclerView` list using the `RecyclerView`. `ViewHolder` and then we
    use a `click()` of row 34 of the list. That means this test will go to your given
    position and then it will click that item. You can see in the following screenshot
    that it has clicked and showed the Toast that the test case has clicked the row
    34 of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79b3d81c-9da2-49ae-b71f-d69e4d2cb1ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look at the logcat, you will also notice that the test has been passed.
    Here is the output of the logcat of Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fbe8da7-1310-492f-adde-758ed53e12a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a `getIsDisplayed()` function to test whether the given list is displaying
    or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `withId(R.id.userLists)` will get the listview of the `MainActivity`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `check(matches(isDisplayed()))` checks whether the list is displaying in
    the device or not:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `getIsClickable()` function to test whether the given list is displaying
    or not. The `withId(R.id.userRoot)` will get the `ConstraintLayout` and `check(matches(isClickable()))`
    will match layout''s clickability status of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `getScrollToBottom()` function to check how to scroll to the specific
    position. The `withId(R.id.userLists)` will get the list view and `perform(scrollToPosition<RecyclerView.ViewHolder>(activityTestRule.activity.userLists.adapter!!.itemCount
    - 1))` will scroll to the bottom of the list. Using this test case, you can see
    whether the list is smooth or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: There are even more functions of Espresso. You can check this cheat sheet ([https://developer.android.com/training/testing/espresso/cheat-sheet](https://developer.android.com/training/testing/espresso/cheat-sheet)),
    which is provided by Google.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is always a good way to discover errors in the UI, backend code, or
    logic. It helps to understand the reason for crashes. Here, we have learned about
    two powerful frameworks. One is JUnit and another is Espresso. In this chapter,
    we have seen how to add the dependencies for testing. We have learned how to implement
    the JUnit into a project. We saw how to use the logic in our test case and how
    to check to see the pass or fail result of a test case. Additionally, we have
    seen how to connect the database for testing. Then, we saw how to insert a demo
    object into a database, and subsequently, fetch it from the database, after which
    we have matched the object.
  prefs: []
  type: TYPE_NORMAL
- en: In Android testing, we have used the Espresso framework to test the UI. Finally,
    we have seen some uses of the Espresso APIs and how to handle and connect them
    with a specific activity. This chapter gave you a brief idea of testing so that
    you can use test cases to perfect your project. If you want to learn more, please
    see our reference book under the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: If you are reading this paragraph, that means you have finished this book and
    are ready to build a server-based and client-based projects alone. Now you are
    a one-man army, able to create a server and mobile application with security,
    databases, and testing. I hope you enjoyed reading this book and that it will
    be a reference point in your upcoming projects.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What types of code does JUnit support?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who designed Espresso?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In which platform, JUnit uses?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is the Espresso used in the Andriod application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the Android testing strategy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the standard ratio of testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you test different screen sizes on devices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Android Application Testing Guide* ([https://www.packtpub.com/application-development/android-application-testing-guide](https://www.packtpub.com/application-development/android-application-testing-guide)) by
    Diego Torres Milano'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learning Android Application Testing* ([https://www.packtpub.com/application-development/learning-android-application-testing](https://www.packtpub.com/application-development/learning-android-application-testing))
    by Paul Blundell, Diego Torres Milano'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Spring Framework Master Class - Beginner to Expert [Video]* ([https://www.packtpub.com/application-development/spring-framework-master-class-beginner-expert-video](https://www.packtpub.com/application-development/spring-framework-master-class-beginner-expert-video))
    by Ranga Karanam'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
