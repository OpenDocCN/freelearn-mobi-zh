- en: '21'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you added a way for the user to get a photo from the
    camera or photo library, which can be added to a new journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will implement a **search bar** for the Journal List screen.
    You’ll start by modifying the `JournalListViewController` class to conform to
    the `UISearchResultsUpdating` protocol and display a search bar on the Journal
    List screen. Next, you’ll modify the data source methods to display the correct
    journal entries when the user types in a search term. After that, you’ll modify
    the `prepare(for:sender:)` method to ensure that the correct journal entry details
    are displayed on the Journal Entry Detail screen. Finally, you’ll modify the method
    used to delete a journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to implement a search bar
    for your own apps. To name one example, if you were creating a contacts app, you
    could use a search bar to search for a particular contact.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a search bar on the Journal List screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying table view data source methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the `prepare(for:sender:)` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the method to remove journal entries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` project that you modified in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter21` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/hPwG2gfv448](https://youtu.be/hPwG2gfv448%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by modifying the `JournalListViewController` class to conform to
    the `UISearchResultsUpdating` protocol and to display a search bar on the Journal
    List screen.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a search bar for the Journal List screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At present, you only have a few entries on the Journal List screen. But the
    longer you use the app, the more entries you’ll have, and it’s going to be hard
    to find a specific entry. To make it easier to look for a journal entry, you’ll
    implement a search bar in the navigation bar of the Journal List screen. You will
    use Apple’s `UISearchController` class to do this. This class incorporates a `UISearchBar`
    class that you can install in your user interface. To perform the search, you
    will adopt the `UISearchResultsUpdating` protocol and implement the `updateSearchResults(for:)`
    method required for this protocol.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UISearchController` class, see [https://developer.apple.com/documentation/uikit/uisearchcontroller](https://developer.apple.com/documentation/uikit/uisearchcontroller).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now add an instance of the `UISearchController` class to the `JournalListViewController`
    class, adopt the `UISearchResultsUpdating` protocol, and implement the `updateSearchResults(for:)`
    method. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalListViewController** file. Add
    a new extension after all other code in this file to make the `JournalListViewController`
    class conform to the `UISearchResultsUpdating` protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll see an error because the method required to conform to the `UISearchResultsUpdating`
    protocol has not been implemented. Add the following code to the newly added extension
    to implement it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Any text you type into the search bar will be printed to the Debug area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare the following properties in the `JournalListViewController` class after
    the `tableView` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `search` property will store an instance of the `UISearchController` class.
  prefs: []
  type: TYPE_NORMAL
- en: The `filteredTableData` property will store an array of `JournalEntry` instances
    that match the search text entered by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `viewDidLoad()` method in the `JournalListViewController` class
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This statement sets the `JournalListViewController` instance as the object responsible
    for updating the search results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This statement obscures the view controller containing the search content when
    the user interacts with the search bar. Since you’re using the table view on the
    Journal List screen to display the search results, this value is set to `false`,
    otherwise, you will obscure the search results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This statement sets the placeholder text for the search bar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This statement adds the search bar to the navigation bar on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app, and you’ll see a search bar on the Journal List screen.
    Type some text into the search bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_21_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.1: Simulator showing a search bar on the Journal List screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the text you type into the search bar appears in the Debug area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_21_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.2: Debug area showing the search text'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve added a search bar to the Journal List screen. Great! In the next section,
    you’ll modify the `JournalListViewController` file to display journal entries
    whose titles match the search text typed into the search bar.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying table view data source methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned in *Chapter 14*, *Getting Started with MVC and Table Views*,
    you can use `UITableViewDataSource` methods to determine how many table view rows
    to display, and what to put in each row.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, you added a new property, `filteredTableData`, to
    hold an array of `JournalEntry` instances that match the search text. You’ll modify
    the `updateSearchResults(for:)` method to populate `filteredTableData` with `JournalEntry`
    instances that match the search text, and you’ll modify the `UITableViewDataSource`
    methods to display the contents of `filteredTableData` on the Journal List screen
    while the search bar is active. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalListViewController** file. Modify
    the `updateSearchResults(for:)` method in the `UISearchResultsUpdating` extension
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method gets a copy of the `journalEntries` array and then adds only those
    `JournalEntry` instances matching the search text to the `filteredTableData` array.
    When done, the table view is reloaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `tableView(_:numberOfRowsInSection:)` method to get the number of
    `JournalEntry` instances from the `filteredTableData` array when the search bar
    is in use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `tableView(_:cellForRowAt:)` method to get the `JournalEntry` instance
    for the specified row from the `filteredTableData` array when the search bar is
    in use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run your app, and type some text that matches the title of one of
    your journal entries into the search bar. The journal entries with titles that
    match the search text will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_21_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.3: Simulator showing journal entries with titles that match the search
    text'
  prefs: []
  type: TYPE_NORMAL
- en: You can now display journal entries with titles that match the search text,
    but when you tap on them, the Journal Entry Detail screen may or may not display
    the details for the tapped journal entry. You will fix this issue in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the prepare(for:sender:) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you enter text in the search bar, the journal entries with titles matching
    the search text will appear in the table view on the Journal List screen. But
    if you were to tap one of them, the Journal Entry Detail screen may or may not
    display the details for the tapped journal entry. This is because the `prepare(for:sender:)`
    method will reference the `journalEntries` array in the `SharedData.shared` instance
    instead of the `filteredTableData` array. To fix this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `prepare(for:sender:)` method in the `JournalListViewController`
    class as shown to assign the appropriate `JournalEntry` instance from the `filteredTableData`
    array to the `journalEntry` property for the destination view controller when
    the search bar is active:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run your app, and type some text that matches the title of one of
    your journal entries into the search bar. The journal entries with titles that
    match the search text will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_21_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.4: Simulator showing journal entries with titles that match the search
    text'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap one of the journal entries and the details displayed on the Journal Entry
    Detail screen now match the journal entry that was tapped:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_21_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.5: Simulator showing details of the tapped journal entry on the Journal
    Entry Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: Your app now correctly displays the details of a tapped journal entry in the
    Journal Entry Detail screen. Cool! In the next section, you’ll modify the methods
    used to remove a journal entry in the `JournalListViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the method to remove journal entries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up to this point, the method used to remove `JournalEntry` instances from the
    `journalEntries` array in the `SharedData` instance uses the table view row to
    identify the index of the `JournalEntry` instance to be removed. However, when
    the search bar is active, the table view row may not match the index of the `JournalEntry`
    instance to be removed. You will add a property to the `JournalEntry` class to
    store a value that will identify a `JournalEntry` instance, and modify methods
    in the `SharedData` and `JournalListViewController` classes to use this property
    to determine the `JournalEntry` instance to be removed. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalEntry** file. Add a new property
    to the `JournalEntry` class to store what’s known as a **UUID** string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When a new `JournalEntry` instance is created, the `key` property is assigned
    a string, which is generated by the `UUID` class, and is guaranteed to be unique.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UUID` class, see [https://developer.apple.com/documentation/foundation/uuid](https://developer.apple.com/documentation/foundation/uuid).
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **SharedData** file in the Project navigator. Add a method to the
    `SharedData` class after the `removeJournalEntry(at:)` method to remove a `JournalEntry`
    instance with the `UUID` string that matches the `UUID` string of the `JournalEntry`
    instance passed into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **JournalListViewController** file in the Project navigator. Modify
    the `tableView(_:commit:forRowAt:)` method in the `JournalListViewController`
    class as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method now checks to see if the search bar is active. If it is, the `JournalEntry`
    instance in the `filteredTableData` array corresponding to the row that was tapped
    is assigned to `selectedJournalEntry`. This instance is then removed from the
    `filteredTableData` array and passed as an argument to the `removeSelectedJournalEntry(_:)`
    method. The `journalEntry` instance with the same `UUID` string as the one passed
    into the `removeSelectedJournalEntry(_:)` method is removed from the `journalEntries`
    array in the `SharedData` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Since you made changes to the `JournalEntry` class,
    the previously saved journal entries stored in the JSON file will not load, so
    you will need to create new sample journal entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_21_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.6: Simulator showing journal entries on the Journal List screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type some text that matches the title of one of the journal entries into the
    search bar. Journal entries with titles that match the search text will be displayed.
    Swipe left on a row and click **Cancel** to exit the search:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_21_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.7: Simulator showing a row about to be deleted'
  prefs: []
  type: TYPE_NORMAL
- en: Swiping left on a table view row when the search bar is active will delete it
    from the table view and delete the corresponding journal entry from the `journalEntries`
    array in the `SharedData` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the deleted journal entry no longer appears on the Journal List
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_21_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.8: Simulator showing remaining journal entries on the Journal List
    screen'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully modified the method to delete journal entries, and the
    implementation of a search bar on the Journal List screen is now complete. Excellent!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you implemented a search bar for the Journal List screen. First,
    you modified the `JournalListViewController` class to conform to the `UISearchResultsUpdating`
    protocol and display a search bar on the Journal List screen. Next, you modified
    the data source methods to display the correct journal entries when the user types
    in a search term. After that, you modified the `prepare(for:sender:)` method to
    ensure that the correct journal entry details are displayed on the Journal Entry
    Detail screen. Finally, you modified the method used to remove journal entries.
  prefs: []
  type: TYPE_NORMAL
- en: You have now learned how to implement a search bar for your own apps, and you
    have also completed the *JRNL* app. Fantastic job!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to get your app ready for iPads and Macs.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
