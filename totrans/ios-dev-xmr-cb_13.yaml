- en: Chapter 13. Localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an app for different languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localizable resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regional formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the release of the iOS platform and the global software marketplace in
    the form of the App Store, Apple has made it easier for developers to distribute
    applications worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: However, users worldwide will not even bother to download and use an app that
    is released in a language they do not understand. To broaden the user base for
    their apps, developers have to localize it. Localization is the process of translating
    text into multiple languages, providing resources specific to multiple regions,
    and thus creating an app that will target audiences of different cultures.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the best practices to provide translated text
    that will be displayed according to each user's locale preferences. We will also
    see how to provide resources (images and videos) based on these preferences. Finally,
    we will use common .NET practices to format dates, currencies, and numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an app for different languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create an app that will support two different languages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Single View Application** in Xamarin Studio and name it `MultipleLanguageApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add two labels on the view of `MultipleLanguageAppViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two folders to the project. Name them `en.lproj` and `es.lproj`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a plain text file in the `en.lproj` folder and name it `Localizable.strings`.
    Enter the following in the file and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another plain text file in the `es.lproj` folder and name it the same as
    before: `Localizable.strings`. Enter the following in the file and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following code in the `MultipleLanguageAppViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Through the settings app on the simulator, set the language to English (if it
    is not set already) and run the app. The message will be displayed in English.
    Try setting the language of the simulator to Spanish (**Español**) and run the
    app again. The message will be displayed in Spanish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make it easy for developers to provide support for multiple languages in
    apps, iOS reads text in different languages from the corresponding language folder.
    In this app, we support both English and Spanish. Their corresponding folders
    are `en.lproj` and `es.lproj`, respectively. When we call the `LocalizedString`
    method, it looks for and parses the `Localizable.strings` file to return the appropriate
    text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the string files are defined by a set of quoted key-value pairs
    in a C style syntax, ending each set with a semicolon, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can also provide comments to assist the job of the person
    who will translate the text, even if we do it ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: The `NSLocale.PreferredLanguages` static property returns a string array of
    the user's preferred language identifiers. The first item in this array is the
    currently selected language. If the selected language is English, it will return
    `en`; if it is Spanish, it will return `es`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both these language codes are based on the ISO 639-1 standard. The three-letter
    ISO 639-2 standard is also supported. A list of all the available language codes
    can be found at [http://www.loc.gov/standards/iso639-2/php/code_list.php](http://www.loc.gov/standards/iso639-2/php/code_list.php).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `NSBundle.PathForResource` method returns the path of the app bundle for
    the parameters we pass to it. We use this path to get the appropriate `NSBundle`
    instance, according to the selected language, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We then call the `LocalizedString` method to display the appropriate text,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter's purpose is dual. It is both the key to look for in order
    to return the translated text and also the text that will be displayed in case
    the specified localization path is not found. The second parameter is the comment
    or any instruction we want to give to the translator. It is not displayed and
    basically not used. We can pass null to this parameter, and no error will occur.
    However, it is wise to always include a comment or instruction since it will help
    avoid confusion when translating multiple strings.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is advised to always provide keys that can act as the fallback text to be
    displayed in English, in case the language that the user has selected is not included
    in our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the `LocalizedString` method is overloaded. The second overload accepts
    three parameters. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The first parameter is the key to look for. The second parameter is the fallback
    value in case the specified localization path is not found. The third parameter
    is the name of the file containing the strings without the `.strings` extension.
    This overload is more helpful, and we can use different keys for our strings,
    which will help us identify where that particular string is used in the code.
    For example, in this case, we could set the key in the strings file to `MultipleLanguageAppViewController.lblLocalizedOutput`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, use it in our code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This overload also helps us to separate our strings into multiple `.strings`
    files, passing the corresponding filename as the third parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The last overload contains four parameters. The first three are the same as
    the second overload. The fourth parameter is simply the comment that we want the
    particular string to have.
  prefs: []
  type: TYPE_NORMAL
- en: Localization in real-world app scenarios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we use the `PathForResource` method to get an instance of the
    current locale bundle. This is because the values returned from the `LocalizedString`
    method are cached. In real-world app scenarios, where the app would be downloaded
    in a specific language and the user would most likely never change the language
    of the device to use it, just calling `NSBundle.MainBundle.LocalizedString` would
    be enough.
  prefs: []
  type: TYPE_NORMAL
- en: The localizable.strings encoding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The encoding of the `Localizable.strings` file should always be either UTF-8
    or UTF-16.
  prefs: []
  type: TYPE_NORMAL
- en: Localizable resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A localizable resource is content, such as images and sound files, which is
    specific to a locale. In this recipe, we will learn how to load and display resources
    based on the user's localization preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Single View Application** in Xamarin Studio and name it `LocalizableResourcesApp`.
    Add a label and a `UIImageView` on the view of `LocalizableResourcesAppViewController`.
    Two different images will also be needed, one for each locale. The images of USA
    and Spain are used in this example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add two folders for the English and Spanish locales to the project (`en.lproj`
    and `es.lproj`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add one image in each folder. Make sure that the filename for the images is
    the same within both the folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code in the `LocalizableResourcesAppViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator with English as the language selected
    in the *Settings* app. The result should be similar to the following screenshot:![How
    to do it...](img/8924OT_13_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, set the simulator's language to Spanish and run the app again. The Spanish
    flag should be displayed instead, as shown in the following screenshot:![How to
    do it...](img/8924OT_13_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PathForResource` method automatically searches for the appropriate language
    folder and loads the resource specified through its arguments. In this example,
    we pass the method's result to the `UIImage.FromFile` method in order to load
    the image and assign it to the image view's `Image` property.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from images, we can use the `PathForResource` method to load videos, PDF
    files, and any other localizable resource we need.
  prefs: []
  type: TYPE_NORMAL
- en: More information on localizable resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to make sure the resource for the specific language folder exists.
    If it does not, an exception will occur. A way to avoid this is to add one universal
    image file in the project and use a `Localizable.strings` file inside each language
    folder, which contains the paths to the resources, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To load the appropriate flag, we load the image with the `LocalizedString`
    method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This way, the `image.jpg` image will be loaded if the corresponding language
    folder is not found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an app for different languages* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regional formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regional formatting is the manner in which various information, such as currency,
    date, and time is displayed according to the different regions of the world. In
    this recipe, we will discuss how to display formatted numbers and dates according
    to the user's regional formatting settings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Single View Application** in Xamarin Studio and name it `RegionalFormattingApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add five labels on the view of `RegionalFormattingAppViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code in the `RegionalFormattingAppViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator with regional formatting set to **United
    States** and **Spanish** | **Spain** under **Settings** | **General** | **International**
    | **Region Format**. The output for the United States regional format will be
    similar to what is shown in the following screenshot:![How to do it...](img/8924OT_13_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output for the Spanish regional format will be similar to what is shown
    in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/8924OT_13_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To format dates, currencies, and numbers, we use the standard .NET code. For
    date and time, the `DateTime.ToLongDateString` and `DateTime.ToLongTimeString`
    methods, respectively, return the values according to the locale.
  prefs: []
  type: TYPE_NORMAL
- en: 'For currency and numbers, we use C# numerical strings, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `System.Globalization` namespace is supported in Xamarin.iOS. To display
    the current locale, consider the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that there is one difference between the preceding code and `NSLocale.CurrentLocale.LocaleIdentifier`.
    The former uses a dash (`-`), while the latter uses an underscore (`_`) in the
    locale name.
  prefs: []
  type: TYPE_NORMAL
