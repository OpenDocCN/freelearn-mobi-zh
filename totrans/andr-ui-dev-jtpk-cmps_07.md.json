["```kt\nvar counter by observable(-1) { _, oldValue, newValue ->\n  println(\"$oldValue -> $newValue\")\n}\nfor (i in 0..3) counter = i\n```", "```kt\n@Composable\n@Preview\nfun SimpleStateDemo1() {\n  val num = remember { mutableStateOf(Random.nextInt(0,\n    10)) }\n  Text(text = num.value.toString())\n}\n```", "```kt\n@Composable\n@Preview\nfun SimpleStateDemo2() {\n  val num by remember { mutableStateOf(Random.nextInt(0,\n   10)) }\n  Text(text = num.toString())\n}\n```", "```kt\n@Composable\n@Preview\nfun RememberWithKeyDemo() {\n  var key by remember { mutableStateOf(false) }\n  val date by remember(key) { mutableStateOf(Date()) }\n  Column(horizontalAlignment =\n         Alignment.CenterHorizontally) {\n    Text(date.toString())\n    Button(onClick = { key = !key }) {\n      Text(text = stringResource(id = R.string.click))\n    }\n  }\n}\n```", "```kt\n@Composable\n@Preview\nfun SimpleStatelessComposable1() {\n  Text(text = \"Hello Compose\")\n}\n```", "```kt\n@Composable\nfun SimpleStatelessComposable2(text: State<String>) {\n  Text(text = text.value)\n}\n```", "```kt\n@Composable\nfun TextFieldDemo(state: MutableState<TextFieldValue>) {\n  TextField(\n    value = state.value,\n    onValueChange = {\n      state.value = it\n    },\n    placeholder = { Text(\"Hello\") },\n    modifier = Modifier.fillMaxWidth()\n  )\n}\n```", "```kt\n@Composable\n@Preview\nfun TextFieldDemo() {\n  val state = remember { mutableStateOf(TextFieldValue(\"\")) }\n  TextFieldDemo(state)\n}\n```", "```kt\n@Composable\nfun TemperatureTextField(\n  temperature: MutableState<String>,\n  modifier: Modifier = Modifier,\n  callback: () -> Unit\n) {\n  TextField(\n    value = temperature.value,\n    onValueChange = {\n      temperature.value = it\n    },\n    …\n    modifier = modifier,\n    keyboardActions = KeyboardActions(onAny = {\n      callback()\n    }),\n    keyboardOptions = KeyboardOptions(\n      keyboardType = KeyboardType.Number,\n      imeAction = ImeAction.Done\n    ),\n    singleLine = true\n  )\n}\n```", "```kt\n@Composable\nfun TemperatureRadioButton(\n  selected: Boolean,\n  resId: Int,\n  onClick: (Int) -> Unit,\n  modifier: Modifier = Modifier\n) {\n  Row(\n    verticalAlignment = Alignment.CenterVertically,\n    modifier = modifier\n  ) {\n    RadioButton(\n      selected = selected,\n      onClick = {\n        onClick(resId)\n      }\n    )\n    Text(\n      text = stringResource(resId),\n      modifier = Modifier\n        .padding(start = 8.dp)\n    )\n  }\n}\n```", "```kt\n@Composable\nfun TemperatureScaleButtonGroup(\n  selected: MutableState<Int>,\n  modifier: Modifier = Modifier\n) {\n  val sel = selected.value\n  val onClick = { resId: Int -> selected.value = resId }\n  Row(modifier = modifier) {\n    TemperatureRadioButton(\n      selected = sel == R.string.celsius,\n      resId = R.string.celsius,\n      onClick = onClick\n    )\n    TemperatureRadioButton(\n      selected = sel == R.string.fahrenheit,\n      resId = R.string.fahrenheit,\n      onClick = onClick,\n      modifier = Modifier.padding(start = 16.dp)\n    )\n  }\n}\n```", "```kt\n@Composable\n@Preview\nfun FlowOfEventsDemo() {\n  ...\n  val calc = {\n    val temp = temperature.value.toFloat()\n    convertedTemperature = if (scale.value ==\n                               R.string.celsius)\n      (temp * 1.8F) + 32F\n    else\n      (temp - 32F) / 1.8F\n  }\n  val result = remember(convertedTemperature) {\n    if (convertedTemperature.isNaN())\n      \"\"\n    else\n      \"${convertedTemperature}${\n        if (scale.value == R.string.celsius)\n          strFahrenheit\n        else strCelsius\n      }\"\n  }\n  val enabled = temperature.value.isNotBlank()\n  Column( ... ) {\n    TemperatureTextField(\n      temperature = temperature,\n      modifier = Modifier.padding(bottom = 16.dp),\n      callback = calc\n    )\n    TemperatureScaleButtonGroup(\n      selected = scale,\n      modifier = Modifier.padding(bottom = 16.dp)\n    )\n    Button(\n      onClick = calc,\n      enabled = enabled\n    ) {\n      Text( ... )\n    }\n    if (result.isNotEmpty()) {\n      Text(text = result, …\n      )\n    }\n  }\n}\n```", "```kt\nclass ViewModelDemoActivity : ComponentActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContent {\n      ViewModelDemo()\n    }\n  }\n}\n```", "```kt\n@Composable\n@Preview\nfun ViewModelDemo() {\n  ...\n  val state1 = remember {\n    mutableStateOf(\"Hello #1\")\n  }\n  val state2 = rememberSaveable {\n    mutableStateOf(\"Hello #2\")\n  }\n  ...\n  state3.value?.let {\n    Column(modifier = Modifier.fillMaxWidth()) {\n      MyTextField(state1) { state1.value = it }\n      MyTextField(state2) { state2.value = it }\n      ...\n    }\n  }\n}\n```", "```kt\n@Composable\nfun MyTextField(\n  value: State<String?>,\n  onValueChange: (String) -> Unit\n) {\n  value.value?.let {\n    TextField(\n      value = it,\n      onValueChange = onValueChange,\n      modifier = Modifier.fillMaxWidth()\n    )\n  }\n}\n```", "```kt\nimplementation \"androidx.compose.runtime:runtime-\n  livedata:$compose_version\"\nimplementation 'androidx.lifecycle:lifecycle-runtime-\n  ktx:2.4.0'\nimplementation 'androidx.lifecycle:lifecycle-viewmodel-\n  compose:2.4.0'\n```", "```kt\nclass MyViewModel : ViewModel() {\n    private val _text: MutableLiveData<String> =\n        MutableLiveData<String>(\"Hello #3\")\n    val text: LiveData<String>\n        get() = _text\n    fun setText(value: String) {\n        _text.value = value\n    }\n}\n```", "```kt\nval viewModel: MyViewModel = viewModel()\n```", "```kt\nval state3 = viewModel.text.observeAsState()\n```", "```kt\nval state3 =\n   viewModel.text.observeAsState(viewModel.text.value) as\n   State<String>\n```", "```kt\nMyTextField(state3) {\n  viewModel.setText(it)\n}\n```"]