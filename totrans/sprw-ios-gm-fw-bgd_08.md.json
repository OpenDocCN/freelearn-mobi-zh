["```swift\n    typedef NS_ENUM(NSInteger, AIState) {\n        StateWanderAround,\n        StateMoveToPlayer,\n        StateAttack,\n        StateRecuperate\n    };\n    ```", "```swift\n    typedef void(^ShipCallback)(void);\n    ```", "```swift\n    -(void) moveToX:(float)x andY:(float)y withBlock:(ShipCallback) block;\n    -(float) checkDistanceToShip:(Ship *)ship;\n    -(void) moveToShip:(Ship *)ship withBlock:(ShipCallback) block;\n    ```", "```swift\n    __block BOOL isTweenXCompleted = NO;\n    __block BOOL isTweenYCompleted = NO;\n\n    tweenX.onComplete = ^{\n      isTweenXCompleted = YES;\n\n      if (isTweenXCompleted && isTweenYCompleted) {\n        if (block != nil) {\n          [block invoke];\n        }\n      }\n    };\n\n    tweenY.onComplete = ^{\n      isTweenYCompleted = YES;\n\n      if (isTweenXCompleted && isTweenYCompleted) {\n        if (block != nil) {\n          [block invoke];\n        }\n      }\n    };\n    ```", "```swift\n    -(float) checkDistanceToShip:(Ship *)ship\n    {\n    SPPoint* p1 = [SPPoint pointWithX:self.x + (self.width / 2) y:self.y + (self.height / 2)];\n    SPPoint* p2 = [SPPoint pointWithX:ship.x + (ship.width / 2) y:ship.y + (ship.height / 2)];\n\n    float distance = [SPPoint distanceFromPoint:p1 toPoint:p2];\n\n    return distance;\n    }\n    ```", "```swift\n    -(void) moveToShip:(Ship *)ship withBlock:(ShipCallback)block\n    {\n        floatrandomX = arc4random_uniform(80) - 40.0f;\n        floatrandomY = arc4random_uniform(80) - 40.0f;\n\n        [self moveToX:ship.x + randomX andY:ship.y + randomY withBlock:block];\n    }\n    ```", "```swift\n    -(void) moveToX:(float)x andY:(float)y\n    {\n     [self moveToX:x andY:y withBlock: nil];\n    }\n    ```", "```swift\n    _aiState = StateWanderAround;\n    ```", "```swift\n    -(SPPoint *) randomPos\n    {\n      return [SPPoint pointWithX:((arc4random() % (int) (Sparrow.stage.width - 80.0f)) + 40.0f) y:((arc4random() % (int) (Sparrow.stage.height - 80.0f)) + 40.0f)];\n    }\n    ```", "```swift\n    -(void) updateAI: (Ship *)ship withState: (AIState) aiState\n    {\n    switch (aiState) {\n    caseStateWanderAround: {\n    SPPoint *point = [self randomPos];\n                [ship moveToX:point.x andY:point.y withBlock:^{\n    if ([ship checkDistanceToShip:_pirateShip] < 200.0f) {\n                        //In sight\n                        [self updateAI:ship withState:StateMoveToPlayer];\n                    } else {\n                        //Not in sight\n                        [self updateAI:ship withState:aiState]\n                    }\n                }];\n            }\n    break;\n    caseStateMoveToPlayer: {\n                [ship moveToShip:_pirateShip WithBlock:^{\n    if ([ship checkDistanceToShip:_pirateShip] < 100.0f) {\n                        // Attack\n                        [self updateAI:ship withState:StateAttack];\n                    } else {\n                        //Not in sight\n                        [self updateAI:ship   withState:StateWanderAround];\n                    }\n                }];\n            }\n    break;\n    default:\n    break;\n        }\n    }\n    ```", "```swift\n    [self updateAI:_enemyShip withState:_aiState];\n    ```", "```swift\n    @property SPJuggler *juggler;\n    ```", "```swift\n    -(void) shootWithBlock:(ShipCallback) block;\n    ```", "```swift\n    -(void) checkShipCollision: (Ship *) ship1 againstShip: (Ship *) ship2\n    {\n        SPRectangle *enemyShipBounds = [ship1 boundsInSpace:self];\n        SPRectangle *ball1 = [ship2.cannonBallLeft boundsInSpace:self];\n        SPRectangle *ball2 = [ship2.cannonBallRight boundsInSpace:self];\n\n        if ([enemyShipBounds intersectsRectangle:ball1] || [enemyShipBounds intersectsRectangle:ball2]) {\n            if (ship2.cannonBallLeft.visible || ship2.cannonBallRight.visible) {\n                [ship2 abortShooting];\n                [ship1 hit];\n            }\n        }\n    }\n    ```", "```swift\n    [self checkShipCollision:_pirateShipagainstShip:_enemyShip];\n    [self checkShipCollision:_enemyShipagainstShip:_pirateShip];\n    ```", "```swift\n    if ([ship checkDistanceToShip:_pirateShip] < 200.0f) {\n     if ([ship checkDistanceToShip:_pirateShip] < 100.0f) {\n     // Attack directly\n     [self updateAI:ship withState:StateAttack];\n     } else {\n     //In sight\n     [self updateAI:ship withState:StateMoveToPlayer];\n     }\n    } else {\n      //Not in sight\n      [self updateAI:ship withState:aiState];\n    }\n    ```", "```swift\n    case StateAttack: {\n      [ship shootWithBlock:^{\n        [self updateAI:ship withState:StateRecuperate];\n      }];\n    }\n    case StateRecuperate: {\n      [ship.juggler delayInvocationByTime:0.3f block:^{\n        [self updateAI:ship withState:StateWanderAround];\n      }];\n    }\n    ```", "```swift\n    -(float) fuzzyValue: (NSString *) value\n    {\n      if ([value isEqualToString:@\"Very near\"]) {\n        return (float) (arg4random() % 40) + 40.0f;\n      } else if ([value isEqualToString:@\"Quite near\"]) {\n        result = (float) (arc4random() % 30) + 70.0f;\n      } else {\n        result = (float) (arc4random() % 50) + 150.0f;\n      }\n    }\n    ```", "```swift\n    if ([ship checkDistanceToShip:_pirateShip] < [self fuzzyValue:@\"Near\"]) {\n    if ([ship checkDistanceToShip:_pirateShip] < [self fuzzyValue:@\"Very near\"]) {\n    if ([ship checkDistanceToShip:_pirateShip] < [self fuzzyValue:@\"Quite near\"]) {\n    ```", "```swift\n        static int level;\n        ```", "```swift\n        +(int) level;\n        ```", "```swift\n        +(void) setLevel:(int)value;\n        ```", "```swift\n    +(void) reset\n    {\n        level = 1;\n        levelMax = 3;\n        gold = 200;\n        damage = [(NSNumber *) [Assets dictionaryFromJSON:@\"gameplay.json\"][@\"damage\"] intValue];\n        hitpoints = [(NSNumber *) [Assets dictionaryFromJSON:@\"gameplay.json\"][@\"hitpoints\"] intValue];\n    }\n    ```", "```swift\n    +(void) log\n    {\n        NSLog(@\"Level %d of %d\", level, levelMax);\n        NSLog(@\"Gold: %d\", gold);\n        NSLog(@\"Players' hit points: %d\", hitpoints);\n        NSLog(@\"Players' damage: %d\", damage);\n    }\n    ```", "```swift\n    [director addScene:battlefield];\n\n    [World reset];\n    [World log];\n\n    [director showScene:@\"battlefield\"];\n    ```", "```swift\n    @propertySPButton *buttonYes;\n    @propertySPButton *buttonNo;\n    ```", "```swift\n    content = [SPTextField textFieldWithWidth:background.width - 96.0f height:background.height - 150.0f text:@\"Dialog default text\"];\n    _content.x = 52.0f;\n    _content.y = 66.0f;\n\n    [SPTextField registerBitmapFontFromFile:@\"PirateFont.fnt\"];\n\n    _title = [SPTextField textFieldWithWidth:background.width * 0.6 height:30.0f text:@\"Dialog\"];\n    _title.fontName = @\"PirateFont\";\n    _title.color = SP_WHITE;\n\n    _title.x = 36.0f;\n    _title.y = 26.0f;\n    ```", "```swift\n    -(void) reset;\n    ```", "```swift\n    if (_dict[name] != nil) {\n      ((Scene *) _dict[name]).visible = YES;\n     [((Scene *) _dict[name]) reset];\n\n    }\n    ```", "```swift\n    SPButton *buttonBattle = [SPButton buttonWithUpState:[[Assets textureAtlas:@\"ui.xml\"] textureByName:@\"dialog_yes\"]; \n    text:@\"Begin battle\"];\n\n    buttonBattle.y = Sparrow.stage.height - buttonBattle.height - 8.0f;\n    buttonBattle.x = (Sparrow.stage.width - buttonBattle.width) / 2;\n\n    [buttonBattle addEventListenerForType:SP_EVENT_TYPE_TRIGGERED block:^(SPEvent *event){\n      [((SceneDirector *) self.director) showScene:@\"battlefield\"];\n    }];\n    ```", "```swift\n    [self addChild:buttonBattle];\n    ```", "```swift\n    _goldTextField = [SPTextField textFieldWithWidth:Sparrow.stage.width - 16.0f height:30.0f text:@\"Gold\"];\n    _goldTextField.fontName = @\"PirateFont\";\n    _goldTextField.color = SP_WHITE;\n\n    _goldTextField.x = 8.0f;\n    _goldTextField.y = 8.0f;\n    ```", "```swift\n    [self addChild:_goldTextField];\n    ```", "```swift\n    -(void) updateGoldTextField\n    {\n        _goldTextField.text = [NSString stringWithFormat:@\"Gold: %d\", World.gold];\n    }\n    ```", "```swift\n    Dialog *_dialogUpdateDamage;\n    ```", "```swift\n    int _goldDamage;\n    ```", "```swift\n    _dialogUpdateDamage = [[Dialog alloc] init];\n\n    _dialogUpdateDamage.title.text = @\"Update damage?\";\n\n    _dialogUpdateDamage.x = (Sparrow.stage.width - _dialogUpdateDamage.width) / 2;\n    _dialogUpdateDamage.y = (Sparrow.stage.height - _dialogUpdateDamage.height) / 2;\n\n    _dialogUpdateDamage.visible = NO;\n\n    [weaponsmith addEventListenerForType:SP_EVENT_TYPE_TOUCH block:^(SPEvent *event){\n      if (World.gold < _goldDamage) {\n        _dialogUpdateDamage.buttonYes.enabled = NO;\n      }\n\n      _dialogUpdateDamage.visible = YES;\n    }];\n\n    [_dialogUpdateDamage addEventListener:@selector(onUpdateDamage:) atObject:self forType:EVENT_TYPE_YES_TRIGGERED];\n    ```", "```swift\n    [self addChild:_dialogUpdateDamage];\n    ```", "```swift\n    -(void) onUpdateDamage: (SPEvent *) event\n    {\n    World.damage = World.damage + (int) (World.damage / 10);\n    World.gold = World.gold - _goldDamage;\n        [self updateGoldTextField];\n    }\n    ```", "```swift\n    -(void) reset\n    {\n        _goldDamage = (150 + (50 * (World.level - 1)));\n        _dialogUpdateDamage.content.text = [NSString stringWithFormat:@\"Increasing damage costs %d gold. Do you wish to proceed?\", _goldDamage];\n\n        _goldHitpoints = (200 + (75 * (World.level - 1)));\n        _dialogUpdateHitpoints.content.text = [NSString stringWithFormat:@\"Increasing hitpoints costs %d gold. Do you wish to proceed?\", _goldHitpoints];\n\n        [self updateGoldTextField];\n    }\n    ```", "```swift\n    @property (nonatomic, copy) ShipCallbackonDead;\n    ```", "```swift\n    if (_hitpoints<= 0) {\n      self.visible = FALSE;\n\n     if (self.onDead) {\n     [_onDead invoke];\n     }\n    }\n    ```", "```swift\n    @property SPTextField *textGameWon;\n    @property SPTextField *textGameLost;\n    ```", "```swift\n    _textGameLost = [SPTextField textFieldWithWidth:Sparrow.stage.width height:Sparrow.stage.height text:@\"Game Over\"];\n    _textGameLost.fontName = @\"PirateFont\";\n    _textGameLost.color = SP_WHITE;\n    _textGameLost.visible = NO;\n\n    _textGameWon = [SPTextField textFieldWithWidth:Sparrow.stage.width height:Sparrow.stage.height text:@\"You won the game. Well done\"];\n    _textGameWon.fontName = @\"PirateFont\";\n    _textGameWon.color = SP_WHITE;\n    _textGameWon.visible = NO;\n\n    __weak typeof(self) weakSelf = self;\n    _pirateShip.onDead = ^{\n      weakSelf.textGameLost.visible = YES;\n    };\n    //...\n    [self addChild:_textGameLost];\n    [self addChild:_textGameWon];\n    ```", "```swift\n    if (deadCount == World.level) {\n     if (World.level == World.levelMax) {\n     self.textGameWon.visible = YES;\n     } else {\n        World.gold = World.gold + (250 * World.level);\n        World.level++;\n        self.paused = YES;\n        [((SceneDirector *) self.director) showScene:@\"piratecove\"];\n      }\n    }\n    ```"]