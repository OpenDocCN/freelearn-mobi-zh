["```swift\n    import UIKit\n    class ViewController: UIViewController {\n       var orders: [String] = []\n       @IBOutlet var tableView: UITableView!\n       override func viewDidLoad() {\n          super.viewDidLoad()\n          title = \"ShareOrder\"\n          tableView.register(UITableViewCell.self, \n          forCellReuseIdentifier: \"orderCell\")\n       }\n       @IBAction func addOrder(_ sender: UIBarButtonItem)\n       {\n          let alert = UIAlertController(title: \"New\n          Order\", message: \"Add a new order\", \n          preferredStyle: .alert)\n          let saveAction = UIAlertAction(title: \"Save\", \n          style: .default) {\n             [unowned self] action in\n             guard let textField = \n             alert.textFields?.first, \n             let orderToSave = textField.text else {\n                return\n             }\n             self.orders.append(orderToSave)\n             self.tableView.reloadData()\n          }\n          let cancelAction = UIAlertAction(title: \n          \"Cancel\", style: .cancel)\n          alert.addTextField()\n          alert.addAction(saveAction)\n          alert.addAction(cancelAction)\n          present(alert, animated: true)\n       }\n    }\n    extension ViewController: UITableViewDataSource {\n       func tableView(_ tableView: UITableView, \n       numberOfRowsInSection section: Int) -> Int {\n          orders.count\n       }\n       func tableView(_ tableView: UITableView, \n       cellForRowAt indexPath: IndexPath) -> \n       UITableViewCell {\n          let cell = tableView.dequeueReusableCell\n          (withIdentifier: \"orderCell\", for: indexPath)\n          cell.textLabel?.text = orders[indexPath.row]\n          return cell\n       }\n    }\n    ```", "```swift\n    var orders: [String] = []\n    ```", "```swift\n    @IBOutlet var tableView: UITableView!\n    ```", "```swift\n    import UIKit\n    import GroupActivities\n    ```", "```swift\n    extension ViewController {\n       struct ShareOrder: GroupActivity {\n          var metadata: GroupActivityMetadata {\n             var metadata = GroupActivityMetadata()\n             metadata.title = NSLocalizedString(\"Share \n             Order\", comment: \"Title of group activity\")\n             metadata.type = .generic\n             return metadata\n          }\n       }\n    }\n    ```", "```swift\n    @IBAction func activateGroupActivity(_ sender: Any) {\n       Task {\n          do {\n             try await ShareOrder().activate()\n          } catch {\n             print(\"Unable to activate\")\n          }\n       }\n    }\n    ```", "```swift\n    var orders: [String] = [] \n    var groupSession: GroupSession<ShareOrder>?\n    ```", "```swift\n    override func viewDidLoad() {\n       super.viewDidLoad()\n       title = \"ShareOrder\"\n       tableView.register(UITableViewCell.self, \n       forCellReuseIdentifier: \"orderCell\")\n    Task is a unit of asynchronous work, and is covered in *Chapter 24*, *Getting Started with Swift Concurrency*.You'll see an error because `configureGroupSession(_:)` has not yet been implemented.\n    ```", "```swift\n    func configureGroupSession(_ groupSession: \n    GroupSession<ShareOrder>) {\n       orders.removeAll()\n       self.groupSession = groupSession\n    }\n    ```", "```swift\n    func configureGroupSession(_ groupSession: \n    GroupSession<ShareOrder>){\n       orders.removeAll()\n       self.groupSession = groupSession\n       ShareOrder project at this point.\n    ```", "```swift\n    var groupSession: GroupSession<ShareOrder>?\n    var messenger: GroupSessionMessenger?\n    ```", "```swift\n    func configureGroupSession(_ groupSession: \n    GroupSession<ShareOrder>){\n       orders.removeAll()\n       self.groupSession = groupSession\n    let messenger = GroupSessionMessenger(session: \n       groupSession)\n       self.messenger = messenger\n       groupSession.join()\n    }\n    ```", "```swift\n    let messenger = GroupSessionMessenger(session: \n    groupSession)\n    self.messenger = messenger\n    GroupSessionMessenger message contains a string representing an order. You will implement a handle(_:) method and pass the message to this method to be processed. You'll see an error because the handle(_:) method has not yet been implemented.\n    ```", "```swift\n    func handle(_ message: String) {\n       self.orders.append(message)\n       self.tableView.reloadData()\n    }\n    ```", "```swift\n    self.orders.append(orderToSave)\n    if let messenger = messenger {\n       Task {\n          do {\n             try await messenger.send(orderToSave)\n          } catch {\n             print(\"Failed to send\")\n          }\n       }\n    }\n    self.tableView.reloadData()\n    ```"]