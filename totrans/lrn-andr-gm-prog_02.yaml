- en: Getting Familiar with Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will guide you through Android Studio and, by the end of this
    chapter, you will have successfully executed your first Android project. This
    will be an important chapter for your core understanding of the project structure
    of Android and will help you with the chapters that follow. You will learn the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: General project structure of an Android Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default class explanation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML files and different types of XML files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Android Emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing your first Hello World program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Android project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, in our last chapter, we successfully set up our Android Studio with the
    required components to start working on our project right away. Let's get started.
    In order to learn about the Android project structure, we must first open up a
    new project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first Android Studio project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your Android Studio, and click on Start a new Android Studio project,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_5066_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you start a new project, you will see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_01_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this screen, fill in the details of your first Android app:'
  prefs: []
  type: TYPE_NORMAL
- en: Application name is the name of your app, which will appear on the icon of your
    phone when it is installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Company Domain is an identifier for your app. Make sure that you keep this common
    throughout your apps for better organization and convention.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package name is another important unique identifier for your app. We learned
    about this in our [first chapter](7fe5acac-a18a-4ddf-8420-5bdca43b1c02.xhtml)
    and saw its naming conventions. Refer to that part if you have any doubts regarding
    package names and their naming.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include C++ support is optional. For the purpose of this book, we will keep
    it unchecked for now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project location is the path where your project folder will be situated on your
    computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you are ready after filling in all these details, press Next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will see this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_01_15.png)'
  prefs: []
  type: TYPE_IMG
- en: Different platforms for your Android app
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of this book, we will only work with Phone and Tablet. However,
    you can try experimenting with other platforms as well, once you are comfortable
    with the development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Minimum SDK is the OS version that would be required as a minimum factor to
    run your app. It is recommended that you select the lowest version for your app
    to run on as many OS versions as possible. However, do note that some functions
    are deprecated from further versions, so it is recommended that you use Minimum
    API 14: Android 4.0 (IceCreamSandwich) for hassle-free development. You will also
    be prompted about how many devices will be supporting your app, as you can see
    in the image. These figures are real time and change as the market share of an
    OS changes.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to know about the updated market share and some more interesting
    stuff related to various versions and their respective market share, you can visit
    the official Android website at [https://developer.android.com/about/dashboards/index.html](https://developer.android.com/about/dashboards/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we select our Fullscreen Activity, press Next, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_01_16.png)'
  prefs: []
  type: TYPE_IMG
- en: Different types of activities
  prefs: []
  type: TYPE_NORMAL
- en: 'You could say that an activity is simply a default layout. Since we are creating
    a game, we will use a Fullscreen Activity. As you can see in the preceding screenshot,
    you have many different activity options to choose from, which are quite self-explanatory
    on their own. So, let''s select Fullscreen Activity and press Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_01_17.png)'
  prefs: []
  type: TYPE_IMG
- en: Naming your activities
  prefs: []
  type: TYPE_NORMAL
- en: Activity Name is the name of your Java class that will be generated. We will
    be working with this file a lot, so make sure that you remember it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Layout Name is the name of the XML file, which will deal with how and what
    components will appear on your app visually. There are some naming conventions
    that need to be followed for XML files. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Names must be all lowercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An underscore is used to separate two words instead of spaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always prefix the filename with the type of resources; for instance, if your
    XML file corresponds to an activity such as `MainActivity.java`, then your filename
    would be `activity_main.xml`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have a subitem of a specific group, such as a list item of main activity,
    then it can be named by suffixing it as `activity_main_list_item.xml`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This way, you can either suffix or prefix a keyword for your filename, as you
    prefer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Title is the name that will appear on the top bar of your app. The title you
    use for the Activity and the class name of the main Activity might be different;
    titles may also contain spaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are finished with all of this, click on Finish and give yourself a
    pat on the back. You have successfully learned how to create an Android Studio
    Project. After this, wait for a few seconds/minutes depending on your system''s
    performance for your project to set up; once it is ready, you will see the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_01_18.png)'
  prefs: []
  type: TYPE_IMG
- en: Our Android Studio Project Folder
  prefs: []
  type: TYPE_NORMAL
- en: 'If for some reason, you are not able to see this screen after waiting, then
    click on the 1: Project option, which is vertically aligned below FirstGame on
    the upper-left corner of the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully created your first app now. At this point,
    you can go ahead and run the project and see how it runs on the emulator; however,
    before we do that, let's walk through the project folder structure of this project.
    Let's expand each folder to understand it further. Now, this part is very important,
    since this will serve as a foundation for almost every basic thing you will be
    doing in Android Studio, so make sure that you understand this properly.
  prefs: []
  type: TYPE_NORMAL
- en: Project Structure of an Android Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Click on the small arrow on the left-hand side of each folder to expand its
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_01_19.png)'
  prefs: []
  type: TYPE_IMG
- en: Various folders inside the project folder
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we have multiple folders in our project folder. Our main project
    folder contains three subfolders, which are `manifest`, `java`, and `res`; we
    will explore each of these folders individually now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`manifest`: This folder contains your `AndroidManifest.xml` file, which is
    responsible for giving permissions to your app, as we learned in the preceding
    chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java`: This folder contains all your `.java` files, which are your Java code
    files. Generally, this folder has multiple subfolders that have your package name
    at the top, and within them, are source code files. You can observe in the preceding
    screenshot that we have our `java` folder, and we have a folder named `nikhil.nikmlnkr.game`
    within that, which is actually the package name of our game, and we have our `FullScreenActivity` within
    that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res`: This folder contains all your resources. `res` here simply means resources
    that can include anything from simple string data to images to complex XML layouts.
    Simple terms, most of the things you see on the screen are stored here. You can
    design your front-end with the help of resources that you keep in the `res` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know what these folders are, let's start designing our first program. Also,
    to stay true to our programming background, let's start with the famous `Hello
    World` example. Things are going to get really interesting from this point on.
    By now, you have grasped pretty much all the basics you need to start development.
    Now, in a matter of a few minutes, you will be ready with your very first Android
    app that you can run on your phone. So, without further ado, let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: If you can see a screen with two big blue windows saying DUMMY CONTENT, as seen
    in the preceding screenshot, you are good to start; otherwise simply navigate
    to the `res/layout/` folder and double-click on `activity_fullscreen.xml` to open
    the XML layout in which we will be working now.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can see many options in front of you; don't get overwhelmed or scared.
    You will soon learn and master the art of creating amazing user interfaces with
    the tools in front of you.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our Hello World! program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, let''s create our first `Hello World` program. As you can see, you have a
    Palette in front of you besides the blue DUMMY CONTENT window. Simply drag and
    drop the TextView component onto your DUMMY CONTENT screen, as you can see in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_02_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging and dropping TextView component onto our screen
  prefs: []
  type: TYPE_NORMAL
- en: Notice the new Properties window when you successfully place TextView in the
    DUMMY CONTENT screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can see a blank Text View component on your screen, but there''s nothing
    written on it. To have something written on it, we need to modify its properties
    a little. Check out the Properties on the right-hand side of the screen and, in
    the text component over there, type in `Hello World!`. Also, you can see that
    our text is very small. Let''s change that to make it a little bigger so that
    it can be clearly visible to us. Locate the last option in the Properties window
    named textAppearance. Click on the drop-down menu next to it, and select any option
    that suits your choice from there. For this example, we will use AppCompat.Headline; however,
    you can choose whatever you want to. Once you are done with it, you will see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_02_09.png)'
  prefs: []
  type: TYPE_IMG
- en: Your first Hello World! program is ready!
  prefs: []
  type: TYPE_NORMAL
- en: That's it! You are now ready to execute your program! Easy peasy, lemon squeezy,
    right? Let's move on to actually executing this code now. For this purpose, we
    will need to run something known as the **Emulator**. An emulator is simply a
    virtual device that will act as an Android device on your PC, so you don't have
    to actually test your app on an Android device every time. You will need to follow
    a few steps to set up an emulator, so let's get started with it. You will only
    have to set up the emulator once, and next time, it will be ready for you.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Click on the green play icon to start executing your first program and set
    up your emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_01_22.png)'
  prefs: []
  type: TYPE_IMG
- en: The play button can be found on the top of the screen as marked in this image
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on Create New Virtual Device and make sure that Use same selection
    for future launches is checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_02_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a device of your choice, and click on Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_02_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Nougat with API Level 24, and click on Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_02_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Give a name to your emulator (optional) in the AVD Name field and select a
    Portrait -Startup orientation and click on Finish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_02_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that the latest device that you created will now appear in the
    list of Available Virtual Devices; select it and click on OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_02_15.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on OK after selecting your device
  prefs: []
  type: TYPE_NORMAL
- en: '**ONLY FOR WINDOWS SYSTEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you may get the following message, as seen in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_02_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you get an ONLY FOR WINDOWS SYSTEMS message, then follow these steps; otherwise,
    you can skip this part:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter BIOS by restarting your computer and pressing *Delete*, *Esc*, or *F1* depending
    on your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Processor/Chipset settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable Virtualization Technology.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This can happen due to a couple of problems. HAXM problems often occur because
    of Intel chipsets. The **Intel Hardware Accelerated Execution Manager** (**Intel®
    HAXM**) is a hardware-assisted virtualization engine (hypervisor) that uses **Intel
    Virtualization Technology** (**Intel® VT**) to speed up Android app emulation
    on a host machine. In combination with Android x86 emulator images provided by
    Intel and the official Android SDK Manager, HAXM allows for faster Android emulation
    on Intel VT-enabled systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_01_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you do this, a small window will open below the screen, and your build
    process will start. Wait for some time and your emulator will open up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_02_18.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! Your Hello World! program is running successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Give yourself a pat on the back. You have now successfully executed your first
    program.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have gone through our Android Project Structure as well
    as developing a basic understanding of how to create elements using the XML file.
    We also learned how to set up the Android Emulator and executed our Hello World!
    program.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at how to manage inputs and we will
    dive deeper into understanding XML files, which will serve as a core foundation
    for making our games. We will also learn how to link your XML files to your source
    code, change texts, and other cool stuff.
  prefs: []
  type: TYPE_NORMAL
