["```kt\nrectangle1 = {x: 5, y: 5, width: 50, height: 50}\nrectangle2 = {x: 20, y: 10, width: 10, height: 10}\n\nif(rectangle1.x < rectangle2.x + rectangle2.width && rectangle1.width > rectangle2.x && rectangle1.y < rectangle2.y + rectangle2.height && rectangle1.height + rectangle1.y > rectangle2.y) \n{\n    //Bounding Box Collision Detected\n}\n\n// Taking the values from our variables\nif (5 < 30 && 55 > 20 && 5 < 20 && 55 > 10) {\n // Bounding Box Collision Detected!\n}\n\n```", "```kt\ncircle1 = {radius: 20, x: 5, y: 5};\ncircle2 = {radius: 12, x: 10, y: 5};\n\ndx = circle1.x - circle2.x;\ndy = circle1.y - circle2.y;\n\ndistance = Math.sqrt(dx * dx + dy * dy);\n\nif (distance < circle1.radius + circle2.radius) {\n // Circle Collision!\n}\n\n```", "```kt\npublic void update(){\n if(playerCharacter.getPlaying()) { bgImg.update(); playerCharacter.update(); }\n}\n\n```", "```kt\n    @Override\n    public boolean onTouchEvent(MotionEvent event)\n    {\n if(event.getAction() == MotionEvent.ACTION_DOWN) {\n if(!playerCharacter.getPlaying()){\n playerCharacter.setPlaying(true);\n } else {\n playerCharacter.setUp(true);\n }\n return true;\n }\n\n if(event.getAction() == MotionEvent.ACTION_UP){\n playerCharacter.setUp(false);\n return true;\n }        return super.onTouchEvent(event);\n    }\n\n```", "```kt\n    public void update() {\n        long elapsed = (System.nanoTime()-startTime)/1000000;\n        if(elapsed > 100) {\n            score++;\n            startTime = System.nanoTime();\n        }\n        ac.update();\n if(up){\n dyc = (int)(dya-=1.1);\n }\n else {\n dyc = (int)(dya+=1.1);\n }\n\n if(dyc > 10) {\n dyc = 10;\n }\n if(dyc < -10) {\n dyc = -10;\n }\n\n yc += dyc*2;\n dyc = 0;\n    }\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\n/**\n * Created by Nikhil on 30-01-2017.\n */\n\npublic class Rock extends GameObj {\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\n\nimport java.util.Random;\n\n/**\n * Created by Nikhil on 30-01-2017.\n */\n\npublic class Rock extends GameObj{\n\n    private int score;\n    private int speed;\n    private Random rnd = new Random ();\n    private AnimationClass animationClass = new AnimationClass();\n    private Bitmap spriteSheet;\n\n}\n\n```", "```kt\n    public Rock (Bitmap res, int xc, int yc, int w, int h, int s, int noOfFrames) {\n        this.xc = xc;\n        this.yc = yc;\n        width = w;\n        height = h;\n        score = s;\n\n        speed = 7  + (int) (rnd.nextDouble()*score/30);\n\n        if(speed > 35)\n            speed = 35;\n\n        Bitmap[] img = new Bitmap[noOfFrames];\n\n        spriteSheet = res;\n\n        for(int i=0; i<img.length; i++) {\n        img[i] = Bitmap.createBitmap(spriteSheet, 0, i*height, \n            width,  height);\n        }\n\n        animationClass.setFrames(img);\n        animationClass.setDelay(100);\n\n    }\n\n```", "```kt\n    public void update() {\n        xc -= speed;\n        animationClass.update();\n    }\n\n    public void draw(Canvas canvas) {\n        try {\n            canvas.drawBitmap(animationClass.getImage(), xc, yc, null);\n        } catch (Exception e) {}\n    }\n\n```", "```kt\n private long rockStartTime; private ArrayList<Rock> rocks;\n private Random rnd = new Random();\n\n```", "```kt\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder){\n        boolean retry = true;\n int counter = 0; while(retry && counter <1000)\n        {\n            counter++;\n            try {mainThread.setRunning(false);\n                mainThread.join();\n retry = false;\n            } catch(InterruptedException e){e.printStackTrace();}\n        }\n\n    }\n\n```", "```kt\n    @Override\n    public void surfaceCreated(SurfaceHolder holder){\n\n        bgImg = new BackgroundImage(BitmapFactory.decodeResource\n        (getResources(),  R.drawable.background_image));\n        playerCharacter = new \n        PlayerCharacter(BitmapFactory.decodeResource\n        (getResources(),R.drawable.player_run),200,246,3);\n rocks = new ArrayList<Rock>();\n\n rockStartTime = System.nanoTime();\n\n        //we can safely start the game loop\n        mainThread.setRunning(true);\n        mainThread.start();\n\n    }\n\n```", "```kt\n    public void update(){\n        if(playerCharacter.getPlaying()) {\n            bgImg.update();\n            playerCharacter.update();\n //spawn rocks on screen\n            long rockElapsed = (System.nanoTime() - \n            rockStartTime/1000000);\n if(rockElapsed>(2000 - playerCharacter.getScore()/4)){\n if(rocks.size() == 0){\n rocks.add(new Rock(BitmapFactory.decodeResource\n                    (getResources(), R.drawable.rock), \n                    WIDTH+10, HEIGHT/2, 66, 82, \n                    playerCharacter.getScore(),3));\n } else {\n rocks.add(new Rock(BitmapFactory.decodeResource\n                    (getResources(), R.drawable.rock), \n                    WIDTH+10, (int) \n                    (rnd.nextDouble() * (HEIGHT)), 66, 82, \n                    playerCharacter.getScore(),3));\n }\n rockStartTime = System.nanoTime();\n }\n\n for(int i=0; i<rocks.size();i++) {\n rocks.get(i).update();\n if(collision(rocks.get(i),playerCharacter)) {\n rocks.remove(i);\n playerCharacter.setPlaying(false);\n break;\n }\n //remove rocks if they go out of the screen\n                if(rocks.get(i).getXC()<-100) {\n rocks.remove(i);\n break;\n }\n\n }\n        }\n    }\n\n```", "```kt\n public boolean collision(GameObj a, GameObj b) {\n\n if(Rect.intersects(a.getRectangle(), b.getRectangle())) {\n return true;\n }\n return false;\n }\n\n```", "```kt\n    @Override\n    public void draw(Canvas canvas)\n    {\n        final float scaleFactorX = getWidth()/WIDTH;\n        final float scaleFactorY = getHeight()/HEIGHT;\n        if(canvas!=null) {\n            final int savedState = canvas.save();\n            canvas.scale(scaleFactorX, scaleFactorY);\n            bgImg.draw(canvas);\n            playerCharacter.draw(canvas);\n for(Rock r : rocks) {\n r.draw(canvas);\n }\n\n            canvas.restoreToCount(savedState);\n        }\n    }\n\n```", "```kt\npublic static final int WIDTH = 1920;\npublic static final int HEIGHT = 1080;\npublic static final int MOVINGSPEED = -5;\nprivate long rockStartTime;\nprivate MainGameThread mainThread;\nprivate BackgroundImage bgImg;\nprivate PlayerCharacter playerCharacter;\nprivate ArrayList<Rock> rocks;\n\nprivate Random rnd = new Random();\n\n```", "```kt\n@Override\npublic void surfaceDestroyed(SurfaceHolder holder){\n    boolean retry = true;\n    int counter = 0;\n    while(retry && counter <1000)\n    {\n        counter++;\n        try{mainThread.setRunning(false);\n            mainThread.join();\n            retry = false;\n        }catch(InterruptedException e){e.printStackTrace();}\n    }\n\n}\n\n```", "```kt\n@Override\npublic void surfaceCreated(SurfaceHolder holder){\n\n    bgImg = new BackgroundImage(BitmapFactory.decodeResource\n    (getResources(), R.drawable.background_image));\n    playerCharacter = new PlayerCharacter(BitmapFactory.decodeResource\n    (getResources(),R.drawable.player_run),200,246,3);\n    rocks = new ArrayList<Rock>();\n\n    rockStartTime = System.nanoTime();\n\n    //we can safely start the game loop\n    mainThread.setRunning(true); \n    mainThread.start();\n\n}\n\n```", "```kt\nlong rockElapsed = (System.nanoTime() - rockStartTime/1000000);\n\nif(rockElapsed>(2000 - playerCharacter.getScore())){\n\n    if(rocks.size() == 0){\n        rocks.add(new Rock(BitmapFactory.decodeResource\n        (getResources(), R.drawable.rock), \n        WIDTH+10, HEIGHT/2, 66, 82, \n        playerCharacter.getScore(),3));\n    } else {\n        rocks.add(new Rock(BitmapFactory.decodeResource\n        (getResources(), R.drawable.rock), \n        WIDTH+10, (int) (rnd.nextDouble() * (HEIGHT)), 66, 82,           \n        playerCharacter.getScore(),3));\n    }\n\n    rockStartTime = System.nanoTime();\n}\n\nfor(int i=0; i<rocks.size();i++) {\n\n    rocks.get(i).update();\n\n    if(collision(rocks.get(i),playerCharacter)) {\n        rocks.remove(i);\n        playerCharacter.setPlaying(false);\n        break;\n    }\n\n//remove rocks if they go out of the screen\n    if(rocks.get(i).getXC()<-100) {\n        rocks.remove(i);\n        break;\n    }\n}\n\n```", "```kt\npublic boolean collision(GameObj a, GameObj b) {\n\n    if(Rect.intersects(a.getRectangle(), b.getRectangle())) {\n        return true;\n    }\n    return false;\n}\n\n```", "```kt\nfor(Rock r : rocks) {\n    r.draw(canvas);\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\n\n/**\n * Created by Nikhil on 13-01-2017.\n */\n\npublic class PlayerCharacter extends GameObj{\n    private Bitmap spriteSheet;\n    private int score;\n    private boolean up, playing;\n    private AnimationClass ac = new AnimationClass();\n    private long startTime;\n\n    public PlayerCharacter(Bitmap res, int w, int h, int noOfFrames) {\n        xc = 100;\n        yc = GameView.HEIGHT/2;\n //removing the dya variable        dyc = 0;\n        score = 0;\n        height = h;\n        width = w;\n\n        Bitmap[] img = new Bitmap[noOfFrames];\n        spriteSheet = res;\n\n        for(int i=0; i<img.length;i++){\n            img[i] = Bitmap.createBitmap(spriteSheet, i*width, 0, \n            width, height);\n        }\n        ac.setFrames(img);\n        ac.setDelay(10);\n        startTime = System.nanoTime();\n    }\n\n    public void setUp(boolean b){\n        up = b;\n    }\n\n    public void update() {\n        long elapsed = (System.nanoTime()-startTime)/1000000;\n        if(elapsed > 100) {\n            score++;\n            startTime = System.nanoTime();\n        }\n        ac.update();\n\n        if(up){\n dyc -=1;\n        }\n        else {\n dyc +=1;\n        }\n\n        if(dyc > 10) {\n            dyc = 10;\n        }\n        if(dyc < -10) {\n            dyc = -10;\n        }\n\n        yc += dyc*2;\n //removing the dya variable\n    }\n\n    public void draw(Canvas canvas) {\n        canvas.drawBitmap(ac.getImage(), xc, yc, null);\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public boolean getPlaying(){\n        return playing;\n    }\n\n    public void setPlaying(boolean b) {\n        playing = b;\n    }\n\n    public void resetDYC() {\n        dyc = 0;\n    }\n\n    public void resetScore () {\n        score = 0;\n    }\n}\n\n```", "```kt\npublic class GameView extends SurfaceView implements SurfaceHolder.Callback\n{\n    public static final int WIDTH = 1920;\n    public static final int HEIGHT = 1080;\n    public static final int MOVINGSPEED = -5;\n //private long rockStartTime;    private MainGameThread mainThread;\n    private BackgroundImage bgImg;\n    private PlayerCharacter playerCharacter;\n    private ArrayList<Rock> rocks;\n\n    private Random rnd = new Random();\n\n    //Constructor, surfaceDestroyed and surfceChanged methods remain \n    same\n    @Override\n    public void surfaceCreated(SurfaceHolder holder){\n\n        bgImg = new BackgroundImage(BitmapFactory.decodeResource\n        (getResources(), R.drawable.background_image));\n        playerCharacter = new \n        PlayerCharacter(BitmapFactory.decodeResource\n        (getResources(),R.drawable.player_run),200,246,3);\n        rocks = new ArrayList<Rock>();\n //rockStartTime = System.nanoTime();\n\n        //we can safely start the game loop\n        mainThread.setRunning(true);\n        mainThread.start();\n\n    }\n    //onTouchEvent remains same\n\n    public void update()\n    {\n        if(playerCharacter.getPlaying()) {\n            bgImg.update();\n            playerCharacter.update();\n\n            //spawn rocks on screen\n //long rockElapsed = (System.nanoTime() - \n            rockStartTime/1000000);\n //if(rockElapsed>(2000 - playerCharacter.getScore())){\n             if(rocks.size() < 2){\n                 if(rocks.size() == 0){\n                    rocks.add(new Rock(BitmapFactory.decodeResource\n                    (getResources(), R.drawable.rock),\n                    WIDTH+10, HEIGHT/2, 120, 82, \n                    playerCharacter.getScore(),3));\n                } else {\n                    rocks.add(new Rock(BitmapFactory.decodeResource\n                    (getResources(), R.drawable.rock), \n                    WIDTH+10, (int) (rnd.nextDouble() * (HEIGHT)),\n                    120, 82, playerCharacter.getScore(),3));\n                }\n                rockStartTime = System.nanoTime();\n } //Bracket ends here\n\n            for(int i=0; i<rocks.size();i++) {\n                rocks.get(i).update();\n                if(collision(rocks.get(i),playerCharacter)) {\n                    rocks.remove(i);\n                    playerCharacter.setPlaying(false);\n                    break;\n                }\n                //remove rocks if they go out of the screen\n                if(rocks.get(i).getXC()<-100) {\n                    rocks.remove(i);\n                    break;\n                }\n\n            }\n        }\n    }\n\n    public boolean collision(GameObj a, GameObj b) {\n\n        if(Rect.intersects(a.getRectangle(), b.getRectangle())) {\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public void draw(Canvas canvas)\n    {\n        //same as the draw method seen earlier\n    }\n\n}\n\n```"]