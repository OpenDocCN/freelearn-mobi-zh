- en: Chapter 10. Integrating with Game Center
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple provides an online social gaming network called **Game Center**. Your
    players can share high scores, track achievements, challenge friends, and start
    matchmaking for multiplayer games with Game Center. In this chapter, we will use
    Apple's iTunes Connect website to register our app with Apple. Then, we can integrate
    with Game Center to add leaderboards and achievements in our game.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need an active Apple developer account (which costs $99 per year) to
    register your app with Apple, access the iTunes Connect website with Game Center,
    and publish your game to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering an app with iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating the player's Game Center account in our app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opening Game Center from the `MenuScene` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a leaderboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and awarding achievements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering an app with iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since Apple will be storing our high scores and achievements on their centralized
    servers, we need to communicate to Apple that we need Game Center for our app.
    The first step is to create a record for our app on the iTunes Connect website.
    Follow these steps to create an iTunes Connect record:'
  prefs: []
  type: TYPE_NORMAL
- en: In a web browser, navigate to [http://itunesconnect.apple.com](http://itunesconnect.apple.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in with your Apple developer account information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you reach the **iTunes Connect** dashboard, click on the **My Apps** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Towards the upper left, click on the **+** symbol and select **New iOS App**,
    as shown here:![Registering an app with iTunes Connect](img/Image_B04532_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the subsequent dialogue, locate the link at the bottom that says **Register
    a new bundle ID on the Developer Portal**. Click this link to create a bundle
    ID for your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will arrive on a page titled **Registering an App ID**. This page may appear
    overwhelming at first, but you only need to fill out two fields. First, enter
    the name of your app in the **App Description** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the **App ID Suffix** section. Make sure to select **Explicit
    App ID** and then enter the **Bundle ID** field from your Xcode project settings,
    as shown here:![Registering an app with iTunes Connect](img/Image_B04532_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the **App Services** section and double-check that the Game Center
    option is already checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the page, click **Continue**. Then click **Submit** on the
    subsequent confirmation page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now close this tab and return to iTunes Connect, picking up where you
    left off on the new iOS app screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It can take some time before the bundle ID you just created shows up in iTunes
    Connect. If this happens, take a break and try again after a few moments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the **Name** of your app, the **Primary Language**, the **Version**, and
    **SKU** (which is not visible to the public). Then select the **Bundle ID** you
    just created, as shown in this screenshot:![Registering an app with iTunes Connect](img/Image_B04532_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create** in the lower right. You should now see an overview for your
    app in iTunes Connect, which will look something like this screenshot:![Registering
    an app with iTunes Connect](img/Image_B04532_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations, not only are we closer to configuring Game Center, we have
    also taken the first step towards preparing our app for submission to the app
    store!
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Game Center
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have an iTunes Connect app record, we can tell Apple more about
    how we want to use Game Center in our game. Follow these steps to configure Game
    Center:'
  prefs: []
  type: TYPE_NORMAL
- en: On your app page, click the link for Game Center in the top navigation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Enable for Single Game**, as shown here:![Configuring Game Center](img/Image_B04532_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a screen allowing you to create new leaderboards and achievements
    for your game. Perfect! We will use this page later in the chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have informed Apple that we want to use Game Center in our game. Next, we
    need to create a sandbox user account for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a test user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Game Center uses separate test servers during app development, so we will not
    be able to use our real Apple ID to log in to Game Center while we are testing.
    Instead, we will create a sandbox account in iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: '*The website of iOS Developer Library states "Always create new test accounts
    to test your game in Game Center. Never use an existing Apple ID."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Follow these steps to create a Game Center sandbox account for testing:'
  prefs: []
  type: TYPE_NORMAL
- en: In **iTunes Connect**, use the dropdown menu in the upper left to select **Users
    and Roles**, as shown here:![Creating a test user](img/Image_B04532_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are on the **Users and Roles** page, click on **Sandbox Testers** in
    the navigation bar at the top of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As directed on the **Sandbox Testers** page, click the **+** icon to add a new
    user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the test user's information to your liking. Here is how I filled out
    my test user's information:![Creating a test user](img/Image_B04532_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button to create the new user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure to keep your live Apple ID and your sandbox account separate. The
    sandbox account will become invalid if you use it to log in to a live Game Center
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Great! That is all we need to begin implementing Game Center into our game.
    The next step is to integrate Game Center with our game code. We will start by
    authenticating the player's Game Center account when they open our app.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating the player's Game Center account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As soon as our app starts, we will check if the player is already logged in
    to their Game Center account. If not, we will give them a chance to log in. Later,
    when we want to submit high scores or achievements, we can use the authentication
    information we gathered when the app launched, instead of interrupting their gaming
    session to collect their Game Center information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to authenticate the player''s Game Center account when the
    app starts:'
  prefs: []
  type: TYPE_NORMAL
- en: We will be working in the `GameViewController` class, so open `GameViewController.swift`
    in Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `import` statement at the top of the file so we can use the `GameKit`
    framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `GameViewController` class, add a new function called `authenticateLocalPlayer`
    with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the bottom of the `GameViewController` class `viewWillLayoutSubviews` function,
    add a call to the new `authenticateLocalPlayer` function you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run your project. You should see Game Center animate in, asking for your credentials,
    as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authenticating the player''s Game Center account](img/Image_B04532_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great! Remember to use your sandbox account. The first time you log in, Game
    Center will ask a few extra questions to set up your account. Once you finish
    with the Game Center form, you should return to the main menu, with a small banner
    animating in and out from the top of the screen, letting you know you are signed
    in. The banner looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authenticating the player''s Game Center account](img/Image_B04532_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you see this welcome back banner, you have successfully implemented the Game
    Center authentication code. Next, we will add a leaderboard button to the menu
    so the player can see their progress within our app.
  prefs: []
  type: TYPE_NORMAL
- en: Opening Game Center in our game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the user is authenticated, we will add a button to the `MenuScene` class
    so they can open the leaderboard and view achievements from within our game. Alternatively,
    players can always use the Game Center app in iOS to view their progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create a leaderboard button in the menu scene:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `MenuScene.swift` in Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `import` statement at the top of the file so we can use the `GameKit`
    framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the line that declares the `MenuScene` class so that our class adopts
    the `GKGameCenterControllerDelegate` protocol. This allows the Game Center screen
    to inform our scene when the player closes the Game Center:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need a function that will create the leaderboard button and add it to the
    scene. We will call this function once the Game Center authenticates the player.
    Add a new function to the `MenuScene` class named `createLeaderboardButton` as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will call our `createLeaderboardButton` function from the `didMoveToView`
    function if the player is already authenticated with Game Center. This creates
    the button for players who return to the main menu after playing a game. Add the
    following code to the bottom of the `didMoveToView` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will create the function that actually opens the Game Center. Add
    a new function named `showLeaderboard`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add another function to adhere to the `GKGameCenterControllerDelegate`
    protocol. This function is named `gameCenterViewDidFinish`, and the Game Center
    will invoke it when the player clicks the **Done** button in Game Center. Add
    the function to the `MenuScene` class, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To wrap up the `MenuScene` code, we need to check for taps on our leaderboard
    button in the `touchesBegan` function to invoke `showLeaderboard`. Update the
    `touchesBegan` function `if` block as shown in the following (new code in bold):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, open `GameViewController.swift` and locate the `authenticateLocalPlayer`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the block where the player authenticated successfully to call our new
    `createLeaderboardButton` function in the `MenuScene` class. This creates the
    leaderboard button for newly authenticated people as they start the app. The code
    is shown here (new code in bold):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Good work. Run the project and you should see a leaderboard button appear in
    the menu after Game Center authenticates, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Opening Game Center in our game](img/Image_B04532_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Terrific – if you tap on the **Leaderboard** text, Game Center will open within
    the game. Now your players will be able to view leaderboards and achievements
    directly from your game. Next, we will create a leaderboard and an achievement
    in iTunes Connect to populate Game Center.
  prefs: []
  type: TYPE_NORMAL
- en: Checkpoint 10-A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To download my project to this point, visit this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.thinkingswiftly.com/game-development-with-swift/chapter-10](http://www.thinkingswiftly.com/game-development-with-swift/chapter-10)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a leaderboard of high scores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will submit the player's scores to the Game Center servers every time they
    finish a game. The first step is to register a new leaderboard on iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new leaderboard in iTunes Connect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will create our leaderboard in iTunes Connect. We can then connect
    to this leaderboard from our code and send new scores. Follow these steps to create
    the leaderboard record in iTunes Connect:'
  prefs: []
  type: TYPE_NORMAL
- en: Log back in to iTunes Connect and navigate into the Game Center page for your
    app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate and click the button that says **Add Leaderboard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next page asks you what type of leaderboard you want to create. Choose **Single
    Leaderboard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the information for your leaderboard. You can reference my example
    here:![Creating a new leaderboard in iTunes Connect](img/Image_B04532_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s take a look at each field:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Reference Name** is an internal use name for leaderboard listings in iTunes
    Connect'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leaderboard ID** is a unique identifier we will reference from our code'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Score Format Type** describes the type of data you will be passing in (most
    commonly integer data for high scores)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Normal leaderboards use a **Score Submission Type** of **Best Score**, with
    a **Sort Order** of **High to Low**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Score Range** is an anti-cheating measure you can use to block obviously
    false scores from showing up on the leaderboard'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, click the **Add Language** button. You will choose a name and score formatting
    for your leaderboard on this screen. These fields are largely self-explanatory,
    but you can reference my example here:![Creating a new leaderboard in iTunes Connect](img/Image_B04532_10_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save** twice (once for the language dialogue and once on the leaderboard
    screen).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be back on the Game Center page with your new leaderboard listed
    in the leaderboards section. Next, we will push new scores into the leaderboard
    from our game code.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the leaderboard from the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is simple to send a new score to the leaderboard from the code. Follow these
    steps to send the number of coins collected to the leaderboard every time a game
    ends:'
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, open `GameScene.swift`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `import` statement at the top so we can use the `GameKit` framework
    in this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new function in the `GameScene` class named `updateLeaderboard`, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `GameScene` class `GameOver` function, call the new `updateLeaderboard`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the project and play through a game to send a test coin score to the leaderboard.
    Then, tap back to the menu scene and click the **Leaderboard** button to open
    Game Center within your game. You should see your first score appear in the leaderboard!
    It will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the leaderboard from the code](img/Image_B04532_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Great work – you have implemented your first Game Center leaderboard. Next,
    we will follow a similar series of steps to create an achievement for collecting
    500 coins in one game.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an achievement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Achievements add a second layer of fun to your game and create replay value.
    To demonstrate a Game Center achievement, we will add a reward for collecting
    500 coins without dying.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new achievement in iTunes Connect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like the leaderboard, we first need to create an iTunes Connect record
    for our achievement. Follow these steps to create the record:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into iTunes Connect and navigate to the Game Center page for your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Underneath the leaderboards list, locate and click the **Add Achievement** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the information for your achievement. Here are my values:![Creating
    a new achievement in iTunes Connect](img/Image_B04532_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s take a look at each field:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Reference Name** is the name iTunes Connect will use internally to refer
    to the achievement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Achievement ID** is the unique identifier we will use to reference this achievement
    in our code'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can assign a **Point Value** to each achievement so players can earn more
    achievement points as they collect new achievements
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hidden** and **Achievable More Than Once** are self-explanatory, but you
    can use the question mark buttons on the right for additional information from
    Apple'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the **Add Language** button. We will name the achievement and give it
    a description, as in the leaderboard process. Additionally, an image is required
    for achievements. The image dimensions can be 512x512 or 1024x1024\. You can find
    the one I used in our **Assets** bundle download, in the `Extras` folder, `gold-medal.png`.
    Here are my values:![Creating a new achievement in iTunes Connect](img/Image_B04532_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save** twice (once for the language dialogue and once on the achievement
    screen).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Terrific, you should be back on the main iTunes Connect Game Center page for
    your app with your new achievement listed in the **Achievements** section. Next,
    we will integrate this achievement into the game.
  prefs: []
  type: TYPE_NORMAL
- en: Updating achievements from the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Much like sending leaderboard updates, we can send achievement updates to Game
    Center from `GameScene`. Follow these steps to integrate our 500 coin achievement:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GameScene.swift` in Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you skipped over the leaderboard section, you will need to add a new `import`
    statement at the top of the file so we can use `GameKit`. If you have already
    implemented the leaderboard, you can skip this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new function to the `GameScene` class named `checkForAchievements`, as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the bottom of the `gameOver` function, invoke the new `checkForAchievements`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the project and, if you dare, complete a 500 coin fly through. When your
    game ends, you should see a banner proclaiming your new achievement conquest,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating achievements from the code](img/Image_B04532_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Great work! You have implemented Game Center leaderboards and achievements into
    your game.
  prefs: []
  type: TYPE_NORMAL
- en: Checkpoint 10-B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To download my project to this point, visit this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.thinkingswiftly.com/game-development-with-swift/chapter-10](http://www.thinkingswiftly.com/game-development-with-swift/chapter-10)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating with Game Center is a great feature for your players. In this chapter,
    we learned how to create an iTunes Connect record for our app, authenticate Game
    Center users in our code, create new leaderboards and achievements on iTunes Connect,
    and then integrate those leaderboards and achievements within our game. We have
    made a lot of progress!
  prefs: []
  type: TYPE_NORMAL
- en: We are officially finished working on the game itself. In the next chapter,
    we will prepare our app for publication, upload the code for Apple to review,
    and revisit what we have learned while creating our great game. Everything is
    coming together and we are ready to take the final step to publish our game. Congratulations!
  prefs: []
  type: TYPE_NORMAL
