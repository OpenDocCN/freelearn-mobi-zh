["```java\nvar win = Titanium.UI.currentWindow;\n//declare the http client object\nvar xhr = Titanium.Network.createHTTPClient();\n//this method will process the remote data\nxhr.onload = function() {\nTi.API.info(this.responseText);\n};\n//this method will fire if there's an error in accessing the //remote data\nxhr.onerror = function() {\n//log the error to our Titanium Studio console\nTi.API.error(this.status + ' - ' + this.statusText);\n};\n//open up the recipes xml feed\nxhr.open('GET', 'http://www.cuisine.com.au/feed/all-recipes');\n//finally, execute the call to the remote feed\nxhr.send();\n\n```", "```java\nvar data = []; //empty data array\n\n```", "```java\n//declare the http client object\nvar xhr = Titanium.Network.createHTTPClient();\n//create the table view\nvar tblRecipes = Titanium.UI.createTableView({\nheight: 366,\nwidth: 320,\ntop: 0,\nleft: 0\n});\nwin.add(tblRecipes);\n//this method will process the remote data\nxhr.onload = function() {\nvar xml = this.responseXML;\n//get the item nodelist from our response xml object\nvar items = xml.documentElement.getElementsByTagName(\"item\");\n//loop each item in the xml\nfor (var i = 0; i < items.length; i++) {\n//create a table row\nvar row = Titanium.UI.createTableViewRow({\ntitle:\nitems.item(i).getElementsByTagName(\"title\").item(0).text\n});\n//add the table row to our data[] object\ndata.push(row);\n} //end for loop\n//finally, set the data property of the tableView to our //data[] object\ntblRecipes.data = data;\n};\n\n```", "```java\nvar data = []; //empty data array\n//declare the http client object\nvar xhr = Titanium.Network.createHTTPClient();\nvar tblRecipes = Titanium.UI.createTableView({\nheight: 366,\nwidth: 320,\ntop: 0,\nleft: 0,\nrowHeight: 70\n});\nwin.add(tblRecipes);\n//this method will process the remote data\nxhr.onload = function() {\nvar xml = this.responseXML;\n//get the item nodelist from our response xml object\nvar items = xml.documentElement.getElementsByTagName(\"item\");\n//loop each item in the xml\nfor (var i = 0; i < items.length; i++) {\n//create a table row\nvar row = Titanium.UI.createTableViewRow({\nhasChild: true,\nclassName: 'recipe-row'\n});\n//title label\nvar titleLabel = Titanium.UI.createLabel({\ntext:\nitems.item(i).getElementsByTagName(\"title\").item(0).text,\nfont: {fontSize: 14, fontWeight: 'bold'},\nleft: 70,\ntop: 5,\nheight: 20,\nwidth: 210\n});\nrow.add(titleLabel);\n//description label\nvar descriptionLabel = Titanium.UI.createLabel({\ntext:\nitems.item(i).getElementsByTagName(\"description\").item(0).text,\nfont: {fontSize: 10, fontWeight: 'normal'},\nleft: 70,\ntop: 25,\nheight: 40,\nwidth: 200\n});\nif(descriptionLabel.text == '') {\ndescriptionLabel.text = 'No description is available.';\n}\nrow.add(descriptionLabel);\n//add our little icon to the left of the row\nvar iconImage = Titanium.UI.createImageView({\nimage: 'images/foodicon.jpg',\nwidth: 50,\nheight: 50,\nleft: 10,\ntop: 10\n});\nrow.add(iconImage);\n//add the table row to our data[] object\ndata.push(row);\n}\n//finally, set the data property of the tableView to our\n//data[] object\ntblRecipes.data = data;\n};\n\n```", "```java\n//define our search bar which will attach\n//to our table view\nvar searchBar = Titanium.UI.createSearchBar({\nshowCancel:true,\nheight:43,\ntop:0\n});\n//print out the searchbar value whenever it changes\nsearchBar.addEventListener('change', function(e){\n//search the tableview as user types\nTi.API.info('user searching for: ' + e.value);\n});\n//when the return key is hit, remove focus from\n//our searchBar\nsearchBar.addEventListener('return', function(e){\nsearchBar.blur();\n});\n//when the cancel button is tapped, remove focus\n//from our searchBar\nsearchBar.addEventListener('cancel', function(e){\nsearchBar.blur();\n});\n\n```", "```java\n//define our table view\nvar tblRecipes = Titanium.UI.createTableView({\nheight: 366,\nwidth: 320,\ntop: 0,\nleft: 0,\nrowHeight: 70,\nsearch: searchBar,\nfilterAttribute:'filter' //here is the search filter which\n//appears in TableViewRow\n});\nwin.add(tblRecipes);\n\n```", "```java\n//this method will process the remote data\nxhr.onload = function() {\nvar xml = this.responseXML;\n//get the item nodelist from our response xml object\nvar items = xml.documentElement.getElementsByTagName(\"item\");\n//loop each item in the xml\nfor (var i = 0; i < items.length; i++) {\n//create a table row\nvar row = Titanium.UI.createTableViewRow({\nhasChild: true,\nclassName: 'recipe-row',\nfilter: items.item(i).getElementsByTagName(\"title\").item(0).text //this is the data we want to search on (title)\n});\n\n```", "```java\n//this method will process the remote data\nxhr.onload = function() {\n//create a json object using the JSON.PARSE function\nvar jsonObject = JSON.parse(this.responseText);\n//print out how many items we have to the console\nTi.API.info(jsonObject.query.results.item.length);\n//loop each item in the json object\nfor(var i = 0; i < jsonObject.query.results.item.length; i++) {\n//create a table row\nvar row = Titanium.UI.createTableViewRow({\nhasChild: true,\nclassName: 'recipe-row',\nbackgroundColor: '#fff',\nfilter: jsonObject.query.results.item[i].title\n//this is the data we want to search on (title)\n});\n//title label\nvar titleLabel = Titanium.UI.createLabel({\ntext: jsonObject.query.results.item[i].title,\nfont: {fontSize: 14, fontWeight: 'bold'},\nleft: 70,\ntop: 5,\nheight: 20,\nwidth: 210,\ncolor: '#000'\n});\nrow.add(titleLabel);\n//description label\nvar descriptionLabel = Titanium.UI.createLabel({\ntext: jsonObject.query.results.item[i].description,\nfont: {fontSize: 10, fontWeight: 'normal'},\nleft: 70,\ntop: 25,\nheight: 40,\nwidth: 200,\ncolor: '#000'\n});\nif(descriptionLabel.text == '') {\ndescriptionLabel.text = 'No description is\navailable.';\n}\nrow.add(descriptionLabel);\n//add our little icon to the left of the row\nvar iconImage = Titanium.UI.createImageView({\nimage: 'images/foodicon.jpg',\nwidth: 50,\nheight: 50,\nleft: 10,\ntop: 10\n});\nrow.add(iconImage);\n//add the table row to our data[] object\ndata.push(row);\n}\n//finally, set the data property of the tableView\n//to our data[] object\ntblRecipes.data = data;\n};\n//this method will fire if there's an error in accessing\n//the remote data\nxhr.onerror = function() {\n//log the error to our Titanium Studio console\nTi.API.error(this.status + ' - ' + this.statusText);\n};\n//open up the recipes xml feed\nxhr.open('GET', 'http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20feed%20where%20url%3D%22http%3A%2F%2Fwww.cuisine.com.au%2Ffeed%2Fall-recipes%22&format=json&diagnostics=false');\n//finally, execute the call to the remote feed\nxhr.send();\n\n```", "```java\n//create the database object\nvar db = Titanium.Database.open('mydb');\ndb.execute('CREATE TABLE IF NOT EXISTS favorites (ID INTEGER PRIMARY KEY AUTOINCREMENT, TITLE TEXT, LINK TEXT, DESCRIPTION TEXT)');\n\n```", "```java\nTi.include('database.js');\n\n```", "```java\nVar db = Titanium.Database.install('data.db', 'packtData');\n\n```", "```java\nfunction insertFavorite(title, description, link) {\nvar sql = \"INSERT INTO favorites (title, description, link) VALUES (\";\nsql = sql + \"'\" + title.replace(\"'\", \"''\") + \"', \";\nsql = sql + \"'\" + description.replace(\"'\", \"''\") + \"', \";\nsql = sql + \"'\" + link.replace(\"'\", \"''\") + \"')\";\ndb.execute(sql);\nreturn db.lastInsertRowId;\n}\nfunction deleteFavorite(id) {\nvar sql = \"DELETE FROM favorites WHERE id = \" + id;\ndb.execute(sql);\n}\n\n```", "```java\n//create a new window and pass through data from the\n//tapped row\ntblRecipes.addEventListener('click', function(e){\nvar selectedRow = e.rowData; //row index clicked\nvar detailWindow = Titanium.UI.createWindow({\ntitle: selectedRow._title,\n_description: selectedRow._description,\n_link: selectedRow._link,\nbackgroundColor: '#fff',\nid: 0\n});\n//add the favorite button\nvar favButton = Titanium.UI.createButton({\ntitle: 'Add Favorite',\nleft: 10,\ntop: 10,\nwidth: 140,\nheight: 30,\nadded: 0\n});\nfavButton.addEventListener('click',function(e){\nif (favButton.added == 0) {\nvar newId = insertFavorite(detailWindow.title, detailWindow._description, detailWindow._link);\nTi.API.info('Newly created favorite id = ' + newId);\ndetailWindow.id = newId;\nalert('This recipe has been added as a favorite!');\nfavButton.added = 1;\nfavButton.title = 'Remove Favorite';\n}\nelse {\ndeleteFavorite(detailWindow.id);\nTi.API.info('Deleted ' + affectedRows + ' favorite records. (id ' + detailWindow.id + ')');\ndetailWindow.id = 0;\nalert('This recipe has been removed from favorites!');\nfavButton.added = 0;\nfavButton.title = 'Add Favorite';\n}\n});\ndetailWindow.add(favButton);\n//let's also add a button to open a link in safari\nvar linkButton = Titanium.UI.createButton({\ntitle: 'View In Safari',\nright: 10,\ntop: 10,\nwidth: 140,\nheight: 30,\nadded: 0\n});\n//this event listener will open the link in safari\nlinkButton.addEventListener('click',function(e){\nTi.Platform.openURL(detailWindow._link);\n});\ndetailWindow.add(linkButton);\n//finally, add the full description so we can read the\n//whole recipe\nvar lblDescription = Titanium.UI.createLabel({\ntext: detailWindow._description,\nleft: 10,\ntop: 50,\nwidth: 300,\nheight: 'auto',\ncolor: '#000'\n});\ndetailWindow.add(lblDescription);\n//open the detail window\nTitanium.UI.currentTab.open(detailWindow);\n});\n\n```", "```java\nfunction getFavorites() {\nvar sql = \"SELECT * FROM favorites ORDER BY title ASC\";\nvar results = [];\nvar resultSet = db.execute(sql);\nwhile (resultSet.isValidRow()) {\nresults.push({\nid: resultSet.fieldByName('id'),\ntitle: resultSet.fieldByName('title'),\ndescription: resultSet.fieldByName('description'),\nlink: resultSet.fieldByName('link')\n});\n//iterates to the next record\nresultSet.next();\n}\n//you must close the resultset\nresultSet.close();\n//finally, return our array of records!\nreturn results;\n}\n\n```", "```java\nTi.include('database.js');\nvar win = Titanium.UI.currentWindow;\nvar data = []; //empty data array\nvar tblFavorites = Titanium.UI.createTableView({\nheight: 366,\nwidth: 320,\ntop: 0,\nleft: 0\n});\nwin.add(tblFavorites);\nfunction loadFavorites(){\ndata = []; //set our data object to empty\ndata = getFavorites();\ntblFavorites.data = data;\n}\n//the focus event listener will ensure that the list\n//is refreshed whenever the tab is changed\nwin.addEventListener('focus', loadFavorites);\n\n```", "```java\n//this variable defines whether the user is currently pulling\n//the refresh mechanism or not\nvar pulling = false;\n//defines whether we're currently fetching data or not\nvar reloading = false;\n//let's create our 'pull to refresh' view\nvar tableHeader = Ti.UI.createView({\nbackgroundImage: 'images/header.png',\nwidth:320,\nheight:81\n});\nvar arrowImage = Ti.UI.createView({\nbackgroundImage:\"images/arrow-down.png\",\nwidth: 40,\nheight: 40,\nbottom: 20,\nleft:20\n});\nvar statusLabel = Ti.UI.createLabel({\ntext:\"Pull to refresh...\",\nleft:85,\nwidth:200,\nbottom:28,\nheight:\"auto\",\ncolor:\"#000\",\ntextAlign:\"center\",\nfont:{fontSize:20,fontWeight:\"bold\"},\nshadowColor:\"#999\",\nshadowOffset:{x:0,y:1}\n});\nvar actInd = Titanium.UI.createActivityIndicator({\nleft:20,\nbottom:20,\nwidth: 40,\nheight: 40\n});\ntableHeader.add(actInd);\ntableHeader.add(arrowImage);\ntableHeader.add(statusLabel);\n//define our table view\nvar tblRecipes = Titanium.UI.createTableView({\nheight: 366,\nwidth: 320,\ntop: 0,\nleft: 0,\nrowHeight: 70,\nsearch: searchBar,\nfilterAttribute:'filter' //here is the search filter which\n//appears in TableViewRow\n});\n//add the header pull view\ntblRecipes.headerPullView = tableHeader;\ntblRecipes.addEventListener('scroll',function(e)\n{\nvar offset = e.contentOffset.y;\nif (offset <= -80.0 && !pulling)\n{\npulling = true;\narrowImage.backgroundImage = 'images/arrow-up.png';\nstatusLabel.text = \"Release to refresh...\";\n}\nelse if (pulling && offset > -80.0 && offset < 0)\n{\npulling = false;\narrowImage.backgroundImage = 'images/arrow-down.png';\nstatusLabel.text = \"Pull to refresh...\";\n}\n});\ntblRecipes.addEventListener('scrollEnd',function(e)\n{\nif (pulling && !reloading && e.contentOffset.y <= -80.0)\n{\nreloading = true;\npulling = false;\narrowImage.hide();\nactInd.show();\nstatusLabel.text = \"Reloading recipes...\";\ntblRecipes.setContentInsets({top:80},{animated:true});\n//null out the existing recipe data\ntblRecipes.data = null;\ndata = [];\n//open up the recipes xml feed\nxhr.open('GET', 'http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20feed%20where%20url%3D%22http%3A%2F%2Fwww.cuisine.com.au%2Ffeed%2Fall-recipes%22&format=json&diagnostics=false');\n//and fetch it again\nxhr.send();\n}\n});\n\n```", "```java\n//check to see if we are refreshing the data via our\n//pull and release mechanism\nif(reloading == true){\n//when done, reset the header to its original style\ntblRecipes.setContentInsets({top:0},{animated:true});\nreloading = false;\nstatusLabel.text = \"Pull to refresh...\";\nactInd.hide();\narrowImage.backgroundImage = 'images/arrow-down.png';\narrowImage.show();\n}\n\n```"]