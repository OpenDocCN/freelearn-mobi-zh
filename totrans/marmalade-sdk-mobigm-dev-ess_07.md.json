["```swift\ns3eAudioPlay(\"music.mp3\", aRepeatCount);\n```", "```swift\ns3eAudioPlayFromBuffer(apBuffer, aBufferLength, aRepeatCount);\n```", "```swift\ns3eAudioSetInt(S3E_AUDIO_VOLUME, S3E_AUDIO_MAX_VOLUME / 2);\n```", "```swift\nint32 lVolume = s3eAudioGetInt(S3E_AUDIO_VOLUME);\n```", "```swift\nif (s3eAudioIsPlaying() == S3E_FALSE)\n{\n  // Audio is not playing!\n}\n```", "```swift\nint32 AudioFinished(s3eAudioCallbackData* apAudioData,\nvoid* apUserData)\n{\n  // apAudioData->m_ChannelID identifies the audio channel that\n  // has completed.\n  // s3eCallback functions must return a value, but in case of\n  // audio callback the value returned does not matter.\n  return 0;\n}\n\n// Use the following line to set up the audio callback\ns3eAudioRegister(S3E_AUDIO_STOP, (s3eCallback) AudioFinished, NULL);\n\n// And this line to remove the callback function\ns3eAudioUnRegister(S3E_AUDIO_STOP, (s3eCallback) AudioFinished);\n```", "```swift\nint32 lChannel = s3eSoundGetFreeChannel();\n```", "```swift\ns3eSoundChannelSetInt(lChannel, S3E_CHANNEL_RATE, lFrequency);\n```", "```swift\ns3eSoundChannelSetInt(lChannel, S3E_CHANNEL_VOLUME, lVolume);\n```", "```swift\ns3eSoundChannelPlay(lChannel, lSampleData, lNumSamples, lRepeatCount,\nlLoopIndex);\n```", "```swift\nif (s3eSoundChannelGetInt(lChannel, S3E_CHANNEL_STATUS) == 1)\n{\n  // Sound channel is currently playing\n}\n\nif (s3eSoundChannelGetInt(lChannel, S3E_CHANNEL_PAUSED) == 1)\n{\n  // Sound channel is currently active, but paused\n}\n```", "```swift\n// To read a global sound setting\nint32 lValue = s3eSoundGetInt(lProperty);\n\n// To change a global sound setting\ns3eSoundSetInt(lProperty, lValue);\n```", "```swift\n// To set up a sound channel callback\ns3eSoundChannelRegister(lChannel, lCallbackType, (s3eCallback)\n              CallbackFunction, lpUserData);\n\n// To disable a sound channel callback\ns3eSoundChannelUnRegister(lChannel, lCallbackType);\n```", "```swift\n// Simple structure used to indicate the next sound sample to play\ntypedef struct\n{\n  void* mSampleData;\n  uint32 mSampleCount;\n} NewSoundData;\n\n// Sample callback function that will start a new sound effect\n// playing if one has been specified when registering the\n// callback function\nint32 SoundEndCallback(s3eSoundEndSampleInfo* apInfo,\n   NewSoundData* apSound)\n{\n  if (apSound)\n  {\n     apInfo->m_NewData = apSound->mSampleData;\n     apInfo->m_NumSamples = apSound->mSampleCount;\n     apInfo->m_RepsRemaining = 1;\n  }\n  return apInfo->m_RepsRemaining;\n}\n\n// Register the callback function to play a new sound when\n// current sound completes\ns3eSoundChannelRegister(lChannel, S3E_CHANNEL_END_SAMPLE,\n   (s3eCallback) SoundEndCallback,\n   &lNewSoundDataInstance);\n```", "```swift\nIwGetResManager()->AddHandler(new CIwResHandlerWAV);\n```", "```swift\nIwGetSoundManager()->Update();\n```", "```swift\nCIwSoundSpec\n{\n  name gun1\n  data gun_shot1\n\n  // Play at the default pitch for the sample\n  pitch 1.0\n\n  // Play at half volume\n  vol 0.5\n\n  // Do we want this sound to loop?\n  looping false\n}\n```", "```swift\nCIwSoundSpec\n{\n  name gun2\n  data gun_shot2\n\n  // Choose a random pitch when playing this sound\n  pitchMin 0.9\n  pitchMax 1.1\n\n  // Choose a random volume when playing this sound\n  volMin 0.9\n  volMax 1.1\n\n  // Do we want this sound to loop?\n  looping false\n}\n```", "```swift\nCIwSoundGroup\n{\n   name guns\n\n   // Reduce volume of all gun sounds by a half\n   vol 0.5\n\n   // Include the gun1 sound in this group\n   addSpec gun1\n}\n```", "```swift\nIwGetResManager()->LoadGroup(\"sounds.group\");\nCIwSoundSpec* lpGunSpec = static_cast<CIwSoundSpec*>(\n  IwGetResManager()->GetResNamed(\"gun1\", \"CIwSoundSpec\"));\nCIwSoundGroup* lpGunsGroup = static_cast<CIwSoundGroup*>(\n  IwGetResManager()->GetResNamed(\"guns\", \"CIwSoundGroup\"));\n```", "```swift\ns3eVideoPlay(lFileName, lRepeatCount, lX, lY, lWidth, lHeight);\n```", "```swift\nint32 VideoFinished(void* apSystemData, void* apUserData)\n{\n  // apSystemData will always be NULL as there is no data associated\n  // with this callback.\n  // Return value is unimportant.\n  return 0;\n}\n\n// To set up the callback function\ns3eVideoRegister(S3E_VIDEO_STOP, (s3eCallback) VideoFinished, NULL);\n\n// And to cancel it again...\ns3eVideoUnRegister(S3E_VIDEO_STOP, (s3eCallback) VideoFinished);\n```", "```swift\nint32 lValue = s3eVideoGetInt(lProperty);\ns3eVideoSetInt(lProperty, lValue);\n```"]