- en: Chapter 4. Wi-Fi Smart Power Plug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build an open source version of a very commonly connected
    object—a Wi-Fi power plug. Indeed, these kind of plugs can be bought from many
    stores, and usually come with their own iOS or Android app.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will build such a power plug from scratch, based on Arduino.
    We will connect a relay module, a current sensor, and a Wi-Fi module to an Arduino
    board to make our own Wi-Fi power plug. The power plug will be able to switch
    any device on and off, and will continuously measure the power consumption of
    the device.
  prefs: []
  type: TYPE_NORMAL
- en: We will build an Android app to switch on and off the power plug remotely via
    Wi-Fi. We will also be able to get the power output on request and display it
    on a screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be the major takeaways from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting a relay module, a current sensor, and a Wi-Fi module to Arduino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the project by sending commands via Wi-Fi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Android application to control the project from a mobile phone or
    tablet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's see the required hardware components for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We need an Arduino Uno board. To control the lamp remotely (the lamp was used
    as an example in the chapter, but of course any 110V or 230V device can be used
    here), you will also need a relay module. We used a 5V relay module from Polulu,
    but you can use any 5V relay module that you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'To measure the instant power consumption of the device connected to the plug,
    you will also need a current sensor. For this part, we will choose a breakout
    board based on the ACS712 chip. The following is a picture of the board I used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](img/0389OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will also need a board that includes the CC3000 Wi-Fi chip, which we will
    use to receive commands via the Android device. For this project, we will choose
    a CC3000 breakout board from Adafruit. Of course, you can also use a shield from
    the same brand for this project; the code will be exactly the same.
  prefs: []
  type: TYPE_NORMAL
- en: To make the different connections, you will also need a breadboard and some
    jumper wires.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of the components that were used in this project:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Uno board ([https://www.adafruit.com/products/50](https://www.adafruit.com/products/50))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 5V relay module ([http://www.pololu.com/product/2480](http://www.pololu.com/product/2480))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current sensor ([http://imall.iteadstudio.com/im120710011.html](http://imall.iteadstudio.com/im120710011.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Adafruit CC3000 Wi-Fi breakout board ([https://www.adafruit.com/product/1469](https://www.adafruit.com/product/1469))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The breadboard ([https://www.adafruit.com/products/64](https://www.adafruit.com/products/64))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires ([https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To connect a lamp or any other device to the project, you will need a pair
    of power cables: one male power plug and one female power plug. You will also
    need some screw terminals to make the required connections. The following is an
    image of the cables I used for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](img/0389OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warning**:'
  prefs: []
  type: TYPE_NORMAL
- en: It can be dangerous to use high-voltage devices with such project. So, make
    sure to carefully follow all the instructions in the next section. Of course,
    you can make the entire project without connecting the project to the mains electricity;
    the principles are exactly the same.
  prefs: []
  type: TYPE_NORMAL
- en: On the software side, you will need the latest version of the Arduino IDE. You
    will need the library for the CC3000 chip found at [https://github.com/adafruit/Adafruit_CC3000_Library](https://github.com/adafruit/Adafruit_CC3000_Library).
  prefs: []
  type: TYPE_NORMAL
- en: You will also need the aREST library found at [https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST).
  prefs: []
  type: TYPE_NORMAL
- en: To install an Arduino library, simply put the `library` folder into your `/libraries`
    folder inside your main `Ard` `uino` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the hardware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's now time to assemble the hardware part of the project. Let's start by connecting
    the Adafruit CC3000 breakout board. First, connect the Arduino Uno +5V pin to
    the red rail on the breadboard, and the ground pin to the blue rail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, connect the IRQ pin of the CC3000 board to pin number 3 of the Arduino
    board, **VBAT** to pin **5**, and **CS** to pin **10**. After that, you will need
    to connect the **SPI** pins to the Arduino board: **MOSI**, **MISO**, and **CLK**
    go to pins **11**, **12**, and **13**, respectively. Finally, take care of the
    power supply: **VIN** goes to the Arduino 5V (red power rail) and **GND** to **GND**
    (blue power rail).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a schematic of the project, without the relay module connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now connect the relay module. First, connect the power supply: the
    **VCC** pin of the relay goes to the red power rail, and the **GND** pin goes
    to the blue power rail. Then, connect the signal pin of the relay (usually denoted
    as SIG) to Arduino pin number **8** followed by the current sensor. Like the relay,
    connect the power first: the **VCC** pin of the relay goes to the red power rail,
    and the **GND** pin goes to the blue power rail. Then, connect the signal pin
    of the sensor (usually denoted as SIG or OUT) to Arduino analog pin **A0**.'
  prefs: []
  type: TYPE_NORMAL
- en: We will now take care of connecting the project to the device you want to control,
    and to the mains electricity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be very careful at this step as it involves high voltages (110V or 230V), which
    can be lethal. Also, make sure that you always connect the project to the mains
    electricity when you check everything else. When all other connections are done,
    make sure that you are not touching any bare cables. It is also recommended that
    you put the complete project in a plastic enclosure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following schematic describes how the different cables are connected to
    the relay and to the current sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that as we are using AC voltages, the polarity of the cables doesn't matter
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an image illustrating the different connections between the
    cables, the relay, and the current sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, the following is an image of the complete project, with the male cable
    connected to the mains electricity, and a lamp connected to the female plug:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing the relay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now test the project, by testing the relay and switching it on and off.
    This will ensure that the relay is correctly connected to your Arduino board,
    and that the power cable connections are correctly done (otherwise, no electricity
    will flow through the connected device). Again, check every single connection
    before plugging the project into the mains electricity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete Arduino sketch for this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now consider the details of this sketch. It starts by declaring which
    pin the relay is connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `setup()` function of the sketch, we will declare this pin as
    an output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `loop()` function of the sketch, we will switch the pin from
    the on state to the off state every 5 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that you can find the complete code for this part in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that everything is connected correctly, that you have a device (like
    a lamp) connected to our project and that the project is plugged into the mains
    electricity. Again, check that every connection is correctly made before plugging
    the project into the mains electricity. You can now upload the sketch to your
    Arduino board. You should hear the relay switching on and off, and see the lamp
    switching on and off as well.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Arduino sketch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are sure that the connections of the relay, the current sensor,
    and the power cables are correct, we will write an Arduino sketch to accept connections
    coming via Wi-Fi from the Android device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete sketch for this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s look in more detail at the Arduino sketch. It starts by importing
    the required libraries for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have to define which pin the relay module is connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have to declare some variables that will help us to measure and calculate
    the power consumption of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you should also change the value of the effective voltage so
    that it matches the voltage of your country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we have to define the pins on which the CC3000 Wi-Fi chip is connected
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create an instance of the CC3000 Wi-Fi chip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to create an instance of the aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now have to modify the code to put your Wi-Fi network credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also define the port we want to listen to with the Wi-Fi chip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we will declare a server listening on that port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we declare a variable that will contain the power consumption of the
    device, which will be accessible from the outside via HTTP requests (within the
    same local Wi-Fi network):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `setup()` function of the sketch, we will start the Serial connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also expose the power consumption variable to the aREST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also declare the relay pin as an output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to first take a measurement from the current sensor to get the
    value that the current sensor returns when no current is flowing through the connected
    device. This is done by a function that we won''t detail here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also assign an ID and name to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will call a function to display the details of the Wi-Fi connection,
    such as the CC3000 chip IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To end the `setup()` function, we will start our Wi-Fi server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `loop()` function of the sketch, we will read data from the sensor,
    which is connected on the analog pin A0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we get this value, we can calculate the current from it as well as the
    device power consumption:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, the manufacturer of the current sensor gives the first formula.
    Then, we get the effective current by dividing the amplitude current by the square
    root of 2, which is approximately 1.414\. Finally, we get the effective power
    by multiplying the effective current with the effective voltage (and dividing
    it by 1,000 to have a result in Watts). Once the measurements are done, we process
    the incoming requests using the aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that you can find the complete code for this part inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget to change the sketch to include your own Wi-Fi network name and
    Wi-Fi network password. You can now upload the code to your Arduino board, and
    open the Serial monitor. The following result is what you should see after a while
    (of course, the IP address of your board and the other parameters will probably
    be different):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Write down the IP address that appeared in your Serial monitor—you will need
    it now, and while writing the Android application later. Now, we will test the
    Wi-Fi connection by sending some command to the project. You can go to your favorite
    web browser and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you need to change the IP address with your own board''s IP address
    as it was displayed in the Serial monitor. You should see that the relay instantly
    switches on, and you should be greeted by the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now switch it off again with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now going to try to read the power consumption of the device. You can
    do so by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be greeted by the following answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: If you can see this, then it means that the sensor was correctly calibrated
    (as the power is 0) and that the power variable was correctly exposed to the aREST
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframing our Android application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The rigorous approach of wireframing our application before starting to write
    any code will help us provide a better user experience. The following is the paper
    prototype that we would like to follow when it comes to implementing our final
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing our Android application](img/0389OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will go ahead and create a new project entitled `Arduino Wifi` in Android
    Studio with a minimum SDK of 15 and maximum SDK of 19 (which at the time of writing
    is the most stable version of the Android SDK). This will enable us to cater to
    more than 80% of Android devices in the market. A project with a blank activity
    should be enough to start off this project.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've got the project set up, we will go ahead and direct the Android
    layout files, which can be found by navigating to `app` > `src` > `res` > `layout`
    > `activity_main_screen.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will apply a relative layout first, and within this layout, drag-and-drop
    four buttons together with a TextView, which will look roughly as follows (at
    this point, there is no need to focus on the aesthetic quality of the layout):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing our Android application](img/0389OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will also identify each user interface item as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Open the Gate** button: `openGateButton`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Switch On** button: `switchOnButton`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Switch Off** button: `switchOffButton`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Check Power** button: `checkPowerButton`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Power Output** text view: `powerOutput`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing our layouts into the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will first start off by declaring a `String TAG` object, which refers to
    `MainActivity` and which will be used for logging purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will follow this by declaring all our view variables and assigning
    them to the `layout` elements within the `onCreate` method, which means that the
    `onCreate` method will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, we refer to a number of ASync tasks, which
    we will refer to together with a JSON parser that we will be using to parse the
    data from the Arduino and adapt it to the power output text view.
  prefs: []
  type: TYPE_NORMAL
- en: ASync tasks will help us run the application tasks separately from the main
    user interface thread and hence significantly improve the responsiveness of the
    user interface and thus enhance the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following code, you will need to replace the `yourip` part with your
    own IP address, which you have found in the Arduino IDE Serial monitor. You will
    be able to declare the IP address within the `Main Activity` declaration as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then declare the following `AsyncTasks` object to enable the different
    actions we would like to achieve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add another `helper` method at the bottom to make sure that Wi-Fi network
    connectivity is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Before going ahead, we will need to add the following permissions to our Android
    `Manifest` file, which is available at `app` > `src` > `main` > `AndroidManifest.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following permissions will allow us to access the Wi-Fi network capabilities
    of the Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: After this, you can go ahead and compile the app. It's also important to note
    that Wi-Fi has a latency of about 300 ms and, depending on your Wi-Fi network,
    the value might take a significant amount of time to update the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: If you are struggling with following along, you can also refer to the final
    project by checking out the GitHub repository at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: Polishing the user interface and experience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have managed to finalize our code and assure ourselves that the user
    interface is being updated with the power value and that we can switch on and
    off the lamp, we can proceed to improve our user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will improve the user interface with the following main actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new app icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enlarging the power output text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aligning and styling the buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the application name in the action bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new app icon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will start off by downloading the image asset. It's available within
    the GitHub repository and as a public download at [http://bit.ly/iclauncherchapter4](http://bit.ly/iclauncherchapter4).
  prefs: []
  type: TYPE_NORMAL
- en: 'You should navigate using the project tree, followed by a right-click on the
    `app` folder, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a new app icon](img/0389OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you right-click on `app`, create a new image asset by navigating to **New**
    > **Image Asset**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a new app icon](img/0389OS_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then be shown an **Asset Studio** pop-up window, which will allow
    you to choose your very own image file, as shown in the following screenshot.
    For optimization purposes, we recommend that you go for a `.png` file with a resolution
    of 144 pixels by 144 pixels. Android Studio automatically does all the resizing
    and resource creation to adapt your graphic to different screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a new app icon](img/0389OS_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you choose the `ic_launcher` image file that we have provided you with,
    you will be shown a screen with the icon in different sizes. Click on **Next**,
    where you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a new app icon](img/0389OS_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This screen warns you that the previous files will be overwritten and shows
    you the image launcher file in a number of different resolutions once again. Click
    on **Finish**, compile the app, launch it on your physical device, and you should
    see something pleasant in your app tray and in the app''s action bar, which is
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a new app icon](img/0389OS_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Centering and enlarging the data output text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to edit the layout for the main text output where the sensor data will
    be shown, we will need to open the project tree and navigate towards the layout
    file, which is available at `app` > `src` > `main` > `res` > `layout` > `activity_main_screen.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Once in this view, we recommend that you modify the text using the text view.
    This will allow you finer control and get you used to the different conventions
    used when editing Android layout files programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'When opening the `activity_main_screen.xml` file, we will see the different
    XML codes for the buttons and Text Views. At this point, look out for the code
    that takes care of the `Power Data Output` TextView and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The whole block of code responsible for the `Sensor Data Output` TextView will
    now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In this block of code, we temporarily used the placeholder text `100W` so that
    we can approximate how it will look with the Android layout designer. With this
    modification, the sensor data is now big enough to show to the user and will be
    part of the enhancement within the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Aligning and styling the buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our final steps, we will modify our buttons and add some color to the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will be two steps when creating the new buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `drawable` folder with a new XML `drawable` file known as `button.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will then connect the `drawable` resource file to the main Android layout
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `drawable` folder by right-clicking on the `res` folder, which is
    available at `app` > `src` > `main` > `res`.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the `drawable` folder within the `res` folder, we need to once
    again right-click on the new `drawable` folder and navigate to **New** > **Drawable
    Resource File**.
  prefs: []
  type: TYPE_NORMAL
- en: Name the file `button` and type down `shape` as the root element followed by
    clicking on **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `button.xml` file, we will add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we go towards the `activity_main_screen.xml` file and refer to this drawable
    by including the following line of code within the button modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add some flavor by adding the following line of code to the `Button`
    and `TextView` modules within the `activity_main_screen.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `#4A90E2` term refers to the hex code of the main color used in the app
    icon so that we maintain some consistency with the main user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the application name within the action bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We all would like to customize the name of the app to one of our own liking
    and that will be the easiest thing within our project! We will just go over to
    the `strings.xml` file where we have all our constant text values within the project.
    This is available at `app` > `src` > `res` > `values` > `string.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can change the text of `arduinoWifi` to any name of your liking.
    In this case, we will stick to `WiFi Lamp Switch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final project should now look as follows (device used in this case is a
    Nexus 4):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the application name within the action bar](img/0389OS_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's important to note that screen layouts might vary depending on different
    devices. In this case, you might have to adapt your Android layout file to your
    specific physical device.
  prefs: []
  type: TYPE_NORMAL
- en: How to go further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The options are endless when it comes to further modifying the Android app,
    and there are a number of implementations that can improve the app, such as real-time
    monitoring, where the power data output will refresh automatically. In addition,
    this data can provide a use case for data that is being generated to be stored
    in the cloud, which can be analyzed, allowing for the creation of graphical interpretations
    of this data. Such graphical interpretations can be correlated to the time of
    day and can help the user understand when the greatest power consumption occurs.
  prefs: []
  type: TYPE_NORMAL
- en: From a coding point of view, we can refactor our code, which implies that we
    simplify and reuse our code effectively. In fact, refactoring could definitely
    be achieved with the JSON parser, which could be refactored into its own class
    and which we opted on leaving out in the current setup so as to facilitate the
    learning process.
  prefs: []
  type: TYPE_NORMAL
- en: With regards to user experience, a new `EditText` field could be introduced
    together with a **Submit** button so as to allow the user to manually change the
    IP address, which will be called when discovering the IP address from the Arduino
    Serial monitor. Within this code, we use the concatenation and URL builder to
    form the right command.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created a DIY version of a smart power switch, based on Arduino, and controlled
    by an Android application via Wi-Fi. We connected all the required components
    to the Arduino board, wrote an Arduino sketch to accept commands via Wi-Fi, and
    finally, created an Android application to control the switch remotely.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use another Arduino board, called the Arduino Yún,
    where we will be able to plug an USB camera. As this board will have Wi-Fi as
    well, we will use the project to create a remote Wi-Fi security camera.
  prefs: []
  type: TYPE_NORMAL
