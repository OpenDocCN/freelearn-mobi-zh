- en: Chapter 4. Wi-Fi Smart Power Plug
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 Wi-Fi 智能电源插座
- en: In this chapter, we will build an open source version of a very commonly connected
    object—a Wi-Fi power plug. Indeed, these kind of plugs can be bought from many
    stores, and usually come with their own iOS or Android app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个非常常见连接对象的开源版本——Wi-Fi电源插座。实际上，这种插座可以从许多商店购买，通常附带其自己的iOS或Android应用程序。
- en: In this chapter, we will build such a power plug from scratch, based on Arduino.
    We will connect a relay module, a current sensor, and a Wi-Fi module to an Arduino
    board to make our own Wi-Fi power plug. The power plug will be able to switch
    any device on and off, and will continuously measure the power consumption of
    the device.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从头开始构建这样一个电源插座，基于Arduino。我们将连接一个继电器模块、一个电流传感器和一个Wi-Fi模块到Arduino板上，以制作我们自己的Wi-Fi电源插座。这个电源插座能够开关任何设备，并且会持续测量设备的功耗。
- en: We will build an Android app to switch on and off the power plug remotely via
    Wi-Fi. We will also be able to get the power output on request and display it
    on a screen.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个Android应用程序，通过Wi-Fi远程开关电源插座。我们还将能够根据请求获取功率输出并在屏幕上显示。
- en: 'The following topics will be the major takeaways from this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是本章的主要收获：
- en: Connecting a relay module, a current sensor, and a Wi-Fi module to Arduino
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将继电器模块、电流传感器和Wi-Fi模块连接到Arduino
- en: Controlling the project by sending commands via Wi-Fi
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Wi-Fi发送命令控制项目
- en: Building an Android application to control the project from a mobile phone or
    tablet
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个Android应用程序以从手机或平板电脑控制项目
- en: Hardware and software requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件和软件要求
- en: First, let's see the required hardware components for this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看本章所需的硬件组件。
- en: We need an Arduino Uno board. To control the lamp remotely (the lamp was used
    as an example in the chapter, but of course any 110V or 230V device can be used
    here), you will also need a relay module. We used a 5V relay module from Polulu,
    but you can use any 5V relay module that you want.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个Arduino Uno板。为了远程控制灯具（在本章中，灯具被用作示例，但当然任何110V或230V的设备都可以在这里使用），你还需要一个继电器模块。我们使用了Polulu的5V继电器模块，但你也可以使用你想要的任何5V继电器模块。
- en: 'To measure the instant power consumption of the device connected to the plug,
    you will also need a current sensor. For this part, we will choose a breakout
    board based on the ACS712 chip. The following is a picture of the board I used:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测量连接到插座的设备的即时功耗，你还需要一个电流传感器。对于这部分，我们将选择基于ACS712芯片的扩展板。以下是我使用的板子的图片：
- en: '![Hardware and software requirements](img/0389OS_04_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![硬件和软件要求](img/0389OS_04_02.jpg)'
- en: You will also need a board that includes the CC3000 Wi-Fi chip, which we will
    use to receive commands via the Android device. For this project, we will choose
    a CC3000 breakout board from Adafruit. Of course, you can also use a shield from
    the same brand for this project; the code will be exactly the same.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个包含CC3000 Wi-Fi芯片的板子，我们将使用它通过Android设备接收命令。对于这个项目，我们将选择Adafruit的CC3000扩展板。当然，你也可以使用同一品牌的盾牌进行这个项目；代码将完全相同。
- en: To make the different connections, you will also need a breadboard and some
    jumper wires.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行不同的连接，你还需要一个面包板和一些跳线。
- en: 'The following is a list of the components that were used in this project:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在这个项目中使用的组件列表：
- en: The Arduino Uno board ([https://www.adafruit.com/products/50](https://www.adafruit.com/products/50))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Uno 板 ([https://www.adafruit.com/products/50](https://www.adafruit.com/products/50))
- en: The 5V relay module ([http://www.pololu.com/product/2480](http://www.pololu.com/product/2480))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5V 继电器模块 ([http://www.pololu.com/product/2480](http://www.pololu.com/product/2480))
- en: The current sensor ([http://imall.iteadstudio.com/im120710011.html](http://imall.iteadstudio.com/im120710011.html))
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电流传感器 ([http://imall.iteadstudio.com/im120710011.html](http://imall.iteadstudio.com/im120710011.html))
- en: The Adafruit CC3000 Wi-Fi breakout board ([https://www.adafruit.com/product/1469](https://www.adafruit.com/product/1469))
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adafruit CC3000 Wi-Fi 扩展板 ([https://www.adafruit.com/product/1469](https://www.adafruit.com/product/1469))
- en: The breadboard ([https://www.adafruit.com/products/64](https://www.adafruit.com/products/64))
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板 ([https://www.adafruit.com/products/64](https://www.adafruit.com/products/64))
- en: Jumper wires ([https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957))
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线 ([https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957))
- en: 'To connect a lamp or any other device to the project, you will need a pair
    of power cables: one male power plug and one female power plug. You will also
    need some screw terminals to make the required connections. The following is an
    image of the cables I used for this project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要将灯或任何其他设备连接到项目，您需要一对电源线：一个公电源插头和一个母电源插头。您还需要一些螺丝端子来制作所需的连接。以下是我为这个项目使用的电缆的图片：
- en: '![Hardware and software requirements](img/0389OS_04_03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![硬件和软件要求](img/0389OS_04_03.jpg)'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Warning**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**：'
- en: It can be dangerous to use high-voltage devices with such project. So, make
    sure to carefully follow all the instructions in the next section. Of course,
    you can make the entire project without connecting the project to the mains electricity;
    the principles are exactly the same.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的项目中使用高电压设备可能会有危险。因此，请确保仔细遵循下一节中的所有说明。当然，您可以在不将项目连接到主电源的情况下制作整个项目；原理完全相同。
- en: On the software side, you will need the latest version of the Arduino IDE. You
    will need the library for the CC3000 chip found at [https://github.com/adafruit/Adafruit_CC3000_Library](https://github.com/adafruit/Adafruit_CC3000_Library).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，您需要最新的Arduino IDE版本。您需要位于[https://github.com/adafruit/Adafruit_CC3000_Library](https://github.com/adafruit/Adafruit_CC3000_Library)的CC3000芯片库。
- en: You will also need the aREST library found at [https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要位于[https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST)的aREST库。
- en: To install an Arduino library, simply put the `library` folder into your `/libraries`
    folder inside your main `Ard` `uino` folder.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Arduino库，只需将`library`文件夹放入您主`Ard` `uino`文件夹内的`/libraries`文件夹中。
- en: Configuring the hardware
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置硬件
- en: It's now time to assemble the hardware part of the project. Let's start by connecting
    the Adafruit CC3000 breakout board. First, connect the Arduino Uno +5V pin to
    the red rail on the breadboard, and the ground pin to the blue rail.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是组装项目硬件部分的时候了。让我们从连接Adafruit CC3000扩展板开始。首先，将Arduino Uno的+5V引脚连接到面包板上的红色电源轨，将地线引脚连接到蓝色电源轨。
- en: 'Then, connect the IRQ pin of the CC3000 board to pin number 3 of the Arduino
    board, **VBAT** to pin **5**, and **CS** to pin **10**. After that, you will need
    to connect the **SPI** pins to the Arduino board: **MOSI**, **MISO**, and **CLK**
    go to pins **11**, **12**, and **13**, respectively. Finally, take care of the
    power supply: **VIN** goes to the Arduino 5V (red power rail) and **GND** to **GND**
    (blue power rail).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将CC3000板的IRQ引脚连接到Arduino板的**3**号引脚，**VBAT**连接到**5**号引脚，**CS**连接到**10**号引脚。之后，您需要将**SPI**引脚连接到Arduino板：**MOSI**、**MISO**和**CLK**分别连接到**11**、**12**和**13**号引脚。最后，注意电源供应：**VIN**连接到Arduino的5V（红色电源轨），**GND**连接到**GND**（蓝色电源轨）。
- en: 'The following is a schematic of the project, without the relay module connected:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该项目的示意图，未连接继电器模块：
- en: '![Configuring the hardware](img/0389OS_04_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_04_04.jpg)'
- en: 'We will now connect the relay module. First, connect the power supply: the
    **VCC** pin of the relay goes to the red power rail, and the **GND** pin goes
    to the blue power rail. Then, connect the signal pin of the relay (usually denoted
    as SIG) to Arduino pin number **8** followed by the current sensor. Like the relay,
    connect the power first: the **VCC** pin of the relay goes to the red power rail,
    and the **GND** pin goes to the blue power rail. Then, connect the signal pin
    of the sensor (usually denoted as SIG or OUT) to Arduino analog pin **A0**.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将连接继电器模块。首先，连接电源：继电器的**VCC**引脚连接到红色电源轨，**GND**引脚连接到蓝色电源轨。然后，将继电器的信号引脚（通常标记为SIG）连接到Arduino的**8**号引脚，然后是电流传感器。像继电器一样，首先连接电源：继电器的**VCC**引脚连接到红色电源轨，**GND**引脚连接到蓝色电源轨。然后，将传感器的信号引脚（通常标记为SIG或OUT）连接到Arduino的模拟引脚**A0**。
- en: We will now take care of connecting the project to the device you want to control,
    and to the mains electricity.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将负责将项目连接到您想要控制的设备以及主电源。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be very careful at this step as it involves high voltages (110V or 230V), which
    can be lethal. Also, make sure that you always connect the project to the mains
    electricity when you check everything else. When all other connections are done,
    make sure that you are not touching any bare cables. It is also recommended that
    you put the complete project in a plastic enclosure.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步要非常小心，因为它涉及到高电压（110V或230V），可能致命。同时，确保在检查其他所有内容时，始终将项目连接到主电源。当所有其他连接完成时，确保您没有触摸任何裸露的电线。还建议您将整个项目放入塑料外壳中。
- en: 'The following schematic describes how the different cables are connected to
    the relay and to the current sensor:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下电路图描述了不同电缆如何连接到继电器和电流传感器：
- en: '![Configuring the hardware](img/0389OS_04_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_04_05.jpg)'
- en: Note that as we are using AC voltages, the polarity of the cables doesn't matter
    here.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，因为我们使用的是交流电压，所以电缆的极性在这里并不重要。
- en: 'The following is an image illustrating the different connections between the
    cables, the relay, and the current sensor:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一张说明电缆、继电器和电流传感器之间不同连接的图片：
- en: '![Configuring the hardware](img/0389OS_04_06.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_04_06.jpg)'
- en: 'Finally, the following is an image of the complete project, with the male cable
    connected to the mains electricity, and a lamp connected to the female plug:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是一个完整项目的图片，其中公电缆连接到主电源，灯泡连接到母插座：
- en: '![Configuring the hardware](img/0389OS_04_07.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_04_07.jpg)'
- en: Testing the relay
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试继电器
- en: We will now test the project, by testing the relay and switching it on and off.
    This will ensure that the relay is correctly connected to your Arduino board,
    and that the power cable connections are correctly done (otherwise, no electricity
    will flow through the connected device). Again, check every single connection
    before plugging the project into the mains electricity.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过测试继电器并开关它来测试项目。这将确保继电器正确连接到您的Arduino板，并且电源电缆连接正确（否则，不会有电流流经连接的设备）。再次检查在将项目插入主电源之前每个连接是否正确。
- en: 'The following is the complete Arduino sketch for this part:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该部分的完整Arduino草图：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will now consider the details of this sketch. It starts by declaring which
    pin the relay is connected to:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将考虑这个草图的细节。它首先声明继电器连接到的引脚：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, in the `setup()` function of the sketch, we will declare this pin as
    an output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在草图的`setup()`函数中，我们将此引脚声明为输出：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, in the `loop()` function of the sketch, we will switch the pin from
    the on state to the off state every 5 seconds:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在草图的`loop()`函数中，我们将每5秒切换引脚从开启状态到关闭状态：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that you can find the complete code for this part in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您可以在本书的GitHub仓库中找到该部分的完整代码：[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)。
- en: Make sure that everything is connected correctly, that you have a device (like
    a lamp) connected to our project and that the project is plugged into the mains
    electricity. Again, check that every connection is correctly made before plugging
    the project into the mains electricity. You can now upload the sketch to your
    Arduino board. You should hear the relay switching on and off, and see the lamp
    switching on and off as well.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 确保一切连接正确，您有一个设备（如灯泡）连接到我们的项目，并且项目已插入主电源。再次检查在将项目插入主电源之前每个连接是否正确。现在，您可以上传草图到您的Arduino板。您应该听到继电器开关的声音，并看到灯泡开关的动作。
- en: Writing the Arduino sketch
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Arduino草图
- en: Now that we are sure that the connections of the relay, the current sensor,
    and the power cables are correct, we will write an Arduino sketch to accept connections
    coming via Wi-Fi from the Android device.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们确信继电器、电流传感器和电源电缆的连接是正确的，我们将编写一个Arduino草图来接受来自Android设备的Wi-Fi连接。
- en: 'The following is the complete sketch for this part:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该部分的完整草图：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let''s look in more detail at the Arduino sketch. It starts by importing
    the required libraries for this project:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更详细地看看Arduino草图。它首先导入该项目所需的库：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We also have to define which pin the relay module is connected to:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须定义继电器模块连接到的引脚：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we have to declare some variables that will help us to measure and calculate
    the power consumption of the device:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须声明一些变量，这些变量将帮助我们测量和计算设备的功耗：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At this point, you should also change the value of the effective voltage so
    that it matches the voltage of your country.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您还应该更改有效电压的值，使其与您所在国家的电压相匹配。
- en: 'Then, we have to define the pins on which the CC3000 Wi-Fi chip is connected
    to:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须定义CC3000 Wi-Fi芯片连接到的引脚：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can now create an instance of the CC3000 Wi-Fi chip:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以创建CC3000 Wi-Fi芯片的一个实例：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will also need to create an instance of the aREST library:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建aREST库的一个实例：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will now have to modify the code to put your Wi-Fi network credentials:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在需要修改代码以添加您的Wi-Fi网络凭据：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will also define the port we want to listen to with the Wi-Fi chip:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将定义我们想要通过Wi-Fi芯片监听的端口：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After that, we will declare a server listening on that port:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将声明一个在该端口上监听的服务器：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we declare a variable that will contain the power consumption of the
    device, which will be accessible from the outside via HTTP requests (within the
    same local Wi-Fi network):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们声明一个变量，它将包含设备的功耗，可以通过HTTP请求从外部访问（在同一本地Wi-Fi网络内）：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `setup()` function of the sketch, we will start the Serial connection:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图的`setup()`函数中，我们将启动串行连接：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will also expose the power consumption variable to the aREST API:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将将功耗变量暴露给aREST API：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We will also declare the relay pin as an output:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将声明继电器引脚为输出：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, we need to first take a measurement from the current sensor to get the
    value that the current sensor returns when no current is flowing through the connected
    device. This is done by a function that we won''t detail here:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要首先从电流传感器进行测量，以获取当没有电流流经连接的设备时电流传感器返回的值。这是通过一个我们不会详细说明的函数完成的：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will also assign an ID and name to our project:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将为我们的项目分配一个ID和名称：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After this, we will call a function to display the details of the Wi-Fi connection,
    such as the CC3000 chip IP address:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将调用一个函数来显示Wi-Fi连接的详细信息，例如CC3000芯片的IP地址：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To end the `setup()` function, we will start our Wi-Fi server:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束`setup()`函数，我们将启动我们的Wi-Fi服务器：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, in the `loop()` function of the sketch, we will read data from the sensor,
    which is connected on the analog pin A0:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在草图的`loop()`函数中，我们将从连接在模拟引脚A0上的传感器读取数据：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once we get this value, we can calculate the current from it as well as the
    device power consumption:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到这个值，我们就可以从它计算出电流以及设备的功耗：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Basically, the manufacturer of the current sensor gives the first formula.
    Then, we get the effective current by dividing the amplitude current by the square
    root of 2, which is approximately 1.414\. Finally, we get the effective power
    by multiplying the effective current with the effective voltage (and dividing
    it by 1,000 to have a result in Watts). Once the measurements are done, we process
    the incoming requests using the aREST library:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，电流传感器的制造商给出了第一个公式。然后，我们通过将幅值电流除以根号2来获取有效电流，大约是1.414。最后，我们通过将有效电流与有效电压相乘（并除以1,000以得到瓦特为单位的结果）来获取有效功率。一旦完成测量，我们使用aREST库处理传入的请求：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that you can find the complete code for this part inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您可以在本书的GitHub仓库中找到这部分完整的代码：[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)。
- en: 'Don''t forget to change the sketch to include your own Wi-Fi network name and
    Wi-Fi network password. You can now upload the code to your Arduino board, and
    open the Serial monitor. The following result is what you should see after a while
    (of course, the IP address of your board and the other parameters will probably
    be different):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将草图修改为包含您自己的Wi-Fi网络名称和Wi-Fi网络密码。现在，您可以将代码上传到您的Arduino板，并打开串行监视器。以下是在一段时间后您应该看到的结果（当然，您的板子的IP地址和其他参数可能不同）：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Write down the IP address that appeared in your Serial monitor—you will need
    it now, and while writing the Android application later. Now, we will test the
    Wi-Fi connection by sending some command to the project. You can go to your favorite
    web browser and type the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 记下在您的串行监视器中出现的IP地址——您现在需要它，并且在稍后编写Android应用程序时也需要。现在，我们将通过向项目发送一些命令来测试Wi-Fi连接。您可以使用您喜欢的网页浏览器并输入以下内容：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Of course, you need to change the IP address with your own board''s IP address
    as it was displayed in the Serial monitor. You should see that the relay instantly
    switches on, and you should be greeted by the following message:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您需要将IP地址更改为您自己的板子IP地址，正如它在串行监视器中显示的那样。您应该看到继电器立即打开，并且您应该看到以下消息：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can now switch it off again with:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以再次使用以下命令将其关闭：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We are now going to try to read the power consumption of the device. You can
    do so by typing:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将尝试读取设备的功耗。您可以通过输入以下内容来完成：
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You should be greeted by the following answer:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下回答：
- en: '[PRE30]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If you can see this, then it means that the sensor was correctly calibrated
    (as the power is 0) and that the power variable was correctly exposed to the aREST
    API.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能看到这个，那么这意味着传感器已正确校准（因为功率为0），并且功率变量已正确暴露给aREST API。
- en: Wireframing our Android application
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的Android应用程序的线框图
- en: 'The rigorous approach of wireframing our application before starting to write
    any code will help us provide a better user experience. The following is the paper
    prototype that we would like to follow when it comes to implementing our final
    code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写任何代码之前，我们对应用程序进行严格的线框设计将帮助我们提供更好的用户体验。以下是我们希望在实现最终代码时遵循的纸面原型：
- en: '![Wireframing our Android application](img/0389OS_04_08.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![我们的Android应用程序的线框图](img/0389OS_04_08.jpg)'
- en: We will go ahead and create a new project entitled `Arduino Wifi` in Android
    Studio with a minimum SDK of 15 and maximum SDK of 19 (which at the time of writing
    is the most stable version of the Android SDK). This will enable us to cater to
    more than 80% of Android devices in the market. A project with a blank activity
    should be enough to start off this project.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Android Studio中创建一个名为`Arduino Wifi`的新项目，最小SDK为15，最大SDK为19（在撰写本文时，这是Android
    SDK的最稳定版本）。这将使我们能够满足市场上超过80%的Android设备。一个带有空白活动的项目就足以开始这个项目。
- en: Once you've got the project set up, we will go ahead and direct the Android
    layout files, which can be found by navigating to `app` > `src` > `res` > `layout`
    > `activity_main_screen.xml`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您设置了项目，我们将继续处理Android布局文件，这些文件可以通过导航到`app` > `src` > `res` > `layout` > `activity_main_screen.xml`找到。
- en: 'We will apply a relative layout first, and within this layout, drag-and-drop
    four buttons together with a TextView, which will look roughly as follows (at
    this point, there is no need to focus on the aesthetic quality of the layout):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先应用一个相对布局，并在该布局中拖放四个按钮以及一个TextView，其外观大致如下（在此阶段，无需关注布局的美观质量）：
- en: '![Wireframing our Android application](img/0389OS_04_09.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![我们的Android应用程序的线框图](img/0389OS_04_09.jpg)'
- en: 'We will also identify each user interface item as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将按照以下方式识别每个用户界面项：
- en: 'The **Open the Gate** button: `openGateButton`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开门**按钮：`openGateButton`'
- en: 'The **Switch On** button: `switchOnButton`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开启**按钮：`switchOnButton`'
- en: 'The **Switch Off** button: `switchOffButton`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭**按钮：`switchOffButton`'
- en: 'The **Check Power** button: `checkPowerButton`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查功率**按钮：`checkPowerButton`'
- en: 'The **Power Output** text view: `powerOutput`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功率输出**文本视图：`powerOutput`'
- en: Implementing our layouts into the code
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将布局实现到代码中
- en: 'We will first start off by declaring a `String TAG` object, which refers to
    `MainActivity` and which will be used for logging purposes:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先声明一个`String TAG`对象，该对象引用`MainActivity`，并将用于日志记录：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we will follow this by declaring all our view variables and assigning
    them to the `layout` elements within the `onCreate` method, which means that the
    `onCreate` method will look as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将声明所有视图变量，并在`onCreate`方法中将它们分配给`layout`元素，这意味着`onCreate`方法将如下所示：
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see in the preceding code, we refer to a number of ASync tasks, which
    we will refer to together with a JSON parser that we will be using to parse the
    data from the Arduino and adapt it to the power output text view.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，我们引用了多个ASync任务，我们将与我们将使用的JSON解析器一起引用，该解析器将用于解析从Arduino获取的数据并将其适配到功率输出文本视图。
- en: ASync tasks will help us run the application tasks separately from the main
    user interface thread and hence significantly improve the responsiveness of the
    user interface and thus enhance the user experience.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ASync任务将帮助我们分别从主用户界面线程运行应用程序任务，从而显著提高用户界面的响应性，从而增强用户体验。
- en: 'With the following code, you will need to replace the `yourip` part with your
    own IP address, which you have found in the Arduino IDE Serial monitor. You will
    be able to declare the IP address within the `Main Activity` declaration as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码，您需要将`yourip`部分替换为您自己的IP地址，该地址您可以在Arduino IDE串行监视器中找到。您可以在`Main Activity`声明中声明IP地址，如下所示：
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We will then declare the following `AsyncTasks` object to enable the different
    actions we would like to achieve:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将声明以下`AsyncTasks`对象，以启用我们想要实现的不同操作：
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We will add another `helper` method at the bottom to make sure that Wi-Fi network
    connectivity is available:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在底部添加另一个`helper`方法，以确保Wi-Fi网络连接可用：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Before going ahead, we will need to add the following permissions to our Android
    `Manifest` file, which is available at `app` > `src` > `main` > `AndroidManifest.xml`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要将以下权限添加到我们的Android `Manifest`文件中，该文件位于`app` > `src` > `main` > `AndroidManifest.xml`。
- en: 'The following permissions will allow us to access the Wi-Fi network capabilities
    of the Android device:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下权限将允许我们访问Android设备的Wi-Fi网络功能：
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: After this, you can go ahead and compile the app. It's also important to note
    that Wi-Fi has a latency of about 300 ms and, depending on your Wi-Fi network,
    the value might take a significant amount of time to update the user interface.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以继续编译应用程序。还重要的是要注意，Wi-Fi的延迟约为300毫秒，并且根据您的Wi-Fi网络，该值可能需要相当长的时间才能更新用户界面。
- en: If you are struggling with following along, you can also refer to the final
    project by checking out the GitHub repository at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在跟随过程中遇到困难，您也可以通过查看GitHub仓库[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)中的最终项目来参考。
- en: Polishing the user interface and experience
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 磨练用户界面和体验
- en: Once we have managed to finalize our code and assure ourselves that the user
    interface is being updated with the power value and that we can switch on and
    off the lamp, we can proceed to improve our user interface.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功完成代码并确保用户界面正在更新功率值，并且我们可以打开和关闭灯泡，我们就可以继续改进我们的用户界面。
- en: 'We will improve the user interface with the following main actions:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下主要操作改进用户界面：
- en: Adding a new app icon
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的应用程序图标
- en: Enlarging the power output text
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放大功率输出文本
- en: Aligning and styling the buttons
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对齐和样式化按钮
- en: Changing the application name in the action bar
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在操作栏中更改应用程序名称
- en: Adding a new app icon
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新的应用程序图标
- en: First, we will start off by downloading the image asset. It's available within
    the GitHub repository and as a public download at [http://bit.ly/iclauncherchapter4](http://bit.ly/iclauncherchapter4).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始下载图像资源。它可在GitHub仓库中找到，也可以在[http://bit.ly/iclauncherchapter4](http://bit.ly/iclauncherchapter4)作为公共下载。
- en: 'You should navigate using the project tree, followed by a right-click on the
    `app` folder, as shown in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您应使用项目树进行导航，然后右键单击`app`文件夹，如下截图所示：
- en: '![Adding a new app icon](img/0389OS_04_10.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![添加新的应用程序图标](img/0389OS_04_10.jpg)'
- en: 'When you right-click on `app`, create a new image asset by navigating to **New**
    > **Image Asset**, as shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当您右键单击`app`时，通过导航到**新建** > **图像资源**创建一个新的图像资源，如下截图所示：
- en: '![Adding a new app icon](img/0389OS_04_11.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![添加新的应用程序图标](img/0389OS_04_11.jpg)'
- en: 'You will then be shown an **Asset Studio** pop-up window, which will allow
    you to choose your very own image file, as shown in the following screenshot.
    For optimization purposes, we recommend that you go for a `.png` file with a resolution
    of 144 pixels by 144 pixels. Android Studio automatically does all the resizing
    and resource creation to adapt your graphic to different screens:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个**资产工作室**弹出窗口，它允许您选择自己的图像文件，如下截图所示。出于优化目的，我们建议您选择分辨率为144像素×144像素的`.png`文件。Android
    Studio会自动进行所有调整大小和资源创建，以适应不同的屏幕：
- en: '![Adding a new app icon](img/0389OS_04_12.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![添加新的应用程序图标](img/0389OS_04_12.jpg)'
- en: 'Once you choose the `ic_launcher` image file that we have provided you with,
    you will be shown a screen with the icon in different sizes. Click on **Next**,
    where you will see the following screen:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您选择了我们提供的`ic_launcher`图像文件，您将看到一个显示不同尺寸图标的屏幕。点击**下一步**，您将看到以下屏幕：
- en: '![Adding a new app icon](img/0389OS_04_13.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![添加新的应用程序图标](img/0389OS_04_13.jpg)'
- en: 'This screen warns you that the previous files will be overwritten and shows
    you the image launcher file in a number of different resolutions once again. Click
    on **Finish**, compile the app, launch it on your physical device, and you should
    see something pleasant in your app tray and in the app''s action bar, which is
    shown as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕警告您之前的文件将被覆盖，并再次以多种不同的分辨率向您展示图像启动器文件。点击**完成**，编译应用程序，在您的物理设备上启动它，您应该在应用程序托盘和应用程序的操作栏中看到一些令人愉快的东西，如下所示：
- en: '![Adding a new app icon](img/0389OS_04_14.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![添加新的应用程序图标](img/0389OS_04_14.jpg)'
- en: Centering and enlarging the data output text
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 居中并放大数据输出文本
- en: In order to edit the layout for the main text output where the sensor data will
    be shown, we will need to open the project tree and navigate towards the layout
    file, which is available at `app` > `src` > `main` > `res` > `layout` > `activity_main_screen.xml`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编辑显示传感器数据的文本输出的布局，我们需要打开项目树并导航到布局文件，该文件位于 `app` > `src` > `main` > `res` >
    `layout` > `activity_main_screen.xml`。
- en: Once in this view, we recommend that you modify the text using the text view.
    This will allow you finer control and get you used to the different conventions
    used when editing Android layout files programmatically.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入此视图，我们建议您使用文本视图修改文本。这将允许您获得更精细的控制，并让您习惯于在程序化编辑 Android 布局文件时使用的不同约定。
- en: 'When opening the `activity_main_screen.xml` file, we will see the different
    XML codes for the buttons and Text Views. At this point, look out for the code
    that takes care of the `Power Data Output` TextView and add the following code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开 `activity_main_screen.xml` 文件时，我们将看到按钮和文本视图的不同 XML 代码。在此阶段，注意负责 `Power Data
    Output` 文本视图的代码，并添加以下代码：
- en: '[PRE37]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The whole block of code responsible for the `Sensor Data Output` TextView will
    now look as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 负责的 `Sensor Data Output` 文本视图的整个代码块现在将如下所示：
- en: '[PRE38]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this block of code, we temporarily used the placeholder text `100W` so that
    we can approximate how it will look with the Android layout designer. With this
    modification, the sensor data is now big enough to show to the user and will be
    part of the enhancement within the user experience.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码块中，我们暂时使用了占位文本 `100W`，以便我们可以近似地看到它使用 Android 布局设计器时的样子。通过此修改，传感器数据现在足够大，可以显示给用户，并将成为用户体验增强的一部分。
- en: Aligning and styling the buttons
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对按钮进行对齐和样式设置
- en: For our final steps, we will modify our buttons and add some color to the text.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最后几步中，我们将修改我们的按钮并为文本添加一些颜色。
- en: 'There will be two steps when creating the new buttons:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新按钮时将有两个步骤：
- en: Create a `drawable` folder with a new XML `drawable` file known as `button.xml`.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `res` 文件夹中创建一个名为 `button.xml` 的新 XML `drawable` 文件。
- en: We will then connect the `drawable` resource file to the main Android layout
    file.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将连接 `drawable` 资源文件到主 Android 布局文件。
- en: Create the `drawable` folder by right-clicking on the `res` folder, which is
    available at `app` > `src` > `main` > `res`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 `app` > `src` > `main` > `res` 中的 `res` 文件夹上右键单击来创建 `drawable` 文件夹。
- en: After creating the `drawable` folder within the `res` folder, we need to once
    again right-click on the new `drawable` folder and navigate to **New** > **Drawable
    Resource File**.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `res` 文件夹内创建 `drawable` 文件夹后，我们需要再次右键单击新的 `drawable` 文件夹，并导航到 **新建** > **Drawable
    资源文件**。
- en: Name the file `button` and type down `shape` as the root element followed by
    clicking on **OK**.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件命名为 `button`，输入 `shape` 作为根元素，然后点击 **确定**。
- en: 'Within the `button.xml` file, we will add the following code:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `button.xml` 文件中，我们将添加以下代码：
- en: '[PRE39]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, we go towards the `activity_main_screen.xml` file and refer to this drawable
    by including the following line of code within the button modules:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们转向 `activity_main_screen.xml` 文件，并在按钮模块中包含以下代码来引用此可绘制资源：
- en: '[PRE40]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We will add some flavor by adding the following line of code to the `Button`
    and `TextView` modules within the `activity_main_screen.xml` file:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在 `activity_main_screen.xml` 文件中的 `Button` 和 `TextView` 模块中添加以下代码行来增加一些特色：
- en: '[PRE41]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `#4A90E2` term refers to the hex code of the main color used in the app
    icon so that we maintain some consistency with the main user interface.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`#4A90E2` 项指的是应用图标中使用的主体颜色的十六进制代码，这样我们就能保持与主用户界面的一致性。'
- en: Changing the application name within the action bar
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在操作栏中更改应用程序名称
- en: We all would like to customize the name of the app to one of our own liking
    and that will be the easiest thing within our project! We will just go over to
    the `strings.xml` file where we have all our constant text values within the project.
    This is available at `app` > `src` > `res` > `values` > `string.xml`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都希望将应用程序的名称自定义为我们喜欢的名称，这将是我们的项目中最容易的事情！我们只需转到 `strings.xml` 文件，其中包含我们项目中的所有常量文本值。它位于
    `app` > `src` > `res` > `values` > `string.xml`。
- en: 'Then, you can change the text of `arduinoWifi` to any name of your liking.
    In this case, we will stick to `WiFi Lamp Switch`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将 `arduinoWifi` 的文本更改为您喜欢的任何名称。在这种情况下，我们将坚持使用 `WiFi Lamp Switch`：
- en: '[PRE42]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Our final project should now look as follows (device used in this case is a
    Nexus 4):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目现在应该如下所示（在此情况下使用的设备是 Nexus 4）：
- en: '![Changing the application name within the action bar](img/0389OS_04_15.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![在操作栏中更改应用程序名称](img/0389OS_04_15.jpg)'
- en: It's important to note that screen layouts might vary depending on different
    devices. In this case, you might have to adapt your Android layout file to your
    specific physical device.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，屏幕布局可能会根据不同的设备而有所不同。在这种情况下，你可能需要将你的Android布局文件适配到你的特定物理设备。
- en: How to go further
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进一步发展
- en: The options are endless when it comes to further modifying the Android app,
    and there are a number of implementations that can improve the app, such as real-time
    monitoring, where the power data output will refresh automatically. In addition,
    this data can provide a use case for data that is being generated to be stored
    in the cloud, which can be analyzed, allowing for the creation of graphical interpretations
    of this data. Such graphical interpretations can be correlated to the time of
    day and can help the user understand when the greatest power consumption occurs.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到进一步修改Android应用程序时，选项是无限的，并且有几种实现方式可以改进应用程序，例如实时监控，其中电力数据输出将自动刷新。此外，这些数据可以提供将生成数据存储在云中的用例，这些数据可以被分析，从而允许创建数据的图形解释。这种图形解释可以与一天中的时间相关联，并帮助用户了解何时发生最大的电力消耗。
- en: From a coding point of view, we can refactor our code, which implies that we
    simplify and reuse our code effectively. In fact, refactoring could definitely
    be achieved with the JSON parser, which could be refactored into its own class
    and which we opted on leaving out in the current setup so as to facilitate the
    learning process.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 从编码的角度来看，我们可以重构我们的代码，这意味着我们有效地简化并重用我们的代码。实际上，重构肯定可以通过JSON解析器实现，它可以被重构为其自己的类，而我们选择在当前设置中省略它，以便促进学习过程。
- en: With regards to user experience, a new `EditText` field could be introduced
    together with a **Submit** button so as to allow the user to manually change the
    IP address, which will be called when discovering the IP address from the Arduino
    Serial monitor. Within this code, we use the concatenation and URL builder to
    form the right command.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 关于用户体验，可以引入一个新的`EditText`字段以及一个**提交**按钮，以便用户可以手动更改IP地址，当从Arduino串行监视器发现IP地址时将被调用。在此代码中，我们使用连接和URL构建器来形成正确的命令。
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We created a DIY version of a smart power switch, based on Arduino, and controlled
    by an Android application via Wi-Fi. We connected all the required components
    to the Arduino board, wrote an Arduino sketch to accept commands via Wi-Fi, and
    finally, created an Android application to control the switch remotely.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基于Arduino创建了一个智能电源开关的DIY版本，并通过Wi-Fi由Android应用程序控制。我们将所有必需的组件连接到Arduino板上，编写了一个Arduino草图以通过Wi-Fi接受命令，最后创建了一个Android应用程序以远程控制开关。
- en: In the next chapter, we will use another Arduino board, called the Arduino Yún,
    where we will be able to plug an USB camera. As this board will have Wi-Fi as
    well, we will use the project to create a remote Wi-Fi security camera.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用另一个Arduino板，称为Arduino Yún，我们将能够插入一个USB摄像头。由于这个板也将有Wi-Fi，我们将使用这个项目来创建一个远程Wi-Fi安全摄像头。
