["```kt\nCoroutineScope(Dispatchers.IO).launch {\n```", "```kt\n    performTask()\n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\n@GET(\"movie/now_playing\")\n```", "```kt\nsuspend fun getMovies() : List<Movies>\n```", "```kt\nCoroutineScope(Dispatchers.IO).launch {\n```", "```kt\n    val movies = movieService.getMovies()\n```", "```kt\n    withContext(Dispatchers.Main) {\n```", "```kt\n        displayMovies(movies)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n@Dao\n```", "```kt\ninterface MovieDao {\n```", "```kt\n    @Query(\"SELECT * from movies\")\n```", "```kt\n    suspend fun getMovies(): List<Movies>\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nCoroutineScope(Dispatchers.IO).launch {\n```", "```kt\n    performTask1()\n```", "```kt\n    launch {\n```", "```kt\n        performTask2()\n```", "```kt\n    }\n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\n class MainActivity : AppCompatActivity() {\n```", "```kt\n    val scope = MainScope()\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        super.onCreate(savedInstanceState)\n```", "```kt\n        setContentView(R.layout.activity_main)\n```", "```kt\n        val progressBar =\n```", "```kt\n          findViewById<ProgressBar>(R.id.progressBar)\n```", "```kt\n        scope.launch {\n```", "```kt\n            delay(1_000)\n```", "```kt\n            progressBar.isVisible = true\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n class MainActivity : AppCompatActivity() {\n```", "```kt\n    val scope = MainScope()\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        super.onCreate(savedInstanceState)\n```", "```kt\n        setContentView(R.layout.activity_main)\n```", "```kt\n        val textView =\n```", "```kt\n          findViewById<TextView>(R.id.textView)\n```", "```kt\n        scope.launch {\n```", "```kt\n            val text = async {\n```", "```kt\n                getText()\n```", "```kt\n            }\n```", "```kt\n            delay(1_000)\n```", "```kt\n            textView.text = text.await()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n class MainActivity : AppCompatActivity() {\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        super.onCreate(savedInstanceState)\n```", "```kt\n        setContentView(R.layout.activity_main)\n```", "```kt\n        val progressBar =\n```", "```kt\n          findViewById<ProgressBar>(R.id.progressBar)\n```", "```kt\n        runBlocking {\n```", "```kt\n            delay(2_000)\n```", "```kt\n            progressBar.isVisible = true\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n class MainActivity : AppCompatActivity() {\n```", "```kt\n    val scope = MainScope()\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        super.onCreate(savedInstanceState)\n```", "```kt\n        setContentView(R.layout.activity_main)\n```", "```kt\n        val progressBar =\n```", "```kt\n          findViewById<ProgressBar>(R.id.progressBar)\n```", "```kt\n        scope.launch {\n```", "```kt\n            progressBar.isVisible = true\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nimplementation \"androidx.lifecycle:lifecycle-runtime-ktx:2.4.1\"\n```", "```kt\n class MainActivity : AppCompatActivity() {\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        super.onCreate(savedInstanceState)\n```", "```kt\n        setContentView(R.layout.activity_main)\n```", "```kt\n        val progressBar =\n```", "```kt\n          findViewById<ProgressBar>(R.id.progressBar)\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            progressBar.isVisible = true\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nlifecycleScope.launch(Dispatchers.IO) { ... }\n```", "```kt\nimplementation \"androidx.lifecycle:lifecycle-viewmodel-\n```", "```kt\n  ktx:2.4.1\"\n```", "```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    init {\n```", "```kt\n        viewModelScope.launch {\n```", "```kt\n            fetchMovies()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nviewModelScope.launch (Dispatchers.IO) { ... }\n```", "```kt\nprivate suspend fun fetchAndDisplay() = coroutineScope {\n```", "```kt\n        launch {\n```", "```kt\n            val movies = fetchMovies()\n```", "```kt\n            displayMovies(movies)\n```", "```kt\n        }\n```", "```kt\n        launch {\n```", "```kt\n            val shows = fetchShows()\n```", "```kt\n            DisplayShows(shows)\n```", "```kt\n        }\n```", "```kt\n}\n```", "```kt\n private suspend fun fetchAndDisplayMovies() =\n```", "```kt\n   supervisorScope {\n```", "```kt\n        launch {\n```", "```kt\n            val movies = fetchMovies()\n```", "```kt\n            displayMovies(movies)\n```", "```kt\n        }\n```", "```kt\n        launch {\n```", "```kt\n            val shows = fetchShows()\n```", "```kt\n            displayShows(shows)\n```", "```kt\n        }\n```", "```kt\n}\n```", "```kt\nMainScope().launch { ... }\n```", "```kt\nCoroutineScope(Dispatchers.IO).launch {\n```", "```kt\n    fetchMovies()\n```", "```kt\n}\n```", "```kt\nviewModelScope.launch(Dispatchers.Default) { ... }\n```", "```kt\nsuspend fun getMovies(): List<Movies>  {\n```", "```kt\n    withContext(Dispatchers.IO) { ... }\n```", "```kt\n}\n```", "```kt\nCoroutineScope(Dispatchers.IO) {\n```", "```kt\n    …\n```", "```kt\n}\n```", "```kt\nviewModelScope.launch(Dispatchers.Default) { ... }\n```", "```kt\nval scope = CoroutineScope(Dispatchers.IO)\n```", "```kt\nscope.launch(CoroutineName(\"IOCoroutine\")) {\n```", "```kt\n    performTask()\n```", "```kt\n}\n```", "```kt\nval context = Dispatchers.Main + Job()\n```", "```kt\nSupervisorJob() + Dispatchers.Main.immediate\n```", "```kt\nwithContext(Dispatchers.IO) { ... }\n```", "```kt\nval job = viewModelScope.launch(Dispatchers.IO) { ... }\n```", "```kt\nval job1 = viewModelScope.launch(Dispatchers.IO) { \n```", "```kt\n    val movies = fetchMovies()\n```", "```kt\n    val job2 = launch {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nval lazyJob = viewModelScope.launch (start=CoroutineStart.LAZY) {\n```", "```kt\n    delay(1_000)\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\n...\n```", "```kt\nlazyJob.start()\n```", "```kt\nviewModelScope.launch {\n```", "```kt\n    val job1 = launch {\n```", "```kt\n        showProgressBar()\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n    job1.join()\n```", "```kt\n    ...\n```", "```kt\n    val job2 = launch {\n```", "```kt\n        fetchMovies()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n    private val apiKey = \"your_api_key_here\" \n    ```", "```kt\n    implementation ‘org.jetbrains.kotlinx:kotlinx-\n      coroutines-android:1.6.0’\n    ```", "```kt\n    implementation ‘androidx.lifecycle:lifecycle-\n      viewmodel-ktx:2.4.1’\n    ```", "```kt\n    fun fetchMovies() {\n        _loading.value = true\n        viewModelScope.launch(Dispatchers.IO) {\n        }\n    }\n    ```", "```kt\n    fun fetchMovies() {\n        _loading.value = true\n        viewModelScope.launch(Dispatchers.IO) {\n            movieRepository.fetchMovies()\n            _loading.postValue(false)\n        }\n    }\n    ```"]