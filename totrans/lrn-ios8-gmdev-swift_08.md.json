["```swift\nimport Foundation\nimport UIKit\nimport SceneKit\n\nclass GameSCNScene: SCNScene{\n\n    let scnView: SCNView!\n    let _size:CGSize!\n    var scene: SCNScene!\n\n        required init(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    init(currentview view: SCNView) {\n\n        super.init()\n    }\n}\n```", "```swift\nclass GameViewController: UIViewController {\n\n  var gameSCNScene:GameSCNScene!\n\n    override func viewDidLoad() {\n      super.viewDidLoad()\n      let scnView = view as SCNView\n      gameSCNScene = GameSCNScene(currentview: scnView)\n    }\n}// UIViewController Class\n```", "```swift\nscnView = view\n_size = scnView.bounds.size                       \n\n// retrieve the SCNView\nscene = SCNScene()\nscnView.scene = scene\nscnView.allowsCameraControl = true\nscnView.showsStatistics = true\nscnView.backgroundColor = UIColor.yellowColor() \n```", "```swift\nfunc addGeometryNode(){\n\n   let sphereGeometry = SCNSphere(radius: 1.0)\n   sphereGeometry.firstMaterial?.diffuse.contents = UIColor.orangeColor()\n\n   let sphereNode = SCNNode(geometry: sphereGeometry)\n   sphereNode.position = SCNVector3Make(0.0, 0.0, 0.0)\n   scene.rootNode.addChildNode(sphereNode)        \n}\n```", "```swift\nfunc addLightSourceNode(){\n\n    let lightNode = SCNNode()\n    lightNode.light = SCNLight()\n    lightNode.light!.type = SCNLightTypeOmni\n    lightNode.position = SCNVector3(x: 10, y: 10, z: 10)\n    scene.rootNode.addChildNode(lightNode)\n\n    let ambientLightNode = SCNNode()\n    ambientLightNode.light = SCNLight()\n    ambientLightNode.light!.type = SCNLightTypeAmbient\n    ambientLightNode.light!.color = UIColor.darkGrayColor()\n    scene.rootNode.addChildNode(ambientLightNode)\n}\n```", "```swift\nfunc addCameraNode(){\n\n let cameraNode = SCNNode()\n    cameraNode.camera = SCNCamera()\n    cameraNode.position = SCNVector3(x: 0, y: 0, z: 15)\n    scene.rootNode.addChildNode(cameraNode)        \n}\n```", "```swift\nfunc addFloorNode(){\n\n     var floorNode = SCNNode()\n     floorNode.geometry = SCNFloor()\n     floorNode.position.y = -1.0\n     scene.rootNode.addChildNode(floorNode)\n}\n```", "```swift\n\n init(currentview view:SCNView){\n\nsuper.init()\n    scnView = view\n    _size = scnView.bounds.size\n\n    //retrieve the SCNView\n    //scene = SCNScene()\n\n scene = SCNScene(named: \"monsterScene.DAE\")\n\n    scnView.scene = scene\n    scnView.allowsCameraControl  = true\n    scnView.showsStatistics = true\n    scnView.backgroundColor = UIColor.yellowColor()\n\n//    self.addGeometryNode()\n//    self.addLightSourceNode()\n//    self.addCameraNode()\n//    self.addFloorNode()\n//    \n\n}\n```", "```swift\ninit(currentview view:SCNView){\n    super.init()\n    scnView = view\n    _size = scnView.bounds.size\n\n    //retrieve the SCNView\n    //scene = SCNScene()\n    scene = SCNScene(named: \"monster.scnassets/monsterScene.DAE\")\n\n    scnView.scene = scene\n    scnView.allowsCameraControl  = true\n    scnView.showsStatistics = true\n    scnView.backgroundColor = UIColor.yellowColor()\n\n    self.addColladaObjects()\n\n//    self.addGeometryNode()  \n//    self.addLightSourceNode()\n//    self.addCameraNode()\n//    self.addFloorNode()\n\n  }\n\nfunc addHero(){\n\n    heroNode = SCNNode()\n\n var monsterNode = scene.rootNode.childNodeWithName(\n \"CATRigHub001\", recursively: false)\n    heroNode.addChildNode(monsterNode!) \n heroNode.position = SCNVector3Make(0, 0, 0)               \n\n    let collisionBox = SCNBox(width: 10.0, height: 10.0,\n           length: 10.0, chamferRadius: 0)\n\n    heroNode.physicsBody?.physicsShape = \nSCNPhysicsShape(geometry: collisionBox, options: nil)\n\n heroNode.physicsBody = SCNPhysicsBody.dynamicBody()    \n    heroNode.physicsBody?.mass = 20\n    heroNode.physicsBody?.angularVelocityFactor = SCNVector3Zero \n heroNode.name = \"hero\"\n\n    scene.rootNode.addChildNode(heroNode)\n}\n```", "```swift\nfunc addGround(){\n\n    let groundBox = SCNBox(width: 10, height: 2,\n                           length: 10, chamferRadius: 0)\n\n    let groundNode = SCNNode(geometry: groundBox)\n\n    groundNode.position = SCNVector3Make(0, -1.01, 0)\n    groundNode.physicsBody = SCNPhysicsBody.staticBody()\n    groundNode.physicsBody?.restitution = 0.0\n\n    scene.rootNode.addChildNode(groundNode)\n}\n```", "```swift\n  let scnView: SCNView!\n  let _size:CGSize!\n  var scene: SCNScene!\n  var heroNode:SCNNode!\n  var enemyNode:SCNNode!\n\n```", "```swift\nfunc addEnemy(){\n\n    let geo = SCNBox(width: 4.0,\n  height: 4.0,\n  length: 4.0,\n  chamferRadius: 0.0)\n\n    geo.firstMaterial?.diffuse.contents = UIColor.yellowColor()\n\n    enemyNode = SCNNode(geometry: geo)\n    enemyNode.position = SCNVector3Make(0, 20.0 , 60.0)\n    enemyNode.physicsBody = SCNPhysicsBody.kinematicBody()\n    scene.rootNode.addChildNode(enemyNode)\n\n    enemyNode.name = \"enemy\"\n}\n```", "```swift\nfunc updateEnemy(){\n\n     enemyNode.position.z += -0.9\n\n     if((enemyNode.position.z - 5.0) < -40){\n\n        var factor = arc4random_uniform(2) + 1\n\n        if( factor == 1 ){\n            enemyNode.position = SCNVector3Make(0, 2.0 , 60.0)\n        }else{\n            enemyNode.position = SCNVector3Make(0, 15.0 , 60.0)\n        }\n   }\n}\n```", "```swift\n    func update(){\n\n        updateEnemy()\n    }\n```", "```swift\nfunc renderer(aRenderer: SCNSceneRenderer, updateAtTime time: NSTimeInterval) {\n\n  gameSCNScene.update()\n}\n```", "```swift\nclass GameViewController: UIViewController, SCNSceneRendererDelegate { \n```", "```swift\nlet scnView = view as SCNView\nscnView.delegate = self\n\n```", "```swift\nclass GameSCNScene: SCNScene,SCNPhysicsContactDelegate{\n```", "```swift\nscene.physicsWorld.contactDelegate = self\n```", "```swift\nfunc physicsWorld(world: SCNPhysicsWorld, didBeginContact contact: SCNPhysicsContact) {\n\n    if( (contact.nodeA.name == \"hero\" &&\n contact.nodeB.name == \"enemy\") )\n    {\n        contact.nodeA.physicsBody?.velocity = SCNVector3Zero\n  println(\"contact\")\n\n }\n} \n```", "```swift\nimport SpriteKit\n\nclass OverlaySKScene: SKScene {\n\n    let _gameScene: GameSCNScene!\n    let myLabel: SKLabelNode!\n    var gameOverLabel: SKLabelNode!\n    var jumpBtn: SKSpriteNode!\n    var playBtn: SKSpriteNode!\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    init(size: CGSize, gameScene: GameSCNScene){\n\n    super.init(size: size)\n\n    }\n}\n```", "```swift\n        _gameScene = gameScene\n\n        myLabel = SKLabelNode(fontNamed:\"Chalkduster\")\n        myLabel.text = \"Score: 0\";\n        myLabel.fontColor = UIColor.whiteColor()\n        myLabel.fontSize = 65;\n        myLabel.setScale(1.0)\n        myLabel.position = CGPointMake(size.width * 0.5, size.height * 0.9)\n        self.addChild(myLabel)\n\n  gameOverLabel = SKLabelNode(fontNamed:\"Chalkduster\")\n        gameOverLabel.text = \"GAMEOVER\";\n        gameOverLabel.fontSize = 100;\n        gameOverLabel.setScale(1.0)\n        gameOverLabel.position = CGPointMake(size.width * 0.5, size.height * 0.5)\n        gameOverLabel.fontColor = UIColor.whiteColor()\n        self.addChild(gameOverLabel)\n        gameOverLabel.hidden = true\n\n        playBtn = SKSpriteNode(imageNamed: \"playBtn\")\n        playBtn.position = CGPoint(x: size.width * 0.15, y: size.height * 0.2)\n        self.addChild(playBtn)\n        playBtn.name = \"playBtn\"\n\n        jumpBtn = SKSpriteNode(imageNamed: \"jumpBtn\")\n        jumpBtn.position = CGPoint(x: size.width * 0.9, y: size.height * 0.15)\n        self.addChild(jumpBtn)\n        jumpBtn.name = \"jumpBtn\"\n        jumpBtn.hidden = true\n```", "```swift\n    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        /* Called when a touch begins */\n\n        for touch: AnyObject in touches {\n            let location = touch.locationInNode(self)\n\n            let _node:SKNode = self.nodeAtPoint(location);\n\n            if(_gameScene.gameOver == false){\n\n                if(_node.name == \"jumpBtn\"){\n\n                    _gameScene.heroJump()\n                }\n\n            }else{\n\n                if(_node.name == \"playBtn\"){\n\n                    _gameScene.startGame()\n                }\n            }\n        }\n    }\n```", "```swift\nimport UIKit\nimport SceneKit\nimport SpriteKit\n\n```", "```swift\nfunc addSpriteKitOverlay(){\n\n    skScene = OverlaySKScene(size: _size, gameScene: self)\n    scnView.overlaySKScene = skScene\n    skScene.scaleMode = SKSceneScaleMode.ResizeFill\n\n}\n```", "```swift\nfunc addColladaObjects(){\n\n        addHero()\n        addGround()\n        addEnemy()\n        addSpriteKitOverlay()\n}\n```", "```swift\nfunc heroJump(){\n\nheroNode.physicsBody?.applyForce(SCNVector3Make(0, 1400, 0), impulse: true) \n\n}\n```", "```swift\n    func startGame(){\n\n        gameOver = false\n        skScene.jumpBtn.hidden = false\n        skScene.myLabel.hidden = false\n        skScene.playBtn.hidden = true\n        skScene.gameOverLabel.hidden = true\n\n        score = 0\n        skScene.myLabel.text = \"Score: \\(score)\"\n    }\n```", "```swift\n    func updateEnemy(){\n\n        enemyNode.position.z += -0.9\n\n        if((enemyNode.position.z - 5.0) < -40){\n\n            var factor = arc4random_uniform(2) + 1\n\n            if( factor == 1 ){\n                enemyNode.position = SCNVector3Make(0, 2.0 , 60.0)\n            }else{\n                enemyNode.position = SCNVector3Make(0, 15.0 , 60.0)\n            }\n             score++\n skScene.myLabel.text = \"Score: \\(score)\"\n        }\n    }\n```", "```swift\ngameOver = true\nGameOver()\n```", "```swift\nfunc GameOver(){\n\n    skScene.jumpBtn.hidden = true\n    skScene.playBtn.hidden = false\n    skScene.gameOverLabel.hidden = false\n\n    enemyNode.position = SCNVector3Make(0, 2.0 , 60.0)\n    heroNode.position = SCNVector3Make(0, 0, 0)\n}\n```", "```swift\nif(!gameOver){\n\n   updateEnemy()\n\n}\n```", "```swift\nscene.physicsWorld.gravity = SCNVector3Make(0, -300, 0)\n```", "```swift\njumpCounter--\n\nif(jumpCounter < 0 ){\n\n       jumpCounter = 0\n}\n```", "```swift\nif(jumpCounter == 0){\n                    heroNode.physicsBody?.applyForce(SCNVector3Make(0,\n                    1400,\n                    0),\n                    impulse: true) \n\n    jumpCounter = 25\n}\n```", "```swift\nvar parallaxWallNode1: SCNNode!\nvar parallaxWallNode2: SCNNode!\nvar parallaxFloorNode1: SCNNode!\nvar parallaxFloorNode2: SCNNode!\n```", "```swift\n    func addWallandFloorParallax(){\n\n       //Preparing Wall geometry        \n        let wallGeometry = SCNPlane(width: 250, height: 120)\n        wallGeometry.firstMaterial?.diffuse.contents = \"monster.scnassets/wall.png\"\n        wallGeometry.firstMaterial?.diffuse.wrapS = SCNWrapMode.Repeat\n        wallGeometry.firstMaterial?.diffuse.wrapT = SCNWrapMode.Repeat\n        wallGeometry.firstMaterial?.diffuse.mipFilter = SCNFilterMode.Linear\n        wallGeometry.firstMaterial?.diffuse.contentsTransform = SCNMatrix4MakeScale(6.25, 3.0, 1.0)\n\n        wallGeometry.firstMaterial?.normal.contents = \"monster.scnassets/wall_NRM.png\"\n        wallGeometry.firstMaterial?.normal.wrapS = SCNWrapMode.Repeat\n        wallGeometry.firstMaterial?.normal.wrapT = SCNWrapMode.Repeat\n        wallGeometry.firstMaterial?.normal.mipFilter = SCNFilterMode.Linear\n        wallGeometry.firstMaterial?.normal.contentsTransform = SCNMatrix4MakeScale(6.25, 3.0, 1.0)\n\n        wallGeometry.firstMaterial?.specular.contents = \"monster.scnassets/wall_SPEC.png\"\n        wallGeometry.firstMaterial?.specular.wrapS = SCNWrapMode.Repeat\n        wallGeometry.firstMaterial?.specular.wrapT = SCNWrapMode.Repeat\n        wallGeometry.firstMaterial?.specular.mipFilter = SCNFilterMode.Linear\n        wallGeometry.firstMaterial?.specular.contentsTransform = SCNMatrix4MakeScale(6.25, 3.0, 1.0)\n\n        wallGeometry.firstMaterial?.locksAmbientWithDiffuse = true\n\n      //Preparing floor geometry\n        let floorGeometry = SCNPlane(width: 120, height: 250)\n        floorGeometry.firstMaterial?.diffuse.contents = \"monster.scnassets/floor.png\"\n        floorGeometry.firstMaterial?.diffuse.wrapS = SCNWrapMode.Repeat\n        floorGeometry.firstMaterial?.diffuse.wrapT = SCNWrapMode.Repeat\n        floorGeometry.firstMaterial?.diffuse.mipFilter = SCNFilterMode.Linear\n        floorGeometry.firstMaterial?.diffuse.contentsTransform = SCNMatrix4MakeScale(12.0, 25, 1.0)\n\n        floorGeometry.firstMaterial?.normal.contents = \"monster.scnassets/floor_NRM.png\"\n        floorGeometry.firstMaterial?.normal.wrapS = SCNWrapMode.Repeat\n        floorGeometry.firstMaterial?.normal.wrapT = SCNWrapMode.Repeat\n        floorGeometry.firstMaterial?.normal.mipFilter = SCNFilterMode.Linear\n        floorGeometry.firstMaterial?.normal.contentsTransform = SCNMatrix4MakeScale(24.0, 50, 1.0)        \n        floorGeometry.firstMaterial?.specular.contents = \"monster.scnassets/floor_SPEC.png\"\n        floorGeometry.firstMaterial?.specular.wrapS = SCNWrapMode.Repeat\n        floorGeometry.firstMaterial?.specular.wrapT = SCNWrapMode.Repeat\n        floorGeometry.firstMaterial?.specular.mipFilter = SCNFilterMode.Linear\n        floorGeometry.firstMaterial?.specular.contentsTransform = SCNMatrix4MakeScale(24.0, 50, 1.0)\n\n        floorGeometry.firstMaterial?.locksAmbientWithDiffuse = true\n\n        //assign wall geometry to wall nodes\n  parallaxWallNode1 = SCNNode(geometry: wallGeometry)\n        parallaxWallNode1.rotation = SCNVector4Make(0, 1, 0, Float(-M_PI / 2))\n        parallaxWallNode1.position = SCNVector3Make(15, 0, 0)\n        scene.rootNode.addChildNode(parallaxWallNode1)\n\n        parallaxWallNode2 = SCNNode(geometry: wallGeometry)\n        parallaxWallNode2.rotation = SCNVector4Make(0, 1, 0, Float(-M_PI / 2))\n        parallaxWallNode2.position = SCNVector3Make(15, 0, 250)\n        scene.rootNode.addChildNode(parallaxWallNode2)\n\n        //assign floor geometry to floor nodes\n\n        parallaxFloorNode1 = SCNNode(geometry: floorGeometry)\n        parallaxFloorNode1.rotation = SCNVector4Make(0, 1, 0, Float(-M_PI / 2))\n        parallaxFloorNode1.rotation = SCNVector4Make(1, 0, 0, Float(-M_PI / 2))\n\n        parallaxFloorNode1.position = SCNVector3Make(15, 0, 0)\n        scene.rootNode.addChildNode(parallaxFloorNode1)\n\n        parallaxFloorNode2 = SCNNode(geometry: floorGeometry)\n        parallaxFloorNode2.rotation = SCNVector4Make(0, 1, 0, Float(-M_PI / 2))\n        parallaxFloorNode2.rotation = SCNVector4Make(1, 0, 0, Float(-M_PI / 2))\n        parallaxFloorNode2.position = SCNVector3Make(15, 0, 250)\n        scene.rootNode.addChildNode(parallaxFloorNode2)\n    }\n```", "```swift\nparallaxWallNode1.position.z += -0.5\nparallaxWallNode2.position.z += -0.5\nparallaxFloorNode1.position.z += -0.5\nparallaxFloorNode2.position.z += -0.5        \n\nif((parallaxWallNode1.position.z + 250) <= 0){\n     self.parallaxWallNode1.position = SCNVector3Make(15, 0, 250)\n}\n\nif((parallaxWallNode2.position.z + 250) <= 0){\n     self.parallaxWallNode2.position = SCNVector3Make(15, 0, 250)\n}\n\nif((parallaxFloorNode1.position.z + 250) <= 0){\n     self.parallaxFloorNode1.position = SCNVector3Make(15, 0, 250)\n}\n\nif((parallaxFloorNode2.position.z + 250) <= 0){\n     self.parallaxFloorNode2.position = SCNVector3Make(15, 0, 250)\n}\n```", "```swift\nfunc addRainParticle(){\n\nlet rain = SCNParticleSystem(named: \"rain\", inDirectory: nil)\n\n    var particleEmitterNode = SCNNode()        \n    particleEmitterNode = scene.rootNode.childNodeWithName(\"particleNode\", recursively: true)!\n\n    particleEmitterNode.addParticleSystem(rain)\n    scene.rootNode.addChildNode(particleEmitterNode)\n\nrain.warmupDuration = 10\n\n}\n```"]