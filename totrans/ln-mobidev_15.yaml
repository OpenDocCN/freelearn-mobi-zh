- en: Growing Traction and Improving Retention
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about traction, the proof that somebody wants
    to use your product and, in most cases, is willing to pay for it, resulting in
    a profitable business in the end. Now that we have obtained some actionable metrics,
    as we have learned in the previous chapter, we will see how to grow traction.
    Without sufficient retention (returning users to your app) or too much churn (users
    abandoning your app), the moment of truth will be gone quickly and we will lose
    traction. Let's investigate how we can increase the retention rate. Also, we will
    see what we can do the keep the churn rate low.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the definition of traction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding out how we can grow traction and when "growth hacking" comes into play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seeing how we can improve retention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to stay in touch with your app users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seeing what it takes to implement a notification mechanism to remind users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, what is traction? Basically, it is about upcoming patterns that indicate
    a scaling and repeatable business. Traction is an evidence of a sufficiently large
    market demand and more specifically about adoption and engagement. If you do well,
    traction is the confirmation of the hypotheses that you have about your product
    or service. Traction is about making actual progress and it is important in each
    phase of your app. It is about the first few early adopters that sign up when
    you just got started, and eventually it also is about the users that make (in-app)
    purchases. How well is your app doing converting people into users and users into
    customers?
  prefs: []
  type: TYPE_NORMAL
- en: Even emerging app clones (or copycats) are a sign of traction. It proves, along
    with your grown user base, that the problem that your app is solving really matters
    and that the problem is worth solving.
  prefs: []
  type: TYPE_NORMAL
- en: Things as profitability (revenues), the number of registered and active users
    (retention), engagement, traffic, and even partnerships are all things that you
    can use to measure traction. Be aware that isolated information is no real proof
    for traction. For example, you can run some campaigns to grow your user base but
    if the **Customer Acquisition Cost** (**CAC**) is higher than the **Average Revenue
    Per User** (**ARPU**) then it makes no sense to look only at the revenue to determine
    traction. You need to make sure that the **Lifetime Customer Value** (**LTV**)
    will be higher than the cost of onboarding new users. You need to lower the cost
    or you need to increase the LTV. To do the latter you can, for example, consider
    offering subscriptions. Other than one-time in-app purchases, it will lead to
    recurring revenue.
  prefs: []
  type: TYPE_NORMAL
- en: Working on the scalability of your apps, business will help to get and improve
    traction. However, to understand how this will work for your app, you will often
    need to do stuff that does not (yet) scale, as we have seen in [Chapter 11](774e65d5-5ac0-4ade-9f9e-cffb2a911441.xhtml),
    *Onboarding and Registration*. You first have to learn what works and what does
    not. The "concierge service" has been mentioned earlier and it is something that
    definitely does not scale. However, it could help you obtain a lot of useful insights.
    Other things that you can do include cold canvassing and networking in general.
    Since these strategies are things that business-oriented people love to do, but
    most developers will hate, we will examine what else there is that we can do to
    grow traction.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of things that you can do to improve awareness for your app
    and to find your early adopters. If people see your app listed on any of the following
    sites mentioned and decide to download your app, then you will see the first signs
    of traction.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to writing posts about your app on Facebook, LinkedIn, and Twitter,
    here are some places to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product hunt**: [https://www.producthunt.com](https://www.producthunt.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Betali.st**: [http://Betali.st](http://Betali.st)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start-up list**: [http://startupli.st](http://startupli.st)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reddit startups**: [https://www.reddit.com/r/startups](https://www.reddit.com/r/startups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the places where your (potential) early adopters are, people who are
    curious to learn about new apps and services. Since they love giving feedback
    about new products, these are exactly the people what you are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you should have a blog about your app (if not, start one right now),
    way before the first (beta) version of your app is launched. It is important to
    build an audience first before putting any effort into developing an app. Make
    sure that you have a clear call to action for the readers of your blog. Make it
    as convenient as possible to sign up for your email newsletter and send those
    newsletters on a regular basis to your subscribers. Once your app is out, continue
    your blogging and do some experiments (split testing for your email) to see what
    leads to the best conversion (from reading to opening your app, landing page and
    downloading, and using your app).
  prefs: []
  type: TYPE_NORMAL
- en: Freemium or premium only?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some say that the only relevant traction is price traction. If your app is completely
    free the demand for your app can be infinite. However, that alone is not really
    important if there is no revenue. Asking money for your app right from the beginning
    is the ultimate way to measure traction. The earlier you generate revenue, the
    faster you validate the app concept. If you think this approach won't work, think
    again and have a look at the various crowdfunding sites on the net. Of course,
    you need to have an awesome story about your app. You need to tell them what is
    so great about your app, but you already have a great story, right?
  prefs: []
  type: TYPE_NORMAL
- en: No business will survive without any income. In fact, a free app does not exist.
    The money has to come from somewhere. Offering in-app purchases is one way to
    monetize your app, but only a small amount of users (2% or less) will really do
    so. The other 98% will continue to use your app without ever paying for it. The
    freemium models work because hosting is inexpensive and because you can scale
    your app without too much effort. However, you still need to pay attention to
    the full 100% of the user group. You have to respond to their reviews and you
    have to keep posting on social media. That can be very time-consuming. The income
    from 2% of your users should cover the cost for that.
  prefs: []
  type: TYPE_NORMAL
- en: It can be difficult to decide what features should come with the paid variant
    of the app. You need to have a clear understanding of how valuable each part of
    your app is for your users. Also, you can decide to offer a premium app only.
    If you charge directly from the start for your app, you will raise the barrier,
    but your sales numbers will be a real proof of traction. In [Chapter 17](0efea3a6-95f2-42d3-9a36-a34bdbef1014.xhtml),
    *Monetization and Pricing Strategy*, about monetization, we will have a closer
    look at price strategies.
  prefs: []
  type: TYPE_NORMAL
- en: There are, of course, others ways to monetize your app. You can think of showing
    advertisements. Also, you can also think of a solution that utilizes the web and
    mobile channels. Do not think of your app as the product any longer, but think
    of your app as a channel for your service. So, you offer your app for free, but,
    on the web you ask your users for money for subscribing to your service. That
    approach works very well for business-oriented solutions in particular. The revenues
    will be higher, probably because the perceived value of an app alone is likely
    to be lower. It is just a matter of perception but perception is important when
    it comes to marketing. It may also have to do with the fact that, often, people
    are less willing to pay for an app running on a smaller device. This is a bit
    silly but nevertheless, it is true. Perhaps we can focus on developing apps for
    large TVs only? I am just kidding of course.
  prefs: []
  type: TYPE_NORMAL
- en: From the perspective of a developer, it makes no sense at all. Developers know
    that it takes the same amount of work and that the size of a device does not matter
    here. Anyway, the perceived value and the channels you use do matter. They will
    have an impact on the amount of traction and how it will be determined.
  prefs: []
  type: TYPE_NORMAL
- en: Without clear objectives, you cannot measure traction or any other kind of success.
    The more abstract your goals are, the more difficult it will be to perceive the
    outcome clearly. To make the outcome measurable (actionable metrics), you need
    to define clear goals. Clear goals come with numbers, such as how many new signups
    (1,000?) do we want to have in a particular amount of time (1 month?), or how
    many emails do we have to send to grow the conversion of our users by 25%?
  prefs: []
  type: TYPE_NORMAL
- en: Improving retention
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile app retention and engagement are metrics that can be an indication of
    your app's success. High app retention and engagement ratios often are a reason
    for your app's success. Retention says something about how often your users relaunch
    your app within a particular amount of time. Engagement is an indicator of activity.
    It says something about what they are doing while using your app, and how long
    and how often they are doing this within a particular session. Probably, the most
    important one of these two is retention. If you understand what makes your app
    sticky for your users, then you will be able to improve the retention rate.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should always wonder: what''s in it for them? And you should give your
    users some good reasons to come back to the app regularly. Social apps have the
    best retention rates. People come back because they want to be kept up to date
    on the regular stream of information. This is known as the **fear of missing out**
    (**FoMo**). It is a skill that Facebook has mastered completely. Unfortunately,
    unlike Facebook, most apps are not used on a daily basis.'
  prefs: []
  type: TYPE_NORMAL
- en: Churn is a phenomenon that is more or less the opposite of retention. There
    will always be churn, but you can try to keep it as low as possible. Today, numbers
    show that if an app is not started once a week there is a chance that 60% of people
    will forget about it. You need to keep your app relevant. You have to regularly
    offer fresh content and new features. It is needless to say that you have to inform
    the user about these updates. You can send them push notifications for example.
    That is a very common approach to catch the attention of users and send them back
    to your app!
  prefs: []
  type: TYPE_NORMAL
- en: An onboarding experience with a low barrier, offering fresh and relevant content
    and features, personalization (social sign up strategies could help here), incentification,
    and sending push notifications are all features that can greatly contribute to
    better retention and engagement values.
  prefs: []
  type: TYPE_NORMAL
- en: Incentification is closely related to gamification. Both come with rewards if
    the user has come to a particular achievement in your app. While gamification
    is more about digital incentives, such as badges (as available at Foursquare and
    Stack Overflow, for example), incentification is about real-world, non-digital
    rewards, such as a free cup of coffee at the nearest coffee shop. If you want
    to learn more about the concept of incentification, you can check out [http://kiip.me](http://kiip.me).
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to improve retention, resulting in better traction. For
    now, we will just examine how to stay in touch with our users by enabling push
    notifications. You need to give people a reason to keep coming back and you often
    need to remind people of the existence of your app. If you do not want your app
    to be forgotten, abandoned, and eventually deleted, you should kindly remind them
    of the app.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to improve retention, resulting in better traction. For
    now, we will just examine how to stay in touch with our users, by enabling push
    notifications. You need to give people a reason to keep coming back and you often
    need to remind people of the existence of your app. If you do not want your app
    to be forgotten, abandoned and eventually deleted, you should kindly remind them
    of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Please do not spam your users. Do not send too many messages and try, through
    segmentation, to send relevant information only. If your user stays away for too
    long and if you have something interesting to share with them you can send them
    a friendly reminder. It is an excellent candidate for a concierge service if you
    want to learn what type of reminders work best. Find out what type of messages
    works best and see what customer segments will show the best conversions. Once
    you have learned that then you can do the automation later. If you already have
    a large user base you can also perform an A/B test to see what works best. There
    are many services available that can help you with both the segmenting of your
    customers and running split tests.
  prefs: []
  type: TYPE_NORMAL
- en: Also, think about the frequency of your reminders. Is one week of abstinence
    a good time to send out a reminder? Or is two weeks better? It is important to
    tell a story and to build an experience. Stating what is in it for them should
    come with a clear call to action, such as "Check out our new feature X" or "Look
    at what your friend Y has posted".
  prefs: []
  type: TYPE_NORMAL
- en: Push notifications can help to increase retention rates. Numbers show that,
    on average, users who have opted-in to receive push notifications results in 25%
    higher retention rates. That seems to make sense. By the way, push notifications
    for iOS apps are always opt-in. Only if users state that they do want to receive
    push notifications, they will receive them. Android has an opt-out mechanism.
    Users install an app and they will receive push notifications unless they choose
    to opt-out.
  prefs: []
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three ways of communicating with your app users using notification
    messages and badges:'
  prefs: []
  type: TYPE_NORMAL
- en: Local notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-app notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Local notifications are like services, running on the user's device. The app
    does not need to be active to receive a local notification related to your app.
    They also do not need internet access or a server. Instead, they are scheduled
    for a particular date and time, like an alarm. They are initialized by your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'What you can do is schedule a local notification to remind the user about the
    app but cancel it as soon as the user launches your app. It is a great instrument
    to remind your user about your app''s existence:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/992065bc-60fe-4f26-84c2-2c99f3e5abca.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use local notifications to increase your app's retention rate. You can
    schedule a notification when your app is closed or loses focus but cancel them
    when your app becomes active again. If you set the fire date to one or two weeks
    from now and users forget about your app, they will receive a friendly reminder.
    If, however, they use the app within this particular time frame, then the notification
    will be canceled and the user will not be bothered with any reminder notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Push notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Push notifications involve a server (and with that an internet connection) that
    initiates the action. Such notifications are a great instrument for promotional
    actions, and can inform the user about the availability of new content and new
    features in the app. Further, it depends on the nature of the app to decide what
    notifications will be relevant. For a dating app, it would be nice to be notified
    about a new app. In this case, displaying a badge on the icon of the app indicating
    the number of new matches and messages also would be very helpful. For a news
    app, it would be great to receive a notification each time a new and important
    message comes in. You can create user segments based on interest or based on their
    geographical location, for example, to notify your user only about local news
    events.
  prefs: []
  type: TYPE_NORMAL
- en: In-app notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, you can use in-app notifications to indicate that there are new events.
    You can display a badge at those places, where it is relevant. This could be a
    tab or a menu item. You can also use app notifications to stimulate particular
    behavior while your app is being used. Think, for example, of a reminder notification
    such as "Rate this app 5 stars!" Some methods can be quite clever, like a dialog
    that is only shown if the user has used the app five times (engagement) and the
    app has not crashed.
  prefs: []
  type: TYPE_NORMAL
- en: Only then will the dialog ask for a 5-star rating! It is important to provide
    convenience and lower the barrier to rate the app for your users that are enthusiastic
    about your app. For users who might be less happy with your app, you can keep
    the barrier as is. This will help you get better App/Play Store ratings.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are components that do exactly this. One of them is iRate for iOS. With
    only a few lines of code, you can implement a ''Rate us'' or ''Give us 5 stars''
    popup in your app. You can configure when and under what conditions it will be
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4fea1c85-ff3e-4735-93d0-1d28f9f3685f.png)'
  prefs: []
  type: TYPE_IMG
- en: For each type of notification, it is important to not be annoying. Do not ask
    too much from the user too often. You should only notify a user if there is something
    relevant to mention. A push notification for no particular reason, just to let
    the user come back to the app may convert well once. However, if this happens
    too often, it will become annoying and your users might uninstall the app instead.
  prefs: []
  type: TYPE_NORMAL
- en: Services for push notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To distribute your push notifications to your Android and iOS devices, you need
    to have a push notification server that will distribute messages to the correct
    devices. Although you can build this yourself, it is more convenient to use one
    of the ready-made solutions that are available for this purpose. The benefits
    of existing solutions, besides a big-time saver, will be their scalability, multi-platform
    support, and segmentation options, making it easier to determine which message
    goes to what user.
  prefs: []
  type: TYPE_NORMAL
- en: Some examples of such solutions are Urban Airship, Azure Push Notification Hub,
    Amazon Push, Hosted Parse Servers solutions, as found at back4app.com for example,
    and Firebase push notification services. They all have different pricing plans
    and they support different OSs.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, here is a schematic view of Azure Push notification hubs. It
    can deliver push notifications to iOS and Android (And Windows Phone if you still
    really want to do so):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73cd3876-005b-4754-bd8b-87b71357ec61.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to deliver push notifications to operating systems other than Android
    or iOS, or if you want to deliver push notifications outside the western world,
    it is good to carefully examine the different options. Let's say you want to deliver
    your app to the Chinese market as well. In that case, it is good to know that
    Amazon supports Baidu Push notifications, since this is not supported by all services.
    Amazon has a single hub for sending notifications to any device no matter if it
    is running on Amazon, iOS, Baidu, Android or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Push notifications for Android are delivered through the **Google Cloud Messaging**
    (**GCM**) protocol. Apple uses **Apple Push Notification Service** (**APNS**)
    for iOS. Configuring push notifications for iOS is a little bit more complicated
    as it requires some hassle with certificates. However, if you are an iOS developer
    using certificates and distribution profiles, then you will not be scared of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back4App is a party that is offering Parse server hosting including support
    for push notifications (Android and iOS). You can easily target all users or specific
    users (segments):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0b9f5b1-fe86-4c33-a51c-234bdd30b85a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, most services offer support for Android and iOS and a couple
    of other platforms. Scalability, supported platforms, pricing plans, and ease
    of integration are all things to consider when choosing a push notification service
    provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Amazon** | **Apple****(APNS)** | **Baidu** | **Google (GCM)** | **Microsoft**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Amazon | Supported | Supported | Supported | Supported | Supported |'
  prefs: []
  type: TYPE_TB
- en: '| Azure | Supported | Supported | Not sure | Supported | Supported |'
  prefs: []
  type: TYPE_TB
- en: '| Firebase |  | Supported |  | Supported | ? |'
  prefs: []
  type: TYPE_TB
- en: '| Urban Airship | Supported | Supported |  | Supported | Supported |'
  prefs: []
  type: TYPE_TB
- en: '| Parse Server |  | Supported |  | Supported |  |'
  prefs: []
  type: TYPE_TB
- en: Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The approach for both platforms is more or less the same. If the user launches
    the app, the device and app will be registered for receiving push notifications.
    It will result in a token (or an optional registration ID for Android) that you
    can use later to send a notification to this particular device and for this particular
    app. The main difference between Android and iOS is that iOS uses an opt-in strategy
    for receiving notifications, while Android uses an opt-out strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'An iPhone user will see a question pop up which asks if he wants to allow the
    app to receive push notifications (opt-in). This is something the OS does for
    us when we register as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: For Android, we will just register the device and the app and we will receive
    push notifications, which the user won't notice until he receives his first notification.
    On Android, you can turn receiving push notifications off (opt out) using the
    Settings app.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, here is an Android Java example of such registrations in your `App` class.
    The `GCM_PROJECT_NUMBER` refers to the project number in the Google developer
    console, but we will come to that later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, here is how it is done for iOS (Swift 3.x, iOS 10) in the `AppDelegate`
    class. For iOS, you also need to configure a couple of things in the developer''s
    portal, which we will see later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To set up GCM for your Android app, you have to go to your Google Developer
    Console, which you can find at [https://console.developers.google.com/](https://console.developers.google.com/).
  prefs: []
  type: TYPE_NORMAL
- en: There you can configure your app and obtain a server key.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up **Apple push notifications** (**APNS**), you need to go the Apple
    Developer''s portal and find your app at the identifiers/app ID''s section (assuming
    that you have already created an app id for your app):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45fa06aa-b3be-43a8-a641-fbc17d134043.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Edit button and scroll down to the Push Notifications section.
    Click on the Download button to download the certificate or click on the Create
    Certificate button depending on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions. Use the `keychain` app to create a CSR file (certificate
    signing request). Doing this from the building machine is preferable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upload the request file (CSR) to the Apple Developer''s portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac3e44b1-4c83-40af-a324-8629d531eb65.png)'
  prefs: []
  type: TYPE_IMG
- en: Download the certificate (that will contain both the private and public part)
    and double-click to install. In the `keychain` app, find the APNS certificate
    and choose Export from the Context menu.
  prefs: []
  type: TYPE_NORMAL
- en: Provide a password for the file and save it. You now have a file with a P12
    extension that you can later upload to your notification service, for example,
    to Azure Push Notification hubs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows the section in Notification hubs, where you can
    upload this certificate file in sandbox mode (development only). This approach
    is more or less the same for other services. They all require you to upload this
    file to make the magic happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f8ec168-361e-4744-bb6e-368235d82153.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is an example of all the push services you can configure here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa377940-f5f8-495e-918f-ae6e855ebae3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After deciding which notification service to use, find some good references
    (books or tutorials on the subject) as, in particular, iOS push notification configuration
    can be a bit tricky.
  prefs: []
  type: TYPE_NORMAL
- en: Handling an incoming notification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If a notification comes in, it will be shown in the Messenger section, something
    that the OS will provide for us. In addition, we can define what to do with it.
    In Android, we can implement a `PushHandler` class that consumes the notification
    and defines specific actions for it using the `NotificationCompat` builder. Here
    is an Android Java example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For iOS, you can do the same thing. This is the event handling in the `AppDelegate`
    class, and it is a Swift 4/3.x, iOS 11 example (for previous versions of iOS,
    it works in a different way), and it uses the Parse Server to get the push notifications
    delivered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can determine as well what should happen when a push notification
    arrives (to some extent). The completion handler determines if a notification
    or badge is shown and if a sound will be played:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sending a notification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To send a notification, you can use the web interface of the service or you
    can use the features that the service provides if you want to send a message programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a cloud code example for the Parse Server (Back4App). It sends
    a message to all devices that are listening to a particular channel. You can send
    a push notification to all users or you can set up channels for customer segmentation.
    You can set the number of the badge on the icon (iOS only), the title, and the
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'No matter which service you are using, the basic payload is always the same.
    Also, note that you can send custom parameters with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: So far, for a high-level perspective on push notifications, you now have an
    idea what it takes to implement it. To continue on this subject, examine the tutorials
    that Google and Apple provide about it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what the definition of traction is and why it is
    important. We have seen that engagement and retention are important elements too.
    We have seen that there are different types of notifications and what the benefits
    are of each type. You can remind your user about specific events in your app.
    This will increase the retention rate. Notifications can also help you to improve
    the awareness for your app, for example, by asking for a user rating for your
    app. Finally, we have seen what notification services exist to deliver push notifications
    and what it takes to actually implement a push notification mechanism for your
    Android and iOS apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will investigate scalability. In the beginning, you
    often do things that do not scale, but once you have established sufficient amount
    of traction, it is time to think about a scalability strategy. This is particularly
    important when your app uses a backend.
  prefs: []
  type: TYPE_NORMAL
