["```swift\n    private NSObject orientationObserver;\n    public override void ViewWillAppear (bool animated)\n    {\n      base.ViewWillAppear (animated);\n      UIDevice.CurrentDevice.BeginGeneratingDeviceOrientationNotifications();\n      this.orientationObserver = UIDevice.Notifications.ObserveOrientationDidChange((s, e) => {\n        this.lblOrientation.Text = UIDevice.CurrentDevice.Orientation.ToString();\n      });\n    }\n    ```", "```swift\n    public override void ViewWillDisappear (bool animated)\n    {\n      base.ViewWillDisappear (animated);\n      NSNotificationCenter.DefaultCenter.RemoveObserver(this.orientationObserver);\n        UIDevice.CurrentDevice.EndGeneratingDeviceOrientationNotifications();\n    }\n    ```", "```swift\nUIDevice.CurrentDevice.BeginGeneratingDeviceOrientationNotifications();\n```", "```swift\nthis.orientationObserver = UIDevice.Notifications.ObserveOrientationDidChange((s, e) => {\n  this.lblOrientation.Text = UIDevice.CurrentDevice.Orientation.ToString();\n});\n```", "```swift\nNSNotificationCenter.DefaultCenter.RemoveObserver(this.orientationObserver);\nUIDevice.CurrentDevice.EndGeneratingDeviceOrientationNotifications();\n```", "```swift\n    public override bool ShouldAutorotate ()\n    {\n      return true;\n    }\n    ```", "```swift\n    public override UIInterfaceOrientationMask GetSupportedInterfaceOrientations ()\n    {\n      return UIInterfaceOrientationMask.All;\n    }\n    ```", "```swift\n    public override void DidRotate (UIInterfaceOrientation fromInterfaceOrientation)\n    {\n      base.DidRotate (fromInterfaceOrientation);\n      this.lblOrientation.Text = this.InterfaceOrientation.ToString();\n    }\n    ```", "```swift\npublic override UIInterfaceOrientationMask GetSupportedInterfaceOrientations ()\n{\n  return UIInterfaceOrientationMask.All;\n}\n```", "```swift\npublic override UIInterfaceOrientationMask GetSupportedInterfaceOrientations() {\n  return UIInterfaceOrientationMask.LandscapeLeft | UIInterfaceOrientationMask.LandscapeRight;\n}\n```", "```swift\n// Inside our UINavigationController subclass:\npublic override ShouldAutoRotate() {\n  return this.TopViewController.ShouldAutoRotate();\n}\npublic override UIInterfaceOrientationMask GetSupportedInterfaceOrientations() {\n  return this.TopViewController.GetSupportedInterfaceOrientations();\n}\n```", "```swift\n    private NSObject proximityObserver;\n    ```", "```swift\n    public override void ViewWillAppear (bool animated)\n    {\n      base.ViewWillAppear (animated);\n      UIDevice.CurrentDevice.ProximityMonitoringEnabled = true;\n      if (UIDevice.CurrentDevice.ProximityMonitoringEnabled)\n      {\n        this.proximityObserver = UIDevice.Notifications.ObserveProximityStateDidChange((s, e) => {\n          Console.WriteLine(\"Proximity state: {0}\", UIDevice.CurrentDevice.ProximityState);\n        });\n      }\n    }\n    ```", "```swift\nUIDevice.CurrentDevice.ProximityMonitoringEnabled = true;\n```", "```swift\nif (UIDevice.CurrentDevice.ProximityMonitoringEnabled)\n```", "```swift\nthis.proximityObserver = UIDevice.Notifications.ObserveProximityStateDidChange((s, e) => {\n  Console.WriteLine(\"Proximity state: {0}\", UIDevice.CurrentDevice.ProximityState);\n});\n```", "```swift\n    private NSObject batteryStateChangeObserver;\n    public override void ViewWillAppear (bool animated)\n    {\n      base.ViewWillAppear (animated);\n      UIDevice.CurrentDevice.BatteryMonitoringEnabled = true;\n     this.batteryStateChangeObserver = UIDevice.Notifications.ObserveBatteryStateDidChange((s, e) => {\n     this.lblOutput.Text = string.Format(\"Battery level: {0}\", UIDevice.CurrentDevice.BatteryLevel);\n     Console.WriteLine(\"Battery state: {0}\", UIDevice.CurrentDevice.BatteryState);\n     });\n    }\n    ```", "```swift\nUIDevice.CurrentDevice.BatteryMonitoringEnabled = true;\n```", "```swift\nthis.lblOutput.Text = string.Format(\"Battery level: {0}\", UIDevice.CurrentDevice.BatteryLevel);\n```", "```swift\nConsole.WriteLine(\"Battery state: {0}\", UIDevice.CurrentDevice.BatteryState);\n```", "```swift\nprivate NSObject batteryLevelChangedObserver;\n//...\nthis.batteryLevelChangedObserver = UIDevice.Notifications.ObserveBatteryLevelDidChange((s, e) => {..//\n```", "```swift\n    public override bool CanBecomeFirstResponder\n    {\n      get {  return true; }\n    }\n    public override void ViewDidAppear (bool animated)\n    {\n      base.ViewDidAppear (animated);\n      this.BecomeFirstResponder();\n    }\n    public override void MotionBegan (UIEventSubtype motion, UIEvent evt)\n    {\n      base.MotionBegan (motion, evt);\n      this.lblOutput.Text = \"Motion started!\";\n    }\n    public override void MotionEnded (UIEventSubtype motion, UIEvent evt)\n    {\n      base.MotionEnded (motion, evt);\n      this.lblOutput.Text = \"Motion ended!\";\n    }\n    public override void MotionCancelled (UIEventSubtype motion, UIEvent evt)\n    {\n      base.MotionCancelled (motion, evt);\n      this.lblOutput.Text = \"Motion cancelled!\";\n    }\n    ```", "```swift\npublic override bool CanBecomeFirstResponder\n{\n  get {  return true; }\n}\n```", "```swift\npublic override void ViewDidAppear (bool animated)\n{\n  base.ViewDidAppear (animated);\n  this.BecomeFirstResponder();\n}\n```", "```swift\n    public override void TouchesMoved (NSSet touches, UIEvent evt)\n    {\n      base.TouchesMoved (touches, evt);\n      UITouch touch = touches.AnyObject as UITouch;\n      UIColor currentColor = this.View.BackgroundColor;\n      float red, green, blue, alpha;\n      currentColor.GetRGBA(out red, out green, out blue, out alpha);\n      PointF previousLocation = touch.PreviousLocationInView(this.View);\n      PointF touchLocation = touch.LocationInView(this.View);\n      if (previousLocation.X != touchLocation.X)\n      {\n        this.lblOutput.Text = \"Changing background color...\";\n        float colorValue = touchLocation.X / this.View.Bounds.Width;\n        this.View.BackgroundColor = UIColor.FromRGB(colorValue, colorValue, colorValue);\n      }\n    }\n    ```", "```swift\nUITouch touch = touches.AnyObject as UITouch;\n```", "```swift\nPointF previousLocation = touch.PreviousLocationInView(this.View);\nPointF touchLocation = touch.LocationInView(this.View);\n```", "```swift\nUITouch[] allTouches = touches.ToArray<UITouch>();\n```", "```swift\n    private void OnPinchGesture(UIPinchGestureRecognizer pinch)\n    {\n      switch (pinch.State)\n      {\n      case UIGestureRecognizerState.Began:\n        this.lblOutput.Text = \"Pinch began!\";\n        break;\n      case UIGestureRecognizerState.Changed:\n        this.lblOutput.Text = \"Pinch changed!\";\n        break;\n      case UIGestureRecognizerState.Ended:\n        this.lblOutput.Text = \"Pinch ended!\";\n        break;\n      }\n    }\n    ```", "```swift\n    UIPinchGestureRecognizer pinchGesture = new UIPinchGestureRecognizer(this.OnPinchGesture);\n    this.View.AddGestureRecognizer(pinchGesture);\n    ```", "```swift\nUIPinchGestureRecognizer pinchGesture = new UIPinchGestureRecognizer(this.OnPinchGesture);\n```", "```swift\nswitch (pinch.State) { \n//â€¦\n```", "```swift\n    private class DragLowerLeftGesture : UIGestureRecognizer\n    {\n      private PointF startLocation;\n      private RectangleF lowerLeftCornerRect;\n      public override UIGestureRecognizerState State\n      {\n        get\n        {\n          return base.State;\n        }  set\n        {\n          base.State = value;\n        }\n      }\n      public override void TouchesBegan (NSSet touches, UIEvent evt)\n      {\n        base.TouchesBegan (touches, evt);\n        UITouch touch = touches.AnyObject as UITouch;\n        this.startLocation = touch.LocationInView(this.View);\n        RectangleF viewBounds = this.View.Bounds;\n        this.lowerLeftCornerRect = new RectangleF(0f, viewBounds.Height - 50f, 50f, 50f);\n        if (this.lowerLeftCornerRect.Contains(this.startLocation))\n        {\n          this.State = UIGestureRecognizerState.Failed;\n        }  else\n        {\n          this.State = UIGestureRecognizerState.Began;\n        }\n      }\n      public override void TouchesMoved (NSSet touches, UIEvent evt)\n      {\n        base.TouchesMoved (touches, evt);\n        this.State = UIGestureRecognizerState.Changed;\n      }\n      public override void TouchesEnded (NSSet touches, UIEvent evt)\n      {\n        base.TouchesEnded (touches, evt);\n        UITouch touch = touches.AnyObject as UITouch;\n        PointF touchLocation = touch.LocationInView(this.View);\n        if (this.lowerLeftCornerRect.Contains(touchLocation))\n        {\n          this.State = UIGestureRecognizerState.Ended;\n        }  else\n        {\n          this.State = UIGestureRecognizerState.Failed;\n        }\n      }\n    }\n    ```", "```swift\n    private void OnDragLowerLeft(NSObject gesture)\n    {\n      DragLowerLeftGesture drag = (DragLowerLeftGesture)gesture;\n      switch (drag.State)\n      {\n      case UIGestureRecognizerState.Began:\n        this.lblOutput.Text = \"Drag began!\";\n        break;\n      case UIGestureRecognizerState.Changed:\n        this.lblOutput.Text = \"Drag changed!\";\n        break;\n      case UIGestureRecognizerState.Ended:\n        this.lblOutput.Text = \"Drag ended!\";\n        break;\n      case UIGestureRecognizerState.Failed:\n        this.lblOutput.Text = \"Drag failed!\";\n        break;\n      }\n    }\n    ```", "```swift\n    DragLowerLeftGesture dragGesture = new DragLowerLeftGesture();\n    dragGesture.AddTarget(this.OnDragLowerLeft);\n    this.View.AddGestureRecognizer(dragGesture);\n    ```", "```swift\nprivate class DragLowerLeftGesture : UIGestureRecognizer\n```", "```swift\ndragGesture.AddTarget(this.OnDragLowerLeft);\n```", "```swift\nDragLowerLeftGesture drag = (DragLowerLeftGesture)gesture;\n```", "```swift\n    this.btnStop.Enabled = false;\n    UIAccelerometer.SharedAccelerometer.UpdateInterval = 1 / \n      10;\n    this.btnStart.TouchUpInside += delegate {\n      this.btnStart.Enabled = false;\n      UIAccelerometer.SharedAccelerometer.Acceleration += this.Acceleration_Received;\n      this.btnStop.Enabled = true;\n    } ;\n    this.btnStop.TouchUpInside += delegate {\n      this.btnStop.Enabled = false;\n      UIAccelerometer.SharedAccelerometer.Acceleration -= this.Acceleration_Received;\n      this.btnStart.Enabled = true;\n    } ;\n    ```", "```swift\n    private void Acceleration_Received (object sender, UIAccelerometerEventArgs e)\n    {\n      this.lblOutput.Text = string.Format(\"X: {0}\\nY: {1}\\nZ: {2}\", e.Acceleration.X, e.Acceleration.Y, e.Acceleration.Z);\n    }\n    ```", "```swift\nUIAccelerometer.SharedAccelerometer.Acceleration += this.Acceleration_Received;\n```", "```swift\nUIAccelerometer.SharedAccelerometer.UpdateInterval = 1 / 10;\n```", "```swift\nUIAccelerometer.SharedAccelerometer.Acceleration -= this.Acceleration_Received;\n```", "```swift\n    private CMMotionManager motionManager;\n    ```", "```swift\n    this.motionManager = new CMMotionManager();\n    this.motionManager.GyroUpdateInterval = 1 / 10;\n    this.btnStart.TouchUpInside += delegate {\n      this.motionManager.StartGyroUpdates(NSOperationQueue.MainQueue, this.GyroData_Received);\n    } ;\n    this.btnStop.TouchUpInside += delegate {\n      this.motionManager.StopGyroUpdates();\n    } ;\n    ```", "```swift\n    private void GyroData_Received(CMGyroData gyroData, NSError error)\n    {\n      Console.WriteLine(\"rotation rate x: {0}, y: {1}, z: {2}\", gyroData.RotationRate.x, gyroData.RotationRate.y, gyroData.RotationRate.z);\n    }\n    ```", "```swift\nprivate CMMotionManager motionManager;\n//...\n   this.motionManager = new CMMotionManager();\n```", "```swift\nthis.motionManager.GyroUpdateInterval = 1 / 10;\n```", "```swift\nthis.motionManager.StartGyroUpdates(NSOperationQueue.MainQueue, this.GyroData_Received);\n```", "```swift\nprivate void GyroData_Received(CMGyroData gyroData, NSError error)\n```", "```swift\nConsole.WriteLine(\"rotation rate x: {0}, y: {1}, z: {2}\", gyroData.RotationRate.x, gyroData.RotationRate.y, gyroData.RotationRate.z);\n```", "```swift\npublic static double RadiansToDegrees (double radians)\n{\n  return (radians * 180 / Math.PI);\n}\n```"]