- en: Chapter 1. Downloading LevelDB and Building with OS X
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。下载LevelDB和用OS X构建
- en: This chapter takes you through downloading LevelDB and building it using the
    command-line techniques specific to building on OS X. It then shows how to set
    up an Xcode project for a simple OS X application, with iOS details in [Chapter
    2](ch02.html "Chapter 2. Installing LevelDB and Building for iOS"), *Installing
    LevelDB and Building for iOS*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导你下载LevelDB并使用针对OS X构建的特定命令行技术构建它。然后，它将展示如何设置一个简单的OS X应用程序的Xcode项目，iOS的详细信息请参阅[第2章](ch02.html
    "第2章。安装LevelDB和为iOS构建")，*安装LevelDB和为iOS构建*。
- en: The build error messages and how we deal with them will be useful for any Mac-based
    developers using open source projects. These often assume familiarity with the
    Unix development tools and installing idioms. We will start with a high level
    of detail to ease people in, who have only used Xcode or a similar IDE on other
    platforms. Later chapters will summarize the steps, so you may want to come back
    here for a refresher.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 构建错误消息以及我们如何处理它们将对任何使用开源项目的基于Mac的开发者都有用。这些通常假设开发者熟悉Unix开发工具和安装惯例。我们将从高度详细的内容开始，以便让那些只在其他平台上的Xcode或类似IDE上使用过的人更容易理解。后面的章节将总结步骤，因此你可能需要回来复习。
- en: The instructions in this chapter will assume that you are using the terminal
    in OS X. The `$` thatwe will use, as the terminal prompt, will vary according
    to your local terminal settings, usually showing the current working directory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的说明将假设你正在使用OS X的终端。我们将用作终端提示符的`$`将根据你的本地终端设置而变化，通常显示当前工作目录。
- en: The examples in this chapter use a minimal amount of C++ (using the easier style
    of C++11). Complete log files of the installation steps and source code are available
    at the Packt Publishing website, and later chapters have much larger samples as
    complete apps.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例使用了最小限度的C++（使用C++11的更易用的风格）。安装步骤和源代码的完整日志文件可在Packt Publishing网站上找到，后面的章节有更大的示例作为完整的应用程序。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The instructions in this chapter are similar to generic Unix commands but you
    will probably find that commands, directory structures, and permissions vary slightly.
    Most Linux distributions have similar directory layouts but OS X has varied from
    generic Unix practice and even from OS X earlier standards.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的说明与通用Unix命令类似，但你可能会发现命令、目录结构和权限略有不同。大多数Linux发行版具有类似的目录布局，但OS X与通用Unix实践甚至与早期的OS
    X标准有所不同。
- en: Installing LevelDB
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装LevelDB
- en: 'People who want to actively work using the latest source can use Gitto clone
    the repository, starting with the instructions, at: [https://code.google.com/p/leveldb/source/checkout](https://code.google.com/p/leveldb/source/checkout).
    The project maintainers typically update the release archives after a small number
    of changes, so there is little incentive to work with the repository unless you
    plan to actively contribute. A Git clone based on the source code used in this
    book and oriented towards building for Apple is: [https://code.google.com/r/dentaroo-appleflavouredleveldb/](https://code.google.com/r/dentaroo-appleflavouredleveldb/).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想要积极使用最新源代码的人可以使用Git克隆仓库，从以下说明开始：[https://code.google.com/p/leveldb/source/checkout](https://code.google.com/p/leveldb/source/checkout)。项目维护者通常在少量更改后更新发布存档，因此除非你计划积极贡献，否则很少有动力与仓库一起工作。一个基于本书中使用的源代码，面向为Apple构建的Git克隆是：[https://code.google.com/r/dentaroo-appleflavouredleveldb/](https://code.google.com/r/dentaroo-appleflavouredleveldb/)。
- en: To decide if you want to update your copy of LevelDB, you can check the changed
    history at [https://code.google.com/p/leveldb/source/list](https://code.google.com/p/leveldb/source/list).
    Most of the following screenshots and samples are from Version 1.10.1, released
    on May 14, 2013\. Any reliance on later releases will be discussed. At least one
    patch to LevelDB was contributed as a direct result of this book, issue 177, building
    for iOS on later compilers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要决定你是否想更新你的LevelDB副本，你可以查看变更历史记录在[https://code.google.com/p/leveldb/source/list](https://code.google.com/p/leveldb/source/list)。以下的大部分截图和示例来自2013年5月14日发布的版本1.10.1。对后续版本的任何依赖都将进行讨论。至少有一个针对LevelDB的补丁是直接由于这本书的贡献，问题177，在后续编译器上为iOS构建。
- en: LevelDB, other libraries, and our samples were compiled primarily with Xcode
    Version 4.6.3 and checked with the developer previews of Xcode 5 as they were
    made available.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: LevelDB、其他库和我们的示例主要使用Xcode版本4.6.3编译，并使用Xcode 5的开发者预览版进行验证，因为它们是可用的。
- en: 'The stable LevelDB releases are always available from the download page: [https://code.google.com/p/leveldb/downloads/list](https://code.google.com/p/leveldb/downloads/list).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定的LevelDB版本始终可在下载页面获得：[https://code.google.com/p/leveldb/downloads/list](https://code.google.com/p/leveldb/downloads/list)。
- en: Open that page and click on 1.10.1 which takes you to a specific page that allows
    you to click on the `.tar.gz` file and download it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 打开该页面，然后点击1.10.1，这将带您到一个特定的页面，允许您点击`.tar.gz`文件并下载它。
- en: 'Using the standard Unix utility, `tar` will uncompress the `.gz` step and then
    unpack the `.tar` archive in one command. See `tar --help` if you want more information:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标准的Unix工具`tar`，将解压缩`.gz`步骤，然后在一个命令中解包`.tar`存档。如果您想了解更多信息，请查看`tar --help`：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now the file is unpacked, change the directory into it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在文件已解压，将目录更改到其中：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can clean up the `.tar` file here as it is no longer needed, but I recommend
    archiving a copy of your `zip` file, for later comparison and reversion.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以清理这里的`.tar`文件，因为它不再需要，但我建议存档一份您的`zip`文件副本，以供以后比较和恢复。
- en: Building the LevelDB libraries
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建LevelDB库
- en: Unlike many open source projects, LevelDB doesn't come with a configure script.
    To build our first version of it, just type `make` at the command line (see `log
    of make.txt`). It is important to understand the `makefile` which is a plain text
    file you can open in any editor. At the top it has a commented section to allow
    you to set OPT to specify a debug or a production build (the default).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多开源项目不同，LevelDB没有附带配置脚本。要构建我们的第一个版本，只需在命令行中输入`make`（见`make.txt`日志）。理解`makefile`非常重要，它是一个纯文本文件，您可以用任何编辑器打开它。在顶部有一个注释部分，允许您设置OPT以指定调试或生产构建（默认）。
- en: 'The targets are labels that appear at the left of the lines, ending in colons,
    for example, `db_bench`. Most makefiles have, at least, targets `all` and `clean`.
    The `clean` target removes all the previous build products so you guarantee a
    build with the changed settings. The LevelDB source comes with a range of tests,
    invoked by `make check` (see `log of make check.txt`). In the output of `make
    check`, you will see:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是出现在行左侧的标签，以冒号结尾，例如`db_bench`。大多数makefile至少有`all`和`clean`目标。`clean`目标会删除所有之前的构建产品，这样您就可以保证使用更改后的设置进行构建。LevelDB源代码附带了一系列测试，通过`make
    check`调用（见`make check.txt`日志）。在`make check`的输出中，您将看到：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The compression test is skipped because a default install of LevelDB lacks the
    snappy compression library, which is used to quickly compress values in tables.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于LevelDB的默认安装缺少用于快速压缩表中值的snappy压缩库，因此跳过了压缩测试。
- en: A further check you can make on your LevelDB library is to run the `db_bench`
    command which is a timing utility built by the makefile. It is built as part of
    the `make check` or can be built at any time with the command, `build db_bench`.
    If you run `db_bench` now and save the output, you can compare the benchmark figures
    before and after the inclusion of snappy. We will also look at the effect of using
    snappy with data, specific to your application in [Chapter 10](ch10.html "Chapter 10. Tuning
    and Key Policies"), *Tuning and Key Policies*, on tuning.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对LevelDB库进行的进一步检查是运行`db_bench`命令，这是一个由makefile构建的时间工具。它作为`make check`的一部分构建，也可以通过命令`build
    db_bench`在任何时候构建。如果您现在运行`db_bench`并保存输出，您可以在包含snappy前后比较基准测试结果。我们还将查看使用针对您应用程序特定的数据使用snappy的影响，在[第10章](ch10.html
    "第10章。调整和关键策略") *调整和关键策略* 中，我们将探讨调整。
- en: Installing snappy
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装snappy
- en: The snappy compression library is useful if your databases have very big values,
    such as, complete documents stored in a single record. You will often see it referred
    to in discussions of LevelDB.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的数据库具有非常大的值，例如存储在单个记录中的完整文档，snappy压缩库非常有用。您经常在LevelDB的讨论中看到它被提及。
- en: For completeness, we will cover installing snappy and building it with default
    options. Unfortunately, at the time of writing, it doesn't build with the C++11
    and libc++ options we will be using in the remaining chapters. So, after any experimentation
    you do with snappy here, please use the following instructions to remove it, to
    avoid compilation errors with libc++.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性，我们将介绍如何安装snappy以及使用默认选项构建它。不幸的是，在撰写本文时，它无法使用我们在后续章节中将使用的C++11和libc++选项进行构建。因此，在您在此处对snappy进行任何实验后，请使用以下说明来删除它，以避免与libc++相关的编译错误。
- en: 'To install snappy we go through a similar process of downloading an archive
    from [http://code.google.com/p/snappy/downloads/list](http://code.google.com/p/snappy/downloads/list),
    then unpacking, using a second terminal window to make it easier to keep track
    of the different libraries. This time, there is a configure script. We build and
    install with the commands:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装snappy，我们通过一个类似的过程从[http://code.google.com/p/snappy/downloads/list](http://code.google.com/p/snappy/downloads/list)下载存档，然后解压，使用第二个终端窗口以便更容易跟踪不同的库。这次，有一个配置脚本。我们使用以下命令构建和安装：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After these three processes (see logs) you will have the include files and
    built libraries for snappy in a standard location in `/usr`, where the LevelDB
    makefile looks for them. Rebuild your LevelDB libraries with (in the terminal
    window in the LevelDB directory):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这三个过程（见日志）后，你将在`/usr`的标准位置找到snappy的包含文件和构建库，LevelDB makefile会在这里查找它们。在LevelDB目录的终端窗口中，使用以下命令重新构建你的LevelDB库：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will see **–DSNAPPY** shown in the log of the `make` command, indicating
    that it detected the snappy installation and changed the options to match. If
    you repeat the `make check` you will see the compression test working.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在`make`命令的日志中看到**–DSNAPPY**，这表示它检测到了snappy的安装并更改了选项以匹配。如果你重复执行`make check`，你会看到压缩测试正在工作。
- en: Removing snappy
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除snappy
- en: If you have installed snappy for these tests, as mentioned above, you will probably
    want to remove it. An uninstall target is built into the makefile, that will remove
    it from the standard location which is checked by the LevelDB makefile.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了snappy进行这些测试，如上所述，你可能想将其删除。makefile中内置了一个卸载目标，可以从标准位置将其删除，这是LevelDB
    makefile检查的位置。
- en: 'In a terminal with working directory set to your snappy directory:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个工作目录设置为你的snappy目录的终端中：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now change the directory back to your LevelDB source and `make clean`, then
    repeat the original `make` to rebuild your libraries.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将目录切换回你的LevelDB源目录，执行`make clean`，然后重复原始的`make`命令以重新构建你的库。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is a good idea to establish a habit of cleaning before building. Almost all
    makefiles will rebuild if source files have been dirtied, but don't respond to
    the environmental changes so that there is a need to forcefull rebuilds by cleaning.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建之前清理是一个好习惯。几乎所有的makefile都会在源文件被污染后重新构建，但不会对环境变化做出响应，因此需要通过清理强制进行全面重建。
- en: Moving to Xcode
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动到Xcode
- en: Now that the build process is successfully building the library, utility, and
    test programs, you could continue to program the command-line tools in the plain
    Unix manner by editing the `cpp` files and building them with the make command.
    For OS X GUI and all iOS apps, we have to build with Xcode.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建过程已经成功构建了库、实用程序和测试程序，你可以继续以纯Unix方式编程命令行工具，通过编辑`cpp`文件并使用make命令构建它们。对于OS
    X GUI和所有iOS应用，我们必须使用Xcode进行构建。
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We will start by creating a workspace. It is a good idea to get into the habit
    of using workspaces to wrap your projects, because the new **CocoaPods** standard
    for delivering open source modules relies on them. There is no technical reason
    at this stage why we have to use a workspace, just building good habits.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个工作空间。使用工作空间来封装项目是一个好习惯，因为新的**CocoaPods**标准用于交付开源模块，它依赖于它们。在这个阶段，我们没有技术上的理由必须使用工作空间，只是养成好习惯。
- en: In Xcode, navigate to **File** | **New** | **Workspace** and create a workspace
    somewhere you can use as a basis for your development.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xcode中，导航到**文件** | **新建** | **工作空间**，在你可以用作开发基础的地方创建一个工作空间。
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: I recommend avoiding spaces in path names because sometimes it causes a script
    or utility to do something unexpected. This is also a good advice for the Windows
    developers, even those who are using the latest Visual Studio. It's not the core
    tools which catch you, but the associated scripts, command lines, or environment
    variables.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议避免在路径名称中使用空格，因为有时这会导致脚本或实用程序执行一些意外的操作。这也是给Windows开发者的一个很好的建议，即使他们使用的是最新的Visual
    Studio。不是核心工具让你陷入困境，而是相关的脚本、命令行或环境变量。
- en: 'Now navigate to **File** | **New** | **Project** which presents a template
    chooser. Choose an OS X **Application** in the left panel and click on the **Command
    Line Tool** in the icons provided, then click on **Next**:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在导航到**文件** | **新建** | **项目**，这将显示一个模板选择器。在左侧面板中选择OS X **应用程序**，然后点击提供的图标中的**命令行工具**，然后点击**下一步**：
- en: '![Moving to Xcode](img/1015OS_01_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![移动到Xcode](img/1015OS_01_01.jpg)'
- en: Choosing the Command Line Tool template
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 选择命令行工具模板
- en: 'Choose a C++ project and uncheck the **Use Automatic Reference Counting** checkbox.
    Make sure you specify the **Product Name** and **Company Identifier**. You will
    see as you type in those entries that the **Bundle Identifier** is being generated
    from them: `Packt.LevelDB-OSX-Sample01`. As shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个 C++ 项目，并取消选择 **使用自动引用计数** 复选框。确保您指定了 **产品名称** 和 **公司标识符**。当您输入这些条目时，您会看到
    **捆绑标识符** 正在从它们生成：`Packt.LevelDB-OSX-Sample01`。如下面的截图所示：
- en: '![Moving to Xcode](img/1015OS_01_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![移动到 Xcode](img/1015OS_01_02.jpg)'
- en: Entering options and seeing Bundle Identifier
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输入选项并查看捆绑标识符
- en: The **Next** button takes you to a save dialog where you specify the location
    in which the project will be created. Leave the **Source** **Control** option
    checked and choose **Add to:** your workspace, which we called `levelDB_OSX`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一步** 按钮将您带到保存对话框，您可以在其中指定项目将被创建的位置。保留 **源** **控制** 选项，并选择 **添加到**：我们称为 `levelDB_OSX`
    的工作区。'
- en: You will see a project window appear in Xcode showing the **Build Settings**.
    In the top-left is the **Run** button. Just click on it to prove your command-line
    tool compiles and runs. At the bottom you should see the **All Output** of the
    embedded terminal window showing `Hello, World!`
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到 Xcode 中出现一个项目窗口，显示 **构建设置**。在左上角是 **运行** 按钮。只需点击它，以证明您的命令行工具可以编译和运行。在底部，您应该看到嵌入的终端窗口的
    **所有输出** 显示 `Hello, World!`
- en: If this is your first time in Xcode, congratulations! You have just compiled
    and run a simple C++ program. Now we're going to copy a bit of code from the document
    `doc/index.html` and use that to prove our simple *Hello World* is a *Hello LevelDB*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次使用 Xcode，恭喜！您刚刚编译并运行了一个简单的 C++ 程序。现在我们将从文档 `doc/index.html` 中复制一段代码，并使用它来证明我们的简单
    *Hello World* 是一个 *Hello LevelDB*。
- en: 'We will start with the lines:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从以下行开始：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice a red warning icon springs up rapidly to the left of the `<assert>` line.
    Clicking on it tells us **assert file not found** and a similar message is visible
    in the left panel of the **Navigator**. Change the `<assert>` to a `<cassert>`
    and the message goes away (this looks for a standard C++ header instead of the
    traditional Unix assert header).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一个红色的警告图标迅速出现在 `<assert>` 行的左侧。点击它告诉我们 **assert 文件未找到**，并且在 **导航器** 的左侧面板中可以看到类似的消息。将
    `<assert>` 改为 `<cassert>`，消息就会消失（这会查找标准的 C++ 头文件而不是传统的 Unix assert 头文件）。
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户中下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以将文件直接通过电子邮件发送给您。
- en: '![Moving to Xcode](img/1015OS_01_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![移动到 Xcode](img/1015OS_01_03.jpg)'
- en: Error due to failure to find db.h header
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于找不到 db.h 头文件导致的错误
- en: Now the red icon is next to the `leveldb/db.h` include and is warning us that
    it doesn't know that file. We will fix that in a minute, Xcode doesn't know where
    to find the LevelDB headers. For now, just copy the other lines from `index.html`
    to create a database and then the final `delete db;` to close it again.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在红色图标位于 `leveldb/db.h` 包含旁边，并警告我们它不知道该文件。我们将在一分钟内修复它，Xcode 不知道在哪里可以找到 LevelDB
    头文件。现在，只需将 `index.html` 中的其他行复制到创建数据库，然后是最终的 `delete db;` 来再次关闭它。
- en: 'The final code looks like:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的代码看起来像：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We need to point Xcode to the header file location, which means setting a path
    in the settings but also deciding where the files should live. This is very much
    a matter of taste. You could leave them where you unpacked and built them, or
    put a copy in a standard location. I''m going to copy them to the standard location
    for Unix headers:`/usr/local/include`. Just drag the LevelDB directory from the
    include directory in our LevelDB installation (remember where we unpacked it previously)
    to `/usr/local/include`. The directory we are copying contains `db.h` and `env.h`
    as well as a few other `.h` files:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将 Xcode 指向头文件的位置，这意味着在设置中设置一个路径，同时也需要决定文件应该放在哪里。这很大程度上是一个个人喜好问题。您可以将它们留在您解压和构建的地方，或者将副本放在一个标准位置。我将将它们复制到
    Unix 头文件的标准位置：`/usr/local/include`。只需将 LevelDB 目录从我们的 LevelDB 安装中的包含目录（记得我们之前解压了它）拖到
    `/usr/local/include`。我们复制的目录包含 `db.h` 和 `env.h` 以及一些其他的 `.h` 文件：
- en: '![Moving to Xcode](img/1015OS_01_04.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![移动到Xcode](img/1015OS_01_04.jpg)'
- en: User header search paths
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 用户头文件搜索路径
- en: Copying these files still hasn't fixed our compilation warnings. We need to
    modify our project to tell it where to look for the include files. Click on the
    Xcode target **LevelDB_OSX_Sample01** in the navigator (the top of the tree) and
    on its name in the **Targets** panel that appears to the right, so you see the
    **Build Settings** tab. Scroll down about half way to the **Search Path** section
    and add an entry in **User Header Search Paths** for `/usr/local/includ`e with
    recursive turned off. It will appear inline as `/usr/local/include/`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 复制这些文件仍然没有解决我们的编译警告。我们需要修改我们的项目，让它知道在哪里查找包含文件。在导航器（树的顶部）中点击Xcode目标**LevelDB_OSX_Sample01**，然后在出现的**目标**面板中点击其名称，以便看到**构建设置**选项卡。向下滚动大约一半到达**搜索路径**部分，并在**用户头文件搜索路径**中添加一个条目`/usr/local/includ`e，递归设置为关闭。它将直接显示为`/usr/local/include/`。
- en: 'Now the red icon next to the `leveldb/db.h` text should go away, but we still
    can''t build, we need to add the library. Click on the **Build** **Phases** tab
    and open the section **Link Binary With Libraries**. Drag the `libleveldb.a` file
    into this section (from the copy you put in `/usr/local/lib`), as shown in the
    following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，位于`leveldb/db.h`文本旁边的红色图标应该消失，但我们仍然无法构建，我们需要添加库。点击**构建****阶段**选项卡，打开**链接二进制与库**部分。将`libleveldb.a`文件拖动到这个部分（从你放在`/usr/local/lib`中的副本），如图所示：
- en: '![Moving to Xcode](img/1015OS_01_05.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![移动到Xcode](img/1015OS_01_05.jpg)'
- en: Static library added to build phases
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 静态库添加到构建阶段
- en: 'You would think this would be enough to be able to build, but trying will cause
    an error:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为这已经足够构建了，但尝试会导致错误：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The problem is that the default build is linked with libstdc++ and the default
    template uses libc++. The LevelDB library uses `std::string` objects across its
    interface, so you have to ensure the same standard libraries are used with both,
    library and application, to avoid crashes and unpredictable runtime errors:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于默认的构建版本链接了libstdc++，而默认的模板使用了libc++。LevelDB库在其接口中使用了`std::string`对象，因此你必须确保库和应用程序都使用相同的标准库，以避免崩溃和不可预测的运行时错误：
- en: '![Moving to Xcode](img/1015OS_01_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![移动到Xcode](img/1015OS_01_06.jpg)'
- en: Choosing the libstdc++ library
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 选择libstdc++库
- en: Go back to the **Build Settings** tab and scroll to the **Apple LLVM compiler
    4.2 – Language** panel. The **C++ Standard Library** allows you to choose **libstdc++
    (GNU C++ standard library)**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到**构建设置**选项卡，并滚动到**Apple LLVM编译器 4.2 – 语言**面板。**C++标准库**允许你选择**libstdc++ (GNU
    C++标准库)**。
- en: Choose that and you should be able to finally build and run your little test
    program by clicking the big run icon. Then go have a look in the `/tmp/testdb`
    folder to see the database files created.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 选择它后，你应该能够通过点击大型的运行图标最终构建并运行你的小测试程序。然后去查看`/tmp/testdb`文件夹，看看创建的数据库文件。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we went through a typical experience for using Unix-oriented
    open source, getting LevelDB downloaded and built with the command line. We survived
    some common build errors and learned about differences in C++ library models.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们经历了一个典型的使用以Unix为导向的开源软件的过程，通过命令行下载并构建了LevelDB。我们克服了一些常见的构建错误，并了解了C++库模型之间的差异。
- en: With the libraries built and installed, we learned how to include them into
    an Xcode project and build a simple OS X command-line program. Next, we will learn
    how to vary this process for an iOS app.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在库构建和安装后，我们学习了如何将它们包含到Xcode项目中并构建一个简单的OS X命令行程序。接下来，我们将学习如何为iOS应用程序调整这个过程。
