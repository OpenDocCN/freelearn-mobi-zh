["```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    init {\n```", "```kt\n        viewModelScope.launch {\n```", "```kt\n            val job = launch {\n```", "```kt\n                fetchMovies()\n```", "```kt\n            }\n```", "```kt\n            ...\n```", "```kt\n            job.cancel()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    init {\n```", "```kt\n        viewModelScope.launch() {\n```", "```kt\n            val job = launch {\n```", "```kt\n                fetchMovies()\n```", "```kt\n            }\n```", "```kt\n            ...\n```", "```kt\n            job.cancel()\n```", "```kt\n            job.join()\n```", "```kt\n            hideProgressBar()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    init {\n```", "```kt\n        viewModelScope.launch() {\n```", "```kt\n            val job = launch {\n```", "```kt\n                fetchMovies()\n```", "```kt\n            }\n```", "```kt\n            ...\n```", "```kt\n            job.cancelAndJoin()\n```", "```kt\n            hideProgressBar()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    private val scope = CoroutineScope(Dispatchers.Main +\n```", "```kt\n      Job())\n```", "```kt\n    init {\n```", "```kt\n        scope.launch {\n```", "```kt\n            val job1 = launch {\n```", "```kt\n                fetchMovies()\n```", "```kt\n            }\n```", "```kt\n            val job2 = launch {\n```", "```kt\n                displayLoadingText()\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    override fun onCleared() {\n```", "```kt\n        scope.cancel()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel: ViewModel() { \n```", "```kt\n    private val scope = CoroutineScope(Dispatchers.Main +\n```", "```kt\n      Job()) \n```", "```kt\n    init { \n```", "```kt\n        scope.launch() { \n```", "```kt\n            val job1 = launch { \n```", "```kt\n                fetchMovies() \n```", "```kt\n            } \n```", "```kt\n            val job2 = launch { \n```", "```kt\n                displayLoadingText()\n```", "```kt\n            } \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n    fun cancelAll() { \n```", "```kt\n        scope.coroutineContext.cancelChildren()\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel: ViewModel() { \n```", "```kt\nprivate lateinit var movieJob: Job\n```", "```kt\n    init { \n```", "```kt\n        movieJob = scope.launch() { \n```", "```kt\n            fetchMovies() \n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    fun stopFetching() { \n```", "```kt\n        movieJob.cancel(CancellationException(\"Cancelled by\n```", "```kt\n          user\"))\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nclass SensorActivity : AppCompatActivity() {\n```", "```kt\n    private val scope = CoroutineScope(Dispatchers.IO)\n```", "```kt\n    private lateinit var job: Job\n```", "```kt\n   …\n```", "```kt\n    private fun processSensorData() {\n```", "```kt\n        job = scope.launch {\n```", "```kt\n            if (isActive) {\n```", "```kt\n                val data = fetchSensorData()\n```", "```kt\n                saveData(data)\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    fun stopProcessingData() {\n```", "```kt\n        job.cancel()\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nclass SensorActivity : AppCompatActivity() {\n```", "```kt\n    private val scope = CoroutineScope(Dispatchers.IO)\n```", "```kt\n    private lateinit var job: Job\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        processSensorData()\n```", "```kt\n    }\n```", "```kt\n    private fun processSensorData() {\n```", "```kt\n        job = scope.launch {\n```", "```kt\n            delay (1_000L)\n```", "```kt\n            val data = fetchSensorData()\n```", "```kt\n            saveData(data)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    fun stopProcessingData() {\n```", "```kt\n        job.cancel()\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\n    implementation ‘org.jetbrains.kotlinx:kotlinx-\n      coroutines-android:1.6.0’\n    ```", "```kt\n    <TextView\n        android:id=\"@+id/textView\"\n        style=\"@style/TextAppearance.AppCompat.Large\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        tools:text=\"0\" />\n    ```", "```kt\n    private val scope = CoroutineScope(Dispatchers.Main)\n    private?var job: Job? = null\n    private lateinit var textView: TextView\n    private var count = 100\n    ```", "```kt\n    textView = findViewById(R.id.textView)\n    ```", "```kt\n    private fun countdown() {\n        count--\n        textView.text = count.toString()\n    }\n    ```", "```kt\n    job = scope.launch {\n        while (count > 0) {\n            delay(100)\n            countdown()\n        }\n    } \n    ```", "```kt\n    <string name=\"stop\">Stop</string>\n    ```", "```kt\n    <Button\n            android:id=\"@+id/button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"@string/stop\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@id/textView\" />\n    ```", "```kt\n    val button = findViewById<Button>(R.id.button)\n    ```", "```kt\n    button.setOnClickListener {\n        job?.cancel()\n    }\n    ```", "```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    init {\n```", "```kt\n        viewModelScope.launch {\n```", "```kt\n            val job = launch {\n```", "```kt\n                withTimeout(5_000L) {\n```", "```kt\n                    fetchMovies()\n```", "```kt\n                }\n```", "```kt\n            }\n```", "```kt\n            ...\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    init {\n```", "```kt\n        viewModelScope.launch() {\n```", "```kt\n            val job = async {\n```", "```kt\n                fetchMovies()\n```", "```kt\n            }\n```", "```kt\n            val movies = withTimeoutOrNull(5_000L) {\n```", "```kt\n                job.await()\n```", "```kt\n            }\n```", "```kt\n            ...\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    init {\n```", "```kt\n        viewModelScope.launch() {\n```", "```kt\n            try {\n```", "```kt\n                fetchMovies()\n```", "```kt\n            } catch (exception: Exception) {\n```", "```kt\n                Log.e(\"MovieViewModel\",\n```", "```kt\n                  exception.message.toString())\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    init {\n```", "```kt\n        viewModelScope.launch() {\n```", "```kt\n            val job = async {\n```", "```kt\n                fetchMovies()\n```", "```kt\n            }\n```", "```kt\n            var movies = emptyList<Movie>()\n```", "```kt\n            try {\n```", "```kt\n                movies = job.await()\n```", "```kt\n            } catch (exception: Exception) {\n```", "```kt\n                Log.e(\"MovieViewModel\",\n```", "```kt\n                  exception.message.toString())\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel: ViewModel() {\n```", "```kt\n    private val exceptionHandler =\n```", "```kt\n      CoroutineExceptionHandler { _, exception ->\n```", "```kt\n        Log.e(\"MovieViewModel\",\n```", "```kt\n          exception.message.toString())\n```", "```kt\n    }\n```", "```kt\n    private val scope = CoroutineScope(exceptionHandler)\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\n    if ((0..9).random() == 0) throw Exception(\"An error\n      occurred\")\n    ```", "```kt\n    job = scope.launch {\n        try {\n            while (count > 0) {\n                delay(100)\n                countdown()\n            }\n        } catch (exception: Exception) {\n            //TODO\n        }\n    }\n    ```", "```kt\n    Snackbar.make(textView, exception.message.toString(),\n      Snackbar.LENGTH_LONG).show()\n    ```"]