["```swift\nprotocol ProtocolName {\n   var readWriteProperty1 {get set}\n   var readOnlyProperty2 {get}\n   methodName1()\n   methodName2()\n}\n```", "```swift\nclass Burger {\n}\nstruct Fries {\n}\nenum Sauce { \n   case chili \n   case tomato\n}\n```", "```swift\nprotocol CalorieCount {\n   var calories: Int { get }\n   func description() -> String\n}\n```", "```swift\nclass Burger: CalorieCount {\n   let calories = 800\n   func description() -> String {\n      return \"This burger has \\(calories) calories\"\n   }\n}\n```", "```swift\nstruct Fries: CalorieCount {\n   let calories = 500\n   func description() -> String {\n      return \"These fries have \\(calories) calories\"\n   }\n}\n```", "```swift\nclass ExistingType {\n   property1\n   method1()\n}\nextension ExistingType : ProtocolName {\n   property2\n   method2()\n}\n```", "```swift\nenum Sauce {\n   case chili \n   case tomato\n}\nextension Sauce: CalorieCount {\n   var calories: Int {\n      switch self {\n      case .chili:\nreturn 20 \ncase .tomato: \n         return 15\n      }\n   }\n   func description() -> String {\n      return \"This sauce has \\(calories) calories\"\n   }\n} \n```", "```swift\n    let burger = Burger()\n    let fries = Fries()\n    let sauce = Sauce.tomato\n    let foodArray: [CalorieCount] = [burger, fries, sauce]\n    ```", "```swift\n    var totalCalories = 0\n    for food in foodArray {\n       totalCalories += food.calories\n    }\n    print(totalCalories)\n    ```", "```swift\ndo {\n   try expression1\n   statement1\n} catch {\n   statement2\n}\n```", "```swift\n    enum WebsiteError: Error {\n       case noInternetConnection\n       case siteDown\n       case wrongURL\n    }\n    ```", "```swift\n    func checkWebsite(siteUp: Bool) throws -> String {\n       if siteUp == false {\n         throw WebsiteError.siteDown\n       }\n       return \"Site is up\"\n    }\n    ```", "```swift\n    let siteStatus = true\n    try checkWebsite(siteUp: siteStatus)\n    ```", "```swift\n    Playground execution terminated: An error was thrown and was not caught:\n    __lldb_expr_5.WebsiteError.siteDown\n    ```", "```swift\n    let siteStatus = false\n    do block tries to execute the checkWebsite(siteUp:) function and prints the status if successful. If there is an error, instead of crashing, the statements in the catch block are executed, and the error message siteDown appears in the Debug area.TipYou can make your program handle different error conditions by implementing multiple `catch` blocks. See this link for details: [https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html](https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html).\n    ```"]