- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building App Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will build user-friendly app navigation through three
    primary patterns: bottom navigation, the navigation drawer, and tabbed navigation.
    Through guided theory and practice, you will learn how each of these patterns
    works so that users can easily access your app’s content. This chapter will also
    focus on making the user aware of where they are in the app and which level of
    your app’s hierarchy they can navigate to.'
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will know how to use these three primary navigation
    patterns and understand how they work with the app bar to support navigation.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, you explored fragments and the **fragment lifecycle**
    and employed Jetpack navigation to simplify their use in your apps. In this chapter,
    you will learn how to add different types of navigation to your app while continuing
    to use Jetpack navigation.
  prefs: []
  type: TYPE_NORMAL
- en: You will start off by learning about the navigation drawer, the earliest widely
    adopted navigational pattern used in Android apps, before exploring bottom navigation
    and tab navigation. You’ll learn about the Android navigation user flow, how it
    is built around destinations, and how they govern navigation within the app.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between primary and secondary destinations will be explained,
    as well as which one of the three primary navigation patterns is more suitable,
    depending on your app’s use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation drawer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bottom navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tabbed navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The complete code for all the exercises and the activity in this chapter is
    available on GitHub at [https://packt.link/B2rz6](https://packt.link/B2rz6).
  prefs: []
  type: TYPE_NORMAL
- en: Navigation overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android navigation user flow is built around **destinations** within your
    app. There are primary destinations available at the top level of your app and,
    subsequently, are always displayed in the main app navigation and secondary destinations.
    A guiding principle of each of the three navigation patterns is to contextually
    provide information about the main section of the app the user is in at any point
    in time.
  prefs: []
  type: TYPE_NORMAL
- en: This can take the form of a label in the top app bar of the destination the
    user is in, optionally displaying an arrow hint that the user is not at the top
    level, and/or providing highlighted text and icons in the **user interface** (**UI**)
    that indicate the section the user is in. Navigation in your app should be fluid
    and natural, intuitively guiding the user while also providing some context of
    where they are at any given point in time.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the three navigation patterns you will explore accomplishes this goal
    in varying ways. Some of these navigational patterns are more suitable for use
    with a higher number of top-level primary destinations to display, and others
    are suitable for less.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation drawer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **navigation drawer** is one of the most common navigation patterns used
    in Android apps and was certainly the first pattern to be widely adopted. The
    following is a screenshot of the culmination of the next exercise, which shows
    a simple navigation drawer in its closed state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – App with the navigation drawer closed](img/B19411_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – App with the navigation drawer closed
  prefs: []
  type: TYPE_NORMAL
- en: The navigation drawer is accessed through what has become commonly known as
    the hamburger menu, which is the icon with three horizontal lines at the top left
    of *Figure 4**.1*. The navigation options are not visible on the screen, but contextual
    information about the screen you are on is displayed in the top app bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'An overflow menu can also accompany this on the right-hand side of the screen,
    through which other contextually relevant navigation options can be accessed.
    The following screenshot is of a navigation drawer in the open state, showing
    all the navigation options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – App with the navigation drawer open](img/B19411_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – App with the navigation drawer open
  prefs: []
  type: TYPE_NORMAL
- en: Upon selecting the hamburger menu, the navigation drawer slides out from the
    left with the current section highlighted. This can be displayed with or without
    an icon. Due to the nature of the navigation occupying the height of the screen,
    it is best suited to five or more top-level destinations.
  prefs: []
  type: TYPE_NORMAL
- en: The destinations can also be grouped together to indicate multiple hierarchies
    of primary destinations (shown by the dividing line in the preceding screenshot),
    and these hierarchies can also have labels. In addition, the drawer content is
    also scrollable. In summary, the navigation drawer is a very convenient way to
    provide quick access to many different app destinations.
  prefs: []
  type: TYPE_NORMAL
- en: A weakness of the navigation drawer is that it requires the user to select the
    hamburger menu for the destinations to become visible. Tabs and bottom navigation
    (with fixed tabs), in contrast, are always visible. However, this is conversely
    also a strength of the navigation drawer as more screen space can be used for
    the app’s content.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started with the first exercise of this chapter and create a navigation
    drawer so that we can access all the sections of an app.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.01 – creating an App with a navigation drawer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will create a new app in Android Studio named `Navigation
    Drawer` using the `Empty Activity` project template while leaving all the other
    defaults as they are. There are wizard options where you can create a new project
    with all the navigation patterns you are going to produce in the exercises within
    this chapter, but we will build the apps incrementally to guide you through the
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: You will build an app that often uses a navigation drawer, such as a news or
    mail app. The sections we will be adding are **Home**, **Favorites**, **Recents**,
    **Archive**, **Bin**, and **Settings**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project with an `Empty Activity` called `Navigation Drawer`. Do
    not use the **Navigation Drawer Activity** project template, as we are going to
    use incremental steps to build the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the Gradle dependencies you will require to `app/build.gradle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `strings.xml` and `themes.xml` in the `res/values` folder with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: strings.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: themes.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the activity element with name `MainActivity` in the `AndroidManifest.xml`
    to NOT use an Action Bar. This will be provided by the Navigation Drawer layout.
    Go to `app` | `manifests` | `AndroidManifest.xml` and add the `android:theme`
    attribute with the `NoActionBar` style as in the snippet of code shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the following fragments (`HomeFragment`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`FavoritesFragment`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`RecentFragment`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ArchiveFragment`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SettingsFragment`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BinFragment`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ContentFragment`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change each of these fragment layouts to use the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The only difference is the `android:text` attribute, which will have the corresponding
    string from the `strings.xml` file. So, create these fragments with the correct
    string, indicating which fragment the user is viewing.
  prefs: []
  type: TYPE_NORMAL
- en: This may seem a bit repetitive, and one single fragment could be updated with
    this text, but it demonstrates how you would separate different sections in a
    real-world app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `fragment_home.xml` with the following content, which adds a button
    (this is the body content you can see in *Figure 4**.1*, with the closed navigation
    drawer):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`TextView` is the same as what’s specified in the other fragment layouts, except
    it has an ID (`id`) with which it constrains the button below it.'
  prefs: []
  type: TYPE_NORMAL
- en: Create the navigation graph that will be used in the app. Select `res` folder
    is selected in the Project see this option. Select `mobile_navigation.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This creates the navigation graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – The Android Studio New Resource File dialog](img/B19411_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – The Android Studio New Resource File dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `mobile_navigation.xml` file in the `res/navigation` folder and update
    it with the code from the file in the following link. A truncated version of the
    code is shown here. Use this link to access the entire code: [https://packt.link/ZRDiT](https://packt.link/ZRDiT).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: mobile_navigation.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This creates all the destinations in your app. However, it doesn’t specify whether
    these are primary or secondary destinations. This should be familiar from the
    fragment Jetpack navigation exercise from the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important point to note here is `app:startDestination="@+id/nav_home`,
    which specifies what will be displayed to start with when the navigation loads
    and that there is an action available from within `HomeFragment` to move to the
    `nav_content` destination in the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You are now going to see how this is set up in `HomeFragment` and its layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `HomeFragment` and add two `import` statements for the `Button` and `Navigation`
    imports and update `onCreateView` to set up the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HomeFragment
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This uses the `ClickListener` navigation to complete the `R.id.nav_home_to_content`
    action when `button_home` is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: However, these changes will not do anything yet as you still need to set up
    the navigation host for your app and add all the other layout files, along with
    the navigation drawer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Nav` host fragment by creating a new file in the layout folder called
    `content_main.xml`. This can be done by right-clicking on the `layout` folder
    in the `res` directory and then going to `FragmentContainerView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll notice that the navigation graph is set to the graph you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With that, the body of the app and its destination have been set up. Now, you
    need to set up the UI navigation. Create another layout resource file called `nav_header_main.xml`
    and add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the layout that’s displayed in the header of the navigation drawer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the app bar with a toolbar layout file called `app_bar_main.xml`, and
    include the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This integrates the main body layout of the app with the app bar that appears
    above it. The remaining part is to create the items that will appear in the navigation
    drawer and create and populate the navigation drawer with these items.
  prefs: []
  type: TYPE_NORMAL
- en: To use icons with these menu items, you need to copy the vector assets in the
    drawable folder of the completed exercise to the drawable folder of your project.
    Vector assets use coordinates for points, lines, and curves to layout images with
    associated color information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'They are significantly smaller when compared to PNG and JPG images, and vectors
    can be resized to different sizes without loss of quality. You can find them here:
    [https://packt.link/CurtF](https://packt.link/CurtF).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the following drawables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`favorites.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`archive.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recent.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`home.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a menu with these items. To do this, go to `activity_main_drawer`, and
    then populate it with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This sets up the menu items that will appear in the navigation drawer itself.
    The name of the IDs is the magic that ties up the menu items to the destinations
    within the navigation graph.
  prefs: []
  type: TYPE_NORMAL
- en: If the IDs of the menu items (in `activity_main_drawer.xml`) exactly match the
    IDs of the destinations in the navigation graph (which, in this case, are fragments
    within `mobile_navigation.xml`), then the destination is automatically loaded
    into the navigation host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The layout for `MainActivity` ties the navigation drawer to all the layouts
    specified previously. Open `activity_main.xml` and update it with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, an `include` is used to add `app_bar_main.xml`. The `<include>`
    element allows you to add layouts that will be replaced at compile time with the
    actual layout itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'They allow us to encapsulate different layouts as they can be reused in multiple
    layout files within the app. `NavigationView` (the class that creates the navigation
    drawer) specifies the layout files you have just created to configure its header
    and menu items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that you have specified all the layout files, update `MainActivity` by
    adding the following interaction logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s go through the preceding code. The `setSupportActionBar(toolbar)`
    line configures the toolbar used in the app by referencing it from the layout
    and setting it. Retrieving `NavHostFragment` is done with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you add the menu items you want to display in the navigation drawer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `drawer_layout` is the container for the `nav_view`, the main app bar, and
    its included content.
  prefs: []
  type: TYPE_NORMAL
- en: This may seem like you are doing this twice as these items are displayed in
    the `activity_main_drawer.xml` menu for the navigation drawer. However, the function
    of setting these in `AppBarConfiguration` is that these primary destinations will
    not display an up arrow when they are selected as they are at the top level.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also adds `drawer_layout` as the last parameter to specify which layout
    should be used when the hamburger menu is selected to display in the navigation
    drawer. The next line is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This sets up the app bar with the navigation graph so that any changes that
    are made to the destinations are reflected in the app bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the last statement in `onCreate`, and it specifies the item within
    the navigation drawer that should be highlighted when the user clicks on it. The
    next function in the class handles pressing the up button for the secondary destination,
    ensuring that it goes back to its parent primary destination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The app bar can also display other menu items through the overflow menu, which,
    when configured, is displayed as three vertical dots at the top on the right-hand
    side. Let’s create an overflow menu to display the **Settings** screen.
  prefs: []
  type: TYPE_NORMAL
- en: To add the overflow menu to the app bar, go to `main.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update it with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This configuration shows one item: `Settings`. Since it specifies the same
    ID as the `SettingsFragment` destination in the navigation graph, `android:id="@+id/nav_settings"`
    it will open the `SettingsFragment` fragment.'
  prefs: []
  type: TYPE_NORMAL
- en: The attribute being set to `app:showAsAction="never"` ensures it will stay as
    a menu option within the three dots overflow menu and will not appear on the app
    bar itself. There are other values for `app:showAsAction`, which set menu options
    to always appear on the app bar and if there is room.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the full list here: [https://developer.android.com/guide/topics/resources/menu-resource](https://developer.android.com/guide/topics/resources/menu-resource).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the overflow menu to the app bar, add the following to the `MainActivity`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will also need to add the following imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `onCreateOptionsMenu` function selects the menu to add to the app bar, while
    `onOptionsItemSelected` handles what to do when the item is selected using the
    `item.onNavDestinationSelected(findNavController(R.id.nav_host_fragment))` navigation
    function. This is used to navigate to the destination within the navigation graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app and navigate to a top-level destination using the navigation drawer.
    The following screenshot shows an example of navigating to the `Recent` destination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Recent menu item opened from the navigation drawer](img/B19411_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Recent menu item opened from the navigation drawer
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open the navigation drawer again you will see that the `Recent` menu
    item is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – The highlighted Recent menu item in the navigation drawer](img/B19411_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – The highlighted Recent menu item in the navigation drawer
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Home** menu item again to display the button with the label **LINK
    TO** **CONTENT BUTTON**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – The Home screen with a button for the secondary destination](img/B19411_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – The Home screen with a button for the secondary destination
  prefs: []
  type: TYPE_NORMAL
- en: 'Click this button to go to the secondary destination. You will see an up arrow
    displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Secondary destination with an up arrow displayed](img/B19411_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – Secondary destination with an up arrow displayed
  prefs: []
  type: TYPE_NORMAL
- en: 'In all the preceding screenshots, the overflow menu is displayed. After selecting
    it, you will see a fragment with the up arrow displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Settings Fragment](img/B19411_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Settings Fragment
  prefs: []
  type: TYPE_NORMAL
- en: Although there are quite a few steps to go through to set up an app with a navigation
    drawer, once created, it is very configurable. By adding a menu item entry to
    the drawer menu and a destination to the navigation graph, a new fragment can
    be created and set up for use immediately.
  prefs: []
  type: TYPE_NORMAL
- en: This removes a lot of the boilerplate code you needed to use fragments in the
    previous chapter. The next navigational pattern you’ll explore is bottom navigation.
    This has become the most popular navigational pattern in Android, largely because
    it makes the main sections of the app easily accessible.
  prefs: []
  type: TYPE_NORMAL
- en: Bottom navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Bottom navigation** is used when there are a limited number of top-level
    destinations, and these can range from three to five primary destinations that
    are not related to each other. Each item on the bottom navigation bar displays
    an icon and an optional text label.'
  prefs: []
  type: TYPE_NORMAL
- en: This navigation allows quick access as the items are always available, no matter
    which secondary destination of the app the user navigates to.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.02 – adding bottom navigation to your app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new app in Android Studio named `Bottom Navigation` using the **Empty
    Activity** project template, leaving all the other defaults as they are. Do not
    use the **Bottom Navigation Activity** project template, as we are going to use
    incremental steps to build the app.
  prefs: []
  type: TYPE_NORMAL
- en: You will build a loyalty app that provides offers, rewards, and so on for customers
    who have signed up to use it. Bottom navigation is quite common for this kind
    of app because there will typically be limited top-level destinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Many of the steps are very similar to the previous exercise, as you will be
    using Jetpack navigation and defining destinations in a navigation graph and a
    corresponding menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new project with an `Empty Activity` called `Bottom Navigation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the Gradle dependencies you will require to `app/build.gradle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append `strings.xml` in the `res/values` folder with the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: strings.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create eight fragments with the following names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HomeFragment`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContentFragment`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OffersFragment`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RewardsFragment`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SettingsFragment`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TicketsFragment`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CartFragment`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply the same layout that you applied in the previous exercise for all the
    fragments adding the corresponding string resource except for `fragment_home.xml`.
    For this layout, use the same layout file that you used in *Exercise 4.01 – creating
    an App with a* *navigation drawer*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the navigation graph as you did in the previous exercise and call it
    `mobile_navigation.xml`. Update it with the code from the following file provided
    in the link. A truncated version of the code is shown here. See the link for the
    entire code block you need to use: [https://packt.link/Fwuyl](https://packt.link/Fwuyl).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: mobile_navigation.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `onCreateView` function in `HomeFragment` to use the destination
    in the navigation graph to navigate to `ContentFragment`. You will also need to
    add the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the destinations have been defined in the navigation graph, create
    the menu in the bottom navigation to reference these destinations. First, however,
    you need to gather the icons that will be used in this exercise. Go to the completed
    exercise on GitHub and find the vector assets in the `drawable` folder: [https://packt.link/pUXvC](https://packt.link/pUXvC).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following drawables to the drawable folder of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cart.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`home.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offers.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rewards.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tickets.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a `bottom_nav_menu.xml` file (right click on the `res` folder and select
    `cart.xml` vector asset, which will be used for the top toolbar. Notice that the
    IDs of the items match the IDs in the navigation graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: bottom_nav_menu.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `activity_main.xml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: activity_main.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `BottomNavigation` view is configured with the menu you created previously,
    that is, `app:menu="@menu/bottom_nav_menu"`, while `FragmentContainerView` is
    configured with `app:navGraph="@navigation/mobile_navigation"`. As the bottom
    navigation in the app is not connected directly to the app bar, there are fewer
    layout files to set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `MainActivity` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code should be very familiar because it was explained in the previous
    exercise. The main change here is that instead of a `NavigationView` that holds
    the main UI navigation for the navigation drawer, it is now replaced with a `BottomNavigationView`.
    The configuration after this is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Bottom navigation with Home selected](img/B19411_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Bottom navigation with Home selected
  prefs: []
  type: TYPE_NORMAL
- en: 'The display shows the four menu items you set up, with the **Home** item selected
    as the start destination. Click the square button to be taken to the secondary
    destination within **Home**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Secondary destination within Home](img/B19411_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Secondary destination within Home
  prefs: []
  type: TYPE_NORMAL
- en: 'The action that makes this possible is the `nav_home_to_content` action specified
    in the navigation graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: mobile_navigation.xml (snippet)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Since only a limited amount of items are added to the bottom navigation (typically
    three to five), sometimes action items (those that have a dedicated icon) are
    added to the app bar. Create another menu called `main.xml` and add the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: main.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This menu will be used in the overflow menu in the app bar. The overflow menu
    will be available when you click on the three dots. A `cart` vector asset will
    also be displayed on the top app bar because the `app:showAsAction` attribute
    is set to `always`. Configure the overflow menu within `MainActivity` by adding
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add these two imports at the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'And then these two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This will now display the main menu in the app bar. Run the app again, and
    you’ll see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Bottom navigation with the overflow menu](img/B19411_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Bottom navigation with the overflow menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting the shopping cart takes you to the secondary destination we configured
    in the navigation graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Bottom navigation with the overflow menu in the secondary destination](img/B19411_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – Bottom navigation with the overflow menu in the secondary destination
  prefs: []
  type: TYPE_NORMAL
- en: As you’ve seen in this exercise, setting up bottom navigation is quite straightforward.
    The navigation graph and the menu setup simplify linking the menu items to the
    fragments. Additionally, integrating the action bar and the overflow menu are
    also small steps to implement.
  prefs: []
  type: TYPE_NORMAL
- en: If you are developing an app that has very well-defined top-level destinations
    and switching between them is important, then the visibility of these destinations
    makes bottom navigation an ideal choice. The final primary navigation pattern
    to explore is tabbed navigation.
  prefs: []
  type: TYPE_NORMAL
- en: This is a versatile pattern as it can be used as an app’s primary navigation
    and as secondary navigation with the other navigation patterns we’ve studied.
  prefs: []
  type: TYPE_NORMAL
- en: Tabbed navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Tabbed navigation** is mostly used when you want to display related items.
    It is common to have fixed tabs if there’s only a few of them (typically between
    two and five tabs) and scrolling horizontal tabs if you have more than five tabs.
    They are used mostly for grouping destinations that are at the same hierarchical
    level.'
  prefs: []
  type: TYPE_NORMAL
- en: This can be the primary navigation if the destinations are related. This might
    be the case if the app you developed is in a narrow or specific subject field
    where the primary destinations are related, such as a news app. More commonly,
    it is used with bottom navigation to present secondary navigation that’s available
    within a primary destination. The following exercise demonstrates using tabbed
    navigation for displaying related items.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.03 – using tabs for app navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new app in Android Studio with an `Empty Activity` named `Tab Navigation`.
    You are going to build a skeleton movies app that displays the genres of movies.
    Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `strings.xml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: strings.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<string name="dummy_text">` file specified provides some body text for
    each movie genre:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to be able to swipe through the tabs left and right, we need to use
    a `ViewPager` component. Add the following dependency to app `build.gradle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new blank `MoviesFragment` fragment which will display some body text
    and replace the layout file content with the code following code snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: fragment_movies.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `activity_main.xml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The layout displays `TabLayout` at the top and notices that it sets the tabs
    to be fixed with the `app:tabMode="fixed"` attribute. To display the required
    content, you will use `ViewPager`, a swipeable layout that allows you to add multiple
    views or fragments so that when a user swipes to change one of the tabs, the body
    content displays the corresponding view or fragment. For this exercise, you are
    going to swipe between movie fragments.
  prefs: []
  type: TYPE_NORMAL
- en: The format of the tabs can be fixed so all are visible on the screen at the
    same time or scrollable, so some tabs will initially be off-screen if they don’t
    fit within the horizontal screen space available.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to provide the content for `ViewPager`. The component that provides
    the data that’s used in `ViewPager` is called an adapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple adapter that will be used to display our movies. Go to `MovieGenresAdapter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, look at the `MovieGenresAdapter` class header. It extends from `FragmentStateAdapter`,
    which is an adapter used to populate fragments within `ViewPager`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The callback method’s functions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getItemCount()`: This returns the total number of fragments we will be inserting,
    which, as we are matching the number of pages to the number of tabs, is the size
    of the `TABS_GENRE_FIXED` constant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createFragment(position Int)`: This creates the fragment to be displayed in
    `ViewPager` at the passed in argument position. Here we are setting this to be
    the same fragment, but in a real app, you would populate it with different fragments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update `MainActivity` so that it uses tabs with `ViewPager`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You then retrieve the Views from the layout and link the tabs to `ViewPager`
    with the `TabLayoutMediator`. The tab itself is exposed for you to customize.
    In this instance, we are just setting the text. The position is also available
    to link the tab position to the fragment position in `ViewPager`. Creating this
    tab navigation is simple and effective.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the app up, and you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Tab layout with fixed tabs](img/B19411_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Tab layout with fixed tabs
  prefs: []
  type: TYPE_NORMAL
- en: You can swipe left and right in the body of the page to go to each of the three
    tabs, and you can also select one of the respective tabs to perform the same action.
    Now, let’s change the tab data that’s being displayed and set the tabs so that
    they can be scrolled through.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, change `MovieGenresAdapter` to use a few extra genres by updating the
    `getItemCount` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `MainActivity`, set `TabLayoutMediator` to use the updated item count in
    the Adapter to set the tab text for these extra pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will also need to change the `app:tabMode="fixed"` line to `app:tabMode="scrollable"`
    in the `activity_layout.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the app now, and you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – The Tab Navigation layout with scrollable tabs](img/B19411_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – The Tab Navigation layout with scrollable tabs
  prefs: []
  type: TYPE_NORMAL
- en: The list of tabs continues to display off the screen. The tabs can be swiped
    and selected, and the body content can also be swiped so that you can go left
    and right through the tab pages.
  prefs: []
  type: TYPE_NORMAL
- en: With this exercise, you learned how versatile tabs are when it comes to providing
    navigation in an app. Fixed-width tabs can be used for both primary and secondary
    navigation. At the same time, scrollable tabs can be used to group related items
    together for secondary navigation, so you also need to add primary navigation
    to the app.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the primary navigation has been omitted for simplicity, but
    for more real-world and complex apps, you can either add a navigation drawer or
    bottom navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 4.01 – building primary and secondary app navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have been tasked with creating a sports app. It can have three or more top-level
    destinations. One of the primary destinations, however, must be called `My Sports`
    and should link to one or more secondary destinations, which are sports. You can
    use any one of the navigation patterns we have explored in this chapter or a combination
    of them, and you can also introduce any customizations that you feel are appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different ways of attempting this activity. One approach would be
    to use bottom navigation and add the individual secondary sports destinations
    to the navigation graph so that it can link to these destinations. It is fairly
    simple and delegates to the navigation graph using actions. Here is what the home
    screen should look like after using this approach:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 4.15 – Bottom navigation for th\uFEFF\uFEFFe My Sports app](img/B19411_04_15.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Bottom navigation for the My Sports app
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution to this activity can be found at: [https://packt.link/By7eE](https://packt.link/By7eE).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered the most important navigation techniques you need to know
    about in order to create clear and consistent navigation in your apps. You started
    off by learning how to create an Android Studio project with a navigation drawer
    to connect navigation menu items to individual fragments using Jetpack navigation.
    You then progressed to actions within Jetpack navigation to navigate to other
    secondary destinations in your app within the navigation graph.
  prefs: []
  type: TYPE_NORMAL
- en: The next exercise then used bottom navigation to display primary navigation
    destinations that are always visible on the screen. We followed this by looking
    at tabbed navigation, where you learned how to display both fixed and scrollable
    tabs. For each navigational pattern, you were shown when it might be more suitable,
    depending on the type of app you were building. We finished this chapter by building
    our own app using one or more of these navigational patterns and adding both primary
    and secondary destinations.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter built upon the comprehensive introduction we provided to Android
    with Android Studio in [*Chapter 1*](B19411_01.xhtml#_idTextAnchor025), *Creating
    Your First App*, as well as what you learned about activities and fragments in
    [*Chapter 2*](B19411_02.xhtml#_idTextAnchor103), *Building User Screen Flows*,
    and [*Chapter 3*](B19411_03.xhtml#_idTextAnchor163), *Developing the UI with Fragments*.
    These chapters covered the knowledge, practice, and fundamental Android components
    you need to create apps. This chapter tied these previous chapters together by
    guiding you through the primary navigational patterns available to make your apps
    stand out and be easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will build on these concepts and introduce you to more advanced
    ways of displaying app content. You will start off by learning about binding data
    with lists using `RecyclerView`. After that, you will explore the different mechanisms
    you can use to retrieve and populate content within apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Displaying Network Calls'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will look at how we can integrate popular libraries and frameworks
    used for building Android apps. We will start with libraries used to fetch and
    process data from the internet, then continue with the `RecyclerView` library
    used for rendering lists.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how we can handle permissions and use Google Maps, followed
    by performing tasks in the background with Services and `WorkManager`, and then
    displaying notifications to the user. Finally, we will look at Jetpack Compose
    and how we can use it to simplify the creation of user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following chapters in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19411_05.xhtml#_idTextAnchor312), *Essential Libraries: Retrofit,
    Moshi, and Glide*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19411_06.xhtml#_idTextAnchor353), *Adding and Interacting with
    RecyclerView*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19411_07.xhtml#_idTextAnchor421), *Android Permissions and Google
    Maps*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19411_08.xhtml#_idTextAnchor471), *Services, WorkManager, and
    Notifications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19411_09.xhtml#_idTextAnchor499), *Building User Interfaces
    Using Jetpack Compose*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
