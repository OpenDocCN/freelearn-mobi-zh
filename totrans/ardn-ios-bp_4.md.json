["```swift\nvoid forward() {\n\n  digitalWrite(STBY, HIGH);\n\n  digitalWrite(MR_I1, LOW);\n  digitalWrite(MR_I2, HIGH);\n\n  digitalWrite(ML_I1, LOW);\n  digitalWrite(ML_I2, HIGH);\n}\n```", "```swift\nvoid backward() {\n\n  digitalWrite(STBY, HIGH);\n\n  digitalWrite(MR_I1, HIGH);\n  digitalWrite(MR_I2, LOW);\n\n  digitalWrite(ML_I1, HIGH);\n  digitalWrite(ML_I2, LOW);\n}\n```", "```swift\nvoid brake(void) {\n\n  digitalWrite(MR_I1, LOW);\n  digitalWrite(MR_I2, LOW);\n\n  digitalWrite(ML_I1, LOW);\n  digitalWrite(ML_I2, LOW);\n\n  digitalWrite(STBY, HIGH);\n}\n```", "```swift\nvoid throttle(int requiredSpeed, int requiredLeftSpeed, int requiredRightSpeed) {\n\n  analogWrite(ML_PWM, requiredSpeed - requiredLeftSpeed);\n  analogWrite(MR_PWM, requiredSpeed - requiredRightSpeed);\n}\n```", "```swift\nvoid loop() {\n\n  uart.pollACI();\n\n  if (iOSConnected) {\n\n    // Check accelerometer\n    if (millis() - lastAccelerometerCheck > ACCELEROMETER_CHECK_INTERVAL) {\n\n      char buffer[32];\n      char xBuffer[6];\n      char yBuffer[6];\n\n      lastAccelerometerCheck = millis();\n\n      sensors_event_t event;\n\n      accel.getEvent(&event);\n\n      event.acceleration.x += xOffset;\n      event.acceleration.y += yOffset;\n\n      dtostrf(event.acceleration.x, 0, 2, xBuffer);\n      dtostrf(event.acceleration.y, 0, 2, yBuffer);\n\n      snprintf(buffer, 32, \"%s:%s\", xBuffer, yBuffer);\n      uart.write((uint8_t *)buffer, strlen(buffer));\n\n      //        Serial.print(\"X: \"); Serial.print(event.acceleration.x); Serial.print(\"  \");\n      //        Serial.print(\"Y: \"); Serial.print(event.acceleration.y); Serial.print(\"  \");Serial.println(\"m/s^2 \");\n\n    }\n  }\n\n  // Reads distance\n\n  distance = 0;\n  for (int i = 0; i < 16; i++)\n    distance += analogRead(DISTANCEPIN);\n  distance = distance / 16;\n\n  if (distance > DISTANCETHRESHOLD) {\n    leftSpeed = 0;\n    rightSpeed = 0;\n    throttle(0, 0, 0);\n    digitalWrite(DISTANCEINDICATORPIN, HIGH);\n  }\n  else {\n    digitalWrite(DISTANCEINDICATORPIN, LOW);\n  }\n}\n```", "```swift\nfor (int i = 0; i < 16; i++)\n    distance += analogRead(DISTANCEPIN);\n  distance = distance / 16;\n```", "```swift\nvoid rxCallback(uint8_t *buffer, uint8_t len) {\n\n  if (len > 0) {\n\n    char value[32];\n\n    if (buffer[0] == 'F') {\n\n      forward();\n      goingForward = true;\n    }\n\n    if (buffer[0] == 'B') {\n\n      backward();\n      goingForward = false;\n    }\n\n    if (buffer[0] == 'T') {\n\n      strncpy(value, (const char *)&buffer[2], len - 2);\n      value[len - 2] = 0;\n\n      currentSpeed = map(atoi(value), 0, 100, 0, 255);\n      if (currentSpeed == 0) {\n        rightSpeed = 0;\n        leftSpeed = 0;\n      }\n    }\n\n    if (buffer[0] == 'R') {\n\n      strncpy(value, (const char *)&buffer[2], len - 2);\n      value[len - 2] = 0;\n      //Serial.print(\"Right Speed \"); Serial.println(atoi(value));\n      rightSpeed = map(atoi(value), 0, 100, 0, currentSpeed);\n      leftSpeed = 0;\n    }\n\n    if (buffer[0] == 'L') {\n\n      strncpy(value, (const char *)&buffer[2], len - 2);\n      value[len - 2] = 0;\n\n      leftSpeed = map(atoi(value), 0, 100, 0, currentSpeed);\n      rightSpeed = 0;\n    }\n\n    throttle(currentSpeed, leftSpeed, rightSpeed);\n  }\n\n}\n```", "```swift\n    @property (strong, nonatomic) IBOutlet UIView               *connectionStatus;\n    @property (strong, nonatomic) IBOutlet MSRangeGauge         *verticalIndicator;\n    @property (strong, nonatomic) IBOutlet MSRangeGauge         *horizontalIndicator;\n    @property (strong, nonatomic) IBOutlet UISlider             *throttleSlider;\n    @property (strong, nonatomic) IBOutlet UISlider             *steeringWheelSlider;\n    @property (strong, nonatomic) IBOutlet UISwitch             *directionSwitch;\n    @property (strong, nonatomic) IBOutlet UISegmentedControl   *modeSegment;\n    ```", "```swift\n    @property (strong, nonatomic) IBOutlet UIView       *doorStatus;\n    @property (strong, nonatomic) IBOutlet UILabel      *temperature;\n    @property (strong, nonatomic) IBOutlet UISwitch     *manualLockSwitch;\n    ```", "```swift\n    -(void)dataReceived:(NSString *)content {\n\n    }\n    ```", "```swift\n- (void)viewDidLoad {\n\n    [super viewDidLoad];\n\n    _centralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil];\n\n    _verticalIndicator.transform = CGAffineTransformMakeRotation(M_PI/2);\n\n    _verticalIndicator.minValue = 0;\n    _verticalIndicator.maxValue = 200;\n    _verticalIndicator.upperRangeValue = 130;\n    _verticalIndicator.lowerRangeValue = 70;\n    _verticalIndicator.value = 100;\n    _verticalIndicator.fillArcFillColor = [UIColor colorWithRed:.9 green:.1 blue:.1 alpha:1];\n    _verticalIndicator.rangeFillColor   = [UIColor colorWithRed:.2 green:.9 blue:.2 alpha:1];\n\n    _horizontalIndicator.minValue = 0;\n    _horizontalIndicator.maxValue = 200;\n    _horizontalIndicator.upperRangeValue = 130;\n    _horizontalIndicator.lowerRangeValue = 70;\n    _horizontalIndicator.value = 100;\n    _horizontalIndicator.fillArcFillColor = [UIColor colorWithRed:.9 green:.1 blue:.1 alpha:1];\n    _horizontalIndicator.rangeFillColor   = [UIColor colorWithRed:.2 green:.9 blue:.2 alpha:1];\n\n    …\n\n}\n```", "```swift\n_verticalIndicator.transform = CGAffineTransformMakeRotation(M_PI/2);\n```", "```swift\n-(void)dataReceived:(NSString *)content {\n\n    NSArray *components = [content componentsSeparatedByString:@\":\"];\n    if (components.count != 2) {\n        return;\n    }\n\n    float x = [components[0] floatValue];\n    float y = [components[1] floatValue];\n\n    _verticalIndicator.value = 100+20*y;\n    _horizontalIndicator.value = 100+20*x;\n}\n```", "```swift\n    _verticalIndicator.value = 100;\n    _horizontalIndicator.value = 100;\n```", "```swift\n- (IBAction)throttleChanged:(UISlider *)sender {\n\n    NSInteger throttle = sender.value;\n\n    NSString *msg = [NSString stringWithFormat:@\"T=%ld\",(long)throttle];\n\n    NSData* data;\n    data=[msg dataUsingEncoding:NSUTF8StringEncoding];\n\n    [_arduinoDevice writeValue:data forCharacteristic:_sendCharacteristic type:CBCharacteristicWriteWithoutResponse];\n}\n```", "```swift\n- (IBAction)steeringWheelChanged:(UISlider *)sender {\n\n    NSInteger steering = sender.value-100;\n\n    NSString *msg;\n\n    if (steering>0) {\n\n        msg = [NSString stringWithFormat:@\"R=%ld\",(long)steering];\n    }\n    else {\n        msg = [NSString stringWithFormat:@\"L=%ld\",(long)-steering];\n    }\n\n    NSData* data;\n    data=[msg dataUsingEncoding:NSUTF8StringEncoding];\n\n    [_arduinoDevice writeValue:data forCharacteristic:_sendCharacteristic type:CBCharacteristicWriteWithoutResponse];\n}\n```", "```swift\n- (void)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral {\n\n    _steeringWheelSlider.value = 100;\n    _throttleSlider.value = 0;\n\n    [peripheral discoverServices:@[[CBUUID UUIDWithString:NRF8001BB_SERVICE_UUID]]];\n}\n```", "```swift\n- (IBAction)directionChanged:(UISwitch *)sender {\n\n    NSData* data;\n\n    if (sender.on) {\n        data=[@\"F\" dataUsingEncoding:NSUTF8StringEncoding];\n    }\n    else {\n        data=[@\"B\" dataUsingEncoding:NSUTF8StringEncoding];\n    }\n\n    [_arduinoDevice writeValue:data forCharacteristic:_sendCharacteristic type:CBCharacteristicWriteWithoutResponse];\n\n    _throttleSlider.value = 0;\n    [self throttleChanged:_throttleSlider];\n}\n```", "```swift\nSerial.print(\"X: \")\nSerial.print(event.acceleration.x); Serial.print(\"  \");\nSerial.print(\"Y: \"); Serial.print(event.acceleration.y);\nSerial.print(\"  \");Serial.println(\"m/s^2 \");\n```", "```swift\nSerial.print(\"D: \"); Serial.println(distance);\n```", "```swift\n@interface RoverViewController ()\n\n…\n\n@property (strong, nonatomic) CMMotionManager       *motionManager;\n\n…\n\n@end\n```", "```swift\n- (void)viewDidLoad {\n\n    [super viewDidLoad];\n\n…\n    _motionManager = [[CMMotionManager alloc] init];\n…\n}\n```", "```swift\n- (IBAction)modeChange:(UISegmentedControl *)sender {\n\n    _throttleSlider.value = 0;\n    _steeringWheelSlider.value = 100;\n\n    if (_modeSegment.selectedSegmentIndex==1) {\n\n        …\n        [self useAccelerometer];\n    }\n\n    …\n}\n```", "```swift\n-(void)useAccelerometer {\n\n    [_motionManager setDeviceMotionUpdateInterval:0.2];\n    [_motionManager startDeviceMotionUpdatesUsingReferenceFrame:CMAttitudeReferenceFrameXArbitraryZVertical\n                                                        toQueue:[NSOperationQueue mainQueue]\n                                                    withHandler:^(CMDeviceMotion *motion, NSError *error) {\n\n                                                        CMQuaternion quat = motion.attitude.quaternion;\n\n                                                        [self sendAccelerometersCommands:quat];\n                                                    }];\n}\n```", "```swift\n[_motionManager setDeviceMotionUpdateInterval:0.2];\n```", "```swift\n    #import <OpenEars/OELanguageModelGenerator.h>\n    #import <OpenEars/OEPocketsphinxController.h>\n    #import <OpenEars/OEAcousticModel.h>\n    #import <Slt/Slt.h>\n    #import <OpenEars/OEFliteController.h>\n    ```", "```swift\n    @property (strong, nonatomic) NSString              *lmPath;\n    @property (strong, nonatomic) NSString              *dicPath;\n\n    @property (strong, nonatomic) OEEventsObserver      *openEarsEventsObserver;\n    @property (strong, nonatomic) OEFliteController     *fliteController;\n    @property (strong, nonatomic) Slt                   *slt;\n    ```", "```swift\n        NSMutableArray *words = [[NSMutableArray alloc] initWithArray:@[@\"RIGHT\", @\"LEFT\", @\"CENTER\", @\"FORWARD\", @\"SLOWFORWARD\", @\"FASTFORWARD\", @\"BACKWARD\", @\"SLOWBACKWARD\", @\"FASTBACKWARD\",@\"STOP\"]];\n\n        _fliteController = [[OEFliteController alloc] init];\n        _slt = [[Slt alloc] init];\n\n        OELanguageModelGenerator *lmGenerator = [[OELanguageModelGenerator alloc] init];\n\n        NSError *err=nil;\n        NSString  *name = @\"RoverVoiceControl\";\n\n        err = [lmGenerator generateLanguageModelFromArray:words withFilesNamed:name forAcousticModelAtPath:[OEAcousticModel pathToModel:@\"AcousticModelEnglish\"]];\n\n        if(err == nil) {\n\n            _lmPath = [lmGenerator pathToSuccessfullyGeneratedLanguageModelWithRequestedName:name];\n            _dicPath = [lmGenerator pathToSuccessfullyGeneratedDictionaryWithRequestedName:name];\n\n        } else {\n            NSLog(@\"Error: %@\",[err localizedDescription]);\n        }\n    ```", "```swift\n    - (IBAction)modeChange:(UISegmentedControl *)sender {\n\n        _throttleSlider.value = 0;\n        _steeringWheelSlider.value = 100;\n\n        if (_modeSegment.selectedSegmentIndex==0) {\n            [[OEPocketsphinxController sharedInstance] stopListening];\n            [_motionManager stopDeviceMotionUpdates];\n        }\n\n        if (_modeSegment.selectedSegmentIndex==1) {\n\n            [[OEPocketsphinxController sharedInstance] stopListening];\n            [self useAccelerometer];\n        }\n\n        if (_modeSegment.selectedSegmentIndex==2) {\n\n            [_motionManager stopDeviceMotionUpdates];\n            [self useVoice];\n        }\n    }\n    ```", "```swift\n    -(void)useVoice {\n\n        [[OEPocketsphinxController sharedInstance] setActive:TRUE error:nil];\n\n        [[OEPocketsphinxController sharedInstance] startListeningWithLanguageModelAtPath:_lmPath\n                                                                        dictionaryAtPath:_dicPath\n                                                                     acousticModelAtPath:[OEAcousticModel pathToModel:@\"AcousticModelEnglish\"]\n                                                                     languageModelIsJSGF:NO];\n\n        [[OEPocketsphinxController sharedInstance] setSecondsOfSilenceToDetect:.7];\n        [[OEPocketsphinxController sharedInstance] setVadThreshold:3.0];\n\n        _openEarsEventsObserver = [[OEEventsObserver alloc] init];\n        [_openEarsEventsObserver setDelegate:self];\n    }\n    ```", "```swift\n        - (void) pocketsphinxDidReceiveHypothesis:(NSString *)hypothesis recognitionScore:(NSString *)recognitionScore utteranceID:(NSString *)utteranceID {\n\n            [_fliteController say:hypothesis withVoice:self.slt];\n\n            NSString *msg=nil;\n\n            if ([hypothesis isEqualToString:@\"FORWARD\"]) {\n\n                [_arduinoDevice writeValue:[@\"F\" dataUsingEncoding:NSUTF8StringEncoding] forCharacteristic:_sendCharacteristic type:CBCharacteristicWriteWithoutResponse];\n\n                msg = [NSString stringWithFormat:@\"T=%ld\",60l];\n            }\n\n            …\n\n            NSData* data;\n            data=[msg dataUsingEncoding:NSUTF8StringEncoding];\n\n            [_arduinoDevice writeValue:data forCharacteristic:_sendCharacteristic type:CBCharacteristicWriteWithoutResponse];\n        }\n        ```", "```swift\n        UITabBarController *tabController = (UITabBarController *)_window.rootViewController;\n        RoverViewController *roverController = tabController.viewControllers[0];\n\n        [roverController disconnect];\n    ```", "```swift\n[[OEPocketsphinxController sharedInstance] setVadThreshold:3.0]\n```", "```swift\n[[OEPocketsphinxController sharedInstance] setSecondsOfSilenceToDetect:.7];\n```", "```swift\n          Serial.print(\"X: \"); Serial.print(event.acceleration.x); Serial.print(\"  \");\n          Serial.print(\"Y: \"); Serial.print(event.acceleration.y); Serial.print(\"  \");Serial.println(\"m/s^2 \");\n    ```"]