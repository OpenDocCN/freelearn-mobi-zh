["```swift\n @ObservedObject var appData = DataModel()\n```", "```swift\n VStack {\n        Text(\"Language Settings\")\n            .font(.title).bold()\n            .padding(.top, 20)\n        }\n```", "```swift\n        Form {\n            Section(header: Text(\"Select a language\")) {\n            }\n        }\n```", "```swift\n//style the button with a background and text\nstruct configureButton: View {\n  var buttonText = \"\"\n  var body: some View {\n      ZStack {\n          Image(\"background\").resizable()\n              .frame(width: 70, height: 35)\n              .cornerRadius(10)\n          Text(buttonText)\n              .foregroundColor(.white)\n              .shadow(color: .black, radius: 1, x: 1, y: 1)\n      }\n  }\n}\n```", "```swift\nvar body: some View {\n    VStack {\n        Text(\"Language Settings\")\n            .font(.title).bold()\n            .padding(.top, 20)\n        Form {\n            Section(header: Text(\"Select a language\")) {\n        VStack(alignment: .center, spacing: 10) {\n            HStack {\n                //english button\n                Button(action: {\n\n                }){\n                    configureButton(buttonText: \"English\")\n                }\n                Spacer()\n\n                //english flag\n                Image(\"engFlag\").resizable()\n                    .border(Color.black, width: 1.5)\n                    .frame(width: 50, height: 30)\n            }\n        }\n      }\n    }\n  }\n}\n```", "```swift\nstruct ButtonFlash: ButtonStyle {\n    func makeBody(configuration: Configuration) -> some \nView {\n    configuration.label\n        .shadow(color: .black, radius: 2, x: 2, y: 2)\n        .opacity(configuration.isPressed ? 0.3 : 1)\n  }\n}\n```", "```swift\n      HStack {\n                //english button\n                Button(action: {\n\n                }){\n                    configureButton(buttonText: \"English\")\n                }.buttonStyle(ButtonFlash())\n                Spacer()\n\n                //english flag\n                Image(\"engFlag\").resizable()\n                    .border(Color.black, width: 1.5)\n                    .frame(width: 50, height: 30)\n            }\n```", "```swift\n          Divider()\n            HStack {\n                //English button\n                Button(action: {\n\n                }){\n                    configureButton(buttonText: \"Spanish\")\n                }.buttonStyle(ButtonFlash())\n                Spacer()\n                //Spanish flag\n                Image(\"esFlag\").resizable()\n                    .border(Color.black, width: 1.5)\n                    .frame(width: 50, height: 30)\n            }\n            Divider()\n\n            HStack {\n                //Italian button\n                Button(action: {\n\n                }){\n                    configureButton(buttonText: \"Italian\")\n                }.buttonStyle(ButtonFlash())\n                Spacer()\n                //italian flag\n                Image(\"itFlag\").resizable()\n                    .border(Color.black, width: 1.5)\n                    .frame(width: 50, height: 30)\n            }\n```", "```swift\n                    appData.englishIsOn = true\n                    appData.spanishIsOn = false\n                    appData.italianIsOn = false\n```", "```swift\n                    appData.englishIsOn = false\n                    appData.spanishIsOn = true\n                    appData.italianIsOn = false\n```", "```swift\n                    appData.englishIsOn = false\n                    appData.spanishIsOn = false\n                    appData.italianIsOn = true\n```", "```swift\n//add a checkmark\nstruct addCheckmark: View {\n    var isLanguageOn: Bool = false\n    var body: some View {\n        VStack{\n            Image(systemName: \"checkmark.circle\")\n                .imageScale(.small).foregroundColor(.green)\n                .font(Font.largeTitle.weight(.regular))\n                .opacity(isLanguageOn ? 1.0 : 0)\n        }\n    }\n}\n```", "```swift\n  VStack(alignment: .center, spacing: 10) {\n            HStack {\n                //english button\n                Button(action: {\n                    appData.englishIsOn = true\n                    appData.spanishIsOn = false\n                    appData.italianIsOn = false\n                }){\n                    configureButton(buttonText: \"English\")\n                }.buttonStyle(ButtonFlash())\n                Spacer()\n                //english - checkmark appears when \n                  englishIsOn is true\n               addCheckmark(isLanguageOn: \n                  appData.englishIsOn)\n                //english flag\n                Image(\"engFlag\").resizable()\n                    .border(Color.black, width: 1.5)\n                    .frame(width: 50, height: 30)\n            }\n            Divider()\n```", "```swift\n//dismiss the SettingsView\n    @Environment(\\.presentationMode) var presentationMode\n```", "```swift\n          //MARK: - DISMISS BUTTON\n             HStack(alignment: .center) {\n                Spacer()\n\n                Button(action: {\n                    presentationMode.wrappedValue.dismiss()\n                }){\n                    HStack {\n                        Image(systemName: \"checkmark\")\n                        Text(\"Done\")\n                            .padding(.horizontal, 5)\n                    }.padding(8)\n                        .shadow(color: .black, radius: 1, \n                          x: 1, y: 1)\n                }.foregroundColor(Color.white)\n                    .background(Color.green)\n                     .cornerRadius(20).shadow(color: \n                       .black, radius: 1, x: 1, y: 1)\n                    .buttonStyle(ButtonFlash())\n\n               Spacer()\n            }\n```", "```swift\n    .background(Image(\"background\").resizable()\n          .edgesIgnoringSafeArea([.all])\n          .aspectRatio(contentMode: .fill)\n          .frame(width: 500, height: 800))\n```", "```swift\n     //MARK: - WORD TO PLAY FROM\n      Text(\"\\(wordToPlayFrom)\")\n          .font(.custom(\"HelveticaNeue-Medium\", size: 38))\n          .foregroundColor(.white)\n          .shadow(color: .black, radius: 1, x: 1, y: 1)\n```", "```swift\n    @State private var horizontalFLip = false\n```", "```swift\n            .scaleEffect(x: horizontalFLip ? -1 : 1, y: 1)\n            .scaleEffect(x: horizontalFLip ? -1 : 1, y: 1)\n            .animation(.spring(dampingFraction:0.8),value: \n              horizontalFLip)\n```", "```swift\n//MARK: - BUTTON\n      Button(action: {\n          appData.getRandomWord()\n          wordToPlayFrom = appData.baseWord\n          horizontalFLip.toggle()\n      }){\n```", "```swift\nHStack {\n      Text(wordToPlayFrom)\n          .font(.custom(\"HelveticaNeue-Medium\", size: 38))\n          .foregroundColor(.white)\n          .shadow(color: .black, radius: 1, x: 1, y: 1)\n          .scaleEffect(x: horizontalFLip ? -1 : 1, y: 1)\n          .scaleEffect(x: horizontalFLip ? -1 : 1, y: 1)\n          .animation(.spring(dampingFraction:0.8),value: \n            horizontalFLip)\n  }\n```", "```swift\n//MARK: - WORD TO PLAY FROM\n HStack () {\n      //right hand image\n      Image(systemName: \"hand.point.right\")\n          .foregroundColor(.black)\n          .font(.system(size: 30))\n.animation(.spring(dampingFraction:0.2),value: \n            horizontalFLip)\n\n      Text(wordToPlayFrom)\n          .font(.custom(\"HelveticaNeue-Medium\", size: 38))\n          .foregroundColor(.white)\n          .shadow(color: .black, radius: 1, x: 1, y: 1)\n          .scaleEffect(x: horizontalFLip ? -1 : 1, y: 1)\n          .scaleEffect(x: horizontalFLip ? -1 : 1, y: 1)\n          .animation(.spring(dampingFraction:0.8),value: \n            horizontalFLip)\n\n      //left hand image\n      Image(systemName:\"hand.point.left\")\n         .foregroundColor(.black)\n         .font(.system(size: 30))\n         .padding(-4)\n.animation(.spring(dampingFraction:0.2),value: \n           horizontalFLip)\n  }\n```", "```swift\n.onAppear (perform: appData.getRandomWord)\n```", "```swift\n//error message\n    func displayErrorMessage(messageTitle: String, \n      description: String) {\n        errorTitle = messageTitle\n        errorDescription = description\n        errorMessageIsShown = true\n    }\n```", "```swift\n    func addWordToList() {\n    let usersWord = \n      userEnteredWord.lowercased().trimmingCharacters(in: \n      .whitespacesAndNewlines)\n\n    //guard against single letter words – they are too easy\n    guard usersWord.count > 1 else {\n        return\n    }\n    //is the word a duplicate\n    guard isWordDuplicate(word: usersWord) else {\n        displayErrorMessage(messageTitle: \"You already used \n          this word\", description: \"Keep looking!\")\n        return\n    }\n    //is the word possible given your base word letters to \n      work with?\n    guard isWordFoundInBaseWord(userGuessWord: usersWord)\n      else {\ndisplayErrorMessage(messageTitle: \"This word is not \npossible\", description: \"Create only words from \n          the letters in the given word\")\n        return\n    }\n    //is the word a real word in the dictionary? - only \n      real words are allowed\n    guard isWordInDictionary(word: usersWord) else {\n        displayErrorMessage(messageTitle: \"This is not a \n          valid word\", description: \"Use only real words\")\n        return\n    }\n    userEnteredWordsArray.insert(usersWord, at: 0)\n    userEnteredWord = \"\"\n  }\n```", "```swift\n     //add the alert popup\n    .alert(isPresented: $appData.errorMessageIsShown) {\n        Alert(title: Text(appData.errorTitle), message: \n          Text(appData.errorDescription), dismissButton: \n          .default(Text(\"OK\")))\n    }\n```", "```swift\nstruct FooterView: View {\n    //MARK: - PROPERTIES\n    @ObservedObject var appData = DataModel()\n    @Binding var userEnteredWordsArray: [String]\n\n    var foundWords: Double {\n        let wordCount = userEnteredWordsArray.count\n        //if theres no words in the array, return 0\n        if wordCount == 0 {\n            return 0\n        }\n        var letterAverage = 0\n        //get a total of all the letters in each word\n        for letterCount in userEnteredWordsArray {\n            letterAverage += letterCount.count\n        }\n        return Double(letterAverage / wordCount)\n    }\n•••••••\n```", "```swift\nstruct FooterView_Previews: PreviewProvider {\n    static var previews: some View {\n      FooterView( userEnteredWordsArray: .constant([\"0\"]))\n          .previewLayout(.fixed(width: 350, height: 125))\n  }\n```", "```swift\nVStack {\n    HStack(spacing: 80) {\n        ZStack {\n            Image(\"background\").resizable()\n            .frame(width: 80, height: 50)\n            .clipShape(Capsule())\n            .shadow(color: .black, radius: 1, x: 1, y: 1)\n            .shadow(color: .black, radius: 1, x: -1, y: -1)\n\n            Text(\"\\(userEnteredWordsArray.count)\")\n            .frame(width: 50, height: 20)\n            .font(.system(size: 25))\n            .padding(20)\n            .foregroundColor(.white)\n            .font(.system(size: 80))\n\n            Image(\"foundWords\").resizable()\n            .aspectRatio(contentMode: .fill).frame(width: \n              100, height: 70)\n            .shadow(color: .black, radius: 1, x: 1, y: 1)\n            .offset(y: 40)\n            .padding(.horizontal, -10)\n            .padding(.bottom, -10)\n         }\n     }\n         }\n```", "```swift\nZStack {\n        Image(\"background\").resizable()\n            .frame(width: 80, height: 50)\n            .clipShape(Capsule())\n            .shadow(color: .black, radius: 1, x: 1, y: 1)\n            .shadow(color: .black, radius: 1, x: -1, y: -1)\n\n        Text(\"\\(foundWords, specifier: \"%.0f\")\")\n            .frame(width: 50, height: 20)\n            .font(.system(size: 25))\n            .padding(20)\n            .foregroundColor(Color.white)\n            .font(.system(size: 80))\n\n        Image(\"letterAverage\").resizable()\n            .aspectRatio(contentMode: .fill)\n            .shadow(color: .black, radius: 1, x: 1, y: 1)\n            .frame(width: 100, height: 70)\n            .offset(y: 40)\n            .padding(.bottom, -10)\n    }\n```", "```swift\n//MARK: - FOOTER VIEW\n    FooterView(userEnteredWordsArray: \n      $appData.userEnteredWordsArray)\n```", "```swift\n//guard against one letter words - they are too easy\n        guard usersWord.count > 1 else {\n            return\n        }\n```", "```swift\n//haptic feedback\nvar hapticImpact = UIImpactFeedbackGenerator(style: \n  .medium)\n```", "```swift\n            //MARK: - BUTTON\n            Button(action: {\n                hapticImpact.impactOccurred()\n                appData.getRandomWord()\n\n                   •••••••          \n```", "```swift\n    //haptic feedback\n       var hapticImpact = UIImpactFeedbackGenerator(style: \n         .light)\n```", "```swift\nhapticImpact.impactOccurred()\n```", "```swift\nimport Foundation\nimport AVFoundation\nvar player: AVAudioPlayer?\nfunc playSound(sound: String, type: String) {\n    if let path = Bundle.main.path(forResource: sound, \n      ofType: type) {\n        do {\n        player = try AVAudioPlayer(contentsOf: \n          URL(fileURLWithPath: path))\n        player?.play()\n\n        } catch {\n            print(\"Could not load audio file\")\n        }\n    }\n}\n```", "```swift\nplaySound(sound: \"buttonClick\", type: \"m4a\")\n```"]