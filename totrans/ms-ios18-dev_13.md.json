["```swift\n<st c=\"3209\">import AppIntents</st> struct GetTasksIntent: AppIntent {\n    static var title: LocalizedStringResource { \"Get the number of opened tasks\" }\n    @MainActor\n    func perform() async throws -> some ProvidesDialog {\n        let tasks = TaskManager().tasks <st c=\"3438\">return .result( dialog: \"Number of the opened tasks is \\(tasks.count)\")</st> }\n}\n```", "```swift\n import AppIntents <st c=\"6181\">struct AppShortcuts: AppShortcutsProvider {</st> @AppShortcutsBuilder\n    static var appShortcuts: [AppShortcut] { <st c=\"6287\">AppShortcut</st>(intent: GetTasksIntent(),\n          phrases: [\"What is left in \\(.applicationName)?\", \"How many tasks left in \\(.applicationName)\"], shortTitle: \"My tasks\", systemImageName: \"circle.badge.checkmark\")\n    }\n}\n```", "```swift\n struct AddTaskIntent: AppIntent {\n    static var title: LocalizedStringResource { \"Create new task\" } <st c=\"7727\">@Parameter(title: \"Title\")</st><st c=\"7753\">var title: String</st> @MainActor\n    func perform() async throws -> some <st c=\"7819\">ReturnsValue<String></st> {\n        TaskManager().addTask(Task(title: title))\n        TaskManager().saveTasks() <st c=\"7910\">return .result(value: title)</st> }\n}\n```", "```swift\n struct MiniTasksList: View {\n    let tasks: [Task]\n    var body: some View {\n        VStack {\n            ForEach(tasks) { task in\n                TaskView(task: task)\n            }\n        }\n    }\n}\n```", "```swift\n struct <st c=\"11567\">GetTasksListIntent</st>: AppIntent {\n    static var title: LocalizedStringResource { \"Get my Tasks's List\" }\n    @MainActor\n    func perform() async throws -> some <st c=\"11715\">ShowsSnippetView</st> {\n        let tasks = TaskManager().tasks <st c=\"11766\">return .result(view: MiniTasksList(tasks: tasks))</st> }\n}\n```", "```swift\n struct GetTasksListIntent: AppIntent {\n    static var title: LocalizedStringResource { \"Get my Tasks's List\" }\n    @MainActor\n    func perform() async throws ->\n      some <st c=\"13490\">ShowsSnippetView & ReturnsValue<Int></st> {\n        let tasks = TaskManager().tasks\n        return <st c=\"13568\">.result(value: tasks.count,</st>\n <st c=\"13595\">view: MiniTasksList(tasks: tasks))</st> }\n}\n```", "```swift\n return .result(value: tasks.count,\n      view: MiniTasksList(tasks: tasks))\n```", "```swift\n struct DeleteAllTasksIntent: AppIntent {\n    static var title: LocalizedStringResource { \"Delete all tasks\" } <st c=\"14789\">func perform() async throws -> some ProvidesDialog {</st> let taskManager = TaskManager()\n        if taskManager.tasks.count == 0 {\n            return .result(dialog: .init(\"Sorry, there are no tasks to delete\"))\n        } <st c=\"14979\">try await requestConfirmation(actionName: .go,</st>\n <st c=\"15025\">dialog: IntentDialog(\"Are you sure you want to delete all your tasks?\"))</st> TaskManager().deleteAllTasks()\n        return .result(dialog: .init(\"All of your tasks have been deleted.\"))\n    }\n}\n```", "```swift\n struct Task: Identifiable, Codable, <st c=\"17563\">AppEntity</st> {\n    static var <st c=\"17586\">typeDisplayRepresentation</st>: TypeDisplayRepresentation { .init(stringLiteral: \"Task\") }\n    init(id: UUID = UUID(), title: String,\n      description: String = \"\") {\n        self.id = id\n        self.title = title\n        self.description = description\n    }\n    var <st c=\"17809\">displayRepresentation</st>: DisplayRepresentation { DisplayRepresentation(stringLiteral: \"title: \\(title)\") }\n    let id: UUID\n    @<st c=\"17929\">Property</st>(title: \"Title\")\n    var title: String\n    @<st c=\"17975\">Property</st>(title:\"Description\")\n    var description: String\n    static var defaultQuery = <st c=\"18057\">TaskQuery</st>()\n}\n```", "```swift\n struct TaskQuery: <st c=\"19029\">EntityQuery</st> {\n    func entities(for identifiers: [UUID]) async throws -> [Task] {\n        return TaskManager().tasks.filter {identifiers.contains($0.id)}\n    }\n    func suggestedEntities() async throws -> [Task] {\n        return TaskManager().tasks\n    }\n}\n```", "```swift\n struct OpenTaskIntent: AppIntent {\n    static var title: LocalizedStringResource { \"Open a task\" } <st c=\"20284\">@Parameter(title: \"Task\")</st>\n <st c=\"20309\">var task: Task?</st>\n <st c=\"20325\">static let openAppWhenRun: Bool = true</st> @MainActor\n    func perform() async throws -> some ProvidesDialog{\n        let taskToOpen: Task\n        if let task {\n            taskToOpen = task\n        } else {\n            taskToOpen = <st c=\"20503\">try await $task.requestDisambiguation(</st>\n <st c=\"20541\">among: TaskManager().tasks,</st>\n <st c=\"20569\">dialog: \"What task would like to open?\")</st>\n <st c=\"20610\">}</st> Navigator.shared.path.append(taskToOpen)\n        return .result(dialog: \"Opening your task\")\n    }\n}\n```", "```swift\n func perform() async throws -> some <st c=\"22996\">ReturnsValue<String></st> {\n        TaskManager().addTask(Task(title: title))\n        TaskManager().saveTasks() <st c=\"23087\">return .result(value: title)</st> }\n```", "```swift\n func perform() async throws -> some <st c=\"23274\">ReturnsValue<Task></st> {\n        let newTask = Task(title: title)\n        TaskManager().addTask(newTask)\n        TaskManager().saveTasks()\n        return .result(value: <st c=\"23407\">newTask</st>)\n    }\n```", "```swift\n struct Task: Identifiable, Codable, <st c=\"24659\">AppEntity</st> { <st c=\"24671\">static</st> <st c=\"24677\">var</st> typeDisplayRepresentation: TypeDisplayRepresentation { .init(stringLiteral: \"Task\") }\n    @<st c=\"24769\">Property</st>(title: \"Title\")\n    var title: String\n    @<st c=\"24815\">Property</st>(title:\"Description\")\n    var description: String\n```", "```swift\n extension Task: <st c=\"26818\">Transferable</st> { <st c=\"26833\">static var transferRepresentation: some TransferRepresentation {</st>\n<st c=\"26897\">…</st>\n <st c=\"26898\">}</st> }\n```", "```swift\n extension Task: Transferable {\n    static var transferRepresentation: some TransferRepresentation { <st c=\"27671\">DataRepresentation</st>(exportedContentType: .rtf)\n        { task in\n            task.asRTF()! } <st c=\"27744\">ProxyRepresentation</st>(exporting: \\.title)\n    }\n}\n```", "```swift\n struct <st c=\"31625\">SendDraftIntent</st>: AppIntent {\n    static var title: LocalizedStringResource { \"Send new email\" }\n    @Parameter(title: \"Body\")\n    var body: String? @MainActor\n    func perform() async throws -> some ReturnsValue\n    <MailDraftEntity>{\n        let mailDraftEntity = MailDraftEntity(body: EntityProperty(title: LocalizedStringResource(stringLiteral: body!)))\n        ComposeDraftManager.shared.isPresentingCompose = true\n        return .result(value: mailDraftEntity)\n    }\n}\n```", "```swift\n<st c=\"32550\">@AssistantIntent(schema: .mail.createDraft)</st> struct SendDraftIntent: AppIntent {\n```", "```swift\n<st c=\"33754\">createDraft</st> schema. It also ensures that our intent conforms to the <st c=\"33822\">AssistantSchemaIntent</st> protocol, which gives it more capabilities.\n\t\t\t<st c=\"33887\">Once that happens, it’s time to adjust</st> <st c=\"33926\">our code according to what the</st> <st c=\"33958\">compiler requires:</st>\n\n\t\t\t\t*   <st c=\"33976\">We can remove the</st> `<st c=\"33995\">title</st>` <st c=\"34000\">static variable, as the App Intents frameworks implement it</st> <st c=\"34061\">for us.</st>\n\t\t\t\t*   <st c=\"34068\">The same goes for the</st> `<st c=\"34091\">@Parameter</st>` <st c=\"34101\">argument.</st> <st c=\"34112\">The App Intents framework implements that for us, so we can also</st> <st c=\"34177\">remove that.</st>\n\t\t\t\t*   <st c=\"34189\">We must add more properties to our app intent that are part of the</st> `<st c=\"34257\">createDraft</st>` <st c=\"34268\">assistant schema –</st> `<st c=\"34288\">account</st>`<st c=\"34295\">,</st> `<st c=\"34297\">attachments</st>`<st c=\"34308\">,</st> `<st c=\"34310\">to</st>`<st c=\"34312\">,</st> `<st c=\"34314\">cc</st>`<st c=\"34316\">,</st> `<st c=\"34318\">bcc</st>`<st c=\"34321\">,</st> <st c=\"34323\">and</st> `<st c=\"34327\">subject</st>`<st c=\"34334\">.</st>\n\n\t\t\t<st c=\"34335\">Our new modified</st> `<st c=\"34353\">SendDraftIntent</st>` <st c=\"34368\">now looks</st> <st c=\"34379\">like this:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"34929\">In this code example, we can see the new modified version of the</st> `<st c=\"34995\">SendDraftIntent</st>` <st c=\"35010\">struct.</st> <st c=\"35019\">The new properties, such as</st> `<st c=\"35047\">attachments</st>`<st c=\"35058\">,</st> `<st c=\"35060\">to</st>`<st c=\"35062\">,</st> `<st c=\"35064\">cc</st>`<st c=\"35066\">, and</st> `<st c=\"35072\">bcc</st>`<st c=\"35075\">, have particular types, such as</st> `<st c=\"35108\">IntentFile</st>` <st c=\"35118\">and</st> `<st c=\"35123\">IntentPerson</st>`<st c=\"35135\">. The</st> `<st c=\"35141\">AppIntent</st>` <st c=\"35150\">framework uses this type to identify people and files and have a clear interface that the system can work with.</st> <st c=\"35263\">Besides adding them to the</st> `<st c=\"35290\">SendDraftIntent</st>` <st c=\"35305\">struct, we don’t need to do anything with them except use them in our</st> `<st c=\"35376\">perform()</st>` <st c=\"35385\">function.</st>\n\t\t\t<st c=\"35395\">When we look at the code, one question arises: How do we know what properties to add for each domain</st> <st c=\"35497\">and schema?</st>\n\t\t\t<st c=\"35508\">At this time of writing, there is clear documentation of what properties each schema requires.</st> <st c=\"35604\">However, adding the</st> `<st c=\"35624\">AssistantIntent</st>` <st c=\"35639\">Swift macro and building the project creates new errors that provide information about the</st> <st c=\"35731\">missing information.</st>\n\t\t\t<st c=\"35751\">One exception, though, is the</st> `<st c=\"35782\">account</st>` <st c=\"35789\">property, which requires</st> <st c=\"35814\">us to declare an</st> `<st c=\"35832\">AssistantEntity</st>`<st c=\"35847\">-based struct.</st> <st c=\"35863\">Let’s</st> <st c=\"35869\">discuss it.</st>\n\t\t\t<st c=\"35880\">Creating AssistantEntity</st>\n\t\t\t<st c=\"35905\">When we discussed</st> `<st c=\"35924\">SendDraftIntent</st>`<st c=\"35939\">, we reviewed</st> <st c=\"35952\">several properties, such as</st> `<st c=\"35981\">attachments</st>`<st c=\"35992\">,</st> `<st c=\"35994\">to</st>`<st c=\"35996\">, and</st> `<st c=\"36002\">bcc</st>`<st c=\"36005\">. We saw that for each one, the</st> `<st c=\"36037\">AppIntents</st>` <st c=\"36047\">framework provides a dedicated type, such as</st> `<st c=\"36093\">IntentPerson</st>` <st c=\"36105\">and</st> `<st c=\"36110\">IntentFile</st>`<st c=\"36120\">.</st>\n\t\t\t<st c=\"36121\">The case of the</st> `<st c=\"36138\">account</st>` <st c=\"36145\">property is a little</st> <st c=\"36167\">bit different:</st>\n\n```", "```swift\n @AssistantEntity(schema: .mail.account)\nstruct MailAccountEntity {\n    let id = UUID()\n    var emailAddress: String\n    var name: String\n    static var defaultQuery = AccountQuery()\n    struct AccountQuery:EntityStringQuery {\n        func entities(matching string: String)\n          async throws -> [MailAccountEntity] {\n            []\n          }\n        init() {}\n        func entities(for identifiers: [MailAccountEntity.ID])\n          async throws -> [MailAccountEntity] {\n            []\n        }\n    }\n    var displayRepresentation: DisplayRepresentation\n      { DisplayRepresentation(stringLiteral: name) }\n}\n```", "```swift\n @AssistantEntity(schema: .mail.draft)\nstruct MailDraftEntity {\n    static var defaultQuery = Query()\n    struct Query: EntityStringQuery {\n        init() {}\n        func entities(for identifiers: [MailDraftEntity.ID])\n          async throws -> [MailDraftEntity] { [] }\n        func entities(matching string: String)\n          async throws -> [MailDraftEntity] { [] }\n    }\n    var displayRepresentation: DisplayRepresentation\n      { DisplayRepresentation(stringLiteral: \"\\(subject ?? \"\")\") }\n    let id = UUID()\n    var to: [IntentPerson]\n    var cc: [IntentPerson]\n    var bcc: [IntentPerson]\n    var subject: String? var body: String? var attachments: [IntentFile]\n    var account: MailAccountEntity\n}\n```", "```swift\n\n```"]