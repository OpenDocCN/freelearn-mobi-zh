["```\nprivate extension ExploreCell {\n    func roundedCorners() {\n        imgExplore.layer.cornerRadius = 9\n        imgExplore.layer.masksToBounds = true\n    }\n}\n```", "```\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    navigationController?.setNavigationBarHidden(true, animated: false)\n}\n```", "```\nprivate extension AppDelegate {\n    func initialize() {\n        setupDefaultColors()\n    }\n\n    func setupDefaultColors() {\n        guard let red = UIColor(named: \"Lets Eat Red\") else { return }\n        UITabBar.appearance().tintColor = red\n        UITabBar.appearance().barTintColor = .white\n        UITabBarItem.appearance()\n            .setTitleTextAttributes(\n                [NSAttributedStringKey.foregroundColor: UIColor.black],\n                for: UIControlState.normal)\n        UITabBarItem.appearance()\n            .setTitleTextAttributes(\n                [NSAttributedStringKey.foregroundColor: red],\n                for: UIControlState.selected)\n        UINavigationBar.appearance().tintColor = red\n        UINavigationBar.appearance().barTintColor = .white\n        UITabBar.appearance().isTranslucent = false\n        UINavigationBar.appearance().isTranslucent = false\n    }\n}\n```", "```\nstruct Device {\n   static var currentDevice: UIDevice {\n         struct Singleton {\n               static let device = UIDevice.current\n         }\n         return Singleton.device\n   }\n\n   static var isPhone: Bool {\n         return currentDevice.userInterfaceIdiom == .phone\n   }\n\n   static var isPad: Bool {\n         return currentDevice.userInterfaceIdiom == .pad\n   }\n}\n```", "```\nif Device.isPhone{ }\n```", "```\nfileprivate let minItemSpacing: CGFloat = 7\n```", "```\nsetupCollectionView()\n```", "```\nfunc setupCollectionView() {\n    let flow = UICollectionViewFlowLayout()\n    flow.sectionInset = UIEdgeInsets(top: 7, left: 7, bottom: 7, right: 7)\n    flow.minimumInteritemSpacing = 0\n    flow.minimumLineSpacing = 7\n    collectionView?.collectionViewLayout = flow\n}\n```", "```\nextension ExploreViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        if Device.isPad {\n            let factor = traitCollection.horizontalSizeClass == .compact ? 2:3\n            let screenRect = collectionView.frame.size.width\n            let screenWidth = screenRect - (CGFloat(minItemSpacing) * CGFloat(factor + 1))\n            let cellWidth = screenWidth / CGFloat(factor)\n\n            return CGSize(width: cellWidth, height: 195)\n        }\n        else {\n            let screenRect = collectionView.frame.size.width\n            let screenWidth = screenRect - 21\n            let cellWidth = screenWidth / 2.0\n\n            return CGSize(width: cellWidth, height: 195)\n        }\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {\n\n        return CGSize(width: self.collectionView.frame.width, height: 100)\n    }\n}\n```", "```\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n   collectionView.reloadData()\n}\n```", "```\ntitle = \"Select a Location\"\nnavigationController?.navigationBar.prefersLargeTitles = true\n```", "```\nfunc initialize() {\n   createData()\n   setupTitle()\n   if Device.isPad{ setupCollectionView() }\n}\n```", "```\nfunc setupCollectionView() {\n   let flow = UICollectionViewFlowLayout()\n   flow.sectionInset = UIEdgeInsets(top: 7, left: 7, bottom: 7, right: 7)\n   flow.minimumInteritemSpacing = 0\n   flow.minimumLineSpacing = 7\n   collectionView?.collectionViewLayout = flow\n}\n```", "```\nfileprivate let minItemSpacing: CGFloat = 7\n```", "```\nextension RestaurantViewController: UICollectionViewDelegateFlowLayout {\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        if Device.isPad {\n            let factor = traitCollection.horizontalSizeClass == .compact ? 2:3\n            let screenRect = collectionView.frame.size.width\n            let screenWidth = screenRect - (CGFloat(minItemSpacing) * CGFloat(factor + 1))\n            let cellWidth = screenWidth / CGFloat(factor)\n            return CGSize(width: cellWidth, height: 325)\n        }\n\n        else {\n            let screenRect = collectionView.frame.size.width\n            let screenWidth = screenRect - 21\n            let cellWidth = screenWidth / 2.0\n\n            return CGSize(width: cellWidth, height: 325)\n        }\n    }\n}\n```", "```\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    initialize()\n}\n```", "```\noverride func viewWillTransition(to size: CGSize, with coordinator\n: UIViewControllerTransitionCoordinator) {   collectionView.reloadData()\n}\n```"]