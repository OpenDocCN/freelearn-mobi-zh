["```swift\n    module ( \"AudioManager\", package.seeall )\n    local audio_definitions = {\n      backgroundMusic = {\n        type = RESOURCE_TYPE_SOUND, \n        fileName = 'sounds/music.mp3', \n        loop = true,\n        volume = 1\n      },\n      jump = {\n        type = RESOURCE_TYPE_SOUND, \n        fileName = 'sounds/jump.wav', \n        loop = false,\n        volume = 1\n      }\n    }\n    ```", "```swift\n    sounds = {}\n    ```", "```swift\n    function AudioManager:initialize ()\n        ResourceDefinitions:setDefinitions ( audio_definitions )\n    ```", "```swift\n        MOAIUntzSystem.initialize ()\n    end\n    ```", "```swift\n    function AudioManager:get ( name )\n        local audio = self.sounds[name]\n\n        if not audio then \n            audio = ResourceManager:get ( name )\n            self.sounds[name] = audio\n        end\n\n        return audio\n    end\n    ```", "```swift\n    function AudioManager:play ( name, loop )\n        local audio = AudioManager:get ( name )\n    ```", "```swift\n            if loop ~= nil then\n                audio:setLooping ( loop )\n            end\n        ```", "```swift\n            audio:play ()\n        end\n        ```", "```swift\n    function AudioManager:stop ( name )\n        local audio = AudioManager:get ( name )\n        audio:stop ()\n    end\n    ```", "```swift\n        AudioManager:initialize ()\n    ```", "```swift\n        AudioManager:play ( 'backgroundMusic' )\n    ```", "```swift\nfunction Character:jump ( keyDown )\n    if keyDown and not self.jumping then\n        AudioManager:play ( 'jump' )\n        self.physics.body:applyForce ( 0, 8000 )\n        self.jumping = true\n        self:startAnimation ( 'jump' )\n    end\nend\n```"]