- en: Chapter 10. Pulse Rate Sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will start exploring the possibilities of using Arduino
    and Android in a health context. The most natural way to start off such an adventure
    is to create a project that involves an open source pulse rate sensor. This sensor
    will be connected to a BLE-equipped Arduino. The data will be displayed in an
    interesting way within the Android app to make the experience as seamless as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following will be the major takeaways from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a pulse rate sensor with Arduino to measure your heart rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting a BLE module to Arduino to transmit pulse rate data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing this data in an Android application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first see what we need for this project. As usual, we will use an Arduino
    Uno board.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need a heart rate sensor, which is the most important component
    of this chapter. We used a sensor that is compatible with Arduino, simply called
    the pulse sensor ([http://pulsesensor.com/](http://pulsesensor.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an image of the sensor we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](img/0389OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For wireless communications, we used the nRF8001 BLE breakout board that we
    used in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you will need a breadboard and some jumper wires to make the connections
    between the different parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the list of all of the hardware you will need for this project, along
    with links to find these parts on the web:'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Uno board ([https://www.adafruit.com/products/50](https://www.adafruit.com/products/50))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nRF8001 breakout board ([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heart rate sensor ([http://pulsesensor.myshopify.com/products/pulse-sensor-amped](http://pulsesensor.myshopify.com/products/pulse-sensor-amped))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breadboard ([https://www.adafruit.com/products/64](https://www.adafruit.com/products/64))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires ([https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the software side, you will of course need the Arduino IDE. You will also
    need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The library for the nRF8001 chip, available at [https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The aREST library to send commands to the robot, available at [https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring our hardware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to build the project by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, connect the BLE breakout board to the Arduino Uno board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the module on the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the power supply of the module: **GND** goes to prototyping shield
    **GND** and **VIN** goes to the prototyping shield +5V.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the different wires responsible for the SPI interface: **SCK** to Arduino
    pin **13**, **MISO** to Arduino pin **12**, and **MOSI** to Arduino pin **11**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then connect the **REQ** pin to Arduino pin 10.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, connect the **RDY** pin to Arduino pin **2** and the **RST** pin to
    Arduino pin **9**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is a schematic diagram to help you out for this part:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Configuring our hardware](img/0389OS_10_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, connecting the pulse rate sensor is actually very simple. You simply need
    to connect the red wire to the Arduino +5V pin, the black cable to the Arduino
    GND pin, and the remaining pin to the Arduino A0 pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is an image of the fully assembled project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring our hardware](img/0389OS_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you want more details about the pulse rate sensor, you can visit the official
    documentation at [http://pulsesensor.myshopify.com/pages/code-and-guide](http://pulsesensor.myshopify.com/pages/code-and-guide).
  prefs: []
  type: TYPE_NORMAL
- en: Testing the sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to write some basic code to make sure that the pulse sensor
    is correctly wired and that it is not damaged. Thanks to the work done by the
    creator of the sensor, it is actually very easy to extract the heart pulse rate
    from the sensor readings. The following sketch starts by defining a lot of variables
    that are required for the calculation of the **Beats Per Minute** (**BPM**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `setup()` function of the sketch, we simply start the serial communications
    and initialize the readings from the pulse sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `loop()` function of the sketch, we constantly check to see if
    we found a heart beat, and we print it on the serial monitor if this is the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all of the code used in this chapter can be found in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: It is now time to test the code. Before uploading the code to your board, it's
    recommended that you watch a video found at [http://pulsesensor.myshopify.com/blogs/news/7406100-getting-started-video](http://pulsesensor.myshopify.com/blogs/news/7406100-getting-started-video)
    in order to understand how to put the sensor correctly on your finger.
  prefs: []
  type: TYPE_NORMAL
- en: You can now upload the code to your Arduino board and open the serial monitor.
    Then place the sensor on your finger. After a while (there can be strange readings
    at first), you should see your heart rate being displayed on the serial monitor.
    You will know that it is correct when the value is between 60 and 100 BPM (if
    you are in a resting state).
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Arduino sketch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are sure that the sensor is working correctly, we can write the
    final Arduino sketch for this chapter. This sketch will perform the BPM measurements
    as before, and will also expose the BPM variable via the aREST API so that the
    measurements can be accessed via Bluetooth. As the sketch is really similar to
    the test sketch, we will only detail the changes here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sketch starts by importing the required libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We also define the pins on which the BLE module is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create an instance of the aREST library and the BLE module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to define a variable that will contain the BPM measurements and
    that will be exposed to the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `setup()` function, we need to initialize the BLE module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We also give the project a name and ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in the `setup()` function, we expose the BPM variable to the aREST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `loop()` function of the sketch, we assign the measured BPM to the variable
    that is exposed to the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, as usual, we process the incoming requests on the BLE module with the
    aREST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that all the code for this chapter can be found in the GitHub repository
    of the bookat [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
    You can now upload the code to your Arduino board and move on to the development
    of the Android application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Android app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Android application that we will be creating will give us the ability to
    display the data that is measured by the pulse rate sensor within the Android
    app. In addition, it will show the BLE connection status, and there will be the
    **Refresh** button to allow us to refresh the Bluetooth callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will assume that you will have switched on the `Auto-Import` function within
    your preferences. If not, kindly activate it by going to the **Auto-Import** preferences
    and selecting all available options. The **Auto-Import** preferences are available
    on Mac and Windows as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On a Mac, navigate to **Android Studio** > **Preferences** > **Editor** > **Auto-Import**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, navigate to **File** > **Settings** > **Editor** > **Auto-Import**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With all the necessary settings in place, we will start off by creating a new
    project where we will choose the following within the **New Project** setup walkthrough:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `Pulse Rate Sensor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum SDK**: `18`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project**: `Blank Activity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity Name**: `PulseActivity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do****main**: `arduinoandroid.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Laying out the Android user interface and setting permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to make this project work, we will need to first go to the Android
    `Manifest` file which is available at `app` > `src` > `main` > `AndroidManifest.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this Android application uses BLE to connect the Android physical device
    to the pulse rate sensor, we will need to add the following permissions to the
    Android `Manifest` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The next step that we will be taking is setting up the very basic Android layout
    file so that we are able to implement the app functions.
  prefs: []
  type: TYPE_NORMAL
- en: In our project, we will navigate to the main layout file which can be accessed
    from `app` > `src` > `res` > `layout` > `activity_pulse.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of layout formats with Android user interface design, and
    in this particular case, we will be implementing two linear layouts: one will
    be designed to act as a placeholder for the graph view, and the other will support
    the different buttons and text views.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the current code available in the layout file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The end result will look as follows within the IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Laying out the Android user interface and setting permissions](img/0389OS_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The text **120** is meant to be a placeholder text to ensure that there is enough
    place within the user interface to accommodate the pulse rate readings. In the
    final implementation, you have the option of removing the placeholder text and
    leaving it blank.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the app's internals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to start off by declaring all the necessary variables that are needed
    to work with the Bluetooth logic, user interface, and for logging purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Following this, we will need to connect the user interface elements within
    the `onCreate()` method to the user interface, and set an `onClickListener` class
    to the **Get Pulse Rate** and **Refresh** buttons, which will allow us to request
    the pulse rate sensor data and refresh Bluetooth connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are using Bluetooth in our projects, we need to implement the methods
    that allow us to take the character data sequences, convert them into string,
    and finally connect them to the user interface to display the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following methods will allow us to do the necessary Bluetooth callback
    and send or receive data from the Arduino pulse rate sensor via the BLE module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The Android application life cycle allows us to implement methods at its different
    stages, so in the following code, we will be implementing two methods which allow
    us to start Bluetooth scanning when the application is activated, and stop Bluetooth
    scanning and other related activities when the user exits the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also be including a number of methods that facilitate the BLE scan
    callback and enable us to refactor the code and keep our code clean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: UUID parsing, unlike the previous chapters, has been moved to a `utility` class
    in order to refactor the code and make it more readable. In order to create a
    `utility` class, we first need to right-click on our package name and create a
    new package called `Bluetooth`.
  prefs: []
  type: TYPE_NORMAL
- en: Then we will right-click on the new package, select **New** > **Java Class**,
    and name the new class as `BluetoothUtils`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After these two steps, we will replace the code within the class with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you could go ahead, build, and run the project on an Android
    physical device running on Android 4.3 with Bluetooth switched on. In order to
    get your pulse rate in this project, you will need to follow the instructions
    as mentioned previously and tap on the **Get Pulse Rate** button.
  prefs: []
  type: TYPE_NORMAL
- en: How to go further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We believe that this project can be taken further by possibly including other
    health-related sensors that are available from a number of online outlets and
    displaying the related data within a graph.
  prefs: []
  type: TYPE_NORMAL
- en: The Android graph view library supports multiple inputs using multiple series.
    Further information about this can be obtained at the official website for documentation
    at [http://android-graphview.org/](http://android-graphview.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of how this application could possibly look with Android graph
    view would be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to go further](img/0389OS_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Further improvements could also be done to the user interface and user experience
    where the data can be updated in real time via handler or timer implementations.
    Finally, one of the most advanced integrations that could be included in this
    kind of application is integration with the Google Fit SDK, which is Google's
    proprietary health data platform. Another option could be storage of health data
    using cloud storage APIs and local databases.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we integrated what we had learned from the previous chapters
    and created a baseline project to measure our own pulse rate.
  prefs: []
  type: TYPE_NORMAL
- en: We achieved this by creating an Android app which shows the data produced by
    the pulse rate sensor connected to the Arduino Uno. Communication between both
    devices is via BLE.
  prefs: []
  type: TYPE_NORMAL
- en: The baseline projects that we have introduced throughout this book are present
    to motivate you to be creative and solve your daily challenges. We have realized
    that the possibilities of combining Arduino and Android are endless, and we hope
    that you will stretch the limitations of what is possible.
  prefs: []
  type: TYPE_NORMAL
