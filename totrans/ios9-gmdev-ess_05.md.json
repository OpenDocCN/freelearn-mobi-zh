["```swift\nlet sphereGeometry = SCNSphere(radius: 1.0)\nlet sphereNode = SCNNode(geometry: sphereGeometry)\nself.rootNode.addChildNode(sphereNode)\n```", "```swift\nself.overlaySKScene = skScene\n```", "```swift\noverride func viewDidLoad() {\n        super.viewDidLoad()\n\n        // create a new scene\n        let scene = SCNScene(named: \"art.scnassets/ship.dae\")!\n...\n```", "```swift\n//(1) create and add a camera to the scene\n   let cameraNode = SCNNode()\n   cameraNode.camera = SCNCamera()\n   scene.rootNode.addChildNode(cameraNode)     \n// place the camera\n   cameraNode.position = SCNVector3(x: 0, y: 0, z: 15)       \n//(2) create and add a light to the scene\n   let lightNode = SCNNode()\n   lightNode.light = SCNLight()\n   lightNode.light!.type = SCNLightTypeOmni\n   lightNode.position = SCNVector3(x: 0, y: 10, z: 10)\n   scene.rootNode.addChildNode(lightNode)     \n // create and add an ambient light to the scene\n   let ambientLightNode = SCNNode()\n   ambientLightNode.light = SCNLight()\n   ambientLightNode.light!.type = SCNLightTypeAmbient\n   ambientLightNode.light!.color = UIColor.darkGrayColor()\n   scene.rootNode.addChildNode(ambientLightNode)      \n //(3) retrieve the ship node\n   let ship = scene.rootNode.childNodeWithName(\"ship\", recursively: true)!      \n //(4) animate the 3d object\n         ship.runAction(SCNAction.repeatActionForever(SCNAction.rotateByX(0, y: 2, z: 0, duration: 1)))       \n //(5) retrieve the SCNView\n   let scnView = self.view as! SCNView    \n //set the scene to the view\n   scnView.scene = scene\n //(6)allows the user to manipulate the camera\n    scnView.allowsCameraControl = true     \n // show statistics such as fps and timing information\n    scnView.showsStatistics = true    \n // configure the view\n    scnView.backgroundColor = UIColor.blackColor()      \n //(7) add a tap gesture recognizer\n    let tapGesture = UITapGestureRecognizer(target: self, action: \"handleTap:\")\n        scnView.addGestureRecognizer(tapGesture)\n```", "```swift\nship.runAction(SCNAction.repeatActionForever(SCNAction.rotateByX(0, y: 2, z: 0, duration: 1)))\n```", "```swift\nscnView.debugOptions = .ShowBoundingBoxes\n```", "```swift\nfunc handleTap(gestureRecognize: UIGestureRecognizer) {\n        //(1) retrieve the SCNView\n        let scnView = self.view as! SCNView\n        // check what nodes are tapped\n        let p = gestureRecognize.locationInView(scnView)\n        /(2)\n        let hitResults = scnView.hitTest(p, options: nil)\n        // check that we clicked on at least one object\n        if hitResults.count > 0 {\n            // retrieved the first clicked object\n            let result: AnyObject! = hitResults[0]\n            // get its material\n            let material = result.node!.geometry!.firstMaterial!\n\n        //(3)// highlight it\n            SCNTransaction.begin()\n            SCNTransaction.setAnimationDuration(0.5)\n            // on completion - unhighlight\n            SCNTransaction.setCompletionBlock {\n                SCNTransaction.begin()\n                SCNTransaction.setAnimationDuration(0.5)\n                material.emission.contents = UIColor.blackColor()   \n                SCNTransaction.commit()\n            }  \n            material.emission.contents = UIColor.redColor()\n            SCNTransaction.commit()\n        }\n    }\n```", "```swift\nlet source = SCNAudioSource(named: \"sound.caf\")\nlet soundEffect = SCNAudioPlayer(source: source)\nnode.addAudioPlayer(soundEffect)\nsource.positional = true \nsource.loops = false\n```", "```swift\nlet action = SCNAction.playAudioSource(source, waitForCompletion: true) \nnode.runAction(action)\n```", "```swift\nsource.positional = false \nsource.loops = true\n```", "```swift\naSCNView.presentScene(aScene, withTransition:aSKTransition,\nincomingPointOfView:nil, completionHandler:nil)\n```", "```swift\n//(1)\nvar path = NSBundle.mainBundle().pathForResource(\"Spark\", ofType: \"sks\")\n//(2)\n    var sparkParticle = NSKeyedUnarchiver.unarchiveObjectWithFile(path!) as! SKEmitterNode\n//(3)     \n    sparkParticle.position = CGPointMake(self.size.width/2, self.size.height)\n    sparkParticle.name = \"sparkParticle\"\n    sparkParticle.targetNode = self.scene \n    self.addChild(sparkParticle)\n```", "```swift\n[self.gameView.scene addParticleSystem:_collectParticles withTransform:particlePosition];\n```", "```swift\nscene.particleEmitNode.addParticleSystem(_collectable!)\n```", "```swift\nfunc physicsWorld(world: SCNPhysicsWorld, didUpdateContact contact: SCNPhysicsContact) {\nif (contact.nodeA.physicsBody.categoryBitMask == AAPLBitmaskSuperCollectable) {\n        self.collectFlower(contact.nodeA)\n    }\nif (contact.nodeB.physicsBody.categoryBitMask == AAPLBitmaskSuperCollectable) {\n        self.collectFlower(contact.nodeB)\n}\n\n```", "```swift\n// Collision bit masks\ntypedef NS_OPTIONS(NSUInteger, AAPLBitmask) {\n    AAPLBitmaskCollision        = 1UL << 2,\n    AAPLBitmaskCollectable      = 1UL << 3,\n    AAPLBitmaskEnemy            = 1UL << 4,\n AAPLBitmaskSuperCollectable = 1UL << 5,\n    AAPLBitmaskWater            = 1UL << 6\n};\n```", "```swift\nstruct AAPLBitmask : AAPLBitmaskType {\n let rawValue: Int\n init(rawValue: Int) { self.rawValue = rawValue }\n\n static var None: AAPLBitmaskType { return AAPLBitmask(rawValue: 0) }\n static var AAPLBitmaskCollision : AAPLBitmask   { return AAPLBitmask(rawValue: 1 << 2) }\n static var AAPLBitmaskCollectable : AAPLBitmask  { return AAPLBitmask(rawValue: 1 << 3) }\n static var AAPLBitmaskEnemy : AAPLBitmask   { return AAPLBitmask(rawValue: 1 << 4) }\nstatic var AAPLBitmaskSuperCollectable : AAPLBitmask   { return AAPLBitmask(rawValue: 1 << 5) }\nstatic var AAPLBitmaskWater : AAPLBitmask   { return AAPLBitmask(rawValue: 1 << 6) }\n}\n```", "```swift\nscene.physicsWorld.contactDelegate = self\n```", "```swift\n//Objective-C\nSCNScene *scene = [SCNScene sceneNamed:@\"game.scnassets/level.scn\"];\n//Swift \nlet scene = SCNScene(named: \"game.scnassets/level.scn\")!\n```"]