- en: '*Chapter 20*: Getting Started with Cameras and Photo Libraries'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you created the `RatingsView` class and added it to
    the **Restaurant Detail** and **Review Form** screens. You also enabled the user
    to submit a review using the **Review Form** screen, although the submitted review
    is only printed to the Debug area for now.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will complete the implementation of the `.plist` file containing
    the filters you want to use, then create a filter object class to store filter
    data, and create a data manager class to read the `.plist` file and populate an
    array of filter objects. Next, you'll create a protocol with a method to apply
    filters to images. After that, you'll create view controllers for the `UIImagePickerDelegate`
    protocol, which allows you to get photos from the camera or the photo library,
    and implement methods to apply a selected filter to a photo. Note that the photo
    will not be saved. You will learn how to save reviews and photos in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to import photos into your
    own apps, and how to apply filters to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating model objects for the **Photo Filter** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the `ImageFiltering` protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating classes for the **Photo Filter** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the image picker delegate protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting permission to use the camera or photo library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter20` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3oZZ93P](https://bit.ly/3oZZ93P)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by learning about photo filters, and how to apply them to images.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iOS has a range of built-in filters that you can use to enhance photos. These
    filters are available via the **Core Image** library. Core Image is an image processing
    and analysis technology that provides high-performance processing for still and
    video images. There are over 170 filters available in Core Image, giving you the
    ability to apply a wide range of cool effects to your photos.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about Core Image at [https://developer.apple.com/documentation/coreimage](https://developer.apple.com/documentation/coreimage).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this app, you''ll just be using 10 filters. The details of these filters
    are provided in a `.plist` file. Import this file into your app by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have not yet done so, download and unzip the code bundle for this book
    at this link: [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).
    You will find the `FilterData.plist` inside the `resources` folder in the `Chapter20`
    folder.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project navigator, create a new group inside the `PhotoFilter` folder
    and name it `Model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag `FilterData.plist` to the `Model` folder. Make sure **Copy items if needed**
    is ticked and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click `FilterData.plist` in the Project navigator to see what it contains:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 20.1: Editor area showing contents for FilterData.plist'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.01_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 20.1: Editor area showing contents for FilterData.plist'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, `FilterData.plist` is an array of dictionaries. Each dictionary
    contains the name of the filter and a descriptive label. In the next section,
    you'll see how you can use the information in `FilterData.plist` in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating model objects for the Photo Filter screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the information from `FilterData.plist` into your app, you''ll create
    a structure, `FilterItem`, that can store details about a filter, and a data manager
    class, `FilterManager`, that will load `FilterData.plist` and create an array
    of `FilterItem` instances. This is similar to the method used to load cuisine
    and location information into your app. Let''s start by creating the `FilterItem`
    structure. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Model` folder in the `PhotoFilter` folder and select **New
    File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `FilterItem`. Click `FilterItem` file will appear in the Project
    navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `FilterItem` file, type the following code after the `import` statement
    to declare and define the `FilterItem` structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This structure has two properties and an initializer. The `filter` property
    will store filter names, and the `name` property will store the brief filter description.
    The initializer takes a dictionary as a parameter to set the `name` and `filter`
    properties when an instance of this class is created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that you''ve created the `FilterItem` class, you''ll create the data manager
    class, `FilterDataManager`. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Model` folder in the `PhotoFilter` folder and select **New
    File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `FilterDataManager`. Click `FilterDataManager` file will appear
    in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `FilterDataManager` file, type in the following code after the `import`
    statement to declare and define the `FilterDataManager` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `FilterDataManager` class adopts the `DataManager` protocol you created
    earlier in [*Chapter 16*](B17469_16_Final_VK_ePub.xhtml#_idTextAnchor223)*, Getting
    Started with MapKit*. Calling the `fetch()` method loads data from `FilterData.plist`,
    creates an array of `FilterItem` instances, and returns it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next section, you'll create a protocol with a method to apply a filter
    to an image.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ImageFiltering protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need a way to apply a filter to an image. You will create a protocol, `ImageFiltering`,
    that implements a method, `apply(filter:to:)`, to do this. Any class that adopts
    this protocol will have access to this method, which applies a specified filter
    to an image. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `PhotoFilter` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `ImageFiltering`. Click `ImageFiltering` file will appear in
    the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the code in this file to declare and define the `ImageFiltering` protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: import CoreImage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: protocol ImageFiltering {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func apply(filter: String, originalImage:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: UIImage) -> UIImage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: extension ImageFiltering {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func apply(filter: String, originalImage:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: UIImage) -> UIImage {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'let initialCIImage = CIImage(image:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'originalImage, options: nil)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: let originalOrientation =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: originalImage.imageOrientation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'guard let ciFilter = CIFilter(name: filter)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: else {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("filter not found")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return originalImage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'ciFilter.setValue(initialCIImage, forKey:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: kCIInputImageKey)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: let context = CIContext()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: let filteredCIImage =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (ciFilter.outputImage)!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: let filteredCGImage =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'context.createCGImage(filteredCIImage, from:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: filteredCIImage.extent)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'return UIImage(cgImage: filteredCGImage!,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'scale: 1.0, orientation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: originalOrientation)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This completes the implementation of the `ImageFiltering` protocol and the
    `apply(filter:originalImage:)` method. At this point, you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FilterData.plist`, which contains photo filter data inside your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FilterItem`, a class that can hold a filter and a filter description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FilterDataManager`, a data manager class that loads data from `FilterData.plist`
    and generates an array of `FilterItem` instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ImageFiltering`, a protocol that contains a method, `apply(filter:originalImage:)`,
    which applies a filter to an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, you'll create classes for the UI elements in the **Photo
    Filter** screen, which allows you to manage this screen and the collection view
    inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating classes for the Photo Filter screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have imported `FilterData.plist` into your app, created the `FilterItem`
    and `FilterDataManager` classes, and created the `ImageFiltering` protocol. In
    this section, you'll set up the classes for the **Photo Filter** screen, which
    allows you to manage this screen and the collection view inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that you added the `PhotoFilter` storyboard file to your project in
    [*Chapter 16*](B17469_16_Final_VK_ePub.xhtml#_idTextAnchor223)*, Getting Started
    with MapKit*. It contains a scene that consists of a large image view that will
    hold the user-selected photo and a collection view that will display filter previews.
    The following screenshot shows what this will look like when you have completed
    the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.2: iOS Simulator showing the completed Photo Filter screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.02_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 20.2: iOS Simulator showing the completed Photo Filter screen'
  prefs: []
  type: TYPE_NORMAL
- en: This screen works as follows. When you tap on the **Add Photo** button in the
    **Restaurant Detail** screen and select a photo, the **Photo Filter** screen will
    appear, showing the selected photo with a scrolling list of filters just below
    it. Each filter in the scrolling list is displayed in a collection view cell.
    Tapping a filter in the scrolling list will apply the selected filter to the photo.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll create and configure a class to manage the collection
    view cells. Each cell will display a thumbnail preview of what a photo looks like
    with the filter applied.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a class for the collection view cells
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `PhotoFilter` storyboard file in the Project navigator, you will see that
    the collection view is already present in the **View Controller Scene**, but there
    is no way to set the contents of the collection view cells. You will create a
    class to manage them now. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `PhotoFilter` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`FilterCell`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UICollectionViewCell`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `FilterCell` file will appear in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to this file to declare and define the `FilterCell`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the `PhotoFilter` storyboard file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the document outline, select `FilterCell`:![Figure 20.3: Identity inspector
    with Class set to FilterCell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 20.3: Identity inspector with Class set to FilterCell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Attributes inspector button. Set `filterCell`:![Figure 20.4: Attributes
    inspector with Identifier set to filterCell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 20.4: Attributes inspector with Identifier set to filterCell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Connections inspector button. Connect the `nameLabel` and `thumbnailImageView`
    outlets to their corresponding UI elements as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 20.5: Connections inspector showing thumbnailImageView and nameLabel
    outlets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.05_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 20.5: Connections inspector showing thumbnailImageView and nameLabel
    outlets'
  prefs: []
  type: TYPE_NORMAL
- en: You have now completed setting up the collection view cells. In the next section,
    you'll create the view controller for the **Photo Filter** screen. This will allow
    you to select a photo and choose a filter to be applied to it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a view controller for the Photo Filter screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, you have created the `FilterCell` class to manage the collection view
    cells in the **Photo Filter** screen. Now you''ll create a view controller to
    manage this screen''s contents. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `PhotoFilter` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PhotoFilterViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UIViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click Next.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click`PhotoFilterViewController` file will appear in the Project navigator.
    Delete all the boilerplate code after the `viewDidLoad()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file to declare and define the `PhotoFilterViewController`
    class and its properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class PhotoFilterViewController: UIViewController {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@IBOutlet var mainImageView: UIImageView!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@IBOutlet var collectionView: UICollectionView!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private let manager = FilterDataManager()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: var selectedRestaurantID:Int?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: override func viewDidLoad() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: super.viewDidLoad()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: initialize()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you did before, you will use extensions to organize your code. Add the following
    `private` extension containing the `initialize()` method after the closing curly
    brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This extension contains the implementation of the `initialize()` method, which
    calls two other methods. `setupCollectionView()` sets up the collection view used
    to display the list of filters. `checkSource()` checks the user authorization
    status for the use of the camera. Note that these will generate errors since they
    haven't been implemented yet. You'll implement these methods in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Implement the `setupCollectionView()` and `checkSource()` methods in the `private`
    extension after the `initialize()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Sets up the collection view used to display thumbnail previews of the filters.
    Here, you create an instance of `UICollectionViewFlowLayout`, set the scroll direction,
    section insets, inter-item spacing, and line spacing properties, and assign it
    to the collection view. After that, you set the `PhotoFilterViewController` class
    as the delegate and data source for this collection view. Note that you're setting
    `delegate` and `dataSource` programmatically rather than using the storyboard;
    either approach is acceptable. Don't worry about the errors, they appear because
    you haven't adopted the `UICollectionViewDataSource` and `UICollectionViewDelegate`
    protocols for this class yet. You'll fix this later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Checks the user authorization status for the use of the camera. Possible cases
    are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`.notDetermined` means the user hasn''t been asked for access to the camera.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`.authorized` means the user has previously granted access to the camera.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`.restricted` means the user can''t be granted access due to restrictions that
    have been set on the device.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`.denied` means the user has previously denied camera access to the app.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the status is `.notDetermined`, the app will ask the user for permission
    and, if permission is given, the `showCameraUserInterface()` method is called.
    If the status is `.authorized`, the `showCameraUserInterface()` method is called.
    Note that this will generate an error because `showCameraUserInterface()` has
    not been implemented yet. If the status is `.restricted` or `.denied`, it falls
    under the `default:` case and the method exits.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are a few more helper methods required. Add the following code to the
    `private` extension to implement them after the `checkSource()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method will be called after the user selects a photo from the camera or
    photo library. It calls the `FilterManager` instance's `fetch()` method, which
    loads `FilterData.plist` and puts its contents into an array of `FilterItem` instances.
    This array is then assigned to the `PhotoFilterViewController` instance's `filters`
    property, which will later be used to populate the collection view with thumbnail
    previews of filters. The next statement assigns the `PhotoFilterViewController`
    instance's `mainImage` property to `mainImageView`, which is the outlet for the
    image view above the collection view, if `mainImage` has been set. The final statement
    tells the collection view to redraw itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method calls the `checkSource()` method you implemented earlier, which
    calls the `showCameraUserInterface()` method if authorization has been granted.
    You'll assign this to the camera button in the `NSCameraUsageDescription` and
    `NSMicrophoneUsageDescription` keys in `Info.plist`. To learn more about requesting
    permission to use the camera, go to [https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/requesting_authorization_for_media_capture_on_ios](https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/requesting_authorization_for_media_capture_on_ios).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll adopt the `UICollectionViewDataSource` protocol and implement the required
    methods to make the collection view display thumbnail previews of filters. Add
    a new extension after the `private` extension and implement them as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Determines the number of items the collection view is supposed to display, which
    is the same as the number of `FilterItems` inside the `PhotoFilterViewController`
    instance's `filters` array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Determines what to put in each cell. Here, you get the `FilterItem` instance
    corresponding to the cell's position in the collection view and pass it, along
    with the `PhotoFilterViewController` instance's `thumbnail` property, to the `set(filterItem:imageForThumbnail:)`
    method, which sets the image and label for the collection view cell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ve set up the collection view using a `UICollectionViewFlowLayout` instance
    earlier. Now you''ll set the size for the collection view cells. Add the following
    extension after the extension containing the data source methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`collectionView(_:layout:sizeForItemAt:)` returns the size each collection
    view cell should be. First, the height of the collection view is assigned to `collectionViewHeight`.
    Then, the value of `topInset` is set to `14.0` points. The height of the collection
    view cell is calculated by subtracting the `topInset` from the `collectionViewHeight`.
    This results in a 14-point gap between the top of the collection view cells and
    the top of the collection view. Finally, a `CGSize` instance with the width set
    to `150` points and the height set to `cellHeight` is returned as the size of
    the collection view cell. Previously, you did this using the Size inspector; now,
    you''re doing it programmatically.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now you''ll connect the outlets and actions in this class to the UI elements
    in the `PhotoFilter` storyboard file. `collectionView` is the outlet for the collection
    view that displays the list of filters. `mainImageView` is for the image view
    just above it, which shows the image the user selected. `onPhotoTapped()` is for
    the camera button in the navigation bar. You''ll also configure the **Cancel**
    button to dismiss the **Photo Filter** screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `PhotoFilter` storyboard file in the Project navigator. Select the
    `PhotoFilterViewController`:![Figure 20.6: Identity inspector with Class set to
    PhotoFilterViewController'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.06_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 20.6: Identity inspector with Class set to PhotoFilterViewController'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the Connections inspector. Click and drag from the `collectionView`
    outlet to the **Collection View** in the document outline:![Figure 20.7: Connections
    inspector showing the collectionView outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.07_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 20.7: Connections inspector showing the collectionView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click and drag from the `mainImageView` outlet to the **Image View** in the
    document outline:![Figure 20.8: Connections inspector showing the mainImageView
    outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.08_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 20.8: Connections inspector showing the mainImageView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click and drag from the `onPhotoTapped:` action to the camera button:![Figure
    20.9: Connections inspector showing onPhotoTapped: action'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.09_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 20.9: Connections inspector showing onPhotoTapped: action'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **Cancel** button is used to exit this screen if the user does not wish
    to make a selection. You''ll connect the **Cancel** button to the unwind method
    you implemented in the previous chapter, which will dismiss this screen and return
    the user to the **Restaurant Detail** screen. *Ctrl + Drag* from the **Cancel**
    button to the Exit icon in the Scene Dock:![Figure 20.10: Photo Filter View Controller
    Scene showing Cancel button action being set'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.10_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 20.10: Photo Filter View Controller Scene showing Cancel button action
    being set'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select `unwindReviewCancelWithSegue:` in the pop-up menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 20.11: Pop-up menu with unwindReviewCancelWithSegue: selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.11_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 20.11: Pop-up menu with unwindReviewCancelWithSegue: selected'
  prefs: []
  type: TYPE_NORMAL
- en: All the outlets and actions for the `PhotoFilterViewController` class have been
    connected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will implement the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`showCameraUserInterface()`, a method that will display either the view from
    the device camera or the photo library in an image picker interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two `UIImagePickerControllerDelegate` protocol methods that will be called when
    you choose a picture in the image picker interface or click the `UIImagePickerController`,
    go to [https://developer.apple.com/documentation/uikit/uiimagepickercontroller](https://developer.apple.com/documentation/uikit/uiimagepickercontroller).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To learn more about `UIImagePickerControllerDelegate`, go to [https://developer.apple.com/documentation/uikit/uiimagepickercontrollerdelegate](https://developer.apple.com/documentation/uikit/uiimagepickercontrollerdelegate).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To implement the `showCameraUserInterface()` and `UIImagePickerControllerDelegate`
    methods, click the `PhotoFilterViewController` file in the Project navigator and
    add the following extension after the `UICollectionViewDelegateFlowLayout` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Let's talk about `showCameraUserInterface()` first. This method is triggered
    when the camera button is tapped, displaying an image picker on the screen. This
    image picker is the standard iOS image picker that appears when you want to use
    an image—for instance, to add an image to a Facebook post or to a tweet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Creates an instance of the `UIImagePickerController` class and assigns it to
    `imagePicker`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Sets the `imagePicker` instance's `delegate` property to the `PhotoFilterViewController`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This block of code is known as a conditional compilation block. It starts with
    an `#if` compilation directive and ends with an `#endif` compilation directive.
    If you're running on the simulator, only the statement setting the `imagePicker`
    instance's `sourceType` property to the photo library is compiled. If you're running
    on an actual device, the statements setting the `imagePicker` instance's `sourceType`
    property to camera and displaying the camera controls are compiled.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about conditional compilation blocks at this link: [https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID538](https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID538).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Sets the camera interface to capture still images.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the user is allowed to edit the selected image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Presents `imagePicker` on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: When the image picker appears onscreen, you have the option of selecting a photo
    or canceling. If you cancel, `imagePickerControllerDidCancel(_:)` is triggered
    and the image picker is dismissed.
  prefs: []
  type: TYPE_NORMAL
- en: If you select a photo, `imagePickerController(_:didFinishPickingMediaWithInfo:)`
    is triggered and a photo will be returned and assigned to `selectedImage`. Next,
    the `selectedImage` instance's `preparingThumbnail(of:)` method will be used to
    create a small image with a width and height of `100` points. This will then be
    assigned to the `thumbnail` property. After that, an image with the same size
    as `mainImageView` will be created from `selectedImage` using the `preparingThumbnail(of:)`
    method. This will be assigned to the `mainImage` property and the image picker
    will be dismissed.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the `preparingThumbnail(of:)` method at this link:
    [https://developer.apple.com/documentation/uikit/uiimage/3750835-preparingthumbnail](https://developer.apple.com/documentation/uikit/uiimage/3750835-preparingthumbnail).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you''ll implement `filterMainImage(filterItem:)`, a method to apply a
    filter to the image in the `mainImageView`. Add an extension containing this method
    after the `UIImagePickerControllerDelegate` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This makes the `PhotoFilterViewController` class adopt the `ImageFiltering`
    protocol. Remember that any class that adopts this protocol gets the `apply(filter:originalImage:)`
    method. The `filterMainImage(filterItem:)` method uses this method to apply the
    selected filter to the photo stored in the `PhotoFilterViewController` instance's
    `mainImage` property, and the result is assigned to the `mainImageView` outlet
    so that it is visible on the screen. If you selected the `None` filter, then `mainImage`
    is assigned to the `mainImageView` outlet.
  prefs: []
  type: TYPE_NORMAL
- en: 'You still need to know which filter the user picked, so you''ll make the `PhotoFilterViewController`
    class adopt the `UICollectionViewDelegate` protocol and implement the method that
    identifies which cell in the collection view was tapped. Add the following extension
    containing this method after the `ImageFiltering` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `collectionView(_:didSelectItemAt:)` method is called whenever the user
    taps a cell in the collection view. The `FilterItem` corresponding to the cell
    that was tapped is then passed to `filterMainImage(filterItem:)`.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of the `PhotoFilterViewController` class is now complete
    but remember that you have to ask for permission to use the camera or to access
    the photo library. You'll modify the `Info.plist` file in your project so that
    messages will be displayed to the user when your app attempts to access the camera
    or photo library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting permission to use the camera or photo library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, Apple stipulates that your app must inform the user if
    it wishes to access the camera or photo library. If you don't do this, your app
    will be rejected and will not be allowed on the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll modify the `Info.plist` file in your project to make your app display
    messages when it tries to access the camera or photo library. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Info.plist` file in the Project navigator to display a list of keys.
    Move your mouse pointer over any existing key and click the **+** button:![Figure
    20.12: Editor area showing contents of Info.plist'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.12_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 20.12: Editor area showing contents of Info.plist'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A field should appear, allowing you to enter an additional key:![Figure 20.13:
    Editor area showing field used to enter keys'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.13_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 20.13: Editor area showing field used to enter keys'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For each key''s value, enter a string that explains to the user why you wish
    to use the camera or photo library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 20.14: Info.plist with additional keys added'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.14_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 20.14: Info.plist with additional keys added'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run the project. Go to the **Restaurant Detail** screen and tap the
    **Add Photo** button. You should see the following alert:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.15: iOS Simulator showing camera access alert'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.15_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 20.15: iOS Simulator showing camera access alert'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap **OK**. The image picker will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.16: iOS Simulator showing image picker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.16_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 20.16: iOS Simulator showing image picker'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a photo, and the **Photo Filter** screen will display the photo and
    a list of thumbnails with different filters applied to them. Tapping a filter
    will apply its effect to the photo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.17: iOS Simulator showing Photo Filter screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.17_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 20.17: iOS Simulator showing Photo Filter screen'
  prefs: []
  type: TYPE_NORMAL
- en: You've modified the `info.plist` file in your project and your app now asks
    for permission before using the camera or the photo library. You can use the **Cancel**
    button to dismiss the **Photo Filter** screen and return to the **Restaurant Detail**
    screen. You can't use the **Save** button yet though, you'll implement its functionality
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you completed the implementation of the `FilterData.plist`,
    a `.plist` file containing the filters you want to use, created the `FilterItem`
    class to store filter data, and created the `FilterManager` data manager class
    to read the `.plist` file and populate an array of `FilterItem` instances. Next,
    you created a protocol, `ImageFiltering`, with a method to apply filters to images.
    Then, you created the `FilterCell` and `PhotoFilterViewController` classes in
    order to manage the collection view cells and the `PhotoFilterViewController`
    class adopt the `UIImagePickerDelegate` protocol, and added methods so that you
    can use photos from the camera or photo library in your app. Finally, you added
    code to `PhotoFilterViewController` to apply a selected filter to a picture.
  prefs: []
  type: TYPE_NORMAL
- en: You are now able to write your own apps that import photos from your camera
    or photo library, and apply filters to them.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the selected picture cannot be saved. You will learn how to save reviews
    and pictures using Core Data in the next chapter so that they will reappear after
    you quit and relaunch the app.
  prefs: []
  type: TYPE_NORMAL
