["```swift\ninclude:\n#include <s3eTypes.h>\n\nfunctions:\nbool GyroscopeSupported() false\nvoid GyroscopeStart() void\nvoid GyroscopeStop() void\nfloat GyroscopeGetX() 0.0f\nfloat GyroscopeGetY() 0.0f\nfloat GyroscopeGetZ() 0.0f\n```", "```swift\nimport com.ideaworks3d.marmalade.LoaderAPI;\nimport com.ideaworks3d.marmalade.LoaderActivity;\n\nimport android.content.Context;\nimport android.hardware.Sensor;\nimport android.hardware.SensorEvent;\nimport android.hardware.SensorEventListener;\nimport android.hardware.SensorManager;\n```", "```swift\nclass Gyroscope implements SensorEventListener\n```", "```swift\n// Cached gyroscope values\nprivate float x;\nprivate float y;\nprivate float z;\n\n// Are the results in degrees/s or radians/s\nprivate boolean mUsesDegrees;\n```", "```swift\n// Helper function for accessing the Android SensorManager\nprivate SensorManager GetSensorManager()\n{\n   Context lContext = (Context) LoaderActivity.m_Activity;\n   SensorManager lSensorManager = (SensorManager)\n      lContext.getSystemService(Context.SENSOR_SERVICE);\n   return lSensorManager;\n}\n\n// Helper function for accessing the Android Gyroscope Sensor\nprivate Sensor GetGyroscopeSensor()\n{\n   SensorManager lSensorManager = GetSensorManager();\n   if (lSensorManager == null)\n      return null;\n\n   Sensor lGyroscope =\n      lSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);\n   return lGyroscope;\n}\n```", "```swift\npublic boolean GyroscopeSupported()\n{\n   Sensor lSensor = GetGyroscopeSensor();\n   return lSensor != null;\n}\n```", "```swift\npublic void GyroscopeStart()\n{\n  x = 0.0f;\n  y = 0.0f;\n  z = 0.0f;\n  mUsesDegrees = false;\n\n  Sensor lGyroscope = GetGyroscopeSensor();\n  if (lGyroscope != null)\n  {\n    mUsesDegrees = lGyroscope.getMaximumRange() > 100;\n    GetSensorManager().registerListener(this, lGyroscope,\n                  SensorManager.SENSOR_DELAY_FASTEST);\n  }\n}\n```", "```swift\npublic void GyroscopeStop()\n{\n  SensorManager lSensorManager = GetSensorManager();\n  if (lSensorManager != null)\n  {\n    lSensorManager.unregisterListener(this);\n  }\n\n  x = 0.0f;\n  y = 0.0f;\n  z = 0.0f;\n}\n```", "```swift\npublic float GyroscopeGetX()\n{\n  return x;\n}\n\npublic float GyroscopeGetY()\n{\n  return y;\n}\n\npublic float GyroscopeGetZ()\n{\n  return z;\n}\n```", "```swift\npublic void onAccuracyChanged(Sensor aSensor, int aAccuracy) \n{\n}\n\npublic void onSensorChanged(SensorEvent aEvent) \n{\n  if (aEvent.accuracy != SensorManager.SENSOR_STATUS_UNRELIABLE)\n  {\n    x = aEvent.values[0];\n    y = aEvent.values[1];\n    z = aEvent.values[2];\n\n    if (mUsesDegrees)\n    {\n      x = (x * 3.14159267f) / 180.0f;\n      y = (y * 3.14159267f) / 180.0f;\n      z = (z * 3.14159267f) / 180.0f;\n    }\n  }\n}\n```", "```swift\n#include <CoreMotion/CoreMotion.h>\n#include \"Gyroscope_internal.h\"\n```", "```swift\nCMMotionManager* gpMotionManager = nil;\n```", "```swift\ns3eResult GyroscopeInit_platform()\n{\n  gpMotionManager = [[CMMotionManager alloc] init];\n\n  return S3E_RESULT_SUCCESS;\n}\n```", "```swift\nvoid GyroscopeTerminate_platform()\n{\n  GyroscopeStop_platform();\n  [gpMotionManager release];\n}\n```", "```swift\nbool GyroscopeSupported_platform()\n{\n    return gpMotionManager.gyroAvailable;\n}\n```", "```swift\nvoid GyroscopeStart_platform()\n{\n  if (gpMotionManager.gyroAvailable && !gpMotionManager.gyroActive)\n  {\n    [gpMotionManager startGyroUpdates];\n  }\n}\n\nvoid GyroscopeStop_platform()\n{\n  if (gpMotionManager.gyroAvailable && gpMotionManager.gyroActive)\n  {\n    [gpMotionManager stopGyroUpdates];\n  }\n}\n```", "```swift\nfloat GyroscopeGetX_platform()\n{\n  CMGyroData* lpGyroData = [gpMotionManager gyroData];\n  if (lpGyroData)\n  {\n    CMRotationRate lpRotRate = [lpGyroData rotationRate];\n    return lpRotRate.x;\n  }\n  else\n  {\n    return 0.0f;\n  }\n}\n```", "```swift\niphone-link-opts=\"-framework CoreMotion\"\n```", "```swift\nmkb Gyroscope_iphone.mkb â€“arm\n```"]