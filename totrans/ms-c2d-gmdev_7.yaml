- en: Chapter 7. Reaching Our Destination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will be pretty light compared to the last few, as this game is
    ready to be finalized for release by now. We''ll be going over some steps of finalization
    within the project, as well as stuff to do within iTunes Connect before you submit
    the game to be reviewed by Apple. Specifically, we''ll cover the following topics
    in this relatively short chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a default image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the App on iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing the game and steps after it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this chapter, we'll be using the `Chapter 7` project, as it has some bug
    fixes as well as some other polish elements added. It's recommended that you open
    this project before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing this book, Cocos2d version 3.4 does not support native
    iPhone 6 or 6 Plus. So unfortunately, the art will look blurry as Apple scales
    up the iPhone 5 screen to match the iPhone 6 or 6 Plus resolutions. If you're
    determined to make native resolutions work, you can refer to a thread at [http://forum.cocos2d-swift.org/t/iphone-6-ios-resolutions-and-assets/15062/68](http://forum.cocos2d-swift.org/t/iphone-6-ios-resolutions-and-assets/15062/68).
    It describes using the iPad Retina version 6 assets when running version 6 Plus,
    and the iPhone Retina assets when running.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a default image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we only need to create the launch images for every iPad and every pre-6
    iPhone. Also, we're going to do a sort of hackish workaround that will make the
    iPhone 6 or 6 Plus graphics slightly better (though still not native), while at
    the same time making the iPhone 5 look better and worse at the same time (depending
    on how you look at it).
  prefs: []
  type: TYPE_NORMAL
- en: First, in the `Icon` folder of the project, delete the existing `Default` images,
    moving them to the trash rather than just removing the references.
  prefs: []
  type: TYPE_NORMAL
- en: There should be a folder called `Default Images` included in the project files,
    where you'll have each of the files needed for the project. Drag these files into
    the Xcode project (making sure you have the **Copy** checkbox checked).
  prefs: []
  type: TYPE_NORMAL
- en: Because we don't have many devices that need native default images, we're just
    going to skip asset catalogs for now. If you want to use them, you can, but it's
    not required (nor is there any real benefit) when you have the default images
    properly named, as we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the loading screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the default images are the first thing the user will see, we still
    want a smooth transition from the initial image to our game, instead of it just
    suddenly changing. So, we're going to create a transition scene just for the purpose
    of sliding the game view into position.
  prefs: []
  type: TYPE_NORMAL
- en: First, create a new class—a subclass of `CCScene`—and call it `LoadingScene`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the `scene` method to the `LoadingScene.h` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, replace your `LoadingScene.m` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Understand that we want to transition to `MainScene`, so we have to import it.
  prefs: []
  type: TYPE_NORMAL
- en: Also notice the `CCProgressNode` object. This will be a ring that will simulate
    loading. Since our game loads relatively fast without the need for a true loading
    bar or other sort of progress measurement, we don't want our users getting confused
    when they see the same image for a few seconds on end. So, we add a `CCProgressNode`
    object that lets them know "Hey, something's happening!"
  prefs: []
  type: TYPE_NORMAL
- en: It's fairly self-explanatory when you look at the code. The midpoint is essentially
    like the anchor point on other `CCNode` objects. If you want a bar instead of
    a circle, just change the type. Everything else should be the same.
  prefs: []
  type: TYPE_NORMAL
- en: Switching to LoadingScene from MainScene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, to make it all happen, we just need to add the import statement for
    `LoadingScene.h` to the `AppDelegate.m` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, at the bottom of your `startScene` method, look for the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with this new line of code that will go into the `LoadingScene`
    object we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you run the game at this point, you'll see the initial default image load,
    then after a second or two the progress ring will appear, and finally, the loading
    screen will go up and off screen, and drag the `MainScene` along with it.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have handled our initial launch, let's set up the icons.
  prefs: []
  type: TYPE_NORMAL
- en: Icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default icon that SpriteBuilder provided us was convenient for testing but
    it's time we set ourselves apart and create our own icon.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use the template we'll be talking about in the next section, you'll need
    Photoshop. If you have a design team, you likely have it somewhere. If you don't
    have Photoshop, you can get a free trial version from its website.
  prefs: []
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are about 10 to 15 different app icon sizes, depending on which devices
    you plan to support and which iOS versions you're supporting. It would be a pain
    to manually update all of these sizes if you change your icon. Thankfully, it's
    easier than ever to create the required app icon sizes with a template that was
    created by Michael Flarup.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the template from [www.appicontemplate.com](http://www.appicontemplate.com).
    Once it is downloaded, you can open it from Photoshop and begin using it. Once
    you're ready, you just have to run the action included in the download and it
    will generate the files for you.
  prefs: []
  type: TYPE_NORMAL
- en: There's also a very good video on how to use the template, so in the spirit
    of not repeating things twice, the how-to won't be shown here.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the icons to the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we want to get rid of the old icons, as we don't want any interference
    or accidental appearance on someone's device. So just delete the old icons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have your new icons created (or if you wish to use the icons included
    in this project), simply drag the files into Xcode, making sure that the **Copy**
    checkbox is checked. This is also shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the icons to the project](img/image00284.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Right now, the project isn't going to use the new icons, so we need to assign
    the icon file to be used for each size with asset catalogs.
  prefs: []
  type: TYPE_NORMAL
- en: Asset catalog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to use an asset catalog for our icons. Ideally, we should use them
    for our launch images as well, but since we're not supporting any crazy device
    sizes or orientations, it's just not necessary at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: With icons, however, it's just a lot easier to create the asset catalog, then
    drag and drop your icons into the appropriate place based on which iOS versions
    you wish to support.
  prefs: []
  type: TYPE_NORMAL
- en: So first, you need to create the asset catalog in Xcode by going to the project's
    general settings and clicking on the **Use Asset Catalog** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the asset catalog already exists, simply click on the arrow to the right
    of the drop-down box to navigate to that asset catalog. This is also shown in
    the following screenshot for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Asset catalog](img/image00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Then, with the catalog created, simply drag the images into the appropriate
    place based on what dimensions they need to be. The following screenshot is a
    rough representation of what they should be, but make sure you drag the correct
    images, or else Xcode will throw a warning that you're giving it an incorrectly
    sized image. Thankfully, the template we use gives us a good name for our images,
    so we can quickly see which icon is of what size.
  prefs: []
  type: TYPE_NORMAL
- en: '![Asset catalog](img/image00286.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we aren't supporting **iOS 6.1 and prior** sizes. Although you may
    think it's just a couple of icon sizes, if you're truly willing to support iOS
    6 and older versions, you must run your app on a device running an older device
    to make sure that nothing crashes.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, once you've added your images to the asset catalog, clean up the project,
    and rerun it. You'll see the **Update** icon as expected. That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Analytics and user data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One final thing to do before we submit our app is to set up some quick analytics
    tools to determine the way our users play our game. We're going to use an API
    called **Flurry**. If you haven't heard of it before or you have but never used
    it, it's fine, as the following section will take you through the setup process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Flurry is nice for three main reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplicity in setting up and using
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed analytics available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's free! Who can argue with that?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's go for it, starting with the signup process.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up for Flurry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to [http://www.flurry.com/](http://www.flurry.com/), and in the top-right
    corner, click on **Sign Up**. Fill in the information it asks for, and then click
    on **Sign Up**.
  prefs: []
  type: TYPE_NORMAL
- en: After that, it'll ask you which platform you wish to track analytics for. Here,
    since we're making an app for iPhone and iPad (a universal app for iOS), we'll
    select iPhone. If the app were only available on iPad, you would have selected
    the iPad version.
  prefs: []
  type: TYPE_NORMAL
- en: We then add the name of the app and choose which category the app falls under.
  prefs: []
  type: TYPE_NORMAL
- en: Once that's ready, click on **Create App** at the bottom, and Flurry will ask
    you to verify your e-mail. Once you click on the link in your e-mail (or copy
    the code that they send and paste it in the verification box they provide), you'll
    be directed to a screen letting you know that the process was a success. Then
    you should be given an API key.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to either copy this API key somewhere or leave the web page open, as
    we'll need this later when we actually begin our session tracking.
  prefs: []
  type: TYPE_NORMAL
- en: After the successful setup, you should see a link to download the SDK. Download
    the SDK (ZIP file), and wait until it finishes. It may take a minute or so.
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up for Flurry](img/image00287.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the SDK is downloaded and unzipped, we're ready to add Flurry to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Flurry to your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the Flurry API should be included with all the other libraries, in the
    downloaded SDK, you should see a `Flurry` folder. Drag that entire folder into
    the `libs` folder of Xcode (making sure that the copy checkbox is checked).
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Flurry to your project](img/image00288.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Then, we'll want to make sure that the proper frameworks are included in our
    project so that Flurry can do its things properly. So, in the **Build Phases**
    of our project, we're going to add a few frameworks. Simply click on the **+**
    button under the **Link Binary with Libraries** section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Flurry to your project](img/image00289.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then search for and add the following frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Security.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SystemConfiguration.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CFNetwork.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the library has been included in our project, and we can import the
    Flurry header to our `AppDelegate.m` file, and start our tracking session in the
    `application:didFinishLaunchingWithOptions` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `API_KEY_HERE` string should be your actual API key from when
    the app was first created, so feel free to copy that at this point.
  prefs: []
  type: TYPE_NORMAL
- en: There's also debugging information for you when you're first starting out (or
    any time, really). Ideally, you should disable this on release, but for now, it's
    helpful to see what's happening when testing.
  prefs: []
  type: TYPE_NORMAL
- en: Logging events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Events are the bread and butter of Flurry. They're essentially a limitless way
    of tracking your own custom events. Instead of keeping predefined functions or
    events, you have to simply pass the event name (simply a string) that you wish
    to track, and Flurry handles the rest for you.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let's say we want to track how many times our users start the
    game. Since we often visit the `MainScene`, we don't want a false positive being
    tracked. That being said, let's log the event only when they move a unit (but
    only on the first move, when `numTurnsSurvived` is equal to `1`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `MainScene.m`, and in the `moveUnit` function, add the following code
    to the top of the method that will log the `started_game` event for the current
    session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example might be when a user finishes the tutorial. So in `MainScene.m`,
    in our `advanceTutorial` method, let''s add an event for the case of our users
    finishing the tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: And it's that easy to add event tracking! You can have an unlimited amount of
    differently named events, up to 300 unique events can be tracked per session (so
    make use of as many as you can that are relevant to your app/game), and there's
    no limit to how many times a given event can be tracked.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's also event logging with parameters, such as whether the user is registered
    or not, what device they're using, whether they're using a specific setting or
    not, and so on. Any string can be a parameter. You can read more about parameters
    within the Flurry API at [https://developer.yahoo.com/flurry/docs/analytics/gettingstarted/events/ios/](https://developer.yahoo.com/flurry/docs/analytics/gettingstarted/events/ios/).
  prefs: []
  type: TYPE_NORMAL
- en: Flurry will automatically submit any session data when you're done using the
    app. Although that sounds rather ambiguous, it essentially sends data when the
    **Home** button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, if you're testing it, make sure your events are being logged
    correctly by Flurry using Xcode, and do not hit the **Stop** button before hitting
    the **Home** button on your device (or the simulator). The data may never be sent
    and you might spend hours or even days wondering why nothing seems to be working,
    when you actually never gave Flurry a chance to send the information.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our events being logged and sent to the Flurry servers, let's
    actually track and analyze our data.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking and visualizing the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Thankfully, Flurry doesn''t just grab our raw data, but actually creates useful
    analytics for us, so we don''t have to do any analytics on the data ourselves.
    If you want to see, for example, how many people start a game every day, or how
    many people complete a game by surviving for more than 20 turns, you can easily
    see such data on their website. Here is a screenshot of what Flurry might look
    like after a few weeks of use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracking and visualizing the data](img/image00290.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note that it takes approximately 15 to 45 minutes for an event to appear in
    your Flurry event dashboard (not the data, but the event name). If, after a few
    hours, you're still not seeing the event listed in your dashboard, try again,
    but make sure you properly exit the app this time. This means pressing the **Home**
    button before stopping the app in Xcode so that Flurry can detect that event and
    send the data.
  prefs: []
  type: TYPE_NORMAL
- en: Also, Flurry isn't displayed in real time, so any actual data that gets sent
    to them is processed, and it may not appear for at least 24 hours. When testing,
    if you find yourself wondering where the data is, just wait for a day or two.
    Then it should start showing up. If it doesn't, make sure you're seeing the proper
    debug log messages in Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you ever get lost using Flurry, want further explanation, or just want to
    know more about the advanced features of Flurry, you can look at their *Get Started*
    guide on their website at [https://developer.yahoo.com/flurry/#get-started](https://developer.yahoo.com/flurry/#get-started).
    It's fairly comprehensive.
  prefs: []
  type: TYPE_NORMAL
- en: If you're interested in alternatives to Flurry, you can look into iOS Analytics
    by doing a quick search, as well as by checking out [http://www.apptamin.com/blog/app-analytics-tools/](http://www.apptamin.com/blog/app-analytics-tools/),
    which shows (and covers in detail) various other analytics tools.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the app on iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have everything ready, let's go ahead and get iTunes Connect ([https://itunesconnect.apple.com](https://itunesconnect.apple.com))
    ready so that we can submit this game to be reviewed by Apple. This section assumes
    you already have a developer account and an app in iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't have a developer account, this is a good time to get it. If you're
    don't know how to get it, read [Chapter 1](part0014.xhtml "Chapter 1. Refreshing
    Your Cocos2d Knowledge"), *Refreshing Our Cocos2d Knowledge*. If you do have a
    developer account, but haven't created the App in iTunes Connect yet, go back
    to the *Game Center* section of [Chapter 6](part0049.xhtml "Chapter 6. Tidying
    Up and Polishing"), *Tidying Up and Polishing*. There, you will see the step-by-step
    way to create an app in iTunes Connect. Once you've done that, you'll be ready
    to continue from here.
  prefs: []
  type: TYPE_NORMAL
- en: For the most part, iTunes Connect is fairly self-explanatory. However, we'll
    quickly see what each section is and what you need to enter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the app on iTunes Connect](img/image00291.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When you open your app in iTunes Connect, you'll see many sections at the top,
    as well as a section for the screenshots and the video preview. It's required
    that you include screenshots for every device you support. Since we're going to
    support all devices, it's best to add screenshots (and maybe a quick 30-second
    video) for each device.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, you should take your own screenshots for each device, which is why
    none are included in the project's files (maximum five screenshots per device
    can be added).
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the app on iTunes Connect](img/image00292.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Below the screenshots, you'll see the app's display name in the App Store, a
    description (4,000-character limit) of the app that will be visible in the App
    Store, keywords that people can enter in order to find your app/game on the App
    Store, and a link to your website for users who want to learn more about you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The keywords are comma delimited, and have a maximum of 100 characters. So,
    for example, the following are a few terms that could be used to describe this
    game. This string is 28 characters long:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cube,square,grid,number,math`'
  prefs: []
  type: TYPE_NORMAL
- en: If you need help determining the length of your keywords, you can just search
    for a string length counter, and generally, any one will do the job.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the app on iTunes Connect](img/image00293.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next is the App's icon (this has to be 1024 x 1024, and in PNG or JPG format)—which
    will be displayed throughout the App Store—the version number, the categories
    it will appear under, and so on. An example of copyright information could be
    KeitGames 2015 (just imagine a little copyright symbol next to it when filling
    this part).
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note is the **Ratings** section. Here, although it's subtle, you
    must click on the **Edit** button to go through the process of self-rating your
    app to determine what minimum age group the app is appropriate for. In our case,
    it's going to end up being 4+.
  prefs: []
  type: TYPE_NORMAL
- en: Also, after you submit a build to iTunes, it will go through a processing phase
    that lasts a few minutes. After that, in the **Builds** section, you can select
    which build you want to submit for the particular version of the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the app on iTunes Connect](img/image00294.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we have the Game Center section. This is separate from the **Game Center**
    tab at the top of the screen because, even though you may have a working leaderboard
    set up and working within your test build, unless you enable **Game Center** here
    and select which leaderboard you want to add, it won't show up on the released
    version.
  prefs: []
  type: TYPE_NORMAL
- en: You can also provide a demo account if your app or game requires a login for
    it to work, as well as submit any notes you may have for the person reviewing
    your app.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, If we select **Automatically release this version**, then whenever
    the app is approved by Apple, it will immediately begin processing for the App
    Store. It will then show up that day or the next (or whatever date in the future
    you have set in the **Pricing** section at the top). Suppose you choose **Manually
    release this version**. Then even if the app is approved by Apple, it will not
    begin processing (and thus will not be available for download, even after the
    set release date) until you click on **Release This Version**.
  prefs: []
  type: TYPE_NORMAL
- en: With all of the relevant information filled out, we can actually go through
    the process of creating a build and submitting it to Apple.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing the game and steps after it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the part when the excitement really builds, and you say to yourself
    "It's time."
  prefs: []
  type: TYPE_NORMAL
- en: But seriously, it's an exciting moment when your game is finally ready for release
    and you're sending it to be reviewed by Apple with the plan that it gets into
    the hands of possibly millions of people.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to do when releasing a game is to create an archived file of
    your app that you can upload to the Apple servers. To do this, simply go to **Product**
    | **Archive** (if it's grayed out, change your device type from one of the simulators
    to a device, even if you don't have a device plugged in).
  prefs: []
  type: TYPE_NORMAL
- en: 'After the archiving is complete, a screen that looks like what is shown in
    the following screenshot will open (if it doesn''t, you can go to **Window** |
    **Organizer**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Releasing the game and steps after it](img/image00295.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From here, click on **Export**. Choose **Save for iOS App Deployment** and click
    on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in if you aren''t logged in already, and it will take you to a screen that
    looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If it says it can't find an app with a matching bundle ID, just click on **Try
    Again**. It should find it the second time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Releasing the game and steps after it](img/image00296.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Export**, and then save it somewhere you can find later (such as
    the Desktop).
  prefs: []
  type: TYPE_NORMAL
- en: Now open the **Application Loader** by going to **Xcode** | **Open Developer
    Tool** | **Application Loader**. Sign in and choose **Deliver Your App**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Releasing the game and steps after it](img/image00297.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now navigate to wherever you exported your IPA file, and open it. It will read
    the data, and the screen looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Releasing the game and steps after it](img/image00298.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When you click on **Next**, it will go through the process of verifying that
    all your icons are added properly and the default images exist, and anything else
    ensuring the app matches up with the information you provided.
  prefs: []
  type: TYPE_NORMAL
- en: If there are any errors, warnings, or issues that come up, chances are high
    that you're not the only person facing that issue. A quick Google search never
    hurt anyone.
  prefs: []
  type: TYPE_NORMAL
- en: Once the verification process is done, it will upload the app to Apple's servers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this does not mean the app is "submitted" for review. It's just uploaded
    so that you can select it from iTunes Connect when you're ready. Even if it says
    something about being e-mailed when it's in review, that's not true (which is
    odd).
  prefs: []
  type: TYPE_NORMAL
- en: Now head back to iTunes Connect after waiting a few minutes, and you should
    see a **+** button next to the **Builds** section. When you click on it, you should
    be able to select the recently uploaded build.
  prefs: []
  type: TYPE_NORMAL
- en: '![Releasing the game and steps after it](img/image00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Save** at the top. Then click on **Submit for Review**. Then complete
    the required questionnaire about what your app includes (in our case, none of
    them). Then click on **Submit**.
  prefs: []
  type: TYPE_NORMAL
- en: We're on our way!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A faster way to validate and submit your apps to the App Store is without using
    the Application Loader. Instead of clicking on **Export**, you can click on either
    **Validate** or **Submit**, and the same process will take place.
  prefs: []
  type: TYPE_NORMAL
- en: After submission
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that your app's status is **Waiting for Review**, it's best to make use
    of your time by either preparing for an update (because in theory, you could be
    constantly pushing updates, and as soon as one gets accepted, you push another)
    or marketing your game to the public.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, you''ve been doing all of this early on: blogging about your progress,
    posting about it on social media, telling your friends and family about the game
    you''re creating, and so on. But if you haven''t, no worries! The next few sections
    will guide you through this process.'
  prefs: []
  type: TYPE_NORMAL
- en: Beta testers and the target market
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't have people playing your game and alpha or beta testing it yet,
    now's probably the best time to do it. You should try to get an array of players
    with different skill sets to see how different users interact with your game so
    that you can try to eliminate the confusion with as many people as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you're wondering, "What kind of people should I look for to test my
    game?" you need to consider who your ideal player is. If you're making a kids'
    game, try to get kids (or maybe even their parents) to play your game. If the
    genre is tower defense, try to find people who just love tower defense games so
    that they can give you great feedback.
  prefs: []
  type: TYPE_NORMAL
- en: If you're interested in beta testing with people who aren't in your vicinity,
    consider Apple's TestFlight integration. At first, TestFlight was a standalone
    product, but now Apple has included it within iTunes Connect (you might have seen
    it if you went under the **Prerelease** tab). Essentially, you can invite people
    to use your app/game just by getting their e-mail. You upload a build in the same
    way you submitted it, except that you have to add the build to the prerelease,
    and after a review process, Apple allows the testers to download and play the
    game.
  prefs: []
  type: TYPE_NORMAL
- en: But having beta testers and figuring out your target audience is only step 1\.
    Step 2 involves getting your game into the hands of many people.
  prefs: []
  type: TYPE_NORMAL
- en: App review sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the keys to making your game a success is getting it into the hands of
    other people, especially people who write blogs or articles that are reviews of
    games other people have made. If a game is amazing, you'll see it all over the
    place, and maybe even Apple takes notice and features it under the **Featured**
    section of their App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you e-mail any developer (who isn''t in a prominent company) and ask them
    how Apple featured them, the response is generally the same: "We had no idea that
    it was going to happen. We just asked some websites to review our game, and then
    all of a sudden, we were featured on the App Store for the week!"'
  prefs: []
  type: TYPE_NORMAL
- en: That being said, there's a giant list of app review websites at [https://maniacdev.com/2012/05/ios-app-review-sites](https://maniacdev.com/2012/05/ios-app-review-sites),
    so that you don't have to find them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Although the URL says "2012," it has been updated as recently as August 2014,
    at the time of writing this book. The websites are sorted by Alexa ranking, which
    places the most viewed site at the top of the list (and the least viewed at the
    bottom).
  prefs: []
  type: TYPE_NORMAL
- en: Apple gives you 100 promo codes for every version you submit to the App Store.
    Use these codes when pitching/submitting your game to these sites.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that it's not likely that your game will make it to a site like *Mashable*
    or *TechCrunch* right away without already being a big hit, so to make better
    use of the promo codes, it might be a better option to start lower on the list
    and work your way up, instead of down.
  prefs: []
  type: TYPE_NORMAL
- en: Other sources of information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's a website known as *PixelProspector*. They have a ton of resources,
    links, guides, and more when it comes to game development (especially when it
    comes to indie games, which is most likely what you like if you're reading this
    book). Even if you're part of a reputed studio, this is still a great source for
    information (especially their relatively new **Marketing** section). Check it
    out at [http://www.pixelprospector.com/indie-resources/](http://www.pixelprospector.com/indie-resources/).
    You'll probably find something useful.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create a default image for your app, properly
    set up the icons (along with using the asset catalog), add analytics to your app
    via Flurry, set up everything on iTunes Connect, release your app, and plan what
    to do afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll cover Apple's newest language, called **Swift**.
    We'll see a nongame example as well as a small game using Cocos2d's Swift version.
  prefs: []
  type: TYPE_NORMAL
