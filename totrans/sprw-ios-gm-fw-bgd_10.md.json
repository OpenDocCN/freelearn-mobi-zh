["```swift\n    @property SPTextField *message;\n    ```", "```swift\n    @property (nonatomic) BOOL gameWon;\n    ```", "```swift\n    #import \"SceneDirector.h\"\n    #import \"Assets.h\"\n    #import \"World.h\"\n    ```", "```swift\n    -(id) init\n    {\n        if ((self = [super init])) {\n\n            SPImage *background = [SPImage imageWithTexture:[Assets texture:@\"water.png\"]];\n\n            _message = [SPTextField textFieldWithWidth:Sparrow.stage.width height:Sparrow.stage.height text:@\"Game Over\" \n                  fontName:@\"PirateFont\" fontSize:24.0f color:SP_WHITE];\n\n            SPTexture *yesButton = [[Assets textureAtlas:@\"ui.xml\"] textureByName:@\"dialog_yes\"];\n    SPButton *resetButton = [SPButton buttonWithUpState:yesButton text:@\"Start over\"];\n\n            resetButton.x = (Sparrow.stage.width - resetButton.width) / 2;\n            resetButton.y = Sparrow.stage.height - resetButton.height - 8.0f;\n\n            [resetButton addEventListenerForType:SP_EVENT_TYPE_TRIGGERED block:^(id event) {\n                [World reset];\n                [(SceneDirector *) self.director showScene:@\"piratecove\"];\n            }];\n\n            [self addChild:background];\n            [self addChild:_message];\n            [self addChild:resetButton];\n        }\n\n        return self;\n    }\n    ```", "```swift\n    -(BOOL) getGameWon\n    {\n        return _gameWon;\n    }\n    ```", "```swift\n    -(void) setGameWon:(BOOL)gameWon\n    {\n        _gameWon = gameWon;\n\n        if (_gameWon) {\n            _message.text = @\"You won the game. Congratulations.\";\n        } else {\n            _message.text = @\"Your ship sank. Try again.\";\n        }\n    }\n    ```", "```swift\n    #import \"GameOver.h\"\n    ```", "```swift\n    GameOver *gameOver = [[GameOver alloc] initWithName:@\"gameover\"];\n    ```", "```swift\n    [director addScene:gameOver];\n    ```", "```swift\n    [director showScene:@\"gameover\"];\n    ```", "```swift\n    -(void) reset\n    {\n        self.gameWon = NO;\n    }\n    ```", "```swift\n    @property (readonly) Scene *currentScene;\n    ```", "```swift\n    -(void) showScene:(NSString *)name\n    {\n        for (NSString* sceneName in _dict) {\n            ((Scene *) _dict[sceneName]).visible = false;\n            [((Scene *) _dict[sceneName]) stop];\n        }\n\n        if (_dict[name] != nil) {\n            ((Scene *) _dict[name]).visible = YES;\n            [((Scene *) _dict[name]) reset];\n            _currentScene = (Scene *) _dict[name];\n        }\n    }\n    ```", "```swift\n    -(void) reset\n    {\n        self.paused = NO;\n\n        _pirateShip.x = [(NSNumber *) [Assets dictionaryFromJSON:@\"gameplay.json\"][@\"battlefield\"][@\"pirate\"][@\"x\"] floatValue];\n        _pirateShip.y = [(NSNumber *) [Assets dictionaryFromJSON:@\"gameplay.json\"][@\"battlefield\"][@\"pirate\"][@\"y\"] floatValue];\n\n        [_pirateShip reset];\n     _pirateShip.visible = YES;\n\n        for (int i = 0; i < [_enemyShip count]; i++) {\n             ((Ship *) _enemyShip[i]).x = [(NSNumber *) [Assets dictionaryFromJSON:@\"gameplay.json\"][@\"battlefield\"][@\"enemy\"][i][@\"x\"] floatValue];\n            ((Ship *) _enemyShip[i]).y = [(NSNumber *) [Assets dictionaryFromJSON:@\"gameplay.json\"][@\"battlefield\"][@\"enemy\"][i][@\"y\"] floatValue];\n            [((Ship *) _enemyShip[i]) reset];\n            ((Ship *) _enemyShip[i]).visible = NO;\n        }\n\n        for (int i = 0; i < World.level; i++) {\n            ((Ship *) _enemyShip[i]).visible = YES;\n            [self updateAI:_enemyShip[i] withState:_aiState];\n        }\n    }\n    ```", "```swift\n    if (deadCount == World.level) {\n      if (World.level == World.levelMax) {\n     [(SceneDirector *) self.director showScene:@\"gameover\"];\n     ((GameOver *) ((SceneDirector *) self.director).currentScene).gameWon = YES;\n      } else {\n        World.gold = World.gold + (250 * World.level);\n        World.level++;\n        self.paused = YES;\n        [((SceneDirector *) self.director) showScene:@\"piratecove\"];\n      }\n    }\n    ```", "```swift\n    __weak typeof(self) weakSelf = self;\n    _pirateShip.onDead = ^{\n     [(SceneDirector *) weakSelf.director showScene:@\"gameover\"];\n     ((GameOver *) ((SceneDirector *) weakSelf.director).currentScene).gameWon = NO;\n    };\n    ```", "```swift\n    -(id) init\n    {\n        if ((self = [super init])) {\n\n            SPImage *background = [SPImage imageWithTexture:[Assets texture:@\"water.png\"]];\n\n        SPTexture *shipTexture = [[Assets textureAtlas:@\"ship_pirate_small_cannon.xml\"] textureByName:@\"ne_0001\"];\n            SPImage *ship = [SPImage imageWithTexture:shipTexture];\n            ship.x = 16.0f;\n            ship.y = (Sparrow.stage.height - ship.height) / 2;\n\n        SPTexture *dialogTexture = [[Assets textureAtlas:@\"ui.xml\"] textureByName:@\"dialog_yes\"];\n            SPButton *buttonNewGame = [SPButton buttonWithUpState:dialogTexture text:@\"New game\"];\n\n            buttonNewGame.x = (Sparrow.stage.width - buttonNewGame.width) / 2;\n            buttonNewGame.y = 50.0f;\n\n            [buttonNewGame addEventListenerForType:SP_EVENT_TYPE_TRIGGERED block:^(id event) {\n                [(SceneDirector *) self.director showScene:@\"piratecove\"];\n            }];\n\n            SPButton *buttonContinue = [SPButton buttonWithUpState:dialogTexture text:@\"Continue\"];\n\n            buttonContinue.x = (Sparrow.stage.width - buttonContinue.width) / 2;\n            buttonContinue.y = 150.0f;\n            buttonContinue.enabled = NO;\n\n            [self addChild:background];\n            [self addChild:ship];\n            [self addChild:buttonNewGame];\n            [self addChild:buttonContinue];\n        }\n\n        return self;\n    }\n    ```", "```swift\n    #import \"MainMenu.h\"\n    ```", "```swift\n    MainMenu *mainMenu = [[MainMenu alloc] initWithName:@\"mainmenu\"];\n    ```", "```swift\n    [director addScene:mainMenu];\n    ```", "```swift\n    [director showScene:@\"mainmenu\"];\n    ```", "```swift\n    +(void) checkShipCollision: (Ship *) ship1 againstShip: (Ship *) ship2 withReferenceToSprite: (SPSprite *) sprite;\n    ```", "```swift\n    SPRectangle *enemyShipBounds = [ship1 boundsInSpace:sprite];\n    SPRectangle *ball1 = [ship2.cannonBallLeft boundsInSpace:sprite];\n    SPRectangle *ball2 = [ship2.cannonBallRight boundsInSpace:sprite];\n\n    if ([enemyShipBounds intersectsRectangle:ball1] || [enemyShipBounds intersectsRectangle:ball2]) {\n      if (ship2.cannonBallLeft.visible || ship2.cannonBallRight.visible) {\n        [ship2 abortShooting];\n        if (ship1.type == ShipPirate) {\n          [ship1 hit: World.damage];\n        } else {\n          [ship1 hit:[(NSNumber *) [Assets dictionaryFromJSON:@\"gameplay.json\"][@\"damage\"] intValue]];\n        }\n      }\n    }\n    ```", "```swift\n    for (int i = 0; i < World.level; i++) {\n     [Collision checkShipCollision:_pirateShip againstShip:_enemyShip[i] withReferenceToSprite:self];\n     [Collision checkShipCollision:_enemyShip[i] againstShip:_pirateShip withReferenceToSprite:self];\n\n      [_enemyShip[i] advanceTime:passedTime];\n      if (((Ship *) _enemyShip[i]).isDead) {\n        deadCount++;\n      }\n    }\n    ```", "```swift\n    @interface Intro : Scene {\n        Ship *_pirateShip;\n        Ship *_enemyShip;\n    }\n    ```", "```swift\n    -(id) init\n    {\n        if ((self = [super init])) {\n\n            SPImage *background = [SPImage imageWithTexture:[Assets texture:@\"water.png\"]];\n\n            _pirateShip = [[Ship alloc] initWithType:ShipPirate];\n            _pirateShip.x = 16.0f;\n            _pirateShip.y = ((Sparrow.stage.height - _pirateShip.height) / 2) - 20.0f;\n\n            _enemyShip = [[Ship alloc] initWithType:ShipNormal];\n            _enemyShip.x = Sparrow.stage.width - _enemyShip.width - 16.0f;\n            _enemyShip.y = ((Sparrow.stage.height - _enemyShip.height) / 2) + 20.0f;\n\n            [self addEventListener:@selector(onEnterFrame:) atObject:self forType:SP_EVENT_TYPE_ENTER_FRAME];\n\n            SPButton *buttonNext = [SPButton buttonWithUpState:[[Assets textureAtlas:@\"ui.xml\"] textureByName:@\"dialog_yes\"] text:@\"Next\"];\n\n            buttonNext.x = (Sparrow.stage.width - buttonNext.width) / 2;\n            buttonNext.y = Sparrow.stage.height - buttonNext.height - 8.0f;\n\n            [buttonNext addEventListenerForType:SP_EVENT_TYPE_TRIGGERED block:^(id event) {\n                [(SceneDirector *) self.director showScene:@\"piratecove\"];\n            }];\n            [self addChild:background];\n            [self addChild:_pirateShip];\n            [self addChild:_enemyShip];\n            [self addChild:buttonNext];\n        }\n\n        return self;\n    }\n    ```", "```swift\n    -(void) onEnterFrame: (SPEnterFrameEvent *) event\n    {\n        double passedTime = event.passedTime;\n\n        [Collision checkShipCollision:_pirateShip againstShip:_enemyShip withReferenceToSprite:self];\n        [Collision checkShipCollision:_enemyShip againstShip:_pirateShip withReferenceToSprite:self];\n\n        [_pirateShip advanceTime:passedTime];\n        [_enemyShip advanceTime:passedTime];\n    }\n    ```", "```swift\n    -(void) reset\n    {\n        [_pirateShip reset];\n        [_enemyShip reset];\n\n        [_pirateShip moveToX:Sparrow.stage.width / 2 andY:(Sparrow.stage.height / 2) - 20.0f withBlock:^{\n            [_pirateShip.juggler delayInvocationByTime:1.5f block:^{\n                [_pirateShip shootWithBlock:^{\n                    [_pirateShip shootWithBlock:^{\n                        [_pirateShip shootWithBlock:^{\n                            [_pirateShip.juggler delayInvocationByTime:1.0f block:^{\n                                [_pirateShip shoot];\n                            }];\n                        }];\n                    }];\n                }];\n            }];\n        }];\n\n        [_enemyShip moveToX:Sparrow.stage.width / 2 andY:(Sparrow.stage.height / 2) + 20.0f withBlock:^{\n            [_enemyShip shoot];\n        }];\n    }\n    ```", "```swift\n    SPTextField *_message;\n    ```", "```swift\n    [buttonNext addEventListenerForType:SP_EVENT_TYPE_TRIGGERED block:^(id event) {\n      [(SceneDirector *) self.director showScene:@\"piratecove\"];\n    }];\n\n    SPQuad *quad = [SPQuad quadWithWidth:400.0f height:60.0f color:SP_BLACK];\n    quad.alpha = 0.8f;\n    quad.x = 16.0f;\n    quad.y = 16.0f;\n\n    _message = [SPTextField textFieldWithWidth:400.0f height:60.0f text:@\"Welcome to the battlefield.\"];\n    _message.color = SP_WHITE;\n    _message.x = 16.0f;\n    _message.y = 16.0f;\n\n    [self addChild:background];\n    [self addChild:_pirateShip];\n    [self addChild:_enemyShip];\n    [self addChild:buttonNext];\n    [self addChild:quad];\n    [self addChild:_message];\n\n    ```", "```swift\n    [_pirateShip moveToX:Sparrow.stage.width / 2 andY:(Sparrow.stage.height / 2) - 20.0f withBlock:^{\n     _message.text = @\"There is your ship (the pirate ship) and at least one enemy\";\n      [_pirateShip.juggler delayInvocationByTime:2.5f block:^{\n        [_pirateShip shootWithBlock:^{\n           _message.text = @\"Tap anywhere to move your ship.\";\n          [_pirateShip shootWithBlock:^{\n            [_pirateShip shootWithBlock:^{\n              _message.text = @\"Double-tap on your ship to shoot.\";\n              [_pirateShip.juggler delayInvocationByTime:2.5f block:^{\n                _message.text = @\"In-between missions you can upgrade your ship.\";\n                [_pirateShip shoot];\n              }];\n            }];\n          }];\n        }];\n      }];\n    }];\n    ```", "```swift\n    +(NSDictionary *) serialize;\n    +(void) deserialize: (NSDictionary *) dict;\n    ```", "```swift\n    +(NSDictionary *) serialize\n    {\n        return @{\n                 @\"level\": [NSNumber numberWithInt:level],\n                 @\"gold\": [NSNumber numberWithInt:gold],\n                 @\"damage\": [NSNumber numberWithInt:damage],\n                 @\"hitpoints\": [NSNumber numberWithInt:hitpoints]\n        };\n    }\n\n    +(void) deserialize: (NSDictionary *) dict\n    {\n        level = [(NSNumber *) dict[@\"level\"] intValue];\n        gold = [(NSNumber *) dict[@\"gold\"] intValue];\n        damage = [(NSNumber *) dict[@\"damage\"] intValue];\n        hitpoints = [(NSNumber *) dict[@\"hitpoints\"] intValue];\n    }\n    ```", "```swift\n    buttonContinue.x = (Sparrow.stage.width - buttonContinue.width) / 2;\n    buttonContinue.y = 150.0f;\n    buttonContinue.enabled = NO;\n\n    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n    id savedGame = [userDefaults objectForKey:@\"game\"];\n    if (savedGame != nil) {\n      [World deserialize:(NSDictionary *) [userDefaults objectForKey:@\"game\"]];\n      buttonContinue.enabled = YES;\n    }\n\n    [buttonContinue addEventListenerForType:SP_EVENT_TYPE_TRIGGERED block:^(id event) {\n      [(SceneDirector *) self.director showScene:@\"piratecove\"];\n    }];\n\n    [self addChild:background];\n    ```", "```swift\n    - (void)applicationWillResignActiveNotification:(NSNotification*)notification\n    {\n        NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n        [userDefaults setObject:[World serialize] forKey:@\"game\"];\n        [userDefaults synchronize];\n    }\n    ```"]