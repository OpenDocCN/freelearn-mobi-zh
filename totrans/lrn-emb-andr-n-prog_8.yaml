- en: Chapter 8\. Beyond the Smartphone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Chapter 7, *Tailoring Your Personal Android System*, you learned how to
    add the final personal touch to your custom Android system. You customized both
    the application layer and the system layer: new menus, new apps, and new daemons.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going even further: we are going *outside* the smartphone,
    connecting to external microcontrollers, sensors, and different devices. We will
    see how our whole world could be connected and interactive with Android.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn about Android ADK and Arduino, and how Google is filling our
    lives with Android-oriented devices: from Chromecast devices to Android Auto,
    from smart watches to Internet of Things.'
  prefs: []
  type: TYPE_NORMAL
- en: Meeting Arduino
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'More than ten years ago, in a bar in a small Italian town, a group of students
    and researchers created a low-cost microcontroller that would revolutionize the
    world of DIY (Do It Yourself)â€”**Arduino**, shown in the next image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The latest version of Ardunio (or Genuino, for the non-USA market) is called
    Arduino **UNO**. **Uno** means *one* in Italian and this codename celebrates the
    first stable version of the IDE (Integrated Development Environment) that comes
    with the board itself. This board is based on ATmega328P by Atmel and provides
    a set of controllable input/output pins. It can work as a standalone microcontroller,
    once it has been properly programmed, and can be used via its USB connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The greatest feature of Arduino is its open nature: everything, from the hardware
    schematics to the development IDE, has been open source since day one. This openness,
    and the extensible design of the board, allowed manufactures and advanced users
    to create an infinite number of so-called **shields**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'An Arduino shield is a separate component that can be attached to Arduino to
    enhance it and to add new features. The previous image shows how Arduino shields
    can be stacked to create a totally new and customized device. Common examples
    of Arduino shields are:'
  prefs: []
  type: TYPE_NORMAL
- en: The Ethernet Shield, which gives Arduino the ability to communicate with the
    outside world via an Internet connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Proto Shield, which can be used to make a *permanent* version of a prototype
    that you created with a breadboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Relay Shield, which enables Arduino to pilot high-voltage circuits. This
    is crucial for home automation when you need to turn lights or appliances on and
    off.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Display Shield, which gives Arduino a visual way to communicate with the
    outside world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since Arduino came out, it has gained more and more fans and passionate developers,
    thanks to its easy interface and the extremely flat learning curve. Today, software
    developers without hardware or electronics knowledge can create projects that
    live outside their computers and can interact with the external world. To take
    advantage of these possibilities, in 2012 Google created the Android ADK.
  prefs: []
  type: TYPE_NORMAL
- en: Android ADK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android Accessory Development Kit is the reference implementation for the Android
    Open Accessory device. At Google I/O, in 2012 Google provided Android Accessory
    Development Kits to developers and provided manufacturers with clear specifications
    for creating their own kit, external accessory devices for Android. One of these
    certified devices is the Arduino itself, but thanks to the open nature of the
    whole project, you could build a compatible device yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, Android ADK never really *boomed* among developers. Of course,
    you can find lots of interesting projects on the web about connecting an Android
    smartphone to an Arduino, like the one by TCRobotics at [http://blog.bricogeek.com/noticias/arduino/el-adk-de-google-en-un-arduino-uno](http://blog.bricogeek.com/noticias/arduino/el-adk-de-google-en-un-arduino-uno).
    This is surely one of our favorites; it shows the great potential, but also the
    big sacrifice, of keeping an Android smartphone **wired** to a cable the whole
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Luckily for us, there are much cooler ways to use Android ADK to play around
    with sensors and electronics.
  prefs: []
  type: TYPE_NORMAL
- en: Using UDOO as an all-in-one ADK device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you already know, UDOO can run Android. What you probably don't know is that
    it comes with an Arduino on it. Yes, both Android and Arduino are on the same
    board! When you think that you can connect a touchscreen, or even a mouse and
    keyboard to UDOO, you soon start fantasizing about all those geeky projects of
    yours becoming reality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To start playing with Arduino, you just need to set up UDOO and connect the
    Android part to the SAM3X (Arduino-compatible) part. The following images show
    an UDOO, as seen from above. On the left, jumper 18 is highlighted. This jumper
    must be unplugged to enable the SAM3X. On the right, the USB port you are going
    to connect to is highlighted as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the board is ready, you can move to the software part.
  prefs: []
  type: TYPE_NORMAL
- en: Flashing the Arduino board
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For this quick example, we are going to command an LED connected to the UDOO.
    The LED will be connected to input 13 of the UDOO board. Every LED has two pins;
    the longer one is the anode and has to be connected to input 13, and the shorter
    one is the cathode and has to be connected to ground, the unnumbered input on
    the left of input 13:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The electronics setup is in place. Let's download the Arduino IDE from [http://www.udoo.org/other-resources/](http://www.udoo.org/other-resources/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first time you run the Arduino IDE, you will be presented with an empty
    project file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This empty Arduino sketch gives you a skeleton structure for our Arduino program:'
  prefs: []
  type: TYPE_NORMAL
- en: A `setup` method that runs once and gets everything in place for the second
    method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `loop` method that keeps on running over and over until the board is turned
    off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To properly connect and program our Arduino, we need to select the board type
    and port. From the Arduino IDE Tools menu, select **Board** *|* **Arduino Due
    (Programming Port)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous image shows the amount of different Arduino boards that are available
    on the market nowadays. UDOO is compatible with the Arduino Due, so we are choosing
    that board model. Once we have selected the proper board, we need to select the
    **Port** to use to connect to the UDOO:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the image, the port name could be slightly different on different
    computers. The previous image shows a common configuration for an Apple MacBook
    Pro.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the IDE has been properly configured, we can start with the source code,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can quickly analyze the source code and can find out that:'
  prefs: []
  type: TYPE_NORMAL
- en: We are specifying PIN number 13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are specifying the model name, manufacturer name, and version number that
    will identify our board once we connect it to Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are configuring the serial connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are listening for incoming data on the serial connection and reacting accordingly:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: turn on the LED if we received 1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: turn off the LED if we received 0
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the source code is in place, you can flash it to the Arduino using the
    IDE **File** | **Upload** menu.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Android app
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Android app will be super simple: a toggle button to turn the LED ON and
    OFF. You can create the initial app using the Android Studio wizard, creating
    an empty `Activity` to get things started. Once the skeleton is in place, you
    need to add a new dependency to your `build.gradle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Emanuele Palazzetti, author of *Getting started with UDOO* by *Packt Publishing*,
    released a handy Android library, ADK Toolkit ([https://github.com/palazzem/adk-toolkit](https://github.com/palazzem/adk-toolkit)),
    for easier communication between your Android apps and your Android ADK device,
    and we are going to take full advantage of this library.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to add some specific configurations in your Android Manifest. In your
    `<activity>` tag, add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you will have noted, the `<meta-data>` tag refers to an XML resource, named
    `accessory_filter`. Right now, it''s missing. Let''s create a `accessory_filter.xml`
    in the `src/res/xml/` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is the exact information we added to the Arduino sketch and will allow
    Android to properly identify our board.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup is over. Let''s move on to the UI of our app. Having followed the wizard,
    you now have a single `Activity` with its own layout; chances are that its name
    is `main.xml` and it''s located in `src/res/layout`. Once you have located the
    layout, we can add our button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s pretty straightforward: an ID, a couple of labels, and an `onClick` method
    to trigger when the button is tapped.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method referred by the `onClick` will be placed into our `Activity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When the button is clicked, we send `1` if it's ON, or `0` if it's OFF. Fair
    enough, but where do we send this data? What's that `adkManager`?
  prefs: []
  type: TYPE_NORMAL
- en: 'The `adkManager` module comes with the ADK Toolkit. We create it and set it
    up in our `Activity`. This is the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, our app is completed. Just upload it to our UDOO and you will have
    a huge button to turn your LED ON and OFF:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exploring the possibilities of the Internet of Things
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Knowing that your favorite OS can run on thousands of devices, in hundreds of
    different customizations, and communicate with any kind of device, both wired
    or wireless, opens up incredible possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Android Auto
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In 2014, Google presented Android Auto, an innovative project that aims to
    command an Android system using the controls already available in our cars:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In 2015, the first version of Android Auto was released and the developer community
    started to really look into it. In 2016, dozens of car manufacturers are going
    to release models with integrated Android Auto support.
  prefs: []
  type: TYPE_NORMAL
- en: The idea behind Android Auto is to support driving safety and provide users
    with an alternative way to access their devices when they are driving. To achieve
    this goal, Google engineers worked with car manufacturers to create a bridge between
    our Android devices and car dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: Car dashboards and controls represent the top of the user experience and interaction
    we can possibly have while driving. Everything is placed specifically to be accessible,
    everything is designed specifically to be easy to use, and everything is created
    to be effective and powerful, but not distracting.
  prefs: []
  type: TYPE_NORMAL
- en: 'These constraints forced Google to rethink their popular apps for this new
    challenge. When you connect your Android smartphone to an Android Auto-ready car,
    you can enjoy a different OS user interface, tailored for this particular scenario.
    The next image shows the Google Maps interface for Android Auto:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next image shows the Google Play Music user interface, once we connect
    our device to an Android Auto-compatible car:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Popular apps such as Google Maps or Google Play Music evolve into a more effective
    design and take full advantage of the dashboard's bigger screen and wheel controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a developer perspective, Android Auto comes with an obvious question:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Do I need a car to develop and test my apps?*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Fortunately, Google provides testing tools for those who want to approach Android
    Auto: the **Desktop Head Unit** (**DHU**). Available with the Android SDK, the
    DHU runs on your computer and allows your computer to act as a car dashboard.
    The following images show how the smartphone switches to Android Auto mode and
    the UI switches to DHU:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous image is an example of how the smartphone display will look once
    we connect it to the carâ€”it turns black and shows the Android Auto logo. The next
    image shows how the car dashboard becomes active when we connect the smartphone.
    The car dashboard turns into the Android Auto user interface and, in this example,
    shows a few Google Now cards, with traffic and weather information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Android Wear
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While we wait for Android Auto-enabled cars to invade our lives, we can direct
    our attention to Android Wear.
  prefs: []
  type: TYPE_NORMAL
- en: In 2014, Google announced a particular version of Android, specifically designed
    and developed for smart watches. Started as a customization of Android 5.0 Lollipop,
    Android Wear is currently based on Android 6.0.1 Marshmallow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Wear aims to enhance the way users can interact with the world every
    day. An Android Wear smart watch connects to an Android smartphone and provides
    quicker access to notifications, messages, and every possible type of content
    that can be enjoyed in a better way without interacting with the smartphone itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Smart watches like the one in the previous picture provide integrations with
    dozens of services, such as Google Fit, Endomondo, and IFTTT. They have Bluetooth
    and Wi-Fi connectivity, GPS, and accelerometers. This huge range of possibilities
    pushed the Android community to experiment and create solutions for dozens of
    scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: With the support of Android SDK and the Android community, in the last two years
    we have seen an increasing number of apps tailored for smart watchesâ€”we can turn
    on our Philips Hue lights with our watch, we can turn off our Google Nest with
    our watch, and we can know the state of our plants thanks to Parrot Flower Power.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing on this path will take us straight to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Domotics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are living in a world where lots of devices, appliances, and "things" that
    were *disconnected* are now part of a growing ecosystem of interconnected devices.
    We came from a past where computation could happen only in our computersâ€”we are
    living in a present where computation happens in our pockets, with our smartphone.
    We are moving toward a future where computation will happen everywhere: a watch,
    a car, a drone, a house, a garden, and much more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We had thermostats that had to be commanded manually and we have intelligent
    thermostats now, such as Google Nest, that learn from our habits and react accordingly
    to create a better and more effective user experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We had lights that needed a wall switch to be turned ON and OFF and now we
    have intelligent lights, such as Philips Hue, that can be controlled via smartphone
    or even smart watch. These lights can turn ON automatically the moment we approach
    our home, taking advantage of concepts such as geo-fencing. We have light that
    can interconnect with other devices, such as smart door bells, and can create
    a visual trigger for hearing-impaired users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have plant sensors, such as Parrot Flower Power, that can show a notification
    on our smartphone and let us know that our plants need water. Knowing that, even
    if we are thousands of kilometers away from home on some remote beach, enjoying
    our holidays, we can remotely command a Belkin WeMo Switch to turn on our irrigation
    system and water our plants.
  prefs: []
  type: TYPE_NORMAL
- en: We have smart refrigerators, such as the Samsung Family Hub, that are connected
    to the Internet and allow you to actually *see* inside your refrigerator to check
    whether the orange juice for tomorrow's breakfast is missing. They are becoming
    so interconnected that the Korean version will be aware of possible discounts
    for your favorite products and suggests which particular supermarket you have
    to check to save some money.
  prefs: []
  type: TYPE_NORMAL
- en: We have smart mirrors, such as the one by Hannah Mittelstaedt ([https://github.com/HannahMitt/HomeMirror](https://github.com/HannahMitt/HomeMirror)),
    which can be easily created with one of your old Android devices. Give your obsolete
    tablet a new life and a new purpose. It could give you weather forecast, the latest
    news, your plants' status, traffic information, or whatever useful information
    you would like to have while you are brushing your teeth in the morning.
  prefs: []
  type: TYPE_NORMAL
- en: We have smart coffee machines, such as the **Nespresso Prodigio**, that can
    give us the current status of the water level, coffee capsules remaining, and
    maintenance necessary. The coffee machines can be controlled remotely, from your
    couch, and for the first time in our history, the classic joke is not a joke anymore;
    our Android phone can actually make us a coffee!
  prefs: []
  type: TYPE_NORMAL
- en: Can a green droid entertain you?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Once humanity satisfied every basic need, it started fighting boredom!*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Okay, probably that's too much drama, but we are entering the entertaining section,
    so let's talk about having some fun!
  prefs: []
  type: TYPE_NORMAL
- en: Multimedia
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Entertainment is a huge market and Google jumped into it pretty quickly with
    its Nexus Player and its Chromecast devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The previous image shows the latest model of Google Chromecast. When Google
    approached this market, they decided to provide users with a device that was as
    easy as possible to set up. Google Chromecast has one HDMI connector and a USB
    power cable; that's it. You connect the HDMI to your TV, connect the power supply,
    and your TV can now connect to your smart phone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your smartphone becomes your remote and, with a few clicks, you can start streaming
    any multimedia content you want, straight to your TV: your preferred YouTube channels,
    your preferred movies from Google Play Store, your music from Google Play Music
    and hundreds of third-party apps can be sources of content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t like TV and you are a music addict, Google has you covered with
    Chromecast Audio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As for the Chromecast, Chromecast Audio is very easy to connect to your Hi-Fi
    system and it's easy to set up via the Chromecast app you can install on your
    Android smartphone.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key features is that it has a standalone Wi-Fi connection via your
    home Wi-Fi system, so that it can be instructed to reproduce your music instead
    of requiring your phone to stream the music to the Chromecast Audio. You control
    it using your smartphone, but there is no battery drain, because there is no persistent
    Wi-Fi or Bluetooth connection between your phone and your Chromecast Audio.
  prefs: []
  type: TYPE_NORMAL
- en: Toys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nowadays, when we think about Android-powered toys, we can only think about
    drones!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first and most popular, the Parrot ARDrone in the previous picture, set
    the bar and drove the market for quite a while. Over time, lots of commercial
    alternatives showed up, but, as with the smart mirror, the RC toys community also
    went full Do-It-Yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'During Droidcon Turin 2015 Hackaton, we demonstrated how you could build an
    RC car, powered by UDOO, controlled via Wi-Fi using an Android deviceâ€¦ in 24 hours:
    [https://www.hackster.io/team-dronix-alter-ego/dronixcar-37b81a?f=1#](https://www.hackster.io/team-dronix-alter-ego/dronixcar-37b81a?f=1#):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The RC car was equipped with a video camera, streaming in real time to the smartphone.
    The smartphone acted as video consumer and remote controller.
  prefs: []
  type: TYPE_NORMAL
- en: The whole project was released as open source, in the classic Android/Linux
    tradition.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our journey is over! It's been quite a rollercoaster, from the history of the
    operating system to how it can equip devices ready to communicate with the external
    world. You learned how to retrieve the source code for your devices, how to navigate
    the source folder tree, and how to create the perfect setup to properly build
    a vanilla Android system.
  prefs: []
  type: TYPE_NORMAL
- en: You stepped up and started to add customizations to your system, to enrich the
    user experience, to improve the performance, and to add support for your own hardware.
    You went deep into the boot sequence's inner structure to customize the system
    even more. You swam back to the surface to customize the highest part of the architecture
    pyramid, the user interface, to provide your users with the ultimate customized
    Android system.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you saw how easy it is to step away from the Android device itself
    and find a whole world of devices waiting to communicate and interact, powered
    by the awesome Android platform.
  prefs: []
  type: TYPE_NORMAL
- en: Our journey is over, but your own has just started! Master what you learned,
    experiment, try out your ideas, fail, learn more, try again, and finally succeed!
  prefs: []
  type: TYPE_NORMAL
- en: Android is an awesome tool; you can use it to make your craziest ideas become
    a reality!
  prefs: []
  type: TYPE_NORMAL
