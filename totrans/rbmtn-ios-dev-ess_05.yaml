- en: Chapter 5. User Interface – Cosmetics for Your App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"Design is not just what it looks like and feels like. Design is how it works."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*- Steve Jobs*'
  prefs: []
  type: TYPE_NORMAL
- en: The ultimate objective of a user interface design is to make a user's interaction
    with the application a simple and pleasant experience. It is important to understand
    the basic elements of a technology to make a friendly user interface for end users.
    In this chapter, we will learn about the different elements required to craft
    a user interface for iOS applications with RubyMotion. Apps running on iOS-based
    devices have a limited amount of screen space for exposing content. This is the
    most expensive real estate for any iOS developer, and we must be creative enough
    to devise ways to present information to the user and make use of this precious
    space economically.
  prefs: []
  type: TYPE_NORMAL
- en: You can always customize your user interface to create a stunning look for your
    application. But as you design the user interface of your application, there are
    some preferred ways, such as the placement of a few controls, that can be adopted
    to give users an amicable environment similar to that of built-in apps. As you
    know, there is no dedicated hardware for a back button on the iPhone; we must
    always make sure to keep one on the upper-left corner before the user gets lost
    while navigating from one page to another. A good way to achieve this is by using
    a typical iOS navigation bar that is provided in the iOS SDK. The benefit of using
    such conventional UI elements is that they act gracefully at the time of updates,
    when Apple introduces a redesign of these elements. Completely custom-made elements
    do not receive updates. When you use these standard APIs, you can still customize
    the appearance for most of the UI elements and still receive automatic updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the iOS SDK, the `UIKit` framework provides a wide range of UI elements
    that you can use in your app. In this chapter, we will cover the following topics
    in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic UI elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Restaurant app—let's make it pretty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many types of bars available in the iOS SDK, such as a tab bar, navigation
    bar, toolbar, and status bar. These are UI elements that have been designed with
    explicit behavior and appearance. Although having bars is not mandatory in your
    application, it's advisable to add them as they make life easier for both developers
    and users alike. These bars provide common anchors to users of iOS devices who
    are familiar with the information they provide and the function they perform.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will discuss the following types of bars in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: The tab bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The navigation bar and toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The status bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tab bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A tab bar gives people the ability to switch between different subtasks, views,
    or modes. A tab bar is placed at the bottom of the screen, mainly at the footer
    section, which we can see in most of the popular iOS applications. Each tab in
    a tab bar has a separate view that can be used to initiate the navigation between
    your app's different modes, and it can also convey information about the state
    of each mode.
  prefs: []
  type: TYPE_NORMAL
- en: On the iPhone, a tab bar can display no more than five tabs at a given point
    in time. If the app has more tabs, the tab bar displays four of them and adds
    the **More** tab that reveals the additional tabs in a list. On the iPad, a tab
    bar can display more than five tabs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The size of a tab bar image is typically 30 x 30 px. If this image is too large
    to fit on the tab bar, it is clipped to fit the available size.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create some views to understand out topic better:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a sample application to understand this topic more clearly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file named `tab1_controller.rb` in the `app` folder and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we are setting the background color for the view to a
    custom color that is provided by iOS and is called `scrollViewTexturedBackgroundColor`.
    This custom color is available with the `UIColor` class. Similarly, we will create
    two more tabs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a file named `tab2_controller.rb` inside the `app` folder and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create another file named `tab3_controller.rb` inside the `app` folder and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have created three views with different background colors so that when we
    switch from one view to another, we can see the difference. Now let's create a
    tab bar and link it with the three view controllers that we just created.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we can just add the following code in `app_delegate.rb` inside the
    `app` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we created a method called `createTabBar` in which we
    are building a tab bar. A `UITabBarController` class needs an array of `UIViewControllers`.
    Each element in this array will become a tab on the screen. The three views, which
    were created earlier, are linked to the tabs of the tab bar respectively. Let''s
    fire up the terminal and see our newly created tab bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what we get as our output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The tab bar](img/5220OT_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Great! We can see a tab bar at the bottom of the screen with three tabs, and
    each tab has a view with different background colors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`UITabBar`, which is at the bottom of the screen, has a height of 44 pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the tab bar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will always have to label your tabs in the tab bar with a title or an image-like
    icon. Let''s give some titles to our tabs, which we have created in the previous
    section, and provide some images for them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `tab1_controller.rb` file inside the `app` folder with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method in the `tab2_controller.rb` file inside the `app`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, add the following method in the `tab3_controller.rb` file inside
    the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s test the changes in the iOS simulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here is what we get:![Customizing the tab bar](img/5220OT_05_05a.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result, as you can see, is a tab bar with icons and titles. The `UITabBarItem`
    class is responsible for implementing any items or images on the tab bar. By default,
    it will place any image that you passed with a blue gradient, discarding the color
    information of the image and using the alpha channel (transparency) information
    to know where to apply the gradient. A tab bar will always operate in radio mode;
    this means only one item can be selected at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to display a custom image when a tab is selected, you can do so
    by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two ways to add icons to tabs in the tab bar. Depending on your requirement,
    you can either add a custom icon or use the common icons provided by Apple. Let''s
    briefly discuss both these ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom icon**: You can design your image and put it in each tab. There is
    an image property in `tabBarItem` that accepts an image:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If your image is in PNG format, you can skip the extension while mentioning
    the filename, shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Common icons provided by iOS**: The following are some common icons provided
    by the Cocoa library. These will be used directly in our application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Constant name | Icon |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemMore` | ![Customizing the tab bar](img/image006.jpg) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemFavorites` | ![Customizing the tab bar](img/image008.jpg)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemFeatured` | ![Customizing the tab bar](img/image010.jpg)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemRecents` | ![Customizing the tab bar](img/image012.jpg)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemContacts` | ![Customizing the tab bar](img/image014.jpg)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemBookmarks` | ![Customizing the tab bar](img/image016.jpg)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemSearch` | ![Customizing the tab bar](img/image018.jpg)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemDownloads` | ![Customizing the tab bar](img/image020.jpg)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemMostRecent` | ![Customizing the tab bar](img/image022.jpg)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `UITabBarSystemItemMostViewed` | ![Customizing the tab bar](img/image024.jpg)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to change the background of the tab bar to customize an image,
    use the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The navigation bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A navigation bar allows navigation through different screens. A navigation
    bar and a toolbar can be seen at the top of the app screen, just below the status
    bar. The navigation bar provides a drill-down interface for hierarchical content.
    You can also provide items for the toolbar that are managed by navigation controllers
    such as buttons. Let''s see how we can create a navigation bar in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `app_delegate.rb` file inside the `app` folder with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding code, we initialized `Tab1Controller` while initializing `UINavigationController`.
    In this way, we can generate a navigation bar:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s fire up the terminal and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following is what we get when we execute the command:![The navigation bar](img/5220OT_05_06a.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's really cool! We can see a navigation bar appear at the top of the screen.
    But right now it does nothing. Let's modify the bar and add buttons to it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A navigation bar automatically shows some default title text.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the navigation bar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s customize the navigation bar with a translucent color and add a
    button to it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `tab1_controller.rb` file inside the `app` folder with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s fire up the terminal and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here is the output:![Customizing the navigation bar](img/5220OT_05_07a.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can see that the navigation toolbar controller is now translucent, and we
    have an **Add** button in the upper-left corner. When we press the **Add** button,
    an alert pop-up will appear with the message: **You have pressed the ''Add'' button**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UIBarButtonItem` class creates a button, and for each button we have to
    define an action that will be called when that button is clicked. In our example,
    we have created the `click_add` action for the `Add` button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we created a button with the title set as `Add`.
    To define the action that has to be performed when the button is clicked, we use
    the `action` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will assign the location of the button on the navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Doing this will place a button on the right-hand side of the navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add a button on the left-hand side of the screen, use the following line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The status bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The status bar is a 20-pixel bar that appears at the top of the window. It shows
    important system information, such as the signal strength, network, current time,
    and battery status.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, a status bar in iOS 6.0 comes in a translucent black style, but
    we can modify this look with the following available styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UIStatusBarStyleDefault`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIStatusBarStyleBlackOpaque`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIStatusBarStyleBlackTranslucent`![The status bar](img/5220OT_05_08.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With RubyMotion, we can customize the status bar in the following two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**With Rakefile**: There is a setting in the `Rakefile` of your RubyMotion
    project; update it in the following way:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**With app code**: Update your delegate file with the following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that these ways are distinct. The first one sets the status bar appearance
    while the application is being loaded, whereas the second one is used when the
    application has loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows how we can hide the status bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As per Apple's guidelines, it is not advisable to create a custom status bar
    as users appreciate the consistency of the system-provided status bar.
  prefs: []
  type: TYPE_NORMAL
- en: Basic UI elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned about bars, which play a pivotal role in
    creating the application view, primarily in the header and footer section of the
    screen. In this section, we will learn about other user interface elements essential
    for creating an interactive view. We will not discuss all the UI elements, however,
    as there are too many of them; we will examine only those that are used most frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Label
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A label displays a read-only text view and is used to display information.
    With the iOS SDK, we make use of the `UILabel` class to generate labels on screen.
    The `UILabel` class has many properties for customizing a label. In the following
    example, we will use a few of these properties to make our own customized label:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, update the `tab1_controller.rb` file with following code inside the
    `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `add_form_elements` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s fire up the terminal and test our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will see the following customized label appear on the screen:![Label](img/5220OT_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Textfield
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `UITextField` object will create a textbox in the view. It is a very common
    input type in any form. This is how we create it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `add_form_elements` method in the `tab1_controller.rb` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s fire up the terminal and test our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will see the following textbox appear on the screen:![Textfield](img/5220OT_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a user taps the text field, the system automatically displays an associated
    keyboard. As the keyboard pops up from below, there is a chance that this will
    lead to an obscure view. It is the developer's duty to reposition the view accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Switch button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `UISwitch` object will create a button to select on and off states. This
    is like a radio button that we commonly see when switching the Wi-Fi on and off.
    Follow the ensuing steps to create a switch button in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code in `tab1_controller.rb` for the `add_form_elements`
    method inside the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the button is switched from one state to another, it calls an action.
    Let''s create the `switchIsChanged` action, which we already mentioned in the
    preceding step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s fire up the terminal and test our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will see the following switch button appear on the screen:![Switch button](img/5220OT_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Slider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `UISlider` object is a visual control used to select a single value from
    a continuous range of values. Sliders are always displayed as horizontal bars.
    Perform the following steps to create a slider in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code in `tab1_controller.rb` for the `add_form_elements`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding code, when the slider''s value is changed, the `sliderValueChanged`
    action will be called. Let''s add this action in our `tab1_controller.rb` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s fire up the terminal and test our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will see the following slider appear on the screen:![Slider](img/5220OT_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UIButton` class implements a button on the touchscreen. A button catches
    touch events and performs an action when tapped. Follow the ensuing steps to create
    a button in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code in `tab1_controller.rb` for the `add_form_elements`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s fire up the terminal and test our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will see the following button appear on the screen:![Button](img/5220OT_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Picker view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A picker view is used to select a value from multiple options. It uses a representation
    that is like a spinning wheel or slot machine to show one or more series of values
    similar to a select box in web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UIPickerView` class implements a picker view. Let''s understand this by
    adding one to our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `tab2_controller.rb` file with the highlighted code. Go through
    the comments (the lines prefixed with `#`) for a better understanding of what''s
    happening in that section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s run the application and click on the second tab to check what we
    have done so far:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can see a **Show Picker** button, and once we click on it, we can see a picker
    view that allows us to select a country:![Picker view](img/5220OT_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s understand the picker code that we have created using the `UIPickerView`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We must always provide `dataSource` and `delegate` in a picker because `datasource`
    supplies the data and `delegate` supplies the behavior of the picker. In the preceding
    code, we concealed the picker using `picker.hidden = true` as it will be shown
    only when the user clicks on the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a picker, we have to create a minimum of three delegate methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`numberOfComponentsInPickerView`: This is called by the `PickerView` control
    to identify the number of components, such as the selection wheels, that are to
    be displayed to the user:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In our code, we return `1` as we only have one component to show.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`numberOfRowsInComponent`: This informs the `PickerView` control about the
    number of rows that are present in a specified component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, `@countryNames.count` will return the total number of countries in the array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`titleForRow`: It will be called by the `PickerView` control to identify the
    string that is to be displayed for a specified row in a specific component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `pickerView:titleForRow:forComponent` method gets called *n* number of times;
    here *n* is the number returned by `pickerView:numberOfRowsInComponent`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also perform an action when we select any value from the picker view.
    This can be done using the `pickerView(pickerView, didSelectRow:row, inComponent:component)`
    delegate method, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are changing the label message with the country name that we have selected
    from the picker.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on – add a Restro Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have learned about the different UI elements; it's
    now time to apply this knowledge to enhance our Restro Application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we will add a tab bar and a navigation bar in our Restro Application,
    followed by creating a view for showing the restaurant detail page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `app_delegate.rb` with the highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we created a tab bar using `UITabBarController` and assigned two controllers,
    namely `RestroController` and `AboutController`, to it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, let''s create an `about_controller.rb` file in the `app` folder and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we just created a simple view and added a label as a subview.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s run the application to see our progress:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here is the output we get:![Hands-on – add a Restro Application](img/5220OT_05_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we can see a tab bar at the bottom of the screen
    with two tabs: **Search** and **About**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the last chapter, we implemented a search based on city. Let''s make the
    search results on the search page clickable; this will redirect us to a new view
    that shows us the details of the restaurant that was selected:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a controller `detail_controller.rb` in the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In these lines of code, we are showing all the details on the view that will
    get stored in the `@restaurant` instance variable from `RestroController`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code in `restro_controller.rb` in the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code will make each row of the table a link that will redirect to a detailed
    view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Also, we need to replace the following line in `app_delegate.rb`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following code snippet will add a navigation bar with controls to enable
    easy navigation in between pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s fire up the terminal, and check our progress:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the output we get:![Hands-on – add a Restro Application](img/5220OT_05_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can see a navigation bar and a search bar, but we only need a search bar
    at the top. Let''s make that change in `restro_application.rb` by replacing `view.tableHeaderView
    = searchBar` with what follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generally in an iOS application, if a row is a link to another controller,
    an arrow is shown in the right-hand side corner. Let''s add an arrow and make
    it look more like an iOS app. Update `restro_controller.rb`, and add the following
    line where we will create the `TableView` cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s run the application to check what we have done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can see that the top navigation toolbar has disappeared, but arrows at the
    end of each row of the table view have appeared:![Hands-on – add a Restro Application](img/5220OT_05_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have learned some of the fundamentals of the iOS user interface
    that are essential in creating outstanding user-friendly applications; we covered
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We started by understanding standard UI elements, such as bars, and learned
    how to use them so that we do not lose the fundamental structure of an iOS app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we covered UI elements, such as textboxes, labels, sliders, pickers, and
    many more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we encompassed what we have learned so far in our application to get
    some real-time experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will move our focus to using the powerful device capabilities
    of iOS devices and learn how to use them with RubyMotion. We will also learn how
    to make use of the camera, geolocation, contacts, gestures and many more features
    to create some amazing demo applications.
  prefs: []
  type: TYPE_NORMAL
