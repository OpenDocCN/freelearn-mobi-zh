- en: Chapter 5. User Interface – Cosmetics for Your App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。用户界面 - 您应用程序的化妆品
- en: '*"Design is not just what it looks like and feels like. Design is how it works."*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “设计不仅仅是看起来和感觉如何。设计是如何运作的。”
- en: '*- Steve Jobs*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*- 史蒂夫·乔布斯*'
- en: The ultimate objective of a user interface design is to make a user's interaction
    with the application a simple and pleasant experience. It is important to understand
    the basic elements of a technology to make a friendly user interface for end users.
    In this chapter, we will learn about the different elements required to craft
    a user interface for iOS applications with RubyMotion. Apps running on iOS-based
    devices have a limited amount of screen space for exposing content. This is the
    most expensive real estate for any iOS developer, and we must be creative enough
    to devise ways to present information to the user and make use of this precious
    space economically.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面设计的最终目标是使用户与应用程序的交互变得简单愉快。了解技术的基本元素对于为最终用户提供友好的用户界面非常重要。在本章中，我们将学习如何使用 RubyMotion
    为 iOS 应用程序构建用户界面所需的不同元素。在基于 iOS 的设备上运行的应用程序有有限的屏幕空间来展示内容。这是任何 iOS 开发者最昂贵的房地产，我们必须足够有创意，想出方法向用户展示信息，并经济地利用这块宝贵空间。
- en: You can always customize your user interface to create a stunning look for your
    application. But as you design the user interface of your application, there are
    some preferred ways, such as the placement of a few controls, that can be adopted
    to give users an amicable environment similar to that of built-in apps. As you
    know, there is no dedicated hardware for a back button on the iPhone; we must
    always make sure to keep one on the upper-left corner before the user gets lost
    while navigating from one page to another. A good way to achieve this is by using
    a typical iOS navigation bar that is provided in the iOS SDK. The benefit of using
    such conventional UI elements is that they act gracefully at the time of updates,
    when Apple introduces a redesign of these elements. Completely custom-made elements
    do not receive updates. When you use these standard APIs, you can still customize
    the appearance for most of the UI elements and still receive automatic updates.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终可以自定义用户界面，为您的应用程序创建令人惊叹的外观。但在设计应用程序的用户界面时，有一些首选的方法，例如一些控件的位置，可以采用以使用户获得类似内置应用程序的友好环境。正如您所知，iPhone
    上没有为返回按钮专用的硬件；我们必须始终确保在用户在页面之间导航时，在左上角保留一个按钮，以免用户迷路。实现这一目标的一个好方法是使用 iOS SDK 中提供的典型
    iOS 导航栏。使用这种传统 UI 元素的优点是，在 Apple 推出这些元素的重设计时，它们能够优雅地工作。完全自定义的元素不会收到更新。当您使用这些标准
    API 时，您仍然可以自定义大多数 UI 元素的的外观，并且仍然会收到自动更新。
- en: 'In the iOS SDK, the `UIKit` framework provides a wide range of UI elements
    that you can use in your app. In this chapter, we will cover the following topics
    in detail:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS SDK 中，`UIKit` 框架提供了一系列 UI 元素，您可以在您的应用程序中使用。在本章中，我们将详细介绍以下主题：
- en: Bars
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 栏
- en: Basic UI elements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本UI元素
- en: The Restaurant app—let's make it pretty
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 餐厅应用程序——让我们让它变得漂亮
- en: Bars
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 栏
- en: There are many types of bars available in the iOS SDK, such as a tab bar, navigation
    bar, toolbar, and status bar. These are UI elements that have been designed with
    explicit behavior and appearance. Although having bars is not mandatory in your
    application, it's advisable to add them as they make life easier for both developers
    and users alike. These bars provide common anchors to users of iOS devices who
    are familiar with the information they provide and the function they perform.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS SDK 中有各种类型的栏可供使用，例如标签栏、导航栏、工具栏和状态栏。这些是经过精心设计，具有明确的行为和外观的 UI 元素。尽管在您的应用程序中添加栏不是强制性的，但建议添加它们，因为它们使开发者和用户的生活都变得更简单。这些栏为熟悉它们提供的信息和功能的
    iOS 设备用户提供了常见的锚点。
- en: 'In this section, we will discuss the following types of bars in detail:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细讨论以下类型的栏：
- en: The tab bar
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签栏
- en: The navigation bar and toolbar
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航栏和工具栏
- en: The status bar
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态栏
- en: The tab bar
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签栏
- en: A tab bar gives people the ability to switch between different subtasks, views,
    or modes. A tab bar is placed at the bottom of the screen, mainly at the footer
    section, which we can see in most of the popular iOS applications. Each tab in
    a tab bar has a separate view that can be used to initiate the navigation between
    your app's different modes, and it can also convey information about the state
    of each mode.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 标签栏让人们能够在不同的子任务、视图或模式之间切换。标签栏位于屏幕底部，主要在页脚部分，我们可以在大多数流行的iOS应用中看到。标签栏中的每个标签都有一个单独的视图，可以用来在应用的不同模式之间进行导航，并且它还可以传达每个模式的状态信息。
- en: On the iPhone, a tab bar can display no more than five tabs at a given point
    in time. If the app has more tabs, the tab bar displays four of them and adds
    the **More** tab that reveals the additional tabs in a list. On the iPad, a tab
    bar can display more than five tabs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在iPhone上，标签栏在任何给定时间点最多只能显示五个标签。如果应用有更多标签，标签栏将显示其中四个，并添加一个名为**更多**的标签，该标签以列表形式显示额外的标签。在iPad上，标签栏可以显示超过五个标签。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The size of a tab bar image is typically 30 x 30 px. If this image is too large
    to fit on the tab bar, it is clipped to fit the available size.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 标签栏图像的大小通常是30 x 30像素。如果这个图像太大而无法适应标签栏，它将被裁剪以适应可用的大小。
- en: 'First, we''ll create some views to understand out topic better:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一些视图来更好地理解我们的主题：
- en: 'Let''s create a sample application to understand this topic more clearly:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个示例应用程序来更清楚地理解这个主题：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a file named `tab1_controller.rb` in the `app` folder and add the following
    code:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹中创建一个名为`tab1_controller.rb`的文件，并添加以下代码：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we are setting the background color for the view to a
    custom color that is provided by iOS and is called `scrollViewTexturedBackgroundColor`.
    This custom color is available with the `UIColor` class. Similarly, we will create
    two more tabs.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在将视图的背景颜色设置为iOS提供的自定义颜色，该颜色称为`scrollViewTexturedBackgroundColor`。这个自定义颜色可以通过`UIColor`类获得。同样，我们还将创建另外两个标签。
- en: 'Create a file named `tab2_controller.rb` inside the `app` folder and add the
    following code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹内创建一个名为`tab2_controller.rb`的文件，并添加以下代码：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create another file named `tab3_controller.rb` inside the `app` folder and
    add the following code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹内创建另一个名为`tab3_controller.rb`的文件，并添加以下代码：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We have created three views with different background colors so that when we
    switch from one view to another, we can see the difference. Now let's create a
    tab bar and link it with the three view controllers that we just created.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了具有不同背景颜色的三个视图，这样当我们从一个视图切换到另一个视图时，我们可以看到差异。现在让我们创建一个标签栏，并将其与刚刚创建的三个视图控制器链接起来。
- en: 'For this, we can just add the following code in `app_delegate.rb` inside the
    `app` folder:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个，我们只需在`app`文件夹内的`app_delegate.rb`文件中添加以下代码：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding code, we created a method called `createTabBar` in which we
    are building a tab bar. A `UITabBarController` class needs an array of `UIViewControllers`.
    Each element in this array will become a tab on the screen. The three views, which
    were created earlier, are linked to the tabs of the tab bar respectively. Let''s
    fire up the terminal and see our newly created tab bar:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个名为`createTabBar`的方法，其中我们正在构建一个标签栏。`UITabBarController`类需要一个`UIViewControllers`数组。这个数组中的每个元素都将成为屏幕上的一个标签。之前创建的三个视图分别链接到标签栏的标签。让我们启动终端并查看我们新创建的标签栏：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is what we get as our output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的输出结果：
- en: '![The tab bar](img/5220OT_05_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![标签栏](img/5220OT_05_01.jpg)'
- en: Great! We can see a tab bar at the bottom of the screen with three tabs, and
    each tab has a view with different background colors.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们可以在屏幕底部看到一个标签栏，有三个标签，每个标签都有一个具有不同背景颜色的视图。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`UITabBar`, which is at the bottom of the screen, has a height of 44 pixels.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕底部的`UITabBar`高度为44像素。
- en: Customizing the tab bar
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定制标签栏
- en: 'You will always have to label your tabs in the tab bar with a title or an image-like
    icon. Let''s give some titles to our tabs, which we have created in the previous
    section, and provide some images for them:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终需要在标签栏中使用标题或图标来标记标签。让我们为我们之前创建的标签添加一些标题，并为它们提供一些图像：
- en: 'Update the `tab1_controller.rb` file inside the `app` folder with the following
    code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新`app`文件夹内的`tab1_controller.rb`文件：
- en: '[PRE6]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following method in the `tab2_controller.rb` file inside the `app`
    folder:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹内的`tab2_controller.rb`文件中添加以下方法：
- en: '[PRE7]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similarly, add the following method in the `tab3_controller.rb` file inside
    the `app` folder:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，在 `app` 文件夹内的 `tab3_controller.rb` 文件中添加以下方法：
- en: '[PRE8]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s test the changes in the iOS simulator:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在 iOS 模拟器中测试一下更改：
- en: '[PRE9]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here is what we get:![Customizing the tab bar](img/5220OT_05_05a.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们得到的结果：![自定义标签栏](img/5220OT_05_05a.jpg)
- en: The result, as you can see, is a tab bar with icons and titles. The `UITabBarItem`
    class is responsible for implementing any items or images on the tab bar. By default,
    it will place any image that you passed with a blue gradient, discarding the color
    information of the image and using the alpha channel (transparency) information
    to know where to apply the gradient. A tab bar will always operate in radio mode;
    this means only one item can be selected at a time.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，如您所见，是一个带有图标和标题的标签栏。`UITabBarItem` 类负责实现标签栏上的任何项目或图像。默认情况下，它将使用蓝色渐变放置您传递的任何图像，丢弃图像的颜色信息，并使用
    alpha 通道（透明度）信息来确定应用渐变的位置。标签栏始终以单选模式操作；这意味着一次只能选择一个项目。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you want to display a custom image when a tab is selected, you can do so
    by using the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在标签被选中时显示自定义图像，可以使用以下代码：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There are two ways to add icons to tabs in the tab bar. Depending on your requirement,
    you can either add a custom icon or use the common icons provided by Apple. Let''s
    briefly discuss both these ways:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在标签栏中添加图标有两种方式。根据您的需求，您可以选择添加自定义图标或使用苹果提供的常用图标。让我们简要讨论这两种方式：
- en: '**Custom icon**: You can design your image and put it in each tab. There is
    an image property in `tabBarItem` that accepts an image:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义图标**：您可以为每个标签设计图像并将其放入其中。`tabBarItem` 中有一个图像属性，可以接受图像：'
- en: '[PRE11]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If your image is in PNG format, you can skip the extension while mentioning
    the filename, shown as follows:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您的图像是 PNG 格式，在提及文件名时可以省略扩展名，如下所示：
- en: '[PRE12]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Common icons provided by iOS**: The following are some common icons provided
    by the Cocoa library. These will be used directly in our application:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS 提供的常用图标**：以下是一些 Cocoa 库提供的常用图标。这些图标将直接在我们的应用程序中使用：'
- en: '| Constant name | Icon |'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 常量名称 | 图标 |'
- en: '| --- | --- |'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `UITabBarSystemItemMore` | ![Customizing the tab bar](img/image006.jpg) |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemMore` | ![自定义标签栏](img/image006.jpg) |'
- en: '| `UITabBarSystemItemFavorites` | ![Customizing the tab bar](img/image008.jpg)
    |'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemFavorites` | ![自定义标签栏](img/image008.jpg) |'
- en: '| `UITabBarSystemItemFeatured` | ![Customizing the tab bar](img/image010.jpg)
    |'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemFeatured` | ![自定义标签栏](img/image010.jpg) |'
- en: '| `UITabBarSystemItemRecents` | ![Customizing the tab bar](img/image012.jpg)
    |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemRecents` | ![自定义标签栏](img/image012.jpg) |'
- en: '| `UITabBarSystemItemContacts` | ![Customizing the tab bar](img/image014.jpg)
    |'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemContacts` | ![自定义标签栏](img/image014.jpg) |'
- en: '| `UITabBarSystemItemBookmarks` | ![Customizing the tab bar](img/image016.jpg)
    |'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemBookmarks` | ![自定义标签栏](img/image016.jpg) |'
- en: '| `UITabBarSystemItemSearch` | ![Customizing the tab bar](img/image018.jpg)
    |'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemSearch` | ![自定义标签栏](img/image018.jpg) |'
- en: '| `UITabBarSystemItemDownloads` | ![Customizing the tab bar](img/image020.jpg)
    |'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemDownloads` | ![自定义标签栏](img/image020.jpg) |'
- en: '| `UITabBarSystemItemMostRecent` | ![Customizing the tab bar](img/image022.jpg)
    |'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemMostRecent` | ![自定义标签栏](img/image022.jpg) |'
- en: '| `UITabBarSystemItemMostViewed` | ![Customizing the tab bar](img/image024.jpg)
    |'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `UITabBarSystemItemMostViewed` | ![自定义标签栏](img/image024.jpg) |'
- en: Tip
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you want to change the background of the tab bar to customize an image,
    use the following code:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想更改标签栏的背景以自定义图像，请使用以下代码：
- en: '[PRE13]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The navigation bar
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航栏
- en: 'A navigation bar allows navigation through different screens. A navigation
    bar and a toolbar can be seen at the top of the app screen, just below the status
    bar. The navigation bar provides a drill-down interface for hierarchical content.
    You can also provide items for the toolbar that are managed by navigation controllers
    such as buttons. Let''s see how we can create a navigation bar in our app:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏允许在不同屏幕之间进行导航。您可以在应用程序屏幕的顶部看到导航栏和工具栏，位于状态栏下方。导航栏提供了一种用于分层内容的钻取式界面。您还可以为导航控制器管理的工具栏提供项目，例如按钮。让我们看看我们如何在应用程序中创建导航栏：
- en: 'Update the `app_delegate.rb` file inside the `app` folder with the following
    code:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新 `app` 文件夹内的 `app_delegate.rb` 文件：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the preceding code, we initialized `Tab1Controller` while initializing `UINavigationController`.
    In this way, we can generate a navigation bar:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在初始化 `UINavigationController` 时初始化了 `Tab1Controller`。这样，我们可以生成一个导航栏：
- en: '[PRE15]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s fire up the terminal and execute the following command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动终端并执行以下命令：
- en: '[PRE16]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The following is what we get when we execute the command:![The navigation bar](img/5220OT_05_06a.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行命令后，我们得到以下结果：![导航栏](img/5220OT_05_06a.jpg)
- en: That's really cool! We can see a navigation bar appear at the top of the screen.
    But right now it does nothing. Let's modify the bar and add buttons to it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很酷！我们可以看到导航栏出现在屏幕顶部。但现在它没有任何作用。让我们修改这个栏并给它添加按钮。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A navigation bar automatically shows some default title text.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏会自动显示一些默认的标题文本。
- en: Customizing the navigation bar
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义导航栏
- en: 'Now let''s customize the navigation bar with a translucent color and add a
    button to it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用半透明颜色自定义导航栏并给它添加一个按钮：
- en: 'Update the `tab1_controller.rb` file inside the `app` folder with the following
    code:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码更新到`app`文件夹内的`tab1_controller.rb`文件中：
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s fire up the terminal and execute the following command:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动终端并执行以下命令：
- en: '[PRE18]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here is the output:![Customizing the navigation bar](img/5220OT_05_07a.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是输出结果：![自定义导航栏](img/5220OT_05_07a.jpg)
- en: 'We can see that the navigation toolbar controller is now translucent, and we
    have an **Add** button in the upper-left corner. When we press the **Add** button,
    an alert pop-up will appear with the message: **You have pressed the ''Add'' button**.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，导航栏控制器现在是半透明的，并且在左上角有一个**添加**按钮。当我们按下**添加**按钮时，将弹出一个带有消息**您已按下“添加”按钮**的警告框。
- en: 'The `UIBarButtonItem` class creates a button, and for each button we have to
    define an action that will be called when that button is clicked. In our example,
    we have created the `click_add` action for the `Add` button:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIBarButtonItem`类创建了一个按钮，对于每个按钮，我们必须定义一个当按钮被点击时将被调用的动作。在我们的例子中，我们为`Add`按钮创建了`click_add`动作：'
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code snippet, we created a button with the title set as `Add`.
    To define the action that has to be performed when the button is clicked, we use
    the `action` parameter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们创建了一个标题设置为`添加`的按钮。为了定义当按钮被点击时必须执行的动作，我们使用`action`参数。
- en: 'Next, we will assign the location of the button on the navigation bar:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将分配按钮在导航栏上的位置：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Doing this will place a button on the right-hand side of the navigation bar.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做将在导航栏的右侧放置一个按钮。
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'To add a button on the left-hand side of the screen, use the following line
    of code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要在屏幕左侧添加一个按钮，请使用以下代码行：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The status bar
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态栏
- en: The status bar is a 20-pixel bar that appears at the top of the window. It shows
    important system information, such as the signal strength, network, current time,
    and battery status.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 状态栏是一个20像素的栏，出现在窗口顶部。它显示重要的系统信息，例如信号强度、网络、当前时间和电池状态。
- en: 'By default, a status bar in iOS 6.0 comes in a translucent black style, but
    we can modify this look with the following available styles:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，iOS 6.0中的状态栏是半透明的黑色样式，但我们可以使用以下可用的样式来修改这种外观：
- en: '`UIStatusBarStyleDefault`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIStatusBarStyleDefault`'
- en: '`UIStatusBarStyleBlackOpaque`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIStatusBarStyleBlackOpaque`'
- en: '`UIStatusBarStyleBlackTranslucent`![The status bar](img/5220OT_05_08.jpg)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIStatusBarStyleBlackTranslucent`![状态栏](img/5220OT_05_08.jpg)'
- en: 'With RubyMotion, we can customize the status bar in the following two ways:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RubyMotion，我们可以以下两种方式自定义状态栏：
- en: '**With Rakefile**: There is a setting in the `Rakefile` of your RubyMotion
    project; update it in the following way:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Rakefile**：在你的RubyMotion项目的`Rakefile`中有一个设置；按照以下方式更新它：'
- en: '[PRE22]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**With app code**: Update your delegate file with the following code snippet:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用应用代码**：将以下代码片段更新到你的代理文件中：'
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that these ways are distinct. The first one sets the status bar appearance
    while the application is being loaded, whereas the second one is used when the
    application has loaded.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些方法各不相同。第一种方法在应用程序加载时设置状态栏的外观，而第二种方法在应用程序加载后使用。
- en: 'The following code snippet shows how we can hide the status bar:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了我们如何隐藏状态栏：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As per Apple's guidelines, it is not advisable to create a custom status bar
    as users appreciate the consistency of the system-provided status bar.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 根据苹果的指导原则，不建议创建自定义状态栏，因为用户更喜欢系统提供的状态栏的一致性。
- en: Basic UI elements
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本UI元素
- en: In the previous section, we learned about bars, which play a pivotal role in
    creating the application view, primarily in the header and footer section of the
    screen. In this section, we will learn about other user interface elements essential
    for creating an interactive view. We will not discuss all the UI elements, however,
    as there are too many of them; we will examine only those that are used most frequently.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了条形控件，这在创建应用视图时起着关键作用，尤其是在屏幕的头部和底部部分。在本节中，我们将学习其他对于创建交互式视图至关重要的用户界面元素。然而，由于UI元素众多，我们不会讨论所有元素；我们只会检查那些最常用的元素。
- en: Label
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签
- en: 'A label displays a read-only text view and is used to display information.
    With the iOS SDK, we make use of the `UILabel` class to generate labels on screen.
    The `UILabel` class has many properties for customizing a label. In the following
    example, we will use a few of these properties to make our own customized label:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 标签显示只读文本视图，并用于显示信息。使用iOS SDK，我们使用`UILabel`类在屏幕上生成标签。`UILabel`类有许多属性可以自定义标签。在以下示例中，我们将使用这些属性中的几个来创建我们自己的自定义标签：
- en: 'First, update the `tab1_controller.rb` file with following code inside the
    `app` folder:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`app`文件夹内更新`tab1_controller.rb`文件，添加以下代码：
- en: '[PRE25]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, add the `add_form_elements` method:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加`add_form_elements`方法：
- en: '[PRE26]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s fire up the terminal and test our app:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动终端并测试我们的应用：
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We will see the following customized label appear on the screen:![Label](img/5220OT_05_09.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在屏幕上看到以下自定义标签：![标签](img/5220OT_05_09.jpg)
- en: Textfield
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本框
- en: 'A `UITextField` object will create a textbox in the view. It is a very common
    input type in any form. This is how we create it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextField`对象将在视图中创建一个文本框。在任何表单中，它都是一个非常常见的输入类型。这就是我们创建它的方法：'
- en: 'Update the `add_form_elements` method in the `tab1_controller.rb` file:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`tab1_controller.rb`文件中的`add_form_elements`方法：
- en: '[PRE28]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s fire up the terminal and test our app:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动终端并测试我们的应用：
- en: '[PRE29]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We will see the following textbox appear on the screen:![Textfield](img/5220OT_05_10.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在屏幕上看到以下文本框：![文本框](img/5220OT_05_10.jpg)
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When a user taps the text field, the system automatically displays an associated
    keyboard. As the keyboard pops up from below, there is a chance that this will
    lead to an obscure view. It is the developer's duty to reposition the view accordingly.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击文本框时，系统会自动显示关联的键盘。当键盘从下方弹出时，有可能导致视图变得模糊。这是开发者的责任，相应地重新定位视图。
- en: Switch button
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换按钮
- en: 'A `UISwitch` object will create a button to select on and off states. This
    is like a radio button that we commonly see when switching the Wi-Fi on and off.
    Follow the ensuing steps to create a switch button in your app:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`UISwitch`对象将创建一个按钮来选择开/关状态。这就像我们在切换Wi-Fi开/关时常见的单选按钮。按照以下步骤在你的应用中创建切换按钮：'
- en: 'Add the following code in `tab1_controller.rb` for the `add_form_elements`
    method inside the `app` folder:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tab1_controller.rb`文件中的`app`文件夹内添加以下代码，用于`add_form_elements`方法：
- en: '[PRE30]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Once the button is switched from one state to another, it calls an action.
    Let''s create the `switchIsChanged` action, which we already mentioned in the
    preceding step:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当按钮从一个状态切换到另一个状态时，它会调用一个动作。让我们创建`switchIsChanged`动作，这是我们之前提到的：
- en: '[PRE31]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s fire up the terminal and test our app:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动终端并测试我们的应用：
- en: '[PRE32]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We will see the following switch button appear on the screen:![Switch button](img/5220OT_05_11.jpg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在屏幕上看到以下切换按钮：![切换按钮](img/5220OT_05_11.jpg)
- en: Slider
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滑块
- en: 'A `UISlider` object is a visual control used to select a single value from
    a continuous range of values. Sliders are always displayed as horizontal bars.
    Perform the following steps to create a slider in your app:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`UISlider`对象是一个用于从连续值范围内选择单个值的视觉控件。滑块始终以水平条的形式显示。在你的应用中创建滑块的步骤如下：'
- en: 'Add the following code in `tab1_controller.rb` for the `add_form_elements`
    method:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tab1_controller.rb`文件中为`add_form_elements`方法添加以下代码：
- en: '[PRE33]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the preceding code, when the slider''s value is changed, the `sliderValueChanged`
    action will be called. Let''s add this action in our `tab1_controller.rb` file:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码中，当滑块的值改变时，会调用`sliderValueChanged`动作。让我们在我们的`tab1_controller.rb`文件中添加这个动作：
- en: '[PRE34]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Let''s fire up the terminal and test our app:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动终端并测试我们的应用：
- en: '[PRE35]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We will see the following slider appear on the screen:![Slider](img/5220OT_05_12.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在屏幕上看到以下滑块：![滑块](img/5220OT_05_12.jpg)
- en: Button
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮
- en: 'The `UIButton` class implements a button on the touchscreen. A button catches
    touch events and performs an action when tapped. Follow the ensuing steps to create
    a button in your app:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIButton`类在触摸屏上实现了一个按钮。按钮捕获触摸事件，并在被点击时执行操作。按照以下步骤在你的应用程序中创建一个按钮：'
- en: 'Add the following code in `tab1_controller.rb` for the `add_form_elements`
    method:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tab1_controller.rb`中的`add_form_elements`方法中添加以下代码：
- en: '[PRE36]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s fire up the terminal and test our app:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动终端并测试我们的应用程序：
- en: '[PRE37]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We will see the following button appear on the screen:![Button](img/5220OT_05_13.jpg)
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在屏幕上看到以下按钮：![按钮](img/5220OT_05_13.jpg)
- en: Picker view
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择视图
- en: A picker view is used to select a value from multiple options. It uses a representation
    that is like a spinning wheel or slot machine to show one or more series of values
    similar to a select box in web applications.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 选择视图用于从多个选项中选择一个值。它使用类似于旋转盘或老虎机的表示方式来显示一个或多个类似于网络应用程序中的选择框的值序列。
- en: 'The `UIPickerView` class implements a picker view. Let''s understand this by
    adding one to our application:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIPickerView`类实现了选择视图。让我们通过在我们的应用程序中添加一个来理解这一点：'
- en: 'Update the `tab2_controller.rb` file with the highlighted code. Go through
    the comments (the lines prefixed with `#`) for a better understanding of what''s
    happening in that section:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`tab2_controller.rb`文件，并带有高亮显示的代码。通过注释（以`#`开头）来更好地理解该部分的内容：
- en: '[PRE38]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, let''s run the application and click on the second tab to check what we
    have done so far:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们运行应用程序并点击第二个标签来检查我们到目前为止所做的工作：
- en: '[PRE39]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We can see a **Show Picker** button, and once we click on it, we can see a picker
    view that allows us to select a country:![Picker view](img/5220OT_05_14.jpg)
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到一个**显示选择器**按钮，一旦我们点击它，我们就可以看到一个允许我们选择国家的选择视图：![选择视图](img/5220OT_05_14.jpg)
- en: 'Let''s understand the picker code that we have created using the `UIPickerView`
    class:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用`UIPickerView`类创建的代码来理解我们创建的选择器代码：
- en: '[PRE40]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We must always provide `dataSource` and `delegate` in a picker because `datasource`
    supplies the data and `delegate` supplies the behavior of the picker. In the preceding
    code, we concealed the picker using `picker.hidden = true` as it will be shown
    only when the user clicks on the button.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择器中，我们必须始终提供`dataSource`和`delegate`，因为`dataSource`提供数据，而`delegate`提供选择器的行为。在前面的代码中，我们使用`picker.hidden
    = true`隐藏了选择器，因为它只会在用户点击按钮时显示。
- en: 'To create a picker, we have to create a minimum of three delegate methods:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个选择器，我们必须创建至少三个代理方法：
- en: '`numberOfComponentsInPickerView`: This is called by the `PickerView` control
    to identify the number of components, such as the selection wheels, that are to
    be displayed to the user:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numberOfComponentsInPickerView`: 这将由`PickerView`控件调用，以识别要显示给用户的组件数量，例如选择轮：'
- en: '[PRE41]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In our code, we return `1` as we only have one component to show.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们返回`1`，因为我们只有一个组件要显示。
- en: '`numberOfRowsInComponent`: This informs the `PickerView` control about the
    number of rows that are present in a specified component:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numberOfRowsInComponent`: 这会通知`PickerView`控件在指定组件中存在的行数：'
- en: '[PRE42]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: So, `@countryNames.count` will return the total number of countries in the array.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，`@countryNames.count`将返回数组中的国家总数。
- en: '`titleForRow`: It will be called by the `PickerView` control to identify the
    string that is to be displayed for a specified row in a specific component:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`titleForRow`: 它将由`PickerView`控件调用，以识别在特定组件中要显示的指定行的字符串：'
- en: '[PRE43]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `pickerView:titleForRow:forComponent` method gets called *n* number of times;
    here *n* is the number returned by `pickerView:numberOfRowsInComponent`.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`pickerView:titleForRow:forComponent`方法将被调用*n*次；这里的*n*是`pickerView:numberOfRowsInComponent`返回的值。'
- en: 'We can also perform an action when we select any value from the picker view.
    This can be done using the `pickerView(pickerView, didSelectRow:row, inComponent:component)`
    delegate method, as shown in the following code:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在选择视图中选择任何值时执行操作。这可以通过使用`pickerView(pickerView, didSelectRow:row, inComponent:component)`代理方法来完成，如下面的代码所示：
- en: '[PRE44]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here, we are changing the label message with the country name that we have selected
    from the picker.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在更改标签消息，使用我们从选择器中选择的国名字符串。
- en: Hands-on – add a Restro Application
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际操作 – 添加一个Restro应用
- en: So far in this chapter, we have learned about the different UI elements; it's
    now time to apply this knowledge to enhance our Restro Application.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经学习了不同的UI元素；现在是时候将这一知识应用到增强我们的Restro应用上了。
- en: 'Firstly, we will add a tab bar and a navigation bar in our Restro Application,
    followed by creating a view for showing the restaurant detail page:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在我们的 Restro 应用程序中添加一个标签栏和导航栏，然后创建一个用于显示餐厅详细页面的视图：
- en: 'Update `app_delegate.rb` with the highlighted code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用高亮代码更新 `app_delegate.rb`：
- en: '[PRE45]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Here, we created a tab bar using `UITabBarController` and assigned two controllers,
    namely `RestroController` and `AboutController`, to it.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `UITabBarController` 创建了一个标签栏，并将其分配给了两个控制器，即 `RestroController` 和 `AboutController`。
- en: 'Next, let''s create an `about_controller.rb` file in the `app` folder and add
    the following code:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们在 `app` 文件夹中创建一个 `about_controller.rb` 文件，并添加以下代码：
- en: '[PRE46]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Here, we just created a simple view and added a label as a subview.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们只创建了一个简单的视图，并添加了一个标签作为子视图。
- en: 'Now let''s run the application to see our progress:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们运行应用程序来看看我们的进度：
- en: '[PRE47]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Here is the output we get:![Hands-on – add a Restro Application](img/5220OT_05_16.jpg)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们的输出结果：![动手实践 – 添加 Restro 应用](img/5220OT_05_16.jpg)
- en: 'In the preceding screenshot, we can see a tab bar at the bottom of the screen
    with two tabs: **Search** and **About**.'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到屏幕底部有一个标签栏，包含两个标签：**搜索**和**关于**。
- en: 'In the last chapter, we implemented a search based on city. Let''s make the
    search results on the search page clickable; this will redirect us to a new view
    that shows us the details of the restaurant that was selected:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们根据城市实现了搜索功能。让我们使搜索页面的搜索结果可点击；这将带我们到一个新的视图，显示我们选择的餐厅的详细信息：
- en: 'Create a controller `detail_controller.rb` in the `app` folder:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app` 文件夹中创建一个 `detail_controller.rb` 控制器：
- en: '[PRE48]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In these lines of code, we are showing all the details on the view that will
    get stored in the `@restaurant` instance variable from `RestroController`.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这些代码行中，我们正在显示将存储在 `@restaurant` 实例变量中的 `RestroController` 的所有详细信息。
- en: 'Add the following code in `restro_controller.rb` in the `app` folder:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app` 文件夹中的 `restro_controller.rb` 文件中添加以下代码：
- en: '[PRE49]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This code will make each row of the table a link that will redirect to a detailed
    view.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此代码将使表格的每一行成为一个链接，它将重定向到详细视图。
- en: 'Also, we need to replace the following line in `app_delegate.rb`:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们还需要在 `app_delegate.rb` 中替换以下行：
- en: '[PRE50]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The following code snippet will add a navigation bar with controls to enable
    easy navigation in between pages:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段将添加一个带有控制按钮的导航栏，以便在页面之间轻松导航：
- en: '[PRE51]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Let''s fire up the terminal, and check our progress:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动终端，并检查我们的进度：
- en: '[PRE52]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This is the output we get:![Hands-on – add a Restro Application](img/5220OT_05_18.jpg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们的输出结果：![动手实践 – 添加 Restro 应用](img/5220OT_05_18.jpg)
- en: 'We can see a navigation bar and a search bar, but we only need a search bar
    at the top. Let''s make that change in `restro_application.rb` by replacing `view.tableHeaderView
    = searchBar` with what follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到一个导航栏和一个搜索栏，但我们只需要一个顶部的搜索栏。让我们在 `restro_application.rb` 中进行更改，将 `view.tableHeaderView
    = searchBar` 替换为以下内容：
- en: '[PRE53]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Generally in an iOS application, if a row is a link to another controller,
    an arrow is shown in the right-hand side corner. Let''s add an arrow and make
    it look more like an iOS app. Update `restro_controller.rb`, and add the following
    line where we will create the `TableView` cell:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常在 iOS 应用程序中，如果一行是一个指向另一个控制器的链接，则会在右侧角落显示一个箭头。让我们添加一个箭头，使其看起来更像 iOS 应用程序。更新
    `restro_controller.rb`，并在创建 `TableView` 单元格的地方添加以下行：
- en: '[PRE54]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Let''s run the application to check what we have done:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行应用程序来检查我们做了什么：
- en: '[PRE55]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We can see that the top navigation toolbar has disappeared, but arrows at the
    end of each row of the table view have appeared:![Hands-on – add a Restro Application](img/5220OT_05_20.jpg)
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到顶部的导航工具栏已经消失，但表格视图每一行的末尾都出现了箭头：![动手实践 – 添加 Restro 应用](img/5220OT_05_20.jpg)
- en: Summary
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have learned some of the fundamentals of the iOS user interface
    that are essential in creating outstanding user-friendly applications; we covered
    the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 iOS 用户界面的基础知识，这对于创建出色的用户友好型应用程序至关重要；我们涵盖了以下内容：
- en: We started by understanding standard UI elements, such as bars, and learned
    how to use them so that we do not lose the fundamental structure of an iOS app
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从了解标准 UI 元素开始，如条形，并学习了如何使用它们，以便我们不会失去 iOS 应用的基本结构
- en: Next, we covered UI elements, such as textboxes, labels, sliders, pickers, and
    many more
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了 UI 元素，如文本框、标签、滑块、选择器等
- en: Lastly, we encompassed what we have learned so far in our application to get
    some real-time experience
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将到目前为止学到的知识应用到我们的应用程序中，以获得一些实际经验
- en: In the next chapter, we will move our focus to using the powerful device capabilities
    of iOS devices and learn how to use them with RubyMotion. We will also learn how
    to make use of the camera, geolocation, contacts, gestures and many more features
    to create some amazing demo applications.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把我们的重点转向使用iOS设备的强大设备功能，并学习如何使用RubyMotion来操作它们。我们还将学习如何利用相机、地理位置、联系人、手势以及许多其他功能来创建一些令人惊叹的演示应用程序。
