- en: Chapter 6. Android Phone Sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book so far, we have used an Android device to control Arduino projects
    and get readings from sensors connected to the Arduino board. In this chapter,
    we will do something different: we will use the phone''s sensors to control an
    Arduino board.'
  prefs: []
  type: TYPE_NORMAL
- en: We will connect a servomotor to an Arduino board so that it can be controlled
    from the Android phone. A servomotor is basically a motor whose angular position
    can be precisely controlled by a microcontroller. We will use BLE once more to
    receive commands from the Android device.
  prefs: []
  type: TYPE_NORMAL
- en: On the Android side, we will basically measure data coming from the phone's
    gyroscope sensor continuously and convert this data into meaningful commands for
    the servo. The goal is that the servo motor continuously follows the movement
    of the Android device.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect a servo motor to the Arduino platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a sketch to receive commands via BLE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write an Android application to control the servomotor using the Android phone
    gyroscope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you will need for this project is an Arduino Uno board.
  prefs: []
  type: TYPE_NORMAL
- en: Then you will need a BLE module. We chose the Adafruit nRF8001 chip because
    it comes with a nice Arduino library, and it has already existing examples of
    Android apps to control the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the servomotor, we chose a simple 5V servo motor module. You can use one
    from any brand you want, as long as it can be controlled with 5V voltage levels.
    The following is an image of the servo that was used for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](img/0389OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, you will need a breadboard and some jumper wires to make the different
    connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the list of the required components for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Uno ([https://www.adafruit.com/product/50](https://www.adafruit.com/product/50))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Adafruit nRF8001 BLE breakout board ([https://www.adafruit.com/product/1697](https://www.adafruit.com/product/1697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 5V servo motor ([https://www.adafruit.com/product/1143](https://www.adafruit.com/product/1143))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The breadboard ([https://www.adafruit.com/products/64](https://www.adafruit.com/products/64))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires ([https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the software side, you will need the usual Arduino IDE. It is recommended
    that you use the Arduino IDE Version 1.5.7 for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: The library for the nRF8001 board found at [https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The aREST library found at [https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To install a given library, simply extract the `library` folder into your `Arduino/libra`
    `ries` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the hardware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now make the necessary hardware connections for the project. To help
    you out, this is the schematic of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first step is to place the Bluetooth module on the breadboard. Then, connect
    the power supply from the Arduino board to the breadboard: 5V of the Arduino board
    goes to the red power rail, and **GND** goes to the blue power rail.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will connect the BLE module. First, connect the power supply of the module:
    GND goes to the blue power rail, and **VIN** goes to the red power rail. After
    this, you will need to connect the different wires responsible for the SPI interface:
    **SCK** to Arduino pin **13**, **MISO** to Arduino pin **12**, and **MOSI** to
    Arduino pin **11**. Then connect the **REQ** pin to Arduino pin **10**. Finally,
    connect the **RDY** pin to Arduino pin **2**, and the **RST** pin to Arduino pin
    **9**. If you need additional help to connect this module, you can visit the manufacturer''s
    guide at [https://learn.adafruit.com/getting-started-with-the-nrf8001-bluefruit-le-breakout](https://learn.adafruit.com/getting-started-with-the-nrf8001-bluefruit-le-breakout).'
  prefs: []
  type: TYPE_NORMAL
- en: For the servo motor, connect the red cable of the servo to the red power rail
    and the black cable of the servo to the blue power rail. Finally, connect the
    remaining cable to pin number 7 of the Arduino board.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a picture of the assembled project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing the servo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now write a very simple sketch to test the servomotor and also see
    how the Arduino Servo library is working. The following is the complete sketch
    for this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now see the details of the sketch. This starts by including the Servo
    library as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create an instance of the Servo library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also declare a variable called `pos` that will contain the angular
    position of the servo motor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, in the `setup()` function of the sketch, we will attach the servo
    to pin 7 of the Arduino board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will sweep the `pos` variable from `0` to `180`, meaning we
    cover all the possible angular positions of the servo motor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Still in this test code, we will make the servo motor go in the other direction
    with a similar loop.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all the code for this chapter can be found in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to test this Arduino sketch. Simply upload the code to the Arduino
    board. You should see that the servo motor is going all the way in one direction,
    and then going back to its starting position. After this, this loop should repeat
    itself. If this is working, you can move on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Arduino sketch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now write the sketch to control the servo motor via BLE. This is the
    complete sketch for this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now see the details of this sketch. It starts by including the required
    libraries for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also declare that we want to use the lightweight mode of the aREST
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will define which pin the Bluetooth module is connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also create an instance of the Servo library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to create an instance of the aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to create an instance of the nRF8001 library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `setup()` function of the sketch, we will attach the servo motor to
    pin number 7 of the Arduino board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also initialize the BLE board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will give a name and an ID to the board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also expose the `servoControl` function to the aREST API so that we
    can access it via Bluetooth. We will see the details of the `servoControl` function
    in a moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `loop()` function of the sketch, we will poll the Bluetooth chip to
    see if a device is connected to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will store the state of the chip into a `status` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, if the status shows that some device is connect to the Bluetooth chip,
    we will handle any incoming requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now see the details of the `servoControl` function that we will use
    to control the servo motor remotely. It simply takes a string as an input, containing
    the position that we want to apply on the servo motor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all the code for this chapter can be found inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: You can now upload the code to the Arduino board and move to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Android app project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we will design a very simple Android app that will show the
    Bluetooth callback in a single-line text view and the sensor output in another
    text view. This time around, we will also implement a **Refresh** button, which
    will restart the Bluetooth callback if there is a need for a refresh.
  prefs: []
  type: TYPE_NORMAL
- en: The part of the project that will be more sophisticated is accessing the hardware
    sensors available for us in order to send commands to the Servo and rotate the
    shaft according to the x-axis orientation of our Android device, determined by
    the gyroscope hardware, which is included in the device.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that sensor readings and data could vary between different
    Android devices due to different hardware setups. Then again, you could use this
    project as a baseline to further your ventures.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will assume that you have switched on the `Auto-Import` function within
    your **Preferences** option. If not, kindly activate it by going to the **Auto-Import**
    preferences and selecting all the available options. The **Auto-Import** preferences
    are available on Mac and Windows as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On a Mac, Navigate to **Android Studio** | **Preferences** | **Editor** | **Auto-Import**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, Navigate to **File** | **Settings**| **Editor**| **Auto-Import**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With all the necessary settings in place, we will first start off by creating
    a new project where we will choose the following within the **New Project** setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Android Gyroscope Servo Control'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum SDK**: `18`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project**: `Blank Activity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity Name**: `MainScreen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to make this project work, we will need to first go over to the Android
    `Manifest` file, which is available at `app` > `src` > `main` > `AndroidManifest.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Laying out the Android user interface and permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we open the file, we will need to add permissions for access to Bluetooth
    and access to the gyroscope sensor hardware. The final Android `Manifest.xml`
    file will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In this particular project, we will not put an emphasis on getting the user
    interface to be highly polished but instead, we will focus more on getting the
    orientation sensors to function appropriately with the servo motor.
  prefs: []
  type: TYPE_NORMAL
- en: In our project, we will navigate to the main layout file, which can be accessed
    by navigating to `app` > `src` > `res` > `layout` > `activity_main_screen.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will implement a linear layout that has two `TextView` modules
    and a button. Go ahead and replace the current code in your project with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the app's internals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will then move on to the `MainScreen.java` file, which is available at `app`
    > `src` > `main` > `java` > `package name` > `MainScreen.java`.
  prefs: []
  type: TYPE_NORMAL
- en: We will then replace the current code with the following code that we will walk
    through step-by-step and with **Auto-import** enabled; Android Studio will automatically
    import all the statements that we need for our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by declaring the class that extends `Activity` and, in addition,
    we will need to add the capability for the Java class to implement `SensorEventListener`,
    which encompasses the main methods that are needed for detection of `sensor activity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are all the variables that need to be declared in order to work
    with the BLE module, log tag for logging purposes, user interface elements, handler
    methods, and Bluetooth characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The custom UART service for the Adafruit Bluetooth module uses the following
    UUIDs, which are the values you need to know to make our Android application talk
    to the appropriate characteristic. There is one characteristic for TX and another
    for RX, similar to the way that UART uses two lines to send and receive data as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UART service UUID**: 6E400001-B5A3-F393-E0A9-E50E24DCCA9E'
  prefs: []
  type: TYPE_NORMAL
- en: '**TX characteristic UUID**: 6E400002-B5A3-F393-E0A9-E50E24DCCA9E'
  prefs: []
  type: TYPE_NORMAL
- en: '**RX characteristic UUID**: 6E400003-B5A3-F393-E0A9-E50E24DCCA9E'
  prefs: []
  type: TYPE_NORMAL
- en: The Bluetooth logic that plays an important role in our project to deal with
    all the callbacks is available in its entirety in our GitHub repository. The main
    Java activity with all the Bluetooth logic is available at [http://git.io/XSHnow](http://git.io/XSHnow).
  prefs: []
  type: TYPE_NORMAL
- en: In the following section of code, we will be declaring what will happen when
    the activity will be created and setting all the necessary functions to make the
    application logic connect to the layout files.
  prefs: []
  type: TYPE_NORMAL
- en: In the `onCreate()` method, we will also be initializing the `SensorManager`
    class, which will be needed to get access to the system's service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onStart()` method, we will use the `SensorManager` class to register
    the type of sensor that we will be using. In this case, we will be using the orientation
    sensors and setting `SENSOR_DELAY_NORMAL`, which we will need to modify later
    on so as to ensure that there is enough delay between each call. In the `onStart()`
    method, we will also be initializing the Bluetooth adapter to start listening
    for devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s always important to unregister the sensor listener and disconnect the
    BLE connection when the app is closed so as to prevent the battery drain and device
    memory resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code will deal with all the `Sensor` methods that need to be
    implemented in order to ensure there is enough delay between each sensor reading
    and to send the necessary commands to the Bluetooth-enabled Arduino for the servo
    motor to rotate the shaft according to the *x*-axis of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code will ensure that the commands that are sent to the BLE module
    are shown in the Bluetooth text output on our user interface layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''ve written all the code, which you can easily follow along on our
    GitHub repository, available at [https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter6](https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter6),
    make sure that you have a physical device that is running Android 4.3 or higher
    and Bluetooth switched on. Once you build the project, you should see something
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the app''s internals](img/0389OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to go further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Orientation readings from the Android app can be further visualized in the app
    with real-time graphs, and this project could be further advanced and integrated
    into a remote object control app where the Android smartphone's user can control
    an object that is connected to the servo motor from a specific distance.
  prefs: []
  type: TYPE_NORMAL
- en: Simple yet useful application of such an action would be to open a gate or control
    a mobile robot via a gyroscope. Android smartphones also have a number of other
    sensors available for us, such as the accelerometer and magnetometer, which could
    effectively be used to control different components connected to the Arduino microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we learned how to take advantage of one of the most
    important sensors on the Android phone, the gyroscope sensor, to be able to control
    the Arduino-controlled servo motor. We achieve this communication and action via
    the BLE capabilities of the Arduino equipped with the Adafruit BLE module and
    the possibilities of the Android operating system running 4.3 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also provides the foundation steps to the following chapter, which
    will access one of the Android device's most important hardwares.
  prefs: []
  type: TYPE_NORMAL
