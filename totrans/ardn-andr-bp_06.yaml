- en: Chapter 6. Android Phone Sensor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 Android手机传感器
- en: 'In this book so far, we have used an Android device to control Arduino projects
    and get readings from sensors connected to the Arduino board. In this chapter,
    we will do something different: we will use the phone''s sensors to control an
    Arduino board.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们已经使用Android设备来控制Arduino项目，并从连接到Arduino板的传感器中获取读数。在本章中，我们将做一些不同的事情：我们将使用手机的传感器来控制Arduino板。
- en: We will connect a servomotor to an Arduino board so that it can be controlled
    from the Android phone. A servomotor is basically a motor whose angular position
    can be precisely controlled by a microcontroller. We will use BLE once more to
    receive commands from the Android device.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把一个伺服电机连接到Arduino板上，以便可以从Android手机上控制它。伺服电机基本上是一种可以由微控制器精确控制角位置的电机。我们将再次使用BLE来接收来自Android设备的命令。
- en: On the Android side, we will basically measure data coming from the phone's
    gyroscope sensor continuously and convert this data into meaningful commands for
    the servo. The goal is that the servo motor continuously follows the movement
    of the Android device.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android端，我们将连续测量来自手机陀螺仪传感器的数据，并将这些数据转换为伺服电机有意义的命令。目标是伺服电机持续跟随Android设备的移动。
- en: 'In this chapter, you will learn how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何：
- en: Connect a servo motor to the Arduino platform
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将伺服电机连接到Arduino平台
- en: Write a sketch to receive commands via BLE
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个通过BLE接收命令的草图
- en: Write an Android application to control the servomotor using the Android phone
    gyroscope
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个Android应用程序，使用Android手机的陀螺仪控制伺服电机
- en: Hardware and software requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件和软件要求
- en: The first thing you will need for this project is an Arduino Uno board.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为这个项目准备的第一件事是一个Arduino Uno板。
- en: Then you will need a BLE module. We chose the Adafruit nRF8001 chip because
    it comes with a nice Arduino library, and it has already existing examples of
    Android apps to control the module.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您需要一个BLE模块。我们选择了Adafruit nRF8001芯片，因为它附带了一个不错的Arduino库，并且已经有现成的Android应用程序示例来控制该模块。
- en: 'For the servomotor, we chose a simple 5V servo motor module. You can use one
    from any brand you want, as long as it can be controlled with 5V voltage levels.
    The following is an image of the servo that was used for this project:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于伺服电机，我们选择了一个简单的5V伺服电机模块。您可以使用任何品牌的模块，只要它能用5V电压等级控制即可。以下是本项目使用的伺服电机的图片：
- en: '![Hardware and software requirements](img/0389OS_06_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![硬件和软件要求](img/0389OS_06_01.jpg)'
- en: Finally, you will need a breadboard and some jumper wires to make the different
    connections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要一个面包板和一些跳线来制作不同的连接。
- en: 'This is the list of the required components for the project:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是项目所需的组件列表：
- en: Arduino Uno ([https://www.adafruit.com/product/50](https://www.adafruit.com/product/50))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Uno（[https://www.adafruit.com/product/50](https://www.adafruit.com/product/50)）
- en: The Adafruit nRF8001 BLE breakout board ([https://www.adafruit.com/product/1697](https://www.adafruit.com/product/1697))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adafruit nRF8001 BLE扩展板（[https://www.adafruit.com/product/1697](https://www.adafruit.com/product/1697)）
- en: A 5V servo motor ([https://www.adafruit.com/product/1143](https://www.adafruit.com/product/1143))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5V伺服电机（[https://www.adafruit.com/product/1143](https://www.adafruit.com/product/1143)）
- en: The breadboard ([https://www.adafruit.com/products/64](https://www.adafruit.com/products/64))
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板（[https://www.adafruit.com/products/64](https://www.adafruit.com/products/64)）
- en: Jumper wires ([https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957))
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线（[https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957)）
- en: On the software side, you will need the usual Arduino IDE. It is recommended
    that you use the Arduino IDE Version 1.5.7 for this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，您需要常用的Arduino IDE。建议您使用Arduino IDE版本1.5.7来学习本章内容。
- en: 'You will need the following libraries:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要以下库：
- en: The library for the nRF8001 board found at [https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001)找到的nRF8001板库
- en: The aREST library found at [https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST)找到的aREST库
- en: To install a given library, simply extract the `library` folder into your `Arduino/libra`
    `ries` folder.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装某个库，只需将`library`文件夹提取到您的`Arduino/libra ries`文件夹中。
- en: Configuring the hardware
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置硬件
- en: 'Let''s now make the necessary hardware connections for the project. To help
    you out, this is the schematic of the project:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来为项目进行必要的硬件连接。为了帮助您，以下是项目的原理图：
- en: '![Configuring the hardware](img/0389OS_06_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_06_02.jpg)'
- en: 'The first step is to place the Bluetooth module on the breadboard. Then, connect
    the power supply from the Arduino board to the breadboard: 5V of the Arduino board
    goes to the red power rail, and **GND** goes to the blue power rail.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将蓝牙模块放置在面包板上。然后，将Arduino板上的电源供应连接到面包板：Arduino板的5V连接到红色电源轨，**GND**连接到蓝色电源轨。
- en: 'We will connect the BLE module. First, connect the power supply of the module:
    GND goes to the blue power rail, and **VIN** goes to the red power rail. After
    this, you will need to connect the different wires responsible for the SPI interface:
    **SCK** to Arduino pin **13**, **MISO** to Arduino pin **12**, and **MOSI** to
    Arduino pin **11**. Then connect the **REQ** pin to Arduino pin **10**. Finally,
    connect the **RDY** pin to Arduino pin **2**, and the **RST** pin to Arduino pin
    **9**. If you need additional help to connect this module, you can visit the manufacturer''s
    guide at [https://learn.adafruit.com/getting-started-with-the-nrf8001-bluefruit-le-breakout](https://learn.adafruit.com/getting-started-with-the-nrf8001-bluefruit-le-breakout).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将连接BLE模块。首先，连接模块的电源：**GND**连接到蓝色电源轨，**VIN**连接到红色电源轨。之后，您需要连接负责SPI接口的不同电线：**SCK**连接到Arduino引脚**13**，**MISO**连接到Arduino引脚**12**，**MOSI**连接到Arduino引脚**11**。然后，将**REQ**引脚连接到Arduino引脚**10**。最后，将**RDY**引脚连接到Arduino引脚**2**，将**RST**引脚连接到Arduino引脚**9**。如果您需要连接此模块的额外帮助，可以访问制造商指南[https://learn.adafruit.com/getting-started-with-the-nrf8001-bluefruit-le-breakout](https://learn.adafruit.com/getting-started-with-the-nrf8001-bluefruit-le-breakout)。
- en: For the servo motor, connect the red cable of the servo to the red power rail
    and the black cable of the servo to the blue power rail. Finally, connect the
    remaining cable to pin number 7 of the Arduino board.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于伺服电机，将伺服电机的红色电缆连接到红色电源轨，将黑色电缆连接到蓝色电源轨。最后，将剩余的电缆连接到Arduino板的7号引脚。
- en: 'The following is a picture of the assembled project:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为该项目组装的图片：
- en: '![Configuring the hardware](img/0389OS_06_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_06_03.jpg)'
- en: Testing the servo
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试伺服电机
- en: 'We will now write a very simple sketch to test the servomotor and also see
    how the Arduino Servo library is working. The following is the complete sketch
    for this part:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个非常简单的草图来测试伺服电机，并查看Arduino Servo库的工作情况。以下是这部分完整的草图：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s now see the details of the sketch. This starts by including the Servo
    library as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看草图的细节。这首先是通过以下方式包含Servo库：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then we create an instance of the Servo library:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个Servo库的实例：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will also declare a variable called `pos` that will contain the angular
    position of the servo motor:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将声明一个名为`pos`的变量，它将包含伺服电机的角位置：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After this, in the `setup()` function of the sketch, we will attach the servo
    to pin 7 of the Arduino board:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，在草图中的`setup()`函数中，我们将伺服电机连接到Arduino板上的7号引脚：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After this, we will sweep the `pos` variable from `0` to `180`, meaning we
    cover all the possible angular positions of the servo motor:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们将`pos`变量从`0`扫描到`180`，这意味着我们覆盖了伺服电机的所有可能的角位置：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Still in this test code, we will make the servo motor go in the other direction
    with a similar loop.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试代码中，我们将使用类似的循环使伺服电机向相反方向移动。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that all the code for this chapter can be found in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本章的所有代码都可以在本书的GitHub仓库[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)中找到。
- en: It's now time to test this Arduino sketch. Simply upload the code to the Arduino
    board. You should see that the servo motor is going all the way in one direction,
    and then going back to its starting position. After this, this loop should repeat
    itself. If this is working, you can move on to the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候测试这个Arduino草图了。只需将代码上传到Arduino板。你应该会看到伺服电机向一个方向完全移动，然后返回到起始位置。之后，这个循环应该会重复。如果一切正常，你可以继续到下一节。
- en: Writing the Arduino sketch
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Arduino草图
- en: 'We will now write the sketch to control the servo motor via BLE. This is the
    complete sketch for this part:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个草图来通过BLE控制伺服电机。以下是这部分完整的草图：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s now see the details of this sketch. It starts by including the required
    libraries for the project:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这个草图的细节。它首先包含项目所需的库：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will also declare that we want to use the lightweight mode of the aREST
    library:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将声明我们想要使用aREST库的轻量级模式：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After this, we will define which pin the Bluetooth module is connected to:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将定义蓝牙模块连接到的引脚：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will also create an instance of the Servo library:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建Servo库的一个实例：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will also need to create an instance of the aREST library:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建aREST库的一个实例：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will also need to create an instance of the nRF8001 library:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建nRF8001库的一个实例：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `setup()` function of the sketch, we will attach the servo motor to
    pin number 7 of the Arduino board:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图中的`setup()`函数中，我们将伺服电机连接到Arduino板的7号引脚：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will also initialize the BLE board:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将初始化BLE板：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After this, we will give a name and an ID to the board:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将为板子提供一个名称和ID：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will also expose the `servoControl` function to the aREST API so that we
    can access it via Bluetooth. We will see the details of the `servoControl` function
    in a moment:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将将`servoControl`函数暴露给aREST API，以便我们可以通过蓝牙访问它。我们将在稍后看到`servoControl`函数的详细信息：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `loop()` function of the sketch, we will poll the Bluetooth chip to
    see if a device is connected to it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图中的`loop()`函数中，我们将轮询蓝牙芯片以查看是否有设备连接到它：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will store the state of the chip into a `status` variable:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把芯片的状态存储到`status`变量中：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, if the status shows that some device is connect to the Bluetooth chip,
    we will handle any incoming requests:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果状态显示有设备连接到蓝牙芯片，我们将处理任何传入的请求：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s now see the details of the `servoControl` function that we will use
    to control the servo motor remotely. It simply takes a string as an input, containing
    the position that we want to apply on the servo motor:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看我们将用于远程控制伺服电机的`servoControl`函数的详细情况。它简单地接受一个字符串作为输入，包含我们想要应用在伺服电机上的位置：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that all the code for this chapter can be found inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本章的所有代码都可以在本书的GitHub仓库[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)中找到。
- en: You can now upload the code to the Arduino board and move to the next section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以将代码上传到Arduino板，并进入下一节。
- en: Setting up the Android app project
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Android应用程序项目
- en: In this project, we will design a very simple Android app that will show the
    Bluetooth callback in a single-line text view and the sensor output in another
    text view. This time around, we will also implement a **Refresh** button, which
    will restart the Bluetooth callback if there is a need for a refresh.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将设计一个非常简单的Android应用程序，该程序将在单行文本视图中显示蓝牙回调，并在另一个文本视图中显示传感器输出。这次，我们还将实现一个**刷新**按钮，如果需要刷新，它将重新启动蓝牙回调。
- en: The part of the project that will be more sophisticated is accessing the hardware
    sensors available for us in order to send commands to the Servo and rotate the
    shaft according to the x-axis orientation of our Android device, determined by
    the gyroscope hardware, which is included in the device.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中更复杂的部分是访问我们可用的硬件传感器，以便向伺服发送命令并根据我们Android设备的x轴方向旋转轴，该方向由设备中包含的陀螺仪硬件确定。
- en: It is important to note that sensor readings and data could vary between different
    Android devices due to different hardware setups. Then again, you could use this
    project as a baseline to further your ventures.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，由于不同的硬件设置，传感器读数和数据可能在不同的Android设备之间有所不同。然而，您也可以将此项目作为基准来进一步探索。
- en: 'We will assume that you have switched on the `Auto-Import` function within
    your **Preferences** option. If not, kindly activate it by going to the **Auto-Import**
    preferences and selecting all the available options. The **Auto-Import** preferences
    are available on Mac and Windows as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设您已经在**首选项**选项中打开了`自动导入`功能。如果没有，请通过转到**自动导入**首选项并选择所有可用选项来激活它。**自动导入**首选项在Mac和Windows上的位置如下：
- en: On a Mac, Navigate to **Android Studio** | **Preferences** | **Editor** | **Auto-Import**.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上，导航到**Android Studio** | **首选项** | **编辑器** | **自动导入**。
- en: On Windows, Navigate to **File** | **Settings**| **Editor**| **Auto-Import**.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，导航到**文件** | **设置** | **编辑器** | **自动导入**。
- en: 'With all the necessary settings in place, we will first start off by creating
    a new project where we will choose the following within the **New Project** setup:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有必要的设置就绪后，我们将首先创建一个新的项目，在**新建项目**设置中选择以下内容：
- en: '**Name**: Android Gyroscope Servo Control'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：Android陀螺仪伺服控制'
- en: '**Minimum SDK**: `18`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小SDK**：`18`'
- en: '**Project**: `Blank Activity`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：`Blank Activity`'
- en: '**Activity Name**: `MainScreen`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动名称**：`MainScreen`'
- en: In order to make this project work, we will need to first go over to the Android
    `Manifest` file, which is available at `app` > `src` > `main` > `AndroidManifest.xml`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个项目工作，我们首先需要转到Android的`Manifest`文件，该文件位于`app` > `src` > `main` > `AndroidManifest.xml`。
- en: Laying out the Android user interface and permissions
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局Android用户界面和权限
- en: 'Once we open the file, we will need to add permissions for access to Bluetooth
    and access to the gyroscope sensor hardware. The final Android `Manifest.xml`
    file will look as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们打开文件，我们需要添加访问蓝牙和陀螺仪传感器硬件的权限。最终的Android `Manifest.xml`文件将如下所示：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this particular project, we will not put an emphasis on getting the user
    interface to be highly polished but instead, we will focus more on getting the
    orientation sensors to function appropriately with the servo motor.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的项目中，我们不会强调将用户界面做得非常精致，相反，我们将更多地关注使方向传感器与伺服电机适当地协同工作。
- en: In our project, we will navigate to the main layout file, which can be accessed
    by navigating to `app` > `src` > `res` > `layout` > `activity_main_screen.xml`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们将导航到主布局文件，可以通过导航到`app` > `src` > `res` > `layout` > `activity_main_screen.xml`来访问。
- en: 'The following code will implement a linear layout that has two `TextView` modules
    and a button. Go ahead and replace the current code in your project with the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将实现一个线性布局，包含两个`TextView`模块和一个按钮。请将您项目中的当前代码替换为以下代码：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Setting up the app's internals
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置应用程序的内部结构
- en: We will then move on to the `MainScreen.java` file, which is available at `app`
    > `src` > `main` > `java` > `package name` > `MainScreen.java`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将继续到`MainScreen.java`文件，该文件位于`app` > `src` > `main` > `java` > `package
    name` > `MainScreen.java`。
- en: We will then replace the current code with the following code that we will walk
    through step-by-step and with **Auto-import** enabled; Android Studio will automatically
    import all the statements that we need for our project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将用以下代码替换当前代码，我们将逐步讲解，并启用**自动导入**；Android Studio将自动导入我们项目所需的全部语句。
- en: 'We start off by declaring the class that extends `Activity` and, in addition,
    we will need to add the capability for the Java class to implement `SensorEventListener`,
    which encompasses the main methods that are needed for detection of `sensor activity`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先声明一个扩展`Activity`的类，并且，我们还需要为Java类添加实现`SensorEventListener`的能力，这包括检测`传感器活动`所需的主要方法：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following are all the variables that need to be declared in order to work
    with the BLE module, log tag for logging purposes, user interface elements, handler
    methods, and Bluetooth characteristics:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要声明的所有变量，以便与BLE模块一起工作，日志标签用于日志记录，用户界面元素，处理程序方法，以及蓝牙特性：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The custom UART service for the Adafruit Bluetooth module uses the following
    UUIDs, which are the values you need to know to make our Android application talk
    to the appropriate characteristic. There is one characteristic for TX and another
    for RX, similar to the way that UART uses two lines to send and receive data as
    follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为Adafruit蓝牙模块定制的UART服务使用以下UUID，这是您需要知道以使我们的Android应用程序与适当的特性进行通信的值。有一个特性用于TX，另一个用于RX，类似于UART使用两条线发送和接收数据的方式如下：
- en: '**UART service UUID**: 6E400001-B5A3-F393-E0A9-E50E24DCCA9E'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**UART服务UUID**：6E400001-B5A3-F393-E0A9-E50E24DCCA9E'
- en: '**TX characteristic UUID**: 6E400002-B5A3-F393-E0A9-E50E24DCCA9E'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**TX特性UUID**：6E400002-B5A3-F393-E0A9-E50E24DCCA9E'
- en: '**RX characteristic UUID**: 6E400003-B5A3-F393-E0A9-E50E24DCCA9E'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**RX特性UUID**：6E400003-B5A3-F393-E0A9-E50E24DCCA9E'
- en: The Bluetooth logic that plays an important role in our project to deal with
    all the callbacks is available in its entirety in our GitHub repository. The main
    Java activity with all the Bluetooth logic is available at [http://git.io/XSHnow](http://git.io/XSHnow).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，处理所有回调的蓝牙逻辑的完整内容可以在我们的GitHub仓库中找到。包含所有蓝牙逻辑的主要Java活动位于[http://git.io/XSHnow](http://git.io/XSHnow)。
- en: In the following section of code, we will be declaring what will happen when
    the activity will be created and setting all the necessary functions to make the
    application logic connect to the layout files.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码段中，我们将声明当活动被创建时会发生什么，并设置所有必要的函数以使应用程序逻辑连接到布局文件。
- en: In the `onCreate()` method, we will also be initializing the `SensorManager`
    class, which will be needed to get access to the system's service.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreate()`方法中，我们还将初始化`SensorManager`类，这将需要我们访问系统的服务。
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `onStart()` method, we will use the `SensorManager` class to register
    the type of sensor that we will be using. In this case, we will be using the orientation
    sensors and setting `SENSOR_DELAY_NORMAL`, which we will need to modify later
    on so as to ensure that there is enough delay between each call. In the `onStart()`
    method, we will also be initializing the Bluetooth adapter to start listening
    for devices:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onStart()`方法中，我们将使用`SensorManager`类来注册我们将要使用的传感器类型。在这种情况下，我们将使用定向传感器，并设置`SENSOR_DELAY_NORMAL`，我们稍后需要修改它以确保每次调用之间有足够的延迟。在`onStart()`方法中，我们还将初始化蓝牙适配器以开始监听设备。
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'It''s always important to unregister the sensor listener and disconnect the
    BLE connection when the app is closed so as to prevent the battery drain and device
    memory resources:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用关闭时，始终重要的是注销传感器监听器并断开BLE连接，以防止电池耗尽和设备内存资源。
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following code will deal with all the `Sensor` methods that need to be
    implemented in order to ensure there is enough delay between each sensor reading
    and to send the necessary commands to the Bluetooth-enabled Arduino for the servo
    motor to rotate the shaft according to the *x*-axis of the device:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将处理所有需要实现的`Sensor`方法，以确保每次传感器读取之间有足够的延迟，并向蓝牙启用的Arduino发送必要的命令，以便伺服电机根据设备的*x*轴旋转轴。
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following code will ensure that the commands that are sent to the BLE module
    are shown in the Bluetooth text output on our user interface layout:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将确保发送到BLE模块的命令显示在我们的用户界面布局的蓝牙文本输出中。
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once you''ve written all the code, which you can easily follow along on our
    GitHub repository, available at [https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter6](https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter6),
    make sure that you have a physical device that is running Android 4.3 or higher
    and Bluetooth switched on. Once you build the project, you should see something
    similar to the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你编写了所有代码，你可以在我们的GitHub仓库中轻松地跟随，该仓库位于[https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter6](https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter6)，请确保你有一个运行安卓4.3或更高版本并且蓝牙已开启的物理设备。一旦构建了项目，你应该会看到以下截图类似的内容：
- en: '![Setting up the app''s internals](img/0389OS_06_04.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用内部结构](img/0389OS_06_04.jpg)'
- en: How to go further
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何更进一步
- en: Orientation readings from the Android app can be further visualized in the app
    with real-time graphs, and this project could be further advanced and integrated
    into a remote object control app where the Android smartphone's user can control
    an object that is connected to the servo motor from a specific distance.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 来自安卓应用的定向读取可以在应用中通过实时图表进一步可视化，并且这个项目可以进一步发展并集成到一个远程对象控制应用中，在这个应用中，安卓智能手机的用户可以从特定距离控制连接到伺服电机的对象。
- en: Simple yet useful application of such an action would be to open a gate or control
    a mobile robot via a gyroscope. Android smartphones also have a number of other
    sensors available for us, such as the accelerometer and magnetometer, which could
    effectively be used to control different components connected to the Arduino microcontroller.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这种动作的简单而实用的应用可以是打开大门或通过陀螺仪控制移动机器人。安卓智能手机还有许多其他传感器可供我们使用，例如加速度计和磁力计，这些传感器可以有效地用于控制连接到Arduino微控制器的不同组件。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, we learned how to take advantage of one of the most
    important sensors on the Android phone, the gyroscope sensor, to be able to control
    the Arduino-controlled servo motor. We achieve this communication and action via
    the BLE capabilities of the Arduino equipped with the Adafruit BLE module and
    the possibilities of the Android operating system running 4.3 or higher.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何利用安卓手机上最重要的传感器之一——陀螺仪传感器，以便能够控制Arduino控制的伺服电机。我们通过Arduino配备Adafruit
    BLE模块和运行4.3或更高版本的安卓操作系统的可能性来实现这种通信和动作。
- en: This chapter also provides the foundation steps to the following chapter, which
    will access one of the Android device's most important hardwares.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还为本章之后的内容提供了基础步骤，后者将访问安卓设备最重要的硬件之一。
