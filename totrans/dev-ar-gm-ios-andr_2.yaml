- en: Chapter 2. Setting Up the Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will go over setting up the environment we need for augmented
    reality, and also deploy our first working augmented reality app. We will get
    a feel for how the end products feel and how to deploy them. The chapter will
    lightly touch areas such as Unity platform settings and Vuforia prefabs. The chapter,
    however, will not cover iOS Apple provisioning and Xcode management since they
    are outside the scope of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Unity 3D
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process of downloading and installing Unity on Mac OS X is quite simple.
    Simply by going to its website and downloading the free trial version of iOS and
    Android, we can get most of Unity''s power instantly for free for a limited time.
    To download, use the following link: [http://unity3d.com/unity/download/](http://unity3d.com/unity/download/).
    Notice that iOS can only be deployed on Mac OS X.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the Unity website with free trial:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading and installing Unity 3D](img/0032_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once Unity is downloaded, installation is quite straightforward. We can choose
    the trial version to try out Unity Pro with increased features. The free version
    will still allow us to deploy to both Android and iOS, but Pro features includes
    shaders and playing video files. For more information on what is included in the
    Pro version, check Unity's website.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Vuforia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vuforia made a lot of effort to simplify the installation process of the SDK
    and streamline its workflow so as not to be intimidating to new developers. We
    will go over the process of installing Vuforia SDK on Mac OS X in preparation
    of deploying our first augmented reality app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vuforia offers a number of different SDK versions that might seem confusing
    at first; so we will go over them:'
  prefs: []
  type: TYPE_NORMAL
- en: Android native SDK which is to be used with Eclipse and Ant to deploy on android
    devices, without the need for Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS native SDK that is used to deploy on iOS devices using Xcode without the
    need for Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity extension for Android and iOS that is used to deploy on either Android
    or iOS using Unity's cross-platform capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What we will cover in the book is Vuforia Unity''s extension. To download it,
    please go to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.vuforia.com/resources/sdk/unity](https://developer.vuforia.com/resources/sdk/unity)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a simple registration process before being able to download the SDKs.
    The following screenshot shows Vuforia SDK Unity extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading and installing Vuforia](img/0032_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The download file is a Unity package file that, as we will see soon, is very
    easy to add to a Unity project. There are no further files needed for the SDK.
    With this, we have everything we need to start developing AR apps on iOS. Unity,
    the game engine that will facilitate rendering of 3D objects and game logic for
    us, Vuforia will provide the augmented reality components and Xcode will finally
    deploy the app on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia sample projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vuforia offers a rather colorful sample project for every SDK version they have
    for users to see how the SDK can be used. We will utilize those sample projects
    to be an entry point for us to see how the structure of a finished Vuforia project
    looks and how to deploy it on iOS and Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia offers their sample projects as a package. This package contains a number
    of applications for Vuforia SDK, but we will focus on Image Target in this book.
    Let's download the sample projects from the following link [https://developer.vuforia.com/resources/sample-apps](https://developer.vuforia.com/resources/sample-apps).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows Vuforia sample apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vuforia sample projects](img/032_2_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After downloading the compressed project samples, decompress the folder and
    take a look inside it. The folder will contain a number of files called packages.
    Those are essentially Unity files that can be imported inside unity projects with
    ease.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a Unity project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have downloaded everything that we need, it's time to start a Unity
    project. Launch Unity, and from the **File** menu, select a new project. Place
    the project anywhere you would like, but make sure the project name does not have
    any spaces to avoid later problems. You will be greeted with the Unity's project
    window. It may seem intimidating a little and feels foreign if this is the first
    time with a game engine, but we will familiarize ourselves with it as we build
    our project. The following screenshot shows the Unity project window.
  prefs: []
  type: TYPE_NORMAL
- en: Unity scenes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows Unity scenes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Unity scenes](img/032_2_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first concept we will familiarize ourselves with is the scene. The scene
    is primarily the game level that everything is built inside. It is what is loaded
    and presented to the user on runtime. It contains all of the game objects such
    as menus and 3D models. It is the world that we are creating for the user. We
    can have multiple scenes just as a game has multiple levels.
  prefs: []
  type: TYPE_NORMAL
- en: The **Hierarchy** (**Scene Hierarchy)** as shown in the preceding screenshot
    represents the objects in the scene and their relationship between each other.
    For example, a cube object could be the parent of a sphere object; that way whenever
    the cube object moves, the sphere object will follow it. This is particularly
    useful for constructing complex objects such as a car, for example, and has the
    car parts move with the parent rather than individually. This concept is really
    important and fundamental to how Vuforia works in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: The **Game** (**Game Render**) window is a rather useful tool in Unity. It gives
    a preview of how the game works and looks without the need for deployment, saving
    a lot of time. Any changes in script or in **Scene** (**Scene Editor**) will show
    right away when the play button at the top is clicked and the game "runs". This
    will allow us to see how the augmented reality experience plays out without having
    to deploy on the device first.
  prefs: []
  type: TYPE_NORMAL
- en: The **Project** (**Project assets**) panel is where all of the project assets
    are. This is where models and textures are imported to the project and even Vuforia
    SDK. This is also where all the scripts are stored for the app. It is always crucial
    to keep the assets folder organized and following a certain convention. Projects
    can grow bigger and keeping track of where assets are can prove very difficult
    if a project assets hierarchy is not followed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Inspector** (**Inspector panel**) is where components and assets are tweaked.
    It displays all the settings for the currently selected scene object from the
    project hierarchy or assets from the **Project** (**Project assets**) panel. The
    inspector is a versatile tool that is used extensively while building a project.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that Unity's GUI has been demystified, we can take a look at the sample
    projects folder we have downloaded from Vuforia. It will contain a number of package
    files with the name of the project they represent. Package files are very important
    for Unity. The need to transfer assets from one project to another is not uncommon
    in game development. Often projects share common assets between them, so Unity
    needed an efficient way of transferring assets between projects. That's why Unity
    package files came to be.
  prefs: []
  type: TYPE_NORMAL
- en: In Unity, it is possible to select certain files from the asset store, and even
    entire scenes, to be exported as a package file. Sometimes the entire project
    can be exported as a package file. Later that file can be imported into a Unity
    project and become usable right away.
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia sample projects are in the form of Unity packages, which must be imported
    into a Unity project to be able to deploy those projects. It is useful to mention
    that even Vuforia's SDK is offered in the form of a Unity package that can be
    imported into any project and can utilize its AR components.
  prefs: []
  type: TYPE_NORMAL
- en: Importing packages in Unity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we import the sample project into the Unity project that we have created.
    The following screenshot shows Unity importing `ImageTarget` sample project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing packages in Unity](img/032_2_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Importing packages is quite a simple process. Go to the **Assets** menu on the
    top and choose import packaged, and then choose the custom package. Navigate to
    where Vuforia's sample projects are and choose the image target file. A window
    like the previous screenshot will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This window is quite important because it displays information on what is being
    imported into the project. We can select which files we want to import and which
    ones we don''t. It also displays if the file is new, as in not already in the
    project, or old, meaning it''s already in our **Assets** folder and is being updated.
    For now we need all the files from the package file, so go ahead and click on
    **Import**. The following screenshot shows Unity project after importing `ImageTarget`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing packages in Unity](img/032_2_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that a lot of files have been imported into our **Assets** folder,
    including a **Qualcomm Augmented Reality** folder that is the Vuforia SDK. This
    is everything we need for a deployable project, but the scene hierarchy still
    only contains a **Main Camera** object and the **Game** panel is still quite blue.
    This is because we have loaded the assets but not the scene file yet.
  prefs: []
  type: TYPE_NORMAL
- en: Unity scene files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scene files are essentially how Unity stores the scene hierarchy and composition.
    Scene files hold the world created in the editor with all its details. This is
    useful for loading different scene files at different times and creating multiple
    worlds, related or unrelated, in the same app. This is how Unity handles multiple
    game levels and areas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now to select the project''s scene files that Qualcomm already created for
    us, we can go to the **Scenes** folder in the project files and double-click on
    the file named **Vuforia-4-ImageTargets**. The following screenshot shows the
    **Vuforia-4-ImageTargets** scene active:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Unity scene files](img/032_2_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now Unity project view looks much more lively. There are rendered 3D teapots
    already visible in the **Game** panel, and the **Hierarchy** panel displays the
    components of the scene. Chances are the **Scene** editor still looks empty as
    in the preceding figure; we will see now how to navigate to the **Scene** editor
    view to move around the world created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to focus on one of the objects we have in
    our scene to be our origin point. We can do that by selecting the first image
    target object from the **Hierarchy** panel, which is **ImageTargetChips**, then
    place the mouse pointer over the scene panel and press the keyboard button *F*.
    This will zoom over the object and have it as the origin point for the editor
    view. It is important to have the mouse pointer over the **Scene** panel, otherwise
    the zoom will not happen over the object. The following screenshot shows the selected
    object in focus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Unity scene files](img/032_2_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that the object is in focus, we can have the editor camera orbit around
    it to view the scene in game. We can do that by holding the *Alt* key and dragging
    over the scene to position the editor camera anywhere we like. We can also use
    the mouse wheel to zoom in and out of the object in focus.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the scene is made up of three different teapots lying over a
    plane with an image over it. This is the AR scene that is in the sample project,
    which will display one of the teapots depending on the image target detected by
    `ARCamera`. The scaling and the transformation of the object will match that currently
    visible in the **Scene** editor in relation to the image target the teapot is
    on. This makes visualizing how the AR experience will play out very easy while
    building it.
  prefs: []
  type: TYPE_NORMAL
- en: Trackable files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the project folder, we will find the trackable images used in this project.
    We will need to have them printed in order to test the AR experience. To reach
    them, navigate to **Assets** | **Editor** | **QCAR** | **ImageTargetEditor**.
    Inside there will be two folders with the three images used in the scene. To open
    them right-click on the image and select **Reveal in Finder** to open the file
    in Mac OS X finder. The following screenshot shows the target image location in
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Trackable files](img/032_2_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When printing the images, make sure that they fill the entire page to have the
    best result with the AR experience.
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia has a handy feature that allows us to view the AR experience without
    the need to deploy first. This is achieved by having a web cam on the PC in use
    and Unity utilizes the information from the webcam to display how the experience
    will play out in the Game panel. This is indispensable for debugging AR projects
    without wasting time on deployment cycles.
  prefs: []
  type: TYPE_NORMAL
- en: 'To utilize this feature, simply click on the **Play Button** at the top of
    the Unity project window. The following screenshot shows live camera feed AR:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Trackable files](img/032_2_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By having the target image in front of the camera, Vuforia will recognize the
    trackable and then position the `ARCamera` object relative to the target image
    and render the 3D content. If we click on the **ARCamera** component from the
    **Hierarchy** panel, we can see the ARCamera moving dynamically and relative to
    the target as we move the target image in front of the web cam.
  prefs: []
  type: TYPE_NORMAL
- en: The **ARCamera** is practically the window through which the user can view the
    world we create inside Unity. By moving the camera relative to the target image,
    we can effectively simulate that the teapot is part of the real world.
  prefs: []
  type: TYPE_NORMAL
- en: Try different targets to see how they respond differently by displaying the
    different teapots.
  prefs: []
  type: TYPE_NORMAL
- en: When we opened the **Scenes** folder, we found more than one scene. We only
    chose the **Main Scene**, but now it's time to understand what the other scenes
    are there for.
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Scene** folder again from the **Assets** folder. The four scenes
    are named as follows
  prefs: []
  type: TYPE_NORMAL
- en: '`Vuforia-1-SplashScreen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Vuforia-2-AboutScreen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Vuforia-3-LoadingScene`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Vuforia-4-ImageTargets`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps are rarely made of one scene; usually they are a collection of scenes that
    play out in a certain succession. For this sample project, the app is made using
    four scenes. The first scene to appear to the user is the `SplashScreen` scene.
    The splash screen will only do what the name suggests; it will display a splash
    screen for the user for two seconds, then it will automatically load the next
    scene that is `AboutScreen`.
  prefs: []
  type: TYPE_NORMAL
- en: The `AboutScreen` scene will display an about screen about the app. It will
    have a button to dismiss the about screen and load the next scene, which is `LoadingScene`.
  prefs: []
  type: TYPE_NORMAL
- en: The loading scene does one simple task, which is to load the main scene, `ImageTarget`,
    in the background and display an animated spinner to indicate loading. This is
    always a good idea when loading a large scene. Without it, the app seems to freeze
    for a few seconds while loading the next scene; this might let the user think
    the app crashed or is unresponsive.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the succession of the four scenes makes up the entire app experience.
    Feel free to open any of the scene files and click on the play button to see how
    they act individually. But if we do that, we will notice that the scenes do not
    load any scene behind it when the action is done; that is because we have not
    told Unity what scene files to load when the app starts. Right now if we deploy,
    we will only get a blue screen on the device because no scenes are loaded at all.
  prefs: []
  type: TYPE_NORMAL
- en: Build settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To mark the scenes to be loaded with the app, we have to access the build settings
    window. To do this, navigate to **File** | **Build Settings**. The following screenshot
    shows the **Build Settings** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Build settings](img/032_2_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Build Settings** window is a very important one in Unity. From it, we
    can control what platform we are deploying for, what scenes to include in the
    deployment, the platform-specific settings, and even deploy on the platform from
    there.
  prefs: []
  type: TYPE_NORMAL
- en: The top box in the windows is where scenes are marked to be included in the
    app. Any scene the app will ever use must be added to this in the **Build Settings**
    window to work on the platform. We will add our scenes now, but first make sure
    that the box doesn't have any scenes in it. Scenes sometimes are added automatically
    if there were no scenes designated. Unity does that to avoid deploying the build
    with no scenes at all. To delete any scene, click on it and press backspace on
    the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: It is very important to know that the first scene in the window will be the
    first scene the app will open up to. This is very important to have right, or
    the flow of the app will be wrong. In our case, the `SplashScreen` scene is the
    first one. It loads the about screen after it. That mean we need to add the `SplashScreen`
    scene first to have the app open up to; the order of the scenes after it is not
    important since loading is done with the name of the scene in our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the scenes, simply drag the scene file from the scene folder to the
    window. Make sure you add the `SplashScreen` scene before adding any other scene.
    Add all the four scenes. The following screenshot shows **Build Settings**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Build settings](img/032_2_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice the numbers next to the scenes in build; they are numerical representation
    of the scenes that can be used to load the scenes instead of their name. The number
    **0** represents the first scene that the app will load automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying for Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be deploying to Android in this section; if for any reason you choose
    to not deploy on this platform, you can skip over to the next section that handles
    iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have all the scenes added to the scenes in build, we move on to
    other settings in preparation for the deployment. Under the **Scenes in Build**
    window, there is an intriguing box with the name **Platform** that has a colorful
    collection of well-known platform. These are the platforms that Unity can deploy
    the project to. Some of them will be grayed out if we do not own the license to
    deploy to them from Unity. By default, the PC, Mac, and Linux standalone platform
    is selected. This obviously is not our target platform so we go ahead and change
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Choose the **Android** platform, and then click on the **Switch Platform** button
    in the bottom-left corner. This will start the process of automatically converting
    all the assets to suit the new platform we just picked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Unity has finished processing the assets, click on the **Player Settings...**
    button. In the **Inspector** panel, we will find something similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying for Android](img/032_2_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PlayerSettings** reveals the target platform-specific settings, for example,
    the app name, splash screen, icons, and so on. It is important to customize the
    settings correctly for every platform we are deploying to, to achieve better results.'
  prefs: []
  type: TYPE_NORMAL
- en: Change the app name in the **Product Name** field to `Image Target`. We will
    not customize the icons and splash images right now, though it is important to
    know that you can do so from here.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most important settings that are particularly hidden in the panel
    is the app **Identification** field. We know that is important for an app to maintain
    its identity on the market and it is important to remember to set it correctly.
    To reach that setting, click on **Other Settings** as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying for Android](img/032_2_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Change the **Bundle Identifier** to something suitable to the app. Notice that
    the other settings all handle very low-level settings regarding the platform,
    such as API level and what OpenGL to use. We can leave it at the default for now
    and it will work on most devices, but it pays off to know where to reach those
    settings in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we know, Android apps are deployed using keystores. Unity makes the process
    of creating one a little easier. To reach keystore settings, click on **Puslishing
    Settings** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying for Android](img/032_2_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now select **Create New Keystore**, and then enter any password in the two fields
    as shown in the preceding screenshot. This will tell Unity to create a new keystore
    for us and use it when deploying. It is important to note that Unity will not
    store our password for us; if we are to restart Unity, we will have to re-enter
    the password here or build will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Now that everything is in place, we only need to click on **Build And Run**
    to deploy the app. It will ask us where to save the APK; anywhere would be fine.
    The app will be deployed to the Android device connected using USB to the machine,
    so we need to make sure it is properly connected.
  prefs: []
  type: TYPE_NORMAL
- en: If Unity failed to recognize the android device connected, make sure that the
    USB drivers for the specific device are correctly installed. They can be found
    on the manufacturer's website.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying for iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choose the iOS platform, and then click on the **Switch Platform** button at
    the bottom-left corner. You will notice Unity re-building and re-importing certain
    assets. This process is to match compression schemes and settings for the target
    platform. This is an automatic process that Unity handles very well on its own.
  prefs: []
  type: TYPE_NORMAL
- en: 'After Unity has finished importing all the assets again, its time to continue
    adjusting our settings to build the project on the device. At the bottom, there
    is a button named **Player Settings...**. Click on this button to get something
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying for iOS](img/032_2_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As with Android, **PlayerSettings** is where all the platform-specific settings
    you would expect are. It will include anything specific to iOS now that we have
    switched to the iOS platform.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's change the app name. In **Product Name**, change it to `Image Target`.
    We will leave the default icon and splash screen for now. For now we adjust the
    **Resolution and Presentation** settings. Click on the **Resolution and Presentation**
    bar to expand the settings area.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Default Orientation** section, choose from the drop-down box the **Auto
    Rotation** option. It will expand a list of checkboxes below it. Uncheck the first
    one which is **Use Animated Autorotation**. The following screenshot shows the
    **Resolution and Presentation** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying for iOS](img/032_2_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Resolution and Presentation** settings handle the presentation of the app
    to the user. It has options such as supported device orientations and status bar
    visibility. We just enabled the auto rotation option for the app. We also disabled
    **Use Animated Autorotation** because it never looks ok for AR experiences. It
    is usually disorienting for the user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now what is left for us to do is set the bundle identifier for the app. Apple
    developer provisions are issued per app identifier, which follows this structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`com.Company.ProductName`'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your Xcode managed provision company name, you need to input yours
    in Unity settings for deploying through Xcode works.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reach the bundle identifier settings, click on the other bar at the very
    button of the **Inspector** area, and change the **Bundle Identifier** with a
    proper one that Xcode will accept. The following screenshot shows **Bundle Identifier**
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying for iOS](img/032_2_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have gone through all the settings needed, it is time to deploy
    the app to the device. The process of deployment is very simple thanks to Unity's
    strong cross-platform capability. The process is mostly automatic and requires
    little to no interference from the developer.
  prefs: []
  type: TYPE_NORMAL
- en: First, connect the device to the PC. Now we click on the **Build and Run** button,
    in the **Build Settings** window, on the bottom-right. It will ask you where you
    want to have the build folder located; it is ok to just locate it inside the **Unity**
    project folder, but not inside the **Assets** folder. Give it any name you would
    like; it's a good convention though to name it like the **Unity** project folder
    name.
  prefs: []
  type: TYPE_NORMAL
- en: Unity will start an automated process of building the project for iOS. It will
    also open Xcode automatically. Try not to interfere with the process till the
    very end. The process of opening Xcode from Unity is done using a script, witch
    switches the focused window and executes certain steps on Xcode. So it is preferable
    to let Unity take control of your PC till it's done and not switch focus to any
    other window.
  prefs: []
  type: TYPE_NORMAL
- en: After Xcode has finished copying the app to the device, we should find a perfectly
    working AR app on our devices. The app will work exactly as we would expect it
    to, and displays how powerful the Unity and Vuforia combo is.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows **About** screen of the Image Target app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying for iOS](img/032_2_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that when Unity is deploying to Xcode, it will automatically switch between
    open windows and execute a number of scripts on Xcode. This is why we need to
    let Unity do its routine and let it have control of the desktop till it starts
    building. If we forcefully prevent it from switching to Xcode automatically, it
    will interrupt automatic building. Note that it can be resumed manually after
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have gone through the process of setting up our environment.
    We installed both Unity and Vuforia. We were introduced to Unity's GUI and started
    a new project. We imported Vuforia 's sample app and saw how to deploy it to our
    devices. While doing that, we were introduced to many Unity settings that relate
    to app deployment and also some basic features of Vuforia.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we are familiar with the process of deployment and how the final
    products look. We have set up our environment to be able to build AR apps using
    Vuforia and Unity, and have seen how easy it is to deploy on the target device.
    We were introduced to simple settings for the Unity environment, and paved the
    way for a more in-depth look at how to build our own scenes and our own AR experiences.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start to familiarize ourselves more with Vuforia
    and how to start a project from scratch.
  prefs: []
  type: TYPE_NORMAL
