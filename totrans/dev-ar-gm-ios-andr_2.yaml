- en: Chapter 2. Setting Up the Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 设置环境
- en: In this chapter, we will go over setting up the environment we need for augmented
    reality, and also deploy our first working augmented reality app. We will get
    a feel for how the end products feel and how to deploy them. The chapter will
    lightly touch areas such as Unity platform settings and Vuforia prefabs. The chapter,
    however, will not cover iOS Apple provisioning and Xcode management since they
    are outside the scope of the book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍设置增强现实所需的环境，并部署我们的第一个工作增强现实应用。我们将了解最终产品的感觉以及如何部署它们。本章将简要介绍 Unity 平台设置和
    Vuforia 预制件。然而，本章不会涵盖 iOS Apple 配置和 Xcode 管理，因为它们超出了本书的范围。
- en: Downloading and installing Unity 3D
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装 Unity 3D
- en: 'The process of downloading and installing Unity on Mac OS X is quite simple.
    Simply by going to its website and downloading the free trial version of iOS and
    Android, we can get most of Unity''s power instantly for free for a limited time.
    To download, use the following link: [http://unity3d.com/unity/download/](http://unity3d.com/unity/download/).
    Notice that iOS can only be deployed on Mac OS X.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上下载和安装 Unity 的过程相当简单。只需访问其网站，下载 iOS 和 Android 的免费试用版，我们就可以在有限的时间内免费获得
    Unity 大部分功能。要下载，请使用以下链接：[http://unity3d.com/unity/download/](http://unity3d.com/unity/download/)。请注意，iOS
    只能在 Mac OS X 上部署。
- en: 'The following image shows the Unity website with free trial:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了带有免费试用版的 Unity 网站：
- en: '![Downloading and installing Unity 3D](img/0032_02_1.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![下载和安装 Unity 3D](img/0032_02_1.jpg)'
- en: Once Unity is downloaded, installation is quite straightforward. We can choose
    the trial version to try out Unity Pro with increased features. The free version
    will still allow us to deploy to both Android and iOS, but Pro features includes
    shaders and playing video files. For more information on what is included in the
    Pro version, check Unity's website.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 Unity 后，安装过程相当直接。我们可以选择试用版来试用具有更多功能的 Unity Pro。免费版仍允许我们将应用部署到 Android 和 iOS，但
    Pro 版本包括着色器和播放视频文件。有关 Pro 版本包含内容的更多信息，请查看 Unity 网站。
- en: Downloading and installing Vuforia
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装 Vuforia
- en: Vuforia made a lot of effort to simplify the installation process of the SDK
    and streamline its workflow so as not to be intimidating to new developers. We
    will go over the process of installing Vuforia SDK on Mac OS X in preparation
    of deploying our first augmented reality app.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia 在简化 SDK 安装过程和简化其工作流程上做了很多努力，以便不会让新开发者感到害怕。我们将介绍在 Mac OS X 上安装 Vuforia
    SDK 的过程，为部署我们的第一个增强现实应用做准备。
- en: 'Vuforia offers a number of different SDK versions that might seem confusing
    at first; so we will go over them:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia 提供了多种不同的 SDK 版本，一开始可能会让人感到困惑；因此，我们将介绍它们：
- en: Android native SDK which is to be used with Eclipse and Ant to deploy on android
    devices, without the need for Unity
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 原生 SDK，用于与 Eclipse 和 Ant 一起部署在 Android 设备上，无需使用 Unity
- en: iOS native SDK that is used to deploy on iOS devices using Xcode without the
    need for Unity
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于在 iOS 设备上使用 Xcode 部署，无需使用 Unity 的 iOS 原生 SDK
- en: Unity extension for Android and iOS that is used to deploy on either Android
    or iOS using Unity's cross-platform capabilities
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于在 Android 或 iOS 上部署的 Unity 扩展，用于在 Android 或 iOS 上使用 Unity 的跨平台功能
- en: 'What we will cover in the book is Vuforia Unity''s extension. To download it,
    please go to the following link:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将涵盖 Vuforia Unity 的扩展。要下载它，请访问以下链接：
- en: '[https://developer.vuforia.com/resources/sdk/unity](https://developer.vuforia.com/resources/sdk/unity)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.vuforia.com/resources/sdk/unity](https://developer.vuforia.com/resources/sdk/unity)'
- en: 'There is a simple registration process before being able to download the SDKs.
    The following screenshot shows Vuforia SDK Unity extension:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载 SDK 之前，有一个简单的注册过程。以下截图显示了 Vuforia SDK Unity 扩展：
- en: '![Downloading and installing Vuforia](img/0032_02_2.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![下载和安装 Vuforia](img/0032_02_2.jpg)'
- en: The download file is a Unity package file that, as we will see soon, is very
    easy to add to a Unity project. There are no further files needed for the SDK.
    With this, we have everything we need to start developing AR apps on iOS. Unity,
    the game engine that will facilitate rendering of 3D objects and game logic for
    us, Vuforia will provide the augmented reality components and Xcode will finally
    deploy the app on the device.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件是一个 Unity 包文件，正如我们很快就会看到的，它非常容易添加到 Unity 项目中。SDK 不需要其他文件。有了这个，我们就有了开始开发
    iOS AR 应用所需的一切。Unity，这个将帮助我们渲染 3D 对象和游戏逻辑的游戏引擎，Vuforia 将提供增强现实组件，而 Xcode 将最终在设备上部署应用。
- en: Vuforia sample projects
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vuforia 示例项目
- en: Vuforia offers a rather colorful sample project for every SDK version they have
    for users to see how the SDK can be used. We will utilize those sample projects
    to be an entry point for us to see how the structure of a finished Vuforia project
    looks and how to deploy it on iOS and Android devices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia 为他们拥有的每个 SDK 版本提供了一个相当丰富多彩的示例项目，供用户了解 SDK 的使用方式。我们将利用这些示例项目作为我们了解一个完成的
    Vuforia 项目的结构和如何在 iOS 和 Android 设备上部署它的入门点。
- en: Vuforia offers their sample projects as a package. This package contains a number
    of applications for Vuforia SDK, but we will focus on Image Target in this book.
    Let's download the sample projects from the following link [https://developer.vuforia.com/resources/sample-apps](https://developer.vuforia.com/resources/sample-apps).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia 提供了他们的示例项目作为包。这个包包含了许多适用于 Vuforia SDK 的应用程序，但在这本书中我们将专注于图像目标。让我们从以下链接下载示例项目
    [https://developer.vuforia.com/resources/sample-apps](https://developer.vuforia.com/resources/sample-apps)。
- en: 'The following screenshot shows Vuforia sample apps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Vuforia 示例应用程序：
- en: '![Vuforia sample projects](img/032_2_3.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Vuforia sample projects](img/032_2_3.jpg)'
- en: After downloading the compressed project samples, decompress the folder and
    take a look inside it. The folder will contain a number of files called packages.
    Those are essentially Unity files that can be imported inside unity projects with
    ease.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载压缩的项目样本后，解压缩文件夹并查看其内容。文件夹将包含许多名为 packages 的文件。这些文件基本上是 Unity 文件，可以轻松导入到 Unity
    项目中。
- en: Starting a Unity project
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始一个 Unity 项目
- en: Now that we have downloaded everything that we need, it's time to start a Unity
    project. Launch Unity, and from the **File** menu, select a new project. Place
    the project anywhere you would like, but make sure the project name does not have
    any spaces to avoid later problems. You will be greeted with the Unity's project
    window. It may seem intimidating a little and feels foreign if this is the first
    time with a game engine, but we will familiarize ourselves with it as we build
    our project. The following screenshot shows the Unity project window.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经下载了所有需要的文件，是时候开始一个 Unity 项目了。启动 Unity，从 **文件** 菜单中选择一个新项目。将项目放置在任何你想要的位置，但确保项目名称中不包含任何空格，以避免以后出现问题。你将看到
    Unity 的项目窗口。这可能有点令人畏惧，如果你是第一次使用游戏引擎，可能会感觉有些陌生，但我们在构建项目的过程中会熟悉它。以下截图显示了 Unity 项目窗口。
- en: Unity scenes
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity 场景
- en: 'The following screenshot shows Unity scenes:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Unity 场景：
- en: '![Unity scenes](img/032_2_4.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Unity scenes](img/032_2_4.jpg)'
- en: The first concept we will familiarize ourselves with is the scene. The scene
    is primarily the game level that everything is built inside. It is what is loaded
    and presented to the user on runtime. It contains all of the game objects such
    as menus and 3D models. It is the world that we are creating for the user. We
    can have multiple scenes just as a game has multiple levels.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先熟悉的概念是场景。场景主要是游戏关卡，所有内容都是在这里构建的。它是运行时加载并呈现给用户的内容。它包含所有游戏对象，如菜单和 3D 模型。这是我们为用户创建的世界。我们可以有多个场景，就像游戏有多个关卡一样。
- en: The **Hierarchy** (**Scene Hierarchy)** as shown in the preceding screenshot
    represents the objects in the scene and their relationship between each other.
    For example, a cube object could be the parent of a sphere object; that way whenever
    the cube object moves, the sphere object will follow it. This is particularly
    useful for constructing complex objects such as a car, for example, and has the
    car parts move with the parent rather than individually. This concept is really
    important and fundamental to how Vuforia works in Unity.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如前截图所示，**层次结构**（**场景层次结构**）表示场景中的对象及其相互之间的关系。例如，一个立方体对象可以是球体对象的父对象；这样，当立方体对象移动时，球体对象将跟随它。这对于构建复杂对象，例如汽车，特别有用，并且汽车部件会随着父对象一起移动，而不是单独移动。这个概念对于
    Vuforia 在 Unity 中的工作方式非常重要和基本。
- en: The **Game** (**Game Render**) window is a rather useful tool in Unity. It gives
    a preview of how the game works and looks without the need for deployment, saving
    a lot of time. Any changes in script or in **Scene** (**Scene Editor**) will show
    right away when the play button at the top is clicked and the game "runs". This
    will allow us to see how the augmented reality experience plays out without having
    to deploy on the device first.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏**（**游戏渲染**）窗口是Unity中一个相当有用的工具。它提供了游戏工作方式和外观的预览，无需部署，节省了大量时间。当点击顶部的播放按钮并“运行”游戏时，任何脚本或**场景**（**场景编辑器**）中的更改都会立即显示。这允许我们在不首先在设备上部署的情况下看到增强现实体验是如何进行的。'
- en: The **Project** (**Project assets**) panel is where all of the project assets
    are. This is where models and textures are imported to the project and even Vuforia
    SDK. This is also where all the scripts are stored for the app. It is always crucial
    to keep the assets folder organized and following a certain convention. Projects
    can grow bigger and keeping track of where assets are can prove very difficult
    if a project assets hierarchy is not followed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目**（**项目资源**）面板是所有项目资源所在的地方。这是将模型和纹理导入到项目中，甚至导入Vuforia SDK的地方。这也是存储所有应用程序脚本的地方。始终保持资源文件夹的有序性和遵循一定的约定至关重要。如果项目资源层次结构没有遵循，项目可能会变得更大，跟踪资源的位置可能会非常困难。'
- en: '**Inspector** (**Inspector panel**) is where components and assets are tweaked.
    It displays all the settings for the currently selected scene object from the
    project hierarchy or assets from the **Project** (**Project assets**) panel. The
    inspector is a versatile tool that is used extensively while building a project.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查器**（**检查器面板**）是调整组件和资源的地方。它显示项目层次结构中当前选定的场景对象的所有设置或来自**项目**（**项目资源**）面板的资源。检查器是一个多功能的工具，在构建项目时被广泛使用。'
- en: Now that Unity's GUI has been demystified, we can take a look at the sample
    projects folder we have downloaded from Vuforia. It will contain a number of package
    files with the name of the project they represent. Package files are very important
    for Unity. The need to transfer assets from one project to another is not uncommon
    in game development. Often projects share common assets between them, so Unity
    needed an efficient way of transferring assets between projects. That's why Unity
    package files came to be.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Unity的GUI已经不再神秘，我们可以查看从Vuforia下载的示例项目文件夹。它将包含代表项目的多个包文件。包文件对于Unity来说非常重要。在游戏开发中，从一个项目传输资源到另一个项目的情况并不少见。通常，项目之间会共享公共资源，因此Unity需要一种高效的方法来在项目之间传输资源。这就是为什么Unity包文件应运而生。
- en: In Unity, it is possible to select certain files from the asset store, and even
    entire scenes, to be exported as a package file. Sometimes the entire project
    can be exported as a package file. Later that file can be imported into a Unity
    project and become usable right away.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，可以选择从资源商店中选取某些文件，甚至整个场景，将其导出为包文件。有时整个项目也可以导出为包文件。稍后，该文件可以被导入到Unity项目中并立即使用。
- en: Vuforia sample projects are in the form of Unity packages, which must be imported
    into a Unity project to be able to deploy those projects. It is useful to mention
    that even Vuforia's SDK is offered in the form of a Unity package that can be
    imported into any project and can utilize its AR components.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia示例项目以Unity包的形式存在，必须导入到Unity项目中才能部署这些项目。值得一提的是，Vuforia的SDK也以Unity包的形式提供，可以导入到任何项目中并利用其AR组件。
- en: Importing packages in Unity
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity中导入包
- en: 'Now we import the sample project into the Unity project that we have created.
    The following screenshot shows Unity importing `ImageTarget` sample project:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将示例项目导入到我们创建的Unity项目中。以下截图显示了Unity导入`ImageTarget`示例项目：
- en: '![Importing packages in Unity](img/032_2_5.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Unity中导入包](img/032_2_5.jpg)'
- en: Importing packages is quite a simple process. Go to the **Assets** menu on the
    top and choose import packaged, and then choose the custom package. Navigate to
    where Vuforia's sample projects are and choose the image target file. A window
    like the previous screenshot will be displayed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 导入包是一个相当简单的过程。前往顶部的**资产**菜单，选择导入包，然后选择自定义包。导航到Vuforia的示例项目所在位置，选择图像目标文件。将显示一个类似于之前截图的窗口。
- en: 'This window is quite important because it displays information on what is being
    imported into the project. We can select which files we want to import and which
    ones we don''t. It also displays if the file is new, as in not already in the
    project, or old, meaning it''s already in our **Assets** folder and is being updated.
    For now we need all the files from the package file, so go ahead and click on
    **Import**. The following screenshot shows Unity project after importing `ImageTarget`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口非常重要，因为它显示了正在导入到项目中的信息。我们可以选择我们想要导入的文件和不想导入的文件。它还会显示文件是否是新的，即尚未在项目中，或者旧的，意味着它已经在我们的**资产**文件夹中并且正在更新。目前我们需要包文件中的所有文件，所以请继续点击**导入**。以下截图显示了导入`ImageTarget`后的Unity项目：
- en: '![Importing packages in Unity](img/032_2_6.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![在Unity中导入包](img/032_2_6.jpg)'
- en: We can see that a lot of files have been imported into our **Assets** folder,
    including a **Qualcomm Augmented Reality** folder that is the Vuforia SDK. This
    is everything we need for a deployable project, but the scene hierarchy still
    only contains a **Main Camera** object and the **Game** panel is still quite blue.
    This is because we have loaded the assets but not the scene file yet.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，许多文件已经导入到我们的**资产**文件夹中，包括一个**高通增强现实**文件夹，这是Vuforia SDK。这是我们需要的所有可部署项目的文件，但场景层次结构仍然只包含一个**主相机**对象，而**游戏**面板仍然相当蓝色。这是因为我们已经加载了资产，但还没有加载场景文件。
- en: Unity scene files
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unity场景文件
- en: Scene files are essentially how Unity stores the scene hierarchy and composition.
    Scene files hold the world created in the editor with all its details. This is
    useful for loading different scene files at different times and creating multiple
    worlds, related or unrelated, in the same app. This is how Unity handles multiple
    game levels and areas.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 场景文件基本上是Unity存储场景层次结构和组合的方式。场景文件包含了编辑器中创建的世界及其所有细节。这在加载不同时间点的不同场景文件以及在同一应用程序中创建多个相关或不相关的世界时非常有用。这就是Unity处理多个游戏关卡和区域的方式。
- en: 'Now to select the project''s scene files that Qualcomm already created for
    us, we can go to the **Scenes** folder in the project files and double-click on
    the file named **Vuforia-4-ImageTargets**. The following screenshot shows the
    **Vuforia-4-ImageTargets** scene active:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要选择高通为我们创建的项目场景文件，我们可以转到项目文件中的**场景**文件夹，并双击名为**Vuforia-4-ImageTargets**的文件。以下截图显示了**Vuforia-4-ImageTargets**场景处于活动状态：
- en: '![Unity scene files](img/032_2_7.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Unity场景文件](img/032_2_7.jpg)'
- en: Now Unity project view looks much more lively. There are rendered 3D teapots
    already visible in the **Game** panel, and the **Hierarchy** panel displays the
    components of the scene. Chances are the **Scene** editor still looks empty as
    in the preceding figure; we will see now how to navigate to the **Scene** editor
    view to move around the world created.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Unity项目视图看起来更加生动。在**游戏**面板中已经可以看到渲染好的3D茶壶，而**层次**面板显示了场景的组件。很可能会发现**场景**编辑器仍然看起来像前面的图示那样空空如也；我们现在将看到如何导航到**场景**编辑器视图来在世界中移动。
- en: 'The first thing we need to do is to focus on one of the objects we have in
    our scene to be our origin point. We can do that by selecting the first image
    target object from the **Hierarchy** panel, which is **ImageTargetChips**, then
    place the mouse pointer over the scene panel and press the keyboard button *F*.
    This will zoom over the object and have it as the origin point for the editor
    view. It is important to have the mouse pointer over the **Scene** panel, otherwise
    the zoom will not happen over the object. The following screenshot shows the selected
    object in focus:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是关注场景中我们拥有的一个对象，将其作为原点。我们可以通过从**层次**面板中选择第一个图像目标对象来实现，即**ImageTargetChips**，然后将鼠标指针放在场景面板上并按下键盘上的*F*键。这将放大对象，使其成为编辑器视图的原点。重要的是要将鼠标指针放在**场景**面板上，否则缩放不会在对象上发生。以下截图显示了选中的对象：
- en: '![Unity scene files](img/032_2_8.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![Unity场景文件](img/032_2_8.jpg)'
- en: Now that the object is in focus, we can have the editor camera orbit around
    it to view the scene in game. We can do that by holding the *Alt* key and dragging
    over the scene to position the editor camera anywhere we like. We can also use
    the mouse wheel to zoom in and out of the object in focus.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对象已经聚焦，我们可以让编辑器相机围绕它旋转以在游戏中查看场景。我们可以通过按住*Alt*键并在场景上拖动来定位编辑器相机到任何我们想要的位置。我们还可以使用鼠标滚轮来放大和缩小聚焦的对象。
- en: As we can see, the scene is made up of three different teapots lying over a
    plane with an image over it. This is the AR scene that is in the sample project,
    which will display one of the teapots depending on the image target detected by
    `ARCamera`. The scaling and the transformation of the object will match that currently
    visible in the **Scene** editor in relation to the image target the teapot is
    on. This makes visualizing how the AR experience will play out very easy while
    building it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，场景由三个不同的茶壶组成，它们位于一个带有图像的平面上。这是样本项目中的AR场景，它将根据`ARCamera`检测到的图像目标显示其中一个茶壶。对象的缩放和变换将与**场景**编辑器中相对于茶壶所在图像目标当前可见的变换相匹配。这使得在构建过程中可视化AR体验的播放方式变得非常容易。
- en: Trackable files
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可追踪文件
- en: 'In the project folder, we will find the trackable images used in this project.
    We will need to have them printed in order to test the AR experience. To reach
    them, navigate to **Assets** | **Editor** | **QCAR** | **ImageTargetEditor**.
    Inside there will be two folders with the three images used in the scene. To open
    them right-click on the image and select **Reveal in Finder** to open the file
    in Mac OS X finder. The following screenshot shows the target image location in
    the project:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中，我们将找到本项目中使用的可追踪图像。我们需要将它们打印出来以测试AR体验。要访问它们，导航到**资产** | **编辑器** | **QCAR**
    | **ImageTargetEditor**。在里面将有两个文件夹，包含场景中使用的三个图像。要打开它们，在图像上右键单击并选择**在Finder中显示**以在Mac
    OS X Finder中打开文件。以下截图显示了项目中的目标图像位置：
- en: '![Trackable files](img/032_2_9.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![可追踪文件](img/032_2_9.jpg)'
- en: When printing the images, make sure that they fill the entire page to have the
    best result with the AR experience.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在打印图像时，确保它们填满整个页面，以获得最佳的AR体验效果。
- en: Vuforia has a handy feature that allows us to view the AR experience without
    the need to deploy first. This is achieved by having a web cam on the PC in use
    and Unity utilizes the information from the webcam to display how the experience
    will play out in the Game panel. This is indispensable for debugging AR projects
    without wasting time on deployment cycles.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia有一个方便的功能，允许我们在不首先部署的情况下查看AR体验。这是通过在使用的PC上放置一个摄像头，Unity利用摄像头的信息在游戏面板中显示体验的播放方式来实现的。这对于在不浪费部署周期的时间的情况下调试AR项目来说是必不可少的。
- en: 'To utilize this feature, simply click on the **Play Button** at the top of
    the Unity project window. The following screenshot shows live camera feed AR:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用此功能，只需单击Unity项目窗口顶部的**播放按钮**。以下截图显示了实时摄像头流的AR：
- en: '![Trackable files](img/032_2_10.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![可追踪文件](img/032_2_10.jpg)'
- en: By having the target image in front of the camera, Vuforia will recognize the
    trackable and then position the `ARCamera` object relative to the target image
    and render the 3D content. If we click on the **ARCamera** component from the
    **Hierarchy** panel, we can see the ARCamera moving dynamically and relative to
    the target as we move the target image in front of the web cam.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将目标图像放在相机前，Vuforia将识别可追踪的图像，然后根据目标图像定位`ARCamera`对象并渲染3D内容。如果我们从**层次**面板中点击**ARCamera**组件，我们可以看到ARCamera随着目标图像在摄像头前移动而动态移动并相对于目标移动。
- en: The **ARCamera** is practically the window through which the user can view the
    world we create inside Unity. By moving the camera relative to the target image,
    we can effectively simulate that the teapot is part of the real world.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**ARCamera**实际上是通过用户可以查看我们在Unity内部创建的世界的窗口。通过将摄像头相对于目标图像移动，我们可以有效地模拟茶壶是真实世界的一部分。'
- en: Try different targets to see how they respond differently by displaying the
    different teapots.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试不同的目标，看看它们如何通过显示不同的茶壶以不同的方式响应。
- en: When we opened the **Scenes** folder, we found more than one scene. We only
    chose the **Main Scene**, but now it's time to understand what the other scenes
    are there for.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开**场景**文件夹时，我们发现有很多场景。我们只选择了**主场景**，但现在我们需要了解其他场景的用途。
- en: Open the **Scene** folder again from the **Assets** folder. The four scenes
    are named as follows
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 再次从**资产**文件夹中打开**场景**文件夹。这四个场景的命名如下
- en: '`Vuforia-1-SplashScreen`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Vuforia-1-SplashScreen`'
- en: '`Vuforia-2-AboutScreen`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Vuforia-2-AboutScreen`'
- en: '`Vuforia-3-LoadingScene`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Vuforia-3-LoadingScene`'
- en: '`Vuforia-4-ImageTargets`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Vuforia-4-ImageTargets`'
- en: Apps are rarely made of one scene; usually they are a collection of scenes that
    play out in a certain succession. For this sample project, the app is made using
    four scenes. The first scene to appear to the user is the `SplashScreen` scene.
    The splash screen will only do what the name suggests; it will display a splash
    screen for the user for two seconds, then it will automatically load the next
    scene that is `AboutScreen`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 应用很少只有一个场景；通常它们是一系列场景的集合。对于这个示例项目，应用使用了四个场景。首先出现在用户面前的场景是`SplashScreen`场景。启动屏幕只会做它名字所暗示的事情；它将为用户显示启动屏幕两秒钟，然后它会自动加载下一个场景，即`AboutScreen`。
- en: The `AboutScreen` scene will display an about screen about the app. It will
    have a button to dismiss the about screen and load the next scene, which is `LoadingScene`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`AboutScreen`场景将显示关于应用的屏幕。它将有一个按钮来关闭关于屏幕并加载下一个场景，即`LoadingScene`。'
- en: The loading scene does one simple task, which is to load the main scene, `ImageTarget`,
    in the background and display an animated spinner to indicate loading. This is
    always a good idea when loading a large scene. Without it, the app seems to freeze
    for a few seconds while loading the next scene; this might let the user think
    the app crashed or is unresponsive.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 加载场景执行一个简单的任务，即在后台加载主场景`ImageTarget`，并显示一个动画旋转器以指示正在加载。在加载大型场景时，这总是一个好主意。如果没有它，应用在加载下一个场景时似乎会冻结几秒钟；这可能会让用户认为应用崩溃或无响应。
- en: As we can see, the succession of the four scenes makes up the entire app experience.
    Feel free to open any of the scene files and click on the play button to see how
    they act individually. But if we do that, we will notice that the scenes do not
    load any scene behind it when the action is done; that is because we have not
    told Unity what scene files to load when the app starts. Right now if we deploy,
    we will only get a blue screen on the device because no scenes are loaded at all.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，四个场景的顺序构成了整个应用体验。您可以随意打开任何场景文件并点击播放按钮，以查看它们如何单独运行。但如果我们这样做，我们会注意到场景在动作完成后不会加载其后的任何场景；这是因为我们没有告诉Unity在应用启动时加载哪些场景文件。目前如果我们部署，设备上只会显示一个蓝色屏幕，因为没有加载任何场景。
- en: Build settings
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建设置
- en: 'To mark the scenes to be loaded with the app, we have to access the build settings
    window. To do this, navigate to **File** | **Build Settings**. The following screenshot
    shows the **Build Settings** window:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要标记应用中要加载的场景，我们需要访问构建设置窗口。为此，导航到**文件** | **构建设置**。以下截图显示了**构建设置**窗口：
- en: '![Build settings](img/032_2_11.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![构建设置](img/032_2_11.jpg)'
- en: The **Build Settings** window is a very important one in Unity. From it, we
    can control what platform we are deploying for, what scenes to include in the
    deployment, the platform-specific settings, and even deploy on the platform from
    there.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建设置**窗口在Unity中非常重要。从那里，我们可以控制我们正在部署的平台，要包含在部署中的场景，平台特定的设置，甚至可以直接从那里在平台上部署。'
- en: The top box in the windows is where scenes are marked to be included in the
    app. Any scene the app will ever use must be added to this in the **Build Settings**
    window to work on the platform. We will add our scenes now, but first make sure
    that the box doesn't have any scenes in it. Scenes sometimes are added automatically
    if there were no scenes designated. Unity does that to avoid deploying the build
    with no scenes at all. To delete any scene, click on it and press backspace on
    the keyboard.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口顶部的框是标记场景以包含在应用中的地方。应用将使用的任何场景都必须在**构建设置**窗口中添加，以便在平台上工作。我们现在将添加我们的场景，但首先确保框中没有场景。如果没有指定场景，场景有时会自动添加。Unity这样做是为了避免部署没有场景的构建。要删除任何场景，点击它并在键盘上按退格键。
- en: It is very important to know that the first scene in the window will be the
    first scene the app will open up to. This is very important to have right, or
    the flow of the app will be wrong. In our case, the `SplashScreen` scene is the
    first one. It loads the about screen after it. That mean we need to add the `SplashScreen`
    scene first to have the app open up to; the order of the scenes after it is not
    important since loading is done with the name of the scene in our project.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是要知道，窗口中的第一个场景将是应用首先打开的场景。这一点非常重要，否则应用流程将会出错。在我们的例子中，`SplashScreen`场景是第一个。它加载关于屏幕之后。这意味着我们需要首先添加`SplashScreen`场景，以便应用打开；之后场景的顺序并不重要，因为加载是通过项目中场景的名称来完成的。
- en: 'To add the scenes, simply drag the scene file from the scene folder to the
    window. Make sure you add the `SplashScreen` scene before adding any other scene.
    Add all the four scenes. The following screenshot shows **Build Settings**:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加场景，只需将场景文件从场景文件夹拖动到窗口中。确保在添加任何其他场景之前先添加`SplashScreen`场景。添加所有四个场景。以下截图显示了**构建设置**：
- en: '![Build settings](img/032_2_12.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![构建设置](img/032_2_12.jpg)'
- en: Notice the numbers next to the scenes in build; they are numerical representation
    of the scenes that can be used to load the scenes instead of their name. The number
    **0** represents the first scene that the app will load automatically.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意构建中场景旁边的数字；它们是场景的数值表示，可以用作加载场景而不是它们的名称。数字**0**代表应用将自动加载的第一个场景。
- en: Deploying for Android
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Android部署
- en: We will be deploying to Android in this section; if for any reason you choose
    to not deploy on this platform, you can skip over to the next section that handles
    iOS.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中为Android进行部署；如果出于任何原因您选择不在该平台上部署，您可以跳转到处理iOS的下一节。
- en: Now that we have all the scenes added to the scenes in build, we move on to
    other settings in preparation for the deployment. Under the **Scenes in Build**
    window, there is an intriguing box with the name **Platform** that has a colorful
    collection of well-known platform. These are the platforms that Unity can deploy
    the project to. Some of them will be grayed out if we do not own the license to
    deploy to them from Unity. By default, the PC, Mac, and Linux standalone platform
    is selected. This obviously is not our target platform so we go ahead and change
    that.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将所有场景添加到构建中的场景中，我们继续进行其他设置，为部署做准备。在**构建中的场景**窗口下，有一个名为**平台**的有趣框，里面收集了多种知名平台。这些是Unity可以部署项目的平台。如果我们没有从Unity部署到它们的许可证，其中一些将变为灰色。默认情况下，PC、Mac和Linux独立平台被选中。这显然不是我们的目标平台，所以我们继续更改它。
- en: Choose the **Android** platform, and then click on the **Switch Platform** button
    in the bottom-left corner. This will start the process of automatically converting
    all the assets to suit the new platform we just picked.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**Android**平台，然后点击左下角的**切换平台**按钮。这将启动自动将所有资产转换为适合我们刚刚选择的平台的进程。
- en: 'Once Unity has finished processing the assets, click on the **Player Settings...**
    button. In the **Inspector** panel, we will find something similar to the following
    screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Unity完成处理资产，点击**玩家设置...**按钮。在**检查器**面板中，我们将找到类似于以下截图的内容：
- en: '![Deploying for Android](img/032_2_13.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![为Android部署](img/032_2_13.jpg)'
- en: '**PlayerSettings** reveals the target platform-specific settings, for example,
    the app name, splash screen, icons, and so on. It is important to customize the
    settings correctly for every platform we are deploying to, to achieve better results.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**玩家设置**揭示了特定于目标平台的设置，例如应用名称、启动画面、图标等。为每个我们部署的平台正确自定义设置非常重要，以实现更好的结果。'
- en: Change the app name in the **Product Name** field to `Image Target`. We will
    not customize the icons and splash images right now, though it is important to
    know that you can do so from here.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将**产品名称**字段中的应用名称更改为`Image Target`。我们现在不会自定义图标和启动画面图像，尽管知道您可以从这里进行自定义。
- en: 'One of the most important settings that are particularly hidden in the panel
    is the app **Identification** field. We know that is important for an app to maintain
    its identity on the market and it is important to remember to set it correctly.
    To reach that setting, click on **Other Settings** as shown in the following figure:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在面板中特别隐藏的最重要设置之一是应用的**标识**字段。我们知道这对于应用在市场上保持其身份很重要，并且记住正确设置它很重要。要到达该设置，请点击以下图示中的**其他设置**：
- en: '![Deploying for Android](img/032_2_14.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![为Android部署](img/032_2_14.jpg)'
- en: Change the **Bundle Identifier** to something suitable to the app. Notice that
    the other settings all handle very low-level settings regarding the platform,
    such as API level and what OpenGL to use. We can leave it at the default for now
    and it will work on most devices, but it pays off to know where to reach those
    settings in the future.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将**包标识符**更改为适合应用的名称。请注意，其他设置都处理与平台相关的非常低级别的设置，例如API级别和要使用的OpenGL。我们可以暂时将其保留为默认设置，它将在大多数设备上工作，但了解将来如何到达这些设置是有益的。
- en: 'As we know, Android apps are deployed using keystores. Unity makes the process
    of creating one a little easier. To reach keystore settings, click on **Puslishing
    Settings** as shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，Android 应用使用密钥库进行部署。Unity 使创建密钥库的过程变得稍微简单一些。要访问密钥库设置，请点击如下截图所示的 **发布设置**：
- en: '![Deploying for Android](img/032_2_15.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![部署到 Android](img/032_2_15.jpg)'
- en: Now select **Create New Keystore**, and then enter any password in the two fields
    as shown in the preceding screenshot. This will tell Unity to create a new keystore
    for us and use it when deploying. It is important to note that Unity will not
    store our password for us; if we are to restart Unity, we will have to re-enter
    the password here or build will fail.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在选择 **创建新密钥库**，然后在两个字段中输入任何密码，如前述截图所示。这将告诉 Unity 为我们创建一个新的密钥库并在部署时使用它。需要注意的是，Unity
    不会为我们存储密码；如果我们重启 Unity，我们必须在此处重新输入密码，否则构建将失败。
- en: Now that everything is in place, we only need to click on **Build And Run**
    to deploy the app. It will ask us where to save the APK; anywhere would be fine.
    The app will be deployed to the Android device connected using USB to the machine,
    so we need to make sure it is properly connected.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切准备就绪，我们只需点击 **构建和运行** 来部署应用。它将询问我们保存 APK 的位置；任何地方都可以。应用将通过 USB 连接到机器的 Android
    设备进行部署，因此我们需要确保它已正确连接。
- en: If Unity failed to recognize the android device connected, make sure that the
    USB drivers for the specific device are correctly installed. They can be found
    on the manufacturer's website.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Unity 无法识别连接的 Android 设备，请确保已正确安装特定设备的 USB 驱动程序。它们可以在制造商的网站上找到。
- en: Deploying for iOS
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到 iOS
- en: Choose the iOS platform, and then click on the **Switch Platform** button at
    the bottom-left corner. You will notice Unity re-building and re-importing certain
    assets. This process is to match compression schemes and settings for the target
    platform. This is an automatic process that Unity handles very well on its own.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 iOS 平台，然后点击左下角的 **切换平台** 按钮。你会注意到 Unity 正在重新构建和重新导入某些资源。这个过程是为了匹配目标平台的压缩方案和设置。这是一个
    Unity 自动处理得很好的自动过程。
- en: 'After Unity has finished importing all the assets again, its time to continue
    adjusting our settings to build the project on the device. At the bottom, there
    is a button named **Player Settings...**. Click on this button to get something
    like the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Unity 完成所有资源的再次导入后，就是时候继续调整我们的设置，以便在设备上构建项目了。在底部，有一个名为 **Player Settings...**
    的按钮。点击此按钮，你会看到如下截图所示的内容：
- en: '![Deploying for iOS](img/032_2_16.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![部署到 iOS](img/032_2_16.jpg)'
- en: As with Android, **PlayerSettings** is where all the platform-specific settings
    you would expect are. It will include anything specific to iOS now that we have
    switched to the iOS platform.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Android 一样，**PlayerSettings** 是所有预期平台特定设置的集中地。现在我们已经切换到 iOS 平台，它将包括任何特定于 iOS
    的设置。
- en: First, let's change the app name. In **Product Name**, change it to `Image Target`.
    We will leave the default icon and splash screen for now. For now we adjust the
    **Resolution and Presentation** settings. Click on the **Resolution and Presentation**
    bar to expand the settings area.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们更改应用名称。在 **产品名称** 中，将其更改为 `Image Target`。我们现在将保留默认图标和启动画面。现在我们调整 **分辨率和展示**
    设置。点击 **分辨率和展示** 栏以展开设置区域。
- en: 'In the **Default Orientation** section, choose from the drop-down box the **Auto
    Rotation** option. It will expand a list of checkboxes below it. Uncheck the first
    one which is **Use Animated Autorotation**. The following screenshot shows the
    **Resolution and Presentation** section:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **默认方向** 部分，从下拉框中选择 **自动旋转** 选项。它将在其下方展开一个复选框列表。取消选中第一个复选框，即 **使用动画自动旋转**。以下截图显示了
    **分辨率和展示** 部分：
- en: '![Deploying for iOS](img/032_2_17.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![部署到 iOS](img/032_2_17.jpg)'
- en: '**Resolution and Presentation** settings handle the presentation of the app
    to the user. It has options such as supported device orientations and status bar
    visibility. We just enabled the auto rotation option for the app. We also disabled
    **Use Animated Autorotation** because it never looks ok for AR experiences. It
    is usually disorienting for the user.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**分辨率和展示** 设置处理应用向用户展示的方式。它包括诸如支持设备方向和状态栏可见性等选项。我们刚刚为应用启用了自动旋转选项。我们还禁用了 **使用动画自动旋转**，因为这对于
    AR 体验来说从来都不好看。这通常会让用户感到方向感混乱。'
- en: 'Now what is left for us to do is set the bundle identifier for the app. Apple
    developer provisions are issued per app identifier, which follows this structure:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的是设置应用的捆绑标识符。苹果开发者配置文件是按应用标识符发放的，其结构如下：
- en: '`com.Company.ProductName`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`com.公司.产品名称`'
- en: Depending on your Xcode managed provision company name, you need to input yours
    in Unity settings for deploying through Xcode works.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的 Xcode 管理的配置文件公司名称，你需要在 Unity 设置中输入你的名称，以便通过 Xcode 进行部署。
- en: 'To reach the bundle identifier settings, click on the other bar at the very
    button of the **Inspector** area, and change the **Bundle Identifier** with a
    proper one that Xcode will accept. The following screenshot shows **Bundle Identifier**
    settings:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问捆绑标识符设置，点击 **检查器** 区域底部最下面的另一个栏，并将 **捆绑标识符** 改为 Xcode 可以接受的正确名称。以下截图显示了 **捆绑标识符**
    设置：
- en: '![Deploying for iOS](img/032_2_18.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![为iOS部署](img/032_2_18.jpg)'
- en: Now that we have gone through all the settings needed, it is time to deploy
    the app to the device. The process of deployment is very simple thanks to Unity's
    strong cross-platform capability. The process is mostly automatic and requires
    little to no interference from the developer.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有必要的设置，是时候将应用部署到设备上了。由于 Unity 强大的跨平台能力，部署过程非常简单。这个过程主要是自动的，几乎不需要开发者的干预。
- en: First, connect the device to the PC. Now we click on the **Build and Run** button,
    in the **Build Settings** window, on the bottom-right. It will ask you where you
    want to have the build folder located; it is ok to just locate it inside the **Unity**
    project folder, but not inside the **Assets** folder. Give it any name you would
    like; it's a good convention though to name it like the **Unity** project folder
    name.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将设备连接到电脑。现在我们点击 **构建和运行** 按钮，在 **构建设置** 窗口的右下角。它会询问你希望将构建文件夹放在哪里；将其放在 **Unity**
    项目文件夹内即可，但不要放在 **Assets** 文件夹内。给它起任何你喜欢的名字；不过，按照 **Unity** 项目文件夹的名字命名是个好习惯。
- en: Unity will start an automated process of building the project for iOS. It will
    also open Xcode automatically. Try not to interfere with the process till the
    very end. The process of opening Xcode from Unity is done using a script, witch
    switches the focused window and executes certain steps on Xcode. So it is preferable
    to let Unity take control of your PC till it's done and not switch focus to any
    other window.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 将自动开始为 iOS 构建项目的进程。它也会自动打开 Xcode。请尽量在进程结束前不要干扰这个过程。从 Unity 打开 Xcode 的过程是通过一个脚本完成的，该脚本切换焦点窗口并在
    Xcode 上执行某些步骤。因此，最好让 Unity 控制你的电脑直到完成，不要切换到任何其他窗口。
- en: After Xcode has finished copying the app to the device, we should find a perfectly
    working AR app on our devices. The app will work exactly as we would expect it
    to, and displays how powerful the Unity and Vuforia combo is.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 将应用复制到设备后，我们应该在我们的设备上找到一个完美工作的 AR 应用。应用将按预期工作，并展示 Unity 和 Vuforia 组合的强大功能。
- en: 'The following screenshot shows **About** screen of the Image Target app:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Image Target 应用的 **关于** 屏幕：
- en: '![Deploying for iOS](img/032_2_19.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![为iOS部署](img/032_2_19.jpg)'
- en: Note that when Unity is deploying to Xcode, it will automatically switch between
    open windows and execute a number of scripts on Xcode. This is why we need to
    let Unity do its routine and let it have control of the desktop till it starts
    building. If we forcefully prevent it from switching to Xcode automatically, it
    will interrupt automatic building. Note that it can be resumed manually after
    that.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当 Unity 部署到 Xcode 时，它会自动在打开的窗口之间切换并执行 Xcode 上的多个脚本。这就是为什么我们需要让 Unity 执行其常规操作，并让它控制桌面直到开始构建。如果我们强制阻止它自动切换到
    Xcode，它将中断自动构建。注意，之后可以手动恢复。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have gone through the process of setting up our environment.
    We installed both Unity and Vuforia. We were introduced to Unity's GUI and started
    a new project. We imported Vuforia 's sample app and saw how to deploy it to our
    devices. While doing that, we were introduced to many Unity settings that relate
    to app deployment and also some basic features of Vuforia.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了设置我们环境的过程。我们安装了 Unity 和 Vuforia。我们了解了 Unity 的 GUI 并开始了一个新项目。我们导入了
    Vuforia 的示例应用，并看到了如何将其部署到我们的设备上。在这个过程中，我们介绍了与应用部署相关的许多 Unity 设置，以及一些 Vuforia 的基本功能。
- en: With this, we are familiar with the process of deployment and how the final
    products look. We have set up our environment to be able to build AR apps using
    Vuforia and Unity, and have seen how easy it is to deploy on the target device.
    We were introduced to simple settings for the Unity environment, and paved the
    way for a more in-depth look at how to build our own scenes and our own AR experiences.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们熟悉了部署的过程以及最终产品的样子。我们已经搭建了环境，能够使用Vuforia和Unity来构建AR应用，并看到了在目标设备上部署是多么简单。我们了解了Unity环境的简单设置，并为深入了解如何构建自己的场景和自己的AR体验奠定了基础。
- en: In the next chapter, we will start to familiarize ourselves more with Vuforia
    and how to start a project from scratch.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始更熟悉Vuforia，以及如何从头开始启动一个项目。
