["```kt\ndata class Message(val text: String, \n                   val sender: String, \n                   val timestamp: Instant = Instant.now())\n```", "```kt\nval sentMessages = listOf (\n    Message(\"Hi Agat, any plans for the evening?\", \"Samuel\"),\n    Message(\"Great, I'll take some wine too\", \"Samuel\")\n)\nval inboxMessages = mutableListOf(\n        Message(\"Let's go out of town and watch the stars tonight!\",\n         \"Agat\"),\n        Message(\"Excelent!\", \"Agat\")\n)\n```", "```kt\nval allMessages: List<Message> = sentMessages + inboxMessages\n```", "```kt\nval allMessages: List<Message> = sentMessages + inboxMessages\nallMessages.forEach { (text, _) ->\n    println(text)\n}\n```", "```kt\nHi Agat, any plans for the evening?\nGreat, I'll take some wine too\nLet's go out of town and watch the stars tonight!\nExcelent!\n```", "```kt\nval receivedMessages = allMessages - sentMessages\nreceivedMessages.forEach { (text, _) ->\n    println(text)\n}\n```", "```kt\nLet's go out of town and watch the stars tonight!\nExcelent!\n```", "```kt\nfor (msg in allMessages) {\n    println(msg.text)\n}\n```", "```kt\ndata class Message(val text: String,\n                   val sender: String,\n                   val receiver: String,\n                   val folder: Folder = Folder.INBOX,\n                   val timestamp: Instant = Instant.now())\n\nenum class Folder { INBOX, SENT }\n```", "```kt\nfun getMessages() = mutableListOf(\n        Message(\"Je t'aime\", \"Agat\", \"Sam\", Folder.INBOX),\n        Message(\"Hey, Let's go climbing tomorrow\", \"Stefan\", \"Sam\", Folder.INBOX),\n        Message(\"<3\", \"Sam\", \"Agat\", Folder.SENT),\n        Message(\"Yeah!\", \"Sam\", \"Stefan\", Folder.SENT)\n)\n```", "```kt\ngetMessages().filter { it.folder == Folder.INBOX && it.sender == \"Agat\" }\n```", "```kt\ngetMessages().filter { it.folder == Folder.INBOX && it.sender == \"Agat\" }\n .forEach { (text) ->\n     println(text)\n }\n```", "```kt\nJe t'aime\n```", "```kt\nfun getNews() = listOf(\n News(\"Kotlin 1.2.40 is out!\", \"https://blog.jetbrains.com/kotlin/\"),\n News(\"Google launches Android KTX Kotlin extensions for developers\",\n \"https://android-developers.googleblog.com/\"),\n null,\n null,\n News(\"How to Pick a Career\", \"waitbutwhy.com\")\n)\n```", "```kt\ndata class News(val title: String, val url: String)\n```", "```kt\ngetNews()\n        .filterNotNull()\n        .forEachIndexed { index, news ->\n            println(\"$index. $news\")\n        }\n```", "```kt\n0\\. News(title=Kotlin 1.2.40 is out!, url=https://blog.jetbrains.com/kotlin/)\n1\\. News(title=Google launches Android KTX Kotlin extensions for developers, url=https://android-developers.googleblog.com/)\n2\\. News(title=How to Pick a Career, url=waitbutwhy.com)\n```", "```kt\ngetNews().forEachIndexed { index, news ->\n    println(\"$index. ${news.toString()}\")\n}\n```", "```kt\n0\\. News(title=Kotlin 1.2.40 is out!, url=https://blog.jetbrains.com/kotlin/)\n1\\. News(title=Google launches Android KTX Kotlin extensions for developers, url=https://android-developers.googleblog.com/)\n2\\. null\n3\\. null\n4\\. News(title=How to Pick a Career, url=waitbutwhy.com)\n```", "```kt\ndata class Message(val text: String,\n                   val sender: String,\n                   val receiver: String,\n                   val time: Instant = Instant.now())\n```", "```kt\nval sentMessages = listOf(\n        Message(\"I'm programming in Kotlin, of course\", \n                \"Samuel\", \n                \"Agat\", \n                Instant.parse(\"2018-12-18T10:13:35Z\")),\n        Message(\"Sure!\", \n                \"Samuel\", \n                \"Agat\", \n                Instant.parse(\"2018-12-18T10:15:35Z\"))\n)\nval inboxMessages = mutableListOf(\n        Message(\"Hey Sam, any plans for the evening?\", \n                \"Samuel\", \n                \"Agat\", \n                Instant.parse(\"2018-12-18T10:12:35Z\")),\n        Message(\"That's cool, can I join you?\", \n                \"Samuel\", \n                \"Agat\",\n                Instant.parse(\"2018-12-18T10:14:35Z\"))\n)\nval allMessages = sentMessages + inboxMessages\n```", "```kt\nI'm learning Kotlin, of course\nSure!\nHey Sam, any plans for the evening?\nThat's cool, can I join you?\n```", "```kt\nallMessages.sortedBy { it.time }\n```", "```kt\nallMessages.sortedBy { it.time }\n        .forEach {\n            println(it.text)\n }\n```", "```kt\nI'm programming in Kotlin, of course\nSure!\n```", "```kt\nHey Sam, any plans for the evening?\nThat's cool, can I join you?\n```", "```kt\nallMessages.sortedWith(compareBy({it.sender}, {it.time}))\n```", "```kt\n<br/>\n<p>---------- Forwarded message ----------</p>\n<p>\nFrom: johny.b@gmail.com <br/>\nDate: 14/04/2000 <br/>\nSubject: Any plans for the evening?<br/>\nTo: natasha@gmail.com, barbra@gmail.com<br/>\n</p>\n```", "```kt\nTo: natasha@gmail.com, barbra@gmail.com</br>\n```", "```kt\ndata class Address(val emailAddress: String, val displayName: String)\n```", "```kt\nfun generateRecipientsString(recipients: List<Address?>): String\n```", "```kt\nfun generateRecipientsString(recipients: List<Address?>): String =\n recipients.filterNotNull()\n```", "```kt\nfun generateRecipientsString(recipients: List<Address?>): String =\n        recipients.filterNotNull()\n .map { it.emailAddress }\n```", "```kt\nfun generateRecipientsString(recipients: List<Address?>): String =\n        recipients.filterNotNull()\n                .map { it.emailAddress }\n .joinToString(\", \", \"To: \", \"<br/>\")\n```", "```kt\nfun generateRecipientsString(recipients: List<Address?>): String =\n        recipients.filterNotNull()\n            .joinToString(\", \", \"To: \", \"<br/>\") { it.emailAddress }\n```", "```kt\n[mssg_1, mssg_2, mssg_3, mssg_4, mssg_5, mssg_6, mssg_7, ..., mssg_n]\n```", "```kt\n[[mssg_1, mssg_2, mssg_3, mssg_4], ..., [mssg_n-3, mssg_n-2, mssg_n-1, mssg_n]]\n```", "```kt\ndata class Message(val text: String,\n                   val time: Instant = Instant.now())\n```", "```kt\nval messages = listOf(\n        Message(\"Any plans for the evening?\"),\n        Message(\"Learning Kotlin, of course\"),\n        Message(\"I'm going to watch the new Star Wars movie\"),\n        Message(\"Would u like to join?\"),\n        Message(\"Meh, I don't know\"),\n        Message(\"See you later!\"),\n        Message(\"I like ketchup\"),\n        Message(\"Did you send CFP for Kotlin Conf?\"),\n        Message(\"Sure!\")\n)\n```", "```kt\nval pagedMessages = messages.windowed(4, partialWindows = true, step = 4)  \n```", "```kt\nval pagedMessages = messages.windowed(4, partialWindows = true, step = 4) { \n    it.map { it.text }\n}\n```", "```kt\npagedMessages.forEach { println(it) }\n```", "```kt\n[Any plans for the evening?, Learning Kotlin, of course, I'm going to watch the new Star Wars movie, Would u like to join?]\n[Meh, I don't know, See you later!, I like the ketchup, Did you send CFP for Kotlin Conf?]\n[Sure!]\n```", "```kt\nclass Course(val name: String, val lecturer: Lecturer, val isPaid: Boolean = false)\nclass Student(val name: String, val courses: List<Course>)\nclass Lecturer(val name: String)\n```", "```kt\nfun getLecturesOfCoursesWithSubscribedStudents()\n```", "```kt\nfun getLecturesOfCoursesWithSubscribedStudents() =\n        getStudents()\n                .flatMap { student ->\n                    student.courses\n                }\n```", "```kt\nfun getLecturesOfCoursesWithSubscribedStudents() =\n        getStudents()\n                .flatMap { student ->\n                    student.courses\n                }\n                .distinct()\n```", "```kt\nfun getLecturesOfCoursesWithSubscribedStudents() =\n getStudents()\n .flatMap { student ->\n     student.courses\n } \n .distinct()\n .map { course -> course.lecturer } \n .distinct()\n```", "```kt\ngetStudents()\n        .flatMap { student: Student ->\n            student.courses\n        }\n```", "```kt\nvar sum = 0\n(1..10).forEach {\n    sum += it\n}\n```", "```kt\nval sum = (1..3).toList().fold(0) { acc, i -> acc + i }\n\n```", "```kt\ndata class Track(val title: String, val durationInSeconds: Int)\ndata class Album(val name: String, val tracks: List<Track>)\n```", "```kt\nval album = Album(\"Sunny side up\", listOf(\n        Track(\"10/10\", 176),\n        Track(\"Coming Up Easy\", 292),\n        Track(\"Growing Up Beside You\", 191),\n        Track(\"Candy\", 303),\n        Track(\"Tricks of the Trade\", 151)\n))\n```", "```kt\nfun Album.getStartTime(track: Track): Int\n```", "```kt\nfun Album.getStartTime(track: Track): Int {\n    val index = tracks.indexOf(track)\n return this.tracks\n            .take(index)\n .map { (name, duration) -> duration }\n            .fold(0) { acc, i -> acc + i }\n}\n```", "```kt\nfun Album.getStartTime(track: Track): Int {\n if (track !in tracks) throw IllegalArgumentException(\"Bad \n     track\")\n\n    val index = tracks.indexOf(track)\n    return tracks\n        .take(index)\n        .map { (name, duration) -> duration }\n        .fold(0) { acc, i -> acc + i }\n}\n```", "```kt\nprintln(album.getStartTime(Track(\"Growing Up Beside You\", 191)))\nprintln(album.getStartTime(Track(\"Coming Up Easy\", 292)))\n```", "```kt\n468\n176\n```", "```kt\nclass Course(val name: String, val lecturer: Lecturer, val isPaid: Boolean = false)\nclass Student(val name: String, val courses: List<Course>)\nclass Lecturer(val name: String)\n```", "```kt\nfun getCoursesWithSubscribedStudents(): Map<Course, List<Student>> \n```", "```kt\nfun getCoursesWithSubscribedStudents(): Map<Course,\n List<Student>> =\n    getStudents()\n .flatMap { student ->\n                student.courses.map { course -> course to student }\n            }\n```", "```kt\nfun getCoursesWithSubscribedStudents(): Map<Course,\n List<Student>> =\n    getStudents()\n            .flatMap { student ->\n                student.courses.map { course -> course to student }\n            }\n .groupBy { (course, student) -> course }\n```", "```kt\nfun getCoursesWithSubscribedStudents(): Map<Course,\n List<Student>> =\n    getStudents()\n            .flatMap { student ->\n                student.courses.map { course -> course to student }\n            }\n            .groupBy { (course, _) -> course }\n .map { (course, courseStudentPairs) -> \n                course to courseStudentPairs.map { (_, student) -> \n                 student } \n            }\n```", "```kt\nfun getCoursesWithSubscribedStudents(): Map<Course,\n List<Student>> =\n    getStudents()\n            .flatMap { student ->\n                student.courses.map { course -> course to student }\n            }\n            .groupBy { (course, _) -> course }\n            .map { (course, courseStudentPairs) ->\n                course to courseStudentPairs.map { (_, student) ->\n                 student }\n            }\n .toMap()\n```", "```kt\nmap { (course, courseStudentPairs) ->\n    course to courseStudentPairs.map { (_, student) -> student }\n}\n```", "```kt\nfun getCoursesWithSubscribedStudents(): Map<Course, List<Student>> =\n        getStudents()\n                .flatMap { student ->\n                    student.courses.map { course -> course to student }\n                }\n                .groupBy { (course, _) -> course }\n                .mapValues { (course, courseStudentPairs) ->\n                    courseStudentPairs.map { it -> it.second }\n                }\n```"]