["```kt\ndata class Household(\n    val name: String,\n    val members: List<Person>,\n)\ndata class Person(\n    val firstName: String,\n    val lastName: String,\n    val age: Int,\n    val skills: List<String>,\n)\nfun Household.validate(): List<String> =\n    listOfNotNull(\n        if (name.isBlank()) \"name must not be empty\" else null,\n    ) + members.flatMap { it.validate() }\nfun Person.validate(): List<String> = listOfNotNull(\n    if (firstName.isBlank()) \"first name must be non-empty\" else null,\n    if (lastName.isBlank()) \"last name must be non-empty\" else null,\n    if (age < 0) \"age must be non-negative\" else null,\n)\n```", "```kt\nenum class InternalError {\n    WRONG_PASSWORD,\n    USERNAME_NOT_FOUND,\n    FAILED_CAPTCHA,\n    TIMED_OUT,\n    INVALID_REQUEST\n}\n```", "```kt\nenum class ExternalError {\n    FAILED_AUTHENTICATION,\n    TIMED_OUT,\n    INVALID_REQUEST\n}\n```", "```kt\ninterface HouseholdService {\n    fun create(household: Household): Household\n    fun draftContract(contract: Contract)\n    fun notifyHouseholds(contract: Contract)\n}\n```", "```kt\ninterface HouseholdService {\n    fun create(household: Household): Household\n}\ninterface ContractService {\n    fun draftContract(contract: Contract)\n}\ninterface NotificationService {\n    fun notifyHouseholds(contract: Contract)\n}\n```", "```kt\ninterface NotificationService {\n    fun notifyHouseholds(contract: Contract)\n}\nclass SmsNotificationService : NotificationService {\n    override fun notifyHouseholds(contract: Contract) {\n        // send SMS messages to household's phone numbers\n    }\n}\nclass EmailNotificationService : NotificationService {\n    override fun notifyHouseholds(contract: Contract) {\n        // send messages to household's email addresses\n    }\n}\n```", "```kt\nclass PhoneNotificationService : NotificationService {\n    override fun notifyHouseholds(contract: Contract) {\n         // ring an automated message to household's phone\n   // also update contract status to UNDER_REVIEW\n    }\n}\n```", "```kt\ninterface Human {\n    fun logOn()\n    fun exerciseContract()\n}\ndata class User(val username: String) : Human {\n    override fun logOn() {\n        // user log on\n    }\n    override fun exerciseContract() {\n        throw UnsupportedOperationException(\"user cannot exercise contract\")\n    }\n}\ndata class HouseholdMember(val name: String) : Human {\n    override fun logOn() {\n        throw UnsupportedOperationException(\"household members do not log on\")\n    }\n    override fun exerciseContract() {\n        // exercise contract\n    }\n}\n```", "```kt\nclass ContractWorkflowService(\n    val emailNotificationService: EmailNotificationService,\n) {\n    fun agree(contract: Contract): Contract {\n        return contract.copy(agreedAt = Instant.now()).also {\n emailNotificationService.notifyHouseholds(contract)\n        }\n    }\n}\ninterface NotificationService {\n    fun notifyHouseholds(contract: Contract)\n}\nclass EmailNotificationService : NotificationService {\n    override fun notifyHouseholds(contract: Contract) {\n        // send messages to household's email addresses\n    }\n}\n```", "```kt\nclass Person(val name: String, val address: Address) {\n    fun getAddressCity(): String {\n        return address.city\n    }\n}\nclass Address(val city: String)\n```"]