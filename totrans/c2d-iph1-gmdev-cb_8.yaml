- en: Chapter 8. Tips, Tools, and Ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the Cocos2d-iPhone testbed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packing textures using Zwoptex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating levels using Tiled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating levels using JSONWorldBuilder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating scenes with CocosBuilder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Cocos2d-X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Cocos3d
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will conclude by covering a few tools commonly used to augment
    Cocos2d game development. We will also introduce Cocos2d spin-off projects and
    walk you through the process of releasing an app on Apple's App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Cocos2d-iPhone testbed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Cocos2d-iPhone testbed** is a suite of examples created to test bugs,
    display features, and instruct programmers with useful examples. In this recipe
    we will introduce this very useful tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing the Cocos2d-iPhone testbed](img/4002_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we must download the Cocos2d source from [http://www.cocos2d-iphone.org/download](http://www.cocos2d-iphone.org/download).
    After unzipping the main source package, double-click on the `cocos2d.xcworkspace`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **Scheme selection** menu in XCode you can now select which piece of
    the testbed you would like to run. These tests include everything—drawing, physics,
    sound, networking, and more.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inside the `tests` folder in the `cocos2d-ios` target you will find the source
    files for each individual test. Here you can play around with the demos to get
    ideas for your own games.
  prefs: []
  type: TYPE_NORMAL
- en: '**Box2D testbed**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to the scope of the Cocos2d-iPhone framework, many other testbeds are included
    within the Cocos2d-iPhone testbed. By building the `Box2dTestBed` scheme we can
    run a version of the official Box2D testbed tailored for Cocos2d.
  prefs: []
  type: TYPE_NORMAL
- en: Packing textures using Zwoptex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating sprite sheets by hand can be a tedious process. To solve this problem,
    we use **Zwoptex Texture Packer** to pack individual sprites into the smallest
    area possible. In this recipe, we walk through this process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Packing textures using Zwoptex](img/4002_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we must download and install the Zwoptex application. Go to [http://zwoptexapp.com/](http://zwoptexapp.com/)
    and click on the **Download** link. Drag the application to your `Applications`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve started Zwoptex, click **File | New**. You should see a blank
    canvas. Here are some attributes of the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Canvas size:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see inside Zwoptex, the width and height of the Canvas can only go
    up to 2048 pixels. Also, they can only be a power of 2\. On the iPhone 3G and
    older devices, uncompressed textures can have a maximum size of 1024x1024\. On
    newer devices that support OpenGL ES 2.0, starting with the iPhone 3GS, uncompressed
    textures can be up to 2048x2048 pixels. Textures are only loaded into memory in
    powers of 2\. Taking all of this into account, Zwoptex limits the canvas sizes
    you can use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Importing sprites:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sprites are imported onto the canvas by simply dragging individual files from
    your Finder onto the canvas. These will be positioned on top of each other. They
    will also be outlined with a red box.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Applying a layout:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After adjusting any settings under the Layout heading we can click the Apply
    button. This will re-arrange the sprites to fit the canvas size. If all the sprites
    do not fit, some will still have that red box surrounding them. This indicates
    an overlap.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Publishing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once our sprites are properly arranged in a sheet and our Zwoptex file is saved,
    we can publish our sheet. This creates a PLIST file and a PNG file. By adding
    these to our XCode Cocos2d project, we can now use them in our app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zwoptex uses offsets and other positioning tricks designed to squeeze as many
    sprites into a sheet as possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A popular alternative to Zwoptex is **TexturePacker**. It can be downloaded
    from [http://www.texturepacker.com/](http://www.texturepacker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating levels using Tiled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important weapons in the game developer's arsenal is the **level
    editor**. In this recipe we will create a level using the *Tiled* level editor.
    We will then create a simple top-down world using this level.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating levels using Tiled](img/4002_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the project `RecipeCollection03` for full working code of this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe loads a TMX `tilemap` created using the **Tiled** application.
    It then creates a 2.5D game world using information from the `tilemap`. This is
    done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Tiled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First we must download and install the `Tiled` application. Go to [http://www.mapeditor.org/](http://www.mapeditor.org/)
    and click on the **Tiled Qt 0.7.0 for Mac OS X** link. Drag the application to
    your `Applications` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Creating a new level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up Tiled and click **File | New** to create a new level.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choosing a perspective:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you might be able to see from the screenshots of `Tiled` on the website,
    there are two types of perspectives that can be chosen. When you first click **File
    | New** in the **Tiled** menu, you will have to make the choice between **Orthagonal**
    and **Isometric perspectives**. Each perspective creates a different visual style
    and world object layout. In our example, we chose **Orthagonal** as it's a little
    more straightforward.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Map size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The map size is measured in tiles. For our map we chose the size of 50x50.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Tile size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Tiled`, the tile size can be variable. In this example we have chosen the
    default size of 32x32 pixels. This means we can keep our art assets nice and small.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating a `tileset:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The primary resource used in `Tiled` is the `tileset`. This is a sprite sheet
    created according to the tile size chosen in Tiled. To create this sprite sheet,
    open up Zwoptex, create a new file, and set `Padding` to 0px. Then, drag 32x32
    pixel images onto the sprite sheet. This PNG file is the tileset file. Instead
    of using a corresponding PLIST file to manage sprite information, `Tiled` simply
    uses position information to match a sprite to a tile. For this recipe our `tileset`
    looks like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How it works...](img/4002_09_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: So, make sure your tileset is correct before loading it into your level. Finally,
    click **Map | New Tileset**. Name your tileset and specify your PNG sprite sheet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Tile layers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tiled supports the creation of multiple overlapping layers. Typically, these
    layers are used to place graphical elements over one another. In addition to this,
    layers can specify information. In our level, red colored areas can be considered
    "collidable". This will be processed programmatically.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Object layers:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In addition to tiles, **Objects** can be placed to indicate non-tile based data
    like item locations. In our level, we've placed a "spawn point" object to indicate
    where the player should spawn. For an example usage of this please refer to the
    `tilemap.tmx` file located in the `Resources/Tilemaps` folder of `RecipeCollection03,
    CCTMXTiledMap`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once our map is complete we will run the following code snippet to load `tilemap`
    assets into the game:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: A `CCTMXTiledMap` object contains references to each tile as a `CCSprite` object
    as well as a number of structures to organize these files.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: CCTMXTileLayer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To access a tile layer we use the following code:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'To loop through all `CCTMXLayer` objects, we can also use the following lines:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Accessing a tile''s sprite involves calling the `tileAt` method:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: These sprites are created lazily when `tileAt` is called. For more information,
    please refer to the Cocos2d-iPhone API reference page for `CCTMXTiledMap`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Re-ordering tiles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the purposes of our example, we loop through all tile sprites and re-order
    them to create the proper perspective illusion. This simply involves calling the
    `reorderChild` method on `tileMap` based on each tile's Y position.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Adding Box2D geometry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create physical level geometry we process the "Collidable" layer and create
    a properly sized box object for each tile we find:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using this special `collidableLayer` allows the level art to line up exactly
    where we want things to be collidable. This creates the illusion that the base
    of each tree is collidable while the branches are not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Processing level objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Level objects are processed using the `CCTMXObjectGroup` class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we process our `SpawnPoint` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now spawn the player at this point on the map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about using `Tiled` please refer to the `Tiled` wiki located
    at [http://github.com/bjorn/tiled/wiki](http://github.com/bjorn/tiled/wiki).
  prefs: []
  type: TYPE_NORMAL
- en: Creating levels using JSONWorldBuilder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a game level using tiles is a technique that works well for many games.
    In this recipe, however, we will create a level in a more non-linear fashion using
    the **JSONWorldBuilder** level editor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating levels using JSONWorldBuilder](img/4002_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the project `RecipeCollection03` for full working code of this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe loads a JSON level file created by JSONWorldBuilder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing JSONWorldBuilder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we must download and install the JSONWorldBuilder application. The source
    for JSONWorldBuilder can be found at `http://github.com/n8dogg/JSONWorldBuilder`.
    To download the latest `build` click on **Downloads**, download the source archive,
    unzip it, and finally look in the builds folder. Here you will find an archive
    containing the latest JSONWorldBuilder application. Drag the application to your
    `Applications` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Creating a new level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Opening JSONWorldBuilder automatically creates a new level. To clear the level
    you are currently working on, choose **File | New Map**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Specifying a resources folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'JSONWorldBuilder is designed to work with PNG image files as well as PNG/PLIST
    combinations. When you specify a resource folder we are telling the editor where
    these resources live. Click **Resources | Specify Resource** folder. This will
    bring up a prompt. Once you specify a folder the Sprites window will fill with
    sprites. Click on a sprite sheet name to hide/show individual sprites:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How it works...](img/4002_09_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Clicking on an individual sprite will select it for use in the editor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Sprite Stamp:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once a sprite is selected in the **Sprites** window, click the **Sprite Stamp**
    tool on the left menu. Now, by clicking the canvas you can stamp that sprite repeatedly
    onto the canvas.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Sprite Selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To move the sprites that you've just stamped around, click on the **Sprite Selector**
    tool. Now, click and drag a sprite on the canvas to move it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Draw Tiled Sprite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To draw a tiled sprite, click the **Draw Tiled Sprite** tool. Now click and
    drag your mouse to create a rectangular tiled area with the selected texture.
    In the editor you can use both sprite sheets or single image files as tiled textures.
    However, keep in mind that the `TexturedPolygon` class we've been using requires
    a single image file to work properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Draw Mask:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, that we have a tiled sprite on the canvas, we can mask it. This means we
    will cut it into a shape. Select the tiled sprite you've placed on the canvas
    using the **Sprite** tool. Now select the **Draw Mask** tool. Click once on or
    around the tiled sprite to start the mask creation process. This involves creating
    a polygon with successive mouse clicks, finally ending where you initially clicked
    to complete the polygon.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Lines, Points, and Polygons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spatial information can be added to your map using lines, points, and polygons.
    These are created using the **Create Line, Create Point**, and **Create Polygon**
    tools respectively. Also, note that you need to click and drag to create a line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Shape Selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Shape Selector** tool will allow you to select and reposition shapes on
    the canvas.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Move Camera, Zooming, and Canvas Resize:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Move Camera** tool allows us to pan the position of the camera. In the
    **Nav** window on the right you can click the + or - buttons to zoom the camera.
    You can also resize the canvas.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Map Object window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the **Map Object** window you can specify information like object position
    and tiled object size. Here, you can also add meta tags in the form of a key/value
    dictionary, flip images on the X and/or X axis, and re-arrange objects on the
    Z axis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Loading our map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we have our map created we can go ahead and load it in Cocos2d. We use
    `CJSONDeserializer` to go through our map file and process data. After processing
    some initial information the loadMap method calls four different methods depending
    on map node types:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each method processes the appropriate node, and attaches sprite information
    to the `gameNode` object or drawing information to the `drawLayer`. Metadata is
    also handled in these methods, though it could be handled in the `loadMap` method
    as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating scenes with CocosBuilder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Levels are not the only things that can be built using a **WYSIWYG** editor.
    In this recipe we will craft a simple menu scene using **CocosBuilder**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating scenes with CocosBuilder](img/4002_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the project `RecipeCollection03` for full working code of this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe loads a CocosBuilder CCB scene along with its associated assets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing CocosBuilder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we must download and install the **CocosBuilder** application. Go to
    `http://cocosbuilder.com/?page_id=11` and click on the **Download CocosBuilder
    Application** link. Drag the application to your `Applications` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Starting out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CocosBuilder allows us to create a hierarchical layout of objects derived from
    CCNode. Available node types include `CCLayer, CCSprite, CCMenu`, and `CCParticleSystem`.
    The file assets for these nodes are expected to be in the same folder as the CCB
    file itself. So, before creating a new CCB file, we must create a folder and fill
    it with assets we'd like to use. When this is finished click **File | New**. Choose
    **CCNode** for the **root object type**. Save this file into the folder you created.
    If you would like to add more assets later, simple copy them into the folder and
    click **Object | Reload Assets** .
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Adding objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To add an object as a child of the root `CCNode` object, click on the root node
    and then click **Object | Add Object as Child**. Then click the object type you
    would like to add.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Adding a CCSprite object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our example, we've added three `CCSprite` objects. Sprite objects are always
    added without a corresponding texture file. After adding a black sprite, choose
    your sprite file/sheet and corresponding sprite name on the right under the **CCSprite**
    heading.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Adding a `CCMenuItemImage` with callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also add a `CCMenu` object and a child `CCMenuItemImage`. On the `CCMenuItemImage`
    object we specify a callback. The method back will be called on the "Owner" object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Loading our scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside of Cocos2d we use the following lines to load the scene file, set the
    scene''s "owner", and to finally push the scene:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clicking on the **Back** button in the scene calls the back method in our recipe
    file and the scene is then popped. Using these tools you can quickly mock up game
    menus and other stand-alone scenes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using Cocos2d-X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cocos2d is not limited to iOS development. **Cocos2d-X** is a **C++** port of
    Cocos2d-iPhone. Using Cocos2d-X we can develop games for many platforms including
    Mac, PC, Linux, Android, and more. In this recipe, we will install Cocos2d-X XCode
    templates, create a simple Cocos2d-X application, and introduce the Cocos2d-X
    testbed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Cocos2d-X](img/4002_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the project `Ch8_Cocos2d-X` for full working code of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe shows us a basic example of Cocos2d-X in action, which is done
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Cocos2d-X XCode templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we must download the latest version of Cocos2d-X and install the XCode
    template. Go to [http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download](http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download)
    and download the latest source package. After unzipping the package you''ll find
    tools to create projects for multiple development environments. To install the
    XCode templates, open the **Terminal**, navigate to the Cocos2d-X folder, and
    run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install the templates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Creating a Cocos2d-X project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a project with the newly installed XCode template click **File | New
    | New** Project. Under iOS you should see `cocos2d-x`. Under this there are a
    few templates for Box2D, Chipmunk, and Lua integration. Choose one of these.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using Cocos2d-X:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the preceding code, `Cocos2d-X` is a full port of Cocos2d-iPhone
    to C++. For more information about `Cocos2d-X`, please consult the **Cocos2d-X
    | Doxygen** documentation located at `http://www.cocos2d-x.org/embedded/cocos2d-x/classes.html.`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The Cocos2d-X testbed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the tests folder you will find a number of test projects for different
    operating systems. In the `test.ios` folder open the project `test.xcodeproj`.
    This is a thorough port of the Cocos2d testbed with the addition of a simple menu
    system to make navigation between the examples much easier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using Cocos3d
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cocos2d is such a versatile framework that it has even been ported and extended
    into a **3D game engine** appropriately titled **Cocos3d**. In this recipe we
    will install Cocos3d XCode templates, create a sample Cocos3d application, and
    introduce the Cocos3d `demo mash-up` project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Cocos3d](img/4002_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the project `Ch8_Cocos3d` for full working code of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe shows us a basic example of Cocos3d in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Cocos3d XCode templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we must download the latest version of Cocos3d and install the XCode
    template. Go to `http://brenwill.com/cocos3d/`. On the right hand side you should
    see the latest Cocos3d source package. Download and unzip the package. To install
    the XCode templates, open the Terminal, navigate to the recently unzipped Cocos3d
    folder, and run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install the templates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Creating a Cocos3d project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a project with the newly installed XCode template click **File | New
    | New Project**. Under iOS you should see cocos3d. Under this choose **cocos3d
    Application**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using Cocos3d:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the simple example we created we see a 3D font rendering that reads **"hello,
    world"**. This 3D model is a PowerVR POD file created in either Maya or 3DS Max
    and exported using PVRGeoPOD. For more information about Cocos3d, please consult
    the Cocos3d documentation located (as of this writing) at `http://brenwill.com/docs/cocos3d/0.6.0-sp/api/`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'CC3DemoMashUp:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the source package you will find the XCode workspace file `cocos3d.xcworkspace`.
    Open this and you will find the `CC3DemoMashUp` target. The mash-up contains a
    number of advanced examples using mesh models, cameras, lights, bump mapping,
    animation, and more.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Releasing your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are finally finished creating your app it's time to release it on Apple's
    App Store. In this recipe we will go through this process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Releasing your app](img/4002_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The scope of this recipe is rather large. Because of this we will provide a
    rough process outline along with supporting documentation, to help you publish
    your app to the App Store. These steps are mainly based on the guide in the **Distribution**
    section of the **iOS Provisioning Portal**. You need a valid **iOS Developer account**
    to access this guide. Another great guide can be found here (with a valid iOS
    Developer account): [http://adcdownload.apple.com/ios/ios_developer_program_user_guide/
    ios_developer_program_user_guide__standard_program_v2.7__final_9110.pdf](http://adcdownload.apple.com/ios/ios_developer_program_user_guide/).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once your application is complete, it''s time to start preparing your app for
    the App Store:'
  prefs: []
  type: TYPE_NORMAL
- en: 'iOS Provisioning Portal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The iOS Provisioning Portal is where development certificates and provisioning
    profiles are created and/or managed, often in conjunction with XCode. The portal
    can be found by going to `http://developer.apple.com/ios/manage/overview/index.action`
    or by going to `http://developer.apple.com/devcenter/ios/index.action` and clicking
    on iOS **Provisioning Portal**. Once you are there, go to the **App IDs** section
    of the portal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Creating an explicit App ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Up until this point you may have been provisioning your app onto a device using
    an **App ID** with an asterisk as the ID suffix. This wildcard allows easy ad
    hoc publishing of any app onto a registered device. However, if we want to publish
    our app to the App Store and have features like `Push Notification` enabled, we
    need to create an explicit App ID. Click **New App ID** and instead of entering
    a * under **App ID Suffix**, enter a proper reverse-domain name style string.
    An example of this would be `com.domainname.appname`. This is your **Bundle ID**.
    Once this is finished, go to the **Distribution** section of the iOS Provisioning
    Portal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Obtaining your distribution certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is where you must begin to follow the on-screen instructions carefully.
    Click **Obtaining your iOS Distribution Certificate** to show the first set of
    instructions. Here, you will be told to generate a **Certificate Signing Request**
    using the **Keychain Access** app on your Mac. This request will then be submitted
    online. Once approved you can then download and install your distribution certificate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Creating a Distribution Provisioning Profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we must create a new "provisioning profile" specifically for distribution
    on the App Store. This is handled under the **Provisioning** tab in the iOS Provisioning
    Portal. Remember that this profile will not allow you to push your app onto a
    device directly. For that, look into **Ad Hoc Distribution**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Building your app for distribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your **Distribution Provisioning Profile** is installed you must create
    a new **Build Configuration** for distribution in XCode. This configuration specifies
    the necessary certificate and provisioning profile as well as the specific **Bundle
    ID** created earlier. This step also takes you through setting up your Entitlements.plist
    file. Finally, you build your application and zip it up for transport.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Adding your application in iTunes Connect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we've discussed previously, **iTunes Connect** is a set of tools that help
    developers publish their apps and manage app information. You can log into iTunes
    Connect by going to [http://itunesconnect.apple.com/.](http://itunesconnect.apple.com/.)
    Once you've logged into iTunes Connect you need to click on **Manage Your Applications**.
    Then, click **Add New App** in the top-left to begin adding a new application.
    Follow the on-screen instructions. This will include uploading an app icon, images,
    and description. When you are finished, go back to the **Manage Your Apps** page
    and select the app you just created. Finally, click **Ready to Upload Binary**
    and fill out any more necessary information. Your app should now show the **Waiting
    for Upload** state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using Application Loader:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now it is time to upload your application using **Application Loader**. Application
    Loader is a separate Mac application designed to handle the uploading of apps.
    Application Loader can be downloaded at [http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg](http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg)http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg.
    Once you''ve installed Application Loader, open it up and begin uploading the
    application we zipped up previously. For more information about using Application
    Loader, please consult the documentation found here: [https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf](https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The App Store Approval Process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once your app has been uploaded it gets placed in a queue to await approval
    from Apple. This process can take upwards of one week, so be patient. Once your
    app has been approved, you will see a small green light and the app state will
    say **Ready for Sale**. Give Apple another 24-48 hours and your app should be
    on the App Store! For more information about the App Store review guidelines,
    please refer to this page: [http://developer.apple.com/appstore/guidelines.html](http://developer.apple.com/appstore/guidelines.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
