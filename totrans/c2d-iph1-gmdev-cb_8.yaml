- en: Chapter 8. Tips, Tools, and Ports
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章.技巧、工具和端口
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简介
- en: Accessing the Cocos2d-iPhone testbed
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Cocos2d-iPhone 测试平台
- en: Packing textures using Zwoptex
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zwoptex 打包纹理
- en: Creating levels using Tiled
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Tiled 创建关卡
- en: Creating levels using JSONWorldBuilder
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JSONWorldBuilder 创建关卡
- en: Creating scenes with CocosBuilder
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CocosBuilder 创建场景
- en: Using Cocos2d-X
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Cocos2d-X
- en: Using Cocos3d
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Cocos3d
- en: Releasing your app
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布您的应用
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter we will conclude by covering a few tools commonly used to augment
    Cocos2d game development. We will also introduce Cocos2d spin-off projects and
    walk you through the process of releasing an app on Apple's App Store.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过介绍一些常用的工具来增强 Cocos2d 游戏开发来结束本章。我们还将介绍 Cocos2d 衍生项目，并指导您在苹果的 App Store
    上发布应用的流程。
- en: Accessing the Cocos2d-iPhone testbed
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 Cocos2d-iPhone 测试平台
- en: The **Cocos2d-iPhone testbed** is a suite of examples created to test bugs,
    display features, and instruct programmers with useful examples. In this recipe
    we will introduce this very useful tool.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cocos2d-iPhone 测试平台** 是一系列示例的集合，旨在测试错误、展示功能，并通过有用的示例指导程序员。在本食谱中，我们将介绍这个非常有用的工具。'
- en: '![Accessing the Cocos2d-iPhone testbed](img/4002_09_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![访问 Cocos2d-iPhone 测试平台](img/4002_09_01.jpg)'
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, we must download the Cocos2d source from [http://www.cocos2d-iphone.org/download](http://www.cocos2d-iphone.org/download).
    After unzipping the main source package, double-click on the `cocos2d.xcworkspace`
    file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须从 [http://www.cocos2d-iphone.org/download](http://www.cocos2d-iphone.org/download)
    下载 Cocos2d 源代码。解压缩主源代码包后，双击 `cocos2d.xcworkspace` 文件。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: From the **Scheme selection** menu in XCode you can now select which piece of
    the testbed you would like to run. These tests include everything—drawing, physics,
    sound, networking, and more.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XCode 的 **方案选择** 菜单中，您现在可以选择运行测试平台的哪个部分。这些测试包括一切——绘图、物理、声音、网络等等。
- en: How it works...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Inside the `tests` folder in the `cocos2d-ios` target you will find the source
    files for each individual test. Here you can play around with the demos to get
    ideas for your own games.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `cocos2d-ios` 目标的 `tests` 文件夹中，您可以找到每个单独测试的源文件。在这里，您可以玩转这些演示，以获得自己游戏的灵感。
- en: '**Box2D testbed**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Box2D 测试平台**'
- en: Due to the scope of the Cocos2d-iPhone framework, many other testbeds are included
    within the Cocos2d-iPhone testbed. By building the `Box2dTestBed` scheme we can
    run a version of the official Box2D testbed tailored for Cocos2d.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Cocos2d-iPhone 框架的范围，许多其他测试平台都包含在 Cocos2d-iPhone 测试平台中。通过构建 `Box2dTestBed`
    方案，我们可以运行针对 Cocos2d 定制的官方 Box2D 测试平台版本。
- en: Packing textures using Zwoptex
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Zwoptex 打包纹理
- en: Creating sprite sheets by hand can be a tedious process. To solve this problem,
    we use **Zwoptex Texture Packer** to pack individual sprites into the smallest
    area possible. In this recipe, we walk through this process.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 手动创建精灵表可以是一个繁琐的过程。为了解决这个问题，我们使用 **Zwoptex 纹理打包器** 将单个精灵打包到尽可能小的区域。在本食谱中，我们将详细介绍这个过程。
- en: '![Packing textures using Zwoptex](img/4002_09_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Zwoptex 打包纹理](img/4002_09_02.jpg)'
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First we must download and install the Zwoptex application. Go to [http://zwoptexapp.com/](http://zwoptexapp.com/)
    and click on the **Download** link. Drag the application to your `Applications`
    folder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须下载并安装 Zwoptex 应用程序。访问 [http://zwoptexapp.com/](http://zwoptexapp.com/)
    并点击 **下载** 链接。将应用程序拖到您的 `Applications` 文件夹。
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you''ve started Zwoptex, click **File | New**. You should see a blank
    canvas. Here are some attributes of the canvas:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动 Zwoptex，点击 **文件 | 新建**。您应该看到一个空白画布。以下是一些画布的属性：
- en: 'Canvas size:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 画布大小：
- en: As you can see inside Zwoptex, the width and height of the Canvas can only go
    up to 2048 pixels. Also, they can only be a power of 2\. On the iPhone 3G and
    older devices, uncompressed textures can have a maximum size of 1024x1024\. On
    newer devices that support OpenGL ES 2.0, starting with the iPhone 3GS, uncompressed
    textures can be up to 2048x2048 pixels. Textures are only loaded into memory in
    powers of 2\. Taking all of this into account, Zwoptex limits the canvas sizes
    you can use.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您在 Zwoptex 中所见，画布的宽度和高度只能达到 2048 像素。此外，它们只能是 2 的幂。在 iPhone 3G 及更早的设备上，未压缩的纹理最大尺寸为
    1024x1024。在支持 OpenGL ES 2.0 的新设备上，从 iPhone 3GS 开始，未压缩的纹理可以达到 2048x2048 像素。纹理仅在
    2 的幂次下加载到内存中。考虑到所有这些因素，Zwoptex 限制了您可以使用画布的大小。
- en: 'Importing sprites:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入精灵：
- en: Sprites are imported onto the canvas by simply dragging individual files from
    your Finder onto the canvas. These will be positioned on top of each other. They
    will also be outlined with a red box.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 精灵通过简单地从Finder中将单个文件拖放到画布上导入到画布中。它们将重叠在一起。它们也将用红色框勾勒出来。
- en: 'Applying a layout:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用布局：
- en: After adjusting any settings under the Layout heading we can click the Apply
    button. This will re-arrange the sprites to fit the canvas size. If all the sprites
    do not fit, some will still have that red box surrounding them. This indicates
    an overlap.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在布局标题下调整任何设置后，我们可以点击应用按钮。这将重新排列精灵以适应画布大小。如果所有精灵都无法适应，一些精灵仍然会有红色的框包围着。这表示有重叠。
- en: 'Publishing:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布：
- en: Once our sprites are properly arranged in a sheet and our Zwoptex file is saved,
    we can publish our sheet. This creates a PLIST file and a PNG file. By adding
    these to our XCode Cocos2d project, we can now use them in our app.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦我们的精灵在图纸上正确排列，并且我们的Zwoptex文件已保存，我们就可以发布我们的图集。这将创建一个PLIST文件和一个PNG文件。通过将这些文件添加到我们的XCode
    Cocos2d项目中，我们现在可以在我们的应用程序中使用它们。
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Zwoptex uses offsets and other positioning tricks designed to squeeze as many
    sprites into a sheet as possible.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Zwoptex使用偏移和其他定位技巧，旨在尽可能多地挤压精灵到一个图集中。
- en: See also...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见...
- en: A popular alternative to Zwoptex is **TexturePacker**. It can be downloaded
    from [http://www.texturepacker.com/](http://www.texturepacker.com/).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Zwoptex的一个流行替代品是**TexturePacker**。可以从[http://www.texturepacker.com/](http://www.texturepacker.com/)下载。
- en: Creating levels using Tiled
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Tiled创建层级
- en: One of the most important weapons in the game developer's arsenal is the **level
    editor**. In this recipe we will create a level using the *Tiled* level editor.
    We will then create a simple top-down world using this level.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发者工具箱中最重要的武器之一是**层级编辑器**。在这个菜谱中，我们将使用*Tiled*层级编辑器创建一个层级。然后我们将使用这个层级创建一个简单的俯视世界。
- en: '![Creating levels using Tiled](img/4002_09_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![使用Tiled创建层级](img/4002_09_03.jpg)'
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Please refer to the project `RecipeCollection03` for full working code of this
    recipe.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅项目`RecipeCollection03`以获取此菜谱的完整工作代码。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下代码：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe loads a TMX `tilemap` created using the **Tiled** application.
    It then creates a 2.5D game world using information from the `tilemap`. This is
    done as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱加载了一个使用**Tiled**应用程序创建的TMX `tilemap`。然后它使用`tilemap`中的信息创建一个2.5D游戏世界。这是按照以下步骤完成的：
- en: 'Installing Tiled:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Tiled：
- en: First we must download and install the `Tiled` application. Go to [http://www.mapeditor.org/](http://www.mapeditor.org/)
    and click on the **Tiled Qt 0.7.0 for Mac OS X** link. Drag the application to
    your `Applications` folder.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们必须下载并安装`Tiled`应用程序。访问[http://www.mapeditor.org/](http://www.mapeditor.org/)并点击**Tiled
    Qt 0.7.0 for Mac OS X**链接。将应用程序拖到您的`Applications`文件夹中。
- en: 'Creating a new level:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新层级：
- en: Open up Tiled and click **File | New** to create a new level.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开Tiled并点击**文件 | 新建**以创建一个新的层级。
- en: 'Choosing a perspective:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择视角：
- en: As you might be able to see from the screenshots of `Tiled` on the website,
    there are two types of perspectives that can be chosen. When you first click **File
    | New** in the **Tiled** menu, you will have to make the choice between **Orthagonal**
    and **Isometric perspectives**. Each perspective creates a different visual style
    and world object layout. In our example, we chose **Orthagonal** as it's a little
    more straightforward.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您从网站上的`Tiled`截图中所见，可以选择两种视角类型。当您第一次点击**文件 | 新建**在**Tiled**菜单中，您将不得不在**正交**和**等距**视角之间做出选择。每种视角都创建不同的视觉风格和世界对象布局。在我们的例子中，我们选择了**正交**，因为它更直接一些。
- en: 'Map size:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地图大小：
- en: The map size is measured in tiles. For our map we chose the size of 50x50.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 地图大小以瓦片为单位测量。对于我们的地图，我们选择了50x50的大小。
- en: 'Tile size:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 瓦片大小：
- en: In `Tiled`, the tile size can be variable. In this example we have chosen the
    default size of 32x32 pixels. This means we can keep our art assets nice and small.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Tiled`中，瓦片大小可以是可变的。在这个例子中，我们选择了默认大小32x32像素。这意味着我们可以保持我们的艺术资产小巧。
- en: Creating a `tileset:`
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`tileset`：
- en: 'The primary resource used in `Tiled` is the `tileset`. This is a sprite sheet
    created according to the tile size chosen in Tiled. To create this sprite sheet,
    open up Zwoptex, create a new file, and set `Padding` to 0px. Then, drag 32x32
    pixel images onto the sprite sheet. This PNG file is the tileset file. Instead
    of using a corresponding PLIST file to manage sprite information, `Tiled` simply
    uses position information to match a sprite to a tile. For this recipe our `tileset`
    looks like the following:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `Tiled` 中，主要使用的资源是 `tileset`。这是一个根据在 Tiled 中选择的瓦片大小创建的精灵表。要创建此精灵表，打开 Zwoptex，创建一个新文件，并将
    `Padding` 设置为 0px。然后，将 32x32 像素的图像拖放到精灵表上。此 PNG 文件是瓦片集文件。与使用相应的 PLIST 文件来管理精灵信息不同，`Tiled`
    简单地使用位置信息来匹配精灵和瓦片。对于这个配方，我们的 `tileset` 看起来如下：
- en: '![How it works...](img/4002_09_04.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何工作...](img/4002_09_04.jpg)'
- en: So, make sure your tileset is correct before loading it into your level. Finally,
    click **Map | New Tileset**. Name your tileset and specify your PNG sprite sheet.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，在将其加载到级别之前，请确保您的瓦片集是正确的。最后，点击 **地图 | 新瓦片集**。命名您的瓦片集并指定您的 PNG 精灵表。
- en: 'Tile layers:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 瓦片层：
- en: Tiled supports the creation of multiple overlapping layers. Typically, these
    layers are used to place graphical elements over one another. In addition to this,
    layers can specify information. In our level, red colored areas can be considered
    "collidable". This will be processed programmatically.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Tiled 支持创建多个重叠层。通常，这些层用于将图形元素重叠放置。除此之外，层还可以指定信息。在我们的级别中，红色区域可以被认为是“可碰撞的”。这将通过程序处理。
- en: '**Object layers:**'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**对象层：**'
- en: In addition to tiles, **Objects** can be placed to indicate non-tile based data
    like item locations. In our level, we've placed a "spawn point" object to indicate
    where the player should spawn. For an example usage of this please refer to the
    `tilemap.tmx` file located in the `Resources/Tilemaps` folder of `RecipeCollection03,
    CCTMXTiledMap`.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了瓦片之外，**对象**也可以放置以指示非瓦片数据，如物品位置。在我们的级别中，我们放置了一个“生成点”对象来指示玩家应该生成的位置。有关此用法的示例，请参阅位于
    `RecipeCollection03, CCTMXTiledMap` 的 `Resources/Tilemaps` 文件夹中的 `tilemap.tmx`
    文件。
- en: 'Once our map is complete we will run the following code snippet to load `tilemap`
    assets into the game:'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦我们的地图完成，我们将运行以下代码片段来将 `tilemap` 资源加载到游戏中：
- en: '[PRE1]'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A `CCTMXTiledMap` object contains references to each tile as a `CCSprite` object
    as well as a number of structures to organize these files.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CCTMXTiledMap` 对象包含对每个瓦片的引用，作为一个 `CCSprite` 对象，以及一些结构来组织这些文件。'
- en: CCTMXTileLayer
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CCTMXTileLayer
- en: 'To access a tile layer we use the following code:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要访问瓦片层，我们使用以下代码：
- en: '[PRE2]'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To loop through all `CCTMXLayer` objects, we can also use the following lines:'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要遍历所有 `CCTMXLayer` 对象，我们也可以使用以下行：
- en: '[PRE3]'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Accessing a tile''s sprite involves calling the `tileAt` method:'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问瓦片的精灵涉及到调用 `tileAt` 方法：
- en: '[PRE4]'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These sprites are created lazily when `tileAt` is called. For more information,
    please refer to the Cocos2d-iPhone API reference page for `CCTMXTiledMap`.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用 `tileAt` 方法时，这些精灵会懒加载创建。更多信息，请参考 Cocos2d-iPhone API 参考页面中的 `CCTMXTiledMap`。
- en: 'Re-ordering tiles:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新排序瓦片：
- en: For the purposes of our example, we loop through all tile sprites and re-order
    them to create the proper perspective illusion. This simply involves calling the
    `reorderChild` method on `tileMap` based on each tile's Y position.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，为了创建正确的透视错觉，我们将遍历所有瓦片精灵并重新排序它们。这仅仅涉及到根据每个瓦片的 Y 位置在 `tileMap` 上调用 `reorderChild`
    方法。
- en: 'Adding Box2D geometry:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 Box2D 几何形状：
- en: 'To create physical level geometry we process the "Collidable" layer and create
    a properly sized box object for each tile we find:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建物理级别几何形状，我们处理“可碰撞”层并为每个找到的瓦片创建适当大小的盒子对象：
- en: '[PRE5]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using this special `collidableLayer` allows the level art to line up exactly
    where we want things to be collidable. This creates the illusion that the base
    of each tree is collidable while the branches are not.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用这个特殊的 `collidableLayer` 允许级别艺术与我们要使其可碰撞的位置完全对齐。这产生了这样的错觉：每棵树的底部是可碰撞的，而树枝不是。
- en: 'Processing level objects:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理级别对象：
- en: 'Level objects are processed using the `CCTMXObjectGroup` class:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 级别对象使用 `CCTMXObjectGroup` 类进行处理：
- en: '[PRE6]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we process our `SpawnPoint` object:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们处理我们的 `SpawnPoint` 对象：
- en: '[PRE7]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can now spawn the player at this point on the map.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在可以在地图上的这个位置生成玩家。
- en: See also...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见...
- en: For more information about using `Tiled` please refer to the `Tiled` wiki located
    at [http://github.com/bjorn/tiled/wiki](http://github.com/bjorn/tiled/wiki).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于使用 `Tiled` 的信息，请参考位于 [http://github.com/bjorn/tiled/wiki](http://github.com/bjorn/tiled/wiki)
    的 `Tiled` 维基。
- en: Creating levels using JSONWorldBuilder
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JSONWorldBuilder 创建层级
- en: Creating a game level using tiles is a technique that works well for many games.
    In this recipe, however, we will create a level in a more non-linear fashion using
    the **JSONWorldBuilder** level editor.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用瓦片创建游戏关卡是一种适用于许多游戏的技巧。然而，在本菜谱中，我们将使用**JSONWorldBuilder**关卡编辑器以更非线性的方式创建一个关卡。
- en: '![Creating levels using JSONWorldBuilder](img/4002_09_05.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSONWorldBuilder创建关卡](img/4002_09_05.jpg)'
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Please refer to the project `RecipeCollection03` for full working code of this
    recipe.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考项目`RecipeCollection03`以获取此菜谱的完整工作代码。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下代码：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'This recipe loads a JSON level file created by JSONWorldBuilder:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱加载由JSONWorldBuilder创建的JSON关卡文件：
- en: 'Installing JSONWorldBuilder:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装JSONWorldBuilder：
- en: First, we must download and install the JSONWorldBuilder application. The source
    for JSONWorldBuilder can be found at `http://github.com/n8dogg/JSONWorldBuilder`.
    To download the latest `build` click on **Downloads**, download the source archive,
    unzip it, and finally look in the builds folder. Here you will find an archive
    containing the latest JSONWorldBuilder application. Drag the application to your
    `Applications` folder.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们必须下载并安装JSONWorldBuilder应用程序。JSONWorldBuilder的源代码可以在`http://github.com/n8dogg/JSONWorldBuilder`找到。要下载最新的`build`版本，请点击**下载**，下载源代码压缩包，解压它，最后查看build文件夹。在这里，你会找到一个包含最新JSONWorldBuilder应用程序的压缩包。将应用程序拖到你的`Applications`文件夹中。
- en: 'Creating a new level:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新关卡：
- en: Opening JSONWorldBuilder automatically creates a new level. To clear the level
    you are currently working on, choose **File | New Map**.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动打开JSONWorldBuilder会创建一个新关卡。要清除你目前正在工作的关卡，请选择**文件 | 新地图**。
- en: 'Specifying a resources folder:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定资源文件夹：
- en: 'JSONWorldBuilder is designed to work with PNG image files as well as PNG/PLIST
    combinations. When you specify a resource folder we are telling the editor where
    these resources live. Click **Resources | Specify Resource** folder. This will
    bring up a prompt. Once you specify a folder the Sprites window will fill with
    sprites. Click on a sprite sheet name to hide/show individual sprites:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: JSONWorldBuilder设计用于与PNG图像文件以及PNG/PLIST组合一起工作。当你指定资源文件夹时，我们告诉编辑器这些资源所在的位置。点击**资源
    | 指定资源**文件夹。这将弹出一个提示。一旦指定了一个文件夹，精灵窗口将填充精灵。点击精灵图集名称以隐藏/显示单个精灵：
- en: '![How it works...](img/4002_09_06.jpg)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何工作...](img/4002_09_06.jpg)'
- en: Clicking on an individual sprite will select it for use in the editor.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击单个精灵将选择它用于编辑器。
- en: 'Sprite Stamp:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 精灵印章：
- en: Once a sprite is selected in the **Sprites** window, click the **Sprite Stamp**
    tool on the left menu. Now, by clicking the canvas you can stamp that sprite repeatedly
    onto the canvas.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在**精灵**窗口中选择一个精灵后，点击左侧菜单中的**精灵印章**工具。现在，通过点击画布，你可以将选定的精灵重复地印在画布上。
- en: 'Sprite Selector:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 精灵选择器：
- en: To move the sprites that you've just stamped around, click on the **Sprite Selector**
    tool. Now, click and drag a sprite on the canvas to move it.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要移动你刚刚印章的精灵，点击**精灵选择器**工具。现在，点击并拖动画布上的精灵以移动它。
- en: 'Draw Tiled Sprite:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制瓦片精灵：
- en: To draw a tiled sprite, click the **Draw Tiled Sprite** tool. Now click and
    drag your mouse to create a rectangular tiled area with the selected texture.
    In the editor you can use both sprite sheets or single image files as tiled textures.
    However, keep in mind that the `TexturedPolygon` class we've been using requires
    a single image file to work properly.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要绘制瓦片精灵，点击**绘制瓦片精灵**工具。现在点击并拖动鼠标以创建一个带有选定纹理的矩形瓦片区域。在编辑器中，你可以使用精灵图集或单个图像文件作为瓦片纹理。然而，请注意，我们一直在使用的`TexturedPolygon`类需要单个图像文件才能正常工作。
- en: 'Draw Mask:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制遮罩：
- en: Now, that we have a tiled sprite on the canvas, we can mask it. This means we
    will cut it into a shape. Select the tiled sprite you've placed on the canvas
    using the **Sprite** tool. Now select the **Draw Mask** tool. Click once on or
    around the tiled sprite to start the mask creation process. This involves creating
    a polygon with successive mouse clicks, finally ending where you initially clicked
    to complete the polygon.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们在画布上有一个瓦片精灵，我们可以对其进行遮罩。这意味着我们将它切割成形状。使用**精灵**工具选择你放置在画布上的瓦片精灵。现在选择**绘制遮罩**工具。在瓦片精灵上或其周围单击一次以开始遮罩创建过程。这涉及到通过连续的鼠标点击创建多边形，最后回到你最初点击的位置以完成多边形。
- en: 'Lines, Points, and Polygons:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线条、点和多边形：
- en: Spatial information can be added to your map using lines, points, and polygons.
    These are created using the **Create Line, Create Point**, and **Create Polygon**
    tools respectively. Also, note that you need to click and drag to create a line.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用线条、点和多边形将空间信息添加到您的地图中。这些分别使用 **创建线条、创建点** 和 **创建多边形** 工具创建。请注意，您需要点击并拖动来创建线条。
- en: 'Shape Selector:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 形状选择器：
- en: The **Shape Selector** tool will allow you to select and reposition shapes on
    the canvas.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**形状选择器** 工具将允许您在画布上选择和重新定位形状。'
- en: 'Move Camera, Zooming, and Canvas Resize:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动相机、缩放和画布调整大小：
- en: The **Move Camera** tool allows us to pan the position of the camera. In the
    **Nav** window on the right you can click the + or - buttons to zoom the camera.
    You can also resize the canvas.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**移动相机** 工具允许我们平移相机的位置。在右侧的 **Nav** 窗口中，您可以点击 + 或 - 按钮来缩放相机。您还可以调整画布大小。'
- en: 'Map Object window:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地图对象窗口：
- en: Inside the **Map Object** window you can specify information like object position
    and tiled object size. Here, you can also add meta tags in the form of a key/value
    dictionary, flip images on the X and/or X axis, and re-arrange objects on the
    Z axis.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 **地图对象** 窗口中，您可以指定诸如对象位置和瓦片对象大小等信息。在这里，您还可以以键/值字典的形式添加元标签，在 X 和/或 Y 轴上翻转图像，以及在
    Z 轴上重新排列对象。
- en: 'Loading our map:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载我们的地图：
- en: 'Once we have our map created we can go ahead and load it in Cocos2d. We use
    `CJSONDeserializer` to go through our map file and process data. After processing
    some initial information the loadMap method calls four different methods depending
    on map node types:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦我们创建了地图，我们就可以继续在 Cocos2d 中加载它。我们使用 `CJSONDeserializer` 遍历我们的地图文件并处理数据。在处理一些初始信息后，`loadMap`
    方法根据地图节点类型调用四个不同的方法：
- en: '[PRE9]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each method processes the appropriate node, and attaches sprite information
    to the `gameNode` object or drawing information to the `drawLayer`. Metadata is
    also handled in these methods, though it could be handled in the `loadMap` method
    as well.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个方法处理适当的节点，并将精灵信息附加到 `gameNode` 对象或绘图信息附加到 `drawLayer`。元数据也在这类方法中处理，尽管它也可以在
    `loadMap` 方法中处理。
- en: Creating scenes with CocosBuilder
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CocosBuilder 创建场景
- en: Levels are not the only things that can be built using a **WYSIWYG** editor.
    In this recipe we will craft a simple menu scene using **CocosBuilder**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 并非只有级别可以使用 **所见即所得** 编辑器构建。在这个配方中，我们将使用 **CocosBuilder** 创建一个简单的菜单场景。
- en: '![Creating scenes with CocosBuilder](img/4002_09_07.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![使用 CocosBuilder 创建场景](img/4002_09_07.jpg)'
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Please refer to the project `RecipeCollection03` for full working code of this
    recipe.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅项目 `RecipeCollection03` 以获取此配方的完整工作代码。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下代码：
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe loads a CocosBuilder CCB scene along with its associated assets:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方加载 CocosBuilder CCB 场景及其相关资源：
- en: 'Installing CocosBuilder:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 CocosBuilder：
- en: First, we must download and install the **CocosBuilder** application. Go to
    `http://cocosbuilder.com/?page_id=11` and click on the **Download CocosBuilder
    Application** link. Drag the application to your `Applications` folder.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们必须下载并安装 **CocosBuilder** 应用程序。转到 `http://cocosbuilder.com/?page_id=11`
    并点击 **下载 CocosBuilder 应用程序** 链接。将应用程序拖到您的 `Applications` 文件夹中。
- en: 'Starting out:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始：
- en: CocosBuilder allows us to create a hierarchical layout of objects derived from
    CCNode. Available node types include `CCLayer, CCSprite, CCMenu`, and `CCParticleSystem`.
    The file assets for these nodes are expected to be in the same folder as the CCB
    file itself. So, before creating a new CCB file, we must create a folder and fill
    it with assets we'd like to use. When this is finished click **File | New**. Choose
    **CCNode** for the **root object type**. Save this file into the folder you created.
    If you would like to add more assets later, simple copy them into the folder and
    click **Object | Reload Assets** .
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CocosBuilder 允许我们创建从 CCNode 派生的对象分层布局。可用的节点类型包括 `CCLayer, CCSprite, CCMenu`
    和 `CCParticleSystem`。这些节点的文件资源应与 CCB 文件本身位于同一文件夹中。因此，在创建新的 CCB 文件之前，我们必须创建一个文件夹并填充我们想要使用的资源。完成后，点击
    **文件 | 新建**。选择 **CCNode** 作为 **根对象类型**。将此文件保存到您创建的文件夹中。如果您以后想添加更多资源，只需将它们复制到文件夹中，然后点击
    **对象 | 重新加载资源**。
- en: 'Adding objects:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对象：
- en: To add an object as a child of the root `CCNode` object, click on the root node
    and then click **Object | Add Object as Child**. Then click the object type you
    would like to add.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将对象作为根 `CCNode` 对象的子对象添加，请单击根节点，然后单击 **对象 | 添加对象为子对象**。然后单击您想要添加的对象类型。
- en: 'Adding a CCSprite object:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 CCSprite 对象：
- en: In our example, we've added three `CCSprite` objects. Sprite objects are always
    added without a corresponding texture file. After adding a black sprite, choose
    your sprite file/sheet and corresponding sprite name on the right under the **CCSprite**
    heading.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们添加了三个`CCSprite`对象。精灵对象总是添加而没有相应的纹理文件。在添加黑色精灵后，选择你的精灵文件/图集和对应的精灵名称，在**CCSprite**标题下的右侧。
- en: 'Adding a `CCMenuItemImage` with callback:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加带有回调的`CCMenuItemImage`：
- en: We also add a `CCMenu` object and a child `CCMenuItemImage`. On the `CCMenuItemImage`
    object we specify a callback. The method back will be called on the "Owner" object.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还添加了一个`CCMenu`对象和一个子`CCMenuItemImage`。在`CCMenuItemImage`对象上，我们指定了一个回调。当"所有者"对象返回时，将调用该方法。
- en: 'Loading our scene:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载我们的场景：
- en: 'Inside of Cocos2d we use the following lines to load the scene file, set the
    scene''s "owner", and to finally push the scene:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Cocos2d中，我们使用以下行来加载场景文件，设置场景的"所有者"，并最终推送场景：
- en: '[PRE11]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Clicking on the **Back** button in the scene calls the back method in our recipe
    file and the scene is then popped. Using these tools you can quickly mock up game
    menus and other stand-alone scenes.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在场景中点击**返回**按钮会调用我们配方文件中的返回方法，然后场景被弹出。使用这些工具，你可以快速搭建游戏菜单和其他独立场景。
- en: Using Cocos2d-X
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cocos2d-X
- en: Cocos2d is not limited to iOS development. **Cocos2d-X** is a **C++** port of
    Cocos2d-iPhone. Using Cocos2d-X we can develop games for many platforms including
    Mac, PC, Linux, Android, and more. In this recipe, we will install Cocos2d-X XCode
    templates, create a simple Cocos2d-X application, and introduce the Cocos2d-X
    testbed.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d不仅限于iOS开发。**Cocos2d-X**是Cocos2d-iPhone的**C++**移植版。使用Cocos2d-X，我们可以为包括Mac、PC、Linux、Android等多个平台开发游戏。在本教程中，我们将安装Cocos2d-X
    XCode模板，创建一个简单的Cocos2d-X应用程序，并介绍Cocos2d-X测试平台。
- en: '![Using Cocos2d-X](img/4002_09_08.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![使用Cocos2d-X](img/4002_09_08.jpg)'
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Please refer to the project `Ch8_Cocos2d-X` for full working code of this recipe.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考项目`Ch8_Cocos2d-X`以获取本教程的完整工作代码。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下代码：
- en: '[PRE12]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe shows us a basic example of Cocos2d-X in action, which is done
    as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了Cocos2d-X的基本用法示例，操作如下：
- en: 'Installing Cocos2d-X XCode templates:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Cocos2d-X XCode模板：
- en: 'First, we must download the latest version of Cocos2d-X and install the XCode
    template. Go to [http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download](http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download)
    and download the latest source package. After unzipping the package you''ll find
    tools to create projects for multiple development environments. To install the
    XCode templates, open the **Terminal**, navigate to the Cocos2d-X folder, and
    run the following command:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们必须下载最新的Cocos2d-X版本并安装XCode模板。访问[http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download](http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download)并下载最新的源代码包。解压包后，你会找到用于创建多个开发环境项目的工具。要安装XCode模板，打开**终端**，导航到Cocos2d-X文件夹，并运行以下命令：
- en: '[PRE13]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will install the templates.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将安装模板。
- en: 'Creating a Cocos2d-X project:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Cocos2d-X项目：
- en: To create a project with the newly installed XCode template click **File | New
    | New** Project. Under iOS you should see `cocos2d-x`. Under this there are a
    few templates for Box2D, Chipmunk, and Lua integration. Choose one of these.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用新安装的XCode模板创建项目，请点击**文件 | 新建 | 新建**项目。在iOS下，你应该能看到`cocos2d-x`。在此之下，有一些用于Box2D、Chipmunk和Lua集成的模板。选择其中一个。
- en: 'Using Cocos2d-X:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Cocos2d-X：
- en: As you can see in the preceding code, `Cocos2d-X` is a full port of Cocos2d-iPhone
    to C++. For more information about `Cocos2d-X`, please consult the **Cocos2d-X
    | Doxygen** documentation located at `http://www.cocos2d-x.org/embedded/cocos2d-x/classes.html.`
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前述代码所示，`Cocos2d-X`是将Cocos2d-iPhone完整移植到C++的版本。有关`Cocos2d-X`的更多信息，请参阅位于`http://www.cocos2d-x.org/embedded/cocos2d-x/classes.html`的**Cocos2d-X
    | Doxygen**文档。
- en: 'The Cocos2d-X testbed:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cocos2d-X测试平台：
- en: Inside the tests folder you will find a number of test projects for different
    operating systems. In the `test.ios` folder open the project `test.xcodeproj`.
    This is a thorough port of the Cocos2d testbed with the addition of a simple menu
    system to make navigation between the examples much easier.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在测试文件夹中，你可以找到针对不同操作系统的多个测试项目。在`test.ios`文件夹中打开项目`test.xcodeproj`。这是Cocos2d测试平台的彻底移植，增加了简单的菜单系统，使得在示例之间导航更加容易。
- en: Using Cocos3d
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cocos3d
- en: Cocos2d is such a versatile framework that it has even been ported and extended
    into a **3D game engine** appropriately titled **Cocos3d**. In this recipe we
    will install Cocos3d XCode templates, create a sample Cocos3d application, and
    introduce the Cocos3d `demo mash-up` project.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d 是一个如此通用的框架，它甚至已经被移植并扩展为一个名为 **Cocos3d** 的 **3D 游戏引擎**。在这个配方中，我们将安装 Cocos3d
    XCode 模板，创建一个示例 Cocos3d 应用程序，并介绍 Cocos3d 的 `demo 混合项目`。
- en: '![Using Cocos3d](img/4002_09_09.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Cocos3d](img/4002_09_09.jpg)'
- en: Getting ready
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Please refer to the project `Ch8_Cocos3d` for full working code of this recipe.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 `Ch8_Cocos3d` 项目以获取本配方的完整工作代码。
- en: How to do it...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下代码：
- en: '[PRE14]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe shows us a basic example of Cocos3d in action.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了 Cocos3d 的基本应用示例。
- en: 'Installing Cocos3d XCode templates:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Cocos3d XCode 模板：
- en: 'First, we must download the latest version of Cocos3d and install the XCode
    template. Go to `http://brenwill.com/cocos3d/`. On the right hand side you should
    see the latest Cocos3d source package. Download and unzip the package. To install
    the XCode templates, open the Terminal, navigate to the recently unzipped Cocos3d
    folder, and run the following command:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们必须下载最新的 Cocos3d 版本并安装 XCode 模板。访问 `http://brenwill.com/cocos3d/`。在右侧，你应该能看到最新的
    Cocos3d 源代码包。下载并解压该包。要安装 XCode 模板，打开终端，导航到最近解压的 Cocos3d 文件夹，并运行以下命令：
- en: '[PRE15]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will install the templates.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将安装模板。
- en: 'Creating a Cocos3d project:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Cocos3d 项目：
- en: To create a project with the newly installed XCode template click **File | New
    | New Project**. Under iOS you should see cocos3d. Under this choose **cocos3d
    Application**.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用新安装的 XCode 模板创建项目，请点击 **文件 | 新建 | 新建项目**。在 iOS 下，你应该能看到 cocos3d。在此选择 **cocos3d
    应用程序**。
- en: 'Using Cocos3d:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Cocos3d：
- en: In the simple example we created we see a 3D font rendering that reads **"hello,
    world"**. This 3D model is a PowerVR POD file created in either Maya or 3DS Max
    and exported using PVRGeoPOD. For more information about Cocos3d, please consult
    the Cocos3d documentation located (as of this writing) at `http://brenwill.com/docs/cocos3d/0.6.0-sp/api/`.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们创建的简单示例中，我们看到一个读取 **"hello, world"** 的 3D 字体渲染。这个 3D 模型是一个在 Maya 或 3DS Max
    中创建的 PowerVR POD 文件，并使用 PVRGeoPOD 导出。有关 Cocos3d 的更多信息，请参阅位于（截至本文撰写时）`http://brenwill.com/docs/cocos3d/0.6.0-sp/api/`
    的 Cocos3d 文档。
- en: 'CC3DemoMashUp:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CC3DemoMashUp：
- en: Inside the source package you will find the XCode workspace file `cocos3d.xcworkspace`.
    Open this and you will find the `CC3DemoMashUp` target. The mash-up contains a
    number of advanced examples using mesh models, cameras, lights, bump mapping,
    animation, and more.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在源代码包中，你可以找到 XCode 工作空间文件 `cocos3d.xcworkspace`。打开它，你会找到 `CC3DemoMashUp` 目标。这个混合体包含了许多使用网格模型、摄像机、灯光、凹凸贴图、动画等高级示例。
- en: Releasing your app
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布你的应用
- en: When you are finally finished creating your app it's time to release it on Apple's
    App Store. In this recipe we will go through this process.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当你最终完成创建你的应用后，就是时候在 Apple 的 App Store 上发布它了。在这个配方中，我们将介绍这个过程。
- en: '![Releasing your app](img/4002_09_10.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![发布你的应用](img/4002_09_10.jpg)'
- en: Getting ready
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The scope of this recipe is rather large. Because of this we will provide a
    rough process outline along with supporting documentation, to help you publish
    your app to the App Store. These steps are mainly based on the guide in the **Distribution**
    section of the **iOS Provisioning Portal**. You need a valid **iOS Developer account**
    to access this guide. Another great guide can be found here (with a valid iOS
    Developer account): [http://adcdownload.apple.com/ios/ios_developer_program_user_guide/
    ios_developer_program_user_guide__standard_program_v2.7__final_9110.pdf](http://adcdownload.apple.com/ios/ios_developer_program_user_guide/).'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方的范围相当广泛。因此，我们将提供一个大致的过程概述以及支持性文档，以帮助您将应用发布到 App Store。这些步骤主要基于 **iOS 配置文件门户**
    中 **分发** 部分的指南。您需要一个有效的 **iOS 开发者账号** 来访问此指南。另一个优秀的指南可以在以下位置找到（需要有效的 iOS 开发者账号）：[http://adcdownload.apple.com/ios/ios_developer_program_user_guide/
    ios_developer_program_user_guide__standard_program_v2.7__final_9110.pdf](http://adcdownload.apple.com/ios/ios_developer_program_user_guide/)。
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once your application is complete, it''s time to start preparing your app for
    the App Store:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用完成，就是时候开始为 App Store 准备您的应用了：
- en: 'iOS Provisioning Portal:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: iOS 配置文件门户：
- en: The iOS Provisioning Portal is where development certificates and provisioning
    profiles are created and/or managed, often in conjunction with XCode. The portal
    can be found by going to `http://developer.apple.com/ios/manage/overview/index.action`
    or by going to `http://developer.apple.com/devcenter/ios/index.action` and clicking
    on iOS **Provisioning Portal**. Once you are there, go to the **App IDs** section
    of the portal.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: iOS配置文件门户是创建和管理开发证书和配置文件的地方，通常与XCode一起使用。您可以通过访问`http://developer.apple.com/ios/manage/overview/index.action`或通过访问`http://developer.apple.com/devcenter/ios/index.action`并点击iOS
    **配置文件门户**来找到该门户。一旦您在那里，请转到门户的**App IDs**部分。
- en: 'Creating an explicit App ID:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建显式的App ID：
- en: Up until this point you may have been provisioning your app onto a device using
    an **App ID** with an asterisk as the ID suffix. This wildcard allows easy ad
    hoc publishing of any app onto a registered device. However, if we want to publish
    our app to the App Store and have features like `Push Notification` enabled, we
    need to create an explicit App ID. Click **New App ID** and instead of entering
    a * under **App ID Suffix**, enter a proper reverse-domain name style string.
    An example of this would be `com.domainname.appname`. This is your **Bundle ID**.
    Once this is finished, go to the **Distribution** section of the iOS Provisioning
    Portal.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，您可能一直使用带有星号作为ID后缀的**App ID**将应用程序配置到设备上。此通配符允许轻松地将任何应用程序发布到已注册的设备。然而，如果我们想将我们的应用程序发布到App
    Store并启用如`Push Notification`等功能，我们需要创建一个显式的App ID。点击**新建App ID**，并在**App ID后缀**下输入一个正确的反向域名样式字符串，而不是输入一个*。例如，这将是`com.domainname.appname`。这是您的**包标识符**。完成此操作后，请转到iOS配置文件门户的**分发**部分。
- en: 'Obtaining your distribution certificate:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取您的分发证书：
- en: This is where you must begin to follow the on-screen instructions carefully.
    Click **Obtaining your iOS Distribution Certificate** to show the first set of
    instructions. Here, you will be told to generate a **Certificate Signing Request**
    using the **Keychain Access** app on your Mac. This request will then be submitted
    online. Once approved you can then download and install your distribution certificate.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是你必须开始仔细遵循屏幕上指示的地方。点击**获取您的iOS分发证书**以显示第一组指示。在这里，您将被告知使用Mac上的**钥匙串访问**应用程序生成一个**证书签名请求**。然后，此请求将在线提交。一旦批准，您就可以下载并安装您的分发证书。
- en: 'Creating a Distribution Provisioning Profile:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建分发配置文件：
- en: Next, we must create a new "provisioning profile" specifically for distribution
    on the App Store. This is handled under the **Provisioning** tab in the iOS Provisioning
    Portal. Remember that this profile will not allow you to push your app onto a
    device directly. For that, look into **Ad Hoc Distribution**.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们必须创建一个新的“配置文件”，专门用于在App Store上的分发。这可以在iOS配置文件门户的**配置**选项卡下处理。请记住，此配置文件不会允许您直接将应用推送到设备。为此，请查看**Ad
    Hoc分发**。
- en: 'Building your app for distribution:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为分发构建您的应用程序：
- en: Once your **Distribution Provisioning Profile** is installed you must create
    a new **Build Configuration** for distribution in XCode. This configuration specifies
    the necessary certificate and provisioning profile as well as the specific **Bundle
    ID** created earlier. This step also takes you through setting up your Entitlements.plist
    file. Finally, you build your application and zip it up for transport.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦您的**分发配置文件**安装完毕，您必须在XCode中创建一个新的**构建配置**以进行分发。此配置指定了必要的证书和配置文件以及之前创建的特定**包标识符**。此步骤还将引导您设置Entitlements.plist文件。最后，您构建应用程序并将其压缩以进行传输。
- en: 'Adding your application in iTunes Connect:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在iTunes Connect中添加您的应用：
- en: As we've discussed previously, **iTunes Connect** is a set of tools that help
    developers publish their apps and manage app information. You can log into iTunes
    Connect by going to [http://itunesconnect.apple.com/.](http://itunesconnect.apple.com/.)
    Once you've logged into iTunes Connect you need to click on **Manage Your Applications**.
    Then, click **Add New App** in the top-left to begin adding a new application.
    Follow the on-screen instructions. This will include uploading an app icon, images,
    and description. When you are finished, go back to the **Manage Your Apps** page
    and select the app you just created. Finally, click **Ready to Upload Binary**
    and fill out any more necessary information. Your app should now show the **Waiting
    for Upload** state.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如我们之前所讨论的，**iTunes Connect**是一套工具，帮助开发者发布他们的应用程序并管理应用程序信息。您可以通过访问[http://itunesconnect.apple.com/](http://itunesconnect.apple.com/)来登录iTunes
    Connect。一旦您登录到iTunes Connect，您需要点击**管理您的应用程序**。然后，在左上角点击**添加新应用**以开始添加新的应用程序。按照屏幕上的说明操作。这包括上传应用程序图标、图片和描述。完成之后，返回到**管理您的应用程序**页面，选择您刚刚创建的应用程序。最后，点击**准备上传二进制文件**并填写任何必要的信息。现在，您的应用程序应该显示为**等待上传**状态。
- en: 'Using Application Loader:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用应用加载器：
- en: 'Now it is time to upload your application using **Application Loader**. Application
    Loader is a separate Mac application designed to handle the uploading of apps.
    Application Loader can be downloaded at [http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg](http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg)http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg.
    Once you''ve installed Application Loader, open it up and begin uploading the
    application we zipped up previously. For more information about using Application
    Loader, please consult the documentation found here: [https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf](https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf).'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在是时候使用**应用加载器**上传您的应用程序了。应用加载器是一个独立的Mac应用程序，用于处理应用程序的上传。您可以从[http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg](http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg)下载应用加载器。一旦您安装了应用加载器，打开它并开始上传我们之前打包的应用程序。有关使用应用加载器的更多信息，请参阅此处提供的文档：[https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf](https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf)。
- en: 'The App Store Approval Process:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: App Store审核流程：
- en: 'Once your app has been uploaded it gets placed in a queue to await approval
    from Apple. This process can take upwards of one week, so be patient. Once your
    app has been approved, you will see a small green light and the app state will
    say **Ready for Sale**. Give Apple another 24-48 hours and your app should be
    on the App Store! For more information about the App Store review guidelines,
    please refer to this page: [http://developer.apple.com/appstore/guidelines.html](http://developer.apple.com/appstore/guidelines.html).'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦您的应用程序上传完毕，它将被放入队列中等待苹果的审核。这个过程可能需要一周以上，所以请耐心等待。一旦您的应用程序获得批准，您将看到一个小的绿色指示灯，应用程序状态将显示为**准备销售**。给苹果24-48小时的时间，您的应用程序应该就会出现在App
    Store上！有关App Store审查指南的更多信息，请参阅此页面：[http://developer.apple.com/appstore/guidelines.html](http://developer.apple.com/appstore/guidelines.html)。
