["```swift\n    package {\n    import flash.display.MovieClip;\n     import flash.events.GeolocationEvent;\n    import flash.sensors.Geolocation; \n    public class Main extends MovieClip {\n     private var geo:Geolocation; \n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n    if(Geolocation.isSupported)\n    {\n    geo = new Geolocation();\n    geo.setRequestedUpdateInterval(1000);\n    geo.addEventListener(GeolocationEvent.UPDATE, geoUpdated);\n    }\n    }\n\n    ```", "```swift\n    private function geoUpdated(e:GeolocationEvent):void {\n    latitudeField.text = e.latitude.toString();\n    longitudeField.text = e.longitude.toString();\n    altitudeField.text = e.altitude.toString();\n    hAccuracyField.text = e.horizontalAccuracy.toString();\n    vAccuracyField.text = e.verticalAccuracy.toString();\n    timestampField.text = e.timestamp.toString();\n    }\n\n    ```", "```swift\ngeo = new Geolocation();\ngeo.setRequestedUpdateInterval(1000);\ngeo.addEventListener(GeolocationEvent.UPDATE, geoUpdated);\n\n```", "```swift\nprivate function geoUpdated(e:GeolocationEvent):void {\nlatitudeField.text = e.latitude.toString();\nlongitudeField.text = e.longitude.toString();\naltitudeField.text = e.altitude.toString();\nhAccuracyField.text = e.horizontalAccuracy.toString();\nvAccuracyField.text = e.verticalAccuracy.toString();\ntimestampField.text = e.timestamp.toString();\n}\n\n```", "```swift\n    package {\n    import flash.display.MovieClip;\n     import flash.events.GeolocationEvent;\n    import flash.sensors.Geolocation; \n    public class Main extends MovieClip {\n     private const CONVERSION_FACTOR:Number = 2.237;\n    private var geo:Geolocation; \n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n     if(Geolocation.isSupported)\n    {\n    geo = new Geolocation();\n    geo.setRequestedUpdateInterval(50);\n    geo.addEventListener(GeolocationEvent.UPDATE, geoUpdated);\n    } \n    }\n\n    ```", "```swift\n    private function geoUpdated(e:GeolocationEvent):void {\n    var metersPerSecond:Number = e.speed;\n    var milesPerHour:uint = getMilesPerHour(metersPerSecond);\n    speed1Field.text = String(metersPerSecond);\n    speed2Field.text = String(milesPerHour);\n    var heading:Number = e.heading;\n    compass.rotation = 360 - heading;\n    headingField.text = String(heading);\n    }\n\n    ```", "```swift\n    private function getMilesPerHour(metersPerSecond:Number):uint\n    {\n    return metersPerSecond * CONVERSION_FACTOR;\n    }\n\n    ```", "```swift\nvar metersPerSecond:Number = e.speed;\nvar milesPerHour:uint = getMilesPerHour(metersPerSecond);\nspeed1Field.text = String(metersPerSecond);\nspeed2Field.text = String(milesPerHour);\n\n```", "```swift\nvar heading:Number = e.heading;\ncompass.rotation = 360 - heading;\nheadingField.text = String(heading);\n\n```", "```swift\nprivate function getMilesPerHour(metersPerSecond:Number):uint\n{\nreturn metersPerSecond * CONVERSION_FACTOR;\n}\n\n```", "```swift\n    package {\n    import flash.display.MovieClip;\n     import flash.events.GeolocationEvent;\n    import flash.events.StatusEvent;\n    import flash.sensors.Geolocation; \n    public class Main extends MovieClip {\n    private var geo:Geolocation; \n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n     output.text = \"Obtaining location...\";\n    if(Geolocation.isSupported)\n    {\n    geo = new Geolocation();\n    geo.setRequestedUpdateInterval(1000);\n    geo.addEventListener(GeolocationEvent.UPDATE, geoUpdated);\n    geo.addEventListener(StatusEvent.STATUS, statusUpdated);\n    }\n    else\n    {\n    output.text = \"Geolocation is not supported.\";\n    } \n    }\n\n    ```", "```swift\n    private function geoUpdated(e:GeolocationEvent):void {\n    output.text = \"Location received.\";\n    }\n    private function statusUpdated(e:StatusEvent):void {\n    if(e.code == \"Geolocation.Muted\")\n    {\n    output.text = \"Geolocation access denied.\";\n    }\n    }\n\n    ```", "```swift\ngeo = new Geolocation();\ngeo.setRequestedUpdateInterval(1000);\ngeo.addEventListener(GeolocationEvent.UPDATE, geoUpdated);\ngeo.addEventListener(StatusEvent.STATUS, statusUpdated);\n\n```", "```swift\nprivate function statusUpdated(e:StatusEvent):void {\nif(e.code == \"Geolocation.Muted\")\n{\noutput.text = \"Geolocation access denied.\";\n}\n}\n\n```", "```swift\n    package {\n    import flash.display.MovieClip;\n     import flash.events.AccelerometerEvent;\n    import flash.sensors.Accelerometer; \n    public class Main extends MovieClip {\n    private var acc:Accelerometer; \n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n     if(Accelerometer.isSupported)\n    {\n    acc = new Accelerometer();\n    acc.setRequestedUpdateInterval(50);\n    acc.addEventListener(AccelerometerEvent.UPDATE, accUpdated);\n    } \n    }\n\n    ```", "```swift\n    private function accUpdated(e:AccelerometerEvent):void {\n    var radians:Number = Math.atan2(e.accelerationY, e.accelerationX);\n    var degrees:Number = (radians * (180 / Math.PI)) - 90;\n    arrow.rotation = -degrees;\n    accXField.text = e.accelerationX.toString();\n    accYField.text = e.accelerationY.toString();\n    accZField.text = e.accelerationZ.toString();\n    timeField.text = e.timestamp.toString();\n    rotField.text = degrees.toString();\n    }\n\n    ```", "```swift\nacc = new Accelerometer();\nacc.setRequestedUpdateInterval(50);\nacc.addEventListener(AccelerometerEvent.UPDATE, accUpdated);\n\n```", "```swift\naccXField.text = e.accelerationX.toString();\naccYField.text = e.accelerationY.toString();\naccZField.text = e.accelerationZ.toString();\ntimeField.text = e.timestamp.toString();\n\n```", "```swift\nvar radians:Number = Math.atan2(e.accelerationY, e.accelerationX);\nvar degrees:Number = (radians * (180 / Math.PI)) - 90;\narrow.rotation = -degrees;\n\n```", "```swift\nprivate const FACTOR:Number = 0.1;\nprivate var accX:Number = 0;\nprivate var accY:Number = 0;\nprivate var accZ:Number = 0;\n\n```", "```swift\naccX = (e.accelerationX * FACTOR) + (accX * (1 - FACTOR));\naccY = (e.accelerationY * FACTOR) + (accY * (1 - FACTOR));\naccZ = (e.accelerationZ * FACTOR) + (accZ * (1 - FACTOR));\n\n```", "```swift\naccX = e.accelerationX - ((e.accelerationX * FACTOR) + (accX * (1 - FACTOR)));\naccY = e.accelerationY - ((e.accelerationY * FACTOR) + (accY * (1 - FACTOR)));\naccZ = e.accelerationZ - ((e.accelerationZ * FACTOR) + (accZ * (1 - FACTOR)));\n\n```", "```swift\n    package {\n    import flash.display.MovieClip;\n     import flash.events.AccelerometerEvent;\n    import flash.sensors.Accelerometer; \n    public class Main extends MovieClip {\n     private const THRESHOLD:Number = 0.8;\n    private var acc:Accelerometer;\n    private var prevX:Number;\n    private var prevY:Number;\n    private var prevZ:Number;\n    private var startX:Number;\n    private var startY:Number; \n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n     prevX = prevY = prevZ = 0;\n    shake.gotoAndStop(1);\n    startX = shake.x;\n    startY = shake.y;\n    if(Accelerometer.isSupported)\n    {\n    acc = new Accelerometer();\n    acc.setRequestedUpdateInterval(50);\n    acc.addEventListener(AccelerometerEvent.UPDATE, accUpdated);\n    } \n    }\n\n    ```", "```swift\n    private function accUpdated(e:AccelerometerEvent):void {\n    var changeX:Number = prevX - e.accelerationX;\n    var changeY:Number = prevY - e.accelerationY;\n    var changeZ:Number = prevZ - e.accelerationZ;\n    prevX = e.accelerationX;\n    prevY = e.accelerationY;\n    prevZ = e.accelerationZ;\n    shake.x = startX + (changeX * 100);\n    shake.y = startY + (changeY * 100);\n    shake.z = (changeZ * 100);\n    if(Math.abs(changeX) > THRESHOLD || Math.abs(changeY) > THRESHOLD || Math.abs(changeZ) > THRESHOLD)\n    {\n    shake.gotoAndStop(2);\n    }\n    else\n    {\n    shake.gotoAndStop(1);\n    }\n    }\n\n    ```", "```swift\nvar changeX:Number = prevX - e.accelerationX;\nvar changeY:Number = prevY - e.accelerationY;\nvar changeZ:Number = prevZ - e.accelerationZ;\nprevX = e.accelerationX;\nprevY = e.accelerationY;\nprevZ = e.accelerationZ;\n\n```", "```swift\nif(Math.abs(changeX) > THRESHOLD || Math.abs(changeY) > THRESHOLD || Math.abs(changeZ) > THRESHOLD)\n{\nshake.gotoAndStop(2);\n}\nelse\n{\nshake.gotoAndStop(1);\n}\n\n```", "```swift\nshake.x = startX + (changeX * 100);\nshake.y = startY + (changeY * 100);\nshake.z = (changeZ * 100);\n\n```", "```swift\nvar changeX:Number = Math.abs(e.accelerationX);\nvar changeY:Number = Math.abs(e.accelerationY);\nvar changeZ:Number = Math.abs(e.accelerationZ);\nif((changeX > THRESHOLD && changeY > THRESHOLD) || (changeX > THRESHOLD && changeZ > THRESHOLD) || (changeY > THRESHOLD && changeZ > THRESHOLD))\n{\n// Shake detected.\n}\n\n```"]