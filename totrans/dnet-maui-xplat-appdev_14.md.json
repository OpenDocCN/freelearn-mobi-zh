["```swift\n$ git clone -b 2nd/chapter11 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition.git PassXYZ.Vault2 \n```", "```swift\nmkdir PassXYZ.Vault.Tests\ncd PassXYZ.Vault.Tests\ndotnet new xunit\ndotnet test \n```", "```swift\n<TargetFrameworks>**net8.0**;net8.0-android;net8.0-ios;net8.0-\n  maccatalyst</TargetFrameworks> \n```", "```swift\n<OutputType **Condition****=****\"'****$(TargetFramework)'!='net8.0'\"**>\n  Exe</OutputType> \n```", "```swift\n<ItemGroup>\n  <ProjectReference \n    Include=\"..\\PassXYZ.BlazorUI\\PassXYZ.BlazorUI.csproj\" />\n  <ProjectReference \n    Include=\"..\\PassXYZ.Vault\\PassXYZ.Vault.csproj\" />\n</ItemGroup> \n```", "```swift\n<UseMaui>true</UseMaui> \n```", "```swift\npublic class DataStoreTests\n{\n  [Fact]                                                            //(1)\n  public async void Add_Item()\n  {\n      // Arrange                                                    //(2)\n      IDataStore<Item> datastore = new MockDataStore();\n      ItemSubType itemSubType = ItemSubType.Entry;\n      // Act                                                        //(3)\n      var newItem = datastore.CreateNewItem(itemSubType);\n      newItem.Name = $\"{itemSubType.ToString()}01\";\n      await datastore.AddItemAsync(newItem);\n      var item = datastore.GetItem(newItem.Id);\n      // Assert                                                     //(4)\n      Assert.Equal(newItem.Id, item.Id);\n  }\n} \n```", "```swift\npublic class DataStoreTests\n{\n  ...\n  [Theory]                                                          //(1)\n  [InlineData(ItemSubType.Entry)]                                   //(2)\n  [InlineData(ItemSubType.Group)]\n  [InlineData(ItemSubType.Notes)]\n  [InlineData(ItemSubType.PxEntry)]\n  public async void Delete_Item(ItemSubType itemSubType)\n  {\n      // Arrange\n      IDataStore<Item> datastore = new MockDataStore();\n      var newItem = datastore.CreateNewItem(itemSubType);           //(3)\n      newItem.Name = $\"{itemSubType.ToString()}01\";\n      await datastore.AddItemAsync(newItem);\n      // Act\n      bool result = await\n        datastore.DeleteItemAsync(newItem.Id);                      //(4)\n      Debug.WriteLine($\"Delete_Item: {newItem.Name}\");\n      // Assert\n      Assert.True(result);                                          //(5)\n  }\n  ...\n} \n```", "```swift\npublic class DataStoreTests\n{\n  IDataStore<Item> datastore;\n  public DataStoreTests()\n  {\n    datastore = new MockDataStore();\n    Debug.WriteLine(\"DataStoreTests: Created\");\n  }\n  ...\n} \n```", "```swift\nDataStoreTests: Created\nDelete_Item: Entry01\nDataStoreTests: Created\nDelete_Item: Group01\nDataStoreTests: Created\nDelete_Item: PxEntry01\nDataStoreTests: Created\nDelete_Item: Notes01\nDataStoreTests: Created\nCreate_Item: PxEntry\nDataStoreTests: Created\nCreate_Item: Group\nDataStoreTests: Created\nCreate_Item: Entry\nDataStoreTests: Created\nCreate_Item: Notes\nDataStoreTests: Created\nAdd_Item: Done \n```", "```swift\ndotnet test -t\n  Determining projects to restore...\n  All projects are up-to-date for restore.\nMicrosoft (R) Test Execution Command Line Tool Version 17.3.0\n  (x64)\nCopyright (c) Microsoft Corporation.  All rights reserved.\nThe following Tests are available:\n    PassXYZ.Vault.Tests.DataStoreTests.Add_Item\n    PassXYZ.Vault.Tests.DataStoreTests.Delete_Item(itemSubType:\n      Entry)\n    PassXYZ.Vault.Tests.DataStoreTests.Delete_Item(itemSubType:\n      Group)\n    PassXYZ.Vault.Tests.DataStoreTests.Delete_Item(itemSubType:\n      Notes)\n    PassXYZ.Vault.Tests.DataStoreTests.Delete_Item(itemSubType:\n      PxEntry)\n    PassXYZ.Vault.Tests.DataStoreTests.Create_Item(itemSubType:\n      Entry)\n    PassXYZ.Vault.Tests.DataStoreTests.Create_Item(itemSubType:\n      Group)\n    PassXYZ.Vault.Tests.DataStoreTests.Create_Item(itemSubType:\n      Notes)\n   PassXYZ.Vault.Tests.DataStoreTests.Create_Item(itemSubType:\n      PxEntry) \n```", "```swift\ndotnet test --filter DataStoreTests \n```", "```swift\ndotnet test --filter DataStoreTests.Add_Item \n```", "```swift\ndotnet add package Serilog\ndotnet add package Serilog.Sinks.File \n```", "```swift\npublic class SerilogFixture : IDisposable {                         //(1)\n  public ILogger Logger { get; private set; }\n  public SerilogFixture() {\n    Logger = new LoggerConfiguration()                              //(2)\n        .MinimumLevel.Debug()\n        .WriteTo.File(@\"logs\\xunit_log.txt\")\n        .CreateLogger();\n    Logger.Debug(\"SerilogFixture: initialized\");\n  }\n  public void Dispose() {\n    Logger.Debug(\"SerilogFixture: closed\");\n    Log.CloseAndFlush();                                            //(3)\n  }\n}\npublic class IDataStoreTests : IClassFixture<SerilogFixture> {      //(4)\n  IDataStore<Item> datastore;\n  SerilogFixture serilogFixture;\n  public DataStoreTests(SerilogFixture fixture) {                   //(5)\n      serilogFixture = fixture;                                     //(6)\n      datastore = new MockDataStore();\n      serilogFixture.Logger.Debug(\"DataStoreTests: Created\");\n  }\n  [Fact]\n  public async void Add_Item() ...\n  ...\n} \n```", "```swift\n2022-08-28 10:25:39.273 +08:00 [DBG] SerilogFixture: initialized\n2022-08-28 10:25:39.332 +08:00 [DBG] DataStoreTests: Created\n2022-08-28 10:25:39.350 +08:00 [DBG] Delete_Item: Entry01\n2022-08-28 10:25:39.355 +08:00 [DBG] DataStoreTests: Created\n2022-08-28 10:25:39.355 +08:00 [DBG] Delete_Item: Group01\n2022-08-28 10:25:39.356 +08:00 [DBG] DataStoreTests: Created\n2022-08-28 10:25:39.357 +08:00 [DBG] Delete_Item: PxEntry01\n2022-08-28 10:25:39.358 +08:00 [DBG] DataStoreTests: Created\n2022-08-28 10:25:39.358 +08:00 [DBG] Delete_Item: Notes01\n2022-08-28 10:25:39.359 +08:00 [DBG] DataStoreTests: Created\n2022-08-28 10:25:39.359 +08:00 [DBG] Create_Item: PxEntry\n2022-08-28 10:25:39.360 +08:00 [DBG] DataStoreTests: Created\n2022-08-28 10:25:39.360 +08:00 [DBG] Create_Item: Group\n2022-08-28 10:25:39.361 +08:00 [DBG] DataStoreTests: Created\n2022-08-28 10:25:39.361 +08:00 [DBG] Create_Item: Entry\n2022-08-28 10:25:39.362 +08:00 [DBG] DataStoreTests: Created\n2022-08-28 10:25:39.362 +08:00 [DBG] Create_Item: Notes\n2022-08-28 10:25:39.362 +08:00 [DBG] DataStoreTests: Created\n2022-08-28 10:25:39.364 +08:00 [DBG] Add_Item: Done\n2022-08-28 10:25:39.367 +08:00 [DBG] SerilogFixture: closed \n```", "```swift\nnamespace PassXYZ.Vault.Tests;\npublic class SerilogFixture : IDisposable {\n  public ILogger Logger { get; private set; }\n  public SerilogFixture() {\n      Logger = new LoggerConfiguration()\n          .MinimumLevel.Debug()\n          .WriteTo.File(@\"logs\\xunit_log.txt\")\n          .CreateLogger();\n      Logger.Debug(\"SerilogFixture: initialized\");\n  }\n  public void Dispose() {\n      Logger.Debug(\"SerilogFixture: closed\");\n      Log.CloseAndFlush();\n  }\n}\n[CollectionDefinition(\"Serilog collection\")]                       //(1)\npublic class SerilogCollection:ICollectionFixture<SerilogFixture>\n{\n}                                                                  //(2) \n```", "```swift\nnamespace PassXYZ.Vault.Tests;\n[Collection(\"Serilog collection\")]                                 //(1)\npublic class DataStoreTests {\n  IDataStore<Item> datastore;\n  SerilogFixture serilogFixture;\n  public DataStoreTests(SerilogFixture fixture) {\n    datastore = new MockDataStore();\n    serilogFixture = fixture;                                      //(2)\n    serilogFixture.Logger.Debug(\"DataStoreTests\n      initialized\");\n  }\n  [Fact]\n  public async void Add_Item() {\n    // Arrange\n    ItemSubType itemSubType = ItemSubType.Entry;\n    // Act\n    var newItem = datastore.CreateNewItem(itemSubType);\n    newItem.Name = $\"{itemSubType.ToString()}01\";\n    await datastore.AddItemAsync(newItem);\n    var item = datastore.GetItem(newItem.Id);\n    // Assert\n    Assert.Equal(newItem.Id, item.Id);\n    serilogFixture.Logger.Debug(\"Add_Item done\");\n  }\n  [Theory]\n  [InlineData(ItemSubType.Entry)]\n  [InlineData(ItemSubType.Group)]\n  [InlineData(ItemSubType.Notes)]\n  [InlineData(ItemSubType.PxEntry)]\n  public async void Delete_Item(ItemSubType itemSubType)...\n  [Theory]\n  [InlineData(ItemSubType.Entry)]\n  [InlineData(ItemSubType.Group)]\n  [InlineData(ItemSubType.Notes)]\n  [InlineData(ItemSubType.PxEntry)]\n  public void Create_Item(ItemSubType itemSubType) ...\n} \n```", "```swift\nawait Shell.Current.GoToAsync(\n  $\"{nameof(ItemsPage)}?{nameof(ItemsViewModel.ItemId)}={item\n  .Id}\"); \n```", "```swift\n    using Microsoft.Maui.Controls.Core.UnitTests; \n    ```", "```swift\n    TestShell shell = new TestShell(); \n    ```", "```swift\n    [Fact]\n    public async void CancelNewItem()  {\n    NewItemViewModel vm = new(dataStore, logger);\n    await shell.GoToAsync(\"//About/Maui/\");\n    vm.CancelCommand.Execute(null);\n    Assert.Equal(\"//About/Maui/content\", Shell.Current.CurrentState.Location.ToString());\n    } \n    ```", "```swift\n    cd PassXYZ.Vault.Tests\n    dotnet add package bunit \n    ```", "```swift\n    dotnet add package Moq \n    ```", "```swift\n    <Project Sdk=\"Microsoft.NET.Sdk\"> \n    ```", "```swift\n    <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> \n    ```", "```swift\nnamespace PassXYZ.Vault.Tests {\n  [Collection(\"Serilog collection\")]\n  public class ModalDialogTests : TestContext {                     //(1)\n    SerilogFixture serilogFixture;\n    public ModalDialogTests(SerilogFixture serilogFixture) {\n      this.serilogFixture = serilogFixture;\n    }\n    [Fact]\n    public void ModalDialogInitTest() {\n      string title = \"ModalDialog Test\";                            //(2)\n      var cut = RenderComponent<ModalDialog>(                       //(3)\n        parameters => parameters.Add(p => p.Title, title)           //(4)\n        .Add(p => p.CloseButtonText, \"Close\")\n        .Add(p => p.SaveButtonText, \"Save\"));\n      cut.Find(\"h5\").TextContent.MarkupMatches(title);              //(5)\n      serilogFixture.Logger.Debug(\"ModalDialogInitTest:\n        done\");\n    }\n    ...\n  }\n} \n```", "```swift\n@inherits TestContext                                               //(1)\n<h3>EditorDialogTests</h3>\n@code {\n  bool _isOnCloseClicked = false;\n  string _key = string.Empty;\n  string _value = string.Empty;\n  string updated_key = \"key updated\";\n  string updated_value = \"value udpated\";\n  void OnSaveClicked(string key, string value) {\n    _key = key; _value = value;\n  }\n  void OnCloseHandler() {\n    _isOnCloseClicked = true;\n  }\n  [Fact]\n  public void EditorDialog_Init_WithoutArgument() ...\n  [Fact]\n  public void Edit_OnClose_Clicked() {\n    var cut = Render(@<EditorDialog Key=\"@_key\"\n                                    Value=\"@_value\" \n                                    OnSave=@OnSaveClicked\n                                    OnClose=@OnCloseHandler>\n                     </EditorDialog>);                              //(2)\n    cut.Find(\"button[class='btn btn-secondary']\").Click();          //(3)\n    Assert.True(_isOnCloseClicked);                                 //(4)\n  }\n  [Fact]\n  public void Edit_With_KeyEditingEnabled() {                       //(5)\n     var cut = Render(@<EditorDialog Key=\"@_key\"\n                                     Value=\"@_value\"\n                                     IsKeyEditingEnable=\"true\" \n                                     OnSave=@OnSaveClicked>\n                      </EditorDialog>);\n    cut.Find(\"input\").Change(updated_key);\n    cut.Find(\"textarea\").Change(updated_value);\n    cut.Find(\"button[type=submit]\").Click();\n    Assert.Equal(_key, updated_key);\n    Assert.Equal(_value, updated_value);\n  }\n  [Fact]\n  public void Edit_With_KeyEditingDisabled() ...\n} \n```", "```swift\n@<{HTML tag}>…</{HTML tag}> \n```", "```swift\nRenderFragment or RenderFragment<TValue>. In *Listing 11.4*, we use Razor templates to pass parameters to the EditorDialog, as demonstrated in the subsequent code:\n```", "```swift\nvar cut = Render(@<EditorDialog Key=\"@_key\"\nValue=\"@_value\" OnSave=@OnSaveClicked\nOnClose=@OnCloseHandler>\n                  </EditorDialog>); \n```", "```swift\ncut.Find(\"button[class='btn btn-secondary']\").Click(); \n```", "```swift\n cut.Find(\"input\").Change(updated_key);\n    cut.Find(\"textarea\").Change(updated_value);\n    cut.Find(\"button[type=submit]\").Click(); \n```", "```swift\n Assert.Equal(_key, updated_key);\n    Assert.Equal(_value, updated_value); \n```", "```swift\n@inherits TestContext\n@namespace PassXYZ.Vault.Tests\n<h3>ItemEditTests</h3>\n@code {\n  private RenderFragment _editorDialog => __builder =>\n  {\n    <CascadingValue Value=\"@_dialogId\" Name=\"Id\">\n    <EditorDialog IsKeyEditingEnable=@isNewItem\n    OnSave=@OnSaveClicked Key=@testItem.Name\n    Value=@testItem.Notes>\n      @if (isNewItem) {\n        <select id=\"itemType\" @bind=\"testItem.ItemType\"\n          class=\"form-select\" aria-label=\"Group\">\n            <option selected value=\"Group\">Group</option>\n            <option value=\"Entry\">Entry</option>\n            <option value=\"PxEntry\">PxEntry</option>\n            <option value=\"Notes\">Notes</option>\n        </select>\n        }\n    </EditorDialog>\n    </CascadingValue>\n  };\n} \n```", "```swift\nnamespace PassXYZ.Vault.Tests;\n[Collection(\"Serilog collection\")]\npublic partial class ItemEditTests : TestContext {\n  readonly SerilogFixture serilogFixture;\n  bool isNewItem { get; set; } = false;\n  NewItem testItem { get; set; }\n  string _dialogId = \"editItem\";\n  string updated_key = \"Updated item\";\n  string updated_value = \"This item is updated.\";\n  public ItemEditTests(SerilogFixture fixture) {\n    testItem = new() {\n        Name = \"New item\",\n        Notes = \"This is a new item.\"\n    };\n    serilogFixture = fixture;\n  }\n  void OnSaveClicked(string key, string value) {\n    testItem.Name = key; testItem.Notes = value;\n  }\n  [Fact]\n  public void Edit_New_Item() {\n    isNewItem = true;\n    var cut = Render(_editorDialog);                                //(1)\n    cut.Find(\"#itemType\").Change(\"Entry\");\n    cut.Find(\"input\").Change(updated_key);\n    cut.Find(\"textarea\").Change(updated_value);\n    cut.Find(\"button[type=submit]\").Click();\n    Assert.Equal(updated_key, testItem.Name);\n    Assert.Equal(updated_value, testItem.Notes);\n  }\n  [Fact]\n  public void Edit_Existing_Item() {\n    isNewItem = false;                                              //(3)\n    var cut = Render(_editorDialog);                                //(1)\n    var ex = Assert.Throws<ElementNotFoundException>(() =>\n      cut.Find(\"#itemType\").Change(\"Entry\"));                       //(2)\n    Assert.Equal(\"No elements were found that matches the\n      selector '#itemType'\", ex.Message);                           //(4)\n    cut.Find(\"textarea\").Change(updated_value);\n    cut.Find(\"button[type=submit]\").Click();\n    Assert.Equal(updated_value, testItem.Notes);\n  }\n} \n```", "```swift\n@page \"/entry/{SelectedItemId}\" \n```", "```swift\nprotected override void OnParametersSet() {\n  base.OnParametersSet();\n  if (SelectedItemId != null) {\n    selectedItem = DataStore.GetItem(SelectedItemId, true);\n    if (selectedItem == null) {\n        throw new InvalidOperationException(                        //(2)\n  \"ItemDetail: entry cannot be found with SelectedItemId\");\n    }\n    else {\n      if (selectedItem.IsGroup) {\n          throw new InvalidOperationException(                      //(3)\n   \"ItemDetail: SelectedItemId should not be group here.\");\n      }\n      else {                                                        //(4)\n        fields.Clear();\n        List<Field> tmpFields = selectedItem.GetFields();\n        foreach (Field field in tmpFields) {\n            fields.Add(field);\n        }\n        notes = selectedItem.GetNotesInHtml();\n      }\n    }\n  }\n  else {\n    throw new InvalidOperationException(                            //(1)\n      \"ItemDetail: SelectedItemId is null\");\n  }\n} \n```", "```swift\nnamespace PassXYZ.Vault.Tests;\n[Collection(\"Serilog collection\")]\npublic class ItemDetailTests : TestContext {\n  SerilogFixture serilogFixture;\n  Mock<IDataStore<Item>> dataStore;\n  public ItemDetailTests(SerilogFixture fixture) {\n      serilogFixture = fixture;\n      dataStore = new Mock<IDataStore<Item>>();                    //(1)\n      Services.AddSingleton<IDataStore<Item>>\n        (dataStore.Object);                                        //(2)\n  }\n  [Fact]\n  public void **Init_Empty_ItemDetail**() {                            //(3)\n      var ex = Assert.Throws<InvalidOperationException>(\n        () => RenderComponent<ItemDetail>());\n      Assert.Equal(\n        \"ItemDetail: SelectedItemId is null\", ex.Message);\n  }\n  [Fact]\n  public void **Load_ItemDetail_WithWrongId**() {\n    var ex = Assert.Throws<InvalidOperationException>(() =>\n      RenderComponent<ItemDetail>(parameters =>\n      parameters.Add(p => p.SelectedItemId, \"Wrong Id\")));\n    Assert.Equal(\"ItemDetail: entry cannot be found with\n        SelectedItemId\", ex.Message);\n  }\n  [Fact]\n  public void **Load_ItemDetail_WithGroup**() {\n    Item testGroup = new PwGroup(true, true) {\n      Name = \"Default Group\",\n      Notes = \"This is a group in ItemDetailTests.\"\n    };\n    dataStore.Setup(x => x.GetItem(It.IsAny<string>(),\n      It.IsAny<bool>())).Returns(testGroup);\n    var ex = Assert.Throws<InvalidOperationException>(() =>\n      RenderComponent<ItemDetail>(parameters =>\n     parameters.Add(p => p.SelectedItemId, testGroup.Id)));\n    Assert.Equal(\"ItemDetail: SelectedItemId should not be\n      group here.\", ex.Message);\n  }\n  [Fact]\n  public void **Load_ItemDetail_WithEmptyFieldList**() {\n    Item testEntry = new PwEntry(true, true) {\n      Name = \"Default Entry\",\n      Notes = \"This is an entry with empty field list.\"\n    };\n    dataStore.Setup(x => x.GetItem(It.IsAny<string>(),\n        It.IsAny<bool>())).Returns(testEntry);\n    var cut = RenderComponent<ItemDetail>(parameters =>\n      parameters.Add(p => p.SelectedItemId, testEntry.Id));\n    cut.Find(\"article\").MarkupMatches(\n      $\"<article><p>{testEntry.Notes}</p></article>\");\n  }\n} \n```", "```swift\ndataStore = new Mock<IDataStore<Item>>();\nServices.AddSingleton<IDataStore<Item>>(\n  dataStore.Object); \n```", "```swift\n[Fact]\npublic void Init_Empty_ItemDetail() {\n  var ex = Assert.Throws<InvalidOperationException>(\n    () => RenderComponent<ItemDetail>());\n  Assert.Equal(\"ItemDetail: SelectedItemId is null\",\n    ex.Message);\n} \n```", "```swift\n[Fact]\npublic void Load_ItemDetail_WithWrongId() {\n  var ex = Assert.Throws<InvalidOperationException>(() =>\n    RenderComponent<ItemDetail>(parameters =>\n    parameters.Add(p => p.SelectedItemId, \"Wrong Id\")));\n    Assert.Equal(\"ItemDetail: entry cannot be found with\n      SelectedItemId\", ex.Message);\n} \n```", "```swift\n[Fact]\npublic void Load_ItemDetail_WithGroup() {\n  Item testGroup = new PwGroup(true, true) {\n    Name = \"Default Group\",\n    Notes = \"This is a group in ItemDetailTests.\"\n  };\n  dataStore.Setup(x => x.GetItem(It.IsAny<string>(),\n    It.IsAny<bool>())).Returns(testGroup);\n  var ex = Assert.Throws<InvalidOperationException>(() =>\n    RenderComponent<ItemDetail>(parameters =>\n    parameters.Add(p => p.SelectedItemId, testGroup.Id)));\n    Assert.Equal(\"ItemDetail: SelectedItemId should not be\n    group here.\", ex.Message);\n  } \n```", "```swift\n[Fact]\npublic void Load_ItemDetail_WithEmptyFieldList() {\n  Item testEntry = new PwEntry(true, true) {\n    Name = \"Default Entry\",\n    Notes = \"This is an entry with empty field list.\"\n  };\n  dataStore.Setup(x => x.GetItem(It.IsAny<string>(),\n    It.IsAny<bool>())).Returns(testEntry);\n  var cut = RenderComponent<ItemDetail>(parameters =>\n    parameters.Add(p => p.SelectedItemId, testEntry.Id));\n  cut.Find(\"article\").MarkupMatches(\n    $\"<article><p>{testEntry.Notes}</p></article>\");\n  Debug.WriteLine($\"{cut.Markup}\");\n} \n```"]