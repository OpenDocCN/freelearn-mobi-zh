- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Launching Your App on Google Play
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce you to the Google Play console, release channels,
    and the entire release process. It covers creating a Google Play Developer account,
    setting up the store entry for our developed app, and creating a key store (including
    coverage of the importance of passwords and where to store files). We’ll also
    learn about app bundles and APK, looking at how to generate the app’s APK or AAB
    file. Later in the chapter, we’ll set up release paths, open beta, and closed
    alpha, and finally, we’ll upload our app to the store and download it on a device.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to create your own Google Play
    Developer account, prepare your signed APK or app bundle for publishing, and publish
    your first application on Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to add animations and transitions with `CoordinatorLayout` and
    `MotionLayout` in [*Chapter 16*](B19411_16.xhtml#_idTextAnchor826), *Animations
    and Transitions with CoordinatorLayout and MotionLayout*. Now, you are ready to
    develop and launch Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: After developing Android apps, they will only be available on your devices and
    emulators. You must make them available to everyone so they can download them.
    In turn, you will acquire users, and you can earn from them. The official marketplace
    for Android apps is Google Play. With Google Play, the apps and games you release
    will be available to over two billion active Android devices globally. There are
    also other marketplaces where you can publish your apps, but they are beyond the
    scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’re going to learn about launching your apps on Google Play.
    We’ll start with preparing the apps for release and creating a Google Play Developer
    account. Then, we’ll move on to uploading your app and managing app releases.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your apps for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a developer account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading the app to Google Play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing app releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your apps for release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Studio normally signs your build using a debug key. This debug build
    allows you to build and test your app quickly. To publish your app on Google Play,
    you must create a release build signed with your own key. This release build will
    not be debuggable and can be optimized for size.
  prefs: []
  type: TYPE_NORMAL
- en: The release build must also have the correct version information. Otherwise,
    you won’t be able to publish a new app or update an already published app.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with adding versions to your app.
  prefs: []
  type: TYPE_NORMAL
- en: Versioning apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The version of your app is important for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Users can see the version they have downloaded. They can use this when checking
    whether there’s an update or whether there are known issues when reporting bugs/problems
    with the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The device and Google Play use the version value to determine whether an app
    can or should be updated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers can also use this value to add feature support to specific versions.
    They can also warn or force users to upgrade to the latest version to get important
    fixes on bugs or security issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An Android app has two versions: `versionCode` and `versionName`. Now, `versionCode`
    is an integer that is used by developers, Google Play, and the Android system
    while `versionName` is the string that the users see on the Google Play page for
    your app.'
  prefs: []
  type: TYPE_NORMAL
- en: The initial release of an app should have a `versionCode` value of `1`, and
    you should increase it for each new release.
  prefs: []
  type: TYPE_NORMAL
- en: '`versionName` can be in *x.y* format (where *x* is the major version, and *y*
    is the minor version). You can also use semantic versioning, as in *x.y.z*, by
    adding the patch version with *z*.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about semantic versioning, refer to [https://semver.org](https://semver.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the module’s `build.gradle` files, `versionCode` and `versionName` are automatically
    generated when you create a new project in Android Studio. They are in the `defaultConfig`
    block under the `android` block. An example `build.gradle` file shows these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When publishing updates, the new package being released must have a higher `versionCode`
    value because users cannot downgrade their apps and can only download new versions.
  prefs: []
  type: TYPE_NORMAL
- en: After ensuring that the app version is correct, the next step in the release
    process is to get a keystore to sign the app. This will be discussed in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a keystore
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android apps, when run, are automatically signed by a debug key. However, before
    it can be published on Google Play Store, an app must be signed with a release
    key. To do so, you must have a keystore. If you don’t have one yet, you can create
    one in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.01 – creating a keystore in Android Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we’ll use Android Studio to make a keystore that can be used
    to sign Android apps. Follow these steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a project in Android Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Build** menu and then click on **Generate Signed Bundle** **or
    APK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.1 – The Generate Signed Bundle or APK dialog](img/B19411_17_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.1 – The Generate Signed Bundle or APK dialog
  prefs: []
  type: TYPE_NORMAL
- en: An **APK** file is the file format by which users can install your app. The
    Android App Bundle is a new file publishing format that allows Google Play to
    distribute specific and smaller APKs to devices, so developers don’t need to release
    and manage multiple APKs to support different devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure either **APK** or **Android App Bundle** is selected, and then click
    the **Next** button. Here, you can choose an existing keystore or create a new
    one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.2 – The Generate Signed Bundle or APK dialog after selecting APK
    and pressing the Next button](img/B19411_17_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.2 – The Generate Signed Bundle or APK dialog after selecting APK and
    pressing the Next button
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Create new…** button. The **New Key Store** dialog will then appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.3 – The New Key Store dialog](img/B19411_17_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.3 – The New Key Store dialog
  prefs: []
  type: TYPE_NORMAL
- en: In the `users/packt/downloads/keystore.keystore`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the password in both the **Password** and **Confirm** fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Certificate** section under **Key**, input values into the **First
    and Last Name**, **Organizational Unit**, **Organization**, **City or Locality**,
    **State or Province**, and **Country Code** fields. Only one of these is required,
    but it’s good to provide all the information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **OK** button. If there is no error, the keystore will be created
    in the path you provided, and you will be back in the **Generate Signed Bundle
    or APK** dialog with the keystore values so you can continue generating the APK
    or app bundle. You could close the dialog if you only wanted to create a keystore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, you have created your own keystore, which you can use to sign
    applications to be published to Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the command line to generate a keystore if you prefer to use
    that. The `keytool` command is available in the **Java Development Kit** (**JDK**).
    The command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command creates a 2,048-bit RSA keystore in the current working directory,
    valid for 9,125 days (25 years), with a `my-key.jks` filename and an `key-alias`
    alias. You can change the validity, filename, and alias to your preferred values.
    The command line will prompt you to input the keystore password, then prompt you
    to enter it again to confirm.
  prefs: []
  type: TYPE_NORMAL
- en: It will then ask you for the first and last name, organizational unit, organization
    name, city or locality, state or province, and country code, one at a time. Only
    one of these is required; you can press the *Enter* key if you want to leave something
    blank. It is good practice, though, to provide all the information.
  prefs: []
  type: TYPE_NORMAL
- en: After the country code prompt, you will be asked to verify the input provided.
    You can type `yes` to confirm. You will then be asked to provide the password
    for the key alias. If you want it to be the same as the keystore password, you
    can press *Enter*. The keystore will then be generated.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a keystore for signing your apps, you need to know how you
    can keep it safe. You’ll learn about that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Storing the keystore and passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to keep the keystore and passwords in a safe and secure place because
    if you lose the keystore and/or its credentials, you will no longer be able to
    release updates for your apps. If a hacker also gains access to these, they may
    be able to update your apps without your consent.
  prefs: []
  type: TYPE_NORMAL
- en: You can store the keystore in your CI/build server or on a secure server.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the credentials is a bit tricky, as you will need them later when signing
    releases for app updates. One way you can do this is by including this information
    in your project’s `app/build.gradle` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `android` block, you can have `signingConfigs`, which references the
    keystore file, its password, and the key’s alias and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Under the `buildTypes` release block in the project’s `build.gradle` file,
    you can specify the release config in the `signingConfigs` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Storing the signing configs in the `build.gradle` file is not that secure, as
    someone who has access to the project or the repository can compromise the app.
  prefs: []
  type: TYPE_NORMAL
- en: You can store these credentials in environment variables to make them more secure.
    With this approach, even if malicious people get access to your code, the app
    updates will still be safe as the signing configurations are not stored in your
    code but on the system. An environment variable is a key-value pair that is set
    outside your **integrated development environment** (**IDE**) or project, for
    example, on your own computer or on a build server.
  prefs: []
  type: TYPE_NORMAL
- en: To use environment variables for keystore configurations in Gradle, you can
    create environment variables for the store file path, store password, key alias,
    and key password. For example, you can use the `KEYSTORE_FILE`, `KEYSTORE_PASSWORD`,
    `KEY_ALIAS`, and `KEY_PASSWORD` environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'On macOS and Linux, you can set an environment variable by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using Windows, it can be done with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a `KEYSTORE_PASSWORD` environment variable with `securepassword`
    as the value. In the `app/build.gradle` file, you can then use the values from
    the environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Your keystore will be used to sign your app for release so you can publish it
    on Google Play. We’ll discuss that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Signing your apps for release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you run an application on an emulator or an actual device, Android Studio
    automatically signs it with the debug keystore. To publish it on Google Play,
    you must sign the APK or app bundle with your own key, using a keystore you made
    in Android Studio or from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you have added the signing config for the release build in your `build.gradle`
    file; you can automatically build a signed APK or app bundle by selecting the
    release build in the `app/build/output` directory of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.02 – creating a signed APK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a signed APK for an Android project using
    Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a project in Android Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Build** menu and then click on the **Generate Signed Bundle or
    APK** menu item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.4 – The Generate Signed Bundle or APK dialog](img/B19411_17_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.4 – The Generate Signed Bundle or APK dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **APK** and then click the **Next** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.5 – The Generate Signed Bundle or APK dialog after clicking the
    Next button](img/B19411_17_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.5 – The Generate Signed Bundle or APK dialog after clicking the Next
    button
  prefs: []
  type: TYPE_NORMAL
- en: Choose the keystore you made in *Exercise 17.01* – *creating a keystore in*
    *Android Studio*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the password that you set for the keystore you created in the **Key
    store** **password** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Key alias** field, click the icon on the right side and select the
    key alias.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the alias password that you set for the keystore in the **Key** **password**
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the destination folder where the signed APK will be generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Build Variants** field, make sure the **release** variant is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.6 – Choose the release build in the Generate Signed Bundle or APK
    dialog](img/B19411_17_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.6 – Choose the release build in the Generate Signed Bundle or APK
    dialog
  prefs: []
  type: TYPE_NORMAL
- en: For the signature version, select both **V1** and **V2**. **V2 (Full APK Signature)**
    is a whole-file scheme that increases your app security and makes it faster to
    install. This is only available for Android 7.0 Nougat and above. If you are targeting
    a version lower than that, you should also use **V1 (Jar Signature)**, which is
    the old way of signing APKs but is less secure than **V2**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Finish** button. Android Studio will build the signed APK. An IDE
    notification will inform you that the signed APK was generated. You can click
    on **locate** to go to the directory where the signed APK file is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.7 – A pop-up notification for successfully signed APK generation](img/B19411_17_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.7 – A pop-up notification for successfully signed APK generation
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you have made a signed APK, which you can now publish on Google
    Play. In the next section, you will learn about Android App Bundle, which is a
    new way of packaging apps for release.
  prefs: []
  type: TYPE_NORMAL
- en: Android app bundle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The traditional way of releasing Android apps is through an APK or an application
    package. This APK file is the one downloaded to users’ devices when they install
    your app. This one big file contains all the strings, images, and other resources
    for all device configurations.
  prefs: []
  type: TYPE_NORMAL
- en: As you support more device types and more countries, this APK file will grow
    in size. The APK that users download will contain things that are not really needed
    for their devices. This will be an issue for you as users with low storage might
    not have enough space to install your app. Users with expensive data plans or
    slow internet connections might also avoid downloading the app if it’s too big.
    They might also uninstall your app to save storage space.
  prefs: []
  type: TYPE_NORMAL
- en: Some developers have built an published multiple APKs to avoid these issues.
    However, it’s a complicated and inefficient solution, especially when you target
    different screen densities, CPU architectures, and languages. In addition, that
    would be too many APK files to maintain per release.
  prefs: []
  type: TYPE_NORMAL
- en: Android App Bundle is a new way of packaging apps for publishing. You just generate
    a single app bundle file (using Android Studio 3.2 and upward) and upload it on
    Google Play. Google Play will automatically generate the base APK file and the
    APK files for each device configuration, CPU architecture, and language. Users
    who install your app will only download the necessary APKs for their device. This
    will be smaller in size compared to a universal APK.
  prefs: []
  type: TYPE_NORMAL
- en: This will work for devices running on Android 5.0 Lollipop and upward; for those
    below it, the APK files that will be generated are only for device configuration
    and CPU architecture. All the languages and other resources will be included in
    each APK file.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.03 – creating a signed app bundle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a signed app bundle for an Android project
    using Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a project in Android Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Build** menu, then click on the **Generate Signed Bundle or APK**
    menu item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.8 – The Generate Signed Bundle or APK dialog](img/B19411_17_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.8 – The Generate Signed Bundle or APK dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Android App Bundle**, then click the **Next** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.9 – The Generate Signed Bundle or APK dialog after clicking the
    Next button](img/B19411_17_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.9 – The Generate Signed Bundle or APK dialog after clicking the Next
    button
  prefs: []
  type: TYPE_NORMAL
- en: Choose the keystore you made in *Exercise 17.01 – creating a keystore in* *Android
    Studio*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the password that you set for the keystore you created, in the **Key
    store** **password** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Key alias** field, click the icon on the right side and select the
    key alias.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the alias password that you set for the keystore you created in the
    **Key** **password** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the destination folder to generate the signed app bundle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Build Variants** field, make sure the **release** variant is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.10 – Choose the release build in the Generate Signed Bundle or
    APK dialog](img/B19411_17_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.10 – Choose the release build in the Generate Signed Bundle or APK
    dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Finish** button. Android Studio will build the signed app bundle.
    An IDE notification will inform you that the signed app bundle was generated.
    You can click on **locate** to go to the directory where the signed app bundle
    file is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 17.11 – P\uFEFFop-up notification that the signed app bundle was generated](img/B19411_17_11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 17.11 – Pop-up notification that the signed app bundle was generated
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you have made a signed app bundle that you can now publish
    on Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to publish your app to Google Play Store with the Android app bundle
    format, you will first need to opt-in to Google Play’s app signing feature. We
    will discuss Google Play app signing in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: App signing by Google Play
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Play provides a service called app signing that allows Google to manage
    and protect your app signing keys and automatically re-sign your app for users.
  prefs: []
  type: TYPE_NORMAL
- en: With the Google Play app signing service, you can let Google generate the signing
    key or upload your own. You can also create a different upload key for additional
    security. You can sign the app with the upload key and publish the app on the
    Play Console.
  prefs: []
  type: TYPE_NORMAL
- en: Google will check the upload key, remove it, and use the app signing key to
    re-sign the app for distribution to users. When app signing is enabled for the
    app, the upload key can be reset. If you lose the upload key or feel that it is
    already compromised, you can simply contact Google Play developer support, verify
    your identity, and get a new upload key.
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to opt into app signing when publishing a new app. In the Google
    Play Console ([https://play.google.com/console](https://play.google.com/console)),
    you can go to the **Release Management** | **App Releases** section and select
    **Continue** in the **Let Google manage and protect your app signing key** section.
    The key you originally used to sign the app will become the upload key, and Google
    Play will generate a new app signing key.
  prefs: []
  type: TYPE_NORMAL
- en: You can also configure existing apps to use app signing. This is available in
    the **Release** | **Setup** | **App Signing** section of the app in the Google
    Play Console. You need to upload your existing app signing key and generate a
    new upload key.
  prefs: []
  type: TYPE_NORMAL
- en: Once you enroll in Google Play app signing, you can no longer opt out. Also,
    if you use third-party services, you must use the app signing key’s certificate.
    This is available in **Release Management** | **App Signing**.
  prefs: []
  type: TYPE_NORMAL
- en: App signing also enables you to upload an app bundle, and Google Play will automatically
    sign and generate APK files, which users will download when they install your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will create a Google Play developer account, so you
    can publish an app’s signed APK or app bundle to Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a developer account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To publish applications on Google Play, the first step that you need to take
    is to create a Google Play developer account. Head over to [https://play.google.com/console/signup](https://play.google.com/console/signup)
    and log in with your Google account. If you don’t have one, you should create
    one first.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend using a Google account that you plan to use in the long term instead
    of a throwaway one. Read the developer distribution agreement and agree to the
    terms of service.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If your goal is to sell paid apps or add in-app products to your apps/games,
    you must also create a merchant account. This is not available in all countries,
    unfortunately. We won’t cover this here, but you can read more about it on the
    registration page or at [https://packt.link/LDncA](https://packt.link/LDncA).
  prefs: []
  type: TYPE_NORMAL
- en: You must pay a $25 registration fee to create your Google Play Developer account.
    (This is a one-time payment). The fee must be paid using a valid debit/credit
    card, but some prepaid/virtual credit cards also work. What you can use varies
    by location/country.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to complete the account details, such as the developer’s name,
    email address, website, and phone number. These, which can be updated later, will
    form the developer information displayed on your app’s store listing.
  prefs: []
  type: TYPE_NORMAL
- en: After completing the registration, you will receive a confirmation email. It
    may take a few hours (up to 48 hours) for your payment to be processed and your
    account registered, so be patient. Ideally, you should do this in advance, even
    if your app is not yet ready, so you can easily publish the app once it’s ready
    for release.
  prefs: []
  type: TYPE_NORMAL
- en: When you have received the confirmation email from Google, you can start publishing
    apps and games to Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss uploading apps to Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading an app to Google Play
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have an app ready for release and a Google Play Developer account,
    you can go to the Google Play Console ([https://play.google.com/console](https://play.google.com/console))
    to publish the app.
  prefs: []
  type: TYPE_NORMAL
- en: To upload an app, go to the Play Console, click **All Apps**, and then click
    **Create app**. Provide the name of the application and the default language.
    In the **App or game** section, set whether it’s an app or game. Likewise, in
    the **Free or paid** section, set whether it’s free or paid. Create your store
    listing, prepare the app release, and roll out the release. We’ll have a look
    at the detailed steps in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a store listing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The store listing is what users first see when they open your app’s page on
    Google Play. If the app is already published, you can go to **Grow**, **Store
    presence**, and select **Main** **store listing**.
  prefs: []
  type: TYPE_NORMAL
- en: App Details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will navigate to the **App details** page. On the **App details** page,
    you need to fill in the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App name**: Here, you provide your app’s name (the maximum number of characters
    is 50).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Short description**: Here, you provide a short text summarizing your app
    (the maximum number of characters is 80).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full description**: This is the long description for your app. The limit
    is 4,000 characters, so you can add a lot of relevant information here, such as
    what its features are and things users need to know.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For the product details, you can add localized versions depending on the languages/countries
    where your app will be released.
  prefs: []
  type: TYPE_NORMAL
- en: Your app title and description must not contain copyrighted materials and spam,
    as this might result in your app being rejected.
  prefs: []
  type: TYPE_NORMAL
- en: Graphic Assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, provide the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: An icon (a high-resolution icon that is 512 x 512).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A feature graphic (1,024 x 500).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2–8 screenshots of the app. If your app supports other form factors (tablet,
    TV, or Wear OS), you should also add screenshots for each form factor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also add promo graphics and videos if you have any. Your app can be
    rejected if you use graphics that violate Google Play policy, so ensure that the
    images you use are your own and don’t include copyrighted or inappropriate content.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before preparing your release, ensure that your build is signed with a signature
    key. If you’re publishing an app update, make sure that it is of the same package
    name, signed with the same key, and with a version code higher than the current
    one on the Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: You must also make sure you follow the developer policy (to avoid any violations)
    and make sure that your app follows the app quality guidelines. More of these
    are listed on the launch checklist, which you can see at [https://support.google.com/googleplay/android-developer/](https://support.google.com/googleplay/android-developer/).
  prefs: []
  type: TYPE_NORMAL
- en: APK/app bundle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can upload an APK or the newer format: Android App Bundle. Go to **Release**
    and then **App Releases**. This will display a summary of active and draft releases
    in each track.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different tracks where you can release the app:'
  prefs: []
  type: TYPE_NORMAL
- en: Production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closed testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll discuss the release tracks in detail in this chapter’s *Managing app*
    *releases* section.
  prefs: []
  type: TYPE_NORMAL
- en: Select the track where you will create the release. For the production track,
    you can select **Manage** on the left. For the other tracks, click **Testing**
    first, and then select the track. To release on a closed testing track, you must
    also select **Manage track** and then create a new track by clicking on **Create
    track**.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, you can click **Create new release** at the top right of the page.
    In the **Android App Bundles and APKs to add** section, you can upload your APK
    or app bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the app bundle or APK file is signed by your release signing
    key. The Google Play Console will not accept it if it’s not properly signed. If
    you’re publishing an update, the version code for the app bundle or APK must be
    higher than the existing version.
  prefs: []
  type: TYPE_NORMAL
- en: You can also add a release name and release notes. The release name is for the
    developer’s use to track the release and won’t be visible to users. By default,
    the version name of the APK or app bundle uploaded is set as the release name.
    The release notes form the text that will be shown on the Play page and will inform
    users of what the updates to the app are.
  prefs: []
  type: TYPE_NORMAL
- en: The text for the release notes must be added inside the tags for the language.
    For example, the opening and closing tags for the default US English language
    are `<en-US>` and `</en-US>`. If your app supports multiple languages, each language
    tag will be displayed in the field for the release notes by default. You can then
    add the release notes for each language.
  prefs: []
  type: TYPE_NORMAL
- en: If you have already released the app, you can copy the release notes from previous
    releases and reuse or modify them by clicking the **Copy from a previous release**
    button and selecting from the list.
  prefs: []
  type: TYPE_NORMAL
- en: When you click the **Save** button, the release will be saved, and you can go
    back to it later. The **Review release** button will take you to the screen where
    you can review and roll out the release.
  prefs: []
  type: TYPE_NORMAL
- en: Rolling out a release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re ready to roll out your release, go to the Play Console and select
    your app. Go to **Release** and select your release track. Click the **Releases**
    tab and then click on the **Edit** button next to the release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.12 – A draft release on the Production track](img/B19411_17_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.12 – A draft release on the Production track
  prefs: []
  type: TYPE_NORMAL
- en: You can review the APK or app bundle, release names, and release notes. Click
    the **Review release** button to start the rollout for the release. The Play Console
    will open the **Review and release** screen. Here, you can review the release
    information and check whether there are warnings or errors.
  prefs: []
  type: TYPE_NORMAL
- en: If you are updating an app, you can also select the rollout percentage when
    creating another release. Setting it to 100% means it will be available for all
    your users to download. When you set it to a lower percentage, for example, 50%,
    the release will be available to half of your existing users.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re confident with the release, select the **START ROLLOUT TO PRODUCTION**
    button at the bottom of the page. After publishing your app, it will take a while
    (7 days or longer for new apps) before it is reviewed. You can see the status
    in the top-right corner of the Google Play Console. These statuses include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pending publication** (your new app is being reviewed)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Published** (your app is now available on Google Play)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rejected** (your app wasn’t published because of a policy violation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suspended** (your app violated Google Play policy and was suspended)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are issues with your app, you can resolve them and resubmit the app.
    Your app can be rejected for reasons such as copyright infringement, impersonation,
    and spam.
  prefs: []
  type: TYPE_NORMAL
- en: Once the app has been published, users can now download it. It can take some
    time before the new app or the app update becomes live on Google Play. If you’re
    trying to search for your app on Google Play, it might not be searchable. Make
    sure you publish it on the production or open track.
  prefs: []
  type: TYPE_NORMAL
- en: Managing app releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can slowly release your apps on different tracks to test them before publicly
    rolling them out to users. You can also do timed publishing to make the app available
    on a certain date instead of automatically publishing it once approved by Google.
  prefs: []
  type: TYPE_NORMAL
- en: Release tracks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When creating a release for an app, you can choose between four different tracks:'
  prefs: []
  type: TYPE_NORMAL
- en: Production is where everyone can see the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open testing is targeted at wider public testing. The release will be available
    on Google Play, and anyone can join the beta program and test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closed testing is intended for small groups of users testing pre-release versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal testing is for the developer/tester builds while developing/testing
    an app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The internal, closed, and open tracks allow developers to create a special release
    and allow real users to download it while the rest are on the production version.
    This allows you to know whether the release has bugs and quickly fix them before
    rolling it out to everyone. User feedback on these tracks will also not affect
    the public reviews/ratings of your app.
  prefs: []
  type: TYPE_NORMAL
- en: The ideal way is to release it first on internal tracks during development and
    internal testing. When a pre-release version is ready, you can create a closed
    test for a small group of trusted people/users/testers. Then, you can create an
    open test to allow other users to try your app before the full launch to production.
  prefs: []
  type: TYPE_NORMAL
- en: To go to each track and manage releases, you can go to the **Release** section
    of the Google Play Console and select **Production** or **Testing** and then the
    **Open testing**, **Closed testing**, or **Internal** **testing** tracks.
  prefs: []
  type: TYPE_NORMAL
- en: The feedback channel and opt-in link
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the internal, closed, and open tracks, there is a section for **Feedback
    URL or email address** and **How testers join your test**. You can provide an
    email address or a website under **Feedback URL or email address** to which testers
    can send their feedback. This is displayed when they opt into your testing program.
  prefs: []
  type: TYPE_NORMAL
- en: In the **How testers join your test** section, you can copy the link to share
    with your testers. They can then join the testing program using this link.
  prefs: []
  type: TYPE_NORMAL
- en: Internal testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This track is for builds while developing/testing the app. Releases here will
    be quickly available on Google Play for internal testers. In the **Testers** tab,
    there’s a **Testers** section. You can choose an existing list or create a new
    one. There is a maximum of 100 testers for an internal test.
  prefs: []
  type: TYPE_NORMAL
- en: Closed testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the **Testers** tab, you can choose **Email list** or **Google Groups** for
    the testers. If you choose email lists, choose a list of testers or create a new
    list. There is a maximum of 2,000 testers for a closed test.
  prefs: []
  type: TYPE_NORMAL
- en: If you select `the-alpha-group@googlegroups.com`), and all the members of that
    group will become testers.
  prefs: []
  type: TYPE_NORMAL
- en: Open testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the **Testers** tab, you can set **Unlimited** or **Limited number** for
    the testers. The minimum number of testers for the limited testing that you can
    set is 1,000.
  prefs: []
  type: TYPE_NORMAL
- en: In the open, closed, and internal tracks, you can add users to be your testers
    for your applications. You will learn how to add testers in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Staged rollouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When rolling out app updates, you can release them to a small group of users
    first. Then, when the release has issues, you can stop the rollout or publish
    another update to fix the issues. If there are none, you can slowly increase the
    rollout percentage. This is called **staged rollout**.
  prefs: []
  type: TYPE_NORMAL
- en: If you have published an update to less than 100% of your users, you can go
    to the Play Console, select **Release**, click the track, then select the **Releases**
    tab. Below the release you want to update, you can see the **Manage rollout**
    drop-down menu. It will have options to update or halt the rollout.
  prefs: []
  type: TYPE_NORMAL
- en: You can select **Manage rollout**, then **Update rollout** to increase the percentage
    of the rollout of the release. A dialog will appear where you can input the rollout
    percentage. You can also click the **Update** button to update the percentage.
  prefs: []
  type: TYPE_NORMAL
- en: A 100% rollout will make the release available to all of your users. Any percentage
    below that means the release will only be available to that percentage of your
    users.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a major bug or crash is found during a staged rollout, you can go to the
    Play Console, select **Release**, click the track, then select the **Releases**
    tab. Under the release you want to update, select **Manage rollout**, then **Halt
    rollout**. A dialog will appear with additional information. Add an optional note,
    then click the **Halt rollout** button to confirm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.13 – The dialog for halting a staged rollout](img/B19411_17_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.13 – The dialog for halting a staged rollout
  prefs: []
  type: TYPE_NORMAL
- en: 'When a staged rollout is halted, the release page in your track page will be
    updated with **Rollout halted** and a **Resume** **rollout** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.14 – The release page for a halted staged rollout](img/B19411_17_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.14 – The release page for a halted staged rollout
  prefs: []
  type: TYPE_NORMAL
- en: If you have fixed the issue, for example, in the backend, and there’s no need
    to release a new update, you can resume your staged rollout. To do that, go to
    the Play Console, select **Release**, click the track, then select the **Releases**
    tab. Choose the release and click the **Resume rollout** button. In the **Resume
    staged rollout** dialog, you can update the percentage and click **Resume rollout**
    to continue the rollout.
  prefs: []
  type: TYPE_NORMAL
- en: Managed publishing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you roll out a new release on Google Play, it will be published in a few
    minutes. You can change it to be published at a later time. This is useful when
    targeting a specific day, for example, the same day as an iOS/web release or after
    a launch date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Managed publishing must be set up before creating and releasing the update
    for which you want to control the publishing. When you select your app on the
    Google Play Console, you can select **Publishing Overview** on the left side.
    In the **Managed publishing** section, click on the **Turn on managed** **publishing**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 17.15 – Managed publishing \uFEFFin Publishing overview](img/B19411_17_15.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 17.15 – Managed publishing in Publishing overview
  prefs: []
  type: TYPE_NORMAL
- en: '**Managed publishing** dialog will be displayed. Here, you can turn managed
    publishing on or off, then click the **Save** button.'
  prefs: []
  type: TYPE_NORMAL
- en: When you turn on **Managed publishing**, you can continue adding and submitting
    updates to the app. You can see these changes in **Publishing overview** under
    the **Changes in** **review** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the changes have been approved, **Changes in review** will be empty and
    moved to the **Changes ready to publish** section. There, you can click on the
    **Publish changes** button. In the dialog that appears, you can click on the **Publish
    changes** button to confirm. Your update will then be published instantly:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 17.16 – \uFEFFChanges ready to publish](img/B19411_17_16.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 17.16 – Changes ready to publish
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the release tracks where you can test your
    releases, perform staged rollouts for your releases, and manage your publishing
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s test everything you’ve learned by doing an activity.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 17.01 – publishing an app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the final activity of this book, you are tasked with creating a Google Play
    Developer account and publishing a newly developed Android app that you have built.
    You could publish one of the apps you’ve built as part of this book or another
    project that you’ve developed. You can use the following steps as guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Google Play Developer Console ([https://play.google.com/console](https://play.google.com/console))
    and create an account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a keystore that you can use for signing the release build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate an Android app bundle for release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the app on an open beta track before releasing it to the production
    track.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The detailed steps for publishing an app have been explained throughout this
    chapter, so no separate solution is available for this activity. You can follow
    the exercises of this chapter to successfully complete the preceding steps. The
    exact steps required will be unique to your app and will depend on the settings
    you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covered the Google Play Store: from preparing a release to creating
    a Google Play Developer account and finally publishing your app. We started with
    versioning your apps, generating a keystore, creating an APK file or Android app
    bundle and signing it with a release keystore, and storing the keystore and its
    credentials. We then moved on to registering an account on the Google Play Console,
    uploading your APK file or app bundle, and managing releases.'
  prefs: []
  type: TYPE_NORMAL
- en: This is the culmination of the work done throughout this book—publishing your
    app and opening it up to the world is a great achievement and demonstrates your
    progress throughout this course.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, you have gained many skills, from the basics of Android
    app development and building up to implementing features such as RecyclerViews,
    fetching data from web services, notifications, and testing. You have seen how
    to improve your apps with best practices, architecture patterns, and animations,
    and finally, you have learned how to publish them to Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: This is still just the start of your journey as an Android developer. There
    are many more advanced skills for you to develop as you continue to build more
    complex apps of your own and expand upon what you have learned here.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that Android is continuously evolving, so keep yourself up to date
    with the latest Android releases. You can go to [https://developer.android.com/](https://developer.android.com/)
    to find the latest resources and further immerse yourself in the Android world.
  prefs: []
  type: TYPE_NORMAL
