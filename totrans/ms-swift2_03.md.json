["```swift\nlet arrayOne = [1,2,3]\n```", "```swift\nvar arrayTwo = [4,5,6]\n```", "```swift\nvar arrayThree = [Int]()\n```", "```swift\nvar arrayOne = [String]()\nvar arrayTwo = [Double]()\nvar arrayThree = [MyObject]()\n```", "```swift\nvar myArray: [AnyObject] = [1,\"Two\"]\n```", "```swift\nvar arrayFour = [Int](count: 7, repeatedValue: 3)\n```", "```swift\nvar multiArrayOne = [[1,2],[3,4],[5,6]]\nvar multiArrayTwo = [[Int]]()\n```", "```swift\nlet arrayOne = [1,2,3,4,5,6]\nprint(arrayOne[0])  //Displays '1'\nprint(arrayOne[3])  //Displays '4'\n```", "```swift\nvar multiArray = [[1,2],[3,4],[5,6]]\nvar arr = multiArray[0] //arr contains the array [1,2]\nvar value = multiArray[0][1] //value contains 2\n```", "```swift\nlet arrayOne = [1,2,3,4,5,6]\nvar first = arrayOne.first  //first contains 1\nvar last = arrayOne.last  //last contains 6\n\nlet multiArray = [[1,2],[3,4],[5,6]]\nvar arrFirst1 = multiArray[0].first //arrFirst1 contains 1\nvar arrFirst2 = multiArray.first //arrFirst2 contains[1,2]\nvar arrLast1 = multiArray[0].last //arrLast1 contains 2\nvar arrLast2 = multiArray.last  //arrLast2 contains [5,6]\n```", "```swift\nlet arrayOne = [1,2,3]\nlet multiArrayOne = [[3,4],[5,6],[7,8]]\nprint(arrayOne.count)  //Displays 3\nprint(multiArrayOne.count)  //Displays 3 for the three arrays\nprint(multiArrayOne[0].count)  //Displays 2 for the two elements\n```", "```swift\nlet arrayOne = [0,1]\nprint(arrayOne[0])  //Displays 0\nprint(arrayOne[1])  //Displays 1\nprint(arrayOne.count) //Displays 2\n```", "```swift\n//This example will throw an array index out of range error\nvar arrayTwo = [1,2,3,4]\nprint(arrayTwo[6])\n\n//This example will not throw an array index out of range error\nvar arrayOne = [1,2,3,4]\nif (arrayOne.count> 6) {\n    print(arrayOne[6])\n}\n```", "```swift\nvar arrayOne = [1,2]\nvar arrayTwo = [Int]()\narrayOne.isEmpty  //Returns false because the array is not empty\narrayTwo.isEmpty  //Returns true because the array is empty\n```", "```swift\nvar arrayOne = [1,2]\narrayOne.append(3)  //arrayOne will now contain 1, 2 and 3\n```", "```swift\nvar arrayOne = [1,2]\narrayOne += [3,4]  //arrayOne will now contain 1, 2, 3 and 4\n```", "```swift\nvar arrayOne = [1,2,3,4,5]\narrayOne.insert(10, atIndex: 3) //arrayOne now contains 1, 2, 3, 10, 4 and 5\n```", "```swift\nvar arrayOne = [1,2,3]\narrayOne[1] = 10  //arrayOne now contains 1,10,3\n```", "```swift\nvar arrayOne = [1,2,3,4,5]\narrayOne.removeLast()  //arrayOne now contains 1, 2, 3 and 4\narrayOne.removeAtIndex(2)  //arrayOne now contains 1, 2 and 4\narrayOne.removeAll()  //arrayOne is now empty\n```", "```swift\nvar arrayOne = [1,2,3,4,5]\nvar removed1 = arrayOne.removeLast()  //removed1 contains the value 5\nvar removed = arrayOne.removeAtIndex(2)  //removed contains the value 3\n```", "```swift\nlet arrayOne = [1,2]\nlet arrayTwo = [3,4]\nvar combine = arrayOne + arrayTwo //combine contains 1, 2, 3 and 4\n```", "```swift\nvar arrayOne = [1,2,3]\nvar reverse = arrayOne.reverse() //reverse contains 3,2 and 1\n```", "```swift\nlet arrayOne = [1,2,3,4,5]\nvar subArray = arrayOne[2…4] //subArray contains 3, 4 and 5\n```", "```swift\nlet arrayOne = [1,2,3,4,5]\nvar subArray = arrayOne[2..<4] //subArray contains 3 and 4\n```", "```swift\nvar arrayOne = [1,2,3,4,5]\narrayOne[1…2] = [12,13]//arrayOne contains 1,12,13,4 and 5\n```", "```swift\nvar arrayOne = [1,2,3,4,5]\narrayOne[1…3] = [12,13]\n//arrayOne now contains 1, 12, 13 and 5 (four elements)\n```", "```swift\nvar arrayOne = [1,2,3,4,5]\narrayOne[1...3] = [12,13,14,15]\n//arrayOne now contains 1, 12, 13, 14, 15 and 5 (six elements)\n```", "```swift\nvar arrayOne = [9,3,6,2,8,5]\narrayOne.sortInPlace(){ $0 < $1 }\n//arrayOne contains 2,3,5,6,8 and 9\n```", "```swift\nvar arrayOne = [9,3,6,2,8,5]\narrayOne.sortInPlace(){ $1 < $0 }\n//arrayOne contains 9,8,6,5,3 and 2\n```", "```swift\nvar arrayOne = [9,3,6,2,8,5]\nlet sorted = arrayOne.sort(){ $0 < $1 }\n//sorted contains 2,3,5,6,8 and 9\n//arrayOne contains 9,3,6,2,8 and 5\n```", "```swift\nvar arrayOne = [1,2,3,4,5,6,7,8,9]\nlet filtered = arrayFiltered.filter{$0 > 3 && $0 < 7}\n//filtered contains 4,5 and 6\n```", "```swift\nvar city = [\"Boston\", \"London\", \"Chicago\", \"Atlanta\"]\nlet filtered = city.filter{$0.rangeOfString(\"o\") != nil}\n//filtered contains \"Boston\", \"London\" and \"Chicago\"\n```", "```swift\nvar arrayOne = [10, 20, 30, 40]\nlet applied = arrayOne.map{ $0 / 10}\n//applied contains 1,2,3 and 4\n```", "```swift\nvar arrayOne = [1, 2, 3, 4]\nlet applied = arrayOne.map{ \"num:\\($0)\"}\n//applied contains \"num:1\", \"num:2\", \"num:3\" and \"num:4\"\n```", "```swift\nvar arrayOne = [10, 20, 30, 40]\narrayOne.forEach{ print($0) }\n```", "```swift\n10\n20\n30\n40\n```", "```swift\nvar arr = [\"one\", \"two\", \"three\"]\nfor item in arr {\n    print(item)\n}\n```", "```swift\none\ntwo\nthree\n```", "```swift\nvar arr = [\"one\", \"two\", \"three\"]\nfor (index,value) in arr.arr.enumerate() {\n    print\"\\(index) \\(value)\")\n}\n```", "```swift\n0 one\n1 two\n2 three\n```", "```swift\nlet countries = [\"US\":\"UnitedStates\",\"IN\":\"India\",\"UK\":\"UnitedKingdom\"]\n```", "```swift\nvar countries = [\"US\":\"UnitedStates\",\"IN\":\"India\",\"UK\":\"United Kingdom\"]\n```", "```swift\nvar dic1 = [String:String]()\nvar dic2 = [Int:String]()\nvar dic3 = [String:MyObject]()\n```", "```swift\nlet countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"]\nvar name = countries[\"US\"]\n```", "```swift\nlet countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"];\nvar cnt = countries.count  //cnt contains 3\n```", "```swift\nlet countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"]\nvar empty = countries.isEmpty\n```", "```swift\nvar countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"]\n\ncountries[\"UK\"] = \"Great Britain\"\n//The value of UK is now set to \"Great Britain\"\n\nvar orig = countries.updateValue(\"Britain\", forKey: \"UK\")\n//The value of UK is now set to \"Britain\" and orig now contains \"Great Britain\"\n```", "```swift\nvar countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"]\n\ncountries[\"FR\"] = \"France\" //The value of \"FR\" is set to \"France\"\n\nvar orig = countries.updateValue(\"Germany\", forKey: \"DE\")\n//The value of \"DE\" is set to \"Germany\" and orig is nil\n```", "```swift\nvar countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"];\n\ncountries[\"IN\"] = nil //The \"IN\" key/value pair is removed\n\nvar orig = countries.removeValueForKey(\"UK\")\n//The \"UK\" key value pair is removed and orig contains \"United Kingdom\"\n\ncountries.removeAll() //Removes all key/value pairs from the countries dictionary\n```", "```swift\n//Initializes an empty Set of the String type\nvar mySet = Set<String>() \n\n//Initializes a mutable set of the String type with initial values\nvar mySet = Set([\"one\", \"two\", \"three\"])\n\n//Creates aimmutable set of the String type.\nlet mySet = Set([\"one\", \"two\", \"three\"])\n```", "```swift\nvar mySet = Set<String>() \nmySet.insert(\"One\")\nmySet.insert(\"Two\")\nmySet.insert(\"Three\")\n```", "```swift\nvar mySet = Set<String>() \nmySet.insert(\"One\")\nmySet.insert(\"Two\")\nmySet.insert(\"Three\")\nprint(\"\\(mySet.count) items\")\n```", "```swift\nvar mySet = Set<String>() \nmySet.insert(\"One\")\nmySet.insert(\"Two\")\nmySet.insert(\"Three\")\nvar contain = mySet.contains(\"Two\")\n```", "```swift\nfor item inmySet {\n    print(item)\n}\n```", "```swift\n//The remove method will return and remove an item from a set\nvar item = mySet.remove(\"Two\")\n\n//The removeAll method will remove all items from a set\nmySet.removeAll()\n```", "```swift\nvar mySet1 = Set([\"One\", \"Two\", \"Three\", \"abc\"])\nvar mySet2 = Set([\"abc\",\"def\",\"ghi\", \"One\"])\n```", "```swift\nvar newSetUnion = mySet1.union(mySet2)\n```", "```swift\nvar newSetSubtract = mySet1.subtract(mySet2)\n```", "```swift\nvar newSetIntersect = mySet1.intersect(mySet2)\n```", "```swift\n//newSetExclusiveOr = {\"Two\", \"Three\", \"def\", \"ghi\"}\nvar newSetExclusiveOr = mySet1.exclusiveOr(mySet2)\n```", "```swift\nvar team = (\"Boston\", \"Red Sox\", 97, 65, 59.9)\n```", "```swift\nvar team = (\"Boston\", \"Red Sox\", 97, 65, 59.9)\nvar (city, name, wins, loses, percent) = team\n```", "```swift\nvar team = (\"Boston\", \"Red Sox\", 97, 65, 59.9)\nvar city = team.0\nvar name = team.1\nvar wins = team.2\nvar loses = team.3\nvar percent = team.4\n```", "```swift\nvar team = (city:\"Boston\", name:\"Red Sox\", wins:97, loses:65, percent:59.9)\n```", "```swift\nimport Foundation\n```", "```swift\nvar inum = 7    //Creates an Int\nvar dnum = 10.6 //Creates a Double\nvar insnum: NSNumber = inum  //Bridges the Int to a NSNumber\nvar dnsnum: NSNumber = dnum  //Bridges the Double to a NSNumber\nvar newint = Int(insnum)       //Creates an Int from a NSNumber\nvar newdouble = Double(dnsnum) //Creates a Double from a NSNumber\n```", "```swift\nvar str = \"Hello World from Swift\"\nstr.cStringUsingEncoding(NSUTF8StringEncoding)\n```", "```swift\nfunc testFunc(test: String) {\n    print(test)\n}\nvar nsstr: NSString = \"abc\"\ntestFunc(nsstr as String)\n```", "```swift\nvar nsstr: NSString = \"1234\"\nvar num = Int(nsstr as String)//num contains the number 1234\n```", "```swift\nvar nsarr: NSArray = [\"HI\",\"There\", 1,2]\nvar arr = nsarr as? [AnyObject]\n```", "```swift\nvar nsarr: NSArray = [\"HI\",\"There\"]\nvar arr = nsarr as [AnyObject]\nvar newarr = arr as? [String]\n```", "```swift\nvar nsarr: NSArray = [\"HI\",\"There\", 1, 2]\nvar arr = nsarr as [AnyObject]\nvar newarr = arr as? [String]\n```", "```swift\nvar nsarr: NSArray = [\"HI\",\"There\", 1,2]\nif let arr = nsarr as? [String] {\n    // arr is a native Swift array type.\n}\n```", "```swift\nvar nsdic: NSDictionary = [\"one\":\"HI\", \"two\":\"There\"]\nif let dic = nsdic as? [String: String] {\n    var newDic = dicasNSDictionary\n}\n```", "```swift\nvar nsdic2: NSDictionary = [\"one\":\"HI\", \"two\":2]\nif let dic2 = nsdic2 as? [String:String] {\n    // Would not reach this because\n    // conversion failed\n}\n```", "```swift\nvar range = NSRange(location: 3, length: 5)\nvar rect = CGRect(x: 10, y: 10, width: 20, height: 20)\nvar size = NSSize(width: 20, height: 40)\n```", "```swift\nvar rect = CGRect(x: 10, y: 10, width: 20, height: 20)\nrect.origin.x = 20 \n//Changes the X value from 10 to 20\n\nvar rectMaxY = rect.maxY\n//rectMaxY contains 30 (value of y + value of height)\n\nvar validRect = rect.isEmpty\n//validRect contains false because rect is valid.\n```"]