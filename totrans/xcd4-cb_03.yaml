- en: Chapter 3. Using Storyboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring storyboards for a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Twitter application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating storyboard scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring storyboard scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying transitions to storyboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a tweet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding photos to a tweet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing transition to another view controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting storyboard view controllers programmatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with the release of Xcode 4.2 and iOS 5, developers and designers now
    have the ability to lay out the workflow of their applications using the new storyboards
    feature that has been incorporated as part of the XIB editor in Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of creating numerous interface files, you can now start dragging and
    editing all your views in one place with the ability to specify transitions between
    screens and the associated actions that trigger them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be gaining an understanding of what storyboards actually
    are, and how they require iOS 5 or later, as well as familiarizing ourselves with
    the new workflow that has been implemented within the XIB editor within Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring storyboards for a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to configure an application's project properties
    using Xcode so that it is set up correctly to use a storyboard file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, perform the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select your project target from under the **TARGETS** group and select
    the **Summary** tab.![How to do it...](img/3349_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **MainStoryboard** from the **Main Storyboard** drop-down menu, as shown
    in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we gained an understanding of what storyboards are, as well
    as how they differ from user interfaces created in the past, whereby a new view
    would need to be created for each XIB file for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are creating applications for the iPad or iPhone, each view controller
    that gets created within your storyboard represents the contents of a single screen,
    comprised of the contents of more than one scene.
  prefs: []
  type: TYPE_NORMAL
- en: Each object contained within a view controller can be linked to another view
    controller that implements another scene.
  prefs: []
  type: TYPE_NORMAL
- en: In our final steps, we looked at how to configure our project properties so
    that it is set up to use the storyboard user interface file by our application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also choose to manually add new **Storyboard** template to your project.
    This can be achieved by performing the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **File** | **New** | **File…** or press *command* + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Storyboard** template from the list of available templates, located
    under the **User Interface** subsection within the **iOS** section.![There's more…](img/3349_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have selected **iPhone** from under the **Device Family** drop-down
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the name of the storyboard file within the **Save As** field as the
    name of the file to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button to save the file to the specified folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, when we create our project using storyboards, we will need to modify
    our application''s delegate `AppDelegate.m` file, as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about using storyboards in your applications, you can refer
    to the Apple Developer documentation, located at [https://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/Xcode4UserGuide/InterfaceBuilder/InterfaceBuilder](https://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/Xcode4UserGuide/InterfaceBuilder/InterfaceBuilder).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a Twitter application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating storyboard scenes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interfaces – Creating the UI"), *User Interfaces – Creating the UI*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Twitter application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a single view application to build
    our Twitter application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will start by creating our **TwitterExample** project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin with creating a new Xcode project, perform the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch **Xcode** from the `/Developer/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create a new Xcode project**, or click on **File** | **New** | **Project…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Single View Application** from the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter in `TwitterExample` as the name of your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **iPhone** from under the **Devices** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Storyboards** checkbox has been checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Automatic Reference Counting** checkbox has been checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Include Unit Tests** checkbox has not been checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the location where you would like to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to save your project at the specified location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The Company Identifier for your app needs to be unique. Apple recommends that
    you use the reverse domain style (for example, `com.domainName.appName`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once your project has been created, you will be presented with the Xcode development
    environment, along with the project files that the template created for you.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we just created an application that contains a storyboard and
    consists of one view controller, which does not provide any functionality at the
    moment. In the following recipes, we will look at how we can add functionality
    to view controllers, create storyboard scenes, and transition between them.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating storyboard scenes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Configuring storyboard scenes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Applying transitions to storyboards* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing transition to another view controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Presenting storyboard view controllers programmatically* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating storyboard scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of creating scenes involves adding a new view controller to the
    storyboard, where each view controller is responsible for managing a single scene.
    A better way to describe scenes would be to think of a movie reel, where each
    frame that is being displayed is the actual scene that connects onto the next
    part.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When adding scenes to your storyboard file, you can add controls and views to
    the view controller's view, just as you would do for an XIB file, and have the
    ability to configure outlets and actions between your view controllers and its
    views.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a new scene into your storyboard file, perform the following simple
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the project navigator, select the file named `MainStoryboard.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Object Library**, select and drag a new **View Controller** object on
    to the storyboard canvas. This is shown in the following screenshot:![How to do
    it...](img/3349_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, drag a **Label** control on to the view and change the label's text property
    to read **About Twitter App**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, drag a **Round Rect Button** control on to the view that we will use in
    a later section to call the calling view. In the button's attributes, change the
    text to read **Go Back**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, on the first view controller, drag a **Round Rect Button** control on
    to the view. In the button's attributes, change the text to read **About Twitter
    App**. This will be used to call the new view that we added in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, on the first view controller, drag a **Round Rect Button** control on
    to the view, underneath the **About Twitter App** button that we created in the
    previous step. In the button's attributes, change the text to read **Compose Tweet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, save your project by selecting **File** | **Save** from the menu bar,
    or alternatively by pressing *command* + *S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have added the controls to each of the view, your final interface
    should look something like what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to refresh your memory on how to create actions, these were
    discussed in the *Creating actions that respond to user actions* recipe in [Chapter
    1](ch01.html "Chapter 1. Getting and Installing the iOS SDK Development Tools"),
    *Getting and Installing the iOS SDK Development Tools*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create the `Action` event for our **Compose Tweet** button
    so that it has the ability to post tweets. To create an action, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the assistant editor by selecting **Navigate** | **Open In Assistant Editor**
    or by pressing *option* + *command* + *,*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the `ViewController.h` interface file gets displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Compose Tweet** button; hold down the *control* key, and drag it
    from the **Compose Tweet** button to the `ViewController.h` interface file between
    the `@interface` and `@end` tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Action** from the **Connection** drop-down menu for the connection
    to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `composeTweet` for the name of the method to create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **UIButton** from the **Type** drop-down menu for the type of method
    to create.![How to do it...](img/3349_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The highlighted line in the following code snippet shows the completed `ViewController.h`
    interface file, with our method that will be responsible for calling and displaying
    our tweet sheet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have created our scene, buttons, and actions, our next step is to
    configure the scene, which is shown in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked at how we can add a new view controller to our storyboard
    and then started to add controls to each of our view controllers and customize
    their properties.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we looked at how we can create an `Action` event for our **Compose Tweet**
    button that will be responsible for responding and executing the associated code
    behind it to display our tweet sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of us hooking up an event handler to the `TouchUpInside` event of the
    button, we decided to simply add an action to it and handle the output of this
    ourselves. These types of actions are called "instance methods". Here we are basically
    creating the `Action` method that will be responsible for allowing the user to
    compose and send a Twitter message.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Configuring storyboard scenes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Applying transitions to storyboards* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing transition to another view controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Presenting storyboard view controllers programmatically* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring storyboard scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you want to transition from one view controller to another, you can hold
    down the *control* key and click a button, table view cell, or any other object
    from one view controller, and then drag it to the new view controller for a different
    scene. This technique of dragging between view controllers creates, what is known
    as a segue.
  prefs: []
  type: TYPE_NORMAL
- en: A **segue** is a configurable object that supports all of the same types of
    transitions made available to you within the `UIKit` class reference, such as
    modal transitions and navigation transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You also have the ability to define custom transitions that replace one view
    controller with another.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see how this can be achieved, we need to modify our **TwitterExample**
    application that we created in a previous recipe. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **About Twitter App** (`Round Rect Button`) control, and then hold
    down the *control* key while dragging it to the view controller containing the
    **Go Back** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release the mouse button, and then choose the **modal** option from the **Action
    Segue** pop-up menu.![How to do it…](img/3349_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that a gray arrow connects both of your view controllers. When
    the **About Twitter App** button is pressed, it will display the page containing
    the **Go Back** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we need to do the same for our second view, so that when the **Go Back**
    button is pressed, it will return back to our first view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 1 to 2, but substitute the **Go Back** button for the **About Twitter
    App** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explanations of the storyboard segues that come part of Xcode 4 are included
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Segue name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **modal** | A **modal** view controller is not a specific subclass of the
    `UIViewController` class, as any type of view controller can be presented modally
    by your application. However, like the tab bar and navigation view controllers,
    you can present your view controllers modally when you want to convey a specific
    meaning about the relationship between the previous view hierarchy and the newly
    presented view hierarchy. |'
  prefs: []
  type: TYPE_TB
- en: '| **push** | The **push** segues allow you to push a new view controller onto
    the navigation stack, just as if you were stacking plates. The view at the top
    of the stack being the one that gets rendered. |'
  prefs: []
  type: TYPE_TB
- en: '| **custom** | These allow you to customize and call a view controller from
    code using the `prepareForSegue` method, and are what you use to present the content
    of your application.The job of the view controller is to manage the presentation
    of some content and coordinate the update and the synchronization of that content
    with the application''s underlying data objects.In the case of a **custom** view
    controller, this involves creating a view to present the content and implementing
    the infrastructure needed to synchronize the contents of that view with your application''s
    data structures. |'
  prefs: []
  type: TYPE_TB
- en: Once you have done this, your view controllers should look like something shown
    in the following screenshot. You can apply a number of transitions to each of
    your view controllers, so that they can perform animation when they get displayed
    to the view.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3349_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To learn how to apply transitions to your view controller, please refer to the
    *Applying transitions to storyboards* recipe on Transitions in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have applied each of the segues to both view controllers, our final
    step is to compile, build, and run our application.
  prefs: []
  type: TYPE_NORMAL
- en: From the **Product** menu, select **Run**. Alternatively, you can press the
    *command* + *R* keys to compile, build, and run the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows our application running within the iOS Simulator,
    with each of their associated screens displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3349_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So there you have it. In this recipe, we have learned how to create and add
    new scenes into our main storyboard, as well as the process on how we are able
    to link these up and configure each scene when a button has been pressed through
    the use of segues.
  prefs: []
  type: TYPE_NORMAL
- en: There is also another way in which we can transition to scenes within our storyboard
    through a programmatic approach. We will be taking a closer look into this, when
    we embark on the *Presenting storyboard view controllers programmatically* recipe
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Applying transitions to storyboards* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing transition to another view controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Presenting storyboard view controllers programmatically* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying transitions to storyboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how we can apply transition animations to views
    as well as each of the available transitions that come with storyboards.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have seen such transitions in applications, such as the photos app that
    comes as part of the iPhone and iPad, where you can apply a transition and start
    a slideshow.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to configure a segue to specify a kind of transition to use between
    the different scenes, perform the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the segue link for the first view controller as indicated by the large
    circle in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Attributes Inspector** and then click on the **Transitions** drop-down
    menu.![How to do it…](img/3349_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You have the ability to choose from the various transition types that are only
    applicable to the **Modal** style; these are explained within the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Transition name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Default** | When this transition is selected, it uses the **Cover Vertical**
    transition style. |'
  prefs: []
  type: TYPE_TB
- en: '| **Cover Vertical** | When the view controller is presented, its view slides
    up from the bottom of the screen. When the view is dismissed, it slides back down.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Flip Horizontal** | When the view controller is presented, the current
    view initiates a horizontal 3D flip from right to left-hand side, resulting in
    the revealing of the new view as if it were on the back of the previous view.
    When this view is dismissed, the flip occurs from left to right-hand side, returning
    to the original view. |'
  prefs: []
  type: TYPE_TB
- en: '| **Cross Dissolve** | When the view controller is presented, the current view
    fades out while the new view fades in at the same time. When the view is dismissed,
    a similar type of cross-fade is used to return to the original view. |'
  prefs: []
  type: TYPE_TB
- en: '| **Partial Curl** | When the view controller is presented, one corner of the
    current view curls up to reveal the modal view underneath. When the view is dismissed,
    the curled up page uncurls itself back on top of the modal view. A modal view
    presented using this transition is itself prevented from presenting any additional
    modal views.This transition style is supported only if the parent view controller
    is presenting a full-screen view and you use the `UIModalPresentationFullScreen`
    modal presentation style. Attempting to use a different form factor for the parent
    view or a different presentation style triggers an exception. |'
  prefs: []
  type: TYPE_TB
- en: These transitions come as part of the `UIViewController` class that inherits
    from the `UIKit` framework. The `UIViewController` class provides the underlying
    fundamental view-management model for all of your iOS apps.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the preceding transition types, refer to the `UIViewController`
    framework reference in the Apple Developer documentation, located at [https://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode provides the option of changing the visual appearance of the transition
    as it takes place from one scene to another within a storyboard. These are commonly
    referred to as segues.
  prefs: []
  type: TYPE_NORMAL
- en: Using transitions enables you to apply a variety of different styles to each
    of your view controllers that are to be rendered and displayed to the view, and
    are represented by arrows between each of the view controllers. By default, a
    **Cover Vertical** transition is performed whereby the new scene slides vertically
    upwards from the bottom of the view to cover the currently displayed scene.
  prefs: []
  type: TYPE_NORMAL
- en: You have the ability to define custom transitions that enable you to provide
    a custom segue class method to handle the transition. This can be achieved by
    selecting **custom** for the style of a segue, and fill in the name of the custom
    segue class to use. If you want to use any of the standard segue classes, you
    can find these located within the `UIKit` class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For information on the standard segue classes, you can refer to the `UIKitframework`
    reference in the Apple Developer documentation, located at [https://developer.apple.com/library/ios/#documentation/uikit/reference/UIKit_Framework/_index.html](https://developer.apple.com/library/ios/#documentation/uikit/reference/UIKit_Framework/_index.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Preparing transition to another view controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Presenting storyboard view controllers programmatically* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composing a tweet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how we can use the Twitter APIs for iOS 5 and
    interact with them effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Twitter has provided us with some very simple APIs to follow, making it a snap
    to interact with them. In this recipe, we will look at how we can use these to
    post a tweet using the Twitter composition sheet.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use Twitter within your application, we need to add the Twitter
    framework to your project. This can be achieved by performing the following simple
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project from within the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select your project target from under the **TARGETS** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Build Phases** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the **Link Binary with Libraries** disclosure triangle.     Click on the **+** button and select **Twitter.framework** from the list.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Add** button to add the framework to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to create the code functionality that will be responsible
    for posting our tweet to Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `composeTweet` method, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starting with iOS 5, whenever you want to compose a Twitter message for submission,
    you will need to use the `TWTweetComposeViewController` class instance. The `TWTweetComposeViewController`
    class handles everything, and presents us with a tweet composition sheet, so that
    we can begin to type in our tweet.
  prefs: []
  type: TYPE_NORMAL
- en: The `TWTweetComposeViewController` class also enables you to set the initial
    Twitter text information to use, including how to go about adding images and URLs.
    Next, we declared a `myTwitter` variable to point to an instance of our `TWTweetComposeViewController`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: We then used the `canSendTweet` class method of the `TWTweetComposeViewController`
    class to check to see if the user has correctly installed and set up Twitter.
    If this has not been done, this statement will fail, and a value of `NO` (or `FALSE`)
    will be returned to the `isSuccess` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we assigned some text to appear on our composition sheet, by setting the
    `setInitialText` method, and then displayed this to the view. Finally, we set
    up a handler, using the `completionHandler` method to notify us when the user
    has completed composing the tweet and display the relevant alert message based
    on the outcome returned by the method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the `TWTweetComposeViewController` class, you can refer
    to the Twitter framework reference documentation, located at [https://developer.apple.com/library/ios/#documentation/Twitter/Reference/TWTweetSheetViewControllerClassRef/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/Twitter/Reference/TWTweetSheetViewControllerClassRef/Reference/Reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the release of iOS 6, integration of social networks is performed through
    the use of the `UIActivityViewController` class, or the classes that are contained
    with the new social framework of the iOS 6 SDK. For general-purpose social networking
    integration, the `UIActivityViewController` class is the recommended path.
  prefs: []
  type: TYPE_NORMAL
- en: When using this class, the user is presented with a screen providing a choice
    of social network services. Once the application has selected a target service,
    the class then presents the user with a blank message preview panel where the
    message can be reviewed and then posted.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take a look at both the `UIActivityViewController` and `SLComposeViewController`
    classes to see each of their differences.
  prefs: []
  type: TYPE_NORMAL
- en: Using the UIActivityViewController class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `UIActivityViewController` class is instantiated from within an application
    at the point when posting is ready to be made to a social network. The following
    code snippet shows how to use the `UIActivityViewController` class to handle posts
    to Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet instantiates a new `UIActivityViewController` instance,
    and passes the text to be included within the dialog box when it is presented
    to the user. There is an option to include an image with the post, which we will
    be taking a look at a bit later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user decides to take an action to post an update from within an application,
    the following screen is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the UIActivityViewController class](img/3349_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once a destination social network has been selected from the list of choices,
    a preview sheet will be displayed. In the event that the user has not yet configured
    an account for the selected social network in the **Settings** application, a
    dialog box will appear providing the user to either set up an account or simply
    cancel the posting.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the `UIActivityViewController` class, you can refer
    to the Apple Developer reference documentation, located at [https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIActivityViewController_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIActivityViewController_Class/Reference/Reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using the SLComposeViewController class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to use the `SLComposeViewController` class, a number of steps are required
    to be performed. First, we need to verify whether the message can be sent to the
    specific social network service to ensure that the device has been properly configured
    to use the particular service.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is achieved by passing through the type of service as an argument to the
    `isAvailableForserviceType` method, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `isAvailableForServiceType` method accepts the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SLServiceTypeFacebook`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SLServiceTypeTwitter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SLServiceTypeSinaWeibo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next step is to create an instance of the `SLComposeViewController` class
    and supply an optional completion handler to be called when the compose sheet
    is either cancelled by the user or used to send a message. Finally, when the message
    is ready to be presented to the user, the `SLComposeViewController` object is
    presented modally by calling the `presentViewController` method of the parent
    view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows how to configure and present the `SLComposeViewController`
    class instance for posting to Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code snippet presents you with the Twitter compose sheet with
    the default text preconfigured using the method calls. The completion handler
    can be set up to pass a value back, indicating the action taken by the user within
    the compose sheet view. These values are explained in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Compose sheet values | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `SLComposeViewControllerResultCancelled` | The user cancelled the composition
    session by touching the **Cancel** button. |'
  prefs: []
  type: TYPE_TB
- en: '| `SLComposeViewControllerResultDone` | The user sent the composed message
    by touching the **Sent** button. |'
  prefs: []
  type: TYPE_TB
- en: The social framework class that comes with iOS 6 contains two classes that have
    been designed to provide more flexibility around social networking integration.
  prefs: []
  type: TYPE_NORMAL
- en: The `SLComposeViewController` class, unlike the `UIActivityViewController` class,
    allows you to post a message to a specific social network service within the application
    code, without requiring the user to make a selection from the list of available
    services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user is then presented with a preview sheet appropriate to the specific
    service the application has been set up for. Using the social framework within
    your application is very simple, and can be achieved by performing the following
    simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add **Social.framework** into your project similarly as we did with **Twitter.framework**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `composeTweet` method, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the `SLComposeViewController` class, you can refer to
    the Apple Developer reference documentation, located at [https://developer.apple.com/library/ios/#documentation/NetworkingInternet/Reference/SLComposeViewController_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/NetworkingInternet/Reference/SLComposeViewController_Class/Reference/Reference.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding photos to a Tweet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Presenting storyboard view controllers programmatically* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Understanding the Core Motion framework* section in [Appendix](apa.html
    "Appendix A. Exploring the MultiTouch Interface"), *Exploring the Multi-touch
    Interface*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding photos to a tweet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how we can incorporate images within Twitter messages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will look at how we can add an image to a tweet using the
    Twitter composition sheet.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding images to a Twitter message is very easy and can be achieved by performing
    the following simple steps inside the **TwitterExample** project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `composeTweet` method and add the highlighted code within
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this code snippet, we declare a `myTwitter` variable to an instance of our
    `TWTweetComposeViewController` class. We then use the `addImageinstance` method,
    to add an image to the tweet, and then present the view along with the image to
    the user.Whenever you want to add images to a Twitter message for submission,
    you will need to use the `TWTweetComposeViewController` class instance. This class
    handles everything required, and presents us with a tweet composition sheet, so
    that we can add images and URLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have added in the final piece of code to our **TwitterExample**
    application, first we need to configure our Twitter account information prior
    to building and running the application. Perform the following steps to set up
    and configure Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Settings** application from the iOS home screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Twitter** option from the **Settings** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your username and password credentials, and click on the **Sign In** button.
    If you do not have a Twitter account, you can create one from this screen by selecting
    the **Create New Account** option.![How to do it…](img/3349_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear, showing our Twitter
    application.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3349_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you start composing your tweet, you can choose to have your current geographical
    location added to your message. This feature basically uses the Google Maps API
    to send your location along with the tweet, and then allowing others to view the
    precise location on Google Maps.
  prefs: []
  type: TYPE_NORMAL
- en: Attachments can also be added to the composed message, and this can be any valid
    image (PNG, JPG, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the **Send** button will submit the message to your Twitter account,
    and you will receive a message stating that the tweet has been successfully posted.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked at how we can integrate Twitter-like functionality
    into our applications. There are many ways in which applications can be more social,
    by including Twitter. For example, you could make the application auto-tweet,
    when you unlock a special item within your game, or when you finish the game,
    or just want to upload your high-score achievements.
  prefs: []
  type: TYPE_NORMAL
- en: This lets all of their friends know they are playing your game, which in turn,
    gets you more exposure. Another example could be a business application, which
    could allow the user to tweet the number of successful projects that they have
    completed. With Twitter getting so much attention lately, you would be crazy to
    not include some sort of Twitter integration into your own iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding an image to a tweet using the `SLComposeViewController` class can be
    achieved by adopting the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we used the `SLComposeViewController` method
    to configure and present the tweet composition sheet. We then configured our composer
    view using the method calls for displaying default text and setting the default
    image.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Presenting transition to another view controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Presenting storyboard view controllers programmatically* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing transition to another view controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how we can use the storyboard features to transition
    to another view controller through code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will look at how we can programmatically transition to another
    view controller through the use of segues.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to programmatically perform a transition to another view controller
    using a segue, perform the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `MainStoryboard.storyboard` file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the segue relationship for the **About Twitter App** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Attributes Inspector** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Identifier** property to `secondViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Style** property to **Modal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Transition** property to **Cover Vertical**.![How to do it…](img/3349_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to modify our view controller to include the `prepareForSegue:sender`
    method that will be responsible for handling transitions between view controllers
    within the storyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `prepareForSegue:sender` method, as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear; click on the
    **About Twitter App** button to see the transition happen to the second view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3349_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever a user triggers a segue in the current scene, the storyboard runtime
    calls the `prepareForSegue:sender` method for the current view controller. This
    method gives the current view controller an opportunity to pass any needed data
    to the view controller that is about to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we perform a segue call associated with a control using its identifier,
    which we created, and check to ensure that we are processing the correct segue,
    before displaying an alert when the view is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Handling it this way allows us to customize segues, and applies any transition
    to the scene that is located within your storyboard, as long as the identifier
    is unique.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For information on how to implement the methods of the `UIViewController` class,
    refer to the Apple Developer documentation, located at [https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html)`#//apple_ref/occ/cl/UIViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Presenting storyboard view controllers programmatically* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting storyboard view controllers programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how we can use the storyboard features to programmatically
    present view controllers within the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will look at how we can programmatically call another view
    controller within the storyboard by using its identifier.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to programmatically determine which view we are in, we will need to
    create a new `UIViewController` subclass for our second view controller. This
    can be achieved by performing the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `TwitterExample` folder from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **File** | **New** | **File…** or press *command* + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Objective-C class** template from the list of templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `SecondViewController` as the name of the class to create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have selected **UIViewController** as the type of subclass to
    create from the **Subclass** of drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Targeted for iPad** checkbox has not been checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **With XIB for User Interface** checkbox has not been checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the location to save the class file, and then click on the **Create**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have done this, we need to update the class method of our second view
    controller to use our `SecondViewController` subclass:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `SecondViewController.h` interface file, located under the `TwitterExample`
    folder, from within the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the interface file by adding the highlighted code sections, as shown
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `SecondViewController.m` implementation file, located under the `TwitterExample`
    folder, from within the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `prepareForSegue:sender` method, as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select the second view controller and click on the **Identity Inspector** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, change the **Custom Class** property to read `SecondViewController`.![How
    to do it…](img/3349_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to apply the same storyboard segues for our first view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Attributes Inspector** section, and then under the **StoryboardSegue**
    section, enter F`irstViewController` as the unique identifier to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the same steps as we did for the `SecondViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear, showing the programmatic
    transitions between each of the view controllers that are defined within our storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you click on the **About App** button, it transitions over to the second
    view controller and then displays the message based on the `prepareForSegue:(UIStoryboardSegue*)segue`
    method call, determining the identifier of the current view controller that is
    being displayed within the view.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the **Go Back** button will transfer control over to the first view
    controller; a call is made to the `prepareForSegue` method to determine the current
    identifier of the current view.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the storyboard runtime usually handles transitions between view controllers,
    you can also trigger segues programmatically directly from within your code. You
    may choose to do this when setting up the segue from within the XIB editor in
    Xcode, or you may want to use the accelerometer events to trigger a transition
    and display a graphic animation.
  prefs: []
  type: TYPE_NORMAL
- en: If you take a look at the following code snippet, it shows you how you can programmatically
    display any view controller within your storyboard, by using the `instantiateViewControllerWithIdentifier:`
    method of the `UIStoryboard` class. We then use the `presentViewController:` method
    to push the view controller onto the view controller navigation stack.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For information on how to implement the methods of the `UIStoryboard` class,
    refer to the Apple Developer documentation, located at [https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIStoryboard_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIStoryboard_Class/Reference/Reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Composing a tweet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding photos to a tweet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Applying transitions to storyboards* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing transition to another view controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
