["```swift\n    import UIKit\n    **import** **CoreLocation** \n    ```", "```swift\n    extension AddJournalEntryViewController {\n      // MARK: - CoreLocation\n    } \n    ```", "```swift\n    @IBOutlet var photoImageView: UIImageView!\n    @IBOutlet var saveButton: UIBarButtonItem!\n    **@IBOutlet****var****getLocationSwitch****:** **UISwitch****!**\n    **@IBOutlet****var****getLocationSwitchLabel****:** **UILabel****!**\n    var newJournalEntry: JournalEntry? \n    ```", "```swift\n    var newJournalEntry: JournalEntry?\n    **private let****locationManager****=****CLLocationManager****()**\n    **private var** **locationTask****=****Task****<****Void****,** **Error****>?**\n    **private var****currentLocation****:** **CLLocation****?** \n    ```", "```swift\n    private func fetchUserLocation() {\n      locationManager.requestWhenInUseAuthorization()\n      self.locationTask = Task {\n        for try await update in \n        CLLocationUpdate.liveUpdates() {\n          if let location = update.location  {\n            updateCurrentLocation(location)\n          } else if update.authorizationDenied {\n            failedToGetLocation(message: \"Check Location \n            Services settings for JRNL in Settings > Privacy \n            & Security.\")\n          } else if update.locationUnavailable {\n            failedToGetLocation(message: \"Location    \n            Unavailable\")\n          }\n        }\n      }\n    } \n    ```", "```swift\nlocationManager.requestWhenInUseAuthorization() \n```", "```swift\nself.locationTask = Task { \n```", "```swift\nfor try await update in \nCLLocationUpdate.liveUpdates() { \n```", "```swift\nif let location = update.location  {\n  updateCurrentLocation(location)\n} \n```", "```swift\nelse if update.authorizationDenied {\nfailedToGetLocation(message: \"Check Location \nServices settings for JRNL in Settings > Privacy & Security.\"))} \n```", "```swift\nelse if update.locationUnavailable {\nfailedToGetLocation(message: \"Location    \nUnavailable\")\n} \n```", "```swift\n    private func updateCurrentLocation(_ location: CLLocation) {\n      let interval = location.timestamp.timeIntervalSinceNow\n      if abs(interval) < 30 {\n        self.locationTask?.cancel()\n        getLocationSwitchLabel.text = \"Done\"\n        let lat = location.coordinate.latitude\n        let long = location.coordinate.longitude\n        currentLocation = CLLocation(latitude: lat, \n        longitude: long)\n      }\n    } \n    ```", "```swift\n    private func failedToGetLocation(message: String) {\n      self.locationTask?.cancel()\n      getLocationSwitch.setOn(false, animated: true)\n      getLocationSwitchLabel.text = \"Get location\"\n      let alertController = UIAlertController(title: \n      \"Failed to get location\", message: message, \n      preferredStyle: .alert)\n      let okAction = UIAlertAction(title: \"OK\", style: \n      .default)\n      alertController.addAction(okAction)\n      present(alertController, animated: true)\n    } \n    ```", "```swift\n    // MARK: - Actions\n    @IBAction func locationSwitchValueChanged(_ sender: UISwitch) {\n      if getLocationSwitch.isOn {\n        getLocationSwitchLabel.text = \"Getting location...\"\n        fetchUserLocation()\n      } else {\n        currentLocation = nil\n        getLocationSwitchLabel.text = \"Get location\"\n        self.locationTask?.cancel()\n      }\n    } \n    ```", "```swift\n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n      let title = titleTextField.text ?? \"\"\n      let body = bodyTextView.text ?? \"\"\n      let photo = photoImageView.image\n      let rating = 3\n    **let** **lat** **=****currentLocation****?****.****coordinate****.****latitude**\n    **let** **long** **=****currentLocation****?****.****coordinate****.****longitude**\n      newJournalEntry = JournalEntry(rating: rating, title: \n      title, body: body, photo: photo**,** **latitude****: lat,** \n    **longitude****: long**)\n    } \n    ```", "```swift\n    private func updateSaveButtonState() {\n      let textFieldText = titleTextField.text ?? \"\"\n      let textViewText = bodyTextView.text ?? \"\"\n    **let** **textIsValid** **=****!****textFieldText.****isEmpty****&&**\n    **!****textViewText.****isEmpty**\n    **if****getLocationSwitch****.****isOn** **{**\n    **saveButton****.****isEnabled****=** **textIsValid** \n    **&&****currentLocation****!=****nil**\n     **}** **else** **{**\n    **saveButton****.****isEnabled****=** **textIsValid**\n     **}**\n    } \n    ```", "```swift\n     currentLocation = CLLocation(latitude: lat,    \n          Longitude: long\n          **updateSaveButtonState****()**\n      }\n    } \n    ```", "```swift\n    import UIKit\n    **import** **CoreLocation**\n    **import** **MapKit** \n    ```", "```swift\n    extension MapViewController {\n    // MARK: - CoreLocation\n    } \n    ```", "```swift\n    // MARK: - Properties\n    @IBOutlet var mapView: MKMapView! \n    ```", "```swift\n    @IBOutlet var mapView: MKMapView!\n    **private let****locationManager****=****CLLocationManager****()**\n    **private var** **locationTask****=****Task****<****Void****,** **Error****>?** \n    ```", "```swift\n    private func fetchUserLocation() {\n      locationManager.requestWhenInUseAuthorization()\n      self.navigationItem.title = \"Getting location...\"\n      self.locationTask = Task {\n        for try await update in CLLocationUpdate.liveUpdates() {\n          if let location = update.location  {\n            updateMapWithLocation(location)\n          } else if update.authorizationDenied {\n            failedToGetLocation(message: \"Check Location Services\n            settings for JRNL in Settings > Privacy & Security.\")\n          } else if update.locationUnavailable {\n            failedToGetLocation(message: \"Location Unavailable\")\n          }\n        }\n      }\n    } \n    ```", "```swift\n    private func updateMapWithLocation(_ location: CLLocation) {\n      let interval = location.timestamp.timeIntervalSinceNow\n      if abs(interval) < 30 {\n        self.locationTask?.cancel()\n        let lat = location.coordinate.latitude\n        let long = location.coordinate.longitude\n        navigationItem.title = \"Map\"\n        mapView.region = MKCoordinateRegion(center: \n        CLLocationCoordinate2D(latitude: lat, \n        longitude: long), span: MKCoordinateSpan(\n        latitudeDelta: 0.01, longitudeDelta: 0.01))\n      }\n    }\n    private func failedToGetLocation(message: String) {\n      self.locationTask?.cancel()\n      navigationItem.title = \"Location not found\"\n      let alertController = UIAlertController(title: \n      \"Failed to get location\", message: message, \n      preferredStyle: .alert)\n      let okAction = UIAlertAction(title: \"OK\", \n      style: .default)\n      alertController.addAction(okAction)\n      present(alertController, animated: true)\n    } \n    ```", "```swift\n    override func viewDidLoad() {\n      super.viewDidLoad()\n    **fetchUserLocation****()**\n    } \n    ```", "```swift\n    import UIKit\n    **import** **MapKit** \n    ```", "```swift\n    class JournalEntry**:** **NSObject****,** **MKAnnotation**{ \n    ```", "```swift\n    // MARK: - MKAnnotation\n    var coordinate: CLLocationCoordinate2D {\n      guard let lat = latitude, let long = longitude else {\n        return CLLocationCoordinate2D()\n      }\n      return CLLocationCoordinate2D(latitude: lat,   longitude: long)\n    } \n    ```", "```swift\n    var title: String? {\n      date.formatted(\n        .dateTime.day().month().year()\n      )\n    } \n    ```", "```swift\n    var subtitle: String? {\n      entryTitle\n    } \n    ```", "```swift\n    guard let journalEntry2 = JournalEntry(rating: 0, title: \"Bad\", body: \"Today is a bad day\", photo: photo2**,** **latitude****:** **37.3318****,** **longitude****:** **-****122.0312**) else {\n      fatalError(\"Unable to instantiate journalEntry2\")\n    } \n    ```", "```swift\n    extension MapViewController: MKMapViewDelegate {\n    } \n    ```", "```swift\n    private var locationTask: Task<Void, Error>?\n    **private var****annotations****:****[****JournalEntry****] = []** \n    ```", "```swift\n     fetchUserLocation()\n      **mapView****.****delegate****=****self**\n    } \n    ```", "```swift\n     mapView.delegate = self\n      **annotations** **=** **JournalEntry****.****createSampleJournalEntryData****()**\n    } \n    ```", "```swift\n     annotations = JournalEntry.**createSampleJournalEntryData**()\n      **mapView****.****addAnnotations****(****annotations****)**\n    } \n    ```", "```swift\n    // MARK: - MKMapViewDelegate\n    func mapView(_ mapView: MKMapView, viewFor annotation: any MKAnnotation) -> MKAnnotationView? {\n      let identifier = \"mapAnnotation\"\n      guard annotation is JournalEntry else {\n        return nil\n      }\n      if let annotationView =\n      mapView.dequeueReusableAnnotationView(withIdentifier:\n      identifier) {\n        annotationView.annotation = annotation\n        return annotationView\n      } else {\n        let annotationView =\n        MKMarkerAnnotationView(annotation:annotation,\n        reuseIdentifier:identifier)\n        annotationView.canShowCallout = true\n        let calloutButton = UIButton(type: .detailDisclosure)\n        annotationView.rightCalloutAccessoryView =     calloutButton\n        return annotationView\n      }\n    } \n    ```", "```swift\nfunc mapView(_ mapView: MKMapView, viewFor annotation: any MKAnnotation) -> MKAnnotationView? \n```", "```swift\nlet identifier = \"mapAnnotation\" \n```", "```swift\nguard annotation is JournalEntry else {\n  return nil\n} \n```", "```swift\nif let annotationView =\nmapView.dequeueReusableAnnotationView(withIdentifier:\nidentifier) {\n  annotationView.annotation = annotation\n  return annotationView \n```", "```swift\n} else {\n    let annotationView =\n    MKMarkerAnnotationView(annotation:annotation,\n    reuseIdentifier:identifier) \n```", "```swift\nannotationView.canShowCallout = true\nlet calloutButton = UIButton(type: .detailDisclosure)\nannotationView.rightCalloutAccessoryView = calloutButton \n```", "```swift\nreturn annotationView \n```", "```swift\n    private var annotations: [JournalEntry] = []\n    **private var****selectedAnnotation****:** **JournalEntry****?** \n    ```", "```swift\n    func mapView(_ mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {\n      guard let annotation = mapView.selectedAnnotations.first \n      else {\n        return\n      }\n      selectedAnnotation = annotation as? JournalEntry\n      self.performSegue(withIdentifier: \"showMapDetail\", \n      sender: self)\n    } \n    ```", "```swift\n    // MARK: - Navigation\n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n      super.prepare(for: segue, sender: sender)\n      guard segue.identifier == \"showMapDetail\" else {\n        fatalError(\"Unexpected segue identifier\")\n      }\n      guard let entryDetailViewController = segue.destination   as? JournalEntryDetailViewController else {\n        fatalError(\"Unexpected view controller\")\n      }\n      entryDetailViewController.selectedJournalEntry =   selectedAnnotation\n    } \n    ```", "```swift\n    import UIKit\n    **import** **MapKit** \n    ```", "```swift\n    @IBOutlet var bodyTextView: UITextView!\n    @IBOutlet var photoImageView: UIImageView!\n    **@IBOutlet****var****mapImageView****:** **UIImageView****!**\n    var selectedJournalEntry: JournalEntry? \n    ```", "```swift\n    // MARK: - Private methods\n    private func getMapSnapshot() {\n      guard let lat = selectedJournalEntry?.latitude, let \n      long = selectedJournalEntry?.longitude else {\n        self.mapImageView.image = nil\n        return\n      }\n      let options = MKMapSnapshotter.Options()\n      options.region = MKCoordinateRegion(center:\n      CLLocationCoordinate2D(latitude: lat, longitude: long),\n      span: MKCoordinateSpan(latitudeDelta: 0.01,\n      longitudeDelta: 0.01))\n      options.size = CGSize(width: 300, height: 300)\n      options.preferredConfiguration =   MKStandardMapConfiguration()\n      let snapshotter = MKMapSnapshotter(options: options)\n      snapshotter.start { snapshot, error in\n        if let snapshot {\n          self.mapImageView.image = snapshot.image\n        } else if let error {\n          print(\"snapshot error:  \n          \\(error.localizedDescription)\")\n        }\n      }\n    } \n    ```", "```swift\n     photoImageView.image = journalEntry?.photo\n      **getMapSnapshot****()**\n    } \n    ```"]