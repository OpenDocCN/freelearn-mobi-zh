["```kt\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n    ```", "```kt\n    fun checkIfPermissionGranted(context: Context, permission: String): Boolean {\n        return (ContextCompat.checkSelfPermission(context, permission)\n                == PackageManager.PERMISSION_GRANTED)\n    }\n    fun shouldShowPermissionRationale(context: Context, permission: String): Boolean {\n        val activity = context as Activity?\n        if (activity == null)\n            Log.d(\"Permissions\", \"Activity is null\")\n        return ActivityCompat.shouldShowRequestPermissionRationale(\n            activity!!,\n            permission\n        )\n    }\n    ```", "```kt\n    sealed class PermissionAction {\n        data object PermissionGranted : PermissionAction()\n        data object PermissionDenied : PermissionAction()\n    }\n    ```", "```kt\n    @Composable\n    fun PermissionDialog(\n        context: Context,\n        permission: String,\n        permissionAction: (PermissionAction) -> Unit\n    ) {\n        val isPermissionGranted = checkIfPermissionGranted(context, permission)\n        if (isPermissionGranted) {\n            permissionAction(PermissionAction.PermissionGranted)\n            return\n        }\n        val permissionsLauncher = rememberLauncherForActivityResult(\n            ActivityResultContracts.RequestPermission()\n        ) { isGranted: Boolean ->\n            if (isGranted) {\n                permissionAction(PermissionAction.PermissionGranted)\n            } else {\n                permissionAction(PermissionAction.PermissionDenied)\n            }\n        }\n        val showPermissionRationale = shouldShowPermissionRationale(context, permission)\n        var isDialogDismissed by remember { mutableStateOf(false) }\n        var isPristine by remember { mutableStateOf(true) }\n        if ((showPermissionRationale && !isDialogDismissed) || (!isDialogDismissed && !isPristine)) {\n            isPristine = false\n            AlertDialog(\n                onDismissRequest = {\n                    isDialogDismissed = true\n                    permissionAction(PermissionAction.PermissionDenied)\n                },\n                title = { Text(text = \"Permission Required\") },\n                text = { Text(text = \"This app requires the location permission to be granted.\") },\n                confirmButton = {\n                    Button(\n                        onClick = {\n                            isDialogDismissed = true\n                            permissionsLauncher.launch(permission)\n                        }\n                    ) {\n                        Text(text = \"Grant Access\")\n                    }\n                },\n                dismissButton = {\n                    Button(\n                        onClick = {\n                            isDialogDismissed = true\n                            permissionAction(PermissionAction.PermissionDenied)\n                        }\n                    ) {\n                        Text(text = \"Cancel\")\n                    }\n                }\n            )\n        } else {\n            if (!isDialogDismissed) {\n                SideEffect {\n                    permissionsLauncher.launch(permission)\n                }\n            }\n        }\n    }\n    ```", "```kt\n        @Composable\n        fun PetsScreen(\n            onPetClicked: (Cat) -> Unit,\n            contentType: ContentType,\n        ) {\n            val petsViewModel: PetsViewModel = koinViewModel()\n            val petsUIState by petsViewModel.petsUIState.collectAsStateWithLifecycle()\n            val context = LocalContext.current\n            var showContent by rememberSaveable { mutableStateOf(false) }\n            PermissionDialog(\n                context = context,\n                permission = Manifest.permission.ACCESS_COARSE_LOCATION\n            ) { permissionAction ->\n                when (permissionAction) {\n                    is PermissionAction.PermissionDenied -> {\n                        showContent = false\n                    }\n                    is PermissionAction.PermissionGranted -> {\n                        showContent = true\n                        Toast.makeText(\n                            context,\n                            \"Location permission granted!\",\n                            Toast.LENGTH_SHORT\n                        ).show()\n                    }\n                }\n            }\n            if (showContent) {\n                PetsScreenContent(\n                    modifier = Modifier\n                        .fillMaxSize(),\n                    onPetClicked = onPetClicked,\n                    contentType = contentType,\n                    petsUIState = petsUIState,\n                    onFavoriteClicked = {\n                        petsViewModel.updatePet(it)\n                    }\n                )\n            }\n        }\n        ```"]