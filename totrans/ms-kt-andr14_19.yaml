- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Improving Your App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升您的应用
- en: After we complete the development and publishing of our app, it is important
    to always be on the lookout when using things that help improve our apps, such
    as Firebase Messaging or Crashlytics. We are going to be learning how to use Firebase
    Messaging and Crashlytics in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成应用的开发和发布后，在使用有助于改进应用的事物时，如Firebase Messaging或Crashlytics，始终保持警觉非常重要。在本章中，我们将学习如何使用Firebase
    Messaging和Crashlytics。
- en: In this chapter, we will learn step-by-step techniques on how to improve our
    apps by adding analytics—Firebase Crashlytics—and how to use cloud messaging to
    increase user engagement. We will learn how to send notifications to our apps
    from the Firebase console. Additionally, we will learn some tips and tricks for
    securing our apps to ensure that user data is not compromised.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将逐步学习如何通过添加分析工具（Firebase Crashlytics）和使用云消息来提高用户参与度来改进我们的应用。我们将学习如何从Firebase控制台向应用发送通知。此外，我们还将学习一些确保用户数据不受损害的应用安全技巧。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Using Firebase Crashlytics to detect crashes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Firebase Crashlytics检测崩溃
- en: Improving app engagement with Firebase Messaging
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Firebase Messaging提高应用参与度
- en: Securing your app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护您的应用
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the instructions in this chapter, you will need to have Android Studio
    Hedgehog or a later version ([https://developer.android.com/studio](https://developer.android.com/studio))
    downloaded.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章的说明，您需要下载Android Studio Hedgehog或更高版本([https://developer.android.com/studio](https://developer.android.com/studio))。
- en: You can use the previous chapter’s code to follow the instructions in this chapter.
    You can find the code for this chapter on GitHub at [https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterfifteen](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterfifteen).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用上一章的代码来遵循本章的说明。您可以在GitHub上找到本章的代码，网址为[https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterfifteen](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterfifteen)。
- en: Using Firebase Crashlytics to detect crashes
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Firebase Crashlytics检测崩溃
- en: Crashes can happen in our apps for a variety of reasons, including common coding
    issues such as null pointer exceptions, memory leaks, and improper data handling.
    Device fragmentation caused by different device hardware configurations and different
    Android operation systems introduces compatibility issues that may at times cause
    crashes too. Network issues, insufficient resources, or mismanagement of external
    dependencies, such as third-party libraries, can cause crashes too. Sometimes,
    we can anticipate and handle them gracefully. Other times, they are unexpected
    and we need to know about them so we can fix them. Our app is already on Google
    Play Store, so at times, we might not have the luxury to debug on the devices
    that are having issues. Tools such as **Firebase Crashlytics** can help us detect
    crashes in our apps and provide us with the information we need to fix them. In
    this section, we will be setting up Firebase Crashlytics in our app and seeing
    how we can use it to detect crashes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可能因多种原因发生崩溃，包括常见的编码问题，如空指针异常、内存泄漏和不正确的数据处理。由不同设备硬件配置和不同Android操作系统引起的设备碎片化引入了兼容性问题，有时也可能导致崩溃。网络问题、资源不足或外部依赖（如第三方库）的管理不当也可能导致崩溃。有时，我们可以预见并优雅地处理它们。其他时候，它们是意外的，我们需要了解它们以便修复。我们的应用已经在Google
    Play Store上，所以有时我们可能没有在出现问题的设备上进行调试的便利。**Firebase Crashlytics**等工具可以帮助我们检测应用中的崩溃，并提供我们修复它们所需的信息。在本节中，我们将设置Firebase
    Crashlytics到我们的应用中，并了解我们如何使用它来检测崩溃。
- en: 'Android Studio has a built-in Firebase tool to help us quickly add Firebase
    to our app. We can access it from **Tools** | **Firebase**, which should open
    a side panel on the right, as shown in the following figure:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio内置了Firebase工具，可以帮助我们快速将Firebase添加到应用中。我们可以从**工具** | **Firebase**访问它，它应该会打开右侧的侧面板，如图所示：
- en: '![Figure 15.1 – Firebase setup](img/B19779_15_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1 – Firebase设置](img/B19779_15_01.jpg)'
- en: Figure 15.1 – Firebase setup
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – Firebase设置
- en: 'As seen in *Figure 15**.1*, we can set up a variety of Firebase SDKs from this
    tool. We are interested in setting up **Crashlytics**. Tap on the **Crashlytics**
    option and we will see the following options:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图15.1*所示，我们可以使用此工具设置各种Firebase SDK。我们感兴趣的是设置**Crashlytics**。点击**Crashlytics**选项，我们将看到以下选项：
- en: '![Figure 15.2 – Firebase Crashlytics setup](img/B19779_15_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.2 – Firebase Crashlytics 设置](img/B19779_15_02.jpg)'
- en: Figure 15.2 – Firebase Crashlytics setup
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – Firebase Crashlytics 设置
- en: 'Since our project is written in Kotlin, we are going to select **Get started
    with Firebase Crashlytics** as an option. This will open a new window with the
    following instructions:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的项目是用 Kotlin 编写的，我们将选择**开始使用 Firebase Crashlytics**作为选项。这将打开一个新窗口，其中包含以下说明：
- en: '![Figure 15.3 – Steps to set up Crashlytics](img/B19779_15_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.3 – 设置 Crashlytics 的步骤](img/B19779_15_03.jpg)'
- en: Figure 15.3 – Steps to set up Crashlytics
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3 – 设置 Crashlytics 的步骤
- en: 'As seen from *Figure 15**.3*, it provides all the steps necessary for us to
    set up Firebase Crashlytics in our app. Let us tap the **Connect to Firebase**
    option. This opens a new tab in our browser with the Firebase console opened (see
    *Figure 15**.4*). It shows all the Firebase projects that we have on our console
    (if we have any). Use the **Create a project** option and specify your preferred
    project name:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 15*.3 所示，它提供了我们设置 Firebase Crashlytics 在应用中的所有必要步骤。让我们点击**连接到 Firebase**选项。这将打开浏览器中的一个新标签页，其中打开了
    Firebase 控制台（见*图 15*.4*）。它显示了我们在控制台上的所有 Firebase 项目（如果我们有任何）。使用**创建项目**选项并指定您首选的项目名称：
- en: '![Figure 15.4 – New Firebase project](img/B19779_15_04.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.4 – 新的 Firebase 项目](img/B19779_15_04.jpg)'
- en: Figure 15.4 – New Firebase project
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4 – 新的 Firebase 项目
- en: 'Click **Continue** to proceed to the next step. This will take us to the following
    screen:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**继续**进入下一步。这将带我们到以下屏幕：
- en: '![Figure 15.5 –Google Analytics setup](img/B19779_15_05.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.5 – Google Analytics 设置](img/B19779_15_05.jpg)'
- en: Figure 15.5 –Google Analytics setup
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5 – Google Analytics 设置
- en: In this screen, we configure Google Analytics for our app. It also shows the
    functionalities that Google Analytics provides for our app. Google Analytics collects
    usage and behavior data for our apps. We use it for tracking user events, system
    events, or errors, analyzing app performance, collecting user properties such
    as language preference and geographic location, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕上，我们为我们的应用配置 Google Analytics。它还显示了 Google Analytics 为我们的应用提供的功能。Google
    Analytics 收集我们应用的用法和行为数据。我们用它来跟踪用户事件、系统事件或错误，分析应用性能，收集用户属性，如语言偏好和地理位置等。
- en: 'Click **Continue** to proceed to the next step:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**继续**进入下一步：
- en: '![Figure 15.6 – Configuring Google Analytics](img/B19779_15_06.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.6 – 配置 Google Analytics](img/B19779_15_06.jpg)'
- en: Figure 15.6 – Configuring Google Analytics
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.6 – 配置 Google Analytics
- en: 'In this step, we configure more options for Google Analytics. We must select
    a Google Analytics account. Selecting the default account hides the other questions
    if you have already configured other projects. When done, click **Create project**
    to finalize creating the project and you will see the following dialog:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，我们为 Google Analytics 配置了更多选项。我们必须选择一个 Google Analytics 账户。如果您已经配置了其他项目，选择默认账户将隐藏其他问题。完成操作后，点击**创建项目**以最终创建项目，您将看到以下对话框：
- en: '![Figure 15.7 – Finalizing setup dialog](img/B19779_15_07.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.7 – 完成设置对话框](img/B19779_15_07.jpg)'
- en: Figure 15.7 – Finalizing setup dialog
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.7 – 完成设置对话框
- en: 'Clicking **Connect** after our project is created finalizes the setup of Firebase
    Crashlytics with Android Studio. Let us head back to Android Studio and see what
    has changed. We can see that the Firebase Crashlytics option is now checked:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目创建完成后，点击**连接**以最终完成 Firebase Crashlytics 在 Android Studio 中的设置。让我们回到 Android
    Studio，看看有什么变化。我们可以看到，Firebase Crashlytics 选项现在已被勾选：
- en: '![Figure 15.8 – App connected](img/B19779_15_08.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.8 – 应用已连接](img/B19779_15_08.jpg)'
- en: Figure 15.8 – App connected
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.8 – 应用已连接
- en: The next step is to add the Firebase Crashlytics SDK to our app. We can do this
    by clicking the **Add Crashlytics SDK and plugin to your app** button. This will
    add the necessary dependencies to our app. You can check the Gradle files to see
    these changes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将 Firebase Crashlytics SDK 添加到我们的应用中。我们可以通过点击**将 Crashlytics SDK 和插件添加到您的应用中**按钮来完成此操作。这将向我们的应用添加必要的依赖项。您可以通过检查
    Gradle 文件来查看这些更改。
- en: 'With all the steps complete, we can now `MainActivity.kt` file inside the `onCreate()`
    function:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有步骤后，我们现在可以在`MainActivity.kt`文件中的`onCreate()`函数内添加以下代码：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, run the app. The app will crash with the following stack trace:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行应用。应用将出现以下堆栈跟踪：
- en: '![Figure 15.9 – Crash stack trace](img/B19779_15_09.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.9 – 崩溃堆栈跟踪](img/B19779_15_09.jpg)'
- en: Figure 15.9 – Crash stack trace
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.9 – 崩溃堆栈跟踪
- en: 'We can head over to our newly created project in the Firebase console and see
    if the crash has been reported. In the Firebase console, Crashlytics is normally
    found under the **Release and Monitor** section on the navigation drawer, which
    is on the left side of the screen. It shows the following screen:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以前往 Firebase 控制台中我们新创建的项目，查看是否已报告崩溃。在 Firebase 控制台中，Crashlytics 通常位于屏幕左侧导航抽屉中的
    **发布和监控** 部分。它显示了以下屏幕：
- en: '![Figure 15.10 – Firebase console crash overview](img/B19779_15_10.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.10 – Firebase 控制台崩溃概述](img/B19779_15_10.jpg)'
- en: Figure 15.10 – Firebase console crash overview
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.10 – Firebase 控制台崩溃概述
- en: 'We can see that the crash has been reported. We can click on the `MainActivity.onCreate`
    crash to see more details about it. It shows the following screen:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到崩溃已经被报告。我们可以点击 `MainActivity.onCreate` 崩溃来查看更多详细信息。它显示了以下屏幕：
- en: '![Figure 15.11 – Firebase console crash details](img/B19779_15_11.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.11 – Firebase 控制台崩溃详情](img/B19779_15_11.jpg)'
- en: Figure 15.11 – Firebase console crash details
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.11 – Firebase 控制台崩溃详情
- en: 'As seen in *Figure 15**.10*, we have the following details from the Firebase
    console:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 15.10* 所示，我们从 Firebase 控制台获得了以下详细信息：
- en: '**Stack trace**: This shows the stack trace of the crash.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**堆栈跟踪**：这显示了崩溃的堆栈跟踪。'
- en: '**Device**: This shows the device that the crash happened on. We can see the
    device model, the OS version, and the device state.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备**：这显示了崩溃发生的设备。我们可以看到设备型号、操作系统版本和设备状态。'
- en: '**App version**: This shows the version of the app that crashed. It also shows
    the total number of crashes that have happened for that version.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用版本**：这显示了崩溃的应用版本。它还显示了该版本发生的总崩溃次数。'
- en: 'This information is very helpful when debugging crashes. Android Studio Hedgehog
    and more recent versions also have a useful tool, **App Quality Insights**, that
    helps us view the Firebase crashes right from Android Studio. We can access it
    from the bottom tool tabs, as shown:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试崩溃时，这些信息非常有用。Android Studio Hedgehog 和更早的版本也提供了一个有用的工具，**App Quality Insights**，它可以帮助我们从
    Android Studio 中查看 Firebase 崩溃。我们可以在底部的工具标签中访问它，如下所示：
- en: '![Figure 15.12 – App Quality Insights](img/B19779_15_12.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.12 – 应用质量洞察](img/B19779_15_12.jpg)'
- en: Figure 15.12 – App Quality Insights
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.12 – 应用质量洞察
- en: 'As seen in *Figure 15**.11*, we need to log in to our Firebase account that
    has the project we are working on. We can do this by clicking on the **Log in**
    button and completing the login process on our browser. Once logged in, we can
    see the crashes that have happened in our app:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 15.11* 所示，我们需要登录到包含我们正在工作的项目的 Firebase 账户。我们可以通过点击 **登录** 按钮并在浏览器中完成登录过程来实现。登录后，我们可以看到应用中发生的崩溃：
- en: '![Figure 15.13 – App Quality Insights crash details](img/B19779_15_13.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.13 – 应用质量洞察崩溃详情](img/B19779_15_13.jpg)'
- en: Figure 15.13 – App Quality Insights crash details
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.13 – 应用质量洞察崩溃详情
- en: This shows all the details, as we saw earlier in our Firebase console. We can
    see the stack trace too. The beauty of this is that we can easily navigate to
    the file and line causing the crash without having to switch context and go to
    the browser.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了所有详细信息，正如我们之前在 Firebase 控制台中看到的。我们还可以看到堆栈跟踪。它的好处是，我们可以轻松地导航到导致崩溃的文件和行，而无需切换上下文并转到浏览器。
- en: With Firebase Crashlytics set up, we can now detect crashes in our app and fix
    them. This will help us improve the quality of our app and make our users happy.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好 Firebase Crashlytics 之后，我们现在可以检测到应用中的崩溃并修复它们。这将帮助我们提高应用的质量，并让我们的用户感到满意。
- en: Important note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember to remove the code that we added to force a crash in our app.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 记得删除我们添加的导致应用崩溃的代码。
- en: Next, let us set up **Firebase Analytics**, which also gathers useful information
    about our app. This will help us understand how our users are using our app and
    help us make informed decisions on how to improve it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们设置 **Firebase Analytics**，它也会收集有关我们应用的有用信息。这将帮助我们了解用户如何使用我们的应用，并帮助我们做出明智的决策，以改进它。
- en: Setting up Google Analytics
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Google Analytics
- en: 'Setting up Google Analytics is like setting up Firebase Crashlytics. Repeat
    the following steps that you took for Firebase Crashlytics:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Google Analytics 与设置 Firebase Crashlytics 类似。重复您为 Firebase Crashlytics 执行的以下步骤：
- en: Open the Firebase tool from **Tools** | **Firebase**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **工具** | **Firebase** 打开 Firebase 工具。
- en: Select **Analytics** from the list of options that is similar to the list we
    saw in *Figure 15**.1*.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从与我们在 *图 15.1* 中看到的列表类似的选项列表中选择 **Analytics**。
- en: Select the **Get started with Google** **Analytics** option.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Google Analytics** 的 **开始使用** 选项。
- en: Since our app is already connected to Firebase, we can skip the first step and
    proceed to the next step.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们的应用程序已经连接到 Firebase，我们可以跳过第一步，直接进行下一步。
- en: Tap the **Add Analytics to your app** button to add the necessary dependencies
    to our app.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**将分析添加到您的应用程序**按钮，为我们的应用程序添加必要的依赖项。
- en: Once Gradle sync is complete, we have finalized setting up Firebase Analytics
    in our app.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Gradle 同步完成，我们就完成了在应用程序中设置 Firebase 分析的最终步骤。
- en: 'With that set, we can always view the analytics from the Firebase console.
    We can access it from the navigation drawer under the **Analytics** section. It
    shows the following screen:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，我们就可以从 Firebase 控制台查看分析数据。我们可以在**分析**部分下的导航抽屉中访问它。它显示了以下屏幕：
- en: '![Figure 15.14 – App analytics](img/B19779_15_14.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图15.14 – 应用程序分析](img/B19779_15_14.jpg)'
- en: Figure 15.14 – App analytics
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.14 – 应用程序分析
- en: We have learned how to set up Firebase Crashlytics and Firebase Analytics in
    our app. We can now detect crashes in our app and gather useful information about
    our app. This will help us improve the quality of our app and make our users happy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何在应用程序中设置 Firebase Crashlytics 和 Firebase Analytics。现在我们可以检测应用程序中的崩溃并收集有关应用程序的有用信息。这将帮助我们提高应用程序的质量并让我们的用户满意。
- en: In the next section, we will learn how to use Firebase Cloud Messaging to send
    notifications to our app.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用 Firebase Cloud Messaging 向我们的应用程序发送通知。
- en: Improving app engagement with Firebase Messaging
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Firebase 消息提高应用程序参与度
- en: When users install our app, they might not use it again after they finish what
    they want to do. This can lead to a decline in the number of active users, which
    can have different impacts on different apps.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户安装我们的应用程序后，他们完成他们想要做的事情后可能不会再使用它。这可能导致活跃用户数量的下降，对不同应用程序有不同的影响。
- en: We can leverage **Firebase Cloud Messaging** to send notifications to our users
    to remind them of our app. This will help us improve our app’s engagement and
    increase the number of active users. In this section, we will be setting up Firebase
    Cloud Messaging in our app and see how we can use it to send notifications to
    our app users.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用**Firebase Cloud Messaging**向我们的用户发送通知，提醒他们使用我们的应用程序。这将帮助我们提高应用程序的参与度并增加活跃用户数量。在本节中，我们将设置
    Firebase Cloud Messaging 到我们的应用程序中，并查看我们如何使用它向应用程序用户发送通知。
- en: 'First, we need to set up the Firebase Cloud Messaging SDK on our app. This
    allows us to use the SDK within our project and enables our app to receive Firebase
    notifications once the setup is complete. We will do it the same way we did for
    Firebase Crashlytics and Firebase Analytics. Repeat the following steps:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在我们的应用程序中设置 Firebase Cloud Messaging SDK。这允许我们在项目中使用 SDK，并在设置完成后使我们的应用程序能够接收
    Firebase 通知。我们将以与 Firebase Crashlytics 和 Firebase Analytics 相同的方式进行操作。重复以下步骤：
- en: Open the Firebase tool from **Tools** | **Firebase**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具** | **Firebase**打开 Firebase 工具。
- en: Select **Cloud Messaging** from the list of options that is similar to the list
    we saw in *Figure 15**.1*.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从与我们在图15.1中看到的列表类似的选择中，选择**云消息**。
- en: Select the **Setup Firebase Cloud** **Messaging** option.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**设置 Firebase Cloud Messaging**选项。
- en: Since our app is already connected to Firebase, we can skip the first step and
    proceed to the next step.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们的应用程序已经连接到 Firebase，我们可以跳过第一步，直接进行下一步。
- en: Tap the **Add FCM to your app** button to add the necessary dependencies to
    the app.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**将 FCM 添加到您的应用程序**按钮，为应用程序添加必要的依赖项。
- en: Once Gradle sync is complete, the FCM SDK is already set up in our app.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Gradle 同步完成，FCM SDK 已经在我们的应用程序中设置好了。
- en: We need to create a new service to handle notifications when they are received
    and to also get the device token. Let us create a new package called `firebase`.
    Inside this package, let us create a new file called `FirebaseMessagingService.kt`.
    This will be our service that will handle notifications that are received.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的服务来处理接收到的通知，并获取设备令牌。让我们创建一个新的包，名为`firebase`。在这个包内部，让我们创建一个新的文件，名为`FirebaseMessagingService.kt`。这将是我们处理接收到的通知的服务。
- en: 'Let us add the following code to it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在其中添加以下代码：
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is a breakdown of the preceding code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前面代码的分解：
- en: We have created a class called **FirebaseNotificationService** that extends
    **FirebaseMessagingService**. This is the service that will handle notifications
    that are received.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个名为**FirebaseNotificationService**的类，它扩展了**FirebaseMessagingService**。这是处理接收到的通知的服务。
- en: We have overridden the **onNewToken()** function. This function is called when
    a new token is generated. We can use this token to send notifications to our app.
    We have added a log message to log the token to our Logcat. Alternatively, we
    can send the token to our backend server to be used to send notifications to our
    app if we have such a requirement.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们重写了**onNewToken()**函数。当生成新令牌时，会调用此函数。我们可以使用此令牌向我们的应用发送通知。我们添加了一个日志消息来记录令牌到我们的Logcat。或者，如果我们有这样的需求，我们可以将令牌发送到我们的后端服务器，用于向我们的应用发送通知。
- en: We have overridden the **onMessageReceived()** function. This function is called
    when a notification is received. We have called the **sendNotification()** function
    and passed the **RemoteMessage** object to it.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们重写了**onMessageReceived()**函数。当接收到通知时，会调用此函数。我们调用了**sendNotification()**函数，并将**RemoteMessage**对象传递给它。
- en: The **sendNotification()** function creates a notification and shows it to the
    user. We have used the **NotificationCompat.Builder** class to create the notification.
    We have also used the **RemoteMessage** object to get the notification **title**,
    **body**, and **ticker**. We have also set up a small icon to be used for the
    notification. We additionally set the notification channel if the device is running
    on Android Oreo or more recent versions.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sendNotification()**函数创建一个通知并将其显示给用户。我们使用了**NotificationCompat.Builder**类来创建通知。我们还使用了**RemoteMessage**对象来获取通知的**标题**、**正文**和**提示符**。我们还设置了一个用于通知的小图标。如果设备运行在Android
    Oreo或更高版本，我们还设置了通知通道。'
- en: Lastly, we have created the **createChannel()** function, which creates the
    notification channel using the **NotificationChannel** class. We have also set
    the channel description and the importance of the channel. Additionally, we have
    set the default vibration for the channel. Finally, we have created the notification
    manager and used it to create the channel.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们创建了**createChannel()**函数，该函数使用**NotificationChannel**类创建通知通道。我们还设置了通道描述和通道的重要性。此外，我们还设置了通道的默认振动。最后，我们创建了通知管理器，并使用它来创建通道。
- en: 'With the service created, we need to register it in our `AndroidManifest.xml`
    file. Let us add the following code to it:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 服务创建完成后，我们需要在`AndroidManifest.xml`文件中注册它。让我们向其中添加以下代码：
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With the service registered, we can now receive notifications in our app. Run
    the app with the recent changes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 服务注册后，我们现在可以在我们的应用中接收通知了。运行带有最近更改的应用。
- en: 'Next, let us test this by sending a notification from the Firebase console.
    We can do this by going to our Firebase console and selecting the **Cloud Messaging**
    option from the navigation drawer, which is in the **Engage** category. It shows
    the following screen:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过从Firebase控制台发送通知来测试它。我们可以通过访问我们的Firebase控制台，从导航抽屉中选择**云消息**选项（位于**参与**类别中）来实现。它显示了以下屏幕：
- en: '![Figure 15.15 – Firebase Cloud Messaging landing page](img/B19779_15_15.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图15.15 – Firebase Cloud Messaging 登录页面](img/B19779_15_15.jpg)'
- en: Figure 15.15 – Firebase Cloud Messaging landing page
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.15 – Firebase Cloud Messaging 登录页面
- en: 'This is our first time using Cloud Messaging, so we need to create a new campaign.
    Tap the **Create your first campaign** button. This opens a new dialog with the
    following options:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们第一次使用云消息服务，因此我们需要创建一个新的活动。点击**创建您的第一个活动**按钮。这将打开一个包含以下选项的新对话框：
- en: '![Figure 15.16 – Firebase Cloud Messaging options](img/B19779_15_16.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图15.16 – Firebase Cloud Messaging 选项](img/B19779_15_16.jpg)'
- en: Figure 15.16 – Firebase Cloud Messaging options
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.16 – Firebase Cloud Messaging 选项
- en: 'We can send either **Firebase Notification messages** or **Firebase In-App
    messages**. Firebase notifications are designed to reach users outside of the
    app, delivering messages through push notifications even when our app is inactive.
    In contrast, Firebase in-app messages are tailored to engage users actively using
    our app by displaying content directly within the app’s interface. Firebase notifications
    are suitable for sending timely updates or promotions, while in-app messages are
    effective for delivering contextual content and enhancing the user experience
    within our app. We are interested in **Firebase Notification messages**. Select
    the **Firebase Notification messages** option and tap **Create**. This brings
    us to the following screen:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以发送**Firebase通知消息**或**Firebase应用内消息**。Firebase通知旨在触及应用外的用户，通过推送通知传递消息，即使我们的应用处于非活动状态。相比之下，Firebase应用内消息旨在通过在应用界面中直接显示内容来吸引积极使用我们的应用的用户。Firebase通知适用于发送及时更新或促销，而应用内消息对于传递上下文内容并增强应用内的用户体验非常有效。我们对**Firebase通知消息**感兴趣。选择**Firebase通知消息**选项并点击**创建**。这会带我们到以下屏幕：
- en: '![Figure 15.17 – Creating a new notification](img/B19779_15_17.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图15.17 – 创建新的通知](img/B19779_15_17.jpg)'
- en: Figure 15.17 – Creating a new notification
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.17 – 创建新的通知
- en: 'In this screen, we add the title and text for our notification. Once you fill
    in these details, tap **Next** to proceed to the next steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕上，我们添加通知的标题和文本。一旦填写了这些详细信息，点击**下一步**继续到下一步：
- en: '![Figure 15.18 – Target and Scheduling settings](img/B19779_15_18.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图15.18 – 目标和调度设置](img/B19779_15_18.jpg)'
- en: Figure 15.18 – Target and Scheduling settings
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.18 – 目标和调度设置
- en: 'As seen in *Figure 15**.17*, we set the target app for our notification. In
    this case, it is the app that we created earlier in the *Using Firebase Crashlytics
    to detect crashes* section of this chapter. We then set the schedule for our notification.
    We have set the scheduling setting to **Send now**. Tap the **Review** button,
    which shows a dialog with the information we have set:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图15.17*所示，我们设置了通知的目标应用。在这种情况下，它是我们在本章的*使用Firebase Crashlytics检测崩溃*部分中创建的应用。然后我们设置了通知的调度。我们将调度设置设置为**立即发送**。点击**查看**按钮，它将显示一个包含我们已设置信息的对话框：
- en: '![Figure 15.19 – Review message dialog](img/B19779_15_19.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图15.19 – 查看消息对话框](img/B19779_15_19.jpg)'
- en: Figure 15.19 – Review message dialog
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.19 – 查看消息对话框
- en: 'Tap the **Publish** button to publish the notification. This will send a notification
    to our app. We can now see the notification from our app:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**发布**按钮来发布通知。这将向我们的应用发送通知。现在我们可以从我们的应用中看到通知：
- en: '![Figure 15.20 – First notification](img/B19779_15_20.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图15.20 – 第一条通知](img/B19779_15_20.jpg)'
- en: Figure 15.20 – First notification
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.20 – 第一条通知
- en: Important note
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Ensure that you always test using a real device to see your notifications.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您始终使用真实设备进行测试，以查看您的通知。
- en: We learned how to set up Firebase Cloud Messaging in our app and how to send
    notifications to it. In the next section, we will cover yet another critical topic—securing
    our app.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何在应用中设置Firebase Cloud Messaging以及如何向其发送通知。在下一节中，我们将介绍另一个关键主题——保护我们的应用。
- en: Securing your app
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护您的应用
- en: Ensuring your apps are secure is particularly important. We need to ensure that
    our users’ data is safe and secure. We also need to ensure that our app is not
    vulnerable to attacks. Attacks such as malware, man-in-the-middle attacks, and
    data interception pose risks to sensitive information, while vulnerabilities such
    as SQL injection and privilege escalation can lead to unauthorized access and
    manipulation of databases or app functionalities. Cross-site scripting and code
    injection present avenues for attackers to execute malicious scripts or commands
    within the app, potentially compromising user sessions and data. Insecure data
    storage practices may expose sensitive information, and denial-of-service attacks
    can disrupt app services.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的应用安全尤其重要。我们需要确保我们的用户数据安全。我们还需要确保我们的应用不受攻击。如恶意软件、中间人攻击和数据拦截等攻击对敏感信息构成风险，而如SQL注入和权限提升等漏洞可能导致对数据库或应用功能的未授权访问和操纵。跨站脚本和代码注入为攻击者提供了在应用内执行恶意脚本或命令的途径，可能危及用户会话和数据。不安全的数据存储实践可能会泄露敏感信息，而拒绝服务攻击可能会中断应用服务。
- en: 'In this section, we are going to see some tips and tricks for securing our
    app. The following are some of the things that we can do to secure our app:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解一些关于如何保护我们应用的建议和技巧。以下是我们可以采取的一些措施来保护我们的应用：
- en: '**HTTPS**: We should always use **HTTPS** for all our network requests, which
    adds an extra layer of security to our app.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTPS**: 我们应该始终为所有网络请求使用**HTTPS**，这为我们的应用增加了额外的安全层。'
- en: '**Code minification and obfuscation**: We should always minify and obfuscate
    our code to make it harder for attackers to reverse engineer our app. We already
    did this in [*Chapter 13*](B19779_13.xhtml#_idTextAnchor175) for our release build.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码最小化和混淆**: 我们应该始终最小化和混淆我们的代码，以使攻击者更难逆向工程我们的应用。我们已经在[*第13章*](B19779_13.xhtml#_idTextAnchor175)中为我们的发布构建做了这件事。'
- en: '**Encryption**: We should always encrypt sensitive data that we store in our
    app.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密**: 我们应该始终加密我们在应用中存储的敏感数据。'
- en: '**Passwords and private keys**: Never store passwords and private keys in Shared
    Preferences. We can always store them in other secure alternatives, such as the
    Android Keystore system used for storing cryptographic keys.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码和私钥**: 永远不要在Shared Preferences中存储密码和私钥。我们可以始终将它们存储在其他安全的替代方案中，例如用于存储加密密钥的Android
    Keystore系统。'
- en: '**Minimizing logged information**: We should always minimize the information
    that we log. We should never log sensitive information such as passwords and private
    keys.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化日志信息**: 我们应该始终最小化我们记录的信息。我们永远不应该记录敏感信息，如密码和私钥。'
- en: '**Internal storage**: We should always use internal storage for sensitive data.
    This is because internal storage is private to our app and other apps cannot access
    it.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部存储**: 我们应该始终使用内部存储来存储敏感数据。这是因为内部存储仅对我们应用的私有，其他应用无法访问它。'
- en: '**WebView**: We use WebView to display web content in our app. This can introduce
    security issues on our app, so we should be careful when using WebView.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebView**: 我们使用WebView在我们的应用中显示网页内容。这可能会在我们的应用中引入安全问题，因此在使用WebView时我们应该小心。'
- en: '**Dependencies**: We should always keep all our dependencies up to date. This
    is because new versions of dependencies might have security fixes that we need
    to apply to our app. We use tools such as Dependabot ([https://github.com/dependabot](https://github.com/dependabot))
    to automate dependency updates.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖项**: 我们应该始终保持所有依赖项的最新状态。这是因为依赖项的新版本可能包含我们需要应用到我们应用中的安全修复。我们使用如Dependabot
    ([https://github.com/dependabot](https://github.com/dependabot))之类的工具来自动化依赖项更新。'
- en: '**Emulators or rooted devices**: For payment or banking apps, ensure that they
    do not work on emulators or rooted devices. With emulators and rooted devices,
    it is easy to change your code or view the data that is being sent to the server
    or stored in our app. This can lead to security issues.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟器或rooted设备**: 对于支付或银行应用，确保它们不能在模拟器或rooted设备上运行。在模拟器和rooted设备上，很容易更改您的代码或查看发送到服务器或存储在我们应用中的数据。这可能导致安全问题。'
- en: '**Permissions**: We should always use the necessary permissions in our app.
    We should not use permissions that we do not need. This is because permissions
    can be used to access sensitive data in our app.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限**: 我们应该始终在我们的应用中使用必要的权限。我们不应该使用我们不需要的权限。这是因为权限可以用来访问我们应用中的敏感数据。'
- en: As you develop your apps, always keep security in mind. This will help you ensure
    that your app is secure and that your users’ data is safe. You can learn more
    about Android security from the official Android documentation at [https://developer.android.com/privacy-and-security/security-tips](https://developer.android.com/privacy-and-security/security-tips).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开发应用时，始终牢记安全。这将帮助您确保您的应用是安全的，并且您的用户数据是安全的。您可以从官方Android文档中了解更多关于Android安全的信息，网址为[https://developer.android.com/privacy-and-security/security-tips](https://developer.android.com/privacy-and-security/security-tips)。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned techniques for improving our apps by adding
    analytics—in this case, Firebase Crashlytics—and how to use cloud messaging to
    increase user engagement in our apps. Additionally, we learned some tips and tricks
    for securing our apps.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了通过添加分析（在这种情况下，是Firebase Crashlytics）来改进我们应用的技巧，以及如何使用云消息来增加我们应用的用户参与度。此外，我们还学习了关于保护我们应用的一些技巧和技巧。
- en: 'We have come to the end of this chapter and book. We hope that you’ve enjoyed
    following along with the chapters and that you’re now in a position to develop
    Android apps with the knowledge gained from this book. What are the next steps?
    Here are some of the things that you can do:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了这一章节和本书的结尾。我们希望您在跟随章节的过程中感到愉快，并且现在您已经具备了利用本书所学知识开发 Android 应用的能力。下一步是什么？以下是一些您可以做的事情：
- en: Secure your app using the tips and tricks we went over in this chapter.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本章中提到的技巧和窍门来确保您应用的安全性。
- en: Inspect, improve, and monitor the performance of your app. You can learn more
    about this from the official documentation at [https://developer.android.com/topic/performance/overview](https://developer.android.com/topic/performance/overview).
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查、改进和监控您应用的表现。您可以从官方文档 [https://developer.android.com/topic/performance/overview](https://developer.android.com/topic/performance/overview)
    中了解更多相关信息。
- en: Learn more about **Modern Android Development** (**MAD**). MAD is a set of tools
    and libraries that help us develop Android apps faster and better. You can learn
    more about M.A.D from the official documentation at [https://developer.android.com/modern-android-development](https://developer.android.com/modern-android-development).
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更多关于 **现代 Android 开发**（**MAD**）。MAD 是一套工具和库，帮助我们更快、更好地开发 Android 应用。您可以从官方文档
    [https://developer.android.com/modern-android-development](https://developer.android.com/modern-android-development)
    中了解更多关于 M.A.D 的信息。
- en: Learn more about Google Play Vitals and how you can use the information at [https://play.google.com/console/about/vitals/](https://play.google.com/console/about/vitals/)
    to improve the quality of your app.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更多关于 Google Play Vitals 以及如何使用 [https://play.google.com/console/about/vitals/](https://play.google.com/console/about/vitals/)
    上的信息来提升您应用的质量。
- en: Keep learning about Kotlin and Android. Build more apps and share them with
    the world. You can also contribute to open source projects.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继续学习 Kotlin 和 Android。构建更多应用并与世界分享。您还可以为开源项目做出贡献。
