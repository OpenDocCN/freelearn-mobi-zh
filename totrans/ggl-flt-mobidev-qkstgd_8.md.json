["```kt\n…..\nandroid:name=\"io.flutter.app.FlutterApplication\"\nandroid:label=\"flutter_app_battery\"\nandroid:icon=\"@mipmap/ic_launcher\">\n….\n```", "```kt\n….\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n…..\n```", "```kt\n…….\n…….\ndef flutterVersionCode = localProperties.getProperty('flutter.versionCode')\nif (flutterVersionCode == null)\n{ flutterVersionCode = '1' }\n def flutterVersionName = localProperties.getProperty('flutter.versionName')\nif (flutterVersionName == null)\n{ flutterVersionName = '1.0' }\n……\n……\n```", "```kt\ndefaultConfig\n{ // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).\napplicationId \"deviceinformation.flutterappbattery\"\nminSdkVersion 16\ntargetSdkVersion 27\nversionCode flutterVersionCode.toInteger()\nversionName flutterVersionName\ntestInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n}\n```", "```kt\nkeytool -genkey -v -keystore ~/appkey.jks -keyalg RSA -keysize 2048 -validity 10000 -alias appkey\n```", "```kt\nstorePassword=<password used in the previous step>\nkeyPassword=<password used in the previous step>\nkeyAlias=appkey\nstoreFile=<location of the key store file, e.g. /Users/<user name>/appkey.jks>\n```", "```kt\ndef keystoreProperties = new Properties()\ndef keystorePropertiesFile = rootProject.file('key.properties')\nif (keystorePropertiesFile.exists()) {\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n}\nandroid {\n```", "```kt\nbuildTypes {\n    release {\n        // TODO: Add your own signing config for the release build.\n        // Signing with the debug keys for now, so `flutter run --     \n        //release` works.\n        signingConfig signingConfigs.debug\n    }\n}\n```", "```kt\nsigningConfigs {\n    release {\n        keyAlias keystoreProperties['keyAlias']\n        keyPassword keystoreProperties['keyPassword']\n        storeFile file(keystoreProperties['storeFile'])\n        storePassword keystoreProperties['storePassword']\n    }\n}\nbuildTypes {\n    release {\n        signingConfig signingConfigs.release\n    }\n}\n```", "```kt\n#Flutter Wrapper\n-keep class io.flutter.app.** { *; }\n-keep class io.flutter.plugin.**  { *; }\n-keep class io.flutter.util.**  { *; }\n-keep class io.flutter.view.**  { *; }\n-keep class io.flutter.**  { *; }\n-keep class io.flutter.plugins.**  { *; }\n```", "```kt\n …..\n …..\nbuildTypes {\n        release {\n            // TODO: Add your own signing config for the release build.\n            // Signing with the debug keys for now, so `flutter run --release` works.\n            signingConfig signingConfigs.debug\n        }\n…..\n…..\n```", "```kt\n…\n…\nbuildTypes {\n        release {\n            signingConfig signingConfigs.release\n            minifyEnabled true\n            useProguard true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n…\n…\n```"]