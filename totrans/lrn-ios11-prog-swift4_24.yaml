- en: iMessages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Text messaging started with just simple text and the creation of faces using
    special characters. As smartphones began to become more and more commonplace,
    so did text messaging. Messages are now a significant form of communication for
    the vast majority of people. People find it easier to respond to a text message
    than to answer a phone call.
  prefs: []
  type: TYPE_NORMAL
- en: When Apple announced iMessage apps and stickers, it took messaging to another
    level. We had stickers before this announcement, but now we had a fully integrated
    system. iMessages does not only allow you to send a sticker to express a feeling
    or an emotion more effectively than words; you can now use messages to send the
    score of a game or even play games through text messages.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to create an *iMessage* app. This app will allow
    the user to look for restaurants and send reservations to others. We will build
    our UI to look similar to what our phone looks like. To create the *iMessages*
    app, we need to add a message extension to our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a custom message app UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing code between multiple targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to send a reservation to others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding iMessages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with the UI is always my preferred way to begin building an app, because
    you can get a feel for what you need to code. We are going to implement a single
    screen that will be a list of restaurants (accessible by hitting the sticker icon
    next to where a user writes his or her message). The user can choose a restaurant
    for which he or she has a reservation and send it via messages to another person.
    Once that other person receives the message, that person will be able to tap on
    the reservation and see all of the details.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a message View Controller, there are two types of presentation styles: compact
    and expanded.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e3711b0-279d-4a7c-9818-3e81ea6cd7b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Apple recommends that you have two different View Controllers for each style.
    However, since our screen is simple, we will use just one. Keep in mind, however,
    that, if you want to do a more complicated layout, you should use two controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started by working on the UI now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Navigator panel, select the Project navigator and, then, your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf191e45-2546-4133-b07e-bb4b6da46723.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Standard Editor, locate the TARGETS area and then the + (plus button)
    at the bottom of the TARGETS area. (If your TARGETS area is not displaying, hit
    the icon highlighted in blue to the left of General in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d18ab2c2-9349-44c6-9e7b-ae6e29d8a6d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the + (plus button) and, then, select iMessage Extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e38c0f34-8bfa-4e38-852a-82324ec263e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Next and, then, you will see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49b45f75-def3-4ab9-bce8-0b42579e4220.png)'
  prefs: []
  type: TYPE_IMG
- en: Set the Product Name to `MessageApp` and click Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will receive the following message after you click Finish. Select Activate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97be1e2d-2fc2-4d9c-b0b1-9dd4fc81bf0e.png)'
  prefs: []
  type: TYPE_IMG
- en: By activating the `MessageApp` scheme, we will be able to build and run iMessages
    from the simulator. Now, you will have the choice of running either our *Let's
    Eat* app or our *iMessages* app.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we need to add assets that are necessary for our *iMessages* app:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `MessageApp` folder in the Navigator panel, select the `Assets.xcassets`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hit the *Delete* button and, then, select Move to Trash in the screen that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, open the project's `assets` folder downloaded from Packt's website ([https://www.packtpub.com/](https://www.packtpub.com/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `Chapter24` and drag the `Assets.xcassets` folder into your `MessageApp`
    folder inside the Navigator panel. Do not do this in Xcode; you will need to open
    this up in finder just like we did at the beginning of the book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the options screen that appears, ensure that Copy items if needed and Create
    groups are both selected and then select Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you open the `Assets.xcassets` folder, you will see that you now have an
    icon and two other image assets that we will need for our *iMessages* app.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing our Messages UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we need to set up our UI. In our *iMessages* app, we will have a single
    screen; in this screen, we will show a list of restaurants using a Collection
    View. When you tap on the restaurant, you will be able to send a reservation message
    to someone else. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `MessageApp` project, select your `MainInterface.storyboard`. You will
    see a single storyboard with a label that says Hello World:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d74bfeac-413f-467b-9524-2cbaf6d51928.png)'
  prefs: []
  type: TYPE_IMG
- en: Delete the label that says Hello World by selecting it in the Outline view and,
    then, hitting *Delete*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Messages View Controller and, then, the Attributes inspector in the
    Utilities panel and change the status bar under Simulated Metrics from Inferred
    to None.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the Object library of the Utilities panel, type `collectionview` in
    the filter and then drag a Collection View into the View Controller in the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the Collection View selected, select the Pin icon and enter the following
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All values under Add New Constraints are set to `0`
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Constrain to margins is unchecked
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Update Frames is set to Items of New Constraints
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, with the Collection View still selected, open the Attributes inspector
    in the Utilities panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Background in the Attributes inspector and, under the Color Sliders
    tab, set the Hex Color # to `ECECEC` under RGB Sliders in the drop-down menu.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the Collection View cell and, then, the Size inspector in the Utilities
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Size from Default to Custom. Then, set the Width to `320` and the
    Height to `78`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, select Background in the Attributes inspector and, under the Color Sliders
    tab, set the Hex Color # to `FFFFF` under RGB Sliders in the drop-down menu.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Utilities panel, select the Media Library and type restaurant-list into
    the filter field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a `restaurant-list-img` into your Collection View cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the image still selected, go to the Size inspector in the Utilities panel
    and update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `8`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `9`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `60`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `` `60` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, select the object library in the Utilities panel and type `label` into
    the filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag three labels into the cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the first label and, in the Size inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `76`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `10`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `236`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `21`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, select the Attributes inspector; update the Font to Bold and verify that
    the Font size is `17`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the second label and, in the Size inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `76`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `35`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `236`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `16`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, in the Attributes inspector, update the Font to Light, size `14`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the last label and, in the Size inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `76`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `53`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `236`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `16`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, in the Attributes inspector, update the Font to Light, size `14`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are done, your cell should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0710a3eb-886f-44b8-82d9-332b816ad4af.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our items in place, we need to add some Auto Layout to our
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Auto Layout to our  cell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see how to add Auto Layout to our cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Auto Layout will allow our layout to adjust to all devices. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the image in our cell and then select the Pin icon. Enter the following
    values under the Add New Constraints section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `9`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `8`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constrain to margins: unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `60` (checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `60` (checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, select the first label in our cell and, then, the Pin icon. Enter the
    following values under the Add New Constraints section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `10`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `8`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right: `8`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constrain to margins: unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `21` (checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, select the second label in our cell and, then, the Pin icon. Enter the
    following values under the Add New Constraints section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `4`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `8`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right: `8`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constrain to margins: unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `16` (checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, select the last label in our cell and, then, the Pin icon. Enter the
    following values under the Add New Constraints section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `2`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `8`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right: `8`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constrain to margins: unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `16` (checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have completed setting up our UI and can now proceed to get data into our
    app and display it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since all of our code for data is created in our iOS app, it does not make sense
    to rewrite our code for our *iMessages* app. We can create what is known as a
    framework to share our data between our iOS and iMessage apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using frameworks along with app extensions allows us to put shared code in
    one place. That means less code and more efficiency, because you will not need
    to update code in multiple places when you have to make a change. Let''s get started
    creating our framework:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Navigator panel, select the Project navigator and, then, your project
    again as we did earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the TARGETS area and click on the + button at the bottom of that area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the iOS tab, scroll to the bottom to Framework & Library, select Cocoa
    Touch Framework, and then hit Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b100cfc4-5af7-4fa8-9ff3-e0d8c87c4cd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Under Product Name, type `LetsEatDataKit` and then hit Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see the following folder and files in the `Products` folder
    in your Navigator panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f7e6feb-30b5-4397-a297-fa2783d27c2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the `LetsEatDataKit` target and ensure that, under Deployment Info,
    your Deployment Target is set to `10.0` and App Extensions is checked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19f98c5a-92dd-4e61-b9d2-d39a05385026.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click the `LetsEatDataKit` folder in the Navigator panel and create a
    new group named `Restaurant`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, from your *Let's Eat* app, please drag the `RestaurantDataManager.swift`
    file from the `Restaurant` folder inside of the `Controllers` folder into the
    newly created `LetsEatDataKit` folder's `Restaurant` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, drag the `RestaurantItem.swift` file from the `Map` folder inside of the
    `Controllers` folder into the `LetsEatDataKit` folder's `Restaurant` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, drag the `RestaurantAPIManager.swift` file from the `Restaurant` folder
    inside of the `Controllers` folder into the `LetsEatDataKit` folder's `Restaurant`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, drag the entire `JSON` folder from inside of the `Misc` folder into
    the `LetsEatDataKit` folder's `Restaurant` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you have completed these steps, you should have the following files in
    your `LetsEatDataKit` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d6ac127-e58b-42c6-b439-dcc3f52f0ee2.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, open the `API Manager` folder we just moved and, in the `json` subfolder,
    select the `Aspen.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Utilities panel, select the File inspector and locate the Target Membership
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94379625-408d-4431-9ee9-396b21314b55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To set the target of this file not only to our app but also to our `MessageApp`
    and `LetsEatDataKit`, check MessageApp and LetsEatDataKit under Target Membership.
    Therefore, our *Let''s Eat* app, MessageApp, and LetsEatDataKit should all be
    checked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/51353fa9-01bf-40c0-9789-3815ceb8acfe.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, select each JSON file inside of the `json` folder and update all of the
    files so that they are all targeted to `LetsEat`, `MessageApp`, and `LetsEatDataKit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select each of the remaining three files inside of the `LetsEatDataKit`
    folder's `Restaurant` folder and update them so that each one is targeted to `LetsEatDataKit`
    only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, change your target from `MessageApp` to `LetsEatDataKit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e9c7afb3-62c0-47d6-86fd-920c10bfe29f.png)'
  prefs: []
  type: TYPE_IMG
- en: Hit ⌘ + *B* to build the app without running it and your build should be successful
    as long as you updated the target of all of your files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, switch back to the *Let''s Eat* app and hit ⌘ + *B*. You will notice some
    errors. These errors are expected and are easy to fix:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of the `MapViewController.swift` file, add the following `import` at
    the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, continue by updating your `RestaurantItem`. We need to make this file
    public so that it is seen by other files. Therefore, inside of the `RestaurantItem.swift`
    file, update our struct declaration to add `public` before the class so that it
    looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, we need to make each of our variables `public`, since we are using
    them all as data. Update all variables by adding the keyword `public` in front
    of them and then save the file. When you add `public` to the annotation variable,
    you will see another error occur. This error is complaining because we are trying
    to make the variable `public` while the class is not `public`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, open your `RestaurantItem` class and update the class, each of the
    following variables, and the `init()` method with `public` access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and now your `RestaurantItem` errors will disappear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We still have more minor updates to make. We need to make both our `RestaurantAPIDataManager`
    and `RestaurantDataManager` public as well. Let''s start with the `RestaurantAPIDataManager`
    and update the following `struct` and method with `public` access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the class and each of the following methods inside of `RestaurantDataManager`
    with `public` access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to make our `init()` method for our `RestaurantDataManager` class
    `public`; so, after the class declaration, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Having this `init()` method allows us to write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When we make it `public`, we are calling the `init()` method when we have `RestaurantDataManager()`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, change the target to the `LetsEatDataKit` and build it again by hitting
    ⌘ + *B*. The build should be successful again at this point. If you, open the
    `MapViewController` file, you should see that all of the errors are fixed in this
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we still have more errors to address inside of `MapDataManager`, `LocationViewController`,
    `RestaurantViewController`, `ExploreViewController`, `RestaurantDetailViewController`,
    and `MessagesViewController`. Therefore, inside of each of these three files,
    add the following at the top of each file in the `import` statement section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next, hit ⌘ + *B* again, and there should be no errors inside of any of these
    three files or in your entire project.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you switch the target back to our *Let's Eat* app and build and run
    it by hitting the Play button (or using ⌘ + *R*), you should see that everything
    is working as expected. We can now start using this data in our *iMessages* app.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting our message cell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our files in order, we can start connecting everything. Earlier,
    we created our cell and now we need to create a cell class with which to connect
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `MessageApp` folder in the Navigator panel and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top and, then, Cocoa Touch Class. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now see an options screen. Please add the following in the new file
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Class: `RestaurantMessageCell`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UICollectionViewCell`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next and, then, Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the new file, add the following inside of the class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and then open `MainInterface.storyboard` in the `MessageApp` folder
    in the Navigator panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Outline view, select the Collection View Cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the Identity inspector in the Utilities panel; and, under Custom
    Class in the Class drop-down menu, select RestaurantMessageCell and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, switch to the Attributes inspector in the Utilities panel and update the
    identifier to `restaurantCell` and then hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, switch to the Connections inspector in the Utilities panel, and click
    and drag from the empty circle next to each outlet listed to the corresponding
    `UILabel` in the screen shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/65332a26-2c94-452d-aa8c-22fa4f14f2d8.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have our cell set up. Let's continue getting our *iMessages* app working.
  prefs: []
  type: TYPE_NORMAL
- en: Showing restaurants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be showing a list of restaurants just like in our app, but we will not
    be doing the entire interface. Most of this code will be familiar to you as we
    have done it before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `MessagesViewController.swift` file in the Navigator panel and
    add the following code inside of the class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to set up our Collection View defaults. Add the following method
    inside of a `private` extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You will see errors once you add the preceding code. Ignore them for now as
    we will fix them shortly. Now, we will create an `initialize()` method that will
    set up the Collection View and fetch our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following method above the `createMessage()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Since this tab does not contain a location list, we will just pass a city in
    manually. Here, we use Chicago, but you can change it to any city of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, call the `initialize()` method inside of the `viewDidLoad()` method,
    so that your `viewDidLoad()` method now looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s create another extension for our Collection View delegates and
    data source. After the last curly brace in the `MessagesViewController.swift`
    file, add the following `extension` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our `extension` set up, let''s add all of the methods we need
    to get our Collection View showing data. Please add the following inside of our
    extension (which will get rid of our earlier errors):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You should be very familiar with what we just added. We are setting up our Collection
    View data source as well as making sure our cells have a spacing of 14 pixels
    (7 on each side).
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, before we build our app, we need to connect our Collection View in
    the storyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up `MainInterface.storyboard` in the `MessageApp` folder in the Navigator
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Message View Controller and, then, the Connections inspector in the
    Utilities panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, under Outlets, click and drag from the empty circle next to `collectionView`
    to the Collection View in our scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s change the target *Message App* and build and run our *iMessages* app
    by hitting the Play button (or using ⌘ + *R*). Your app should look similar to
    the following after clicking the stickers button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cec8c83-ea99-41bc-b8a2-854a81c82eee.png)'
  prefs: []
  type: TYPE_IMG
- en: Hitting the arrow (highlighted by the red boxes) will expand the screen to expanded
    mode from compact mode and back again. Now that we have our restaurants displaying,
    we need to be able to send the restaurant reservation to other people. Let's add
    that next.
  prefs: []
  type: TYPE_NORMAL
- en: iMessage crashing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you just tried to launch the app and it crashed, there is a fix for this.
  prefs: []
  type: TYPE_NORMAL
- en: In the simulator, open the `Messages` app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Kate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then click on the icon with the three dots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4eb7f125-5898-448d-a709-aff84e6b1712.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then click Edit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35081487-1388-47c4-b0f3-fc89dd841a47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the switch for `MessageApp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41e13e1e-7cae-471b-813f-437fea21e687.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and rerun the app, and you should be fine. This error is an Apple bug
    and performing these steps is the only way to fix this issue. Let's move on to
    sending reservations.
  prefs: []
  type: TYPE_NORMAL
- en: Sending reservations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to set up our Collection View so that, when the user taps on a cell,
    it will add the reservation to the conversation in iMessages. When creating a
    message to send, we have the following things we can set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ec4f400-dcb4-41cc-962c-5b5f78df5fb9.png)'
  prefs: []
  type: TYPE_IMG
- en: We will use everything but the Trailing Caption and Trailing Subcaption.
  prefs: []
  type: TYPE_NORMAL
- en: Open up `MessagesViewController` in the `MessageApp` folder in the Navigator
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, in our main class declaration, add the following method after the `setupCollectionView()`
    method in the `private` extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this method, we are setting up an `MSMessage`. We check for an active conversation
    first. If `true`, we then set up our layout. Here, we are just using an image
    from our assets to create an image background (we could have also used a video,
    for example). Also, we set the caption `Table for 7, tonight at 10:00PM`. This
    allows the receiver to see all of the relevant information for the reservation.
    Next, we set the restaurant name as the image title and the restaurant's cuisine
    as the image subtitle. Then, we create an instance of the `MSMessage`, pass it
    the layout we created, and give it a URL (which, in our case, is just an empty
    string, since we do not have an URL). Finally, we insert the message into the
    conversation. We need to make sure that, when we want to send a message, we are
    in compact mode; otherwise, the user will think that the app does not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we just need to add the code that calls our `createMessage()` method.
    Add the following method in our extension, but before the last curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are checking for when the user taps a cell; then, we get `selectedRestaurant`
    and pass it to our `createMessage()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build and run the project by hitting the Play button (or using ⌘ + *R*).
    Select a restaurant and you will now see a message with the selected restaurant
    in the message area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bf8e31f-6c0a-4829-95bb-f5c61c0c1135.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that, with a little bit of work, you can add a nice *iMessages*
    app to your app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to add an *iMessage* app to our app. We also
    created a framework that allowed us to use data in both our apps without having
    to duplicate code. We looked at what is involved with creating an `MSMessage`
    and how we can pass an `MSMessageTemplateLayout` to an `MSMessage`. We now know
    that we can also send embedded videos as well as images when we send messages.
    Also, we can now send reservations through the *iMessages* app with relevant data
    for a reservation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go back to our *Let's Eat* app and we will learn
    how to work with notifications in our app.
  prefs: []
  type: TYPE_NORMAL
