["```kt\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>Spring_Security_SUB_Module_Name</artifactId>\n   <version>CURRENT_RELEASE_VERSION</version>\n</dependency>\n\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-core</artifactId>\n   <version>5.1.1.RELEASE</version>\n</dependency>\n```", "```kt\ninterface AuthenticationManager {\n @Throws(AuthenticationException::class)\n fun authenticate(authentication: Authentication): Authentication\n} \n```", "```kt\ninterface AuthenticationProvider {\n @Throws(AuthenticationException::class)\n    fun authenticate(authentication:Authentication):Authentication\n    fun supports(authentication: Class<*>): Boolean\n}\n```", "```kt\nclass ApplicationSecurity: WebSecurityConfigurerAdapter() {\n    @Autowired\n fun initialize(builder: AuthenticationManagerBuilder, dataSource: DataSource){\nbuilder.jdbcAuthentication().dataSource(dataSource).withUser(\"Sunnat629\").password(\"packtPub\").roles(\"USER\")\n }\n}\n```", "```kt\n @EnableGlobalMethodSecurity(securedEnabled = true)\n```", "```kt\n@SpringBootApplication\n@EnableGlobalMethodSecurity(securedEnabled = true)\nclass SpringSecurityApplication{\n\n    fun main(args: Array<String>) {\n        runApplication<SpringSecurityApplication>(*args)\n    }\n}\n\n```", "```kt\n@Secured class CustomService{\n    @Secured\n    fun secure(): String{\n return \"The is Secured...\"\n    }\n}\n```", "```kt\n<dependency>\n <groupId>org.springframework.security</groupId>\n <artifactId>Spring_Security_SUB_Module_Name</artifactId>\n <version>CURRENT_RELEASE_VERSION</version>\n</dependency>\n\n<!--here is an example of a security core sub-modules-->\n<dependency>\n <groupId>org.springframework.security</groupId>\n <artifactId>spring-security-core</artifactId>\n <version>5.1.1.RELEASE</version>\n</dependency>\n\n```", "```kt\ndependencies {\n    implementation 'org.springframework.security:[Spring_Security_SUB_Module_Name]:CURRENT_RELEASE_VERSION'\n}\n\n// here is an example of a security core sub-modules\ndependencies {\n implementation 'org.springframework.security:[spring-security-core]:5.1.1.RELEASE'\n}\n\n```", "```kt\n<groupId>com.packtpub.sunnat629</groupId> <artifactId>ssbasicauth</artifactId>\n<version>0.0.1-SNAPSHOT</version>\n<packaging>jar</packaging>\n\n<name>Spring Security Basic Authentication</name>\n<description>A sample project of Spring Security Basic Authentication</description>\n\n----\n----\n\n<properties>\n   <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n   <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n <java.version>1.8</java.version>\n   <kotlin.version>1.3.0</kotlin.version>\n</properties>\n\n<dependencies>\n   <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-security</artifactId>\n   </dependency>\n   <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n   </dependency>\n   <dependency>\n      <groupId>com.fasterxml.jackson.module</groupId>\n      <artifactId>jackson-module-kotlin</artifactId>\n   </dependency>\n <dependency>\n      <groupId>org.jetbrains.kotlin</groupId>\n      <artifactId>kotlin-stdlib-jdk8</artifactId> </dependency>\n   <dependency>\n      <groupId>org.jetbrains.kotlin</groupId>\n      <artifactId>kotlin-reflect</artifactId>\n   </dependency>\n\n   <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n   </dependency>\n   <dependency>\n      <groupId>org.springframework.security</groupId>\n      <artifactId>spring-security-test</artifactId>\n      <scope>test</scope>\n   </dependency>\n</dependencies>\n\n---\n---\n---\n```", "```kt\n@ComponentScan(basePackages = [\"com.packtpub.sunnat629.ssbasicauth\"])\n@SpringBootApplication\nclass SSBasicAuthApplication: SpringBootServletInitializer()\n\nfun main(args: Array<String>) {\n runApplication<SSBasicAuthApplication>(*args)\n}\n```", "```kt\n@Configuration @EnableWebSecurity\nclass SSConfig: WebSecurityConfigurerAdapter() {\n\n    @Autowired\n    private val authEntryPoint: AuthenticationEntryPoint? = null\n\n    @Throws(Exception::class)\n    override fun configure(http: HttpSecurity) {\n        http.csrf().disable().authorizeRequests()\n                .anyRequest().authenticated()\n                .and().httpBasic()\n                .authenticationEntryPoint(authEntryPoint)\n    }\n\n    @Autowired\n    @Throws(Exception::class)\n    fun configureGlobal(auth: AuthenticationManagerBuilder) {\n        auth.inMemoryAuthentication()\n                .withUser(\"sunnat629\")\n                .password(PasswordEncoderFactories.createDelegatingPasswordEncoder()\n                        .encode(\"password\"))\n                .roles(\"USER\")\n    }\n}\n```", "```kt\n@Component\nclass AuthenticationEntryPoint : BasicAuthenticationEntryPoint() {\n\n    @Throws(IOException::class, ServletException::class)\n    override fun commence(request: HttpServletRequest,\n                          response: HttpServletResponse,\n                          authEx: AuthenticationException) {\n        response.addHeader(\"WWW-Authenticate\", \"Basic realm=$realmName\")\n        response.status = HttpServletResponse.SC_UNAUTHORIZED\n        val writer = response.writer\n        writer.println(\"HTTP Status 401 - \" + authEx.message)\n    }\n\n    @Throws(Exception::class)\n    override fun afterPropertiesSet() {\n        realmName = \"packtpub ssbasicauth\"\n        super.afterPropertiesSet()\n    }\n}\n```", "```kt\nclass MyApplicationInitializer: WebApplicationInitializer {\n\n    @Throws(ServletException::class)\n    override fun onStartup(container: ServletContext) {\n\n        val ctx = AnnotationConfigWebApplicationContext()\n        ctx.servletContext = container\n\n        val servlet = container.addServlet(\"dispatcher\", DispatcherServlet(ctx))\n        servlet.setLoadOnStartup(1)\n        servlet.addMapping(\"/\")\n    }\n}\n```", "```kt\nclass Users(val id: String,\n            val name: String,\n            val email: String,\n            val contactNumber: String)\n```", "```kt\n@RestController\nclass UserController {\n\n    @GetMapping(path = [\"/users\"])\n    fun userList(): ResponseEntity<List<Users>>{\n        return ResponseEntity(getUsers(), HttpStatus.OK)\n    }\n\n    private fun getUsers(): List<Users> {\n        val user = Users(\"1\",\"Sunnat\", \"sunnat123@gmail.com\", \"0123456789\")\n        val user1 = Users(\"2\",\"Chaity\", \"chaity123@gmail.com\", \"1234567890\")\n        val user2 = Users(\"3\",\"Jisan\", \"jisan123@gmail.com\", \"9876543210\")\n        val user3 = Users(\"4\",\"Mirza\", \"mirza123@gmail.com\", \"5412309876\")\n        val user4 = Users(\"5\",\"Hasib\", \"hasib123@gmail.com\", \"5678901234\")\n\n        return Arrays.asList<Users>(user, user1, user2, user3, user4)\n    }\n}\n```", "```kt\nbuildscript {\n ext.kotlin_version = '1.3.10'    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n```", "```kt\nimplementation 'com.android.support:appcompat-v7:27.1.1'\nimplementation 'com.android.support.constraint:constraint-layout:1.1.3'\n\nimplementation 'com.google.code.gson:gson:2.8.5'\n\nimplementation 'com.squareup.retrofit2:retrofit:2.4.0'\nimplementation 'com.squareup.retrofit2:converter-gson:2.4.0'\nimplementation 'com.squareup.retrofit2:retrofit-converters:2.5.0'\nimplementation 'com.squareup.retrofit2:retrofit-adapters:2.5.0'\nimplementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'\n```", "```kt\nclass UserModel (val id: String\n                 val name: String,\n                 val contactNumber: String,\n                 val id: String,\n                 val email: String)\n```", "```kt\ninterface UserService {\n @GET(\"/user\")\n    fun getUserList(): Call<List<UserModel>>\n}\n```", "```kt\nclass UserServiceImpl{\n   fun getGithubServiceImpl(username:String, password:String): UserService {\n        val retrofit = Retrofit.Builder()\n                .client(getOkhttpClient(username, password))\n                .baseUrl(YOUR_SERVER_DOMAIN)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n        return retrofit.create(UserService::class.java)\n    }\n\n    private fun getOkhttpClient(username:String, password:String): OkHttpClient{\n        return OkHttpClient.Builder()\n                .addInterceptor(BasicAuthInterceptor(username, password))\n                .build()\n    }\n}\n```", "```kt\n private fun getOkhttpClient(username:String, password:String): OkHttpClient{\n        return OkHttpClient.Builder()\n                .addInterceptor(BasicAuthInterceptor(username, password))\n                .build()\n    }\n```", "```kt\nclass BasicAuthInterceptor(user: String, password: String) : Interceptor {\n\n    private val credentials: String = Credentials.basic(user, password)\n\n    @Throws(IOException::class)\n    override fun intercept(chain: Interceptor.Chain): Response {\n        val request = chain.request()\n        val authenticatedRequest = request.newBuilder()\n                .header(\"Authorization\", credentials).build()\n        return chain.proceed(authenticatedRequest)\n    }\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\n    var username: String = \"sunnat629\"\n    var password: String = \"password\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val githubService: UserService = UserServiceImpl().getGithubServiceImpl(username,password)\n\n        val call: Call<List<UserModel>> = githubService.getUserList()\n        call.enqueue(object: Callback<List<UserModel>> {\n            override fun onFailure(call: Call<List<UserModel>>, t: Throwable) {\n                Log.wtf(\"PACKTPUB\", t.message)\n            }\n\n            override fun onResponse(call: Call<List<UserModel>>, response: Response<List<UserModel>>) {\n                val adapter = UserListAdapter(this@MainActivity, response.body())\n                displayList.adapter = adapter\n            }\n        })\n    }\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/user_title\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        android:textStyle=\"bold\"\n        android:padding=\"5dp\"\n        android:gravity=\"center_horizontal\"\n        android:textAppearance=\"?android:textAppearanceLarge\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <ListView\n        android:id=\"@+id/displayList\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginLeft=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginRight=\"8dp\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView\" />\n\n</android.support.constraint.ConstraintLayout>\n```", "```kt\nval adapter = UserListAdapter(this@MainActivity, \nresponse.body()//this is a arraylist \n)\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"10dp\">\n\n    <TextView\n        android:id=\"@+id/name\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center_horizontal\"\n        android:padding=\"5dp\"\n        android:textAppearance=\"?android:textAppearanceMedium\"\n        android:textStyle=\"bold\"\n        app:layout_constraintBottom_toTopOf=\"@+id/contactNumber\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        tools:text=\"@tools:sample/full_names\" />\n\n    <TextView\n        android:id=\"@+id/contactNumber\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center_horizontal\"\n        android:padding=\"5dp\"\n        android:textAppearance=\"?android:textAppearanceSmall\"\n        app:layout_constraintBottom_toTopOf=\"@+id/email\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/name\"\n        tools:text=\"@tools:sample/cities\" />\n\n    <TextView\n        android:id=\"@+id/email\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center_horizontal\"\n        android:padding=\"5dp\"\n        android:textAppearance=\"?android:textAppearanceSmall\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/contactNumber\"\n        tools:text=\"@tools:sample/cities\" />\n\n</android.support.constraint.ConstraintLayout>\n```", "```kt\nclass UserListAdapter(context: Context,\n                      private val userList: List<UserModel>?) : BaseAdapter() {\n    private val inflater: LayoutInflater = context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)\n            as LayoutInflater\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup?): View {\n        val rowView = inflater.inflate(R.layout.user_list_item, parent, false)\n        val name = rowView.findViewById(R.id.name) as TextView\n        val email = rowView.findViewById(R.id.email) as TextView\n        val contactNumber = rowView.findViewById(R.id.contactNumber) as TextView\n        val userDetails = getItem(position) as UserModel\n        name.text = userDetails.name\n        email.text = userDetails.email\n        contactNumber.text = userDetails.contactNumber\n        return rowView\n    }\n    override fun getItem(position: Int): Any {\n        return userList!![position]\n    }\n    override fun getItemId(position: Int): Long {\n        return position.toLong()\n    }\n    override fun getCount(): Int {\n        return userList!!.size\n    }\n}\n```", "```kt\n val name = rowView.findViewById(R.id.name) as TextView\n        val email = rowView.findViewById(R.id.email) as TextView\n        val contactNumber = rowView.findViewById(R.id.contactNumber) as TextView\n```", "```kt\n----\n----\n  <dependencies>\n---\n---\n<!--spring security-->\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-config</artifactId>\n    <version>5.2.0.BUILD-SNAPSHOT</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n\n<!--spring cloud security-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-security</artifactId>\n</dependency>\n\n----\n----\n\n<!--database-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <scope>runtime</scope>\n</dependency>\n----\n----\n```", "```kt\n@Configuration\n@EnableResourceServer\nclass ResourceServerConfig: ResourceServerConfigurerAdapter(){\n\n    @Throws(Exception::class)\n    override fun configure(http: HttpSecurity?) {\n        http!!\n                .authorizeRequests()\n                .antMatchers(\"/open_for_all\").permitAll() // anyone can enter\n                .antMatchers(\"/private\").authenticated() // only authorized user can enter\n    }\n}\n```", "```kt\n@Configuration @EnableAuthorizationServer\nclass AuthorizationServerConfig: AuthorizationServerConfigurerAdapter() {\n\n   @Autowired\n   lateinit var authenticationManager: AuthenticationManager\n\n    @Autowired\n    lateinit var passwordEncoder: BCryptPasswordEncoder\n\n    @Throws(Exception::class)\n    override fun configure(security: AuthorizationServerSecurityConfigurer?) {\n        security!!.checkTokenAccess(\"isAuthenticated()\")\n    }\n\n    @Throws(Exception::class)\n    override fun configure(clients: ClientDetailsServiceConfigurer?) {\n       clients!!\n               .inMemory()\n               .withClient(\"client\")\n               .secret(passwordEncoder.encode(\"secret\"))\n               .authorizedGrantTypes(\"password\")\n               .authorities(\"ROLE_CLIENT\", \"ROLE_TRUSTED_CLIENT\")\n               .scopes(\"read\", \"write\", \"trust\")\n               .resourceIds(\"oauth2-resource\")\n               .accessTokenValiditySeconds(5000) // token validity time duration 5 minuets\n\n    }\n\n    @Throws(Exception::class)\n    override fun configure(endpoints: AuthorizationServerEndpointsConfigurer?) {\n        endpoints!!.authenticationManager(authenticationManager)\n    }\n}\n```", "```kt\n@Configuration\n@EnableWebSecurity\nclass SecurityConfiguration: WebSecurityConfigurerAdapter() {\n\n    @Throws(Exception::class)\n    override fun configure(auth: AuthenticationManagerBuilder?) {\n        auth!!\n                .inMemoryAuthentication()\n                .passwordEncoder(passwordEncoder())\n             // user1 as USER\n                .withUser(\"sunnat\")\n                .password(passwordEncoder().encode(\"password\"))\n                .roles(\"USER\")\n                .and()\n\n                // user2 as ADMIN\n               .withUser(\"admin\")        \n               .password(passwordEncoder().encode(\"password\"))\n                .roles(\"ADMIN\")\n    }\n\n    @Throws(Exception::class)\n    override fun configure(http: HttpSecurity?) {\n        http!!\n                .antMatcher(\"/**\").authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n                .formLogin()\n                .and()\n                .httpBasic()\n    }\n\n    @Bean(name = [BeanIds.AUTHENTICATION_MANAGER])\n    @Throws(Exception::class)\n    override fun authenticationManagerBean(): AuthenticationManager {\n        return super.authenticationManagerBean()\n    }\n\n    @Bean\n    fun passwordEncoder(): BCryptPasswordEncoder {\n        return BCryptPasswordEncoder(16)\n    }\n}\n```", "```kt\n@RestController\n@RequestMapping(\"/\")\nclass UserController{\n\n//    This is for all means there is no security issue for this URL path\n    @GetMapping(value = [\"/open_for_all\", \"\"])\n    fun home(): String{\n        return \"This area can be accessed by all.\"\n    }\n\n    //    Yu have to use token to get this URL path\n    @GetMapping(\"/private\")\n    fun securedArea(): String{\n        return \"You used an access token to enter this area.\"\n    }\n}\n```", "```kt\n@SpringBootApplication\nclass SpringSecurityOAuth2Application\n\nfun main(args: Array<String>) {\n    runApplication<SpringSecurityOAuth2Application>(*args)\n}\n```", "```kt\n#this project server port\nserver.port=8081\n```"]