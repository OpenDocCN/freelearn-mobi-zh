- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simple Values and Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have had a short tour of Xcode in the previous chapter, let’s look
    at the Swift programming language, which you will use to write your app.
  prefs: []
  type: TYPE_NORMAL
- en: First, you’ll explore **Swift playgrounds**, interactive environments where
    you can type in Swift code and have the results displayed immediately. Then, you’ll
    study how Swift represents and stores various types of data. After that, you’ll
    look at some cool Swift features, such as **type inference** and **type safety**,
    which help you to write code more concisely and avoid common errors. Finally,
    you’ll learn how to perform common operations on data and how to print messages
    to the Debug area to help you troubleshoot issues.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to write simple programs that
    can store and process letters and numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Swift playgrounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring constants and variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding type inference and type safety
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `print()` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about the latest version of the Swift language, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To do the exercises in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Apple Mac computer running macOS 14 Sonoma or macOS 15 Sequoia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode 16 installed (refer to *Chapter 1*, *Exploring Xcode*, for instructions
    on how to install Xcode)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Xcode playground for this chapter is in the `Chapter02` folder of the code
    bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/lSBD_Wacpdc](https://youtu.be/lSBD_Wacpdc%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll create a new playground, where you can type in the
    code presented in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Swift playgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Playgrounds are interactive coding environments. You type code in the left-hand
    pane, and the results are displayed immediately in the right-hand pane. It’s a
    great way to experiment with code and explore the iOS SDK.
  prefs: []
  type: TYPE_NORMAL
- en: SDK is an acronym for software development kit. To learn more about the iOS
    SDK, visit [https://developer.apple.com/ios/](https://developer.apple.com/ios/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating a new playground and examining its user interface.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a playground, launch Xcode and choose **File** | **New** | **Playground...**
    from the Xcode menu bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Xcode menu bar with File | New | Playground... selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Choose a template for your new playground:** screen appears. **iOS**
    should already be selected. Choose **Blank** and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: The Choose a template for your new playground: screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name your playground `SimpleValues` and save it anywhere you like. Click **Create**
    when done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Save dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll see the playground on your screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Xcode playground user interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, it’s much simpler than an Xcode project. Let’s look at the
    interface in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigator button (1)**: This shows or hides the Navigator area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity View (2)**: This shows the current operation or status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Library button (3)**: This displays code snippets and other resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inspector button (4)**: This shows or hides the Inspector area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navigator area (5)**: This provides quick access to various parts of your
    project. The Project navigator is displayed by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor area (6)**: You write code here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Results area (7)**: This provides immediate feedback on the code you write.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run button (8)**: This executes code from a selected line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Border (9)**: This border separates the Editor and Results areas. If you
    find that the results displayed in the Results area are truncated, drag the border
    to the left to increase its size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run/Stop button (10)**: This executes or stops the execution of all code
    in the playground.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug area (11)**: This displays the results of the `print()` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug button (12)**: This shows and hides the Debug area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may find the text in the playground too small and hard to read. Let’s see
    how to make it larger in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing fonts and colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Xcode has extensive customization options available. You can access them in
    the **Settings...** menu. If you find that the text is small and hard to see,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Settings...** from the Xcode menu to display the Settings window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Settings window, click **Themes** and choose **Presentation (Light)**
    to make the text larger and easier to read:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Xcode settings window with the Themes pane selected'
  prefs: []
  type: TYPE_NORMAL
- en: Close the Settings window to return to the playground. Note that the text in
    the playground is larger than before. You can also try the other themes if you
    wish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you’ve customized the fonts and colors to your liking, let’s see how
    to run playground code in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Running playground code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your playground already has an instruction in it. To execute the instruction,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Run button to the left of the instruction. After a few seconds, you
    will see `"``Hello, playground"` displayed in the Results area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Playground showing “Hello, playground” in the Results area'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the Run/Stop button in the bottom-left corner or use the keyboard
    shortcut *Command* + *Shift* + *Return* to run all the code in your playground.
  prefs: []
  type: TYPE_NORMAL
- en: To prepare the playground for use in the remainder of this chapter, delete the
    `var greeting = "Hello, playground"` instruction from the playground. As you go
    along, type the code shown in this chapter into the playground, and click the
    Runbutton to the left of the last line to run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s dive into the simple data types used in Swift in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All programming languages can store numbers, words, and logic states, and Swift
    is no different. Even if you’re an experienced programmer, you may find that Swift
    represents these values differently from other languages that you may be familiar
    with.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on data types, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s walk through the Swift versions of **integers**, **floating-point numbers**,
    **strings**, and **Booleans** in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Representing integers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say you want to store the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The number of restaurants in a city
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passengers in an airplane
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rooms in a hotel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You would use integers, which are numbers without a fractional component (including
    negative numbers).
  prefs: []
  type: TYPE_NORMAL
- en: Integers in Swift are represented by the `Int` type.
  prefs: []
  type: TYPE_NORMAL
- en: Representing floating-point numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say you want to store the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Pi (3.14159...)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Absolute zero (-273.15°C)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You would use floating-point numbers, which are numbers with a fractional component.
  prefs: []
  type: TYPE_NORMAL
- en: The default type for floating-point numbers in Swift is `Double`, which uses
    64 bits, including negative numbers. You can also use `Float`, which uses 32 bits,
    but `Double` is the default representation.
  prefs: []
  type: TYPE_NORMAL
- en: Representing strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say you want to store the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of a restaurant, such as “Bombay Palace”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A job description, such as “Accountant” or “Programmer”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A kind of fruit, such as “banana”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You would use Swift’s `String` type, which represents a sequence of characters
    and is fully Unicode-compliant. This makes it easy to represent different fonts
    and languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about Unicode, visit this link: [https://home.unicode.org/basic-info/faq/](https://home.unicode.org/basic-info/faq/).'
  prefs: []
  type: TYPE_NORMAL
- en: Representing Booleans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say you want to store answers to simple yes/no questions, such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Is it raining?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any available seats at the restaurant?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this, you use Boolean values. Swift provides a `Bool` type that can be assigned
    `true` or `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how Swift represents these common data types, let’s try them
    out in the playground you created earlier in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using common data types in the playground
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Anything that you type into a playground will be executed, and the results
    will appear in the Results area. Let’s see what happens when you type numbers,
    strings, and Boolean values into your playground and execute it. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following code into the Editor area of your playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that any line with `//` in front of it is a comment. Comments are a great
    way to create notes or reminders for yourself and will be ignored by Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Click the Runbutton to the left of the last line to run your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wait a few seconds. Xcode will evaluate your input and display results in the
    Results area, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that comments do not appear in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: Cool! You have just created and run your first playground. Let’s look at how
    to store different data types in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring constants and variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you know about the simple data types that Swift supports, let’s look
    at how to store them so that you can perform operations on them later.
  prefs: []
  type: TYPE_NORMAL
- en: You can use **constants** or **variables** to store values. Both are containers
    that have a name, but a constant’s value can only be set once and cannot be changed
    after it is set, whereas a variable’s value can be changed at any time.
  prefs: []
  type: TYPE_NORMAL
- en: You must declare constants and variables before you use them. Constants are
    declared with the `let` keyword while variables are declared with the `var` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s explore how constants and variables work by implementing them in our
    playground. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to your playground to declare three constants:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the Run button to the left of the last line to run it. In each case, a
    container is created and named, and the assigned value is stored in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may have noticed that the names of constants and variables shown here start
    with a lowercase letter, and if there is more than one word in the name, every
    subsequent word starts with a capital letter. This is known as **camel case**.
    Doing this is strongly encouraged, as most experienced Swift programmers adhere
    to this convention.
  prefs: []
  type: TYPE_NORMAL
- en: Note that a sequence of characters enclosed by double quotation marks, `"Ahmad
    Sahar"`, is used to assign the value for `myName`. These are known as **string
    literals**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code after the constant declarations to declare three variables
    and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Like constants, a container is created and named in each case, and the assigned
    value is stored in it.
  prefs: []
  type: TYPE_NORMAL
- en: The stored values are displayed in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of a constant can’t be changed once it is set. To test this, add
    the following code after the variable declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you type the second line of code, a pop-up menu will appear with suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_02_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Autocomplete pop-up menu'
  prefs: []
  type: TYPE_NORMAL
- en: Use the up and down arrow keys to choose the `isRaining` constant and press
    the *Tab* key to select it. This feature is called **autocomplete** and helps
    to prevent typing mistakes when you enter code.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have finished typing, wait a few seconds. On the second line, you’ll
    see an error notification (a red circle with a white dot in the middle) appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Error notification'
  prefs: []
  type: TYPE_NORMAL
- en: This means there is an error in your program, and Xcode thinks it can be fixed.
    The error appears because you are trying to assign a new value to a constant after
    its initial value has been set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the red circle to expand the error message. You’ll see the following
    box with a **Fix** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: Expanded error notification'
  prefs: []
  type: TYPE_NORMAL
- en: 'Xcode tells you what the problem is (**Cannot assign to value: ‘isRaining’
    is a ‘let’ constant**) and suggests a correction (**Change ‘let’ to ‘var’ to make
    it mutable**). “Mutable” just means that the value can be changed after it has
    been set initially.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Fix** button. You’ll see that the `isRaining` constant declaration
    has been changed to a variable declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Code with a fix applied'
  prefs: []
  type: TYPE_NORMAL
- en: Since a new value can be assigned to a variable after it has been created, the
    error is resolved. Do note, however, that the suggested correction might not be
    the best solution. As you gain more experience with iOS development, you’ll be
    able to determine the best course of action.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the code you typed in, you might wonder how Xcode knows the type
    of data stored in a variable or constant. You’ll learn how that is done in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding type inference and type safety
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, you declared constants and variables and assigned
    values to them. Swift automatically determines the constant or variable type based
    on the value provided. This is called **type inference**. You can see the type
    of a constant or variable by holding down the *Option* key and clicking its name.
    To see this in action, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to your playground to declare a string and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Hold down the *Option* key and click `cuisine` to reveal the constant type.
    You should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: Type declaration displayed'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, `cuisine`'s type is `String`.
  prefs: []
  type: TYPE_NORMAL
- en: What if you want to set a specific type for a variable or constant? You’ll see
    how to do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using type annotation to specify a type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve seen that Xcode tries to automatically determine the data type of a variable
    or constant based on the value provided. However, at times, you may wish to specify
    a type instead of letting Xcode do it for you. To do this, type a colon (`:`)
    after a constant or variable name, followed by the desired type. This is known
    as **type annotation**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to your playground to declare a variable, `restaurantRating`,
    of type `Double`, and click the Run button to run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, you specified that `restaurantRating` has a specific type, `Double`. Even
    though you assigned an integer to `restaurantRating`, it will be stored as a floating-point
    number.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll learn how Xcode helps you reduce the number of errors
    in your program by enforcing type safety.
  prefs: []
  type: TYPE_NORMAL
- en: Using type safety to check values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Swift is a type-safe language. It checks to see whether you’re assigning values
    of the correct type to variables and flags mismatched types as errors. Let’s see
    how this works by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following statement to your playground to assign a string to `restaurantRating`
    and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ll see an error notification (a red circle with an x inside it). The x means
    Xcode can’t suggest a fix for this. Click on the red circle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since you are trying to assign a string to a variable of type `Double`, the
    following error message is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_02_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: Expanded error notification with no fix'
  prefs: []
  type: TYPE_NORMAL
- en: 'Comment out the line by typing `//` before it, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The red circle disappears as there are no more errors in your program.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting lines of code and typing *Command* + */* will comment them out.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to store data in constants and variables, let’s look at
    how to perform operations on them in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can perform arithmetic, comparison, and logical operations in Swift. **Arithmetic
    operators** are for common mathematical operations. **Comparison** and **logical
    operators** check an expression’s value and return `true` or `false`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on operators, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at each operator type in more detail. You’ll start with arithmetic
    operators (addition, subtraction, multiplication, and division) in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using arithmetic operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can perform mathematical operations on integer and floating-point numbers
    by using the standard arithmetic operators shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_02_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: Arithmetic operators'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how these operators are used. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to add arithmetic operations to your playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the code. The results displayed in the Results area will be `43`, `-11`,
    `-55`, and `-5`, respectively. Note that 55 divided by 10 returns 5 instead of
    5.5, as both numbers are integers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Operators can only work with operands of the same type. Enter the following
    code and run it to see what happens if the operands are of different types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ll get an error message (**Binary operator ‘+’ cannot be applied to operands
    of type ‘Int’ and ‘Double’**). This is because `a` and `b` are different types.
    Note that Xcode can’t fix this automatically, so it does not display any fix-it
    suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix the error, modify the program as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Double(a)` gets the value stored in `a` and creates a floating-point number
    from it. Both operands are now of the same type, and now you can add the value
    in `b` to it. The value stored in `c` is `24.0`, and `24` will be displayed in
    the Results area.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to use arithmetic operators, you’ll look at compound assignment
    operators (+=, -=, *=, and /=) in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using compound assignment operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can perform an operation on a value and assign the result to a variable
    using the compound assignment operators shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_02_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: Compound assignment operators'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how these operators are used. Add the following code to your playground
    and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `d += 2` expression is shorthand for `d = d + 2`, so the value in `d` is
    now `1 + 2`, and `3` will be assigned to `d`. In the same way, `d -= 1` is shorthand
    for `d = d - 1`, so the value in `d` is now `3 - 1`, and `2` will be assigned
    to `d`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you are familiar with compound assignment operators, let’s look at
    comparison operators (==, /=, >, <, >=, and <=) in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using comparison operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can compare one value to another using comparison operators, and the result
    will be true or false. You can use the following comparison operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_02_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: Comparison operators'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how these operators are used. Add the following code to your playground
    and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 == 1` returns `true` because 1 is equal to 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2 != 1` returns `true` because 2 is not equal to 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2 > 1` returns `true` because 2 is greater than 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1 < 2` returns `true` because 1 is less than 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1 >= 1` returns `true` because 1 is greater than or equal to 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2 <= 1` returns `false` because 2 is not less than or equal to 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The returned Boolean values will be displayed in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: What happens if you want to check more than one condition? That’s where logical
    operators (**AND**, **OR**, and **NOT**) come in. You’ll learn about those in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using logical operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Logical operators are handy when you deal with two or more conditions. For example,
    if you are at a convenience store, you can pay for items if you have cash or a
    credit card. OR is the logical operator in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following logical operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_02_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: Logical operators'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how these operators are used, add the following code to your playground
    and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(1 == 1) && (2 == 2)` returns `true` as both operands are `true`, so `true
    AND true` returns `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(1 == 1) && (2 != 2)` returns `false` as one operand is `false`, so `true
    AND false` returns `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(1 == 1) || (2 == 2)` returns `true` as both operands are `true`, so `true
    OR true` returns `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(1 == 1) || (2 != 2)` returns `true` as one operand is `true`, so `true OR
    false` returns `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(1 != 1) || (2 != 2)` returns `false` as both operands are `false`, so `false
    OR false` returns `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`!(1 == 1)` returns `false` as `1==1` is `true`, so `NOT true` returns `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The returned Boolean values will be displayed in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: So far, you’ve only worked with numbers. In the next section, you’ll see how
    you can perform operations on words and sentences, which are stored as strings
    using Swift’s `String` type.
  prefs: []
  type: TYPE_NORMAL
- en: Performing string operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you saw earlier, a string is a series of characters. They are represented
    by the `String` type, and they are fully Unicode-compliant.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on strings, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s learn about some common string operations. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can join two strings together using the `+` operator. Add the following
    code to your playground and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The values of the string literals `"Good"` and `" Morning"` are joined together,
    and `"Good Morning"` is displayed in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can combine strings with constants and variables of other types by making
    them strings as well. To change a constant, `rating`, into a string, enter the
    following code and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `rating` constant contains `3.5`, a value of type `Double`. Putting `rating`
    in between the brackets of `String()` gets the value stored in `rating` and creates
    a new string based on it, `"3.5"`, which is combined with the string in the `ratingResult`
    variable, returning the string `"The restaurant rating is 3.5"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a simpler way of combining strings called **string interpolation**.
    String interpolation is done by typing the name of a constant or variable between
    `"\("` and `")"` in a string. Enter the following code and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As in the previous example, the value in `rating` is used to create a new string,
    `"3.5"`, returning the string `"The restaurant rating is 3.5"`.
  prefs: []
  type: TYPE_NORMAL
- en: So far, you can see the results of your instructions in the Results area. However,
    when you write your app using Xcode, you won’t have access to the Results area
    that you see in your playground. To display the contents of variables and constants
    while your program runs, you’ll learn how to print them to the Debug area in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using the print() statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw in *Chapter 1*, *Exploring Xcode*, an Xcode project does not have
    a Results area like a playground does, but both the project and playground have
    a Debug area. Using the `print()` statement will print anything between the brackets
    to the Debug area.
  prefs: []
  type: TYPE_NORMAL
- en: The `print()` statement is a function. You’ll learn more about functions in
    *Chapter 6*, *Functions and Closures*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to your playground and click the **Run** button to run
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll see the value of `ratingResult` appear in the Debug area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_02_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.17: The Debug area showing the result of the print() statement'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re just starting out, feel free to use as many `print()` statements
    as you like. It’s a really good way to understand what is happening in your program.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create and use playground files, which allow
    you to explore and experiment with Swift.
  prefs: []
  type: TYPE_NORMAL
- en: You saw how Swift represents different types of data, and how to use constants
    and variables. This enables you to store numbers, Boolean values, and strings
    in your program.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned about type inference, type annotation, and type safety, which
    help you to write code concisely and with fewer errors.
  prefs: []
  type: TYPE_NORMAL
- en: You looked at how to perform operations on numbers and strings, which lets you
    perform simple data processing tasks.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to fix errors, and how to print to the Debug area, which is
    useful when you’re trying to find and fix errors in the programs that you write.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll look at **conditionals** and **optionals**. Conditionals
    deal with making logical choices in your program, and optionals deal with cases
    where a variable may or may not have a value.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift)'
  prefs: []
  type: TYPE_NORMAL
