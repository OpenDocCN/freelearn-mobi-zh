- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Simple Values and Types
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单值和类型
- en: Now that you have had a short tour of Xcode in the previous chapter, let’s look
    at the Swift programming language, which you will use to write your app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在前一章中对 Xcode 进行了简要的浏览，让我们来看看你将用来编写应用的 Swift 编程语言。
- en: First, you’ll explore **Swift playgrounds**, interactive environments where
    you can type in Swift code and have the results displayed immediately. Then, you’ll
    study how Swift represents and stores various types of data. After that, you’ll
    look at some cool Swift features, such as **type inference** and **type safety**,
    which help you to write code more concisely and avoid common errors. Finally,
    you’ll learn how to perform common operations on data and how to print messages
    to the Debug area to help you troubleshoot issues.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将探索 **Swift 游乐场**，这是一个交互式环境，你可以在此处输入 Swift 代码，并立即显示结果。然后，你将学习 Swift 如何表示和存储各种类型的数据。之后，你将了解一些酷炫的
    Swift 功能，例如 **类型推断** 和 **类型安全**，这些功能可以帮助你更简洁地编写代码并避免常见错误。最后，你将学习如何对数据进行常见操作以及如何将消息打印到调试区域以帮助你解决问题。
- en: By the end of this chapter, you should be able to write simple programs that
    can store and process letters and numbers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够编写简单的程序来存储和处理字母和数字。
- en: 'The following topics will be covered:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下主题将涵盖：
- en: Introducing Swift playgrounds
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Swift 游乐场
- en: Exploring data types
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索数据类型
- en: Exploring constants and variables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索常量和变量
- en: Understanding type inference and type safety
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解类型推断和类型安全
- en: Exploring operators
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索运算符
- en: Using the `print()` statement
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `print()` 语句
- en: For more information about the latest version of the Swift language, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解 Swift 语言最新版本的信息，请访问 [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/)。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To do the exercises in this chapter, you will need the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，你需要以下内容：
- en: An Apple Mac computer running macOS 14 Sonoma or macOS 15 Sequoia
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 macOS 14 Sonoma 或 macOS 15 Sequoia 的苹果 Mac 电脑
- en: Xcode 16 installed (refer to *Chapter 1*, *Exploring Xcode*, for instructions
    on how to install Xcode)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 Xcode 16（有关安装 Xcode 的说明，请参阅 *第 1 章*，*探索 Xcode*）
- en: 'The Xcode playground for this chapter is in the `Chapter02` folder of the code
    bundle for this book, which can be downloaded here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的 Xcode 游乐场位于本书代码包的 `Chapter02` 文件夹中，可在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际效果：
- en: '[https://youtu.be/lSBD_Wacpdc](https://youtu.be/lSBD_Wacpdc%0D)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/lSBD_Wacpdc](https://youtu.be/lSBD_Wacpdc%0D)'
- en: In the next section, you’ll create a new playground, where you can type in the
    code presented in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将创建一个新的游乐场，你可以在其中输入本章中展示的代码。
- en: Introducing Swift playgrounds
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Swift 游乐场
- en: Playgrounds are interactive coding environments. You type code in the left-hand
    pane, and the results are displayed immediately in the right-hand pane. It’s a
    great way to experiment with code and explore the iOS SDK.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场是交互式编码环境。你在左侧面板中输入代码，结果会立即在右侧面板中显示。这是一种很好的实验代码和探索 iOS SDK 的方法。
- en: SDK is an acronym for software development kit. To learn more about the iOS
    SDK, visit [https://developer.apple.com/ios/](https://developer.apple.com/ios/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SDK 是软件开发工具包的缩写。要了解更多关于 iOS SDK 的信息，请访问 [https://developer.apple.com/ios/](https://developer.apple.com/ios/)。
- en: 'Let’s start by creating a new playground and examining its user interface.
    Follow these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新的游乐场并检查其用户界面开始。按照以下步骤操作：
- en: 'To create a playground, launch Xcode and choose **File** | **New** | **Playground...**
    from the Xcode menu bar:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建游乐场，启动 Xcode 并从 Xcode 菜单栏中选择 **文件** | **新建** | **游乐场...**：
- en: '![](img/B31371_02_01.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_01.png)'
- en: 'Figure 2.1: Xcode menu bar with File | New | Playground... selected'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：选择 File | New | Playground... 的 Xcode 菜单栏
- en: 'The **Choose a template for your new playground:** screen appears. **iOS**
    should already be selected. Choose **Blank** and click **Next**:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择一个模板以创建新的游乐场**：屏幕出现。**iOS** 应已选中。选择 **空白** 并点击 **下一步**：'
- en: '![](img/B31371_02_02.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_02.png)'
- en: 'Figure 2.2: The Choose a template for your new playground: screen'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：为新游乐场选择模板：屏幕
- en: 'Name your playground `SimpleValues` and save it anywhere you like. Click **Create**
    when done:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的游乐场命名为 `SimpleValues` 并保存到任何你喜欢的位置。完成后点击 **创建**：
- en: '![](img/B31371_02_03.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_03.png)'
- en: 'Figure 2.3: Save dialog box'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：保存对话框
- en: 'You’ll see the playground on your screen:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会在屏幕上看到游乐场：
- en: '![](img/B31371_02_04.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_04.png)'
- en: 'Figure 2.4: Xcode playground user interface'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：Xcode游乐场用户界面
- en: 'As you can see, it’s much simpler than an Xcode project. Let’s look at the
    interface in more detail:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它比Xcode项目简单得多。让我们更详细地看看界面：
- en: '**Navigator button (1)**: This shows or hides the Navigator area.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航按钮（1）**：这会显示或隐藏导航区域。'
- en: '**Activity View (2)**: This shows the current operation or status.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动视图（2）**：这显示了当前的操作或状态。'
- en: '**Library button (3)**: This displays code snippets and other resources.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库按钮（3）**：这会显示代码片段和其他资源。'
- en: '**Inspector button (4)**: This shows or hides the Inspector area.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查器按钮（4）**：这会显示或隐藏检查器区域。'
- en: '**Navigator area (5)**: This provides quick access to various parts of your
    project. The Project navigator is displayed by default.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航区域（5）**：这提供了快速访问项目各个部分的途径。默认情况下显示项目导航器。'
- en: '**Editor area (6)**: You write code here.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器区域（6）**：你在这里编写代码。'
- en: '**Results area (7)**: This provides immediate feedback on the code you write.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结果区域（7）**：这为你编写的代码提供即时反馈。'
- en: '**Run button (8)**: This executes code from a selected line.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行按钮（8）**：这会从选定的行执行代码。'
- en: '**Border (9)**: This border separates the Editor and Results areas. If you
    find that the results displayed in the Results area are truncated, drag the border
    to the left to increase its size.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边框（9）**：这个边框分隔了编辑器和结果区域。如果你发现结果区域显示的结果被截断，可以将边框向左拖动以增加其大小。'
- en: '**Run/Stop button (10)**: This executes or stops the execution of all code
    in the playground.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行/停止按钮（10）**：这会执行或停止游乐场中所有代码的执行。'
- en: '**Debug area (11)**: This displays the results of the `print()` command.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试区域（11）**：这会显示 `print()` 命令的结果。'
- en: '**Debug button (12)**: This shows and hides the Debug area.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试按钮（12）**：这会显示或隐藏调试区域。'
- en: You may find the text in the playground too small and hard to read. Let’s see
    how to make it larger in the next section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现游乐场中的文本太小，难以阅读。让我们看看如何在下一节中将其放大。
- en: Customizing fonts and colors
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义字体和颜色
- en: 'Xcode has extensive customization options available. You can access them in
    the **Settings...** menu. If you find that the text is small and hard to see,
    follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode提供了广泛的定制选项。你可以在 **设置...** 菜单中访问它们。如果你发现文本太小，难以看清，请按照以下步骤操作：
- en: Choose **Settings...** from the Xcode menu to display the Settings window.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Xcode菜单中选择 **设置...** 以显示设置窗口。
- en: 'In the Settings window, click **Themes** and choose **Presentation (Light)**
    to make the text larger and easier to read:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置窗口中，点击 **主题** 并选择 **演示（浅色）** 以使文本更大，更容易阅读：
- en: '![](img/B31371_02_05.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_05.png)'
- en: 'Figure 2.5: Xcode settings window with the Themes pane selected'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：选择主题面板的Xcode设置窗口
- en: Close the Settings window to return to the playground. Note that the text in
    the playground is larger than before. You can also try the other themes if you
    wish.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭设置窗口返回到游乐场。注意，游乐场中的文本比之前更大。你也可以尝试其他主题。
- en: Now that you’ve customized the fonts and colors to your liking, let’s see how
    to run playground code in the next section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经根据自己的喜好自定义了字体和颜色，让我们看看如何在下一节中运行游乐场代码。
- en: Running playground code
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行游乐场代码
- en: 'Your playground already has an instruction in it. To execute the instruction,
    follow these steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你的游乐场中已经包含了一条指令。要执行指令，请按照以下步骤操作：
- en: 'Click the Run button to the left of the instruction. After a few seconds, you
    will see `"``Hello, playground"` displayed in the Results area:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击指令左侧的运行按钮。几秒钟后，你将在结果区域看到 `"``Hello, playground"`：
- en: '![](img/B31371_02_06.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_06.png)'
- en: 'Figure 2.6: Playground showing “Hello, playground” in the Results area'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：游乐场结果显示区域显示“Hello, playground”
- en: You can also use the Run/Stop button in the bottom-left corner or use the keyboard
    shortcut *Command* + *Shift* + *Return* to run all the code in your playground.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用左下角的运行/停止按钮，或者使用键盘快捷键 *Command* + *Shift* + *Return* 来运行游乐场中的所有代码。
- en: To prepare the playground for use in the remainder of this chapter, delete the
    `var greeting = "Hello, playground"` instruction from the playground. As you go
    along, type the code shown in this chapter into the playground, and click the
    Runbutton to the left of the last line to run it.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了准备游乐场在本章剩余部分的使用，请从游乐场中删除 `var greeting = "Hello, playground"` 指令。随着你的操作，将本章中显示的代码输入到游乐场中，并点击最后一行左侧的运行按钮来运行它。
- en: Let’s dive into the simple data types used in Swift in the next section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们深入了解 Swift 中使用的简单数据类型。
- en: Exploring data types
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索数据类型
- en: All programming languages can store numbers, words, and logic states, and Swift
    is no different. Even if you’re an experienced programmer, you may find that Swift
    represents these values differently from other languages that you may be familiar
    with.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所有编程语言都可以存储数字、单词和逻辑状态，Swift 也不例外。即使你是一位经验丰富的程序员，你也可能会发现 Swift 对这些值的表示与其他你可能熟悉的语言不同。
- en: For more information on data types, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 更多有关数据类型的信息，请访问 [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics).
- en: Let’s walk through the Swift versions of **integers**, **floating-point numbers**,
    **strings**, and **Booleans** in the next sections.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将逐步介绍 Swift 中的 **整数**、**浮点数**、**字符串** 和 **布尔值**。
- en: Representing integers
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示整数
- en: 'Let’s say you want to store the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要存储以下内容：
- en: The number of restaurants in a city
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 城市中的餐馆数量
- en: Passengers in an airplane
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞机上的乘客
- en: Rooms in a hotel
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 酒店的房间
- en: You would use integers, which are numbers without a fractional component (including
    negative numbers).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你会使用整数，它们是没有分数部分的数字（包括负数）。
- en: Integers in Swift are represented by the `Int` type.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 中的整数由 `Int` 类型表示。
- en: Representing floating-point numbers
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示浮点数
- en: 'Let’s say you want to store the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要存储以下内容：
- en: Pi (3.14159...)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆周率（3.14159...）
- en: Absolute zero (-273.15°C)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绝对零度（-273.15°C）
- en: You would use floating-point numbers, which are numbers with a fractional component.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你会使用带有分数部分的浮点数。
- en: The default type for floating-point numbers in Swift is `Double`, which uses
    64 bits, including negative numbers. You can also use `Float`, which uses 32 bits,
    but `Double` is the default representation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 中浮点数的默认类型是 `Double`，它使用 64 位，包括负数。你也可以使用 `Float`，它使用 32 位，但 `Double` 是默认表示。
- en: Representing strings
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示字符串
- en: 'Let’s say you want to store the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要存储以下内容：
- en: The name of a restaurant, such as “Bombay Palace”
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 餐馆的名称，例如“孟买宫殿”
- en: A job description, such as “Accountant” or “Programmer”
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 职位描述，例如“会计”或“程序员”
- en: A kind of fruit, such as “banana”
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种水果，例如“香蕉”
- en: You would use Swift’s `String` type, which represents a sequence of characters
    and is fully Unicode-compliant. This makes it easy to represent different fonts
    and languages.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你会使用 Swift 的 `String` 类型，它表示字符序列，并且完全符合 Unicode 标准。这使得表示不同的字体和语言变得容易。
- en: 'To learn more about Unicode, visit this link: [https://home.unicode.org/basic-info/faq/](https://home.unicode.org/basic-info/faq/).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于 Unicode 的信息，请访问此链接：[https://home.unicode.org/basic-info/faq/](https://home.unicode.org/basic-info/faq/).
- en: Representing Booleans
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示布尔值
- en: 'Let’s say you want to store answers to simple yes/no questions, such as the
    following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要存储简单的是/否问题的答案，例如以下内容：
- en: Is it raining?
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否在下雨？
- en: Are there any available seats at the restaurant?
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 餐馆是否有空位？
- en: For this, you use Boolean values. Swift provides a `Bool` type that can be assigned
    `true` or `false`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此，你使用布尔值。Swift 提供了一个 `Bool` 类型，可以被分配 `true` 或 `false`。
- en: Now that you know how Swift represents these common data types, let’s try them
    out in the playground you created earlier in the next section.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Swift 如何表示这些常见的数据类型，让我们在前面创建的游乐场中尝试它们，下一节将进行操作。
- en: Using common data types in the playground
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在游乐场中使用常见的数据类型
- en: 'Anything that you type into a playground will be executed, and the results
    will appear in the Results area. Let’s see what happens when you type numbers,
    strings, and Boolean values into your playground and execute it. Follow these
    steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你在游乐场中输入的任何内容都将被执行，结果将显示在结果区域。让我们看看当你将数字、字符串和布尔值输入到你的游乐场并执行时会发生什么。按照以下步骤操作：
- en: 'Type the following code into the Editor area of your playground:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入到你的游乐场的编辑器区域：
- en: '[PRE0]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that any line with `//` in front of it is a comment. Comments are a great
    way to create notes or reminders for yourself and will be ignored by Xcode.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，任何以`//`开头的行都是注释。注释是为自己创建笔记或提醒的好方法，并且会被Xcode忽略。
- en: Click the Runbutton to the left of the last line to run your code.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击最后一行左侧的运行按钮来运行你的代码。
- en: 'Wait a few seconds. Xcode will evaluate your input and display results in the
    Results area, as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟。Xcode将评估你的输入并在结果区域显示结果，如下所示：
- en: '[PRE1]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that comments do not appear in the Results area.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，注释不会出现在结果区域。
- en: Cool! You have just created and run your first playground. Let’s look at how
    to store different data types in the next section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你已经创建并运行了你的第一个沙盒。让我们看看如何在下一节中存储不同的数据类型。
- en: Exploring constants and variables
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索常量和变量
- en: Now that you know about the simple data types that Swift supports, let’s look
    at how to store them so that you can perform operations on them later.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了Swift支持的基本数据类型，让我们看看如何存储它们，以便你可以在以后对它们进行操作。
- en: You can use **constants** or **variables** to store values. Both are containers
    that have a name, but a constant’s value can only be set once and cannot be changed
    after it is set, whereas a variable’s value can be changed at any time.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用**常量**或**变量**来存储值。两者都是具有名称的容器，但常量的值只能设置一次，一旦设置就不能更改，而变量的值可以在任何时候更改。
- en: You must declare constants and variables before you use them. Constants are
    declared with the `let` keyword while variables are declared with the `var` keyword.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用之前，你必须声明常量和变量。常量使用`let`关键字声明，而变量使用`var`关键字声明。
- en: 'Let’s explore how constants and variables work by implementing them in our
    playground. Follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在我们的沙盒中实现它们来探索常量和变量是如何工作的。按照以下步骤操作：
- en: 'Add the following code to your playground to declare three constants:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的沙盒中，以声明三个常量：
- en: '[PRE2]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Click the Run button to the left of the last line to run it. In each case, a
    container is created and named, and the assigned value is stored in it.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击最后一行左侧的运行按钮来运行它。在每种情况下，都会创建一个容器并命名，并将分配的值存储在其中。
- en: You may have noticed that the names of constants and variables shown here start
    with a lowercase letter, and if there is more than one word in the name, every
    subsequent word starts with a capital letter. This is known as **camel case**.
    Doing this is strongly encouraged, as most experienced Swift programmers adhere
    to this convention.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到这里显示的常量和变量的名称以小写字母开头，并且如果名称中有多个单词，则每个后续单词的首字母都大写。这被称为**驼峰式命名法**。强烈建议这样做，因为大多数经验丰富的Swift程序员都遵循这个约定。
- en: Note that a sequence of characters enclosed by double quotation marks, `"Ahmad
    Sahar"`, is used to assign the value for `myName`. These are known as **string
    literals**.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，用双引号括起来的字符序列`"Ahmad Sahar"`用于为`myName`分配值。这些被称为**字符串字面量**。
- en: 'Add the following code after the constant declarations to declare three variables
    and run it:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在常量声明之后添加以下代码来声明三个变量并运行它：
- en: '[PRE3]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Like constants, a container is created and named in each case, and the assigned
    value is stored in it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 与常量一样，在每种情况下都会创建一个容器并命名，并将分配的值存储在其中。
- en: The stored values are displayed in the Results area.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 存储的值会在结果区域显示。
- en: 'The value of a constant can’t be changed once it is set. To test this, add
    the following code after the variable declarations:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 常量的值一旦设置就不能更改。为了测试这一点，在变量声明之后添加以下代码：
- en: '[PRE4]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you type the second line of code, a pop-up menu will appear with suggestions:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入第二行代码时，会出现一个带有建议的弹出菜单：
- en: '![](img/B31371_02_07.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_07.png)'
- en: 'Figure 2.7: Autocomplete pop-up menu'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7：自动完成弹出菜单
- en: Use the up and down arrow keys to choose the `isRaining` constant and press
    the *Tab* key to select it. This feature is called **autocomplete** and helps
    to prevent typing mistakes when you enter code.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上箭头键和下箭头键选择`isRaining`常量，然后按*Tab*键选择它。这个功能被称为**自动完成**，有助于在输入代码时防止输入错误。
- en: 'When you have finished typing, wait a few seconds. On the second line, you’ll
    see an error notification (a red circle with a white dot in the middle) appear:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你完成输入后，等待几秒钟。在第二行，你会看到一个错误通知（一个中间有白色点的红色圆圈）出现：
- en: '![](img/B31371_02_08.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_08.png)'
- en: 'Figure 2.8: Error notification'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：错误通知
- en: This means there is an error in your program, and Xcode thinks it can be fixed.
    The error appears because you are trying to assign a new value to a constant after
    its initial value has been set.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你的程序中存在错误，Xcode认为它可以修复。错误出现是因为你试图在设置初始值后为常量分配新值。
- en: 'Click the red circle to expand the error message. You’ll see the following
    box with a **Fix** button:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击红色圆圈以展开错误消息。你会看到一个带有**修复**按钮的框：
- en: '![](img/B31371_02_09.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_09.png)'
- en: 'Figure 2.9: Expanded error notification'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9：扩展的错误通知
- en: 'Xcode tells you what the problem is (**Cannot assign to value: ‘isRaining’
    is a ‘let’ constant**) and suggests a correction (**Change ‘let’ to ‘var’ to make
    it mutable**). “Mutable” just means that the value can be changed after it has
    been set initially.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode告诉你问题是什么（**无法赋值：'isRaining'是一个'let'常量**）并建议一个修正（**将'let'改为'var'以使其可变**）。"可变"的意思是值可以在最初设置后更改。
- en: 'Click the **Fix** button. You’ll see that the `isRaining` constant declaration
    has been changed to a variable declaration:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**修复**按钮。你会看到`isRaining`常量声明已被更改为变量声明：
- en: '![](img/B31371_02_10.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_10.png)'
- en: 'Figure 2.10: Code with a fix applied'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10：应用了修复的代码
- en: Since a new value can be assigned to a variable after it has been created, the
    error is resolved. Do note, however, that the suggested correction might not be
    the best solution. As you gain more experience with iOS development, you’ll be
    able to determine the best course of action.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可以在创建变量后为其分配新值，错误已解决。但是请注意，建议的修复可能不是最佳解决方案。随着你在iOS开发方面经验的增加，你将能够确定最佳的行动方案。
- en: If you look at the code you typed in, you might wonder how Xcode knows the type
    of data stored in a variable or constant. You’ll learn how that is done in the
    next section.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看你输入的代码，你可能想知道Xcode是如何知道变量或常量中存储的数据类型的。你将在下一节中了解这一点。
- en: Understanding type inference and type safety
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解类型推断和类型安全
- en: 'In the previous section, you declared constants and variables and assigned
    values to them. Swift automatically determines the constant or variable type based
    on the value provided. This is called **type inference**. You can see the type
    of a constant or variable by holding down the *Option* key and clicking its name.
    To see this in action, follow these steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你声明了常量和变量并给它们赋值。Swift会根据提供的值自动确定常量或变量的类型，这被称为**类型推断**。你可以通过按住*选项*键并点击其名称来查看常量或变量的类型。为了看到这一点是如何发生的，请按照以下步骤操作：
- en: 'Add the following code to your playground to declare a string and run it:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的游乐场中，以声明一个字符串并运行它：
- en: '[PRE5]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Hold down the *Option* key and click `cuisine` to reveal the constant type.
    You should see the following:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住*选项*键并点击`cuisine`以显示常量类型。你应该看到以下内容：
- en: '![](img/B31371_02_11.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_11.png)'
- en: 'Figure 2.11: Type declaration displayed'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11：显示的类型声明
- en: As you can see, `cuisine`'s type is `String`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`cuisine`的类型是`String`。
- en: What if you want to set a specific type for a variable or constant? You’ll see
    how to do that in the next section.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为变量或常量设置一个特定的类型？你将在下一节中看到如何做到这一点。
- en: Using type annotation to specify a type
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用类型注解来指定类型
- en: You’ve seen that Xcode tries to automatically determine the data type of a variable
    or constant based on the value provided. However, at times, you may wish to specify
    a type instead of letting Xcode do it for you. To do this, type a colon (`:`)
    after a constant or variable name, followed by the desired type. This is known
    as **type annotation**.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到Xcode会尝试根据提供的值自动确定变量或常量的数据类型。然而，有时你可能希望指定一个类型而不是让Xcode为你做这件事。为此，在常量或变量名称后输入一个冒号（`:`），然后跟随着期望的类型。这被称为**类型注解**。
- en: 'Add the following code to your playground to declare a variable, `restaurantRating`,
    of type `Double`, and click the Run button to run it:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的游乐场中，以声明一个类型为`Double`的变量`restaurantRating`，然后点击运行按钮来运行它：
- en: '[PRE6]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, you specified that `restaurantRating` has a specific type, `Double`. Even
    though you assigned an integer to `restaurantRating`, it will be stored as a floating-point
    number.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你指定了`restaurantRating`具有特定的类型，`Double`。即使你为`restaurantRating`分配了一个整数，它也会被存储为浮点数。
- en: In the next section, you’ll learn how Xcode helps you reduce the number of errors
    in your program by enforcing type safety.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将了解Xcode如何通过强制类型安全来帮助你减少程序中的错误数量。
- en: Using type safety to check values
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用类型安全来检查值
- en: 'Swift is a type-safe language. It checks to see whether you’re assigning values
    of the correct type to variables and flags mismatched types as errors. Let’s see
    how this works by following these steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 是一种类型安全的语言。它会检查你是否将正确类型的值分配给变量，并将不匹配的类型标记为错误。让我们通过以下步骤来了解它是如何工作的：
- en: 'Add the following statement to your playground to assign a string to `restaurantRating`
    and run it:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下语句添加到你的游乐场中，以将字符串分配给 `restaurantRating` 并运行它：
- en: '[PRE7]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You’ll see an error notification (a red circle with an x inside it). The x means
    Xcode can’t suggest a fix for this. Click on the red circle.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到一个错误通知（一个带有 x 的红色圆圈）。x 表示 Xcode 无法为此提供修复方案。点击红色圆圈。
- en: 'Since you are trying to assign a string to a variable of type `Double`, the
    following error message is displayed:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于你试图将一个字符串分配给类型为 `Double` 的变量，因此会显示以下错误消息：
- en: '![](img/B31371_02_12.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_12.png)'
- en: 'Figure 2.12: Expanded error notification with no fix'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12：无修复方案的扩展错误通知
- en: 'Comment out the line by typing `//` before it, as shown here:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在它前面输入 `//` 来注释掉该行，如下所示：
- en: '[PRE8]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The red circle disappears as there are no more errors in your program.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 红色圆圈消失了，因为你的程序中不再有错误。
- en: Selecting lines of code and typing *Command* + */* will comment them out.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 选择代码行并输入 *Command* + */* 来注释掉它们。
- en: Now that you know how to store data in constants and variables, let’s look at
    how to perform operations on them in the next section.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何将数据存储在常量和变量中，让我们看看如何在下一节中对这些数据进行操作。
- en: Exploring operators
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索运算符
- en: You can perform arithmetic, comparison, and logical operations in Swift. **Arithmetic
    operators** are for common mathematical operations. **Comparison** and **logical
    operators** check an expression’s value and return `true` or `false`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Swift 中执行算术、比较和逻辑运算。**算术运算符**用于常见的数学运算。**比较**和**逻辑运算符**检查表达式的值并返回 `true`
    或 `false`。
- en: For more information on operators, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于运算符的信息，请访问 [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators)。
- en: Let’s look at each operator type in more detail. You’ll start with arithmetic
    operators (addition, subtraction, multiplication, and division) in the next section.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地查看每种运算符类型。你将在下一节中从算术运算符（加法、减法、乘法和除法）开始。
- en: Using arithmetic operators
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用算术运算符
- en: 'You can perform mathematical operations on integer and floating-point numbers
    by using the standard arithmetic operators shown here:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这里显示的标准算术运算符对整数和浮点数执行数学运算。
- en: '![](img/B31371_02_13.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_13.png)'
- en: 'Figure 2.13: Arithmetic operators'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13：算术运算符
- en: 'Let’s see how these operators are used. Follow these steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些运算符是如何使用的。按照以下步骤操作：
- en: 'Add the following code to add arithmetic operations to your playground:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的游乐场中，以添加算术运算：
- en: '[PRE9]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run the code. The results displayed in the Results area will be `43`, `-11`,
    `-55`, and `-5`, respectively. Note that 55 divided by 10 returns 5 instead of
    5.5, as both numbers are integers.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。结果区域显示的结果分别是 `43`，`-11`，`-55` 和 `-5`。请注意，55 除以 10 返回 5 而不是 5.5，因为这两个数都是整数。
- en: 'Operators can only work with operands of the same type. Enter the following
    code and run it to see what happens if the operands are of different types:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运算符只能与相同类型的操作数一起工作。输入以下代码并运行，看看如果操作数是不同类型会发生什么：
- en: '[PRE10]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You’ll get an error message (**Binary operator ‘+’ cannot be applied to operands
    of type ‘Int’ and ‘Double’**). This is because `a` and `b` are different types.
    Note that Xcode can’t fix this automatically, so it does not display any fix-it
    suggestions.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到一个错误消息（**二进制运算符 '+' 无法应用于类型 'Int' 和 'Double' 的操作数**）。这是因为 `a` 和 `b` 是不同类型的。请注意，Xcode
    无法自动修复此问题，因此不会显示任何修复建议。
- en: 'To fix the error, modify the program as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要修复错误，请按以下方式修改程序：
- en: '[PRE11]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`Double(a)` gets the value stored in `a` and creates a floating-point number
    from it. Both operands are now of the same type, and now you can add the value
    in `b` to it. The value stored in `c` is `24.0`, and `24` will be displayed in
    the Results area.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`Double(a)` 获取存储在 `a` 中的值，并从中创建一个浮点数。现在两个操作数都是同一类型，现在你可以将 `b` 中的值加到它上面。存储在
    `c` 中的值是 `24.0`，而 `24` 将在结果区域显示。'
- en: Now that you know how to use arithmetic operators, you’ll look at compound assignment
    operators (+=, -=, *=, and /=) in the next section.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何使用算术运算符，您将学习下一节中的复合赋值运算符（+=、-=、*= 和 /=）。
- en: Using compound assignment operators
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用复合赋值运算符
- en: 'You can perform an operation on a value and assign the result to a variable
    using the compound assignment operators shown here:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用复合赋值运算符（如下所示）对一个值执行操作并将结果赋给一个变量：
- en: '![](img/B31371_02_14.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_02_14.png)'
- en: 'Figure 2.14: Compound assignment operators'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14：复合赋值运算符
- en: 'Let’s see how these operators are used. Add the following code to your playground
    and run it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些运算符是如何使用的。将以下代码添加到您的游乐场并运行它：
- en: '[PRE12]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `d += 2` expression is shorthand for `d = d + 2`, so the value in `d` is
    now `1 + 2`, and `3` will be assigned to `d`. In the same way, `d -= 1` is shorthand
    for `d = d - 1`, so the value in `d` is now `3 - 1`, and `2` will be assigned
    to `d`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`d += 2` 表达式是 `d = d + 2` 的简写，因此 `d` 中的值现在是 `1 + 2`，并将 `3` 赋值给 `d`。同样，`d -=
    1` 是 `d = d - 1` 的简写，因此 `d` 中的值现在是 `3 - 1`，并将 `2` 赋值给 `d`。'
- en: Now that you are familiar with compound assignment operators, let’s look at
    comparison operators (==, /=, >, <, >=, and <=) in the next section.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经熟悉了复合赋值运算符，让我们看看下一节中的比较运算符（==、/、>、<、>= 和 <=）。
- en: Using comparison operators
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用比较运算符
- en: 'You can compare one value to another using comparison operators, and the result
    will be true or false. You can use the following comparison operators:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用比较运算符将一个值与另一个值进行比较，结果将是 `true` 或 `false`。您可以使用以下比较运算符：
- en: '![](img/B31371_02_15.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_02_15.png)'
- en: 'Figure 2.15: Comparison operators'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15：比较运算符
- en: 'Let’s see how these operators are used. Add the following code to your playground
    and run it:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些运算符是如何使用的。将以下代码添加到您的游乐场并运行它：
- en: '[PRE13]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s see how this works:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何工作的：
- en: '`1 == 1` returns `true` because 1 is equal to 1.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1 == 1` 返回 `true`，因为 1 等于 1。'
- en: '`2 != 1` returns `true` because 2 is not equal to 1.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2 != 1` 返回 `true`，因为 2 不等于 1。'
- en: '`2 > 1` returns `true` because 2 is greater than 1.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2 > 1` 返回 `true`，因为 2 大于 1。'
- en: '`1 < 2` returns `true` because 1 is less than 2.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1 < 2` 返回 `true`，因为 1 小于 2。'
- en: '`1 >= 1` returns `true` because 1 is greater than or equal to 1.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1 >= 1` 返回 `true`，因为 1 大于或等于 1。'
- en: '`2 <= 1` returns `false` because 2 is not less than or equal to 1.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2 <= 1` 返回 `false`，因为 2 不小于或等于 1。'
- en: The returned Boolean values will be displayed in the Results area.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的布尔值将在结果区域显示。
- en: What happens if you want to check more than one condition? That’s where logical
    operators (**AND**, **OR**, and **NOT**) come in. You’ll learn about those in
    the next section.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想检查多个条件会发生什么？这就是逻辑运算符（**AND**、**OR** 和 **NOT**）发挥作用的地方。您将在下一节中了解它们。
- en: Using logical operators
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用逻辑运算符
- en: Logical operators are handy when you deal with two or more conditions. For example,
    if you are at a convenience store, you can pay for items if you have cash or a
    credit card. OR is the logical operator in this case.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑运算符在处理两个或多个条件时非常有用。例如，如果您在便利店，如果您有现金或信用卡，您就可以为商品付款。在这种情况下，OR 是逻辑运算符。
- en: 'You can use the following logical operators:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下逻辑运算符：
- en: '![](img/B31371_02_16.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_02_16.png)'
- en: 'Figure 2.16: Logical operators'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16：逻辑运算符
- en: 'To see how these operators are used, add the following code to your playground
    and run it:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些运算符的使用方法，将以下代码添加到您的游乐场并运行它：
- en: '[PRE14]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s see how this works:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何工作的：
- en: '`(1 == 1) && (2 == 2)` returns `true` as both operands are `true`, so `true
    AND true` returns `true`.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 == 1) && (2 == 2)` 返回 `true`，因为两个操作数都是 `true`，所以 `true AND true` 返回 `true`。'
- en: '`(1 == 1) && (2 != 2)` returns `false` as one operand is `false`, so `true
    AND false` returns `false`.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 == 1) && (2 != 2)` 返回 `false`，因为一个操作数是 `false`，所以 `true AND false` 返回 `false`。'
- en: '`(1 == 1) || (2 == 2)` returns `true` as both operands are `true`, so `true
    OR true` returns `true`.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 == 1) || (2 == 2)` 返回 `true`，因为两个操作数都是 `true`，所以 `true OR true` 返回 `true`。'
- en: '`(1 == 1) || (2 != 2)` returns `true` as one operand is `true`, so `true OR
    false` returns `true`.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 == 1) || (2 != 2)` 返回 `true`，因为一个操作数是 `true`，所以 `true OR false` 返回 `true`。'
- en: '`(1 != 1) || (2 != 2)` returns `false` as both operands are `false`, so `false
    OR false` returns `false`.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 != 1) || (2 != 2)` 返回 `false`，因为两个操作数都是 `false`，所以 `false OR false` 返回
    `false`。'
- en: '`!(1 == 1)` returns `false` as `1==1` is `true`, so `NOT true` returns `false`.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!(1 == 1)` 返回 `false`，因为 `1==1` 是 `true`，所以 `NOT true` 返回 `false`。'
- en: The returned Boolean values will be displayed in the Results area.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的布尔值将在结果区域显示。
- en: So far, you’ve only worked with numbers. In the next section, you’ll see how
    you can perform operations on words and sentences, which are stored as strings
    using Swift’s `String` type.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你只处理过数字。在下一节中，你将看到如何使用 Swift 的 `String` 类型对单词和句子进行操作，这些单词和句子被存储为字符串。
- en: Performing string operations
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行字符串操作
- en: As you saw earlier, a string is a series of characters. They are represented
    by the `String` type, and they are fully Unicode-compliant.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如你之前所见，字符串是一系列字符。它们由 `String` 类型表示，并且完全符合 Unicode 标准。
- en: For more information on strings, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 更多有关字符串的信息，请访问 [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters)。
- en: 'Let’s learn about some common string operations. Follow these steps:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习一些常见的字符串操作。按照以下步骤操作：
- en: 'You can join two strings together using the `+` operator. Add the following
    code to your playground and run it:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用 `+` 运算符将两个字符串连接起来。将以下代码添加到你的游乐场中并运行它：
- en: '[PRE15]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The values of the string literals `"Good"` and `" Morning"` are joined together,
    and `"Good Morning"` is displayed in the Results area.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串字面量 `"Good"` 和 `"Morning"` 的值被连接起来，并在结果区域显示 `"Good Morning"`。
- en: 'You can combine strings with constants and variables of other types by making
    them strings as well. To change a constant, `rating`, into a string, enter the
    following code and run it:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过将其他类型的常量或变量也转换为字符串来组合字符串。要将常量 `rating` 转换为字符串，输入以下代码并运行它：
- en: '[PRE16]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `rating` constant contains `3.5`, a value of type `Double`. Putting `rating`
    in between the brackets of `String()` gets the value stored in `rating` and creates
    a new string based on it, `"3.5"`, which is combined with the string in the `ratingResult`
    variable, returning the string `"The restaurant rating is 3.5"`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`rating` 常量包含 `3.5`，这是一个 `Double` 类型的值。将 `rating` 放在 `String()` 的括号中，会获取 `rating`
    中存储的值并基于它创建一个新的字符串 `"3.5"`，然后与 `ratingResult` 变量中的字符串组合，返回字符串 `"The restaurant
    rating is 3.5"`。'
- en: 'There is a simpler way of combining strings called **string interpolation**.
    String interpolation is done by typing the name of a constant or variable between
    `"\("` and `")"` in a string. Enter the following code and run it:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一种更简单的方法来组合字符串，称为 **字符串插值**。字符串插值是通过在字符串中用 `"\("` 和 `")"` 包围一个常量或变量的名称来完成的。输入以下代码并运行它：
- en: '[PRE17]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As in the previous example, the value in `rating` is used to create a new string,
    `"3.5"`, returning the string `"The restaurant rating is 3.5"`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，`rating` 中的值被用来创建一个新的字符串 `"3.5"`，返回字符串 `"The restaurant rating is 3.5"`。
- en: So far, you can see the results of your instructions in the Results area. However,
    when you write your app using Xcode, you won’t have access to the Results area
    that you see in your playground. To display the contents of variables and constants
    while your program runs, you’ll learn how to print them to the Debug area in the
    next section.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可以在结果区域看到你的指令结果。然而，当你使用 Xcode 编写应用程序时，你将无法访问你在游乐场中看到的结果区域。为了在程序运行时显示变量和常量的内容，你将在下一节中学习如何将它们打印到调试区域。
- en: Using the print() statement
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `print()` 语句
- en: As you saw in *Chapter 1*, *Exploring Xcode*, an Xcode project does not have
    a Results area like a playground does, but both the project and playground have
    a Debug area. Using the `print()` statement will print anything between the brackets
    to the Debug area.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 *第 1 章*，*探索 Xcode* 中所见，Xcode 项目没有像游乐场那样的结果区域，但项目和游乐场都有调试区域。使用 `print()`
    语句会将括号内的任何内容打印到调试区域。
- en: The `print()` statement is a function. You’ll learn more about functions in
    *Chapter 6*, *Functions and Closures*.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()` 语句是一个函数。你将在 *第 6 章*，*函数和闭包* 中了解更多关于函数的内容。'
- en: 'Add the following code to your playground and click the **Run** button to run
    it:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的游乐场中，然后点击 **运行** 按钮来运行它：
- en: '[PRE18]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You’ll see the value of `ratingResult` appear in the Debug area:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到 `ratingResult` 的值出现在调试区域：
- en: '![](img/B31371_02_17.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_02_17.png)'
- en: 'Figure 2.17: The Debug area showing the result of the print() statement'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17：调试区域显示 `print()` 语句的结果
- en: When you’re just starting out, feel free to use as many `print()` statements
    as you like. It’s a really good way to understand what is happening in your program.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刚开始时，可以随意使用尽可能多的 `print()` 语句。这是一个真正理解程序中发生情况的好方法。
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you learned how to create and use playground files, which allow
    you to explore and experiment with Swift.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何创建和使用游乐场文件，这允许你探索和实验Swift。
- en: You saw how Swift represents different types of data, and how to use constants
    and variables. This enables you to store numbers, Boolean values, and strings
    in your program.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到了Swift如何表示不同类型的数据，以及如何使用常量和变量。这使你能够在程序中存储数字、布尔值和字符串。
- en: You also learned about type inference, type annotation, and type safety, which
    help you to write code concisely and with fewer errors.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了类型推断、类型注解和类型安全，这些可以帮助你编写简洁且错误更少的代码。
- en: You looked at how to perform operations on numbers and strings, which lets you
    perform simple data processing tasks.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你了解了如何对数字和字符串进行操作，这让你能够执行简单的数据处理任务。
- en: You learned how to fix errors, and how to print to the Debug area, which is
    useful when you’re trying to find and fix errors in the programs that you write.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何修复错误，以及如何将输出打印到调试区域，这在尝试查找和修复你编写的程序中的错误时非常有用。
- en: In the next chapter, you’ll look at **conditionals** and **optionals**. Conditionals
    deal with making logical choices in your program, and optionals deal with cases
    where a variable may or may not have a value.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习**条件语句**和**可选参数**。条件语句用于在程序中做出逻辑选择，而可选参数用于处理变量可能或可能没有值的情况。
- en: Join us on Discord!
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家和作者本人一起阅读这本书。提出问题，为其他读者提供解决方案，通过“问我任何问题”的环节与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift)'
