- en: Appendix A. Extending LiveCode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The story so far…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The Long and Winding Road" was the last single to be released by the Beatles
    and it would make a good title for a book describing what it took to get LiveCode
    working on mobile devices! As soon as there were apps on iPhone, RunRev was developing
    a way to publish apps on iPhone from LiveCode. Then, in April 2010, Steve Jobs
    wrote this infamous article on Flash, which you can find at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.apple.com/hotnews/thoughts-on-flash/](http://www.apple.com/hotnews/thoughts-on-flash/)'
  prefs: []
  type: TYPE_NORMAL
- en: Adobe was also developing a way to publish apps on iPhone from Flash Professional,
    but as part of Apple's determination to not allow Flash-based apps to be usable
    on iPhone, the App Store submission rules were changed, forbidding developers
    from using any tool other than Xcode to publish apps.
  prefs: []
  type: TYPE_NORMAL
- en: Some tools continued to be in a gray area because they used Xcode to do the
    final publishing. GameSalad and Unity apps continued to be published and did well
    in the App Store. RunRev tried to convince Apple to allow LiveCode (which was
    still called **Runtime Revolution** at the time) as a publishing tool for iPhone,
    even promising to only publish apps on iPhone and to not pursue publishing on
    Android. Apple stood its ground and declined the offer.
  prefs: []
  type: TYPE_NORMAL
- en: For Adobe, this wasn't the end of the world and it started working on Android
    publishing. However, RunRev had already planned a conference around the idea of
    publishing apps to iOS, but that conference had to be postponed.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the summer of 2010, Apple ran a survey for developers and several of
    the questions mentioned in it gave people like me a chance to beg Apple to allow
    developers to use their preferred development tools so that they don''t have a
    compulsion to use Xcode. It''s hard to be sure whether that''s what made the difference,
    but on September 9, 2010, Apple changed its position on the subject. Here is the
    post that we woke up to that morning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.apple.com/pr/library/2010/09/09Statement-by-Apple-on-App-Store-Review-Guidelines.html](http://www.apple.com/pr/library/2010/09/09Statement-by-Apple-on-App-Store-Review-Guidelines.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Colin Holgate (coauthor of this book) quickly posted a message to the Revolution
    e-mail list titled "*how to totally make Kevin''s day*"; "Kevin" being Kevin Miller,
    the CEO of RunRev. It had the desired effect and you can still read the follow
    up messages at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://runtime-revolution.278305.n4.nabble.com/how-to-totally-make-Kevin-s-day-td2532866.html](http://runtime-revolution.278305.n4.nabble.com/how-to-totally-make-Kevin-s-day-td2532866.html)'
  prefs: []
  type: TYPE_NORMAL
- en: This got RunRev back on track to achieve its goal of developing a "Publish to
    iOS" feature; The iPhone OS was renamed as iOS by that time. The delayed conference
    ended up taking place in San Jose at the end of April 2011\. By that time, RunRev
    had not only made the iOS feature work well, but it had also released the first
    version of the "Publish to Android" feature.
  prefs: []
  type: TYPE_NORMAL
- en: It's quite amusing in a way to think that if you intend to publish an app on
    Android from LiveCode, you can thank Apple for being so stubborn!
  prefs: []
  type: TYPE_NORMAL
- en: Extending LiveCode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The progress on LiveCode continued at quite a fast pace and by April 2012, RunRev
    had implemented all the iOS features for Android as well as added a lot to the
    feature set for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still today, not every feature is covered and there is a third-party market
    of add-ons to LiveCode, which either makes developing in LiveCode easier or provide
    features that are not yet available in the standard version. Here are some of
    the add-ons, most of which can be bought from the LiveCode Marketplace at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.runrev.com/store/](http://www.runrev.com/store/)'
  prefs: []
  type: TYPE_NORMAL
- en: MobGUI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We already used **MobGUI** in earlier chapters. It takes the form of a plugin.
    You can place the MobGUI file in your `plugins` folder. The LiveCode lesson at
    [http://lessons.runrev.com/s/lessons/m/4071/l/21341-how-to-install-custom-user-plugins](http://lessons.runrev.com/s/lessons/m/4071/l/21341-how-to-install-custom-user-plugins)
    describes how to add plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The way MobGUI works is that it lets you place the regular LiveCode controls
    onto your stack's card and then when the app is run, the standard controls are
    swapped for native controls. This has an advantage over just making standard controls
    that look like iOS controls, because the control will look correct too.
  prefs: []
  type: TYPE_NORMAL
- en: 'MobGUI doesn''t do anything that you cannot do with your own scripts, but it
    does make it a lot easier to lay out and use mobile OS native controls. It has
    an option to switch between iOS and Android themes. There is a YouTube channel
    for MobGUI that will show you some of the things that can be done using the tool,
    which you can find at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.youtube.com/user/MobGUI](http://www.youtube.com/user/MobGUI)'
  prefs: []
  type: TYPE_NORMAL
- en: tmControl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **tmControl** is a set of themes made by **Tactile Media** that lets you
    give your LiveCode stacks a more artistic appearance. In addition to sci-fi and
    other themes, there is an iOS theme that you can find in `tmControl`. Here''s
    what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![tmControl](img/image00318.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Not too surprising really! An Android theme is planned as well as additions
    to the iOS theme. You can find the currently available themes at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tmtools.tactilemedia.com/tmcontrol/themes.html](http://tmtools.tactilemedia.com/tmcontrol/themes.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The DropTools palette
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Made by Sons of Thunder Software, the DropTools Palette is a free add-on to
    LiveCode, which acts as a shell to host many types of custom LiveCode controls.
    In addition to being the holder for Sons of Thunder custom controls, it is also
    used by other developers as an easy way to bring their own custom controls to
    market. The DropTools website includes detailed descriptions of how you can develop
    your own DropTools compatible controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'The site also acts as an *aggregator* for custom LiveCode controls and includes
    links to both DropTools and non-DropTools compatible add-ons. The main page of
    DropTools is located at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://droptools.sonsothunder.com/](http://droptools.sonsothunder.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Many of the custom controls do not relate to mobile apps, but there are a few
    that do and that number will no doubt increase over time. DropTools does not work
    with the Community version of LiveCode, though they are trying to reverse the
    situation.
  prefs: []
  type: TYPE_NORMAL
- en: mergExt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mergExt` extension is a suite of external commands for LiveCode. At the
    time of writing this book, there was no LiveCode Android SDK available, so currently,
    these are all only for iOS. Here is the list, as it stands, along with the description
    taken from the LiveCode Marketplace page [http://mergext.com](http://mergext.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '`mergAccessory`: This is an iOS external used to connect to and communicate
    with accessory hardware using the **External Accessory framework**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergAES`: This provides easy-to-use AES 128 and 256 encryption in the CBC
    or ECB mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergAnswerColor`: This is an iOS external that presents a modal color picker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergAV`: This is an iOS external that adds functions and commands related
    to the **AVFoundation** **framework**. This currently includes selecting, recording,
    saving, and editing videos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergAWS`: This is an iOS and MacOS X external that adds functions and commands
    to use Amazon web services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergBanner`: This is an iOS external that adds an **iAd banner** to your app
    at the bottom of the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergBgTask`: This is an iOS external that adds commands to start and stop
    background tasks on iOS. Background tasks allow your app to continue executing
    the code while in the background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergBonjour`: This is an iOS external that implements the bonjour service;
    searching and registration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergCL`: This implements significant location change and region monitoring.
    The external will allow iOS to wake your app up in the background and receive
    a message when the user enters or exits a region or moves a significant distance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergDoc`: This is an iOS external that adds functions and commands related
    to document interaction. This currently includes presenting a modal preview, opening
    in app menu, document options menu, and requesting the document icons in PNG form.
    Printing is also available here via the preview.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergDropbox`: This is an iOS external used to interact with a user''s Dropbox
    account. The external enables you to upload and download files, create folders,
    and manage the files on the user''s Dropbox account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Dropbox Sync SDK handles all the syncing of files for you and allows you
    to interact with your app directory just like a local filesystem.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`mergFTPD`: This adds an FTP daemon to your app allowing FTP client connections.
    Use `mergFTPD` to manage your app''s files from your desktop version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergGK`: This is an iOS external that adds GameKit/Game Center commands and
    functions to LiveCode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergJSON`: This is a JSON encoding/decoding external that supports all the
    platforms LiveCode supports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergLA`: This is an iOS external that adds a command to present a local authentication
    dialog box to the user if they have set up the biometric touch ID authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergMK`s: This is a LiveCode MapKit external that adds a map control, which
    supports and shows the user''s location with a heading, adding annotation pins,
    and polylines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergMP`: This is an iOS external that adds functions and commands related
    to the MediaPlayer framework. This currently includes functions such as querying
    the iPod library and accessing the properties of the found media collections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergNIC`: This is an iOS external used to obtain information about the network
    interfaces active on the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergNotify`: This is an iOS external that adds a command to request a notification
    callback whenever the iOS Notification Center receives the event notification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergPop`: This is an iOS external that adds functions to present an action
    sheet (pop over on an iPad) and contextual menu for user interaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergReader`: This is an iOS external that presents a modal PDF reader using
    the open source `vfrReader` project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergSettings`: This is an iOS external that integrates a LiveCode app with
    the **Settings** app and also includes `InAppSettingsKit` to present a matching
    dialog box from within your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergSocial`: This is an iOS external that adds commands to present Twitter,
    Facebook, and Weibo post modal views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergSocket`: This is an iOS external that provides TCP and UDP (datagram)
    client and server sockets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergXattr`: This is an iOS external that adds commands to set the `do not
    backup` and `protection` attributes of a file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mergZXing`: This is a LiveCode external that uses the `ZXing` library to read
    a wide range of barcode types via the rear camera of a mobile device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: animationEngine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This allows you to create smooth animations and detect collisions between objects.
    It is well suited for both creating games and making presentation apps. You can
    find its information page at the LiveCode Marketplace website [https://livecode.com/store/marketplace/animation-engine-5/](https://livecode.com/store/marketplace/animation-engine-5/).
  prefs: []
  type: TYPE_NORMAL
- en: Although not specifically for mobile use, `animationEngine` has been adjusted
    to comply with iOS App Store requirements and so it should still be of use to
    make iOS apps. It also works for Android apps.
  prefs: []
  type: TYPE_NORMAL
- en: AirLaunch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the *Creating over the air installers for iOS* section in the last
    chapter, AirLaunch is an add-on that makes it easy to create over-the-air installer
    files for iOS. A detailed description for this can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.hyperactivesw.com/airlaunch/index.html](http://www.hyperactivesw.com/airlaunch/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The ControlManager IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ControlManager from The Flexible Learning Company is an IDE palette designed
    to provide easy-view access to your project's structure, properties, and layout.
    It is compatible with the free edition of LiveCode as well as the commercial edition
    for Windows, Mac, and Linux platforms. It keeps up with your actions in the IDE
    and updates itself as you work.
  prefs: []
  type: TYPE_NORMAL
- en: ControlManager has three tab displays designed to support the IDE that present
    structure, properties, and geometry as an easy-to-use overview.
  prefs: []
  type: TYPE_NORMAL
- en: '**Control Browser**: This is a navigable structural hierarchy with shuffle
    options and control-specific icon identification from deeply nested groups up
    to an overview of all available stacks, subStacks, and cards.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Property Editor**: This allows you to preview, compare, and edit any property
    for any control, group, card, subStack, or stack in one easy-to-see list. These
    can be listed alphabetically or by type, including access to basic or multidimensional
    custom properties. You can apply any visual effect from `dropShadows` to `colorOverlays`
    with built-in drag controls for `fillGradient` and `strokeGradient`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geometry Editor**: This contains point-and-click features for 3-way resizing,
    4-way nudging, 9-way alignment, 6-way distribution, and 5-way layering with 7
    image manipulation options. Using LiveCode''s frontscript layer, the palette keeps
    up with you automatically, refreshing as you shuffle between objects, cards, and
    stacks. For more information regarding ControlManager, refer to [http://www.flexiblelearning.com/controlmanager/](http://www.flexiblelearning.com/controlmanager/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own add-ons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The two main types of add-ons that you might be interested in making are custom
    controls and external commands and functions (generally referred to as **externals**).
  prefs: []
  type: TYPE_NORMAL
- en: Custom controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Custom controls are typically made of a group that holds many standard controls
    and a group script that manages the appearance and interactions of these controls.
    A custom control''s functionality is entirely encapsulated within itself and doesn''t
    affect its environment in any way. There is a tutorial on how to make such a custom
    control at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://lessons.runrev.com/m/4071/l/22272-custom-controls](http://lessons.runrev.com/m/4071/l/22272-custom-controls)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you intend to go on to make a nice custom palette, to make it easy to drag-and-drop
    your custom controls onto the card window, consider making it DropTools compatible.
    You would save yourself a significant amount of time solving the issue that DropTools
    already solves, and your custom controls would fit in with the other DropTools
    controls, making the screen less crowded with custom palettes! There is a lot
    of information available on how to develop DropTools compatible controls at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://droptools.sonsothunder.com/developer/](http://droptools.sonsothunder.com/developer/)'
  prefs: []
  type: TYPE_NORMAL
- en: Externals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Down the left-hand side of the previously-mentioned "lessons" page is a long
    list of tutorials, several of which relate to the topic of making externals. These
    particular tutorials are intended to develop externals for desktop applications.
    To develop mobile externals, you should check out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://livecode.com/developers/guides/externals/](http://livecode.com/developers/guides/externals/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, this page only covers iOS externals, but there is reason
    to hope that by the time you read this book, there will be information on how
    to create Android externals too. This page is quite long and even includes a 17-minute
    video! The video can also be viewed on YouTube at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?feature=player_embedded&v=lqduyQkhigg](https://www.youtube.com/watch?feature=player_embedded&v=lqduyQkhigg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating externals is not simple. If you have an idea for a useful external,
    but feel it''s beyond your abilities or interest to create, take a look at the
    `mergExt` site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://mergext.com](http://mergext.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can make suggestions for externals that you would like to see created.
  prefs: []
  type: TYPE_NORMAL
- en: If you do feel you can make externals, why not make them available as products?
    The going rate for these add-ons is in the $30-$100 range—any sales you make will
    offset your development costs.
  prefs: []
  type: TYPE_NORMAL
- en: Open source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**LiveCode Community** is an Open Source application. This means that you can
    look at and edit all of the code used to run it, including the engine code.'
  prefs: []
  type: TYPE_NORMAL
- en: Any apps you create using LiveCode Community must be open source. You can sell
    what you make, but you must make your source code public under the GPL license.
    You can include it with your distributed app or include a link to it that users
    can click on to view your code. If at any time you want to create a professional
    app and protect your code, you can purchase a Commercial license for LiveCode,
    which allows you to build a closed source app.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you know C++, you can get right into the code and add your own features,
    fixes, and enhancements. After a screening process, your new features can get
    incorporated into LiveCode itself, making it better for everybody. The following
    link shows you how you can contribute to the effort:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://livecode.com/community/contribute-to-livecode/](http://livecode.com/community/contribute-to-livecode/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Users wishing to contribute code are required to sign a contributor''s agreement
    that can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://livecode.com/store/account/contributor-agreement-signup](http://livecode.com/store/account/contributor-agreement-signup)'
  prefs: []
  type: TYPE_NORMAL
- en: RunRev uses **GitHub** to host the source files that make up LiveCode. This
    is where all the interaction with the LiveCode source files takes place. If you
    want to make changes to LiveCode, you will need a GitHub account and understand
    how to use it. If you are only interested in obtaining an open source copy of
    the LiveCode files, you can download the zipped bundle from GitHub without having
    to register at [https://github.com/runrev/livecode](https://github.com/runrev/livecode).
  prefs: []
  type: TYPE_NORMAL
- en: Quality control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are not comfortable working with C++ and you've come across a bug, you
    can report it and request features in the traditional way. You can help RunRev
    improve the quality of LiveCode by getting involved in the bug management process.
    In particular, there is ample opportunity for you to help reproduce reported bugs
    and fix bugs in the source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Quality Control Center** is open to everyone. You can report bugs, request
    that bugs are assigned to you, and watch the progress of bugs that are being addressed.
    A helpful search bar is provided at the bottom of your Quality Control Center
    screen. This gives you access to bugs that you raised, that are assigned to you,
    that require investigation, and fixes that are ready for the next release. You
    can create your own Quality Control Center account by going to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://quality.runrev.com/](http://quality.runrev.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have set up an account, you can continue to use this link to access
    the Quality Control Center in the future. You should search the database for similar
    problems before submitting a new bug.
  prefs: []
  type: TYPE_NORMAL
- en: A New World of Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point in time of writing, everything that we've discussed is available.
    However, there is a new world coming in the LiveCode 8.0 development. The following
    text is a look at the future as presented at the RunRev14 conference in September
    2014 and as presented in an early 2015 newsletter status report by Benjamin Beaumont
    of LiveCode. We have been hearing about an **Open Language** and **Widgets**.
    Some of the terminology and details may change from what we present here. Indeed,
    Open Language already has seen the terms of LiveCodish, Modular LiveCode, and
    now LiveCode Builder.
  prefs: []
  type: TYPE_NORMAL
- en: While all the previous add-ons were extensions, the term is taking on an expanded
    meaning. An extension is a black box that extends the engine in some way, exporting
    handlers that perform specific functions. They are insulated from the rest of
    the engine and each other.
  prefs: []
  type: TYPE_NORMAL
- en: The new **Extensions** can be libraries or widgets. Libraries are the replacement
    for externals, add commands, and functions that are like the built-in ones and
    are not in the message path. Parameters can be typed, eliminating the need for
    repetitive type checking of the code. They also support seamless usage of foreign
    code. Libraries are written in exactly the same way as a widget except that any
    "public" handlers in the library are made available as syntax in the LiveCode
    Script.
  prefs: []
  type: TYPE_NORMAL
- en: A **Widget** in LiveCode is a script that has direct access to the 2D drawing
    library and a canvas to draw on. Widgets are like existing built-in controls that
    you select from the tools palette. In particular, widgets have complete control
    over how they respond and which messages the LiveCode script sees.
  prefs: []
  type: TYPE_NORMAL
- en: Widgets are implemented as a collection of event handlers, such as `mouseEnter`,
    `mouseLeave`, `mouseMove`, `mouseDown`, `mouseUp`, `mouseRelease`, `keyPress`,
    `save`, `load`, and finally `paint`. The `paint` event is called to render a widget
    using 2D canvas syntax. All operations use floating point coordinates, so we will
    have subpixel positioning. Widgets will be able to have a tree of child widgets
    internally, so that complex widgets can be built out of simple widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Inside extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extensions are built and distributed as single file archives that contain a
    compiled LiveCode Builder, the original LiveCode Builder source (nonoptional if
    an open source extension!), compiled foreign code (if needed), and file-based
    resources private to the extension.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions will be versioned so that you can put out maintenance updates and
    feature updates. No action will need to be taken by the LiveCode user for maintenance
    updates, but the user will need to choose when to update LiveCode for feature
    updates.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions can require that other extensions be installed and the IDE handles
    this seamlessly. If you load a stack requiring extensions that you don't have,
    the IDE will go and find them, but you might have to pay for some of them!
  prefs: []
  type: TYPE_NORMAL
- en: LiveCode Builder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**LiveCode Builder** is a variant of the existing LiveCode language designed
    to be a ''systems-building'' language. It is a minimal language and all its functionality
    is notionally provided by libraries. Foreign code bindings are built in and they
    are statically compiled as bytecode.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the design goals of LiveCode Builder was the ease of translation to web-based
    technologies (JavaScript and HTML5). As LiveCode 8 matures, the plan is to move
    parts of the existing engine functionality into libraries written in LiveCode
    Builder, allowing most of the engine to be shared between HTML5 and traditional
    platforms. This is a key milestone on the journey to get HTML5 support.
  prefs: []
  type: TYPE_NORMAL
- en: 'How does LiveCode Builder code compare it with the current scripting language?
    For all the basics such as `repeat/if/switch/put`, it''s much the same if not
    identical. The primary difference is that you have to specify the type for variables
    and instantiate them. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The other difference is that there is lots of new syntax to do things that
    previously weren''t possible. For example, drawing a widget on screen accesses
    a canvas API. You also have to add some default setup to tell LiveCode what to
    do with the source file and what libraries to use. Here is a simple example of
    a pink circle widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Additional constructs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A package defines the contents of an extension using a text file with a well-defined
    syntax. This description is passed to the LiveCode Builder compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Modular LiveCode source files (parts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Precompiled foreign code (code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arbitrary file-based resources (file/folder)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A module is a collection of handlers composed of multiple source files specialized
    for specific platforms. Modules can be either widgets or libraries specified by
    the first line of the part...
  prefs: []
  type: TYPE_NORMAL
- en: widget <name> [ based on <name> ]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: library <name> [ for <platform> ]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roadmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'RunRev updates the LiveCode Roadmap about once a year. You can find the most
    recent one at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://livecode.com/community/roadmap/](http://livecode.com/community/roadmap/)'
  prefs: []
  type: TYPE_NORMAL
- en: LiveCode version 8.0 will encompass what we discussed previously and is the
    basis for many more advancements. The **Open Language** will be used to complete
    network, socket, and database libraries with English-like syntax as part of the
    development and testing process of this feature. **Widgets** will be the basis
    for improvement in controls to play videos across all platforms and a new vector
    shape object. A new **IDE** will be developed based on the previous technologies.
  prefs: []
  type: TYPE_NORMAL
- en: In August 2014, RunRev completed a $400k fund raising effort to add **HTML5**
    support to the LiveCode suite. The funding allowed the hiring of additional staff
    to support this effort. HTML5 web delivery will provide the ability to output
    your LiveCode applications into modern web browsers, allowing a faithful representation
    of your application within the browser environment. It uses HTML5 so it does not
    require a browser plugin. You will be able to author true web apps with LiveCode.
  prefs: []
  type: TYPE_NORMAL
- en: Several projects are queued for completion after this. A **Physics Engine**
    will incorporate Box2D into LiveCode along with an animation loop feature. A **Windows
    8** port to support Windows mobile devices will be based on the new platform API
    developed for the Macintosh Cocoa port.
  prefs: []
  type: TYPE_NORMAL
