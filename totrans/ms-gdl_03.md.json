["```java\nprintln \"Project name is \"+project.name\nprintln \"Project name is \"+name // here project object is implicit\nprintln \"Project name is $project.name\"\nprintln \"Project name is $name\"\n```", "```java\n// Section 1: Project object existing properties\nversion = '1.0'\ndescription = 'Sample Java Project'\n// Section 2: Project level custom properties\next {\n  startDate=\"Jan 2015\"\n}\next.endDate = \"Dec 2015\"\nprintln \"This is project configuration part, description is $description\"\n// Section 3: Task\ntask sampleTask1 {\n  // Section 3.1: Task existing properties\n  description = \"This is task level description\"\n  // Section 3.2: Task level custom properties\n  ext {\n    taskDetail=\" This is custom property of task1\"\n\n  }\nprintln \"This is sampleTask1 configuration statements, taskDetail is $taskDetail\"\n\n// Section 3.3: Task actions\ndoFirst {\nprintln \"Project name is $project.name, description is $project.description\"\nprintln \"Task name is $name, description is $description\"\n    println \"Project start date is $startDate\"\n  }\n  doLast {\n      println \"Project endDate is $endDate\"\n  }\n\n}\n// Section 4: Task\ntask sampleTask2 {\n  println \"This is sampleTask2 configuration statements\"\n\ndoFirst {\nprintln \"Task getProjectDetailsTask properties are: \"+sampleTask1.taskDetail\n  }\n}\n```", "```java\n$ gradle sampleTask1 sampleTask2\nThis is project configuration part, description is Sample Java Project\nThis is sampleTask1 configuration statements, taskDetail is  This is custom property of task1\nThis is sampleTask2 configuration statements\n:sampleTask1\nProject name is chapter3, description is Sample Java Project\nTask name is sampleTask1, description is This is task level description\nProject start date is Jan 2015\nProject endDate is Dec 2015\n:sampleTask2\nTask getProjectDetailsTask properties are:  This is custom property of task1\nBUILD SUCCESSFUL\n\nTotal time: 6.892 secs\n\n```", "```java\n$ gradle --dry-run\nThis is project configuration part, description is Sample Java Project\nThis is sampleTask1 configuration statements, taskDetail is  This is custom property of task1\nThis is sampleTask2 configuration statements\n:help SKIPPED\n\nBUILD SUCCESSFUL\n\n```", "```java\nsampleTask2.doFirst { println \"Actions added separately\" }\nsampleTask2.doLast { println \" More Actions added \" }\n```", "```java\ntask sampleTask3 << {\n        println \"Executing task3\"\n}\nsampleTask3.doFirst {println \"Adding doFirst action\" }\n```", "```java\n$ gradle sampleTask3\n...\n:sampleTask3\nAdding doFirst action\nExecuting task3\n\nBUILD SUCCESSFUL\n\n```", "```java\ntask task1(dependsOn: task2)\ntask task1(dependsOn: [task2,task3]) // in case of more than one dependency\ntask1.dependsOn task2, task3  //Another way of declaring dependency\n```", "```java\nclasses {dependsOn = [task1, task2]\n}\n```", "```java\n(1..6).each {\n  task \"sampleTask$it\" << {\n        println \"Executing $name\"\n    }\n  }\n\nsampleTask1.dependsOn sampleTask2\nsampleTask3.dependsOn sampleTask2\n\nsampleTask5.finalizedBy sampleTask6\nsampleTask5.mustRunAfter sampleTask4\n```", "```java\n$ gradle –b build_ordering.gradle sampleTask1\n\n```", "```java\n$ gradle –b build_ordering.gradle sampleTask1 sampleTask3\n\n```", "```java\n$ gradle –b build_ordering.gradle sampleTask5\n\n```", "```java\n$ gradle –b build_ordering.gradle sampleTask5 sampleTask4\n\n```", "```java\nsampleTask1.dependsOn sampleTask2\nsampleTask2.dependsOn sampleTask3\nsampleTask3.mustRunAfter sampleTask1\n```", "```java\n$ gradle –b build_ordering.gradle sampleTask1\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nCircular dependency between the following tasks:\n:sampleTask1\n\\--- :sampleTask2\n     \\--- :sampleTask3\n          \\--- :sampleTask1 (*)\n\n(*) - details omitted (listed previously)\n. . .\n```", "```java\n$ gradle -q –b build_ordering.gradle sT1 sT2\n\n```", "```java\n $ gradle -q -b build_ordering.gradle sT\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nTask 'sT' is ambiguous in root project 'Chapter3'. Candidates are: 'sampleTask1', 'sampleTask2', 'sampleTask3', 'sampleTask4', 'sampleTask5', 'sampleTask6'.\n\n* Try:\nRun gradle tasks to get a list of available tasks. Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\n```", "```java\next {\n  environment='prod'\n// can set this value from property file or command line using -Pname=value option\n}\n\ntask prodTask << {\n  println 'Executing prod tasks '+ environment\n}\nprodTask.onlyIf {project.hasProperty('environment') && project.environment=='prod' }\n\ntask qaTask << {\n  println 'Executing qa tasks '+ environment\n}\nqaTask.onlyIf { project.hasProperty('environment') && project.environment== 'qa '}\n```", "```java\n$ gradle -b build_condition.gradle prodTask qaTask\n:prodTask\nExecuting prod tasks prod\n:qaTask SKIPPED\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle -b build_condition.gradle -Penvironment=qa qaTask prodTask\n:qaTask\nExecuting qatasks qa\n:prodTask SKIPPED\n\nBUILD SUCCESSFUL\n\n```", "```java\ntask sampleTask12 << {\nprintln \" This task is disabled\"\n}\ntask sampleTask13 (dependsOn: sampleTask12) << {\nprintln \"This task depends on sampleTask12\"\n}\nsampleTask12.enabled = false\n```", "```java\n$ gradle -b build_enabled.gradle sT12 sT13\n\n:sampleTask12 SKIPPED\n:sampleTask13\nThis task depends on task12\n\nBUILD SUCCESSFUL\n\n```", "```java\ntask sampleTask12 {\n   //enabled = false    // valid statement\n   doLast {\n      enabled = false   // Invalid statement\n      println 'Task execution' \n   }   \n}\n```", "```java\nenvproperty.txt\n  env=prod\nsysproperty.txt\n  memory=1024\n……\n```", "```java\n<properties>\n  <property>\n    <filedetail>\n      <name>envproperty.txt</name>\n      <key>env</key>\n      <value>prod</value>\n    </filedetail>\n  </property>\n  <property>\n    <filedetail>\n      <name>sysproperty.txt</name>\n      <key>memory</key>\n      <value>1024</value>\n    </filedetail>\n  </property>\n</properties>\n```", "```java\ntask updateExample {\next {\npropXml = file('PropDetails.xml')\n}\nFile envFile = file('envproperty.txt')\nFile sysFile = file('sysproperty.txt')\n\ninputs.file propXml\noutputs.files (envFile, sysFile)\n\ndoLast {\nprintln \"Generating Properties files\"\ndef properties = new XmlParser().parse(propXml)\nproperties.property.each { property ->\ndef fileName = property.filedetail[0].name[0].text()\ndef key = property.filedetail[0].key[0].text()\ndef value = property.filedetail[0].value[0].text()\ndef destFile = new File(\"${fileName}\")\ndestFile.text = \"$key = ${value}\\n\"\n}\n}\n}\n\n$ gradle –b build_optimization.gradle updateExample\n```", "```java\n:updateExample UP-TO-DATE\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle –b build_optimization.gradle updateExample --rerun-tasks\n\n```", "```java\ntasks.addRule(\"Pattern: sync<repoServer>\") { String taskName ->\n  if (taskName.startsWith(\"sync\")) {\n    task(taskName) << {\n      println \"Syncing from repository: \" + (taskName - \n'sync')\n      }\n    }\n}\n\n```", "```java\n$ gradle -b build_rule.gradle tasks\n\n…………….\nRules\n-----\nPattern: clean<TaskName>: Cleans the output files of a task.\nPattern: build<ConfigurationName>: Assembles the artifacts of a configuration.\nPattern: upload<ConfigurationName>: Assembles and uploads the artifacts belonging to a configuration.\nPattern: sync<repoServer>\n\nTo see all tasks and more detail, run with --all.\n\nBUILD SUCCESSFUL\n\nTotal time: 4.021 secs\n\n```", "```java\ntask copyTask(type: Copy) {\n  from \".\"\n  into \"abc\"\n  include('employees.xml')\n}\n```", "```java\ntask copyWithRename(type: Copy) {\n  from \".\"\n  into \"dir1\"\n  include('employees.xml')\n  rename { String fileName ->\n  fileName.replace(\"employees\", \"abc\")\n  }\n}\n```", "```java\ntask zipTask(type: Zip) {\n  File destDir = file(\"dest\")\n  archiveName \"sample.zip\"\n  from \"src\"\n  destinationDir destDir\n}\n```", "```java\napply plugin: 'java'\n```", "```java\nprintln \"Working on custom task in build script\"\n\nclass SampleTask extends DefaultTask {\n  String systemName = \"DefaultMachineName\"\n  String systemGroup = \"DefaultSystemGroup\"\n  @TaskAction\n  def action1() {\n    println \"System Name is \"+systemName+\" and group is \"+systemGroup\n  }\n  @TaskAction\n    def action2() {\n      println 'Adding multiple actions for refactoring'\n    }\n\n}\n\ntask hello(type: SampleTask)\n\nhello {\n  systemName='MyDevelopmentMachine'\n  systemGroup='Development'\n}\nhello.doFirst {println \"Executing first statement \"}\nhello.doLast {println \"Executing last statement \"}\n```", "```java\n$ gradle -q hello\nExecuting first statement\nSystem Name is MyDevelopmentMachine and group is Development\nAdding multiple actions for refactoring\nExecuting last statement\n\nBUILD SUCCESSFUL\n\n```", "```java\ntask hello(type: com.test.SampleTask)\nhello {\n  systemName='MyDevelopmentMachine'\n  systemGroup='Development'\n}\nhello.doFirst {println \"Executing first statement \"}\nhello.doLast {println \"Executing last statement \"}\n```", "```java\napply plugin: 'groovy'\napply plugin: 'eclipse'\nversion=1.0 // to generate jar with version\ndependencies {\ncompile gradleApi() // It creates dependency on the API of current Gradle version\ncompile localGroovy() // it will use the Groovy shipped with Gradle\n// these dependencies comes along with groovy plugin\n}\n```", "```java\n$ gradle clean cleanEclipse eclipse\n\n```", "```java\nbuildscript {\nrepositories {\n  // relative path of sampleTaskProject jar file\n  flatDir {dirs \"../SampleTaskProj/build/libs\"}\n}\ndependencies {\nclasspath group: 'ch3', name: 'SampleTaskProj',version: '1.0'\n}\n}\ntask hello(type: ch3.SampleTask)\n\nhello {\n  systemName='MyDevelopmentMachine'\n  systemGroup='Development'\n}\n\nhello.doFirst {println \"Executing first statement \"}\nhello.doLast {println \"Executing last statement \"}\n```", "```java\n$ gradle hello\n:hello\nExecuting first statement\nAdding multiple actions for refactoring\nSystem Name is MyDevelopmentMachine and group is Development\nExecuting last statement\n\nBUILD SUCCESSFUL\n\n```"]