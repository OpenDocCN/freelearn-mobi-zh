["```swift\nimport PlaygroundSupport\nimport SwiftUI\n```", "```swift\nimport PlaygroundSupportimport SwiftUI struct MyView: View {\n var body: some View {\n VStack {\n Text(\"Swift Cookbook\")\n }\n }\n}\n\n```", "```swift\nPlaygroundPage.current.setLiveView(MyView())\n```", "```swift\nVStack {}\n```", "```swift\nText(\"Swift Cookbook\")\n```", "```swift\nButton(action: {\n    print(\"Set Action Here...\")\n}, label: {\n    Text(\"I'm going to perform an action\")\n})\n```", "```swift\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n```", "```swift\nVStack {\n    Text(\"Swift Cookbook\")\n    Button(action: {\n        print(\"Set Action Here...\")\n    }, label: {\n        Text(\"I'm going to perform an action\")\n    })\n}\n```", "```swift\nVStack {\n    Text(\"Swift Cookbook\")\n    Button(action: {\n        print(\"Set Action Here...\")\n    }, label: {\n        Text(\"I'm going to perform an action\")\n    })\n HStack {\n Text(\"By Keith & Chris\")\n Image(systemName: \"book\")\n }\n}\n```", "```swift\nstruct MyView: View {\n    var body: some View {\n    }\n}\n```", "```swift\nVStack { }\nHStack {\n    Text(\"I'm sitting underneath a HStack\")\n}\n```", "```swift\nGroup {\n    VStack { }\n    HStack {\n        Text(\"I'm sitting underneath a HStack\")\n    }\n}\n```", "```swift\n@State\n```", "```swift\nstruct MyView: View {\n\n    @State var count: Int = 0\n\n    var body: some View {\n\n        Group {\n            VStack {\n                Text(\"Swift Cookbook\")\n                Button(action: {\n                    count += 1\n                }, label: {\n if actionPerformed > 0 {\n Text(\"Performed \\(count) times\")\n } else {\n Text(\"I'm going to perform an action\")\n }\n                })\n                HStack {\n                    Text(\"By Keith & Chris\")\n                    Image(systemName: \"book\")\n                }\n            }\n            HStack {\n                Text(\"I'm sitting underneath a HStack\")\n            }\n        }\n    }\n}\n```", "```swift\nstruct ResultView: View {\n\n    @Binding var count: Int\n\n    var body: some View {\n        Text(\"Performed \\(count) times\")\n    }\n}\n```", "```swift\nstruct MyView: View {\n\n @State var count: Int = 0\n\n    var body: some View {\n\n        Group {\n            VStack {\n                Text(\"Swift Cookbook\")\n\n ResultView(count: $count)\n\n                Button(action: {\n count += 1\n                }, label: {\n                    Text(\"Perform Action\")\n                })\n\n                HStack {\n                    Text(\"By Keith & Chris\")\n                    Image(systemName: \"book\")\n                }\n            }\n            HStack {\n                Text(\"I'm sitting underneath a HStack\")\n            }\n        }\n    }\n}\n```", "```swift\n@EnvironmentObject\n```", "```swift\nclass BookStatus: ObservableObject {\n    @Published var released = true\n    @Published var title = \"\"\n    @Published var authors = [\"\"]\n}\n```", "```swift\n@EnvironmentObject var bookStatus: BookStatus\n```", "```swift\n@AppStorage(\"book.title\") var title: String = \"Book Title\"\n```", "```swift\ntitle = \"Swift Cookbook\"\n```", "```swift\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```", "```swift\nstruct Task: Identifiable {\n    var description: String\n    var category: String\n    var id = UUID()\n}\n```", "```swift\nstruct MockHelper {\n    static func getTasks() -> [Task] {\n        var tasks = [Task]()\n        tasks.append(Task(description: \"Get Eggs\", category: \n          \"Shopping\"))\n        tasks.append(Task(description: \"Get Milk\", category: \n          \"Shopping\"))\n        tasks.append(Task(description: \"Go for a run\", category: \n          \"Health\"))\n        return tasks\n    }\n}\n```", "```swift\nList(MockHelper.getTasks()) { task in\n    Text(task.description)\n}\n```", "```swift\nvar tasks = [Task]()\n\nvar body: some View {\n    List(tasks) { task in\n        Text(task.description)\n    }\n}\n```", "```swift\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView(tasks: MockHelper.getTasks())\n    }\n}\n```", "```swift\nvar description: String = \"\"\nvar category: String = \"\"\n\nvar body: some View {\n VStack {\n Text(description)\n Text(category)\n }\n}\n```", "```swift\nvar body: some View {\n    List(tasks) { task in\n ListRowView(description: task.description,\n category: task.category)\n }\n}\n```", "```swift\nstruct ListRowView_Previews: PreviewProvider {\n    static var previews: some View {\n ListRowView(description: \"Description Field\",\n category: \"Category Field\")\n    }\n}\n```", "```swift\nList {\n    ListRowView(description: \"Description Field\",\n                category: \"Category Field\")\n}\n```", "```swift\nvar body: some View {\n    VStack(alignment: .leading) {\n        Text(description)\n .font(.title)\n .padding(EdgeInsets(top: 0,\n leading: 0,\n bottom: 2,\n trailing: 0))\n .foregroundColor(.blue)\n        Text(category)\n .font(.title3)\n .foregroundColor(.blue)\n    }\n}\n```", "```swift\n.font(.largeTitle) // A font with the large title text style.\n.font(.title) // A font with the title text style.\n.font(.title2) // Create a font for second level hierarchical headings.\n.font(.title3) // Create a font for third level hierarchical headings.\n.font(.headline) // A font with the headline text style.\n.font(.subheadline) // A font with the subheadline text style.\n.font(.footnote) // A font with the footnote text style.\n.font(.caption) // A font with the caption text style.\n.font(.caption2) // Create a font with the alternate caption text \n                   // style.\n```", "```swift\npublic static func system(_ style: Font.TextStyle, design: Font.Design \n  = .default) -> Font\n```", "```swift\nHStack {\n    VStack(alignment: .leading) {\n        Text(description)\n            .font(.title)\n\n            .padding(EdgeInsets(top: 0,\n                                leading: 0,\n                                bottom: 2,\n                                trailing: 0))\n            .foregroundColor(.blue)\n        Text(category)\n            .font(.title3)\n            .foregroundColor(.blue)\n    }\n Spacer()\n Image(systemName: \"book\")\n .foregroundColor(.blue)\n .padding()\n}\n```", "```swift\nstruct CategoryText: ViewModifier {\n    func body(content: Content) -> some View {\n        content\n            .font(.title3)\n            .foregroundColor(.blue)\n    }\n}\n```", "```swift\nstruct CategoryText: ViewModifier {\n    func body(content: Content) -> some View {\n        content\n            .font(.footnote)\n            .foregroundColor(.blue)\n .padding(4)\n .overlay(\n RoundedRectangle(cornerRadius: 8)\n .stroke(Color.blue, lineWidth: 2)\n\n )\n .shadow(color: .grey, radius: 2, x: -1, y: -1)\n    }\n}\n```", "```swift\nText(category)\n    .modifier(CategoryText())\n```", "```swift\nextension View {\n    func styleCategory() -> some View {\n        self.modifier(CategoryText())\n    }\n}\n```", "```swift\nText(category)\n    .styleCategory()\n```", "```swift\nImage(systemName: \"book\")\n .font(.system(size: 32, weight: .regular))\n    .foregroundColor(.blue)\n    .padding()\n```", "```swift\nstruct Helper {\n    static func getCategoryIcon(category: String) -> String {\n\n        switch category.lowercased() {\n        case \"shopping\":\n            return \"bag\"\n        case \"health\":\n            return \"heart\"\n        default:\n            return \"info.circle\"\n        }\n\n    }\n}\n```", "```swift\nImage(systemName: Helper.getCategoryIcon(category: category))\n```", "```swift\nstruct ListRowView_Previews: PreviewProvider {\n    static var previews: some View {\n        List {\n            ListRowView(description: \"Description Field\",\n                        category: \"Category Field\")\n        }\n .previewDevice(PreviewDevice(rawValue: \"iPhone 12 Pro Max\"))\n .previewDisplayName(\"iPhone 12 Pro Max\")\n    }\n}\n```", "```swift\nstruct ListRowView_Previews_MockData2: PreviewProvider {\n    static var previews: some View {\n        List {\n            ListRowView(description: \"Very Long Description Field, Very \n              Long Description Field\", category: \"Very Long Category \n                Field, Very Long Category Field\")\n        }\n        .previewDevice(PreviewDevice(rawValue: \"iPhone 12 Pro\"))\n .previewDisplayName(\"iPhone 12 Pro - Data #2\")\n    }\n}\n```", "```swift\nstruct TextView: UIViewRepresentable {\n\n    @Binding var text: String\n\n    func makeUIView(context: Context) -> UITextView {\n\n        let textView = UITextView()\n        return textView\n    }\n\n}\n```", "```swift\nstruct TextView: UIViewRepresentable {\n\n    // ...\n\n func updateUIView(_ uiView: UITextView, context: Context) {\n uiView.text = text\n }\n\n func makeCoordinator() -> Coordinator {\n Coordinator($text)\n }\n\n    // ...\n\n}\n```", "```swift\nstruct TextView: UIViewRepresentable {\n\n    // ...\n\n class Coordinator: NSObject, UITextViewDelegate {\n var text: Binding<String>\n\n init(_ text: Binding<String>) {\n self.text = text\n }\n\n func textViewDidChange(_ textView: UITextView) {\n self.text.wrappedValue = textView.text\n }\n }\n\n}\n```", "```swift\n@State var textViewString = \"\"\nTextView(text: $textViewString)\n```", "```swift\nclass Task: Identifiable {\n\n    var id = UUID()\n\n    let response: TaskResponse\n\n init(taskResponse: TaskResponse) {\n self.response = taskResponse\n }\n\n var category: String {\n return response.category ?? \"\"\n }\n\n var description: String {\n return response.description ?? \"\"\n }\n\n}\n```", "```swift\nstruct TaskResponse: Codable {\n    let category: String?\n    let description: String?\n}\n```", "```swift\nclass NetworkManager {\n\n    static func loadData(url: URL, completion: @escaping \n      ([TaskResponse]?) -> ()) {\n\n        URLSession.shared.dataTask(with: url) { data, response, error \n          in\n\n            guard let data = data, error == nil else {\n                completion(nil)\n                return\n            }\n\n            if let response = try? JSONDecoder().decode(\n              [TaskResponse].self, from: data) {\n                DispatchQueue.main.async {\n                    completion(response)\n                }\n            }\n        }.resume()\n\n    }\n\n}\n```", "```swift\nclass TaskViewModel: ObservableObject {\n\n    init() {\n        getTasks()\n    }\n    @Published var tasks = [Task]()\n\n    private func getTasks() {\n\n        guard let url = URL(string: \"http://0.0.0.0:8080/tasks\") else {\n            return\n        }\n\n        NetworkManager.loadData(url: url) { taskResponse in\n\n            if let taskResponse = taskResponse {\n                self.tasks = taskResponse.map(Task.init)\n            }\n\n        }\n\n    }\n\n}\n```", "```swift\nstruct ContentView: View {\n\n    @ObservedObject var model = TaskViewModel()\n\n    var body: some View {\n        List(model.tasks) { task in\n            ListRowView(description: task.description,\n                        category: task.category)\n        }\n\n    }\n}\n```", "```swift\nvar task = [Task]()\ntask.append(Task(taskResponse: TaskResponse(category: \"Get Eggs\", \n  description: \"Shopping\")))\ntask.append(Task(taskResponse: TaskResponse(category: \"Get Milk\", \n  description: \"Shopping\")))\ntask.append(Task(taskResponse: TaskResponse(category: \"Go for a run\", \n  description: \"Health\")))\n\nlet taskViewModel = TaskViewModel()\ntaskViewModel.tasks = task\n\nreturn taskViewModel\n```", "```swift\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"description\":\"Remember the Eggs\",\"category\":\"Shopping\"}' http://0.0.0.0:8080/tasks\n\n```", "```swift\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"description\":\"Bread\",\"category\":\"Shopping\"}' http://0.0.0.0:8080/tasks\n```", "```swift\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"description\":\"Ring Mandy\",\"category\":\"Home\"}' http://0.0.0.0:8080/tasks\n```", "```swift\n@ObservedObject var model = TaskViewModel()\n```", "```swift\nclass TaskViewModel: ObservableObject {\n\n    init() {\n getTasks()\n }\n @Published var tasks = [Task]()\n\n    // ...\n\n}\n```", "```swift\nNetworkManager.loadData(url: url) { articles in\n\n    if let articles = articles {\n        self.tasks = articles.map(Task.init)\n    }\n\n}\n```"]