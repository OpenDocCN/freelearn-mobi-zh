- en: Web Services with Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following recipes will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to run the application on Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up dependencies for building RESTful services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a REST controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Application class for Spring boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin has been eating up the Java world. It has already become a hit in Android
    Ecosystem which was dominated by Java and is welcomed with open arms everywhere.
    Kotlin is not limited to Android development and can be used to develop server-side,
    client-side web applications. One of the `use` cases that we will address in this
    chapter is creating web-services using Kotlin. Kotlin is 100% compatible with
    the JVM and so you can use any existing frameworks such as Spring Boot, Vert.x,
    or JSF for writing Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to run the application on Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to install, configure, and run the application
    on Tomcat in IntelliJ IDEA.
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Tomcat**, often referred to as Tomcat Server, is an open source Java
    Servlet Container developed by the Apache Software Foundation (ASF). Tomcat implements
    several Java EE specifications, including Java Servlet, JavaServer Pages (JSP),
    Java EL, and WebSocket, and provides a "pure Java" HTTP web server environment
    in which Java code can run.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: Wikipedia'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s follow the given steps to run the application on Tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to download the Tomcat from [http://tomcat.apache.org/download-80.cgi](http://tomcat.apache.org/download-80.cgi).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The downloaded file will be a compressed file, and you can extract it with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you need to move it from the downloaded folder to the proper location,
    at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You also need to check whether you have JDK set up on your system. You can
    do that by typing in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see The program ''java'' can be found in the following packages:, it
    means you need to install JDK. You can do it with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add the following lines to the end of the `.bashrc` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Simply save and exit `.bashrc`, and then make the changes effective by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Tomcat and Java should now be installed and configured on your server. To activate
    Tomcat, run the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a result similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Open `http://127.0.0.1:8080` to check if it's working.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you'll need IntelliJ IDEA's ultimate edition to be able to use Tomcat in
    IntelliJ; community edition doesn't provide support for Java EE application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to run the application, we need the corresponding WAR(s) for deploying,
    which you can do just by adding the following lines in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to go to Run | Edit configuration and add Tomcat:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/562221b9-414d-417f-902d-ec4116e12eff.png)'
  prefs: []
  type: TYPE_IMG
- en: Now if you move to your localhost server, you can see the application hosted
    there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For instructions on Windows installation of Tomcat, refer to [https://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html](https://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up dependencies for building RESTful services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will lay the foundation for developing the RESTful service.
    We will see how to set up dependencies and run our first SpringBoot web application.
    SpringBoot provides great support for Kotlin, which makes it easy to work with
    Kotlin. So let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using IntelliJ IDEA and Gradle build system. If you don't have that,
    you can get it from [https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s follow the given steps to set up the dependencies for building RESTful
    services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create a new project in IntelliJ IDE. We will be using the Gradle
    build system for maintaining dependency, so create a `Gradle` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bbf0f1fe-e506-4ab6-a92d-ea7ddb335373.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you have created the project, just add the following lines to your `build.gradle`
    file. These lines of code contain spring-boot dependencies that we will need to
    develop the web app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now create an `App.kt` file in the following directory hierarchy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7fcf4fc2-9412-4a69-8a28-938d4ed60ad7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is important to keep the `App.kt` file in a package (we''ve used the `college`
    package). Otherwise, you will get an error that says the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The reason for this error is that if you don't include a package declaration,
    it considers it a "default package," which is discouraged and avoided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to run the `App.kt` class. We will put the following code to
    test if it''s running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the project; if everything goes well, you will see output with the
    following line at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have our application running on our embedded Tomcat server. If you go
    to `http://localhost:8080`, you will see an error as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bd86b250-5fad-4cdc-9d99-b170c8afb2ef.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding error is `404 error` and the reason for that is we haven't told
    our application to do anything when a user is on the `/` path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to create a REST controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learned how to set up dependencies for creating RESTful
    services. Finally, we launched our backend on the `http://localhost:8080` endpoint but
    got `404 error` as our application wasn't configured to handle requests at that
    path (`/`). We will start from that point and learn how to create a REST controller.
    Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using IntelliJ IDE for coding purposes. For setting up of the environment,
    refer to the previous recipe. You can also find the source in the repository at [https://gitlab.com/aanandshekharroy/kotlin-webservices](https://gitlab.com/aanandshekharroy/kotlin-webservices).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will create a REST controller that will fetch us information
    about students in a college. We will be using an in-memory database using a list
    to keep things simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first create a `Student` class having a name and roll number properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create the `StudentDatabase` endpoint, which will act as a database
    for the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that we have annotated the `StudentDatabase` class with `@Component`, which
    means its lifecycle will be controlled by Spring (because we want it to act as
    a database for our application).
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need a `@PostConstruct` annotation, because it''s an in-memory database
    that is destroyed when the application closes. So we would like to have a filled
    database whenever the application launches. So we will create an `init` method,
    which will add a few items into the "database" at startup time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will create a few other methods that will help us deal with our database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`getStudent`: Gets the list of students present in our database:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`addStudent`: This method will add a student to our database:'
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now let's put this database to use. We will be creating a REST controller that
    will handle the request. We will create a `StudentController` and annotate it
    with `@RestController`. Using `@RestController` is simple, and it's the preferred
    method for creating MVC RESTful web services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once created, we need to provide our database using Spring dependency injection,
    for which we will need the `@Autowired` annotation. Here''s how our `StudentController`
    looks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will set our response to the `/` path. We will show the list of students
    in our database. For that, we will simply create a method that lists out students.
    We will need to annotate it with `@RequestMapping` and provide parameters such
    as path and request method (GET, POST, and such):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what our controller looks like now. It is a simple REST controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when you restart the server and go to `http://localhost:8080`, we will
    see the response as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f417be77-a4ee-4c73-ae61-a89f24570f3f.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, Spring is intelligent enough to provide the response in the
    JSON format, which makes it easy to design APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s try to create another endpoint that will fetch a student''s details
    from a roll number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you try the `http://localhost:8080/student/2013001` endpoint, you will
    see the given output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will try to add a student to the database. We will be doing it via
    the `POST` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, our server has been dependent on IDE. We would definitely want to make
    it independent of IDE. Thanks to Gradle, it is very easy to create a runnable
    JAR just with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command is platform independent and uses the Gradle build system
    to build the application. Now, you just need to type the mentioned command to
    run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then see the following output as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This means your server is running successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Application class for Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `SpringApplication` class is used to bootstrap our application. We've used
    it in the previous recipes; we will see how to create the `Application` class
    for Spring Boot in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using IntelliJ IDE for coding purposes. To set up the environment,
    read previous recipes, especially the *Setting up dependencies for building RESTful
    services* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've used Spring Boot before, you must be familiar with using `@Configuration`,
    `@EnableAutoConfiguration`, and `@ComponentScan` in your main class. These were
    used so frequently that Spring Boot provides a convenient `@SpringBootApplication`
    alternative. The Spring Boot looks for the `public static main` method, and we
    will use a top-level function outside the `Application` class.
  prefs: []
  type: TYPE_NORMAL
- en: If you noted, while setting up the dependencies, we used the `kotlin-spring`
    plugin, hence we don't need to make the `Application` class open.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of the Spring Boot application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The Spring Boot application executes the static `run()` method, which takes
    two parameters and starts a autoconfigured Tomcat web server when Spring application
    is started.
  prefs: []
  type: TYPE_NORMAL
- en: 'When everything is set, you can start the application by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes well, you will see the following output in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '>![](img/d852f79e-749c-48ab-9873-4996248437f0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: This is along with the last message—Started AppKt in xxx seconds. This means
    that your application is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to run it as an independent server, you need to create a JAR and then
    you can execute as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to run it, you just need to type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
