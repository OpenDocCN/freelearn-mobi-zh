["```swift\n    // APIClientTests.swift\n    import XCTest\n    @testable import ToDo\n\n    class APIClientTests: XCTestCase {\n\n      var sut: APIClient!\n\n      override func setUpWithError() throws {\n        sut = APIClient()\n      }\n\n      override func tearDownWithError() throws {\n        sut = nil\n      }\n    }\n    ```", "```swift\n    // APIClient.swift\n    protocol GeoCoderProtocol {\n      func geocodeAddressString(\n        _ addressString: String,\n        completionHandler:\n        @escaping CLGeocodeCompletionHandler)\n    }\n    ```", "```swift\n    // APIClient.swift\n    extension CLGeocoder: GeoCoderProtocol {}\n    ```", "```swift\n    // GeoCoderProtocolMock.swift\n    import Foundation\n    @testable import ToDo\n    import CoreLocation\n\n    class GeoCoderProtocolMock: GeoCoderProtocol { \n      var geocodeAddressString: String?\n      var completionHandler: CLGeocodeCompletionHandler?\n\n      func geocodeAddressString(\n        _ addressString: String,\n        completionHandler:\n        @escaping CLGeocodeCompletionHandler) { \n          geocodeAddressString = addressString\n          self.completionHandler = completionHandler\n      }\n    }\n    ```", "```swift\n    // APIClientTests.swift\n    import Intents\n    import Contacts\n    ```", "```swift\n    // APIClientTests.swift\n    func test_coordinate_fetchesCoordinate() {\n      let geoCoderMock = GeoCoderProtocolMock()\n      sut.geoCoder = geoCoderMock\n    }\n    ```", "```swift\n    // APIClient.swift\n    lazy var geoCoder: GeoCoderProtocol\n      = CLGeocoder()\n    ```", "```swift\n    // APIClientTests.swift\n    func test_coordinate_fetchesCoordinate() {\n      let geoCoderMock = GeoCoderProtocolMock()\n      sut.geoCoder = geoCoderMock\n      let location = CLLocation(latitude: 1,\n        longitude: 2)\n      let placemark = CLPlacemark(location: location,\n        name: nil,\n        postalAddress: nil)\n      let expectedAddress = \"dummy address\"\n      var result: Coordinate?\n      sut.coordinate(for: expectedAddress) { coordinate in\n        result = coordinate\n      }\n      geoCoderMock.completionHandler?([placemark], nil)\n      XCTAssertEqual(geoCoderMock.geocodeAddressString,\n        expectedAddress)\n      XCTAssertEqual(result?.latitude,\n        location.coordinate.latitude)\n      XCTAssertEqual(result?.longitude,\n        location.coordinate.longitude)\n    }\n    ```", "```swift\n    // APIClient.swift\n    func coordinate(\n      for address: String,\n      completion: (Coordinate?) -> Void) {\n        geoCoder.geocodeAddressString(\n          address) { placemarks, error in\n          }\n    }\n    ```", "```swift\n    // APIClientTests.swift\n    func x_test_coordinate_fetchesCoordinate() {\n      // …\n    ```", "```swift\n     // APIClientTests.swift\n    func test_coordinate_shouldCallGeoCoderWithAddress() {\n      let geoCoderMock = GeoCoderProtocolMock()\n      sut.geoCoder = geoCoderMock\n      let expectedAddress = \"dummy address\"\n      sut.coordinate(for: expectedAddress) { _ in\n      }\n      XCTAssertEqual(geoCoderMock.geocodeAddressString,\n        expectedAddress)\n    }\n    ```", "```swift\n    // APIClientTests.swift\n    func test_coordinate_fetchesCoordinate() {\n      let geoCoderMock = GeoCoderProtocolMock()\n      sut.geoCoder = geoCoderMock\n      let location = CLLocation(latitude: 1,\n        longitude: 2)\n      let placemark = CLPlacemark(location: location,\n        name: nil,\n        postalAddress: nil)\n      var result: Coordinate?\n      sut.coordinate(for: \"\") { coordinate in\n        result = coordinate\n      }\n      geoCoderMock.completionHandler?([placemark], nil)\n      XCTAssertEqual(result?.latitude,\n        location.coordinate.latitude)\n      XCTAssertEqual(result?.longitude,\n        location.coordinate.longitude)\n    }\n    ```", "```swift\n    // APIClient.swift\n    func coordinate(\n      for address: String,\n      completion: @escaping (Coordinate?) -> Void) {\n        geoCoder.geocodeAddressString(address) { \n          placemarks, error in\n          guard let clCoordinate =\n            placemarks?.first?.location?.coordinate\n          else {\n            completion(nil)\n            return\n          }\n          let coordinate = Coordinate(\n            latitude: clCoordinate.latitude,\n            longitude: clCoordinate.longitude)\n          completion(coordinate)\n        }\n      }\n    ```", "```swift\n    // APIClient.swift\n    protocol APIClientProtocol {\n      func coordinate(\n        for: String,\n        completion: @escaping (Coordinate?) -> Void)\n    }\n    ```", "```swift\n    // APIClient.swift\n    protocol URLSessionProtocol {\n      func data(for request: URLRequest,\n        delegate: URLSessionTaskDelegate?)\n      async throws -> (Data, URLResponse)\n    }\n    ```", "```swift\n    // APIClient.swift\n    extension URLSession: URLSessionProtocol {}\n    ```", "```swift\n    // URLSessionProtoclMock.swift\n    import Foundation\n    @testable import ToDo\n\n    class URLSessionProtocolMock: URLSessionProtocol { \n      var dataForDelegateReturnValue: (Data, URLResponse)?\n      var dataForDelegateRequest: URLRequest?\n\n      func data(for request: URLRequest,\n        delegate: URLSessionTaskDelegate?)\n      async throws -> (Data, URLResponse) {\n\n        dataForDelegateRequest = request\n\n        guard let dataForDelegateReturnValue =\n          dataForDelegateReturnValue else {\n            fatalError()\n            }\n        return dataForDelegateReturnValue\n      }\n    }\n    ```", "```swift\n    // APIClientTests.swift\n    func test_toDoItems_shouldFetcheItems() async throws {\n      let url = try XCTUnwrap\n        (URL(string: \"http://toodoo.app/items\"))\n      let urlSessionMock = URLSessionProtocolMock()\n      let expected = [ToDoItem(title: \"dummy title\")]\n      urlSessionMock.dataForDelegateReturnValue = (\n        try JSONEncoder().encode(expected),\n        HTTPURLResponse(url: url,\n          statusCode: 200,\n          httpVersion: \"HTTP/1.1\",\n          headerFields: nil)!\n      )\n      sut.session = urlSessionMock\n    }\n    ```", "```swift\n    // APIClient.swift\n    lazy var session: URLSessionProtocol\n    = URLSession.shared\n    ```", "```swift\n    // APIClientTests.swift\n    func test_toDoItems_shouldFetcheItems() async throws {\n      let url = try XCTUnwrap\n        (URL(string: \"http://toodoo.app/items\"))\n      let urlSessionMock = URLSessionProtocolMock()\n      let expected = [ToDoItem(title: \"dummy title\")]\n      urlSessionMock.dataForDelegateReturnValue = (\n        try JSONEncoder().encode(expected),\n        HTTPURLResponse(url: url,\n          statusCode: 200,\n          httpVersion: \"HTTP/1.1\",\n          headerFields: nil)!\n      )\n      sut.session = urlSessionMock\n      let items = try await sut.toDoItems()\n    }\n    ```", "```swift\n    // APIClient.swift\n    func toDoItems() async throws -> [ToDoItem] {\n      return []\n    }\n    ```", "```swift\n    // APIClientTests.swift\n    func test_toDoItems_shouldFetcheItems() async throws {\n      let url = try XCTUnwrap\n        (URL(string: \"http://toodoo.app/items\"))\n      let urlSessionMock = URLSessionProtocolMock()\n      let expected = [ToDoItem(title: \"dummy title\")]\n      urlSessionMock.dataForDelegateReturnValue = (\n        try JSONEncoder().encode(expected),\n        HTTPURLResponse(url: url,\n          statusCode: 200,\n          httpVersion: \"HTTP/1.1\",\n          headerFields: nil)!\n      )\n      sut.session = urlSessionMock\n      let items = try await sut.toDoItems()\n      XCTAssertEqual(items, expected)\n    }\n    ```", "```swift\n    // APIClient.swift\n    func toDoItems() async throws -> [ToDoItem] {\n      guard let url =\n        URL(string: \"dummy\")\n      else {\n        return []\n      }\n      let request = URLRequest(url: url)\n      let (data, _) = try await session.data(\n        for: request,\n          delegate: nil)\n      let items = try JSONDecoder()\n        .decode([ToDoItem].self, from: data)\n      return items\n    }\n    ```", "```swift\n    // APIClientTests.swift\n    XCTAssertEqual(urlSessionMock.dataForDelegateRequest,\n      URLRequest(url: url))\n    ```", "```swift\n    // APIClient.swift\n    guard let url =\n      URL(string: \"http://toodoo.app/items\")\n    else {\n      return []\n    }\n    ```", "```swift\n    // URLSessionProtocolMock.swift\n    var dataForDelegateError: Error?\n    ```", "```swift\n    // URLSessionProtocolMock.swift\n    if let error = dataForDelegateError {\n      throw error\n    }\n    ```", "```swift\n    // APIClientTests.swift\n    func test_toDoItems_whenError_shouldPassError() async\n     throws {\n      let urlSessionMock = URLSessionProtocolMock()\n      let expected = NSError(domain: \"\", code: 1234)\n      urlSessionMock.dataForDelegateError = expected\n      sut.session = urlSessionMock\n      do {\n        _ = try await sut.toDoItems()\n        XCTFail()\n      } catch {\n        let nsError = try XCTUnwrap(error as NSError)\n        XCTAssertEqual(nsError, expected)\n      }\n    }\n    ```", "```swift\n    // URLSessionProtocolMock.swift\n    func data(for request: URLRequest,\n      delegate: URLSessionTaskDelegate?)\n    async throws -> (Data, URLResponse) {\n      throw NSError(domain: \"dummy\", code: 0)\n      if let error = dataForDelegateError {\n        throw error\n      }\n      dataForDelegateRequest = request\n      guard let dataForDelegateReturnValue =\n              dataForDelegateReturnValue else {\n                fatalError()\n              }\n      return dataForDelegateReturnValue\n    }\n    ```", "```swift\n    // APIClientTests.swift\n    func\n     test_toDoItems_whenJSONIsWrong_shouldFetcheItems()\n     async throws {\n      let url = try XCTUnwrap(URL(string: \"foo\"))\n      let urlSessionMock = URLSessionProtocolMock()\n      urlSessionMock.dataForDelegateReturnValue = (\n        try JSONEncoder().encode(\"dummy\"),\n        HTTPURLResponse(url: url,\n          statusCode: 200,\n          httpVersion: \"HTTP/1.1\",\n          headerFields: nil)!\n      )\n      sut.session = urlSessionMock\n      do {\n        _ = try await sut.toDoItems()\n        XCTFail()\n      } catch {\n        XCTAssertTrue(error is Swift.DecodingError)\n      }\n    }\n    ```", "```swift\n    // APIClient.swift\n    func toDoItems() async throws -> [ToDoItem] {\n      guard let url =\n        URL(string: \"http://toodoo.app/items\")\n      else {\n        return []\n      }\n      let request = URLRequest(url: url)\n      let (data, _) = try await session.data(\n        for: request,\n          delegate: nil)\n      let items = try? JSONDecoder()\n        .decode([ToDoItem].self, from: data)\n      return items ?? []\n    }\n    ```", "```swift\n    // APIClient.swift\n    func toDoItems() async throws -> [ToDoItem] {\n      guard let url =\n        URL(string: \"http://toodoo.app/items\")\n      else {\n        return []\n      }\n      let request = URLRequest(url: url)\n      let (data, _) = try await session.data(\n        for: request,\n          delegate: nil)\n      let items = try JSONDecoder()\n        .decode([ToDoItem].self, from: data)\n      return items\n    }\n    ```"]