["```swift\n// Constants\nlet freezingTemperatureOfWaterCelsius = 0\nlet speedOfLightKmSec = 300000\n\n// Variables\nvar currentTemperature = 22\nvar currentSpeed = 55\n```", "```swift\n// Constants\nlet freezingTempertureOfWaterCelsius = 0, speedOfLightKmSec = 300000\n\n// Variables\nvar currentTemperture = 22, currentSpeed = 55\n```", "```swift\nint myInt = 1\n```", "```swift\nvar myInt = 1\n```", "```swift\nvar x = 3.14      // Double type\nvar y = \"Hello\"   // String type\nvar z = true      // Boolean type\n```", "```swift\nvar x : Float = 3.14\n```", "```swift\nvar x\n```", "```swift\nvar x: Int\n```", "```swift\nlet speedOfLightKmSec = 300_000\n```", "```swift\nvar a : Int = 3\nvar b : Double = 0.14\nvar c = a + b\n```", "```swift\nvar a : Int = 3\nvar b : Double = 0.14\nvar c = Double(a) + b\n```", "```swift\nvar intVar = 32\nvar floatVar = Float(intVar)\nvar uint16Var = UInt16(intVar)\n```", "```swift\nlet swiftIsCool = true\nlet swiftIsHard = false\n\nvar itIsWarm = false\nvar itIsRaining = true\n```", "```swift\nlet isSwiftCool = true\nlet isItRaining = false\nif (isSwiftCool) {\n    print(\"YEA, I cannot wait to learn it\")\n}\nif (isItRaining) {\n    print(\"Get a rain coat\")\n}\n```", "```swift\nvar x = 2, y = 1\nvar z = x > y\n```", "```swift\nvar stringOne = \"Hello\"\nvar stringTwo = \" World\"\n```", "```swift\nvarstringOne = \"Hello\"\nfor char in stringOne.characters {\n    print(char)\n}\n```", "```swift\nvar stringC = stringA + stringB\nstringA += stringB\n```", "```swift\nvar stringA = \"Jon\"\nvar stringB = \"Hello \\(stringA)\"\n```", "```swift\nvar x = \"Hello\"\nlet y = \"HI\"\nvar z = \" World\"\n\n//This is valid, x is mutable\nx += z\n\n//This is invalid, y is not mutable.\ny += z\n```", "```swift\nvar stringOne = \"hElLo\"\nprint(\"capitalizedString:  \" + stringOne.capitalizedString)\nprint(\"lowercaseString:  \" + stringOne.lowercaseString)\nprint(\"uppercaseString:  \" + stringOne.uppercaseString)\n```", "```swift\ncapitalizedString:  Hello\nlowercaseString:  hello\nuppercaseString:  HELLO\n```", "```swift\nvar stringOne = \"Hello Swift\"\nvar stringTwo = \"\"\nstringOne.isEmpty  //false\nstringTwo.isEmpty  //true\nstringOne == \"hello swift\"  //false\nstringOne == \"Hello Swift\"  //true\nstringOne.hasPrefix(\"Hello\")  //true\nstringOne.hasSuffix(\"Hello\")  //false\n```", "```swift\nvar stringOne = \"one,to,three,four\"\nprint(stringOne.stringByReplacingOccurrencesOfString(\"to\", withString: \"two\"))\n```", "```swift\nvar path = \"/one/two/three/four\"\n//Create start and end indexes\nvar startIndex = path.startIndex.advancedBy(4)\nvar endIndex = path.startIndex.advancedBy(14)\npath.substringWithRange(Range(start:startIndex, end:endIndex))   //returns the String /two/three\n\npath.substringToIndex(startIndex)  //returns the String /one\npath.substringFromIndex(endIndex)  //returns the String /four\npath.characters.last  //returns the last character in the String which is r\npath.characters.first  //returns the first character in the String which is /\n```", "```swift\nvar path = \"/one/two/three/four\"\nvar length = path.characters.count\n```", "```swift\nvar name: String?\nName = \"Jon\"\n\nif name != nil {\n    var newString = \"Hello \" + name!\n}\n```", "```swift\nif let temp = myOptional {\n    print(temp)\n    print(\"Can not use temp outside of the if bracket\")\n} else {\n    print(\"myOptional was nil\")\n}\n```", "```swift\nif let myOptional = myOptional {\n    print(myOptional)\n    print(\"Can not use temp outside of the if bracket\")\n} else {\n    print(\"myOptional was nil\")\n}\n```", "```swift\nvar myOptional: String?\n\nmyOptional = \"Jon\"\nprint(\"Outside: \\(myOptional)\")\n\nif var myOptional = myOptional {\n    myOptional = \"test\"\n    print(\"Inside:  \\(myOptional)\")\n}\n\nprint(\"Outside: \\(myOptional)\")\n```", "```swift\nif let myOptional = myOptional, myOptional2 = myOptional2, myOptional3 = myOptional3 {\n  // only reach this if all three optionals\n  // have non-nil values\n}\n```", "```swift\nvar s = car?.tires?.tireSize\n```", "```swift\nenum Planets {\n    case Mercury\n    case Venus\n    case Earth\n    case Mars\n    case Jupiter\n    case Saturn\n    case Uranus\n    case Neptune\n}\n```", "```swift\nenum Planets {\n    case Mercury, Venus, Earth, Mars, Jupiter\n    case Saturn, Uranus, Neptune\n}\n```", "```swift\nvar planetWeLiveOn = Planets.Earth\nvar furthestPlanet = Planets.Neptune\n```", "```swift\nplanetWeLiveOn = .Mars\n```", "```swift\n// Using the traditional == operator\nif planetWeLiveOn == .Earth {\n    print(\"Earth it is\")\n}\n// Using the switch statement\nswitch planetWeLiveOn {\ncase .Mercury:\n    print(\"We live on Mercury, it is very hot!\")\ncase .Venus:\n    print(\"We live on Venus, it is very hot!\")\ncase .Earth:\n    print(\"We live on Earth, just right\")\ncase .Mars:\n    print(\"We live on Mars, a little cold\")\ndefault:\n    print(\"Where do we live?\")\n}\n```", "```swift\nenum Devices: String {\n    case iPod = \"iPod\"\n    case iPhone = \"iPhone\"\n    case iPad = \"iPad\"\n}\nprint(\"We are using an \" + Devices.iPad.rawValue)\n```", "```swift\nenum Planets: Int  {\n    case Mercury = 1\n    case Venus\n    case Earth\n    case Mars\n    case Jupiter\n    case Saturn\n    case Uranus\n    case Neptune\n}\nprint(\"Earth is planet number \\(Planets.Earth.rawValue)\")\n```", "```swift\nenum Product {\n    case Book(Double, Int, Int)\n    case Puzzle(Double, Int)\n}\nvar masterSwift = Product.Book(49.99, 2015, 310)\nvar worldPuzzle = Product.Puzzle(9.99, 200)\n\nswitchmasterSwift {\ncase .Book(let price, let year, let pages):\n    print(\"Mastering Swift was published in \\(year) for the price of \\(price) and has \\(pages) pages\")\ncase .Puzzle(let price, let pieces):\n    print(\"Master Swift is a puzze with \\(pieces) and sells for \\(price)\")\n}\n\nswitchworldPuzzle {\ncase .Book(let price, let year, let pages):\n    print(\"World Puzzle was published in \\(year) for the price of \\(price) and has \\(pages) pages\")\ncase .Puzzle(let price, let pieces):\n    print(\"World Puzzle is a puzze with \\(pieces) and sells for \\(price)\")\n}\n```", "```swift\n\"Master Swift was published in 2015 for the price of 49.99 and has 310 pages\"\n\"World Puzzle is a puzzle with 200 and sells for 9.99\"\n```", "```swift\nvarA = varB\n```", "```swift\nlet x = 1\nvar y = \"Hello\"\na = b\n```", "```swift\nEquality:  varA == varB\nNot equal:  varA != varB\nGreater than:  varA > varB\nLess than:  varA < varB\nGreater than or equal to:  varA >= varB\nLess than or equal to:  varA <= varB\n```", "```swift\n2 == 1 //false, 2 does not equal 1\n2 != 1 //true, 2 does not equal 1\n2 > 1  //true, 2 is greater than 1\n2 < 1  //false, 2 is not less than 1\n2 >= 1 //true, 2 is greater or equal to 1\n2 <= 1 //false, 2 is not less or equal to 1\n```", "```swift\nAddition:  varA + varB\nSubtraction:  varA – varB\nMultiplication:  varA * varB\nDivision:  varA / varB\n```", "```swift\nvar x = 4 + 2  //x will equal 6\nvar x = 4 – 2  //x will equal 2\nvar x = 4 * 2  //x will equal 8\nvar x = 4 / 2  //x will equal 2\nvar x = \"Hello \" + \"world\"  //x will equal \"Hello World\"\n```", "```swift\nvarA % varB\n```", "```swift\nvar x = 10 % 3  //x will equal 1\nvar x = 10 % 2.6  //x will equal 2.2\n```", "```swift\n++varA - Increments the value of varA and then returns the value\nvarA++ - Returns the values of varA and then increments varA\n--varA – Decrements the value of varA and then returns the value\nvarA-- - Returns the value of varA and then decrements varA\n```", "```swift\nvar x = 5\nvar y = ++x  //Both x and y equals 6\nvar y = x++  //x equals 6 but y equals 5\nvar y = --x  //Both x and y equals 4\nvar y = x--  //x equals 4 but y equals 5\n```", "```swift\nvarA += varB\nvarA -= varB\nvarA *= varB\nvarA /= varB\n```", "```swift\nvar x = 6\nx += 2  //x is equal to 8\nx -= 2  //x is equal to 4\nx *= 2  //x is equal to 12\nx /= 2  //x is equal to 3\n```", "```swift\n(boolValue ? valueA : valueB)\n```", "```swift\nvar x = 2\nvar y = 3\nvar z = (y > x ? \"Y is greater\" : \"X is greater\")  //z equals \"Y is greater\"\n```", "```swift\nvarA = !varB\n```", "```swift\nvar x = true\nvar y = !x  //y equals false\n```", "```swift\nvarA && varB\n```", "```swift\nvar x = true\nvar y = false\nvar z = x && y  //z equals false\n```", "```swift\nvarA || varB\n```", "```swift\nvar x = true\nvar y = false\nvar z = x || y  //z equals true\n```"]