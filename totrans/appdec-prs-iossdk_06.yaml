- en: Chapter 6. Users and Roles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章：用户和角色
- en: Most of the applications these days are handling the user accounts and they
    help users to access their data securely. Parse provides you with the `PFUser`
    class specifically wrapped with all the functionality required to handle the user's
    data. All the applications usually contain some sort of users. With Parse and
    the `PFUser` class, you can easily integrate functionality for authenticating
    and storing data about users within your application. This class helps you to
    add the user account functionality in your application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，大多数应用程序都在处理用户账户，并帮助用户安全地访问他们的数据。Parse 为您提供了一个专门封装了处理用户数据所需所有功能的 `PFUser`
    类。所有应用程序通常都包含某种形式的用户。借助 Parse 和 `PFUser` 类，您可以在应用程序中轻松集成用户认证和数据存储的功能。此类帮助您在应用程序中添加用户账户功能。
- en: '`PFUser` inherits from PFObject, thus provides you with all the features of
    a standard PFObject, such as the flexible schema for data feeding, and the dictionary-based
    key value relationship. `PFUser` has access to all the methods of PFObject, in
    addition to that, `PFUser` has some additional methods which help to manage account
    information precisely.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`PFUser` 类继承自 `PFObject`，因此为您提供了标准 `PFObject` 的所有功能，例如灵活的数据馈送模式，以及基于字典的关键值关系。`PFUser`
    可以访问 `PFObject` 的所有方法，除此之外，`PFUser` 还有一些额外的帮助管理账户信息的方法。'
- en: In this chapter, you will learn about handling users in detail, and along with
    that, you will learn to provide roles to the users to limit the access to the
    data to all users.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将详细了解如何处理用户，以及如何为用户提供角色以限制对数据的访问。
- en: PFUser
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PFUser
- en: 'This class allows you to manage user accounts on Parse. It has several properties
    that differentiate it from PFObject, which are as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此类允许您在 Parse 上管理用户账户。它有几个属性，使其与 `PFObject` 区分开来，如下所示：
- en: '`username`: Username for the user (mandatory)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username`: 用户的用户名（必填）'
- en: '`password`: Password for the user (mandatory while signup)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`: 用户的密码（注册时必填）'
- en: '`email`: E-mail ID of the user (optional)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`: 用户的电子邮件 ID（可选）'
- en: These properties will internally call the `setObject:forKey:` method, so you
    don't need to call this externally. We will explore these fields in detail in
    the upcoming topics.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性将内部调用 `setObject:forKey:` 方法，因此您不需要外部调用此方法。我们将在接下来的主题中详细探讨这些字段。
- en: All the `PFUser` objects will be stored in the `User` class. You can access
    the `User` class in your application's **Data Browser**. This class also allows
    you to add custom fields to users, such as adding the phone numbers and such relevant
    details.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 `PFUser` 对象都将存储在 `User` 类中。您可以在应用程序的 **数据浏览器** 中访问 `User` 类。此类还允许您为用户添加自定义字段，例如添加电话号码等相关细节。
- en: User login
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户登录
- en: In most of the application, the first step is to have an effective login process.
    Parse provides you with a stable Plug and Play login setup. You can use various
    login processes to validate users, such as Facebook, Twitter, or the e-mail address
    of the user. This process is explained in detail in the following topics.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数应用程序中，第一步是拥有一个有效的登录过程。Parse 为您提供了一个稳定的即插即用登录设置。您可以使用各种登录过程来验证用户，例如 Facebook、Twitter
    或用户的电子邮件地址。这个过程将在以下主题中详细解释。
- en: Signing up
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册
- en: 'You can use the following code to illustrate a way to allow the users to sign
    up using an e-mail ID and password:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下代码来展示允许用户使用电子邮件 ID 和密码注册的一种方式：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `signUpInBackgroundWithBlock:` method will asynchronously (recommended)
    create a new user on your Parse application. This method wraps up the basic validations,
    such as e-mail authentication, and uniqueness of username and e-mail ID. Parse
    saves all your passwords on the cloud in hashes. You can save the user's e-mail
    ID as its username as well.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`signUpInBackgroundWithBlock:` 方法会异步（推荐）地在您的 Parse 应用程序中创建一个新用户。此方法封装了基本验证，例如电子邮件验证以及用户名和电子邮件
    ID 的唯一性。Parse 将所有密码以哈希形式保存在云端。您还可以将用户的电子邮件 ID 作为其用户名保存。'
- en: There are various flavors of the `signUp` methods, which are available on Parse.
    You can access all these methods from the list of methods in the API docs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Parse 上有各种 `signUp` 方法的版本。您可以从 API 文档中的方法列表中访问所有这些方法。
- en: Verifying the user
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证用户
- en: Parse also enables you to verify the e-mail ID of the user. After verification
    of an e-mail ID, the `emailVerified` key will be added by the `PFUser` class.
    This field contains false values and it updates to true as soon as the user has
    verified his/her e-mail address through their IDs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Parse还允许您验证用户的电子邮件ID。在验证电子邮件ID后，`PFUser`类将添加`emailVerified`键。该字段包含false值，并且一旦用户通过其ID验证了他们的电子邮件地址，它就会更新为true。
- en: Logging in
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录
- en: 'After signing up, the user will log in to his/her account for accessing the
    application. For allowing the user to log in to the application, you can use the
    `logInWithUsernameInBackground:password:` class method of the `PFUser` class:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册后，用户将登录其账户以访问应用程序。为了允许用户登录应用程序，您可以使用`PFUser`类的`logInWithUsernameInBackground:password:`类方法：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After successfully login, you can access the `PFUser` object, which will hold
    all the user-related data.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 登录成功后，您可以访问`PFUser`对象，它将包含所有用户相关数据。
- en: Saving the user's data
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存用户数据
- en: 'It is cumbersome for the users of the application to log in every time they
    open the application. To avoid such cases, you need to save your user data using
    cache. Saving user''s details will allow users to use the application without
    passing through the login process every time. The `PFUser` class provides an automatic
    caching policy, and the cached object is saved in the `currentUser` object:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于应用程序的用户来说，每次打开应用程序时都进行登录是繁琐的。为了避免这种情况，您需要使用缓存来保存用户数据。保存用户详情将允许用户每次无需通过登录过程即可使用应用程序。`PFUser`类提供自动缓存策略，缓存对象保存在`currentUser`对象中：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can reset the current user by calling the `logOut` method on the `PFUser`
    class:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在`PFUser`类上调用`logOut`方法来重置当前用户。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating an anonymous user
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建匿名用户
- en: You can allow users to use your application without forcing then to log in to
    your application. An anonymous user can be created without a username and password,
    with all the features of `PFUser`. You can convert anonymous users to normal users
    anytime by providing them with a Facebook, Twitter, or e-mail ID login.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以允许用户使用您的应用程序，而无需强迫他们登录您的应用程序。可以创建一个没有用户名和密码的匿名用户，具有所有`PFUser`的功能。您可以通过提供Facebook、Twitter或电子邮件ID登录，随时将匿名用户转换为普通用户。
- en: 'The following code demonstrates a way to create an anonymous user:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了创建匿名用户的方法：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: All the data of an anonymous user will be inaccessible after logout. However,
    if the user registers itself as a normal user, all the data will be persistent
    and can be accessed by the user.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名用户的所有数据在注销后将不可访问。然而，如果用户注册为普通用户，所有数据都将持久化，并且可以被用户访问。
- en: 'Parse provides methods to check whether the user is linked or not. The following
    code will demonstrate a way to check whether the user is anonymous:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Parse提供了检查用户是否已链接的方法。以下代码将演示检查用户是否为匿名的方法：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Resetting passwords
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重置密码
- en: Often users forget their username and password when they start to log in to
    your application. In such cases, you need to provide the user with a way to reset
    their password. Parse provides you with the `requestPasswordResetForEmailInBackground:`
    method to securely reset the user password.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户开始登录您的应用程序时，他们经常会忘记用户名和密码。在这种情况下，您需要为用户提供一种重置密码的方式。Parse为您提供了`requestPasswordResetForEmailInBackground:`方法，以安全地重置用户密码。
- en: 'The following code will illustrate the use of the reset password function:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将说明重置密码功能的使用：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The reset password link will be sent to the provided e-mail ID, and from there
    the user can enter the new password for the application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重置密码链接将被发送到提供的电子邮件ID，用户可以从那里输入应用程序的新密码。
- en: Writing user queries
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写用户查询
- en: 'The following code will demonstrate the way to write query on the `PFUser`
    class:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将演示如何在`PFUser`类上编写查询：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous code will provide you with all the female users in the output.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将为您提供所有输出中的女性用户。
- en: Providing security
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供安全性
- en: While you are saving the data of the user, it's important that all the user
    data should be secure. User data and associated information are significant and
    they should be saved securely. Parse allows you to save your data securely on
    the cloud.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存用户数据时，确保所有用户数据都应该是安全的。用户数据和相关信息非常重要，它们应该安全地保存。Parse允许您在云上安全地保存您的数据。
- en: Updating the user object
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新用户对象
- en: 'The `PFUser` class is already secured. Data saved in `PFUser` can be updated
    only by that user. Moreover, you cannot call any `save` or `delete` methods on
    the `PFUser` class. The only methods that can update the data on the `PFUser`
    class are the `logIn` and `signUp` methods. This ensures that only the user can
    update their data on the cloud:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`PFUser` 类已经得到了保护。在 `PFUser` 中保存的数据只能由该用户更新。此外，您不能在 `PFUser` 类上调用任何 `save`
    或 `delete` 方法。唯一可以更新 `PFUser` 类上数据的 `logIn` 和 `signUp` 方法。这确保了只有用户可以更新他们在云上的数据：'
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To fetch the authentic copy of the user object, use the `currentUser` method,
    you can check the authenticity of the user by using the `isAuthenticated` Boolean
    property.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取用户对象的认证副本，请使用 `currentUser` 方法，您可以通过使用 `isAuthenticated` 布尔属性来检查用户的真实性。
- en: Securing objects
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护对象
- en: You can use the `PFUser`'s security model for other objects as well. You can
    specify the read and write permissions on the objects saved on Parse. You can
    allow specific group users, which can read the object, and other groups of users,
    which can modify the object. For security, each object is provided with the access
    control list, implemented by the `PFACL` class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以将 `PFUser` 的安全模型用于其他对象。您可以在Parse上保存的对象上指定读/写权限。您可以允许特定的用户组读取对象，以及其他可以修改对象的用户组。为了安全起见，每个对象都提供了一个访问控制列表，由
    `PFACL` 类实现。
- en: 'The following code will illustrate a way to set the privacy of the object of
    the current user on Parse:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将展示如何设置当前用户在Parse上的对象隐私：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `ACLWithUser` method helps you to generate the ACL that limit the access
    of the object to the current user only. The ACL is updated after calling the `save`
    method. The protected data will be accessible to users on the devices on which
    they are logged in.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`ACLWithUser` 方法可以帮助您生成仅限制当前用户访问对象的ACL。在调用 `save` 方法后，ACL将被更新。受保护的数据将可供登录在设备上的用户访问。'
- en: 'You can update the permissions of your Parse objects, respective to users.
    The following two methods will help you to update the permissions of your Parse
    objects:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更新您的Parse对象的权限，针对不同的用户。以下两个方法将帮助您更新Parse对象的权限：
- en: To provide read access use `setReadAccess:forUser:`
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要提供读访问权限，请使用 `setReadAccess:forUser:`
- en: To provide write access use `setWriteAccess:forUser:`
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要提供写访问权限，请使用 `setWriteAccess:forUser:`
- en: 'The following code will illustrate a way to set read and write access:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将展示如何设置读/写访问权限：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can also grant read/write permission to all users using the `setPublicReadAccess:`
    and `setPublicWriteAccess:` methods.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用 `setPublicReadAccess:` 和 `setPublicWriteAccess:` 方法将读写权限授予所有用户。
- en: 'To provide a common access control list for all objects of your application,
    you can change the default ACLs:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要为应用程序中的所有对象提供一个通用的访问控制列表，您可以更改默认的ACL：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the previous code, we are updating the default ACL to provide public access
    to all the objects.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在更新默认的ACL，以提供对所有对象的公共访问权限。
- en: Assigning roles
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分配角色
- en: As your application grows, ACL becomes insufficient. You need to be more constrained
    and have a better approach to control the user access. Parse provides you with
    the roles to solve the problem. Roles allow you to create logical groups of users.
    Role is an object that contains users and other roles. Updating the permission
    of any role will update the permission of all the associated users in that role.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的应用程序的增长，访问控制列表（ACL）变得不足。您需要更加约束，并采取更好的方法来控制用户访问。Parse为您提供角色来解决此问题。角色允许您创建用户逻辑组。角色是一个包含用户和其他角色的对象。更新任何角色的权限将更新该角色中所有相关用户的权限。
- en: For example, you can divide your application users into Administrators, Standard
    Users, and Guests roles. Altering the permissions of any role will update the
    permission of all the users belonging to that group. The class that provides functionality
    of the role is `PFRole`. This class inherits from PFObject, so all the methods
    are accessible in the `PFRole` as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以将应用程序用户分为管理员、标准用户和访客角色。更改任何角色的权限将更新属于该组的所有用户的权限。提供角色功能的是 `PFRole` 类。这个类从
    `PFObject` 继承，因此在 `PFRole` 中也可以访问所有方法。
- en: PFRole
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PFRole
- en: 'The `PFRole` class provides you with the following additional properties other
    than the properties in PFObject:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`PFRole` 类除了 `PFObject` 中的属性外，还提供了以下附加属性：'
- en: '`name`: This field will store the name of the role, such as Administrators
    or Standard Users.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 此字段将存储角色的名称，例如管理员或标准用户。'
- en: '`users`: This field will store the `PFUser` object as a relation. The user
    will inherit all the permissions of the role to which it''s associated.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`users`：此字段将存储 `PFUser` 对象作为关系。用户将继承其关联角色的所有权限。'
- en: '`roles`: This field will hold the actual permissions for the `PFRole` object.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roles`：此字段将保存 `PFRole` 对象的实际权限。'
- en: Securing the role object
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护角色对象
- en: The `PFRole` class uses the same ACL security like all the other Parse objects.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`PFRole` 类使用与其他所有 Parse 对象相同的 ACL 安全机制。'
- en: 'The following code will illustrate a way to create a new `PFRole` object:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将展示创建新的 `PFRole` 对象的方法：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous code will create a new `role` object, which now can be associated
    with the `User` object. The user access control will be updated according to the
    `role` object.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将创建一个新的 `role` 对象，现在它可以与 `User` 对象关联。用户访问控制将根据 `role` 对象进行更新。
- en: 'The following code will associate `User` with the `role` object and update
    the user ACL with the new ACL provided by the role:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将关联 `User` 与 `role` 对象，并使用角色提供的新 ACL 更新用户 ACL：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Take great care while assigning ACLs to your roles, as they will directly impact
    the user's accessibility.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在分配 ACLs 到您的角色时要格外小心，因为它们将直接影响用户的可访问性。
- en: Securing other objects
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护其他对象
- en: Now you have learned to provide roles to the user. In the `PFACL` class of the
    user object, you can provide which users and roles should be granted read or write
    access to which object.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何为用户提供角色。在用户对象的 `PFACL` 类中，您可以指定哪些用户和角色应该被授予对哪些对象的读取或写入访问权限。
- en: 'The following code will illustrate the usage of roles in `PFObject`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将展示在 `PFObject` 中使用角色的用法：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Implementing role hierarchy
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现角色层次结构
- en: You can provide one role as the subset of another. This means that one role
    can contain another. You can create a parent-child relationship between roles.
    The result of such a relationship is that any permission granted to the parent
    will be implicitly granted to all its child roles.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将一个角色作为另一个角色的子集提供。这意味着一个角色可以包含另一个角色。您可以在角色之间创建父子关系。这种关系的结果是，授予父角色的任何权限将隐式地授予其所有子角色。
- en: 'For example, you can say that the `Administrator` role contains all the permissions
    that are granted in the `Moderator` role. The following code will explain the
    implementation of the role hierarchy:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以说 `Administrator` 角色包含在 `Moderator` 角色中授予的所有权限。以下代码将解释角色层次结构的实现：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The previous code will add a relationship between the `Administrator` and `Moderator`
    role. Here, the `Administrator` role is a child role of `Moderator`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将在 `Administrator` 和 `Moderator` 角色之间添加一个关系。在这里，`Administrator` 角色是 `Moderator`
    的子角色。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the users and role management of the application
    using Parse.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用 Parse 的应用程序的用户和角色管理。
- en: We started by exploring `PFUser` with its properties and login process.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从探索具有其属性和登录过程的 `PFUser` 开始。
- en: Then, we learned about the security of users and other objects.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了用户和其他对象的安全性。
- en: Finally, we explored `PFRole` to extend the user permissions and security along
    with grouping the users.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了 `PFRole` 以扩展用户权限和安全，同时分组用户。
- en: In the next chapter, we will learn about social media (Facebook, Twitter) integration
    in application using Parse.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在应用中使用 Parse 集成社交媒体（Facebook、Twitter）。
