- en: Chapter 6. Users and Roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the applications these days are handling the user accounts and they
    help users to access their data securely. Parse provides you with the `PFUser`
    class specifically wrapped with all the functionality required to handle the user's
    data. All the applications usually contain some sort of users. With Parse and
    the `PFUser` class, you can easily integrate functionality for authenticating
    and storing data about users within your application. This class helps you to
    add the user account functionality in your application.
  prefs: []
  type: TYPE_NORMAL
- en: '`PFUser` inherits from PFObject, thus provides you with all the features of
    a standard PFObject, such as the flexible schema for data feeding, and the dictionary-based
    key value relationship. `PFUser` has access to all the methods of PFObject, in
    addition to that, `PFUser` has some additional methods which help to manage account
    information precisely.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about handling users in detail, and along with
    that, you will learn to provide roles to the users to limit the access to the
    data to all users.
  prefs: []
  type: TYPE_NORMAL
- en: PFUser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class allows you to manage user accounts on Parse. It has several properties
    that differentiate it from PFObject, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`username`: Username for the user (mandatory)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`: Password for the user (mandatory while signup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email`: E-mail ID of the user (optional)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These properties will internally call the `setObject:forKey:` method, so you
    don't need to call this externally. We will explore these fields in detail in
    the upcoming topics.
  prefs: []
  type: TYPE_NORMAL
- en: All the `PFUser` objects will be stored in the `User` class. You can access
    the `User` class in your application's **Data Browser**. This class also allows
    you to add custom fields to users, such as adding the phone numbers and such relevant
    details.
  prefs: []
  type: TYPE_NORMAL
- en: User login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most of the application, the first step is to have an effective login process.
    Parse provides you with a stable Plug and Play login setup. You can use various
    login processes to validate users, such as Facebook, Twitter, or the e-mail address
    of the user. This process is explained in detail in the following topics.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the following code to illustrate a way to allow the users to sign
    up using an e-mail ID and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `signUpInBackgroundWithBlock:` method will asynchronously (recommended)
    create a new user on your Parse application. This method wraps up the basic validations,
    such as e-mail authentication, and uniqueness of username and e-mail ID. Parse
    saves all your passwords on the cloud in hashes. You can save the user's e-mail
    ID as its username as well.
  prefs: []
  type: TYPE_NORMAL
- en: There are various flavors of the `signUp` methods, which are available on Parse.
    You can access all these methods from the list of methods in the API docs.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parse also enables you to verify the e-mail ID of the user. After verification
    of an e-mail ID, the `emailVerified` key will be added by the `PFUser` class.
    This field contains false values and it updates to true as soon as the user has
    verified his/her e-mail address through their IDs.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After signing up, the user will log in to his/her account for accessing the
    application. For allowing the user to log in to the application, you can use the
    `logInWithUsernameInBackground:password:` class method of the `PFUser` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After successfully login, you can access the `PFUser` object, which will hold
    all the user-related data.
  prefs: []
  type: TYPE_NORMAL
- en: Saving the user's data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is cumbersome for the users of the application to log in every time they
    open the application. To avoid such cases, you need to save your user data using
    cache. Saving user''s details will allow users to use the application without
    passing through the login process every time. The `PFUser` class provides an automatic
    caching policy, and the cached object is saved in the `currentUser` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can reset the current user by calling the `logOut` method on the `PFUser`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating an anonymous user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can allow users to use your application without forcing then to log in to
    your application. An anonymous user can be created without a username and password,
    with all the features of `PFUser`. You can convert anonymous users to normal users
    anytime by providing them with a Facebook, Twitter, or e-mail ID login.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code demonstrates a way to create an anonymous user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: All the data of an anonymous user will be inaccessible after logout. However,
    if the user registers itself as a normal user, all the data will be persistent
    and can be accessed by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parse provides methods to check whether the user is linked or not. The following
    code will demonstrate a way to check whether the user is anonymous:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Resetting passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often users forget their username and password when they start to log in to
    your application. In such cases, you need to provide the user with a way to reset
    their password. Parse provides you with the `requestPasswordResetForEmailInBackground:`
    method to securely reset the user password.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will illustrate the use of the reset password function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The reset password link will be sent to the provided e-mail ID, and from there
    the user can enter the new password for the application.
  prefs: []
  type: TYPE_NORMAL
- en: Writing user queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code will demonstrate the way to write query on the `PFUser`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The previous code will provide you with all the female users in the output.
  prefs: []
  type: TYPE_NORMAL
- en: Providing security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While you are saving the data of the user, it's important that all the user
    data should be secure. User data and associated information are significant and
    they should be saved securely. Parse allows you to save your data securely on
    the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `PFUser` class is already secured. Data saved in `PFUser` can be updated
    only by that user. Moreover, you cannot call any `save` or `delete` methods on
    the `PFUser` class. The only methods that can update the data on the `PFUser`
    class are the `logIn` and `signUp` methods. This ensures that only the user can
    update their data on the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To fetch the authentic copy of the user object, use the `currentUser` method,
    you can check the authenticity of the user by using the `isAuthenticated` Boolean
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Securing objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the `PFUser`'s security model for other objects as well. You can
    specify the read and write permissions on the objects saved on Parse. You can
    allow specific group users, which can read the object, and other groups of users,
    which can modify the object. For security, each object is provided with the access
    control list, implemented by the `PFACL` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will illustrate a way to set the privacy of the object of
    the current user on Parse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `ACLWithUser` method helps you to generate the ACL that limit the access
    of the object to the current user only. The ACL is updated after calling the `save`
    method. The protected data will be accessible to users on the devices on which
    they are logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can update the permissions of your Parse objects, respective to users.
    The following two methods will help you to update the permissions of your Parse
    objects:'
  prefs: []
  type: TYPE_NORMAL
- en: To provide read access use `setReadAccess:forUser:`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To provide write access use `setWriteAccess:forUser:`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code will illustrate a way to set read and write access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can also grant read/write permission to all users using the `setPublicReadAccess:`
    and `setPublicWriteAccess:` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'To provide a common access control list for all objects of your application,
    you can change the default ACLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we are updating the default ACL to provide public access
    to all the objects.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your application grows, ACL becomes insufficient. You need to be more constrained
    and have a better approach to control the user access. Parse provides you with
    the roles to solve the problem. Roles allow you to create logical groups of users.
    Role is an object that contains users and other roles. Updating the permission
    of any role will update the permission of all the associated users in that role.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can divide your application users into Administrators, Standard
    Users, and Guests roles. Altering the permissions of any role will update the
    permission of all the users belonging to that group. The class that provides functionality
    of the role is `PFRole`. This class inherits from PFObject, so all the methods
    are accessible in the `PFRole` as well.
  prefs: []
  type: TYPE_NORMAL
- en: PFRole
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `PFRole` class provides you with the following additional properties other
    than the properties in PFObject:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This field will store the name of the role, such as Administrators
    or Standard Users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`users`: This field will store the `PFUser` object as a relation. The user
    will inherit all the permissions of the role to which it''s associated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`roles`: This field will hold the actual permissions for the `PFRole` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the role object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PFRole` class uses the same ACL security like all the other Parse objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will illustrate a way to create a new `PFRole` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous code will create a new `role` object, which now can be associated
    with the `User` object. The user access control will be updated according to the
    `role` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will associate `User` with the `role` object and update
    the user ACL with the new ACL provided by the role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Take great care while assigning ACLs to your roles, as they will directly impact
    the user's accessibility.
  prefs: []
  type: TYPE_NORMAL
- en: Securing other objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now you have learned to provide roles to the user. In the `PFACL` class of the
    user object, you can provide which users and roles should be granted read or write
    access to which object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will illustrate the usage of roles in `PFObject`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Implementing role hierarchy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can provide one role as the subset of another. This means that one role
    can contain another. You can create a parent-child relationship between roles.
    The result of such a relationship is that any permission granted to the parent
    will be implicitly granted to all its child roles.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can say that the `Administrator` role contains all the permissions
    that are granted in the `Moderator` role. The following code will explain the
    implementation of the role hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The previous code will add a relationship between the `Administrator` and `Moderator`
    role. Here, the `Administrator` role is a child role of `Moderator`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the users and role management of the application
    using Parse.
  prefs: []
  type: TYPE_NORMAL
- en: We started by exploring `PFUser` with its properties and login process.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we learned about the security of users and other objects.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we explored `PFRole` to extend the user permissions and security along
    with grouping the users.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about social media (Facebook, Twitter) integration
    in application using Parse.
  prefs: []
  type: TYPE_NORMAL
