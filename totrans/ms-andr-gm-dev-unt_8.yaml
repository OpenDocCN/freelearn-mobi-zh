- en: Sound, Finishing Touches, and Publishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will add sound and see how to make the same app run on different
    Android device resolutions. We will optimize the APK so that the file size is
    smaller. We will then prepare the app itself for publishing by adding icons. We
    will also prepare the app store itself by adding icons and screenshots and finally
    push the publish button so that the app is published.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter includes the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding sound
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling multiple resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the APK size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for publishing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding sound
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For adding sounds, the files are included in the `Resources` folder for this
    chapter. There are three files in total, of which two are sounds effects and one
    is a music file. The sounds effects are to be used in the game.
  prefs: []
  type: TYPE_NORMAL
- en: The punch sound is to be played when whether the enemy or the player gets hit.
    The block sound is to be played when the player or the enemy blocks the attack.
    The `bgMusic` file is the background music file that is to be played when any
    scene loads. Drag the `Audio` folder into the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open the MainMenu scene. And drag the `bgMusic` file into the scene. Take
    a look at the Inspector pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_001.png)'
  prefs: []
  type: TYPE_IMG
- en: The position of the background music doesn't matter, but if you were using the
    sound for ambience then make sure that you set the location of the sound source.
  prefs: []
  type: TYPE_NORMAL
- en: The Play On Awake option is checked by default, which is what we want. However,
    we also want the music to be looped, so make sure to check the Loop checkbox as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: If you play the scene, you will hear the sound playing automatically. Do the
    same for game and options scenes as well. Let's see how to add the punch and block
    sound effect.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever we click a button, it is good to give an audio feedback to the player
    so that they know that the button was clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, drag and drop the punch audio effect into the scene as well. Make
    sure that none of the options such as Play On Awake are checked on the effect
    as it would start playing when the scene starts and we don''t want that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will be playing the sound via the script. Open the `buttonClicks.cs` file.
    At the top of the class, create a public variable of type `AudioSource` called
    `punchSound`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to GameObject onto which the script is attached and attach the punch effect
    to the punch audio source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can call the audio source to be played wherever you want. Suppose,
    we call the function in the `onButtonClick` class, which loads a new scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But, if you add it you will not hear when the scene changes as before the sound
    even plays, the game scene loads and you won't hear the punch sound effect. So
    we will make some changes to the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a co-routine to wait for a while and then load the scene so that
    the sound effect plays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So, in the `onButtonClick` function, we start a new co-routine and pass in the
    function we want to call. Then we create a function to be called, which needs
    to return an `IEnumerator`.
  prefs: []
  type: TYPE_NORMAL
- en: We then wait for half a second, call the `SceneManager.LoadScene` function,
    and then pass in the level name string to load the level.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done to the other functions as well while pressing the Achievements,
    Facebook, and Twitter buttons. I shall leave that up to you guys as you'll gain
    exercise using it. This also needs to be done for other buttons on other scenes
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see how to add the sound effect during gameplay. In the startScene,
    load both the sound effects into the scene and disable play on awake for both
    files. In the playerScript, add public variables for the punch and block sound
    effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On theDude game object on which the playerScript is attached link the punch
    and block sounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, whenever the player gets hit we have to play the punch sound effect and
    if the player is blocking we play the block sound effect. So, open the playerScript
    and where we check if the enemy is punching we make the following changes to the
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'effects playing as it should. Let''s do the same for the enemy as well, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you play the game you will find the sound effects playing as it should.
    Let''s do the same for the enemy as well, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Handling multiple resolutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Handling multiple resolutions is very easy in Unity. Open the MainMenu Scene.
    In the Hierarchy select the Canvas component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_005.png)'
  prefs: []
  type: TYPE_IMG
- en: The Canvas Scaler component is responsible for scaling the UI canvas depending
    upon the width and height of the screen. Set the UI Scale Mode field to Scale
    With Screen Size. This will scale the UI elements depending upon the width and
    height of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: We also give a reference resolution based on which the UI will be scaled. Here
    it is 800x600\. If it can fit the UI in that resolution, then it will definitely
    be able to fit in the 16:9 resolutions as well.
  prefs: []
  type: TYPE_NORMAL
- en: The next parameter is the Match parameter. Here we set the width to match and
    then the height will be scaled accordingly. This would have to be declined for
    all the canvas in the other scenes. Once you do this the game should be able to
    scale the UI depending upon the screen resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the APK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the individual file size, we make use of the console in Unity. Click
    on the small down arrow on the top-right of the console and select Open Editor
    Log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_006.png)'
  prefs: []
  type: TYPE_IMG
- en: This will open a text file with the log information. Scroll down in the text
    file to where it shows the size of the individual files. As you can see, Unity
    already does a good job of removing assets that are not being used in the current
    game.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also breaks down the assets and shows which of the assets are contributing
    to the size. Here we see that the `menuImage.jpg`, `ground.jpg`, and `wall.jpg`
    images are quite big in size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_007.png)'
  prefs: []
  type: TYPE_IMG
- en: One of the popular tools for reducing the size of a JPEG is **Paint.NET**; it
    is a free application to reduce the file size. You can download the tool from [http://www.getpaint.net/index.html](http://www.getpaint.net/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, for of PNG images, you can use the **PNG Crush** tool to reduce the
    size of the image. It can be downloaded from [https://pmt.sourceforge.io/pngcrush](https://pmt.sourceforge.io/pngcrush).
  prefs: []
  type: TYPE_NORMAL
- en: On the whole, it is recommended to use vector art as much as possible instead
    of raster images as the image quality will be crisp irrespective of the resolution
    and it will also save space for optimization purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the build for publishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing that we still haven't done is to add the icon for the app. Once you
    have the app icon designed we set the icon for different Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'For creating different size app icons from a single image, I use the [http://makeappicon.com/](http://makeappicon.com/)
    website. All you have to do is drop the icon design in there and it will generate
    the icons of different sizes. Either browse to the file on the icon folder or
    drag and drop onto the link on the site and it will generate the icon and then
    it can be e-mailed to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_008.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you receive the files, download and extract them in a new folder called
    `Icons` in the `Project` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open PlayerSettings in Unity. Under PlayerSettings, you can add the company
    logo. Make sure you add the details in the Company Name and Product Name fields.
    Under Resolution and Presentation section, set Default Orientation* field to Landscape
    Left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, under the Icon component, check the Override for Android option and select
    the icon with the correct resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_010.png)'
  prefs: []
  type: TYPE_IMG
- en: Next is the splash screen section. If you are a Unity pro user, then you will
    be able to select the splash screen of your choice. Otherwise, you can leave it
    empty. Next, in Other Settings field make sure you have added the correct package
    name, version, and bundle version code.
  prefs: []
  type: TYPE_NORMAL
- en: For minimum API level, I have selected 4.0 as I want to target as many users
    as possible, but make sure the game works well on an actual device before setting
    the minimum API level. Keep the rest of the settings as they are.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next in Publishing Settings, select your Keystore and type in the password.
    Select the alias for the key and type the password for it in the Keystore password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, open Services and select the ADS link and uncheck theEnable test mode
    option to disable the testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_012.png)'
  prefs: []
  type: TYPE_IMG
- en: Now open Build Settings and build the APK to upload to the store.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the Android Developer Console, select All Applications, and select the
    app that you would like to publish. Upload the new APK to the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have to make sure that all the sections are checked with a green tick
    mark as we publish the game only after this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So select the Store listing link and fill in the Title, Short Description,
    and Full Description fields:'
  prefs: []
  type: TYPE_NORMAL
- en: The Title field takes the name of the game that will be displayed on the app
    store, so make sure the name is unique, catchy, and easy to remember.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Short Description is shown on the store as well. The short description is
    more like a sneak peak into what the game/asp is about. Usually, you will specify
    the USP of the product telling the reader what makes your game appealing and different
    from other products. You will also specify the genre of the game here so that
    if the reader is into that genre then they can read further about it. Once the
    user clicks the link it will reveal the full description.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the Full Description field, you should tell what the game has to offer to
    the reader. This includes features and a short summary of the story and player
    motivation, and so on. I have provided a short example in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/image_08_014.png)'
  prefs: []
  type: TYPE_IMG
- en: Scrolling further down we have to provide icons, screenshots, and feature graphics.
    I really can't emphasize how important the icons and selection of screenshots
    are to the success of your game.
  prefs: []
  type: TYPE_NORMAL
- en: Icons need to be on top of our priority list as it is the first thing the user
    will see once they come across the app. It becomes even more important given the
    fact that there are tons of apps getting released on the app store on a daily
    basis. A lot of thought and effort needs to be put into selecting the right kind
    of icon that can summarize the gist of your game and at the same time is unique
    enough to differentiate itself from the millions of icons on the app store.
  prefs: []
  type: TYPE_NORMAL
- en: Once the user is interested in the icon and clicks on it, the next thing that
    will grab their attention is the screenshots. A minimum of three screenshots need
    to be uploaded. You can upload more than that. Pick and select the images for
    your screenshot that complement what you say in the full description. For each
    bullet point in the feature, provide a screenshot to tell the user what you are
    offering.
  prefs: []
  type: TYPE_NORMAL
- en: If you are targeting tablets, add screenshots specially taken on tablets. Also,
    if you are developing for Android TV and Google Daydream, add screenshots for
    that as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also link a promo video that you have on YouTube. Make sure the video
    is not more than 30 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_015.png)'
  prefs: []
  type: TYPE_IMG
- en: Next fill out the details in the Categorization section. Here you will specify
    if it is an application or a game and what genre. Provide your company website,
    e-mail address, and submit a privacy policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are not submitting a privacy policy, you can uncheck the box under the
    Privacy Policy section to say that you are not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_016.png)'
  prefs: []
  type: TYPE_IMG
- en: Once all the information is filled correctly to your satisfaction, click the
    Save Draft button on the top-right corner of the page. Next, let's move on to
    the content rating section.
  prefs: []
  type: TYPE_NORMAL
- en: Here you will make sure that the content doesn't include offensive material
    and the quality of the product is up to the **International Age Rating Coalition**
    (**IARC**) rating standards. IARC is a body that assigns ratings to a given app
    or mobile games. Click on the Continue button to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: Fill out your e-mail address, so that if an issue is encountered in the game,
    IARC can get in touch with you for clarification. Next, select the app category
    and, in that, select Game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the Game category, you have to mention that your game doesn''t include
    material pertaining to violence, fear, sexuality, gambling, language, controlled
    substances, crude humor, and other miscellaneous things. Specify No option for
    all the items up until Crude Humor, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the MISCELLANEOUS category, we specify No to all items except digital purchase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_018.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we have in-app purchases, we have to specify Yes for that. Once done,
    save it by clicking on the Save Questionnaire option. Next, click Calculate rating
    tab, following screen will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_019.png)'
  prefs: []
  type: TYPE_IMG
- en: You will then get a summary and a rating for the game. The same will also be
    e-mailed to you at the address provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on Apply Rating; you will see that your rating is set. Click on
    PRICING & DISTRIBUTION and you will see the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_020.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, select if you want the app to be free or paid. If you choose for it to
    be paid, then specify the price that you want to sell the app at.
  prefs: []
  type: TYPE_NORMAL
- en: Click on all the countries that you want the game to sell in. Clicking the Available
    option will select all countries from the list. You can deselect the countries
    that you don't want the app to be distributed in. Also, at the bottom select that
    the app contains ads in the CONTAINS ADS field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the CONSENT check list, shown in the following screenshot, if you approve
    the app to be promoted outside the Google Play Store, and that the app complies
    with Android Content Guidelines and US Export laws:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_021.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the Save Draft button on the top-right corner of the screen. We already
    have specified in-app products, services and APIs, so we don't have to do anything
    here. But we have to go to Game Services and publish the achievements. So go to
    Game Services and select the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide the detail in Display Name and Description fields on the main page
    and upload the icon and feature graphics here as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the Save button on the top-left corner of the window. Next, go to the
    ACHIEVEMENTS tab, select each achievement, and add the icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_023.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have added icons for all the achievements, you will have the option
    to publish the game at the top-right corner. Once published, your achievement
    page will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_024.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can publish the app itself. Go to All Applications and select Manage
    releases. It will show that you have an app that is ready for production:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_025.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Resume button. Add the detail in the RELEASE NAME section and
    add a description to show what''s new in this release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_026.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Review button and then click onStart Rollout to Production. You
    will be asked to confirm that the app will now be available on the app store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_027.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Confirm button and now it will show you that the app is now pending
    for publication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_028.png)'
  prefs: []
  type: TYPE_IMG
- en: It takes about an hour for the app to be published and about three to four hours
    to be properly visible on the app store. So, be patient. Once it is released,
    you can distribute the link on social media and tell your friends to download
    and rate it.
  prefs: []
  type: TYPE_NORMAL
- en: There is still one small thing to take care of on Facebook. We have to log in
    to our developer account and enable the PunchyPunch app on Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Facebook developer account and select the app. Now go to App Review
    tab and under the option saying Make Punchypunch Public, flip the switch to make
    it public.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the app is public and your friends can share your game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_029.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have successfully developed an Android app on Unity and
    published it on the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added sound to the game, prepared the app for publishing,
    and made changes to the app store itself. We uploaded the final build and published
    the app itself on to the store.
  prefs: []
  type: TYPE_NORMAL
