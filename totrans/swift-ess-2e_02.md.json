["```swift\n// Playground - noun: a place where people can play\nimport UIKit\nvar str = \"Hello, playground\"\n```", "```swift\nfor i in 1...12 {\n  print(\"I is \\(i)\")\n}\n```", "```swift\nfor i in 1...12 {\n  let j = (i-7) * (i-6)\n  print(\"I is \\(i)\")\n}\n```", "```swift\nfor i in 1...12 {\n  let j = (i-7) * (i-6)\n  let k = i\n  print(\"I is \\(i)\")\n}\n```", "```swift\nimport UIKit // AppKit for OS X\nlet blue = UIColor.blueColor() // NSColor.blueColor() for OS X\n```", "```swift\nlet size = CGRect(x:0,y:0,width:200,height:100)\nlet label = UILabel(frame:size)// NSLabel for OS X\n```", "```swift\nlabel.text = str // from the first line of the code\nlabel.textColor = blue\nlabel.font = UIFont.systemFontOfSize(24) // NSFont for OS X\n```", "```swift\n$ mkdir MyPlayground.playground/Resources\n$ curl http://alblue.bandlem.com/images/AlexHeadshotLeft.png > MyPlayground.playground/Resources/alblue.png\n\n```", "```swift\nlet alblue = UIImage(named:\"alblue\")\n```", "```swift\nimport XCPlayground\nlet page = XCPlaygroundPage.currentPage\nlet alblue = UIImage(named:\"alblue\")\npage.captureValue(alblue, withIdentifier:\"Al Blue\")\n```", "```swift\nfor n in 1...6 {\n  if n % 2 == 0 {\n    page.captureValue(n,withIdentifier:\"even\")\n    page.captureValue(0,withIdentifier:\"odd\")\n  } else {\n    page.captureValue(n,withIdentifier:\"odd\")\n    page.captureValue(0,withIdentifier:\"even\")\n  }\n}\n```", "```swift\ndispatch_async(dispatch_get_main_queue()) {\n  for n in 1...6 {\n    // as before\n  }\n}\n```", "```swift\npage.needsIndefiniteExecution = true\n\n```", "```swift\n$ ls -F\nMyPlayground.playground/\n\n```", "```swift\n$ ls -1 MyPlayground.playground/*\nMyPlayground.playground/Contents.swift\nMyPlayground.playground/Resources\nMyPlayground.playground/contents.xcplayground\nMyPlayground.playground/playground.xcworkspace\nMyPlayground.playground/timeline.xctimeline\n\n```", "```swift\n<playground version='5.0' target-platform='ios' requires-full-environment='true' timelineScrubberEnabled='true' display-mode='raw'>\n  <timeline fileName='timeline.xctimeline'/>\n</playground>\n```", "```swift\n//: Go back to the [first page](Page%20One)\n```", "```swift\n//: Go back to [the previous page](@previous),\n//: or move forward to [the next page](@next).\n```", "```swift`` ```", "```swift``\n*   Headings, using `#`, `##`, or `###` for level 1, 2, or 3 headings, respectively. Alternatively, heading level 1 can use a `===` underneath the title and heading level 2 can use `---` underneath the title\n\n### Tip\n\nExactly a single space is required between the end of the list delimiter (the bullet or the period) and the following text; otherwise it will not be rendered as expected\n\nIn addition to the block-level formatting, it is possible to use in-line formatting elements:\n\n*   Code can be represented with `` `backticks` `` around the words\n*   Text can be emphasized in italics `_like this_` or `*like this*`\n*   Text can be marked as bold using `__this__` or `**this**`\n\nImages and links can also be used in documentation:\n\n*   Images are represented with `![Alternate Text](url \"hover text\")`\n*   Links are represented with `[link text](url)`\n*   Links can also be declared with `[link title]: url \"hover text\"`, and then referred to later with `[link title]`\n\nFor example, here is a markup block consisting of many single-line comments, which will be concatenated into a single documentation block:\n\n```", "```swift\n\nWhen viewed in a rendered markup view, it will look like:\n\n![Text formatting](img/00021.jpeg)\n\n### Symbol documentation\n\nWhen writing documentation for symbols (variables, constants, functions, and so on), additional commands can be used to indicate particular values. These are represented with a `–` dash, followed by a command name, and then a colon. These include the following:\n\n*   `- parameter name: description`: This is the `description` of a `parameter` called `name` in the function or method\n*   `- parameters:`: This is a group of related `parameter` elements\n*   `- returns: description`: This is the `description` of the return result\n*   `- throws: description`: This is the `description` of any errors that may occur\n\nThere are also a number of field commands that can be used with symbols. These are all represented with `– name: description`, and they all have exactly the same effect but with a different text name in the symbol reference. These include the following:\n\n*   `author`: This is the name of the author who wrote this section.\n*   `authors`: This is a series of paragraphs with one author name per paragraph.\n*   `bug`: This is a description of a known bug.\n*   `complexity`: This is a description of the complexity of the function, such as `O(1)` or `O(N)`. Use `\\*` to represent an escaped `*` character or to denote higher orders, for example, `O(N\\*N)`.\n*   `copyright`: This is a copyright statement.\n*   `date`: This is a date reference; please note that the text field is not parsed in any way.\n*   `experiment`: This is a block-denoting experiment.\n*   `important`: This marks something as important.\n*   `invariant`: This describes an invariant of the function.\n*   `note`: This introduces a note.\n*   `precondition`: This describes what must be true for the function that has to be called.\n*   `postcondition`: This describes what must be true after the function returns.\n*   `remark`: This adds general notes to the symbol.\n*   `requires`: This notes what is required, such as module dependencies, or a minimum version of the operating system.\n*   `seealso`: This adds a **See Also** link to the documentation.\n*   `since`: This is documentation indicating when the functionality first arrived.\n*   `todo`: This adds a note to do later.\n*   `version`: This documents the version number of the location.\n*   `warning`: This adds a warning note.\n\nThe following combines a number of these documentation examples into a multi-line documentation block:\n\n```"]