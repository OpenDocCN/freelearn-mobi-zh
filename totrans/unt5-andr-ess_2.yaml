- en: Chapter 2. Accessing Android Functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will discover how to create plugins for Android platform
    by Java and C languages in Unity 5\. You will learn in practice how to write simple
    plugins for the Android platform. Also, the reader will learn how to carry out
    an anti-piracy check, detect screen orientation, handle vibration support, determine
    device generation, and other more useful features. The topics that will be covered
    in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Java and native C plugins for an Android platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android scripting API in Unity 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Android sensors and features within Unity 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Java and native C plugins for an Android platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating a Java or native C plugin for an Android platform inside Unity,
    you should install the Android NDK. Also, if you don't know how to build a shared
    library, then you should find out more about this process. A lot of information
    about Android NDK can be found on the web, for example, the Android official documentation
    can be found at [https://developer.android.com/tools/sdk/ndk/index.html](https://developer.android.com/tools/sdk/ndk/index.html)
    or in many different books by Packt Publishing; for example, see visit [https://www.packtpub.com/application-development/android-ndk-beginner's-guide](https://www.packtpub.com/application-development/android-ndk-beginner's-guide).
    Information about Android NDK is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Some parts of your game or app can be implemented using native-code languages,
    such as **C** or **C++**. The **Android NDK** is a toolset with multiple features
    and possibilities. You will not need to use the Android NDK in every project,
    but in some games or applications, it will be very helpful to reuse some custom
    or third-party code libraries in native languages, such as **C** or **C++**. There
    are much more possible use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before using Android NDK, you should keep in mind that this approach is not
    always necessary and almost always increases the level of complexity of the code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating plugins in C
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s explore a very simple and basic plugin example that is written in C
    programming language as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After building our simple plugin example as a shared library, you should put
    it into the `Assets/Plugins/Android` directory. Now, let''s discover how to use
    our native C plugin in Unity C# script as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you cannot specify library extensions, such as `.lib` or `.so` in
    the name of your plugin. Also, you should wrap the entire native C code by Unity
    C# code, in order to check which platform your application is running on and if
    you can use this native C plugin.
  prefs: []
  type: TYPE_NORMAL
- en: You have an opportunity to use precompiled Android libraries in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how we can empower Unity 5, using the Java programming language
    for our Android games and applications. In order to use this advanced functionality
    in Unity, you must export Java code into a JAR file. Advanced functionality is
    not needed for each project, but this knowledge will still be useful for you often
    enough.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Unity library for Android plugins is located on **Windows** at `C:\Program
    Files\Unity\Editor\Data\PlaybackEngines\androidplayer\development\bin\classes.jar`
    and `C:\Program Files\Unity\Editor\Data\PlaybackEngines\androidplayer\release\bin\classes.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: The Unity library for Android plugins is located on **Mac OS X** at `Unity/Contents/PlaybackEngines/AndroidPlayer/development/bin/classes.jar`
    and `Unity/Contents/PlaybackEngines/AndroidPlayer/release/bin/classes.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating plugins in Java (Eclipse IDE)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at how we can create our custom plugin by using Java
    programming language in Eclipse IDE. You can also choose any other IDE which will
    be comfortable for you. First, you need to create a new project as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you choose **Android Application Project**, you should click on the **Next
    >** button at the bottom of the window. After that, you will see the window as
    shown in the screenshot here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should set the values for **Application Name**, **Project Name**, and **Package
    Name** as you wish or as in the preceding figure for our simple plugin example.
    Also, you can set other settings such as **Minimum Required SDK**, **Target SDK**,
    **Compile With**, and **Theme**. After that, click on the **Next >** button at
    the bottom of the window, and you will see the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use the settings as shown in the preceding figure. After opening this
    window you should click on the **Next >** button at the bottom of this window,
    after which the following window will open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use the default settings shown here. Further, you can click on the
    **Next >** button at the bottom of this window, following which you will see the
    window shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you should set the **Activity name**, **Layout Name**, and **Navigation
    Type** fields as you wish or as seen in the earlier screenshot. Then, you can
    click on the **Finish** button at the bottom-right corner as shown in preceding
    figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s copy the Unity `classes.jar` library into the `libs` folder as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, open the `UnityFlashlightActivity.java` file shown in the preceding screenshot.
    This file was generated automatically by **Android Development Tools** (**ADT**,
    plugin for Eclipse IDE).
  prefs: []
  type: TYPE_NORMAL
- en: Writing Java code in plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the time to change your **UnityFlashlightActivity** code so that you
    can use this Android functionality in Unity scripts. For this, you should inherit
    the `UnityFlashlightActivity` class from **UnityPlayerActivity**, but not from
    the simple activity that is provided by Android SDK. The new code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to create new the `Flashlight.java` class as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing Java code in plugin](img/9191OT_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Firstly, we should declare our package name and the classes we need to import
    as shown in the code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s declare our `Flashlight` class and its variables as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cameraHardware` variable is the object of the `Camera` class that is provided
    by Android SDK, for using different features of the hardware camera. Now, it is
    time to write a constructor function for this class as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the `unityPlayerActivity` variable for accessing the Android context
    and the `PackageManager` class that is provided by Android SDK. We will also use
    the `isActiveFlashlight` variable for turning the device''s flashlight on and
    off. The last variable, `_cameraHardware`, will be used for accessing flashlight
    on a device. Now it is time to write a function that will check whether an Android
    device has the flashlight feature. The function code is shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to describe the function that will turn on a flashlight on
    an Android device if it has this hardware feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Turning on and off a hardware flashlight
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s write a function that will turn off a flashlight on an Android device,
    if it has this hardware feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The simplest method in this class is shown in the following code. Next, we
    should close our `Flashlight` class using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you receive an error with the `unityPlayerActivity.getPackageManager()`
    function, then you will need to change your minimal Android SDK version in the
    `AndroidManifest.xml` file as shown in the line of code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s change our UnityFlashlightActivity a little, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: On Unity side
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here, we will create a new scene for our Android plugin test in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![On Unity side](img/9191OT_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Name this new scene as you wish, following which you should create a new `Assets/Plugins/Android`
    folder. You can put in the `AndroidManifest.xml`, JAR files, and Android resources
    files in this folder.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting and importing a JAR library from Eclipse into Unity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s go back to the Eclipse editor and right click on the mouse button
    on our **Flashlight** project. Click on the **Export…** button as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and importing a JAR library from Eclipse into Unity](img/9191OT_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will see the window as shown in the following screenshot. Select **JAR file**
    and click on the **Next >** button at the bottom of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and importing a JAR library from Eclipse into Unity](img/9191OT_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following window, select the options you wish or just set them up as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and importing a JAR library from Eclipse into Unity](img/9191OT_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Choose the JAR file path that should be targeted as our new `Asset/Plugins/Android`
    folder in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Importing AndroidManifest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step is to create a new `AndroidManifest.xml` file in the `Asset/Plugins/Android`
    folder. The manifest declarations are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using Java plugins in Unity scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here, we will create a very simple `FlashlightActivity.cs` script in Unity
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will implement `Flashlight.cs` as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This class is very simple, and we will not explain it. This class just recalls
    the Android Java methods. In the end, let''s create one more very simple class
    that should be attached on **MainCamera** in our new scene. The filename is `FlashlightTest.cs`,
    and its code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end, we can make a new build for Android devices with just one single
    scene as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Java plugins in Unity scripts](img/9191OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can access many different Android properties ready for use in Unity 5\.
    You should use the `UNITY_ANDROID` defined constant by Unity for conditionally,
    compiling the Android-specific C# code. Further, in this chapter you will learn
    how to use different Android features and the properties inside Unity scripts.
    Most of the Android features in Unity are presented by **Handheld** and **Input**
    classes. Let''s look at the Android features you will explore next:'
  prefs: []
  type: TYPE_NORMAL
- en: Anti-piracy check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vibration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity indicator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screen orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anti-piracy check
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's explore **anti-piracy** checks first. Very often, if not always, you should
    protect your Android game or application from pirates that hack games and applications
    in order to redistribute them for free. With the help of Unity, we can make an
    anti-piracy check that shows if our game or application was changed after it was
    built.
  prefs: []
  type: TYPE_NORMAL
- en: You should check the `Application.genuine` Boolean property, which is provided
    by the Unity library. If this property is `false`, then you can notify the user
    that it is a hacked version, or you can cut some functionality, and you can do
    any other actions or combinations of them. The `Application.genuine` check is
    a very expensive operation, so you it is best not to check this property so often,
    just when it is required.
  prefs: []
  type: TYPE_NORMAL
- en: Vibration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to make an Android device vibrate, you should call the `Handheld.Vibrate()`
    method, which is provided by the Unity library.
  prefs: []
  type: TYPE_NORMAL
- en: Activity Indicator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use **Activity Indicator** for slow operations. There is an Android
    built-in Activity Indicator. Let''s explore a very simple code example which is
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Screen orientation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Also, you can control the Android screen orientation inside Unity scripts. You
    can detect a screen rotation or you can force a screen rotation to a specific
    orientation. In order to get the current device orientation, you should access
    the `Screen.orientation` property. Also, you can set this property to any desired
    screen orientation to force rotation. You can find more about different screen
    orientation properties and constants in the Unity manual.
  prefs: []
  type: TYPE_NORMAL
- en: System information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need more information about your system, you can use static variables
    from the `SystemInfo` class, which is provided by the Unity library. More information
    about these variables can be found in the official Unity documentation located
    at [http://docs.unity3d.com/ScriptReference/SystemInfo.html](http://docs.unity3d.com/ScriptReference/SystemInfo.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can attach the following script in any scene on any object in order to
    obtain information about your Android device. Let''s look more closely at what
    happens inside this code. Firstly, we need to declare our class with its properties
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'After that let''s create our `OnGUI` function, which will show us information
    about any device. The code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end, we should create the `Update` function in order to change the scroll
    `position Y` value, in order to be able to scroll the list of information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Accessing the Android sensors and features within Unity 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's discover a little bit more about some Android sensors and features that
    are shown in the simple code examples later in text.
  prefs: []
  type: TYPE_NORMAL
- en: Acceleration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also access the Android acceleration inside Unity. Let''s upgrade our
    previous example, so we can see one more aspect of our Android device. The new
    piece of code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: After running this test on your Android device, you will see how acceleration
    values change very quickly in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Gyroscope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unity provides **gyroscope** access on Android devices as shown in the new
    piece of code. Before using gyroscope, you just need to enable it as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Compass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unity provides **compass** access on Android devices as shown in the new piece
    of code. Before using the compass, you just need to enable it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see all values received from our previous code examples in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Compass](img/9191OT_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we look at the details of writing plugins in Java and native
    C for Unity. We practiced developing simple plugins for Android platform. Also,
    we explored how to make anti-piracy checks, detect screen orientation, handle
    vibration support, get device name, get device model, and get much more useful
    information. We learned how to access the acceleration, gyroscope**,** and compass
    sensors with their features and properties in practice.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to develop high-end graphics. You will
    explore how to write simple Cg shaders in Unity. You will also learn more about
    awesome tips, tricks, and techniques that are used all over the world in game
    production. You will also acquire information about global illumination and how
    to optimize your shaders.
  prefs: []
  type: TYPE_NORMAL
