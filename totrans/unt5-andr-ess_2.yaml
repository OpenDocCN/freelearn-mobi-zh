- en: Chapter 2. Accessing Android Functionality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 访问 Android 功能
- en: 'In this chapter, you will discover how to create plugins for Android platform
    by Java and C languages in Unity 5\. You will learn in practice how to write simple
    plugins for the Android platform. Also, the reader will learn how to carry out
    an anti-piracy check, detect screen orientation, handle vibration support, determine
    device generation, and other more useful features. The topics that will be covered
    in this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解如何在 Unity 5 中使用 Java 和 C 语言创建 Android 平台的插件。你将实际学习如何编写简单的 Android 平台插件。此外，读者还将学习如何进行反盗版检查、检测屏幕方向、处理振动支持、确定设备型号以及其他更多有用的功能。本章将涵盖以下主题：
- en: Creating Java and native C plugins for an Android platform
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Android 平台创建 Java 和原生 C 插件
- en: Android scripting API in Unity 5
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 5 中的 Android 脚本 API
- en: Accessing Android sensors and features within Unity 5
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Unity 5 中访问 Android 传感器和功能
- en: Creating Java and native C plugins for an Android platform
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Android 平台创建 Java 和原生 C 插件
- en: Before creating a Java or native C plugin for an Android platform inside Unity,
    you should install the Android NDK. Also, if you don't know how to build a shared
    library, then you should find out more about this process. A lot of information
    about Android NDK can be found on the web, for example, the Android official documentation
    can be found at [https://developer.android.com/tools/sdk/ndk/index.html](https://developer.android.com/tools/sdk/ndk/index.html)
    or in many different books by Packt Publishing; for example, see visit [https://www.packtpub.com/application-development/android-ndk-beginner's-guide](https://www.packtpub.com/application-development/android-ndk-beginner's-guide).
    Information about Android NDK is beyond the scope of this book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 中为 Android 平台创建 Java 或原生 C 插件之前，你应该安装 Android NDK。如果你不知道如何构建共享库，那么你应该了解更多关于这个流程的信息。关于
    Android NDK 的信息可以在网上找到，例如，Android 官方文档可以在 [https://developer.android.com/tools/sdk/ndk/index.html](https://developer.android.com/tools/sdk/ndk/index.html)
    找到，或者在 Packt Publishing 的许多不同书籍中找到；例如，可以访问 [https://www.packtpub.com/application-development/android-ndk-beginner's-guide](https://www.packtpub.com/application-development/android-ndk-beginner's-guide)。关于
    Android NDK 的信息超出了本书的范围。
- en: Some parts of your game or app can be implemented using native-code languages,
    such as **C** or **C++**. The **Android NDK** is a toolset with multiple features
    and possibilities. You will not need to use the Android NDK in every project,
    but in some games or applications, it will be very helpful to reuse some custom
    or third-party code libraries in native languages, such as **C** or **C++**. There
    are much more possible use cases.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你的游戏或应用的一些部分可以使用原生代码语言实现，例如 **C** 或 **C++**。**Android NDK** 是一个具有多个功能和可能性的工具集。你不需要在每一个项目中都使用
    Android NDK，但在某些游戏或应用中，重用一些自定义或第三方代码库（例如 **C** 或 **C++**）将非常有帮助。还有更多可能的用例。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before using Android NDK, you should keep in mind that this approach is not
    always necessary and almost always increases the level of complexity of the code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Android NDK 之前，你应该记住这种方法并不总是必要的，而且几乎总是会增加代码的复杂度。
- en: Creating plugins in C
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 C 语言创建插件
- en: 'Let''s explore a very simple and basic plugin example that is written in C
    programming language as shown in the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一个非常简单且基本的插件示例，该示例是用 C 编程语言编写的，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After building our simple plugin example as a shared library, you should put
    it into the `Assets/Plugins/Android` directory. Now, let''s discover how to use
    our native C plugin in Unity C# script as shown here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在将我们的简单插件示例构建为共享库之后，你应该将其放入 `Assets/Plugins/Android` 目录。现在，让我们看看如何像下面这样在 Unity
    C# 脚本中使用我们的原生 C 插件：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you cannot specify library extensions, such as `.lib` or `.so` in
    the name of your plugin. Also, you should wrap the entire native C code by Unity
    C# code, in order to check which platform your application is running on and if
    you can use this native C plugin.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你无法在插件名称中指定库扩展名，例如 `.lib` 或 `.so`。此外，你应该用 Unity C# 代码包裹整个原生 C 代码，以便检查你的应用程序正在运行的平台以及你是否可以使用这个原生
    C 插件。
- en: You have an opportunity to use precompiled Android libraries in Unity.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你有机会在 Unity 中使用预编译的 Android 库。
- en: Let's look at how we can empower Unity 5, using the Java programming language
    for our Android games and applications. In order to use this advanced functionality
    in Unity, you must export Java code into a JAR file. Advanced functionality is
    not needed for each project, but this knowledge will still be useful for you often
    enough.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 Java 编程语言为我们的 Android 游戏和应用程序赋予 Unity 5 的能力。为了在 Unity 中使用此高级功能，你必须将
    Java 代码导出为 JAR 文件。并非每个项目都需要高级功能，但这项知识仍然会对你很有用。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Unity library for Android plugins is located on **Windows** at `C:\Program
    Files\Unity\Editor\Data\PlaybackEngines\androidplayer\development\bin\classes.jar`
    and `C:\Program Files\Unity\Editor\Data\PlaybackEngines\androidplayer\release\bin\classes.jar`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Android 插件的 Unity 库位于 **Windows** 的 `C:\Program Files\Unity\Editor\Data\PlaybackEngines\androidplayer\development\bin\classes.jar`
    和 `C:\Program Files\Unity\Editor\Data\PlaybackEngines\androidplayer\release\bin\classes.jar`。
- en: The Unity library for Android plugins is located on **Mac OS X** at `Unity/Contents/PlaybackEngines/AndroidPlayer/development/bin/classes.jar`
    and `Unity/Contents/PlaybackEngines/AndroidPlayer/release/bin/classes.jar`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Android 插件的 Unity 库位于 **Mac OS X** 的 `Unity/Contents/PlaybackEngines/AndroidPlayer/development/bin/classes.jar`
    和 `Unity/Contents/PlaybackEngines/AndroidPlayer/release/bin/classes.jar`。
- en: Creating plugins in Java (Eclipse IDE)
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Java (Eclipse IDE) 中创建插件
- en: 'Next, let''s take a look at how we can create our custom plugin by using Java
    programming language in Eclipse IDE. You can also choose any other IDE which will
    be comfortable for you. First, you need to create a new project as shown in the
    following figure:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何在 Eclipse IDE 中使用 Java 编程语言创建我们的自定义插件。你也可以选择任何其他你感到舒适的 IDE。首先，你需要创建一个新项目，如图所示：
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![在 Java (Eclipse IDE) 中创建插件](img/9191OT_02_01.jpg)'
- en: 'Once you choose **Android Application Project**, you should click on the **Next
    >** button at the bottom of the window. After that, you will see the window as
    shown in the screenshot here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择 **Android 应用程序项目**，你应该点击窗口底部的**下一步 >**按钮。之后，你将看到如图所示的窗口：
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![在 Java (Eclipse IDE) 中创建插件](img/9191OT_02_02.jpg)'
- en: 'You should set the values for **Application Name**, **Project Name**, and **Package
    Name** as you wish or as in the preceding figure for our simple plugin example.
    Also, you can set other settings such as **Minimum Required SDK**, **Target SDK**,
    **Compile With**, and **Theme**. After that, click on the **Next >** button at
    the bottom of the window, and you will see the following window:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该设置**应用程序名称**、**项目名称**和**包名称**的值，根据你的意愿或如前图所示，用于我们的简单插件示例。此外，你还可以设置其他设置，如**最小所需
    SDK**、**目标 SDK**、**编译方式**和**主题**。之后，点击窗口底部的**下一步 >**按钮，你将看到以下窗口：
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![在 Java (Eclipse IDE) 中创建插件](img/9191OT_02_03.jpg)'
- en: 'You can use the settings as shown in the preceding figure. After opening this
    window you should click on the **Next >** button at the bottom of this window,
    after which the following window will open:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用前图所示的设置。打开此窗口后，你应该点击窗口底部的**下一步 >**按钮，之后将打开以下窗口：
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_04.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![在 Java (Eclipse IDE) 中创建插件](img/9191OT_02_04.jpg)'
- en: 'You can use the default settings shown here. Further, you can click on the
    **Next >** button at the bottom of this window, following which you will see the
    window shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这里显示的默认设置。此外，你可以在窗口底部点击**下一步 >**按钮，之后你将看到以下窗口：
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![在 Java (Eclipse IDE) 中创建插件](img/9191OT_02_05.jpg)'
- en: Here, you should set the **Activity name**, **Layout Name**, and **Navigation
    Type** fields as you wish or as seen in the earlier screenshot. Then, you can
    click on the **Finish** button at the bottom-right corner as shown in preceding
    figure.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你应该根据你的意愿或如早期截图所示设置**活动名称**、**布局名称**和**导航类型**字段。然后，你可以点击底部右角的**完成**按钮，如图所示。
- en: 'Next, let''s copy the Unity `classes.jar` library into the `libs` folder as
    shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将 Unity 的 `classes.jar` 库复制到如图所示的 `libs` 文件夹中：
- en: '![Creating plugins in Java (Eclipse IDE)](img/9191OT_02_06.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![在 Java (Eclipse IDE) 中创建插件](img/9191OT_02_06.jpg)'
- en: Now, open the `UnityFlashlightActivity.java` file shown in the preceding screenshot.
    This file was generated automatically by **Android Development Tools** (**ADT**,
    plugin for Eclipse IDE).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开前图所示的 `UnityFlashlightActivity.java` 文件。此文件是由 **Android 开发工具**（**ADT**，Eclipse
    IDE 的插件）自动生成的。
- en: Writing Java code in plugin
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在插件中编写 Java 代码
- en: 'This is the time to change your **UnityFlashlightActivity** code so that you
    can use this Android functionality in Unity scripts. For this, you should inherit
    the `UnityFlashlightActivity` class from **UnityPlayerActivity**, but not from
    the simple activity that is provided by Android SDK. The new code is shown here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更改你的**UnityFlashlightActivity**代码，以便你可以在Unity脚本中使用这个Android功能。为此，你应该从**UnityPlayerActivity**继承`UnityFlashlightActivity`类，而不是从Android
    SDK提供的简单活动继承。新的代码如下所示：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next step is to create new the `Flashlight.java` class as shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建新的`Flashlight.java`类，如下所示：
- en: '![Writing Java code in plugin](img/9191OT_02_07.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![在插件中编写Java代码](img/9191OT_02_07.jpg)'
- en: 'Firstly, we should declare our package name and the classes we need to import
    as shown in the code here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该声明我们的包名和需要导入的类，如下代码所示：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, let''s declare our `Flashlight` class and its variables as shown here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们声明我们的`Flashlight`类及其变量，如下所示：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `cameraHardware` variable is the object of the `Camera` class that is provided
    by Android SDK, for using different features of the hardware camera. Now, it is
    time to write a constructor function for this class as shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`cameraHardware`变量是Android SDK提供的`Camera`类的对象，用于使用硬件摄像头的不同功能。现在，是时候为这个类编写一个构造函数，如下所示：'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will use the `unityPlayerActivity` variable for accessing the Android context
    and the `PackageManager` class that is provided by Android SDK. We will also use
    the `isActiveFlashlight` variable for turning the device''s flashlight on and
    off. The last variable, `_cameraHardware`, will be used for accessing flashlight
    on a device. Now it is time to write a function that will check whether an Android
    device has the flashlight feature. The function code is shown in the following
    code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`unityPlayerActivity`变量来访问Android上下文和由Android SDK提供的`PackageManager`类。我们还将使用`isActiveFlashlight`变量来打开和关闭设备的闪光灯。最后一个变量`_cameraHardware`将用于访问设备上的闪光灯。现在，是时候编写一个函数来检查Android设备是否具有闪光灯功能。函数代码如下所示：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The next step is to describe the function that will turn on a flashlight on
    an Android device if it has this hardware feature:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是描述一个函数，该函数将在Android设备上打开闪光灯，如果它具有这个硬件功能：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Turning on and off a hardware flashlight
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开和关闭硬件闪光灯
- en: 'Now let''s write a function that will turn off a flashlight on an Android device,
    if it has this hardware feature:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写一个函数来关闭Android设备上的闪光灯，如果它具有这个硬件功能：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The simplest method in this class is shown in the following code. Next, we
    should close our `Flashlight` class using the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类中最简单的方法如下所示。接下来，我们应该使用以下代码关闭我们的`Flashlight`类：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you receive an error with the `unityPlayerActivity.getPackageManager()`
    function, then you will need to change your minimal Android SDK version in the
    `AndroidManifest.xml` file as shown in the line of code here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到`unityPlayerActivity.getPackageManager()`函数的错误，那么你需要将`AndroidManifest.xml`文件中的最小Android
    SDK版本更改为如下代码行所示：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let''s change our UnityFlashlightActivity a little, as shown in the following
    code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们稍微修改一下我们的UnityFlashlightActivity，如下所示：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: On Unity side
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Unity侧
- en: 'Here, we will create a new scene for our Android plugin test in our project:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在项目中为我们的Android插件测试创建一个新场景：
- en: '![On Unity side](img/9191OT_02_08.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![在Unity侧](img/9191OT_02_08.jpg)'
- en: Name this new scene as you wish, following which you should create a new `Assets/Plugins/Android`
    folder. You can put in the `AndroidManifest.xml`, JAR files, and Android resources
    files in this folder.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 按照你的意愿命名这个新场景，然后你应该在项目中创建一个新的`Assets/Plugins/Android`文件夹。你可以在该文件夹中放入`AndroidManifest.xml`、JAR文件和Android资源文件。
- en: Exporting and importing a JAR library from Eclipse into Unity
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Eclipse导出和导入JAR库到Unity
- en: 'Now, let''s go back to the Eclipse editor and right click on the mouse button
    on our **Flashlight** project. Click on the **Export…** button as shown here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到Eclipse编辑器，在**Flashlight**项目上鼠标右键单击。点击**导出…**按钮，如下所示：
- en: '![Exporting and importing a JAR library from Eclipse into Unity](img/9191OT_02_09.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![从Eclipse导出和导入JAR库到Unity](img/9191OT_02_09.jpg)'
- en: You will see the window as shown in the following screenshot. Select **JAR file**
    and click on the **Next >** button at the bottom of the window.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到如下截图所示的窗口。选择**JAR文件**，然后点击窗口底部的**Next >**按钮。
- en: '![Exporting and importing a JAR library from Eclipse into Unity](img/9191OT_02_10.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![从Eclipse导出和导入JAR库到Unity](img/9191OT_02_10.jpg)'
- en: 'In the following window, select the options you wish or just set them up as
    shown here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下窗口中，选择您希望选择的选项，或者只需像下面这样设置它们：
- en: '![Exporting and importing a JAR library from Eclipse into Unity](img/9191OT_02_11.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![从 Eclipse 导入和导出 JAR 库到 Unity](img/9191OT_02_11.jpg)'
- en: Choose the JAR file path that should be targeted as our new `Asset/Plugins/Android`
    folder in Unity.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 选择要作为我们新 `Asset/Plugins/Android` 文件夹目标的 JAR 文件路径。
- en: Importing AndroidManifest
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入 AndroidManifest
- en: 'The next step is to create a new `AndroidManifest.xml` file in the `Asset/Plugins/Android`
    folder. The manifest declarations are shown as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在 `Asset/Plugins/Android` 文件夹中创建一个新的 `AndroidManifest.xml` 文件。清单声明如下所示：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using Java plugins in Unity scripts
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Unity 脚本中使用 Java 插件
- en: 'Here, we will create a very simple `FlashlightActivity.cs` script in Unity
    as shown in the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个非常简单的 `FlashlightActivity.cs` 脚本，如下所示：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we will implement `Flashlight.cs` as shown here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将按照以下所示实现 `Flashlight.cs`：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This class is very simple, and we will not explain it. This class just recalls
    the Android Java methods. In the end, let''s create one more very simple class
    that should be attached on **MainCamera** in our new scene. The filename is `FlashlightTest.cs`,
    and its code is shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类非常简单，我们不会对其进行解释。这个类只是调用 Android Java 方法。最后，让我们再创建一个非常简单的类，它应该附加在我们新场景的 **MainCamera**
    上。文件名为 `FlashlightTest.cs`，其代码如下所示：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'At the end, we can make a new build for Android devices with just one single
    scene as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以为 Android 设备创建一个新的构建，只需一个场景，如下截图所示：
- en: '![Using Java plugins in Unity scripts](img/9191OT_02_12.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![在 Unity 脚本中使用 Java 插件](img/9191OT_02_12.jpg)'
- en: 'We can access many different Android properties ready for use in Unity 5\.
    You should use the `UNITY_ANDROID` defined constant by Unity for conditionally,
    compiling the Android-specific C# code. Further, in this chapter you will learn
    how to use different Android features and the properties inside Unity scripts.
    Most of the Android features in Unity are presented by **Handheld** and **Input**
    classes. Let''s look at the Android features you will explore next:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以访问许多不同的 Android 属性，这些属性在 Unity 5 中可供使用。您应该使用 Unity 定义的 `UNITY_ANDROID` 常量来有条件地编译
    Android 特定的 C# 代码。此外，在本章中，您将学习如何在 Unity 脚本中使用不同的 Android 功能和属性。Unity 中的大多数 Android
    功能都由 **Handheld** 和 **Input** 类提供。让我们看看您将要探索的 Android 功能：
- en: Anti-piracy check
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反盗版检查
- en: Vibration
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 震动
- en: Activity indicator
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动指示器
- en: Screen orientation
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕方向
- en: System information
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统信息
- en: Anti-piracy check
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反盗版检查
- en: Let's explore **anti-piracy** checks first. Very often, if not always, you should
    protect your Android game or application from pirates that hack games and applications
    in order to redistribute them for free. With the help of Unity, we can make an
    anti-piracy check that shows if our game or application was changed after it was
    built.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先探索 **反盗版** 检查。非常常见，如果不是总是如此，您应该保护您的 Android 游戏或应用程序免受黑客的侵害，他们破解游戏和应用程序以免费重新分发。借助
    Unity 的帮助，我们可以进行反盗版检查，以显示我们的游戏或应用程序在构建后是否已被更改。
- en: You should check the `Application.genuine` Boolean property, which is provided
    by the Unity library. If this property is `false`, then you can notify the user
    that it is a hacked version, or you can cut some functionality, and you can do
    any other actions or combinations of them. The `Application.genuine` check is
    a very expensive operation, so you it is best not to check this property so often,
    just when it is required.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该检查 Unity 库提供的 `Application.genuine` 布尔属性。如果此属性为 `false`，则可以通知用户这是一个破解版本，或者您可以删除一些功能，也可以执行任何其他操作或它们的组合。`Application.genuine`
    检查是一个非常昂贵的操作，因此最好不要频繁检查此属性，而只是在需要时检查。
- en: Vibration
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 震动
- en: In order to make an Android device vibrate, you should call the `Handheld.Vibrate()`
    method, which is provided by the Unity library.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 Android 设备震动，您应该调用 Unity 库提供的 `Handheld.Vibrate()` 方法。
- en: Activity Indicator
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动指示器
- en: 'You can use **Activity Indicator** for slow operations. There is an Android
    built-in Activity Indicator. Let''s explore a very simple code example which is
    shown here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 **活动指示器** 来处理慢速操作。Android 内置了一个活动指示器。让我们探索一个非常简单的代码示例，如下所示：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Screen orientation
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 屏幕方向
- en: Also, you can control the Android screen orientation inside Unity scripts. You
    can detect a screen rotation or you can force a screen rotation to a specific
    orientation. In order to get the current device orientation, you should access
    the `Screen.orientation` property. Also, you can set this property to any desired
    screen orientation to force rotation. You can find more about different screen
    orientation properties and constants in the Unity manual.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以在Unity脚本中控制Android屏幕方向。您可以检测屏幕旋转或强制将屏幕旋转到特定方向。为了获取当前设备方向，您应该访问`Screen.orientation`属性。您还可以将此属性设置为任何所需的屏幕方向以强制旋转。您可以在Unity手册中找到有关不同屏幕方向属性和常量的更多信息。
- en: System information
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统信息
- en: If you need more information about your system, you can use static variables
    from the `SystemInfo` class, which is provided by the Unity library. More information
    about these variables can be found in the official Unity documentation located
    at [http://docs.unity3d.com/ScriptReference/SystemInfo.html](http://docs.unity3d.com/ScriptReference/SystemInfo.html).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更多关于您系统的信息，您可以使用Unity库提供的`SystemInfo`类的静态变量。有关这些变量的更多信息可以在官方Unity文档中找到，位于[http://docs.unity3d.com/ScriptReference/SystemInfo.html](http://docs.unity3d.com/ScriptReference/SystemInfo.html)。
- en: 'You can attach the following script in any scene on any object in order to
    obtain information about your Android device. Let''s look more closely at what
    happens inside this code. Firstly, we need to declare our class with its properties
    as shown here:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将以下脚本附加到任何场景中的任何对象上，以获取有关您的Android设备的信息。让我们更仔细地看看这段代码内部发生了什么。首先，我们需要声明我们的类及其属性，如下所示：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After that let''s create our `OnGUI` function, which will show us information
    about any device. The code is shown here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，让我们创建我们的`OnGUI`函数，它将显示有关任何设备的信息。代码如下所示：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'At the end, we should create the `Update` function in order to change the scroll
    `position Y` value, in order to be able to scroll the list of information:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们应该创建`Update`函数，以便更改信息列表的`position Y`值，以便能够滚动信息列表：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Accessing the Android sensors and features within Unity 5
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Unity 5中访问Android传感器和功能
- en: Let's discover a little bit more about some Android sensors and features that
    are shown in the simple code examples later in text.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解一些在文本后面的简单代码示例中展示的Android传感器和功能。
- en: Acceleration
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加速度
- en: 'You can also access the Android acceleration inside Unity. Let''s upgrade our
    previous example, so we can see one more aspect of our Android device. The new
    piece of code is shown here:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在Unity中访问Android加速度。让我们升级我们之前的示例，以便我们可以看到我们Android设备的一个更多方面。新的代码片段如下所示：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After running this test on your Android device, you will see how acceleration
    values change very quickly in real time.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Android设备上运行此测试后，您将看到加速度值如何实时快速变化。
- en: Gyroscope
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陀螺仪
- en: 'Unity provides **gyroscope** access on Android devices as shown in the new
    piece of code. Before using gyroscope, you just need to enable it as shown here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Unity在Android设备上提供了**陀螺仪**访问，如新代码片段所示。在使用陀螺仪之前，您只需按照以下方式启用它：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Compass
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指南针
- en: 'Unity provides **compass** access on Android devices as shown in the new piece
    of code. Before using the compass, you just need to enable it as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Unity在Android设备上提供了**指南针**访问，如新代码片段所示。在使用指南针之前，您只需按照以下方式启用它：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can see all values received from our previous code examples in the following
    screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下屏幕截图中看到从前面的代码示例中接收到的所有值：
- en: '![Compass](img/9191OT_02_13.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![指南针](img/9191OT_02_13.jpg)'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we look at the details of writing plugins in Java and native
    C for Unity. We practiced developing simple plugins for Android platform. Also,
    we explored how to make anti-piracy checks, detect screen orientation, handle
    vibration support, get device name, get device model, and get much more useful
    information. We learned how to access the acceleration, gyroscope**,** and compass
    sensors with their features and properties in practice.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了为Unity编写Java和原生C插件的具体细节。我们实践了为Android平台开发简单插件。此外，我们还探讨了如何进行反盗版检查、检测屏幕方向、处理振动支持、获取设备名称、获取设备型号以及获取更多有用的信息。我们学习了如何在实践中访问加速度、陀螺仪****和指南针传感器及其特性和属性。
- en: In the next chapter, you will learn how to develop high-end graphics. You will
    explore how to write simple Cg shaders in Unity. You will also learn more about
    awesome tips, tricks, and techniques that are used all over the world in game
    production. You will also acquire information about global illumination and how
    to optimize your shaders.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何开发高端图形。你将探索如何在Unity中编写简单的Cg着色器。你还将了解全球范围内在游戏制作中广泛使用的精彩技巧、窍门和技术。你还将获取有关全局照明以及如何优化你的着色器的信息。
