["```kt\nvar notNullStr:String by Delegates.notNull<String>() \n\nfun main(args: Array<String>) { \n    notNullStr = \"Initial value\" \n    println(notNullStr) \n} \n```", "```kt\nvar notNullStr:String by Delegates.notNull<String>() \nvar notInit:String by Delegates.notNull<String>() \n\nfun main(args: Array<String>) { \n    notNullStr = \"Initial value\" \n    println(notNullStr) \n    println(notInit) \n} \n```", "```kt\nlateinit var notNullStr1:String \nlateinit var notInit1:String \n\nfun main(args: Array<String>) { \n    notNullStr1 = \"Initial value\" \n    println(notNullStr1) \n    println(notInit1) \n} \n```", "```kt\nval myLazyVal:String by lazy { \n    println(\"Just Initialised\") \n    \"My Lazy Val\" \n} \n\nfun main(args: Array<String>) { \n    println(\"Not yet initialised\") \n    println(myLazyVal) \n} \n```", "```kt\nvar myStr:String by Delegates.observable(\"<Initial Value>\") { \n    property, oldValue, newValue -> \n    println(\"Property `${property.name}` changed value from \"$oldValue\" to \"$newValue\"\") \n} \n\nfun main(args: Array<String>) { \n    myStr = \"Change Value\" \n    myStr = \"Change Value again\" \n} \n```", "```kt\nvar myStr:String by Delegates.observable(\"<Initial Value>\") { \n    property, oldValue, newValue -> \n    println(\"Property `${property.name}` changed value from \"$oldValue\" to \"$newValue\"\") \n} \n```", "```kt\nvar myIntEven:Int by Delegates.vetoable(0) { \n    property, oldValue, newValue -> \n    println(\"${property.name} $oldValue -> $newValue\") \n    newValue%2==0 \n} \n\nfun main(args: Array<String>) { \n    myIntEven = 6 \n    myIntEven = 3 \n    println(\"myIntEven:$myIntEven\") \n} \n```", "```kt\nvar myCounter:Int by Delegates.vetoable(0) { \n    property, oldValue, newValue -> \n    println(\"${property.name} $oldValue -> $newValue\") \n    newValue>oldValue \n} \n\nfun main(args: Array<String>) { \n    myCounter = 2 \n    println(\"myCounter:$myCounter\") \n    myCounter = 5 \n    myCounter = 4 \n    println(\"myCounter:$myCounter\")  \n    myCounter++ \n    myCounter-- \n    println(\"myCounter:$myCounter\") \n} \n```", "```kt\ndata class Book (val delegate:Map<String,Any?>) { \n    val name:String by delegate \n    val authors:String by delegate \n    val pageCount:Int by delegate \n    val publicationDate:Date by delegate \n    val publisher:String by delegate \n} \n\nfun main(args: Array<String>) { \n    val map1 = mapOf( \n            Pair(\"name\",\"Reactive Programming in Kotlin\"), \n            Pair(\"authors\",\"Rivu Chakraborty\"), \n            Pair(\"pageCount\",400), \n            Pair(\"publicationDate\",SimpleDateFormat(\"yyyy/mm/dd\").parse(\"2017/12/05\")), \n            Pair(\"publisher\",\"Packt\") \n    ) \n    val map2 = mapOf( \n            \"name\" to \"Kotlin Blueprints\", \n            \"authors\" to \"Ashish Belagali, Hardik Trivedi, Akshay Chordiya\", \n            \"pageCount\" to 250, \n            \"publicationDate\" to SimpleDateFormat(\"yyyy/mm/dd\").parse(\"2017/12/05\"), \n            \"publisher\" to \"Packt\" \n    ) \n\n    val book1 = Book(map1) \n    val book2 = Book(map2) \n\n    println(\"Book1 $book1 nBook2 $book2\") \n} \n```", "```kt\nvar myEven:Int by makeEven(0) { \n    property, oldValue, newValue, wasEven -> \n    println(\"${property.name} $oldValue -> $newValue, Even:$wasEven\") \n} \n\nfun main(args: Array<String>) { \n    myEven = 6 \n    println(\"myEven:$myEven\") \n    myEven = 3 \n    println(\"myEven:$myEven\") \n    myEven = 5 \n    println(\"myEven:$myEven\") \n    myEven = 8 \n    println(\"myEven:$myEven\") \n} \n```", "```kt\nabstract class MakeEven(initialValue: Int):ReadWriteProperty<Any?,Int> { \n    private var value:Int = initialValue \n\n    override fun getValue(thisRef: Any?, property: KProperty<*>) = value \n\n    override fun setValue(thisRef: Any?, property: KProperty<*>, newValue: Int) { \n        val oldValue = newValue \n        val wasEven = newValue %2==0 \n        if(wasEven) { \n            this.value = newValue \n        } else { \n            this.value = newValue +1 \n        } \n        afterAssignmentCall(property,oldValue, newValue,wasEven) \n    } \n\n    abstract fun afterAssignmentCall (property: KProperty<*>, oldValue: Int, newValue: Int, wasEven:Boolean):Unit \n} \n```", "```kt\n inline fun makeEven(initialValue: Int, crossinline onAssignment:(property: KProperty<*>, oldValue: Int, newValue: Int, wasEven:Boolean)->Unit):ReadWriteProperty<Any?, Int> \n        =object : MakeEven(initialValue){ \n    override fun afterAssignmentCall(property: KProperty<*>, oldValue: Int, newValue: Int, wasEven: Boolean) \n            = onAssignment(property,oldValue,newValue,wasEven) \n} \n```", "```kt\nfun useDelegate(shouldPrint:Boolean) { \n    val localDelegate = \"Delegate Used\" \n    if(shouldPrint) { \n        println(localDelegate) \n    } \n\n    println(\"bye bye\") \n} \n```", "```kt\nfun useDelegate(shouldPrint:Boolean) { \n    val localDelegate by lazy { \n        \"Delegate Used\" \n    } \n    if(shouldPrint) { \n        println(localDelegate) \n    } \n\n    println(\"bye bye\") \n} \n```", "```kt\ninterface Person { \n    fun printName() \n} \n\nclass PersonImpl(val name:String):Person { \n    override fun printName() { \n        println(name) \n    } \n} \n\nclass User(val person:Person):Person by person { \n    override fun printName() { \n        println(\"Printing Name:\") \n        person.printName() \n    } \n} \n\nfun main(args: Array<String>) { \n    val person = PersonImpl(\"Mario Arias\") \n    person.printName() \n    println() \n    val user = User(person) \n    user.printName() \n} \n```"]