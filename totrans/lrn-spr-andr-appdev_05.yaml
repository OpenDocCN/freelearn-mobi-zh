- en: Securing Applications with Spring Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Security保护应用程序
- en: Security is one of the first priorities for the enterprise, e-commerce, and
    banking projects. These projects need to create a security system since they exchange
    millions of dollars and store the protected resources of an organization.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是企业、电子商务和银行项目中的首要任务之一。这些项目需要创建一个安全系统，因为它们交换数百万美元并存储组织的受保护资源。
- en: Spring Security is a sub-task of the immense Spring Framework portfolio. It
    has been upgraded to be utilized with a Spring MVC web application framework,
    yet can similarly be utilized with Java servlets. This supports authentication
    incorporation with a long list of other technologies, such as **Lightweight Directory
    Access Protocol** (**LDAP**), **Java Authentication and Authorization Service**
    (**JAAS**), and OpenID. It was developed as a complete security solution for Java-based
    enterprise environments.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security是庞大的Spring框架系列的一个子任务。它已被升级以与Spring MVC Web应用程序框架一起使用，但同样也可以与Java
    servlets一起使用。这支持与一系列其他技术的认证集成，例如**轻量级目录访问协议**（**LDAP**）、**Java认证和授权服务**（**JAAS**）和OpenID。它被开发为一个针对基于Java的企业环境的完整安全解决方案。
- en: 'In this chapter, we''ll learn about Spring Security and its modules and learn
    how to implement security in a Spring-based project. The following topics will
    be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解Spring Security及其模块，并学习如何在基于Spring的项目中实现安全性。本章将涵盖以下主题：
- en: Spring Security architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security架构
- en: The advantages of Spring Security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security的优势
- en: Spring Security features
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security特性
- en: Spring Security modules
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security模块
- en: Implementing Spring Security
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施Spring Security
- en: Securing REST with Spring Security basic authentication
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security基本认证保护REST
- en: Securing REST with Spring Security OAuth2
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security OAuth2保护REST
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You need to add these dependencies to enable and use the features of Spring
    Security. Here are the dependencies that need to be added to the `pom.xml` file
    of the Spring project:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要添加以下依赖项以启用和使用Spring Security的功能。以下是需要添加到Spring项目的`pom.xml`文件中的依赖项：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can find all the examples from this chapter on GitHub at [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的所有示例：[https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05)。
- en: Spring Security architecture
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security架构
- en: Spring Security is the security service solution for a J2EE-based enterprise
    production. This helps to develop a secured application in a faster and easier
    way with the use of its particular dependency-injection principles. To develop
    a secure J2EE-based enterprise application, Spring Security is an incredible and
    flexible authentication and authorization framework. Authentication is the process
    of checking the identity of a procedure or a client. On the other hand, authorization
    implies a procedure of checking the authority of a client to perform activities
    in the application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security是基于J2EE的企业生产的安全服务解决方案。它通过使用其特定的依赖注入原则，帮助以更快、更简单的方式开发安全应用程序。为了开发基于J2EE的企业应用程序，Spring
    Security是一个强大且灵活的认证和授权框架。认证是检查过程或客户端身份的过程。另一方面，授权意味着检查客户端在应用程序中执行活动的权限。
- en: Authentication
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证
- en: Authentication is the process that identifies a user or client based on their
    username and password. It helps a user to get the access protected system objects
    based on their identity. For the authentication procedure, spring security gives
    us the `AuthenticationManager` interface. This interface has just a single capacity,
    named `validate()`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是根据用户的用户名和密码识别用户或客户端的过程。它帮助用户根据其身份获取受保护系统对象的访问权限。对于认证过程，Spring Security为我们提供了`AuthenticationManager`接口。此接口只有一个功能，名为`validate()`。
- en: 'The accompanying snippet of code is an example of the `AuthenticationManager`
    interface:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是`AuthenticationManager`接口的一个示例：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Three tasks are completed by the `authenticate()` in this `AuthenticationManager`
    interface:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`AuthenticationManager`接口的`authenticate()`中完成了三个任务：
- en: '`authenticate()` returns`Authentication` on the off-chance that its capacity
    can check that the input represents a valid principle. The previously-mentioned
    code generally returns `authenticated=true`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果其能力可以检查输入代表一个有效的主体，则`authenticate()`返回`Authentication`。前面提到的代码通常返回`authenticated=true`。
- en: In the event that the capacity finds that the input doesn't speak to a substantial
    rule, it tosses `AuthenticationException`.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果能力发现输入不符合有效规则，它将抛出`AuthenticationException`。
- en: In the event that the capacity can't choose anything, it will return `null`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果能力无法选择任何内容，它将返回`null`。
- en: '`AuthenticationException` is a runtime exception. An application handles this
    exception in a conventional way.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthenticationException`是一个运行时异常。应用程序以传统方式处理这个异常。'
- en: '`ProviderManager` is often used to implement `AuthenticationManager`, and represents
    a chain of `AuthenticationProvider` objects. If there''s no parent accessible,
    it throws `AuthenticationException`.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProviderManager`常用于实现`AuthenticationManager`，代表一系列`AuthenticationProvider`对象。如果没有可访问的父级，它将抛出`AuthenticationException`。'
- en: '`AuthenticationProvider` resembles `AuthenticationManager`, but has an additional
    function. This additional function enables the client to query on the off-chance
    that it supports a given `Authentication` type.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthenticationProvider`类似于`AuthenticationManager`，但有一个额外的功能。这个额外的功能使客户端能够在支持给定的`Authentication`类型时进行查询。'
- en: 'Here''s some code of the `AuthenticationProvider` interface:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`AuthenticationProvider`接口的一些代码：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This interface has two functions—`authenticate()` returns the user's authentication
    details and `supports()` returns a `Boolean` if the authentication and given username-password
    pair matches, or doesn't.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口有两个功能——`authenticate()`返回用户的认证详情，而`supports()`返回一个`Boolean`，如果认证和给定的用户名-密码对匹配，则返回`true`，否则返回`false`。
- en: 'Here is a diagram of the `AuthenticationManager` hierarchy utilizing `ProviderManager`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用`ProviderManager`的`AuthenticationManager`层次结构的图示：
- en: '![](img/b5fd0389-0cd9-48a8-a03f-6954119392f0.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b5fd0389-0cd9-48a8-a03f-6954119392f0.png)'
- en: According to this diagram, in an application, `ProviderManager` may have a group
    of other `ProviderManager` instances but the first one will behave as a parent.
    Every `ProviderManager` may have multiple `AuthenticationManager`. For example,
    if all web resources are under the same path, every group will have its own dedicated
    `AuthenticationManager`. However, there will be only one common parent, which
    will act as a global resource and will be shared by these dedicated `AuthenticationManager`
    instances. Now, let's see how to modify the authentication manager.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个图示，在一个应用中，`ProviderManager`可能有一组其他的`ProviderManager`实例，但第一个将作为父级。每个`ProviderManager`可能拥有多个`AuthenticationManager`。例如，如果所有网络资源都在相同的路径下，每个组都将拥有自己的专用`AuthenticationManager`。然而，将只有一个共同的父级，它将作为全局资源，并由这些专用`AuthenticationManager`实例共享。现在，让我们看看如何修改认证管理器。
- en: Modifying authentication managers
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改认证管理器
- en: Spring Security provides some configuration helpers to set up authentication
    manager features in your application. This will help to get the features quickly. `AuthenticationManagerBuilder`
    helps to modify the authentication managers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security提供了一些配置助手来设置应用中的认证管理器功能。这将有助于快速获取功能。`AuthenticationManagerBuilder`有助于修改认证管理器。
- en: 'Here is an example of how to implement `AuthenticationManagerBuilder` in the `ApplicationSecurity.kt`
    class:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何在`ApplicationSecurity.kt`类中实现`AuthenticationManagerBuilder`的示例：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we have given a username, `sunnat629`, and a password, `packtPub`, as
    a `USER` role in this application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们为这个应用中的`USER`角色提供了一个用户名，`sunnat629`，和一个密码，`packtPub`。
- en: Spring Boot accompanies a default global `AuthenticationManager`, which is sufficiently
    secure. You can supplant it by giving your own `AuthenticationManager` bean.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot附带了一个默认的全局`AuthenticationManager`，它足够安全。你可以通过提供自己的`AuthenticationManager`
    bean来替换它。
- en: Authorization
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权
- en: Authorization is the process of accepting or rejecting access to network resources.
    It will grant access to utilize the data from the resources. After the `Authentication`
    process, the `Authorization` process begins. `Authorization` is used to deal with
    controlling access. `AccessDecisionManager` is one of the core entities of this.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 授权是接受或拒绝访问网络资源的过程。它将授予访问使用资源中的数据。在`Authentication`过程之后，`Authorization`过程开始。`Authorization`用于处理访问控制。`AccessDecisionManager`是这个过程中的核心实体之一。
- en: Web security
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络安全
- en: The servlet channels of spring security provide web security. The `@WebSecurityConfigurer`
    annotation is used to enable the web security and override `WebSecurityConfigurerAdapter`
    in the web security class.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Spring安全性的servlet通道提供Web安全性。使用`@WebSecurityConfigurer`注解启用Web安全性，并在Web安全性类中覆盖`WebSecurityConfigurerAdapter`。
- en: Method Security
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法安全
- en: This is a module of a security method that's provided by Spring Security. We
    can provide a role in a particular function so that role-based users can access
    the function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个由Spring Security提供的安全方法模块。我们可以在特定功能中提供一个角色，以便基于角色的用户可以访问该功能。
- en: 'The following annotation is used to enable this feature:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下注解用于启用此功能：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s an example of how to enable method security in the `SpringSecurityApplication.kt`
    class, which is the main application class of our demo project:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个如何在`SpringSecurityApplication.kt`类中启用方法安全的示例，这是我们的演示项目的主体应用程序类：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now you can create the method resources, such as the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以创建方法资源，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we created a secured class named `CustomService` using the `@Secured`
    annotation, and then created a secured function that will return a spring. The `@Secured`
    annotation is used to specify a list of roles on a function.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`@Secured`注解创建了一个名为`CustomService`的安全类，然后创建了一个将返回Spring的安全函数。`@Secured`注解用于指定函数上的角色列表。
- en: The advantages of Spring Security
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security的优势
- en: 'The Spring Security framework provides the following advantages:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Spring安全框架提供了以下优势：
- en: Spring Security is an open source security framework
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security是一个开源的安全框架
- en: It supports authentication and authorization
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持认证和授权
- en: It protects against common tasks
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它保护常见任务
- en: It can be integrated with Spring MVC and the Servlet API
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以与Spring MVC和Servlet API集成
- en: It supports Java and Kotlin configuration support
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持Java和Kotlin配置支持
- en: It's easy to develop and unit-test the applications
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发和单元测试应用程序很容易
- en: Spring dependency injection and AOP can be used with ease
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring依赖注入和AOP可以轻松使用
- en: It develops loosely-coupled applications
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它开发松散耦合的应用程序
- en: Spring Security features
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security特性
- en: There are a lot of features that are implemented in Spring Security.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security实现了许多功能。
- en: 'Here, we have explained some common and major features:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们解释了一些常见和主要的功能：
- en: '**LDAP**:LDAP is an open application protocol. This maintains and accesses
    distributed directory data services over the internet.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LDAP**: LDAP是一个开放的应用协议。它通过互联网维护和访问分布式目录数据服务。'
- en: '**OAuth 2.0 login**:This component makes it possible for the client to log
    into the application by utilizing their existing accounts on Google, Facebook,
    Twitter, or GitHub.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OAuth 2.0登录**: 此组件使得客户端能够通过利用他们在Google、Facebook、Twitter或GitHub上现有的账户来登录应用程序。'
- en: '**Basic access authentication**:This gives a username and password when a client
    requests them over the network.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本访问认证**: 当客户端通过网络请求时，此方法提供用户名和密码。'
- en: '**Digest access authentication**:This asks the program to affirm the identity of
    the client before sending personal information over the system.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摘要访问认证**: 这要求程序在通过系统发送个人信息之前确认客户端的身份。'
- en: '**Web form authentication**: In this authentication system, a web form collects
    and authenticates user credentials from the web browser.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web表单认证**: 在此认证系统中，Web表单从Web浏览器收集和验证用户凭据。'
- en: '**Authorization**: Spring Security offers this feature to approve of the client
    before getting the assets.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权**: Spring Security提供此功能，在客户端获取资源之前对其进行批准。'
- en: '**HTTP authorization**: This refers to theHTTP authorization of web request
    URLs. It uses Apache Ant paths or regular expressions.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP授权**: 这指的是对Web请求URL的HTTP授权。它使用Apache Ant路径或正则表达式。'
- en: '**Reactive support**: This provides reactive programming and web runtime support.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应式支持**: 这提供了响应式编程和Web运行时支持。'
- en: '**Modernized password encoding**: A new password encoder, named `DelegatingPasswordEncoder`,
    is introduced from Spring Security 5.0.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**现代化的密码编码**: 从Spring Security 5.0引入了一个新的密码编码器，名为`DelegatingPasswordEncoder`。'
- en: '**Single sign-on**: This feature allows a client to access multiple applications
    with a single account.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单点登录**: 此功能允许客户端使用单个账户访问多个应用程序。'
- en: '**JAAS**: JAAS is a Pluggable Authentication Module that''s implemented in
    Java.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JAAS**: JAAS是一个Java中实现的插件式认证模块。'
- en: '**Remember-me**:Spring Security utilizes HTTP cookies, which remember a client''s
    login ID and password in order to maintain a strategic distance from login again
    until the client logs out.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记住我**：Spring Security利用HTTP cookies，记住客户端的登录ID和密码，以便在客户端注销之前避免再次登录。'
- en: '**Software localization**: You can create the user interface of an application
    in any human language.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件本地化**：您可以用任何人类语言创建应用程序的用户界面。'
- en: Spring Security modules
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security模块
- en: The Spring Security module has been isolated into a few sub-modules in Spring
    Security 3.0\. However, in the present version, there are 12 submodules. To support
    these modules, the code is sub-partitioned into isolated containers. These containers
    are currently disengaged, where every submodule has a diverse useful area and
    third-party dependencies.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Security 3.0中，Spring Security模块已被隔离成几个子模块。然而，在当前版本中，有12个子模块。为了支持这些模块，代码被细分为独立的容器。这些容器目前是分离的，每个子模块都有不同的有用领域和第三方依赖。
- en: 'Here is a list of sub-module jars:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是子模块jar列表：
- en: '`spring-security-core.jar`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-core.jar`'
- en: '`spring-security-remoting.jar`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-remoting.jar`'
- en: '`spring-security-web.jar`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-web.jar`'
- en: '`spring-security-config.jar`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-config.jar`'
- en: '`spring-security-ldap.jar`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-ldap.jar`'
- en: '`spring-security-oauth2-core.jar`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-oauth2-core.jar`'
- en: '`spring-security-oauth2-client.jar`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-oauth2-client.jar`'
- en: '`spring-security-oauth2-jose.jar `'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-oauth2-jose.jar`'
- en: '`spring-security-acl.jar`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-acl.jar`'
- en: '`spring-security-cas.jar`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-cas.jar`'
- en: '`spring-security-openid.jar`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-openid.jar`'
- en: '`spring-security-test.jar`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-test.jar`'
- en: The Spring Security Core sub-module is the base module for the rest of the Security
    sub-modules, such as `web`, `config`, and `oauth2`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security Core子模块是其他Security子模块（如`web`、`config`和`oauth2`）的基础模块。
- en: Implementing Spring Security
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Spring Security
- en: If you want to use Spring Security in your project, you need to implement the
    Spring Security dependencies that you want to use in both Maven and Gradle.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在项目中使用Spring Security，您需要在Maven和Gradle中实现您想要使用的Spring Security依赖项。
- en: Let's take a look at how to implement the Spring Security dependencies in both
    Maven and Gradle.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在Maven和Gradle中实现Spring Security依赖项。
- en: Maven
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven
- en: 'To implement the security dependencies, you need to implement `spring-security-core`
    in `pom.xml`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现安全依赖项，您需要在`pom.xml`中实现`spring-security-core`：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Gradle
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle
- en: 'To implement the dependencies, you need to put the following code in `build.gradle`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现依赖项，您需要在`build.gradle`中放入以下代码：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Securing REST with basic authentication
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基本认证保护REST
- en: Within this topic, we'll learn basic authentication with a simple project. Here,
    we'll create an example where you'll build a secure REST API. We'll make a project
    and implement the basic authentication. This will help us to avoid the basic configuration
    and complete Kotlin config duration. For this project, you must enter your username
    and password to access the content. This project has no UI and therefore you need to
    use an HTTP client to test the project. Here, we're using Insomnia ([https://insomnia.rest/download/](https://insomnia.rest/download/)).
    You can test your project and access the content from here.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将通过一个简单的项目学习基本认证。在这里，我们将创建一个示例，您将构建一个安全的REST API。我们将创建一个项目并实现基本认证。这将帮助我们避免基本配置和完整的Kotlin配置时间。对于这个项目，您必须输入用户名和密码才能访问内容。这个项目没有UI，因此您需要使用HTTP客户端来测试项目。在这里，我们使用Insomnia
    ([https://insomnia.rest/download/](https://insomnia.rest/download/))。您可以从这里测试您的项目并访问内容。
- en: Before starting with our project, we'll learn about basic authentication and
    its use.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始我们的项目之前，我们将了解基本认证及其用途。
- en: What is basic authentication?
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是基本认证？
- en: '**Basic authentication** is the simplest authentication scheme, which is built
    into the HTTP protocol. To use it, the client needs to send HTTP requests with
    the authentication header, which contains the word *Basic* followed by a space.
    Then, the given string of username and password will be considered as `username/password` and
    encoded into Base64\. For example, if the username and password are `Sunnat629`
    and `pa$$worD`, these will be converted into Base64 encoding, which will be `U3VubmF0NjI5L3BhcyQkd29yRA==` as
    authorized. Finally, the client will send  `Authorization: Basic  U3VubmF0NjI5L3BhcyQkd29yRA==` to
    the server.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本认证**是最简单的认证方案，它是HTTP协议内建的。要使用它，客户端需要发送包含认证头部的HTTP请求，该头部包含单词*Basic*后跟一个空格。然后，给定的用户名和密码字符串将被视为`username/password`并编码为Base64。例如，如果用户名和密码是`Sunnat629`和`pa$$worD`，这些将被转换为Base64编码，将变为`U3VubmF0NjI5L3BhcyQkd29yRA==`作为授权。最后，客户端将发送`Authorization:
    Basic U3VubmF0NjI5L3BhcyQkd29yRA==`到服务器。'
- en: Base64 can easily be decoded. This is neither encrypted nor hashed. If you want
    to use the basic authentication, we highly recommend using this together with
    other security tools, such as HTTPS/SSL.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Base64可以轻松解码。这既不是加密也不是散列。如果你想使用基本认证，我们强烈建议你与其他安全工具一起使用，例如HTTPS/SSL。
- en: Creating a project
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'We''ll create a small project where we''ll implement the basic authentication
    security to protect the data. A user needs to be accepted by our security system
    to access the data. Let''s create the project with the given steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个小项目，在这个项目中我们将实现基本认证安全来保护数据。用户需要通过我们的安全系统才能访问数据。让我们按照以下步骤创建项目：
- en: 'To create the project, go to the [https://start.spring.io/](https://start.spring.io/)
    and modify the given field with your requirement. You can check our project information
    in the following screenshot:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建项目，请访问[https://start.spring.io/](https://start.spring.io/)并修改给定的字段以满足你的需求。你可以在以下屏幕截图中查看我们的项目信息：
- en: '![](img/4047a3e3-1931-49b8-82b8-4674ba208e7a.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4047a3e3-1931-49b8-82b8-4674ba208e7a.png)'
- en: Here, we're using `Maven Project` and selecting the language as `Kotlin` and
    the Spring Boot version as `2.1.1 (SNAPSHOT)`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`Maven Project`，选择语言为`Kotlin`，Spring Boot版本为`2.1.1 (SNAPSHOT)`。
- en: We've added the `Security`, `Web`, and `DevTools` dependencies. You can check
    the list in `pom.xml`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已添加了`Security`、`Web`和`DevTools`依赖项。你可以在`pom.xml`中查看列表。
- en: When you select `Generate Project`, you'll get the project as a ZIP file. Unzip
    and open this project with your IDE.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你选择“生成项目”时，你会以ZIP文件的形式获得项目。解压并使用你的IDE打开此项目。
- en: 'It will take a moment to download and update the Maven dependencies. Here''s
    a screenshot of your project''s content:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载和更新Maven依赖项需要一点时间。以下是你的项目内容的截图：
- en: '![](img/0901227f-9f7f-40af-930f-25108808826a.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0901227f-9f7f-40af-930f-25108808826a.png)'
- en: If you need to add new dependencies or update the versions, modify `pom.xml`.
    If you want to create `kotlin` files, you need to create files under the `src->main->kotlin->{Package_NAME}` folder.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要添加新的依赖项或更新版本，请修改`pom.xml`。如果你想创建`kotlin`文件，你需要在`src->main->kotlin->{Package_NAME}`文件夹下创建文件。
- en: Configuring pom.xml
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置pom.xml
- en: 'In this `pom.xml`, you''ll have all the information regarding the project.
    Here, you can insert new dependencies, update versions, and so on. Here is the
    sample `pom.xml` (the full code is on the GitHub, at [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`pom.xml`中，你将获得有关项目的所有信息。在这里，你可以插入新的依赖项，更新版本等。以下是示例`pom.xml`（完整代码在GitHub上，[https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05)）：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuring a Spring bean
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Spring Bean
- en: To configure a Spring bean, we'll create an application file named `SSBasicAuthApplication.kt`
    and use Java configuration, which configures Spring Security without writing any
    XML code.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置Spring Bean，我们将创建一个名为`SSBasicAuthApplication.kt`的应用程序文件，并使用Java配置，它配置Spring
    Security而不需要编写任何XML代码。
- en: 'Here''s a simple code for the application file (`SSBasicAuthApplication.kt`):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序文件（`SSBasicAuthApplication.kt`）的简单代码：
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we've extended `SpringBootServletInitializer`. This runs `SpringApplication`
    from a traditional `WAR` archive. This class is responsible for binding the `Servlet`,
    `Filter`, and `ServletContextInitializer` beans from the application context to
    the server.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们扩展了`SpringBootServletInitializer`。这将从传统的`WAR`存档中运行`SpringApplication`。此类负责将应用程序上下文中的`Servlet`、`Filter`和`ServletContextInitializer`豆绑定到服务器。
- en: '`@SpringBootApplication` is a convenience annotation that''s equivalent to
    declaring `@Configuration` and `@EnableAutoConfiguration` for this `SSBasicAuthApplication`
    class.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SpringBootApplication`是一个便利注解，相当于为`SSBasicAuthApplication`类声明`@Configuration`和`@EnableAutoConfiguration`。'
- en: Mention a package name or a collection of package names in the `@ComponentScan` annotation
    to specify the base packages. This is used with the `@Configuration` annotation
    to tell Spring packages to scan for annotated components.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在`@ComponentScan`注解中提及包名或包名集合，以指定基本包。这与`@Configuration`注解一起使用，以告诉Spring包扫描注解组件。
- en: Configuration for Spring Security
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security配置
- en: 'To add the configuration for Spring Security of our project, create a file
    named **`SSConfig.kt` **in the application package using the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要为我们的项目添加Spring Security配置，请在应用程序包中使用以下代码创建一个名为**`SSConfig.kt`**的文件：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We've annotated this class with `@Configuration`, which helps in the Spring
    annotation-based configuration. `@EnableWebSecurity` will enable the web security
    support of Spring Security.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`@Configuration`注解了此类，这有助于Spring基于注解的配置。`@EnableWebSecurity`将启用Spring Security的Web安全支持。
- en: We've extended `WebSecurityConfigurerAdapter` and this will give us access to
    overriding and customizing the Spring features. We're using HTTP Basic Authentication
    and all of our requests will be authenticated using this.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了`WebSecurityConfigurerAdapter`，这将使我们能够覆盖和自定义Spring功能。我们使用HTTP基本认证，并且所有请求都将使用此方法进行认证。
- en: If the authentication fails, we need to handle this. To do so, create an authentication
    entry point class named `AuthenticationEntryPoint.kt` and `autowire` it. It will
    help to retry this process again in case of the failure.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果认证失败，我们需要处理这种情况。为此，创建一个名为`AuthenticationEntryPoint.kt`的认证入口点类并将其`autowire`。它将帮助在失败的情况下再次尝试此过程。
- en: Here we are using the `sunnat629` username, the `password` password, and the `USER`
    role.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用用户名`sunnat629`、密码`password`和`USER`角色。
- en: Configuring an authentication entry point
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置认证入口点
- en: Configure the authentication entry point to handle the failed authentication.
    When the credentials aren't authorized, this class is mainly responsible for sending
    the response.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 配置认证入口点以处理失败的认证。当凭证未被授权时，此类主要负责发送响应。
- en: Here's the code of an authentication entry point class named **`AuthenticationEntryPoint.kt`:**
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是名为**`AuthenticationEntryPoint.kt`**的认证入口点类的代码：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we've extended `BasicAuthenticationEntryPoint()`. This will return a full
    description of a `401 Unauthorized` response to the client.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们扩展了`BasicAuthenticationEntryPoint()`。这将向客户端返回`401 Unauthorized`响应的完整描述。
- en: '`401 Unauthorized Error` is an HTTP response status code. This indicates that
    the request sent by the client couldn''t be authenticated.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`401 Unauthorized Error`是一个HTTP响应状态码。这表示客户端发送的请求无法被认证。'
- en: Configuring Spring WebApplicationInitializer
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Spring WebApplicationInitializer
- en: A Spring `WebApplicationInitializer` uses a Servlet 3.0+ implementation to configure
    `ServletContext` programmatically.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Spring `WebApplicationInitializer`使用Servlet 3.0+实现来程序化配置`ServletContext`。
- en: Here's the sample code of the `WebApplicationInitializer` class, called** `MyApplicationInitializer.kt`:**
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`WebApplicationInitializer`类的示例代码，称为**`MyApplicationInitializer.kt`**：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This class will help to map the project URL path, `"\"`, using start. As we
    are using a code-based annotation in place of an XML configuration, we are using `AnnotationConfigWebApplicationContext`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程将帮助您使用`start`映射项目URL路径`"\"`。由于我们使用基于代码的注解代替XML配置，因此我们使用`AnnotationConfigWebApplicationContext`。
- en: Then we have created and registered the dispatcher servlet.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建并注册了分发器servlet。
- en: Creating a user model
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户模型
- en: By accessing a simple REST API, we're creating a user model class. When the
    client inputs a correct username and password, this will return a simple JSON
    output of some user details.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问简单的REST API，我们创建了一个用户模型类。当客户端输入正确的用户名和密码时，这将返回一些用户详情的简单JSON输出。
- en: 'Here is the code of `Users.kt`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`Users.kt`的代码：
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this user model, we have an `id`, a `name`, an `email`, and a `contactNumber`.
    We'll create a JSON-type REST API that will be protected by our security system.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个用户模型中，我们有一个`id`，一个`name`，一个`email`和一个`contactNumber`。我们将创建一个受我们安全系统保护的JSON类型REST
    API。
- en: Creating a controller
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: The controller class will map the URL path of the project. Here, we will use
    the `GET` or `POST` `HTTP` request functions to create the REST API. Here's a
    sample code of the controller of the project, named **`UserController.kt`:**
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器类将映射项目的URL路径。在这里，我们将使用`GET`或`POST` `HTTP`请求函数来创建REST API。以下是项目控制器的一个示例代码，命名为**`UserController.kt`**：
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we've created a user list of five people with the user model. In a controller,
    the `@RequestMapping` annotation is applied to the class level and/or the method
    level. This maps a particular request path onto a controller. With the `@GetMapping(path
    = ["/users"])` annotation, the client will send a `GET` request to get the list
    of the users if the Http status is `OK`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用用户模型创建了一个包含五人的用户列表。在控制器中，`@RequestMapping`注解应用于类级别和/或方法级别。这会将特定的请求路径映射到控制器。使用`@GetMapping(path
    = ["/users"])`注解，如果HTTP状态是`OK`，客户端将发送`GET`请求以获取用户的列表。
- en: Using the HTTP client
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTP客户端
- en: To see the output, open your third-party HTTP client tools. Here, we're using
    Insomnia.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看输出，请打开你的第三方HTTP客户端工具。在这里，我们使用Insomnia。
- en: After you run the project, open Insomnia.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目后，打开Insomnia。
- en: 'Please follow these steps to test the project:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤测试项目：
- en: Create a New Request with a name.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有名称的新请求。
- en: In the GET input box, put the `http://localhost:8080/user` URL. Here, `localhost:8080`
    is the root URL and as we use `@RequestMapping(path = ["/user"], method = [RequestMethod.GET])`
    in the controller class, the project will work under the `http://localhost:8080/user`
    path.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GET输入框中，输入`http://localhost:8080/user` URL。在这里，`localhost:8080`是根URL，因为我们使用`@RequestMapping(path
    = ["/user"], method = [RequestMethod.GET])`在控制器类中，项目将在`http://localhost:8080/user`路径下运行。
- en: 'If you hit the Send button, you''ll see an `HTTP Status 401 - Bad credentials` error,
    as shown in the following screenshot:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击发送按钮，你会看到一个`HTTP Status 401 - Bad credentials`错误，如下面的截图所示：
- en: '![](img/d117a43c-a6bc-4e69-ab94-3b5758114780.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d117a43c-a6bc-4e69-ab94-3b5758114780.png)'
- en: Although you're using the basic authentication, you have to input a **Username**
    and **Password** to complete this request. You need to click on the Auth (second
    tab) and select `Basic` auth; you can enter the **Username** and **Password** there.
    If you input a random username and password, you'll also get the same error.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你使用的是基本认证，但你必须输入**用户名**和**密码**才能完成此请求。你需要点击Auth（第二个标签）并选择`Basic`认证；你可以在那里输入**用户名**和**密码**。如果你输入随机的用户名和密码，你也会得到相同的错误。
- en: 'After entering the correct **Username** and **Password**, you''ll get the list
    of the users in JSON format as output, as shown in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入正确的**用户名**和**密码**后，你将得到以JSON格式输出的用户列表，如下面的截图所示：
- en: '![](img/7f32d0f3-0f92-4f2a-82af-f4b5e82cc79e.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f32d0f3-0f92-4f2a-82af-f4b5e82cc79e.png)'
- en: You can also test in the browser. There, you'll be asked to input the **Username**
    and **Password**.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在浏览器中测试。在那里，你会被要求输入**用户名**和**密码**。
- en: 'You can also use the browser to see the REST API:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用浏览器查看REST API：
- en: '![](img/4baeb0f8-550c-40e2-ba42-9dd827b76de6.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4baeb0f8-550c-40e2-ba42-9dd827b76de6.png)'
- en: 'After inserting the username and password, we can see the user list:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入用户名和密码后，我们可以看到用户列表：
- en: '![](img/944f295e-d503-4c56-a601-0776e8922b25.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/944f295e-d503-4c56-a601-0776e8922b25.png)'
- en: You've created a very simple project using Spring Security basic authentication.
    We hope that from now on you can write your own auth-based project with the help
    of Spring Security.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用Spring Security基本认证创建了一个非常简单的项目。我们希望从现在开始，你可以借助Spring Security编写自己的基于认证的项目。
- en: Creating an Android app
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Android应用程序
- en: 'It''s time to create a simple Android app as a client that will retrieve the
    REST API from our base authentication server. First of all, we need to create
    an app from Android Studio and fill in your project name and the company domain.
    Don''t forget to check `Include Kotlin support`. Here''s a screenshot of the create
    application project window:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候创建一个简单的Android应用程序作为客户端，从我们的基本认证服务器检索REST API了。首先，我们需要在Android Studio中创建一个应用程序并填写你的项目名称和公司域名。别忘了勾选`Include
    Kotlin support`。以下是创建应用程序项目窗口的截图：
- en: '![](img/aabf30ec-8bc8-41b7-ae73-8591beadad9f.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aabf30ec-8bc8-41b7-ae73-8591beadad9f.png)'
- en: Select the minimum API version from the Phone and Tablet option. There's no
    need to add other options for this project. After clicking Next, you can select
    Empty Activity in the **Add an Activity to Mobile** window. After renaming the
    **Activity Name** and **layout**, click Finish. After building the gradle, you'll
    be ready to start creating an Android app.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从手机和平板选项中选择最低 API 版本。对于这个项目，不需要添加其他选项。点击下一步后，您可以在 **Add an Activity to Mobile**
    窗口中选择 Empty Activity。在重命名 **Activity Name** 和 **layout** 后，点击完成。构建 gradle 后，您就可以开始创建
    Android 应用了。
- en: Now, let's see how to implement the project's dependencies in Gradle.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在 Gradle 中实现项目的依赖项。
- en: Gradle information
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle 信息
- en: 'In the Gradle file, mention the Kotlin dependency and the application Gradle
    version. Here are the details of my Android Studio''s Gradle file:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Gradle 文件中，提及 Kotlin 依赖项和应用程序 Gradle 版本。以下是我的 Android Studio 的 Gradle 文件详情：
- en: '[PRE16]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, our Gradle version is `3.2.1` and the Kotlin version is `1.3.10`
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的 Gradle 版本是 `3.2.1`，Kotlin 版本是 `1.3.10`
- en: Gradle dependencies
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle 依赖项
- en: 'In this Gradle file, we''ll implement the dependencies of Retrofit, which will
    help us to fetch the JSON-type REST API from our previous project. Here are all
    the dependencies:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 Gradle 文件中，我们将实现 Retrofit 的依赖项，这将帮助我们从前一个项目中获取 JSON 类型的 REST API。以下是所有依赖项：
- en: '[PRE17]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Creating a user model
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户模型
- en: We'll fetch the REST API of our basic authentication-based Spring project, which
    was created using basic authentication. Although the REST API has four entities
    (`id`, `name`, `email`, and `contactNumber`), we'll create a model based on this
    REST API.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获取基于基本身份验证的 Spring 项目的 REST API，该项目是使用基本身份验证创建的。尽管 REST API 有四个实体（`id`、`name`、`email`
    和 `contactNumber`），但我们将基于这个 REST API 创建一个模型。
- en: 'Here''s the output of the REST API where we can see five users'' details:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 REST API 的输出，我们可以看到五个用户的详细信息：
- en: '![](img/26a0fb10-ac11-46cd-b71f-a3f08f20d12e.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26a0fb10-ac11-46cd-b71f-a3f08f20d12e.png)'
- en: According to the API, we'll create a user model for the client side. Here's
    the model class, named **`UserModel`****:**
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 根据API，我们将为客户端创建一个用户模型。这是名为 **`UserModel`** 的模型类：**
- en: '[PRE18]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, we need to create an interface that will have the HTTP request functions.
    In this project, we'll only use a `GET` function that retrieves all the details
    of users. Here, we're using the `GET` retrofit annotation to encode details about
    the parameters and request function.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个接口，它将包含 HTTP 请求函数。在这个项目中，我们只会使用一个 `GET` 函数来检索所有用户的详细信息。在这里，我们使用 `GET`
    Retrofit 注解来编码有关参数和请求函数的详细信息。
- en: 'Here''s the code of the `UserService` interface:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `UserService` 接口的代码：
- en: '[PRE19]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We'll search the `/user` endpoint and this will provide a list of user models.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将搜索 `/user` 端点，这将提供一个用户模型列表。
- en: Implementing the user service
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现用户服务
- en: Retrofit client calls the Gerrit API and handles the result by printing the
    result of the call to the console.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Retrofit 客户端调用 Gerrit API 并通过将调用结果打印到控制台来处理结果。
- en: Create a class where we'll build a Retrofit client, and this will call the API
    and handle the result. This will be responsible for controlling all the tasks
    using the `Retrofit.builder` class and configuring it with the base of the given
    URL.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个类，我们将构建 Retrofit 客户端，这将调用 API 并处理结果。这将负责使用 `Retrofit.builder` 类控制所有任务，并使用给定
    URL 的基础进行配置。
- en: 'Here''s the code of `UserServiceImpl.kt`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `UserServiceImpl.kt` 的代码：
- en: '[PRE20]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: According to this code, we set `.client()` with `username` and `password`. Then
    we implemented the `YOUR_SERVER_DOMAIN` (assume the URL of the Rest API server
    is **`http://localhost:8080`**), `baseUrl() `, and we've used  `OkHttpClient` as
    the client.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这段代码，我们使用 `username` 和 `password` 设置了 `.client()`。然后我们实现了 `YOUR_SERVER_DOMAIN`（假设
    Rest API 服务器的 URL 为 **`http://localhost:8080`**），`baseUrl()`，并且我们使用了 `OkHttpClient`
    作为客户端。
- en: Authenticating with OkHttp interceptors
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OkHttp 拦截器进行身份验证
- en: Although we're using a base authentication security, we need a `username` and
    `password` to grant access to this REST API. Here, we're using `OkHttp` interceptors
    for authentication. This will help you to send a request and get the auth permission
    to access the resources.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们使用的是基于基本身份验证的安全机制，但我们需要一个 `username` 和 `password` 来授权访问这个 REST API。在这里，我们使用
    `OkHttp` 拦截器进行身份验证。这将帮助您发送请求并获得访问资源的认证权限。
- en: 'Here, we''ve called the `BasicAuthInterceptor` class in `OkHttpClient.Builder()`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在 `OkHttpClient.Builder()` 中调用了 `BasicAuthInterceptor` 类：
- en: '[PRE21]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here''s the class of `BasicAuthInterceptor.kt`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `BasicAuthInterceptor.kt` 的类：
- en: '[PRE22]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this class, only the credentials are added as your user details. Here, a
    client will make a request using the `username` and `password` credentials. During
    every request, this interceptor acts before it's performed and alters the request
    header. Consequently, you don't need to add `@HEADER("Authorization")` to the
    API function.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，只添加了凭证作为用户详情。在这里，客户端将使用`username`和`password`凭证发出请求。在每次请求期间，这个拦截器在执行之前起作用并修改请求头。因此，你不需要在API函数中添加`@HEADER("Authorization")`。
- en: Calling callbacks
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用回调
- en: Here, we're calling `CallBack<>` from `MainActivity`. This callback response
    comes from a server or offline requests. This means returning the result of a
    long-running function at a later moment in time.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从`MainActivity`调用`CallBack<>`。这个回调响应来自服务器或离线请求。这意味着在稍后的时间点返回长时间运行函数的结果。
- en: 'Check the `MainActivity.kt` code to use the `CallBack` function and handle
    the result:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`MainActivity.kt`代码以使用`CallBack`函数并处理结果：
- en: '[PRE23]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s discuss the preceding code as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们如下讨论前面的代码：
- en: First, we need to initialize `UserServiceImpl().getGithubServiceImpl(username,password)` so
    that we can call `getUserList()` from `UserService`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要初始化`UserServiceImpl().getGithubServiceImpl(username,password)`，这样我们就可以从`UserService`调用`getUserList()`。
- en: Then we'll call `enqueue(retrofit2.Callback<T>)`, which will be executed asynchronously,
    send the request, and get the response.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将调用`enqueue(retrofit2.Callback<T>)`，这将异步执行，发送请求并获取响应。
- en: '`enqueue()` has two functions: `onResponse()` and `onFailure()`. If there are
    any server-related errors, it will call `onFailure()`, and if it gets the response
    and the resources, it will call `onResponse()`. We can also use the resource of
    the `onResponse()` function.'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`enqueue()`有两个功能：`onResponse()`和`onFailure()`。如果有任何与服务器相关的错误，它将调用`onFailure()`，如果它收到响应和资源，它将调用`onResponse()`。我们还可以使用`onResponse()`函数的资源。'
- en: Here, we'll get a response of the `UserModel` list. We can show the list in
    our application UI.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将获取`UserModel`列表的响应。我们可以在应用程序UI中显示这个列表。
- en: Creating the UI
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建UI
- en: In the created `main_activity` layout, we'll show a list of the user details
    where we show the name, email ID, and contact number of a user—we'll use `ListView`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建的`main_activity`布局中，我们将显示用户详情的列表，其中显示用户的姓名、电子邮件ID和联系电话——我们将使用`ListView`。
- en: 'Here''s the code of the `mainActivity` layout of the `MainActivity` class:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`MainActivity`类的`mainActivity`布局的代码：
- en: '[PRE24]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this layout, we have one `TextView` and one `ListView`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个布局中，我们有一个`TextView`和一个`ListView`。
- en: We'll use this `ListView` in the `onResponse()` function of `MainActivity`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`MainActivity`的`onResponse()`函数中使用这个`ListView`。
- en: 'We''ll get the list and create a custom adapter to show the user list, as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获取列表并创建一个自定义适配器来显示用户列表，如下所示：
- en: '[PRE25]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, we have a custom adapter where we'll send the context and the `Array`
    list of the users.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个自定义适配器，我们将发送上下文和用户的`Array`列表。
- en: Creating a custom list adapter
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义列表适配器
- en: 'To show the output of the REST API, we need to create a custom list adapter
    and so we need to design an XML file of the custom list adapter. Here''s the XML
    code for each row in the list:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示REST API的输出，我们需要创建一个自定义列表适配器，因此我们需要设计一个自定义列表适配器的XML文件。以下是列表中每一行的XML代码：
- en: '[PRE26]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here, we have a `TextView` of `name`, `contactNumber`, and `email`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个包含`name`、`contactNumber`和`email`的`TextView`。
- en: 'After that, we''ll create the adapter, named `UserListAdapter.kt`,as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建适配器，命名为`UserListAdapter.kt`，如下所示：
- en: '[PRE27]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This class extends `BaseAdapter()`, which will add several inherited functions.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类扩展了`BaseAdapter()`，这将添加几个继承的功能。
- en: 'Then you need to add `LayoutInflater`, which converts the XML layout into corresponding `ViewGroups` and Widgets:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你需要添加`LayoutInflater`，它将XML布局转换为相应的`ViewGroups`和`Widgets`：
- en: '`getView()` creates a view for a row of the list. Here, you''ll define all
    the UI-based information.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getView()`为列表的一行创建一个视图。在这里，你需要定义所有基于UI的信息。'
- en: '`getItem()` returns the position of the list that''s obtained from the server.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getItem()`返回从服务器获取的列表位置。'
- en: '`getItemId()` defines a unique ID for each row in the list.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getItemId()`为列表中的每一行定义一个唯一的ID。'
- en: '`getCount()` returns the size of the list.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCount()`返回列表的大小。'
- en: 'Now, in `getView()`, you''ll add the element of the layout, as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`getView()`中，你将添加布局元素，如下所示：
- en: '[PRE28]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You should never perform long-running tasks on the main thread. This will result
    in an Application Not Responding (ANR).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 你永远不应该在主线程上执行长时间运行的任务。这将导致应用程序无响应（ANR）。
- en: Mobile applications
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用程序
- en: 'Once we''ve completed our code, it''s time to see the output. Run your basic
    authentication Spring project and then run your app. Here''s the output of your
    app, where we can see the user details:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了代码，就是时候查看输出了。运行你的基本认证 Spring 项目，然后运行你的应用程序。以下是应用程序的输出，我们可以看到用户详情：
- en: '![](img/bb1d3a80-1f6b-4d39-9de8-b3a746152d48.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb1d3a80-1f6b-4d39-9de8-b3a746152d48.png)'
- en: 'In the following screenshot, the left side is the server API, where we have
    the user details, and on the right we have the client output of the Android application:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，左侧是服务器 API，其中包含用户详情，右侧是 Android 应用程序的客户端输出：
- en: '![](img/2deb9410-34b7-440c-9604-1e9e61a024d0.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2deb9410-34b7-440c-9604-1e9e61a024d0.png)'
- en: We've created a client application that will fetch the data of a basic authentication
    Spring-Security-based REST API.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个客户端应用程序，它将获取基于基本认证的 Spring-Security REST API 的数据。
- en: Securing REST with Spring Security OAuth2
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Spring Security OAuth2 保护 REST
- en: In the last section, we learned how to make a basic authorization project. This
    provides solid security for a project, but it doesn't have the dimension of security
    required for a complex or enterprise-level project. Since this security can be
    broken or hacked, we require a more grounded security framework to handle these
    sorts of hacking. OAuth is one of the best security frameworks – it's exceedingly
    utilized by Google, Facebook, Twitter, and many other popular platforms. Now we'll
    learn about OAuth2 and its use.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节，我们学习了如何创建一个基本的授权项目。这为项目提供了坚实的基础安全，但它不具备复杂或企业级项目所需的安全维度。由于这种安全可能被破解或黑客攻击，我们需要一个更稳固的安全框架来处理这类黑客攻击。OAuth
    是最好的安全框架之一——它被 Google、Facebook、Twitter 和许多其他流行的平台广泛使用。现在我们将学习 OAuth2 及其应用。
- en: What is OAuth2?
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 OAuth2？
- en: '**OAuth** is a safe authorization convention, and **OAuth2** is the second
    form of the OAuth protocol. This protocol is called a **framework**. OAuth2 enables
    a third-party application to provide limited access to an HTTP service, such as
    Google, GitHub, or Twitter. This access is either intended for the benefit of
    the proprietor or to enable the third-party application to get access to the user
    account. This creates an authorization stream between web and desktop or mobile
    devices. It has some important roles that control the users'' access limitation.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth** 是一种安全的授权协议，**OAuth2** 是 OAuth 协议的第二版。这个协议被称为**框架**。OAuth2 允许第三方应用程序提供对
    HTTP 服务的有限访问，例如 Google、GitHub 或 Twitter。这种访问要么是为了所有者的利益，要么是为了使第三方应用程序能够访问用户账户。这就在网页和桌面或移动设备之间创建了一个授权流。它有一些重要的角色，用于控制用户的访问限制。'
- en: OAuth2 Roles
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth2 角色
- en: 'There are four roles in OAuth2:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth2 有四个角色：
- en: '**Resource Owner**: Normally, this is you.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源所有者**: 通常情况下，这就是你。'
- en: '**Resource Server**: The server host''s protected data. For example, Google,
    Github, or Twitter hosts your personal and professional information.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源服务器**: 服务器托管受保护的数据。例如，Google、Github 或 Twitter 托管你的个人和职业信息。'
- en: '**Client**: An application that requests a resource server to access data.
    The client can be a website, a desktop application, or even a mobile application.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**: 一个请求资源服务器访问数据的程序。客户端可以是网站、桌面应用程序，甚至是移动应用程序。'
- en: '**Authorization Server**: This server will issue an access token to the client.
    This token will be the key to accessing the information and it''s mainly used
    to request the resource server for the client.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权服务器**: 这个服务器将向客户端颁发访问令牌。这个令牌将是访问信息的密钥，它主要用于请求资源服务器以供客户端使用。'
- en: 'Here''s a diagram of the general workflow of the OAuth protocol (the flow isn''t
    fixed for every protocol; it''s based on the type of authorization granted):'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 OAuth 协议的一般工作流程图（每个协议的流程并不固定；它基于授权的类型）：
- en: '![](img/3a2aa391-2ab8-4090-bee9-6ed59fd69490.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3a2aa391-2ab8-4090-bee9-6ed59fd69490.png)'
- en: 'Here are the steps of the workflow:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是工作流程的步骤：
- en: To access the service resources, the **Application** sends the **Authorization
    Request** to the **User**.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了访问服务资源，**应用程序**向**用户**发送**授权请求**。
- en: The **Application** receives an **Authorization Grant** if the **User** authorizes
    the request.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果**用户**授权请求，**应用程序**将收到**授权许可**。
- en: The **Application** sends the grant to the **Authorization Server** for an **Access
    Token**.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用程序**将授权许可发送给**授权服务器**以获取**访问令牌**。'
- en: If the **Authorization Grant** is valid and the **Application** is authenticated,
    the **Authorization Server** creates an **Access Token**.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果**授权许可**有效且**应用程序**已认证，**授权服务器**将创建一个**访问令牌**。
- en: The **Application** gets the **Access Token** from the **Authorization Server**.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用程序** 从 **授权服务器** 获取 **访问令牌**。'
- en: The application sends a request to the **Resource Server** for resources from
    the server as well as authentication.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序向 **资源服务器** 发送请求，以从服务器获取资源以及进行身份验证。
- en: Using the token, the **Resource Server** provides the requested recourses to
    the **Application**.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用令牌，**资源服务器** 向 **应用程序** 提供请求的资源。
- en: OAuth2 grant types
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth2 授权类型
- en: 'There are four kinds of OAuth2 Grants:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种类型的 OAuth2 授权：
- en: '**Authorization Code:** This is used in a server-side application and allows
    the client to get a long-lasting access token. However, this token will be invalidated
    if the client asks the server for a new token.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权代码**：在服务器端应用程序中使用，允许客户端获取一个长期访问令牌。然而，如果客户端请求服务器获取新令牌，此令牌将被无效化。'
- en: '**Implicit:** For the most part, this is utilized with mobile or web applications.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隐式**：大部分情况下，这用于移动或 Web 应用程序。'
- en: '**Resource Owner Password Credentials:** In this grant, the credentials are first sent
    to the customer. Then they''re sent to the authorization server.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源所有者密码凭证**：在这个授权中，凭证首先发送给客户。然后它们被发送到授权服务器。'
- en: '**Client Credentials:** This is used when the client itself is the resource
    owner. There''s no authorization to get from the client''s end.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端凭证**：当客户端本身是资源所有者时使用。不需要从客户端端获取授权。'
- en: So, that's a brief summary of the OAuth protocol. Now let's create a project
    using the Spring Security OAuth2 modules.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是 OAuth 协议的简要总结。现在让我们使用 Spring Security OAuth2 模块创建一个项目。
- en: Creating a project
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: We'll create a simple Spring Security OAuth2-based project. To do so, go to [https://start.spring.io/](https://start.spring.io/)
    and modify the given field with your requirement.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的基于 Spring Security OAuth2 的项目。为此，请访问 [https://start.spring.io/](https://start.spring.io/)
    并根据您的需求修改给定的字段。
- en: Here, we're using the Maven Project and selecting the language as Kotlin. The
    Spring Boot version is 2.1.1 (SNAPSHOT).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 Maven 项目，并将语言选择为 Kotlin。Spring Boot 版本为 2.1.1 (SNAPSHOT)。
- en: After you select Generate Project, you'll get the project as a ZIP file. Unzip
    and open this project with your IDE.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 选择生成项目后，您将获得一个 ZIP 文件的项目。解压并使用您的 IDE 打开此项目。
- en: Maven dependencies
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 依赖项
- en: Our main dependencies are `Web`, `Security`, `Cloud Security`, `Cloud OAuth2`, `JPA`,
    `H2`, `Lombok`, and `Thymeleaf`.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要依赖项是 `Web`、`Security`、`Cloud Security`、`Cloud OAuth2`、`JPA`、`H2`、`Lombok`
    和 `Thymeleaf`。
- en: 'Here are the mentioned Maven dependencies in `pom.xml`:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `pom.xml` 中提到的 Maven 依赖项：
- en: '[PRE29]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Configuring the resource server
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置资源服务器
- en: A resource server will have all the protected resources, and these are protected
    by the OAuth2 token. It's time to learn about this resource server with the help
    of the code. Create a resource server named  **`ResourceServerConfig.kt`**.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 资源服务器将拥有所有受保护的资源，这些资源由 OAuth2 令牌保护。现在是时候借助代码来了解这个资源服务器了。创建一个名为 **`ResourceServerConfig.kt`**
    的资源服务器。
- en: 'Here is the code of our **`ResourceServerConfig.kt`**:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们的 **`ResourceServerConfig.kt`** 代码：
- en: '[PRE30]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: To enable the features of the OAuth 2.0 resource-server mechanism, you need
    to add an annotation named `@EnableResourceServer`, and although it's a configuration
    class, you need to add the `@Configuration` annotation.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用 OAuth 2.0 资源服务器机制的功能，您需要添加一个名为 `@EnableResourceServer` 的注解，尽管它是一个配置类，但您需要添加
    `@Configuration` 注解。
- en: This class extends `ResourceServerConfigurerAdapter`, this then extends `ResourceServerConfigurer`,
    which will make it possible to override and configure `ResourceServerConfigurer`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此类扩展 `ResourceServerConfigurerAdapter`，然后扩展 `ResourceServerConfigurer`，这将使其能够覆盖和配置
    `ResourceServerConfigurer`。
- en: 'We override `configure(http: HttpSecurity?)`, where we mention which URL paths
    are protected and which are not protected.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '我们覆盖 `configure(http: HttpSecurity?)`，其中我们提到哪些 URL 路径受保护，哪些不受保护。'
- en: '`authorizeRequests()` permits confining access dependent on the utilization
    of `HttpServletRequest`.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`authorizeRequests()` 允许根据 `HttpServletRequest` 的使用来限制访问。'
- en: '`antMatchers()` refers to the implementation of the Ant-style path patterns
    in mappings.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`antMatchers()` 指的是映射中 Ant 风格路径模式实现的实现。'
- en: We use `.antMatchers("/").permitAll()`, which allows all users to access this
    URL path, `"/"`. In addition, we use `.antMatchers("/private").authenticated()`,
    which means a user needs a token to access this `/private` path.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `.antMatchers("/").permitAll()`，这允许所有用户访问此 URL 路径 `"/"`。此外，我们使用 `.antMatchers("/private").authenticated()`，这意味着用户需要令牌才能访问此
    `/private` 路径。
- en: Configuring the authorization server
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置授权服务器
- en: An authorization server is a configuration class. In this class, we'll create
    a grant-type environment. A grant type helps a client get an access token from
    the end user. This server's configuration is designed to implement the client
    details' service and token service. It's also responsible for enabling or disabling
    certain components of the mechanism globally. Now, create an authorization server
    class named `AuthorizationServerConfig.kt`.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 授权服务器是一个配置类。在这个类中，我们将创建一个授权类型环境。授权类型帮助客户端从最终用户那里获取访问令牌。这个服务器的配置旨在实现客户端详情服务和令牌服务。它还负责全局启用或禁用机制中的某些组件。现在，创建一个名为
    `AuthorizationServerConfig.kt` 的授权服务器类。
- en: 'Here''s the code for `AuthorizationServerConfig.kt`:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `AuthorizationServerConfig.kt` 的代码：
- en: '[PRE31]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `@EnableAuthorizationServer` annotation enables the features of the OAuth
    2.0 authorization server mechanism. You need to add the `@Configuration` annotation
    to make it the configuration class.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableAuthorizationServer` 注解启用了OAuth 2.0授权服务器机制的功能。您需要添加 `@Configuration`
    注解以使其成为配置类。'
- en: 'This class extends `AuthorizationServerConfigurerAdapter`, which then extends `ResourceServerConfigurer`.
    It will make it possible to override and configure `AuthorizationServerConfigurer`.
    There are three types of `configure()` functions:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类扩展了 `AuthorizationServerConfigurerAdapter`，它又扩展了 `ResourceServerConfigurer`。这将使得能够覆盖和配置
    `AuthorizationServerConfigurer`。有三个类型的 `configure()` 函数：
- en: '`ClientDetailsServiceConfigurer`: This defines the details service of a client.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClientDetailsServiceConfigurer`: 这定义了客户端的详情服务。'
- en: '`AuthorizationServerSecurityConfigurer`: This defines the security constraints
    on the token endpoint.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthorizationServerSecurityConfigurer`: 这定义了令牌端点的安全约束。'
- en: '`AuthorizationServerEndpointsConfigurer`: This defines the authorization and
    token endpoints and the token services.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthorizationServerEndpointsConfigurer`: 这定义了授权和令牌端点以及令牌服务。'
- en: 'According to our code, in `configure(security: AuthorizationServerSecurityConfigurer?)`,
    we define whether or not to check the token endpoint which is authenticated.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '根据我们的代码，在 `configure(security: AuthorizationServerSecurityConfigurer?)` 中，我们定义了是否检查已认证的令牌端点。'
- en: 'In `configure(clients: ClientDetailsServiceConfigurer?)`, we define the `ClientDetails`
    service. In this project, we didn''t use a database, so we use an in-memory implementation
    of the `ClientDetails` service. Here are the important attributes of the client:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '在 `configure(clients: ClientDetailsServiceConfigurer?)` 中，我们定义了 `ClientDetails`
    服务。在这个项目中，我们没有使用数据库，因此我们使用 `ClientDetails` 服务的内存实现。以下是客户端的重要属性：'
- en: '`withClient()`: This is required and this is where we define the client ID, `"client"`.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`withClient()`: 这是必需的，这是定义客户端ID `"client"` 的地方。'
- en: '`secret()`: This is required for trusted clients and is where we define the secret, `"secret"`,
    but we have to encode the password. Here, we inject `BCryptPasswordEncoder` to
    encode the password or secret key.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secret()`: 这是受信任客户端必需的，这是定义密钥 `"secret"` 的地方，但我们必须对密码进行编码。在这里，我们注入 `BCryptPasswordEncoder`
    来编码密码或密钥。'
- en: '`authorizedGrantTypes()`: We have used the `"password"` grant type that''s
    authorized for the client to use.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authorizedGrantTypes()`: 我们使用了 `"password"` 授权类型，这是客户端被授权使用的。'
- en: '`scope()`: The scope is used to limit the access for the resources of a client.
    If the scope is undefined or empty, that means the client isn''t limited by scope.
    Here, we use `"read"`, `"write"`, and `"trust"`.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope()`: 范围用于限制客户端对资源的访问。如果范围未定义或为空，则表示客户端不受范围限制。在这里，我们使用 `"read"`、`"write"`
    和 `"trust"`。'
- en: '`authorities()`: This is used to grant the client.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authorities()`: 这用于授予客户端。'
- en: '`resourceId()`: This optional ID is used for the resource.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resourceId()`: 这是一个可选ID，用于资源。'
- en: '`accessTokenValiditySeconds()`: This refers to the token validity time duration.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accessTokenValiditySeconds()`: 这指的是令牌的有效时间长度。'
- en: 'In `configure(endpoints: AuthorizationServerEndpointsConfigurer?)`, we''ve
    configured `AuthorizationEndpoint`, which supports the grant type. We inject `AuthenticationManager` and
    configure it via `AuthorizationServerEndpointsConfigurer`.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '在 `configure(endpoints: AuthorizationServerEndpointsConfigurer?)` 中，我们已配置了
    `AuthorizationEndpoint`，它支持授权类型。我们注入 `AuthenticationManager` 并通过 `AuthorizationServerEndpointsConfigurer`
    进行配置。'
- en: Creating the security config
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建安全配置
- en: 'This is a Java configuration class for Spring Security that enables users to
    configure Spring Security easily without the use of XML. Create a secure config
    file named `SecurityConfiguration.kt`. Here''s the code for the class:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于Spring Security的Java配置类，它允许用户在不使用XML的情况下轻松配置Spring Security。创建一个名为 `SecurityConfiguration.kt`
    的安全配置文件。以下是类的代码：
- en: '[PRE32]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is a configuration class, so you need to add the `@Configuration` annotation.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个配置类，因此你需要添加 `@Configuration` 注解。
- en: This class extends `WebSecurityConfigurerAdapter`, and the `@EnableWebSecurity` annotation
    provides the web-based security mechanism.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 此类扩展了 `WebSecurityConfigurerAdapter`，而 `@EnableWebSecurity` 注解提供了基于 Web 的安全机制。
- en: According to this code, we use two `@Bean` annotations in the required functions.
    We inject `AuthenticationManager` and configure it via `AuthorizationServerEndpointsConfigurer`.
    The `BCryptPasswordEncoder` instance is used to encode the passwords.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此代码，我们在必需的功能中使用了两个 `@Bean` 注解。我们注入 `AuthenticationManager` 并通过 `AuthorizationServerEndpointsConfigurer`
    进行配置。使用 `BCryptPasswordEncoder` 实例来编码密码。
- en: 'In `configure(http: HttpSecurity?)`, note the following:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '在 `configure(http: HttpSecurity?)` 中，请注意以下内容：'
- en: '`antMatcher("/**").authorizeRequests()` means that this `HttpSecurity` will
    only be applicable to URLs that start with `/**`.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`antMatcher("/**").authorizeRequests()` 表示此 `HttpSecurity` 只适用于以 `/**` 开头的
    URL。'
- en: '`anyRequest().authenticated()` utilization guarantees that any request to our
    application requires the client to be confirmed.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anyRequest().authenticated()` 的使用保证了任何对我们的应用程序的请求都需要客户端进行确认。'
- en: '`formLogin()` allows users to authenticate with form-based logins.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formLogin()` 允许用户通过基于表单的登录进行身份验证。'
- en: '`httpBasic()` means the user is validated with HTTP Basic authentication.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`httpBasic()` 表示用户通过 HTTP Basic 身份验证进行验证。'
- en: 'In `configure(auth: AuthenticationManagerBuilder?)`, note the following:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '在 `configure(auth: AuthenticationManagerBuilder?)` 中，请注意以下内容：'
- en: '`inMemoryAuthentication()` includes memory confirmation to `AuthenticationManagerBuilder`
    and restores `InMemoryUserDetailsManagerConfigurer` to permit customization of
    the in-memory validation.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inMemoryAuthentication()` 包括将内存确认添加到 `AuthenticationManagerBuilder`，并将 `InMemoryUserDetailsManagerConfigurer`
    恢复以允许自定义内存验证。'
- en: '`passwordEncoder(passwordEncoder())` means that the password will be an encoded
    password.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passwordEncoder(passwordEncoder())` 表示密码将是一个编码密码。'
- en: '`withUser("user")` and `withUser("admin")` is the name of the user.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`withUser("user")` 和 `withUser("admin")` 是用户的名称。'
- en: '`password(passwordEncoder().encode("password"))` is the encoded password.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password(passwordEncoder().encode("password"))` 是编码后的密码。'
- en: '`roles("USER")` and `roles("ADMIN")` is the role of a user.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roles("USER")` 和 `roles("ADMIN")` 是用户的角色。'
- en: Creating the controller class
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器类
- en: 'Create a controller class named `UserController.kt`, as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `UserController.kt` 的控制器类，如下所示：
- en: '[PRE33]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, we've annotated this class as `@RestController`, which handles all the
    web requests. `@RequestMapping("/")` means that the default URL path is `"/"`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将此类标注为 `@RestController`，它处理所有 Web 请求。`@RequestMapping("/")` 表示默认 URL
    路径是 `"/"`。
- en: The `@GetMapping` implemented functions are `home()`, which can be accessed
    by everyone, and `securedArea()`, which can be accessed only by those who have
    the *access token*. We configured these in the `ResourceServerConfig` class.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`@GetMapping` 实现的功能是 `home()`，任何人都可以访问，以及 `securedArea()`，只有拥有 *访问令牌* 的人才能访问。我们在
    `ResourceServerConfig` 类中配置了这些。'
- en: Creating the application class
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序类
- en: 'Lastly, create the application class, named `SpringSecurityOAuth2Application.kt`,
    which will convert your application into a SpringBoot application:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建一个名为 `SpringSecurityOAuth2Application.kt` 的应用程序类，这将把你的应用程序转换为 SpringBoot
    应用程序：
- en: '[PRE34]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Application properties
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序属性
- en: 'This step is optional, particularly in this project. Here, we just change the
    port number for this project. To change it, modify `application.properties` under
    the `resources`folder:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤是可选的，尤其是在这个项目中。在这里，我们只是更改了这个项目的端口号。要更改它，请修改 `resources` 文件夹下的 `application.properties`：
- en: '[PRE35]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, we change the port number to `8081`.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将端口号更改为 `8081`。
- en: Checking the output
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查输出
- en: 'If you''re reading this section, that means you''ve configured everything correctly.
    After finishing the project, you''ll have these files:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读本节，这意味着你已经正确配置了一切。完成项目后，你将拥有以下文件：
- en: 'After completing the setup, run the project. If there are no errors, you can
    find the runwindow. The following screenshot shows that there are no errors and
    the application is ready to use:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 完成设置后，运行项目。如果没有错误，你可以找到运行窗口。以下截图显示没有错误，应用程序已准备好使用：
- en: '![](img/6e2f5ec2-e29c-4641-8b42-0288911faa18.png)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e2f5ec2-e29c-4641-8b42-0288911faa18.png)'
- en: Checking unprotected URLs
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查未受保护的 URL
- en: Now, open the *Insomnia* application.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开 *Insomnia* 应用程序。
- en: Create a `GET` request from the top inbox and use the `http://localhost:8081/open_for_all` URL.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部邮箱创建一个 `GET` 请求，并使用 `http://localhost:8081/open_for_all` 的 URL。
- en: 'Your result will look like the following screenshot:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果将类似于以下截图：
- en: '![](img/956bc690-72ea-4a2e-b902-eec4e709ee8a.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/956bc690-72ea-4a2e-b902-eec4e709ee8a.png)'
- en: In the `ResourceServerConfig` class, we configured that `"/open_for_all"` can
    be accessed by everyone.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ResourceServerConfig`类中，我们配置了`"/open_for_all"`可以被每个人访问。
- en: Getting access tokens
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取访问令牌
- en: Create a `POST` request from the top inbox and put down the `http://localhost:8081/oauth/token` URL.
    This is the default `POST` *URL* to get the token.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部邮箱创建一个`POST`请求，并写下`http://localhost:8081/oauth/token` URL。这是获取令牌的默认`POST`
    *URL*。
- en: 'Add three parameters—`username=sunnat`, `password=password`, and `grant_type=password—`in
    the Multipart window:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在多部分窗口中添加三个参数—`username=sunnat`、`password=password`和`grant_type=password`—：
- en: '![](img/b79568f5-19bf-4d32-b9c1-7f582311a7f4.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b79568f5-19bf-4d32-b9c1-7f582311a7f4.png)'
- en: You can find the information of `username` and `password` in the `SecurityConfiguration`
    class, and `grant_type` will be found in `AuthorizationServerConfig`. Here, we're
    using the **password** grant type.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`SecurityConfiguration`类中找到`username`和`password`的信息，而`grant_type`可以在`AuthorizationServerConfig`中找到。在这里，我们使用**密码**授权类型。
- en: Go to the **Basic** window and input the **username** and **password**. You
    can find this information in the `AuthorizationServerConfig` class, where the
    username is mentioned in `withClient()` and the password is `secret()`.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 前往**基本**窗口并输入**用户名**和**密码**。你可以在`AuthorizationServerConfig`类中找到这些信息，其中用户名在`withClient()`中提及，密码在`secret()`中。
- en: 'We added an image of the Insomnia tool where we wrote down the **username**
    and **pass****word. **Now click the send button. If there are no errors, you''ll
    get the following `access_token`:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一张图片，展示了我们记录了**用户名**和**密码**的Insomnia工具。**现在点击发送按钮**。如果没有错误，你将获得以下`access_token`：
- en: '![](img/2fb2b231-90a0-4d9e-af22-e2249b6e8482.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2fb2b231-90a0-4d9e-af22-e2249b6e8482.png)'
- en: 'You can see the `access_token` that will be used to access the protected resources. `expires_in`
    means that after `4469` seconds the token will expire. `"scope": "read write trust"`
    means you can read, write, and modify the resources.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以看到将用于访问受保护资源的`access_token`。"`expires_in`"表示在`4469`秒后令牌将过期。"`scope": "read
    write trust"`表示你可以读取、写入和修改资源。'
- en: Accessing the protected URL
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问受保护的URL
- en: We found the `access_token` and now we'll use it. To do this, create another
    `GET` request and insert `http://localhost:8081/private`.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了`access_token`，现在我们将使用它。为此，创建另一个`GET`请求并插入`http://localhost:8081/private`。
- en: 'As a parameter, use `access_token` with the value of the given token key, and
    click Send:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参数，使用具有给定令牌键值的`access_token`，然后点击发送：
- en: '![](img/a4b3e161-225e-4b04-bef5-76bdb512aa5f.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a4b3e161-225e-4b04-bef5-76bdb512aa5f.png)'
- en: Once that's done, you can access the `/private` URL, which is protected and
    configured in the `ResourceServerConfig` class.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，你可以访问受保护的`/private` URL，该URL在`ResourceServerConfig`类中进行了配置。
- en: We're now ready to use the OAuth2 Spring Security in our project.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已准备好在我们的项目中使用 OAuth2 Spring Security。
- en: Common mistakes and errors
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见错误和错误
- en: During this project, you may encounter some common errors.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你可能会遇到一些常见错误。
- en: For example, you might get some errors during building and running the project.
    To solve this, check that all versions of the dependencies are the latest. In
    addition, check whether every dependency is present. If you use the database,
    make sure you have the correct database and scheme name in `application.properties`.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在构建和运行项目时可能会遇到一些错误。为了解决这个问题，请检查所有依赖项的版本是否为最新。此外，请确保每个依赖项都已存在。如果你使用数据库，请确保在`application.properties`中你有正确的数据库和模式名称。
- en: 'In the `POST` request, sometimes you can find the following error message:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在`POST`请求中，有时你会找到以下错误信息：
- en: '![](img/d1d5e9c8-90b9-4bae-b247-5bf90ca2d651.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d1d5e9c8-90b9-4bae-b247-5bf90ca2d651.png)'
- en: 'The previous screenshot indicates that you entered an incorrect `grant_type`.
    Please check the parameter, as well as the `AuthorizationServerConfig` class where
    you mention the `grant_type`:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的截图表明你输入了错误的`grant_type`。请检查参数以及你提及`grant_type`的`AuthorizationServerConfig`类：
- en: '![](img/e36835a3-80c0-47dc-a8dc-c52f7499284b.png)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e36835a3-80c0-47dc-a8dc-c52f7499284b.png)'
- en: 'Please check the `SecurityConfiguration` class and match the system `username-password` with
    the given `username` and `password` parameters. The following screenshot means
    you entered an incorrect client or secret value in the `Basic Auth` tab:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 请检查`SecurityConfiguration`类，并将系统的`username-password`与提供的`username`和`password`参数匹配。以下截图表示你在`Basic
    Auth`选项卡中输入了错误的客户端或密钥值：
- en: '![](img/6ed25197-c442-4fb8-ae9b-3cdc26f076d0.png)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6ed25197-c442-4fb8-ae9b-3cdc26f076d0.png)'
- en: 'The preceding screenshot means you entered an incorrect `client` or `secret`
    value in the Basic Auth tab.Please match the `client` and `secret` value from `AuthorizationServerConfig`
    and the `Basic Auth` tab''s value:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图表示你在基本认证选项卡中输入了错误的 `client` 或 `secret` 值。请将 `AuthorizationServerConfig`
    中的 `client` 和 `secret` 值与基本认证选项卡中的值进行匹配：
- en: '![](img/ac63e400-14b3-44c0-92ab-5334b51000df.png)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac63e400-14b3-44c0-92ab-5334b51000df.png)'
- en: The preceding screenshot means your token key has expired. You need to refresh
    a new access token to solve this error.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图表示您的令牌密钥已过期。您需要刷新一个新的访问令牌来解决此错误。
- en: You may face some other errors. To see the solutions, you can always search
    StackOverflow ([https://stackoverflow.com/](https://stackoverflow.com/)).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到其他错误。要查看解决方案，你总是可以搜索 StackOverflow ([https://stackoverflow.com/](https://stackoverflow.com/))。
- en: Summary
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned how to use Spring Security with confidence. First,
    we covered what Spring Security is as well as its architecture. We also learned
    about the advantage of using Spring Security, looking at its features and modules.
    Now, we''re able to implement Spring Security in any project. We learned what
    the basic authentication is and, using an example, we saw how to implement the
    basic authentication in a project as well as how to secure the resources in a
    server. We also learned how to create a secured REST API. Then we learned how
    to create a client application in Android to fetch and use the protected resources
    from the REST API. We also learned how to implement a username and password to
    get access to the basic authentication-based secured server. In addition, we familiarized
    ourselves with how to use a custom adapter in a listview in the client application.
    In the last section, we explored a better-secured protocol: OAuth2\. We learned
    the role and workflow of this protocol. With a simple project, we learned how
    to configure the OAuth2 authorization and resource servers. Finally, we saw how
    to retrieve the REST API using a third-party HTTP client.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何自信地使用 Spring Security。首先，我们介绍了 Spring Security 是什么以及其架构。我们还了解了使用
    Spring Security 的优势，通过其特性和模块进行了探讨。现在，我们能够在任何项目中实现 Spring Security。我们学习了基本认证是什么，并通过一个示例展示了如何在项目中实现基本认证以及如何保护服务器中的资源。我们还学习了如何创建一个安全的
    REST API。然后我们学习了如何创建一个 Android 客户端应用程序来从 REST API 中获取和使用受保护的资源。我们还学习了如何实现用户名和密码以获取基于基本认证的安全服务器的访问权限。此外，我们还熟悉了如何在客户端应用程序中的
    listview 中使用自定义适配器。在最后一节中，我们探索了一个更安全的协议：OAuth2。我们学习了该协议的角色和工作流程。通过一个简单的项目，我们学习了如何配置
    OAuth2 授权和资源服务器。最后，我们看到了如何使用第三方 HTTP 客户端检索 REST API。
- en: In the next chapter, we'll learn about the database, which is very important,
    as it's the main place to store and handle your data.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习数据库，它非常重要，因为它是存储和处理您数据的主要地方。
- en: Questions
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What does Spring Security target?
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Security 的目标是？
- en: What are the fundamental classes of Spring Security?
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Security 的基本类有哪些？
- en: Which filter class is required for Spring Security?
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要哪个过滤器类用于 Spring Security？
- en: Is password hashing supported in Spring Security?
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Security 是否支持密码散列？
- en: What are the OAuth 2.0 Grant Types?
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OAuth 2.0 授权类型有哪些？
- en: Further reading
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here is a list of information you can refer to:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一份您可以参考的信息列表：
- en: '*Spring Security - Third Edition* ([https://www.packtpub.com/application-development/spring-security-third-edition](https://www.packtpub.com/application-development/spring-security-third-edition))
    by Mick Knutson, Robert Winch, Peter Mularien'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security - 第三版* ([https://www.packtpub.com/application-development/spring-security-third-edition](https://www.packtpub.com/application-development/spring-security-third-edition))
    by Mick Knutson, Robert Winch, Peter Mularien'
- en: '*Hands-On Spring Security 5 for Reactive Applications* ([https://www.packtpub.com/application-development/hands-spring-security-5-reactive-applications](https://www.packtpub.com/application-development/hands-spring-security-5-reactive-applications))
    by Tomcy John'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实战 Spring Security 5 for Reactive Applications* ([https://www.packtpub.com/application-development/hands-spring-security-5-reactive-applications](https://www.packtpub.com/application-development/hands-spring-security-5-reactive-applications))
    by Tomcy John'
- en: '*OAuth 2.0 Cookbook* ([https://www.packtpub.com/virtualization-and-cloud/oauth-20-cookbook](https://www.packtpub.com/virtualization-and-cloud/oauth-20-cookbook))
    by Adolfo Eloy Nascimento'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OAuth 2.0 烹饪书* ([https://www.packtpub.com/virtualization-and-cloud/oauth-20-cookbook](https://www.packtpub.com/virtualization-and-cloud/oauth-20-cookbook))
    by Adolfo Eloy Nascimento'
