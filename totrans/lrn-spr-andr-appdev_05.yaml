- en: Securing Applications with Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is one of the first priorities for the enterprise, e-commerce, and
    banking projects. These projects need to create a security system since they exchange
    millions of dollars and store the protected resources of an organization.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security is a sub-task of the immense Spring Framework portfolio. It
    has been upgraded to be utilized with a Spring MVC web application framework,
    yet can similarly be utilized with Java servlets. This supports authentication
    incorporation with a long list of other technologies, such as **Lightweight Directory
    Access Protocol** (**LDAP**), **Java Authentication and Authorization Service**
    (**JAAS**), and OpenID. It was developed as a complete security solution for Java-based
    enterprise environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn about Spring Security and its modules and learn
    how to implement security in a Spring-based project. The following topics will
    be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantages of Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing REST with Spring Security basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing REST with Spring Security OAuth2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to add these dependencies to enable and use the features of Spring
    Security. Here are the dependencies that need to be added to the `pom.xml` file
    of the Spring project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can find all the examples from this chapter on GitHub at [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Security is the security service solution for a J2EE-based enterprise
    production. This helps to develop a secured application in a faster and easier
    way with the use of its particular dependency-injection principles. To develop
    a secure J2EE-based enterprise application, Spring Security is an incredible and
    flexible authentication and authorization framework. Authentication is the process
    of checking the identity of a procedure or a client. On the other hand, authorization
    implies a procedure of checking the authority of a client to perform activities
    in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication is the process that identifies a user or client based on their
    username and password. It helps a user to get the access protected system objects
    based on their identity. For the authentication procedure, spring security gives
    us the `AuthenticationManager` interface. This interface has just a single capacity,
    named `validate()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The accompanying snippet of code is an example of the `AuthenticationManager`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Three tasks are completed by the `authenticate()` in this `AuthenticationManager`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '`authenticate()` returns`Authentication` on the off-chance that its capacity
    can check that the input represents a valid principle. The previously-mentioned
    code generally returns `authenticated=true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the event that the capacity finds that the input doesn't speak to a substantial
    rule, it tosses `AuthenticationException`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the event that the capacity can't choose anything, it will return `null`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AuthenticationException` is a runtime exception. An application handles this
    exception in a conventional way.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ProviderManager` is often used to implement `AuthenticationManager`, and represents
    a chain of `AuthenticationProvider` objects. If there''s no parent accessible,
    it throws `AuthenticationException`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`AuthenticationProvider` resembles `AuthenticationManager`, but has an additional
    function. This additional function enables the client to query on the off-chance
    that it supports a given `Authentication` type.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s some code of the `AuthenticationProvider` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This interface has two functions—`authenticate()` returns the user's authentication
    details and `supports()` returns a `Boolean` if the authentication and given username-password
    pair matches, or doesn't.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a diagram of the `AuthenticationManager` hierarchy utilizing `ProviderManager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5fd0389-0cd9-48a8-a03f-6954119392f0.png)'
  prefs: []
  type: TYPE_IMG
- en: According to this diagram, in an application, `ProviderManager` may have a group
    of other `ProviderManager` instances but the first one will behave as a parent.
    Every `ProviderManager` may have multiple `AuthenticationManager`. For example,
    if all web resources are under the same path, every group will have its own dedicated
    `AuthenticationManager`. However, there will be only one common parent, which
    will act as a global resource and will be shared by these dedicated `AuthenticationManager`
    instances. Now, let's see how to modify the authentication manager.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying authentication managers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Security provides some configuration helpers to set up authentication
    manager features in your application. This will help to get the features quickly. `AuthenticationManagerBuilder`
    helps to modify the authentication managers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how to implement `AuthenticationManagerBuilder` in the `ApplicationSecurity.kt`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have given a username, `sunnat629`, and a password, `packtPub`, as
    a `USER` role in this application.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot accompanies a default global `AuthenticationManager`, which is sufficiently
    secure. You can supplant it by giving your own `AuthenticationManager` bean.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authorization is the process of accepting or rejecting access to network resources.
    It will grant access to utilize the data from the resources. After the `Authentication`
    process, the `Authorization` process begins. `Authorization` is used to deal with
    controlling access. `AccessDecisionManager` is one of the core entities of this.
  prefs: []
  type: TYPE_NORMAL
- en: Web security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The servlet channels of spring security provide web security. The `@WebSecurityConfigurer`
    annotation is used to enable the web security and override `WebSecurityConfigurerAdapter`
    in the web security class.
  prefs: []
  type: TYPE_NORMAL
- en: Method Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a module of a security method that's provided by Spring Security. We
    can provide a role in a particular function so that role-based users can access
    the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following annotation is used to enable this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example of how to enable method security in the `SpringSecurityApplication.kt`
    class, which is the main application class of our demo project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can create the method resources, such as the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we created a secured class named `CustomService` using the `@Secured`
    annotation, and then created a secured function that will return a spring. The `@Secured`
    annotation is used to specify a list of roles on a function.
  prefs: []
  type: TYPE_NORMAL
- en: The advantages of Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Spring Security framework provides the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security is an open source security framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It protects against common tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be integrated with Spring MVC and the Servlet API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports Java and Kotlin configuration support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's easy to develop and unit-test the applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring dependency injection and AOP can be used with ease
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It develops loosely-coupled applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of features that are implemented in Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have explained some common and major features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**LDAP**:LDAP is an open application protocol. This maintains and accesses
    distributed directory data services over the internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OAuth 2.0 login**:This component makes it possible for the client to log
    into the application by utilizing their existing accounts on Google, Facebook,
    Twitter, or GitHub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basic access authentication**:This gives a username and password when a client
    requests them over the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Digest access authentication**:This asks the program to affirm the identity of
    the client before sending personal information over the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web form authentication**: In this authentication system, a web form collects
    and authenticates user credentials from the web browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization**: Spring Security offers this feature to approve of the client
    before getting the assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP authorization**: This refers to theHTTP authorization of web request
    URLs. It uses Apache Ant paths or regular expressions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reactive support**: This provides reactive programming and web runtime support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modernized password encoding**: A new password encoder, named `DelegatingPasswordEncoder`,
    is introduced from Spring Security 5.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single sign-on**: This feature allows a client to access multiple applications
    with a single account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JAAS**: JAAS is a Pluggable Authentication Module that''s implemented in
    Java.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remember-me**:Spring Security utilizes HTTP cookies, which remember a client''s
    login ID and password in order to maintain a strategic distance from login again
    until the client logs out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software localization**: You can create the user interface of an application
    in any human language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Security module has been isolated into a few sub-modules in Spring
    Security 3.0\. However, in the present version, there are 12 submodules. To support
    these modules, the code is sub-partitioned into isolated containers. These containers
    are currently disengaged, where every submodule has a diverse useful area and
    third-party dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of sub-module jars:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-security-core.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-remoting.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-web.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-config.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-ldap.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-oauth2-core.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-oauth2-client.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-oauth2-jose.jar `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-acl.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-cas.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-openid.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-test.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Spring Security Core sub-module is the base module for the rest of the Security
    sub-modules, such as `web`, `config`, and `oauth2`.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to use Spring Security in your project, you need to implement the
    Spring Security dependencies that you want to use in both Maven and Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how to implement the Spring Security dependencies in both
    Maven and Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To implement the security dependencies, you need to implement `spring-security-core`
    in `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To implement the dependencies, you need to put the following code in `build.gradle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Securing REST with basic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this topic, we'll learn basic authentication with a simple project. Here,
    we'll create an example where you'll build a secure REST API. We'll make a project
    and implement the basic authentication. This will help us to avoid the basic configuration
    and complete Kotlin config duration. For this project, you must enter your username
    and password to access the content. This project has no UI and therefore you need to
    use an HTTP client to test the project. Here, we're using Insomnia ([https://insomnia.rest/download/](https://insomnia.rest/download/)).
    You can test your project and access the content from here.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting with our project, we'll learn about basic authentication and
    its use.
  prefs: []
  type: TYPE_NORMAL
- en: What is basic authentication?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Basic authentication** is the simplest authentication scheme, which is built
    into the HTTP protocol. To use it, the client needs to send HTTP requests with
    the authentication header, which contains the word *Basic* followed by a space.
    Then, the given string of username and password will be considered as `username/password` and
    encoded into Base64\. For example, if the username and password are `Sunnat629`
    and `pa$$worD`, these will be converted into Base64 encoding, which will be `U3VubmF0NjI5L3BhcyQkd29yRA==` as
    authorized. Finally, the client will send  `Authorization: Basic  U3VubmF0NjI5L3BhcyQkd29yRA==` to
    the server.'
  prefs: []
  type: TYPE_NORMAL
- en: Base64 can easily be decoded. This is neither encrypted nor hashed. If you want
    to use the basic authentication, we highly recommend using this together with
    other security tools, such as HTTPS/SSL.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll create a small project where we''ll implement the basic authentication
    security to protect the data. A user needs to be accepted by our security system
    to access the data. Let''s create the project with the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the project, go to the [https://start.spring.io/](https://start.spring.io/)
    and modify the given field with your requirement. You can check our project information
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4047a3e3-1931-49b8-82b8-4674ba208e7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we're using `Maven Project` and selecting the language as `Kotlin` and
    the Spring Boot version as `2.1.1 (SNAPSHOT)`.
  prefs: []
  type: TYPE_NORMAL
- en: We've added the `Security`, `Web`, and `DevTools` dependencies. You can check
    the list in `pom.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: When you select `Generate Project`, you'll get the project as a ZIP file. Unzip
    and open this project with your IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It will take a moment to download and update the Maven dependencies. Here''s
    a screenshot of your project''s content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0901227f-9f7f-40af-930f-25108808826a.png)'
  prefs: []
  type: TYPE_IMG
- en: If you need to add new dependencies or update the versions, modify `pom.xml`.
    If you want to create `kotlin` files, you need to create files under the `src->main->kotlin->{Package_NAME}` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring pom.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this `pom.xml`, you''ll have all the information regarding the project.
    Here, you can insert new dependencies, update versions, and so on. Here is the
    sample `pom.xml` (the full code is on the GitHub, at [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter05):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Configuring a Spring bean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To configure a Spring bean, we'll create an application file named `SSBasicAuthApplication.kt`
    and use Java configuration, which configures Spring Security without writing any
    XML code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a simple code for the application file (`SSBasicAuthApplication.kt`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've extended `SpringBootServletInitializer`. This runs `SpringApplication`
    from a traditional `WAR` archive. This class is responsible for binding the `Servlet`,
    `Filter`, and `ServletContextInitializer` beans from the application context to
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: '`@SpringBootApplication` is a convenience annotation that''s equivalent to
    declaring `@Configuration` and `@EnableAutoConfiguration` for this `SSBasicAuthApplication`
    class.'
  prefs: []
  type: TYPE_NORMAL
- en: Mention a package name or a collection of package names in the `@ComponentScan` annotation
    to specify the base packages. This is used with the `@Configuration` annotation
    to tell Spring packages to scan for annotated components.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration for Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add the configuration for Spring Security of our project, create a file
    named **`SSConfig.kt` **in the application package using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We've annotated this class with `@Configuration`, which helps in the Spring
    annotation-based configuration. `@EnableWebSecurity` will enable the web security
    support of Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: We've extended `WebSecurityConfigurerAdapter` and this will give us access to
    overriding and customizing the Spring features. We're using HTTP Basic Authentication
    and all of our requests will be authenticated using this.
  prefs: []
  type: TYPE_NORMAL
- en: If the authentication fails, we need to handle this. To do so, create an authentication
    entry point class named `AuthenticationEntryPoint.kt` and `autowire` it. It will
    help to retry this process again in case of the failure.
  prefs: []
  type: TYPE_NORMAL
- en: Here we are using the `sunnat629` username, the `password` password, and the `USER`
    role.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an authentication entry point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configure the authentication entry point to handle the failed authentication.
    When the credentials aren't authorized, this class is mainly responsible for sending
    the response.
  prefs: []
  type: TYPE_NORMAL
- en: Here's the code of an authentication entry point class named **`AuthenticationEntryPoint.kt`:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've extended `BasicAuthenticationEntryPoint()`. This will return a full
    description of a `401 Unauthorized` response to the client.
  prefs: []
  type: TYPE_NORMAL
- en: '`401 Unauthorized Error` is an HTTP response status code. This indicates that
    the request sent by the client couldn''t be authenticated.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Spring WebApplicationInitializer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Spring `WebApplicationInitializer` uses a Servlet 3.0+ implementation to configure
    `ServletContext` programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Here's the sample code of the `WebApplicationInitializer` class, called** `MyApplicationInitializer.kt`:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This class will help to map the project URL path, `"\"`, using start. As we
    are using a code-based annotation in place of an XML configuration, we are using `AnnotationConfigWebApplicationContext`.
  prefs: []
  type: TYPE_NORMAL
- en: Then we have created and registered the dispatcher servlet.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By accessing a simple REST API, we're creating a user model class. When the
    client inputs a correct username and password, this will return a simple JSON
    output of some user details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code of `Users.kt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this user model, we have an `id`, a `name`, an `email`, and a `contactNumber`.
    We'll create a JSON-type REST API that will be protected by our security system.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The controller class will map the URL path of the project. Here, we will use
    the `GET` or `POST` `HTTP` request functions to create the REST API. Here's a
    sample code of the controller of the project, named **`UserController.kt`:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've created a user list of five people with the user model. In a controller,
    the `@RequestMapping` annotation is applied to the class level and/or the method
    level. This maps a particular request path onto a controller. With the `@GetMapping(path
    = ["/users"])` annotation, the client will send a `GET` request to get the list
    of the users if the Http status is `OK`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the HTTP client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To see the output, open your third-party HTTP client tools. Here, we're using
    Insomnia.
  prefs: []
  type: TYPE_NORMAL
- en: After you run the project, open Insomnia.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please follow these steps to test the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a New Request with a name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the GET input box, put the `http://localhost:8080/user` URL. Here, `localhost:8080`
    is the root URL and as we use `@RequestMapping(path = ["/user"], method = [RequestMethod.GET])`
    in the controller class, the project will work under the `http://localhost:8080/user`
    path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you hit the Send button, you''ll see an `HTTP Status 401 - Bad credentials` error,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d117a43c-a6bc-4e69-ab94-3b5758114780.png)'
  prefs: []
  type: TYPE_IMG
- en: Although you're using the basic authentication, you have to input a **Username**
    and **Password** to complete this request. You need to click on the Auth (second
    tab) and select `Basic` auth; you can enter the **Username** and **Password** there.
    If you input a random username and password, you'll also get the same error.
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering the correct **Username** and **Password**, you''ll get the list
    of the users in JSON format as output, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f32d0f3-0f92-4f2a-82af-f4b5e82cc79e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also test in the browser. There, you'll be asked to input the **Username**
    and **Password**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the browser to see the REST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4baeb0f8-550c-40e2-ba42-9dd827b76de6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After inserting the username and password, we can see the user list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/944f295e-d503-4c56-a601-0776e8922b25.png)'
  prefs: []
  type: TYPE_IMG
- en: You've created a very simple project using Spring Security basic authentication.
    We hope that from now on you can write your own auth-based project with the help
    of Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Android app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to create a simple Android app as a client that will retrieve the
    REST API from our base authentication server. First of all, we need to create
    an app from Android Studio and fill in your project name and the company domain.
    Don''t forget to check `Include Kotlin support`. Here''s a screenshot of the create
    application project window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aabf30ec-8bc8-41b7-ae73-8591beadad9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the minimum API version from the Phone and Tablet option. There's no
    need to add other options for this project. After clicking Next, you can select
    Empty Activity in the **Add an Activity to Mobile** window. After renaming the
    **Activity Name** and **layout**, click Finish. After building the gradle, you'll
    be ready to start creating an Android app.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how to implement the project's dependencies in Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Gradle file, mention the Kotlin dependency and the application Gradle
    version. Here are the details of my Android Studio''s Gradle file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, our Gradle version is `3.2.1` and the Kotlin version is `1.3.10`
  prefs: []
  type: TYPE_NORMAL
- en: Gradle dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this Gradle file, we''ll implement the dependencies of Retrofit, which will
    help us to fetch the JSON-type REST API from our previous project. Here are all
    the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating a user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll fetch the REST API of our basic authentication-based Spring project, which
    was created using basic authentication. Although the REST API has four entities
    (`id`, `name`, `email`, and `contactNumber`), we'll create a model based on this
    REST API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the output of the REST API where we can see five users'' details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26a0fb10-ac11-46cd-b71f-a3f08f20d12e.png)'
  prefs: []
  type: TYPE_IMG
- en: According to the API, we'll create a user model for the client side. Here's
    the model class, named **`UserModel`****:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to create an interface that will have the HTTP request functions.
    In this project, we'll only use a `GET` function that retrieves all the details
    of users. Here, we're using the `GET` retrofit annotation to encode details about
    the parameters and request function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code of the `UserService` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We'll search the `/user` endpoint and this will provide a list of user models.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the user service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Retrofit client calls the Gerrit API and handles the result by printing the
    result of the call to the console.
  prefs: []
  type: TYPE_NORMAL
- en: Create a class where we'll build a Retrofit client, and this will call the API
    and handle the result. This will be responsible for controlling all the tasks
    using the `Retrofit.builder` class and configuring it with the base of the given
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code of `UserServiceImpl.kt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: According to this code, we set `.client()` with `username` and `password`. Then
    we implemented the `YOUR_SERVER_DOMAIN` (assume the URL of the Rest API server
    is **`http://localhost:8080`**), `baseUrl() `, and we've used  `OkHttpClient` as
    the client.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating with OkHttp interceptors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we're using a base authentication security, we need a `username` and
    `password` to grant access to this REST API. Here, we're using `OkHttp` interceptors
    for authentication. This will help you to send a request and get the auth permission
    to access the resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we''ve called the `BasicAuthInterceptor` class in `OkHttpClient.Builder()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the class of `BasicAuthInterceptor.kt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this class, only the credentials are added as your user details. Here, a
    client will make a request using the `username` and `password` credentials. During
    every request, this interceptor acts before it's performed and alters the request
    header. Consequently, you don't need to add `@HEADER("Authorization")` to the
    API function.
  prefs: []
  type: TYPE_NORMAL
- en: Calling callbacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we're calling `CallBack<>` from `MainActivity`. This callback response
    comes from a server or offline requests. This means returning the result of a
    long-running function at a later moment in time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the `MainActivity.kt` code to use the `CallBack` function and handle
    the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s discuss the preceding code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to initialize `UserServiceImpl().getGithubServiceImpl(username,password)` so
    that we can call `getUserList()` from `UserService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we'll call `enqueue(retrofit2.Callback<T>)`, which will be executed asynchronously,
    send the request, and get the response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`enqueue()` has two functions: `onResponse()` and `onFailure()`. If there are
    any server-related errors, it will call `onFailure()`, and if it gets the response
    and the resources, it will call `onResponse()`. We can also use the resource of
    the `onResponse()` function.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, we'll get a response of the `UserModel` list. We can show the list in
    our application UI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the created `main_activity` layout, we'll show a list of the user details
    where we show the name, email ID, and contact number of a user—we'll use `ListView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code of the `mainActivity` layout of the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In this layout, we have one `TextView` and one `ListView`.
  prefs: []
  type: TYPE_NORMAL
- en: We'll use this `ListView` in the `onResponse()` function of `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll get the list and create a custom adapter to show the user list, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have a custom adapter where we'll send the context and the `Array`
    list of the users.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom list adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To show the output of the REST API, we need to create a custom list adapter
    and so we need to design an XML file of the custom list adapter. Here''s the XML
    code for each row in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have a `TextView` of `name`, `contactNumber`, and `email`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we''ll create the adapter, named `UserListAdapter.kt`,as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This class extends `BaseAdapter()`, which will add several inherited functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you need to add `LayoutInflater`, which converts the XML layout into corresponding `ViewGroups` and Widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getView()` creates a view for a row of the list. Here, you''ll define all
    the UI-based information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getItem()` returns the position of the list that''s obtained from the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getItemId()` defines a unique ID for each row in the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCount()` returns the size of the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, in `getView()`, you''ll add the element of the layout, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You should never perform long-running tasks on the main thread. This will result
    in an Application Not Responding (ANR).
  prefs: []
  type: TYPE_NORMAL
- en: Mobile applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we''ve completed our code, it''s time to see the output. Run your basic
    authentication Spring project and then run your app. Here''s the output of your
    app, where we can see the user details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb1d3a80-1f6b-4d39-9de8-b3a746152d48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, the left side is the server API, where we have
    the user details, and on the right we have the client output of the Android application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2deb9410-34b7-440c-9604-1e9e61a024d0.png)'
  prefs: []
  type: TYPE_IMG
- en: We've created a client application that will fetch the data of a basic authentication
    Spring-Security-based REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Securing REST with Spring Security OAuth2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last section, we learned how to make a basic authorization project. This
    provides solid security for a project, but it doesn't have the dimension of security
    required for a complex or enterprise-level project. Since this security can be
    broken or hacked, we require a more grounded security framework to handle these
    sorts of hacking. OAuth is one of the best security frameworks – it's exceedingly
    utilized by Google, Facebook, Twitter, and many other popular platforms. Now we'll
    learn about OAuth2 and its use.
  prefs: []
  type: TYPE_NORMAL
- en: What is OAuth2?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OAuth** is a safe authorization convention, and **OAuth2** is the second
    form of the OAuth protocol. This protocol is called a **framework**. OAuth2 enables
    a third-party application to provide limited access to an HTTP service, such as
    Google, GitHub, or Twitter. This access is either intended for the benefit of
    the proprietor or to enable the third-party application to get access to the user
    account. This creates an authorization stream between web and desktop or mobile
    devices. It has some important roles that control the users'' access limitation.'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth2 Roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four roles in OAuth2:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resource Owner**: Normally, this is you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Server**: The server host''s protected data. For example, Google,
    Github, or Twitter hosts your personal and professional information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client**: An application that requests a resource server to access data.
    The client can be a website, a desktop application, or even a mobile application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization Server**: This server will issue an access token to the client.
    This token will be the key to accessing the information and it''s mainly used
    to request the resource server for the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s a diagram of the general workflow of the OAuth protocol (the flow isn''t
    fixed for every protocol; it''s based on the type of authorization granted):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a2aa391-2ab8-4090-bee9-6ed59fd69490.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the steps of the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: To access the service resources, the **Application** sends the **Authorization
    Request** to the **User**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Application** receives an **Authorization Grant** if the **User** authorizes
    the request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Application** sends the grant to the **Authorization Server** for an **Access
    Token**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the **Authorization Grant** is valid and the **Application** is authenticated,
    the **Authorization Server** creates an **Access Token**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Application** gets the **Access Token** from the **Authorization Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application sends a request to the **Resource Server** for resources from
    the server as well as authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the token, the **Resource Server** provides the requested recourses to
    the **Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OAuth2 grant types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four kinds of OAuth2 Grants:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization Code:** This is used in a server-side application and allows
    the client to get a long-lasting access token. However, this token will be invalidated
    if the client asks the server for a new token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implicit:** For the most part, this is utilized with mobile or web applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Owner Password Credentials:** In this grant, the credentials are first sent
    to the customer. Then they''re sent to the authorization server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client Credentials:** This is used when the client itself is the resource
    owner. There''s no authorization to get from the client''s end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, that's a brief summary of the OAuth protocol. Now let's create a project
    using the Spring Security OAuth2 modules.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll create a simple Spring Security OAuth2-based project. To do so, go to [https://start.spring.io/](https://start.spring.io/)
    and modify the given field with your requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we're using the Maven Project and selecting the language as Kotlin. The
    Spring Boot version is 2.1.1 (SNAPSHOT).
  prefs: []
  type: TYPE_NORMAL
- en: After you select Generate Project, you'll get the project as a ZIP file. Unzip
    and open this project with your IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Maven dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our main dependencies are `Web`, `Security`, `Cloud Security`, `Cloud OAuth2`, `JPA`,
    `H2`, `Lombok`, and `Thymeleaf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the mentioned Maven dependencies in `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the resource server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A resource server will have all the protected resources, and these are protected
    by the OAuth2 token. It's time to learn about this resource server with the help
    of the code. Create a resource server named  **`ResourceServerConfig.kt`**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code of our **`ResourceServerConfig.kt`**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: To enable the features of the OAuth 2.0 resource-server mechanism, you need
    to add an annotation named `@EnableResourceServer`, and although it's a configuration
    class, you need to add the `@Configuration` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: This class extends `ResourceServerConfigurerAdapter`, this then extends `ResourceServerConfigurer`,
    which will make it possible to override and configure `ResourceServerConfigurer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We override `configure(http: HttpSecurity?)`, where we mention which URL paths
    are protected and which are not protected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`authorizeRequests()` permits confining access dependent on the utilization
    of `HttpServletRequest`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`antMatchers()` refers to the implementation of the Ant-style path patterns
    in mappings.'
  prefs: []
  type: TYPE_NORMAL
- en: We use `.antMatchers("/").permitAll()`, which allows all users to access this
    URL path, `"/"`. In addition, we use `.antMatchers("/private").authenticated()`,
    which means a user needs a token to access this `/private` path.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the authorization server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An authorization server is a configuration class. In this class, we'll create
    a grant-type environment. A grant type helps a client get an access token from
    the end user. This server's configuration is designed to implement the client
    details' service and token service. It's also responsible for enabling or disabling
    certain components of the mechanism globally. Now, create an authorization server
    class named `AuthorizationServerConfig.kt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code for `AuthorizationServerConfig.kt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `@EnableAuthorizationServer` annotation enables the features of the OAuth
    2.0 authorization server mechanism. You need to add the `@Configuration` annotation
    to make it the configuration class.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class extends `AuthorizationServerConfigurerAdapter`, which then extends `ResourceServerConfigurer`.
    It will make it possible to override and configure `AuthorizationServerConfigurer`.
    There are three types of `configure()` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ClientDetailsServiceConfigurer`: This defines the details service of a client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AuthorizationServerSecurityConfigurer`: This defines the security constraints
    on the token endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AuthorizationServerEndpointsConfigurer`: This defines the authorization and
    token endpoints and the token services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'According to our code, in `configure(security: AuthorizationServerSecurityConfigurer?)`,
    we define whether or not to check the token endpoint which is authenticated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `configure(clients: ClientDetailsServiceConfigurer?)`, we define the `ClientDetails`
    service. In this project, we didn''t use a database, so we use an in-memory implementation
    of the `ClientDetails` service. Here are the important attributes of the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '`withClient()`: This is required and this is where we define the client ID, `"client"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`secret()`: This is required for trusted clients and is where we define the secret, `"secret"`,
    but we have to encode the password. Here, we inject `BCryptPasswordEncoder` to
    encode the password or secret key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authorizedGrantTypes()`: We have used the `"password"` grant type that''s
    authorized for the client to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scope()`: The scope is used to limit the access for the resources of a client.
    If the scope is undefined or empty, that means the client isn''t limited by scope.
    Here, we use `"read"`, `"write"`, and `"trust"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authorities()`: This is used to grant the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resourceId()`: This optional ID is used for the resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accessTokenValiditySeconds()`: This refers to the token validity time duration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `configure(endpoints: AuthorizationServerEndpointsConfigurer?)`, we''ve
    configured `AuthorizationEndpoint`, which supports the grant type. We inject `AuthenticationManager` and
    configure it via `AuthorizationServerEndpointsConfigurer`.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the security config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a Java configuration class for Spring Security that enables users to
    configure Spring Security easily without the use of XML. Create a secure config
    file named `SecurityConfiguration.kt`. Here''s the code for the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This is a configuration class, so you need to add the `@Configuration` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: This class extends `WebSecurityConfigurerAdapter`, and the `@EnableWebSecurity` annotation
    provides the web-based security mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: According to this code, we use two `@Bean` annotations in the required functions.
    We inject `AuthenticationManager` and configure it via `AuthorizationServerEndpointsConfigurer`.
    The `BCryptPasswordEncoder` instance is used to encode the passwords.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `configure(http: HttpSecurity?)`, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`antMatcher("/**").authorizeRequests()` means that this `HttpSecurity` will
    only be applicable to URLs that start with `/**`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`anyRequest().authenticated()` utilization guarantees that any request to our
    application requires the client to be confirmed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formLogin()` allows users to authenticate with form-based logins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`httpBasic()` means the user is validated with HTTP Basic authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `configure(auth: AuthenticationManagerBuilder?)`, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`inMemoryAuthentication()` includes memory confirmation to `AuthenticationManagerBuilder`
    and restores `InMemoryUserDetailsManagerConfigurer` to permit customization of
    the in-memory validation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passwordEncoder(passwordEncoder())` means that the password will be an encoded
    password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withUser("user")` and `withUser("admin")` is the name of the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password(passwordEncoder().encode("password"))` is the encoded password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`roles("USER")` and `roles("ADMIN")` is the role of a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the controller class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a controller class named `UserController.kt`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've annotated this class as `@RestController`, which handles all the
    web requests. `@RequestMapping("/")` means that the default URL path is `"/"`.
  prefs: []
  type: TYPE_NORMAL
- en: The `@GetMapping` implemented functions are `home()`, which can be accessed
    by everyone, and `securedArea()`, which can be accessed only by those who have
    the *access token*. We configured these in the `ResourceServerConfig` class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lastly, create the application class, named `SpringSecurityOAuth2Application.kt`,
    which will convert your application into a SpringBoot application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Application properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This step is optional, particularly in this project. Here, we just change the
    port number for this project. To change it, modify `application.properties` under
    the `resources`folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Here, we change the port number to `8081`.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re reading this section, that means you''ve configured everything correctly.
    After finishing the project, you''ll have these files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the setup, run the project. If there are no errors, you can
    find the runwindow. The following screenshot shows that there are no errors and
    the application is ready to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e2f5ec2-e29c-4641-8b42-0288911faa18.png)'
  prefs: []
  type: TYPE_IMG
- en: Checking unprotected URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, open the *Insomnia* application.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `GET` request from the top inbox and use the `http://localhost:8081/open_for_all` URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your result will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/956bc690-72ea-4a2e-b902-eec4e709ee8a.png)'
  prefs: []
  type: TYPE_IMG
- en: In the `ResourceServerConfig` class, we configured that `"/open_for_all"` can
    be accessed by everyone.
  prefs: []
  type: TYPE_NORMAL
- en: Getting access tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a `POST` request from the top inbox and put down the `http://localhost:8081/oauth/token` URL.
    This is the default `POST` *URL* to get the token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add three parameters—`username=sunnat`, `password=password`, and `grant_type=password—`in
    the Multipart window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b79568f5-19bf-4d32-b9c1-7f582311a7f4.png)'
  prefs: []
  type: TYPE_IMG
- en: You can find the information of `username` and `password` in the `SecurityConfiguration`
    class, and `grant_type` will be found in `AuthorizationServerConfig`. Here, we're
    using the **password** grant type.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Basic** window and input the **username** and **password**. You
    can find this information in the `AuthorizationServerConfig` class, where the
    username is mentioned in `withClient()` and the password is `secret()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We added an image of the Insomnia tool where we wrote down the **username**
    and **pass****word. **Now click the send button. If there are no errors, you''ll
    get the following `access_token`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fb2b231-90a0-4d9e-af22-e2249b6e8482.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the `access_token` that will be used to access the protected resources. `expires_in`
    means that after `4469` seconds the token will expire. `"scope": "read write trust"`
    means you can read, write, and modify the resources.'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the protected URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We found the `access_token` and now we'll use it. To do this, create another
    `GET` request and insert `http://localhost:8081/private`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a parameter, use `access_token` with the value of the given token key, and
    click Send:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4b3e161-225e-4b04-bef5-76bdb512aa5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Once that's done, you can access the `/private` URL, which is protected and
    configured in the `ResourceServerConfig` class.
  prefs: []
  type: TYPE_NORMAL
- en: We're now ready to use the OAuth2 Spring Security in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Common mistakes and errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During this project, you may encounter some common errors.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might get some errors during building and running the project.
    To solve this, check that all versions of the dependencies are the latest. In
    addition, check whether every dependency is present. If you use the database,
    make sure you have the correct database and scheme name in `application.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `POST` request, sometimes you can find the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1d5e9c8-90b9-4bae-b247-5bf90ca2d651.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous screenshot indicates that you entered an incorrect `grant_type`.
    Please check the parameter, as well as the `AuthorizationServerConfig` class where
    you mention the `grant_type`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e36835a3-80c0-47dc-a8dc-c52f7499284b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Please check the `SecurityConfiguration` class and match the system `username-password` with
    the given `username` and `password` parameters. The following screenshot means
    you entered an incorrect client or secret value in the `Basic Auth` tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ed25197-c442-4fb8-ae9b-3cdc26f076d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot means you entered an incorrect `client` or `secret`
    value in the Basic Auth tab.Please match the `client` and `secret` value from `AuthorizationServerConfig`
    and the `Basic Auth` tab''s value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac63e400-14b3-44c0-92ab-5334b51000df.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot means your token key has expired. You need to refresh
    a new access token to solve this error.
  prefs: []
  type: TYPE_NORMAL
- en: You may face some other errors. To see the solutions, you can always search
    StackOverflow ([https://stackoverflow.com/](https://stackoverflow.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned how to use Spring Security with confidence. First,
    we covered what Spring Security is as well as its architecture. We also learned
    about the advantage of using Spring Security, looking at its features and modules.
    Now, we''re able to implement Spring Security in any project. We learned what
    the basic authentication is and, using an example, we saw how to implement the
    basic authentication in a project as well as how to secure the resources in a
    server. We also learned how to create a secured REST API. Then we learned how
    to create a client application in Android to fetch and use the protected resources
    from the REST API. We also learned how to implement a username and password to
    get access to the basic authentication-based secured server. In addition, we familiarized
    ourselves with how to use a custom adapter in a listview in the client application.
    In the last section, we explored a better-secured protocol: OAuth2\. We learned
    the role and workflow of this protocol. With a simple project, we learned how
    to configure the OAuth2 authorization and resource servers. Finally, we saw how
    to retrieve the REST API using a third-party HTTP client.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn about the database, which is very important,
    as it's the main place to store and handle your data.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does Spring Security target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the fundamental classes of Spring Security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which filter class is required for Spring Security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is password hashing supported in Spring Security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the OAuth 2.0 Grant Types?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a list of information you can refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Spring Security - Third Edition* ([https://www.packtpub.com/application-development/spring-security-third-edition](https://www.packtpub.com/application-development/spring-security-third-edition))
    by Mick Knutson, Robert Winch, Peter Mularien'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hands-On Spring Security 5 for Reactive Applications* ([https://www.packtpub.com/application-development/hands-spring-security-5-reactive-applications](https://www.packtpub.com/application-development/hands-spring-security-5-reactive-applications))
    by Tomcy John'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OAuth 2.0 Cookbook* ([https://www.packtpub.com/virtualization-and-cloud/oauth-20-cookbook](https://www.packtpub.com/virtualization-and-cloud/oauth-20-cookbook))
    by Adolfo Eloy Nascimento'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
