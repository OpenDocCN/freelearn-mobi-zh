["```kt\n    using UnityEngine;\n    using UnityEngine.Advertisements; /* Advertisement class */\n    public class UnityAdController : MonoBehaviour\n    {\n        /// <summary>\n        /// If we should show ads or not\n        /// </summary>\n        public static bool showAds = true;\n        /// <summary>\n        /// Replace with your actual gameId\n        /// </summary>\n        private string gameId = \"1234567\";\n        /// <summary>\n        /// If the game is in test mode or not\n        /// </summary>\n        private bool testMode = true;\n        /// <summary>\n        /// Unity Ads must be initialized or else ads will\n        /// not work properly\n        /// </summary>\n        private void Start()\n        {\n            /* No need to initialize if it already is done\n            */\n            if (!Advertisement.isInitialized)\n            {\n                Advertisement.Initialize(gameId,\n                    testMode);\n            }\n        }\n    }\n    ```", "```kt\n    /// <summary>\n    /// Will get the appropriate Ad ID for the platform we\n    /// are on\n    /// </summary>\n    /// <returns>A usable Ad ID</returns>\n    private static string GetAdID()\n    {\n        string adID = \"Interstitial_\";\n        if (Application.platform ==\n            RuntimePlatform.IPhonePlayer)\n        {\n            adID += \"iOS\";\n        }\n        else\n        {\n            adID += \"Android\";\n        }\n        return adID;\n    }\n    /// <summary>\n    /// Will load and display an ad on the screen\n    /// </summary>\n    public static void ShowAd()\n    {\n        // Load an Ad to play\n        Advertisement.Load(GetAdID());\n        // Display it after it is loaded\n        Advertisement.Show(GetAdID());\n    }\n    ```", "```kt\n    /// <summary>\n    /// Will load a new scene upon being called\n    /// </summary>\n    /// <param name=\"levelName\">The name of the level we\n    /// want to go to</param>\n    public void LoadLevel(string levelName)\n    {\n        if (UnityAdController.showAds)\n        {\n            /* Show an ad */\n            UnityAdController.ShowAd();\n        }\n        SceneManager.LoadScene(levelName);\n    }\n    ```", "```kt\n    /// <summary>\n    /// A static reference to this object\n    /// </summary>\n    public static UnityAdController instance;\n    /// <summary>\n    /// Unity Ads must be initialized or else ads will not\n    /// work properly\n    /// </summary>\n    private void Start()\n    {\n        /* No need to initialize if it already is done */\n        if (!Advertisement.isInitialized)\n        {\n            instance = this;\n            // Use the functions provided by this to allow\n            // custom\n            Advertisement.Initialize(gameId, testMode);\n        }\n    }\n    ```", "```kt\n        /// <summary>\n        /// Will load and display an ad on the screen\n        /// </summary>\n        public static void ShowAd()\n        {\n            // Load an Ad to play\n            Advertisement.Load(GetAdID());\n            // Display it after it is loaded\n            Advertisement.Show(GetAdID(), instance);\n        }\n    ```", "```kt\n    public class UnityAdController : MonoBehaviour, IUnityAdsShowListener\n    ```", "```kt\nnamespace UnityEngine.Advertisements\n{\n    public interface IUnityAdsShowListener\n    {\n        void OnUnityAdsShowClick(string placementId);\n        void OnUnityAdsShowComplete(\n            string placementId,\n                UnityAdsShowCompletionState\n                    showCompletionState);\n        void OnUnityAdsShowFailure(string placementId,\n            UnityAdsShowError error, string message);\n        void OnUnityAdsShowStart(string placementId);\n    }\n}\n```", "```kt\n    #region IUnityAdsShowListener Methods\n    /// <summary>\n    /// This callback method handles logic for the ad\n    /// starting to play.\n    /// </summary>\n    /// <param name=\"placementId\">The identifier for the\n        Ad Unit showing the content.</param>\n    public void OnUnityAdsShowStart(string placementId)\n    {\n        /* Pause game while ad is shown */\n        PauseScreenBehaviour.paused = true;\n        Time.timeScale = 0f;\n    }\n    /// <summary>\n    /// This callback method handles logic for the ad\n    /// finishing.\n    /// </summary>\n    /// <param name=\"placementId\">The identifier for the\n    /// Ad Unit showing the content</param>\n    /// <param name=\"showCompletionState\">Indicates the\n    /// final state of the ad (whether the ad was skipped\n    /// or completed).</param>\n    public void OnUnityAdsShowComplete(string placementId,\n    UnityAdsShowCompletionState showCompletionState)\n    {\n        /* Unpause game when ad is over */\n        PauseScreenBehaviour.paused = false;\n        Time.timeScale = 1f;\n    }\n    /* This callback method handles logic for the user clicking on the ad. */\n    public void OnUnityAdsShowClick(string placementId) { }\n    /* This callback method handles logic for the Ad Unit failing to show. */\n    public void OnUnityAdsShowFailure(string placementId, UnityAdsShowError error, string message) { }\n    #endregion\n    ```", "```kt\n    void Start()\n    {\n        if (!UnityAdController.showAds)\n        {\n            /* If not showing ads, just start the game */\n            SetPauseMenu(false);\n        }\n    }\n    ```", "```kt\n    using UnityEngine;\n    using UnityEngine.UI; // Button\n    public class ObstacleBehaviour : MonoBehaviour\n    {\n    [Tooltip(\"How long to wait before restarting the game\")] \n    public float waitTime = 2.0f;\n    public GameObject explosion;\n    private GameObject player;\n    private void OnCollisionEnter(Collision collision)\n    {\n        // First check if we collided with the player\n        if (collision.gameObject.GetComponent\n            <PlayerBehaviour>())\n        {\n            // Destroy (Hide) the player\n    collision.gameObject.SetActive(false);\n            player = collision.gameObject;\n            // Call the function ResetGame after waitTime\n           // has passed \n           Invoke(\"ResetGame\", waitTime);\n        }\n    }\n    /// <summary>\n    /// Will restart the currently loaded level\n    /// </summary>\n    private void ResetGame()\n    {\n        //Bring up restart menu\n        var go = GetGameOverMenu();\n        go.SetActive(true);\n        // Get our continue button\n        var buttons =\n        go.transform.GetComponentsInChildren<Button> ();\n        Button continueButton = null;\n        foreach (var button in buttons)\n        {\n            if (button.gameObject.name == \"Continue\n                Button\")\n            {\n                continueButton = button;\n                break;\n            }\n        }\n        // If we found the button we can use it\n        if (continueButton)\n        {\n            if (UnityAdController.showAds)\n            {\n                // If player clicks on button we want to\n                // play ad and then continue\n                continueButton.onClick.AddListener\n    (UnityAdController.ShowAd);\n                UnityAdController.obstacle = this;\n            }\n            else\n            {\n                // If can't play an ad, no need for\n                // continue button\n               continueButton.gameObject.SetActive(false);\n            }\n        }\n    }\n    /// <summary>\n    /// If the object is tapped, we spawn an explosion and\n    /// destroy this object\n    /// </summary>\n    private void PlayerTouch()\n    {\n        if (explosion != null)\n        {\n            var particles = Instantiate(explosion,\n                transform.position, Quaternion.identity);\n            Destroy(particles, 1.0f);\n        }\n            Destroy(this.gameObject);\n    }\n    /// <summary>\n    /// Retrieves the Game Over menu game object\n    /// </summary>\n    /// <returns>The Game Over menu object</returns>\n    GameObject GetGameOverMenu()\n    {\n        var canvas = GameObject.Find(\"Canvas\").transform;\n        return canvas.Find(\"Game Over\").gameObject;\n    }\n    /// <summary>\n    /// Handles resetting the game if needed\n    /// </summary>\n    public void Continue()\n    {\n        var go = GetGameOverMenu();\n        go.SetActive(false);\n        player.SetActive(true);\n        // Explode this as well (So if we respawn player\n    // can continue) \n        PlayerTouch();\n    }\n    }\n    ```", "```kt\n        /// <summary>\n        /// A reference to the player object\n        /// </summary>\n        private GameObject player;\n        private void OnCollisionEnter(Collision collision)\n        {\n            // First check if we collided with the player\n            if (collision.gameObject.GetComponent\n                <PlayerBehaviour>())\n            {\n                // Destroy the player\n                //Destroy(collision.gameObject);\n                // Destroy (Hide) the player\n                player = collision.gameObject;\n                player.SetActive(false);\n                // Call the function ResetGame after\n                // waitTime has passed\n                Invoke(\"ResetGame\", waitTime);\n            }\n        }\n    ```", "```kt\n    using UnityEngine.UI;\n    ```", "```kt\n    /// <summary>\n    /// Will restart the currently loaded level\n    /// </summary>\n    private void ResetGame()\n    {\n        //Bring up restart menu\n        var go = GetGameOverMenu();\n        go.SetActive(true);\n        // Get our continue button\n        var buttons =\n           go.transform.GetComponentsInChildren<Button>();\n        Button continueButton = null;\n        foreach (var button in buttons)\n        {\n            if (button.gameObject.name == \"Continue\n                Button\")\n            {\n                continueButton = button;\n                break;\n            }\n        }\n        /*If we found the button we can use it */\n        if (continueButton)\n        {\n            if (UnityAdController.showAds)\n            {\n                // If player clicks on button we want to\n                // play ad and then continue\n                continueButton.onClick.AddListener(\n                    UnityAdController.ShowAd);\n                UnityAdController.obstacle = this;\n            }\n            else\n            {\n                /* If can't play an ad, no need for\n                   continue button */\n               continueButton.gameObject.SetActive(false);\n            }\n        }\n    }\n    ```", "```kt\n    /// <summary>\n    /// Retrieves the Game Over menu game object\n    /// </summary>\n    /// <returns>The Game Over menu object</returns>\n    GameObject GetGameOverMenu()\n    {\n        var canvas = GameObject.Find(\"Canvas\").transform;\n        return canvas.Find(\"Game Over\").gameObject;\n    }\n    /// <summary>\n    /// Handles resetting the game if needed\n    /// </summary>\n    public void Continue()\n    {\n        var go = GetGameOverMenu();\n        go.SetActive(false);\n        player.SetActive(true);\n        /* Explode this as well (So if we respawn player\n           can continue) */\n        PlayerTouch();\n    }\n    ```", "```kt\n    /// <summary>\n    /// For holding the obstacle for continuing the game\n    /// </summary>\n    public static ObstacleBehaviour obstacle;\n    ```", "```kt\n    /// <summary>\n    /// This callback method handles logic for the ad\n    /// finishing.\n    /// </summary>\n    /// <param name=\"placementId\">The identifier for the Ad Unit showing the content</param>\n    /// <param name=\"showCompletionState\">Indicates the final state of the ad (whether the ad was skipped or completed).</param>\n    public void OnUnityAdsShowComplete(string placementId, UnityAdsShowCompletionState showCompletionState)\n    {\n        /* If there is an obstacle, we can remove it to\n           continue the game */\n        if (obstacle != null && showCompletionState ==\n            UnityAdsShowCompletionState.COMPLETED)\n        {\n            obstacle.Continue();\n        }\n        /* Unpause game when ad is over */\n        PauseScreenBehaviour.paused = false;\n        Time.timeScale = 1f;\n    }\n    ```", "```kt\n    /// <summary>\n    /// Start is called before the first frame update\n    /// </summary>\n    private void Start()\n    {\n        /* If there is no UnityAdController, we can add it\n           through code */\n        if (!GameObject.FindObjectOfType\n            <UnityAdController>())\n        {\n           var adController = new GameObject(\"Unity Ad\n               Controller\");\n           adController.AddComponent<UnityAdController>();\n        }\n        // Set our starting point\n        nextTileLocation = startPoint;\n        nextTileRotation = Quaternion.identity;\n        for (int i = 0; i < initSpawnNum; ++i)\n        {\n            SpawnNextTile(i >= initNoObstacles);\n        }\n    }\n    ```", "```kt\n    using System; // DateTime\n    using UnityEngine;\n    using UnityEngine.Advertisements; /* Advertisement class */\n    public class UnityAdController : MonoBehaviour, IUnityAdsShowListener\n    {\n        /// <summary>\n        /// A static reference to this object\n        /// </summary>\n        public static UnityAdController instance;\n        /// <summary>\n        /// If we should show ads or not\n        /// </summary>\n        public static bool showAds = true;\n        // Nullable type\n        public static DateTime? nextRewardTime = null;\n        /// <summary>\n        /// For holding the obstacle for continuing the\n        /// game\n        /// </summary>\n        public static ObstacleBehaviour obstacle;\n    // Rest of UnityAdController...\n    ```", "```kt\n    public static void ShowRewardAd()\n    {\n        nextRewardTime = DateTime.Now.AddSeconds(15);\n        ShowAd();\n    }\n    ```", "```kt\n    using System; // DateTime\n    using System.Collections; // IEnumerator\n    ```", "```kt\n    // Rest of ResetGame above...\n            /*If we found the button we can use it */\n            if (continueButton)\n            {\n                if (UnityAdController.showAds)\n                {\n                    // If player clicks on button we want\n                    // to play ad and then continue\n                    StartCoroutine(ShowContinue(\n                        continueButton));\n                }\n                else\n                {\n                    /* If can't play an ad, no need for\n                       continue button */\n                    continueButton.gameObject.SetActive(\n                        false);\n                }\n            }\n        }\n    ```", "```kt\n        public IEnumerator ShowContinue(Button contButton)\n        {\n            while (true)\n            {\n                var btnText =\n                    contButton.GetComponentInChildren\n                        < TMPPro.TMP_Text>();\n                /* Check if we haven't reached the next\n                   reward time yet (if one exists) */\n                var rewardTime =\n                    UnityAdController.nextRewardTime;\n                bool validTime = rewardTime.HasValue;\n                bool timePassed = true;\n                if (validTime)\n                {\n                    timePassed =\n                        DateTime.Now > rewardTime.Value;\n                }\n                if (!timePassed)\n                {\n                    /* Unable to click on the button */\n                    contButton.interactable = false;\n                    /* Get the time remaining until we get\n                       to the next reward time */\n                    TimeSpan remaining =\n                        rewardTime.Value - DateTime.Now;\n                    /* Get the time left in the following\n                       format 99:99 */\n                    var countdownText =\n                        string.Format(\"{0:D2}:{1:D2}\",\n                            remaining.Minutes,\n                                remaining.Seconds);\n                    /* Set our button's text to reflect\n                       the new time */\n                    btnText.text = countdownText;\n                    /* Come back after 1 second and check\n                       again */\n                    yield return new WaitForSeconds(1f);\n                }\n                else\n                {\n                    /* It's valid to click the button now\n                    */\n                    contButton.interactable = true;\n                    /* If player clicks on button we want\n                       to play ad and then continue */\n                    contButton.onClick.AddListener(\n                        UnityAdController.ShowRewardAd);\n                    UnityAdController.obstacle = this;\n                    /* Change text to its original version\n                    */\n                    btnText.text = \"Continue (Play Ad)\";\n                    /* We can now leave the coroutine */\n                    break;\n                }\n            }\n        }\n    ```"]