- en: Chapter 10. Optimizing, Testing, and Shipping your Games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing a game to the point of completion is a great accomplishment. It's
    one step closer to sharing it with the rest of the world so other people can play
    your new app. The benefit of creating your game with Corona SDK is that you have
    the option to build for iOS and/or Android. You want to ensure your application
    is ready for submission so it can be distributed in the mobile platform you're
    developing in. We'll go over the process of what it takes to prepare your game
    for its release state.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Improve performance of your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a distribution provisioning profile for the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage application information in iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to submit an application to application loader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign applications for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to submit an application to the Google Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding memory efficiency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you develop your application, you should always consider how your design
    choices affect the performance of your application. Device memory still has its
    constraints even though there are improvements in computing power and memory.
    Performance and optimization within the device will not only achieve faster response
    times, but also help minimize memory usage and maximize battery life.
  prefs: []
  type: TYPE_NORMAL
- en: 'Memory is an important resource on mobile devices. When too much memory is
    being consumed, devices may force quit your application when you least expect
    it. Here are some things to be aware of while developing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Eliminate memory leaks:** Allowing leaks to exist means extra used memory
    in your application that takes up valuable space. Even though Lua does automatic
    memory management, memory leaks can still occur in your code. For example, when
    you introduce global variables into your application, it is your job to tell Lua
    when they are not needed anymore so memory can be freed. This is done through
    using `nil` in your code `(myVariable = nil)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display images should be made as small as possible:** You may want to have
    many display images in your scene, but it may take up too much texture memory.
    Sprite sheets can take a toll on taking up a lot of memory in your apps. They
    should also be created at the smallest size as conveniently possible and have
    the appropriate amount of frames that demonstrate the animation clearly. For all
    items that you have displayed, plan out which elements are constantly in your
    background and foreground. If there is a way to combine several images together
    if they don''t move, do so. It''ll save some memory when adding multiple display
    images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not load all your resources all at once:** Avoid loading resource files
    until they are actually needed. This will help save memory and keep your application
    from crashing while trying to load too many things at once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove objects from the display hierarchy:** When a display object is created,
    it is implicitly added to a display hierarchy. When you no longer need a display
    object, you should remove it from the display hierarchy, especially when the objects
    contain images. This can be done by using `display.remove( myImage ); myImage
    = nil`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sound files should be made as small as possible: use a free program like Audacity
    or your preferred audio software to compress music or sound effects and build
    for the device. It is best to compare untouched audio with compressed audio to
    hear the difference in quality. This will help you determine a good median between
    sound quality and file size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Display images have a way of taking up a lot of texture memory if you're not
    paying attention to the size and amount of images being used all at once.
  prefs: []
  type: TYPE_NORMAL
- en: Group objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a property of several objects is set to the same value, it's preferable to
    add the objects to a group and then modify the property of the group. It'll make
    it much easier for you to code and it optimizes your animation.
  prefs: []
  type: TYPE_NORMAL
- en: Turn off animations when they're not being used
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's easy to forget to stop animations from running in the background when they're
    not needed or when you simply have them invisible.
  prefs: []
  type: TYPE_NORMAL
- en: When you include a listener such as`"enterFrame"` and the objects registered
    under the listener have been set to `.isVisible = false`, it'll continue to run
    in the background even though it is not seen onscreen. Make sure that listeners
    are removed when they are not needed.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing image sizes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you have large file sizes, especially full-screen images, the responsiveness
    of your application will slow down because of the time it takes to load and plus
    it uses up a lot of memory. When using large images, try compressing the file
    size as much as you can with an image-editing tool such as Photoshop or Pngcrush
    for example. It'll help reduce the file size and save you the pain on application
    lag. Compressing large image sizes will benefit you in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing iOS applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your game is finally debugged and completed, what's next? Assuming you're
    already registered in the iOS Developer Program, there are some guidelines that
    have to be followed before an application can be submitted to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Prepping your app icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are various image sizes and naming conventions required for your app
    icon depending on which iOS devices your application is developed for. You can
    find the latest information in the **Application Icons** section of the iOS Human
    Interface Guidelines on the Apple Developer website: [https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/MobileHIG.pdf](http://https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/MobileHIG.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the app icon requirements, which also need to be in `.png`
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iTunesArtwork`—512x512 px image. The .png extension needs to be removed for
    this image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon.png`—57x57 px image. Used for the App Store and home screen on iPhone
    3G/iPod Touch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon@2x.png`—114x114 px image. Used for the iPhone 4/4S home screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-72.png`—72x72 px image. Used for the iPad home screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-72@2x.png`—144x144 px image. Used for the iPad (high resolution) home
    screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small.png`—29x29 px image. Used for Spotlight and Settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small@2x.png`—58x58 px image. Used for iPhone 4/4S Spotlight and Settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small-50.png`—50x50 px image. Used for iPad Spotlight and Settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-Small-50@2x.png`—100x100 px image. Used for iPad (high resolution) Spotlight
    and Settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your `build.settings` file, you will need to include the icon references
    for all the devices you are building for in your application. The following is
    an example of how to set up your file if creating universal builds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You do not need to include the iTunesArtwork image in the plist, but make sure
    that it's inserted to your build project folder.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—setting up your distribution certificate and provisioning profile
    for the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have focused on creating development certificates and provisioning profiles
    to test and debug our apps on a device. Now we have to create a distribution version
    of them in order to submit an iOS application. Please be aware that Apple can
    change the design of their website at any time. So don't get frustrated if the
    steps and screenshots do not match up.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Apple Developer account and go to the iOS Provisioning Portal.
    Select App IDs. Create a new App ID that pertains to your application so you can
    identify it. If you have an existing App ID that you have been using during development,
    you can disregard this step. You can use an existing Bundle Seed ID if you choose
    to, otherwise select **Generate New** if this is your first in the bundle or if
    you simply want to create a new standalone application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Bundle Identifier (App ID Suffix)** field, specify a unique identifier
    for your app. It is recommended that you use the reverse-domain style string,
    that is, `com.domainname.appname`. You will need to replace **domainname** with
    your own domain name and **appname** with your own application name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—setting up your distribution certificate and provisioning
    profile for the App Store](img/1888_10_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Navigate to the Provisioning section of the **Provisioning Portal** and select
    the **Distribution** tab. Select the **App Store** radio button next to **Distribution
    Method**. Create a **Distribution Provisioning Profile Name**. Check to make sure
    that your iOS **Distribution Certificate** is displayed. Lastly, select the **App
    ID** you plan to use to create your **Distribution Provisioning Profile**. Click
    on the **Submit** button.![Time for action—setting up your distribution certificate
    and provisioning profile for the App Store](img/1888_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh your browser and download your new **Distribution Provisioning Profile**.![Time
    for action—setting up your distribution certificate and provisioning profile for
    the App Store](img/1888_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch Xcode if it's not already open and press *Shift + Command + 2* on the
    keyboard to open **Organizer**. Under **Library**, select the **Provisioning Profiles**
    section. Drag your downloaded `.mobileprovision` file to the **Organizer** window.
    This will automatically copy your `.mobileprovision` file to the proper directory
    or double-click on the file to add it.![Time for action—setting up your distribution
    certificate and provisioning profile for the App Store](img/1888_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **App ID** you use is imperative to identify your app that will be submitted.
    It is best to have a unique reverse domain style string. As for your **Bundle
    Identifier (App ID Prefix)**, you can generate a new one as well or use an existing
    one. If you are implementing Game Center or In App Purchase in your application,
    do not substitute a wild-card character (asterisk *). The **Bundle ID** needs
    to be completely unique.
  prefs: []
  type: TYPE_NORMAL
- en: In order to distribute for the App Store, you need to create an App Store Distribution
    Provisioning Profile. Any other profile, whether development or ad-hoc will not
    be accepted. The process is similar to making a Development Provisioning Profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more information on Distribution Provisioning Profiles on the
    Apple Developer site at: [https://developer.apple.com/ios/manage/distribution/index.action](http://https://developer.apple.com/ios/manage/distribution/index.action)
    (You will be asked to log in to your Apple Developer account if you haven''t done
    so already). And Anscamobile''s site at: [http://developer.anscamobile.com/content/building-devices-iphoneipad](http://developer.anscamobile.com/content/building-devices-iphoneipad).'
  prefs: []
  type: TYPE_NORMAL
- en: iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iTunes Connect is a suite of web-based tools that allows you to submit and manage
    your applications for distribution on the App Store. In iTunes Connect, you will
    be able to check the status of your contracts, set up your tax and banking information,
    obtain sales and finance reports, request promotional codes, manage users, applications,
    metadata, and your In-App Purchase catalog.
  prefs: []
  type: TYPE_NORMAL
- en: Contracts, tax, and banking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you plan on selling your app, you need to have a paid commercial agreement
    in place so that it can be posted to the App Store. You will have to request a
    contract pertaining to iOS Paid Applications. All this is done through iTunes
    Connect under the **Contracts, Tax**, and **Banking** link.
  prefs: []
  type: TYPE_NORMAL
- en: When requesting contracts, be advised of potential issues that can occur, such
    as delays when Apple processes your information for the first time and/or changing
    your current contact information in iTunes Connect (that is, change of address
    if you have moved to a different location). It is your responsibility to consistently
    contact Apple for support to make sure the information is always up to date in
    your contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—managing your application in iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to go over how to set up your application information in iTunes
    Connect. Any other information pertaining to user accounts, contracts, and banking
    that you would like to set up can be found at the following URL: [https://developer.apple.com/appstore/resources/submission/](http://https://developer.apple.com/appstore/resources/submission/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to iTunes Connect at: [http://itunesconnect.apple.com/](http://itunesconnect.apple.com/).
    Your login information is the same as your iOS Developer account. Once logged
    in, select **Manage Your Applications**. Click on the Add **New App** button.
    The **App Name** is the name of your application. The **SKU Number** is a unique
    alphanumeric identifier for the app. Your **Bundle ID** is the one you created
    in the iOS Provisioning Portal. Fill in the information and click **Continue**.![Time
    for action—managing your application in iTunes Connect](img/1888_10_05.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is selecting the date you want your application to be live in
    the App Store and the **Price Tier** you want to charge. There is an optional
    checkbox for **Discount for Educational Institutions**. This is only if you want
    your app to be discounted for educational institutions that want to purchase multiple
    copies at the same time. Click **Continue** when done.![Time for action—managing
    your application in iTunes Connect](img/1888_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next fill in the **Metadata** section about your application. This includes
    the version number, description of your game, categories, and keywords pertaining
    to your app, copyright, contact information, and support URL.![Time for action—managing
    your application in iTunes Connect](img/1888_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Rating** section is based on the content of your application. For each
    description, choose the level of frequency that best describes your app. There
    are certain content types that will result in automatic rejection such as realistic
    violence portrayed in your app or personal attacks to a target individual or group
    are a few examples. You can learn more about the **App Store Review Guidelines**
    at the following URL: [https://developer.apple.com/appstore/resources/approval/guidelines.html](http://https://developer.apple.com/appstore/resources/approval/guidelines.html).![Time
    for action—managing your application in iTunes Connect](img/1888_10_08.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As discussed earlier in the **Uploads** section, you will need a large version
    of your app icon, iPhone/iPod Touch screenshots and iPad screenshots (if your
    app runs on iPad) of the content in your application.![Time for action—managing
    your application in iTunes Connect](img/1888_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be greeted with a page summary of your application information. Check
    to make sure everything is displayed correctly and then click **Done**.![Time
    for action—managing your application in iTunes Connect](img/1888_10_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be sent back to your version details page. Notice a button that says
    **Ready to Upload Binary**. Click on the button and you will be required to answer
    a couple of questions about **Export Compliance**. Once completed, you will have
    the permission to upload your binary through **Application Loader**.![Time for
    action—managing your application in iTunes Connect](img/1888_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iTunes Connect is where you'll be managing your application from here on out
    when distributing to the App Store. Every single piece of information you want
    to display about your app is done in iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're in the section pertaining to **App Information**, make sure your
    **SKU Number** is unique and that it relates to your app so you can identify it
    later down the line. Also, make sure the **Bundle ID** you designated for your
    app is the correct one.
  prefs: []
  type: TYPE_NORMAL
- en: The app availability in the **Rights and Pricing** section controls when you
    want your app to go live once it's approved. It's good to set it at a date a couple
    of weeks in the future from when you submit it. It can take a couple of days to
    a couple of weeks for the review process to go from **Under Review** to **Ready
    for Sale** as long as there are no problems with the submission. The price tier
    is where you set the price for your app or it can be set to **Free**. You can
    click on **View Pricing Matrix** to determine the price thet you're aiming to
    sell your app for.
  prefs: []
  type: TYPE_NORMAL
- en: Filling out the information in the **Metadata** section is what the customer
    will see in the App Store. The **Rating** section pertains to Apple Content Descriptions.
    Make sure the level of frequency is checked off as close as possible to the content
    of your application.
  prefs: []
  type: TYPE_NORMAL
- en: The **Uploads** section is where your include your 512 x 512 px app icon and
    screenshots that best suit your app visually. Make sure you provide the correct
    image sizes. Once you have transitioned back to the **Application Information**
    screen, you'll notice the status says **Prepare for Upload**. When you click on
    the **Ready to Upload Binary** button on the Version Details page, you will answer
    questions about Export Compliance. Soon after, the status will change to **Waiting
    for Upload**.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information relating to iTunes Connect can be found at the following URL:
    [https://itunesconnect.apple.com/docs/iTunesConnect_DeveloperGuide.pdf](http://https://itunesconnect.apple.com/docs/iTunesConnect_DeveloperGuide.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Building an iOS application for distribution in Corona
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come to the homestretch on getting your iOS application submitted to
    the App Store. Assuming you have already tested your application and debugged
    with your development provisioning profile, you're ready to create a distribution
    build that will create a binary ZIP file of your app.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—building your application and uploading to Application Loader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Time to create the final game build for iOS distribution and upload it to the
    Application Loader for review under Apple's board.
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Corona simulator, navigate to application project folder, and run
    it. Go to the Corona simulator menu bar and select **File | Build | iOS**. Fill
    in all your application details. Make sure that your **Application Name** and
    **Version** match what is displayed in your iTunes Connect account. Choose **Device**
    to build an app bundle. Next, select the target device (iPhone or iPad) your app
    is created for from the **Supported Devices** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Code Signing Identity** drop-down menu, choose the **Distribution
    Provisioning Profile** you created in the iOS Provisioning Portal. In the **Save
    to folder** section, click **Browse** and choose where you would like your application
    to be saved. Click on the **Build** button when done.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—building your application and uploading to Application Loader](img/1888_10_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: When the build has been compiled, you will be greeted with a display that your
    application is ready for distribution. Select the **Upload to App Store** button.![Time
    for action—building your application and uploading to Application Loader](img/1888_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the **Welcome to Application Loader** window pops up, log in with your
    iTunes Connect information. You will then be brought to another window with the
    option to **Deliver Your App** or **Create New Package**. Choose **Deliver Your
    App**. The next window displays a drop-down menu; choose the name of the application
    you will be submitting and then click on the **Next** button.![Time for action—building
    your application and uploading to Application Loader](img/1888_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The available application information found in iTunes Connect is displayed.
    Verify that it is correct and then click on the **Choose** button.![Time for action—building
    your application and uploading to Application Loader](img/1888_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the ellipsis (...) button to replace the current file before submitting
    and then select the **Send** button.![Time for action—building your application
    and uploading to Application Loader](img/1888_10_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Application Loader will begin submitting your application binary file to
    the App Store.![Time for action—building your application and uploading to Application
    Loader](img/1888_10_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will get a confirmation that your binary was delivered to the App Store
    if it uploaded successfully. You can check on the status of your application in
    iTunes Connect when it goes to review, ready for sale, live, and so on. An e-mail
    will be sent to you upon every status change of your application. That's it! That's
    how you submit an app to the App Store!![Time for action—building your application
    and uploading to Application Loader](img/1888_10_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When your application has been reviewed and approved in the App Store, you can
    go into iTunes Connect and adjust the availability date if it is approved before
    your proposed launch date. Your app will be live in the App Store instantly.![Time
    for action—building your application and uploading to Application Loader](img/1888_10_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's important that when you build your app that under **Code Signing Identity**,
    you select your Distribution Provisioning Profile that was created for your distribution
    build. Upon the compilation of your build, you can launch the Application Loader.
    Make sure that you have Xcode installed. Application Loader will launch readily
    after you select the **Upload to App Store** button.
  prefs: []
  type: TYPE_NORMAL
- en: While you're in Application Loader, the name of your app will be displayed in
    the drop down once you have completed loading the binary information to iTunes
    Connect. When you deliver your app, select the zipped up binary from the location
    you saved your file at.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as the file is uploaded, a confirmation window will appear and an e-mail
    will be sent to the Apple ID assigned to your Apple account. Your binary will
    be shown with a status as **Waiting for Review** in iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: After all those steps, you officially know how to submit an iOS application
    to the App Store. Hooray!
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero—making a universal iOS build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you developed an application for iPhone only, try implementing it as an iPad
    version as well so it can become a universal build. Take the lessons you learned
    from the previous chapters using your `build.settings` and `config.lua` to resize
    your application. Also, don't forget about what is required of your app icon as
    well. It's like hitting two birds with one stone!
  prefs: []
  type: TYPE_NORMAL
- en: The Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Play Store is a publishing platform that helps you publicize, sell,
    and distribute your Android applications to users around the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'To register as an Google Play developer and get started with publishing, visit
    the Google Play Android Developer Console site publisher site. You can sign up
    for an account at the following URL: [https://play.google.com/apps/publish/](http://https://play.google.com/apps/publish/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating launcher icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A launcher icon is a graphic that represents your application. Launcher icons
    are used by applications and appear on the user''s home screen. Launcher icons
    can also be used to represent shortcuts into your application. These are similar
    to the icons created for iOS applications. The following are the launcher icon
    requirements, which also need to be in 32-bit `.png` format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Icon-ldpi.png`—36x36 px image. Needs to be at 120 dpi. Used for low-density
    screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-mdpi.png`—48x48 px image. Needs to be at 160 dpi. Used for medium-density
    screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-hdpi.png`—72x72 px image. Needs to be at 240 dpi. Used for high-density
    screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Icon-xhdpi.png`—96x96 px image. Needs to be at 320 dpi. Used for extra-high
    density screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Launcher icons need to be placed in your project folder at the time you build
    your application. The Google Play Store also requires you to have a 512 x 512
    px version of your icon, which will be uploaded in the developer console at upload
    time of your build. For more information about launcher icons, visit: [http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html](http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—signing your app for the Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android system requires that all installed applications be digitally signed
    with a certificate whose private key is held by the application's developer. The
    Android system uses the certificate as a means of identifying the author of an
    application and establishing a relationship of trust between applications. The
    certificate is not used to control which applications the user can install. The
    certificate does not need to be signed by a certificate authority; it can be self-signed.
    Certificates can be signed on either Mac or Windows systems.
  prefs: []
  type: TYPE_NORMAL
- en: On the Mac, go to **Applications | Utilities | Terminal**. On Windows, go to
    **Start Menu | All Programs | Accessories | Command Prompt**. Using the Keytool
    command, add in the following lines and press *Enter:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace `my-release-key` with the name of your application. Also, if you add
    any extra numbers past 999999 (that is, extra 9s) the application will appear
    broken.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—signing your app for the Google Play Store](img/1888_10_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'You will be asked to enter a keystore password. From here you will create a
    unique password that you as the developer must come up with. You will be asked
    to re-enter it once you''ve added it. The remaining other questions that will
    be asked pertains to your developer/company information, location, and so on.
    Fill it all in. Once you have completed the required information, you have generated
    a key to sign your Android build. For more information pertaining to app signing,
    visit: [http://developer.android.com/guide/publishing/app-signing.html](http://developer.android.com/guide/publishing/app-signing.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the Corona simulator, navigate to the application project folder, and
    run it. Go to the Corona simulator menu bar and select **File | Build | Android**.
    Fill in the information for **Application Name** and **Version** pertaining to
    your app. Specify a **Package** name using the Java scheme. Under **Keystore**,
    select the **Browse** button to locate your signed private key and then from the
    pull-down, select your generated key for your release build. You will be prompted
    to enter your keystore password you used to sign your application in the Keytool
    command. Under **Key Alias**, choose **aliasname** from the pull-down and enter
    your password when prompted. Select the **Browse** button to choose a location
    for your app build. Choose the **Build** button when finished.![Time for action—signing
    your app for the Google Play Store](img/1888_10_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Keytool generates the keystore as a file called `my-release-key.keystore`.
    The keystore and key are protected by the passwords you entered. The keystore
    contains a single key, valid for 999999 days. The alias is a name that you will
    use later, to refer to this keystore when signing your application.
  prefs: []
  type: TYPE_NORMAL
- en: Your keystore password is something you will create and must remember when you
    build your app in Corona. There will be an option if you want to use a different
    password for the aliasname. You can press *Enter* to use the same one while you're
    in the Terminal or Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: When you create your build in Corona, make sure your version number is an integer
    with no special characters. Also, you will have to make sure your `build.settings`
    includes the `versionCode` as well. This will be the same number as your version
    number. Refer to [Chapter 9](ch09.html "Chapter 9. Handling Multiple Devices and
    Networking your Apps"), *Handling Multiple Devices and Networking your Apps for
    more information*.
  prefs: []
  type: TYPE_NORMAL
- en: The Java scheme in your build is the reverse of your domain name with the name
    of your product/company appended, and the name of your app. For example, `com.mycompany.games.mygame`.
  prefs: []
  type: TYPE_NORMAL
- en: When you have your app built using your private key and you have selected an
    alias name, the `.apk` file will be created and ready to publish on the Google
    Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—submitting an app to the Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll be using the Developer Console. This is where your developer profile will
    be created to publish to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're logged in to the Developer Console, click on the button that says
    **Upload Application**. You will be greeted with a pop-up window that will allow
    you to upload your build. Click on the **Choose File** button and locate the `.apk`
    file of your application. Select the **Upload** button. When your `.apk` file
    is uploaded, click on the **Save** button. Lastly, click on the **Close** button.![Time
    for action—submitting an app to the Google Play Store](img/1888_10_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **APK files** tab and press the **Activate** link on the right side
    of the screen to activate the `.apk` file.![Time for action—submitting an app
    to the Google Play Store](img/1888_10_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the **Product details** tab. In the **Upload assets** section, you
    will require a couple of screenshots from your application and a 512 x 512 px
    version of your app icon. There are optional graphics and videos you can include
    as well if you desire. Scroll down the page to the **Listing details** section.
    Fill out the information with the details of your app, including the application
    **Title, Description, Application Type**, and **Category**. The next section entails
    the **Publishing options**. Check off the information that pertains to your app.
    The pricing is defaulted at **Free**. If you want to make a paid version, you
    must set up a merchant account with Google Checkout. The next section is **Contact
    information**. Fill out the necessary information. The last section is **Consent**.
    Carefully acknowledge the requirements for publishing to the Google Play Store
    and check off the boxes.![Time for action—submitting an app to the Google Play
    Store](img/1888_10_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have filled in the details in the **Product details** tab, click on
    the **Save** button so all your APK information is saved in the Developer Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Publish** button. You will be brought to the main screen
    of the Developer Console and your application status will display **Published**.
    Congratulations, you have published your app to the Google Play Store!![Time for
    action—submitting an app to the Google Play Store](img/1888_10_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Developer Console page displays a simple step-by-step process on how to
    publish your `.apk` file. While in the **APK files** tab, selecting the **Activate**
    link will allow the console to check which devices the build is compatible with.
  prefs: []
  type: TYPE_NORMAL
- en: The assets required to publish an app show the acceptable resolution and image
    types next to each section. It is optional to include a promotional graphic, feature
    graphic, and promotional video, but it would be in your best interest to add enough
    substance to your app page. This will make it appealing to potential customers.
  prefs: []
  type: TYPE_NORMAL
- en: After all the information related to your app is completed, make sure to save
    your progress. Once you click on the **Publish** button, you're done! You should
    be able to see your app in the Google Play Store within the hour you published
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero—adding more promos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Google Play Store gives you many options on how to promote your application.
    Additional assets can be included from the Developer Console. Try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a promotional graphic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a feature graphic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a promotional video of your app. A website like YouTube is a good way
    to share a trailer of your game.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pop quiz—publishing applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating an iOS Distribution Provisioning file, what distribution method
    do you need to use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Development
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. App Store
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. Ad-hoc
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. None of the above
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Where do you refer to for the status of submitted iOS applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. iTunes Connect
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. iOS Provisioning Portal
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. Application Loader
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. None of the above
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is required to build an app for the Google Play Store?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Create a private key under Keytool command
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. Sign your application with a debug key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. Sign your application with your private key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. a and c
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have accomplished a huge milestone with this chapter. Not only do we know
    how to submit to one major app market, but two! Publishing your applications to
    the App Store and Google Play Store is not a scary place after all.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have covered the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of memory efficiency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Provision Profiles for Distribution to the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting a binary to the Application Loader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing a release build for Android applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting `.apk` files to the Google Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next and final chapter, we will discuss everything about applying in-app
    purchases to your applications. We'll dive into Corona's store module and learn
    how to make purchases, transactions, and more! You don't want to miss this exciting
    chapter.
  prefs: []
  type: TYPE_NORMAL
