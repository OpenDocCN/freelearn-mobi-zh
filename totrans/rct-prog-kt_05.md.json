["```kt\n    fun main(args: Array<String>) { \n      createObservable()//(1) \n        .debounce(200, TimeUnit.MILLISECONDS)//(2) \n        .subscribe { \n           println(it)//(3) \n         } \n    } \n\n    inline fun createObservable():Observable<String> = \n    Observable.create<String> { \n      it.onNext(\"R\")//(4) \n      runBlocking { delay(100) }//(5) \n      it.onNext(\"Re\") \n      it.onNext(\"Reac\") \n      runBlocking { delay(130) } \n      it.onNext(\"Reactiv\") \n      runBlocking { delay(140) } \n      it.onNext(\"Reactive\") \n      runBlocking { delay(250) }//(6) \n      it.onNext(\"Reactive P\") \n      runBlocking { delay(130) } \n      it.onNext(\"Reactive Pro\") \n      runBlocking { delay(100) } \n      it.onNext(\"Reactive Progra\") \n      runBlocking { delay(100) } \n      it.onNext(\"Reactive Programming\") \n      runBlocking { delay(300) } \n      it.onNext(\"Reactive Programming in\") \n      runBlocking { delay(100) } \n      it.onNext(\"Reactive Programming in Ko\") \n      runBlocking { delay(150) } \n      it.onNext(\"Reactive Programming in Kotlin\") \n      runBlocking { delay(250) } \n      it.onComplete() \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      listOf(1,2,2,3,4,5,5,5,6,7,8,9,3,10)//(1) \n        .toObservable()//(2) \n        .distinct()//(3) \n        .subscribe { println(\"Received $it\") }//(4) \n   } \n```", "```kt\n    fun main(args: Array<String>) { \n      listOf(1,2,2,3,4,5,5,5,6,7,8,9,3,10)//(1) \n        .toObservable()//(2) \n        .distinctUntilChanged()//(3) \n        .subscribe { println(\"Received $it\") }//(4) \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      val observable = listOf(10,1,2,5,8,6,9) \n        .toObservable() \n\n      observable.elementAt(5)//(1) \n        .subscribe { println(\"Received $it\") } \n\n      observable.elementAt(50)//(2) \n        .subscribe { println(\"Received $it\") } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.range(1,20)//(1) \n        .filter{//(2) \n          it%2==0 \n     }\n      .subscribe { \n         println(\"Received $it\")  \n      } \n   }\n```", "```kt\n    fun main(args: Array<String>) { \n      val observable = Observable.range(1,10) \n      observable.first(2)//(1) \n       .subscribeBy { item -> println(\"Received $item\") } \n\n      observable.last(2)//(2) \n       .subscribeBy { item -> println(\"Received $item\") } \n\n      Observable.empty<Int>().first(2)//(3) \n       .subscribeBy { item -> println(\"Received $item\") } \n    }\n```", "```kt\n    fun main(args: Array<String>) { \n      val observable = Observable.range(1,10) \n      observable \n        .ignoreElements() \n        .subscribe { println(\"Completed\") }//(1) \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      val observable = listOf(10,9,8,7,6,5,4,3,2,1).toObservable() \n      observable.map {//(1) \n        number-> \"Transforming Int to String $number\" \n      }.subscribe { \n        item-> println(\"Received $item\") \n      } \n    }\n```", "```kt\n    fun main(args: Array<String>) { \n      val list = listOf<MyItemInherit>( \n         MyItemInherit(1), \n         MyItemInherit(2), \n         MyItemInherit(3), \n         MyItemInherit(4), \n         MyItemInherit(5), \n         MyItemInherit(6), \n         MyItemInherit(7), \n         MyItemInherit(8), \n         MyItemInherit(9), \n         MyItemInherit(10) \n       )//(1) \n\n       list.toObservable()//(2) \n         .map { it as MyItem }//(3) \n         .subscribe { \n             println(it) \n         } \n\n        println(\"cast\") \n\n        list.toObservable() \n            .cast(MyItem::class.java)//(4) \n            .subscribe { \n                println(it) \n            } \n      } \n\n      open class MyItem(val id:Int) {//(5) \n      override fun toString(): String { \n        return \"[MyItem $id]\" \n      } \n     } \n\n    class MyItemInherit(id:Int):MyItem(id) {//(6) \n      override fun toString(): String { \n        return \"[MyItemInherit $id]\" \n      } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      val observable = listOf(10,9,8,7,6,5,4,3,2,1).toObservable() \n      observable.flatMap { \n        number-> Observable.just(\"Transforming Int to String $number\") \n      }.subscribe { \n        item-> println(\"Received $item\") \n      } \n   } \n```", "```kt\n    fun main(args: Array<String>) { \n      val observable = listOf(10,9,8,7,6,5,4,3,2,1).toObservable() \n      observable.flatMap { \n        number-> \n        Observable.create<String> {//(1) \n          it.onNext(\"The Number $number\") \n          it.onNext(\"number/2 ${number/2}\") \n          it.onNext(\"number%2 ${number%2}\") \n          it.onComplete()//(2) \n        } \n      }.subscribeBy ( \n         onNext = { \n            item-> println(\"Received $item\") \n         }, \n         onComplete = { \n            println(\"Complete\") \n         } \n       ) \n    }   \n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.range(0,10)//(1) \n       .filter{it>15}//(2) \n       .subscribe({ \n         println(\"Received $it\") \n      }) \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.range(0,10)//(1) \n       .filter{it>15}//(2) \n       .defaultIfEmpty(15)//(3) \n       .subscribe({ \n           println(\"Received $it\") \n        }) \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.range(0,10)//(1) \n        .filter{it>15}//(2) \n        .switchIfEmpty(Observable.range(11,10))//(3) \n        .subscribe({ \n            println(\"Received $it\") \n        }) \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.range(0,10)//(1) \n        .startWith(-1)//(2) \n        .subscribe({ \n           println(\"Received $it\") \n        }) \n\n        listOf(\"C\",\"C++\",\"Java\",\"Kotlin\",\"Scala\",\"Groovy\")//(3) \n          .toObservable() \n          .startWith(\"Programming Languages\")//(4) \n          .subscribe({ \n            println(\"Received $it\") \n          }) \n    }\n```", "```kt\n     fun main(args: Array<String>) { \n       println(\"default with integer\") \n       listOf(2,6,7,1,3,4,5,8,10,9) \n         .toObservable() \n         .sorted()//(1) \n         .subscribe { println(\"Received $it\") } \n\n      println(\"default with String\") \n      listOf(\"alpha\",\"gamma\",\"beta\",\"theta\") \n         .toObservable() \n         .sorted()//(2) \n         .subscribe { println(\"Received $it\") } \n\n      println(\"custom sortFunction with integer\") \n      listOf(2,6,7,1,3,4,5,8,10,9) \n         .toObservable() \n         .sorted { item1, item2 -> if(item1>item2) -1 else 1 }//(3) \n         .subscribe { println(\"Received $it\") } \n\n      println(\"custom sortFunction with custom class-object\") \n      listOf(MyItem1(2),MyItem1(6), \n         MyItem1(7),MyItem1(1),MyItem1(3), \n         MyItem1(4),MyItem1(5),MyItem1(8), \n         MyItem1(10),MyItem1(9)) \n        .toObservable() \n        .sorted { item1, item2 -> \n        if(item1.item<item2.item) -1 else 1 }//(4) \n        .subscribe { println(\"Received $it\") } \n     } \n\n    data class MyItem1(val item:Int)\n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.range(1,10) \n      .scan { previousAccumulation, newEmission ->\n       previousAccumulation+newEmission }//(1) \n      .subscribe { println(\"Received $it\") } \n\n      listOf(\"String 1\",\"String 2\", \"String 3\", \"String 4\") \n       .toObservable() \n       .scan{ previousAccumulation, newEmission -> \n        previousAccumulation+\" \"+newEmission }//(2) \n       .subscribe { println(\"Received $it\") } \n\n       Observable.range(1,5) \n       .scan { previousAccumulation, newEmission -> \n        previousAccumulation*10+newEmission }//(3) \n        .subscribe { println(\"Received $it\") } \n      } \n```", "```kt\n    fun main(args: Array<String>) { \n      listOf(1,5,9,7,6,4,3,2,4,6,9).toObservable() \n      .count() \n      .subscribeBy { println(\"count $it\") } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.range(1,10) \n      .reduce { previousAccumulation, newEmission -> \n       previousAccumulation+newEmission  } \n      .subscribeBy { println(\"accumulation $it\") } \n\n       Observable.range(1,5) \n       .reduce { previousAccumulation, newEmission -> \n        previousAccumulation*10+newEmission  } \n       .subscribeBy { println(\"accumulation $it\") } \n      } \n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.just(1,2,3,5,6,7,\"Errr\",8,9,10) \n       .map { it.toIntOrError() } \n       .subscribeBy ( \n           onNext = { \n              println(\"Next $it\") \n           }, \n           onError = { \n              println(\"Error $it\") \n           } \n        ) \n     } \n```"]