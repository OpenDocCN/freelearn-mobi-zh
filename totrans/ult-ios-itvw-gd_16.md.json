["```swift\nfunc processUserData(userData: [String: Any]) {        // Responsibility 1: Validate the data\n        guard let name = userData[\"name\"] as? String,\n            !name.isEmpty,\n              let age = userData[\"age\"] as? Int, age > 0,\n              let email = userData[\"email\"] as? String,\n                  !email.isEmpty else {\n            print(\"Invalid user data\")\n            return\n        }\n        // Responsibility 2: Save the data to a file\n        let documentsDirectory = FileManager.\n            default.urls(for: .documentDirectory, in:\n                .userDomainMask).first!\n        let fileURL = documentsDirectory.\n            appendingPathComponent(\"userData.txt\")\n        let userDataString = \"Name: \\(name)\\nAge:\n            \\(age)\\nEmail: \\(email)\\n\"\n        do {\n            try userDataString.write(to: fileURL,\n                atomically: true, encoding: .utf8)\n            print(\"User data saved to file.\")\n        } catch {\n            print(\"Error saving user data to file: \\(error)\")\n        }\n        // Responsibility 3: Send a welcome email\n        print(\"Sending welcome email to: \\(email)\")\n    }\n}\n```", "```swift\nclass BadSoCExample {    var name: String\n    init(name: String) {\n        self.name = name\n    }\n    func printFullName(firstName: String, lastName: String) {\n        name = firstName\n        print(\"First name: \\(name)\")\n        name = lastName\n        print(\"Last name: \\(name)\")\n        print(\"Full name: \\(firstName) \\(name)\")\n    }\n}\nlet example = BadSoCExample(name: \"John Doe\")\nexample.printFullName(firstName: \"John\", lastName: \"Doe\")\n```", "```swift\nfunc calculateTotalPrice(itemPrices: [Double],    itemQuantities: [Int]) -> Double {\n    var totalPrice = 0.0\n    for i in 0..<itemPrices.count {\n        totalPrice += itemPrices[i] * Double (itemQuantities[i])\n    }\n    return totalPrice\n}\n```", "```swift\nfunc calculateItemPrice(price: Double, quantity: Int) -> Double {    return price * Double(quantity)\n}\nfunc calculateTotalPrice(itemPrices: [Double],\n    itemQuantities: [Int]) -> Double {\n    var totalPrice = 0.0\n    for i in 0..<itemPrices.count {\n        totalPrice += calculateItemPrice(price:\n            itemPrices[i], quantity: itemQuantities[i])\n    }\n    return totalPrice\n}\n```", "```swift\nfunc getProducts() -> [Product] {}\n```", "```swift\nfunc retrieveProductsFromServer() -> [Product] {}\n```", "```swift\nfunc retrieveProductsFromServerAndSaveThemToDB() -> [Proudct] {}\n```", "```swift\nfetchData() -> fetchUserDataFromServer()calculate() -> calculateAvrageSalary()\nvalidate() -> validatePasswordStrength()\nadd() -> addItemToCart()\nload() -> loadDataFromCache()\n```"]