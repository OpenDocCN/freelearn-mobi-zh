["```swift\n    import **UIKit**\n    class SharedData {  \n      // MARK: - Properties\n      @MainActor static let shared = SharedData()\n      private var journalEntries: [JournalEntry] = []\n      // MARK: - Initializers\n      private init() {\n      }\n      // MARK: - Access methods\n      func numberOfJournalEntries() -> Int {\n        journalEntries.count\n      }\n      func journalEntry(at index: Int) -> JournalEntry {\n        journalEntries[index]\n      }\n      func allJournalEntries() -> [JournalEntry] {\n        journalEntries\n      }\n      func addJournalEntry(_ newJournalEntry: JournalEntry) {\n        journalEntries.insert(newJournalEntry, at: 0)\n      }\n      func removeJournalEntry(at index: Int) {\n        journalEntries.remove(at: index)\n      }\n    } \n    ```", "```swift\n@MainActor static let shared = SharedData() \n```", "```swift\nprivate var journalEntries: [JournalEntry] = [] \n```", "```swift\nprivate init() {\n} \n```", "```swift\nfunc numberOfJournalEntries() -> Int {\n  journalEntries.count\n} \n```", "```swift\nfunc journalEntry(at index: Int) -> JournalEntry {\n  journalEntries[index]\n} \n```", "```swift\nfunc allJournalEntries() -> [JournalEntry] {\n  journalEntries\n} \n```", "```swift\nfunc addJournalEntry(_ newJournalEntry: JournalEntry) {\n  journalEntries.insert(newJournalEntry, at: 0)\n} \n```", "```swift\nfunc removeJournalEntry(at index: Int) {\n  journalEntries.remove(at: index)\n} \n```", "```swift\n    //MARK: - Properties\n    @IBOutlet var tableView: UITableView!\n    **private var****journalEntries****: [****JournalEntry****] = []** **// remove** \n    ```", "```swift\n    override func viewDidLoad() {\n      super.viewDidLoad()\n      **journalEntries** **=****JournalEntry****.****createSampleJournalEntryData****()** **// remove**\n\n    } \n    ```", "```swift\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n      **SharedData****.****shared****.****numberOfJournalEntries****()**\n    } \n    ```", "```swift\n    let journalCell = tableView.dequeueReusableCell(withIdentifier: \"journalCell\", for: indexPath) as! JournalListTableViewCell\n    **let** **journalEntry** **=****SharedData****.****shared****.****journalEntry****(****at****: indexPath.****row****)**\n    journalCell.photoImageView.image = journalEntry.photo \n    ```", "```swift\n    if editingStyle == .delete {\n      **SharedData****.****shared****.****journalEntry****(****at****: indexPath.****row****)**\n      tableView.reloadData()\n    } \n    ```", "```swift\n    let selectedJournalEntry = **SharedData****.****shared****.****journalEntry****(****at****: indexPath.****row****)**\n    journalEntryDetailViewController.selectedJournalEntry = selectedJournalEntry \n    ```", "```swift\n    if let sourceViewController = segue.source as? AddJournalEntryViewController, let newJournalEntry = sourceViewController.newJournalEntry {\n    **SharedData****.****shared****.****addjournalEntry****(newJournalEntry)**\n      tableView.reloadData()\n    } \n    ```", "```swift\n    //MARK: - Properties\n    @IBOutlet var mapView: MKMapView!\n    let locationManager = CLLocationManager()\n    private var locationTask: Task<Void, Error>?\n    **private var****annotations****:** **[****JournalEntry****]****= []** **// remove**\n    var selectedJournalEntry: JournalEntry? \n    ```", "```swift\n    override func viewDidLoad() {\n      super.viewDidLoad()\n    **fetchUserLocation****()** **// remove**\n      mapView.delegate = self\n    **annotations** **=** **JournalEntry****.**\n    **createSampleJournalEntryData****()** **// remove**\n    **mapView****.****addAnnotations****(****annotations****)** **// remove**\n    } \n    ```", "```swift\n    locationManager.requestWhenInUseAuthorization()\n    **locationManager****.****desiredAccuracy****=****kCLLocationAccuracyKilometer**\n    self.navigationItem.title = \"Getting location...\" \n    ```", "```swift\n    override func viewIsAppearing(_ animated: Bool) {\n      super.viewIsAppearing(animated)\n      fetchUserLocation()\n    } \n    ```", "```swift\n     mapView.region = MKCoordinateRegion(center: \n        CLLocationCoordinate2D(latitude: lat, longitude: long),\n        span: MKCoordinateSpan(latitudeDelta: 0.01,\n        longitudeDelta: 0.01))\n    **mapView****.****addAnnotations****(****SharedData****.****shared** **.****allJournalEntries****())**\n\n      }\n    } \n    ```", "```swift\n[\n  {\n    \"dateString\": \"May 17, 2023\"\n    \"rating\": 5\n    \"entryTitle\": \"Good\"\n    \"entryBody\": \"Today is a good day\"\n    \"photoData\": \"<photo data for the sun.max image>\"\n    \"latitude\":\n    \"longitude\":\n  },\n  {\n    \"dateString\": \"May 17, 2023\"\n    \"rating\": 0\n    \"entryTitle\": \"Bad\"\n    \"entryBody\": \"Today is a bad day\"\n    \"photoData\": \"<photo data for the cloud image>\"\n    \"latitude\": 37.331354\n    \"longitude\": -122.031791\n  },\n  {\n    \"dateString\": \"May 17, 2023\"\n    \"rating\": 3\n    \"entryTitle\": \"Good\"\n    \"entryBody\": \"Today is a good day\"\n    \"photoData\": \"<photo data for the cloud.sun>\"\n    \"latitude\":\n    \"longitude\":\n  }\n] \n```", "```swift\n    class JournalEntry: NSObject, MKAnnotation**,** **Codable** { \n    ```", "```swift\n    let date: Date\n    let rating: Int\n    let entryTitle: String\n    let body: String\n    let **photoData****:** **Data****?**\n    let latitude: Double?\n    let longitude: Double? \n    ```", "```swift\n    self.date = Date()\n    self.rating = rating\n    self.entryTitle = title\n    self.body = body\n    self.photoData = **photo?.jpegData(compressionQuality:** **1.0****)** \n    ```", "```swift\n    let journalEntry = SharedData.shared.getJournalEntry(index: indexPath.row)\n    **if****let** **photoData** **=** **journalEntry.****photoData** **{**\n     **journalCell.****photoImageView****.****image****=****UIImage****(****data****: photoData)**\n    **}**\n    journalCell.dateLabel.text = journalEntry.date.formatted(\n      .dateTime.month().day().year()\n    )\n    journalCell.titleLabel.text = journalEntry.entryTitle\n    return journalCell \n    ```", "```swift\n    override func viewDidLoad() {\n      super.viewDidLoad()\n      dateLabel.text = selectedJournalEntry?.date.formatted(\n        .dateTime.day().month(.wide).year()\n      )\n      titleLabel.text = selectedJournalEntry?.entryTitle\n      bodyTextView.text = selectedJournalEntry?.entryBody\n    **if****let** **photoData** **=****selectedJournalEntry****?****.****photoData** **{**\n    **photoImageView****.****image****=****UIImage****(****data****: photoData)**\n     **}**\n      getMapSnapshot()\n    } \n    ```", "```swift\n    // MARK: - Persistence\n    func documentDirectory() -> URL {\n      FileManager.default.urls(for: .documentDirectory,   in: .userDomainMask).first!\n    } \n    ```", "```swift\n    func loadJournalEntriesData() {\n      let pathDirectory = documentDirectory()\n      let fileURL = pathDirectory.  appendingPathComponent(\"journalEntriesData.json\")\n      do {\n        let data = try Data(contentsOf: fileURL)\n        let entries = try JSONDecoder().decode(    [JournalEntry].self, from: data)\n        journalEntries = entries\n      } catch {\n        print(\"Failed to read JSON data: \n        \\(error.localizedDescription)\")\n      }\n    } \n    ```", "```swift\n    func saveJournalEntriesData() {\n      let pathDirectory = documentDirectory()\n      do {\n        try? FileManager().createDirectory(at: pathDirectory,    withIntermediateDirectories: true)\n        let filePath =   pathDirectory.appendingPathComponent(    \"journalEntriesData.json\")\n        let json = try JSONEncoder().encode(journalEntries)\n        try json.write(to: filePath)\n      } catch {\n        print(\"Failed to write JSON data: \n        \\(error.localizedDescription)\")\n      }\n    } \n    ```", "```swift\n    override func viewDidLoad() {\n      super.viewDidLoad()\n      **SharedData****.****shared****.****loadJournalEntriesData****()**\n    } \n    ```", "```swift\n    if editingStyle == .delete {\n      SharedData.shared.removeJournalEntry(at: indexPath.row)\n      **SharedData****.****shared****.****saveJournalEntriesData****()**\n      tableView.reloadData()\n    } \n    ```", "```swift\n    if let sourceViewController = segue.source as? AddJournalEntryViewController, let newJournalEntry = sourceViewController.newJournalEntry {\n      SharedData.shared.addJournalEntry(newJournalEntry)\n      **SharedData****.****shared****.****saveJournalEntriesData****()**\n      tableView.reloadData()\n    } \n    ```"]