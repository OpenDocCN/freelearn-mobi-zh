- en: Chapter 3. Administering the Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to introduce you to administering the **SQLite**
    database and make you aware of the different components of this relational database
    system that best suits the mobile or tablet devices. SQLite is an embedded SQL
    engine and simply reads and writes to ordinary disk files instead of having a
    separate server process. It was designed for this purpose and is much easier to
    maintain and look after.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from being a great database for programmers, SQLite is also an easier
    database to administer and maintain. There is no configuration or setup required
    to administer this database. It comes with a standard **command-line interface**
    (**CLI**) client that is available to administer the database(s).
  prefs: []
  type: TYPE_NORMAL
- en: There is a variety of languages that work with SQLite which are easier to maintain
    and add new functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the features of SQLite:'
  prefs: []
  type: TYPE_NORMAL
- en: SQLite is one of the most easy-to-learn databases, is easy to interact with,
    and gets on with the task of building a new database from scratch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its ability to integrate database engine itself into the code is a major boost
    for code development, performance, and interfacing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to start, learn, perform, and get practical with how a relational
    database system, functions, glued together and is a store for your application's
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the market, there are a variety of tools that can be used to make database
    administration on SQLite even easier to use, more practical to install and go
    and develop. In our case, only the **command-line program** (**CLP**) will be
    used.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are some of the tools in the market:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RazorSQL**, located at [http://www.razorsql.com/features/sqlite_features.html](http://www.razorsql.com/features/sqlite_features.html),
    is a tailored piece of software that works in a browser environment. It can highlight
    syntax and comes with an editor to write and update code, some visual administrator
    tools, and functionality unique to SQLite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another tool is **SQLite Maestro,** located at [http://www.sqlmaestro.com/products/sqlite/maestro/](http://www.sqlmaestro.com/products/sqlite/maestro/),
    which is a superior product aimed at the database management market for the creation,
    updation, and deletion of data using SQLite. For example, it includes a database
    designer, SQLite syntax checking, administrator tools, and a data exporter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navicat** is another database management tool for SQLite, located at [http://www.navicat.com/products/navicat-for-sqlite](http://www.navicat.com/products/navicat-for-sqlite).
    Their product comes with some good visual tools, database maintenance functionality,
    reporting, and data exporting, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CLP is actually a separate program that has the SQLite engine compiled in it.
    CLP operates both as a command line tool and interactive shell. The command line
    mode is the facility **database administrators** (**DBAs**) can use to create
    tables for an application, upload data to the skeleton tables, and modify information
    so that it is ready for development, testing, and releasing. To start using the
    command, in terminal monitor, type `sqlite3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Administering the Database](img/4725_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you type `sqlite3 <database name>`, the system will be loaded into the named
    database and will be ready to do work. For example, you can also type `sqlite3
    –help`, as shown in the following screenshot, which will outline the commands
    available as part of the help. As shown in the following screenshot, there are
    a variety of options that will help the DBA or user perform tasks as required.
    Within `sqlite3`, to exit at the prompt, type `.exit` to leave the program. At
    the terminal prompt, `$`, type `sqlite3 –help` to get a list of commands, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Administering the Database](img/4725_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding steps are manual and can be used by the database administrator.
    Shell scripts to automate database processes can ideally use the format, which
    can improve database performance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start, a database must be created. By using the following command to create
    the database, although it will be created, nothing will be physically stored in
    the database yet. There is no default place to store the SQLite database once
    it has been created. The location could be your home directory, a working directory,
    or a pre-created database directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By default, an environment is prepared ready effectively, for database objects,
    as defined by the preceding statement. SQLite was designed with the distinct policy
    of avoiding any size limits. To have a policy that would easily fit in the device's
    memory and be a 32-bit integer would work, but was not the best option. It proved
    to create problems since the product was pushed to extremes and the exploitation
    of security loopholes may have made the product vulnerable. The default settings
    of objects are generous and adequate for most applications. There are also different
    settings statements such as `SQLITE_MAX_COLUMN` that controls the maximum number
    of columns in a table, indexes, or view.
  prefs: []
  type: TYPE_NORMAL
- en: It is only when tables and indexes are created that the physical creation of
    the database actually starts. This allows the DBA to alter different page settings
    before the disk parameters and allocations are created. Thereafter, it is more
    difficult to change the settings.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a table in the new database, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a table](img/4725_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After the preceding command is run to create a database, the `create table temp`
    statement is executed to make a temporary table. It has three columns, `id` which
    is a primary key whose value is automatically incremented; `name`, which is text;
    and `address`; which is also of text.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To insert data into the new table, use the following command. It is a simple
    operation to insert data into the table with the columns listed on the left-hand
    side, and the values and parameters, or data on the right-hand side of the same
    format type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting data](img/4725_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Data is input into the `temp` table using data for two columns: `name` and
    `address`. Please note that no values are required for the `id` field since its
    value is provided internally by SQLite, which automatically increments its value.'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To select data from the new table, follow the next command. It is a simple
    operation to fetch the information for display on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting data](img/4725_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Data is selected from the `temp` table using all columns, hence the character
    `*`, otherwise, a column name could have been specified instead, retrieving only
    that column data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an index for the `temp` table, which will allow faster selection
    using the `id` field and also have a small overhead, which may be overtaken by
    the performance gain, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an index](img/4725_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An index called `temp_idx` is created in the `name` column, which will allow
    faster access with a minimal overhead for data access.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To export data from SQLite, the `.dump` command is used, as shown in the following
    screenshot. No arguments are required and the complete database can be exported
    in this way. If an argument is added like a table name, then only their contents
    will be exported. By default, the `.dump` command will output the data to the
    screen. If you want to direct the output to a filesystem, use the `.output` statement
    plus a space, and then the `file name`, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: After the commands are used, a file is created in your current directory. To
    get back to outputting the data back to the screen, use the `.output stdout` command,
    as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using these methods allows more flexibility, control, and better formatting
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting data](img/4725_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, there is an output to the `temp.sql` file.
    The `.dump` command is issued to output all the information about the database
    to the `temp.sql` file. To put the output back to the screen, use the `.output
    stdout` command.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing database schema data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SQLite offers several commands as part of a command set to get information
    about the contents of a database. For example, to get a list of tables, use the
    `.table` command. To find a specific table name, use a `%` symbol and text as
    a pattern to find the result, for example, `.tables [pattern]`, as shown in the
    following screenshot. By issuing the `.tables` command and appending a `%te%`
    text to it, is a request to SQLite to list all its tables within the database
    that has the word `te` (in our case `temp`) in their name which are displayed
    correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing database schema data](img/4725_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Index data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prior to the following example, a `temp_idx` index has been created, to get
    a list of indexes for the `temp` table, at the `sqlite3` prompt `.indices temp`,
    which is actually the `.indices` command followed by the table name, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Index data](img/4725_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By using the preceding command, the `temp` table's index can be seen.
  prefs: []
  type: TYPE_NORMAL
- en: Schema data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To view the schema of the database, the following command can be issued, `.schema`,
    but type the `.schema <table name>` command to get specific information on a `name`
    database object. See the following screenshot for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Schema data](img/4725_03_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding command shows the output from the `temp` set of tables and index
    from the database. The next command shows the whole database schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Schema data](img/4725_03_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The SQLite master schema table shows tables and indexes that exist on the SQLite
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a couple of ways to back up your SQLite database. To make it portable,
    use the `.dump` statement as part of the CLP, which can export the entire database
    and scripts to the filesystem. An example can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Backing up the database](img/4725_03_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding statement shows how to invoke SQLite with a database name and
    pipe the output to a file called `temp.sql`.
  prefs: []
  type: TYPE_NORMAL
- en: Following is another way to invoke SQLite and then perform a backup interactively.
  prefs: []
  type: TYPE_NORMAL
- en: 'User can directly import the data, by the following set of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Backing up the database](img/4725_03_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following command will open SQLite and the `temp.db` database, and import
    the `temp.sql` file to it. Within the `temp.sql` file, there will be scripts to
    read the source files and import data back to database (existing or new version):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Backing up the database](img/4725_03_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is another way, just copy the `temp.db` file to a version called `temp.backup`,
    but the aforementioned methods are much better and portable, and there may be
    binary compatibility issues since SQLite does not have a great reputation for
    backward compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Database tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a vast array of SQLite administration tools, and one of them is **SQL
    Browser** ([http://sqlitebrowser.org/](http://sqlitebrowser.org/)), which works
    on different platforms. Databases can be managed, tables can be exported or imported,
    and queries can be created, updated, and executed. The other tools are listed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RazorSQL**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navicat**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL Maestro**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL Browser**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**phpSQLiteAdmin**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQLiteManager**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQLite Expert**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another previous or abandoned project for SQLite administration is **phpSQLiteAdmin**.
    This is now abandoned and the last update was in 2008\. It is available at [http://phpsqliteadmin.sourceforge.net/](http://phpsqliteadmin.sourceforge.net/).
    phpSQLiteAdmin is a web interface for the administration of SQLite databases.
    It allows users to drop, create, and manage databases, and view database information
    like the schema, tables, indexes, and file metadata. There is a similar project
    in the market, namely; **Bitbucket** (available at [https://bitbucket.org/phpliteadmin/public/](https://bitbucket.org/phpliteadmin/public/)).
  prefs: []
  type: TYPE_NORMAL
- en: '**SQLiteManager** is a product that can manage databases to create, update,
    and import or export data; SQLiteManager is available at [http://www.sqlitemanager.org/](http://www.sqlitemanager.org/).
    This is a web-based administration tool for SQLite. Rows in the tables can be
    managed and user functions can be created as required. Again, this project and
    product is not active at present and there have been no updates since 2013\. This
    product has now moved to Bitbucket and is no longer valid as SQLiteManager. However,
    since moving to Bitbucket in 2013, there have been no updates.'
  prefs: []
  type: TYPE_NORMAL
- en: There is an additional tool, namely SQLite Expert (available at [http://www.sqliteexpert.com/](http://www.sqliteexpert.com/))
    that has a personal and a professional edition. For example, it has a built-in
    **SQL Query Builder**, facilities to import and export data, and data editing.
  prefs: []
  type: TYPE_NORMAL
- en: Database file information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sqlite_master` view outlines the details of all the database objects within
    SQLite. In SQLite, the maximum size for a database would be 2,147,483,646 pages
    at 65,536 bytes per page or 140,737,488,224,256 bytes (about 140 terabytes), While
    the minimum size for an SQLite database is a single 512-byte page. The best way
    to see which tables exist is by performing an SQL statement on the master table,
    as shown in the following set of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Database file information](img/4725_03_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Effectively, download the `sqlite3_analyzer` program from the SQLite website.
    The program performs many functions, such as interrogating the database file and
    outputs a summary in text format showing the database structure, its environment,
    tables, indexes, the page sizes, entries, storage in bytes consumed, pages used,
    overflow pages, and unused bytes on primary pages.
  prefs: []
  type: TYPE_NORMAL
- en: The amount of detail available is impressive and useful when it comes to analyzing
    resources, components, and structure of a database.
  prefs: []
  type: TYPE_NORMAL
- en: The `sqlite3_analyzer` program can also be used in a variety of ways to use
    the statistics gained from using it. `sqlite3_analyzer` is a TCL script and is
    available at [http://www.sqlite.org/src/artifact/8e50b217c56a6a08](http://www.sqlite.org/src/artifact/8e50b217c56a6a08).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to administer and look after the SQLite relational
    database system, which has shown you in a simple way how to look after the database
    for your application. This chapter showed some of the basic elements of the SQLite
    database. It has covered the essentials of table creation and viewing tables that
    make up the schema. The topics are enough to get a grasp of the subject and master
    the basics. This chapter covers the basic elements and gave a helping hand to
    administer this easy-to-use database for mobile development. This chapter also
    summarizes how easy it is to administer as compared to other databases in the
    market. There are additional tools for SQLite Administration that can be found
    on the web. There are many more commands and not all have been shown as examples
    in this chapter. These are some of the methods of using and administering SQLite.
    This chapter showed you what is possible when you learn a few commands and how
    it can help use this simple, mobile database.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn all about the essentials of SQL. The chapter
    will outline how SQL can be used properly on this mobile database. It will show
    you how to use the SQLite method of using SQL compared to other databases and
    how easy it is to pick up SQL with SQLite.
  prefs: []
  type: TYPE_NORMAL
