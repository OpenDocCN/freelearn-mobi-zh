["```java\nextern \"C\" {\n  float Unity5AndroidPluginNativeC() {\n    return 5.5f;\n  }\n}\n```", "```java\n[DLLImport (\"NameOfYourPlugin\")]\nprivate static extern float Unity5AndroidPluginNativeC();\n```", "```java\npackage com.packtpub.unityflashlight;\nimport com.unity3d.player.UnityPlayerActivity;\nimport android.os.Bundle;\n\npublic class UnityFlashlightActivity extends UnityPlayerActivity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n  }\n}\n```", "```java\npackage com.packtpub.unityflashlight;\n\nimport com.unity3d.player.UnityPlayerActivity;\nimport android.content.pm.PackageManager;\nimport android.hardware.Camera;\nimport android.hardware.Camera.Parameters;\n```", "```java\npublic class Flashlight {\npublic UnityPlayerActivity unityPlayerActivity;\n   public boolean isActiveFlashlight;\n\nprivate Camera _cameraHardware;\n```", "```java\npublic Flashlight(UnityPlayerActivity upa) {\n  // Unity Player Activity\nunityPlayerActivity = upa;\n\n  // Is Flashlight turned ON or OFF on the device\nisActiveFlashlight = false;\n\n// Receiving back hardware camera     \n_cameraHardware = Camera.open();\n}\n```", "```java\npublic boolean HardwareHasFlashlight() { \n       return (\nunityPlayerActivity.\ngetPackageManager().\nhasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH)\n       );\n}\n```", "```java\npublic void ActivateFlashlight() {\nif(HardwareHasFlashlight()) {\n          isActiveFlashlight = true;\n\n           _cameraHardware = Camera.open();     \n\n           Parameters params = _cameraHardware.getParameters();\n\n           params.setFlashMode(Parameters.FLASH_MODE_TORCH);\n\n           _cameraHardware.setParameters(params);\n\n      // Turn ON a flashlight\n           _cameraHardware.startPreview();\n       }\n}\n```", "```java\npublic void DeactivateFlashlight() {\nif(HardwareHasFlashlight()) {\n       isActiveFlashlight = false;\n\n    // Turn OFF a flashlight\n        _cameraHardware.stopPreview();\n\n        _cameraHardware.release();\n}\n}\n```", "```java\npublic boolean IsActiveFlashlight() {\n       return isActiveFlashlight;\n}\n}\n```", "```java\n<uses-sdk android:minSdkVersion=\"9\"/>\n```", "```java\npackage com.packtpub.unityflashlight;\n\nimport com.unity3d.player.UnityPlayerActivity;\n\nimport android.os.Bundle;\n\npublic class UnityFlashlightActivity extends UnityPlayerActivity {\n  public Flashlight flashlight = new Flashlight(this);\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n    package=\"com.packtpub.unityflashlight\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\" >\n\n    <uses-sdk android:minSdkVersion=\"9\"/>\n\n    <application\n        android:icon=\"@drawable/app_icon\"\n        android:label=\"@string/app_name\">\n        <activity\n            android:name=\"com.packtpub.unityflashlight.UnityFlashlightActivity\"\n            android:configChanges = \"keyboardHidden|orientation\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n  <uses-permission android:name=\"android.permission.CAMERA\"/>\n    <uses-permission android:name=\"android.permission.WRITE_SETTINGS\"/>\n    <uses-feature android:name=\"android.hardware.camera\" />\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n\n</manifest>\n```", "```java\nusing UnityEngine;\n\npublic static class FlashlightActivity\n{\n  #if UNITY_ANDROID && !UNITY_EDITOR\n    public static AndroidJavaClass activityClass = new AndroidJavaClass(\"com.packtpub.unityflashlight.UnityFlashlightActivity\");\n    public static AndroidJavaClass unityActivityClass = new AndroidJavaClass(\"com.unity3d.player.UnityPlayer\");\n    public static AndroidJavaObject activityObj = unityActivityClass.GetStatic<AndroidJavaObject>(\"currentActivity\");\n  #else\n    public static AndroidJavaClass activityClass;\n    public static AndroidJavaClass unityActivityClass;\n    public static AndroidJavaObject activityObj;\n  #endif\n}\n```", "```java\nusing UnityEngine;\n\npublic static class Flashlight\n{\n  #if UNITY_ANDROID && !UNITY_EDITOR\n    private static AndroidJavaObject flashlight = FlashlightActivity.activityObj.Get<AndroidJavaObject>(\"flashlight\");\n  #else\n    private static AndroidJavaObject flashlight;\n  #endif\n\n  public static bool HardwareHasFlashlight()\n  {\n    if (Application.platform == RuntimePlatform.Android)\n      return flashlight.Call<bool>(\"HardwareHasFlashlight\");\n    else\n      return false;\n  }\n\n  public static bool IsActiveFlashlight()\n  {\n    if (Application.platform == RuntimePlatform.Android)\n      return flashlight.Call<bool>(\"IsActiveFlashlight\");\n    else\n      return false;\n  }\n\n  public static void ActivateFlashlight()\n  {\n    if (Application.platform == RuntimePlatform.Android)\n      flashlight.Call(\"ActivateFlashlight\");\n  }\n\n  public static void DeactivateFlashlight()\n  {\n    if (Application.platform == RuntimePlatform.Android)\n      flashlight.Call(\"DeactivateFlashlight\");\n  }\n}\n```", "```java\nusing UnityEngine;\n\npublic class FlashlightTest : MonoBehaviour {\n  void Start () {\n    Flashlight.ActivateFlashlight();\n  }\n\n  void OnApplicationQuit() {\n    Flashlight.DeactivateFlashlight();\n  }\n}\n```", "```java\nusing UnityEngine;\nusing System.Collections;\n\npublic class ShowActivityIndicator : MonoBehaviour {\n  IEnumerator ActivityIndicatorExample()\n  {\n    #if UNITY_ANDROID \n      Handheld.SetActivityIndicatorStyle(\n        AndroidActivityIndicatorStyle.Small\n      );\n    #endif\n\n    Handheld.StartActivityIndicator();\n    yield return new WaitForSeconds(0);\n    Application.LoadLevel(1);\n  }\n\n  void OnGUI()\n  {\n    if( GUI.Button(new Rect(50, 50, 300, 300), \"Start\") ) {\n      StartCoroutine(ActivityIndicatorExample());\n    }\n  }\n}\n```", "```java\nusing UnityEngine;\n\npublic class ShowSystemInfo : MonoBehaviour {\n  public Vector2 scrollPosition;\n\n  private Vector2 _v1, _v2;\n```", "```java\n  void OnGUI()\n  {\n    GUILayout.BeginVertical();\n\n    scrollPosition = GUILayout.BeginScrollView(\n      scrollPosition, \n      GUILayout.Width(Screen.width), \n      GUILayout.Height(Screen.height)\n    );\n\n    GUILayout.Label(\"SystemInfo.deviceModel <<<===>>> \" + SystemInfo.deviceModel);\n    GUILayout.Label(\"SystemInfo.deviceName <<<===>>> \" + SystemInfo.deviceName);\n    GUILayout.Label(\"SystemInfo.deviceType <<<===>>> \" + SystemInfo.deviceType.ToString());\n    GUILayout.Label(\"SystemInfo.deviceUniqueIdentifier <<<===>>> \" + SystemInfo.deviceUniqueIdentifier);\n    GUILayout.Label(\"SystemInfo.graphicsDeviceID <<<===>>> \" + SystemInfo.graphicsDeviceID.ToString());\n    GUILayout.Label(\"SystemInfo.graphicsDeviceName <<<===>>> \" + SystemInfo.graphicsDeviceName);\n    GUILayout.Label(\"SystemInfo.graphicsDeviceVendor <<<===>>> \" + SystemInfo.graphicsDeviceVendor);\n    GUILayout.Label(\"SystemInfo.graphicsDeviceVendorID <<<===>>> \" + SystemInfo.graphicsDeviceVendorID.ToString());\n    GUILayout.Label(\"SystemInfo.graphicsDeviceVersion <<<===>>> \" + SystemInfo.graphicsDeviceVersion);\n    GUILayout.Label(\"SystemInfo.graphicsMemorySize <<<===>>> \" + SystemInfo.graphicsMemorySize.ToString());\n    GUILayout.Label(\"SystemInfo.graphicsPixelFillrate <<<===>>> \" + SystemInfo.graphicsPixelFillrate.ToString());\n    GUILayout.Label(\"SystemInfo.graphicsShaderLevel <<<===>>> \" + SystemInfo.graphicsShaderLevel.ToString());\n    GUILayout.Label(\"SystemInfo.npotSupport <<<===>>> \" + SystemInfo.npotSupport.ToString());\n    GUILayout.Label(\"SystemInfo.operatingSystem <<<===>>> \" + SystemInfo.operatingSystem);\n    GUILayout.Label(\"SystemInfo.processorCount <<<===>>> \" + SystemInfo.processorCount.ToString());\n    GUILayout.Label(\"SystemInfo.processorType <<<===>>> \" + SystemInfo.processorType);\n    GUILayout.Label(\"SystemInfo.supportedRenderTargetCount <<<===>>> \" + SystemInfo.supportedRenderTargetCount.ToString());\n    GUILayout.Label(\"SystemInfo.supports3DTextures <<<===>>> \" + SystemInfo.supports3DTextures.ToString());\n    GUILayout.Label(\"SystemInfo.supportsAccelerometer <<<===>>> \" + SystemInfo.supportsAccelerometer.ToString());\n    GUILayout.Label(\"SystemInfo.supportsComputeShaders <<<===>>> \" + SystemInfo.supportsComputeShaders.ToString());\n    GUILayout.Label(\"SystemInfo.supportsGyroscope <<<===>>> \" + SystemInfo.supportsGyroscope.ToString());\n    GUILayout.Label(\"SystemInfo.supportsImageEffects <<<===>>> \" + SystemInfo.supportsImageEffects.ToString());\n    GUILayout.Label(\"SystemInfo.supportsInstancing <<<===>>> \" + SystemInfo.supportsInstancing.ToString());\n    GUILayout.Label(\"SystemInfo.supportsLocationService <<<===>>> \" + SystemInfo.supportsLocationService.ToString());\n    GUILayout.Label(\"SystemInfo.supportsRenderTextures <<<===>>> \" + SystemInfo.supportsRenderTextures.ToString());\n    GUILayout.Label(\"SystemInfo.supportsRenderToCubemap <<<===>>> \" + SystemInfo.supportsRenderToCubemap.ToString());\n    GUILayout.Label(\"SystemInfo.supportsShadows <<<===>>> \" + SystemInfo.supportsShadows.ToString());\n    GUILayout.Label(\"SystemInfo.supportsSparseTextures <<<===>>> \" + SystemInfo.supportsSparseTextures.ToString());\n    GUILayout.Label(\"SystemInfo.supportsStencil <<<===>>> \" + SystemInfo.supportsStencil.ToString());\n    GUILayout.Label(\"SystemInfo.supportsVibration <<<===>>> \" + SystemInfo.supportsVibration.ToString());\n    GUILayout.Label(\"SystemInfo.systemMemorySize <<<===>>> \" + SystemInfo.systemMemorySize.ToString());\n\n    GUILayout.EndScrollView();\n    GUILayout.EndVertical();\n  }\n```", "```java\n  void Update() {\n    if (Input.touchCount > 0) {\n      if (TouchPhase.Began == Input.GetTouch(0).phase) {\n        _v1 = _v2 = Input.GetTouch(0).position;\n      } else if (TouchPhase.Moved == Input.GetTouch(0).phase) {\n        _v2 = _v1;\n\n        _v1 = Input.GetTouch(0).position;\n\n        scrollPosition.y += (_v1.y > _v2.y ? -1 : 1) * Vector2.Distance(_v1, _v2);\n      }\n    } else {\n      if (Input.GetMouseButtonDown(0)) {\n        _v1 = _v2 = new Vector2(Input.mousePosition.x, Input.mousePosition.y);\n      } else if (Input.GetMouseButton(0)) {\n        _v2 = _v1;\n\n        _v1 = new Vector2(Input.mousePosition.x, Input.mousePosition.y);\n\n        scrollPosition.y += (_v1.y > _v2.y ? -1 : 1) * Vector2.Distance(_v1, _v2);\n      }\n    }\n  }\n}\n```", "```java\nGUILayout.Label(\"\\n\\n A C C E L E R A T I O N\");\n    GUILayout.Label(\"Input.acceleration = (\" + Input.acceleration.x + \", \" + Input.acceleration.y + \", \" + Input.acceleration.z + \")\");\n```", "```java\n    Input.gyro.enabled = true;\n\nGUILayout.Label(\"\\n\\n G Y R O S C O P E\");\n    GUILayout.Label(\"Input.gyro.attitude <<<===>>> \" + Input.gyro.attitude.ToString());\n    GUILayout.Label(\"Input.gyro.enabled <<<===>>> \" + Input.gyro.enabled.ToString());\n    GUILayout.Label(\"Input.gyro.gravity <<<===>>> \" + Input.gyro.gravity.ToString());\n    GUILayout.Label(\"Input.gyro.rotationRate <<<===>>> \" + Input.gyro.rotationRate.ToString());\n    GUILayout.Label(\"Input.gyro.rotationRateUnbiased <<<===>>> \" + Input.gyro.rotationRateUnbiased.ToString());\n    GUILayout.Label(\"Input.gyro.updateInterval <<<===>>> \" + Input.gyro.updateInterval.ToString());\n    GUILayout.Label(\"Input.gyro.userAcceleration <<<===>>> \" + Input.gyro.userAcceleration.ToString());\n```", "```java\n    Input.compass.enabled = true;\n\n    GUILayout.Label(\"\\n\\n C O M P A S S\");\n    GUILayout.Label(\"Input.compass.enabled <<<===>>> \" + Input.compass.enabled.ToString());\n    GUILayout.Label(\"Input.compass.headingAccuracy <<<===>>> \" + Input.compass.headingAccuracy.ToString());\n    GUILayout.Label(\"Input.compass.magneticHeading <<<===>>> \" + Input.compass.magneticHeading.ToString());\n    GUILayout.Label(\"Input.compass.rawVector <<<===>>> \" + Input.compass.rawVector.ToString());\n    GUILayout.Label(\"Input.compass.timestamp <<<===>>> \" + Input.compass.timestamp.ToString());\n    GUILayout.Label(\"Input.compass.trueHeading <<<===>>> \" + Input.compass.trueHeading.ToString());\n```"]