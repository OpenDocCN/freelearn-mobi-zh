["```swift\nclass MySingleton {\n    static let sharedInstance = MySingleton() \n    var number = 0\n    private init() {}\n} \n```", "```swift\nvar singleA = MySingleton.sharedInstance \nvar singleB = MySingleton.sharedInstance \nvar singleC = MySingleton.sharedInstance\nsingleB.number = 2\nprint(singleA.number)\nprint(singleB.number)\nprint(singleC.number)\nsingleC.number = 3\nprint(singleA.number)\nprint(singleB.number)\nprint(singleC.number) \n```", "```swift\nstruct BurgerOld {\n    var name: String\n    var patties: Int\n    var bacon: Bool\n    var cheese: Bool\n    var pickles: Bool\n    var ketchup: Bool\n    var mustard: Bool\n    var lettuce: Bool\n    var tomato: Bool\n    init(name: String, patties: Int, bacon: Bool, cheese: Bool, pickles:Bool, ketchup: Bool, mustard: Bool,lettuce: Bool, tomato: Bool) {\n        self.name = name\n        self.patties = patties\n        self.bacon = bacon \n        self.cheese = cheese\n        self.pickles = pickles\n        self.ketchup = ketchup\n        self.mustard = mustard\n        self.lettuce = lettuce\n        self.tomato = tomato\n    }\n} \n```", "```swift\n// Create Hamburger\nvar hamburger = BurgerOld(name: \"Hamburger\", patties: 1, bacon: false, cheese: false, pickles: true, ketchup: true, mustard: true, lettuce: false, tomato: false)\n// Create Cheeseburger\nvar cheeseburger = BurgerOld(name: \"Cheeseburger\", patties: 1 , bacon: false, cheese: true, pickles: true, ketchup: true, mustard: true, lettuce: false, tomato: false) \n```", "```swift\nprotocol BurgerBuilder { \n    var name: String { get }\n    var patties: Int { get }\n    var bacon: Bool { get }\n    var cheese: Bool { get }\n    var pickles: Bool { get }\n    var ketchup: Bool { get }\n    var mustard: Bool { get }\n    var lettuce: Bool { get }\n    var tomato: Bool { get }\n} \n```", "```swift\nstruct HamburgerBuilder: BurgerBuilder { \n    let name = \"Burger\"\n    let patties = 1 \n    let bacon = false\n    let cheese = false\n    let pickles = true\n    let ketchup = true \n    let mustard = true \n    let lettuce = false \n    let tomato = false\n}\nstruct CheeseBurgerBuilder: BurgerBuilder { \n    let name = \"CheeseBurger\"\n    let patties = 1 \n    let bacon = false \n    let cheese = true \n    let pickles = true \n    let ketchup = true \n    let mustard = true\n    let lettuce = false\n    let tomato = false\n} \n```", "```swift\nstruct Burger {\n    var name: String\n    var patties: Int\n    var bacon: Bool \n    var cheese: Bool \n    var pickles: Bool \n    var ketchup: Bool \n    var mustard: Bool \n    var lettuce: Bool \n    var tomato: Bool\n    init(builder: BurgerBuilder) { \n        self.name = builder.name\n        self.patties = builder.patties\n        self.bacon = builder.bacon\n        self.cheese = builder.cheese\n        self.pickles = builder.pickles\n        self.ketchup = builder.ketchup\n        self.mustard = builder.mustard\n        self.lettuce = builder.lettuce\n        self.tomato = builder.tomato\n    }\n    func showBurger() { \n        print(\"Name:\\(name)\") \n        print(\"Patties: \\(patties)\") \n        print(\"Bacon: \\(bacon)\") \n        print(\"Cheese: \\(cheese)\") \n        print(\"Pickles: \\(pickles)\") \n        print(\"Ketchup: \\(ketchup)\") \n        print(\"Mustard: \\(mustard)\") \n        print(\"Lettuce: \\(lettuce)\") \n        print(\"Tomato: \\(tomato)\")\n    }\n} \n```", "```swift\n// Create Hamburger\nvar myBurger = Burger(builder: HamburgerBuilder()) \nmyBurger.showBurger()\n// Create Cheeseburger\nvar myCheeseBurger = Burger(builder: CheeseBurgerBuilder())\n// Let's hold the ketchup\nmyCheeseBurger.ketchup = false\nmyCheeseBurger.showBurger() \n```", "```swift\nstruct BurgerBuilder { \n    var name = \"Burger\"\n    var patties = 1\n    var bacon = false \n    var cheese = false \n    var pickles = true \n    var ketchup = true \n    var mustard = true \n    var lettuce = false \n    var tomato = false\nmutating func setPatties(choice: Int) { \n        self.patties = choice\n    }\nmutating func setBacon(choice: Bool) { \n        self.bacon = choice\n    }\nmutating func setCheese(choice: Bool) { \n        self.cheese = choice\n    }\nmutating func setPickles(choice: Bool) { \n        self.pickles = choice\n    }\nmutating func setKetchup(choice: Bool) { \n        self.ketchup = choice\n    }\nmutating func setMustard(choice: Bool) { \n        self.mustard = choice\n    }\nmutating func setLettuce(choice: Bool) { \n        self.lettuce = choice\n    }\nmutating func setTomato(choice: Bool) { \n        self.tomato = choice\n    }\n    func buildBurgerOld(name: String) -> BurgerOld {\n        return BurgerOld(name: name, patties: self.patties,bacon: self.bacon, cheese: self.cheese,pickles: self.pickles, ketchup: self.ketchup,mustard: self.mustard, lettuce: self.lettuce,tomato: self.tomato)\n    }\n} \n```", "```swift\nvar burgerBuilder = BurgerBuilder()\nburgerBuilder.setCheese(choice: true)\nburgerBuilder.setBacon(choice: true)\nvar jonBurger = burgerBuilder.buildBurgerOld(name: \"Jon's Burger\") \n```", "```swift\nprotocol Message {\n    var messageString: String { get set } \n    init(messageString: String)\n    func prepareMessage()\n}\nprotocol Sender {\n    func sendMessage(message: Message)\n} \n```", "```swift\nclass PlainTextMessage: Message { \n    var messageString: String\n    required init(messageString: String) { \n        self.messageString = messageString\n    }\n    func prepareMessage() {\n        //Nothing to do\n    }\n}\nclass DESEncryptedMessage: Message { \n    var messageString: String\n    required init(messageString: String) { \n        self.messageString = messageString\n    }\n    func prepareMessage() {\n        // Encrypt message here\n        self.messageString = \"DES: \" + self.messageString\n    }\n} \n```", "```swift\nclass EmailSender: Sender {\n    func sendMessage(message: Message) { \n        print(\"Sending through E-Mail:\")\n        print(\"\\(message.messageString)\")\n    }\n}\nclass SMSSender: Sender {\n    func sendMessage(message: Message) { \n        print(\"Sending through SMS:\")\n        print(\"\\(message.messageString)\")\n    }\n} \n```", "```swift\nvar myMessage = PlainTextMessage(messageString: \"Plain Text Message\") \nmyMessage.prepareMessage()\nvar sender = SMSSender() \nsender.sendMessage(message: myMessage) \n```", "```swift\nprotocol Sender {\n    var message: Message? { get set } \n    func sendMessage()\n    func verifyMessage()\n} \n```", "```swift\nclass EmailSender: Sender { \n    var message: Message? \n    func sendMessage() {\n        print(\"Sending through E-Mail:\")\n        print(\"\\(message!.messageString)\")\n    }\n    func verifyMessage() { \n        print(\"Verifying E-Mail message\")\n    }\n}\nclass SMSSender: Sender { \n    var message: Message? \n    func sendMessage() {\n        print(\"Sending through SMS:\") \n        print(\"\\(message!.messageString)\")\n    }\n    func verifyMessage() { \n        print(\"Verifying SMS message\")\n    }\n} \n```", "```swift\nvar myMessage = PlainTextMessage(messageString: \"Plain Text Message\")\nmyMessage.prepareMessage()\nvar sender = SMSSender()\nsender.message = myMessage\nsender.verifyMessage()\nsender.sendMessage() \n```", "```swift\nstruct MessagingBridge {\n    static func sendMessage(message: Message, sender: Sender) { \n        var sender = sender\n        message.prepareMessage()\n        sender.message = message\n        sender.verifyMessage()\n        sender.sendMessage()\n    }\n} \n```", "```swift\nstruct Hotel {\n    //Information about hotel room\n}\nstruct HotelBooking {\n    static func getHotelNameForDates(to: Date, from: Date) -> [Hotel]? { \n        let hotels = [Hotel]()\n        //logic to get hotels\n        return hotels\n    }\n    static func bookHotel(hotel: Hotel) {\n        // logic to reserve hotel room\n    }\n} \n```", "```swift\nstruct Flight {\n    //Information about flights\n}\nstruct FlightBooking {\n    static func getFlightNameForDates(to: Date, from: Date) ->[Flight]? {\n        let flights = [Flight]()\n        //logic to get flights return flights\n    }\n    static func bookFlight(flight: Flight) {\n        // logic to reserve flight\n    }\n}\nstruct RentalCar {\n    //Information about rental cars\n}\nstruct RentalCarBooking {\n    static func getRentalCarNameForDates(to: Date, from: Date)-> [RentalCar]?\n    {\n        let cars = [RentalCar]()\n        //logic to get flights return cars\n    }\n    static func bookRentalCar(rentalCar: RentalCar) {\n        // logic to reserve rental car\n    }\n} \n```", "```swift\nstruct TravelFacade { \n    var hotels: [Hotel]?\n    var flights: [Flight]? \n    var cars: [RentalCar]?\n    init(to: Date, from: Date) {\n        hotels = HotelBooking.getHotelNameForDates(to: to, from:from) \n        flights = FlightBooking.getFlightNameForDates(to: to, from:from) \n        cars = RentalCarBooking.getRentalCarNameForDates(to: to, from:from)\n    }\n    func bookTrip(hotel: Hotel, flight: Flight, rentalCar: RentalCar) {\n        HotelBooking.bookHotel(hotel: hotel) \n        FlightBooking.bookFlight(flight: flight)\n        RentalCarBooking.bookRentalCar(rentalCar: rentalCar)\n    }\n} \n```", "```swift\nprotocol FloorPlan {\n    var bedRooms: Int { get set }\n    var utilityRooms: Int { get set } \n    var bathRooms: Int { get set } \n    var kitchen: Int { get set }\n    var livingRooms: Int { get set }\n} \n```", "```swift\nstruct HouseFloorPlan: FloorPlan { \n    var bedRooms = 0\n    var utilityRooms = 0 \n    var bathRooms = 0 \n    var kitchen = 0\n    var livingRooms = 0\n} \n```", "```swift\nstruct House {\n    var stories = [FloorPlan]()\n    mutating func addStory(floorPlan: FloorPlan) { \n        stories.append(floorPlan)\n    }\n} \n```", "```swift\nstruct HouseProxy { \n    var house = House()\n    mutating func addStory(floorPlan: FloorPlan) -> Bool { \n        if house.stories.count < 3 {\n            house.addStory(floorPlan: floorPlan)\n            return true\n        } else {\n            return false\n        }\n    }\n} \n```", "```swift\nvar ourHouse = HouseProxy()\nvar basement = HouseFloorPlan(bedRooms: 0, utilityRooms: 1, bathRooms:1,kitchen: 0, livingRooms: 1)\nvar firstStory = HouseFloorPlan (bedRooms: 1, utilityRooms: 0,bathRooms: 2,kitchen: 1, livingRooms: 1)\nvar secondStory = HouseFloorPlan (bedRooms: 2, utilityRooms: 0,bathRooms: 1,kitchen: 0, livingRooms: 1)\nvar additionalStory = HouseFloorPlan (bedRooms: 1, utilityRooms: 0,bathRooms:1, kitchen: 1, livingRooms: 1)\nourHouse.addStory(floorPlan: basement)\nourHouse.addStory(floorPlan: firstStory)\nourHouse.addStory(floorPlan: secondStory)\nourHouse.addStory(floorPlan: additionalStory) \n```", "```swift\nprotocol Command { \n    func execute()\n} \n```", "```swift\nstruct RockerSwitchLightOnCommand: Command { \n    func execute() {\n        print(\"Rocker Switch:Turning Light On\")\n    }\n}\nstruct RockerSwitchLightOffCommand: Command { \n    func execute() {\n        print(\"Rocker Switch:Turning Light Off\")\n    }\n}\nstruct PullSwitchLightOnCommand: Command { \n    func execute() {\n        print(\"Pull Switch:Turning Light On\")\n    }\n}\nstruct PullSwitchLightOffCommand: Command { \n    func execute() {\n        print(\"Pull Switch:Turning Light Off\")\n    }\n} \n```", "```swift\nstruct Light {\n    var lightOnCommand: Command\n    var lightOffCommand: Command\n    func turnOnLight() { \n        self.lightOnCommand.execute()\n    }\n    func turnOffLight() { \n        self.lightOffCommand.execute()\n    }\n} \n```", "```swift\nvar on = PullSwitchLightOnCommand()\nvar off = PullSwitchLightOffCommand()\nvar light = Light(lightOnCommand: on, lightOffCommand: off)\nlight.turnOnLight()\nlight.turnOffLight()\nlight.lightOnCommand = RockerSwitchLightOnCommand() \nlight.turnOnLight() \n```", "```swift\nprotocol CompressionStrategy {\n    func compressFiles(filePaths: [String])\n} \n```", "```swift\nstruct ZipCompressionStrategy: CompressionStrategy { \n    func compressFiles(filePaths: [String]) {\n        print(\"Using Zip Compression\")\n    }\n}\nstruct RarCompressionStrategy: CompressionStrategy { \n    func compressFiles(filePaths: [String]) {\n        print(\"Using RAR Compression\")\n    }\n} \n```", "```swift\nstruct CompressContent {\n    var strategy: CompressionStrategy\n    func compressFiles(filePaths: [String]) { \n        self.strategy.compressFiles(filePaths: filePaths)\n    }\n} \n```", "```swift\nvar filePaths = [\"file1.txt\", \"file2.txt\"]\nvar zip = ZipCompressionStrategy()\nvar rar = RarCompressionStrategy()\nvar compress = CompressContent(strategy: zip)\ncompress.compressFiles(filePaths: filePaths)\ncompress.strategy = rar\ncompress.compressFiles(filePaths: filePaths) \n```"]