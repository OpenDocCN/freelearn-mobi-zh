- en: Chapter 6. Behavior Driven Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Behavior Driven Development can be understood as the evolution and confluence
    of Test Driven Development and Acceptance Testing. Both techniques were discussed
    in previous chapters, so you may want to look back at [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Testing"), *Getting Started with Testing* and [Chapter 4](ch04.html
    "Chapter 4. Test Driven Development"), *Test Driven Development* before proceeding.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Behavior Driven Development introduces some new concepts, such as the use of
    a common vocabulary to describe the tests and the inclusion of business participants
    in the software development project. And some people still believe that it is
    only Test Driven Development done right.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: We have visited Test Driven Development before and we focused on converting
    low level requirements into tests that could drive our development process. Behavior
    Driven Development forces us to concentrate on higher level requirements and on
    using a specific vocabulary we can express these requirements in a way that can
    be further analyzed or evaluated.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: We will explore these concepts so that you can make your own conclusions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Brief history
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Behavior Driven Development was a term introduced by Dan North back in 2003
    to describe a technique that focuses on collaboration between developers and other
    stakeholders by using a process usually called **outside-in** software development.
    Its primary goal is to satisfy the business needs of the client.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Behavior Driven Development grew out of a thought experiment based on **Neuro
    Linguistic Programming** (**NLP**) techniques.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: The primary idea is that the words used to describe a thought severely influence
    that thought to the point that we seem to think in the language we speak.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: There is empirical proof of the fact that subjects in memory tests are more
    likely to remember a specific color if their mother language has a specific word
    for that color. So if we have a specific language to describe our requirements,
    it would probably influence the way we think about them and hence improve the
    way we write them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the words used by Behavior Driven Development were carefully selected
    to influence the way you think about the specification of features. They are closely
    related to the notion of cause-effect and follow this concept to describe a feature
    starting from a known state, applying some process, and expecting some results.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: These words are described in the next section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Given, when, then
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Given/When/Then** words are the common vocabulary that spans the divide between
    business and technology, and as described at [http://behaviour-driven.org/](http://behaviour-driven.org/)
    they can also be referred to as the ubiquitous language of Behavior Driven Development.
    The framework is based on three core principles that we reproduce here verbatim:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Business and Technology should refer to the same system in the same way
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any system should have an identified, verifiable value to the business
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Up-front analysis, design, and planning all have a diminishing return
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior Driven Development relies on the use of this specific vocabulary. Additionally,
    the format in which requirements are expressed is predetermined allowing tools
    to interpret and execute them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '**Given**, is to describe the initial state before external stimuli is received.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When**, is to describe the key action the user performs.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Then**, is to analyze the results of the actions. To be observable the actions
    performed should have some kind of outcome.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FitNesse
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'FitNesse is a software development collaboration tool. Strictly speaking FitNesse
    is a set of tools, described as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: As a software testing tool, FitNesse is a lightweight, open source framework
    that allows teams to collaborate
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also a Wiki where you can easily create and edit pages and share information
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FitNesse is also a web server so it doesn't require additional configuration
    or administrative privileges to set up or configure
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the FitNesse distribution from [http://fitnesse.org/](http://fitnesse.org/).
    The distribution is a JAR file that installs itself on first run. Throughout these
    examples we used FitNesse release 20100303 but newer versions should also work.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Running FitNesse from the command line
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default when FitNesse runs it listens on port 80, so to run unprivileged
    you should change the port on the command line. In this example we use `8900:`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the output obtained when we run the command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '**FitNesse (v20100303) Started..**.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '**port: 8900**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**root page: fitnesse.wiki.FileSystemPage at ./FitNesseRoot**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '**logger: none**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**authenticator: fitnesse.authentication.PromiscuousAuthenticator**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**html page factory: fitnesse.html.HtmlPageFactory**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**page version expiration set to 14 days**.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Once running, you can direct your browser to the local FitNesse server home
    page and you will be presented with this content:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Running FitNesse from the command line](img/3500_06_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: Creating a TemperatureConverterTests subwiki
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once FitNesse is up and running, we can start by creating a subwiki to organize
    our tests.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: You may already be familiar with the wiki concept. If not, a wiki is a website
    that allows page editing and creation by its users. This editing process is done
    from within the browser and uses a markup language that greatly simplifies the
    process.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find out more about wikis in what could perhaps be the most famous
    wiki: [http://en.wikipedia.org/wiki/Wiki](http://en.wikipedia.org/wiki/Wiki).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Though this subwiki organization is not mandatory, it is highly recommended,
    especially if you plan to use FitNesse for acceptance testing on multiple projects.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: One of the most simplified processes is hyperlink creation which is done only
    by using *CamelCase* or *WikiWords*; that is a word that starts with a capital
    letter and has at least one more capital letter in it. This WikiWord will be converted
    into a hyperlink to a page with that name.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the **TemperatureConverterTests** subwiki, we simply press the **Edit**
    button below the FitNesse logo to edit the home page, adding the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This adds a new table to the page, by using the "|" markup as the first character
    and to delimit the columns.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Then a wiki page `TemperatureConverterTests` will be created and we also add
    a column with a descriptive comment about the tests. This comment is turned into
    italics by surrounding it by double single quotes ('').
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Press **Save** and the page will be modified.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Once the page is displayed we can verify that `TemperatureConverterTests` is
    now followed by **[?]** (question mark) because the page has not been created
    yet and will be created when we click on it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: We can add some comments to clearly identify this newly-created front page of
    the subwiki.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the text `TemperatureConverterTests SubWiki` is escaped using !- and -!
    to prevent it from being converted to another page link.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '**Save** again.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Adding child pages to the subwiki
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we add a new child page by using the **[add child]** link that appears next
    to the page title.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different options for creating the child page, and we can select:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '**Normal**, for a normal wiki page'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**, a page that contains tests'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suite**, a page containing other tests composing a suite'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default**, a default page'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Adding child pages to the subwiki](img/3500_06_02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'These are the values to use:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '| Field | Value |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '| Type of page: | Suite |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '| Name: | TemperatureConverterTestSuite |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: '| Content: | !contents |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: After pressing **Add**, this page is created and automatically added as a link
    to the subwiki.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Let's follow this newly-created link to reach the test suite page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Once you're here, add another child using the **[add child]** link. This time,
    let's add a Test page and name it **TemperatureConverterCelsiusToFahrenheitFixture**
    as this will contain our fixture.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the values to use:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '| Field | Value |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| Type of page: | Test |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| Name: | TemperatureConverterCelsiusToFahrenheitFixture |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| Content: | !contents |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: Click on **Add** to finish the operation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Adding the acceptance test fixture
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Up until now, we were only creating wiki pages. Nothing exciting about that!
    But now we will be adding our acceptance test fixture directly to the page. Be
    sure of navigating to the newly added page, **TemperatureConverterCelsiusToFahrenheitFixture**,
    click on **Edit** as usual, and add the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This table defines several items for our text feature:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '`TemperatureConverterCelsiusToFahrenheitFixture:` This is the table title and
    the test fixture name.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`celsius:` This is the column name for the value we are providing as input
    to the test.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fahrenheit?:` This is the column name for the value expected as the result
    of the conversion. The question mark indicates that this is a result value.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~=:` This indicates that the result is approximately this value.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`< _ <:` This indicates that the expected value is within this range.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Invalid temperature: -274.00C below absolute zero, is the value expected by
    the failed conversion.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save this content by clicking on **Save**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Adding the supporting test classes
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we just press the **Test** button, which is below the FitNesse logo (see
    the next screenshot for details), we will receive an error. In some way this is
    expected because we haven't created the supporting test fixture yet. This is a
    very simple class that invokes the `TemperatureConverter` methods.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'FitNesse supports two different test systems:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '**fit:** This is the older of the two methods, and uses HTML, parsed just prior
    to the fixture being called.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**slim:** This is newer, all the table processing is done inside FitNesse,
    within slim runners.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further information about these test systems can be found at [http://fitnesse.org/FitNesse.UserGuide.TestSystems](http://fitnesse.org/FitNesse.UserGuide.TestSystems).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example we are using slim, which is selected by setting the variable
    `TEST_SYSTEM` within the same page as:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To create the slim test fixture we simply create a new package, named `com.example.aatg.tc.test.fitnesse.fixture`,
    in our existing Android test project `TemperatureConverterTest`. We will be creating
    the fixture inside this package.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have to create the `TemperatureConverterCelsiusToFahrenheitFixture`
    class that we defined in our acceptance test table:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This fixture should delegate on real code and not do anything by itself. We
    decided to return `String` from `fahrenheit` so we can return the `Exception`
    message in the same method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'In the test page we should also define the import statement used by the tests:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in the next variable you should change the paths to the ones appropriate
    to your system and the classpath to locate the classes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This should be adapted to your system paths.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'After finishing these steps we can click on the **Test** button to run the
    tests and the page will reflect the results:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the supporting test classes](img/3500_06_03.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: We can easily identify every test that succeeded by their green color and failed
    ones by their red color. In this example, we don't have any failure so everything
    is green.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: FitNesse has another useful feature which is the **Test History**. All the test
    runs and a specific number of results are saved for a period of time so that you
    can review the results later on and compare the results, and thus analyze the
    evolution of your changes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: This feature is accessed by clicking **Test History** at the bottom of the list
    of options on the left pane.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: In the following image we can see the results for the last 4 test runs, where
    3 failed and 1 succeeded. Also by clicking on the "+" (plus) or "-" (minus) signs,
    you can expand or collapse the view to show or hide detailed information about
    the test run.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the supporting test classes](img/3500_06_04.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: GivWenZen
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GivWenZen is a framework that builds upon FitNesse and Slim to allow the user
    to exploit the Behavior Driven Development technique of expressing the tests using
    the **Given-When-Then** vocabulary to describe tests. These test descriptions
    are also created using the FitNesse wiki facility of expressing the tests as plain
    text contained in tables in a wiki page.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: The idea is pretty simple and straightforward and follows up what we have been
    doing with FitNesse, but this time instead of writing acceptance tests giving
    a table of values we will use the three Behavior Driven Development magic words
    **Given-When-Then** to describe our scenarios.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, let's install GivWenZen. Download the full distribution from its download
    list page at [http://code.google.com/p/givwenzen/downloads/list](http://code.google.com/p/givwenzen/downloads/list)
    and follow the instructions on its website. We used givwenzen 1.0.1 in these examples
    but newer versions should work as well.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: The GivWenZen full distribution includes all the dependencies needed, including
    FitNesse, so if you have FitNesse running from previous examples it is better
    to stop it or you must use a different port for GivWenZen.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Upon startup, point your browser to the home page and you will find a familiar
    FitNesse front page. You can take some time to explore the examples included.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Creating the test scenario
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create a simple scenario for our Temperature Converter to understand things
    better.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'In plain tests, our scenario would be:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '*Given* I''m using the Temperature Converter, *When* I enter 100 into Celsius
    field, *Then* I obtain 212 in the Fahrenheit field.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'And it is directly translated into a GivWenZen scenario by adding this to a
    wiki page:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The translation is straightforward. The table title must be `script`, and in
    this case it is preceded by a dash (-) to hide it. Then each of the **Give-When-Then**
    scenarios is placed in a column and the predicate in the other column.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running this script, when the whole page is executed, we need to initialize
    GivWenZen by running yet another script. In this case it would be:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We need to initialize the classpath and add the corresponding imports before
    the script that starts GivWenZen. Usually this is done in one of the **SetUp**
    pages, which are executed before running every test script, but for the sake of
    simplicity we are adding the initialization to this same page:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you just run the test here by clicking the **Test** button, you will receive
    the following message:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '**__EXCEPTION__:org.givwenzen.DomainStepNotFoundException:**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'You need a step class with an annotated method matching this pattern: "I''m
    using the TemperatureConverter".'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Typical causes of this error are:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '`StepClass` is missing the `@DomainSteps` annotation'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StepMethod` is missing the `@DomainStep` annotation'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The step method annotation has a regular expression that is not matching the
    current test step
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This, and the other exception messages are very helpful in implementing the
    steps class, however you should add some behavior.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: The step class should be placed in the package or subpackage of `bdd.steps`,
    or your own custom package if defined.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In our particular case this will be the implementation of the `StepClass:`
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, we are using a subpackage of `bdd.steps` because, by default,
    this is the package hierarchy GivWenZen searches for steps implementations. Otherwise,
    extra configuration is needed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Classes implementing steps should be annotated by `@DomainSteps` and the step's
    methods annotated by `@DomainStep`. The latter receives a regular expression String
    as a parameter. This regular expression is used by GivWenZen to match the steps.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in our scenario we have defined this step:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Our annotation is:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will match, and the regular expression group values defined by `ANY_TEMPERATURE`
    and `UNIT_NAME` will be obtained and provided to the method as its argument's
    value and `unitName:`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Recall that in a previous chapter, I recommended reviewing regular expressions
    because they could be useful. Well this is probably one of these places where
    they are extremely useful. In `ANY_TEMPERATURE` we are matching every possible
    temperature value with the optional sign and decimal point. Consequently `UNIT`
    and `UNIT_NAME` match the unit symbol or its name; that is Celsius or Fahrenheit.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: These regular expressions are used in the construction of the `@DomainStep`
    annotation parameters. Groups, delimited by "()" parenthesis in these regular
    expressions are converted into method parameters. This is how `setField()` obtains
    its parameters.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Then we have a `verifyConversion()` method that returns true or false depending
    on whether the actual conversion is within a `DELTA` value of the expected one.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have some methods that actually invoke the conversion methods in
    the `TemperatureConverter` class.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'On running the tests once again, all the tests pass. We can confirm this by
    analyzing the output message:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '**Assertions: 2 right, 0 wrong, 0 ignored, 0 exceptions**.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are receiving the results for 2 assertions as one is for the
    invocation of the GivWenZen initialization script we added to the page and the
    other is for our scenario.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'We should not only create scenarios for normal situations but cover exceptional
    conditions as well. Say, in plain text, our scenario is something like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Given* I''m using the Temperature Converter, *When* I enter -274 into Celsius
    field, *Then* I obtain ''Invalid temperature: -274.00C below absolute zero'' exception.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be translated into a GivWenZen table like the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And by adding a supporting step method, we will be able to run it. The step
    method can be implemented like this:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This method obtains the exception message, temperature value, and unit from
    the regular expression. Then this is compared against the actual exception message
    to verify that it matches.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we can create other scenarios which, in this situation, will
    be supported by the existing steps methods. These scenarios could be:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以创建其他场景，在这种情况下，这些场景将由现有的步骤方法支持。这些场景可能包括：
- en: '[PRE18]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Because GivWenZen is based on FitNesse, we are free to combine both approaches
    and include the tests from our previous session in the same suite. Doing so, we
    can run the entire suite from the suite page obtaining the overall results.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GivWenZen基于FitNesse，我们可以自由地结合两种方法，并将之前会话中的测试包括在同一套件中。这样做，我们可以从套件页面运行整个套件，获得整体结果。
- en: '![Creating the test scenario](img/3500_06_05.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试场景](img/3500_06_05.jpg)'
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we covered Behavior Driven Development as an evolution of Test
    Driven Development which we examined in previous chapters.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了行为驱动开发作为测试驱动开发的演变，这在之前的章节中我们已经进行了考察。
- en: We discussed the origin and driving forces behind Behavior Driven development.
    We analyzed the concepts serving as the foundations, explored the Given-When-Then
    vocabulary idea, and introduced FitNesse and Slim as helpful tools in deploying
    tests.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了行为驱动开发的起源和背后的推动力。我们分析了作为基础的概念，探讨了Given-When-Then词汇理念，并介绍了FitNesse和Slim作为部署测试的有用工具。
- en: We presented GivWenZen, a tool based on FitNesse that gives us the ability to
    create scenarios and test them.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了GivWenZen，这是一个基于FitNesse的工具，它赋予我们创建场景和测试它们的能力。
- en: We introduced these techniques and tools to our sample Android project. However,
    we are still limited to test subjects that are testable under the JVM avoiding
    the use of Android-specific classes and mainly the User Interface. We will be
    exploring some alternatives to overcome this limitation in [Chapter 10](ch10.html
    "Chapter 10. Alternative Testing Tactics"), *Alternative Testing Tactics.*
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些技术和工具引入到我们的样本Android项目中。然而，我们仍然局限于在JVM下可测试的测试对象，避免使用Android特定的类，主要是用户界面。我们将在第10章[“替代测试策略”](ch10.html
    "Chapter 10. Alternative Testing Tactics")中探讨一些替代方案来克服这一限制。
- en: The next chapter presents practical examples of different common situations
    that you will encounter, applying all the disciplines and techniques discussed
    so far.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将展示不同常见情况的实际示例，应用到目前为止讨论的所有学科和技术。
