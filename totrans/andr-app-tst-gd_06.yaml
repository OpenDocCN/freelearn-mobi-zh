- en: Chapter 6. Behavior Driven Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 行为驱动开发
- en: Behavior Driven Development can be understood as the evolution and confluence
    of Test Driven Development and Acceptance Testing. Both techniques were discussed
    in previous chapters, so you may want to look back at [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Testing"), *Getting Started with Testing* and [Chapter 4](ch04.html
    "Chapter 4. Test Driven Development"), *Test Driven Development* before proceeding.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 行为驱动开发可以理解为测试驱动开发（Test Driven Development）和验收测试（Acceptance Testing）的演变和融合。这两种技术在前几章中都有讨论，所以在继续之前，你可能想回顾一下[第1章](ch01.html
    "第1章. 测试入门") *测试入门* 和 [第4章](ch04.html "第4章. 测试驱动开发") *测试驱动开发*。
- en: Behavior Driven Development introduces some new concepts, such as the use of
    a common vocabulary to describe the tests and the inclusion of business participants
    in the software development project. And some people still believe that it is
    only Test Driven Development done right.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 行为驱动开发引入了一些新概念，例如使用通用词汇来描述测试，以及在软件开发项目中包含商业参与者。有些人仍然认为这只是正确执行的测试驱动开发。
- en: We have visited Test Driven Development before and we focused on converting
    low level requirements into tests that could drive our development process. Behavior
    Driven Development forces us to concentrate on higher level requirements and on
    using a specific vocabulary we can express these requirements in a way that can
    be further analyzed or evaluated.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经讨论过测试驱动开发，我们专注于将低级需求转换为可以驱动我们开发过程的测试。行为驱动开发迫使我们关注更高层次的需求，并使用特定的词汇，我们可以用这些词汇以可以进一步分析或评估的方式表达这些需求。
- en: We will explore these concepts so that you can make your own conclusions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨这些概念，以便你可以得出自己的结论。
- en: Brief history
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简史
- en: Behavior Driven Development was a term introduced by Dan North back in 2003
    to describe a technique that focuses on collaboration between developers and other
    stakeholders by using a process usually called **outside-in** software development.
    Its primary goal is to satisfy the business needs of the client.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 行为驱动开发是由丹·诺斯（Dan North）在2003年提出的术语，用来描述一种通过使用通常称为**自外向内**的软件开发过程来专注于开发人员与其他利益相关者之间协作的技术。其首要目标是满足客户的企业需求。
- en: Behavior Driven Development grew out of a thought experiment based on **Neuro
    Linguistic Programming** (**NLP**) techniques.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 行为驱动开发源于基于**神经语言程序学**（Neuro Linguistic Programming，NLP）技术的思想实验。
- en: The primary idea is that the words used to describe a thought severely influence
    that thought to the point that we seem to think in the language we speak.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是，用来描述一个想法的词汇会严重影响这个想法，以至于我们似乎在用我们说的语言思考。
- en: There is empirical proof of the fact that subjects in memory tests are more
    likely to remember a specific color if their mother language has a specific word
    for that color. So if we have a specific language to describe our requirements,
    it would probably influence the way we think about them and hence improve the
    way we write them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有实证证明，在记忆测试中，如果他们的母语有特定颜色的特定词汇，那么测试对象更有可能记住该特定颜色。因此，如果我们有一种特定的语言来描述我们的需求，它可能会影响我们对它们的思考方式，从而改善我们编写它们的方式。
- en: Therefore, the words used by Behavior Driven Development were carefully selected
    to influence the way you think about the specification of features. They are closely
    related to the notion of cause-effect and follow this concept to describe a feature
    starting from a known state, applying some process, and expecting some results.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，行为驱动开发所使用的词汇是经过精心挑选的，以影响你对特性指定的思考方式。它们与因果关系概念密切相关，并遵循这一概念从已知状态开始描述一个特性，应用某些过程，并期望某些结果。
- en: These words are described in the next section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些词将在下一节中进行描述。
- en: Given, when, then
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给定，当，然后
- en: '**Given/When/Then** words are the common vocabulary that spans the divide between
    business and technology, and as described at [http://behaviour-driven.org/](http://behaviour-driven.org/)
    they can also be referred to as the ubiquitous language of Behavior Driven Development.
    The framework is based on three core principles that we reproduce here verbatim:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**给定/当/然后**词汇是跨越商业和技术之间的共同词汇，正如在[http://behaviour-driven.org/](http://behaviour-driven.org/)中所述，它们也可以被称为行为驱动开发的通用语言。该框架基于三个核心原则，我们在此直接引用：'
- en: Business and Technology should refer to the same system in the same way
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业和技术应该以相同的方式引用相同的系统
- en: Any system should have an identified, verifiable value to the business
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何系统都应该有一个对业务可识别、可验证的价值
- en: Up-front analysis, design, and planning all have a diminishing return
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预先分析、设计和规划都有递减的回报
- en: Behavior Driven Development relies on the use of this specific vocabulary. Additionally,
    the format in which requirements are expressed is predetermined allowing tools
    to interpret and execute them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 行为驱动开发依赖于使用这个特定的词汇。此外，要求表达的方式是预先确定的，允许工具解释和执行它们。
- en: '**Given**, is to describe the initial state before external stimuli is received.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**给定**，是描述在接收到外部刺激之前的初始状态。'
- en: '**When**, is to describe the key action the user performs.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当**，是描述用户执行的关键动作。'
- en: '**Then**, is to analyze the results of the actions. To be observable the actions
    performed should have some kind of outcome.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**然后**，是分析动作的结果。为了可观察性，所执行的动作应该有一些结果。'
- en: FitNesse
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FitNesse
- en: 'FitNesse is a software development collaboration tool. Strictly speaking FitNesse
    is a set of tools, described as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: FitNesse 是一个软件开发协作工具。严格来说，FitNesse 是一套工具，如下所述：
- en: As a software testing tool, FitNesse is a lightweight, open source framework
    that allows teams to collaborate
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为软件测试工具，FitNesse 是一个轻量级、开源的框架，允许团队协作
- en: It is also a Wiki where you can easily create and edit pages and share information
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它也是一个 Wiki，你可以轻松创建和编辑页面并分享信息
- en: FitNesse is also a web server so it doesn't require additional configuration
    or administrative privileges to set up or configure
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FitNesse 也是一个 Web 服务器，因此它不需要额外的配置或管理权限来设置或配置
- en: Download the FitNesse distribution from [http://fitnesse.org/](http://fitnesse.org/).
    The distribution is a JAR file that installs itself on first run. Throughout these
    examples we used FitNesse release 20100303 but newer versions should also work.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [http://fitnesse.org/](http://fitnesse.org/) 下载 FitNesse 发行版。发行版是一个 JAR 文件，首次运行时会自动安装。在这些示例中，我们使用了
    FitNesse 版本 20100303，但新版本也应该可以工作。
- en: Running FitNesse from the command line
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行运行 FitNesse
- en: By default when FitNesse runs it listens on port 80, so to run unprivileged
    you should change the port on the command line. In this example we use `8900:`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当 FitNesse 运行时，它监听端口 80，因此要运行非特权版本，你应该在命令行上更改端口。在这个例子中，我们使用 `8900:`
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the output obtained when we run the command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们运行命令时获得的结果：
- en: '**FitNesse (v20100303) Started..**.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**FitNesse (v20100303) 已启动..**。'
- en: '**port: 8900**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**端口：8900**'
- en: '**root page: fitnesse.wiki.FileSystemPage at ./FitNesseRoot**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**根页面：fitnesse.wiki.FileSystemPage 在 ./FitNesseRoot**'
- en: '**logger: none**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**记录器：无**'
- en: '**authenticator: fitnesse.authentication.PromiscuousAuthenticator**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**认证器：fitnesse.authentication.PromiscuousAuthenticator**'
- en: '**html page factory: fitnesse.html.HtmlPageFactory**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML 页面工厂：fitnesse.html.HtmlPageFactory**'
- en: '**page version expiration set to 14 days**.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**页面版本过期设置为 14 天**。'
- en: 'Once running, you can direct your browser to the local FitNesse server home
    page and you will be presented with this content:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行，你可以将你的浏览器指向本地 FitNesse 服务器的首页，你将看到以下内容：
- en: '![Running FitNesse from the command line](img/3500_06_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![从命令行运行 FitNesse](img/3500_06_01.jpg)'
- en: Creating a TemperatureConverterTests subwiki
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 TemperatureConverterTests 子维基
- en: Once FitNesse is up and running, we can start by creating a subwiki to organize
    our tests.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 FitNesse 启动并运行，我们可以先创建一个子维基来组织我们的测试。
- en: You may already be familiar with the wiki concept. If not, a wiki is a website
    that allows page editing and creation by its users. This editing process is done
    from within the browser and uses a markup language that greatly simplifies the
    process.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经熟悉了 Wiki 概念。如果不熟悉，Wiki 是一个允许用户编辑和创建页面的网站。这个过程是在浏览器内完成的，并使用一种大大简化过程的标记语言。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find out more about wikis in what could perhaps be the most famous
    wiki: [http://en.wikipedia.org/wiki/Wiki](http://en.wikipedia.org/wiki/Wiki).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在可能是最著名的 Wiki 中了解更多关于 Wiki 的信息：[http://en.wikipedia.org/wiki/Wiki](http://en.wikipedia.org/wiki/Wiki)。
- en: Though this subwiki organization is not mandatory, it is highly recommended,
    especially if you plan to use FitNesse for acceptance testing on multiple projects.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种子维基组织不是强制性的，但强烈推荐，特别是如果你计划在多个项目中使用 FitNesse 进行验收测试的话。
- en: One of the most simplified processes is hyperlink creation which is done only
    by using *CamelCase* or *WikiWords*; that is a word that starts with a capital
    letter and has at least one more capital letter in it. This WikiWord will be converted
    into a hyperlink to a page with that name.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最简化的过程之一是超链接创建，这只需要使用 *CamelCase* 或 *WikiWords*；即一个以大写字母开头并且至少有一个更多大写字母的单词。这个
    WikiWord 将被转换成一个指向具有该名称页面的超链接。
- en: 'To create the **TemperatureConverterTests** subwiki, we simply press the **Edit**
    button below the FitNesse logo to edit the home page, adding the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 **TemperatureConverterTests** 子维基，我们只需按下 FitNesse 标志下面的**编辑**按钮来编辑主页，添加以下内容：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This adds a new table to the page, by using the "|" markup as the first character
    and to delimit the columns.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过使用 "|" 标记作为第一个字符以及分隔列来在页面上添加一个新的表格。
- en: Then a wiki page `TemperatureConverterTests` will be created and we also add
    a column with a descriptive comment about the tests. This comment is turned into
    italics by surrounding it by double single quotes ('').
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个维基页面 `TemperatureConverterTests`，我们还在其中添加了一个带有关于测试的描述性注释的列。这个注释通过用双单引号('')包围而变成了斜体。
- en: Press **Save** and the page will be modified.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 按**保存**按钮，页面将被修改。
- en: Once the page is displayed we can verify that `TemperatureConverterTests` is
    now followed by **[?]** (question mark) because the page has not been created
    yet and will be created when we click on it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 页面显示后，我们可以验证 `TemperatureConverterTests` 现在后面跟着 **[?]**（问号），因为页面尚未创建，将在我们点击它时创建。
- en: We can add some comments to clearly identify this newly-created front page of
    the subwiki.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加一些注释来清楚地识别这个新创建的子维基的首页。
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the text `TemperatureConverterTests SubWiki` is escaped using !- and -!
    to prevent it from being converted to another page link.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，文本`TemperatureConverterTests SubWiki`使用!-和-!进行转义，以防止它被转换为另一个页面链接。
- en: '**Save** again.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**保存**再次。'
- en: Adding child pages to the subwiki
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向子维基添加子页面
- en: Now we add a new child page by using the **[add child]** link that appears next
    to the page title.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过使用页面标题旁边的**[添加子页面]**链接添加一个新的子页面。
- en: 'There are different options for creating the child page, and we can select:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建子页面的选项有很多，我们可以选择：
- en: '**Normal**, for a normal wiki page'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常**，对于一个普通维基页面'
- en: '**Test**, a page that contains tests'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**，包含测试的页面'
- en: '**Suite**, a page containing other tests composing a suite'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**套件**，包含其他测试的套件页面'
- en: '**Default**, a default page'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认**，一个默认页面'
- en: '![Adding child pages to the subwiki](img/3500_06_02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![向子维基添加子页面](img/3500_06_02.jpg)'
- en: 'These are the values to use:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是需要使用的值：
- en: '| Field | Value |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 值 |'
- en: '| --- | --- |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Type of page: | Suite |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 页面类型: | 套件 |'
- en: '| Name: | TemperatureConverterTestSuite |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 名称: | TemperatureConverterTestSuite |'
- en: '| Content: | !contents |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 内容: | !contents |'
- en: After pressing **Add**, this page is created and automatically added as a link
    to the subwiki.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**添加**后，这个页面将被创建并自动添加为子维基的链接。
- en: Let's follow this newly-created link to reach the test suite page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跟随这个新创建的链接到达测试套件页面。
- en: Once you're here, add another child using the **[add child]** link. This time,
    let's add a Test page and name it **TemperatureConverterCelsiusToFahrenheitFixture**
    as this will contain our fixture.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在这里，使用**[添加子页面]**链接添加另一个子页面。这次，让我们添加一个测试页面，并将其命名为**TemperatureConverterCelsiusToFahrenheitFixture**，因为这个将包含我们的固定装置。
- en: 'These are the values to use:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是需要使用的值：
- en: '| Field | Value |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 值 |'
- en: '| --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Type of page: | Test |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 页面类型: | 测试 |'
- en: '| Name: | TemperatureConverterCelsiusToFahrenheitFixture |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 名称: | TemperatureConverterCelsiusToFahrenheitFixture |'
- en: '| Content: | !contents |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 内容: | !contents |'
- en: Click on **Add** to finish the operation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加**以完成操作。
- en: Adding the acceptance test fixture
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加验收测试固定装置
- en: 'Up until now, we were only creating wiki pages. Nothing exciting about that!
    But now we will be adding our acceptance test fixture directly to the page. Be
    sure of navigating to the newly added page, **TemperatureConverterCelsiusToFahrenheitFixture**,
    click on **Edit** as usual, and add the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是在创建维基页面。这没什么令人兴奋的！但现在我们将直接在页面上添加我们的验收测试固定装置。确保导航到新添加的页面，**TemperatureConverterCelsiusToFahrenheitFixture**，像往常一样点击**编辑**，并添加以下内容：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This table defines several items for our text feature:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格定义了我们文本功能的一些项目：
- en: '`TemperatureConverterCelsiusToFahrenheitFixture:` This is the table title and
    the test fixture name.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TemperatureConverterCelsiusToFahrenheitFixture:` 这是表格标题和测试固定装置的名称。'
- en: '`celsius:` This is the column name for the value we are providing as input
    to the test.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`celsius:` 这是提供给测试的输入值的列名。'
- en: '`fahrenheit?:` This is the column name for the value expected as the result
    of the conversion. The question mark indicates that this is a result value.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fahrenheit?:` 这是转换结果期望的列名。问号表示这是一个结果值。'
- en: '`~=:` This indicates that the result is approximately this value.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~=:` 这表示结果大约是这个值。'
- en: '`< _ <:` This indicates that the expected value is within this range.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`< _ <:` 这表示期望值在这个范围内。'
- en: 'Invalid temperature: -274.00C below absolute zero, is the value expected by
    the failed conversion.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效的温度：-274.00C低于绝对零度，是失败的转换所期望的值。
- en: Save this content by clicking on **Save**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**保存**来保存此内容。
- en: Adding the supporting test classes
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加支持测试类
- en: If we just press the **Test** button, which is below the FitNesse logo (see
    the next screenshot for details), we will receive an error. In some way this is
    expected because we haven't created the supporting test fixture yet. This is a
    very simple class that invokes the `TemperatureConverter` methods.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只是按下位于FitNesse标志下方的**测试**按钮（下一张截图将提供详细信息），我们将收到一个错误。在某种程度上，这是预期的，因为我们还没有创建支持测试固定件。这是一个非常简单的类，它调用`TemperatureConverter`方法。
- en: 'FitNesse supports two different test systems:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: FitNesse支持两种不同的测试系统：
- en: '**fit:** This is the older of the two methods, and uses HTML, parsed just prior
    to the fixture being called.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fit:** 这是两种方法中较老的一种，它使用HTML，在调用固定件之前解析。'
- en: '**slim:** This is newer, all the table processing is done inside FitNesse,
    within slim runners.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**slim:** 这是一种较新的方法，所有的表格处理都在FitNesse内部，在slim运行器中进行。'
- en: Further information about these test systems can be found at [http://fitnesse.org/FitNesse.UserGuide.TestSystems](http://fitnesse.org/FitNesse.UserGuide.TestSystems).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于这些测试系统的信息可以在[http://fitnesse.org/FitNesse.UserGuide.TestSystems](http://fitnesse.org/FitNesse.UserGuide.TestSystems)找到。
- en: 'In this example we are using slim, which is selected by setting the variable
    `TEST_SYSTEM` within the same page as:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用slim，这是通过在相同页面中设置变量`TEST_SYSTEM`来选择的：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To create the slim test fixture we simply create a new package, named `com.example.aatg.tc.test.fitnesse.fixture`,
    in our existing Android test project `TemperatureConverterTest`. We will be creating
    the fixture inside this package.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建slim测试固定件，我们只需在我们的现有Android测试项目`TemperatureConverterTest`中创建一个新的包，命名为`com.example.aatg.tc.test.fitnesse.fixture`。我们将在这个包内创建固定件。
- en: 'Next, we have to create the `TemperatureConverterCelsiusToFahrenheitFixture`
    class that we defined in our acceptance test table:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须创建我们在验收测试表中定义的`TemperatureConverterCelsiusToFahrenheitFixture`类：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This fixture should delegate on real code and not do anything by itself. We
    decided to return `String` from `fahrenheit` so we can return the `Exception`
    message in the same method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此固定件应该委托给真实代码，而不是自己执行任何操作。我们决定从`fahrenheit`返回`String`，这样我们就可以在同一个方法中返回`Exception`消息。
- en: 'In the test page we should also define the import statement used by the tests:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试页面中，我们还应该定义测试所使用的导入语句：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that in the next variable you should change the paths to the ones appropriate
    to your system and the classpath to locate the classes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在下一个变量中，您应该将路径更改为适合您系统的路径，并将类路径更改为定位类。
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This should be adapted to your system paths.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该适应您的系统路径。
- en: 'After finishing these steps we can click on the **Test** button to run the
    tests and the page will reflect the results:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，我们可以点击**测试**按钮来运行测试，页面将反映结果：
- en: '![Adding the supporting test classes](img/3500_06_03.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![添加支持测试类](img/3500_06_03.jpg)'
- en: We can easily identify every test that succeeded by their green color and failed
    ones by their red color. In this example, we don't have any failure so everything
    is green.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过它们的绿色和红色轻松地识别每个成功的测试和失败的测试。在这个例子中，我们没有失败，所以一切都是绿色的。
- en: FitNesse has another useful feature which is the **Test History**. All the test
    runs and a specific number of results are saved for a period of time so that you
    can review the results later on and compare the results, and thus analyze the
    evolution of your changes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: FitNesse还有一个有用的功能，即**测试历史**。所有测试运行和一定数量的结果都会保存一段时间，以便您可以稍后审查结果并比较结果，从而分析您更改的演变。
- en: This feature is accessed by clicking **Test History** at the bottom of the list
    of options on the left pane.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能可以通过点击左侧选项列表底部的**测试历史**来访问。
- en: In the following image we can see the results for the last 4 test runs, where
    3 failed and 1 succeeded. Also by clicking on the "+" (plus) or "-" (minus) signs,
    you can expand or collapse the view to show or hide detailed information about
    the test run.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图像中，我们可以看到最后4次测试运行的结果，其中3次失败，1次成功。此外，通过点击“+”或“-”符号，您可以展开或折叠视图以显示或隐藏有关测试运行的详细信息。
- en: '![Adding the supporting test classes](img/3500_06_04.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![添加支持测试类](img/3500_06_04.jpg)'
- en: GivWenZen
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GivWenZen
- en: GivWenZen is a framework that builds upon FitNesse and Slim to allow the user
    to exploit the Behavior Driven Development technique of expressing the tests using
    the **Given-When-Then** vocabulary to describe tests. These test descriptions
    are also created using the FitNesse wiki facility of expressing the tests as plain
    text contained in tables in a wiki page.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: GivWenZen 是一个框架，它基于 FitNesse 和 Slim 构建，允许用户利用行为驱动开发技术，使用 **Given-When-Then**
    词汇来描述测试。这些测试描述也使用 FitNesse 维基功能创建，将测试作为包含在维基页面表格中的纯文本。
- en: The idea is pretty simple and straightforward and follows up what we have been
    doing with FitNesse, but this time instead of writing acceptance tests giving
    a table of values we will use the three Behavior Driven Development magic words
    **Given-When-Then** to describe our scenarios.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法很简单，并且很直接，遵循我们一直在使用 FitNesse 做的事情，但这次我们不是编写提供值表的验收测试，而是将三个行为驱动开发魔法词 **Given-When-Then**
    用于描述我们的场景。
- en: Firstly, let's install GivWenZen. Download the full distribution from its download
    list page at [http://code.google.com/p/givwenzen/downloads/list](http://code.google.com/p/givwenzen/downloads/list)
    and follow the instructions on its website. We used givwenzen 1.0.1 in these examples
    but newer versions should work as well.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装 GivWenZen。从其下载列表页面 [http://code.google.com/p/givwenzen/downloads/list](http://code.google.com/p/givwenzen/downloads/list)
    下载完整发行版，并遵循其网站上的说明。在这些示例中，我们使用了 givwenzen 1.0.1，但新版本也应该可以工作。
- en: The GivWenZen full distribution includes all the dependencies needed, including
    FitNesse, so if you have FitNesse running from previous examples it is better
    to stop it or you must use a different port for GivWenZen.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: GivWenZen 的完整发行版包括所有必要的依赖项，包括 FitNesse，因此如果你已经从之前的示例中运行了 FitNesse，最好停止它，或者你必须为
    GivWenZen 使用不同的端口。
- en: Upon startup, point your browser to the home page and you will find a familiar
    FitNesse front page. You can take some time to explore the examples included.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 启动时，将你的浏览器指向主页，你将找到一个熟悉的 FitNesse 前端页面。你可以花些时间探索包含的示例。
- en: Creating the test scenario
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建测试场景
- en: Let's create a simple scenario for our Temperature Converter to understand things
    better.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的温度转换器创建一个简单的场景，以便更好地理解。
- en: 'In plain tests, our scenario would be:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯测试中，我们的场景将是：
- en: '*Given* I''m using the Temperature Converter, *When* I enter 100 into Celsius
    field, *Then* I obtain 212 in the Fahrenheit field.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*给定* 我正在使用温度转换器，*当* 我将 100 输入到摄氏度字段，*然后* 我在华氏度字段中获得 212。'
- en: 'And it is directly translated into a GivWenZen scenario by adding this to a
    wiki page:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它通过在维基页面上添加以下内容直接翻译成 GivWenZen 场景：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The translation is straightforward. The table title must be `script`, and in
    this case it is preceded by a dash (-) to hide it. Then each of the **Give-When-Then**
    scenarios is placed in a column and the predicate in the other column.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译很简单。表标题必须是 `script`，在这种情况下，它前面有一个连字符 (-) 以隐藏它。然后，每个 **Given-When-Then** 场景都放置在一列中，而谓词在另一列中。
- en: 'Before running this script, when the whole page is executed, we need to initialize
    GivWenZen by running yet another script. In this case it would be:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此脚本之前，当整个页面执行完毕时，我们需要通过运行另一个脚本来初始化 GivWenZen。在这种情况下，它将是：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We need to initialize the classpath and add the corresponding imports before
    the script that starts GivWenZen. Usually this is done in one of the **SetUp**
    pages, which are executed before running every test script, but for the sake of
    simplicity we are adding the initialization to this same page:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在启动 GivWenZen 的脚本之前初始化类路径并添加相应的导入。通常这在一页 **setUp** 中完成，这些页面在运行每个测试脚本之前执行，但为了简单起见，我们将初始化添加到同一页面上：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you just run the test here by clicking the **Test** button, you will receive
    the following message:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是在这里点击 **测试** 按钮运行测试，你将收到以下消息：
- en: '**__EXCEPTION__:org.givwenzen.DomainStepNotFoundException:**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**__异常：org.givwenzen.DomainStepNotFoundException:** '
- en: 'You need a step class with an annotated method matching this pattern: "I''m
    using the TemperatureConverter".'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个步骤类，其中有一个注解的方法与以下模式匹配：“我正在使用 TemperatureConverter”。
- en: 'Typical causes of this error are:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这种错误的典型原因包括：
- en: '`StepClass` is missing the `@DomainSteps` annotation'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StepClass` 缺少 `@DomainSteps` 注解'
- en: '`StepMethod` is missing the `@DomainStep` annotation'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StepMethod` 缺少 `@DomainStep` 注解'
- en: The step method annotation has a regular expression that is not matching the
    current test step
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤方法注解的正则表达式与当前测试步骤不匹配
- en: This, and the other exception messages are very helpful in implementing the
    steps class, however you should add some behavior.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这以及其他异常消息对于实现步骤类非常有帮助，然而你应该添加一些行为。
- en: The step class should be placed in the package or subpackage of `bdd.steps`,
    or your own custom package if defined.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤类应该放在`bdd.steps`包或子包中，或者如果你定义了自己的自定义包，也应该放在那里。
- en: 'For example:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE11]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In our particular case this will be the implementation of the `StepClass:`
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们特定的案例中，这将实现`StepClass`：
- en: '[PRE12]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, we are using a subpackage of `bdd.steps` because, by default,
    this is the package hierarchy GivWenZen searches for steps implementations. Otherwise,
    extra configuration is needed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`bdd.steps`的子包，因为默认情况下，这是GivWenZen搜索步骤实现包的层次结构。否则，需要额外的配置。
- en: Classes implementing steps should be annotated by `@DomainSteps` and the step's
    methods annotated by `@DomainStep`. The latter receives a regular expression String
    as a parameter. This regular expression is used by GivWenZen to match the steps.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 实现步骤的类应该由`@DomainSteps`注解，而步骤的方法应该由`@DomainStep`注解。后者接收一个正则表达式字符串作为参数。这个正则表达式由GivWenZen用来匹配步骤。
- en: 'For example, in our scenario we have defined this step:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的场景中，我们定义了这个步骤：
- en: '[PRE13]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Our annotation is:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的注解是：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will match, and the regular expression group values defined by `ANY_TEMPERATURE`
    and `UNIT_NAME` will be obtained and provided to the method as its argument's
    value and `unitName:`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这将匹配，并且由`ANY_TEMPERATURE`和`UNIT_NAME`定义的正则表达式组值将被获取，并作为方法参数的值和`unitName:`提供给方法。
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Recall that in a previous chapter, I recommended reviewing regular expressions
    because they could be useful. Well this is probably one of these places where
    they are extremely useful. In `ANY_TEMPERATURE` we are matching every possible
    temperature value with the optional sign and decimal point. Consequently `UNIT`
    and `UNIT_NAME` match the unit symbol or its name; that is Celsius or Fahrenheit.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，在前一章中，我建议回顾正则表达式，因为它们可能很有用。这可能是这些非常有用的地方之一。在`ANY_TEMPERATURE`中，我们匹配每个可能的温度值，包括可选的符号和小数点。因此，`UNIT`和`UNIT_NAME`匹配单位符号或其名称；即摄氏度或华氏度。
- en: These regular expressions are used in the construction of the `@DomainStep`
    annotation parameters. Groups, delimited by "()" parenthesis in these regular
    expressions are converted into method parameters. This is how `setField()` obtains
    its parameters.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这些正则表达式用于构造`@DomainStep`注解参数。这些正则表达式中的括号"()"分隔的组被转换为方法参数。这就是`setField()`如何获得其参数的方式。
- en: Then we have a `verifyConversion()` method that returns true or false depending
    on whether the actual conversion is within a `DELTA` value of the expected one.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有一个`verifyConversion()`方法，它返回true或false，取决于实际转换是否在预期的`DELTA`值范围内。
- en: Finally, we have some methods that actually invoke the conversion methods in
    the `TemperatureConverter` class.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一些方法，实际上会调用`TemperatureConverter`类中的转换方法。
- en: 'On running the tests once again, all the tests pass. We can confirm this by
    analyzing the output message:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行测试后，所有测试都通过了。我们可以通过分析输出消息来确认这一点：
- en: '**Assertions: 2 right, 0 wrong, 0 ignored, 0 exceptions**.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**断言：2个正确，0个错误，0个忽略，0个异常**。'
- en: Notice that we are receiving the results for 2 assertions as one is for the
    invocation of the GivWenZen initialization script we added to the page and the
    other is for our scenario.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们接收的是2个断言的结果，因为一个是调用我们添加到页面上的GivWenZen初始化脚本，另一个是我们场景的断言。
- en: 'We should not only create scenarios for normal situations but cover exceptional
    conditions as well. Say, in plain text, our scenario is something like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅应该为正常情况创建场景，还应该涵盖异常条件。比如说，用纯文本来说，我们的场景是这样的：
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Given* I''m using the Temperature Converter, *When* I enter -274 into Celsius
    field, *Then* I obtain ''Invalid temperature: -274.00C below absolute zero'' exception.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*Given* 我在使用温度转换器，*When* 我将-274输入到摄氏度字段，*Then* 我获得 ''Invalid temperature: -274.00C
    below absolute zero'' 异常。'
- en: 'It can be translated into a GivWenZen table like the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以被翻译成以下GivWenZen表格：
- en: '[PRE16]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And by adding a supporting step method, we will be able to run it. The step
    method can be implemented like this:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加一个支持步骤方法，我们就能运行它。步骤方法可以像这样实现：
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This method obtains the exception message, temperature value, and unit from
    the regular expression. Then this is compared against the actual exception message
    to verify that it matches.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法从正则表达式获取异常消息、温度值和单位。然后，这与实际的异常消息进行比较，以验证它们是否匹配。
- en: 'Additionally, we can create other scenarios which, in this situation, will
    be supported by the existing steps methods. These scenarios could be:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以创建其他场景，在这种情况下，这些场景将由现有的步骤方法支持。这些场景可能包括：
- en: '[PRE18]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Because GivWenZen is based on FitNesse, we are free to combine both approaches
    and include the tests from our previous session in the same suite. Doing so, we
    can run the entire suite from the suite page obtaining the overall results.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GivWenZen基于FitNesse，我们可以自由地结合两种方法，并将之前会话中的测试包括在同一套件中。这样做，我们可以从套件页面运行整个套件，获得整体结果。
- en: '![Creating the test scenario](img/3500_06_05.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试场景](img/3500_06_05.jpg)'
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we covered Behavior Driven Development as an evolution of Test
    Driven Development which we examined in previous chapters.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了行为驱动开发作为测试驱动开发的演变，这在之前的章节中我们已经进行了考察。
- en: We discussed the origin and driving forces behind Behavior Driven development.
    We analyzed the concepts serving as the foundations, explored the Given-When-Then
    vocabulary idea, and introduced FitNesse and Slim as helpful tools in deploying
    tests.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了行为驱动开发的起源和背后的推动力。我们分析了作为基础的概念，探讨了Given-When-Then词汇理念，并介绍了FitNesse和Slim作为部署测试的有用工具。
- en: We presented GivWenZen, a tool based on FitNesse that gives us the ability to
    create scenarios and test them.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了GivWenZen，这是一个基于FitNesse的工具，它赋予我们创建场景和测试它们的能力。
- en: We introduced these techniques and tools to our sample Android project. However,
    we are still limited to test subjects that are testable under the JVM avoiding
    the use of Android-specific classes and mainly the User Interface. We will be
    exploring some alternatives to overcome this limitation in [Chapter 10](ch10.html
    "Chapter 10. Alternative Testing Tactics"), *Alternative Testing Tactics.*
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些技术和工具引入到我们的样本Android项目中。然而，我们仍然局限于在JVM下可测试的测试对象，避免使用Android特定的类，主要是用户界面。我们将在第10章[“替代测试策略”](ch10.html
    "Chapter 10. Alternative Testing Tactics")中探讨一些替代方案来克服这一限制。
- en: The next chapter presents practical examples of different common situations
    that you will encounter, applying all the disciplines and techniques discussed
    so far.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将展示不同常见情况的实际示例，应用到目前为止讨论的所有学科和技术。
