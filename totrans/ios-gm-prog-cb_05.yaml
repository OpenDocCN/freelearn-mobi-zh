- en: Chapter 5. Adding Music to iOS Games and an Introduction to iCloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be focusing on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding music to games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding background and sound effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to iCloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration of iCloud with iOS games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](part0031_split_000.html#page "Chapter 4. Particle System and
    Game Performance"), *Particle System and Game Performance*, we created a full
    game of collecting coins by FlyingSpaceship containing sprites, scenes, parallax
    infinite scrolling background, particle effects, and many more except music. Now
    we are moving forward to add the most interesting part to the game, which is music.
    Music and sound effects brings a sense of engagement and fun to the game; no game
    exists without music. So we will be integrating some cool and awesome background
    music and sound effects into the FlyingSpaceship game built in the previous chapters.
    Moreover, we will be enlightening a new technology called iCloud and its framework
    recently released by Apple. Using iCloud, we can easily and securely store and
    retrieve the app data like a database from the iCloud, which is provided by Apple.
  prefs: []
  type: TYPE_NORMAL
- en: Adding music to games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No video or movie is complete without music and neither is a game. Our end goal
    in this topic is to integrate some smoothing and awesome sound effects to make
    it look like a complete game that can be enjoyed by the user. So, in iOS development,
    there are many ways to integrate and play audio in an app or in a game. Some are
    system sound services, AVAudioPlayer, audio queue services, and OpenAL. All are
    used for some or the other purpose and utility in an app.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will be discussing different ways of integrating music and
    sound effects provided by iOS. And in the upcoming section, we will integrate
    background music and some sound effects at specific events happening in our FlyingSpaceship
    game, which will be the starter kit for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting with the technical ways of integrating music and sound effects
    in the game, we should have an understanding of how audio is added in videos,
    movies, or wherever audio is required. In a game, there has to be background music
    and some sound effects at the events that need the attention of the user. All
    these music and sound effects are to be decided on the basis of the theme of the
    game. So the prerequisite for this section is to have a common sense of music
    and sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will look at some of the ways to implement sound services in our app.
  prefs: []
  type: TYPE_NORMAL
- en: System Sound Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is an easy way of playing audio files. For playing an audio sound using
    System Sound Services and to see how it works, the following are the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an audio file to the project, and using `mainBundle` get the path of the
    audio file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we have used the `.caf` format for the audio files. This is the recommended
    Apple format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the path, form a `NSURL`, which will be used to create a `SystemSoundID`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then create a `systemSoundID` using the `NSURL` formed earlier and a property
    declared as `SystemSoundID` named `sampleSound` in the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, using the `systemSoundID` that is, `self.sampleSound`, play the audio
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For playing an audio sound using AVAudioPlayer AVFoundation framework is needed
    so it has to be imported and then add an audio file to the project and using `mainBundle`
    get the path of the audio file. To import the framework add the following line
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now create an instance of AVAudioPlayer with content as the `NSURL` of the file
    to be played with error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After that call a `prepareToPlay` method on the `AVAudioPlayer` object so that
    it prepares the audio file to be played.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before playing the audio file, we can set the `volume` and `numberOfLoops` and
    lastly we can play the audio file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: AVAudioPlayer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Audio Queue Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Audio Queue Services is high-level audio stuff as it is a way to record and
    play audios. It lets your app use hardware recording and playback using microphones
    and loudspeakers without the knowledge of the hardware interface. It provides
    fine-grained timing control for scheduling playback and synchronization. For further
    information on Audio Queue Services see the *There's more* section.
  prefs: []
  type: TYPE_NORMAL
- en: Above all are not suitable where there is a need for fine-grained control of
    audio with low latency; in such cases, only OpenAL is appropriate to be used,
    which is a cross-platform audio library supported by iOS. Learning OpenAL is a
    steep learning curve. So, to understand and implement it see, the *There's more*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'System Sound Services is particularly used for playing audio alerts and simple
    game sound effects such as click sound for moving a character in the game. Every
    sound that is played using this is assigned a `systemSoundID`. All of the tracking
    is based on this ID, such as stopping, pausing, and different actions that can
    be applied on an audio. All we have to do is add this set of lines to play a sound:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `sampleSound` is declared as a `SystemSoundID` property so that the sound
    can be disposed later in the `dealloc` method. If the sound is disposed immediately
    after the `AudioServicesPlaySystemSound` method, then the sound will never play.
  prefs: []
  type: TYPE_NORMAL
- en: There are some disadvantages of System Sound Services, such as only `.caf`,
    `.aif`, and `.wav` audio file formats are supported, sounds cannot be more than
    30 seconds, and only one sound can be played at a time.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Other than System Sound Services and AVAudioPlayer, there are two more advanced
    ways of playing audio which are Audio Queue Services used for playback and recording
    and OpenAL for fine-grained control of timing. You can explore Apple's docs for
    Core Audio overview and Audio Session Programming Guide.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For better understanding and learning of Audio Queue Services and OpenAL, you
    can visit the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/Introduction.html](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/Introduction.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/audiovideo/conceptual/multimediapg/usingaudio/usingaudio.html](https://developer.apple.com/library/ios/documentation/audiovideo/conceptual/multimediapg/usingaudio/usingaudio.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding background and sound effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After understanding some ways of integrating audio in the app, the most commonly
    used and easiest way is AVAudioPlayer. Basically, in this recipe, we will be adding
    background music, which will be running forever, and some sound effects on specific
    events where the user's attention is required or where the user has to be notified
    of some change. This adding of background music and sound effects will be done
    in our game FlyingSpaceship built in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting with the addition of background music and sound effects on some
    events, we should have a good understanding of the `AVAudioPlayer` class and the
    `AVFoundation` framework. So the prerequisite for this section is to have knowledge
    of how to play audio using the AVAudioPlayer class as discussed in the preceding
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have the full game FlyingSpaceship built in which the addition of background
    music and sound effects will be done as discussed in the upcoming steps. To accomplish
    both, add two audio files `background-music.caf` and `coin-collected-sound.caf`
    to the resources folder of the project. Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Now we will add background music to make it a complete game. First of all import
    the module `AVFoundation` in the `FSMyScene` file of FlyingSpaceship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Declare a property named `backgroundAudioPlayer` as an object of `AVAudioPlayer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As explained in the code snippet of the *AVAudioPlayer* section, create a path
    and `NSURL` file using the `background-music.caf` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just initialize the property `self.backgroundAudioPlayer` with the new `AVAudioPlayerobject`.
    This will also need an error object and the audio file, which we created earlier.
    All the errors will be logged in the object that we have passed in the parameter..
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After this, call `prepareToPlay` on that object, set some volume such as 1.0,
    and in order to play it infinitely set `numberOfLoops` to `-1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, after all of this, play the background music that never ends.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After this, gather the code in a function called `startBackgroundMusic` and
    it will look like this:![How to do it…](img/00079.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make it play the background music, call the `startBackgroundMusic` function
    in the `initWithSize` method of `FSMyScene`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, compile and run the project; you should be able to listen to the background
    music in the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will add a sound effect in the game when a coin is collected. For this,
    declare a property named `coinCollectedAudioPlayer` as an object of AVAudioPlayer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As explained in the code snippet in the *AVAudioPlayer* section, create a path
    and a `NSURL` file using `coin-collected-sound.caf` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Assign an `AVAudioPlayer` object with the preceding sound effect file with the
    error as the parameter to the `self.coinCollectedAudioPlayer` property. And after
    creating this, check for errors, if any, print an error message, and return from
    there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After that, call `prepareToPlay` on that object, set some volume such as 1.0
    and play it once you set `numberOfLoops` to `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, after all of this, play the sound effect that has to be played when
    the coin is collected by the spaceship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After all of this, gather the code in a function called `playCoinCollectedSoundEffect`
    and it will look like this:![How to do it…](img/00080.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make it play when the coin collides with the spaceship, call the `playCoinCollectedSoundEffect`
    function when `spaceShipCollidedWithCoin` is called by the detection of a collision.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After all the integration of background music and sound effects, our starter
    kit for this chapter is ready.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How the AVAudioPlayer works and how the background music and sound effects are
    played has been explained in the preceding topic. Here the difference between
    background music and sound effect was the `numberOfLoops` property of AVAudioPlayer
    object. It was `-1` for the background music and `1` for sound effect of collecting
    the coin by the spaceship.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the same AVAudioPlayer, we can play multiple sound effects together such
    as playing a sound of movement when the spaceship moves and the coin is collected.
    So for further enhancement in music and sound effects, there is no limit.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For better understanding and learning of Core Audio in iOS, visit the link [https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to iCloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple has introduced a technology called iCloud that leverages the power of
    building apps using the new CloudKit framework. Using iCloud, we can easily and
    securely store and retrieve our app data in the form of a database in the cloud
    built by Apple. The CloudKit framework provides a way for users to anonymously
    sign into the apps with their iCloud Apple IDs without sharing their personal
    information. The most important part is that CloudKit makes the developer focus
    on the client-side app development and does the server-side application logic
    by iCloud itself. It also provides an authenticated, private, and public database
    storage services, which are for free with very high limits of storage.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will be doing an introduction of iCloud and its framework
    CloudKit. We will understand how the iCloud services are enabled in Xcode, iTunes
    Connect, playing with provisioning profiles for development devices to integrate
    iCloud for apps. Later in this next section, we will integrate the iCloud service
    with our game FlyingSpaceship.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting to make a setup with iCloud and the CloudKit framework, we should
    know about some features of Xcode capabilities, iTunes Connect, and provisioning
    profiles. Also, we must have an understanding of core data, storing, and retrieving
    data in iOS for a smooth use and integration of the CloudKit framework. These
    are the prerequisites for starting to use the new technology iCloud and its framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'To integrate iCloud in any app, the following steps are a must before starting
    with the setup to be done in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: A Mac computer with Xcode 6 or later installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Membership in either iOS or Mac Developer Program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permission to create the code signing identities and provisioning profiles in
    Member Center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, after all this, our Xcode project should be built without errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn about the steps to enable CloudKit in our app.
    CloudKit is an app service provided by Apple. It is only available for the apps
    distributed by the App Store or the Mac App Store. CloudKit requires some additional
    configuration to be done from our Xcode Project. Our app must be provisioned and
    code signed to access the CloudKit service. So we will enable CloudKit for our
    FlyingSpaceship game. Perform the following steps to enable CloudKit in the Xcode
    project for our game:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Xcode Project (FlyingSpaceship) in which we want to enable and use
    CloudKit services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Project** in the Project Navigator and we can see the **General**
    section selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **FlyingSpaceship** target and then select the next section **Capabilities**.![How
    to do it…](img/00081.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the first row, that is, **iCloud** and a section similar to this
    will open:![How to do it…](img/00082.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, on the right-hand side, switch to iCloud and some loading will occur.![How
    to do it…](img/00083.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the loading has finished, the iCloud will be enabled and giving options
    as shown in the following screenshot:![How to do it…](img/00084.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, there are are three services by iCloud; enable them as needed
    by the app. For now, we will enable CloudKit.![How to do it…](img/00085.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, a button called **CloudKit Dashboard** is visible. On clicking this button,
    we will be redirected to the CloudKit dashboard of the app FlyingSpaceship in
    Apple's iTunes Connect. The sidebar, record types to be added, and the container
    section of CloudKit dashboard look like this.![How to do it…](img/00086.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dashboard is used to perform many database management tasks such as modifying
    schemas and records as shown in the preceding screenshot. A container's databases
    for an app exist both in the development and the production environment. Using
    the dashboard, we can play with the records creating, deleting, modifying, and
    so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To explore sign in to the dashboard and click on the options in the left column,
    which has many operations to do as depicted in the following screenshot:![How
    to do it…](img/00087.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The iCloud technology provides an easy and secure way of creating an app that
    stores a structured app and user data in a server called iCloud. Using the CloudKit
    framework, instances of an iCloud-enabled app, which is launched by different
    users on different devices, can access the assets stored in the app's database.
    After enabling iCloud for any app, we can make model objects for our app, which
    persist and are shared between multiple apps running on a large range of devices.
    These data or model objects are stored as records in the database and can be accessed
    by the authorized users.
  prefs: []
  type: TYPE_NORMAL
- en: iCloud is a free service provided by Apple that lets users access their personal
    data on all their devices by their Apple ID. It does all this by combining network-based
    storage dedicated APIs with full support of OS. Apple encourages building iCloud-enabled
    apps by providing server infrastructure, backups, and user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: The following is a pictorial representation of iCloud's core idea, which addresses
    the problem of synchronization between multiple devices. A user using an iCloud
    app need not think about syncing his/her devices. When the user adopts iCloud
    storage, as depicted in the following diagram, all the changes appear automatically
    on all the devices that are attached to that iCloud account.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'iCloud supports many kinds of storage. The storage types are:'
  prefs: []
  type: TYPE_NORMAL
- en: Key-value storage such as user preferences, settings, and simple app state data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iCloud document storage such as word-processing documents and drawings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core data storage for multidevice database solutions for structured content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudKit storage for managing structured data ourselves and sharing among ourselves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To store data on iCloud, we can use any of these depending upon our requirement
    and capabilities. Moving forward, we can pick these storage types and make an
    iCloud app for sharing the storage on multiple devices.
  prefs: []
  type: TYPE_NORMAL
- en: See also…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on storage types, visit the link [https://developer.apple.com/library/ios/documentation/DataManagement/Conceptual/CloudKitQuickStart/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014987-CH1-SW1](https://developer.apple.com/library/ios/documentation/DataManagement/Conceptual/CloudKitQuickStart/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014987-CH1-SW1).
  prefs: []
  type: TYPE_NORMAL
- en: Integration of iCloud with iOS games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn the steps to integrate the iCloud with iOS games.
    iCloud integration plays an important role in the development of the application
    as it helps us to support various features and enhance interdevice synchronization.
    In this recipe, we will explore and integrate a few features of the iCloud in
    our game.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As of now, we have finished the initial setup for playing with iCloud. As a
    prerequisite to integrate iCloud in any app, we must be enrolled in membership
    for iOS or the Mac Developer Program, and have the device provisioning profile
    and AppID. To accomplish this and start with the integration part, we must take
    a look at these two links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After all the configuration part is done, we can start with the integration
    of iCloud by CloudKit in our game FlyingSpaceship.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iCloud allows you to store and retrieve data easily from its secured server.
    This also provides an additional facility of sharing saved data among multiple
    applications. To save this data, our iCloud app places the data in a special local
    filesystem called the iCloud containers. It is also called **ubiquity container**,
    and serves as the local representation of the corresponding iCloud storage. This
    data is totally separate from the rest of our app data; it is kept by the operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For some iCloud services, our app does not communicate directly to the iCloud
    servers, instead, the operating system manages all this uploading and downloading
    of data for the devices attached to the iCloud account. However, CloudKit provides
    the facility to manage these activities. The following are the steps required
    for using these services:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the access to our app's iCloud containers. It involves requesting
    entitlements and programmatically initializing these containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design the app to handle the responses of iCloud services accordingly, such
    as when the user signs out of iCloud and instances of our app on other devices
    can edit the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read/write using the proper iCloud API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The operating system coordinates the transition of data to and from iCloud when
    needed as per the design of the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have briefly discussed the iCloud containers already, so this is the time
    to implement the iCloud containers in our app. To implement them, we will open
    the **Capabilities** tab of our Xcode project, which manages the entitlements
    and containers of our app. When we enable iCloud in the same tab, then Xcode configures
    our app to the default iCloud container whose name is based on the app''s bundle
    ID. This default container is used by most apps as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to build some app with data to be shared among each other, then
    we can enable the **Specify custom containers** option and it can be done using
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, open [https://developer.apple.com/](https://developer.apple.com/)
    in the browser, and click on **Member Center**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Out of the six sections in the member center, go to the **Certificates**, **Identifiers**,
    and **Profiles** sections and then in the **iOS** section, go to **Identifiers**
    where a list of identifier types is present.![How to do it…](img/00090.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **iCloud containers** tab and we can see a default container there.![How
    to do it…](img/00091.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, to add another specific iCloud Container, click on the plus button at the
    top right of the page and then enter the ID `iCloud.com.mb.FlyingSpaceshipShared`.
    Add some description for the container.![How to do it…](img/00092.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After executing all the preceding steps, we can find our custom AppIDs in the
    member center.![How to do it…](img/00093.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the specific container is created, now go to the **Capabilities** tab of
    our app Xcode project. We can see an extra container visible in the **iCloud**
    section.![How to do it…](img/00094.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now to use the specific container, select the **Specify custom containers**
    radio button then select the `iCloud.com.mb.FlyingSpaceshipShared` container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we will prepare our code for iCloud. We will be incorporating some initial
    setup in the code for iCloud services to be used by the app. Firstly, when the
    user launches an iCloud-enabled FlyingSpaceship game for the first time, we should
    invite them to use iCloud. The choice should be all or none. Hence, to invite
    the user to use iCloud, the following are the steps of the initial setup:'
  prefs: []
  type: TYPE_NORMAL
- en: In our app launch in the `application:didFinishLauchingWithOptions` method,
    get `ubiquityIdentityToken` from `NSFileManager`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then archive the iCloud availability in the user defaults database by the `ubiquityIdentityToken`
    property fetched using `NSFileManager`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now the `currentiCloudToken` function saved is the unique token representing
    the currently active iCloud account. Using this we can compare to detect whether
    the current account is different from the previous one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user will enables airplane mode, iCloud will itself become inaccessible,
    but the current iCloud account will remain signed in and `ubiquityIdentityToken`
    contains the token of the current iCloud account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the user who signs out of iCloud, the value of `ubiquityIdentityToken` sets
    to `nil`. So to receive notification, we should register as an observer of the
    `NSUbiquityIdentityDidChangeNotification` notification where the token is received.
    This is a notification for iCloud availability change and we can handle it accordingly
    in the notification selector `iCloudAccountAvailabilityChanged`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After archiving the iCloud token and registering the iCloud notification, our
    app is ready to show an alert view in order to show invites to the user iCloud
    with two options: local only and use iCloud. For this, first of all save a Boolean
    variable for `FirstLaunchWithiCloudAvailable` when the token is retrieved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also, call a method `showiCloudInviteAlertView` always in `didFinishLauchingWithOptions`
    . In this method, show the alert view to invite the user to use iCloud if a current
    token exists (it will exist only if the user is logged in to the iCloud Account,
    otherwise `NIL` will be returned) and also if the `FirstLaunchWithiCloudAvailable`
    bool is YES.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After all these changes, the `didFinishLauchingWithOptions:` method will look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we start exploring iCloud Containers, then we will notice that depending
    on the design of the app in respect to iCloud integration, either the default
    container is selected or a custom container is created; the iCloud services are
    to be configured accordingly. If we do not make any custom container, then the
    default container will be configured, whose name will be based on the app's bundle
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: And in order to share the data, the **Specify custom container identifiers**
    checkbox in the **Capabilities** tab of iCloud is used to add one or more container
    IDs. We need to specify the ID for the custom container created. For multiple
    container IDs, the first ID is the app's primary iCloud container.
  prefs: []
  type: TYPE_NORMAL
- en: With respect to custom iCloud containers, the sharing will be available on devices
    that are signed in to the iCloud account of the same app.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will discuss the ways to prepare the code for iCloud. If the user is
    logged in to the iCloud account for the app, then only `ubiquityIdentityToken`
    will be returned; otherwise `nil` will be returned. And this token is retrieved
    using the `NSFileManager` object. It is also saved if it exists for further use
    in the app according to the design of the app with respect to iCloud integration.
  prefs: []
  type: TYPE_NORMAL
- en: We are subscribing to notifications using `NSUbiquityIdentityDidChangeNotification`
    to get a callback of all the changes in `ubiquityIdentityToken`. For example,
    it will give a callback whenever the user is logged out.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes iCloud may not be available to our app; at that time, the account
    becomes unavailable while the app is running in the background. So the app must
    remove all the references to user-specific iCloud storage and refresh the user
    interface that is dependent on the iCloud Storage.
  prefs: []
  type: TYPE_NORMAL
- en: After the token is saved and the notification for `UbiquityIdentityChange` is
    registered, the app becomes ready to show an alert to use iCloud. According to
    the selection of the user, the relevant iCloud APIs such as key-value storage,
    iCloud document storage, and CloudKit storage are used in the code for further
    handling of iCloud data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As described in preceding sections, there are many iCloud Storage APIs available
    in iCloud technology such as key-value storage, iCloud document storage, and CloudKit
    storage. From all of these, the proper selection of APIs depends upon the purpose
    that has to be accomplished. Hence, as a trial, the user data of the FlyingSpaceship
    game can be used to store in the iCloud servers and share it by using any suitable
    APIs mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'To study more and for proper decision making, we can take a look at the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/iCloudFundametals.html#//apple_ref/doc/uid/TP40012094-CH6-SW28](https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/iCloudFundametals.html#//apple_ref/doc/uid/TP40012094-CH6-SW28).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information and integration of iCloud in any app, we can visit the
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/Introduction.html#//apple_ref/doc/uid/TP40012094-CH1-SW1](https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/Introduction.html#//apple_ref/doc/uid/TP40012094-CH1-SW1).'
  prefs: []
  type: TYPE_NORMAL
