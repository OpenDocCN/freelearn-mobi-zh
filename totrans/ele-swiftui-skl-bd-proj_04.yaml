- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iPad Project – Photo Gallery Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous two chapters, we created a Tax Calculator app for the iPhone.
    We implemented it from scratch, and we looked at the technical requirements, design
    specifications, wireframes, and code implementation. We will use these newly acquired
    skills in this and the next chapter, but worry not, we will go over all necessary
    aspects in case you have jumped straight to this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will work on the design of our second project, a photo
    gallery application for the iPad that will showcase its big screen. We will assess
    the requirements for designing such an application and discuss the design specifications,
    allowing us to get a better understanding of what is required and how it will
    all fit together. Then we will start coding our application to build out the UI,
    which will be connected to the gallery’s enhanced view in the next chapter. This
    project will cover the foundations of SwiftUI components. We will discuss all
    this in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design Specifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the Gallery UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a better understanding of what features/components
    are required in our photo gallery application, how we will utilize the larger
    screen of the iPad (compared to the iPhone), and the design of our application.
    By the end of this chapter, we will have implemented the wireframe for the first
    page, which will serve as the foundation for the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: To install Xcode, just search for Xcode in the App Store and download the latest
    version. Open Xcode and follow the installation instructions. Once Xcode has opened
    and launched, you’re ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 14 of Xcode has the following features/requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires a Mac running macOS Monterey 12.5 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For further information regarding technical details, please refer to [*Chapter
    1*](B18783_01.xhtml#_idTextAnchor014).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Design Specifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the design specifications of our gallery application.
    This section describes the features we are going to implement in our gallery app.
    The best method for figuring out the features required is to put yourself in the
    user’s shoes to determine how they will use the app and break it into individual
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The features of our app we would like to present are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Highlight view**: This is the main view that the user will see, which showcases
    all the images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enhanced view**: This shows a larger version of the image along with information
    such as a description and a date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fullscreen mode**: View the image in fullscreen mode without any extra information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fullscreen tap for more info**: A single tap while in fullscreen mode will
    show the photo’s title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collections**: Different image collections, or albums:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Side panel**: This shows all the collection names in horizontal mode.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete and rename**: This allows the user to delete an image and rename it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editing**: Image editing functionality:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing using the Apple Pencil.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sharing**: The ability to share an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display mode switching**: Change how the images are displayed on the Highlight
    page, as a list or using tiles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Annotations and highlighting**: Allow the user to annotate and highlight
    parts of the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images and information come from an external source such as a local database
    or online.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have listed the ideal features we would like, it is important for
    us to determine which features are crucial. To do this, we must understand the
    purpose of our product. For me, the purpose of creating this photo gallery app
    is to showcase some images and provide an enhanced mode that gives more information.
    I know that not all the features are required, and it could be useful if some
    were omitted and assigned as extra tasks for you as the developer to undertake.
    The extra tasks are optional and should only be performed when you’ve finished
    this project. With this in mind, the following are the core features we will be
    implementing:'
  prefs: []
  type: TYPE_NORMAL
- en: Highlight view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the features will be an exercise for you once you have completed
    this and the next chapter. The next section will cover the acceptance criteria
    for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Acceptance criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will discuss the acceptance criteria for our application that we want to
    see in the end product, which will be completed at the end of the next chapter.
    If possible, we should try to make them measurable. Let’s do this right now:'
  prefs: []
  type: TYPE_NORMAL
- en: Utilize small images for the gallery view, providing an overview of the whole
    gallery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scrollable view to navigate through all our images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An enhanced view to display extra information, thus allowing optional parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A native sharing menu should appear when sharing an image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation from the highlight view to the enhanced view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation from the enhanced view to the fullscreen view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop test cases in which the application’s acceptance criteria will be tested.
    Using this method allows us to see the conditions under which the application
    will be used by the end user and the level that needs to be attained for it to
    be considered successful.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the most useful tools for designing layouts is wireframing. A wireframe
    is an overview of the layout. The following image shows what the highlight page
    of our app will look like using a wireframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Wireframe of the Highlight view in portrait mode](img/Figure_4.01_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – Wireframe of the Highlight view in portrait mode
  prefs: []
  type: TYPE_NORMAL
- en: 'With iPad applications, it is very important to have a landscape mode. The
    following image shows the wireframe of our highlight view in landscape mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Wireframe of the Highlight view in landscape mode](img/Figure_4.02_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Wireframe of the Highlight view in landscape mode
  prefs: []
  type: TYPE_NORMAL
- en: 'The following two images show the portrait and landscape wireframes for the
    enhanced view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Wireframe of the Enhanced view in portrait mode](img/Figure_4.03_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Wireframe of the Enhanced view in portrait mode
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 4.4 – Wireframe of the Enhanced view in landscap\uFEFFe mode](img/Figure_4.04_B18783.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Wireframe of the Enhanced view in landscape mode
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will build the interface for our application and make
    sure it looks the way we designed it in the wireframes. Though we will build it
    the same way, there may be small differences. This will serve as the foundation
    for connecting it all together in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Gallery UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now build the UI for the gallery app. There are three main parts of
    the gallery, the first being the highlight page, which is loaded on launch and
    shows all the images. Once the user clicks on an image, the user is taken to the
    enhanced page, which is the second part. On this page, a bigger version of the
    image is shown along with more information. Finally, the last part is fullscreen
    mode, which simply shows a selected image in fullscreen. Naturally, we will start
    with the first part, the highlight page, but before that, we will create our project.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Xcode and select **Create a new** **Xcode project**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Create a new Xcode project](img/Figure_4.05_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Create a new Xcode project
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will choose the template for our application. As we are creating an
    iPad application, we will select **iOS** from the top, then select **App**, and
    click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Xcode project template selection](img/Figure_4.06_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Xcode project template selection
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now choose the options for our project. There are only two crucial
    things to set. Make sure **Interface** is set to **SwiftUI**. This will be the
    UI our system will use. Set **Language** to **Swift**; this is the programming
    language used for our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Xcode project options](img/Figure_4.07_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – Xcode project options
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on **Next**, you can choose where to create your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Xcode project save directory](img/Figure_4.08_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Xcode project save directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have chosen a location, click **Create** in the bottom right. Xcode
    shows your project in all its glory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.9 – New Xcode project overview](img/Figure_4.09_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – New Xcode project overview
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will set our project to iPad only.
  prefs: []
  type: TYPE_NORMAL
- en: Set Project to iPad
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have probably noticed in the preview that it’s currently set to an iPhone
    project or, more accurately, an iOS project. This means it runs on iPhones and
    iPads, and the preview by default shows the iPhone view. We want our project to
    be iPad only, so follow these steps to set our project to iPad only:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s change it now. Select the project in the **Project Navigator**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Project in Project Navigator](img/Figure_4.10_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Project in Project Navigator
  prefs: []
  type: TYPE_NORMAL
- en: 'Now select **Photo Gallery** from the **TARGETS** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Target selection](img/Figure_4.11_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Target selection
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to remove the iPhone and Mac destinations. Doing this is simple;
    select each destination and press the minus button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Remove destinations](img/Figure_4.12_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – Remove destinations
  prefs: []
  type: TYPE_NORMAL
- en: 'After removing iPhone and Mac from the destinations, it should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Supported destinations](img/Figure_4.13_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Supported destinations
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will implement the highlight page of our application
    using SwiftUI.
  prefs: []
  type: TYPE_NORMAL
- en: Highlight Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will implement the highlight page’s UI. As a reminder,
    this is what it will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Wireframe of the Highlight view in portrait mode](img/Figure_4.14_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Wireframe of the Highlight view in portrait mode
  prefs: []
  type: TYPE_NORMAL
- en: There is one main element on the highlight page. As a little task, see if you
    can figure out what it is. Don’t worry if you don’t know the exact UI component
    name; we will look at it in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Image Component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The image component is one of the core components provided by SwiftUI. It allows
    you to display an image, which can be used to provide a visual representation
    of something or to embellish a body of text. We will use it to show all the images
    in our gallery as highlights on our Highlight page. The following image shows
    the image on the Highlight page. As you will remember from *Figure 4**.14*, The
    Highlight page is full of small images. These images will be clickable, which
    will take the user to the Enhanced view.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Image component on the Highlight view](img/Figure_4.15_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Image component on the Highlight view
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will add the image components we discussed earlier into
    our application using SwiftUI.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Highlight Page Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will add the image components to our highlight page, which
    currently is named **ContentView**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s rename `HighlightView`. Doing this is simple: open **ContentView**,
    right-click any reference **ContentView** in the code, then go to **Refactor |
    Rename**. I will use the first reference, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Rename button](img/Figure_4.16_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – Rename button
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the following screen will be shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Rename screen](img/Figure_4.17_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – Rename screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the name from `HighlightView`, and as you can see, all other references
    to **ContentView** are automatically updated. Finally, click the **Rename** button
    in the top right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Changing the view’s name](img/Figure_4.18_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – Changing the view’s name
  prefs: []
  type: TYPE_NORMAL
- en: 'We have now renamed our view, including the file, as can be seen in the **Project
    Navigator**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Updated filename in the Project Navigator](img/Figure_4.19_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – Updated filename in the Project Navigator
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one extra step, which is optional. That is to rename the `ContentView_Previews`
    struct. Though this is not crucial, I highly recommend renaming it to keep all
    the name references in sync. Using the same process as before, rename the `ContentView_Previews``HighlightView_Previews`.
    The location of the struct is at the bottom of the `HighlightView` file (previously
    named `ContentView`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 4.20 – Renaming the previews str\uFEFFuct](img/Figure_4.20_B18783.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – Renaming the previews struct
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a look at column layouts and determine which
    one will be best for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Column layouts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we start coding our highlight page, let’s discuss the three main types
    of column layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Flexible layout**: Allows you to specify the number of columns and spaces
    them according to the screen size dynamically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed layout**: Creates columns with fixed dimensions, which is restrictive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adaptive columns**: As the name suggests, they adapt to the size of the contents.
    You set the minimum size, which is used by the adaptive system to calculate how
    many items can be placed on a single row, depending on the screen size. Naturally,
    more items will be displayed when the iPad is in horizontal mode than in portrait
    mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each has its use cases, but to truly show off our photo gallery, we will use
    the adaptive column system. In the next section, we will implement the highlight
    view programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Highlight View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have created a fresh project, the coding standards aren’t in line with
    my personal preferences. So, firstly, I will change the standards. Feel free to
    take a few moments to do the same:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add the images to our project. Doing this is simple. Select
    **Assets** from the **Project Navigator**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Assets location in Project Navigator](img/Figure_4.21_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Assets location in Project Navigator
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the **Assets** view will appear. Importing an image/asset can be done in
    one of two ways:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Dragging and dropping the files into the **Assets** section:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Dragging and dropping Assets](img/Figure_4.22_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – Dragging and dropping Assets
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-clicking the **Assets** section and selecting **Import**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.23 – Import button](img/Figure_4.23_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – Import button
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the asset(s) have been imported, the **Assets** view will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.24 – Asset(s) imported](img/Figure_4.24_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 – Asset(s) imported
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: I have only imported one image, and I will use it multiple times, but you can
    and should use different images.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create an array of strings. Each string will be the name of an
    image in our gallery. As mentioned previously, I will be using the same image,
    hence why all the strings will be the same. Update it according to your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'I am using the thumbnail for my developer-centric podcast FireDEV. Feel free
    to use it and tune in every Thursday to my podcast using the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Spotify: [https://open.spotify.com/show/387RiHksQE33KYHTitFXhg](https://open.spotify.com/show/387RiHksQE33KYHTitFXhg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apple Podcasts: [https://podcasts.apple.com/us/podcast/firedev-fireside-chat-with-industry-professionals/id1602599831](https://podcasts.apple.com/us/podcast/firedev-fireside-chat-with-industry-professionals/id1602599831)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Podcasts: [https://podcasts.google.com/feed/aHR0cHM6Ly9hbm     Nob3IuZm0vcy83Yjg2YTNiNC9wb2RjYXN0L3Jzc](https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy83Yjg2YTNiNC9wb2RjYXN0L3Jzcw).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the start of the `HighlightView` struct, before the
    body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code we have added is just an array of strings that correspond to image
    files. The file type, for example, `.png`, doesn’t need to be included when specifying
    assets in Swift.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a variable, which sets how the columns will be organized.
    Earlier, we discussed the different column layouts and chose adaptive columns.
    Add the following code underneath the previous code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code sets the grid items to be adaptive, with a minimum size of 300 pixels,
    which means regardless of the iPad size, the images will be easy to view and not
    too small or large.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to display the images. Add the following code inside the
    body, and we will go over what each part does:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before we run it, let’s see what each part of the code does:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LazyVGrid( columns: adaptiveColumns, spacing: 20 )`: Creates a lazy vertical
    grid with adaptive columns that have a spacing of 20 between each item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ForEach(` `images.indices )`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ i in`: Loops through every image filename, and `i` represents the index
    number, starting at 0, which will be used to reference the image shortly.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Image(` `images[i] )`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.``resizable( )`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.``scaledToFill( )`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.frame( width: 300, height: 300 )`: Creates an image using the filename from
    the `images` array. `resizable` allows an image’s size to be modified. It’s important
    to set the `resizable()` modifier before applying any scaling or sizing to an
    image, or it won’t have an effect. `scaledToFill` is used to maintain the aspect
    ratio of an image and scales to fill its parent. Finally, the `frame` parameter
    is used to set the width and height of the image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the application will result in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.25 – HighlightView Preview](img/Figure_4.25_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – HighlightView Preview
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s rotate our device/simulator to see how it looks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.26 – Horizontal orientation preview](img/Figure_4.26_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 – Horizontal orientation preview
  prefs: []
  type: TYPE_NORMAL
- en: 'Rotating the simulator can be achieved by pressing the *⌘* *+ left/right arrow*
    keys or by pressing the rotate button at the top of the simulator, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.27 – Rotate button](img/Figure_4.27_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.27 – Rotate button
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the Highlight view for our gallery application is looking really
    good. It works flawlessly in portrait and landscape. The beauty of using a grid
    instead of a custom implementation is that it handles the rotation, which saves
    time and energy, while keeping it in line with the design standards users are
    used to.
  prefs: []
  type: TYPE_NORMAL
- en: 'That was the last bit of code for this chapter. Here is all the code for the
    `HighlightView` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We first looked at the design of our photo gallery application. It was unique
    from a design perspective due to it being on an iPad. We looked at the wireframe
    of the Highlight view, enhanced view, and full-screen mode. We used SwiftUI to
    implement the Highlight view and made sure it rotated correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the design of our photo gallery application for
    the iPad. We looked at wireframes and broke down each element into SwiftUI components.
    We then implemented the SwiftUI components to match the design from the highlight
    view wireframe. We also took a look at the requirements for building this application,
    and the design specifications a photo gallery application can have. Then we simplified
    it to the core features our app will provide. We expanded our design specifications
    with acceptance criteria to show what we would like our app to do.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we’ll take a look at implementing the enhanced view based
    on the wireframe discussed in this chapter and connect it to the highlight view.
  prefs: []
  type: TYPE_NORMAL
