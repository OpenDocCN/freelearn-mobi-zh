["```swift\nmyDocument = [[myDocument alloc] initWithFileURL:ubiquityURL];\nmyDocument.delegate = self;\ncoordinator = [[NSFileCoordinator alloc]    \n               initWithFilePresenter:myDocument];    \n               [NSFileCoordinator addFilePresenter:myDocument];\n```", "```swift\nif (![[NSFileManager defaultManager] setUbiquitous:YES\n    itemAtURL:localURL destinationURL:ubiquityURL error:&error]){\n    NSLog(@\"Error making local file ubiquitous. %@\",    \n           [error localizedFailureReason]);    \n    return;    \n}\n```", "```swift\n// Point to our iCloud Documents container.\n  NSURL *ubiq = [[NSFileManager defaultManager] \n  URLForUbiquityContainerIdentifier:nil];\n  NSURL *ubiquitousPackage = [[ubiq\n  URLByAppendingPathComponent:@\"Documents\"]\n  URLByAppendingPathComponent:@\"/Document.doc\"];\n  Document *doc = [[Document alloc]    \n  initWithFileURL:ubiquitousPackage];\n  doc.docContent = @\"Welcome to iCloud Programming.\";\n  // Check to see if we are editing a currently opened note\n  [doc saveToURL[doc fileURL] forSaveOperation:UIDocumentSaveForCreatingcompletionHandler:^(BOOL success) {\n    if (success) {\n      NSLog(@\"Saved Successfully.\");\n    }\n  }];\n```", "```swift\n  NSFileManager *fileManager = [NSFileManager defaultManager];\n  NSURL *iCloudURL = [fileManager\n  URLForUbiquityContainerIdentifier:\n  @\"TEAMID.com.yourcompany.applicationname\"];\n  // Log the iCloud URL to the console window\n  NSLog(@\"%@\", [iCloudURL absoluteString]);\n  // If iCloud is supported or enabled\n  if(iCloudURL)\n  {\n    NSUbiquitousKeyValueStore *iCloudStore = \n    [NSUbiquitousKeyValueStore defaultStore];      \n    [iCloudStore setString:@\"Success\" \n    forKey:@\"iCloudStatus\"];\n    // For Synchronizing with iCloud Server\n    [iCloudStore synchronize]; \n    // Retrieve our stored status from the iCloud Server\n    NSLog(@\"iCloud status : %@\", [iCloudStore\n    stringForKey:@\"iCloudStatus\"]);\n}\n```", "```swift\n    -(void)viewDidAppear:(BOOL)animated\n    {\n      [super viewDidAppear:animated];\n      // Add observer calls to monitor document state changes\n      [[NSNotificationCenter defaultCenter] \n       addObserver:self\n       selector:@selector(documentChanged:)\n       name:UIDocumentStateChangedNotification\n       object:self.document];\n    }\n    ```", "```swift\n    #pragma mark routine is called whenever a change to the document is encountered\n    - (void)documentChanged:(NSNotification *)notification {\n       if ([notification.object documentState] &\n           UIDocumentStateInConflict) {\n           NSURL *ubiq = [[NSFileManager defaultManager] \n           URLForUbiquityContainerIdentifier:nil];\n         NSURL *ubiquitousPackage = [[ubiq \n           URLByAppendingPathComponent:@\"Documents\"]\n           URLByAppendingPathComponent:@\"/Snippet.doc\"];\n           SnippetDocument *doc = [[SnippetDocument alloc] \n           initWithFileURL:ubiquitousPackage];\n          NSURL *documentURL = [doc fileURL];\n          NSArray *conflictVersions = [NSFileVersion\n           unresolvedConflictVersionsOfItemAtURL:documentURL];\n          for (NSFileVersion *fileVersion in conflictVersions) {\n          [fileVersion setResolved:YES];\n         }\n         [NSFileVersionremoveOtherVersionsOfItemAtURL:documentURL error:nil];\n       }\n    }\n    ```", "```swift\n    //  ViewController.h\n    //  iCloudExample\n    //  Created by Steven F Daniel on 8/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    #import <UIKit/UIKit.h>\n    @interface ViewController : UIViewController\n    // Declare the properties for each of our objects.\n    @property (strong,nonatomic) IBOutlet UIBarButtonItem *btnSave;\n    @property (strong,nonatomic) IBOutlet UIBarButtonItem *btnLoad;\n    @property (strong,nonatomic) IBOutlet UITextView      *docContents;\n    @end\n    ```", "```swift\n    //  Snippet.h\n    //  iCloudExample\n    //  Created by Steven Daniel on 08/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    #import <UIKit/UIKit.h>\n    @interface Snippet : UIDocument\n    @property (nonatomic, strong) NSString  *docContent;\n    @end\n    ```", "```swift\n    //  Snippet.m\n    //  iCloudExample\n    //  Created by Steven Daniel on 08/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    #import \"Snippet.h\"\n\n    @implementation Snippet\n\n    @synthesize docContent;\n\n    // Called whenever the application reads data from the file.\n\n    - (BOOL)loadFromContents:(id)contents ofType:(NSString *)typeName error:(NSError **)outError{\n      // Initialize our document content\n      self.docContent = @\"\";\n      // Check to see if any text associated for the document.\n      if ([contents length] > 0) {\n          self.docContent = [[NSString alloc] \n                            initWithBytes:[contents bytes] \n                            length:[contents length] \n                            encoding:NSUTF8StringEncoding];\n      }\n      return YES;    \n    }\n    // Called whenever the application saves the content.\n    - (id)contentsForType:(NSString *)typeName error:(NSError **)outError {\n        // Ensure we have content to save for our document.\n        if ([self.docContent length] == 0) {\n             self.docContent = @\"\";\n        }\n        // Save the document contents and return back the data.\n        return [NSData dataWithBytes:[self.docContent UTF8String] \n               length:[self.docContent length]];    \n    }\n    @end\n    ```", "```swift\n    //  ViewController.h\n    //  iCloudExample\n    //  Created by Steven F Daniel on 8/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    #import  <UIKit/UIKit.h>\n    #import \"Snippet.h\"\n    @interface ViewController : UIViewController\n    // Declare the Getters and Setters for each of our objects.\n    @property (strong,nonatomic) IBOutlet UIBarButtonItem *btnSave;\n    @property (strong,nonatomic) IBOutlet UIBarButtonItem *btnLoad;\n    @property (strong,nonatomic) IBOutlet UITextView      *docContents;\n    @property (strong, nonatomic) Snippet         *document;\n    @property (strong, nonatomic) NSMetadataQuery *docQuery;\n    @end\n    ```", "```swift\n    //  ViewController.m\n    //  iCloudExample\n    //  Created by Steven F Daniel on 8/11/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    #import \"ViewController.h\"\n\n    @interface ViewController()\n    @end\n\n    @implementation ViewController\n\n    @synthesize document;\n    @synthesize docQuery;\n    @synthesize docContents = m_docContents;\n    @synthesize btnSave = m_btnSave;\n    @synthesize btnLoad = m_btnLoad;\n\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n        [super viewDidLoad];\n      // Do any additional setup after loading the view.\n      NSURL *ubiq = [[NSFileManager defaultManager] \n       URLForUbiquityContainerIdentifier:nil];\n      if (!ubiq) {\n        NSLog(@\"iCloud not currently available\");\n        self.btnSave.enabled = NO;\n        self.btnLoad.enabled = NO;\n      }\n      // Set the background color and font attributes for our note.\n       UIFont * font = [UIFont fontWithName:@\"Helvetica-Bold\" \n                       size:[UIFont systemFontSize]];\n       [self.docContents setFont:font];\n       [self.docContents setBackgroundColor:[UIColor\n                 colorWithRed:1.0f green:1.0f blue:0.6f alpha:1.0f]];\n       // Initialize control and button attributes\n      [self btnLoad:nil];\n    }\n    ```", "```swift\n    - (void)viewDidUnload\n    {\n        [super viewDidUnload];\n\n        // Release any retained subviews of the main view.\n        self.btnSave = nil;\n        self.btnLoad = nil;\n\n      // Turn off our notifications\n     [docQuery disableUpdates];\n     [[NSNotificationCenter defaultCenter] \n     removeObserver:self];\n    }\n    ```", "```swift\n    -(void)viewDidAppear:(BOOL)animated\n    {\n      [super viewDidAppear:animated];\n\n      // Add observer calls to monitor document and \n       // document state changes\n     [[NSNotificationCenter defaultCenter] addObserver:self\n     selector:@selector(documentChanged:)\n     name:UIDocumentStateChangedNotification\n     object:self.document];\n    }\n    ```", "```swift\n    #pragma mark Saves the document to our iCloud repository\n    - (IBAction)btnSave:(UIBarButtonItem *)sender {\n      // Points to our iCloud Documents container.\n      NSURL *ubiq = [[NSFileManager defaultManager] \n                       URLForUbiquityContainerIdentifier:nil];\n      NSURL *ubiquitousPackage = [[ubiq\n       URLByAppendingPathComponent:@\"Documents\"]\n      URLByAppendingPathComponent:@\"/Snippet.doc\"];\n       Snippet *doc = [[Snippet alloc] \n       initWithFileURL:ubiquitousPackage];\n       doc.docContent = self.docContents.text;\n       // Check to see if we are editing a currently opened note\n      [doc saveToURL:[doc fileURL] \n             forSaveOperation:UIDocumentSaveForCreating\n             completionHandler:^(BOOL success) {\n                if (success) {\n                   NSLog(@\"Document saved successfully\");\n                }\n      }];\n    }\n    ```", "```swift\n    #pragma mark Reloads our document from cloud Storage\n    - (IBAction)btnLoad:(UIBarButtonItem *)sender {\n      NSURL *ubiq = [[NSFileManager defaultManager] \n       URLForUbiquityContainerIdentifier:nil];\n      if (ubiq) {\n        docQuery = [[NSMetadataQuery alloc] init];\n        [docQuerysetSearchScopes:[NSArray\n          arrayWithObject:NSMetadataQueryUbiquitousDocumentsScope]];\n        NSPredicate *pred = [NSPredicate\n              predicateWithFormat: @\"%K Like 'Snippet.doc'\", \n                   NSMetadataItemFSNameKey];\n        [docQuerysetPredicate:pred];\n        NSNotificationCenter *center = [NSNotificationCenter\n          defaultCenter];\n          [center addObserver:self selector:@selector(processQuery:)\n          name:NSMetadataQueryDidFinishGatheringNotification\n        object:docQuery];\n        [center addObserver:self selector:@selector(processQuery:)\t\n          name:NSMetadataQueryDidUpdateNotification\n       object:docQuery];\n        if (![self.docQuery isStarted]) [self.docQuery startQuery];\n        [self.docQuery enableUpdates];\n        }\n      else {\n        self.btnSave.enabled = NO;\n        self.btnLoad.enabled = NO;\n       }\n    }\n    ```", "```swift\n    #pragma mark Retrieve the contents of our document stored within iCloud and update our UITextView Control\n    - (void)processQuery:(NSNotification *)notification {\n\n      [docQuery disableUpdates];\n\n       if ([[docQuery results] count] == 1) {\n         NSURL *url = [[[docQuery results] objectAtIndex:0] \n           valueForAttribute:NSMetadataItemURLKey];\n           Snippet *contents = [[Snippet alloc] initWithFileURL:url];\n           [contentsopenWithCompletionHandler:^(BOOL success) {\n                 if (success) {\n                   [self.docContents setText:contents.docContent];\n                 }\n           }];\n      }\n      [docQuery enableUpdates];\n    }\n    ```", "```swift\n    #pragma mark routine is called whenever a change to the document is encountered\n    - (void)documentChanged:(NSNotification *)notification {\n      if ([notification.object documentState] &\n            UIDocumentStateInConflict) {\n        // Wait to find out what user wants first\n        UIAlertView *alertView = [[UIAlertView alloc]\n          initWithTitle:@\"Conflict Detected\"\t\t\n             message:@\"Document modified on another iOS device.\"\n          delegate:self\n          cancelButtonTitle:nil\n          otherButtonTitles:@\"OK\", nil];\n          [alertView show];\n        // Point to our iCloud Documents container.\n        NSURL *documentURL = [notification.objectfileURL];\n        NSArray *conflictVersions = [NSFileVersion\n          unresolvedConflictVersionsOfItemAtURL:documentURL];\n        for (NSFileVersion *fileVersion in conflictVersions) {\n          [fileVersion setResolved:YES];\n        }\n        [NSFileVersion\n          removeOtherVersionsOfItemAtURL:documentURL error:nil];\n        // Trigger an Auto-Save and re-enable our Query Updates\n        [document updateChangeCount:UIDocumentChangeDone];\n      }\n    }\n    ```"]