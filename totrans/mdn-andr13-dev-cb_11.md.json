["```kt\n    @Composable\n    ```", "```kt\n    fun OurMenu(){ }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun OurMenu(){\n    ```", "```kt\n    var expanded by remember { mutableStateOf(false) }\n    ```", "```kt\n    val menuItems = listOf(\"Item 1\", \"Item 2\", \"Item 3\",\n    ```", "```kt\n    \"Item 4\") }\n    ```", "```kt\n    Box(\n    ```", "```kt\n        contentAlignment = Alignment.Center,\n    ```", "```kt\n        modifier = Modifier\n    ```", "```kt\n            .clickable { expanded = true }\n    ```", "```kt\n    ) {\n    ```", "```kt\n        Text(stringResource(id = R.string.menu))\n    ```", "```kt\n        Icon(\n    ```", "```kt\n            imageVector = Icons.Default.ArrowDropDown,\n    ```", "```kt\n            contentDescription = stringResource(\n    ```", "```kt\n                id = R.string.menu_drop_down),\n    ```", "```kt\n            modifier = Modifier.align(Alignment.CenterEnd)\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n    DropdownMenu(\n    ```", "```kt\n        expanded = expanded,\n    ```", "```kt\n        onDismissRequest = { expanded = false }\n    ```", "```kt\n    ) {\n    ```", "```kt\n        menuItems.forEachIndexed { index, item ->\n    ```", "```kt\n            DropdownMenuItem(text = { Text(item)},\n    ```", "```kt\n                onClick = { /*TODO*/ })\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    Toast.makeText(context, \"Hello, Android!\", Toast.LENGTH_SHORT).show();\n    ```", "```kt\n    val coroutineScope = rememberCoroutine()\n    ```", "```kt\n    coroutineScope.launch {\n    ```", "```kt\n        Toast.makeText(\n    ```", "```kt\n            context,\n    ```", "```kt\n            \"Selected item: $item\",\n    ```", "```kt\n            Toast.LENGTH_SHORT\n    ```", "```kt\n        ).show()\n    ```", "```kt\n    }\n    ```", "```kt\n    coroutineScope.launch {\n    ```", "```kt\n        Toast.makeText(\n    ```", "```kt\n            context,\n    ```", "```kt\n            \"Selected item: $item\",\n    ```", "```kt\n            Toast.LENGTH_SHORT\n    ```", "```kt\n        ).show()\n    ```", "```kt\n    }\n    ```", "```kt\nmenuItems.forEachIndexed { index, item ->\n    DropdownMenuItem(\n        text = { Text(item) },\n        onClick = {\n            coroutineScope.launch {\n                snackbarHostState.showSnackbar(\n                    message = \"Selected Item: $item\"\n                )\n            }\n        }\n    )\n}\n```", "```kt\n    @Composable\n    ```", "```kt\n    fun AlertDialogExample() {...}\n    ```", "```kt\n    AlertDialog(\n    ```", "```kt\n        onDismissRequest = { dialog.value = false },\n    ```", "```kt\n        title = {\n    ```", "```kt\n            Text(\n    ```", "```kt\n                text = stringResource(\n    ```", "```kt\n                    id = R.string.title_message),\n    ```", "```kt\n                fontWeight = FontWeight.Bold,\n    ```", "```kt\n                color = Color.Black\n    ```", "```kt\n            )\n    ```", "```kt\n        },\n    ```", "```kt\n        text = {\n    ```", "```kt\n            Text(\n    ```", "```kt\n                text = stringResource(id = R.string.body),\n    ```", "```kt\n                color = Color.Gray\n    ```", "```kt\n            )\n    ```", "```kt\n        },\n    ```", "```kt\n        . . .\n    ```", "```kt\n        confirmButton = {\n    ```", "```kt\n            Button(\n    ```", "```kt\n                onClick = {/*TODO*/ }\n    ```", "```kt\n            ) {\n    ```", "```kt\n                Text(text = stringResource(\n    ```", "```kt\n                    id = R.string.ok))\n    ```", "```kt\n            }\n    ```", "```kt\n        },\n    ```", "```kt\n        dismissButton = {\n    ```", "```kt\n            Button(\n    ```", "```kt\n                onClick = { dialog.value = false }\n    ```", "```kt\n            ) {\n    ```", "```kt\n                Text(text = stringResource(\n    ```", "```kt\n                    id = R.string.cancel))\n    ```", "```kt\n            }\n    ```", "```kt\n        },\n    ```", "```kt\n    )\n    ```", "```kt\n    }\n    ```", "```kt\n        . . .\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun BottomSheetExample() {...}\n    ```", "```kt\n    val bottomSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\n    ```", "```kt\n    ModalBottomSheet(\n    ```", "```kt\n        onDismissRequest = { openBottomSheet = false },\n    ```", "```kt\n        sheetState = bottomSheetState,\n    ```", "```kt\n    ) {\n    ```", "```kt\n        Column(Modifier.fillMaxWidth(),\n    ```", "```kt\n            horizontalAlignment =\n    ```", "```kt\n                Alignment.CenterHorizontally) {\n    ```", "```kt\n            Button(\n    ```", "```kt\n                onClick = {\n    ```", "```kt\n                    coroutineScope.launch {\n    ```", "```kt\n                        bottomSheetState.hide() }\n    ```", "```kt\n                           .invokeOnCompletion {\n    ```", "```kt\n                           if (\n    ```", "```kt\n                               !bottomSheetState.isVisible\n    ```", "```kt\n                           ) {\n    ```", "```kt\n                               openBottomSheet = false\n    ```", "```kt\n                           }\n    ```", "```kt\n                    }\n    ```", "```kt\n                }\n    ```", "```kt\n            ) {\n    ```", "```kt\n                Text(text = stringResource(\n    ```", "```kt\n                    id = R.string.content))\n    ```", "```kt\n        }\n    ```", "```kt\n    . . .\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun RadioButtonExample() {...}\n    ```", "```kt\n    val choices = listOf(\"Mangoes\", \"Avocado\", \"Oranges\")\n    ```", "```kt\n    var selectedOption by remember {\n    ```", "```kt\n        mutableStateOf(choices[0]) }\n    ```", "```kt\n    Row(\n    ```", "```kt\n        Modifier.fillMaxWidth(),\n    ```", "```kt\n        verticalAlignment = Alignment.CenterVertically\n    ```", "```kt\n    ) {\n    ```", "```kt\n        RadioButton(\n    ```", "```kt\n            selected = selectedOption == option,\n    ```", "```kt\n            onClick = { selectedOption = option }\n    ```", "```kt\n        )\n    ```", "```kt\n        Text(\n    ```", "```kt\n            text = option,\n    ```", "```kt\n            style = MaterialTheme.typography.body1,\n    ```", "```kt\n            modifier = Modifier.padding(start = 6.dp)\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun RadioButtonExample() {...}\n    ```", "```kt\n    FloatingActionButton(onClick = { /* do something */ }) {\n    ```", "```kt\n        Icon(Icons.Default.Add, contentDescription =\n    ```", "```kt\n            stringResource(id = R.string.add))\n    ```", "```kt\n    }\n    ```", "```kt\n    ExtendedFloatingActionButton(\n    ```", "```kt\n        text = { Text(\"Add item\") },\n    ```", "```kt\n        onClick = { /* do something */ },\n    ```", "```kt\n        icon = {\n    ```", "```kt\n            Icon(\n    ```", "```kt\n                Icons.Default.Add,\n    ```", "```kt\n                contentDescription = stringResource(\n    ```", "```kt\n                    id = R.string.add)\n    ```", "```kt\n            )\n    ```", "```kt\n        }\n    ```", "```kt\n    )\n    ```"]