["```java\n// Dynamic Typing, BAD FOR YOUR PERFORMANCE\nvar yourVariableName = 23;\n\n// Static Typing, GOOD FOR YOUR PERFORMANCE\nvar myGo : GameObject = null;\n```", "```java\nfunction Start() {\n  var yourVariableName = GetComponent(YourScriptName);\n  yourVariableName.YourFunctionName();\n}\n```", "```java\nfunction Start() {\n  var yourVariableName : YourScriptName = GetComponent(YourScriptName);\n  yourVariableName.YourFunctionName();\n}\n```", "```java\n// BAD for your performance\nvoid Update() {\n  transform.position = new Vector3(0.0f, 1.0f, -1.0f);\n}\n\n// Second example:\n// GOOD for your performance\nprivate Transform _t;\nvoid Start() {\n  _t = transform;\n}\n\nvoid Update() {\n  _t.position = new Vector3(0.0f, 1.0f, -1.0f);\n}\n```", "```java\nprivate Transform yourTransform:\nvoid Update() {\n  if (Vector3.Distance(yourTransform.position, transform.position) > 200) {\n    return;\n  }\n  // your next code may be here ...\n}\n```", "```java\nvoid OnBecameVisible() {\n  enabled = true;\n}\n\nvoid OnBecameInvisible() {\n  enabled = false;\n}\n```", "```java\nusing UnityEngine;\nusing System.Diagnostics;\n\npublic class IfSwitchTestFirstCase : MonoBehaviour {\n  public const int CYCLES_COUNTER = 100000000;\n\n  bool IfTest(int yourIntegerExample)\n  {\n    if (yourIntegerExample == 0 || yourIntegerExample == 1) {\n      return true;\n    }\n\n    if (yourIntegerExample == 2 || yourIntegerExample == 3) {\n      return false;\n    }\n\n    if (yourIntegerExample == 4 || yourIntegerExample == 5) {\n      return true;\n    }\n\n    return false;\n  }\n\n  bool SwitchTest(int yourIntegerExample)\n  {\n    switch (yourIntegerExample)\n    {\n      case 0:\n      case 1:\n        return true;\n\n      case 2:\n      case 3:\n        return false;\n\n      case 4:\n      case 5:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  void Start() {\n    Stopwatch ifTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES_COUNTER; i++)\n    {\n      IfTest(i);\n    }\n    ifTimer.Stop();\n\n    Stopwatch switchTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES_COUNTER; i++)\n    {\n      SwitchTest(i);\n    }\n    switchTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"IF time = \" +\n      (\n(double)(ifTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES_COUNTER\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Switch time = \" +\n      (\n(double)(switchTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES_COUNTER\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nIF time = 11.54 nanoseconds average per cycle\nSwitch time = 8.76 nanoseconds average per cycle\n```", "```java\nusing UnityEngine;\nusing System.Diagnostics;\n\npublic class IfSwitchTestSecondCase : MonoBehaviour {\n  public const int CYCLES_COUNTER = 100000000;\n\n  int SwitchTest(int yourIntegerExample)\n  {\n    switch (yourIntegerExample)\n    {\n      case 0:\n      {\n        return 11;\n      }\n\n      case 1:\n      {\n        return 22;\n      }\n\n      default:\n      {\n        return -11;\n      }\n    }\n  }\n\n  int IfTest(int yourIntegerExample)\n  {\n    if (0 == yourIntegerExample)\n    {\n      return 11;\n    }\n\n    if (1 == yourIntegerExample)\n    {\n      return 22;\n    }\n\n    return -11;\n  }\n\n  void Start() {\n    Stopwatch switchTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES_COUNTER; i++)\n    {\n      SwitchTest(0);\n      SwitchTest(0);\n      SwitchTest(0);\n      SwitchTest(0);\n      SwitchTest(0);\n      SwitchTest(0);\n      SwitchTest(1);\n      SwitchTest(1);\n      SwitchTest(1);\n      SwitchTest(1);\n    }\n    switchTimer.Stop();\n\n    Stopwatch ifTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES_COUNTER; i++)\n    {\n      IfTest(0);\n      IfTest(0);\n      IfTest(0);\n      IfTest(0);\n      IfTest(0);\n      IfTest(0);\n      IfTest(1);\n      IfTest(1);\n      IfTest(1);\n      IfTest(1);\n    }\n    ifTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"IF time = \" +\n      (\n(double)(ifTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES_COUNTER\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Switch time = \" +\n      (\n(double)(switchTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES_COUNTER\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nIF time = 54.46 nanoseconds average per cycle\nSwitch time = 64.24 nanoseconds average per cycle\n```", "```java\n// [i, j] from float 2D array (table)\n// 0 ≤ i ≤ N - 1\n// 0 ≤ j ≤ M - 1\nfloat2Darray[i, j] = 123.321f;\n```", "```java\n// [i, j] from float 1D array\n// 0 ≤ i ≤ N - 1\n// 0 ≤ j ≤ M - 1\nfloat1Darray[(i * M) + j] = 123.321f;\n```", "```java\nusing UnityEngine;\nusing System.Diagnostics;\n\npublic class Array2Dvs1D : MonoBehaviour {\n  public const int N = 1000, M = 1500;\n\n  float[,] float2Darray;\n  float[] float1Darray;\n\n  void Start() {\n    float2Darray = new float[N, M];\n    float1Darray = new float[N * M];\n\n    Stopwatch array2DTimer = Stopwatch.StartNew();\n    for (int i = 0; i < N; i++)\n    {\n      for (int j = 0; j < M; j++)\n      {\n        // [i, j] from float 2D array\n        // 0 ≤ i ≤ N - 1\n        // 0 ≤ j ≤ M - 1\n        float2Darray[i, j] = 123.321f;\n      }\n    }\n    array2DTimer.Stop();\n\n    Stopwatch array1DTimer = Stopwatch.StartNew();\n    for (int i = 0; i < N; i++)\n    {\n      for (int j = 0; j < M; j++)\n      {\n        // [i, j] from float 1D array\n        // 0 ≤ i ≤ N - 1\n        // 0 ≤ j ≤ M - 1\n        float1Darray[(i * M) + j] = 123.321f;\n      }\n    }\n    array1DTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"Array 1D time = \" +\n      (\n(double)(array1DTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / (N * M)\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Array 2D time = \" +\n      (\n(double)(array2DTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / (N * M)\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nArray 1D time = 3.24 nanoseconds average per cycle\nArray 2D time = 7.87 nanoseconds average per cycle\n```", "```java\nusing UnityEngine;\nusing System.Diagnostics;\n\npublic class LeveledArray2Dvs1D : MonoBehaviour {\n  public const int N = 1000, M = 1500;\n\n  float[][] float2Darray;\n  float[] float1Darray;\n\n  void Start() {\n    float2Darray = new float[N][];\n    float1Darray = new float[N * M];\n\n    for (int i = 0; i < N; i++)\n    {\n      float2Darray[i] = new float[M];\n    }\n\n    Stopwatch array2DTimer = Stopwatch.StartNew();\n    for (int i = 0; i < N; i++)\n    {\n      for (int j = 0; j < M; j++)\n      {\n        // [i][j] from float 2D array\n        // 0 ≤ i ≤ N - 1\n        // 0 ≤ j ≤ M - 1\n        float2Darray[i][j] = 123.321f;\n      }\n    }\n    array2DTimer.Stop();\n\n    Stopwatch array1DTimer = Stopwatch.StartNew();\n    for (int i = 0; i < N; i++)\n    {\n      for (int j = 0; j < M; j++)\n      {\n        // [i, j] from float 1D array\n        // 0 ≤ i ≤ N - 1\n        // 0 ≤ j ≤ M - 1\n        float1Darray[(i * M) + j] = 123.321f;\n      }\n    }\n    array1DTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"Leveled Array 1D time = \" +\n      (\n(double)(array1DTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / (N * M)\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Leveled Array 2D time = \" +\n      (\n(double)(array2DTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / (N * M)\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nLeveled Array 1D time = 3.23 nanoseconds average per cycle\nLeveled Array 2D time = 3.36 nanoseconds average per cycle\n```", "```java\nusing UnityEngine;\nusing System.Diagnostics;\n\npublic class StringCharArray : MonoBehaviour {\n  public const int LENGTH = 1000;\n\n  string str;\n  char[] charArray;\n\n  void Start() {\n    charArray = new char[LENGTH];\n\n    Stopwatch charArrayTimer = Stopwatch.StartNew();\n    for (int i = 0; i < LENGTH; i++)\n    {\n      charArray[i] = (i % 10).ToString()[0];\n    }\n    charArrayTimer.Stop();\n\n    str = string.Empty;\n    Stopwatch stringTimer = Stopwatch.StartNew();\n    for (int i = 0; i < LENGTH; i++)\n    {\n      str += (i % 10).ToString();\n    }\n    stringTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"String time = \" +\n      (\n(double)(stringTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / LENGTH\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Char Array time = \" +\n      (\n(double)(charArrayTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / LENGTH\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nString time = 1274.00 nanoseconds average per cycle\nChar Array time = 369.00 nanoseconds average per cycle\n```", "```java\nusing UnityEngine;\nusing System.Text;\nusing System.Diagnostics;\n\npublic class StringBuilderCharArray : MonoBehaviour {\n  public const int LENGTH = 1000;\n\n  StringBuilder str;\n  char[] charArray;\n\n  void Start() {\n    charArray = new char[LENGTH];\n\n    Stopwatch charArrayTimer = Stopwatch.StartNew();\n    for (int i = 0; i < LENGTH; i++)\n    {\n      charArray[i] = (i % 10).ToString()[0];\n    }\n    charArrayTimer.Stop();\n\n    str = new StringBuilder();\n    Stopwatch stringBuilderTimer = Stopwatch.StartNew();\n    for (int i = 0; i < LENGTH; i++)\n    {\n      str.Append((i % 10).ToString());\n    }\n    stringBuilderTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"String Builder time = \" +\n      (\n(double)(stringBuilderTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / LENGTH\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Char Array time = \" +\n      (\n(double)(charArrayTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / LENGTH\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nString Builder time = 463.00 nanoseconds average per cycle\nChar Array time = 370.00 nanoseconds average per cycle\n```", "```java\nusing UnityEngine;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n\npublic class ListVsArray : MonoBehaviour {\n  public const int LENGTH = 1000000;\n\n  List<int> intList;\n  int[] intArray;\n\n  int tmpInt;\n\n  void Start() {\n    intList = new List<int>();\n    intArray = new int[LENGTH];\n\n    Stopwatch intArrayTimer = Stopwatch.StartNew();\n    for (int i = 0; i < LENGTH; i++)\n    {\n      intArray[i] = i;\n      tmpInt = intArray[i]++;\n    }\n    intArrayTimer.Stop();\n\n    Stopwatch listTimer = Stopwatch.StartNew();\n    for (int i = 0; i < LENGTH; i++)\n    {\n      intList.Add(i);\n      tmpInt = intList[intList.Count - 1]++;\n    }\n    listTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"Integer List time = \" +\n      (\n(double)(listTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / LENGTH\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Integer Array time = \" +\n      (\n(double)(intArrayTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / LENGTH\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nInteger List time = 36.68 nanoseconds average per cycle\nInteger Array time = 5.54 nanoseconds average per cycle\n```", "```java\nusing UnityEngine;\nusing System.Collections;\nusing System.Diagnostics;\n\npublic class ArrayListVsArray : MonoBehaviour {\n  public const int LENGTH = 1000000;\n\n  ArrayList intArrayList;\n  int[] intArray;\n\n  int tmpInt;\n\n  void Start() {\n    intArrayList = new ArrayList();\n    intArray = new int[LENGTH];\n\n    Stopwatch intArrayTimer = Stopwatch.StartNew();\n    for (int i = 0; i < LENGTH; i++)\n    {\n      intArray[i] = i;\n      tmpInt = intArray[i] + 23;\n    }\n    intArrayTimer.Stop();\n\n    Stopwatch arrayListTimer = Stopwatch.StartNew();\n    for (int i = 0; i < LENGTH; i++)\n    {\n      intArrayList.Add(i);\n      tmpInt = (int)intArrayList[intArrayList.Count - 1] + 23;\n    }\n    arrayListTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"Integer Array List time = \" +\n      (\n(double)(arrayListTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / LENGTH\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Integer Array time = \" +\n      (\n(double)(intArrayTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / LENGTH\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nInteger Array List time = 183.36 nanoseconds average per cycle\nInteger Array time = 4.78 nanoseconds average per cycle\n```", "```java\nusing UnityEngine;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n\npublic class DictionaryVsArray : MonoBehaviour {\n  public const int CYCLES = 1000000;\n\n  Dictionary<int, int> dictionary;\n  int[] intArray;\n\n  int tmpInt;\n\n  void Start() {\n    dictionary = new Dictionary<int, int>();\n    intArray = new int[CYCLES];\n\n    Stopwatch intArrayTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES; i++)\n    {\n      intArray[i] = i + 117;\n      tmpInt = intArray[i] + 23;\n    }\n    intArrayTimer.Stop();\n\n    Stopwatch dictionaryTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES; i++)\n    {\n      dictionary.Add(i, i + 117);\n      tmpInt = (int)dictionary[dictionary.Count - 1] + 23;\n    }\n    dictionaryTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"Integer Dictionary time = \" +\n      (\n(double)(dictionaryTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Integer Array time = \" +\n      (\n(double)(intArrayTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nInteger Dictionary time = 132.75 nanoseconds average per cycle\nInteger Array time = 4.63 nanoseconds average per cycle\n```", "```java\nusing UnityEngine;\nusing System.Collections;\nusing System.Diagnostics;\n\npublic class HashtableVsArray : MonoBehaviour {\n  public const int CYCLES = 1000000;\n\n  Hashtable hashtable;\n  int[] intArray;\n\n  int tmpInt;\n\n  void Start() {\n    hashtable = new Hashtable();\n    intArray = new int[CYCLES];\n\n    Stopwatch intArrayTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES; i++)\n    {\n      intArray[i] = i + 117;\n      tmpInt = intArray[i] + 23;\n    }\n    intArrayTimer.Stop();\n\n    Stopwatch hashtableTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES; i++)\n    {\n      hashtable.Add(i, i + 117);\n      tmpInt = (int)hashtable[hashtable.Count - 1] + 23;\n    }\n    hashtableTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"Integer Hashtable time = \" +\n      (\n(double)(hashtableTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Integer Array time = \" +\n      (\n(double)(intArrayTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nInteger Hashtable time = 539.59 nanoseconds average per cycle\nInteger Array time = 4.52 nanoseconds average per cycle\n```", "```java\nusing UnityEngine;\nusing System.Diagnostics;\n\npublic class LoopsTest : MonoBehaviour {\n  public const int CYCLES = 1000000;\n\n  int [] tmpInt;\n  int i, _optimizedCycles;\n\n  void Start() {\n    tmpInt = new int[CYCLES];\n\n    Stopwatch doWhileLoopTimer = Stopwatch.StartNew();\n    i = 0;\n    do\n    {\n      // do while loop test\n      tmpInt[i] = i + 123;\n      i++;\n    } while (i < CYCLES);\n    doWhileLoopTimer.Stop();\n\n    Stopwatch whileLoopTimer = Stopwatch.StartNew();\n    i = 0;\n    while (i < CYCLES)\n    {\n      // while loop test\n      tmpInt[i] = i + 123;\n      i++;\n    }\n    whileLoopTimer.Stop();\n\n    Stopwatch forLoopTimer = Stopwatch.StartNew();\n    for (i = 0; i < CYCLES; i++)\n    {\n      // for loop test\n      tmpInt[i] = i + 123;\n    }\n    forLoopTimer.Stop();\n\n    _optimizedCycles = Mathf.CeilToInt(CYCLES / 5);\n    Stopwatch optimizedTimer = Stopwatch.StartNew();\n    for (i = 0; i < _optimizedCycles; i++)\n    {\n      // optimized for loop test\n      tmpInt[i*5] = i*5 + 123;\n      if (CYCLES > i*5+1) tmpInt[i*5+1] = i*5 + 124;\n      if (CYCLES > i*5+2) tmpInt[i*5+2] = i*5 + 125;\n      if (CYCLES > i*5+3) tmpInt[i*5+3] = i*5 + 126;\n      if (CYCLES > i*5+4) tmpInt[i*5+4] = i*5 + 127;\n    }\n    optimizedTimer.Stop();\n\n    Stopwatch foreachTimer = Stopwatch.StartNew();\n    i = tmpInt.Length - 1;\n    foreach (int intElement in tmpInt)\n    {\n      // foreach test\n      tmpInt[i] = intElement;\n      i--;\n    }\n    foreachTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"Optimized For loop time = \" +\n      (\n(double)(optimizedTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"For loop time = \" +\n      (\n(double)(forLoopTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"While loop time = \" +\n      (\n(double)(whileLoopTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Do While loop time = \" +\n      (\n(double)(doWhileLoopTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Foreach time = \" +\n      (\n(double)(foreachTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nOptimized For loop time = 2.89 nanoseconds average per cycle\nFor loop time = 3.63 nanoseconds average per cycle\nWhile loop time = 3.72 nanoseconds average per cycle\nDo While loop time = 3.72 nanoseconds average per cycle\nForeach time = 5.62 nanoseconds average per cycle\n```", "```java\nforeach (YourType yt in yourCollection) \n{\n  yt.YourAction();\n}\n```", "```java\nusing (YourType.Enumerator e = this.yourCollection.GetEnumerator()) \n{\n  while (e.MoveNext())\n  {\n    YourType yt = (YourType)e.Current;\n    yt.YourAction();\n  }\n}\n```", "```java\nusing UnityEngine;\nusing System.Diagnostics;\n\npublic class IntegerToStringTest : MonoBehaviour {\n  public const int CYCLES = 1000;\n\n  string str;\n\n  void Start() {\n    str = \"\";\n    Stopwatch toStringTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES; i++)\n    {\n      str += i.ToString();\n    }\n    toStringTimer.Stop();\n\n    str = \"\";\n    Stopwatch optimizedToStringTimer = Stopwatch.StartNew();\n    for (int i = 0; i < CYCLES; i++)\n    {\n      str += string.Empty + i;\n    }\n    optimizedToStringTimer.Stop();\n\n    UnityEngine.Debug.Log(\n      \"ToString time = \" +\n      (\n(double)(toStringTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n\n    UnityEngine.Debug.Log(\n      \"Optimized ToString time = \" +\n      (\n(double)(optimizedToStringTimer.Elapsed.TotalMilliseconds * 1000 * 1000) / CYCLES\n      ).ToString(\"0.00 nanoseconds average per cycle\")\n    );\n  }\n}\n```", "```java\nToString time = 18229.00 nanoseconds average per cycle\nOptimized ToString time = 13576.00 nanoseconds average per cycle\n```", "```java\n// private variables are invisible in Unity Inspector\nprivate var length : float = 2.9;\n\n// visible in Unity Inspector\nvar title : String = \"Title\";\n\n// visible in Unity Inspector\nvar isLoop : boolean = false;\n```", "```java\n// public variables are visible in Unity Inspector\npublic float length = 2.9f;\n\n// is invisible in Unity Inspector\nstring title = \"Title\";\n\n// is invisible in Unity Inspector\nprivate bool isLoop = false;\n```", "```java\nvar length : float = 0.08; // variable with float type\nvar number : int = length; // converting float to integer\nprint(number); // prints \"0\" in Unity console\n```", "```java\nfloat length = 0.08f; // variable with float type\nint number = (int)length; // converting float to integer\nDebug.Log(number); // prints \"0\" in Unity console\n```", "```java\n// Unity JS Function\nfunction YourFunctionName (yourStringVarName : String) {\n    print(yourStringVarName);\n}\n\n// Unity C# Function\npublic void YourFunctionName (string yourStringVarName) {\n    Debug.Log(yourStringVarName);\n}\n```", "```java\nfunction JSReturnString() {\n    return \"Hello World !\";\n}\n```", "```java\npublic string CSharpReturnString() {\n    return \"Hello World !\";\n}\n```", "```java\nfunction Start() {\n    yield YourFunc();\n    yield new WaitForSeconds(1.7);\n    print(\"[Start] FINISH\");\n}\n\nfunction YourFunc() {\n    print(\"[YourFunc] START\");\n    yield new WaitForSeconds(0.8);\n    print(\"[YourFunc] FINISH\");\n}\n\n//Output will be similar as shown below:\n// [YourFunc] START\n// [YourFunc] FINISH\n// [Start] FINISH\n```", "```java\nIEnumerator Start() { \n    yield return StartCoroutine(YourMethod());\n    yield return new WaitForSeconds(1.7f);\n    Debug.Log(\"[Start] FINISH\");\n}\n\nIEnumerator YourMethod() {\n    Debug.Log(\"[YourMethod] START\");\n    yield return new WaitForSeconds(0.8f);\n    Debug.Log(\"[YourMethod] FINISH\");\n}\n\n//Output will be similar as shown below:\n// [YourMethod] START\n// [YourMethod] FINISH\n// [Start] FINISH\n```", "```java\n// Unity JS example\n@script AddComponentMenu (\"Your Company Name/Your Action Name\")\nclass YourFunctionName extends MonoBehaviour {}\n\n// Unity C# example\n[AddComponentMenu(\"Your Scope Name/Your Action Name\")]\npublic class YourMethodName : MonoBehaviour {}\n```"]