- en: '*Chapter 6*: Handling Flow Cancelations and Exceptions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 6 章*：处理 Flow 取消和异常'
- en: In the previous chapter, we focused on Kotlin Flows and learned how we can use
    them in our Android projects. We learned about creating Kotlin Flows with Flow
    builders. We then explored Flow operators and how to use them with Kotlin Flows.
    We then learned about buffering and combining Flows. Finally, we explored `SharedFlow`
    and `StateFlow`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们专注于 Kotlin Flows，并学习了如何在我们的 Android 项目中使用它们。我们学习了如何使用 Flow builders
    创建 Kotlin Flows。然后，我们探讨了 Flow operators 以及如何与 Kotlin Flows 一起使用它们。接着，我们学习了缓冲和组合
    Flows。最后，我们探讨了 `SharedFlow` 和 `StateFlow`。
- en: Flows can be canceled, and they can fail or encounter exceptions. Developers
    must be able to handle these properly to prevent application crashes and to inform
    their users with a dialog or a toast message. We will discuss how to do these
    tasks in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Flows 可以被取消，也可能失败或遇到异常。开发者必须能够正确处理这些问题，以防止应用程序崩溃，并通过对话框或吐司消息通知用户。我们将在本章中讨论如何完成这些任务。
- en: In this chapter, we will start by understanding Flow cancelation. We will learn
    how to cancel Flows and handle cancelations for our Flows. Then, we will learn
    how to manage failures and exceptions that can happen in our Flows. We will also
    learn about retrying and handling Flow completion.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先理解 Flow 取消。我们将学习如何取消 Flows 并处理 Flows 的取消。然后，我们将学习如何管理 Flows 中可能发生的失败和异常。我们还将学习关于重试和处理
    Flow 完成的情况。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Canceling Kotlin Flows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消 Kotlin Flows
- en: Retrying tasks with Flow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Flow 重试任务
- en: Catching exceptions in Flows
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Flows 中捕获异常
- en: Handling flow completion
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理流完成
- en: By the end of this chapter, you will understand how to cancel flows, and will
    have learned how to manage cancelations and how to handle exceptions in flows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解如何取消 Flows，并学习如何管理取消以及如何在 Flows 中处理异常。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need to download and install the latest version of Android Studio.
    You can find the latest version at [https://developer.android.com/studio](https://developer.android.com/studio).
    For an optimal learning experience, a computer with the following specifications
    is recommended:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要下载并安装最新版本的 Android Studio。您可以在[https://developer.android.com/studio](https://developer.android.com/studio)找到最新版本。为了获得最佳学习体验，建议使用以下配置的计算机：
- en: Intel Core i5 or equivalent or higher
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔酷睿 i5 或等效或更高配置
- en: 4 GB RAM minimum
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少 4 GB RAM
- en: 4 GB available space
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少 4 GB 可用空间
- en: The code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter06](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter06)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码示例可以在 GitHub 上找到，地址为 [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter06](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter06)
- en: Canceling Kotlin Flows
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消 Kotlin Flows
- en: In this section, we will start by looking at Kotlin Flow cancelations. Like
    coroutines, Flows can also be canceled manually or automatically.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先探讨 Kotlin Flow 的取消。与协程一样，Flows 也可以手动或自动取消。
- en: In [*Chapter 3*](B17773_03_Epub.xhtml#_idTextAnchor042), *Handling Coroutine
    Cancelations and Exceptions*, we learned about canceling coroutines and that coroutine
    cancellation must be cooperative. As Kotlin Flows are built on top of coroutines,
    Flow follows the cooperative cancellation of coroutines.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 3 章*](B17773_03_Epub.xhtml#_idTextAnchor042)，“处理协程取消和异常”中，我们学习了如何取消协程，以及协程取消必须是合作的。由于
    Kotlin Flows 是建立在协程之上的，Flow 遵循协程的协作取消。
- en: Flows created using the `flow{}` builder are cancellable by default. Each `emit`
    call to send new values to the Flow also calls `ensureActive` internally. This
    checks whether the coroutine is still active, and if not, it will throw `CancellationException`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `flow{}` 构建器创建的 Flows 默认可取消。每次向 Flow 发送新值的 `emit` 调用也会内部调用 `ensureActive`。这会检查协程是否仍然处于活动状态，如果不是，它将抛出
    `CancellationException`。
- en: 'For example, we can use the `flow{}` builder to create a cancellable Flow,
    as shown in the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用 `flow{}` 构建器创建一个可取消的 Flow，如下所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the `fetchMovies` function here, we used the `flow` builder to create the
    Flow of movies returned by `movieRepository.fetchMovies`. This `Flow<Movie>` will
    be a cancellable Flow by default.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里的 `fetchMovies` 函数中，我们使用了 `flow` 构建器来创建由 `movieRepository.fetchMovies` 返回的电影
    Flows。这个 `Flow<Movie>` 默认将是一个可取消的 Flow。
- en: All other Flows, such as ones created using the `asFlow` and `flowOf` Flow builders,
    are not cancellable by default. We must handle the cancellation ourselves. There
    is a `cancellable()` operator we can use on a Flow to make it cancelable. This
    will add an `ensureActive` call on each emission of a new value.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他Flow，如使用`asFlow`和`flowOf` Flow构建器创建的Flow，默认情况下不可取消。我们必须自己处理取消。有一个`cancellable()`操作符可以用于Flow，使其可取消。这将添加一个`ensureActive`调用到每个新值的发射。
- en: 'The following example shows how we can make a Flow cancelable using the `cancellable`
    Flow operator:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了我们如何使用`cancellable` Flow操作符使Flow可取消：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, we used the cancelable operator on the Flow returned by `movieRepository.fetchMovies()`
    to make the resulting Flow cancelable.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了`movieRepository.fetchMovies()`返回的Flow上的可取消操作符，使结果Flow可取消。
- en: In this section, we learned how to cancel Kotlin Flows and how to make sure
    your Flows can be cancellable. In the next section, we will focus on how to retry
    your tasks with Kotlin Flows.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何取消Kotlin Flows以及如何确保你的Flows可取消。在下一节中，我们将关注如何使用Kotlin Flows重试你的任务。
- en: Retrying tasks with Flow
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flow重试任务
- en: In this section, we will explore Kotlin Flow retrying. There are cases when
    retrying an operation is needed for your application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨Kotlin Flow的重试。在某些情况下，重试操作对于你的应用程序是必要的。
- en: When performing long-running tasks, such as a network call, sometimes it is
    necessary to try the call again. This includes cases such as logging in/out, posting
    data, or even fetching data. The user may be in an area with a low internet connection,
    or there may be other factors why the call is failing. With Kotlin Flows, we have
    the `retry` and `retryWhen` operators that we can use to retry Flows automatically.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行长时间运行的任务，如网络调用时，有时需要再次尝试调用。这包括登录/注销、发布数据，甚至获取数据的情况。用户可能处于网络连接低下的区域，或者可能存在其他导致调用失败的因素。使用Kotlin
    Flows，我们有`retry`和`retryWhen`操作符，可以用来自动重试Flows。
- en: The `retry` operator allows you to set a `retries` as the maximum number of
    times the Flow will retry. You can also set a `predicate` condition, a code block
    that will retry the Flow when it returns `true`. The predicate has a **Throwable**
    parameter representing the exception that occurred; you can use that to check
    whether you want to do the retry or not.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`retry`操作符允许你设置`retries`作为Flow重试的最大次数。你也可以设置一个`predicate`条件，一个当返回`true`时将重试Flow的代码块。`predicate`有一个**Throwable**参数，代表发生的异常；你可以使用它来检查是否需要进行重试。'
- en: 'The following example shows how we can use the `retry` Flow operator to retry
    our tasks in our Flow:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了我们如何使用`retry` Flow操作符来重试我们的Flow中的任务：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, the Flow from `movieRepository.favoriteMovie(id)` will be retried up to
    three times when the exception encountered is `IOException`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当遇到`IOException`异常时，`movieRepository.favoriteMovie(id)`的Flow将会重试最多三次。
- en: If you do not pass a value for the retries, the default of `Long.MAX_VALUE`
    will be used. `predicate,` when not provided, has a default value of `true`, meaning
    the Flow will always be retried if `retries` has not yet been reached.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有为重试传递值，将使用默认值`Long.MAX_VALUE`。当未提供`predicate`时，默认值为`true`，这意味着如果尚未达到`retries`，Flow将始终重试。
- en: 'The `retryWhen` operator is similar to the `retry` operator. We need to specify
    `predicate`, which is the condition and only when `true` will it perform the retry.
    `predicate` has a `true`, will retry the Flow. The following code shows an example
    of using `retryWhen` to retry your tasks in your Flow:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`retryWhen`操作符类似于`retry`操作符。我们需要指定`predicate`，这是条件，只有当`true`时才会执行重试。`predicate`有`true`，将重试Flow。以下代码展示了使用`retryWhen`在Flow中重试任务的示例：'
- en: '[PRE20]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this example, we used `retryWhen` and specified that the retry will be done
    when the value of `attempt` is less than three and only if the exception is `IOException`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了`retryWhen`并指定了当`attempt`的值小于三且异常为`IOException`时进行重试。
- en: 'With the `retryWhen` operator, we can also emit a value to the Flow (with the
    `emit` function), which we can use to represent the retry attempt or a value.
    We can then display this value on the screen or process it. The following example
    shows how we can use `emit` with the `retryWhen` operator:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`retryWhen`操作符，我们还可以向Flow（使用`emit`函数）发出一个值，我们可以使用它来表示重试尝试或一个值。然后我们可以显示这个值或在屏幕上处理它。以下示例展示了我们如何使用`emit`与`retryWhen`操作符：
- en: '[PRE27]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Here, the Flow’s task will be retried when the number of attempts is less than
    three and only if the exception is `Fetching title again` string that can be processed
    by the activity or fragment that listens to the Flow returned by `MovieViewModel.getTopMovieTitle()`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当尝试次数少于三次时，如果异常是活动或片段可以处理的`Fetching title again`字符串，那么Flow的任务将会重试。
- en: In this section, you learned about retrying tasks such as network requests with
    Kotlin Flow. We will explore Kotlin Flow exceptions and how to update our code
    to catch these exceptions in the next section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何使用Kotlin Flow重试网络请求等任务。在下一节中，我们将探讨Kotlin Flow异常以及如何更新我们的代码来捕获这些异常。
- en: Catching exceptions in Flows
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流中的异常捕获
- en: The Flows in your code can encounter `CancellationException` when they are canceled
    or other exceptions when emitting or collecting values. In this section, we will
    learn how to handle these Kotlin Flow exceptions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的代码中的Flow被取消或收集值时，可能会遇到`CancellationException`或其他异常。在本节中，我们将学习如何处理这些Kotlin
    Flow异常。
- en: 'Exceptions can happen in Flows during the collection of values or when using
    any operators on a Flow. We can handle exceptions in Flows by enclosing the collection
    of the Flow in our code with a `try-catch` block. For example, in the following
    code, the `try-catch` block is used to add exception handling:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集值或使用Flow上的任何操作符时，Flows可能会发生异常。我们可以通过在代码中将Flow的收集用`try-catch`块包围来处理Flows中的异常。例如，在以下代码中，`try-catch`块被用来添加异常处理：
- en: '[PRE37]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here, the collection code for the Flow returned by `viewModel.fetchMovies` was
    wrapped in a `try-catch` block. If an exception was encountered in the Flow, the
    exception message will be logged with the `Error` tag and `exception.message`
    as the message.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`viewModel.fetchMovies`返回的Flow的收集代码被包裹在一个`try-catch`块中。如果在Flow中遇到异常，异常消息将使用`Error`标签和`exception.message`作为消息进行记录。
- en: We can also use the `catch` Flow operator to handle exceptions in our Flow.
    With the `catch` operator, we can catch the exceptions from the upstream Flow,
    or the function and operators before the `catch` operator was called.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`catch` Flow操作符来处理我们的Flow中的异常。使用`catch`操作符，我们可以捕获来自上游Flow的异常，或者是在调用`catch`操作符之前的功能和操作符。
- en: 'In the following example, the `catch` operator was used to catch exceptions
    from the Flow returned by `viewModel.fetchMovies`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`catch`操作符被用来捕获`viewModel.fetchMovies`返回的Flow中的异常：
- en: '[PRE54]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Here, the `catch` operator was used in the Flow to catch the exceptions. The
    exception, which is an instance of `handleException` function that is going to
    handle the exception.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`catch`操作符被用于Flow中捕获异常。该异常是一个将要处理异常的`handleException`函数的实例。
- en: 'We can also use the `catch` operator to emit a new value to represent the error
    or for use as a fallback value instead, such as an empty list. In the following
    example, a default string value of `No Movie Fetched` will be used when an exception
    occurs in the Flow that returns the title of the top movie:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`catch`操作符来发出一个新值来表示错误或用作备用值，例如一个空列表。在以下示例中，当Flow返回顶级电影标题时发生异常，将使用默认字符串值`No
    Movie Fetched`：
- en: '[PRE68]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: In this example, we used the `catch` operator to emit the `No Movie Fetched`
    string when an exception occurs in getting the top movie title from `ViewModel`.
    This will be the value that will be used in the `displayTitle()` call.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用`catch`操作符在从`ViewModel`获取顶级电影标题时发生异常时发出`No Movie Fetched`字符串。这将是在`displayTitle()`调用中使用的值。
- en: As the `catch` operator only handles exceptions in the upstream Flow, an exception
    that happens during the `collect{}` call won’t be caught. While you can use the
    `try-catch` block to handle these exceptions, you can also move the collection
    code to an `onEach` operator, add the `catch` operator after it, and use `collect()`
    to start the collection.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`catch`操作符仅处理上游Flow中的异常，因此在`collect{}`调用期间发生的异常不会被捕获。虽然你可以使用`try-catch`块来处理这些异常，但你也可以将收集代码移动到`onEach`操作符中，在其后添加`catch`操作符，并使用`collect()`来开始收集。
- en: 'The following example shows how your code can look when using an `onEach` operator
    for the collection of values and the `catch` operator for handling exceptions:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了当使用`onEach`操作符进行值收集和`catch`操作符处理异常时，你的代码可能看起来像什么：
- en: '[PRE81]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Here, the `collect()` function without parameters was used, and the `onEach`
    operator will process each movie from the Flow.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，使用了不带参数的`collect()`函数，`onEach`操作符将处理Flow中的每一部电影。
- en: In this section, we learned how to catch exceptions in Flows. In the following
    section, we will focus on Kotlin Flow completion.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何在 Flows 中捕获异常。在下一节中，我们将重点关注 Kotlin Flow 的完成。
- en: Handling Flow completion
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 Flow 完成
- en: In this section, we will explore how to handle Flow completion. We can add code
    to perform additional tasks after our Flows have completed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何处理 Flow 的完成。我们可以在我们的 Flows 完成后添加代码来执行额外的任务。
- en: When the Flow encounters an exception, it will be canceled and complete the
    Flow. A Flow is also completed when the last element of the Flow has been emitted.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Flow 遇到异常时，它将被取消并完成 Flow。当 Flow 的最后一个元素被发出时，Flow 也会完成。
- en: 'To add a listener in your Flow when it has completed, you can use the `onCompletion`
    operator and add the code block that will be run when the Flow completes. A common
    usage of `onCompletion` is hiding the **ProgressBar** in your UI when the Flow
    has completed, as shown in the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Flow 完成时在你的 Flow 中添加监听器，你可以使用 `onCompletion` 操作符并添加当 Flow 完成时将运行的代码块。`onCompletion`
    的一个常见用法是在 Flow 完成时隐藏你的 UI 中的 **ProgressBar**，如下面的代码所示：
- en: '[PRE96]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: In this example, we have added the `onCompletion` operator to hide `progressBar`
    when the Flow has completed. We have also used `onStart` to display `progressBar`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们向 Flow 中添加了 `onCompletion` 操作符来在 Flow 完成时隐藏 `progressBar`。我们还使用了 `onStart`
    来显示 `progressBar`。
- en: The `onStart` operator is the opposite of `onCompletion`. It will be called
    before the Flow starts emitting values. In the previous example, `onStart` was
    used so that before the Flow starts, `progressBar` will be displayed on the screen.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`onStart` 操作符是 `onCompletion` 的对立面。它将在 Flow 开始发出值之前被调用。在之前的示例中，使用了 `onStart`
    以确保在 Flow 开始之前，`progressBar` 将显示在屏幕上。'
- en: 'Within the code block you add in `onStart` and `onCompletion` (if the Flow
    completed successfully and without exception), you can also emit values, such
    as an initial and final value. In the following example, an `onStart` operator
    is used to emit an initial value to be displayed on the screen:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在你添加到 `onStart` 和 `onCompletion`（如果 Flow 成功完成且没有异常）的代码块中，你也可以发出值，例如初始值和最终值。在以下示例中，使用了
    `onStart` 操作符来发出一个初始值，该值将在屏幕上显示：
- en: '[PRE114]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Here, `onStart` is used to listen to when the Flow starts. When the Flow starts,
    it will emit a `Loading…` string as the initial value of the Flow. This will then
    be the first item that will be displayed on the screen.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`onStart` 用于监听 Flow 开始时的情况。当 Flow 开始时，它将发出一个 `Loading…` 字符串作为 Flow 的初始值。这将随后成为屏幕上显示的第一个条目。
- en: The `onCompletion` code block also has a nullable `catch`, the exception itself
    will not be handled, so you still need to use `catch` or `try-catch` to handle
    this exception.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCompletion` 代码块还有一个可空的 `catch`，异常本身不会被处理，所以你仍然需要使用 `catch` 或 `try-catch`
    来处理这个异常。'
- en: 'The following example shows how we can use this nullable `onCompletion` call:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了我们可以如何使用这个可空的 `onCompletion` 调用：
- en: '[PRE128]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: In this example, we checked the cause in the `onCompletion` block, and if it’s
    not null (which means an exception was encountered), `displayError` will be called
    and the cause passed to it.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在 `onCompletion` 块中检查了原因，如果它不为空（这意味着遇到了异常），则将调用 `displayError` 并将原因传递给它。
- en: In this section, we learned about `onStart` and `onCompletion` to handle when
    Flows start and when they are completed.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用 `onStart` 和 `onCompletion` 来处理 Flows 开始和完成的情况。
- en: Let’s try what you have learned by adding code to handle exceptions that can
    occur in Flows in an Android project.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将你所学到的知识应用到在 Android 项目中处理 Flows 可能发生的异常的代码中。
- en: Exercise 6.01 – Handling Flow exception in an Android app
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 6.01 – 在 Android 应用中处理 Flow 异常
- en: 'In this exercise, you will be continuing with the movie app you worked on in
    *Exercise 5.01 – Using Kotlin Flow in an Android app*. This application displays
    the movies that are playing now in movie theaters. You will be updating the project
    to handle Flow cancelations and exceptions by following these steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将继续使用你在 *练习 5.01 – 在 Android 应用中使用 Kotlin Flow* 中工作的电影应用。这个应用显示正在电影院上映的电影。你将通过以下步骤更新项目以处理
    Flow 取消和异常：
- en: In Android Studio, open the movie app you worked on in *Exercise 5.01 – Using
    Kotlin Flow in an Android app*.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android Studio 中，打开你在 *练习 5.01 – 在 Android 应用中使用 Kotlin Flow* 中工作的电影应用。
- en: 'Go to the `MovieViewModel` class. In the `fetchMovies` function, remove the
    line that sets the value of `_loading` to `true`. Your function will look like
    the following:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `MovieViewModel` 类。在 `fetchMovies` 函数中，删除设置 `_loading` 值为 `true` 的行。你的函数将看起来像以下这样：
- en: '[PRE145]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: You removed the code that sets `loading` to `true` (and displays `ProgressBar`
    on the screen). It will be replaced in the next step with an `onStart` Flow operator.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您已移除设置 `loading` 为 `true`（并在屏幕上显示 `ProgressBar`）的代码。它将在下一步被 `onStart` Flow 操作符所替代。
- en: 'Add an `onStart` operator before the `collect` call, which will set the value
    of `_loading` to `true` when the Flow starts, as shown in the following:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `collect` 调用之前添加一个 `onStart` 操作符，当 Flow 开始时，它将 `_loading` 的值设置为 `true`，如下所示：
- en: '[PRE146]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: The `onStart` operator will set the value of `_loading` to `true` and display
    `ProgressBar` on the screen when the Flow starts.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`onStart` 操作符将在 Flow 开始时将 `_loading` 的值设置为 `true` 并在屏幕上显示 `ProgressBar`。'
- en: 'Next, remove the line that sets the value of `_loading` to `false` in the code
    block inside the `collect` call. Your function will look like the following:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从 `collect` 调用内部的代码块中移除设置 `_loading` 为 `false` 的行。您的函数将如下所示：
- en: '[PRE147]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: You removed the code that sets the value of `_loading` to `false` and hides
    `ProgressBar` on the screen when the Flow is collected.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您已移除在 Flow 收集时将 `_loading` 的值设置为 `false` 并在屏幕上隐藏 `ProgressBar` 的代码。
- en: 'Add an `onCompletion` operator before the `collect` call, which will set the
    value of `_loading` to `false` when the Flow has completed, as shown in the following:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `collect` 调用之前添加一个 `onCompletion` 操作符，当 Flow 完成时，它将 `_loading` 的值设置为 `false`，如下所示：
- en: '[PRE148]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: The `onCompletion` Flow operator will set the value of `_loading` to `false`.
    This will then hide, upon completion of the Flow, `ProgressBar`, which is displayed
    on the screen while the movies are being fetched.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCompletion` Flow 操作符将 `_loading` 的值设置为 `false`。这将隐藏屏幕上显示的 `ProgressBar`，在获取电影时显示。'
- en: 'Add a `catch` operator before the `collect` function to handle the case when
    the Flow has encountered an exception:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `collect` 函数之前添加一个 `catch` 操作符，以处理 Flow 遇到异常的情况：
- en: '[PRE149]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: This will set a string containing `An exception occurred:` and the exception
    message as the value of the `_error` LiveData. This `_error` LiveData will display
    an error message in `MainActivity`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置一个包含 `An exception occurred:` 和异常信息的字符串，并将其作为 `_error` LiveData 的值。这个 `_error`
    LiveData 将在 `MainActivity` 中显示错误信息。
- en: 'On your device or emulator, turn off the Wi-Fi and mobile data. Then, run the
    app. This will cause an error in fetching the movies, as there is no internet
    connection. The app will display a `SnackBar` message, as shown in the following
    screenshot:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的设备或模拟器上关闭 Wi-Fi 和移动数据。然后运行应用程序。这将导致获取电影时出现错误，因为没有互联网连接。应用程序将显示一个 `SnackBar`
    消息，如下面的截图所示：
- en: '![Figure 6.1 – The error message displayed in the movie app'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.1 – 电影应用中显示的错误信息'
- en: '](img/Figure_6.1_B17773_new.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.1_B17773_new.jpg]'
- en: Figure 6.1 – The error message displayed in the movie app
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 电影应用中显示的错误信息
- en: 'Close the application and turn on the Wi-Fi and/or mobile data on your device
    or emulator. Run the application again. The app should show `ProgressBar`, display
    a list of movies (with the movie title and poster) on the screen, and hide `ProgressBar`,
    as shown in the following screenshot:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭应用程序，并在您的设备或模拟器上开启 Wi-Fi 和/或移动数据。再次运行应用程序。应用程序应显示 `ProgressBar`，在屏幕上显示电影列表（包括电影标题和海报），并在完成后隐藏
    `ProgressBar`，如下面的截图所示：
- en: '![Figure 6.2 – The movie app with the list of movies'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.2 – 包含电影列表的电影应用'
- en: '](img/Figure_6.2_B17773.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.2_B17773.jpg]'
- en: Figure 6.2 – The movie app with the list of movies
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 包含电影列表的电影应用
- en: In this exercise, you have updated the application so that it can handle exceptions
    in the Flow instead of crashing.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已更新应用程序，使其能够处理 Flow 中的异常而不是崩溃。
- en: Summary
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on Kotlin Flow cancelations. You learned that Flows follow
    the cooperative cancellation of coroutines. The `flow{}` builder and `StateFlow`
    and `SharedFlow` implementations are cancellable by default. You can use the `cancellable`
    operator to make other Flows cancellable.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了 Kotlin Flow 的取消操作。您了解到 Flows 遵循协程的协作取消。`flow{}` 构建器和 `StateFlow` 以及
    `SharedFlow` 实现默认可取消。您可以使用 `cancellable` 操作符使其他 Flows 可取消。
- en: We then learned about retrying tasks with Kotlin Flow. You can use the `retry`
    and `retryWhen` functions to retry the Flow based on the number of attempts and
    the exception encountered by the Flow.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着学习了使用 Kotlin Flow 重试任务。您可以使用 `retry` 和 `retryWhen` 函数根据尝试次数和 Flow 遇到的异常来重试
    Flow。
- en: Then, we learned about handling exceptions that can happen during the emission
    or collection of data in a Flow. You can use the `try-catch` block or the `catch`
    Flow operator to handle Flow exceptions.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了在Flow中的数据发射或收集过程中可能发生的异常处理。你可以使用`try-catch`块或`catch` Flow操作符来处理Flow异常。
- en: We learned how to handle Flow completion. With the `onStart` and `onCompletion`
    operators, you can listen and run code when Flows start and when they have finished.
    You can also emit values with the `onStart` and `onCompletion` code blocks, such
    as when you want to set an initial and final value for the Flow.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何处理Flow的完成。使用`onStart`和`onCompletion`操作符，你可以在Flows开始和结束时监听并运行代码。你还可以使用`onStart`和`onCompletion`代码块来发射值，例如当你想要为Flow设置初始值和最终值时。
- en: Finally, we worked on an exercise to update our Android project and handle the
    exceptions that can be encountered in a Flow. We used the `catch` Flow operator
    to handle exceptions in the project.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们进行了一个练习来更新我们的Android项目并处理在Flow中可能遇到的异常。我们使用了`catch` Flow操作符来处理项目中的异常。
- en: In the next chapter, we will dive into creating and running tests for the Kotlin
    Flows in our Android projects.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨在Android项目中创建和运行Kotlin Flows的测试。
