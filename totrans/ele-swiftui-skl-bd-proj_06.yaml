- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Mac Project – App Store Bars
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mac项目 – 应用商店侧边栏
- en: 'In the previous four chapters, we created a tax calculator app for the iPhone
    and a photo gallery app for the iPad. We implemented them from scratch, looking
    at the technical requirements, design specifications, wireframes, and code implementation.
    We will use the skills covered in this and the next chapter to create the App
    Store sidebar, but worry not: we will go over all necessary aspects in case you
    have jumped straight to this chapter.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前四章中，我们为iPhone创建了一个税务计算器应用程序，为iPad创建了一个照片画廊应用程序。我们从零开始实现它们，考虑了技术要求、设计规范、线框和代码实现。我们将使用本章和下一章中涵盖的技能来创建应用商店侧边栏，但请放心：我们将回顾所有必要的方面，以防你直接跳到本章。
- en: In this chapter, we will work on the design of our third project, an App Store
    application for the Mac that will showcase its big screen, which also stays in
    one orientation. We will assess the requirements for designing such an application
    and discuss the design specifications, allowing us to get a better understanding
    of what is required and how it will all fit together. Then, we will start our
    application's coding process to build the sidebars in this chapter, and the next
    chapter will cover the main body of the App Store app. This project will cover
    the foundations of SwiftUI components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将着手设计我们的第三个项目，一个展示其大屏幕且保持单一方向的Mac应用商店应用程序。我们将评估设计此类应用程序的要求，并讨论设计规范，以便我们更好地理解所需内容以及如何将这些内容整合在一起。然后，我们将开始本章应用程序的编码过程，构建侧边栏，下一章将涵盖应用商店应用程序的主体。本项目将涵盖SwiftUI组件的基础。
- en: 'This chapter covers the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主要主题：
- en: Understanding the Design Specifications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解设计规范
- en: Acceptance Criteria
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可接受标准
- en: Building the Sidebar UIs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建侧边栏UI
- en: By the end of this chapter, you will have a better understanding of the design
    of our application and what is required, along with a skeleton user interface
    that will be used as the foundation for making the gallery work in the next chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将更好地理解我们应用程序的设计和所需内容，以及一个将作为下一章中画廊工作基础的骨架用户界面。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store. To install Xcode, just search for Xcode in the App Store, then select
    and download the latest version. Open Xcode and follow any additional installation
    instructions. Once Xcode has opened and launched, you’re ready to go.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求你从Apple的应用商店下载Xcode 14或更高版本。要在应用商店中安装Xcode，只需在应用商店中搜索Xcode，然后选择并下载最新版本。打开Xcode并遵循任何额外的安装说明。一旦Xcode打开并启动，你就可以开始了。
- en: 'Version 14 of Xcode has the following features/requirements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 14版本具有以下功能/要求：
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含iOS 16、iPadOS 16、macOS 12.3、tvOS 16和watchOS 9的SDK
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持iOS 11或更高版本、tvOS 11或更高版本和watchOS 4或更高版本的设备调试
- en: Requires a Mac running macOS Monterey 12.5 or later
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要运行macOS Monterey 12.5或更高版本的Mac
- en: For further information regarding technical details, please refer to [*Chapter
    1*](B18783_01.xhtml#_idTextAnchor014).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如需有关技术细节的更多信息，请参阅[*第1章*](B18783_01.xhtml#_idTextAnchor014)。
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可在此处找到：[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将提供关于我们应用程序设计规范的清晰说明，并查看应用程序的外观原型。
- en: Understanding the Design Specifications
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解设计规范
- en: In this section, we will look at the design specifications of our App Store
    application and describe the features we are going to implement in it. The best
    method for figuring out the features required is to put yourself in the user’s
    shoes to determine how they will use the app, then break it into individual steps.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看我们应用商店应用程序的设计规范，并描述我们将要实现的功能。确定所需功能的最有效方法是站在用户的角度，确定他们将如何使用应用程序，然后将其分解为单独的步骤。
- en: 'There can be many features of our app, and they are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序可能有许多功能，如下所示：
- en: Sidebar – for different sections of the app.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边栏 – 用于应用程序的不同部分。
- en: Highlight banner – showcasing an app of the day.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出横幅 - 展示每日应用。
- en: Featured tiles – showcasing lesser apps or more specific category applications.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特色瓷砖 - 展示较少的应用或更具体的类别应用。
- en: New apps and updates section.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新应用和更新部分。
- en: Search – the ability to search the whole collection for a specific app
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索 - 能够在整个集合中搜索特定应用。
- en: Account management.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户管理。
- en: App reviewing.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用审查。
- en: App reporting.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用报告。
- en: App page – showing information such as description and date for a selected app,
    similar to the `EnhancedView` from the photo gallery application we created previously.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用页面 - 显示所选应用的描述和日期等信息，类似于我们之前创建的相册应用中的`EnhancedView`。
- en: App images and information from an external source such as a local database
    or online.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自外部源的应用图像和信息，例如本地数据库或在线。
- en: Sharing – the ability to share an image.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分享 - 能够分享图片。
- en: Creating favorite/download later lists.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建收藏/稍后下载列表。
- en: 'Now that we have listed the ideal features we would like, next, it is important
    for us to determine which features are absolutely crucial. To do this, we must
    understand the end use of our product. For me, the purpose of creating this App
    Store application is to showcase a sidebar and how it integrates with the main
    body. We will not be implementing an app page because it is very similar to the
    photo gallery’s `EnhancedView`, which will be set as an extra task, and you can
    use the previous two chapters for assistance. Based on that, I know that not all
    the features are required, and some would be useful if omitted and assigned as
    extra tasks for you as the developer to undertake. Therefore, the following are
    the core features we will be implementing:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经列出了我们希望的理想功能，接下来，对我们来说，确定哪些功能是绝对必要的非常重要。为了做到这一点，我们必须了解我们产品的最终用途。对我来说，创建这个应用商店应用的目的在于展示侧边栏及其与主体部分的集成。我们不会实现应用页面，因为它与相册的`EnhancedView`非常相似，这将被设定为一个额外任务，你可以使用前两章的内容作为辅助。基于这一点，我知道并非所有功能都是必需的，有些如果省略并作为额外任务分配给你作为开发者去完成，将会很有用。因此，以下是我们将实施的核心功能：
- en: Sidebar – for different sections of the app.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边栏 - 用于应用的各个部分。
- en: Highlight banner – showcasing an app of the day.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出横幅 - 展示每日应用。
- en: Featured tiles – showcasing lesser apps or more specific category applications.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特色瓷砖 - 展示较少的应用或更具体的类别应用。
- en: New apps and updates section.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新应用和更新部分。
- en: The rest of the features will be an exercise for you once you have completed
    this and the next chapter. The next section will cover the acceptance criteria
    for our application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的功能将在你完成这一章和下一章后成为你的练习。下一节将涵盖我们应用的验收标准。
- en: Understanding the Acceptance criteria
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解验收标准
- en: 'We will discuss the mandatory requirements for our application that we absolutely
    want to see in the end product at the end of the next chapter. If possible, we
    should try to make them measurable, so let’s list them right now:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章的末尾讨论我们应用必须满足的要求，我们绝对希望在最终产品中看到这些要求。如果可能的话，我们应该尝试使它们具有可衡量性，所以现在就让我们列出它们：
- en: Sidebar with text components and an icon next to them for enhanced visual context.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有文本组件及其旁边图标的侧边栏，以增强视觉上下文。
- en: Scrollable main body view to scroll through the applications and highlighted
    applications in the main body.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可滚动的主体视图，用于滚动浏览应用和主体中的突出显示应用。
- en: Highlight banner that will take the full width of its parent container to showcase
    an application.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出横幅将占据其父容器的全部宽度，以展示应用。
- en: Tiles to showcase other specific apps in a category.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示特定类别中其他特定应用的瓷砖。
- en: Images and text displayed for the rest of the apps.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示其余应用的图像和文本。
- en: Develop test cases in which the application’s acceptance criteria will be tested.
    Using this method allows the ability to see the conditions in which the application
    will be used by the end user and the level that needs to be attained for it to
    be considered successful.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 开发测试用例，以测试应用的验收标准。使用这种方法可以让我们看到应用将被最终用户使用的条件以及需要达到的成功水平。
- en: We will develop testing methods to check the acceptance criteria that can be
    tested and ultimately measured. This will allow us to see whether the use cases
    in which the application is to be used will pass.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发测试方法来检查可测试和最终可衡量的验收标准。这将使我们能够看到应用将被用于哪些用例，以及需要达到的水平才能被认为是成功的。
- en: Wireframe design
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线框设计
- en: 'One of the most useful tools for designing layouts is wireframing. A wireframe
    is an overview of how the layout will look. The following figure shows the whole
    front page of the application that we will be implementing using a wireframe:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 设计布局最有用的工具之一是线框设计。线框是布局外观的概述。以下图显示了我们将使用线框实现的整个应用程序的前页面：
- en: '![Figure 6.1 – App Store wireframe](img/Figure_6.01_B18783.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – App Store 线框图](img/Figure_6.01_B18783.jpg)'
- en: Figure 6.1 – App Store wireframe
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – App Store 线框图
- en: In the next section, we will build the interface for our application and make
    sure it looks the way we designed it in the wireframe. Though we will build it
    the same way, there can be small differences. We will focus on the sidebar in
    this chapter and complete the main body in the next chapter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将构建我们应用程序的界面，并确保它看起来与我们设计在线框图中的样子一致。虽然我们将以相同的方式构建它，但可能会有一些细微的差异。在本章中，我们将重点关注侧边栏，并在下一章完成主体部分。
- en: Building the Sidebar UI
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 SideBar UI
- en: 'We will now build the UI for the sidebar. First, let’s create our project.
    Follow the following steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将构建侧边栏的 UI。首先，让我们创建我们的项目。按照以下步骤操作：
- en: 'Open Xcode and select **Create a new** **Xcode project**:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Xcode 并选择 **创建新的** **Xcode 项目**：
- en: '![Figure 6.2 – Create a new Xcode project](img/Figure_6.02_B18783.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 创建新的 Xcode 项目](img/Figure_6.02_B18783.jpg)'
- en: Figure 6.2 – Create a new Xcode project
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 创建新的 Xcode 项目
- en: 'Now, we will choose the template for our application. As we are creating an
    iPad app, we will select **iOS** from the top, select **App**, and click **Next**:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将选择我们应用程序的模板。由于我们正在创建一个 iPad 应用程序，我们将从顶部选择 **iOS**，选择 **App**，然后点击 **下一步**：
- en: '![Figure 6.3 – Xcode project template selection](img/Figure_6.03_B18783.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – Xcode 项目模板选择](img/Figure_6.03_B18783.jpg)'
- en: Figure 6.3 – Xcode project template selection
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – Xcode 项目模板选择
- en: 'We will now choose the options for our project. Here, there are only two crucial
    things to select/set. Make sure that the interface is set to **SwiftUI**, which
    will be the UI our system will use, and that **Language** is set to **Swift**,
    which is obviously the programming language used for our application:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将选择我们项目的选项。在这里，只有两个关键的事情需要选择/设置。确保界面设置为 **SwiftUI**，这是我们系统将使用的 UI，并且**语言**设置为**Swift**，这是我们应用程序显然使用的编程语言：
- en: '![Figure 6.4 – Xcode project options](img/Figure_6.04_B18783.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – Xcode 项目选项](img/Figure_6.04_B18783.jpg)'
- en: Figure 6.4 – Xcode project options
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – Xcode 项目选项
- en: 'Once you press **Next**, you can choose where to create your project, as seen
    in the following figure:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你按下 **下一步**，你可以选择创建项目的地方，如下面的图所示：
- en: '![Figure 6.5 – Xcode project save directory](img/Figure_6.05_B18783.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – Xcode 项目保存目录](img/Figure_6.05_B18783.jpg)'
- en: Figure 6.5 – Xcode project save directory
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – Xcode 项目保存目录
- en: 'Once you have found the location you would like to create it in, go ahead and
    click on **Create** in the bottom-right corner as seen in *Figure 6**.5*. Xcode
    shows your project in all its glory, as seen in the following figure:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你找到了你想要创建的位置，就点击右下角的**创建**，如图 *图 6**.5* 所示。Xcode 以其全部的荣耀显示了你的项目，如下面的图所示：
- en: '![Figure 6.6 – New Xcode project overview](img/Figure_6.06_B18783.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 新 Xcode 项目概览](img/Figure_6.06_B18783.jpg)'
- en: Figure 6.6 – New Xcode project overview
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 新 Xcode 项目概览
- en: In the next section, we will implement the sidebar of our application using
    SwiftUI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用 SwiftUI 实现我们应用程序的侧边栏。
- en: Exploring the Sidebar components
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索侧边栏组件
- en: 'In this section, we will implement the sidebar’s user interface. As a reminder,
    it will look like the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现侧边栏的用户界面。作为提醒，它将看起来如下：
- en: "![Figure 6.7 – App \uFEFFStore wireframe](img/Figure_6.07_B18783.jpg)"
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – App Store 线框图](img/Figure_6.07_B18783.jpg)'
- en: Figure 6.7 – App Store wireframe
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – App Store 线框图
- en: There are two main elements to the sidebar. As a little task, see whether you
    can figure out what they are. Don’t worry if you don’t know the exact UI components’
    names; we will look at these components in the following sections.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏有两个主要元素。作为一个小任务，看看你是否能找出它们是什么。如果你不知道确切的 UI 组件名称，不要担心；我们将在接下来的几节中查看这些组件。
- en: Label item
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签项
- en: 'A label item component simply displays an item within the sidebar that can
    be used as a button to navigate the application. It allows you to display a string
    of characters, numbers, or even icons, all of which can be used in conjunction
    with each other. For us, we will use them as dummy buttons inside of our sidebar:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 标签项组件简单地显示侧边栏中的项目，可以用作按钮来导航应用程序。它允许您显示一串字符、数字，甚至图标，所有这些都可以相互结合使用。对我们来说，我们将它们用作侧边栏内的虚拟按钮：
- en: '![Figure 6.8 – Sidebar item](img/Figure_6.08_B18783.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 侧边栏项](img/Figure_6.08_B18783.jpg)'
- en: Figure 6.8 – Sidebar item
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 侧边栏项
- en: SearchBar
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索栏
- en: 'A `SearchBar` component allows the user to search through a set list of components.
    For us, we will use it as a dummy search component that will search through all
    the apps in the App Store. Though the search bar isn’t part of the sidebar per
    se, we will implement it along with the sidebar:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`SearchBar` 组件允许用户在一系列组件中进行搜索。对我们来说，我们将使用它作为虚拟搜索组件，该组件将在 App Store 中的所有应用中进行搜索。虽然搜索栏本身不是侧边栏的一部分，但我们将在实现侧边栏的同时实现它：'
- en: '![Figure 6.9 – Search bar](img/Figure_6.09_B18783.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 搜索栏](img/Figure_6.09_B18783.jpg)'
- en: Figure 6.9 – Search bar
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 搜索栏
- en: Renaming the view
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重命名视图
- en: 'In this section, we will add the image components to our highlight page, which
    is currently named `ContentView` to `MainView`. If you already know how to rename
    it, feel free to skip these steps. Doing this is simple: open `ContentView`, right-click
    any reference to `ContentView` in the code, then go to **Refactor** | **Rename**...,
    as shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向我们的高亮页面添加图像组件，该页面目前命名为 `ContentView`，将其重命名为 `MainView`。如果您已经知道如何重命名，请随意跳过这些步骤。这样做很简单：打开
    `ContentView`，在代码中右键单击任何对 `ContentView` 的引用，然后转到 **重构** | **重命名**...，如图下所示：
- en: '![Figure 6.10 – Rename button](img/Figure_6.10_B18783.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 重命名按钮](img/Figure_6.10_B18783.jpg)'
- en: Figure 6.10 – Rename button
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 重命名按钮
- en: 'Next, the following screen will be shown:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将显示以下屏幕：
- en: '![Figure 6.11 – Rename screen](img/Figure_6.11_B18783.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 重命名屏幕](img/Figure_6.11_B18783.jpg)'
- en: Figure 6.11 – Rename screen
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 重命名屏幕
- en: 'Change the name from `MainView`. You can see all other references to be changed,
    which is useful. Finally, press the **Rename** button at the top right, as demonstrated
    in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将名称从 `MainView` 更改。您可以看到所有其他需要更改的引用，这很有用。最后，按下右上角的 **重命名** 按钮，如图下所示：
- en: '![Figure 6.12 – Rename button](img/Figure_6.12_B18783.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 重命名按钮](img/Figure_6.12_B18783.jpg)'
- en: Figure 6.12 – Rename button
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 重命名按钮
- en: 'We have now renamed our view, including the file, as can be seen in **Project
    Navigator**:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经重命名了我们的视图，包括文件，如图 **项目导航器** 中所示：
- en: '![Figure 6.13 – Updated filename in Project Navigator](img/Figure_6.13_B18783.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 项目导航器中更新的文件名](img/Figure_6.13_B18783.jpg)'
- en: Figure 6.13 – Updated filename in Project Navigator
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 项目导航器中更新的文件名
- en: 'There is one extra step that is optional. That step is to rename the `ContentView_Previews`
    struct. Though not crucial, I would highly recommend renaming it to keep all the
    name references in sync. Using the preceding steps, rename the `ContentView_Previews`
    struct to `MainView_Previews`. The location of the struct is at the bottom of
    the `MainView` file (previously named `ContentView`):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个额外的步骤是可选的。这个步骤是将 `ContentView_Previews` 结构重命名。虽然不是至关重要，但我强烈建议将其重命名为 `MainView_Previews`，以保持所有名称引用的一致性。使用前面的步骤，将
    `ContentView_Previews` 结构重命名为 `MainView_Previews`。该结构位于 `MainView` 文件（之前命名为 `ContentView`）的底部：
- en: '![Figure 6.14 – Rename Previews struct](img/Figure_6.14_B18783.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – 重命名预览结构](img/Figure_6.14_B18783.jpg)'
- en: Figure 6.14 – Rename Previews struct
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 重命名预览结构
- en: In this section, we took a look at the design for the application and, more
    specifically, the `SideBar` UI. We also renamed `ContentView`. In the next section,
    we will implement the code for the sidebar.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们查看了一下应用程序的设计，特别是 `SideBar` UI 的设计。我们还重命名了 `ContentView`。在下一节中，我们将实现侧边栏的代码。
- en: Implementing the Sidebar
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现侧边栏
- en: As we have created a fresh project, the coding standards aren’t in line with
    my personal preference. So, firstly, I will change the standards. Feel free to
    take a few moments to do the same.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们创建了一个全新的项目，编码标准并不符合我的个人偏好。因此，首先，我将更改标准。请随意花几分钟时间做同样的事情。
- en: NavigationView
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航视图
- en: 'Let’s implement a `NavigationView` to provide a split-screen layout, which
    will allow us to code a sidebar. Doing so is simple. Remove the current body code
    and replace it with the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个`NavigationView`来提供一个分屏布局，这将允许我们编写侧边栏代码。这样做很简单。删除当前的主体代码，并用以下代码替换：
- en: '[PRE0]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Within our `NavigationView`, we create a `List` that has a collection of `Labels`
    that will serve as our dummy buttons. By default, we provide no system image,
    but we need to specify something otherwise it will result in an error.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`NavigationView`中，我们创建了一个`List`，其中包含一组`Labels`，这些标签将作为我们的虚拟按钮。默认情况下，我们不提供系统图像，但我们需要指定一些内容，否则将导致错误。
- en: 'The preceding code will result in the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将导致以下结果：
- en: '![Figure 6.15 – Labels preview](img/Figure_6.15_B18783.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图6.15 – 标签预览](img/Figure_6.15_B18783.jpg)'
- en: Figure 6.15 – Labels preview
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – 标签预览
- en: 'Though we do not need to implement icons, the application will greatly benefit
    from their inclusion. Adding an image is easy enough; you simply use the `systemImage`
    parameter. Alternatively, you can provide your own images by following the steps
    from [*Chapter 4*](B18783_04.xhtml#_idTextAnchor309) in the *Implementing the
    HighlightView* section and implementing them using the `image` parameter. The
    best method for finding/searching for system images is to download **SF Symbols**
    from Apple, which you can find at [https://developer.apple.com/sf-symbols/](https://developer.apple.com/sf-symbols/).
    Once that’s installed, you can search for system images easily. To use a system
    image, simply copy the following name of the system image:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不需要实现图标，但应用程序将极大地受益于它们的加入。添加图片很容易；你只需使用`systemImage`参数。或者，你可以按照[*第4章*](B18783_04.xhtml#_idTextAnchor309)中“实现HighlightView”部分的步骤提供自己的图片，并使用`image`参数实现它们。找到/搜索系统图像的最佳方法是下载**SF
    Symbols**，你可以在[https://developer.apple.com/sf-symbols/](https://developer.apple.com/sf-symbols/)找到它。一旦安装，你可以轻松地搜索系统图像。要使用系统图像，只需复制以下系统图像的名称：
- en: '![Figure 6.16 – System image name](img/Figure_6.16_B18783.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16 – 系统图像名称](img/Figure_6.16_B18783.jpg)'
- en: Figure 6.16 – System image name
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 – 系统图像名称
- en: 'Feel free to use the system images that you feel best suit your application.
    I have chosen the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 随意使用你认为最适合你应用程序的系统图像。我选择了以下图像：
- en: '[PRE1]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Running the application will display the following result:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序将显示以下结果：
- en: '![Figure 6.17 – System image icons](img/Figure_6.17_B18783.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – 系统图标](img/Figure_6.17_B18783.jpg)'
- en: Figure 6.17 – System image icons
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – 系统图标
- en: SearchBar
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索栏
- en: 'Though the `SearchBar` will be placed in the top bar, it is included in the
    sidebar code. Adding the search bar is very simple. First, add the following code
    before the body, which will store the user input of the `SearchBar`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`SearchBar`将被放置在顶部栏中，但它包含在侧边栏代码中。添加搜索栏非常简单。首先，在主体之前添加以下代码，这将存储`SearchBar`的用户输入：
- en: '[PRE2]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, add the following code to the `List` component:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下代码添加到`List`组件中：
- en: '[PRE3]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The code we have just added adds a `SearchBar` and links its text to the `searchText`
    variable we created. The list component code will now look as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的代码添加了一个`SearchBar`并将其文本链接到我们创建的`searchText`变量。列表组件代码现在将如下所示：
- en: '[PRE4]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the application will result in the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序将产生以下结果：
- en: "![Figure 6.18 – Sear\uFEFFchBar](img/Figure_6.18_B18783.jpg)"
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18 – 搜索栏](img/Figure_6.18_B18783.jpg)'
- en: Figure 6.18 – SearchBar
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – 搜索栏
- en: In this section, we implemented the code for the `SearchBar` UI. In the next
    section, we will look at extra features that will help bring the App Store to
    life.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们实现了`SearchBar` UI的代码。在下一节中，我们将探讨一些额外功能，这些功能将有助于使应用程序焕发生机。
- en: Implementing Extra Features
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现额外功能
- en: Even though for the scope of this project we are done with the `SideBar`, I
    would like to show you how to implement events for pressing *Enter* on the `SearchBar`
    and how to make the `SideBar` labels clickable.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在这个项目的范围内我们已经完成了`SideBar`，但我还想向你展示如何实现按下`SearchBar`上的*Enter*键的事件，以及如何使`SideBar`标签可点击。
- en: SearchBar Enter Event
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索栏 Enter 事件
- en: We want the user to be able to press *Enter* when they have selected `SearchBar`
    and trigger an event. This event could pull up a list of results in a context
    menu or new page. Feel free to implement this as an extra task.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望用户在选择了`SearchBar`后能够按下*Enter*键来触发一个事件。这个事件可以弹出一个结果列表或新页面。请随意将其作为一个额外任务来实现。
- en: 'The code to achieve this is super simple. Add the following after the `.``searchable`
    code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的代码非常简单。在`.``searchable`代码之后添加以下代码：
- en: '[PRE5]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When the user has submitted the search, the code inside of the parentheses will
    run. For testing, we are printing out the `searchText` variable, which will print
    out what you type in it. Feel free to run it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交搜索时，括号内的代码将会执行。为了测试，我们打印了 `searchText` 变量，它将打印出你输入的内容。请随意运行它。
- en: Clickable Label Event
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可点击标签事件
- en: 'Right now, the labels inside the sidebar have no event functionality. For the
    scope of this chapter, we don’t require it, but I will show you how to make the
    labels clickable. It is actually very simple. Just add an `onTapGesture` function
    to each label as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，侧边栏内的标签没有事件功能。在本章的范围内，我们不需要它，但我将向你展示如何使标签可点击。实际上非常简单。只需为每个标签添加一个 `onTapGesture`
    函数，如下所示：
- en: '[PRE6]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I have only added it to the first label, but feel free to add it to the rest.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我只将其添加到了第一个标签上，但你可以随意将其添加到其他标签上。
- en: In this section, we implemented code to allow the user to trigger the `Submit`
    event when pressing *Enter* in the search bar. We also added the code to detect
    when the labels have been clicked.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们实现了代码，允许用户在搜索栏中按下 *Enter* 键时触发 `Submit` 事件。我们还添加了检测标签被点击的代码。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the design of our App Store application. We looked
    at wireframes and broke down each element into SwiftUI components. We then implemented
    the SwiftUI components to match the design from the wireframes for the `SideBar`
    UI. We also took a look at the requirements for building this application and
    the design specifications. We then simplified it to the core features that our
    app will provide. We also implemented extra features to allow extra input for
    a more well-rounded application.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了我们的应用商店应用程序的设计。我们研究了线框图，并将每个元素分解为 SwiftUI 组件。然后我们实现了 SwiftUI 组件，以匹配线框图中的
    `SideBar` UI 设计。我们还研究了构建此应用程序的要求和设计规范。然后我们将它们简化为核心功能，这是我们应用将提供的功能。我们还实现了额外功能，以允许额外的输入，使应用程序更加完善。
- en: In the next chapter, we’ll take a look at implementing the main body for our
    App Store application.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨实现我们的应用商店应用程序的主体。
