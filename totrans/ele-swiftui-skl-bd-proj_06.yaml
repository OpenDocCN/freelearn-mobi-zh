- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mac Project – App Store Bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous four chapters, we created a tax calculator app for the iPhone
    and a photo gallery app for the iPad. We implemented them from scratch, looking
    at the technical requirements, design specifications, wireframes, and code implementation.
    We will use the skills covered in this and the next chapter to create the App
    Store sidebar, but worry not: we will go over all necessary aspects in case you
    have jumped straight to this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will work on the design of our third project, an App Store
    application for the Mac that will showcase its big screen, which also stays in
    one orientation. We will assess the requirements for designing such an application
    and discuss the design specifications, allowing us to get a better understanding
    of what is required and how it will all fit together. Then, we will start our
    application's coding process to build the sidebars in this chapter, and the next
    chapter will cover the main body of the App Store app. This project will cover
    the foundations of SwiftUI components.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Design Specifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acceptance Criteria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the Sidebar UIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a better understanding of the design
    of our application and what is required, along with a skeleton user interface
    that will be used as the foundation for making the gallery work in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store. To install Xcode, just search for Xcode in the App Store, then select
    and download the latest version. Open Xcode and follow any additional installation
    instructions. Once Xcode has opened and launched, you’re ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 14 of Xcode has the following features/requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires a Mac running macOS Monterey 12.5 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For further information regarding technical details, please refer to [*Chapter
    1*](B18783_01.xhtml#_idTextAnchor014).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Design Specifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the design specifications of our App Store
    application and describe the features we are going to implement in it. The best
    method for figuring out the features required is to put yourself in the user’s
    shoes to determine how they will use the app, then break it into individual steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'There can be many features of our app, and they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Sidebar – for different sections of the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlight banner – showcasing an app of the day.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Featured tiles – showcasing lesser apps or more specific category applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New apps and updates section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search – the ability to search the whole collection for a specific app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App reviewing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App reporting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App page – showing information such as description and date for a selected app,
    similar to the `EnhancedView` from the photo gallery application we created previously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App images and information from an external source such as a local database
    or online.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing – the ability to share an image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating favorite/download later lists.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have listed the ideal features we would like, next, it is important
    for us to determine which features are absolutely crucial. To do this, we must
    understand the end use of our product. For me, the purpose of creating this App
    Store application is to showcase a sidebar and how it integrates with the main
    body. We will not be implementing an app page because it is very similar to the
    photo gallery’s `EnhancedView`, which will be set as an extra task, and you can
    use the previous two chapters for assistance. Based on that, I know that not all
    the features are required, and some would be useful if omitted and assigned as
    extra tasks for you as the developer to undertake. Therefore, the following are
    the core features we will be implementing:'
  prefs: []
  type: TYPE_NORMAL
- en: Sidebar – for different sections of the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlight banner – showcasing an app of the day.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Featured tiles – showcasing lesser apps or more specific category applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New apps and updates section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the features will be an exercise for you once you have completed
    this and the next chapter. The next section will cover the acceptance criteria
    for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Acceptance criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will discuss the mandatory requirements for our application that we absolutely
    want to see in the end product at the end of the next chapter. If possible, we
    should try to make them measurable, so let’s list them right now:'
  prefs: []
  type: TYPE_NORMAL
- en: Sidebar with text components and an icon next to them for enhanced visual context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrollable main body view to scroll through the applications and highlighted
    applications in the main body.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlight banner that will take the full width of its parent container to showcase
    an application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tiles to showcase other specific apps in a category.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images and text displayed for the rest of the apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop test cases in which the application’s acceptance criteria will be tested.
    Using this method allows the ability to see the conditions in which the application
    will be used by the end user and the level that needs to be attained for it to
    be considered successful.
  prefs: []
  type: TYPE_NORMAL
- en: We will develop testing methods to check the acceptance criteria that can be
    tested and ultimately measured. This will allow us to see whether the use cases
    in which the application is to be used will pass.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframe design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most useful tools for designing layouts is wireframing. A wireframe
    is an overview of how the layout will look. The following figure shows the whole
    front page of the application that we will be implementing using a wireframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – App Store wireframe](img/Figure_6.01_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – App Store wireframe
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will build the interface for our application and make
    sure it looks the way we designed it in the wireframe. Though we will build it
    the same way, there can be small differences. We will focus on the sidebar in
    this chapter and complete the main body in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Sidebar UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now build the UI for the sidebar. First, let’s create our project.
    Follow the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Xcode and select **Create a new** **Xcode project**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Create a new Xcode project](img/Figure_6.02_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Create a new Xcode project
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will choose the template for our application. As we are creating an
    iPad app, we will select **iOS** from the top, select **App**, and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Xcode project template selection](img/Figure_6.03_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Xcode project template selection
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now choose the options for our project. Here, there are only two crucial
    things to select/set. Make sure that the interface is set to **SwiftUI**, which
    will be the UI our system will use, and that **Language** is set to **Swift**,
    which is obviously the programming language used for our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Xcode project options](img/Figure_6.04_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Xcode project options
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you press **Next**, you can choose where to create your project, as seen
    in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Xcode project save directory](img/Figure_6.05_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Xcode project save directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have found the location you would like to create it in, go ahead and
    click on **Create** in the bottom-right corner as seen in *Figure 6**.5*. Xcode
    shows your project in all its glory, as seen in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – New Xcode project overview](img/Figure_6.06_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – New Xcode project overview
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will implement the sidebar of our application using
    SwiftUI.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Sidebar components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will implement the sidebar’s user interface. As a reminder,
    it will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.7 – App \uFEFFStore wireframe](img/Figure_6.07_B18783.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – App Store wireframe
  prefs: []
  type: TYPE_NORMAL
- en: There are two main elements to the sidebar. As a little task, see whether you
    can figure out what they are. Don’t worry if you don’t know the exact UI components’
    names; we will look at these components in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Label item
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A label item component simply displays an item within the sidebar that can
    be used as a button to navigate the application. It allows you to display a string
    of characters, numbers, or even icons, all of which can be used in conjunction
    with each other. For us, we will use them as dummy buttons inside of our sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Sidebar item](img/Figure_6.08_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Sidebar item
  prefs: []
  type: TYPE_NORMAL
- en: SearchBar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `SearchBar` component allows the user to search through a set list of components.
    For us, we will use it as a dummy search component that will search through all
    the apps in the App Store. Though the search bar isn’t part of the sidebar per
    se, we will implement it along with the sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Search bar](img/Figure_6.09_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Search bar
  prefs: []
  type: TYPE_NORMAL
- en: Renaming the view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will add the image components to our highlight page, which
    is currently named `ContentView` to `MainView`. If you already know how to rename
    it, feel free to skip these steps. Doing this is simple: open `ContentView`, right-click
    any reference to `ContentView` in the code, then go to **Refactor** | **Rename**...,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Rename button](img/Figure_6.10_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Rename button
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the following screen will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Rename screen](img/Figure_6.11_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Rename screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the name from `MainView`. You can see all other references to be changed,
    which is useful. Finally, press the **Rename** button at the top right, as demonstrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Rename button](img/Figure_6.12_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Rename button
  prefs: []
  type: TYPE_NORMAL
- en: 'We have now renamed our view, including the file, as can be seen in **Project
    Navigator**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Updated filename in Project Navigator](img/Figure_6.13_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Updated filename in Project Navigator
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one extra step that is optional. That step is to rename the `ContentView_Previews`
    struct. Though not crucial, I would highly recommend renaming it to keep all the
    name references in sync. Using the preceding steps, rename the `ContentView_Previews`
    struct to `MainView_Previews`. The location of the struct is at the bottom of
    the `MainView` file (previously named `ContentView`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Rename Previews struct](img/Figure_6.14_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Rename Previews struct
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we took a look at the design for the application and, more
    specifically, the `SideBar` UI. We also renamed `ContentView`. In the next section,
    we will implement the code for the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have created a fresh project, the coding standards aren’t in line with
    my personal preference. So, firstly, I will change the standards. Feel free to
    take a few moments to do the same.
  prefs: []
  type: TYPE_NORMAL
- en: NavigationView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s implement a `NavigationView` to provide a split-screen layout, which
    will allow us to code a sidebar. Doing so is simple. Remove the current body code
    and replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Within our `NavigationView`, we create a `List` that has a collection of `Labels`
    that will serve as our dummy buttons. By default, we provide no system image,
    but we need to specify something otherwise it will result in an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Labels preview](img/Figure_6.15_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Labels preview
  prefs: []
  type: TYPE_NORMAL
- en: 'Though we do not need to implement icons, the application will greatly benefit
    from their inclusion. Adding an image is easy enough; you simply use the `systemImage`
    parameter. Alternatively, you can provide your own images by following the steps
    from [*Chapter 4*](B18783_04.xhtml#_idTextAnchor309) in the *Implementing the
    HighlightView* section and implementing them using the `image` parameter. The
    best method for finding/searching for system images is to download **SF Symbols**
    from Apple, which you can find at [https://developer.apple.com/sf-symbols/](https://developer.apple.com/sf-symbols/).
    Once that’s installed, you can search for system images easily. To use a system
    image, simply copy the following name of the system image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16 – System image name](img/Figure_6.16_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – System image name
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to use the system images that you feel best suit your application.
    I have chosen the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the application will display the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17 – System image icons](img/Figure_6.17_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – System image icons
  prefs: []
  type: TYPE_NORMAL
- en: SearchBar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Though the `SearchBar` will be placed in the top bar, it is included in the
    sidebar code. Adding the search bar is very simple. First, add the following code
    before the body, which will store the user input of the `SearchBar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following code to the `List` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The code we have just added adds a `SearchBar` and links its text to the `searchText`
    variable we created. The list component code will now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the application will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.18 – Sear\uFEFFchBar](img/Figure_6.18_B18783.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – SearchBar
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we implemented the code for the `SearchBar` UI. In the next
    section, we will look at extra features that will help bring the App Store to
    life.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Extra Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though for the scope of this project we are done with the `SideBar`, I
    would like to show you how to implement events for pressing *Enter* on the `SearchBar`
    and how to make the `SideBar` labels clickable.
  prefs: []
  type: TYPE_NORMAL
- en: SearchBar Enter Event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want the user to be able to press *Enter* when they have selected `SearchBar`
    and trigger an event. This event could pull up a list of results in a context
    menu or new page. Feel free to implement this as an extra task.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to achieve this is super simple. Add the following after the `.``searchable`
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When the user has submitted the search, the code inside of the parentheses will
    run. For testing, we are printing out the `searchText` variable, which will print
    out what you type in it. Feel free to run it.
  prefs: []
  type: TYPE_NORMAL
- en: Clickable Label Event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Right now, the labels inside the sidebar have no event functionality. For the
    scope of this chapter, we don’t require it, but I will show you how to make the
    labels clickable. It is actually very simple. Just add an `onTapGesture` function
    to each label as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: I have only added it to the first label, but feel free to add it to the rest.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we implemented code to allow the user to trigger the `Submit`
    event when pressing *Enter* in the search bar. We also added the code to detect
    when the labels have been clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the design of our App Store application. We looked
    at wireframes and broke down each element into SwiftUI components. We then implemented
    the SwiftUI components to match the design from the wireframes for the `SideBar`
    UI. We also took a look at the requirements for building this application and
    the design specifications. We then simplified it to the core features that our
    app will provide. We also implemented extra features to allow extra input for
    a more well-rounded application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll take a look at implementing the main body for our
    App Store application.
  prefs: []
  type: TYPE_NORMAL
