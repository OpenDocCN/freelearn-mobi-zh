- en: Chapter 1. Introducing Swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are you trying to achieve by reading this book? Learning Swift can be fun,
    but most of us are trying to achieve something bigger. There is something we want
    to create, a career we want to follow, or maybe something else entirely. Whatever
    that goal is, I encourage you to keep it in mind as you read this book. It will
    be much easier for you to learn, from this or any other resource, if you can always
    relate it to your goal.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in mind, before we dive into learning Swift, we have to understand
    what it really is and how it will help us in achieving our goals. We also need
    to move forward with an effective learning technique and get a taste of what is
    to come. To do all of that, we will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining our goals for this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running our first Swift code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding playgrounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning with this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining our goals for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Swift is a programming language developed by Apple primarily to allow developers
    to continue to push their platforms forward. It is their attempt to make iOS,
    OS X, watchOS, and tvOS app development more modern, safe, and powerful.
  prefs: []
  type: TYPE_NORMAL
- en: However, Apple has also released Swift as Open Source and begun an effort to
    add support for Linux with the intent to make Swift even better and a general
    purpose programming language available everywhere. Some developers have already
    begun using it to create command-line scripts as a replacement/supplement of the
    existing scripting languages, such as Python or Ruby and many can't wait to be
    able to share some of their app code with Web backend code. Apple's priority,
    at least for now, is to make it the best language possible, to facilitate app
    development. However, the most important thing to remember is that modern app
    development almost always requires pulling together multiple platforms into a
    single-user experience. If a language could bridge those gaps and stay enjoyable
    to write, safe, and performant, we would have a much easier time making amazing
    products. Swift is well on its way to reach that goal.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is important to note that learning Swift is only the first step towards
    developing. To develop for a device, you must learn the programming language and
    the frameworks the device maker provides. Being skilled with a programming language
    is the foundation of getting better at using frameworks and ultimately building
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: Developing software is like building a table. You can learn the basics of woodworking
    and nail a few pieces of wood together to make a functional table, but you are
    very limited in what you can do because you lack advanced woodworking skills.
    If you want to make a truly great table, you need to step away from the table
    and focus first on developing your skill set. The better you are at using the
    tools, the greater the number of possibilities that open up to you to create a
    more advanced and higher quality piece of furniture. Similarly, with a very limited
    knowledge of Swift, you can start to piece together a functional app from the
    code you find online. However, to really make something great, you have to put
    the time and effort into refining your skill set with the language. Every language
    feature or technique that you learn opens up more possibilities for your app.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, most developers are driven by a passion to create things and
    solve problems. We learn best when we can channel our passions into truly improving
    ourselves and the world around us. We don't want to get stuck learning the minutia
    of a language with no practical purpose.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this book is to develop your skills and confidence to dive passionately
    into creating compelling, maintainable, and elegant apps in Swift. To do that,
    we will introduce the syntax and features of Swift in a practical way. You will
    build a rich toolset, while seeing that toolset put to real world usage. So, without
    further ado, let's jump right into setting up our development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to use Swift, you will need to run OS X, the operating system that
    comes with all Macs. The only piece of software that you will need is called **Xcode**
    (version 7 and higher). This is the environment that Apple provides, which facilitates
    development for its platforms. You can download Xcode for free from the Mac App
    Store at [www.appstore.com/mac/Xcode](http://www.appstore.com/mac/Xcode).
  prefs: []
  type: TYPE_NORMAL
- en: Once downloaded and installed, you can open the app and it will install the
    rest of Apple's developer tool components. It is as simple as that! We are now
    ready to run our first piece of Swift code.
  prefs: []
  type: TYPE_NORMAL
- en: Running our first swift code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by creating a new Swift playground. As the name suggests, a playground
    is a place where you can play around with code. With Xcode open, navigate to **File**
    | **New** | **Playground…** from the menu bar, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our first swift code](img/B05103_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Name it `MyFirstPlayground`, leave the platform as **iOS**, and save it wherever
    you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once created, a playground window will appear with some code already populated
    inside it for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our first swift code](img/B05103_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You have already run your first Swift code. A playground in Xcode runs your
    code every time you make a change and shows you the code results in the sidebar,
    on the right-hand side of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break down what this code is doing. The first line is a comment that
    is ignored while being run. It can be really useful in adding extra information
    about your code inline with it. In Swift, there are two types of comments: single-line
    and multi-line. Single-line comments, such as the preceding one, always start
    with a `//`. You can also write comments that span multiple lines by surrounding
    them with `/*` and `*/`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding screenshot, the second line, `import UIKit`,
    imports a framework called UIKit. UIKit is the name of Apple's framework for iOS
    development. For this example, we are not actually making use of the UIKit framework
    so it is safe to completely remove that line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, on the last line, the code defines a variable called `str` that is
    being assigned to the text `"Hello, playground"`. In the results sidebar, next
    to that line, you can see that `"Hello, playground"` was indeed stored in the
    variable. As your code becomes more complex, this will become incredibly useful
    to help you track and watch the state of your code, as it is run. Every time you
    make a change to the code, the results will update, showing you the consequences
    of the change.
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with other programming languages, many of them require some
    sort of line terminator. In Swift, you do not need anything like that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other great thing about Xcode playgrounds is that they will show you errors
    as you type them in. Let''s add a third line to the playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On its own, this is completely valid Swift code. It stores the text `"Something
    Else"` into a new variable called `str`. However, when we add this to the playground,
    we are shown an error in the form of a red exclamation mark next to the line number.
    If you click on the exclamation mark, you will be shown the full error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our first swift code](img/B05103_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This line is highlighted in red and we are shown the **Invalid redeclaration
    of ''str''** error. This is because you cannot declare two different variables
    with the exact same name. Also, notice that the results along the right turned
    gray instead of black. This indicates that the result being shown is not from
    the latest code, but the last successful run of the code. The code cannot be successfully
    run to create a new result because of the error. If we change the second variable
    to `strTwo`, the error goes away:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your e-mail address and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the SUPPORT tab at the top.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Code Download.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Running our first swift code](img/B05103_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now the results are shown in black again, and we can see that they have been
    updated according to the latest code. Especially if you have experience with other
    programming environments, the reactiveness of the playground may be surprising
    to you. Let's take a peek under the hood to get a better understanding of what
    is happening and how Swift works.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding playgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A playground is not truly a program. While it does execute code like a program,
    it is not really useful outside of the development environment. Before we can
    understand what the playground is doing for us, we must first understand how Swift
    works.
  prefs: []
  type: TYPE_NORMAL
- en: Swift is a compiled language, which means that for Swift code to be run, it
    must first be converted into a form that the computer can actually execute. The
    tool that does this conversion is called a **compiler**. A compiler is actually
    a program and it is also a way to define a programming language.
  prefs: []
  type: TYPE_NORMAL
- en: The Swift compiler takes the Swift code as input and, if it can properly parse
    and understand the code, outputs machine code. Apple developed the Swift compiler
    to understand the code according to a series of rules. Those rules are what define
    the Swift programming language and those rules are what we are trying to learn,
    when we say we are learning Swift.
  prefs: []
  type: TYPE_NORMAL
- en: Once the machine code is generated, Xcode can wrap the machine code up inside
    an app that users can run. However, we are running Swift code inside our playground,
    so clearly building an app is not the only way to run code; something else is
    going on here.
  prefs: []
  type: TYPE_NORMAL
- en: Every time you make a change to a playground, it automatically tries to compile
    your code. If it is successful, instead of wrapping up the machine code in an
    app to be run later, it runs the code immediately and shows you the results. If
    you had to do this process yourself, you would first have to consciously make
    the decision to build the code into an app and then run it when you wanted to
    test something. This would be a huge waste of time; especially, if you write an
    error that you don't catch until the moment you decide to actually run it. The
    quicker you can see the result of a code change, the faster you will be at developing
    the code and the fewer mistakes you will make.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will be developing all of our code inside a playground because it
    is a fantastic learning environment. Playgrounds are even more powerful than what
    we have seen so far and we will see that as we explore deeper into the Swift language.
  prefs: []
  type: TYPE_NORMAL
- en: We are just about ready to get to the meat of learning Swift, but first let's
    take a moment to make sure that you can get the most out of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Learning with this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The learning process of this book follows very closely to the philosophy behind
    playgrounds. You will get the most out of this book if you play around with the
    code and ideas that we discuss. Instead of just passively reading through this,
    glancing at the code, put the code into a playground, and observe how it really
    works. Make changes to the code, try to break it, try to extend it, and you will
    learn far more. If you have a question, don't default to looking up the answer,
    try it out.
  prefs: []
  type: TYPE_NORMAL
- en: At its core, programming is a creative exercise. Yes, it requires the ability
    to think logically through a problem, but nine times out of ten there is no *right
    way* there is no correct answer. Technology is pushed by those of us who won't
    settle for the accepted solution, who aren't OK with following a fixed set of
    instructions, who want to push the boundaries. As we move forward in learning
    Swift, make this book and Swift work for you by not taking everything at face
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're off to a good start. We've gone over how Swift is a language designed
    primarily for app development, which often includes multiple different platforms.
    We already ran our first code and learned a little bit about how a computer runs
    it indirectly by first compiling it into a form it understands how to run. Most
    importantly, we've learned that you will learn best from this book by having a
    goal to work towards and by playing around with the concepts as you read along.
    So let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will start breaking down the basics of Swift and then put them together
    to make our first program.
  prefs: []
  type: TYPE_NORMAL
