["```swift\nfunc doCalc() {\n  var x=100\n  var y = x*x\n  _ = y/x\n}\n```", "```swift\nfunc performCalculation(iterations: Int, tag: String) {\n  let start = CFAbsoluteTimeGetCurrent()\n  for var i=0; i<iterations; i++ {\n    self.doCalc()\n  }\n  let end = CFAbsoluteTimeGetCurrent()\n  print(\"time for \\(tag):  \\(end-start)\")\n}\n```", "```swift\nfunc dispatch_queue_t dispatch_queue_create(label: UnsafePointer<Int8>, attr: dispatch_queue_attr_t!) -> dispatch_queue_t!\n```", "```swift\nlet queue = dispatch_queue_create(\"cqueue.hoffman.jon\", DISPATCH_QUEUE_CONCURRENT)\n```", "```swift\nfunc dispatch_async(queue: dispatch_queue_t!, block: dispatch_queue_block!)\n```", "```swift\nlet c = { performCalculation(1000, tag: \"async0\") }\ndispatch_async(queue, c)\n```", "```swift\ndispatch_async(queue) {\n  calculation.performCalculation(10000000, tag: \"async1\")\n}\n```", "```swift\ndispatch_async(queue) {\n  calculation.performCalculation(10000000, tag: \"async1\")\n}\n\ndispatch_async(queue) {\n  calculation.performCalculation(1000, tag: \"async2\")\n}\n\ndispatch_async(queue) {\n  calculation.performCalculation(100000, tag: \"async3\")\n}\n```", "```swift\ntime for async2:  0.000200986862182617\ntime for async3:  0.00800204277038574\ntime for async1:  0.461670994758606\n```", "```swift\nlet queue2 = dispatch_queue_create(\"squeue.hoffman.jon\", DISPATCH_QUEUE_SERIAL)\n```", "```swift\nvar calculation = DoCalculations()\nlet c = { calculation.performCalculation(1000, tag: \"sync0\") }\ndispatch_async(queue2, c)\n```", "```swift\ndispatch_async(queue2) {\n    calculation.performCalculation(100000, tag: \"sync1\")\n}\n```", "```swift\ndispatch_async(queue2) {\n    calculation.performCalculation(100000, tag: \"sync1\")\n}\n\ndispatch_async(queue2) {\n    calculation.performCalculation(1000, tag: \"sync2\")\n}\n\ndispatch_async(queue2) {\n    calculation.performCalculation(100000, tag: \"sync3\")\n}\n```", "```swift\ntime for sync1:  0.00648999214172363\ntime for sync2:  0.00009602308273315\ntime for sync3:  0.00515800714492798\n```", "```swift\nfunc dispatch_get_global_queue(identifier: Int, flags: UInt) -> dispatch_queue_t!\n```", "```swift\nlet queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)\n```", "```swift\nfunc dispatch_get_main_queue() -> dispatch_queue_t!\n```", "```swift\nlet mainQueue = dispatch_get_main_queue();\n```", "```swift\nfunc dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t, block: dispatch_block_t)\n```", "```swift\nfunc dispatch_time(when: dispatch_time_t, delta:Int64) -> dispatch_time_t\n```", "```swift\nvar delayInSeconds = 2.0\nlet eTime = dispatch_time(DISPATCH_TIME_NOW, Int64(delayInSeconds * Double(NSEC_PER_SEC)))\ndispatch_after(eTime, queue2) {\n  print(\"Times Up\")\n}\n```", "```swift\nlet queue2 = dispatch_queue_create(\"squeue.hoffman.jon\", DISPATCH_QUEUE_SERIAL)\n\nvar delayInSeconds = 2.0\nlet pTime = dispatch_time(DISPATCH_TIME_NOW,Int64(delayInSeconds * Double(NSEC_PER_SEC)))\ndispatch_after(pTime, queue2) {\n  print(\"Times Up\")\n}\n\ndispatch_sync(queue2) {\n  calculation.performCalculation(100000, tag: \"sync1\")\n}\n```", "```swift\ntime for sync1:  0.00407701730728149\nTimes Up\n```", "```swift\nfunc dispatch_once(predicate: UnsafeMutablePointer<dispatch_once_t>,block: dispatch_block_t!)\n```", "```swift\nvar token: dispatch_once_t = 0\nfunc example() {\n    dispatch_once(&token) {\n        print(\"Printed only on the first call\")\n    }\n    print(\"Printed for each call\")\n}\n```", "```swift\nfor i in 0..<4 {\n   example()\n}\n```", "```swift\nPrinted only on the first call\nPrinted for each call\nPrinted for each call\nPrinted for each call\nPrinted for each call\n```", "```swift\nlet calculation = DoCalculations()\nlet operationQueue = NSOperationQueue()\n\nlet blockOperation1: NSBlockOperation = NSBlockOperation.init(block: {\n  calculation.performCalculation(10000000, tag: \"Operation 1\")\n})\n\nblockOperation1.addExecutionBlock(\n  {\n    calculation.performCalculation(10000, tag: \"Operation 2\")\n  }\n)\n\nblockOperation1.addExecutionBlock(\n  {\n    calculation.performCalculation(1000000, tag: \"Operation 3\")\n  }\n)\n\noperationQueue.addOperation(blockOperation1)\n```", "```swift\ntime for Operation 2:  0.00546294450759888\ntime for Operation 3:  0.0800899863243103\ntime for Operation 1:  0.484337985515594\n```", "```swift\noperationQueue.maxConcurrentOperationCount = 1\n```", "```swift\nlet operationQueue = NSOperationQueue()\nlet calculation = DoCalculations()\n\noperationQueue.addOperationWithBlock() {\n  calculation.performCalculation(10000000, tag: \"Operation1\")\n}\n\noperationQueue.addOperationWithBlock() {\n  calculation.performCalculation(10000, tag: \"Operation2\")\n}\n\noperationQueue.addOperationWithBlock() {\n  calculation.performCalculation(1000000, tag: \"Operation3\")\n}\n```", "```swift\ntime for Operation2:  0.0115870237350464\ntime for Operation3:  0.0790849924087524\ntime for Operation1:  0.520610988140106\n```", "```swift\nvar operationQueue = NSOperationQueue()\noperationQueue.maxConcurrentOperationCount = 1\n```", "```swift\ntime for Operation1:  0.418763995170593\ntime for Operation2:  0.000427007675170898\ntime for Operation3:  0.0441589951515198\n```", "```swift\nclass MyOperation: NSOperation {\n  let iterations: Int\n  let tag: String\n\n  init(iterations: Int, tag: String) {\n    self.iterations = iterations\n    self.tag = tag\n  }\n\n  override func main() {\n    performCalculation()\n  }\n\n  func performCalculation() {\n    let start = CFAbsoluteTimeGetCurrent()\n    for var i=0; i<iterations; i++ {\n      self.doCalc()\n    }\n    let end = CFAbsoluteTimeGetCurrent()\n    print(\"time for \\(tag):  \\(end-start)\")\n  }\n\n  func doCalc() {\n    let x=100\n    let y = x*x\n    _ = y/x\n  }\n}\n```", "```swift\nvar operationQueue = NSOperationQueue()\noperationQueue.addOperation(MyOperation(iterations: 10000000, tag: \"Operation 1\"))\noperationQueue.addOperation(MyOperation(iterations: 10000, tag: \"Operation 2\"))\noperationQueue.addOperation(MyOperation(iterations: 1000000, tag: \"Operation 3\"))\n```", "```swift\ntime for Operation 2:  0.00187397003173828\ntime for Operation 3:  0.104826986789703\ntime for Operation 1:  0.866684019565582\n```", "```swift\noperationQueue.maxConcurrentOperationCount = 1\n```"]