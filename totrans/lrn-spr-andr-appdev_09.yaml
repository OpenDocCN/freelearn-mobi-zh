- en: Creating an Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: So far, we have prepared you to become a professional Spring-based developer.
    You have learned what Spring is, as well as the functions of its architecture,
    components, security features, database, and so on. We have also shown you how
    to develop an Android app and handle HTTP requests and use the database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为您准备好成为一名专业的基于Spring的开发者。您已经学习了Spring是什么，以及其架构、组件、安全特性、数据库等功能。我们还向您展示了如何开发Android应用程序、处理HTTP请求以及使用数据库。
- en: As you know, we developed all the example projects in Kotlin, and nowadays,
    this language is very famous among developers for its conciseness and interoperability.
    In this chapter, we will implement all the features of the previous chapters to
    develop a project that will have a server and a client side.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，我们使用Kotlin语言开发了所有示例项目，而如今，这种语言因其简洁性和互操作性而在开发者中非常受欢迎。在本章中，我们将实现前几章的所有功能，以开发一个具有服务器和客户端的项目。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Project idea
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目想法
- en: Creating the design
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建设计
- en: 'Server side:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端：
- en: Developing a database model
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发数据库模型
- en: Creating a project and Maven dependency
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目和Maven依赖项
- en: Creating entities, repositories, and a controller
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建实体、仓库和控制器
- en: Implementing security
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现安全性
- en: Modified application.properties
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改后的application.properties
- en: 'Client side:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端：
- en: Creating models
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Creating HTTP requests
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建HTTP请求
- en: Creating API services
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建API服务
- en: Modifying activities
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改活动
- en: Fetching REST APIs
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取REST API
- en: Creating an adapter and XML layouts
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建适配器和XML布局
- en: Checking the output
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查输出
- en: Technical requirements
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need almost all the dependencies, such as security, MySQL, JPA, Hibernate,
    and JDBC, from the previous chapters.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要几乎所有来自前几章的依赖项，例如安全、MySQL、JPA、Hibernate和JDBC。
- en: The source code with an example for this chapter is available on GitHub at the
    following link: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09.](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例源代码可在GitHub上的以下链接找到：[https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09)
- en: You will find two projects—`social_network` is the server side, which has been
    developed with the help of the Spring Framework, and `ClientSide` is the client
    side, which has been developed for the Android platform.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您将找到两个项目——“social_network”是服务器端，它是在Spring框架的帮助下开发的，而“ClientSide”是客户端，它是为Android平台开发的。
- en: Project idea
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目想法
- en: The project idea is the most important part. You need to generate this idea
    very carefully and have to identify the facts behind your project. You need to
    keep in mind how this project could be effective on the market, how the users
    will accept your project, why they will use it, why they should choose your app
    instead of others, what features will make it different from other existing similar
    projects, and so on. After generating an idea, you need to create a draft in your
    mind of how will it look. Then you need to put it down on paper, design the workflow
    of the project, and then develop the project's code. Lastly, you need to test
    the project for its smoothness, check that it's bug/error free, and prepare it
    for the market.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 项目想法是最重要的部分。您需要非常仔细地生成这个想法，并必须识别您项目背后的事实。您需要记住这个项目如何在市场上有效，用户将如何接受您的项目，为什么他们会使用它，为什么他们应该选择您的应用程序而不是其他应用程序，哪些功能将使其与其他现有类似项目不同，等等。在生成想法后，您需要在脑海中构思一个草稿，然后将其写在纸上，设计项目的流程，然后开发项目的代码。最后，您需要测试项目以确保其流畅性，检查是否存在错误或漏洞，并为其上市做准备。
- en: In this chapter, we will create a small project that is like a social network.
    We will name it `Packt Network`. This project will have two parts. One is a server
    and one is a client, and both sides will be written in Kotlin. First of all, we
    create a Spring project where we will build our server and REST API. The data
    will be stored in a MySQL database, and we will handle the database using JDBC,
    JPA, and Hibernate. This data will be protected by the basic authentication of
    Spring Security.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个类似社交网络的小型项目。我们将将其命名为“Packt Network”。该项目将有两个部分：一个是服务器，另一个是客户端，这两部分都将使用Kotlin编写。首先，我们创建一个Spring项目，我们将在这里构建我们的服务器和REST
    API。数据将存储在MySQL数据库中，我们将使用JDBC、JPA和Hibernate来处理数据库。这些数据将通过Spring Security的基本身份验证得到保护。
- en: In our second project, we will create an Android application and handle the
    created REST APIs of the server. We will use Retrofit to handle the REST APIs
    and the network. Then we will create a registration and login page to create and
    login as a user, using a username and password. After this, the user can post
    a status and see a list of all the other user's statuses. A comment can be also
    posted in a status.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第二个项目中，我们将创建一个Android应用程序，并处理服务器创建的REST API。我们将使用Retrofit来处理REST API和网络。然后我们将创建一个注册和登录页面，使用用户名和密码创建和登录用户。之后，用户可以发布状态并查看其他所有用户的状态列表。也可以在状态中发布评论。
- en: Now we will start to design and develop our server-side project using Spring.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将开始设计和开发我们的服务器端项目，使用Spring框架。
- en: Server side
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端
- en: On the server side, we are using the Spring Framework. We will handle all the
    data with a MySQL database and protect the resources with basic authentication.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，我们使用Spring框架。我们将使用MySQL数据库处理所有数据，并使用基本认证保护资源。
- en: First of all, we will design the project's backend logic. Then we will plan
    for the REST API. We will create a data model using MySQL Workbench. Then we will
    create the project using [http://start.spring.io](http://start.spring.io). Then
    we will create the database entity using JPA and Hibernate, and we will check
    that the REST API is working. To check this, we will use an HTTP client software
    tool named Insomnia. Then we will implement basic authentication with Spring Security
    to protect our resources. Lastly, we will give you a task to complete, on upgrading
    the project, and becoming a contributor to this project on GitHub.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将设计项目的后端逻辑。然后我们将规划REST API。我们将使用MySQL Workbench创建数据模型。然后我们将使用 [http://start.spring.io](http://start.spring.io)
    创建项目。然后我们将使用JPA和Hibernate创建数据库实体，并检查REST API是否工作。为此，我们将使用名为Insomnia的HTTP客户端软件工具。然后我们将使用Spring
    Security实现基本认证以保护我们的资源。最后，我们将给你一个任务来完成，即升级项目，并成为GitHub上这个项目的贡献者。
- en: Creating the design
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建设计
- en: As we mentioned before, this project will be like a social media platform; the
    users can post their statuses and others can see them in the timeline and can
    like it, add comments, and so on. For this project, there won't be a UI for the
    server side. We will create a backend server. To create this server, we will have
    to create a REST API that can be used by the client application. To do this, we
    need to create a database based on our REST API.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，这个项目将类似于一个社交媒体平台；用户可以发布他们的状态，其他人可以在时间轴中看到它们，并可以点赞、添加评论等等。对于这个项目，服务器端不会有UI。我们将创建一个后端服务器。为了创建这个服务器，我们需要创建一个客户端应用程序可以使用的REST
    API。为此，我们需要基于我们的REST API创建一个数据库。
- en: First of all, we split our database table names, the HTTP function requests,
    and the URL path.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将数据库表名、HTTP函数请求和URL路径分开。
- en: 'There will be four tables:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将有四个表：
- en: '![](img/9ba5c0ba-4f49-43b7-a2e7-9703757538d9.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ba5c0ba-4f49-43b7-a2e7-9703757538d9.png)'
- en: 'Let''s have a look at each of them:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看它们：
- en: One is for the users. All their information will be stored in a table named
    `Profile`.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中一个是用于用户的。所有用户的信息都将存储在一个名为 `Profile` 的表中。
- en: There will be another table named `Post`, where all the posted statuses of all
    the users will be stored.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还将有一个名为 `Post` 的表，其中将存储所有用户的发布状态。
- en: Another table named `Comment` will store all the comments of all the posted
    statuses.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个名为 `Comment` 的表将存储所有发布状态的评论。
- en: Another table named `LikeObj` will store all the likes of all the posted statuses,
    but we won't provide this feature for the comments.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个名为 `LikeObj` 的表将存储所有发布状态的点赞，但我们不会为评论提供此功能。
- en: Now we will create the URL path of the REST API using an HTTP function request,
    and all the output will be designed for JSON. We are using JSON because it is
    very easy to handle and understand for all developers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用HTTP函数请求创建REST API的URL路径，并且所有输出都将设计为JSON。我们使用JSON，因为它非常容易为所有开发者处理和理解。
- en: 'Regarding the `Profile` table, here are the URL paths of the HTTP requests:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `Profile` 表，以下是HTTP请求的URL路径：
- en: '`POST http://localhost:8080/user/new`: This request will create a user profile
    with all the information the user has posted on their profile'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST http://localhost:8080/user/new`: 这个请求将创建一个包含用户在个人资料中发布的所有信息的用户资料'
- en: '`GET http://localhost:8080/user/{id}`: This request will get the details of
    the given `id` holder'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET http://localhost:8080/user/{id}`: 这个请求将获取给定 `id` 持有者的详细信息'
- en: '`PUT http://localhost:8080/user/{id}`: This request will update the user details
    of the given `id` holder'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT http://localhost:8080/user/{id}`: 这个请求将更新给定`id`持有者的用户详细信息'
- en: '`DELETE http://localhost:8080/user/{id}`: This request will delete the user
    details of the given `id` holder, including all the posts, comments, and likes
    from this user'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE http://localhost:8080/user/{id}`: 这个请求将删除给定`id`持有者的用户详细信息，包括此用户的所有帖子、评论和点赞'
- en: 'Regarding the `Post` table, here are the URL paths of the HTTP requests:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`Post`表，以下是HTTP请求的URL路径：
- en: '`POST http://localhost:8080/post/{id}/new`: This request will create a post
    from the `id` holder'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST http://localhost:8080/post/{id}/new`: 这个请求将从`id`持有者创建一个帖子'
- en: '`GET http://localhost:8080/posts`: This request will get all the post''s details'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET http://localhost:8080/posts`: 这个请求将获取所有帖子的详细信息'
- en: '`GET http://localhost:8080/post/{id}`: This request will get the post details
    of the given `id` holder'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET http://localhost:8080/post/{id}`: 这个请求将获取给定`id`持有者的帖子详细信息'
- en: '`DELETE http://localhost:8080/post/{id}`: This request will delete the post
    details of the given `id` holder, including all the comments'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE http://localhost:8080/post/{id}`: 这个请求将删除给定`id`持有者的帖子详细信息，包括所有评论'
- en: 'Regarding the `Comment` table, here are the URL paths of the HTTP requests:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`Comment`表，以下是HTTP请求的URL路径：
- en: '`POST HTTP://localhost:8080/comment/{post_id}`: This request will create a
    comment on the `post_id` holder'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST http://localhost:8080/comment/{post_id}`: 这个请求将在`post_id`持有者上创建一个评论'
- en: '`DELETE HTTP://localhost:8080/comment/{post_id}`: This request will delete
    the comment of the given `post_id` holder'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE http://localhost:8080/comment/{post_id}`: 这个请求将删除给定`post_id`持有者的评论'
- en: 'Regarding the `LikeObj` table, here are the URL paths of the HTTP requests:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`LikeObj`表，以下是HTTP请求的URL路径：
- en: '`POST http://localhost:8080/like/new`: This request will like a post of the
    `post_id` holder'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST http://localhost:8080/like/new`: 这个请求将点赞`post_id`持有者的帖子'
- en: '`DELETE ttp://localhost:8080/like/new`: This request will unlike a post of
    the `post_id` holder'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE http://localhost:8080/like/new`: 这个请求将取消点赞`post_id`持有者的帖子'
- en: Developing a database model
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发数据库模型
- en: 'We will use JPA, and one of the most noticeable points is that creating a database
    is not recommended, because as we know, JPA will automatically create database
    tables with fields using the entity class of the project. But still, we need to
    create a demo database and draw an EER diagram. You can create your EER on paper
    or you can create one digitally using MySQL Workbench. Here, we will use MySQL
    Workbench, which has a free version. This is one of the best tools for developing
    a database or creating a model for a database:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用JPA，最明显的点之一是不建议创建数据库，因为众所周知，JPA将自动使用项目的实体类创建数据库表和字段。但仍然，我们需要创建一个演示数据库并绘制一个EER图。您可以在纸上创建EER，或者您可以使用MySQL
    Workbench在数字上创建一个。这里，我们将使用MySQL Workbench，它有一个免费版本。这是开发数据库或为数据库创建模型的最佳工具之一：
- en: 'You need to download this software from[ https://dev.mysql.com/downloads/workbench/](https://dev.mysql.com/downloads/workbench/),
    if you don''t have it. Then install and run it. As we mentioned before, we have
    some default values:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要从[这里](https://dev.mysql.com/downloads/workbench/)下载此软件，如果您还没有的话。然后安装并运行它。正如我们之前提到的，我们有一些默认值：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open this application and select the Models option, as shown in the following
    screenshot:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开此应用程序并选择模型选项，如下面的截图所示：
- en: '![](img/b487cdb6-845c-4217-896c-38e57fbaca3d.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b487cdb6-845c-4217-896c-38e57fbaca3d.png)'
- en: 'Click the plus (+) sign to create a new model for our application. In the new
    window, you will find all the necessary features to create a model. Save this
    model as `my_app`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击加号（+）为我们的应用程序创建一个新的模型。在新窗口中，您将找到创建模型所需的所有必要功能。将此模型保存为`my_app`：
- en: '![](img/8fb2a6c7-66fc-4fb5-8c81-c3697b4f0017.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fb2a6c7-66fc-4fb5-8c81-c3697b4f0017.png)'
- en: Create a table called `Profile`. The columns will be `id (primary key)`, `username`,
    `password`, `email`, `first_name`, `last_name`, `acc_created_time`, `contact_number`,
    `dob`, `city`, and `country`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Profile`的表。列将是`id（主键）`、`username`、`password`、`email`、`first_name`、`last_name`、`acc_created_time`、`contact_number`、`dob`、`city`和`country`。
- en: A table called `Post`. The columns will be `id (primary key)` and `text`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Post`的表。列将是`id（主键）`和`text`。
- en: Create another table called `Comment`. The columns will be `id (primary key)` and `text`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`Comment`的表。列将是`id（主键）`和`text`。
- en: Lastly, create a table called `Like`. The column will be `id (primary key)`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个名为`Like`的表。列将是`id（主键）`。
- en: 'But there are some relationships between the tables:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，表之间有一些关系：
- en: Between `Profile` and `Post`: There is a many-to-one relation for `Post` because
    a user can post multiple statuses, and each post has only one user.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Profile` 和 `Post` 之间：`Post` 存在多对一关系，因为一个用户可以发布多条状态，而每条状态只有一个用户。
- en: 'Between  `Profile` and `Comment`: There is a many-to-one relation for `Comment` because
    a user can post multiple comments, and each comment has only one user.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Profile` 和 `Comment` 之间：`Comment` 存在多对一关系，因为一个用户可以发表多条评论，而每条评论只有一个用户。
- en: Between  `Profile` and `Like`: There is a many-to-one relation for `Like` because
    a user can like multiple  posts, and each like has only one user.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Profile` 和 `Like` 之间：`Like` 存在多对一关系，因为一个用户可以点赞多个帖子，而每个点赞只有一个用户。
- en: Between  `Post` and `Comment`: There is a one-to-many relation for `Post` because
    a post may have multiple comments, but a comment is for only one specific post.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Post` 和 `Comment` 之间：`Post` 存在一对多关系，因为一篇文章可能有多个评论，但评论只针对一篇文章。
- en: 'Between  `Post` and `Like`**:** There is a one-to-many relation for `Post` because
    a post may have multiple likes, but each like is for only one specific post:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Post` 和 `Like` 之间：`Post` 存在一对多关系，因为一篇文章可能有多个点赞，但每个点赞只针对一篇文章：
- en: '![](img/aea017e3-8e32-477b-8c67-9e8f71ba0b06.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aea017e3-8e32-477b-8c67-9e8f71ba0b06.png)'
- en: 'So after all the relations, we can see the table names of the database, as
    shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在所有关系确定之后，我们可以看到数据库的表名，如下面的截图所示：
- en: '![](img/61a24944-37fc-4692-ae5d-8fa9aea80ad9.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61a24944-37fc-4692-ae5d-8fa9aea80ad9.png)'
- en: 'Finally, you can create the EER diagram by clicking on the EER Diagram icon,
    as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过点击 EER 图标创建 EER 图，如下面的截图所示：
- en: '![](img/973c7439-afc1-4d49-bc49-02593293139e.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/973c7439-afc1-4d49-bc49-02593293139e.png)'
- en: This is the EER diagram model of our project. You may find two extra tables,
    named `post_likes` and `post_comments`. It generates these using JPA and Hibernate.
    We will discuss this later.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的项目的 EER 图模型。你可能还会发现两个额外的表，名为 `post_likes` 和 `post_comments`。这些表是通过 JPA
    和 Hibernate 生成的。我们将在稍后讨论这个问题。
- en: So, our database modeling is done. Now you can export it as SQL and create the
    database for the project. But we recommend you not to do this because we need
    to do some modification.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的数据库建模已经完成。现在你可以将其导出为 SQL 并为项目创建数据库。但我们建议你不要这样做，因为我们需要进行一些修改。
- en: Now create the project.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建项目。
- en: Creating a project
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'To create a project, go to  [https://start.spring.io](https://start.spring.io)
    and create a Kotlin-based project. Here are the dependencies of the project:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个项目，请访问 [https://start.spring.io](https://start.spring.io) 并创建一个基于 Kotlin
    的项目。以下是项目的依赖项：
- en: Web
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web
- en: JDBC
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDBC
- en: MySQL
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL
- en: DevTools
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevTools
- en: JPA
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA
- en: H2
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: H2
- en: You can find these in the `pom.xml` file. There you can update, add, or remove
    the dependencies.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `pom.xml` 文件中找到这些依赖项。在那里你可以更新、添加或删除依赖项。
- en: To enable JPA auditing, you need to annotate `@EnableJpaAuditing` annotation on
    the `SocialNetworkApplication.kt` class. It will enable the use of JPA functionalities.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用 JPA 审计，你需要在 `SocialNetworkApplication.kt` 类上添加 `@EnableJpaAuditing` 注解。这将启用
    JPA 功能的使用。
- en: 'Here is the code for this class:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个类的代码：
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating entities
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建实体
- en: First of all, we need to create four as the table details of the database. The four
    entities are `Profile`, `Post`, `Comment`, and `LikeObj`. In the following sections,
    you'll learn how to create the entity classes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建四个数据库表细节。这四个实体是 `Profile`、`Post`、`Comment` 和 `LikeObj`。在接下来的章节中，你将学习如何创建实体类。
- en: Creating a Profile entity
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 `Profile` 实体
- en: 'Create a `Profile` entity named `Profile.kt` with the `@Entity` annotation
    to convert this class into an entity class. Here is the code of this model class
    (the entire code can be found at the provided GitHub Link):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@Entity` 注解创建一个名为 `Profile.kt` 的 `Profile` 实体，将其转换为实体类。以下是这个模型类的代码（完整代码可以在提供的
    GitHub 链接中找到）：
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this class, we have `11` elements, which contain all the user''s details.
    We have four constructors to use this model according to our tasks. Here are the constructors:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们有 `11` 个元素，包含所有用户详情。我们有四个构造函数，可以根据我们的任务使用这个模型。以下是构造函数：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now let''s discuss the annotations that are used in this class:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来讨论这个类中使用的注解：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: According to the previous code, we used `@Id` annotation on the `id`, which
    means that `id` is the primary key of the `Profile` entity. The `@GeneratedValue`
    annotation means it increments the value of `id`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的代码，我们在 `id` 上使用了 `@Id` 注解，这意味着 `id` 是 `Profile` 实体的主键。`@GeneratedValue`
    注解表示它会增加 `id` 的值。
- en: 'Here is a snippet of the code for the `password` object:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `password` 对象的代码片段：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: According to this code, `@JsonIgnore` uses variables or functions. If you use
    it, then the requested JSON won't show this variable. Here, we used it on the
    `password`, and that means no-one can fetch the password.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这段代码，`@JsonIgnore` 使用变量或函数。如果你使用它，那么请求的 JSON 不会显示这个变量。在这里，我们用它来处理 `password`，这意味着没有人可以获取密码。
- en: '`@JsonProperty` defines that during the serialization and deserialization of
    JSON, it changes the visibility of the logical property of its element.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`@JsonProperty` 定义了在 JSON 的序列化和反序列化过程中，它改变了其元素逻辑属性的可见性。'
- en: Creating a Post entity
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个帖子实体
- en: 'Create a `Post` entity named `Post.kt` with the `@Entity` annotation to convert
    this class into an entity class. Here is the code of this model class:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `Post.kt` 的帖子实体，并使用 `@Entity` 注解将其转换为实体类。以下是这个模型类的代码：
- en: '[PRE6]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here we have two elements and one constructor. Here is the constructor:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个元素和一个构造函数。以下是构造函数：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It''s time now to discuss some new annotations that have been used in this
    class:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候讨论一些在这个类中使用的新注解了：
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`@ManyToOne` on the `Profile` variable means that this will indicate which
    user posted that specific status.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ManyToOne` 在 `Profile` 变量上表示这将指示哪个用户发布了那个特定的状态。'
- en: '`@JoinColumn` means its access element `Profile` is connected with the foreign
    key using `profile_id`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`@JoinColumn` 表示其访问元素 `Profile` 通过 `profile_id` 与外键连接。'
- en: '`@JsonIgnoreProperties(......)` ignores the JSON properties during deserialization.
    In this project, when you get the post''s JSON, in the `profile` attribute you
    will only find the `id`. Here is a simple example of a JSON:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`@JsonIgnoreProperties(......)` 注解在反序列化过程中忽略 JSON 属性。在这个项目中，当你获取帖子的 JSON 时，在
    `profile` 属性中你只会找到 `id`。以下是一个简单的 JSON 示例：'
- en: '![](img/0d9033c7-88c3-423a-95a8-b38ed8836268.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0d9033c7-88c3-423a-95a8-b38ed8836268.png)'
- en: You can see `"id":0`, which is the `id` of the post.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到 `"id":0`，这是帖子的`id`。
- en: 'Now create a mutable list of the `Comment` and annotate it with `@OneToMany`,
    as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个 `Comment` 的可变列表，并用 `@OneToMany` 注解它，如下所示：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`@OneToMany(....)` means a post can be many comments and likes.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`@OneToMany(....)` 表示一个帖子可以有多个评论和点赞。'
- en: '`cascade = [CascadeType.ALL]` attribute is a feature of Hibernate. It means
    you can apply all primary cascade types.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`cascade = [CascadeType.ALL]` 属性是 Hibernate 的一个特性。这意味着你可以应用所有主要级联类型。'
- en: '`fetch = FetchType.LAZY` means it fetches the data lazily during the first
    access.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetch = FetchType.LAZY` 表示在第一次访问时它会懒加载数据。'
- en: '`orphanRemoval=true` means if the post has been deleted, then all the comments
    and likes on this post will be deleted automatically.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`orphanRemoval=true` 表示如果帖子被删除，那么这个帖子上的所有评论和点赞也会自动删除。'
- en: Creating a Comment entity
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建评论实体
- en: 'Create a `Comment` entity named `Comment.kt` with the `@Entity` annotation
    to convert this class into an entity class. Here is the code of this model class:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `Comment.kt` 的 `Comment` 实体，并使用 `@Entity` 注解将其转换为实体类。以下是这个模型类的代码：
- en: '[PRE10]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here we have three elements and one constructor. Here is the constructor:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有三个元素和一个构造函数。以下是构造函数：
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating like entity
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建点赞实体
- en: 'Create a like entity named `LikeObj.kt` with the `@Entity` annotation to convert
    this class into an entity class. Here is the code of this model class:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `LikeObj.kt` 的点赞实体，并使用 `@Entity` 注解将其转换为实体类。以下是这个模型类的代码：
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here we have one element and one constructor. Here is the constructor:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个元素和一个构造函数。以下是构造函数：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating repositories
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建仓库
- en: 'Create a repository for a profile named `ProfileRepository.kt` and implement
    the `JpaRepository` repository that has all the necessary CRUD request methods
    to fetch the database. Here is the code for this class:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `ProfileRepository.kt` 的用户资料仓库，并实现具有所有必要的 CRUD 请求方法的 `JpaRepository`
    仓库以获取数据库。以下是这个类的代码：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now create a repository for a post named `PostRepository.kt` and implement
    the `JpaRepository` repository that has all the necessary CRUD request methods
    to fetch the database. Here is the code for this class:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个名为 `PostRepository.kt` 的帖子仓库，并实现具有所有必要的 CRUD 请求方法的 `JpaRepository` 仓库以获取数据库。以下是这个类的代码：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then create a repository for a comment named `CommentRepository.kt` and implement
    the `JpaRepository<>` repository that has all the necessary CRUD request methods
    to fetch the database. Here is the code for this class:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个名为 `CommentRepository.kt` 的评论仓库，并实现具有所有必要的 CRUD 请求方法的 `JpaRepository<>`
    仓库以获取数据库。以下是这个类的代码：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Lastly, create a repository for the like model named `LikeRepository.kt` and
    implement the `JpaRepository<>` repository that has all the necessary CRUD request methods
    to fetch the database. Here is the code for this class:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建一个名为 `LikeRepository.kt` 的 `like` 模型存储库，并实现具有所有必要 CRUD 请求方法的 `JpaRepository<>`
    存储库以获取数据库。以下是该类的代码：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To delete all the data regarding the deleted post, we need to create a repository
    for the profile named `DeletePCLRepository.kt` and implement an interface named `DeletePCLByIDInterface.kt`
    with one function, which will delete all the data regarding the deleted user.
    Here is the code for the interface:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除与已删除帖子相关的所有数据，我们需要为名为 `DeletePCLRepository.kt` 的 `profile` 创建一个存储库，并实现一个名为
    `DeletePCLByIDInterface.kt` 的接口，该接口有一个函数，用于删除与已删除用户相关的所有数据。以下是该接口的代码：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is the code for the `DeletePCLRepository.kt` class:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `DeletePCLRepository.kt` 类的代码：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To check a registered user, create a repository named `UserExistRepository.kt` and
    implement an interface named `UserExistInterface.kt` with two functions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查注册用户，创建一个名为 `UserExistRepository.kt` 的存储库，并实现一个名为 `UserExistInterface.kt`
    的接口，该接口有两个函数。
- en: 'Here is the code for the interface:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是接口的代码：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this interface, `isUserExist(username: String)` will search the `Profile`
    table of the database and return a `Boolean` based on the existing of the user.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个接口中，`isUserExist(username: String)` 将搜索数据库的 `Profile` 表并基于用户的存在返回一个 `Boolean`。'
- en: 'Here is the code for the `UserExistRepository.kt` class:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `UserExistRepository.kt` 类的代码：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this class, we add the `@Autowired` annotation to autowire the `JdbcTemplate`
    to utilize the JDBC database. We `override` the `issue exist(name: String)` function.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个类中，我们添加了 `@Autowired` 注解来自动装配 `JdbcTemplate` 以利用 JDBC 数据库。我们 `重写` 了 `issue
    exist(name: String)` 函数。'
- en: '`"SELECT count(*) FROM PROFILE WHERE username = ?"` is an SQL query that is
    used to search the existing users from the `Profile` table of the database. If
    there is a user, then it will return `true`.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`"SELECT count(*) FROM PROFILE WHERE username = ?"` 是一个用于从数据库的 `Profile` 表中搜索现有用户的
    SQL 查询。如果存在用户，则它将返回 `true`。'
- en: Creating a controller
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: 'Now, create a controller class named `AppController.kt` and annotate it with `@RestController`
    to convert it into a controller class:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 `AppController.kt` 的控制器类，并使用 `@RestController` 注解将其转换为控制器类：
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now autowire the repositories, as shown in the following code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下代码自动装配存储库。
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Then create HTTP function requests. We won't discuss this here because we have
    already described the use of the HTTP requests in [Chapter 4](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml), *Spring
    Modules for Android*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建 HTTP 函数请求。我们在这里不讨论这个问题，因为我们已经在 [第 4 章](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml)，*Spring
    Modules for Android* 中描述了 HTTP 请求的使用。
- en: Creating a profile's HTTP requests
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建个人资料的 HTTP 请求
- en: Now create HTTP function requests for the profiles.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为个人资料创建 HTTP 请求函数。
- en: 'Here is the function for creating a profile''s `POST` request:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建个人资料 `POST` 请求的函数：
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is the function for creating a profile''s `GET` request:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建个人资料 `GET` 请求的函数：
- en: '[PRE25]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here is the function for creating a profile''s `PUT` request:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建个人资料 `PUT` 请求的函数：
- en: '[PRE26]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here is the function for creating a profile''s `DELETE` request:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建个人资料 `DELETE` 请求的函数：
- en: '[PRE27]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Creating a post's HTTP requests
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建帖子的 HTTP 请求
- en: Now create the HTTP request functions for the `Post`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为 `Post` 创建 HTTP 请求函数。
- en: 'Here is the function for creating a post''s `POST` request:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建帖子 `POST` 请求的函数：
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here is the function for the creating a post''s `GET` request to fetch all
    the posts:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建帖子 `GET` 请求以获取所有帖子的函数：
- en: '[PRE29]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here is the function for creating a post''s `GET` request to fetch one post:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建帖子 `GET` 请求以获取单个帖子的函数：
- en: '[PRE30]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here is the function for the creating a post''s `PUT` request to update one
    post:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建帖子 `PUT` 请求以更新单个帖子的函数：
- en: '[PRE31]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here is the function for creating a post''s  `DELETE` request:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建帖子 `DELETE` 请求的函数：
- en: '[PRE32]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Creating a comment's HTTP requests
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建评论的 HTTP 请求
- en: Now create the HTTP request functions for the `Comment`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建 `Comment` 的 HTTP 请求函数。
- en: 'Here is the function for creating a comment''s `POST` request:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建评论 `POST` 请求的函数：
- en: '[PRE33]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: First, we need to initialize an `optionalPost` object by finding the existing
    post. Then, if the post exists, we create a `Comment` model named `myComment`,
    then add the mutable list of `Comment`, and then save the post using `postRepository`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要通过查找现有帖子来初始化一个 `optionalPost` 对象。然后，如果帖子存在，我们创建一个名为 `myComment` 的 `Comment`
    模型，然后添加可变列表的 `Comment`，然后使用 `postRepository` 保存帖子。
- en: 'Here is the function for creating a comment''s `GET` request:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建评论 `GET` 请求的函数：
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here is the function for creating a comment''s `PUT` request:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建评论 `PUT` 请求的函数：
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here is the function for creating a comment''s `DELETE` request:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建评论 `DELETE` 请求的函数：
- en: '[PRE36]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Implementing security
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现安全
- en: 'We are implementing basic authentication security. It will be similar to what
    we covered in *[Chapter 5](d27e39f7-8dea-4796-9025-cfb8bc345283.xhtml), Securing
    Applications with Spring Security*. But there we used **`inMemoryAuthentication()`**,
    and here we will fetch the username and password from the database and implement
    them for the project using `UserDetailsService`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在实现基本认证安全。它将类似于我们在*[第 5 章](d27e39f7-8dea-4796-9025-cfb8bc345283.xhtml)，使用
    Spring Security 保护应用程序*中讨论的内容。但我们在那里使用了 **`inMemoryAuthentication()`**，而在这里我们将从数据库中获取用户名和密码，并使用
    `UserDetailsService` 为项目实现它们：
- en: Create a service class named `CustomUserDetailsService.kt`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `CustomUserDetailsService.kt` 的服务类。
- en: 'Implement the `UserDetailsService` and annotated by `@Service` to make it a
    service class. Here is the code for this service class:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 `UserDetailsService` 并用 `@Service` 注解，使其成为一个服务类。以下是这个服务类的代码：
- en: '[PRE37]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here, we autowire the `UserByNameRepository.kt` repository and override `loadUserByUsername(username:
    String)`. We will fetch the `username` and `password` from the repository and
    match them with the `username` and `password` given by the client. Here is the
    code for `UserByNameRepository.kt`:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在这里，我们自动装配了 `UserByNameRepository.kt` 存储库并覆盖了 `loadUserByUsername(username:
    String)`。我们将从存储库中获取 `username` 和 `password` 并与客户端提供的 `username` 和 `password` 进行匹配。以下是
    `UserByNameRepository.kt` 的代码：'
- en: '[PRE38]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now create the code for the `RowMapper` class of the user named `UserRowMapper.kt`
    to fetch the user details. Here is a piece of code from this class:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建名为 `UserRowMapper.kt` 的用户 `RowMapper` 类的代码，以获取用户详细信息。以下是这个类中的一段代码：
- en: '[PRE39]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let''s create a `WebSecurityConfigurerAdapter` class named `SecurityConfigurer.kt`
    and annotate it with `@Configuration` and `@EnableWebSecurity` to make a configuration
    file and enable web security. Here is the code for the `SecurityConfigurer.kt`
    class:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `SecurityConfigurer.kt` 的 `WebSecurityConfigurerAdapter` 类，并用 `@Configuration`
    和 `@EnableWebSecurity` 注解它，以创建一个配置文件并启用网络安全。以下是 `SecurityConfigurer.kt` 类的代码：
- en: '[PRE40]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the previous code, we''ve done the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们做了以下操作：
- en: To use this registration URL path, `"/profile/new"`, any user can access. It
    doesn't need a `username` and `password`.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用此注册 URL 路径 `"/profile/new"`，任何用户都可以访问。它不需要 `username` 和 `password`。
- en: We use `PasswordEncoder` to encode the password.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `PasswordEncoder` 对密码进行编码。
- en: 'We autowired `configureGlobal(auth: AuthenticationManagerBuilder)` and passed `CustomUserDetailsService`
    via `auth.userDetailsService(customUserDetailsService)` to check and match the
    username.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '我们自动装配了 `configureGlobal(auth: AuthenticationManagerBuilder)` 并通过 `auth.userDetailsService(customUserDetailsService)`
    传递 `CustomUserDetailsService` 来检查和匹配用户名。'
- en: Modified application.properties
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改后的 `application.properties`
- en: 'The `application.properties` file is used to connect the database with the
    application and define how the database will behave. Here is the code for `application.properties`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`application.properties` 文件用于将数据库与应用程序连接，并定义数据库将如何行为。以下是 `application.properties`
    的代码：'
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Here we have used the database named `my_app`, and the schema is `my_app_schema`.
    We disable `useSSL` with `useSSL=false`, and to retrieve the public key we use `allowPublicKeyRetrieval=true`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了名为 `my_app` 的数据库，模式为 `my_app_schema`。我们通过 `useSSL=false` 禁用 `useSSL`，并且为了检索公钥，我们使用
    `allowPublicKeyRetrieval=true`。
- en: Here, we use `spring.jpa.hibernate.ddl-auto = update`, which means after restarting
    your server the data won't be lost.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用 `spring.jpa.hibernate.ddl-auto = update`，这意味着在重启服务器后数据不会丢失。
- en: Client side
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端
- en: After creating our backend, we need to create a client-based application to
    utilize the server. In this part, we will create an Android application as a client-based
    frontend application. To create the application, we need to make a design before
    starting coding. We will create an Android application and handle HTTP requests
    with the use of Retrofit.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的后端之后，我们需要创建一个基于客户端的应用程序来利用服务器。在这一部分，我们将创建一个 Android 应用程序作为基于客户端的前端应用程序。为了创建应用程序，我们需要在开始编码之前进行设计。我们将创建一个
    Android 应用程序，并使用 Retrofit 处理 HTTP 请求。
- en: First of all, we will design the workflow of the application.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将设计应用程序的工作流程。
- en: Creating the design
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建设计
- en: To design our application, we have to keep in mind what the project is about
    and how the backend was designed. As we know, this is a mini-social-network-type
    app. So we have to create some model objects that are exactly the same as the
    server's model objects. In the application's workflow, we will have some layouts
    that will represent our applications.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设计我们的应用程序，我们必须牢记项目的内容以及后端是如何设计的。正如我们所知，这是一个类似微型社交网络的程序。因此，我们必须创建一些与服务器模型对象完全相同的模型对象。在应用程序的工作流程中，我们将有一些布局来表示我们的应用程序。
- en: 'The workflow is shown in the following diagram:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程如图所示：
- en: '![](img/e37b34b5-f16e-4419-b2ee-df7d626d109b.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e37b34b5-f16e-4419-b2ee-df7d626d109b.png)'
- en: 'Here are the brief of the workflow according to this diagram:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下图表，以下是工作流程的简要说明：
- en: '**Login page**: If you have a registered account, you can input the username
    and password to enter the application''s main page. Or, if you are new, you need
    to go to the registration page and register an account.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录页面**：如果您有注册账户，您可以输入用户名和密码进入应用程序的主页。或者，如果您是新手，您需要转到注册页面并注册一个账户。'
- en: '**Registration page**: This is for registering an account.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册页面**：这是用于注册账户的。'
- en: '**Home activity**: This is the main part of your application.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页活动**：这是您应用程序的主要部分。'
- en: '**Profile**: You can see your details here.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人资料**：您可以在这里查看您的详细信息。'
- en: '**Status details**: You can see the details of any post that you click on.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态详情**：您可以查看您点击的任何帖子的详细信息。'
- en: So far, this project is based on these layouts. Now we need to create an Android
    application.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，该项目基于这些布局。现在我们需要创建一个 Android 应用程序。
- en: Creating a project
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'To create a new project, go to Android Studio and click New Project. This time,
    select Android for Mobile**,** then select Basic Activity, as shown in the following
    screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新项目，请转到 Android Studio 并点击新建项目。这次，选择 Android for Mobile**，然后选择 Basic Activity，如图所示：
- en: '![](img/9b2c13e5-7bfe-445a-9368-10bc7dd5034b.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9b2c13e5-7bfe-445a-9368-10bc7dd5034b.png)'
- en: Implementing dependencies
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现依赖项
- en: 'After building the project, add these dependencies in the `dependencies{}`
    block of `build.gradle (Module:app)`. These are for Material Design, Retrofit,
    and RxJava:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建项目后，在 `build.gradle (Module:app)` 的 `dependencies{}` 块中添加以下依赖项：这些是用于 Material
    Design、Retrofit 和 RxJava 的：
- en: '[PRE42]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Creating HomeActivity
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主页活动
- en: After creating the project, you will find `MainActivity`, but here we have renamed
    it as `HomeActivity.kt`, and the layout name is `activity_home`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，你会找到 `MainActivity`，但在这里我们将其重命名为 `HomeActivity.kt`，布局名称为 `activity_home`。
- en: 'Now go to the activity, and here is the default code for this class:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到活动，以下是此类的默认代码：
- en: '[PRE43]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Modifying the layout
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改布局
- en: 'First, create a layout named `home_content.xml`, add `FrameLayout`, and add
    an `id` name. Here is the code for this XML file (you can see the full version
    on GitHub):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为 `home_content.xml` 的布局，添加 `FrameLayout` 并添加一个 `id` 名称。以下是此 XML 文件的代码（您可以在
    GitHub 上查看完整版本）：
- en: '[PRE44]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Creating models
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: To create the models, we need to keep the same model items as the backend. But
    we will also include the `Gson` annotation, `@SerializedName`. The value of the
    `@SerializedName` annotation is used when serializing and deserializing objects.
    Here, `@SerializedName("username")` is stating that this is the name of the `Username`
    in the JSON. Though we implement the Gson, you can call these model classes as
    the response of the API. That means when this application requests the server
    and fetches the content, then this content will be returned with the help of these
    model classes.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建模型，我们需要保持与后端相同的模型项。但我们将包括 `Gson` 注解，`@SerializedName`。`@SerializedName`
    注解的值用于对象的序列化和反序列化。在这里，`@SerializedName("username")` 表示这是 JSON 中的 `Username` 名称。尽管我们实现了
    Gson，但你可以将这些模型类作为 API 的响应来调用。这意味着当这个应用程序请求服务器并获取内容时，这些内容将通过这些模型类返回。
- en: Creating profile model
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建个人资料模型
- en: 'Create a `Profile` data class named `Profile.kt`, and here is the sample code:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `Profile.kt` 的 `Profile` 数据类，以下是一个示例代码：
- en: '[PRE45]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Creating post model
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建帖子模型
- en: 'Create a `Post` data class named `Post.kt`, and here is the sample code:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `Post.kt` 的 `Post` 数据类，以下是一个示例代码：
- en: '[PRE46]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Creating a comment model
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建评论模型
- en: 'Create a comment data class named `Comment.kt`, and here is the sample code:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `Comment.kt` 的注释数据类，以下是一个示例代码：
- en: '[PRE47]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Creating services
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建服务
- en: This is the most important section. This will send the `GET` request to the
    server to fetch the data from the server. First of all, we will create the services
    of the model classes. We will create the HTTP request functions using the Retrofit
    annotation, which are explained in the section called *HTTP Request Functions* in [Chapter
    4](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml), *Spring Modules for Android*.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最重要的部分。这将向服务器发送 `GET` 请求以获取数据。首先，我们将创建模型类的服务。我们将使用 Retrofit 注解创建 HTTP 请求函数，这些函数在
    [第 4 章](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml) 中称为 *HTTP 请求函数* 的部分中进行了解释，*Android
    的 Spring 模块*。
- en: Creating the profile service
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建个人资料服务
- en: 'According to our server, we have four `HTTP` requests for the profile. So we
    will create three `HTTP` requests using the Retrofit annotations. Now create an
    interface named `ProfileService.kt`, and here is the code:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的服务器，我们有四个针对个人资料的 `HTTP` 请求。因此，我们将使用 Retrofit 注解创建三个 `HTTP` 请求。现在创建一个名为
    `ProfileService.kt` 的接口，以下是代码：
- en: '[PRE48]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Based on the preceding code, here are the brief details of the functions:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的代码，以下是函数的简要细节：
- en: '`registerProfile(@Body profile: Profile)` registers a new profile. You need
    to pass a project object.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registerProfile(@Body profile: Profile)` 注册一个新的个人资料。你需要传递一个项目对象。'
- en: '`getUserList() ` gets all the profiles.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUserList()` 获取所有个人资料。'
- en: '`getUserById(@Query("userId") userId: Long)` gets a profile. You need to pass
    a user ID.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUserById(@Query("userId") userId: Long)` 获取一个个人资料。你需要传递用户 ID。'
- en: Creating the post service
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建帖子服务
- en: 'According to our server, we have three `HTTP` requests for the profile. So
    we will create three `HTTP` requests using the Retrofit annotations. Now create
    an interface named `ProfileService.kt`, and here is the code:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的服务器，我们有三个针对个人资料的 `HTTP` 请求。因此，我们将使用 Retrofit 注解创建三个 `HTTP` 请求。现在创建一个名为
    `ProfileService.kt` 的接口，以下是代码：
- en: '[PRE49]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Based on the preceding code, here is a brief description of the functions:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的代码，以下是函数的简要描述：
- en: '`submitNewPost(@Query("id") id: Long, @Field("text") text: String)` submits
    a new post, and to submit the new post, you need to pass the user ID and the text.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`submitNewPost(@Query("id") id: Long, @Field("text") text: String)` 提交一个新的帖子，提交新帖子时，你需要传递用户
    ID 和文本。'
- en: '`getPostList()` gets all the posts.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPostList()` 获取所有帖子。'
- en: '`getPostById(@Query("id") id: Long)` gets a post. You need to pass a post ID.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPostById(@Query("id") id: Long)` 获取一个帖子。你需要传递帖子 ID。'
- en: Creating the comment service
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建评论服务
- en: 'To handle the comment REST APIs, we will create two `HTTP` requests. So we
    will create two `POST` and `DELETE` requests using the Retrofit annotations. Now
    create an interface named `PostService.kt`, and here is the code:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理评论 REST API，我们将创建两个 `HTTP` 请求。因此，我们将使用 Retrofit 注解创建两个 `POST` 和 `DELETE`
    请求。现在创建一个名为 `PostService.kt` 的接口，以下是代码：
- en: '[PRE50]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`postCommentByPostId(@Path("post_id") postId: Long, @Path("user_id") userId:
    Long,`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`postCommentByPostId(@Path("post_id") postId: Long, @Path("user_id") userId:
    Long,`'
- en: '`@Query("commentText") commentText: String)`  is a `POST` request function,
    and it submits a new comment. You need to pass the `user_id`, `post_id`, and the
    text.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Query("commentText") commentText: String)` 是一个 `POST` 请求函数，用于提交一个新的评论。你需要传递
    `user_id`、`post_id` 和文本。'
- en: '`deleteCommentByPostId(@Path("post_id") postId: Long, @Path("user_id") userId:
    Long,`'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteCommentByPostId(@Path("post_id") postId: Long, @Path("user_id") userId:
    Long,`'
- en: '`@Query("commentText") commentText: String)` is a `DELETE` request function,
    and it deletes the comment. You need to pass the `user_id` and `post_id`.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Query("commentText") commentText: String)` 是一个 `DELETE` 请求函数，用于删除评论。你需要传递
    `user_id` 和 `post_id`。'
- en: So far, all the requests have been created, and now we need to create an API
    service that will hit the server and fetch the JSON.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有请求都已创建，现在我们需要创建一个 API 服务，该服务将击中服务器并获取 JSON。
- en: Creating an API service
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 API 服务
- en: 'We explained this procedure in [Chapter 4,](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml) *Spring
    Modules for Android*. So we will just show you the code and explain the new features.
    Create an object named `APIService.kt` and add `gsonConverter()` and `getOkhttpClient(username,
    password)`:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [第 4 章](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml) 中解释了此过程，*Android 的 Spring
    模块*。因此，我们只需向您展示代码并解释新功能。创建一个名为 `APIService.kt` 的对象，并添加 `gsonConverter()` 和 `getOkhttpClient(username,
    password)`：
- en: '[PRE51]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: If you're confused about `addInterceptor(BasicAuthInterceptor(profileName, password))`,
    then please go to [*Chapter* 5](d27e39f7-8dea-4796-9025-cfb8bc345283.xhtml), *Securing
    Applications with Spring Security*, and check out the section called *Authenticating
    with OkHttp interceptors*.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对`addInterceptor(BasicAuthInterceptor(profileName, password))`感到困惑，请前往[*第5章*](d27e39f7-8dea-4796-9025-cfb8bc345283.xhtml)，*使用Spring
    Security保护应用程序*，并查看名为*使用OkHttp拦截器进行身份验证*的部分。
- en: 'Now we need to initialize the `RetrofitBuilder` functions of the services.
    We have four service interfaces, and now we will create four `RetrofitBuilder`
    functions for them. Add this code in the `APIService.kt` file:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要初始化服务的`RetrofitBuilder`函数。我们有四个服务接口，现在我们将为它们创建四个`RetrofitBuilder`函数。在`APIService.kt`文件中添加以下代码：
- en: '[PRE52]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now we will work for the frontend, which means the activities and layouts.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专注于前端，这意味着活动和布局。
- en: Creating a login activity
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建登录活动
- en: This is the first activity of the app. When users enter the app it will be the
    first thing they see. For the user, they need to go to the register activity to
    register a new profile. After the registration, they will get access to the application.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的第一个活动。当用户进入应用程序时，它将是他们看到的第一件事。对于用户来说，他们需要转到注册活动来注册新配置文件。注册后，他们将能够访问应用程序。
- en: Modifying the layout
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改布局
- en: 'Create an empty activity named `LoginActivity.kt`, and a layout named `activity_login.xml`.
    Here is the code in the `xml` (you will find the full version of this layout on
    GitHub):'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`LoginActivity.kt`的空活动和一个名为`activity_login.xml`的布局。以下是`xml`中的代码（您可以在GitHub上找到该布局的完整版本）：
- en: '[PRE53]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here we have user input for `Username` and `Password`. In this layout, we have
    also one button to log in and one `TextView` to go to the `RegistrationActivity`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有用户输入的`Username`和`Password`。在这个布局中，我们还有一个登录按钮和一个`TextView`，用于转到`RegistrationActivity`。
- en: 'Here is the image preview of this layout:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这个布局的图片预览：
- en: '![](img/95aa2770-ea38-426d-bb91-00ff75a02e04.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图片预览](img/95aa2770-ea38-426d-bb91-00ff75a02e04.png)'
- en: Modifying activity
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改活动
- en: Go to the `LogInActivity.kt` file, where we will input the login information. The
    user needs to provide a `username` and a `password`. Then this information will
    be searched in the `Profile` table of the server database. If there are the same
    `username` and `password` in this `Profile` table, you will be able to enter the
    `MainActivity`, or you will get an error message. If you are a new user, you can
    click New Member? to register a new profile.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`LogInActivity.kt`文件，我们将在这里输入登录信息。用户需要提供一个`username`和`password`。然后这些信息将在服务器数据库的`Profile`表中进行搜索。如果在这个`Profile`表中存在相同的`username`和`password`，您将能够进入`MainActivity`，或者您将收到错误消息。如果您是新用户，您可以点击“New
    Member?”来注册新配置文件。
- en: 'First, we will check `SharedPreferences` to see if we have the saved `username`
    and `password`. It will show in the username and password fields, or it will remain
    blank so you can input the values. Here is the function of this logic:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将检查`SharedPreferences`以查看我们是否保存了`username`和`password`。它将显示在用户名和密码字段中，或者它将保持空白，以便您可以输入值。以下是这个逻辑的功能：
- en: '[PRE54]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now set the `OnClickListener()` listener function in the `TextView` named `need_reg`,
    which will take us to the `RegistrationActivity`. Here is the code for this function:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在名为`need_reg`的`TextView`上设置`OnClickListener()`监听器函数，它将带我们到`RegistrationActivity`。以下是该函数的代码：
- en: '[PRE55]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Login request
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录请求
- en: 'Now we will create a function named `logInUser()`, which will send a `POST` request
    to the server and match the `username` and `password`. In return of failed, it
    gets an error and shows the error message, or it will take to to the `MainActivity`. 
    Here is the function:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个名为`logInUser()`的函数，该函数将向服务器发送`POST`请求并匹配`username`和`password`。如果失败，它将获取错误并显示错误消息，或者它将带您到`MainActivity`。以下是该函数的代码：
- en: '[PRE56]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Here, we store the `username`, `password`, and `userID` if we get the correct
    response.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果我们得到正确的响应，我们将存储`username`、`password`和`userID`。
- en: Creating the registration activity
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建注册活动
- en: Create an activity for registration named `RegistrationActivity.kt`, where we
    will register a new account. Before modifying the code, we need to modify the
    layout.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`RegistrationActivity.kt`的注册活动，我们将在这里注册新账户。在修改代码之前，我们需要修改布局。
- en: Modifying layout
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改布局
- en: 'Create a layout for `RegistrationActivity.kt` named `activity_registration.xml`.
    Here I have added a UI, so please look at the full version of this file on GitHub.
    Here is a piece of code from this file:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 为`RegistrationActivity.kt`创建一个名为`activity_registration.xml`的布局。在这里，我添加了UI，请查看GitHub上的完整版本文件。以下是该文件中的一段代码：
- en: '[PRE57]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Here is the image preview of this layout:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这是此布局的图像预览：
- en: '![](img/52a502f9-35b9-40c3-96c3-25fa55930784.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/52a502f9-35b9-40c3-96c3-25fa55930784.png)'
- en: Modifying the activity
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改活动
- en: 'Here is the code for `RegistrationActivity`:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`RegistrationActivity`的代码：
- en: '[PRE58]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now add some logic to validate the `username`, `password`, and `email id`.
    Here is the code:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加一些逻辑来验证`用户名`、`密码`和`电子邮件ID`。以下是代码：
- en: '[PRE59]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Add a `TextWatcher` inner class, which will send an alert if there is any invalid
    input:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个`TextWatcher`内部类，如果输入有任何无效内容，它将发送一个警报：
- en: '[PRE60]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: When the `username`, `password`, or the `email id` is invalid, it will show
    an alert.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 当`用户名`、`密码`或`电子邮件ID`无效时，它会显示一个警报。
- en: Registering a new profile
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册新资料
- en: 'Now we will create a function called `registerUser()`, which will help you
    to send requests to the server and fetch the output from the server. We will show
    you how to use RxJava in [Chapter 8](1b0061a5-8853-487a-9f44-cb18940046a2.xhtml),
    *Reactive Programming*, and Retrofit in [Chapter 4](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml),
    *Spring Modules for Android*. Here is the code for `registerUser()`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个名为`registerUser()`的函数，该函数将帮助你向服务器发送请求并从服务器获取输出。我们将在第8章[反应式编程](1b0061a5-8853-487a-9f44-cb18940046a2.xhtml)和第4章[Android的Spring模块](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml)中展示如何使用RxJava。以下是`registerUser()`的代码：
- en: '[PRE61]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Here, we will take the contents from `EditText` and create a `Profile` object.
    Then we take an observer that will fetch the profile list as JSON type and handle
    the updated list in the `subscribe()` function. If the result is complete, it
    will return in the first parameter, and then we will save the `username`, `password`,
    and `userID` locally using `SharedPreferences` and return to `LoginActivity`.
    If it throws an error, it will go to the second parameter.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将从`EditText`获取内容并创建一个`Profile`对象。然后我们获取一个观察者，它将作为JSON类型获取配置文件列表，并在`subscribe()`函数中处理更新的列表。如果结果是完整的，它将在第一个参数中返回，然后我们将使用`SharedPreferences`本地保存`用户名`、`密码`和`userID`并返回到`LoginActivity`。如果抛出错误，它将进入第二个参数。
- en: Modifying the main activity
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改主活动
- en: This is our home page. Here, you can see all the posts. We need to modify our
    layout and the activity class.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的主页。在这里，你可以看到所有帖子。我们需要修改我们的布局和活动类。
- en: Modifying the layout
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改布局
- en: 'The layout of `MainActivity` is in the `activity_main.xml` file. Here, we have
    added `RecyclerView` to show the list, one `FabButton` to submit the post, and
    a `TextView` to show if there is no post available. Here is a piece of the code:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainActivity`的布局在`activity_main.xml`文件中。在这里，我们添加了`RecyclerView`以显示列表，一个`FabButton`用于提交帖子，以及一个`TextView`以显示如果没有帖子可用。以下是代码片段：'
- en: '[PRE62]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Modifying the activity
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改活动
- en: 'Go to `MainAcitivty.kt`. Here, we have `RecycleView` and the post adapter.
    We will add a global `List<Post>` and set the `recycleView` in the `onCreate()`
    function like this:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`MainAcitivty.kt`。在这里，我们有`RecycleView`和帖子适配器。我们将在`onCreate()`函数中添加一个全局的`List<Post>`并将`recycleView`设置如下：
- en: '[PRE63]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Here, we have initialized the `PostRecycleViewAdapter` named `postRecycleViewAdapter`
    and set the adapter into the list named `displayList`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已初始化名为`postRecycleViewAdapter`的`PostRecycleViewAdapter`，并将适配器设置到名为`displayList`的列表中。
- en: Fetching a post
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取帖子
- en: 'We will fetch all the posts using the `getAllPosts()` function. This function
    will send a request to the server to get all the post list. In return, we will
    get the updated list named `newPostList` and pass using `setItems(newPostList)`
    to `PostRecycleViewAdapter` and notify with `notifyDataSetChanged()`. For the
    error handling, we have used toast. Here is the code of the `getAllPosts()` function:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`getAllPosts()`函数获取所有帖子。此函数将向服务器发送请求以获取所有帖子列表。作为回报，我们将得到名为`newPostList`的更新列表，并使用`setItems(newPostList)`传递给`PostRecycleViewAdapter`，并使用`notifyDataSetChanged()`通知。对于错误处理，我们使用了toast。以下是`getAllPosts()`函数的代码：
- en: '[PRE64]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Submitting a post
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交帖子
- en: When you press the fab button we will see an alert box where you can input your
    status using `submitPost()`. In return, we get the post list named `newPostList` and
    pass the list to the `setItems(newPostList)` of the `PostRecycleViewAdapter` to
    replace with the older post list with the new one. Lastly, notify with `notifyDataSetChanged()`,
    and the `RecycleView` list will be updated.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下fab按钮时，我们会看到一个输入状态的警报框，你可以使用`submitPost()`输入你的状态。作为回报，我们得到名为`newPostList`的帖子列表，并将其传递给`PostRecycleViewAdapter`的`setItems(newPostList)`以替换旧的帖子列表。最后，使用`notifyDataSetChanged()`通知，`RecycleView`列表将被更新。
- en: 'Here is the code for the `submitPost()` function:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`submitPost()`函数的代码：
- en: '[PRE65]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Implementing the menu
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现菜单
- en: To show the profile details and update a post, we will add two icons on the
    `Toolbar`. To do this, we need to create a toolbar file. Create a menu file in
    `res > menu` named `menu_main.xml`. There we will add two items, one for profile
    and one for updating a post.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示配置文件详情和更新帖子，我们将在 `Toolbar` 上添加两个图标。为此，我们需要创建一个工具栏文件。在 `res > menu` 中创建一个名为
    `menu_main.xml` 的菜单文件。在那里我们将添加两个项目，一个用于配置文件，一个用于更新帖子。
- en: 'Here is the code for `menu_main.xml`:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `menu_main.xml` 的代码：
- en: '[PRE66]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: We have used `app:showAsAction="always"`, and it means the items will always
    show on the toolbar.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 `app:showAsAction="always"`，这意味着项目将始终显示在工具栏上。
- en: Now implement it in `MainAcitivy.kt`. To do this, we need to override two functions,
    and these are `onCreateOptionsMenu()` and `onOptionsItemSelected()`.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 `MainAcitivy.kt` 中实现它。为此，我们需要重写两个函数，这两个函数是 `onCreateOptionsMenu()` 和 `onOptionsItemSelected()`。
- en: 'We will bind the `menu_main` menu XML file using `menuInflater.inflate()` in
    `onCreateOptionsMenu()`, and we will write down the logic for every menu item
    in the `onOptionsItemSelected()`:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `onCreateOptionsMenu()` 中使用 `menuInflater.inflate()` 绑定 `menu_main` 菜单
    XML 文件，并在 `onOptionsItemSelected()` 中写下每个菜单项的逻辑：
- en: '[PRE67]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '`R.id.profileMenu` will take you to the `ProfileActivity` class.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.id.profileMenu` 将带您进入 `ProfileActivity` 类。'
- en: '`R.id.postUpdate` will update the post using `getAllPosts()`.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.id.postUpdate` 将使用 `getAllPosts()` 更新帖子。'
- en: Modifying the post adapter
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改帖子适配器
- en: Now we need to modify our post adapter class. It will help us to show the post
    in a nice structure. Our post adapter name is `PostRecycleViewAdapter`, and the
    layout name is `post_item`.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要修改我们的帖子适配器类。它将帮助我们以良好的结构显示帖子。我们的帖子适配器名称是 `PostRecycleViewAdapter`，布局名称是
    `post_item`。
- en: Modifying post adapter layouts
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改帖子适配器布局
- en: 'To utilize the post adapter, we need to create an `xml` file named `post_item.xml`,
    and here we will implement the UI. Here is a piece of the code (the entire code
    can be found on GitHub):'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用帖子适配器，我们需要创建一个名为 `post_item.xml` 的 `xml` 文件，在这里我们将实现 UI。下面是一段代码（完整代码可以在 GitHub
    上找到）：
- en: '[PRE68]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: We have four `TextView` for user full name, username, posted time, and the post
    text.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有四个 `TextView` 用于用户全名、用户名、发布时间和帖子文本。
- en: 'Here is a sample image from the preview option of the layout:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是布局预览选项的一个示例图像：
- en: '![](img/fb178a79-ec83-42f3-a5aa-51abdd7d08cf.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb178a79-ec83-42f3-a5aa-51abdd7d08cf.png)'
- en: Creating the adapter for posts
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建帖子适配器
- en: 'Let''s create a custom `RecycleView` adapter named `PostRecycleViewAdapter.kt` to
    display the post list. We have shown you how to create custom adapters in [Chapter
    4](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml), *Spring Modules for Android*,
    so we won''t repeat it. Here is the `PostRecycleViewAdapter` class:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `PostRecycleViewAdapter.kt` 的自定义 `RecycleView` 适配器来显示帖子列表。我们已经展示了如何在
    [第 4 章](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml)，*Spring Modules for Android*
    中创建自定义适配器，所以我们将不再重复。以下是 `PostRecycleViewAdapter` 类：
- en: '[PRE69]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now create the `ViewHolder` class and initialize all the content of the `post_item`
    layout in `PostRecycleViewAdapter.kt`, as shown in the following code:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 `PostRecycleViewAdapter.kt` 中创建 `ViewHolder` 类，并初始化 `post_item` 布局的所有内容，如下面的代码所示：
- en: '[PRE70]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Now override `onCreateViewHolder()` and return the `ViewHolder` class:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重写 `onCreateViewHolder()` 并返回 `ViewHolder` 类：
- en: '[PRE71]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now, we need to set the value in every raw of the list based on its position.
    To do this, override the `onBindViewHolder()` function and add this code:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要根据其位置设置列表中每一行的值。为此，重写 `onBindViewHolder()` 函数并添加以下代码：
- en: '[PRE72]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Modifying the profile layout
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改配置文件布局
- en: 'This layout will help to get the profile details from the users. Open `activity_profile.xml` and
    modify it as follows (please check GitHub for the full layout code):'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布局将帮助从用户那里获取配置文件详情。打开 `activity_profile.xml` 并按以下方式修改（请检查 GitHub 上的完整布局代码）：
- en: '[PRE73]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Here we have one `TextView` for the username, a `TextView` for each profile
    item label name, and four for the profile contents of `Full Name`, `Email`, `Contact
    Number`, and `Country`.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个用于用户名的 `TextView`，每个配置文件项标签名称的 `TextView`，以及用于 `Full Name`、`Email`、`Contact
    Number` 和 `Country` 的配置文件内容的四个 `TextView`。
- en: 'Here is the preview of the **Profile** details:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 **配置文件** 详情的预览：
- en: '![](img/102bb590-8d0d-4201-87e6-bc0854b5aab0.png)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![](img/102bb590-8d0d-4201-87e6-bc0854b5aab0.png)'
- en: Modifying a profile activity
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改配置文件活动
- en: 'Create a new activity called `ProfileActivity.kt`, and here is the code:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的活动名为 `ProfileActivity.kt`，以下是代码：
- en: '[PRE74]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Fetching the profile details
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取配置文件详情
- en: 'To fetch the profile details, we need to create a function named `getUser()` in
    which we will call `getUserById()` from the `Profile` services. In return, it
    will provide the user details, or if there is an error, it will show the error
    message. Here is the code of the `getUserById()` function:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取个人资料详情，我们需要创建一个名为 `getUser()` 的函数，在其中我们将从 `Profile` 服务中调用 `getUserById()`。作为回报，它将提供用户详情，或者如果有错误，它将显示错误消息。以下是
    `getUserById()` 函数的代码：
- en: '[PRE75]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Post details activity
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子详情活动
- en: Now we will need our last activity, `PostDetailsActivity.kt`, and the layout
    is in `activity_post_details.xml`. In this activity, you will see a specific post
    and its comments. You can also post a comment.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要我们的最后一个活动，`PostDetailsActivity.kt`，布局在 `activity_post_details.xml` 中。在这个活动中，你将看到一个特定的帖子及其评论。你也可以发表评论。
- en: Modifying the post details layout
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改帖子详情布局
- en: 'This view will show specific post details. Here is a piece of code from `activity_post_details.xml`:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图将显示具体的帖子详情。以下是 `activity_post_details.xml` 中的一个代码片段：
- en: '[PRE76]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Here we have a post's details and its list of comments.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个帖子的详情及其评论列表。
- en: 'The preview of this layout is as follows:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布局的预览如下：
- en: '![](img/5aaa0cab-5202-4ad3-abd0-ae6a0d3b97a9.png)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5aaa0cab-5202-4ad3-abd0-ae6a0d3b97a9.png)'
- en: Modifying the post details activity
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改帖子详情活动
- en: 'This is an activity where will handle a specific post. This post will be fetched
    by a `postId`, and we will get this through the intent that is sent from `PostRecycleViewAdapter`.
    To get the intent view, we need to use `intent.extras`. We use `Long` with the
    *key name* of  `"postId"`, as shown in the following code:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个处理特定帖子的活动。这个帖子将通过 `postId` 获取，我们将通过从 `PostRecycleViewAdapter` 发送的 intent
    获取它。要获取 intent 视图，我们需要使用 `intent.extras`。我们使用 `Long` 与 `"postId"` 的 *键名*，如下面的代码所示：
- en: '[PRE77]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Fetching post details
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取帖子详情
- en: 'Now create a function called `getPostById(id: Long)`, and we will pass the
    given `postId` from `MainActivity`. We will handle all the value in the specific
    `TextView`, such as `MainActivity`:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '现在创建一个名为 `getPostById(id: Long)` 的函数，我们将从 `MainActivity` 传递给定的 `postId`。我们将处理特定的
    `TextView` 中的所有值，例如 `MainActivity`：'
- en: '[PRE78]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Submitting comment
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交评论
- en: 'To submit a comment, click `fabButton` and enter a comment. The system of comment
    submission is similar to the post submission system. We create a function named `submitComment(id:
    Long, text: String)` and use it to submit the comment. Here is the `submitComment()` function:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '要提交评论，点击 `fabButton` 并输入评论。评论提交系统与帖子提交系统类似。我们创建一个名为 `submitComment(id: Long,
    text: String)` 的函数，并使用它来提交评论。以下是 `submitComment()` 函数：'
- en: '[PRE79]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Modifying the comment adapter
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改评论适配器
- en: This adapter is the same as the Post adapter. Check the Modifying Post Adapter, Modifying
    Post Adapter Layouts to modify this comment adapter. The name of this adapter
    is `CommentRecycleViewAdapter.kt` and the layout is `comment_item.xml`.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 这个适配器与帖子适配器相同。检查 修改帖子适配器， 修改帖子适配器布局 以修改这个评论适配器。这个适配器的名称是 `CommentRecycleViewAdapter.kt`，布局是
    `comment_item.xml`。
- en: Our project is complete! Now it's time to check the output of the server and
    the client.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目完成了！现在，是时候检查服务器和客户端的输出了。
- en: Checking the output
  id: totrans-400
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查输出
- en: To check our output, first, run the server from the `Social_Network` Spring
    project. Then you can run two different emulators or Android devices as client
    users.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查我们的输出，首先，从 `Social_Network` Spring 项目运行服务器。然后你可以运行两个不同的模拟器或 Android 设备作为客户端用户。
- en: 'Now open the Android app. Click the New Member? button to create a new account.
    Fill in all the required details and click the Registration button:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开 Android 应用。点击“新成员？”按钮创建新账户。填写所有必要的详细信息并点击“注册”按钮：
- en: '![](img/6a1b2168-c00e-4f59-87de-0aa54bd5d8a1.png)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a1b2168-c00e-4f59-87de-0aa54bd5d8a1.png)'
- en: 'If the username is already taken, then it will alert you like this:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户名已被占用，系统将像这样提醒你：
- en: '![](img/fd12e35a-0a4a-401d-964e-dfa6c03742a8.png)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd12e35a-0a4a-401d-964e-dfa6c03742a8.png)'
- en: 'Now if you press the Profile button, the second left on the toolbar, you will
    see the Profile details. If you press the Update button, the top-left icon of
    the toolbar, your post will update, as you can see in the following screenshot:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你按下工具栏上的第二个左边的“Profile”按钮，你将看到个人资料详情。如果你按下顶部的“Update”按钮，即工具栏左上角的图标，你的帖子将更新，如下面的截图所示：
- en: '![](img/c216e8a0-fbeb-48c7-8da4-b996eb8898b9.png)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c216e8a0-fbeb-48c7-8da4-b996eb8898b9.png)'
- en: 'Click on any post and you will see the specific post, and you can add a comment
    using the Fab button:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 点击任何帖子，你将看到具体的帖子，并且你可以使用 Fab 按钮添加评论：
- en: '![](img/c7516fca-33cd-4ee3-84a7-c04ce4f6a4e5.png)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7516fca-33cd-4ee3-84a7-c04ce4f6a4e5.png)'
- en: We are at end of this long journey. Now your client application is ready to
    use. Here you can post a status, see the posted status, check the details of the
    post, and put comments on that post. We have shown you how to use the server and
    handle the resources from the server in an Android application. You can find some
    minor functions and layouts on GitHub that may be helpful with this application.
    We recommend you create another application with your own imagination and deploy
    it. That will be more effective, and you can learn more about what you want to
    learn. There are lots of alternative ways to handle HTTP requests, and so you
    can learn more. If you want to learn more, have a look at the *Further reading* section.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了这段漫长旅程的终点。现在，您的客户端应用程序已经准备好使用。在这里，您可以发布状态，查看发布的状态，检查帖子的详细信息，并在该帖子上发表评论。我们已经向您展示了如何在
    Android 应用程序中使用服务器和处理来自服务器的资源。您可以在 GitHub 上找到一些可能有助于此应用程序的次要功能和布局。我们建议您发挥自己的想象力创建另一个应用程序并部署它。这将更加有效，您还可以学习更多您想学的内容。处理
    HTTP 请求有众多替代方法，因此您可以学习更多。如果您想了解更多，请查看*进一步阅读*部分。
- en: Summary
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: After a long journey, we have finished this chapter. Here we have seen how to
    create a server side and a client side complete application using all the modules
    of the previous chapters, such as Spring Security and database. You can modify
    this project in your own style. You can implement new architecture and implement
    new frameworks. In this chapter, first, we learned about the design of a project.
    Then we created the database model for our project. After creating the database
    model, we created our server-side project and implemented the dependencies. Then
    we created the models based on the database model. Then we created the repositories
    and the controller. In the controller, we created the HTTP request functions.
    Then we implemented the security. We used basic authentication from Spring Security.
    Then we modified application.properties to connect to the MySQL database. After
    finishing the server side, we started to create the Android application. We created
    the workflow of the application. Then we created the models of the users, posts,
    and comments. Then we created the API services and requests. After the backend,
    we developed the layouts and activities. In the activities, we called the HTTP
    request using Retrofit and RxJava. Then we modified the UI classes and layouts
    of the application. Lastly, we tested the output of the project.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 经过漫长的旅程，我们已经完成了这一章。在这里，我们看到了如何使用前几章的所有模块（如 Spring Security 和数据库）创建一个服务器端和客户端的完整应用程序。您可以根据自己的风格修改这个项目。您可以实现新的架构和实现新的框架。在本章中，首先，我们学习了项目的架构设计。然后，我们为我们的项目创建了数据库模型。在创建数据库模型之后，我们创建了我们的服务器端项目并实现了依赖关系。然后，我们根据数据库模型创建了模型。然后，我们创建了存储库和控制器。在控制器中，我们创建了
    HTTP 请求函数。然后，我们实现了安全性。我们使用了 Spring Security 中的基本身份验证。然后，我们修改了 application.properties
    以连接到 MySQL 数据库。在完成服务器端之后，我们开始创建 Android 应用程序。我们创建了应用程序的工作流程。然后，我们创建了用户、帖子评论的模型。然后，我们创建了
    API 服务和请求。在后台开发之后，我们开发了布局和活动。在活动中，我们使用 Retrofit 和 RxJava 调用了 HTTP 请求。然后，我们修改了应用程序的
    UI 类和布局。最后，我们测试了项目的输出。
- en: In [Chapter 10](9ce60363-adfb-4e1c-89f4-ec573a89657d.xhtml), *Testing an Application*,
    you will learn how to use the JUnit framework to unit test the Spring project
    and the UI testing using the Espresso in the Android application.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 10 章](9ce60363-adfb-4e1c-89f4-ec573a89657d.xhtml)“测试应用程序”中，您将学习如何使用 JUnit
    框架对 Spring 项目进行单元测试，以及在 Android 应用程序中使用 Espresso 进行 UI 测试。
- en: Questions
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the EER diagram?
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 EER 图？
- en: What are CRUD operations?
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRUD 操作是什么？
- en: What type of tools can be used as the HTTP client?
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种类型的工具可以用作 HTTP 客户端？
- en: Currently, what are the minimum, maximum, and targeted API versions for Android?
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，Android 的最小、最大和目标 API 版本是什么？
- en: What are the common names of the Android architecture?
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android 架构的常见名称是什么？
- en: What are the names of emulators to develop Android applications?
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发 Android 应用程序时，有哪些模拟器的名称？
- en: Further reading
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Building Applications with Spring 5 and Kotlin *([https://www.packtpub.com/application-development/building-applications-spring-5-and-kotlin](https://www.packtpub.com/application-development/building-applications-spring-5-and-kotlin)) by
    Miloš Vasić'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Spring 5 和 Kotlin 构建应用程序* ([https://www.packtpub.com/application-development/building-applications-spring-5-and-kotlin](https://www.packtpub.com/application-development/building-applications-spring-5-and-kotlin))
    —— 作者 Miloš Vasić'
- en: '*Spring MVC – Beginner''s Guide - Second Edition* ([https://www.packtpub.com/application-development/spring-mvc-beginners-guide-second-edition](https://www.packtpub.com/application-development/spring-mvc-beginners-guide-second-edition)) by
    Amuthan Ganeshan'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring MVC 初学者指南 - 第二版* ([https://www.packtpub.com/application-development/spring-mvc-beginners-guide-second-edition](https://www.packtpub.com/application-development/spring-mvc-beginners-guide-second-edition))
    —— 作者：Amuthan Ganeshan'
- en: '*Android Development with Kotlin* ([https://www.packtpub.com/application-development/android-development-kotlin](https://www.packtpub.com/application-development/android-development-kotlin))
    by Marcin Moskala, Igor Wojda'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Kotlin 进行 Android 开发* ([https://www.packtpub.com/application-development/android-development-kotlin](https://www.packtpub.com/application-development/android-development-kotlin))
    —— 作者：Marcin Moskala, Igor Wojda'
- en: '*Kotlin for Android Developers [Video]* ([https://www.packtpub.com/application-development/kotlin-android-developers-video](https://www.packtpub.com/application-development/kotlin-android-developers-video)) by Yusuf
    Saber'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*面向 Android 开发者的 Kotlin [视频]* ([https://www.packtpub.com/application-development/kotlin-android-developers-video](https://www.packtpub.com/application-development/kotlin-android-developers-video))
    —— 作者：Yusuf Saber'
