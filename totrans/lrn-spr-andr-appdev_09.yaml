- en: Creating an Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have prepared you to become a professional Spring-based developer.
    You have learned what Spring is, as well as the functions of its architecture,
    components, security features, database, and so on. We have also shown you how
    to develop an Android app and handle HTTP requests and use the database.
  prefs: []
  type: TYPE_NORMAL
- en: As you know, we developed all the example projects in Kotlin, and nowadays,
    this language is very famous among developers for its conciseness and interoperability.
    In this chapter, we will implement all the features of the previous chapters to
    develop a project that will have a server and a client side.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Project idea
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Server side:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a database model
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project and Maven dependency
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating entities, repositories, and a controller
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing security
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified application.properties
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Client side:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating models
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating HTTP requests
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating API services
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying activities
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching REST APIs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an adapter and XML layouts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the output
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need almost all the dependencies, such as security, MySQL, JPA, Hibernate,
    and JDBC, from the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The source code with an example for this chapter is available on GitHub at the
    following link: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09.](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09)
  prefs: []
  type: TYPE_NORMAL
- en: You will find two projects—`social_network` is the server side, which has been
    developed with the help of the Spring Framework, and `ClientSide` is the client
    side, which has been developed for the Android platform.
  prefs: []
  type: TYPE_NORMAL
- en: Project idea
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project idea is the most important part. You need to generate this idea
    very carefully and have to identify the facts behind your project. You need to
    keep in mind how this project could be effective on the market, how the users
    will accept your project, why they will use it, why they should choose your app
    instead of others, what features will make it different from other existing similar
    projects, and so on. After generating an idea, you need to create a draft in your
    mind of how will it look. Then you need to put it down on paper, design the workflow
    of the project, and then develop the project's code. Lastly, you need to test
    the project for its smoothness, check that it's bug/error free, and prepare it
    for the market.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create a small project that is like a social network.
    We will name it `Packt Network`. This project will have two parts. One is a server
    and one is a client, and both sides will be written in Kotlin. First of all, we
    create a Spring project where we will build our server and REST API. The data
    will be stored in a MySQL database, and we will handle the database using JDBC,
    JPA, and Hibernate. This data will be protected by the basic authentication of
    Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: In our second project, we will create an Android application and handle the
    created REST APIs of the server. We will use Retrofit to handle the REST APIs
    and the network. Then we will create a registration and login page to create and
    login as a user, using a username and password. After this, the user can post
    a status and see a list of all the other user's statuses. A comment can be also
    posted in a status.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will start to design and develop our server-side project using Spring.
  prefs: []
  type: TYPE_NORMAL
- en: Server side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the server side, we are using the Spring Framework. We will handle all the
    data with a MySQL database and protect the resources with basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we will design the project's backend logic. Then we will plan
    for the REST API. We will create a data model using MySQL Workbench. Then we will
    create the project using [http://start.spring.io](http://start.spring.io). Then
    we will create the database entity using JPA and Hibernate, and we will check
    that the REST API is working. To check this, we will use an HTTP client software
    tool named Insomnia. Then we will implement basic authentication with Spring Security
    to protect our resources. Lastly, we will give you a task to complete, on upgrading
    the project, and becoming a contributor to this project on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned before, this project will be like a social media platform; the
    users can post their statuses and others can see them in the timeline and can
    like it, add comments, and so on. For this project, there won't be a UI for the
    server side. We will create a backend server. To create this server, we will have
    to create a REST API that can be used by the client application. To do this, we
    need to create a database based on our REST API.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we split our database table names, the HTTP function requests,
    and the URL path.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will be four tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ba5c0ba-4f49-43b7-a2e7-9703757538d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: One is for the users. All their information will be stored in a table named
    `Profile`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be another table named `Post`, where all the posted statuses of all
    the users will be stored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another table named `Comment` will store all the comments of all the posted
    statuses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another table named `LikeObj` will store all the likes of all the posted statuses,
    but we won't provide this feature for the comments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we will create the URL path of the REST API using an HTTP function request,
    and all the output will be designed for JSON. We are using JSON because it is
    very easy to handle and understand for all developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding the `Profile` table, here are the URL paths of the HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '`POST http://localhost:8080/user/new`: This request will create a user profile
    with all the information the user has posted on their profile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET http://localhost:8080/user/{id}`: This request will get the details of
    the given `id` holder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT http://localhost:8080/user/{id}`: This request will update the user details
    of the given `id` holder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE http://localhost:8080/user/{id}`: This request will delete the user
    details of the given `id` holder, including all the posts, comments, and likes
    from this user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regarding the `Post` table, here are the URL paths of the HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '`POST http://localhost:8080/post/{id}/new`: This request will create a post
    from the `id` holder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET http://localhost:8080/posts`: This request will get all the post''s details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET http://localhost:8080/post/{id}`: This request will get the post details
    of the given `id` holder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE http://localhost:8080/post/{id}`: This request will delete the post
    details of the given `id` holder, including all the comments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regarding the `Comment` table, here are the URL paths of the HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '`POST HTTP://localhost:8080/comment/{post_id}`: This request will create a
    comment on the `post_id` holder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE HTTP://localhost:8080/comment/{post_id}`: This request will delete
    the comment of the given `post_id` holder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regarding the `LikeObj` table, here are the URL paths of the HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '`POST http://localhost:8080/like/new`: This request will like a post of the
    `post_id` holder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE ttp://localhost:8080/like/new`: This request will unlike a post of
    the `post_id` holder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a database model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use JPA, and one of the most noticeable points is that creating a database
    is not recommended, because as we know, JPA will automatically create database
    tables with fields using the entity class of the project. But still, we need to
    create a demo database and draw an EER diagram. You can create your EER on paper
    or you can create one digitally using MySQL Workbench. Here, we will use MySQL
    Workbench, which has a free version. This is one of the best tools for developing
    a database or creating a model for a database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to download this software from[ https://dev.mysql.com/downloads/workbench/](https://dev.mysql.com/downloads/workbench/),
    if you don''t have it. Then install and run it. As we mentioned before, we have
    some default values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Open this application and select the Models option, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b487cdb6-845c-4217-896c-38e57fbaca3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the plus (+) sign to create a new model for our application. In the new
    window, you will find all the necessary features to create a model. Save this
    model as `my_app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8fb2a6c7-66fc-4fb5-8c81-c3697b4f0017.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a table called `Profile`. The columns will be `id (primary key)`, `username`,
    `password`, `email`, `first_name`, `last_name`, `acc_created_time`, `contact_number`,
    `dob`, `city`, and `country`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A table called `Post`. The columns will be `id (primary key)` and `text`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another table called `Comment`. The columns will be `id (primary key)` and `text`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, create a table called `Like`. The column will be `id (primary key)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'But there are some relationships between the tables:'
  prefs: []
  type: TYPE_NORMAL
- en: Between `Profile` and `Post`: There is a many-to-one relation for `Post` because
    a user can post multiple statuses, and each post has only one user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Between  `Profile` and `Comment`: There is a many-to-one relation for `Comment` because
    a user can post multiple comments, and each comment has only one user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Between  `Profile` and `Like`: There is a many-to-one relation for `Like` because
    a user can like multiple  posts, and each like has only one user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Between  `Post` and `Comment`: There is a one-to-many relation for `Post` because
    a post may have multiple comments, but a comment is for only one specific post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Between  `Post` and `Like`**:** There is a one-to-many relation for `Post` because
    a post may have multiple likes, but each like is for only one specific post:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/aea017e3-8e32-477b-8c67-9e8f71ba0b06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So after all the relations, we can see the table names of the database, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61a24944-37fc-4692-ae5d-8fa9aea80ad9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you can create the EER diagram by clicking on the EER Diagram icon,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/973c7439-afc1-4d49-bc49-02593293139e.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the EER diagram model of our project. You may find two extra tables,
    named `post_likes` and `post_comments`. It generates these using JPA and Hibernate.
    We will discuss this later.
  prefs: []
  type: TYPE_NORMAL
- en: So, our database modeling is done. Now you can export it as SQL and create the
    database for the project. But we recommend you not to do this because we need
    to do some modification.
  prefs: []
  type: TYPE_NORMAL
- en: Now create the project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a project, go to  [https://start.spring.io](https://start.spring.io)
    and create a Kotlin-based project. Here are the dependencies of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDBC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevTools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JPA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find these in the `pom.xml` file. There you can update, add, or remove
    the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: To enable JPA auditing, you need to annotate `@EnableJpaAuditing` annotation on
    the `SocialNetworkApplication.kt` class. It will enable the use of JPA functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, we need to create four as the table details of the database. The four
    entities are `Profile`, `Post`, `Comment`, and `LikeObj`. In the following sections,
    you'll learn how to create the entity classes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Profile entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `Profile` entity named `Profile.kt` with the `@Entity` annotation
    to convert this class into an entity class. Here is the code of this model class
    (the entire code can be found at the provided GitHub Link):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this class, we have `11` elements, which contain all the user''s details.
    We have four constructors to use this model according to our tasks. Here are the constructors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s discuss the annotations that are used in this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: According to the previous code, we used `@Id` annotation on the `id`, which
    means that `id` is the primary key of the `Profile` entity. The `@GeneratedValue`
    annotation means it increments the value of `id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a snippet of the code for the `password` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: According to this code, `@JsonIgnore` uses variables or functions. If you use
    it, then the requested JSON won't show this variable. Here, we used it on the
    `password`, and that means no-one can fetch the password.
  prefs: []
  type: TYPE_NORMAL
- en: '`@JsonProperty` defines that during the serialization and deserialization of
    JSON, it changes the visibility of the logical property of its element.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Post entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `Post` entity named `Post.kt` with the `@Entity` annotation to convert
    this class into an entity class. Here is the code of this model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have two elements and one constructor. Here is the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s time now to discuss some new annotations that have been used in this
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`@ManyToOne` on the `Profile` variable means that this will indicate which
    user posted that specific status.'
  prefs: []
  type: TYPE_NORMAL
- en: '`@JoinColumn` means its access element `Profile` is connected with the foreign
    key using `profile_id`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`@JsonIgnoreProperties(......)` ignores the JSON properties during deserialization.
    In this project, when you get the post''s JSON, in the `profile` attribute you
    will only find the `id`. Here is a simple example of a JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d9033c7-88c3-423a-95a8-b38ed8836268.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see `"id":0`, which is the `id` of the post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now create a mutable list of the `Comment` and annotate it with `@OneToMany`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`@OneToMany(....)` means a post can be many comments and likes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cascade = [CascadeType.ALL]` attribute is a feature of Hibernate. It means
    you can apply all primary cascade types.'
  prefs: []
  type: TYPE_NORMAL
- en: '`fetch = FetchType.LAZY` means it fetches the data lazily during the first
    access.'
  prefs: []
  type: TYPE_NORMAL
- en: '`orphanRemoval=true` means if the post has been deleted, then all the comments
    and likes on this post will be deleted automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Comment entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `Comment` entity named `Comment.kt` with the `@Entity` annotation
    to convert this class into an entity class. Here is the code of this model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have three elements and one constructor. Here is the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Creating like entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a like entity named `LikeObj.kt` with the `@Entity` annotation to convert
    this class into an entity class. Here is the code of this model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have one element and one constructor. Here is the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a repository for a profile named `ProfileRepository.kt` and implement
    the `JpaRepository` repository that has all the necessary CRUD request methods
    to fetch the database. Here is the code for this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a repository for a post named `PostRepository.kt` and implement
    the `JpaRepository` repository that has all the necessary CRUD request methods
    to fetch the database. Here is the code for this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a repository for a comment named `CommentRepository.kt` and implement
    the `JpaRepository<>` repository that has all the necessary CRUD request methods
    to fetch the database. Here is the code for this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, create a repository for the like model named `LikeRepository.kt` and
    implement the `JpaRepository<>` repository that has all the necessary CRUD request methods
    to fetch the database. Here is the code for this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete all the data regarding the deleted post, we need to create a repository
    for the profile named `DeletePCLRepository.kt` and implement an interface named `DeletePCLByIDInterface.kt`
    with one function, which will delete all the data regarding the deleted user.
    Here is the code for the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code for the `DeletePCLRepository.kt` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To check a registered user, create a repository named `UserExistRepository.kt` and
    implement an interface named `UserExistInterface.kt` with two functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In this interface, `isUserExist(username: String)` will search the `Profile`
    table of the database and return a `Boolean` based on the existing of the user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for the `UserExistRepository.kt` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In this class, we add the `@Autowired` annotation to autowire the `JdbcTemplate`
    to utilize the JDBC database. We `override` the `issue exist(name: String)` function.'
  prefs: []
  type: TYPE_NORMAL
- en: '`"SELECT count(*) FROM PROFILE WHERE username = ?"` is an SQL query that is
    used to search the existing users from the `Profile` table of the database. If
    there is a user, then it will return `true`.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, create a controller class named `AppController.kt` and annotate it with `@RestController`
    to convert it into a controller class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now autowire the repositories, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Then create HTTP function requests. We won't discuss this here because we have
    already described the use of the HTTP requests in [Chapter 4](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml), *Spring
    Modules for Android*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a profile's HTTP requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now create HTTP function requests for the profiles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the function for creating a profile''s `POST` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the function for creating a profile''s `GET` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the function for creating a profile''s `PUT` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the function for creating a profile''s `DELETE` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Creating a post's HTTP requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now create the HTTP request functions for the `Post`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the function for creating a post''s `POST` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the function for the creating a post''s `GET` request to fetch all
    the posts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the function for creating a post''s `GET` request to fetch one post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the function for the creating a post''s `PUT` request to update one
    post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the function for creating a post''s  `DELETE` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Creating a comment's HTTP requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now create the HTTP request functions for the `Comment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the function for creating a comment''s `POST` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: First, we need to initialize an `optionalPost` object by finding the existing
    post. Then, if the post exists, we create a `Comment` model named `myComment`,
    then add the mutable list of `Comment`, and then save the post using `postRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the function for creating a comment''s `GET` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the function for creating a comment''s `PUT` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the function for creating a comment''s `DELETE` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Implementing security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are implementing basic authentication security. It will be similar to what
    we covered in *[Chapter 5](d27e39f7-8dea-4796-9025-cfb8bc345283.xhtml), Securing
    Applications with Spring Security*. But there we used **`inMemoryAuthentication()`**,
    and here we will fetch the username and password from the database and implement
    them for the project using `UserDetailsService`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a service class named `CustomUserDetailsService.kt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement the `UserDetailsService` and annotated by `@Service` to make it a
    service class. Here is the code for this service class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we autowire the `UserByNameRepository.kt` repository and override `loadUserByUsername(username:
    String)`. We will fetch the `username` and `password` from the repository and
    match them with the `username` and `password` given by the client. Here is the
    code for `UserByNameRepository.kt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create the code for the `RowMapper` class of the user named `UserRowMapper.kt`
    to fetch the user details. Here is a piece of code from this class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a `WebSecurityConfigurerAdapter` class named `SecurityConfigurer.kt`
    and annotate it with `@Configuration` and `@EnableWebSecurity` to make a configuration
    file and enable web security. Here is the code for the `SecurityConfigurer.kt`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, we''ve done the following:'
  prefs: []
  type: TYPE_NORMAL
- en: To use this registration URL path, `"/profile/new"`, any user can access. It
    doesn't need a `username` and `password`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use `PasswordEncoder` to encode the password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We autowired `configureGlobal(auth: AuthenticationManagerBuilder)` and passed `CustomUserDetailsService`
    via `auth.userDetailsService(customUserDetailsService)` to check and match the
    username.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified application.properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `application.properties` file is used to connect the database with the
    application and define how the database will behave. Here is the code for `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Here we have used the database named `my_app`, and the schema is `my_app_schema`.
    We disable `useSSL` with `useSSL=false`, and to retrieve the public key we use `allowPublicKeyRetrieval=true`.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we use `spring.jpa.hibernate.ddl-auto = update`, which means after restarting
    your server the data won't be lost.
  prefs: []
  type: TYPE_NORMAL
- en: Client side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating our backend, we need to create a client-based application to
    utilize the server. In this part, we will create an Android application as a client-based
    frontend application. To create the application, we need to make a design before
    starting coding. We will create an Android application and handle HTTP requests
    with the use of Retrofit.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we will design the workflow of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To design our application, we have to keep in mind what the project is about
    and how the backend was designed. As we know, this is a mini-social-network-type
    app. So we have to create some model objects that are exactly the same as the
    server's model objects. In the application's workflow, we will have some layouts
    that will represent our applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e37b34b5-f16e-4419-b2ee-df7d626d109b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the brief of the workflow according to this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Login page**: If you have a registered account, you can input the username
    and password to enter the application''s main page. Or, if you are new, you need
    to go to the registration page and register an account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registration page**: This is for registering an account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Home activity**: This is the main part of your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profile**: You can see your details here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status details**: You can see the details of any post that you click on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far, this project is based on these layouts. Now we need to create an Android
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new project, go to Android Studio and click New Project. This time,
    select Android for Mobile**,** then select Basic Activity, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b2c13e5-7bfe-445a-9368-10bc7dd5034b.png)'
  prefs: []
  type: TYPE_IMG
- en: Implementing dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After building the project, add these dependencies in the `dependencies{}`
    block of `build.gradle (Module:app)`. These are for Material Design, Retrofit,
    and RxJava:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Creating HomeActivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating the project, you will find `MainActivity`, but here we have renamed
    it as `HomeActivity.kt`, and the layout name is `activity_home`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now go to the activity, and here is the default code for this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create a layout named `home_content.xml`, add `FrameLayout`, and add
    an `id` name. Here is the code for this XML file (you can see the full version
    on GitHub):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Creating models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create the models, we need to keep the same model items as the backend. But
    we will also include the `Gson` annotation, `@SerializedName`. The value of the
    `@SerializedName` annotation is used when serializing and deserializing objects.
    Here, `@SerializedName("username")` is stating that this is the name of the `Username`
    in the JSON. Though we implement the Gson, you can call these model classes as
    the response of the API. That means when this application requests the server
    and fetches the content, then this content will be returned with the help of these
    model classes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating profile model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `Profile` data class named `Profile.kt`, and here is the sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Creating post model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `Post` data class named `Post.kt`, and here is the sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Creating a comment model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a comment data class named `Comment.kt`, and here is the sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Creating services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the most important section. This will send the `GET` request to the
    server to fetch the data from the server. First of all, we will create the services
    of the model classes. We will create the HTTP request functions using the Retrofit
    annotation, which are explained in the section called *HTTP Request Functions* in [Chapter
    4](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml), *Spring Modules for Android*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the profile service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to our server, we have four `HTTP` requests for the profile. So we
    will create three `HTTP` requests using the Retrofit annotations. Now create an
    interface named `ProfileService.kt`, and here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding code, here are the brief details of the functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`registerProfile(@Body profile: Profile)` registers a new profile. You need
    to pass a project object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUserList() ` gets all the profiles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUserById(@Query("userId") userId: Long)` gets a profile. You need to pass
    a user ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the post service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to our server, we have three `HTTP` requests for the profile. So
    we will create three `HTTP` requests using the Retrofit annotations. Now create
    an interface named `ProfileService.kt`, and here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding code, here is a brief description of the functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`submitNewPost(@Query("id") id: Long, @Field("text") text: String)` submits
    a new post, and to submit the new post, you need to pass the user ID and the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getPostList()` gets all the posts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getPostById(@Query("id") id: Long)` gets a post. You need to pass a post ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the comment service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To handle the comment REST APIs, we will create two `HTTP` requests. So we
    will create two `POST` and `DELETE` requests using the Retrofit annotations. Now
    create an interface named `PostService.kt`, and here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '`postCommentByPostId(@Path("post_id") postId: Long, @Path("user_id") userId:
    Long,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Query("commentText") commentText: String)`  is a `POST` request function,
    and it submits a new comment. You need to pass the `user_id`, `post_id`, and the
    text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`deleteCommentByPostId(@Path("post_id") postId: Long, @Path("user_id") userId:
    Long,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Query("commentText") commentText: String)` is a `DELETE` request function,
    and it deletes the comment. You need to pass the `user_id` and `post_id`.'
  prefs: []
  type: TYPE_NORMAL
- en: So far, all the requests have been created, and now we need to create an API
    service that will hit the server and fetch the JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an API service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We explained this procedure in [Chapter 4,](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml) *Spring
    Modules for Android*. So we will just show you the code and explain the new features.
    Create an object named `APIService.kt` and add `gsonConverter()` and `getOkhttpClient(username,
    password)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: If you're confused about `addInterceptor(BasicAuthInterceptor(profileName, password))`,
    then please go to [*Chapter* 5](d27e39f7-8dea-4796-9025-cfb8bc345283.xhtml), *Securing
    Applications with Spring Security*, and check out the section called *Authenticating
    with OkHttp interceptors*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to initialize the `RetrofitBuilder` functions of the services.
    We have four service interfaces, and now we will create four `RetrofitBuilder`
    functions for them. Add this code in the `APIService.kt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now we will work for the frontend, which means the activities and layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the first activity of the app. When users enter the app it will be the
    first thing they see. For the user, they need to go to the register activity to
    register a new profile. After the registration, they will get access to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an empty activity named `LoginActivity.kt`, and a layout named `activity_login.xml`.
    Here is the code in the `xml` (you will find the full version of this layout on
    GitHub):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Here we have user input for `Username` and `Password`. In this layout, we have
    also one button to log in and one `TextView` to go to the `RegistrationActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the image preview of this layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95aa2770-ea38-426d-bb91-00ff75a02e04.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the `LogInActivity.kt` file, where we will input the login information. The
    user needs to provide a `username` and a `password`. Then this information will
    be searched in the `Profile` table of the server database. If there are the same
    `username` and `password` in this `Profile` table, you will be able to enter the
    `MainActivity`, or you will get an error message. If you are a new user, you can
    click New Member? to register a new profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will check `SharedPreferences` to see if we have the saved `username`
    and `password`. It will show in the username and password fields, or it will remain
    blank so you can input the values. Here is the function of this logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now set the `OnClickListener()` listener function in the `TextView` named `need_reg`,
    which will take us to the `RegistrationActivity`. Here is the code for this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Login request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will create a function named `logInUser()`, which will send a `POST` request
    to the server and match the `username` and `password`. In return of failed, it
    gets an error and shows the error message, or it will take to to the `MainActivity`. 
    Here is the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Here, we store the `username`, `password`, and `userID` if we get the correct
    response.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the registration activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create an activity for registration named `RegistrationActivity.kt`, where we
    will register a new account. Before modifying the code, we need to modify the
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a layout for `RegistrationActivity.kt` named `activity_registration.xml`.
    Here I have added a UI, so please look at the full version of this file on GitHub.
    Here is a piece of code from this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the image preview of this layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52a502f9-35b9-40c3-96c3-25fa55930784.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying the activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the code for `RegistrationActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add some logic to validate the `username`, `password`, and `email id`.
    Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `TextWatcher` inner class, which will send an alert if there is any invalid
    input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: When the `username`, `password`, or the `email id` is invalid, it will show
    an alert.
  prefs: []
  type: TYPE_NORMAL
- en: Registering a new profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will create a function called `registerUser()`, which will help you
    to send requests to the server and fetch the output from the server. We will show
    you how to use RxJava in [Chapter 8](1b0061a5-8853-487a-9f44-cb18940046a2.xhtml),
    *Reactive Programming*, and Retrofit in [Chapter 4](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml),
    *Spring Modules for Android*. Here is the code for `registerUser()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Here, we will take the contents from `EditText` and create a `Profile` object.
    Then we take an observer that will fetch the profile list as JSON type and handle
    the updated list in the `subscribe()` function. If the result is complete, it
    will return in the first parameter, and then we will save the `username`, `password`,
    and `userID` locally using `SharedPreferences` and return to `LoginActivity`.
    If it throws an error, it will go to the second parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the main activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is our home page. Here, you can see all the posts. We need to modify our
    layout and the activity class.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The layout of `MainActivity` is in the `activity_main.xml` file. Here, we have
    added `RecyclerView` to show the list, one `FabButton` to submit the post, and
    a `TextView` to show if there is no post available. Here is a piece of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go to `MainAcitivty.kt`. Here, we have `RecycleView` and the post adapter.
    We will add a global `List<Post>` and set the `recycleView` in the `onCreate()`
    function like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have initialized the `PostRecycleViewAdapter` named `postRecycleViewAdapter`
    and set the adapter into the list named `displayList`.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching a post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will fetch all the posts using the `getAllPosts()` function. This function
    will send a request to the server to get all the post list. In return, we will
    get the updated list named `newPostList` and pass using `setItems(newPostList)`
    to `PostRecycleViewAdapter` and notify with `notifyDataSetChanged()`. For the
    error handling, we have used toast. Here is the code of the `getAllPosts()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Submitting a post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you press the fab button we will see an alert box where you can input your
    status using `submitPost()`. In return, we get the post list named `newPostList` and
    pass the list to the `setItems(newPostList)` of the `PostRecycleViewAdapter` to
    replace with the older post list with the new one. Lastly, notify with `notifyDataSetChanged()`,
    and the `RecycleView` list will be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for the `submitPost()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To show the profile details and update a post, we will add two icons on the
    `Toolbar`. To do this, we need to create a toolbar file. Create a menu file in
    `res > menu` named `menu_main.xml`. There we will add two items, one for profile
    and one for updating a post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for `menu_main.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: We have used `app:showAsAction="always"`, and it means the items will always
    show on the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Now implement it in `MainAcitivy.kt`. To do this, we need to override two functions,
    and these are `onCreateOptionsMenu()` and `onOptionsItemSelected()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will bind the `menu_main` menu XML file using `menuInflater.inflate()` in
    `onCreateOptionsMenu()`, and we will write down the logic for every menu item
    in the `onOptionsItemSelected()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '`R.id.profileMenu` will take you to the `ProfileActivity` class.'
  prefs: []
  type: TYPE_NORMAL
- en: '`R.id.postUpdate` will update the post using `getAllPosts()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the post adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we need to modify our post adapter class. It will help us to show the post
    in a nice structure. Our post adapter name is `PostRecycleViewAdapter`, and the
    layout name is `post_item`.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying post adapter layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To utilize the post adapter, we need to create an `xml` file named `post_item.xml`,
    and here we will implement the UI. Here is a piece of the code (the entire code
    can be found on GitHub):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: We have four `TextView` for user full name, username, posted time, and the post
    text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample image from the preview option of the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb178a79-ec83-42f3-a5aa-51abdd7d08cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the adapter for posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a custom `RecycleView` adapter named `PostRecycleViewAdapter.kt` to
    display the post list. We have shown you how to create custom adapters in [Chapter
    4](ee961da7-427b-4435-b7aa-6c5c541c89a6.xhtml), *Spring Modules for Android*,
    so we won''t repeat it. Here is the `PostRecycleViewAdapter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create the `ViewHolder` class and initialize all the content of the `post_item`
    layout in `PostRecycleViewAdapter.kt`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Now override `onCreateViewHolder()` and return the `ViewHolder` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to set the value in every raw of the list based on its position.
    To do this, override the `onBindViewHolder()` function and add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the profile layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This layout will help to get the profile details from the users. Open `activity_profile.xml` and
    modify it as follows (please check GitHub for the full layout code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Here we have one `TextView` for the username, a `TextView` for each profile
    item label name, and four for the profile contents of `Full Name`, `Email`, `Contact
    Number`, and `Country`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the preview of the **Profile** details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/102bb590-8d0d-4201-87e6-bc0854b5aab0.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying a profile activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new activity called `ProfileActivity.kt`, and here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Fetching the profile details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To fetch the profile details, we need to create a function named `getUser()` in
    which we will call `getUserById()` from the `Profile` services. In return, it
    will provide the user details, or if there is an error, it will show the error
    message. Here is the code of the `getUserById()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Post details activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will need our last activity, `PostDetailsActivity.kt`, and the layout
    is in `activity_post_details.xml`. In this activity, you will see a specific post
    and its comments. You can also post a comment.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the post details layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This view will show specific post details. Here is a piece of code from `activity_post_details.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Here we have a post's details and its list of comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preview of this layout is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5aaa0cab-5202-4ad3-abd0-ae6a0d3b97a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying the post details activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is an activity where will handle a specific post. This post will be fetched
    by a `postId`, and we will get this through the intent that is sent from `PostRecycleViewAdapter`.
    To get the intent view, we need to use `intent.extras`. We use `Long` with the
    *key name* of  `"postId"`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Fetching post details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now create a function called `getPostById(id: Long)`, and we will pass the
    given `postId` from `MainActivity`. We will handle all the value in the specific
    `TextView`, such as `MainActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Submitting comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To submit a comment, click `fabButton` and enter a comment. The system of comment
    submission is similar to the post submission system. We create a function named `submitComment(id:
    Long, text: String)` and use it to submit the comment. Here is the `submitComment()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the comment adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This adapter is the same as the Post adapter. Check the Modifying Post Adapter, Modifying
    Post Adapter Layouts to modify this comment adapter. The name of this adapter
    is `CommentRecycleViewAdapter.kt` and the layout is `comment_item.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Our project is complete! Now it's time to check the output of the server and
    the client.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To check our output, first, run the server from the `Social_Network` Spring
    project. Then you can run two different emulators or Android devices as client
    users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open the Android app. Click the New Member? button to create a new account.
    Fill in all the required details and click the Registration button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a1b2168-c00e-4f59-87de-0aa54bd5d8a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the username is already taken, then it will alert you like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd12e35a-0a4a-401d-964e-dfa6c03742a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if you press the Profile button, the second left on the toolbar, you will
    see the Profile details. If you press the Update button, the top-left icon of
    the toolbar, your post will update, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c216e8a0-fbeb-48c7-8da4-b996eb8898b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on any post and you will see the specific post, and you can add a comment
    using the Fab button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7516fca-33cd-4ee3-84a7-c04ce4f6a4e5.png)'
  prefs: []
  type: TYPE_IMG
- en: We are at end of this long journey. Now your client application is ready to
    use. Here you can post a status, see the posted status, check the details of the
    post, and put comments on that post. We have shown you how to use the server and
    handle the resources from the server in an Android application. You can find some
    minor functions and layouts on GitHub that may be helpful with this application.
    We recommend you create another application with your own imagination and deploy
    it. That will be more effective, and you can learn more about what you want to
    learn. There are lots of alternative ways to handle HTTP requests, and so you
    can learn more. If you want to learn more, have a look at the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a long journey, we have finished this chapter. Here we have seen how to
    create a server side and a client side complete application using all the modules
    of the previous chapters, such as Spring Security and database. You can modify
    this project in your own style. You can implement new architecture and implement
    new frameworks. In this chapter, first, we learned about the design of a project.
    Then we created the database model for our project. After creating the database
    model, we created our server-side project and implemented the dependencies. Then
    we created the models based on the database model. Then we created the repositories
    and the controller. In the controller, we created the HTTP request functions.
    Then we implemented the security. We used basic authentication from Spring Security.
    Then we modified application.properties to connect to the MySQL database. After
    finishing the server side, we started to create the Android application. We created
    the workflow of the application. Then we created the models of the users, posts,
    and comments. Then we created the API services and requests. After the backend,
    we developed the layouts and activities. In the activities, we called the HTTP
    request using Retrofit and RxJava. Then we modified the UI classes and layouts
    of the application. Lastly, we tested the output of the project.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 10](9ce60363-adfb-4e1c-89f4-ec573a89657d.xhtml), *Testing an Application*,
    you will learn how to use the JUnit framework to unit test the Spring project
    and the UI testing using the Espresso in the Android application.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the EER diagram?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are CRUD operations?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of tools can be used as the HTTP client?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Currently, what are the minimum, maximum, and targeted API versions for Android?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the common names of the Android architecture?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the names of emulators to develop Android applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Building Applications with Spring 5 and Kotlin *([https://www.packtpub.com/application-development/building-applications-spring-5-and-kotlin](https://www.packtpub.com/application-development/building-applications-spring-5-and-kotlin)) by
    Miloš Vasić'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Spring MVC – Beginner''s Guide - Second Edition* ([https://www.packtpub.com/application-development/spring-mvc-beginners-guide-second-edition](https://www.packtpub.com/application-development/spring-mvc-beginners-guide-second-edition)) by
    Amuthan Ganeshan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Android Development with Kotlin* ([https://www.packtpub.com/application-development/android-development-kotlin](https://www.packtpub.com/application-development/android-development-kotlin))
    by Marcin Moskala, Igor Wojda'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kotlin for Android Developers [Video]* ([https://www.packtpub.com/application-development/kotlin-android-developers-video](https://www.packtpub.com/application-development/kotlin-android-developers-video)) by Yusuf
    Saber'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
