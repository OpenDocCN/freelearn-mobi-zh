- en: 'Chapter 6. Our Game: Battle Cry!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've spent some time talking about the basics of getting to know Unity iOS
    and we've looked at some examples of how to use some of its basic functions, but
    we need to bring it all together to build a game for the iOS market. While we
    could dream up any game concept we want, we need to be aware of our platform and
    the user expectations of the platform. Just because something worked well on a
    Nintendo DS or a PC with a keyboard and mouse, that doesn't mean that the game
    is appropriate for players whose primary interface is touching the screen and
    moving the device.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we shall:'
  prefs: []
  type: TYPE_NORMAL
- en: Walk through the design decisions for building an iOS game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organize our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine the project asset budget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import and optimize assets for our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game Concept
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this is the first game we're going to be building for the app store, we will
    start with something that is fun, but relatively basic in concept and implementation
    — a third person perspective dungeon crawler. The design inspiration for the game
    will be the arcade classic Gauntlet. We will take advantage of common services
    used for mobile games through plugins and third party services to exploit some
    of the iOS functions available in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Story
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every game needs a story and this one is no different. A story doesn't have
    to be a grand epic, but it should explain to the player why they are doing what
    they are doing and give them the motivation to play the game — and its sequel.
    For Battle Cry, which is a fairly simple third person shooter game, we will go
    with a fairly simple story.
  prefs: []
  type: TYPE_NORMAL
- en: The planet of Vosh is the ancestral home of your people. The planet has one
    special resource — heavy water that, unbeknownst to the people of Vosh, is highly
    sought after by other intelligent species in the universe as it is used in their
    fusion power reactors. The people of Vosh have been filtering the heavy water
    into a special type of beverage for the royal family of the planet.
  prefs: []
  type: TYPE_NORMAL
- en: One day an alien craft appears in orbit above Vosh carrying aliens that have
    determined that they need the heavy water and start an invasion of the planet.
    You are a soldier that is based at one of the filtering factories and responsible
    for defending the facility. Your commanding officers have called out for support,
    as your weaponry is limited. All you need to do is hold out and keep the facility
    in good repair.
  prefs: []
  type: TYPE_NORMAL
- en: With this simple story we can drive the player through our scene and easily
    incorporate elements of multiplayer gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The interface for this game can be relatively rudimentary and that is important
    as our gameplay has relatively straightforward gameplay considerations. We need
    a way to move our character through the world, a way to have them attack enemies,
    a display for health, and a way to keep score:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interface](img/978-1-84969-040-9_6_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This mockup represents the interface that we will need to construct for our
    game. The game design requires touch with the device and up to this point there
    is no reason for us to process voice, shake the device, or anything else. If there
    is no reason for these features, there is no reason to add them. Good game design
    is a matter of following the KISS principle (Keep It Simple Stupid).
  prefs: []
  type: TYPE_NORMAL
- en: Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Control is one of the more difficult things to get right on a touch screen device
    and it's usually because you're dealing with a device that is designed to be held.
    Given this you have two general orientations of the device that you need to prepare
    for.
  prefs: []
  type: TYPE_NORMAL
- en: The first use case is that the user is holding the device in the hands. In this
    case the primary user interaction is going to be their thumbs — a relatively low
    precision touch instrument and one that does not lend it self to rapid movement.
  prefs: []
  type: TYPE_NORMAL
- en: The second use case is that the user has positioned the device on a table and
    is looking down at it. In this case the user is more likely to be using a pointing
    finger, which is higher precision and capable of more rapid movement.
  prefs: []
  type: TYPE_NORMAL
- en: Why is this important, you may ask? If the user is working with a lower precision
    control instrument and a slower moving finger, to remove an element of frustration
    for a wide variety of genres of game, you need to make your control area larger
    and you need to make your game more responsive to its movement and vice versa.
    Given this, we need to give the user two sets of controls to reflect the different
    user hand sizes and we need to allow those controls to have variable sensitivity
    — preferably configurable by the user in the game's settings.
  prefs: []
  type: TYPE_NORMAL
- en: Audio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Audio is usually an after thought in game design when it really should be thought
    about in great detail early in the design, so that it feels part of the game.
    If you feel that the audio of your game isn''t nearly as important as the graphic
    element I offer you two challenges: listen to your favorite movie with the sound
    off, do a search on the Internet for video game music. Sound and music done properly
    will elicit an emotional response in the user and allow for a deeper emotional
    attachment to the rest of the game.'
  prefs: []
  type: TYPE_NORMAL
- en: We will want to have sounds for a variety of user interactions — the grunts
    of enemies, the battle cry of the champions of the city, the sounds of arrows
    in flight, the cries of the slain, and so on. Additionally, we will want to have
    several sets of music that will reflect the different moods of the game. Most
    importantly, we want all of this sound to actually fit on the device. We could
    make a design decision and allow the user to access their iTunes music library
    for music, but it isn't appropriate in this context.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Project setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is now time for us to create the project for our game that will be used for
    the rest of the text. While we have walked through this at a high-level before,
    there are particular details that we want to include with this new project that
    require review.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our project will use some of the unitypackages that come with Unity to provide
    some of the core functions without us having to write a large amount of code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter a directory name for the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Character Controller, Skyboxes, Standard Assets (Mobile)**, and
    **Terrain Assets** packages in the **Project Wizard:**![Time for action — Project
    setup](img/978-1-84969-040-9_6_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Character Controller** will allow us to move our character around the level
    without having to deal with a lot of scripting.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Skyboxes** are useful for being able to draw the sky for our world. We will
    be able to put up a simple texture to represent the sky or ceiling for our dungeons.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard Assets (Mobile)** will contain a lot of interface and optimized
    prefabs specifically for the iPhone.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terrain Assets** will give us the basics for being able to paint on our terrain
    without having to go off and search for other assets.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As we've done previously, we need to create a new **App ID** and provisioning
    profile on the Apple Developer Center's provisioning portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and import the provisioning profile into XCode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Player Settings** change the **Product Name** to **Battlecry**. This
    is the name that the application will display when it is installed on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set our **Bundle Identifier** to that which we have from the provisioning portal.
    Here I have inserted `com.sojournermobile.battlecry` to mimic what is stored in
    the provisioning profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we're targeting both the iPhone and the iPad we must set the **Target Device**
    to **iPhone + iPad** so that we will end up with a universal binary:![Time for
    action — Project setup](img/978-1-84969-040-9_6_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide an image for the game so that it will display with a real icon when
    it starts. In the assets there is an "icon_57_57.png" file. Import that and drag
    it in to the Default Icon field:![Time for action — Project setup](img/978-1-84969-040-9_6_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To ensure that we're linking to the latest SDK, and have access to all of the
    functions of iOS available to us, select iOS Latest as the SDK version:![Time
    for action — Project setup](img/978-1-84969-040-9_6_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene in the project. You will need to do this before you can include
    the scene in the build:![Time for action — Project setup](img/978-1-84969-040-9_6_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **Build Settings** and check our scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the scene isn't showing up, make sure you have saved it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — Project setup](img/978-1-84969-040-9_6_2.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Select the **Build & Run** function from the **File** menu. If everything is
    okay you should see your iOS device start and display the Unity logo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have setup the project structure and produced our first build of the game.
    With this done we can begin to focus on importing assets into our project to begin
    building a real scene.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Building a game world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of sites that we can reach out to to get assets for the game,
    but as of Unity 3.1 there has been an integrated store through which you can acquire
    assets for your project. This interface is so easy to use that it's worth examining
    for building our level. While we won't find everything here, this is a good start.
  prefs: []
  type: TYPE_NORMAL
- en: One word of advice is that sometimes assets within the Asset Store can be purchased
    cheaper through other means so be sure to shop around.
  prefs: []
  type: TYPE_NORMAL
- en: Unity Asset Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Unity Asset Store is a tool built right into the Unity environment through
    which you can purchase prefab and integrate them right into your project without
    ever having to leave the tool. The prefabs in the asset store cover models, scripts,
    and even functionality that will plug into the Unity IDE itself.
  prefs: []
  type: TYPE_NORMAL
- en: Open the store by selecting **Asset Store** in the **Window** menu:![Unity Asset
    Store](img/978-1-84969-040-9_6_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authenticate with the **Asset Store** by creating an account if you have not
    already done so:![Unity Asset Store](img/978-1-84969-040-9_6_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will be greeted by the main menu of the store where you can shop for
    various types of Unity compatible assets, sounds, prefabs, scripts, and so on:![Unity
    Asset Store](img/978-1-84969-040-9_6_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the ground plane for our scene with **Game Object | Create Other | Plane**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a light into the scene with **Game Object | Create Other | Point Light**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Unity **Asset Store** window enter **Allegorithmic** and select the **18
    FREE Substances** package:![Unity Asset Store](img/978-1-84969-040-9_6_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the package and import the assets into the project:![Unity Asset Store](img/978-1-84969-040-9_6_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `Substances_Free` directory in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Desert_Sand_01** package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Desert_Sand_01** material onto the plane:![Unity Asset Store](img/978-1-84969-040-9_6_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Soldiers Pack** into the search area:![Unity Asset Store](img/978-1-84969-040-9_6_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the **Soldiers Pack** by **TheAvatarStudioi** into the project:![Unity
    Asset Store](img/978-1-84969-040-9_6_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `SoldiersPack` folder in the **Project** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `ArmyOne` folder located beneath `SoldiersPack`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Army 01** prefab object to the scene:![Unity Asset Store](img/978-1-84969-040-9_6_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Stone** into the search field:![Unity Asset Store](img/978-1-84969-040-9_6_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the Stone assets from the Universal Image into the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `Stone` folder in the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the stone prefab into the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale the Stone prefab by **10** units along each axis:![Unity Asset Store](img/978-1-84969-040-9_6_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the enlarged stones in the scene to make some basic scenery:![Unity
    Asset Store](img/978-1-84969-040-9_6_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have laid out the stage where all the action will take place in our game
    by importing assets from the **Asset Store**. While we have some basic animation
    ready for actors in the scene, we don't have a player character that can be controlled
    by the player. What we are missing are actors to participate in the game. We need
    to build a controller for our player character that will work with our game design.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we discussed the design of our game and set up our project.
    Along the way we have setup version control, imported assets from a wide variety
    of sources including the Unity asset store, and produced the first build for our
    device. We are now ready to move onto the first hurdle that is to move our player
    character through the scene.
  prefs: []
  type: TYPE_NORMAL
