["```swift\n    this.imagePicker = new UIImagePickerController();\n    this.imagePicker.FinishedPickingMedia += this.ImagePicker_FinishedPickingMedia;\n    this.imagePicker.Canceled += this.ImagePicker_Cancelled;\n    this.imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;\n    this.buttonChoose.TouchUpInside += delegate {\n    this.PresentModalViewController(this.imagePicker, true);\n    } ;\n\n    ```", "```swift\n    private void ImagePicker_FinishedPickingMedia (object sender, UIImagePickerMediaPickedEventArgs e){\n    UIImage pickedImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;\n    this.imageView.Image = pickedImage;\n    this.imagePicker.DismissModalViewControllerAnimated(true);\n    }\n    private void ImagePicker_Cancelled (object sender, EventArgs e){\n    this.imagePicker.DismissModalViewControllerAnimated(true);\n    }\n\n    ```", "```swift\nUIImage pickedImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;\n\n```", "```swift\nthis.imagePicker.DismissModalViewControllerAnimated(true);\n\n```", "```swift\nthis.imagePicker.MediaTypes = new string[] { \"public.image\", \"public.movie\" };\n\n```", "```swift\nif (e.Info[UIImagePickerController.MediaType].ToString() == \"public.movie\"){\nNSUrl mediaUrl = e.Info[UIImagePickerController.MediaURL] as NSUrl;\n// Do something useful with the media url.\n}\n\n```", "```swift\n    this.imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;\n\n    ```", "```swift\n    if (UIImagePickerController.IsSourceTypeAvailable( UIImagePickerControllerSourceType.Camera)){\n    this.imagePicker.SourceType = UIImagePickerControllerSourceType.Camera;\n    } else{\n    this.imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;\n    }\n\n    ```", "```swift\n    pickedImage.SaveToPhotosAlbum(delegate( UIImage image, NSError error) {\n    if (null != error){\n    Console.WriteLine(\"Image not saved! Message: {0}\", error.LocalizedDescription);\n    }\n    } );\n\n    ```", "```swift\nif (UIImagePickerController.IsSourceTypeAvailable( UIImagePickerControllerSourceType.Camera))\n\n```", "```swift\nthis.imagePicker.SourceType = UIImagePickerControllerSourceType.Camera;\n\n```", "```swift\nif (null != error){\nConsole.WriteLine(\"Image not saved! Message: {0}\", error.LocalizedDescription);\n}\n\n```", "```swift\n    using MonoTouch.MediaPlayer;\n\n    ```", "```swift\n    this.moviePlayer = new MPMoviePlayerController( new NSUrl(\"videos/video.mov\"));\n    this.moviePlayer.View.Frame = this.View.Bounds;\n    this.View.AddSubview(this.moviePlayer.View);\n\n    this.playbackStateChanged = NSNotificationCenter.DefaultCenter.AddObserver( MPMoviePlayerController.PlaybackStateDidChangeNotification, this.MoviePlayer_PlaybackStateChanged);this.finishedPlaying = NSNotificationCenter.DefaultCenter.AddObserver( MPMoviePlayerController.PlaybackDidFinishNotification, this.MoviePlayer_FinishedPlayback);\n    this.buttonPlay.TouchUpInside += delegate {\n    this.moviePlayer.Play();\n    } ;\n\n    ```", "```swift\n    private void MoviePlayer_PlaybackStateChanged(NSNotification ntf){\n    Console.WriteLine(\"Movie player load state changed: {0}\", this.moviePlayer.PlaybackState);\n    }\n    private void MoviePlayer_FinishedPlayback(NSNotification ntf){\n    Console.WriteLine(\"Movie player finished playing.\");\n    }\n\n    ```", "```swift\nthis.moviePlayer = new MPMoviePlayerController( new NSUrl(\"videos/video.mov\"));\n\n```", "```swift\nthis.moviePlayer.View.Frame = this.View.Bounds;\nthis.View.AddSubview(this.moviePlayer.View);\n\n```", "```swift\nConsole.WriteLine(\"Movie player load state changed: {0}\", this.moviePlayer.PlaybackState);\n\n```", "```swift\n    using MonoTouch.MediaPlayer;\n\n    ```", "```swift\n    private MPMusicPlayerController musicPlayerController;\n    private MPMediaPickerController mediaPicker;\n\n    ```", "```swift\n    this.mediaPicker = new MPMediaPickerController(MPMediaType.Music);\n    this.mediaPicker.ItemsPicked += MediaPicker_ItemsPicked;\n    this.mediaPicker.DidCancel += MediaPicker_DidCancel;\n    this.musicPlayerController = MPMusicPlayerController.ApplicationMusicPlayer;\n    this.buttonSelectSongs.TouchUpInside += delegate {\n    this.PresentModalViewController(this.mediaPicker, true);\n    } ;\n    this.buttonPlay.TouchUpInside += delegate {\n    this.musicPlayerController.Play();\n    } ;\n    this.buttonStop.TouchUpInside += delegate {\n    this.musicPlayerController.Stop();\n    } ;\n\n    ```", "```swift\n    private void MediaPicker_ItemsPicked ( object sender, ItemsPickedEventArgs e){\n    this.musicPlayerController.SetQueue(e.MediaItemCollection);\n    this.DismissModalViewControllerAnimated(true);\n    }\n    private void MediaPicker_DidCancel (object sender, EventArgs e){\n    this.mediaPicker.DismissModalViewControllerAnimated(true);\n    }\n\n    ```", "```swift\nthis.mediaPicker = new MPMediaPickerController(MPMediaType.Music);\n\n```", "```swift\nthis.mediaPicker.ItemsPicked += MediaPicker_ItemsPicked;\nthis.mediaPicker.DidCancel += MediaPicker_DidCancel;\n\n```", "```swift\nthis.musicPlayerController.SetQueue(e.MediaItemCollection);\n\n```", "```swift\nConsole.WriteLine(this.musicPlayerController .NowPlayingItem.ValueForProperty(MPMediaItem.TitleProperty));\n\n```", "```swift\nusing MonoTouch.AVFoundation;\n//...\nAVAudioPlayer audioPlayer = AVAudioPlayer.FromUrl( new NSUrl(\"path/to/sound file\"));\naudioPlayer.Play();\n\n```", "```swift\n    using System.IO;\n    using MonoTouch.AVFoundation;\n    using MonoTouch.AudioToolbox;\n\n    ```", "```swift\n    string soundFile = Path.Combine(Environment.GetFolderPath( Environment.SpecialFolder.Personal), \"sound.wav\");\n    NSUrl soundFileUrl = new NSUrl(soundFile);\n    NSDictionary recordingSettings = NSDictionary.FromObjectAndKey( AVAudioSettings.AVFormatIDKey, NSNumber.FromInt32((int) AudioFileType.WAVE));\n    NSError error = null;\n    this.audioRecorder = AVAudioRecorder.ToUrl( soundFileUrl, recordingSettings, out error);\n    this.buttonStart.TouchUpInside += delegate {\n    this.audioRecorder.Record();\n    } ;\n    this.buttonStop.TouchUpInside += delegate {\n    this.audioRecorder.Stop();\n    AVAudioPlayer player = AVAudioPlayer.FromUrl(soundFileUrl);\n    player.Play();\n    } ;\n\n    ```", "```swift\nthis.audioRecorder = AVAudioRecorder.ToUrl( soundFileUrl, recordingSettings, out error);\n\n```", "```swift\nNSDictionary recordingSettings = NSDictionary.FromObjectAndKey( AVAudioSettings.AVFormatIDKey, NSNumber .FromInt32((int)AudioFileType.WAVE));\n\n```", "```swift\nthis.audioRecorder.Record();\n\n```", "```swift\nthis.audioRecorder.Stop();\nAVAudioPlayer player = AVAudioPlayer.FromUrl(soundFileUrl);\nplayer.Play();\n\n```", "```swift\nThreadPool.QueueUserWorkItem(delegate {\nwhile (this.audioRecorder.Recording){\nthis.audioRecorder.UpdateMeters();\nConsole.WriteLine(this.audioRecorder.PeakPower(0));\n}\n} );\n\n```", "```swift\n    using MonoTouch.AssetsLibrary;\n\n    ```", "```swift\n    this.buttonEnumerate.TouchUpInside += delegate {\n    this.assetsLibrary = new ALAssetsLibrary();\n    this.assetsLibrary.Enumerate(ALAssetsGroupType.All, this.GroupsEnumeration, this.GroupsEnumerationFailure);\n    } ;\n\n    ```", "```swift\n    private void GroupsEnumeration(ALAssetsGroup assetGroup, ref bool stop){\n    if (null != assetGroup){\n    stop = false;\n    assetGroup.SetAssetsFilter(ALAssetsFilter.AllPhotos);\n    assetGroup.Enumerate(this.AssetEnumeration);\n    }\n    }\n    private void AssetEnumeration(ALAsset asset, int index, ref bool stop){\n    if (null != asset){\n    stop = false;\n    Console.WriteLine(\"Asset url: {0}\", asset.DefaultRepresentation.Url.AbsoluteString);\n    }\n    }\n    private void GroupsEnumerationFailure(NSError error){\n    if (null != error){\n    Console.WriteLine(\"Error enumerating asset groups! Message: {0}\", error.LocalizedDescription);\n    }\n    }\n\n    ```", "```swift\nthis.assetsLibrary.Enumerate(ALAssetsGroupType.All, this.GroupsEnumeration, this.GroupsEnumerationFailure);\n\n```", "```swift\nprivate void GroupsEnumeration(ALAssetsGroup assetGroup, ref bool stop)\n\n```", "```swift\nif (null != assetGroup){\n// Continue enumerating\nstop = false;\n// Determine what assets to enumerate\nassetGroup.SetAssetsFilter(ALAssetsFilter.AllPhotos);\n// Enumerate assets\nassetGroup.Enumerate(this.AssetEnumeration);\n}\n\n```", "```swift\nif (null != asset){\n// Continue enumerating assets\nstop = false;\n// Output the asset url\nConsole.WriteLine(\"Asset url: {0}\", asset.DefaultRepresentation.Url.AbsoluteString);\n\n```", "```swift\nCGImage image = asset.DefaultRepresentation.GetImage();\n\n```", "```swift\nNSDictionary metaData = asset.DefaultRepresentation.Metadata;\nif (null != metaData){\nNSDictionary exifData = (NSDictionary)metaData[ new NSString(\"{Exif}\")];\n}\n\n```"]