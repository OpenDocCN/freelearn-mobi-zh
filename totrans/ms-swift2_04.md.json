["```swift\nif (x > y)\n  x=0\n```", "```swift\nif (x > y) {\n  x=0\n}\n```", "```swift\nif x > y {\n  x=0\n}\n```", "```swift\nif condition {\n   block of code\n}\n```", "```swift\nlet teamOneScore = 7\nlet teamTwoScore = 6\nif teamOneScore > teamTwoScore {\n    print(\"Team One Won\")\n}\n```", "```swift\nif condition {\n    block of code if true\n} else {\n    block of code if not true\n}\n```", "```swift\nvar teamOneScore = 7\nvar teamTwoScore = 6\nif teamOneScore > teamTwoScore {\n    print(\"Team One Won\")\n} else {\n    print(\"Team Two Won\")\n}\n```", "```swift\nvar teamOneScore = 7\nvar teamTwoScore = 6\nif teamOneScore > teamTwoScore {\n    print(\"Team One Won\")\n} else if teamTwoScore > teamOneScore {\n    print(\"Team Two Won\")\n} else {\n    print(\"We have a tie\")\n}\n```", "```swift\nfor initialization; condition; update-rule {\n   block of code\n}\n```", "```swift\nfor var index = 1; index <= 4; index++ {\n    print(index)\n}\n```", "```swift\nvar countries = [\"USA\",\"UK\", \"IN\"]\nfor var index = 0; index < countries.count; index++ {\n    print(countries[index])\n}\n```", "```swift\nvar dic = [\"USA\": \"United States\", \"UK\": \"United Kingdom\", \"IN\":\"India\"]\n\nvar keys  = Array(dic.keys)\nfor var index = 0; index < keys.count; index++ {\n  print(dic[keys[index]])\n}\n```", "```swift\nfor variable in Collection/Range {\n  block of code\n}\n```", "```swift\nfor index in 1...5 {\n    print(index)\n}\n```", "```swift\nfor index in 1..<5 {\n  print(index)\n}\n```", "```swift\nvar countries = [\"USA\",\"UK\", \"IN\"]\nfor item in countries {\n    print(item)\n}\n```", "```swift\nvar dic = [\"USA\": \"United States\", \"UK\": \"United Kingdom\", \"IN\":\"India\"]\n\nfor (abbr, name) in dic {\n  print(\"\\(abbr) --  \\(name)\")\n}\n```", "```swift\nwhile condition {\n  block of code\n}\n```", "```swift\nvar ran = 0\nwhile ran < 4 {\n    ran = Int(arc4random() % 5)\n}\n```", "```swift\nrepeat {\n   block of code\n} while condition\n```", "```swift\nvar ran: Int\nrepeat {\n    ran = Int(arc4random() % 5)\n} while ran < 4\n```", "```swift\nswitch value {\n  case match1 :\n    block of code\n  case match2 :\n    block of code\n  …… as many cases as needed\n  default :\n    block of code\n}\n```", "```swift\nvar speed = 300000000\nswitch speed {\ncase 300000000:\n    print(\"Speed of light\")\ncase 340:\n    print(\"Speed of sound\")\ndefault:\n    print(\"Unknown speed\")\n}\n```", "```swift\nvar num = 5\nswitch num {\ncase 1 :\n    print(\"number is one\")\ncase 2 :\n    print(\"Number is two\")\ncase 3 :\n    print(\"Number is three\")\n}\n```", "```swift\nvar char : Character = \"e\"\nswitch char {\ncase \"a\", \"e\", \"i\", \"o\", \"u\":\n    print(\"letter is a vowel\")\ncase \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\n\"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":\n    print(\"letter is a consonant\")\ndefault:\n    print(\"unknown letter\")\n}\n```", "```swift\nvar grade = 93\nswitch grade {\ncase 90...100:\n    print(\"Grade is an A\")\ncase 80...89:\n    print(\"Grade is a B\")\ncase 70...79:\n    print(\"Grade is an C\")\ncase 60...69:\n    print(\"Grade is a D\")\ncase 0...59:\n    print(\"Grade is a F\")\ndefault:\n    print(\"Unknown Grade\")\n}\n```", "```swift\nvar studentId = 4\nvar grade = 57\nswitch grade {\ncase 90...100:\n    print(\"Grade is an A\")\ncase 80...89:\n    print(\"Grade is a B\")\ncase 70...79:\n    print(\"Grade is an C\")\ncase 55...69 where studentId == 4:\n    print(\"Grade is a D for student 4\")\ncase 60...69:\n    print(\"Grade is a D\")\ncase 0...59:\n    print(\"Grade is a F\")\ndefault:\n    print(\"Unknown Grade\")\n}\n```", "```swift\nvar studentId = 4\nvar grade = 57\nswitch grade {\ncase 90...100:\n    print(\"Grade is an A\")\ncase 80...89:\n    print(\"Grade is a B\")\ncase 70...79:\n    print(\"Grade is an C\")\ncase 60...69:\n    print(\"Grade is a D\")\ncase 0...59:\n    print(\"Grade is a F\")\n//The following case statement would never be reached because the\n//grades would always match one of the previous two\ncase 55...69 where studentId == 4:\n    print(\"Grade is a D for student 4\")\ndefault:\n    print(\"Unknown Grade\")\n}\n```", "```swift\n Product {\n    case Book(String, Double, Int)\n    case Puzzle(String, Double)\n}\n\nvar order = Product.Book(\"Mastering Swift 2\", 49.99, 2015)\n\nswitch order {\ncase .Book(let name, let price, let year):\n    print(\"You ordered the book \\(name) for \\(price)\")\ncase .Puzzle(let name, let price):\n    print(\"You ordered the Puzzle \\(name) for \\(price)\")\n}\n```", "```swift\nfor number in 1…30 {\n    if number % 2 == 0 {\n        print(number)\n    }\n}\n```", "```swift\nfor number in 1...30 where number % 2 == 0 {\n    print(number)\n}\n```", "```swift\nvar worldSeriesWinners = [\n    (\"Red Sox\", 2004),\n    (\"White Sox\", 2005),\n    (\"Cardinals\", 2006),\n    (\"Red Sox\", 2007),\n    (\"Phillies\", 2008),\n    (\"Yankees\", 2009),\n    (\"Giants\", 2010),\n    (\"Cardinals\", 2011),\n    (\"Giants\", 2012),\n    (\"Red Sox\", 2013),\n    (\"Giants\", 2014)\n]\n\nfor case let (\"Red Sox\", year) in worldSeriesWinners {\n    print(year)\n}\n```", "```swift\nlet myNumbers: [Int?] = [1, 2, nil, 4, 5, nil, 6]\n\nfor case let .Some(num) in myNumbers {\n    print(num)\n}\n```", "```swift\nenum Optional<T> {\n     case None,\n     case Some(T)\n}\n```", "```swift\nlet myNumbers: [Int?] = [1, 2, nil, 4, 5, nil, 6]\n\nfor case let num? in myNumbers where num > 3 {\n    print(num)\n}\n```", "```swift\nfor num in myNumbers {\n    if let num = num {\n        if num > 3 {\n            print(num)\n        }\n    }\n}\n```", "```swift\nenum Identifier {\n    case Name(String)\n    case Number(Int)\n    case NoIdentifier\n}\n\nvar playerIdentifier = Identifier.Number(42)\n\nif case let .Number(num) = playerIdentifier {\n    print(\"Player's number is \\(num)\")\n}\n```", "```swift\nvar playerIdentifier = Identifier.Number(42)\n\nif case let .Number(num) = playerIdentifier where num == 2 {\n    print(\"Player is either Xander Bogarts or Derek Jeter\")\n}\n```", "```swift\nfor i in 1...10 {\n    if i % 2 == 0 {\n        continue\n    }\n    print(\"\\(i) is odd\")\n}\n```", "```swift\n1 is odd\n3 is odd\n5 is odd\n7 is odd\n9 is odd\n```", "```swift\nfor i in 1...10 {\n    if i % 2 == 0 {\n        break\n    }\n    print(\"\\(i) is odd\")\n}\n```", "```swift\n1 is odd\n```", "```swift\nvar name = \"Jon\"\nvar sport = \"Baseball\"\nswitch sport {\ncase \"Baseball\":\n    print(\"\\(name) plays Baseball\")\n    fallthrough\ncase \"Basketball\":\n    print(\"\\(name) plays Basketball\")\n    fallthrough\ndefault:\n    print(\"Unknown sport\")\n}\n```", "```swift\nJon plays Baseball\nJon plays Basketball\nUnknown sport\n```", "```swift\nvar x = 9\nif x > 10 {\n  // Functional code here\n} else {\n   // Do error condition\n}\n```", "```swift\nvar x = 9\nguard x > 10 else {\n  // Do error condition\n  return\n}\n// Functional code here\n```", "```swift\nfunc guardFunction(str: String?) {\n    guard let goodStr = str else {\n        print(\"Input was nil\")\n        return\n    }\n    print(\"Input was \\(goodStr)\")\n}\n```", "```swift\nfunc sayHello(name: String) -> Void {\nlet retString = \"Hello \" + name\n   print( retString)\n}\n```", "```swift\nfunc sayHello2(name: String) ->String {\n    let retString = \"Hello \" + name\n    return retString\n}\n```", "```swift\nsayHello(\"Jon\")\n```", "```swift\nvar message = sayHello2(\"Jon\")\nprint(message)\n```", "```swift\nsayHello2(\"Jon\")\nvar message = sayHello2(\"Jon\")\n```", "```swift\nfunc sayHello(name: String, greeting: String) {\n    print(\"\\(greeting) \\(name)\")\n}\n```", "```swift\nsayHello(\"Jon\", greeting:\"Bonjour\")\n```", "```swift\nfunc sayHello(name: String, greeting: String = \"Bonjour\") {\n    print(\"\\(greeting) \\(name)\")\n}\n```", "```swift\nsayHello(\"Jon\")\nsayHello(\"Jon\", greeting: \"Hello\")\n```", "```swift\nfunc sayHello4(name: String, name2: String = \"Kim\", greeting: String = \"Bonjour\") {\n    println(\"\\(greeting) \\(name) and \\(name2)\")\n}\n\nsayHello(\"Jon\", greeting: \"Hello\")\n```", "```swift\nfunc getNames() -> [String] {\n    var retArray = [\"Jon\", \"Kim\", \"Kailey\", \"Kara\"]\n    return retArray\n}\n\nvar names = getNames()\n```", "```swift\nfunc getTeam() -> (team:String, wins:Int, percent:Double) {\n    let retTuple = (\"Red Sox\", 99, 0.611)\n return retTuple\n}\n\nvar t = getTeam()\nprint(\"\\(t.team) had \\(t.wins) wins\")\n```", "```swift\nRed Sox had 99 wins\n```", "```swift\nfunc getName() ->String {\n    return nil\n}\n```", "```swift\nfunc getName() ->String? {\n    return nil\n}\n```", "```swift\nfunc getTeam2(id: Int) -> (team:String, wins:Int, percent:Double)? {\n    if id == 1 {\n        return (\"Red Sox\", 99, 0.611)\n    }\n    return nil\n}\n```", "```swift\nfunc getTeam() -> (team:String, wins:Int, percent:Double?) {\n    let retTuple: (String, Int, Double?) = (\"Red Sox\", 99, nil)\n    return retTuple\n}\n```", "```swift\nfunc winPercentage(team: String, wins: Int, loses: Int) -> Double {\n    return Double(wins) / Double(wins + loses)\n}\n```", "```swift\nvar per = winPercentage(\"Red Sox\", wins: 99, loses: 63)\n```", "```swift\nfunc winPercentage(BaseballTeam team: String, withWins wins: Int, andLoses losses: Int) -> Double {\n  return Double(wins) / Double(wins + losses)\n}\n```", "```swift\nvar per = winPercentage(BaseballTeam:\"Red Sox\", withWins:99, andLoses:63)\n```", "```swift\nfunc sayHello(greeting: String, names: String...) {\n  for name in names {\n    print(\"\\(greeting) \\(name)\")\n  }\n}\n```", "```swift\nsayHello(\"Hello\", names: \"Jon\", \"Kim\")\n```", "```swift\nfunc sayHello(greeting: String, name: String, count: Int) {\n  while count > 0 {\n    print(\"\\(greeting) \\(name)\")\n    count--\n  }\n}\n```", "```swift\nfunc sayHello(greeting: String, name: String, var count: Int) {\n  while (count > 0) {\n    println(\"\\(greeting) \\(name)\")\n    count--\n  }\n}\n```", "```swift\nfunc swap(inout first: String, inout second: String) {\n  let tmp = first\n  first = second\n  second = tmp\n}\n```", "```swift\nvar one = \"One\"\nvar two = \"Two\"\nswap(&one,&two)\nprint(\"one: \\(one) two: \\(two)\")\n```", "```swift\nfunc sort(inout numbers: [Int]) {\n  //This is the nested function\n  func reverse(inout first: Int, inout second: Int) {\n    let tmp = first\n    first = second\n    second = tmp\n  }\n  //Nested function ends.\n\n    var count = numbers.count\n\n    while count > 0 {\n      for var i = 1; i < count; i++ {\n        if numbers[i] < numbers[i-1] {\n          reverse(&numbers[i], second: &numbers[i-1])\n        }\n      }\n    count--\n    }\n}\n```", "```swift\nvar nums: [Int] = [6,2,5,3,1]\n\nsort(&nums)\n\nfor value in nums {\n    print(\"--\\(value)\")\n}\n```", "```swift\nfunc isValidIP(ipAddr: String?) -> Bool {\n\n    guard let ipAddr = ipAddr else {\n        return false\n    }\n\nlet octets = ipAddr.characters.split { $0 == \".\"}.map{String($0)}\n\n    guard octets.count == 4 else {\n        return false\n    }\n\n    func validOctet(octet: String) -> Bool {\n        guard let num = Int(String(octet))\n            where num >= 0 && num < 256 else {\n                return false\n        }\n        return true\n    }\n\n    for octet in octets {\n        guard validOctet(octet) else {\n            return false\n        }\n    }\n\n    return true\n\n}\n```"]