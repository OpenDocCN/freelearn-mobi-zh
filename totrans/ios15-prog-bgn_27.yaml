- en: '*Chapter 23*: Getting Started with SwiftUI'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, you created the **user interface** (**UI**) for the *Let's
    Eat* app using storyboards. The process involved dragging objects representing
    views to a storyboard, creating outlets in view controller files, and connecting
    the two together.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will focus on **SwiftUI**, an easy and innovative way to create
    apps across all Apple platforms. Instead of specifying the user interface using
    storyboards, SwiftUI uses a declarative Swift syntax, and works with new Xcode
    design tools to keep your code and design in sync. Features such as Dynamic Type,
    Dark Mode, localization, and accessibility are automatically supported.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will build a simplified version of the *Let's Eat* app
    using SwiftUI. This app will just contain the `LetsEat` project you have been
    working on. You will create a new SwiftUI Xcode project instead.
  prefs: []
  type: TYPE_NORMAL
- en: You'll start by adding and configuring SwiftUI views to create the `UIKit` and
    SwiftUI views together by adding and configuring a map view for the **Restaurant
    Detail** screen. Finally, you'll create the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to build a SwiftUI app that
    reads model objects, presents them in a list, and allows navigation to a second
    screen containing a map view. You can then implement this for your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a SwiftUI Xcode project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the **Restaurant List** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding model objects and configuring navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using UIKit and SwiftUI views together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Restaurant Detail screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will create a new SwiftUI Xcode project for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter23` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3DnHuIN](https://bit.ly/3DnHuIN)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by creating a new SwiftUI Xcode project for your SwiftUI app in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a SwiftUI Xcode project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A SwiftUI Xcode project is created in the same way as a regular Xcode project,
    but you configure it to use SwiftUI instead of storyboards. As you will see, the
    user interface is generated entirely in code, and you'll be able to see changes
    in the user interface immediately as you modify your code.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: You can watch a video of Apple's SwiftUI presentation from WWDC 2020 at [https://developer.apple.com/videos/play/wwdc2020/10119](https://developer.apple.com/videos/play/wwdc2020/10119).
  prefs: []
  type: TYPE_NORMAL
- en: You can watch a video showing what's new in SwiftUI from WWDC 2021 at [https://developer.apple.com/videos/play/wwdc2021/10018/](https://developer.apple.com/videos/play/wwdc2021/10018/).
  prefs: []
  type: TYPE_NORMAL
- en: Apple's official SwiftUI documentation can be found online at [https://developer.apple.com/xcode/swiftui/](https://developer.apple.com/xcode/swiftui/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by creating a new SwiftUI Xcode project. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Xcode project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **iOS**. Select the **App** template, and then click **Next**:![Figure
    23.1: Project template screen with iOS App template selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.01_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.1: Project template screen with iOS App template selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `LetsEatSwiftUI`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Interface:** **SwiftUI**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The other settings should already be set. Make sure all the checkboxes are unticked.
    Click **Next** when done.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose a location to save the `LetsEatSwiftUI` project and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your project appears on the screen, with the `ContentView` file selected in
    the Project navigator. You''ll see the content of this file on the left side of
    the Editor area, and a canvas containing a preview on the right side:![Figure
    23.3: Xcode showing LetsEatSwiftUI project'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.3: Xcode showing LetsEatSwiftUI project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `ContentView` file contains code that will generate the initial view for
    your app. Click the Scheme menu and choose **iPhone SE (2nd generation)** so the
    view will be previewed using an **iPhone SE (2nd generation)**''s screen:![Figure
    23.4: Scheme menu with iPhone SE (2nd generation) selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.4: Scheme menu with iPhone SE (2nd generation) selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Resume** button in the canvas to generate the preview:![Figure
    23.5: Canvas showing Resume button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.05_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.5: Canvas showing Resume button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that a preview of your app is displayed in the canvas:![Figure 23.6:
    Canvas showing app preview'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.06_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.6: Canvas showing app preview'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the canvas isn't visible, select **Canvas** from the **Adjust Editor Options**
    menu to show it. If you are using a MacBook, you can use the pinch gesture on
    your trackpad to resize the simulated image.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you need more room to work, click the Navigator and Editor buttons to hide
    the Navigator and Editor areas, and drag the border in the Editor area to resize
    the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 23.7: Xcode interface showing Navigator button, Editor button, and
    border'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_23.07_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 23.7: Xcode interface showing Navigator button, Editor button, and border'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at the `ContentView` file. This file contains two structures,
    `ContentView` and `ContentView_Previews`. The `ContentView` structure describes
    the view's content and layout, and conforms to the `View` protocol. The `ContentView_Previews`
    structure declares a preview for the `ContentView` structure. The preview is displayed
    in the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this in action, change the `Hello, World!` text to `Lets Eat` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preview in the canvas updates to reflect your changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.8: Canvas showing app preview with text view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_23.08_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 23.8: Canvas showing app preview with text view'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created your first SwiftUI project! Now let's create the
    **Restaurant List** screen, starting with a view that will display the data of
    a particular restaurant.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Restaurant List screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using storyboards, you modify attributes of a view using the Attributes
    inspector. In SwiftUI, you can modify either your code or the preview in the canvas.
    As you have seen, changing the code in the `ContentView` file will immediately
    update the preview, and modifying the preview will update the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s customize the `ContentView` structure to display the data of a particular
    restaurant. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Library button. Type `tex` in the filter field, and drag a `Lets
    Eat` text:![Figure 23.9: Library with Text object to be dragged'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.09_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.9: Library with Text object to be dragged'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Xcode has automatically added code to the `ContentView` file for this text
    view. Verify that your code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will use details for The Tap Trailhouse, a restaurant in Boston, as sample
    data. Modify the text views in the `VStack` view to show the name and cuisines
    offered by The Tap Trailhouse restaurant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the changes are reflected in the preview:![Figure 23.10: App preview
    showing The Tap Trailhouse name and cuisines'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.10_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.10: App preview showing The Tap Trailhouse name and cuisines'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll use a SwiftUI image view to display a photo of the restaurant. Modify
    your code as shown to add an image view to your `VStack` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your canvas now displays two text views and one image view as shown:![Figure
    23.11: App preview showing two text views and one image view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.11_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.11: App preview showing two text views and one image view'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To change the way your text looks, you use **modifiers** instead of the Attributes
    inspector. These are methods that change how your objects look or behave. Update
    your code as shown to set the style and color of your text views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the changes to the text in the preview.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To make sure your view stays in the middle of the screen, you''ll embed it
    in an `HStack` view and add `Spacer` objects to both sides. An `HStack` view contains
    subviews that are arranged horizontally, and it is similar to a horizontally oriented
    stack view. A `Spacer` object is a flexible space that expands horizontally in
    an `HStack` view. *Command + click* on your `VStack` view and choose **Embed in
    HStack** from the pop-up menu:![Figure 23.12: Editor area showing pop-up menu
    with Embed in HStack selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.12_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.12: Editor area showing pop-up menu with Embed in HStack selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that your code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add two `Spacer` objects to the `HStack` view as shown to center the view horizontally
    on your screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your view is now complete. You will use this view as a cell in the **Restaurant
    List** screen in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding model objects and configuring navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now have a view that can be used to display the details of a restaurant.
    You'll use this view as a cell in a SwiftUI list, which is a container that presents
    data in a single column. You'll also configure model objects to populate this
    list. Follow these step:.
  prefs: []
  type: TYPE_NORMAL
- en: '*Command + click* on the `HStack` view and choose **Embed in List** to display
    a list containing five cells in the canvas:![Figure 23.13: Editor area showing
    pop-up menu with Embed in List selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.13_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.13: Editor area showing pop-up menu with Embed in List selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that your code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `resources` folder contained in the `Chapter23` folder of the code
    bundle you downloaded from [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).
    Drag the `RestaurantItem.swift` file to the Project navigator and click **Finish**
    when prompted to add them to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `RestaurantItem` file in the Project navigator and you should see
    the following code inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `RestaurantItem` file contains a structure, `RestaurantItem`, and an array,
    `testData`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `RestaurantItem` structure is similar to the `RestaurantItem` class that
    you used in your `LetsEat` project. To use this structure in a list, you have
    to make it conform to the `Identifiable` protocol. This protocol specifies that
    a list item must have an `id` property that can identify a particular item. A
    `UUID` instance is assigned to each `RestaurantItem` instance upon creation to
    ensure each `id` is unique.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can learn more about the `Identifiable` protocol at this link: [https://developer.apple.com/documentation/swift/identifiable](https://developer.apple.com/documentation/swift/identifiable).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`testData` is an array containing five `RestaurantItem` instances representing
    five restaurants in the Boston area. It fulfills the same function as the JSON
    files you used in the earlier chapters of this book.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `ContentView` file in the Project navigator. Add a `restaurantItems`
    property to your view to hold data for the list after the opening curly brace
    of the `ContentView` structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify your code as shown to populate your list with your test data, and display
    a restaurant''s data in each cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you make major changes to your code, the automatic updating of the canvas
    is paused. Click the **Resume** button to resume if required. Note that the cell
    size has changed to suit the restaurant image's size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you''ll implement navigation so that when a cell is tapped, a second
    screen is presented that will show details of a particular restaurant. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify your code as shown to wrap your list in a `UINavigation` class that you've
    used before in your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a modifier to set the list''s `title` property to show `Boston, MA` at
    the top of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wrap the cell in a `destination` property, which specifies the view to be presented
    when a cell is tapped. Currently the specified view is a text view showing the
    name of the restaurant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `.fixedSize()` modifier is used to ensure the text is not truncated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note that the list in the canvas has automatically displayed disclosure arrows:![Figure
    23.14: App preview showing disclosure arrow'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.14_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.14: App preview showing disclosure arrow'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To see this working as it should in an app, click the **Live Preview** button
    in the canvas:![Figure 23.15: Canvas showing Live Preview button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.15_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.15: Canvas showing Live Preview button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click any cell in the preview to display text containing the name of the tapped
    restaurant:![Figure 23.16: App preview showing a selected cell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.16: App preview showing a selected cell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is a great way of ensuring your list works as expected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The view code is starting to look cluttered, so you''ll extract the cell into
    its own separate view. *Command + click* the `NavigationLink` view and choose
    **Extract Subview**:![Figure 23.17: Editor area showing pop-up menu with Extract
    Subview selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.17_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.17: Editor area showing pop-up menu with Extract Subview selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'All the view code for the cell has been moved into a separate view named `ExtractedView`:![Figure
    23.18: Editor area showing name of extracted view highlighted'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.18_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.18: Editor area showing name of extracted view highlighted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the name of the method call and the extracted view to `RestaurantCell`.
    Your code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don't worry about the error, you'll fix it in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a property to the `RestaurantCell` view to hold a `RestaurantItem` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add code to the `ContentView` structure to pass the `RestaurantItem` instance
    to the `RestaurantCell` view as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that the preview still works the way it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've completed the implementation of the `UIKit` and SwiftUI views together
    to create a map view that you'll use in the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Using UIKit and SwiftUI Views together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you have created the **Restaurant List** screen, and tapping
    each cell in this screen displays the restaurant's name on a second screen. You'll
    modify your app to display a **Restaurant Detail** screen when a cell on the **Restaurant
    List** screen is tapped, but before that, you'll create a SwiftUI view that displays
    a map.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using storyboards, all you needed to do was to drag in a map view from
    the Library to a view in the storyboard. SwiftUI does not have a native map view
    but you can use the same map view that you used in the storyboard to render the
    map. In fact, you can use any view subclass in SwiftUI by wrapping them in a SwiftUI
    view that conforms to the `UIViewRepresentable` protocol. Let''s create a custom
    view that can present a map view now. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **File** | **New** | **File** to open the template selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. In the **User Interface** section, click
    **SwiftUI View** and click **Next**:![Figure 23.19: File template screen with
    SwiftUI View selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.19_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.19: File template screen with SwiftUI View selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Name the new file `MapView` and click `MapView` file will appear in the Project
    navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MapView` file, import `MapKit`, and make the `MapView` structure conform
    to the `UIViewRepresentable` protocol as shown. Don''t worry about the error that
    appears, you''ll fix that in the next few steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You need two methods to conform to the `UIViewRepresentable` protocol: a `makeUIView(context:)`
    method that creates an `MKMapView` and an `updateUIView(_:context:)` method that
    configures it and responds to any changes. Modify your code as shown to replace
    the `body` property with a `makeUIView(context:)` method that creates and returns
    an empty `MKMapView` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify your code as shown to add an `updateUIView(_:context:)` method just
    after the `makeUIView(context:)` method. This sets the map view''s region to center
    the map on The Tap Trailhouse''s location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that this is the same method you used to make a region for the **Map**
    screen in the *Let's Eat* app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The error is now gone, and a blank map view appears in the canvas. This is
    because the preview is in static mode and only renders SwiftUI views. You''ll
    need to turn on live preview to see the map. Click the **Live Preview** button
    and you should see a map of Boston centered on The Tap Trailhouse''s location
    in a moment:![Figure 23.20: App preview showing map'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.20_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.20: App preview showing map'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If it doesn't work, check your internet connection, and click the **Try Again**
    or **Resume** buttons above your preview.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The latitude and longitude values are currently hardcoded. Declare two properties
    to hold the latitude and longitude values as shown after the `MapView` structure
    declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `updateUI(_:context:)` method to use these properties instead of
    the hardcoded values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `MapView_Previews` structure to pass in sample latitude and longitude
    values as shown. This will generate the same map you saw earlier in the preview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the canvas, check to see that the map is still displayed (You may need to
    click **Resume**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've created a SwiftUI map view that shows the restaurant's location. Now,
    let's see how to make the complete **Restaurant Detail** screen in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Completing the Restaurant Detail screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You now have a SwiftUI map view displaying a map. Now, you''ll create a new
    SwiftUI view to represent the **Restaurant Detail** screen and add the map view
    to it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **File** | **New** | **File** to open the template selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. In the **User Interface** section, click
    **SwiftUI View** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new file `RestaurantDetail` and click `RestaurantDetail` file appears
    in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare and define the `RestaurantDetail` and `RestaurantDetail_Previews` structures
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preview displays a map view above the restaurant text views, but does not
    render the map. As before, click the **Live Preview** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The canvas now displays the **Restaurant Detail** screen with a rendered map:![Figure
    23.21: App preview showing Restaurant Detail screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.21_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 23.21: App preview showing Restaurant Detail screen'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You've completed the implementation of the **Restaurant Detail** screen using
    SwiftUI. Now you'll modify the list in the **Restaurant List** screen so that
    the **Restaurant Detail** screen will be displayed when a cell is tapped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `ContentView` file in the Project navigator and modify the `RestaurantCell`
    structure''s code to use the `RestaurantDetail` structure as the destination when
    a cell is tapped:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **Live Preview** button in the canvas. Tap a row in the **Restaurant
    List** screen. You''ll see the **Restaurant Detail** screen for that restaurant
    appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 23.22: App preview showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_23.22_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 23.22: App preview showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the app preview works fine in the canvas. If you want to run
    in the simulator, you''ll need to make one small change in the `ContentView` structure.
    Click the `ContentView` file in the Project navigator and assign the `testdata`
    array to the `restaurantItems` property as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run your app, and it will appear in the simulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.23: iOS Simulator showing Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_23.23_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 23.23: iOS Simulator showing Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: You have completed building a simple SwiftUI app! Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this brief introduction to SwiftUI, you've seen how to build a simplified
    version of the *Let's Eat* app using SwiftUI.
  prefs: []
  type: TYPE_NORMAL
- en: You started by adding and configuring SwiftUI views to create the `UIKit` and
    SwiftUI views together by adding and configuring a map view for the **Restaurant
    Detail** screen. Finally, you created the **Restaurant Detail** screen and added
    the map view you created earlier to it.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to use SwiftUI to create an app that reads model objects, presents
    them in a list, and allows navigation to a second screen containing a map view.
    You can then implement this for your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about **Swift concurrency**, a new way to
    handle asynchronous operations in Swift.
  prefs: []
  type: TYPE_NORMAL
