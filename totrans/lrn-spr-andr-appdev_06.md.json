["```kt\nHost -- localhost\nPort -- 3306\nUsername -- root\nPassword -- 12345678\n```", "```kt\n-----\n-----\n<!-- This is for JDBC use -->\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n-----\n-----\n\n<!-- This is for use the MySQL -->\n<dependency>\n   <groupId>mysql</groupId>\n   <artifactId>mysql-connector-java</artifactId>\n   <scope>runtime</scope>\n</dependency>\n-----\n-----\n```", "```kt\n# Database Configuration\n\nspring.datasource.url=jdbc:mysql://localhost:3306/packtpub_dbtest_schema\nspring.datasource.username=root\nspring.datasource.password=12345678\n```", "```kt\nHost -- localhost                                    // the host URL\nPort -- 3306                                         // the host POST number\nUsername -- root                                     // the username of the database\nPassword -- 12345678                                 // the password of the database\nDatabase Name - packtpub_dbtest                      // the Database name\nDatabase Schema Name - packtpub_dbtest_schema        // the Database Schema name\n```", "```kt\ncreate table users (id int not null auto_increment, name varchar(255), email varchar(255), contact_number varchar(255)\n, primary key (id)) engine=MyISAM;\nINSERT INTO user (id, name, email, contact_number) values (1, 'Sunnat', 'sunnat629@gmail.com', '1234567890');\nINSERT INTO user (id, name, email, contact_number) values (2, 'Chaity', 'chaity123@gmail.com', '9876543210');\nINSERT INTO user (id, name, email, contact_number) values (3, 'Mirza', 'mirza123@gmail.com', '1234567800');\nINSERT INTO user (id, name, email, contact_number) values (4, 'Hasib', 'hasib123@gmail.com', '1234500800');\nINSERT INTO user (id, name, email, contact_number) values (4, 'Jisan', 'jisan123@gmail.com', '1004500800');\n\n```", "```kt\ndata class UserModel(val id: Int,\n                     val name: String,\n                     val email: String,\n                     val contact_number: String)\n```", "```kt\nclass UserRowMapper : RowMapper<UserModel> {\n\n    @Throws(SQLException::class)\n    override fun mapRow(row: ResultSet, rowNumber: Int): UserModel? {\n        return UserModel(row.getInt(\"id\"),\n                row.getString(\"name\"),\n                row.getString(\"email\"),\n                row.getString(\"contact_number\"))\n    }\n}\n```", "```kt\ninterface UserInterface {\n    fun getAllUserList(): List<UserModel>\n    fun getUserByID(id: Int): UserModel?\n    fun addNewUser(userModel: UserModel)\n    fun updateUser(userModel: UserModel)\n    fun deleteUser(id: Int)\n}\n```", "```kt\n@Repository\nclass UserRepository: UsersInterface {\n\n    override fun getAllUserList(): List<UserModel> {\n    }\n\n    override fun getUserByID(id: Int): UserModel? {\n    }\n\n    override fun addNewUser(userModel: UserModel) {\n    }\n\n    override fun updateUser(userModel: UserModel) {\n    }\n\n    override fun deleteUser(id: Int) {\n    }\n}\n```", "```kt\n@Repository\nclass UserRepository: UserInterface {\n\n    @Autowired\n    private lateinit var jdbcTemplate: JdbcTemplate\n    ----\n    ----\n  }\n```", "```kt\noverride fun addNewUser(userModel: UserModel) {\n    val addQuery = \"INSERT INTO users (name, email, contact_number) values (?,?,?)\"\n    jdbcTemplate.update(addQuery,userModel.name,userModel.email,userModel.contact_number)\n}\n```", "```kt\noverride fun getAllUserList(): List<UserModel> {\n    val selectAllSql = \"SELECT * FROM users\"\n    return jdbcTemplate.query(selectAllSql, UserRowMapper())\n}\n```", "```kt\noverride fun getUserByID(id: Int): UserModel? {\n    val selectAllSql = \"SELECT * FROM users WHERE id = ?\"\n    return jdbcTemplate.queryForObject(selectAllSql, UserRowMapper(), id)\n}\n```", "```kt\noverride fun updateUser(userModel: UserModel) {\n    val updateQuery = \"UPDATE users SET name=?,email=?, contact_number=? WHERE id=?\"\n    jdbcTemplate.update(updateQuery, userModel.name, userModel.email, userModel.contact_number, userModel.id)\n}\n```", "```kt\noverride fun deleteUser(id: Int) {\n    val deleteQuery = \"DELETE FROM users WHERE id=?\"\n    jdbcTemplate.update(deleteQuery, id)\n}\n```", "```kt\n@Service\nclass UserService: UsersInterface {\n\n    @Autowired\n private lateinit var userRepository: UserRepository\n\n    ------\n    ------\n}\n```", "```kt\n@Service\nclass UserService: UsersInterface {\n    @Autowired\n    private lateinit var userRepository: UserRepository\n\n    override fun getAllUserList(): List<UserModel> {\n        return userRepository.getAllUserList()\n    }\n\n    override fun getUserByID(id: Int): UserModel? {\n        return userRepository.getUserByID(id)\n    }\n\n    override fun addNewUser(userModel: UserModel) {\n        userRepository.addNewUser(userModel)\n    }\n\n    override fun updateUser(userModel: UserModel, id: Int) {\n        userRepository.updateUser(userModel, id)\n    }\n\n    override fun deleteUser(id: Int) {\n        userRepository.deleteUser(id)\n    }\n}\n```", "```kt\n@RestController\nclass UserController {\n    ----\n    ----\n}\n```", "```kt\n @Autowired\n private lateinit var userService: UserService\n```", "```kt\n//    Getting the User List\n@GetMapping(path = [\"/users\"])\nfun getAllUsers(): ResponseEntity<List<UserModel>> {\n    return ResponseEntity(userService.getAllUserList(),\n            HttpStatus.OK)\n}\n```", "```kt\n//    Getting one User by ID\n@GetMapping(path = [\"/user/{id}\"])\nfun getAllUserByID(@PathVariable(\"id\") id: Int): ResponseEntity<UserModel> {\n    return ResponseEntity(userService.getUserByID(id),\n            HttpStatus.OK)\n}\n```", "```kt\n//    Inserting new User\n@PostMapping(path = [\"/user/new\"])\nfun addNewUser(@RequestBody userModel: UserModel): String {\n    ResponseEntity(userService.addNewUser(userModel), HttpStatus.CREATED)\n    return \"${userModel.name} has been added to database\"\n}\n```", "```kt\n//    Updating a User\n@PutMapping(path = [\"/user/{id}\"])\nfun updateUser(@RequestBody userModel: UserModel, @PathVariable(\"id\") id: Int): ResponseEntity<UserModel> {\n    userService.updateUser(userModel, id)\n    return ResponseEntity(userModel, HttpStatus.OK)\n}\n```", "```kt\n//    Deleting a User\n@DeleteMapping(path = [\"/user/{id}\"])\nfun deleteUser(@PathVariable(\"id\") id: Int): String {\n    userService.deleteUser(id)\n    return \"$id User has been deleted.\"\n}\n```", "```kt\n-----\n-----\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <scope>runtime</scope>\n</dependency>\n\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n-----\n-----\n```", "```kt\n## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)\nspring.datasource.url = jdbc:mysql://localhost:3306/cha6_dbtest_schema?useSSL=false\nspring.datasource.username = root\nspring.datasource.password = 12345678\n\n## Hibernate Properties\n# The SQL dialect makes Hibernate generate better SQL for the chosen database spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect\n\n# Hibernate ddl auto (create, create-drop, validate, update) spring.jpa.hibernate.ddl-auto = update\n```", "```kt\n@Entity\n@Table(name=\"user_jpa\")\n@EntityListeners(AuditingEntityListener::class)\ndata class UserModel(\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    var id: Long = 0,\n\n    @NotBlank\n    @Column(name = \"name\")\n    var name: String ?= null,\n\n    @NotBlank\n    @Column(name = \"email\")\n    var email: String ?= null,\n\n    @NotBlank\n    @Column(name = \"contact_number\")\n    var contact_number: String ?= null\n)\n```", "```kt\n@Repository\ninterface UserRepository: JpaRepository<UserModel, Long>\n```", "```kt\n@RestController\nclass UserController {\n    ----\n    ----\n}\n```", "```kt\n@RestController\nclass UserController {\n\n    @Autowired\n private lateinit var userRepository: UserRepository\n\n    ----\n    ----\n}\n```", "```kt\n// to get all the users details\n @GetMapping(\"/users\")\n    fun getAllUsers(): List<UserModel>{\n        return userRepository.findAll()\n    }\n```", "```kt\n // to get one specific user details\n @GetMapping(\"/user/{id}\")\n    fun getUser(@PathVariable(name = \"id\") id: Long): UserModel {\n        return userRepository.findById(id).get()\n    }\n```", "```kt\n// to add a user\n@PostMapping(\"/users\")\nfun addUser(@Valid @RequestBody userModel: UserModel): UserModel {\n    return userRepository.save(userModel)\n}\n```", "```kt\n // to update a user\n    @PutMapping(\"/user/{id}\")\n    fun updateUser(@PathVariable(name = \"id\")id: Long, @Valid @RequestBody userDetails: UserModel): UserModel {\n        val currentUser: UserModel = userRepository.findById(id).get()\n\n        currentUser.name = userDetails.name\n        currentUser.email = userDetails.email\n        currentUser.contact_number = userDetails.contact_number\n\n        return userRepository.save(currentUser)\n    }\n```", "```kt\n// to delete a user\n @DeleteMapping(\"/user/{id}\")\n    fun deleteUser(@PathVariable(name = \"id\")id: Long): ResponseEntity<*>{\n        userRepository.delete(userRepository.findById(id).get())\n        return ResponseEntity.ok().build<Any>()\n    }\n```", "```kt\nbuildscript {\n   -----\n-----\n    dependencies {\n classpath 'com.android.tools.build:gradle:3.2.1'\n classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.10\"\n\n    }\n}\n-----\n-----\n```", "```kt\n      // Room components\n    implementation \"android.arch.persistence.room:runtime:$rootProject.roomVersion\"\n    kapt \"android.arch.persistence.room:compiler:$rootProject.roomVersion\"\n    androidTestImplementation \"android.arch.persistence.room:testing:$rootProject.roomVersion\"\n\n    // Lifecycle components\n    implementation \"android.arch.lifecycle:extensions:$rootProject.archLifecycleVersion\"\n    kapt \"android.arch.lifecycle:compiler:$rootProject.archLifecycleVersion\"\n\n    // Coroutines\n    api \"org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutines\"\n    api \"org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutines\"\n```", "```kt\nkotlin {\n    experimental {\n coroutines \"enable\"    }\n}\n```", "```kt\n@Entity(tableName = \"users\")\nclass Users(): Parcelable {\n    @PrimaryKey(autoGenerate = true)\n    @NonNull\n    @ColumnInfo(name = \"userId\")\n    var userId: Int = 0\n\n    @NonNull\n    @ColumnInfo(name = \"username\")\n    lateinit var username: String\n\n    @NonNull\n    @ColumnInfo(name = \"email\")\n    lateinit var email: String\n\n    @NonNull\n    @ColumnInfo(name = \"contactNumber\")\n    lateinit var contactNumber: String\n\n   @NonNull\n    @ColumnInfo(name = \"address\")\n    lateinit var address: String\n\n    constructor(username: String, email: String, contactNumber: String, address: String):this(){\n        this.username = username\n        this.email = email\n        this.contactNumber = contactNumber\n        this.address = address\n    }\n\n    override fun toString(): String {\n        return \"Users(username='$username', email='$email', contactNumber='$contactNumber', address='$address')\"\n    }\n}\n```", "```kt\n@Entity(tableName = \"users\")\nclass Users(): Parcelable {\n    ----\n    ----\n    constructor(parcel: Parcel) : this() {\n        userId = parcel.readInt()\n        username = parcel.readString()!!\n        email = parcel.readString()!!\n        contactNumber = parcel.readString()!!\n        address = parcel.readString()!!\n    }\n    ----\n    ----\n    override fun writeToParcel(parcel: Parcel, flags: Int) {\n        parcel.writeInt(userId)\n        parcel.writeString(username)\n        parcel.writeString(email)\n        parcel.writeString(contactNumber)\n        parcel.writeString(address)\n    }\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    companion object CREATOR : Parcelable.Creator<Users> {\n        override fun createFromParcel(parcel: Parcel): Users {\n            return Users(parcel)\n        }\n\n override fun newArray(size: Int): Array<Users?> {\n            return arrayOfNulls(size)\n        }\n    }\n}\n```", "```kt\n@Parcelize\n@Entity(tableName = \"users\")\nclass Users(): Parcelable {\n    @PrimaryKey(autoGenerate = true)\n    @NonNull\n    @ColumnInfo(name = \"userId\")\n    var userId: Int = 0\n\n    @NonNull\n    @ColumnInfo(name = \"username\")\n    lateinit var username: String\n\n    @NonNull\n    @ColumnInfo(name = \"email\")\n    lateinit var email: String\n\n    @NonNull\n    @ColumnInfo(name = \"contactNumber\")\n    lateinit var contactNumber: String\n\n   @NonNull\n    @ColumnInfo(name = \"address\")\n    lateinit var address: String\n\n    constructor(username: String, email: String, contactNumber: String, address: String):this(){\n        this.username = username\n        this.email = email\n        this.contactNumber = contactNumber\n        this.address = address\n    }\n\n    override fun toString(): String {\n        return \"Users(username='$username', email='$email', contactNumber='$contactNumber', address='$address')\"\n    }\n}\n```", "```kt\nandroid {\n    ----\n    ----\n    androidExtensions {\n        experimental = true\n    }\n}\ndependencies {\n    ----\n    ----\n}\n```", "```kt\n@Dao\ninterface UserDAO\n```", "```kt\n@Insert\nfun addNewUser(users: Users)\n```", "```kt\n@Query(\"DELETE FROM USERS\")\nfun deleteAllUsers()\n```", "```kt\n@Query(\"SELECT * FROM USERS\")\nfun getAllUsers():  List<Users>\n```", "```kt\n@Query(\"SELECT * FROM USERS\")\nfun getAllUsers():  LiveData<List<Users>>\n```", "```kt\n@Dao\ninterface UserDAO {\n\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun addNewUser(users: Users)\n\n    @Query(\"DELETE FROM USERS\")\n    fun deleteAllUsers()\n\n    @Query(\"SELECT * FROM USERS\")\n    fun getAllUsers():  LiveData<List<Users>>\n}\n```", "```kt\n@Database(entities = [Users::class], version = 1)\nabstract class UsersRoomDatabase : RoomDatabase() {\n    abstract fun userDAO(): UserDAO\n----\n----\n}\n```", "```kt\n// static members\ncompanion object {\n    @Volatile\n    private var INSTANCE: UsersRoomDatabase? = null\n\n    fun getDatabase(context: Context, scope: CoroutineScope): UsersRoomDatabase {\n        val tempInstance = INSTANCE\n        if (tempInstance != null) {\n            return tempInstance\n        }\n        synchronized(this) {\n            val instance = Room.databaseBuilder(\n                context.applicationContext,\n                UsersRoomDatabase::class.java,\n                \"user_database\"\n            ).addCallback(UserDatabaseCallback(scope))\n                .build()\n            INSTANCE = instance\n            return instance\n        }\n    }\n}\n```", "```kt\nfun populateDatabase(userDao: UserDAO) {\n            userDao.addNewUser(\n                Users(\n                    \"Sunnat\", \"sunnat629@gmail.com\",\n                    \"1234567890\", \"Dhaka\"\n                )\n            )\n            userDao.addNewUser(\n                Users(\n                    \"Chaity\", \"chaity123@gmail.com\",\n                    \"54321987\", \"Dhaka\"\n                )\n            )\n        }\n```", "```kt\nfun getDatabase(context: Context, scope: CoroutineScope): UsersRoomDatabase {\n    val tempInstance = INSTANCE\n    if (tempInstance != null) {\n        return tempInstance\n    }\n    synchronized(this) {\n        val instance = Room.databaseBuilder(\n            context.applicationContext,\n            UsersRoomDatabase::class.java,\n            \"user_database\"\n        ).addCallback(UserDatabaseCallback(scope))\n .build()\n        INSTANCE = instance\n        return instance\n    }\n}\n\nprivate class UserDatabaseCallback(\n private val scope: CoroutineScope\n) : RoomDatabase.Callback() {\n\n override fun onOpen(db: SupportSQLiteDatabase) {\n super.onOpen(db)\n INSTANCE?.let { database ->\n scope.launch(Dispatchers.IO) {\n populateDatabase(database.userDAO())\n }\n }\n }\n----\n----\n}\n```", "```kt\nclass UsersRepository(private val mUserDAO: UserDAO) {\n\n    val mAllUsers: LiveData<List<Users>> = mUserDAO.getAllUsers()\n\n    @WorkerThread\n    suspend fun insert(user: Users){\n        mUserDAO.addNewUser(user)\n    }\n}\n```", "```kt\nopen class MainViewModel(application: Application) : AndroidViewModel(application) {\n    private val mRepository: UsersRepository\n    private val mAllUsers: LiveData<List<Users>>\n\n    private var  parentJob = Job()\n    private val coroutineContext: CoroutineContext\n        get() = parentJob + Dispatchers.Main\n\n    private val scope = CoroutineScope(coroutineContext)\n\n    init {\n        val userDao = UsersRoomDatabase.getDatabase(application, scope).userDAO()\n        mRepository = UsersRepository(userDao)\n        mAllUsers = mRepository.mAllUsers\n    }\n\n    fun getAllUsers(): LiveData<List<Users>>{\n        return mAllUsers\n    }\n\n    fun insert(users: Users) = scope.launch(Dispatchers.IO){\n        mRepository.insert(users)\n    }\n\n    override fun onCleared() {\n        super.onCleared()\n        parentJob.cancel()\n    }\n}\n```", "```kt\n----\n----\n    <EditText\n            android:id=\"@+id/editEmail\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"@string/hint_email\"\n            android:inputType=\"textEmailAddress\"\n            android:padding=\"5dp\"\n            android:textSize=\"18sp\" android:layout_marginTop=\"8dp\"\n            app:layout_constraintTop_toBottomOf=\"@+id/editUsername\" app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"/>\n\n    <EditText\n            android:id=\"@+id/editContactID\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"@string/hint_contact\"\n            android:inputType=\"phone\"\n            android:padding=\"5dp\"\n            android:textSize=\"18sp\" android:layout_marginTop=\"8dp\"\n            app:layout_constraintTop_toBottomOf=\"@+id/editEmail\" app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n    />\n----\n---\n    <Button\n            android:id=\"@+id/buttonSave\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@color/colorPrimary\"\n            android:text=\"@string/button_save\"\n            android:textColor=\"@android:color/white\"\n            android:layout_marginBottom=\"8dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\" android:layout_marginTop=\"8dp\"\n            app:layout_constraintTop_toBottomOf=\"@+id/editAddress\" app:layout_constraintVertical_bias=\"1.0\"/>\n</android.support.constraint.ConstraintLayout>\n\n```", "```kt\nclass NewUserActivity : AppCompatActivity(), View.OnClickListener {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_new_user)\n        buttonSave.setOnClickListener(this)\n    }\n\n    override fun onClick(view: View?) {\n        if (view!!.id == R.id.buttonSave){\n            val intent = Intent()\n            if (isTextFieldEmpty()){\n                Snackbar.make(view, \"Empty Field\", Snackbar.LENGTH_LONG)\n                    .setAction(\"Action\", null).show()\n                setResult(Activity.RESULT_CANCELED, intent)\n            } else {\n                val users = Users(editUsername.text.toString(),\n                    editEmail.text.toString(),\n                    editContactID.text.toString(),\n                    editAddress.text.toString())\n\n                Log.wtf(\"CRAY\", editUsername.text.toString()+\" \"+\n                        editEmail.text.toString()+\" \"+\n                        editContactID.text.toString()+\" \"+\n                        editAddress.text.toString())\n\n                Log.wtf(\"CRAY\", users.toString())\n                // If an instance of this Activity already exists, then it will be moved to the front.\n                // If an instance does NOT exist, a new instance will be created.\n                intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT)\n                intent.putExtra(getString(R.string.result_replay), users)\n                setResult(Activity.RESULT_OK, intent)\n            }\n            finish()\n        }\n    }\n\n    private fun isTextFieldEmpty(): Boolean {\n        return TextUtils.isEmpty(editUsername.text) ||\n                TextUtils.isEmpty(editEmail.text) ||\n                TextUtils.isEmpty(editContactID.text) ||\n                TextUtils.isEmpty(editAddress.text)\n    }\n}\n```", "```kt\nclass UserListAdapter internal constructor(context: Context) :\n    RecyclerView.Adapter<UserListAdapter.UserViewHolder>() {\n\n    private val mLayoutInflater: LayoutInflater = LayoutInflater.from(context)!!\n    private var mUsers: List<Users> = emptyList() // Cached copy of users\n\n    inner class UserViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val rowName: TextView = itemView.name\n        val rowEmail: TextView = itemView.email\n        val rowContactNumber: TextView = itemView.contactNumber\n        val rowAddress: TextView = itemView.contactNumber\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UserViewHolder {\n        val itemView: View = mLayoutInflater.inflate(R.layout.recyclerview_item, parent, false)\n        return UserViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: UserViewHolder, position: Int) {\n        holder.rowName.text = mUsers[position].username\n        holder.rowEmail.text = mUsers[position].email\n        holder.rowContactNumber.text = mUsers[position].contactNumber\n        holder.rowAddress.text = mUsers[position].address\n    }\n\n    override fun getItemCount(): Int {\n        return mUsers.size\n    }\n\n    internal fun setNewUser(users: List<Users>) {\n        mUsers = users\n        notifyDataSetChanged()\n    }\n}\n```", "```kt\nonCreateViewHolder()\nonBindViewHolder()\nUserViewHolder()\n```", "```kt\nval rowName: TextView = itemView.name\nval rowEmail: TextView = itemView.email\nval rowContactNumber: TextView = itemView.contactNumber\nval rowAddress: TextView = itemView.contactNumber\n```", "```kt\nholder.rowName.text = mUsers[position].username\nholder.rowEmail.text = mUsers[position].email\nholder.rowContactNumber.text = mUsers[position].contactNumber\nholder.rowAddress.text = mUsers[position].address\n\n```", "```kt\nval userListAdapter = UserListAdapter(this)\nrecyclerview.adapter = userListAdapter\nrecyclerview.layoutManager =  LinearLayoutManager(this)\n```", "```kt\nprivate lateinit var mMainViewModel: MainViewModel\n```", "```kt\nmMainViewModel = ViewModelProviders.of(this).get(MainViewModel::class.java)\n```", "```kt\nmMainViewModel.getAllUsers().observe(this,\n    Observer {\n            userList -> userListAdapter.setNewUser(userList!!)\n    })\n```", "```kt\nprivate val requestCode: Int = 1\n\n```", "```kt\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (requestCode == this.requestCode && resultCode == Activity.RESULT_OK){\n        data?.let {\n        val users: Users = it.getParcelableExtra(getString(R.string.result_replay)) as Users\n        mMainViewModel.insert(users)\n        }\n    }\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n        tools:showIn=\"@layout/activity_main\"\n        tools:context=\".ui.MainActivity\">\n    <android.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerview\"\n            android:background=\"@android:color/darker_gray\"\n            tools:listitem=\"@layout/recyclerview_item\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_height=\"0dp\" android:layout_width=\"0dp\"/>\n</android.support.constraint.ConstraintLayout>\n```", "```kt\nfab.setOnClickListener {\n    val intent = Intent(this@MainActivity, NewUserActivity::class.java)\n    startActivityForResult(intent, requestCode)\n\n    /*Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n        .setAction(\"Action\", null).show()*/\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\n    private val requestCode: Int = 1\n\n    private lateinit var mMainViewModel: MainViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setSupportActionBar(toolbar)\n\n        val userListAdapter = UserListAdapter(this)\n        recyclerview.adapter = userListAdapter\n        recyclerview.layoutManager =  LinearLayoutManager(this)\n\n        mMainViewModel = ViewModelProviders.of(this).get(MainViewModel::class.java)\n        mMainViewModel.getAllUsers().observe(this,\n            Observer {\n                    userList -> userListAdapter.setNewUser(userList!!)\n            })\n\n        fab.setOnClickListener {\n            val intent = Intent(this@MainActivity, NewUserActivity::class.java)\n            startActivityForResult(intent, requestCode)\n        }\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (requestCode == this.requestCode && resultCode == Activity.RESULT_OK){\n            data?.let {\n            val users: Users = it.getParcelableExtra(getString(R.string.result_replay)) as Users\n            mMainViewModel.insert(users)\n            }\n        }\n    }\n}\n```"]