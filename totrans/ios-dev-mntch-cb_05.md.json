["```swift\n    private class PickerModelDelegate : UIPickerViewModel\n\n    ```", "```swift\n    public PickerModelDelegate (MainController controller) {\n    this.parentController = controller;\n    this.transportList = new List<string>() { \"On foot\", \"Bicycle\", \"Motorcycle\", \"Car\", \"Bus\" };\n    this.distanceList = new List<string>() { \"0.5\", \"1\", \"5\", \"10\", \"100\" };\n    this.unitList = new List<string>() { \"mi\", \"km\" };\n    this.transportSelected = this.transportList[0];\n    this.distanceSelected = this.distanceList[0];\n    this.unitSelected = this.unitList[0];\n    }\n    private MainController parentController;\n    private List<string> transportList;\n    private List<string> distanceList;\n    private List<string> unitList;\n    string transportSelected;\n    string distanceSelected;\n    string unitSelected;\n\n    ```", "```swift\n    this.picker.Model = new PickerModelDelegate (this);\n\n    ```", "```swift\nswitch (component){\ncase 0:\nreturn this.transportList[row];\ncase 1:\nreturn this.distanceList[row];\ndefault:\nreturn this.unitList[row];\n}\n\n```", "```swift\n    public partial class TableController : UITableViewController\n\n    ```", "```swift\n    private class TableSource : UITableViewSource{\n    public TableSource (){\n    this.cellID = \"cellIdentifier\";\n    this.tableData = new Dictionary<int, string> () {\n    {0, \"Music\"},\n    {1, \"Videos\"},\n    {2, \"Images\"}\n    };\n    }\n    private string cellID;\n    private Dictionary<int, string> tableData;\n    public override int RowsInSection (UITableView tableview, int section){\n    return this.tableData.Count;\n    }\n    public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath){\n    int rowIndex = indexPath.Row;\n    UITableViewCell cell = tableView.DequeueReusableCell (this.cellID);\n    if (null == cell){\n    cell = new UITableViewCell (UITableViewCellStyle.Default, this.cellID);\n    }\n    cell.TextLabel.Text = this.tableData[rowIndex];\n    return cell;\n    }\n    }\n\n    ```", "```swift\n    this.TableView.Source = new TableSource ();\n\n    ```", "```swift\nprivate class TableSource : UITableViewSource\n\n```", "```swift\nthis.cellID = \"cellIdentifier\";\nthis.tableData = new Dictionary<int, string> () {\n{0, \"Music\"},\n{1, \"Videos\"},\n{2, \"Images\"}\n};\n\n```", "```swift\nreturn this.tableData.Count;\n\n```", "```swift\nUITableViewCell cell = tableView.DequeueReusableCell (this.cellID);\n\n```", "```swift\ncell = new UITableViewCell (UITableViewCellStyle.Default, this.cellID);\n\n```", "```swift\ncell.TextLabel.Text = this.tableData[rowIndex];\nreturn cell;\n\n```", "```swift\npublic override void RowSelected (UITableView tableView, NSIndexPath indexPath){\ntableView.DeselectRow (indexPath, true);\n}\n\n```", "```swift\n    int rowIndex = indexPath.Row;\n    string cellID = this.tableData[rowIndex];\n    UITableViewCell cell = tableView.DequeueReusableCell (cellID);\n    if (null == cell){\n    cell = new UITableViewCell (this.cellStyles[rowIndex], cellID);\n    }\n    cell.TextLabel.Text = this.tableData[rowIndex];\n    if (rowIndex > 0){\n    cell.DetailTextLabel.Text = String.Format (\"Details for {0}\", cellID);\n    }\n    return cell;\n\n    ```", "```swift\n    private Dictionary<int, UITableViewCellStyle> cellStyles;\n\n    ```", "```swift\n    this.cellStyles = new Dictionary<int, UITableViewCellStyle>() {\n    {0, UITableViewCellStyle.Default},\n    {1, UITableViewCellStyle.Subtitle},\n    {2, UITableViewCellStyle.Value1},\n    {3, UITableViewCellStyle.Value2}\n    };\n\n    ```", "```swift\n    {3, \"Recordings\"}\n\n    ```", "```swift\nprivate Dictionary<int, UITableViewCellStyle> cellStyles;\n\n```", "```swift\nint rowIndex = indexPath.Row;\nstring cellID = this.tableData[rowIndex];\nUITableViewCell cell = tableView.DequeueReusableCell (cellID);\n\n```", "```swift\ncell = new UITableViewCell (this.cellStyles[rowIndex], cellID);\n\n```", "```swift\nif (rowIndex > 0){\ncell.DetailTextLabel.Text = String.Format (\"Details for {0}\", cellID);\n}\n\n```", "```swift\n    TableController tableController;\n    UINavigationController navController;\n    //â€¦\n    this.tableController = new TableController();\n    this.navController = new UINavigationController(this.tableController);\n    window.RootViewController = this.navController;\n\n    ```", "```swift\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.buttonEdit = new UIBarButtonItem (\"Edit\", UIBarButtonItemStyle.Bordered, this.ButtonEdit_Clicked);\n    this.buttonDone = new UIBarButtonItem (UIBarButtonSystemItem.Done, this.ButtonDone_Clicked);\n    this.NavigationItem.SetRightBarButtonItem (this.buttonEdit, false);\n    this.tableData = new List<string>() {\"Music\", \"Videos\", \"Images\" };\n    this.TableView.Source = new TableSource(this.tableData);\n    }\n\n    ```", "```swift\n    this.TableView.SetEditing (true, true);\n    this.NavigationItem.SetRightBarButtonItem (this.buttonDone, true);\n\n    ```", "```swift\n    this.TableView.SetEditing (false, true);\n    this.NavigationItem.SetRightBarButtonItem (this.buttonEdit, true);\n\n    ```", "```swift\n    public override void CommitEditingStyle (UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath){\n    int rowIndex = indexPath.Row;\n    if (editingStyle == UITableViewCellEditingStyle.Delete) {\n    this.tableData.RemoveAt (rowIndex);\n    tableView.DeleteRows (new NSIndexPath[] { indexPath }, UITableViewRowAnimation.Left);\n    }\n    }\n\n    ```", "```swift\nthis.NavigationItem.SetRightBarButtonItem (this.buttonEdit, false);\n\n```", "```swift\nthis.TableView.SetEditing (true, true);\nthis.NavigationItem.SetRightBarButtonItem (this.buttonDone, true);\n\n```", "```swift\nif (editingStyle == UITableViewCellEditingStyle.Delete){\nthis.tableData.RemoveAt (rowIndex);\ntableView.DeleteRows (new NSIndexPath[] { indexPath }, UITableViewRowAnimation.Left);\n}\n\n```", "```swift\n    this.buttonAdd = new UIBarButtonItem (UIBarButtonSystemItem.Add, this.ButtonAdd_Clicked);\n\n    ```", "```swift\n    private void ButtonAdd_Clicked (object sender, EventArgs e){\n    this.tableData.Add (\"Recordings\");\n    this.TableView.ReloadData ();\n    }\n\n    ```", "```swift\n    this.NavigationItem.SetLeftBarButtonItem (this.buttonAdd, true);\n\n    ```", "```swift\n    this.NavigationItem.SetLeftBarButtonItem (null, true);\n\n    ```", "```swift\nthis.NavigationItem.SetLeftBarButtonItem (this.buttonAdd, true);\nthis.NavigationItem.SetLeftBarButtonItem (null, true);\n\n```", "```swift\nthis.tableData.Add (\"Recordings\");\nthis.TableView.ReloadData ();\n\n```", "```swift\nthis.TableView.InsertRows (new NSIndexPath[] { NSIndexPath.FromRowSection(this.tableData.Count - 1, 0) }, UITableViewRowAnimation.Right);\n\n```", "```swift\npublic override bool CanMoveRow (UITableView tableView, NSIndexPath indexPath){\nreturn true;\n}\npublic override void MoveRow (UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath){\nstring itemToMove = this.tableData[sourceIndexPath.Row];\nthis.tableData.Remove (itemToMove);\nthis.tableData.Insert (destinationIndexPath.Row, itemToMove);\n}\n\n```", "```swift\npublic override int NumberOfSections (UITableView tableView){\nreturn this.tableData.Count;\n}\npublic override string TitleForHeader (UITableView tableView, int section){\nreturn Convert.ToString (this.tableData[section][0]);\n}\npublic override string[] SectionIndexTitles (UITableView tableView){\nreturn this.tableData.Select (s => Convert.ToString (s[0])).Distinct ().ToArray ();\n}\n\n```", "```swift\npublic override string TitleForHeader (UITableView tableView, int section){\nreturn Convert.ToString (this.tableData[section][0]);\n}\n\n```", "```swift\npublic override string[] SectionIndexTitles (UITableView tableView){\nreturn this.tableData.Select (s => Convert.ToString (s[0])).Distinct ().ToArray ();\n}\n\n```", "```swift\n    private class SearchDelegate : UISearchDisplayDelegate{\n    public SearchDelegate (TableController controller){\n    this.parentController = controller;\n    }\n    private TableController parentController;\n    public override bool ShouldReloadForSearchString ( UISearchDisplayController controller, string forSearchString){\n    this.parentController.filterDataList = this.parentController.tableData\n    .Where (s => s.ToLower ().Contains (forSearchString.ToLower ()))\n    .ToList ();\n    this.parentController.filterDataList.Sort (delegate (string firstStr, string secondStr) {\n    return firstStr.CompareTo (secondStr);\n    });\n    return true;\n    }\n    }\n\n    ```", "```swift\n    this.TableView.Source = new TableSource (this);\n    this.SearchDisplayController.SearchResultsSource = new TableSource(this);\n    this.SearchDisplayController.Delegate = new SearchDelegate(this);\n\n    ```", "```swift\nprivate class SearchDelegate : UISearchDisplayDelegate\n\n```", "```swift\nthis.parentController.filterDataList = this.parentController.tableData\n.Where (s => s.ToLower ().Contains (forSearchString.ToLower ()))\n.ToList ();\n\n```", "```swift\nthis.parentController.filterDataList.Sort (delegate( string firstStr, string secondStr) {\nreturn firstStr.CompareTo (secondStr);\n});\nreturn true;\n\n```", "```swift\nthis.TableView.Source = new TableSource (this);\nthis.SearchDisplayController.SearchResultsSource = new TableSource(this);\n\n```", "```swift\npublic override int RowsInSection (UITableView tableview, int section){\nif (tableview.Equals (this.parentController.TableView)){\nreturn this.parentController.tableData.Count;\n} else{\nreturn this.parentController.filterDataList.Count;\n}\n}\n\n```", "```swift\nif (tableView.Equals (this.parentController.TableView)){\ncell.TextLabel.Text = this.parentController.tableData[rowIndex];\n} else{\ncell.TextLabel.Text = this.parentController.filterDataList[rowIndex];\n}\n\n```", "```swift\nthis.SearchDisplayController.SearchBar.SearchButtonClicked += delegate {\nthis.SearchDisplayController.SetActive(false, true);\n};\n\n```", "```swift\n    public override void ViewDidAppear (bool animated){\n    NSUrl url = new NSUrl (\"http://software.tavlikos.com\");\n    NSUrlRequest urlRequest = new NSUrlRequest (url);\n    this.webView.LoadRequest (urlRequest);\n    }\n\n    ```", "```swift\nNSUrl url = new NSUrl (\"http://software.tavlikos.com\");\n\n```", "```swift\n    NSUrl fileUrl = NSUrl.FromFilename ( \"./html_content/T-Shirts.html\");\n    NSUrlRequest urlRequest = new NSUrlRequest (fileUrl);\n    this.webView.ScalesPageToFit = false;\n    this.webView.LoadRequest (urlRequest);\n\n    ```", "```swift\nNSUrl fileUrl = NSUrl.FromFilename (\"./html_content/T-Shirts.html\");\n\n```", "```swift\n    string htmlString = \"<html><head></head><body> <span style=\\\"font-weight: bold;\\\">This</span> \" + \"<span style=\\\"text-decoration: underline;\\\">is</span> <span style=\\\"font-style: italic;\\\">some formatted</span> \" +\" <span style=\\\"font-weight: bold; text-decoration: underline;\\\">text!</span><br></body></html>\";\n    this.webView.LoadHtmlString (htmlString, null);\n\n    ```", "```swift\nthis.webView.LoadHtmlString (htmlString, null);\n\n```", "```swift\nstring htmlString = \"<img style=\\\"width: 215px;\\\" src=\\\"tshirts_s.jpg\\\">\";\n\n```", "```swift\nthis.webView.LoadHtmlString (htmlString, new NSUrl ( \"./html_content\", true));\n\n```", "```swift\n    using MonoTouch.QuickLook;\n\n    ```", "```swift\n    private class PreviewDataSource : QLPreviewControllerDataSource{\n    public PreviewDataSource (List<PreviewItem> items){\n    this.previewItems = items;\n    }\n    private List<PreviewItem> previewItems;\n    public override int PreviewItemCount ( QLPreviewController controller){\n    return this.previewItems.Count;\n    }\n    public override QLPreviewItem GetPreviewItem ( QLPreviewController controller, int index){\n    return this.previewItems[index];\n    }\n    }\n\n    ```", "```swift\n    this.previewItems = new List<PreviewItem>() {\n    new PreviewItem(\"PDF\", NSUrl.FromFilename(\"docs/pdfdoc.pdf\")),\n    new PreviewItem(\"DOCX\", NSUrl.FromFilename(\"docs/text.docx\")),\n    new PreviewItem(\"XLSX\", NSUrl.FromFilename(\"docs/spreadsheet.xlsx\"))\n    };\n    this.previewController = new QLPreviewController();\n    this.previewController.DataSource = new PreviewDataSource(this.previewItems);\n    this.buttonPreviewDocs.TouchUpInside += delegate {\n    this.PresentModalViewController(this.previewController, true);\n    };\n\n    ```", "```swift\nprivate class PreviewDataSource : QLPreviewControllerDataSource\n\n```", "```swift\nprivate class PreviewItem : QLPreviewItem\n\n```"]