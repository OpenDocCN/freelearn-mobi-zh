- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing Your First Wear OS Using Jetpack Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Wear OS** is an operating system developed by Google for smartwatches and
    other wearable devices. There are several reasons why creating Wear OS for Android
    is essential in our Modern Android Development. First, this means expanding the
    Android ecosystem; Wear OS extends the Android ecosystem by allowing developers
    to create apps and services that can be accessed through a smartwatch or other
    wearable device.'
  prefs: []
  type: TYPE_NORMAL
- en: This expands the reach of Android and creates new opportunities for developers
    and users. In addition, it provides seamless integration with Android smartphones,
    allowing users to easily access notifications, calls, and other information on
    their smartwatches, hence providing a more convenient and efficient way for users
    to interact with your application.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s not forget the most notable apps that can benefit from this are health
    and fitness tracking apps, including heart rate monitoring, step tracking, and
    workout tracking. This allows users to track their fitness goals and stay motivated
    to achieve them. Finally, Wear OS allows users to customize their smartwatch with
    different watch faces, apps, and widgets. This provides a personalized experience
    that meets individual needs and preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Wearable technology is a rapidly growing market, and as the technology continues
    to evolve, Wear OS has the potential to become a key player in the wearable technology
    market. Wear OS is still very new, and in this chapter, we will explore simple
    basic examples as many of the APIs might change in the future. Therefore, getting
    an idea of how it works and how to create cards, buttons, and show lists will
    be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll be covering the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with your first Wear OS in Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a scrollable list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing cards in Wear OS (`TitleCard` and `AppCard`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a chip and a toggle chip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing `ScalingLazyColumn` to showcase your content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The complete source code for this chapter can be found at [https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_ten](https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_ten).
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with your first Wear OS in Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android OS is used worldwide, and one of the use cases is Wear OS (by *wear*,
    we mean smartwatches). This is good news for Android developers because this means
    more jobs. Furthermore, many applications now have to support Wear OS, such as
    Spotify, fitness tracking apps, heart monitoring apps, and more, which implies
    more use cases will arise, and companies will adopt building for *Wear OS* even
    if it’s only for notification purposes. Therefore, this chapter will explore how
    to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will look into getting started with Wear OS and how to set
    up your virtual watch testing environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create your first project on Wear OS in Jetpack Compose, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create a new Android project in Android Studio and ensure you have the
    latest version of Android Studio and the Wear OS SDK installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, following the procedure of creating your first application, [*Chapter
    1*](B18827_01.xhtml#_idTextAnchor014)*, Getting Started with Modern Android Development
    Skills,* pick **Wear OS** instead of **Phone and Tablet**, as shown in *Figure
    10**.1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.1 – Selecting Wear OS\uFEFF](img/Figure_10.1.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Selecting Wear OS
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose `WearOSExample`. You will notice it uses a minimum SDK of `API 30: Android`
    `11.0 (R)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.2 – Minimum SDK version\uFEFF](img/Figure_10.2.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Minimum SDK version
  prefs: []
  type: TYPE_NORMAL
- en: Click **Finish**, and you should be able to see a sample code template provided
    for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s go ahead and get our virtual Wear OS testing device set up to run
    the already provided code template. Navigate to **Tools** | **Device Manager**,
    then create a new device. If you need help in this section, refer to [*Chapter
    1*](B18827_01.xhtml#_idTextAnchor014), *Getting Started with Modern Android* *Development
    Skills*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, see *Figure 10**.3* to choose your Wear OS virtual testing device. Note
    that you can also choose either a round, square, or rectangular device. We will
    use round.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.3 – Wear OS virtual device set up\uFEFF](img/Figure_10.3.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Wear OS virtual device set up
  prefs: []
  type: TYPE_NORMAL
- en: Hit **Next**, then download the system image – in our case, **R**, which is
    API level 30.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.4 – Installing the system image for testing\uFEFF](img/Figure_10.4.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Installing the system image for testing
  prefs: []
  type: TYPE_NORMAL
- en: Then press **Finish**, and you should have a ready-to-use Wear OS virtual testing
    device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go ahead and change the text in `Greeting()` to say `"Hello, Android Community"`
    in the code template and run, and you should have something similar to *Figure
    10**.5*. If everything is installed correctly, you should not have a build error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.5 – Displaying a greeting on a Wear OS virtual device\uFEFF](img/Figure_10.5.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Displaying a greeting on a Wear OS virtual device
  prefs: []
  type: TYPE_NORMAL
- en: Also, ensure you change the text on the round string resource too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it, you have successfully set up your first Wear OS, and we were able
    to run the already provided `Greeting()`. In the following recipe, we will look
    at creating a simple button.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will notice the template looks precisely how you’d build Android applications,
    the only difference being the libraries used. The template uses Compose, which
    makes our work easier while developing since we will be using most of the concepts
    that we learned in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a comparison to help you know the difference between the Wear
    OS dependency and the standard dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 10.6 – Different types of dependencies (\uFEFFsource: developer.android.com)\uFEFF\
    ](img/Figure_10.6.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6 – Different types of dependencies (source: developer.android.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create our first button in Wear OS to explore the principles
    and best practices of building in Wear OS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have completed the previous recipe to get started on this one. We
    will be building upon our already created `WearOSExample` project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create your first button on Wear OS in Jetpack Compose, you can follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the already-created project, we will be adding a new button. Let’s go
    ahead and remove some of the already provided code, `fun` `Greeting(greetingName:
    String)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.7 – A screenshot showing what to be deleted\uFEFF](img/Figure_10.7.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – A screenshot showing what to be deleted
  prefs: []
  type: TYPE_NORMAL
- en: Removing the `Greeting()` function called in `WearOSExampleTheme` will complain;
    go ahead and remove that too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then create a new `Composable` function that will define your button. You can
    use the `Button` function provided by Jetpack Compose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, call the new function in our `WearApp()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, in our activity, call the `setContent` method with your button''s `Composable`
    function as the parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also utilize the already provided `Preview` function to view the changes.
    You will notice that we explicitly specify the device, `@Preview(device = Devices.WEAR_OS_SMALL_ROUND,
    showSystemUi =` `true)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run your Wear OS app, and you should see your button displayed on the screen,
    as shown in *Figure 10**.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.8 – A button in Wear \uFEFFOS](img/Figure_10.8.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – A button in Wear OS
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at another example, which is a button with an icon; this is pretty
    similar to the first button, but in this case, we will just be adding an icon
    instead of text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new function called `SampleButton2()` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, comment out `SampleButton`, add `SampleButton2`, and run; you should
    see something similar to *Figure 10**.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.9 – A button with an icon in Wear\uFEFF OS](img/Figure_10.9.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – A button with an icon in Wear OS
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the Wear OS platform has some unique considerations
    when it comes to designing and testing apps, such as the smaller screen size and
    the need to optimize battery life. It’s essential to test your app on an actual
    device to ensure it works as expected on Wear OS.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Judging from your previous knowledge of Compose, everything we have worked on
    so far should look familiar. In our example, we’re using `SampleButton` and `WearOSExampleTheme`
    from the Wear OS Compose library to create a button that’s designed specifically
    for Wear OS devices.
  prefs: []
  type: TYPE_NORMAL
- en: '`SampleButton` takes in an `onClick` lambda that gets called when the button
    is clicked and a modifier that sets the size of the button based on what we specify,
    which, in our example, is a simple `fillMaxWidth()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re using `horizontalArrangement` in the column to center our button and
    using the `MaterialTheme` color to paint the background. In the case of Wear OS,
    Google recommends using the default material wear shapes; these are already optimized
    for non-round and round devices, which makes our work easier as developers. See
    the following link for more information on shapes: [https://developer.android.com/reference/kotlin/androidx/wear/compose/material/Shapes](https://developer.android.com/reference/kotlin/androidx/wear/compose/material/Shapes).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we’re using the `Text` composable to display the button text, which
    is vital since it tells users what the button’s intended use is.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a scrollable list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing a scrollable list is essential for creating an effective and user-friendly
    Android app that meets the needs of your users. A scrollable list allows you to
    display a large amount of information on a small screen, which can be beneficial,
    especially in a tiny device such as a watch. By scrolling through the list, users
    can quickly and easily access all of the items without navigating to different
    screens or pages.
  prefs: []
  type: TYPE_NORMAL
- en: Users expect a smooth and responsive scrolling experience when interacting with
    lists. Implementing a scrollable list with optimized performance can help ensure
    the app feels fast and responsive to the user. Scrollable lists can be customized
    to suit a variety of use cases and design requirements. You can adjust the layout,
    appearance, and behavior of the list to fit your app’s specific needs and provide
    a unique user experience. In this recipe, we will look at how you can implement
    a scrollable list in Wear OS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have completed the previous recipe to get started on this one. We
    will be using our already created `WearOSExample` project to continue this part.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to build a scrollable list in Wear OS using Jetpack Compose:'
  prefs: []
  type: TYPE_NORMAL
- en: In your `MainActivity.kt` file, let’s create a new `Composable` function containing
    your scrollable list. You can call it anything you like, but for this example,
    we’ll call it `WearOSList`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another option is to create a new package to organize our code better and call
    the package `components`. Inside `components`, create a new Kotlin file and call
    it `WearOsList`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our `WearOSList` function, we will need a list of strings for our example;
    we can just create sample dummy data to showcase an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside our `WearOSList` function, create `ScalingLazyColumn`, which is optimized
    for Wear OS. This will be the container for our scrollable list. We will talk
    about `ScalingLazyColumn` later in the chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Building for Wear OS might be challenging due to content size, hence the need
    to be familiar with Wear’s best practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our items, we will create a new `Composable` function called `WearOSListItem`,
    which will just have a `text` since we are just showcasing a text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For our data, we will create a dummy list, so go ahead and add the following
    in the `WearApp()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, comment out the two buttons we created, call `WearOSList`, pass in
    `itemList`, and run the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see a list similar to *Figure 10**.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.10 – Scrollable list o\uFEFFf items](img/Figure_10.10.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Scrollable list of items
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we’re using `WearOsList` and `WearOSExampleTheme` from the
    Wear OS Compose library to create a list that’s designed specifically for Wear
    OS devices.
  prefs: []
  type: TYPE_NORMAL
- en: We start by creating a `WearOSList` composable that takes in a list of items
    as a parameter. Inside `ScalingLazyColumn`, we use the `items` function to iterate
    through the list of items and create a `WearOSListItem` for each.
  prefs: []
  type: TYPE_NORMAL
- en: The `WearOSListItem` composable has a `Composable` `text` function.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Cards in Wear OS (TitleCard and AppCard)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When building for Wear OS, we have two significant cards that we need to consider:
    `AppCard` and `TitleCard`. A good use case for cards would be **Notification**
    and **Smart Reply**. If you use a wearable device, you might know what these are;
    if you don’t use a wearable device, you can look them up, but in this recipe,
    we will also explore examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, if you create a Notification card, you intend to provide a quick
    and easy way to view and respond to notifications from your apps. When a notification
    arrives, it appears as a card on your watch face, which you can then swipe away
    or tap to open and interact with the notification.
  prefs: []
  type: TYPE_NORMAL
- en: As for Smart Reply cards, this feature uses machine learning to suggest responses
    to messages you receive based on the context of the message. These cards appear
    as a response option to notifications and allow you to quickly send a message
    without needing to type it out manually.
  prefs: []
  type: TYPE_NORMAL
- en: Both Notification and Smart Reply cards are essential because they provide an
    efficient and streamlined way to manage notifications and respond to messages
    without having to pull out your phone constantly. They allow you to stay connected
    while on the go and keep you informed of important information without disrupting
    your daily routine, which is why Wear OS is here to stay, and knowing how to build
    for it will come in handy. In this recipe, we will create a simple card and see
    how to handle navigation in Wear OS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to have completed the previous recipes to continue with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s an example of creating a card in Wear OS using Jetpack Compose. Open
    the `WearOSExample` project and code along:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `components` package, let’s create a new Kotlin file and call it
    `MessageCardExample`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `MessageCardExample`, create a new composable function called `MessageCard`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We must now call `AppCard()` since this is what we want. `AppCard` takes in
    `appName`, `time`, `title`, and more, as shown in *Figure 10**.11*. This means
    you can customize your `AppCard` `()` to fit your needs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.11 – AppCard \uFEFFcompo\uFEFFsable function](img/Figure_10.11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – AppCard composable function
  prefs: []
  type: TYPE_NORMAL
- en: 'This makes our work easier as developers since we know exactly what we need
    when building, thereby increasing developer productivity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s go ahead and implement our `AppCard()` and send a message to our
    users. For our example, we will hardcode the data, but if you have an endpoint,
    you can pull data and display it as needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `MainActivity`, comment out other composable functions, for now add `MessageCard()`,
    and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10.12 – AppCard \uFEFFwith a notification](img/Figure_10.12.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – AppCard with a notification
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`TitleCard` and `AppCard` are both used to display information on Wear OS,
    but they have different purposes. In our example, we use `AppCard()`, but as you
    can see in *Figure 10**.13*, `TitleCard()` takes in several inputs that are similar
    to `AppCard()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.13 – TitleCard input](img/Figure_10.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – TitleCard input
  prefs: []
  type: TYPE_NORMAL
- en: You can use `TitleCard()` to display information that is relevant to the current
    context, such as the name of a song that is playing or the title of a movie that
    is being watched. It is typically displayed at the top of the screen and can be
    dismissed by swiping it away. A good example is Spotify.
  prefs: []
  type: TYPE_NORMAL
- en: When using `AppCard()`, you can display information about an app that is currently
    running, such as the name of the app and a brief description of what it does,
    as we did in our example. It is typically displayed on a smaller card that can
    be tapped to open the app. That is why it has `onClick{/**TODO*/}`, which can
    lead to more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'When deciding whether to use `TitleCard()` or `AppCard()`, you should consider
    the following factors:'
  prefs: []
  type: TYPE_NORMAL
- en: The amount of information that you need to display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The relevance of the information to the current context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The desired user experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to display a lot of information, `TitleCard()` may be a better option.
    If you only need to display a small amount of information, `AppCard()` may be
    a better option. If you want the information to be relevant to the current context,
    `TitleCard()` may be a better option. If you want the information displayed on
    a smaller card that can be tapped to open the app, `AppCard()` may be a better
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a chip and a toggle chip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore significant Wear components; a chip and a toggle
    chip are both used to display and interact with data.
  prefs: []
  type: TYPE_NORMAL
- en: A **chip** is a small, rectangular element that can be used to display text,
    icons, and other information. It is typically used to display items that are related
    or that have a common theme.
  prefs: []
  type: TYPE_NORMAL
- en: A **toggle chip** is a component that can be used to represent a binary value.
    It is typically used to represent things such as on/off, yes/no, or true/false.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is fair to mention that you can use these components in your regular application,
    and we will explore them more in [*Chapter 11*](B18827_11.xhtml#_idTextAnchor619).
    When deciding which component to use, you should consider the following factors:'
  prefs: []
  type: TYPE_NORMAL
- en: The type of data that you want to display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of interaction that you want to enable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The look and feel that you want to achieve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using our already-created project for this section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a chip and a toggle chip in this recipe. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go ahead and build our first chip; inside the `components` package, create
    a Kotlin file and call it `ChipExample.kt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the file, create a composable function called `ChipWearExample()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s go ahead and call the `Chip()` composable function. You can also
    use the `Chip` component to display dynamic information. To do this, you can use
    the `modifier` property to specify a function that will be called to update the
    information displayed on the chip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `MainActivity`, go ahead and comment out the existing `Composable` functions,
    add `ChipWearExample()`, and run the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figur\uFEFFe 10.14 – A chip with a message](img/Figure_10.14.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – A chip with a message
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s go ahead and create a toggle chip; inside our `component` package,
    create a Kotlin file and call it `ToggleChipExample`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `ToggleChipExample`, create a `Composable` function and call it `ToggleChipWearExample()`.
    We will use the `ToggleChip()` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the code, and you should be able to toggle the chip on and off
    depending on whether you want to get any notifications or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.15 – A toggle chip](img/Figure_10.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – A toggle chip
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To implement a chip in Wear OS Jetpack Compose, we need to use the already provided
    `Chip()` component. The `Chip()` component is stadium shaped and has a maximum
    height designed to take no more than two lines of text and can be used to display
    text, icons, and other information.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `Chip()` component to display dynamic information. To do
    this, you can use the `modifier` property to specify a function that will be called
    to update the information displayed on the chip. You can look at the `Chip()`
    component to see what it accepts as its parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ToggleChip()` composable function takes in several parameters; here are
    a few significant ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`checked`: A Boolean value that represents whether the toggle chip is currently
    checked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onCheckedChange`: A lambda function that will be called when the checked state
    of the toggle chip changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modifier`: An optional modifier that can be used to customize the appearance
    or behavior of the toggle chip'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`colors`: An optional `ToggleChipColors` object that can be used to customize
    the colors of the toggle chip'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We use `TextOverflow` to handle overflowing text since we are dealing with
    small screens. Check out *Figure 10**.15* for more details on what `ToggleChip`
    takes in as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 10.16 – What the ToggleChip \uFEFFcompo\uFEFFsable function accepts\
    \ as \uFEFFparameter\uFEFFs](img/Figure_10.16.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – What the ToggleChip composable function accepts as parameters
  prefs: []
  type: TYPE_NORMAL
- en: Implementing ScalingLazyColumn to showcase your content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ScalingLazyColumn` extends `LazyColumn`, which is very powerful in Jetpack
    Compose. You can think of `ScalingLazyColumn` as a component in Wear OS that is
    used to display a list of items that can be scrolled vertically. The items are
    scaled and positioned based on their position in the list, and the entire list
    can be scrolled by dragging the top or bottom of the list.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use it, for example, to display a list of components; in our example,
    we will use it to display all the elements we created in previous recipes. You
    will also notice we used it in the *Implementing a scrollable list* recipe, where
    we have a list and displayed the items.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to have completed the previous recipes to continue with this recipe.
    In addition, in this recipe, instead of commenting on all the elements we created,
    we will display them as items in `ScalingLazyColumn`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to build your first `ScalingLazyColumn`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `MainActivity`, you will notice a comment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The comment is a callout to developers to utilize `ScalingLazyColumn`, which
    is an optimized version of `LazyColumn` for Wear OS.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to start by creating a `scalingListState` value and initialize it to
    `rememberScalingLazyListState()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `rememberScalingLazyListState()` function simply does as its definition
    implies, which is to remember the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now need to clean up our Composable function by removing the modifiers
    we added and using one for all the views. Let’s create a `contentModifier = Modifier`,
    and one for our icons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will also need to create a `Scaffold()`, which implements the Wear Material
    Design visual layout structure. `Scaffold()` uses `modifier`, `vignette`, `positionIndicator`,
    `pageIndicator`, `timeText`, and `content`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s go ahead and build our screen. In `Scaffold`, we will use three parameters:
    `vignette` (which is a full-screen slot for applying a vignette over the content
    of the scaffold), `positionIndicator`, and `timeText`. Look at the *How it works…*
    section to learn more about the parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `TimeText`, we will call `Modifier.scrollAway` and pass in `scalingListState`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we only have one screen for our project sample, which is scrollable,
    we will try to show all items simultaneously and all the time. Hence, in `vignette`,
    we will say the position will be `TopAndBottom`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, on `positionIndicator`, we will just pass `scalingListState`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can finally build our `ScalingLazyColumn()`. We will use `fillMaxSize`
    for the modifier, and `autoCentering` will be set to index zero; then for `state`,
    pass our already created `scalingListState`, and in the items, pass our components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can get the entire code in the *Technical requirements* section. To clean
    up some of the code in `item{}`, we have the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, when you run the application, you should be able to see all the items
    displayed and be able to scroll smoothly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 10\uFEFF.17 – Our \uFEFFcomp\uFEFFosable elements on Wear OS](img/Figure_10.17.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.17 – Our composable elements on Wear OS
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wear OS Jetpack Compose is a UI toolkit for building Wear OS apps using the
    Jetpack Compose framework. It is designed to make it easier and more efficient
    for developers to create wearable apps with a modern and responsive UI. As mentioned
    before, the `Composable` function called `Scaffold()` has several inputs. In *Figure
    10**.18*, you will see their meaning and why you might want to use them:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Fig\uFEFFure 10.18 – Scaffold function parameters](img/Figure_10.18.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.18 – Scaffold function parameters
  prefs: []
  type: TYPE_NORMAL
- en: Some of the significant advantages of Wear OS in Jetpack Compose is that it
    provides a set of pre-built UI components that are optimized for the unique features
    of Wear OS devices. And one of the critical benefits is that it simplifies the
    development process by reducing the amount of boilerplate code that is required
    to create a UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also provides a consistent and flexible UI design language that can be used
    across different apps. There is more to learn about Wear OS; also, since this
    is a new technology, many of the concepts here might change or advance due to
    API changes in the future, but for now, you can learn more by following this link:
    [https://developer.android.com/wear](https://developer.android.com/wear).'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'There is more to build in Wear OS; for instance, you can build a tile and react
    when the tile items get clicked to perform an action. To learn more about how
    you can create your first tile, follow this link: [https://developer.android.com/codelabs/wear-tiles](https://developer.android.com/codelabs/wear-tiles).'
  prefs: []
  type: TYPE_NORMAL
