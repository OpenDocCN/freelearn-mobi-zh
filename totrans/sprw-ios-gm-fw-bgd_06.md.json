["```swift\n    -(SPTextureAtlas *) registerTextureAtlas:(NSString *) filename;\n    ```", "```swift\n    -(SPTextureAtlas *) registerTextureAtlas:(NSString *) filename\n    {\n        if ([_dict objectForKey:filename] == nil) {\n        return (SPTextureAtlas *) [self registerAsset:filename withContent:[SPTextureAtlas atlasWithContentsOfFile:filename]];\n      } else {\n        return (SPTextureAtlas *) [self registerAsset:filename withContent:nil];\n      }\n    }\n    ```", "```swift\n    +(SPTextureAtlas *) textureAtlas:(NSString*)filename;\n    ```", "```swift\n    +(SPTextureAtlas *) textureAtlas:(NSString*)filename\n    {\n        return [textureAssets registerTextureAtlas:filename];\n    }\n    ```", "```swift\n    SPTextureAtlas *atlas = [SPTextureAtlas atlasWithContentsOfFile:@\"ship_pirate_small_cannon.xml\"];\n\n    NSArray *textures = [atlas texturesStartingWith:@\"00\"];\n    ```", "```swift\n    NSArray *textures = [[Assets textureAtlas:@\"ship_pirate_small_cannon.xml\"] texturesStartingWith:@\"00\"];\n    ```", "```swift\n    SPMovieClip *_shootingClip;\n    SPImage *_idleImage;\n    ```", "```swift\n    -(id)initWithContentsOfFile:(NSString *)filename;\n    ```", "```swift\n    -(void) shoot;\n    ```", "```swift\n    -(void) moveToX:(float) x andY:(float) y;\n    ```", "```swift\n    -(void) stop;\n    ```", "```swift\n    -(id) init\n    {\n      if ((self = [super init])) {\n        NSArray *textures = [[Assets textureAtlas:@\"ship_pirate_small_cannon.xml\"] texturesStartingWith:@\"00\"];\n\n        _shootingClip = [SPMovieClip movieWithFrames:textures fps:20.0f];\n\n        if (_idleImage == nil) {\n          _idleImage = [[SPImage alloc] init];\n        }\n\n        [self addChild:_shootingClip];\n        [self addChild:_idleImage];\n      }\n\n      return self;\n    } \n    ```", "```swift\n    -(id) initWithContentsOfFile:(NSString *)filename\n    {\n      _idleImage = [[SPImage alloc] initWithTexture:[Assets texture:filename]];\n\n      return [self init];\n    }\n    ```", "```swift\n    -(void) shoot\n    {\n      [_shootingClip play];\n      [Sparrow.juggler addObject:_shootingClip];\n    }\n    ```", "```swift\n    -(void) moveToX:(float)x andY:(float)y\n    {\n      [self stop];\n\n      float targetX = x - (self.width / 2);\n      float targetY = y - (self.height / 2);\n\n      float distanceX = fabsf(self.x - targetX);\n      float distanceY = fabsf(self.y - targetY);\n\n      float penalty = (distanceX + distanceY) / 80.0f;\n\n      float shipInitial = 0.25f + penalty;\n\n      float speedX = shipInitial + (distanceX / \n        Sparrow.stage.width) * penalty * penalty;\n      float speedY = shipInitial + (distanceY / Sparrow.stage.height) * penalty * penalty;\n\n      SPTween *tweenX = [SPTween tweenWithTarget:self time:speedX];\n      SPTween *tweenY = [SPTween tweenWithTarget:self time:speedY];\n\n      [tweenX animateProperty:@\"x\" targetValue:targetX];\n      [tweenY animateProperty:@\"y\" targetValue:targetY];\n\n      [Sparrow.juggler addObject:tweenX];\n      [Sparrow.juggler addObject:tweenY];\n    }\n    ```", "```swift\n    -(void) stop\n    {\n        [Sparrow.juggler removeObjectsWithTarget:self];\n    }\n    ```", "```swift\n    #import \"Scene.h\"\n    #import \"Ship.h\"\n\n    @interface Battlefield : Scene {\n     Ship *_pirateShip;\n    }\n    ```", "```swift\n    SPTouch *touch = [[event touchesWithTarget:self] anyObject];\n\n    if (touch) {\n      [_pirateShip moveToX:touch.globalX andY:touch.globalY];\n    }\n    ```", "```swift\n    SPTouch *touch = [[event touchesWithTarget:self andPhase:SPTouchPhaseBegan] anyObject];\n\n    if (touch) {\n      [_pirateShip stop];\n    }\n    ```", "```swift\n    _pirateShip = [[Ship alloc] initWithContentsOfFile:@\"ship_pirate.png\"];\n    _pirateShip.x = (Sparrow.stage.width - _pirateShip.width) / 2;\n    _pirateShip.y = (Sparrow.stage.height - _pirateShip.height) / 2;\n\n    Ship *ship = [[Ship alloc] initWithContentsOfFile:@\"ship.png\"];\n    ship.x = 100;\n    ship.y = 100;\n    ```", "```swift\n#import \"SPSprite.h\"\n\n@interface Ship : SPSprite {\n    SPMovieClip *_shootingClip;\n    SPImage *_idleImage;\n}\n\n-(id)initWithContentsOfFile:(NSString *)filename;\n\n-(void) shoot;\n\n-(void) moveToX:(float) x andY:(float) y;\n-(void) stop;\n\n@end\n```", "```swift\n#import \"Ship.h\"\n\n#import \"Assets.h\"\n\n@implementation Ship\n\n-(id) init\n{\n    if ((self = [super init])) {\n        NSArray *textures = [[Assets textureAtlas:@\"ship_pirate_small_cannon.xml\"] texturesStartingWith:@\"00\"];\n\n        _shootingClip = [SPMovieClip movieWithFrames:textures fps:20.0f];\n\n        if (_idleImage == nil) {\n            _idleImage = [[SPImage alloc] init];\n        }\n\n        [self addChild:_shootingClip];\n        [self addChild:_idleImage];\n    }\n\n    return self;\n}\n\n-(id) initWithContentsOfFile:(NSString *)filename\n{\n    _idleImage = [[SPImage alloc] initWithTexture:[Assets texture:filename]];\n\n    return [self init];\n}\n```", "```swift\n-(void) shoot\n{\n    [_shootingClip play];\n    [Sparrow.juggler addObject:_shootingClip];\n}\n\n-(void) moveToX:(float)x andY:(float)y\n{\n    [self stop];\n\n    float targetX = x - (self.width / 2);\n    float targetY = y - (self.height / 2);\n\n    float distanceX = fabsf(self.x - targetX);\n    float distanceY = fabsf(self.y - targetY);\n\n    float penalty = (distanceX + distanceY) / 80.0f;\n\n    float shipInitial = 0.25f + penalty;\n\n    float speedX = shipInitial + (distanceX / Sparrow.stage.width) * penalty * penalty;\n    float speedY = shipInitial + (distanceY / Sparrow.stage.height) * penalty * penalty;\n\n    SPTween *tweenX = [SPTween tweenWithTarget:self time:speedX];\n    SPTween *tweenY = [SPTween tweenWithTarget:self time:speedY];\n\n    [tweenX animateProperty:@\"x\" targetValue:targetX];\n    [tweenY animateProperty:@\"y\" targetValue:targetY];\n\n    [Sparrow.juggler addObject:tweenX];\n    [Sparrow.juggler addObject:tweenY];\n}\n\n-(void) stop\n{\n    [Sparrow.juggler removeObjectsWithTarget:self];\n}\n\n@end\n```", "```swift\n#import \"Scene.h\"\n#import \"Ship.h\"\n\n@interface Battlefield : Scene {\n    Ship* _pirateShip;\n}\n\n@end\n```", "```swift\n#import \"Battlefield.h\"\n#import \"Assets.h\"\n\n@implementation Battlefield\n\n-(void) onBackgroundTouch:(SPTouchEvent*) event\n{\n    SPTouch *touch = [[event touchesWithTarget:self] anyObject];\n\n    if (touch) {\n        [_pirateShip moveToX:touch.globalX andY:touch.globalY];\n    }\n}\n\n-(void) onShipStop:(SPTouchEvent*) event\n{\n    SPTouch *touch = [[event touchesWithTarget:self andPhase:SPTouchPhaseBegan] anyObject];\n\n    if (touch) {\n        [_pirateShip stop];\n    }\n}\n```", "```swift\n-(id) init\n{\n    if ((self = [super init])) {\n        SPImage *background = [SPImage imageWithTexture:[Assets texture:@\"water.png\"]];\n        background.x = (Sparrow.stage.width - background.width) / 2;\n        background.y = (Sparrow.stage.height - background.height) / 2;\n\n        _pirateShip = [[Ship alloc] initWithContentsOfFile:@\"ship_pirate.png\"];\n        _pirateShip.x = (Sparrow.stage.width - _pirateShip.width) / 2;\n        _pirateShip.y = (Sparrow.stage.height - _pirateShip.height) / 2;\n\n        Ship *ship = [[Ship alloc] initWithContentsOfFile:@\"ship.png\"];\n        ship.x = 100;\n        ship.y = 100;\n\n        SPTween *shipTween = [SPTween tweenWithTarget:ship time:4.0f transition:SP_TRANSITION_EASE_IN_OUT];\n        [shipTween animateProperty:@\"y\" targetValue:250];\n        shipTween.repeatCount = 5;\n        shipTween.reverse = YES;\n        shipTween.delay = 2.0f;\n\n        [Sparrow.juggler addObject:shipTween];\n        [background addEventListener:@selector(onBackgroundTouch:) atObject:self forType:SP_EVENT_TYPE_TOUCH];\n        [_pirateShip addEventListener:@selector(onShipStop:) atObject:self forType:SP_EVENT_TYPE_TOUCH];\n        [self addChild:background];\n        [self addChild:ship];\n        [self addChild:_pirateShip];\n    }\n\n    return self;\n}\n\n@end\n```", "```swift\n    typedef NS_ENUM(NSInteger, ShipDirection) {\n        DirectionNorth,\n        DirectionSouth,\n        DirectionWest,\n        DirectionEast,\n        DirectionNorthWest,\n        DirectionNorthEast,\n        DirectionSouthWest,\n        DirectionSouthEast\n    };\n    ```", "```swift\n    typedef NS_ENUM(NSInteger, ShipType) {\n        ShipPirate,\n        ShipNormal\n    };\n    ```", "```swift\n    NSArray *_shootingClip;\n    ```", "```swift\n    @property int hitpoints;\n    ```", "```swift\n    @property ShipType type;\n    ```", "```swift\n    @property (nonatomic) ShipDirection direction;\n    ```", "```swift\n    @interface Ship : SPSprite {\n        NSArray *_shootingClip;\n        ShipDirection _direction;\n    }\n    ```", "```swift\n    -(id)initWithType:(ShipType)type;\n    ```", "```swift\n    -(id) initWithType:(ShipType)type\n    {\n        if ((self = [super init])) {\n            self.hitpoints = 100;\n            self.type = type;\n\n            SPTextureAtlas *atlas = (type == ShipPirate) ? [Assets textureAtlas:@\"ship_pirate_small_cannon.xml\"] : [Assets textureAtlas:@\"ship_small_cannon.xml\"] ;\n\n            NSArray *texturesNorth = [atlas texturesStartingWith:@\"n_00\"];\n            // ...\n\n            float animationFPS = 12.0f;\n\n            SPMovieClip *clipNorth = [SPMovieClip movieWithFrames:texturesNorth fps:animationFPS];\n            // ...\n\n            _shootingClip = [NSArray arrayWithObjects:clipNorth, clipSouth, clipWest, clipEast, clipNorthWest, clipNorthEast, clipSouthWest, clipSouthEast, nil];\n\n            for (SPMovieClip* clip in _shootingClip) {\n                clip.loop = NO;\n                [self addChild:clip];\n            }\n\n            self.direction = DirectionSouthWest;\n        }\n\n        return self;\n    }\n    ```", "```swift\n    -(id) init\n    {\n        return [self initWithType:ShipNormal];\n    }\n    ```", "```swift\n    _direction = direction;\n\n    for (SPMovieClip* clip in _shootingClip) {\n      clip.visible = NO;\n    }\n\n    ((SPMovieClip *) _shootingClip[_direction]).visible = YES;\n    ```", "```swift\n    for (SPMovieClip* clip in _shootingClip) {\n      [Sparrow.juggler removeObjectsWithTarget:clip];\n    }\n\n    [_shootingClip[self.direction] play];\n    [Sparrow.juggler addObject:_shootingClip[self.direction]];\n\n    [_shootingClip[self.direction] addEventListenerForType:SP_EVENT_TYPE_COMPLETED block:^(SPEvent *event)\n    {\n      [_shootingClip[self.direction] stop];\n    }];\n    ```", "```swift\n    int signX = 0;\n    int signY = 0;\n    ```", "```swift\n    if (distanceX > 40) {\n      signX = (self.x - targetX) / distanceX;\n    }\n\n    if (distanceY > 40) {\n      signY = (self.y - targetY) / distanceY;\n    }\n    ```", "```swift\n    if ((signX == 1) && (signY == 0)) {\n      self.direction = DirectionEast;\n    }\n    ```", "```swift\n    if (touch) {\n      if (touch.tapCount == 1) {\n        [_pirateShip stop];\n      } else if (touch.tapCount == 2) {\n        [_pirateShip shoot];\n      }\n    }\n    ```", "```swift\n    if (type == ShipPirate) { ... } else { ... }\n    ```", "```swift\n    _shootingClip = @[clipNorth, clipSouth, clipWest, clipEast, clipNorthWest, clipNorthEast, clipSouthWest, clipSouthEast];\n    ```", "```swift\n    @property (readonly) BOOL isShooting;\n    ```", "```swift\n    @property SPImage *cannonBallLeft;\n    @property SPImage *cannonBallRight;\n    ```", "```swift\n    if (_isShooting) {\n      return;\n    }\n\n    _isShooting = YES;\n    ```", "```swift\n    float shootingTime = 1.25f;\n    float innerBox = 25.0f;\n    float targetPos = 30.0f;\n    ```", "```swift\n    SPMovieClip *currentClip = _shootingClip[self.direction];\n    ```", "```swift\n    SPTween *tweenCbLeftX = [SPTween tweenWithTarget:self.cannonBallLeft time:shootingTime];\n    SPTween *tweenCbLeftY = [SPTween tweenWithTarget:self.cannonBallLeft time:shootingTime];\n    SPTween *tweenCbRightX = [SPTween tweenWithTarget:self.cannonBallRight time:shootingTime];\n    SPTween *tweenCbRightY = [SPTween tweenWithTarget:self.cannonBallRight time:shootingTime];\n    ```", "```swift\n    switch (self.direction) {\n      case DirectionNorth:\n      case DirectionSouth:\n        self.cannonBallLeft.x = (-self.cannonBallLeft.width / 2) + innerBox;\n        self.cannonBallLeft.y = (currentClip.height - self.cannonBallLeft.height) / 2;\n\n        self.cannonBallRight.x = (-self.cannonBallRight.width / 2) + currentClip.width - innerBox;\n        self.cannonBallRight.y = (currentClip.height - self.cannonBallRight.height) / 2;\n\n        [tweenCbLeftX animateProperty:@\"x\" targetValue:self.cannonBallLeft.x - targetPos];\n        [tweenCbRightX animateProperty:@\"x\" targetValue:self.cannonBallRight.x + targetPos];\n\n        break;\n\n      default:\n        break;\n    }\n    ```", "```swift\n    -(void) setHitpoints:(int)hitpoints\n    {\n        _hitpoints = hitpoints;\n        if (_hitpoints <= 0) {\n            self.visible = NO;\n        }\n    }\n    ```", "```swift\n    -(void) abortShooting\n    {\n        _isShooting = NO;\n\n        [Sparrow.juggler removeObjectsWithTarget:self.cannonBallLeft];\n        [Sparrow.juggler removeObjectsWithTarget:self.cannonBallRight];\n\n        self.cannonBallLeft.visible = NO;\n        self.cannonBallRight.visible = NO;\n    }\n    ```", "```swift\n    -(void) hit\n    {\n        self.hitpoints = self.hitpoints - 25;\n\n        for (SPMovieClip* clip in _shootingClip) {\n            SPTween *tween = [SPTween tweenWithTarget:clip time:0.3f];\n            tween.reverse = YES;\n            tween.repeatCount = 2;\n\n            [tween animateProperty:@\"color\" targetValue:SP_RED];\n            [Sparrow.juggler addObject:tween];\n        }\n    }\n    ```", "```swift\n    [self addEventListener:@selector(onEnterFrame:) atObject:self forType:SP_EVENT_TYPE_ENTER_FRAME];\n    ```", "```swift\n    -(void) onEnterFrame:(SPEvent *)event\n    {\n      if (_pirateShip.isShooting) {\n        SPRectangle *enemyShipBounds = [_enemyShip boundsInSpace:self];\n        SPRectangle *ball1 = [_pirateShip.cannonBallLeft boundsInSpace:self];\n        SPRectangle *ball2 = [_pirateShip.cannonBallRight boundsInSpace:self];\n\n        if ([enemyShipBounds intersectsRectangle:ball1] || [enemyShipBounds intersectsRectangle:ball2]) {\n          if (_pirateShip.cannonBallLeft.visible || _pirateShip.cannonBallRight.visible) {\n            [_pirateShip abortShooting];\n            [_enemyShip hit];\n          }\n        }\n      }\n    }\n    ```", "```swift\n    {\n        \"hitpoints\": 100,\n        \"damage\": 25,\n        \"battlefield\": {\n            \"enemy\": {\n                \"x\": 100,\n                \"y\": 100\n            },\n            \"pirate\": {\n                \"x\": 300,\n                \"y\": 100\n            }\n        }\n    }\n    ```", "```swift\n    @property int maxHitpoints;\n    ```", "```swift\n    self.maxHitpoints = [(NSNumber *) [Assets dictionaryFromJSON:@\"gameplay.json\"][@\"hitpoints\"] intValue];\n\n    self.hitpoints = self.maxHitpoints;\n    ```", "```swift\n    self.hitpoints = self.hitpoints - [(NSNumber *) [Assets dictionaryFromJSON:@\"gameplay.json\"][@\"damage\"] intValue];\n    ```", "```swift\n    NSDictionary *gameplayFile = [Assets dictionaryFromJSON:@\"gameplay.json\"];\n\n    _pirateShip = [[Ship alloc] initWithType:ShipPirate];\n    _pirateShip.x = [(NSNumber *) gameplayFile[@\"battlefield\"][@\"pirate\"][@\"x\"] floatValue];\n    _pirateShip.y = [(NSNumber *) gameplayFile[@\"battlefield\"][@\"pirate\"][@\"y\"] floatValue];\n\n    _enemyShip = [[Ship alloc] init];\n    _enemyShip.x = [(NSNumber *) gameplayFile[@\"battlefield\"][@\"enemy\"][@\"x\"] floatValue];\n    _enemyShip.y = [(NSNumber *) gameplayFile[@\"battlefield\"][@\"enemy\"][@\"y\"] floatValue];\n    ```"]