- en: Deploying Flutter Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 Flutter 应用
- en: Deploying the Flutter app is one of the easiest processes to enable developers
    to prepare the apps for publishing on app stores. By now, you must have learned
    Google's mobile app SDK provides several features to craft high-quality native
    interfaces on iOS and Android, in record time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Flutter 应用是使开发者能够为应用商店发布准备应用程序的最简单过程之一。到目前为止，您必须已经了解到 Google 的移动应用 SDK 提供了在
    iOS 和 Android 上创建高质量原生界面的几个功能，且速度非常快。
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Deploying on Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android 上部署
- en: Deploying on iOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 iOS 上部署
- en: Deploying on Android
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Android 上部署
- en: In the course of this book so far, the build that we have built is a debug type.
    Ideally, this is used for testing the app before following the steps to produce
    the release version of the app to be uploaded. Flutter also allows creating flavors
    of the app. If you wish to build a production version of the app you have developed,
    follow the upcoming steps.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书到目前为止的内容中，我们构建的是调试类型。理想情况下，这用于在生成要上传的应用程序的发布版本之前测试应用程序。Flutter 还允许创建应用程序的变体。如果您想构建您开发的应用程序的生产版本，请遵循下面的步骤。
- en: Reviewing the AndroidManifest.xml file
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查 AndroidManifest.xml 文件
- en: 'This file holds some of the major global settings of the app that come in handy
    when building the production version of the app. It can be located at `<app dir>/android/app/src/main`.
    When you click on the `AndroidManifest.xml` file, you will find the snippet in
    the `Application` tag shown as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件包含了一些在构建应用程序的生产版本时非常有用的主要全局设置。它位于 `<app dir>/android/app/src/main`。当您点击 `AndroidManifest.xml`
    文件时，您将在 `Application` 标签中找到以下片段：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The explanation for the properties visible in the preceding code are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码中可见的属性的说明如下：
- en: '`android.name`: This property sets the package name for the app'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.name`: 这个属性设置了应用程序的包名'
- en: '`android.label`: This property sets the final name of the app'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.label`: 这个属性设置了应用程序的最终名称'
- en: '`android:icon`: This property sets the launch icon for the app'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:icon`: 这个属性设置了应用程序的启动图标'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `<uses-permission>` tag allows developers to set the permission needed for
    the developers in the app. For example, if you wish to use the internet, the preceding
    property has to be used, or if you wish to access the camera, `<uses-permission
    android:name="android.permission.CAMERA"/>` has to be used. This will manifest
    element for all camera features. The developers can also demand to ask the users
    for the permission access in the **runtime** mode.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`<uses-permission>` 标签允许开发者设置应用程序中开发者所需的权限。例如，如果您想使用互联网，必须使用前面的属性，或者如果您想访问相机，必须使用
    `<uses-permission android:name="android.permission.CAMERA"/>`。这将影响所有相机功能。开发者还可以要求在
    **运行时** 模式下请求用户权限。'
- en: The build.gradle configurations
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: build.gradle 配置
- en: 'The next step is to review the Gradle build file situated in `<app dir>/android/app`
    and to confirm whether the values entered in the following parameters are correct:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是检查位于 `<app dir>/android/app` 的 Gradle 构建文件，并确认以下参数中输入的值是否正确：
- en: 'Set the `VersionCode` and `VersionName` in the following snippet. Please note
    that the `VersionCode` value should be unique for every uploaded build and that
    it is an absolute value. The greatest value the Google Play store allows for `versionCode`
    is `2100000000`. On the other hand, `VersionName` is a string value. There is
    no purpose of `VersionName` to show up the value on the play store. The string
    value can be cascaded as a `<major>.<minor>.<point>` string—for example, 1.2.2:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以下片段中设置 `VersionCode` 和 `VersionName`。请注意，`VersionCode` 的值对于每个上传的构建必须是唯一的，并且它是一个绝对值。Google
    Play 商店允许的 `versionCode` 的最大值是 `2100000000`。另一方面，`VersionName` 是一个字符串值。`VersionName`
    没有在 Play 商店上显示值的用途。字符串值可以作为 `<major>.<minor>.<point>` 字符串级联——例如，1.2.2：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`applicationId`: This is to enable developers to specify the final, unique
    application ID.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applicationId`: 这允许开发者指定最终的、唯一的应用程序 ID。'
- en: '`minSdkVersion` and `targetSdkVersion`: These two values specify the minimum
    API level and the target API level on which the app is designed to run on:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minSdkVersion` 和 `targetSdkVersion`: 这两个值指定了应用程序设计运行的最低 API 级别和目标 API 级别：'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Icons within apps
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序内的图标
- en: 'A trendy, eye-catching icon can be a great trigger for someone to launch the
    app. By default, the launcher icon is a default icon. By adhering to the Android
    Launcher Icon guidelines, you can build your own icon that can be used for the
    app''s launch trigger from the mobile screen:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个时尚、引人注目的图标可以成为某人启动应用的绝佳触发器。默认情况下，启动器图标是一个默认图标。遵循 Android Launcher Icon 指南，你可以构建自己的图标，该图标可用于从移动屏幕启动应用：
- en: 'Once your icon files are ready, check the `<app dir>/android/app/src/main/res/`
    directory and place the files in the respective folders using configuration qualifiers.
    You can read more about this here: [https://developer.android.com/guide/topics/resources/providing-resources#AlternativeResources](https://developer.android.com/guide/topics/resources/providing-resources#AlternativeResources).'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你的图标文件准备就绪，检查 `<app dir>/android/app/src/main/res/` 目录并将文件放入相应的文件夹中，使用配置限定符。你可以在此处了解更多信息：[https://developer.android.com/guide/topics/resources/providing-resources#AlternativeResources](https://developer.android.com/guide/topics/resources/providing-resources#AlternativeResources)。
- en: Once you have placed the files in the folders, simply head to `AndroidManifest.xml`
    and update the application tag's `android:icon` attribute.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件放置在文件夹中后，只需转到 `AndroidManifest.xml` 并更新应用程序标签的 `android:icon` 属性。
- en: To ensure the icon has been replaced, `Flutter run` and inspect the app icon
    in the launcher.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保图标已替换，使用 `Flutter run` 并检查启动器中的应用图标。
- en: Signing the app
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 签名应用
- en: 'This is one of the key steps before publishing the app on the Google Play store.
    To publish the app, signing the app using a digital signature is a key part. Follow
    these steps to sign the app:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是发布应用到 Google Play 商店之前的关键步骤之一。要发布应用，使用数字签名对应用进行签名是关键部分。按照以下步骤对应用进行签名：
- en: '**Create a keystore**: If you already have a `keystore`, skip to step 2\. If
    you wish to build the new `keystore`, use the `KeyTool` tool to generate one using
    this command-line code:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建密钥库**：如果你已经有了 `keystore`，则跳到步骤 2。如果你希望构建新的 `keystore`，请使用 `KeyTool` 工具使用以下命令行代码生成一个：'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`KeyTool` is part of the Java JDK, which is installed as part of Android Studio.
    Ensure you give an absolute path before running the command line. Also note that
    the file generated has to be kept private.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyTool` 是 Java JDK 的一部分，它是 Android Studio 安装的一部分。确保在运行命令行之前提供一个绝对路径。此外，请注意生成的文件必须保持私密。'
- en: '**Reference keystore from the app**: Next, create a file named'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从应用中引用密钥库**：接下来，创建一个名为'
- en: '`<app dir>/android/key.properties` that contains a reference to your keystore.
    Keep this file private. Take a look at this code:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<app dir>/android/key.properties` 包含对 keystore 的引用。请保持此文件私密。查看以下代码：'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Configure signing in Gradle**: Head to the `<app dir>/android/app/build.gradle`
    file and replace `**android {**` with the following code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在 Gradle 中配置签名**：转到 `<app dir>/android/app/build.gradle` 文件并将 `**android
    {**` 替换为以下代码：'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, remove the following code:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，删除以下代码：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Replace it with this code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换它：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once these steps are performed, your app's release builds will be signed automatically.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，你的应用的发布构建将自动签名。
- en: Using ProGuard
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ProGuard
- en: 'By default, Flutter build generation does not obfuscate or minify Android Host.
    You may want to reduce the size of the APK or save the code from reverse engineering.
    **ProGuard** is one such way to protect your code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Flutter 构建生成器不会对 Android Host 进行混淆或精简。你可能想减小 APK 的大小或防止代码被逆向工程。**ProGuard**
    是保护你的代码的一种方式：
- en: '**Configure ProGuard: **Create a new file called `**/**android/app/proguard-rules.pro`
    and add these rules:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置 ProGuard**：创建一个名为 `**/**android/app/proguard-rules.pro` 的新文件并添加以下规则：'
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the preceding code, you can protect only the engine libraries in Flutter.
    For protecting the others, add the code as per your development needs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码，你可以仅保护 Flutter 中的引擎库。对于保护其他部分，根据你的开发需求添加代码。
- en: '**Enable obfuscation and/or minification**: Open the `/android/app/build.gradle`
    file and locate the `buildTypes` definition:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启用混淆和/或精简**：打开 `/android/app/build.gradle` 文件并定位到 `buildTypes` 定义：'
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Inside, release the configuration set `minifyEnabled` and `useProguard` flags
    to true. Note also point ProGuard to the file you have created in step 1\. The
    refreshed code will look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，将配置集的 `minifyEnabled` 和 `useProguard` 标志设置为 true。注意也将 ProGuard 指向你在步骤 1
    中创建的文件。刷新后的代码将如下所示：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Building a release APK
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建发布 APK
- en: 'Generating a release is just a two-step process after you have successfully
    completed the preceding steps. Using the command line, perform the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功完成前面的步骤后，生成发布版本只是一个两步过程。使用命令行，执行以下操作：
- en: '`cd <app dir>` (note to replace `<app dir>` with your application''s directory
    path).'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cd <app dir>`（注意将`<app dir>`替换为您的应用程序目录路径）。'
- en: Run flutter build apk. This will create a release APK at `<app dir>/build/app/outputs/apk/release/app-release.apk`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行flutter build apk。这将创建一个发布APK，位于`<app dir>/build/app/outputs/apk/release/app-release.apk`。
- en: This build can be published on the Google Play store. Ensure you read the publishing
    guidelines before the app is uploaded.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此构建可以在Google Play商店发布。确保在应用上传之前阅读发布指南。
- en: Deploying on iOS
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS上部署
- en: 'As in the case of the Google Play store, Apple follows its own app publishing
    guidelines as well. Please be sure to read all the information regarding the same,
    before building the app. Here is the link you can check to read more details about
    Apple app publishing: [https://developer.apple.com/app-store/review/](https://developer.apple.com/app-store/review/).
    Once the app is submitted, as in the case of Google as well, Apple will check
    the app to adhere to its publishing guidelines. Note that Flutter supports iOS
    8.0 and later. This is important to know when we set the Xcode for build generation.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Google Play商店一样，Apple也有自己的应用发布指南。在构建应用之前，请务必阅读所有相关信息。以下是您可以查看以获取更多关于Apple应用发布的详细信息链接：[https://developer.apple.com/app-store/review/](https://developer.apple.com/app-store/review/)。一旦应用提交，就像Google一样，Apple将检查应用是否符合其发布指南。请注意，Flutter支持iOS
    8.0及更高版本。在设置Xcode构建生成时，这一点很重要。
- en: As in the case of Google, we use the **Google Play Developer** console. In the
    case of Apple, we will use **App Store Connect**, which was previously known as
    iTunes. This console is used to manage your app's life cycle. This console will
    help you set the app's name, descriptions, and app screenshots, which will be
    published along with the app, pricing, and manage releases.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Google一样，我们使用**Google Play开发者**控制台。在Apple的情况下，我们将使用**App Store Connect**，之前被称为iTunes。此控制台用于管理您应用的生命周期。此控制台将帮助您设置应用名称、描述和与应用一起发布的应用截图，并管理定价和发布。
- en: Registering Bundle ID
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册Bundle ID
- en: 'Every app that is published on the Apple store has a unique Bundle ID that
    is identified with Apple. To register a new Bundle ID for your app, follow these
    steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apple商店发布的每个应用都有一个唯一的Bundle ID，与Apple相关联。要为您的应用注册新的Bundle ID，请按照以下步骤操作：
- en: Open the App IDs page of your Apple developer account.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的Apple开发者账户的App IDs页面。
- en: Click on the + icon to create a new Bundle ID.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击+图标创建新的Bundle ID。
- en: Type an app name and select Explicit App ID, and enter an ID.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入应用名称并选择显式App ID，然后输入一个ID。
- en: Select the services your app is going to use and then click Continue.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的应用将要使用的服务，然后点击继续。
- en: The next step confirms the details. Now, click Register to register your Bundle
    ID.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步确认详细信息。现在，点击注册以注册您的Bundle ID。
- en: Generating an application record on App Store connect
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在App Store connect上生成应用程序记录
- en: 'To register an app on the App Store connect, please follow these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要在App Store connect上注册应用，请按照以下步骤操作：
- en: Open Apple App Store connect in your browser and click **My Apps**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开Apple App Store connect并点击**我的应用**。
- en: Click on the + icon at the top-left corner of the My Apps page | New App.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击My Apps页面左上角的+图标 | 新建应用。
- en: 'Within the pop-up screen, fill out your app''s details. In the Platforms section,
    ensure that iOS is checked. At this point, it is worth mentioning that Flutter
    does not, as yet, support tvOS. So, leave that checkbox unchecked. The name of
    the app can''t be longer than 30 characters. In the SKU section, add a unique
    ID for your app that is not visible in the App Store:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中，填写您的应用详细信息。在“平台”部分，确保选中iOS。此时，值得一提的是，Flutter目前尚不支持tvOS。因此，不要选中该复选框。应用名称不能超过30个字符。在SKU部分，添加一个在App
    Store中不可见的唯一ID：
- en: '![](img/6dafc872-0735-46f9-9165-ddcd4bac208a.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6dafc872-0735-46f9-9165-ddcd4bac208a.png)'
- en: Check Create.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建。
- en: Navigate to the application details for your app that was created using the
    previous steps, and select App Information from the sidebar.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到使用之前步骤创建的应用程序详细信息，并在侧边栏中选择应用信息。
- en: Select the Bundle ID in the General Information section.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“通用信息”部分选择Bundle ID。
- en: Verifying the Xcode settings
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证Xcode设置
- en: 'Verifying build-publishing settings in Xcode is rather simple compared to that
    in Android Studio. Firstly, navigate to the target''s settings in Xcode and do
    the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xcode中验证构建发布设置相对简单，与Android Studio相比。首先，导航到Xcode中目标设置，并执行以下操作：
- en: Open `Runner.xcworkspace` in your app's ios folder, in Xcode.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xcode中打开您的应用ios文件夹中的`Runner.xcworkspace`。
- en: Select the Runner project from the Xcode project navigator, which shows up the
    app's settings. Select the Runner target from the main view's sidebar.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Xcode项目导航器中选择Runner项目，这会显示应用的设置。从主视图的侧边栏中选择Runner目标。
- en: Select the General tab.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“通用”选项卡。
- en: 'The displayed information will need your attention to cross-check the important
    settings; so in the Identity section, look at the following details:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的信息需要你注意交叉检查重要的设置；因此，在“身份”部分，查看以下详细信息：
- en: Display Name: This is the name of the app that will be displayed in the App
    Store and anywhere else where the name is used
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示名称：这是将在App Store以及任何其他使用名称的地方显示的应用名称
- en: Bundle Identifier: This is the app ID you registered on App Store Connect, as
    discussed in the previous steps
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包标识符：这是你在App Store Connect上注册的应用ID，如前所述
- en: 'In the *Signing the app* section, please take a look at the following details:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在“签名应用”部分，请查看以下详细信息：
- en: Automatically manage signing: Defines whether Xcode should automatically manage
    app signing and provisioning. By default, it is set to `True`.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动管理签名：定义Xcode是否应该自动管理应用签名和配置。默认设置为“True”。
- en: The Team: Select the team associated with your registered Apple Developer account.
    If you wish to add some more members, click on Add Account, followed by updating
    the settings.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队：选择与你的注册Apple开发者账户关联的团队。如果你希望添加更多成员，请点击添加账户，然后更新设置。
- en: Finally in the Deployment section, check the Deployment Target: that holds the
    value for the minimum iOS version your app will support.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在部署部分，检查部署目标：这包含你的应用将支持的最低iOS版本值。
- en: Choosing the app icon
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择应用图标
- en: 'As in the case of Android Studio, even in the case of iOS, a placeholder icon
    is created. If you wish to have your own icon, please read the iOS app icon guidelines
    before proceeding with the following steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Android Studio中一样，即使在iOS的情况下，也会创建一个占位符图标。如果你希望使用自己的图标，请在进行以下步骤之前阅读iOS应用图标指南：
- en: Select `Assets.xcassets` in the `Runner` folder; this will be present in the
    Xcode project navigator
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Runner`文件夹中选择`Assets.xcassets`；这将在Xcode项目导航器中显示
- en: If your icons are ready, update the placeholder icons with your own app icons
    that have been generated
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的图标已经准备好，请更新占位符图标为你的自定义应用图标
- en: To check whether the icon is updated, run your app by using Flutter Run
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查图标是否已更新，请使用Flutter Run运行你的应用
- en: Creating the build archive
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建构建存档
- en: 'This is the final step for creating the build archive and then uploading it
    to the Apple Store. On the command line, follow these steps in your application
    directory:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建构建存档并将其上传到Apple Store的最后一步。在命令行中，在你的应用目录中按照以下步骤操作：
- en: Run flutter build iOS to create a release build.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行flutter build iOS以创建发布版本。
- en: Perform this only if your Xcode is below version 8.3\. To ensure that Xcode
    refreshes the release mode configuration, restart your Xcode workspace.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅当你的Xcode版本低于8.3时才执行此操作。为了确保Xcode刷新发布模式配置，请重新启动你的Xcode工作区。
- en: 'In Xcode, please use these steps to configure the app version and build:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xcode中，请按照以下步骤配置应用版本和构建：
- en: In Xcode, open `Runner.xcworkspace` in your app's `ios` folder.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xcode中，在你的应用的`ios`文件夹中打开`Runner.xcworkspace`。
- en: Select Product | Scheme | Runner.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择产品 | 方案 | Runner。
- en: Select Product | Destination | Generic iOS Device.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择产品 | 目标 | 通用iOS设备。
- en: Select Runner in the Xcode project navigator followed by Runner target in the
    settings view sidebar.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xcode项目导航器中选择Runner，然后在设置视图侧边栏中选择Runner目标。
- en: In the Identity section, update the version and also update the Build identifier
    to a unique build number. This is used to track the number of the build uploaded.
    Each build should have a unique build number.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“身份”部分，更新版本号，并将构建标识符更新为唯一的构建编号。这用于跟踪上传的构建数量。每个构建都应该有一个唯一的构建编号。
- en: 'The final step is to create the build archive and upload it to App Store Connect:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是创建构建存档并将其上传到App Store Connect：
- en: Select the product and then Achieve to product a build archive
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择产品，然后生成构建存档
- en: In the Xcode organizer window in the sidebar | select the iOS app | select the
    build archive that you just produced
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xcode组织者窗口的侧边栏中 | 选择iOS应用 | 选择你刚刚生成的构建存档
- en: Click the Validate button
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击验证按钮
- en: After the archive is validated, you can click the Upload to App store option
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存档验证后，你可以点击“上传到App Store”选项
- en: If there are any errors, reproduce the build and try to repeat the process again.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有任何错误，请重新生成构建并尝试再次重复此过程。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Once you have worked on your awesome app, deployment and publishing are key
    aspects. We covered how to publish the android and iOS app on Play Store. It is
    important to know that app upload just lists the app. You should also look at
    the App Store as key techniques to have a better visibility for the apps.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了你的出色应用，部署和发布是关键环节。我们已经介绍了如何在 Play Store 上发布安卓和 iOS 应用。重要的是要知道，应用上传只是列出应用。你还应该将
    App Store 视为提高应用可见性的关键技术。
