- en: Deploying Flutter Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying the Flutter app is one of the easiest processes to enable developers
    to prepare the apps for publishing on app stores. By now, you must have learned
    Google's mobile app SDK provides several features to craft high-quality native
    interfaces on iOS and Android, in record time.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the course of this book so far, the build that we have built is a debug type.
    Ideally, this is used for testing the app before following the steps to produce
    the release version of the app to be uploaded. Flutter also allows creating flavors
    of the app. If you wish to build a production version of the app you have developed,
    follow the upcoming steps.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the AndroidManifest.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This file holds some of the major global settings of the app that come in handy
    when building the production version of the app. It can be located at `<app dir>/android/app/src/main`.
    When you click on the `AndroidManifest.xml` file, you will find the snippet in
    the `Application` tag shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The explanation for the properties visible in the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`android.name`: This property sets the package name for the app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android.label`: This property sets the final name of the app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:icon`: This property sets the launch icon for the app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `<uses-permission>` tag allows developers to set the permission needed for
    the developers in the app. For example, if you wish to use the internet, the preceding
    property has to be used, or if you wish to access the camera, `<uses-permission
    android:name="android.permission.CAMERA"/>` has to be used. This will manifest
    element for all camera features. The developers can also demand to ask the users
    for the permission access in the **runtime** mode.
  prefs: []
  type: TYPE_NORMAL
- en: The build.gradle configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to review the Gradle build file situated in `<app dir>/android/app`
    and to confirm whether the values entered in the following parameters are correct:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the `VersionCode` and `VersionName` in the following snippet. Please note
    that the `VersionCode` value should be unique for every uploaded build and that
    it is an absolute value. The greatest value the Google Play store allows for `versionCode`
    is `2100000000`. On the other hand, `VersionName` is a string value. There is
    no purpose of `VersionName` to show up the value on the play store. The string
    value can be cascaded as a `<major>.<minor>.<point>` string—for example, 1.2.2:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`applicationId`: This is to enable developers to specify the final, unique
    application ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minSdkVersion` and `targetSdkVersion`: These two values specify the minimum
    API level and the target API level on which the app is designed to run on:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Icons within apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A trendy, eye-catching icon can be a great trigger for someone to launch the
    app. By default, the launcher icon is a default icon. By adhering to the Android
    Launcher Icon guidelines, you can build your own icon that can be used for the
    app''s launch trigger from the mobile screen:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your icon files are ready, check the `<app dir>/android/app/src/main/res/`
    directory and place the files in the respective folders using configuration qualifiers.
    You can read more about this here: [https://developer.android.com/guide/topics/resources/providing-resources#AlternativeResources](https://developer.android.com/guide/topics/resources/providing-resources#AlternativeResources).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have placed the files in the folders, simply head to `AndroidManifest.xml`
    and update the application tag's `android:icon` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To ensure the icon has been replaced, `Flutter run` and inspect the app icon
    in the launcher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Signing the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is one of the key steps before publishing the app on the Google Play store.
    To publish the app, signing the app using a digital signature is a key part. Follow
    these steps to sign the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a keystore**: If you already have a `keystore`, skip to step 2\. If
    you wish to build the new `keystore`, use the `KeyTool` tool to generate one using
    this command-line code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`KeyTool` is part of the Java JDK, which is installed as part of Android Studio.
    Ensure you give an absolute path before running the command line. Also note that
    the file generated has to be kept private.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference keystore from the app**: Next, create a file named'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<app dir>/android/key.properties` that contains a reference to your keystore.
    Keep this file private. Take a look at this code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Configure signing in Gradle**: Head to the `<app dir>/android/app/build.gradle`
    file and replace `**android {**` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, remove the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once these steps are performed, your app's release builds will be signed automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Using ProGuard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, Flutter build generation does not obfuscate or minify Android Host.
    You may want to reduce the size of the APK or save the code from reverse engineering.
    **ProGuard** is one such way to protect your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configure ProGuard: **Create a new file called `**/**android/app/proguard-rules.pro`
    and add these rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using the preceding code, you can protect only the engine libraries in Flutter.
    For protecting the others, add the code as per your development needs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Enable obfuscation and/or minification**: Open the `/android/app/build.gradle`
    file and locate the `buildTypes` definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside, release the configuration set `minifyEnabled` and `useProguard` flags
    to true. Note also point ProGuard to the file you have created in step 1\. The
    refreshed code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Building a release APK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generating a release is just a two-step process after you have successfully
    completed the preceding steps. Using the command line, perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cd <app dir>` (note to replace `<app dir>` with your application''s directory
    path).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run flutter build apk. This will create a release APK at `<app dir>/build/app/outputs/apk/release/app-release.apk`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This build can be published on the Google Play store. Ensure you read the publishing
    guidelines before the app is uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As in the case of the Google Play store, Apple follows its own app publishing
    guidelines as well. Please be sure to read all the information regarding the same,
    before building the app. Here is the link you can check to read more details about
    Apple app publishing: [https://developer.apple.com/app-store/review/](https://developer.apple.com/app-store/review/).
    Once the app is submitted, as in the case of Google as well, Apple will check
    the app to adhere to its publishing guidelines. Note that Flutter supports iOS
    8.0 and later. This is important to know when we set the Xcode for build generation.'
  prefs: []
  type: TYPE_NORMAL
- en: As in the case of Google, we use the **Google Play Developer** console. In the
    case of Apple, we will use **App Store Connect**, which was previously known as
    iTunes. This console is used to manage your app's life cycle. This console will
    help you set the app's name, descriptions, and app screenshots, which will be
    published along with the app, pricing, and manage releases.
  prefs: []
  type: TYPE_NORMAL
- en: Registering Bundle ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every app that is published on the Apple store has a unique Bundle ID that
    is identified with Apple. To register a new Bundle ID for your app, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the App IDs page of your Apple developer account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the + icon to create a new Bundle ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type an app name and select Explicit App ID, and enter an ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the services your app is going to use and then click Continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step confirms the details. Now, click Register to register your Bundle
    ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating an application record on App Store connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To register an app on the App Store connect, please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Apple App Store connect in your browser and click **My Apps**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the + icon at the top-left corner of the My Apps page | New App.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the pop-up screen, fill out your app''s details. In the Platforms section,
    ensure that iOS is checked. At this point, it is worth mentioning that Flutter
    does not, as yet, support tvOS. So, leave that checkbox unchecked. The name of
    the app can''t be longer than 30 characters. In the SKU section, add a unique
    ID for your app that is not visible in the App Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6dafc872-0735-46f9-9165-ddcd4bac208a.png)'
  prefs: []
  type: TYPE_IMG
- en: Check Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the application details for your app that was created using the
    previous steps, and select App Information from the sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Bundle ID in the General Information section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verifying the Xcode settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Verifying build-publishing settings in Xcode is rather simple compared to that
    in Android Studio. Firstly, navigate to the target''s settings in Xcode and do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Runner.xcworkspace` in your app's ios folder, in Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Runner project from the Xcode project navigator, which shows up the
    app's settings. Select the Runner target from the main view's sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the General tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The displayed information will need your attention to cross-check the important
    settings; so in the Identity section, look at the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: Display Name: This is the name of the app that will be displayed in the App
    Store and anywhere else where the name is used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bundle Identifier: This is the app ID you registered on App Store Connect, as
    discussed in the previous steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the *Signing the app* section, please take a look at the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatically manage signing: Defines whether Xcode should automatically manage
    app signing and provisioning. By default, it is set to `True`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Team: Select the team associated with your registered Apple Developer account.
    If you wish to add some more members, click on Add Account, followed by updating
    the settings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally in the Deployment section, check the Deployment Target: that holds the
    value for the minimum iOS version your app will support.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the app icon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As in the case of Android Studio, even in the case of iOS, a placeholder icon
    is created. If you wish to have your own icon, please read the iOS app icon guidelines
    before proceeding with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select `Assets.xcassets` in the `Runner` folder; this will be present in the
    Xcode project navigator
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your icons are ready, update the placeholder icons with your own app icons
    that have been generated
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To check whether the icon is updated, run your app by using Flutter Run
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the build archive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the final step for creating the build archive and then uploading it
    to the Apple Store. On the command line, follow these steps in your application
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Run flutter build iOS to create a release build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform this only if your Xcode is below version 8.3\. To ensure that Xcode
    refreshes the release mode configuration, restart your Xcode workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Xcode, please use these steps to configure the app version and build:'
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, open `Runner.xcworkspace` in your app's `ios` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Product | Scheme | Runner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Product | Destination | Generic iOS Device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Runner in the Xcode project navigator followed by Runner target in the
    settings view sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Identity section, update the version and also update the Build identifier
    to a unique build number. This is used to track the number of the build uploaded.
    Each build should have a unique build number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final step is to create the build archive and upload it to App Store Connect:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the product and then Achieve to product a build archive
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Xcode organizer window in the sidebar | select the iOS app | select the
    build archive that you just produced
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Validate button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the archive is validated, you can click the Upload to App store option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are any errors, reproduce the build and try to repeat the process again.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have worked on your awesome app, deployment and publishing are key
    aspects. We covered how to publish the android and iOS app on Play Store. It is
    important to know that app upload just lists the app. You should also look at
    the App Store as key techniques to have a better visibility for the apps.
  prefs: []
  type: TYPE_NORMAL
