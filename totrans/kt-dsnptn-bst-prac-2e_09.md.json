["```kt\nval letters = 'a'..'z'\n```", "```kt\nval ascii = mutableListOf<Int>()\n```", "```kt\nfor (l in letters) {\n```", "```kt\n    ascii.add(l.toInt())\n```", "```kt\n}\n```", "```kt\nval result: List<Int> = ('a'..'z').map { it.toInt() }\n```", "```kt\nval numbers = 1..100\n```", "```kt\nval notFizzbuzz = mutableListOf<Int>()\n```", "```kt\nfor (n in numbers) {\n```", "```kt\n    if (n % 3 == 0 || n % 5 == 0) {\n```", "```kt\n        notFizzbuzz.add(n)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval filtered: List<Int> = (1..100).filter { it % 3 == 0 || \n```", "```kt\n  it % 5 == 0 }\n```", "```kt\nfun findFizzbuzz(numbers: List<Int>): Int? {\n```", "```kt\n    for (n in numbers) {\n```", "```kt\n        if (n % 3 == 0 && n % 5 == 0) {\n```", "```kt\n            return n\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    return null\n```", "```kt\n}\n```", "```kt\nval found: Int? = (1..100).find { it % 3 == 0 && it % 5 ==   0 }\n```", "```kt\nval numbers = (0..5)\n```", "```kt\nnumbers.map { it * it}          // Can continue\n```", "```kt\n       .filter { it < 20 }      // Can continue\n```", "```kt\n       .forEach { println(it) } // Cannot continue\n```", "```kt\nnumbers.map { it * it }\n```", "```kt\n        .forEachIndexed { index, value ->\n```", "```kt\n    print(\"$index:$value, \")\n```", "```kt\n}\n```", "```kt\n> 0:1, 1:4, 2:9, 3:16, 4:25, \n```", "```kt\nnumbers.map { it * it}         \n```", "```kt\n       .filter { it < 20 }     \n```", "```kt\n       .sortedDescending()     \n```", "```kt\n       .onEach { println(it) } // Can continue now\n```", "```kt\n       .filter { it > 5 }\n```", "```kt\nval numbers = 1..100\n```", "```kt\nvar sum = 0\n```", "```kt\nfor (n in numbers) {\n```", "```kt\n    sum += n\n```", "```kt\n}\n```", "```kt\nval reduced: Int = (1..100).reduce { sum, n -> sum + n }\n```", "```kt\nval listOfLists: List<List<Int>> = listOf(listOf(1, 2), listOf(3, 4, 5), listOf(6, 7, 8))\n```", "```kt\n> [1, 2, 3, 4, 5, 6, 7, 8]\n```", "```kt\nval flattened = mutableListOf<Int>()\n```", "```kt\nfor (list in listOfLists) {\n```", "```kt\n    flattened.addAll(list)\n```", "```kt\n}\n```", "```kt\nval flattened: List<Int> = listOfLists.flatMap { it }\n```", "```kt\nval flattened: List<Int> = listOfLists.flatten()\n```", "```kt\nval seq: Sequence<Long> = generateSequence(1L) { it + 1 }\n```", "```kt\n(1..100).asSequence()\n```", "```kt\nval fibSeq = sequence {\n```", "```kt\n    var a = 0\n```", "```kt\n    var b = 1\n```", "```kt\n    yield(a)\n```", "```kt\n    yield(b)\n```", "```kt\n    while (true) {\n```", "```kt\n        yield(a + b)\n```", "```kt\n        val t = a\n```", "```kt\n        a = b\n```", "```kt\n        b += t\n```", "```kt\n    }\n```", "```kt\n} \n```", "```kt\nval numbers = (1..1_000_000).toList()\n```", "```kt\nprintln(measureTimeMillis {\n```", "```kt\n    numbers.map {\n```", "```kt\n        it * it\n```", "```kt\n    }.take(1).forEach { it }\n```", "```kt\n}) // ~50ms\n```", "```kt\nprintln(measureTimeMillis {\n```", "```kt\n    numbers.asSequence().map {\n```", "```kt\n        it * it\n```", "```kt\n    }.take(1).forEach { it }\n```", "```kt\n}) // ~5ms\n```", "```kt\n    val chan = Channel<Int>()\n    ```", "```kt\n    launch {\n        for (c in chan) {\n            println(c)\n        }\n    }\n    ```", "```kt\n    (1..10).forEach {\n        chan.send(it)\n    }\n    chan.close()\n    ```", "```kt\nval chan = produce {\n```", "```kt\n    (1..10).forEach {\n```", "```kt\n        send(it)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nlaunch {\n```", "```kt\n    for (c in chan) {\n```", "```kt\n        println(c)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nlaunch {\n```", "```kt\n    chan.consumeEach {\n```", "```kt\n        println(it)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval actor = actor<Int> {\n```", "```kt\n    channel.consumeEach {\n```", "```kt\n        println(it)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n(1..10).forEach {\n```", "```kt\n    actor.send(it)\n```", "```kt\n}\n```", "```kt\nval actor = actor<Long> {\n```", "```kt\n    var prev = 0L\n```", "```kt\n    channel.consumeEach {\n```", "```kt\n        println(it - prev)\n```", "```kt\n        prev = it\n```", "```kt\n        delay(100)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nrepeat(10) {\n```", "```kt\n    actor.send(System.currentTimeMillis())\n```", "```kt\n}\n```", "```kt\nactor.close().also { println(\"Done sending\") }\n```", "```kt\n> ...\n```", "```kt\n> 101\n```", "```kt\n> 103\n```", "```kt\n> 101\n```", "```kt\n> Done sending\n```", "```kt\nval actor = actor<Long>(capacity = 10) {\n```", "```kt\n...\n```", "```kt\n}\n```", "```kt\n> Done sending\n```", "```kt\n> ...\n```", "```kt\n> 0\n```", "```kt\n> 0\n```", "```kt\nval chan = produce(capacity = 10) { \n```", "```kt\n    (1..10).forEach { \n```", "```kt\n        send(it) \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nval chan = Channel<Int>(10)\n```", "```kt\nval numbersFlow: Flow<Int> = flow {\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nflow {\n```", "```kt\n    (0..10).forEach {\n```", "```kt\n        println(\"Sending $it\")\n```", "```kt\n        emit(it)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nnumbersFlow.collect { number ->\n```", "```kt\n    println(\"Listener received $number\")\n```", "```kt\n}\n```", "```kt\nflow {\n```", "```kt\n    (1..10).forEach {\n```", "```kt\n    ...\n```", "```kt\n        if (it == 9) {\n```", "```kt\n            throw RuntimeException()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ntry {\n```", "```kt\n    numbersFlow.collect { number ->\n```", "```kt\n        println(\"Listenerreceived $number\")\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ncatch (e: Exception) {\n```", "```kt\n    println(\"Got an error\")\n```", "```kt\n}\n```", "```kt\n(1..4).forEach { coroutineId ->\n```", "```kt\n    delay(5000)\n```", "```kt\n    launch(Dispatchers.Default) {\n```", "```kt\n        numbersFlow.collect { number -> \n```", "```kt\n            delay(1000)\n```", "```kt\n            println(\"Coroutine $coroutineId received \n```", "```kt\n              $number\") \n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n> ...\n```", "```kt\n> Sending 1\n```", "```kt\n> Coroutine 1 received 5\n```", "```kt\n> Sending 6\n```", "```kt\n> Coroutine 2 received 1\n```", "```kt\n> Sending 2\n```", "```kt\n> Coroutine 1 received 6\n```", "```kt\n> ...\n```", "```kt\nnumbersFlow.buffer().collect { number ->\n```", "```kt\n    delay(1000)\n```", "```kt\n    println(\"Coroutine $coroutineId received $number\")\n```", "```kt\n}\n```", "```kt\n> ...\n```", "```kt\n> Sending 8\n```", "```kt\n> Sending 9\n```", "```kt\n> Sending 10\n```", "```kt\n> Coroutine 1 received 1\n```", "```kt\n> Coroutine 1 received 2\n```", "```kt\n> ...\n```", "```kt\nval stock: Flow<Int> = flow {\n```", "```kt\n    var i = 0\n```", "```kt\n    while (true) {\n```", "```kt\n        emit(++i)\n```", "```kt\n        delay(100)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nvar seconds = 0\n```", "```kt\nstock.collect { number ->\n```", "```kt\n    delay(1000)\n```", "```kt\n    seconds++\n```", "```kt\n    println(\"$seconds seconds -> received $number\")\n```", "```kt\n}\n```", "```kt\n> 1 seconds -> received 1\n```", "```kt\n> 2 seconds -> received 2\n```", "```kt\n> 3 seconds -> received 3\n```", "```kt\n> ...\n```", "```kt\nstock.conflate().collect { number ->\n```", "```kt\n    delay(1000)\n```", "```kt\n    seconds++\n```", "```kt\n    println(\"$seconds seconds -> received $number\")\n```", "```kt\n}\n```", "```kt\n> ...\n```", "```kt\n> 4 seconds -> received 30\n```", "```kt\n> 5 seconds -> received 40\n```", "```kt\n> 6 seconds -> received 49\n```", "```kt\n> ...\n```"]