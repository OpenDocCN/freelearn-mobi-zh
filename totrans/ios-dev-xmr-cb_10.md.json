["```swift\n    using MonoTouch.CoreLocation;\n    ```", "```swift\n    private CLLocationManager locationManager;\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      this.locationManager = new CLLocationManager();\n      this.locationManager.LocationsUpdated += LocationManager_LocationsUpdated;\n      this.locationManager.Failed += this.LocationManager_Failed;\n\n      this.btnStart.TouchUpInside += delegate {\n        this.lblOutput.Text = \"Determining location...\";\n        this.locationManager.StartUpdatingLocation();\n      } ;\n      this.btnStop.TouchUpInside += delegate {\n        this.locationManager.StopUpdatingLocation();\n        this.lblOutput.Text = \"Location update stopped.\";\n      } ;\n    }\n    private void LocationManager_LocationsUpdated (object sender, CLLocationsUpdatedEventArgs e)\n    {\n      CLLocation location = e.Locations[0];\n      double latitude = Math.Round(location.Coordinate.Latitude, 4);\n      double longitude = Math.Round(location.Coordinate.Longitude, 4);\n      double accuracy = Math.Round(location.HorizontalAccuracy, 0);\n      this.lblOutput.Text = string.Format(\"Latitude: {0}\\nLongitude: {1},\\nAccuracy: {2}m\", latitude, longitude, accuracy);\n    }\n    private void LocationManager_Failed (object sender, NSErrorEventArgs e)\n    {\n      this.lblOutput.Text = string.Format(\"Location update failed! Error message: {0}\", e.Error.LocalizedDescription);\n    }\n    ```", "```swift\nthis.locationManager = new CLLocationManager();\nthis.locationManager.LocationsUpdated += LocationManager_LocationsUpdated;\n```", "```swift\n  this.locationManager.Failed += this.LocationManager_Failed;\n```", "```swift\nthis.locationManager.StartUpdatingLocation();\n```", "```swift\nthis.locationManager.StopUpdatingLocation();\n```", "```swift\nCLLocation location = e.Locations[0];\ndouble latitude = Math.Round(location.Coordinate.Latitude, 4);\ndouble longitude = Math.Round(location.Coordinate.Longitude, 4);\ndouble accuracy = Math.Round(location.HorizontalAccuracy, 0);\n```", "```swift\nif (CLLocationManager.LocationServicesEnabled) {\n  // Initialize the location manager\n  //...\n}\n```", "```swift\nif (CLLocationManager.Status == CLAuthorizationStatus.Authorized) {\n  //..\n}\n```", "```swift\n    private CLLocationManager locationManager;\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      // Perform any additional setup after loading the view, typically from a nib.\n      this.locationManager = new CLLocationManager();\n      this.locationManager.UpdatedHeading += LocationManager_UpdatedHeading;\n      this.locationManager.Failed += (sender, e) => Console.WriteLine(\"Failed! {0}\", e.Error.LocalizedDescription);\n\n      this.btnStart.TouchUpInside += delegate {\n        this.lblOutput.Text = \"Starting updating heading...\";\n        this.locationManager.StartUpdatingHeading();\n      } ;\n      this.btnStop.TouchUpInside += delegate {\n        this.locationManager.StopUpdatingHeading();\n        this.lblOutput.Text = \"Stopped updating heading.\";\n      };\n    }\n    private void LocationManager_UpdatedHeading (object sender, CLHeadingUpdatedEventArgs e)\n    {\n      this.lblOutput.Text = string.Format(\"Magnetic heading: {0}\", Math.Round(e.NewHeading.MagneticHeading, 1));\n    }\n    ```", "```swift\nthis.locationManager.UpdatedHeading += this.LocationManager_UpdatedHeading;\n```", "```swift\nthis.locationManager.StartUpdatingHeading();\n```", "```swift\nthis.lblOutput.Text = string.Format(\"Magnetic heading: {0}\", Math.Round(e.NewHeading.MagneticHeading, 1));\n```", "```swift\nthis.locationManager.StopUpdatingHeading();\n```", "```swift\nif (CLLocationManager.HeadingAvailable) {\n  // Start updating heading\n  //...\n}\n```", "```swift\n    private CLLocationManager locationManager;\n    private CLCircularRegion region;\n    ```", "```swift\n    this.locationManager.RegionEntered += this.LocationManager_RegionEntered;\n    this.locationManager.RegionLeft += this.LocationManager_RegionLeft;\n    this.locationManager.UpdatedLocation += this.LocationManager_UpdatedLocation;\n    ```", "```swift\n    private void LocationManager_LocationsUpdated (object sender, CLLocationUpdatedEventArgs e)\n    {\n      CLLocation location = e.Locations[0];\n      if (location.HorizontalAccuracy < 100)\n      {\n        this.region = new CLCircularRegion(location.Coordinate, 100, \"Home\");\n        this.locationManager.StartMonitoring(this.region);\n        this.locationManager.StopUpdatingLocation();\n      }\n    }\n    private void LocationManager_RegionLeft (object sender, CLRegionEventArgs e)\n    {\n      this.lblOutput.Text = string.Format(\"{0} region left.\", e.Region.Identifier);\n    }\n    private void LocationManager_RegionEntered (object sender, CLRegionEventArgs e)\n    {\n      this.lblOutput.Text = string.Format(\"{0} region entered.\", e.Region.Identifier);\n    }\n    ```", "```swift\n    this.locationManager.StartUpdatingLocation();\n    ```", "```swift\n    this.locationManager.StopMonitoring(this.region);\n    ```", "```swift\nthis.locationManager.RegionEntered += this.LocationManager_RegionEntered;\nthis.locationManager.RegionLeft += this.LocationManager_RegionLeft;\n```", "```swift\nif (location.HorizontalAccuracy < 100)\n```", "```swift\nthis.region = new CLRegion(e.NewLocation.Coordinate, 100, \"Home\");\n```", "```swift\nthis.locationManager.StartMonitoring(this.region);\n```", "```swift\nif (CLLocationManager.IsMonitoringAvailable(typeof(CLCircularRegion)) {\n  // Start monitoring a region\n  //...\n}\n```", "```swift\n    private CLLocationManager locationManager;\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n\n      // Perform any additional setup after loading the view, typically from a nib.\n      this.locationManager = new CLLocationManager();\n      this.locationManager.LocationsUpdated += LocationManager_LocationsUpdated;\n      this.btnStart.TouchUpInside += (s, e) => {\n        this.lblOutput.Text = \"Starting monitoring significant location changes...\";\n        this.locationManager.StartMonitoringSignificantLocationChanges();\n      } ;\n      this.btnStop.TouchUpInside += (s, e) => {\n        this.locationManager.StopMonitoringSignificantLocationChanges();\n        this.lblOutput.Text = \"Stopped monitoring significant location changes.\";\n      } ;\n    }\n    ```", "```swift\n    private void LocationManager_LocationsUpdated (object sender, CLLocationsUpdatedEventArgs e)\n    {\n      CLLocation location = e.Locations[0];\n      double latitude = Math.Round(location.Coordinate.Latitude, 4);\n      double longitude = Math.Round(location.Coordinate.Longitude, 4);\n      double accuracy = Math.Round(location.HorizontalAccuracy, 0);\n      this.lblOutput.Text = string.Format(\"Latitude: {0}\\nLongitude: {1}\\nAccuracy: {2}\", latitude, longitude, accuracy);\n    }\n    ```", "```swift\nthis.locationManager.StartMonitoringSignificantLocationChanges();\n```", "```swift\nthis.locationManager.LocationsUpdated += LocationManager_LocationsUpdated;\n//...\nprivate void LocationManager_LocationsUpdated (object sender, CLLocationUpdatedEventArgs e)\n{\n//...\n}\n```", "```swift\nif (CLLocationManager.SignificantLocationChangeMonitoringAvailable) {\n  // Start monitoring for significant location changes.\n  //...\n}\n```", "```swift\n    Console.WriteLine(\"{0}:\\n\\t{1} \", DateTime.Now, this.lblOutput.Text);\n    ```", "```swift\n<key>UIBackgroundModes</key>\n  <array>\n    <string>location</string>\n  </array>\n</key>\n```", "```swift\nif (null != options)\n{\n if (options.ContainsKey (UIApplication.LaunchOptionsLocationKey))\n  {\n    Console.WriteLine (\"Woken from location service!\");\n    CLLocationManager locationManager = new CLLocationManager();\n    locationManager.UpdatedLocation += this.LocationUpdatedHandler;\n    locationManager.StartMonitoringSignificantLocationChanges();\n  }\n}\n```", "```swift\n    using MonoTouch.MapKit;\n    using MonoTouch.CoreLocation;\n    ```", "```swift\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      this.mapView.ShowsUserLocation = true;\n      this.mapView.RegionChanged += this.MapView_RegionChanged;\n    }\n    private void MapView_RegionChanged (object sender, MKMapViewChangeEventArgs e)\n    {\n      if (this.mapView.UserLocation.Location != null)\n      {\n        CLLocationCoordinate2D mapCoordinate = this.mapView.UserLocation.Location.Coordinate;\n        Console.WriteLine(\"Current coordinates: LAT: {0}, LON: {1}\", mapCoordinate.Latitude, mapCoordinate.Longitude);\n      }\n    }\n    ```", "```swift\nthis.mapView.ShowsUserLocation = true;\n```", "```swift\nthis.mapView.RegionChanged += this.MapView_RegionChanged;\n```", "```swift\nif (this.mapView.UserLocation.Location != null)\n{\n  CLLocationCoordinate2D mapCoordinate = this.mapView.UserLocation.Location.Coordinate;\n  Console.WriteLine(\"Current coordinates: LAT: {0}, LON: {1}\", mapCoordinate.Latitude, mapCoordinate.Longitude);\n}\n```", "```swift\nCLLocationCoordinate2D mapCoordinates = new CLLocationCoordinate2D(0, 0);\nthis.mapView.SetCenterCoordinate(mapCoordinates, true);\n```", "```swift\nthis.mapView.SetRegion(MKCoordinateRegion.FromDistance(mapCoordinates, 1000, 1000), true);\n```", "```swift\n    private CLGeocoder geocoder;\n    public override void ViewDidLoad () {\n      base.ViewDidLoad ();\n      this.mapView.ShowsUserLocation = true;\n      this.btnGeocode.TouchUpInside += async (sender, e) => {\n        this.lblOutput.Text = \"Reverse geocoding location...\";\n        this.btnGeocode.Enabled = false;\n        CLLocation currentLocation = \n          this.mapView.UserLocation.Location;\n        this.mapView.SetRegion(MKCoordinateRegion.FromDistance(currentLocation.Coordinate, 1000, 1000), true);\n        this.geocoder = new CLGeocoder();\n        try\t{\n          CLPlacemark[] placemarks = \n            await this.geocoder.ReverseGeocodeLocationAsync(currentLocation);\n          if (null != placemarks)  {\n            CLPlacemark placemark = placemarks[0];\n            this.lblOutput.Text = \n              string.Format(\"Locality: {0}, Administrative area: {1}\", \n                placemark.Locality,\n                placemark.AdministrativeArea);\n          }\n        } catch (Exception ex) {\n          Console.WriteLine(\"Error reverse geocoding location! {0}\", ex.Message);\n        } finally {\n          this.btnGeocode.Enabled = true;\n        }\n      };\n    }\n    ```", "```swift\nprivate CLGeocoder geocoder;\n```", "```swift\nCLPlacemark[] placemarks = \n        await this.geocoder.ReverseGeocodeLocationAsync(currentLocation);\n```", "```swift\nCLPlacemark placemark = placemarks[0];\nthis.lblOutput.Text = \n  string.Format(\"Locality: {0}, Administrative area: {1}\", \n            placemark.Locality,\n            placemark.AdministrativeArea);\n```", "```swift\nCLPlacemark[] forward = \n  await this.geocoder.GeocodeAddressAsync(\"Infinite Loop, 1-5, Cupertino, CA, USA\");\n```", "```swift\n    public partial class MapAnnotateAppViewController : UIViewController, IMKMapViewDelegate\n    ```", "```swift\n    this.mapView.ShowsUserLocation = true;\n    this.mapView.WeakDelegate = this;\n    this.btnAddPin.TouchUpInside += (sender, e) => {\n      CLLocationCoordinate2D mapCoordinate = \n        this.mapView.UserLocation.Coordinate;\n      this.mapView.SetRegion(MKCoordinateRegion.FromDistance(mapCoordinate, 1000, 1000), true);\n      MKPointAnnotation myAnnotation = new MKPointAnnotation();\n      myAnnotation.Coordinate = mapCoordinate;\n      myAnnotation.Title = \"My Annotation\";\n      myAnnotation.Subtitle = \"Standard pin with Xamarin\";\n      this.mapView.AddAnnotation(myAnnotation);\n    };\n    ```", "```swift\n    [Export (\"mapView:viewForAnnotation:\")]\n    public MKAnnotationView GetViewForAnnotation (MKMapView mapView, NSObject annotation)\n    {\n      if (annotation is MKUserLocation)\n      {\n        return null;\n      } else\n      {\n        string reuseID = \"myAnnotation\";\n        MKPinAnnotationView pinView = \n          mapView.DequeueReusableAnnotation(reuseID) as MKPinAnnotationView;\n        if (null == pinView)\n        {\n          pinView = new MKPinAnnotationView(annotation, reuseID);\n          pinView.PinColor = MKPinAnnotationColor.Purple;\n          pinView.AnimatesDrop = true;\n          pinView.CanShowCallout = true;\n\n        }\n        return pinView;\n      }\n    }\n    ```", "```swift\nMKPointAnnotation myAnnotation = new MKPointAnnotation();\nmyAnnotation.Coordinate = mapCoordinate;\nmyAnnotation.Title = \"MyAnnotation\";\nmyAnnotation.Subtitle = \"Standard annotation\";\nthis.mapView.AddAnnotation(myAnnotation);\n```", "```swift\nthis.mapView.WeakDelegate = this;\n```", "```swift\n[Export (\"mapView:viewForAnnotation:\")]\npublic MKAnnotationView GetViewForAnnotation (MKMapView mapView, NSObject annotation)\n```", "```swift\n  if (annotation is MKUserLocation)\n```", "```swift\nMKPinAnnotationView pinView = mapView.DequeueReusableAnnotation(reuseIdentifier) as MKPinAnnotationView;\n```", "```swift\npinView = new MKPinAnnotationView(annotation, reuseIdentifier);\npinView.PinColor = MKPinAnnotationColor.Purple;\npinView.AnimatesDrop = true;\npinView.CanShowCallout = true;\n```", "```swift\nreturn pinView;\n```", "```swift\nthis.mapView.ShowAnnotations(myAnnotationsArray, true);\n```", "```swift\n    public partial class MapOverlayAppViewController : UIViewController, IMKMapViewDelegate\n    ```", "```swift\n    this.mapView.ShowsUserLocation = true;\n    this.mapView.WeakDelegate = this;\n    this.btnAddOverlay.TouchUpInside += (sender, e) => {\n      CLLocationCoordinate2D mapCoordinate = \n        this.mapView.UserLocation.Coordinate;\n      this.mapView.SetRegion(MKCoordinateRegion.FromDistance(mapCoordinate, 1000, 1000), true);\n      MKCircle circle = \n        MKCircle.Circle(mapCoordinate, 250);\n      this.mapView.AddOverlay(circle, MKOverlayLevel.AboveRoads);\n    };\n    ```", "```swift\n    [Export (\"mapView:rendererForOverlay:\")]\n    public MKOverlayRenderer OverlayRenderer (MKMapView mapView, IMKOverlay overlay)\n    {\n      MKCircle circle = overlay as MKCircle;\n      if (null != circle)\n      {\n        MKCircleRenderer renderer = new MKCircleRenderer(circle);\n        renderer.FillColor = UIColor.FromRGBA(1.0f, 0.5f, 0.5f, 0.5f);\n        renderer.StrokeColor = UIColor.Red;\n        renderer.LineWidth = 2f;\n        return renderer;\n      } else\n      {\n        return null;\n      }\n    }\n    ```", "```swift\nMKCircle circle = MKCircle.Circle(mapCoordinate, 250);\n```", "```swift\nthis.mapView.AddOverlay(circle, MKOverlayLevel.AboveRoads);\n```", "```swift\npublic override MKOverlayRenderer OverlayRenderer (MKMapView mapView, IMKOverlay overlay)\n```", "```swift\nMKCircle circleOverlay = overlay as MKCircle;\nif (null != circleOverlay)\n```", "```swift\nMKCircleRenderer renderer = new MKCircleRenderer(circle);\nrenderer.FillColor = UIColor.FromRGBA(1.0f, 0.5f, 0.5f, 0.5f);\nrenderer.StrokeColor = UIColor.Red;\nrenderer.LineWidth = 2f;\nreturn renderer;\n```"]