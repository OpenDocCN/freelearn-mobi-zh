- en: Chapter 1. Setting Up the Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android 5 is the most significant update available at the present time, since
    its platform was created in 2009\. It introduced a completely reworked user interface
    and thousands of new APIs, including the all new camera APIs. Android 5 also incorporates
    exciting, new, power-saving technologies, and improved app performance.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will install and configure all the development tools required
    for building an Android app. These will include the Android Studio and Android
    SDK, various platform specific tools and system images, and an Android Virtual
    Device. Once our environment is properly set up, we will create a simple "Hello
    World" project and test it on a mobile device, as well as on an emulator. This
    exercise will give us a good opportunity to become acquainted with some of the
    most widely used elements of our development environment, as well as providing
    a quick, but useful, demonstration of how an Android Studio project is put together.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand what is new and different about Android 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and install the Android Studio and SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the latest SDK tools, platform-tools, and build-tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the Lollipop platform and system images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a basic "Hello World" project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the app on a handset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure an Android Virtual Device (AVD)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the app on the AVD emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we start, it's worth while taking a closer look at Android 5 itself,
    and see what sets it apart from other Android versions, and what it has to offer
    to us, as developers.
  prefs: []
  type: TYPE_NORMAL
- en: What is Android 5?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android 5, or Lollipop, represents the most revolutionary upgrade to the Android
    operating system to date. It introduces many exciting, new features for users,
    plus a host of new APIs and access to cutting edge technologies for developers.
    The most significant, and obvious, changes have to be the new Material Design
    UI and the ability to deploy Lollipop on wearables, TVs, and in our cars.
  prefs: []
  type: TYPE_NORMAL
- en: It's not a bad idea to have a quick look at how Android 5 appears to the user,
    before exploring what it means for us as developers.
  prefs: []
  type: TYPE_NORMAL
- en: Lollipop from a user's perspective
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing any Android 5 user will will be aware of, other than the expanded
    and improved notifications bar and a more functional lock screen, is the new visual
    language-Material Design. They will notice how almost everything they touch or
    interact with responds with an animation. These simple onscreen behaviors are
    intended to provide the user with a clear, and intuitive, visual feedback. Another
    interesting change is the new Overview feature which replaces Recent apps, allowing
    individual documents and entire apps to be available.
  prefs: []
  type: TYPE_NORMAL
- en: '![Lollipop from a user''s perspective](img/B04321_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Perhaps the most interesting departure, from the user's point of view, that
    Lollipop makes from previous versions is how they will now encounter it on their
    television sets, in their cars, and on wearable devices, such as watches and glasses.
    Those with these wearables will undoubtedly want these apps that take advantage
    of the two new sensors that Lollipop introduces, such as the heart rate and tilt
    sensors.
  prefs: []
  type: TYPE_NORMAL
- en: Lollipop from a developer's perspective
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From a developer's point of view, Android 5 provides far more exciting prospects
    than a prettier UI, improved battery life, and a better lock screen. For us, with
    over 5,000 new APIs, a whole new design language and dozens of new features and
    technologies, Android 5 gives us the most powerful set of tools yet. Not only
    is Android now more powerful, it is also easier to program than before. With a
    truly helpful IDE, and APIs that are designed for ease of use, developing an app
    has never been simpler or less daunting. If you want to turn your ideas into a
    reality, then Android 5 is the way. It is truer now than it has ever been that
    we are limited only by the power of our imagination.
  prefs: []
  type: TYPE_NORMAL
- en: Material Design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Material Design UI paradigm is far more than an attractive and easier to
    understand interface. It is a serious design language, with some important points
    to make about how we interact with our devices. Inspired by ideas of how materials
    of the future might behave, such material can be thought of as a dynamic and responsive
    piece of paper, which can move, change shape and size, split apart, join together,
    and exist in three dimensions. It is this added dimension, with real-time, programmable
    shadows that gives Material Design its sense of depth. The way content is displayed
    on material is also dynamic and Google suggests that we think of it as "smart
    ink". There a few design rules that need to be considered when building apps using
    Material Design, and we will cover these when we return to the subject in later
    chapters. From a practical point of view, the SDK provides us with two versions
    of material theme (light and dark) and two widgets: `CardView` for simple content
    and `RecyclerView` for lists. We can also define and customize the shadows, animations,
    and drawables our apps use.'
  prefs: []
  type: TYPE_NORMAL
- en: Other devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most exciting opportunities that Lollipop offers us as developers
    is the ability to create apps for devices other than phones and tablets. Android
    5 makes it possible to write apps for screens as small as wrist watches or as
    large as home cinemas, including anything in between.
  prefs: []
  type: TYPE_NORMAL
- en: TV
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Android 5 makes coding for TV sets very similar to coding for handsets. The
    major differences are size, viewing distances and the way that the TV apps are
    generally navigated with a remote control and D-pad. The Android 5 SDK comes equipped
    with purpose-built themes and layouts, which make it simple for us to deploy an
    app built for a tablet, onto a TV, or vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Wear
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When it comes to designing apps for wearables, issues such as power consumption
    and restricted screen size become some of the more important deciding factors.
    For this reason, Android 5 imposes a strict time-out policy on wearable apps.
    As all Android wearable apps need to be installed on a handset first, we have
    the opportunity to present the content on either the wearable or the parent device.
    Despite these restrictions, and the fact that not all features are available on
    wearables (such as web browsing), the addition of an API for the new heart-rate
    sensor, provides the developers interested in creating health and fitness based
    apps with new and exciting opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: Auto
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Android in our cars offers another new field introduced by Lollipop. The emphasis
    here rests entirely on safety: only messaging and audio features are allowed to
    run on in-car apps. This means that when developing apps for cars, we need to
    take into account which features will be disabled for safety reasons.'
  prefs: []
  type: TYPE_NORMAL
- en: This is all the theory and background we will need for now. It's time to get
    to work and set up our work space.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can even begin to work with the Android SDK, we need to make sure
    that we have the latest Java Development Kit (JDK) installed. It is more than
    likely that you have this already, but if you are unsure, type `java -version`
    at the command line, and hopefully you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and configuring the development environment](img/B04321_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that Android 5 requires Java 1.7 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you only have the Java Runtime Environment (JRE), you can download the JDK
    from [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).
    You will also need to take a note of where the JDK is installed on your computer.
    It should be something like `C:\Program Files\Java\jdk1.8.0_25`. Let us get started
    with the installation, by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the Android Studio and SDK. They can be found at [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)
    and should come bundled together as a single executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the executable and follow the wizard, making sure to install all the components,
    as seen in the following screenshot:![Installing the SDK](img/B04321_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before running the Android Studio we need to set up an environment variable
    to point to our JDK. From your control panel's **System Properties** window, select
    the **Advanced** tab and then the **Environment Variables...** button. Add a new
    user variable called `JAVA_HOME` and paste it in the path to your JDK, as noted
    earlier:![Installing the SDK](img/B04321_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Managing the SDK tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are still one or two tools we need before we can start to build and test
    any apps. The SDK separates tools, platforms, and device system images, allowing
    us to download only the packages we need or those that are specific to our project.
  prefs: []
  type: TYPE_NORMAL
- en: The Android SDK Manager is the program we use to do this. It can be run from
    the Android Studio, or as a stand-alone application from the SDK's root directory,
    by executing the `SDK Manager.exe` file. For now, we will run it from within the
    Android Studio environment. This can be done from within an open project, by clicking
    on the SDK Manager icon in the toolbar, or from the quick start screen from the
    Configure page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing the SDK tools](img/B04321_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the SDK Manager; we can see that there are three sections: a `Tools` folder,
    a list of API platform folders, dating right back to Android 1.5 and an `Extras`
    folder.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Tools` folder. At the top, you will see **Android SDK Tools** and
    **Android SDK Platform-tools**. These will represent the latest tools available
    and both of them have to be installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Beneath this, you will see a list of build tools, and as this book is focused
    on Lollipop, we need to only install the latest version.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Managing the SDK tools](img/B04321_01_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Moving on to the list of platforms, again, all we need to do is select those
    that apply to us as Lollipop developers, and that means anything with an API level
    of 21 or higher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At some point, you will want to test your apps on earlier platforms to reach
    the widest possible market, but as this book is focused on Android 5, it is only
    necessary to install the most recent platform. Select all items in this folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are several handy tools in the **Extras** folder. In particular, the **Android
    Support Library** and **Google Play services**, which offer a wide range of extra
    APIs. If you are planning on testing your apps on a real device connected to a
    PC, then you will need the **Google USB Driver** and if you have a recent Intel
    processor, you will want the hardware accelerator for running the emulators. Select
    the packages shown below, and install them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Managing the SDK tools](img/B04321_01_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We are now ready to create our first app, but first, a note on hardware acceleration.
    The Emulator Accelerator needs to be executed manually and can be found in the
    SDK folder under `extras\intel\Hardware_Accelerated_Execution_Manager\intelhaxm-android.exe`.
    Depending on your system, you may also have to enable virtualization in your BIOS.
  prefs: []
  type: TYPE_NORMAL
- en: Android software is regularly updated, and it is well worth while checking back
    with the SDK Manager from time to time for updates, especially before starting
    a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, as Android is under constant development, installation is not
    always as straightforward as it appears here. Google do their best to address
    issues as they arrive, and in case of any problems, the web page [http://tools.android.com/knownissues](http://tools.android.com/knownissues)
    can be very useful.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a "Hello World" app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, it is time to build our first app. It will do next to nothing but
    will give us a good look at how apps are put together by the Android Studio. We
    will see which files and code are automatically generated for us and get to grips
    with the directory structure of our project, by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the Android Studio and from the start screen, select **Start a new Android
    Studio project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the wizard, and accept the suggested values, making sure that you select
    the **Phone and Tablet** form factor and a minimum SDK level, no lower than API
    21.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Blank Activity** template and accept the field values suggested
    by the wizard on the final screen and click on **Finish**. After a brief pause,
    the IDE will open up.![Creating a "Hello World" app](img/B04321_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At first sight the IDE can appear daunting, but if we approach it one element
    at a time it is actually very straightforward. Take a look at the panel on the
    left – this displays the directory structure of our project. There are two main
    branches, **app** and **Gradle Scripts**. We will return to Gradle, when it comes
    to packaging our apps, but for now, expand the **app** branch.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a "Hello World" app](img/B04321_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three main sections here, `manifests`, `java`, and `res` (which is
    short for resources). Along with this directory structure, the Android Studio
    also generates several code files for us automatically, so when we first create
    a project below including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `manifest` file declares many of our app's broader properties, such as the
    permissions required by the user. It can be opened, viewed, and edited by double-clicking
    on the `AndroidManifest.xml` node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android projects keep the layout data and procedural code separate. The layout
    information for the single activity we created here can be found in the XML file
    that was named `activity_main.xml` for us. There are two ways to view this file:
    the design view, which displays a list of widgets and an image of a phone and
    a text view, which can be accessed via the **Text** tab at the bottom of the pane.
    Any drawables, strings, and menu definitions we might need are also filed in the
    `res` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we created the project, the IDE also created a Java class called `MainActivity`.
    To start with, all it contains are empty callback routines that are called when
    the Activity is first created, when the menu is created and when a menu item is
    selected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both Android Studio and the emulator generate a lot of temporary files during
    operation. This can lead to performance issues with your anti-virus software.
    If you are comfortable doing so, setting exclusions for Android directories can
    help to speed up the software considerably.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the app on a physical device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is now time to see how our app looks on an actual device and also on an emulator.
    To run the project on an actual phone or tablet, you will first have had to download
    the Google USB driver from the SDK Manager and enabled USB debugging in your handset's
    settings. Connect your handset and click on the **Run** button on the IDE's main
    toolbar, or select **Run** from the menu. After confirming the device you are
    using, the app will be installed and launched.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a virtual device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is unlikely that we will always have access to all the hardware we want
    our apps to run on, but with Android Virtual Devices, we can create almost any
    form factor we can imagine and test out our apps on those. Let''s set up a virtual
    device by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AVD Manager from the main toolbar:![Setting up a virtual device](img/B04321_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We could simply select one of the preconfigured devices, but to get a better
    understanding of how AVDs work, hit the **Create Virtual Device...** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Phone** from the **Category** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select one of the phones presented. I chose **Nexus 6**, but this is not important.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Clone Device...** button, so as to maintain the original device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following page allows us to edit the device's hardware profile. Here, we
    get to choose features such as screen size, memory capacity, and sensors. Leave
    everything as it is but do have a quick look at the options available, for later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hit **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be returned to the hardware selection screen. As before, select **Phone**
    from the **Category** list, and you will now find the AVD we just cloned. Select
    it and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a system image with an API level of 21 or higher and a target of 5 or
    greater and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have the Intel hardware acceleration enabled, then choose **x86** or
    **x86_64** as the ABI. Otherwise, you will have to make do with ARM. For the purposes
    of this demonstration, I will assume that you are using an ARM ABI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following page is mainly used just to verify our settings, but it also gives
    us the opportunity to adjust the scale and improve the performance of the emulator.
    Whether or not you adjust the scale will depend on the screen you are working
    on and the resolution of the emulated device. Similarly, the choice between accelerating
    the emulator's performance by harnessing your computer's own GPU or by speeding
    up start times with a snapshot will depend on your hardware and your project's
    purpose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hit **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running an app on a virtual device is no different from running one on an actual
    phone, the only difference being which device you choose.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a virtual device](img/B04321_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As one would imagine, the touch screen of the AVD can be operated with the mouse.
    The device can be rotated by pressing Left *Ctrl* + *F12*. Also, the power button
    can be pressed with *F7* and the volume can be turned up and down with *Ctrl*
    + *F5* and *Ctrl* + *F6*.
  prefs: []
  type: TYPE_NORMAL
- en: This pretty much concludes our whistle-stop tour of Lollipop, Android Studio,
    and the SDK. Before we get started with some actual programming, there is one
    last tool that it is worth taking a look at, the **Android Device Monitor**.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run the app again, on either a device or an emulator, but first open the Android
    Device Monitor. It can be found on the main toolbar, to the right of the SDK Manager.
    The device monitor provides some very useful views on what is actually going on
    inside our devices and some fun ways of manipulating them. A paired down version
    of the Device Monitor is available directly from the IDE, by selecting Android
    from the icon in the lower left corner of the editor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring devices](img/B04321_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Along with a stream of useful debug information, the device monitor gives us
    direct access to its data, via a file explorer and tools that allow us to send
    it calls, SMS messages and set it to fake locations.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The camera icon in the **Devices** toolbar can be used to take full-sized screenshots,
    even when the onscreen device is scaled.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered quite a lot for an introductory chapter, but we have encountered
    most of the essential tools that we will need later. By now, you will have a fully
    functional and up-to-date IDE, and know how to create and test apps on an AVD.
    You have seen some of the more important files and resources that are generated
    when an Android project is first created and should now understand where these
    files can be found within the project.
  prefs: []
  type: TYPE_NORMAL
- en: Having had a look around the most prominent features of our development environment,
    we are now in a position to dig a little deeper, and see how we can build sophisticated
    and dynamic layouts, looking at how a Java code can bring these designs to life.
  prefs: []
  type: TYPE_NORMAL
