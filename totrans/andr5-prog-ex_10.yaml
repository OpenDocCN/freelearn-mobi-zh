- en: Chapter 10. Publishing and Marketing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having covered all the topics in this book, and if you have not already done
    so, you are now in a position to create, develop, and market an app of your own
    design. There is of course much more to learn about Android 5, and Android in
    general, but exploring the SDK further is quite simple, now we understand how
    some of the most frequently used structures and objects are applied. Once we understand
    how a listener interface is implemented, then it is simply a matter of looking
    up in the documentation when we want to imply a new one.
  prefs: []
  type: TYPE_NORMAL
- en: The entire purpose of developing an app for Android is to distribute it. Although
    there are many ways to make our work available to others, the obvious choice is
    via the Android Play Store. This final chapter is a step by step guide on how
    to do that. On the way, we will see how to make our apps compatible with earlier
    versions, keeping much of the Android 5 API's functionality as well as many of
    the Material Design features programmed into our Lollipop UIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Making apps backward-compatible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See how to create alternative layouts for older systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply a Material Theme to older versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace the Action Bar with a Material Design Toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepare an app for publication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a digital certificate and a private key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate a signed APK file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepare promotional media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete a Store Listing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to distribute apps via e-mail and websites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: License an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide links to a product or a publisher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add official branding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a template project for in-app billing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include an AdMob banner advertisement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making apps backward-compatible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we have focused entirely on developing for Android 5,
    and although the number of devices running this platform is bound to increase
    dramatically, they still only make up a small proportion of all active Android
    devices. In fact, **Jelly** **Bean** and **KitKat** (APIs 16 through 19) still
    make up the vast majority of platform versions accessing the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: '![Making apps backward-compatible](img/B04321_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An up-to-date report of the relative distribution of platforms over all active
    devices can be found at [http://developer.android.com/about/dashboards/index.html](http://developer.android.com/about/dashboards/index.html).
    This page also contains similar information about currently used screen sizes
    and densities, and can greatly facilitate how we target users.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, we want our apps to reach as many people as possible and many of
    the apps we develop take very little adjustment to make them available to users
    running earlier versions. Fortunately, Android provides support libraries, such
    as **v7 AppCompat r21** (or higher) to facilitate this.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the v7 support libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Realistically, we should consider carefully which platforms we want our app
    to be available for, long before we start developing; for demonstration purposes,
    however, in this next short exercise we will make an app that we developed earlier
    in the book available to devices running API 16 and greater.
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Ancient Britain** app that we developed earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `manifest` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the root node, include this tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `build.gradle` file and add these dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the default configuration, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Prepare an AVD or handset targeting API level 16:![Adding the v7 support libraries](img/B04321_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app on the device. It will appear to work normally until you try to
    swipe the images on the DetailActivity screen, when it will crash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `DetailActivity.java` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `onShowPress()` and the `onFling()` methods, there is a call to `detailImage.setElevation()`.
    Apply conditional clauses to each, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the app again to check that this fix has worked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declaring `uses-sdk` in the manifest is essential as this is how the Play Store
    decides which devices it is visible to. The **v7 AppCompat r21+** library is what
    makes backward-compatibility possible. Among other things, it provides very passable,
    Material Design widgets and other UI components. There are also libraries for
    the **RecyclerView** and **CardView** and, although the shadows are not dynamic,
    this is a small price to pay, considering the vast number of users our app can
    now reach.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the minimum SDK level is only the first thing we need to do to make
    our apps available to older versions As we saw, APIs with a level of 21 or higher
    will cause the app to crash when called, as with the `setElevation()` call in
    this task. By being able to query a device's API at runtime, we have a way to
    work around this limitation and often with very little loss to the quality of
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Another convenient way to counter this problem, is to create separate layouts
    for different platforms. You can create a `res/layout/v-21/` directory for your
    Material Design layouts and older alternatives in `res/layout/`.
  prefs: []
  type: TYPE_NORMAL
- en: To really bring the **Material** **Design** feel to older platforms, there is
    a lot more we can do to with these libraries, such as making our customized themes
    available, and this is what we will do next.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Material Design to older platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually when developing an app for pre-API 21 platforms, we set the minimum
    SDK at the lowest target level when we create the app rather than reverse-engineering
    the process as we just did. Here, we will see how we can add many **Material Design**
    features. Developing this way round is also a good way to judge just how far backwards
    we want our app to be, and how much functionality we are prepared to lose.
  prefs: []
  type: TYPE_NORMAL
- en: 'This next exercise demonstrates how to build an app for API 16 and apply Material
    Design to the UI. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new project in the Android Studio called **Material Jelly Bean**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do not use `com.example` in the package name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Phone and Tablet** as the form factor and **API 16** as the minimum
    SDK. Note the number of devices that support your app.![Applying Material Design
    to older platforms](img/B04321_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Blank Activity** and leave everything else as is, or choose your own
    values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following to the root node of the manifest file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `res/values/styles.xml` file and fill it out like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `activity_main.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the root layout from a relative layout to a linear one and set its orientation
    by adding this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert `TextView` to this `EditText`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the app at this point and our Material Theme palette will have been applied:![Applying
    Material Design to older platforms](img/B04321_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Disable the Action Bar by setting the theme in the `styles.xml` file to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Above `EditText`, place this toolbar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may wish to adjust the padding of the layout in the `dimens.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your main activity file and add the following code to the `onCreate()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate an import error. Use the quick fix to select the v7 Toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app on a API 16 device or emulator to see the Material Design style
    Toolbar.![Applying Material Design to older platforms](img/B04321_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **AppCompat** family of themes provides nearly all of the Material Design
    features we have become used to. The colors we have chosen to represent our app
    still appear throughout the app in familiar places and tinting various widgets,
    giving our app a consistent and recognizable feel. However, certain elements are
    still lost, and if you run the app on an Android 5 device, you will get the following
    output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying Material Design to older platforms](img/B04321_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are two important things to notice about the way we implemented a **Material
    Toolbar**. First, notice that our `MainActivity` class extends **ActionBarActivity**
    and this has to be the case for any app we build using AppCompat, if it is to
    have a Toolbar. Second, note that the way we inflated it, unlike most views, with
    `setSupportActionBar()`. These are the only two real differences between the ways
    we are accustomed to managing Toolbars; other than this, everything can be done
    with classes and methods that we are familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: There are one or two other things that can be done to bring Material Design
    to earlier versions but, for now, this is enough to set us on our way to bringing
    our apps to as many people as possible. Next, we move on to the serious subject
    of publishing our apps to the world.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It goes without saying that you will have exhaustively tested your app on a
    wide variety of handsets and emulators, probably prepared your promotional material,
    and checked out **Google Play Policies and Agreements**. There are many things
    to consider before publication, such as **content rating** and **country distribution**.
    From a programming point of view there are just three things that we need to check
    before we proceed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove all logging from the project, such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure you have an application `label` and `icon` declared in your manifest,
    for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure you have declared all the necessary permissions in the manifest, for
    example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are now just three steps from seeing our app on the Google Play Store. All
    we need to do is generate a **Signed Release APK**, register as a **Google Play
    Developer**, and finally upload our app to the Store or publish it on our own
    site. There are also one or two other ways of publishing an app and we will see
    how they are done at the end of the section. First, though, we will begin by generating
    an APK that is ready for uploading onto the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a signed APK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All published Android apps require a digitally signed certificate. This is used
    to prove the authenticity of an app. Unlike many other digital certificates, there
    is no authority and you hold the signed key, which clearly has to be securely
    protected. To do this, we need to generate a private key and then use it to generate
    a signed APK. This can all be done in the Android Studio with the Generate Signed
    APK Wizard. These steps will take you through it.
  prefs: []
  type: TYPE_NORMAL
- en: Open the app you want to publish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Generate Signed APK Wizard from the **Build | Generate Signed APK...**
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create new...** on the first screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, provide a path and name for your key store along with a
    strong password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for the Alias.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a Validity of greater than 27 years, like so:![Generating a signed APK](img/B04321_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in at least one of the Certificate fields. Click on **OK** and you will
    be taken back to the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **release** as the Build Variant and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now have a signed APK ready for publication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The key store (`.jks` file) can be used to store any number of keys (aliases).
    Normally you would have a different key for each app you publish, and you must
    use the same key when producing updates of an app. Google require certificates
    to be valid until at least 22nd October, 2033 and any number that surpasses this
    date will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'IMPORTANT: Keep at least one secure backup of your keys. If you lose them,
    you will not be able to develop future versions of those apps.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Most Android apps are packaged this way with one exception: Google Wear. If
    you are publishing a Wear app, you will first need to visit [http://developer.android.com/training/wearables/apps/packaging.html](http://developer.android.com/training/wearables/apps/packaging.html).
    With our digital certificate signed and in place, we are now only two steps from
    being published. If you have not already done so, it is time to register as a
    Google Play Developer.'
  prefs: []
  type: TYPE_NORMAL
- en: Registering as a developer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with Signing an APK, registering as a developer is similarly straightforward.
    Note that Google charges a one-off fee of USD 25 and 30% of any revenue your app
    may generate. The following directions assume that you already have a Google account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Review **Supported Locations** at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://support.google.com/googleplay/android-developer/table/3541286?hl=en&rd=1](https://support.google.com/googleplay/android-developer/table/3541286?hl=en&rd=1)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the Developer Play Console at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://play.google.com/apps/publish/](https://play.google.com/apps/publish/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sign in with your Google account and enter the following information:![Registering
    as a developer](img/B04321_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read and accept the **Google Play Developer Distribution Agreement**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pay the USD 25 with Google Checkout, creating an account if necessary, and that's
    it; you are now a registered Google Developer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you intend to make your apps available worldwide, then it is always worth
    checking the Supported Locations page, as it changes regularly. The only thing
    left to do is upload our app, which we will do now.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing an app on the Google Play Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Uploading and publishing our apps to the Play Store is done through the **Developer
    Console**. As you will see, there is a lot of information and promotional material
    that we could provide about our app during this process. Provided, you have followed
    the previous steps in this chapter and have a release-ready signed `.apk` file,
    complete the following instructions to publish it. Alternatively, you may just
    want to have a look at what is involved at this point and what form the promotional
    material will take. In this case, ensure you have the following four images and
    a signed APK, and select **Save Draft** at the end rather than **Publish app**.
  prefs: []
  type: TYPE_NORMAL
- en: At least two screenshots of your app. These must not have any side that is shorter
    than 320 px or longer than 3840 px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want your app to be visible on the Play Store to users searching for
    apps designed for tablets, then you should prepare at least one 7-inch and one
    10 inch screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Hi-res icon** image of 512 x 512 px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A **Feature Graphic** of 1024 x 500 px, for example; with these images prepared
    and a signed `.apk` file, we have all we need to start. Decide how much, if anything,
    you wish to charge for the app and then follow these instructions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open your **Developer Console**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supply a **Title** and click on the **Upload APK** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Upload your first APK to Production**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate your signed `app-release.apk` file. It will be in `AndroidStudioProjects\YourApp\app`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop this into the space suggested.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When this is completed, you will be taken to the application page.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Work your way through the top four sections:![Publishing an app on the Google
    Play Store](img/B04321_10_09.jpg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete all required fields until the **Publish app** button becomes clickable.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need help, the **Why can't I publish?** link above the button will list
    uncompleted compulsory fields.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When all the required fields are completed, click on the **Publish app** (or
    **Save draft**) button at the top of the page.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You are now a published Android Developer.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We now know how to publish our apps on the Play Store. There are, of course,
    many other app markets, and they all have their own uploading procedures. Google
    Play however provides the widest possible audience and is the obvious choice for
    publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, there are two other methods of distribution that we will
    look at: publishing on a website and distributing via e-mail.'
  prefs: []
  type: TYPE_NORMAL
- en: Distributing by e-mail and websites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first of these two methods is as simple to do as it sounds. If you attach
    the APK to an e-mail and it's opened on an Android device, the user will be offered
    the opportunity to install the app when the attachment is opened. On more recent
    devices, they will be able to tap an install button directly from the e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For both these methods, your users will have to allow the installation of **unknown
    sources** in the security settings of their devices.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing your app from your website is almost as simple as e-mailing it.
    All you need to do is host the APK file on your site somewhere and provide a download
    link along the lines of `<a href="download_button.jpg" download="your_apk">`.
    When browsing your site from an Android device, a tap on your link will install
    your app on their device.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Distribution by e-mail provides no protection against piracy and should only
    be used with this in mind. The other methods are as secure as we could hope, but
    if you would like to take extra measures then Google offers a **Licensing Service**
    that can be found at [developer.android.com/google/play/licensing](http://developer.android.com/google/play/licensing).
  prefs: []
  type: TYPE_NORMAL
- en: Whether we have released a paid app or a free one, we want to be able to reach
    as many users as possible. Google provides several tools to help us with this,
    as well as ways to monetize our apps, as we shall see next.
  prefs: []
  type: TYPE_NORMAL
- en: Promoting and monetizing apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Very few apps become successful without first being well promoted. There are
    countless ways to do this and you will, no doubt, be well ahead of the curve on
    how to promote your products. To help you reach a wider audience, Google provides
    some handy tools to assist with promotion.
  prefs: []
  type: TYPE_NORMAL
- en: 'After looking at promotion tools, we will explore two ways to make money from
    our app: in-app payments and advertising.'
  prefs: []
  type: TYPE_NORMAL
- en: Promoting an app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two very simple methods, provided by Google, to help steer people
    towards our products on the Play Store; links from both websites and our apps
    and the **Google Play Badge,** which provides official branding to our links.
  prefs: []
  type: TYPE_NORMAL
- en: We can add links to both individual apps and our publisher page, where all our
    apps can be browsed. We can include these links in our apps as well as our websites.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include a link to a specific app''s page in the Play Store, use the full
    package name, as found in the Manifest, in the following format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To Include this within an Android app, use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want a link to your publisher page and a list of all your products,
    use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the same changes as before when linking from an app:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To link to a specific search result, use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use an official Google Badge as your link, replace one of the above elements
    with the highlighted HTML here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The **Badge** comes in two sizes, `60.png` and `45.png`, and two styles, `"Android
    app on Google Play"` and `"Get it on Google Play"`. Simply change the relevant
    code to select the Badge that best suits your purpose.
  prefs: []
  type: TYPE_NORMAL
- en: '![Promoting an app](img/B04321_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With our app published and with well-placed links to our Play Store page, it
    is now time to consider how we can profit from the inevitable downloads, and so
    we come to how to monetize our Android app.
  prefs: []
  type: TYPE_NORMAL
- en: Monetizing an app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many ways to make money from an app, but two of the most popular
    and effective are: **in-app billing** (**IAB**) and **advertising**. In-app billing
    can become quite involved and perhaps deserves an entire chapter to itself. Here,
    we will see how to build an effective template that you can use as a foundation
    for an in-app product you might develop. It will include all the libraries and
    packages needed, along with some very useful helper classes.'
  prefs: []
  type: TYPE_NORMAL
- en: Including **Google AdMob** advertisements in our apps is, in contrast, a very
    familiar process to us by now. An ad is in effect just another View, and can be
    identified and referenced just like any other Android widget. The final exercise
    of this chapter, and indeed this book, will be constructing a simple working AdMob
    demo. First, though, let us take a look at in-app billing.
  prefs: []
  type: TYPE_NORMAL
- en: In-app billing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a large number of products that users can purchase from within an
    app, from upgrades and unlockables to in-game objects and currencies. Whatever
    the user is buying, the Google checkout process ensures they will pay in the same
    way as they pay for other Play Store products. From the developer''s point of
    view, each purchase will boil down to responding to the click of a button. We
    will need to install the **Google Play Billing Library**, and add an **AIDL**
    file and some helper classes to our project. Here is how:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android project or open one you want to add in-app billing to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the SDK Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Extras**, make sure you have the **Google Play Billing Library** installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the manifest and apply the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the Project pane of the Studio, right click on **app** and select **New**
    | **Folder** | **AIDL Folder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From this folder as **aidl**, create a **New** | **Package**, and fill out the
    resultant dialog like so:![In-app billing](img/B04321_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate and copy the `IinAppBillingService.aidl` file in the `sdk\extras\google\play_billing`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the file into the `com.android.vending.billing` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **New | Package** in the Java folder, selecting `...\app\src\main\java`
    from the dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the package `com.`**your.package.name**`.util` and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `play_billing` directory, locate and open the `TrivialDrive\src\com\example\android\trivialdrivesample\util`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the nine Java files into the `util` package you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now have a working template for any app you wish to include on in-app purchasing.
    Alternatively, you can complete the above steps on a project where you have already
    developed your in-app products. Either way, you will no doubt be taking advantage
    of the `IabHelper` class, which vastly simplifies the coding, providing listeners
    for every step of the purchasing process. Documentation on IAB can be found at
    [http://developer.android.com/google/play/billing/billing_reference.html](http://developer.android.com/google/play/billing/billing_reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you can start to implement in-app purchases, you will need to secure
    a **License Key** for your app. This can be found in the app's details in your
    developer console.
  prefs: []
  type: TYPE_NORMAL
- en: Paid apps and in-app products are just two ways to make money from an app, and
    many people choose another, and often lucrative, route for monetizing their work
    through advertising. **Google AdMob** allows for a great deal of flexibility and
    a familiar programming interface, as we shall see next.
  prefs: []
  type: TYPE_NORMAL
- en: Including an advertisement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways that we can earn money from advertising, but **AdMob** provides
    one of the easiest. Not only does the service allow you to select what types of
    product you wish to advertise but it also provides great analytical tools and
    seamless payment into your Checkout account.
  prefs: []
  type: TYPE_NORMAL
- en: On top of this, an **AdView** can be treated programmatically in a way that
    is almost identical to the methods we are used to and familiar with, as we shall
    see in this final exercise where we will develop a Hello World app with a demo
    banner AdMob ad.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start this exercise, you will need to have signed up for an AdMob
    account at [http://www.google.com/admob/](http://www.google.com/admob/).
  prefs: []
  type: TYPE_NORMAL
- en: Open a project you want to test ads on or start a new Android project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you have the Google Repository installed with the SDK Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `build.gradle` file, add this dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rebuild the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the manifest, set these two permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `application` node, add this `meta-data` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include this second Activity to the manifest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following string to the `res/values/strings.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `main_activity.xml` layout file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this second namespace to the root layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this `AdView` under the `TextView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onCreate()` method of the MainActivity, insert these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now test the app on a device.![Including an advertisement](img/B04321_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More or less everything we did here resembles the way that we would program
    any other element, with one or two exceptions. The use of the `ACCESS_NETWORK_STATE`
    permission is not strictly necessary; it is used here to check for a connection
    prior to requesting an ad.
  prefs: []
  type: TYPE_NORMAL
- en: Any Activity that displays an ad will require a separate ID and be declared
    in the manifest. The ID supplied here is for testing purposes only and it is forbidden
    to use live IDs for testing purposes. There are only six classes in the `android.gms.ads`
    package and documentation for all of them can be found at [https://developers.google.com/android/reference/com/google/android/gms/ads/package-summary](https://developers.google.com/android/reference/com/google/android/gms/ads/package-summary).
  prefs: []
  type: TYPE_NORMAL
- en: AdMob ads come in two flavors, the banner that we saw here and the interstitial,
    or full screen. We only dealt with banner ads here but interstitial ads are handled
    in a very similar manner. With a knowledge of how to implement paid apps, in-app
    billing and AdMob, we are now armed to reap the rewards of our hard work and make
    the very most of our apps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have covered the final aspect of the app development process:
    packaging and deployment. We began by making our apps backward-compatible, including
    many of the features we had originally designed for Android 5; by doing, so we
    were able to reach a far wider audience. We continued by preparing and then publishing
    our app in the Google Play Store. Once published, we saw how easy it is to promote
    and then monetize an Android app.'
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our journey into the world of Android development. We have gone
    from installation to publication and hopefully covered most of the components
    required for the apps that you are planning. If you are new to developing or IDEs
    such as the Android Studio and have worked your way through this book, then what
    was previously a daunting set of tools will now seem like a familiar and productive
    place to work.
  prefs: []
  type: TYPE_NORMAL
- en: The Android platform will, no doubt, continue to flourish and develop in new
    and unexpected ways. Android 5 is the perfect entry point; with Material Design
    at its core and the most powerful set of mobile APIs available, things can only
    get better and brighter for Android developers.
  prefs: []
  type: TYPE_NORMAL
