["```\npackage com.example.messenger.ui.main\nimport com.example.messenger.ui.base.BaseView\n\ninterface MainView : BaseView {\n  fun showConversationsLoadError()\n  fun showContactsLoadError()\n  fun showConversationsScreen()\n  fun showContactsScreen()\n  fun getContactsFragment(): MainActivity.ContactsFragment\n  fun getConversationsFragment(): MainActivity.ConversationsFragment\n  fun showNoConversations()\n  fun navigateToLogin()\n  fun navigateToSettings()\n}\n```", "```\npackage com.example.messenger.ui.main\n\nimport com.example.messenger.data.vo.ConversationListVO\nimport com.example.messenger.data.vo.UserListVO\n\ninterface MainInteractor {\n\n  interface OnConversationsLoadFinishedListener {\n    fun onConversationsLoadSuccess(\n    conversationsListVo: ConversationListVO)\n\n      fun onConversationsLoadError()\n  }\n\n  interface OnContactsLoadFinishedListener {\n    fun onContactsLoadSuccess(userListVO: UserListVO)\n    fun onContactsLoadError()\n  }\n\n  interface OnLogoutFinishedListener {\n    fun onLogoutSuccess()\n  }\n\n  fun loadContacts(\n  listener: MainInteractor.OnContactsLoadFinishedListener)\n\n  fun loadConversations(\n  listener: MainInteractor.OnConversationsLoadFinishedListener)\n\n  fun logout(listener: MainInteractor.OnLogoutFinishedListener)\n}\n```", "```\npackage com.example.messenger.ui.main\n\nimport android.content.Context\nimport android.util.Log\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.data.remote.repository.ConversationRepository\nimport com.example.messenger.data.remote.repository.ConversationRepositoryImpl\nimport com.example.messenger.data.remote.repository.UserRepository\nimport com.example.messenger.data.remote.repository.UserRepositoryImpl\nimport io.reactivex.android.schedulers.AndroidSchedulers\nimport io.reactivex.schedulers.Schedulers\n\nclass MainInteractorImpl(val context: Context) : MainInteractor {\n\n  private val userRepository: UserRepository = \n  UserRepositoryImpl(context)\n  private val conversationRepository: ConversationRepository = \n  ConversationRepositoryImpl(context)\n\n  override fun loadContacts(listener: \n  MainInteractor.OnContactsLoadFinishedListener) {\n\n```", "```\n    userRepository.all()\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe({ res ->      \n```", "```\n    listener.onContactsLoadSuccess(res) },\n    { error ->      \n```", "```\n      listener.onContactsLoadError()\n    error.printStackTrace()})\n  }\n}\n```", "```\n  override fun loadConversations(\n  listener: MainInteractor.OnConversationsLoadFinishedListener) {\n```", "```\n    conversationRepository.all()\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe({ res -> listener.onConversationsLoadSuccess(res) },\n    { error ->\n      listener.onConversationsLoadError()\n    error.printStackTrace()})\n  }\n\n  override fun logout(\n  listener: MainInteractor.OnLogoutFinishedListener) {    \n```", "```\n  val preferences: AppPreferences = AppPreferences.create(context)\n  preferences.clear()\n  listener.onLogoutSuccess()\n}\n```", "```\npackage com.example.messenger.ui.main\n\ninterface MainPresenter {\n  fun loadConversations()\n  fun loadContacts()\n  fun executeLogout()\n}\n```", "```\npackage com.iyanuadelekan.messenger.ui.main\n\nimport com.iyanuadelekan.messenger.data.vo.ConversationListVO\nimport com.iyanuadelekan.messenger.data.vo.UserListVO\n\nclass MainPresenterImpl(val view: MainView) : MainPresenter, \n        MainInteractor.OnConversationsLoadFinishedListener,\n        MainInteractor.OnContactsLoadFinishedListener,\n        MainInteractor.OnLogoutFinishedListener {\n\n  private val interactor: MainInteractor = MainInteractorImpl\n                                           (view.getContext())\n\n  override fun onConversationsLoadSuccess(conversationsListVo:\n                                          ConversationListVO) {\n```", "```\n    if (!conversationsListVo.conversations.isEmpty()) {\n      val conversationsFragment = view.getConversationsFragment()\n      val conversations = conversationsFragment.conversations\n      val adapter = conversationsFragment.conversationsAdapter\n\n      conversations.clear()\n      adapter.notifyDataSetChanged()  \n```", "```\n      conversationsListVo.conversations.forEach { contact ->\n        conversations.add(contact)\n        adapter.notifyItemInserted(conversations.size - 1)\n      }\n    } else {\n      view.showNoConversations()\n    }\n  }\n\n  override fun onConversationsLoadError() {\n    view.showConversationsLoadError()\n  }\n}\n```", "```\n  override fun onContactsLoadSuccess(userListVO: UserListVO) {\n    val contactsFragment = view.getContactsFragment()\n    val contacts = contactsFragment.contacts\n    val adapter = contactsFragment.contactsAdapter\n```", "```\ncontacts.clear()\nadapter.notifyDataSetChanged()\n```", "```\n    userListVO.users.forEach { contact ->\n      contacts.add(contact)\n      contactsFragment.contactsAdapter.notifyItemInserted(contacts.size-1)\n    }\n  }\n\n  override fun onContactsLoadError() {\n    view.showContactsLoadError()\n  }\n\n  override fun onLogoutSuccess() {\n    view.navigateToLogin()\n  }\n\n  override fun loadConversations() {\n    interactor.loadConversations(this)\n  }\n\n  override fun loadContacts() {\n    interactor.loadContacts(this)\n  }\n\n  override fun executeLogout() {\n    interactor.logout(this)\n  }\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\".ui.main.MainActivity\">\n  <LinearLayout\n    android:id=\"@+id/ll_container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"/>\n</android.support.design.widget.CoordinatorLayout>\n\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout \nxmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\nxmlns:app=\"http://schemas.android.com/apk/res-auto\">\n<android.support.v7.widget.RecyclerView\n  android:id=\"@+id/rv_conversations\"\n  android:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"/>\n<android.support.design.widget.FloatingActionButton\n  android:id=\"@+id/fab_contacts\"\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\"\n  android:layout_margin=\"@dimen/default_margin\"\n  android:src=\"img/ic_menu_edit\"\n  app:layout_anchor=\"@id/rv_conversations\"\n  app:layout_anchorGravity=\"bottom|right|end\"/>\n</android.support.design.widget.CoordinatorLayout>\n```", "```\nimplementation 'com.android.support:recyclerview-v7:26.1.0'\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n  android:id=\"@+id/ll_container\"\n  android:layout_height=\"wrap_content\">\n  <LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"@dimen/default_padding\">\n    <LinearLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:orientation=\"horizontal\">\n      <TextView\n        android:id=\"@+id/tv_username\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"bold\"/>\n      <LinearLayout\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\"\n        android:gravity=\"end\">\n        <TextView\n          android:id=\"@+id/tv_phone\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:layout_marginLeft=\"@dimen/default_margin\"\n\n          android:layout_marginStart=\"@dimen/default_margin\"/>\n      </LinearLayout>\n    </LinearLayout>\n    <TextView\n      android:id=\"@+id/tv_status\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"/>\n  </LinearLayout>\n  <View\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"1dp\"\n    android:background=\"#e8e8e8\"/>\n</LinearLayout>\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n  android:id=\"@+id/ll_container\"\n  android:layout_height=\"wrap_content\">\n  <LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"@dimen/default_padding\">\n    <TextView\n       android:id=\"@+id/tv_username\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:textStyle=\"bold\"\n       android:textSize=\"18sp\"/>\n    <TextView\n      android:id=\"@+id/tv_preview\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"/>\n  </LinearLayout>\n  <View\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"1dp\"\n    android:background=\"#e8e8e8\"/>\n</LinearLayout>\n```", "```\nimplementation 'com.android.support:design:26.1.0'\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\">\n  <android.support.v7.widget.RecyclerView\n    android:id=\"@+id/rv_contacts\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"/>\n</LinearLayout>\n```", "```\n//ConversationsFragment class extending the Fragment class\n  class ConversationsFragment : Fragment(), View.OnClickListener {\n\n    private lateinit var activity: MainActivity\n    private lateinit var rvConversations: RecyclerView\n    private lateinit var fabContacts: FloatingActionButton\n    var conversations: ArrayList<ConversationVO> = ArrayList()\n    lateinit var conversationsAdapter: ConversationsAdapter\n```", "```\n    override fun onCreateView(inflater: LayoutInflater, container: \n    ViewGroup, savedInstanceState: Bundle?): View? {\n      // fragment layout inflation\n      val baseLayout = \n      inflater.inflate(R.layout.fragment_conversations, \n      container, false)\n\n      // Layout view bindings\n      rvConversations = baseLayout.findViewById(R.id.rv_conversations)\n      fabContacts = baseLayout.findViewById(R.id.fab_contacts)\n\n      conversationsAdapter  = ConversationsAdapter(\n      getActivity(), conversations)\n\n      // Setting the adapter of conversations recycler view to \n      // created conversations adapter\n      rvConversations.adapter = conversationsAdapter      \n```", "```\n      rvConversations.layoutManager = \n      LinearLayoutManager(getActivity().baseContext)\n      fabContacts.setOnClickListener(this)\n      return baseLayout\n    }\n\n    override fun onClick(view: View) {\n      if (view.id == R.id.fab_contacts) {\n        this.activity.showContactsScreen()\n      }\n    }\n\n    fun setActivity(activity: MainActivity) {\n      this.activity = activity\n    }\n  }\n```", "```\n    class ConversationsAdapter(private val context: \n    Context, private val dataSet: List<ConversationVO>) :\n    RecyclerView.Adapter<ConversationsAdapter.ViewHolder>(), \n    ChatView.ChatAdapter {\n\n      val preferences: AppPreferences = \n      AppPreferences.create(context)\n\n      override fun onBindViewHolder(holder: ViewHolder, position: \n      Int) {\n        val item = dataSet[position] // get item at current position\n        val itemLayout = holder.itemLayout // bind view holder layout \n        // to local variable\n\n        itemLayout.findViewById<TextView>(R.id.tv_username).text = \n        item.secondPartyUsername\n        itemLayout.findViewById<TextView>(R.id.tv_preview).text = \n        item.messages[item.messages.size - 1].body \n```", "```\n        itemLayout.setOnClickListener {\n          val message = item.messages[0]\n          val recipientId: Long\n\n          recipientId = if (message.senderId == \n          preferences.userDetails.id) {\n            message.recipientId\n          } else {\n            message.senderId\n          }\n\n          navigateToChat(item.secondPartyUsername, \n          recipientId, item.conversationId)\n        }\n      }\n\n      override fun onCreateViewHolder(parent: ViewGroup, \n      viewType: Int): ViewHolder {       \n```", "```\n        val itemLayout = LayoutInflater.from(parent.context)\n        .inflate(R.layout.vh_conversations, null, false)\n        .findViewById<LinearLayout>(R.id.ll_container)\n\n        return ViewHolder(itemLayout)\n      }\n\n      override fun getItemCount(): Int {\n        return dataSet.size\n      }\n\n      override fun navigateToChat(recipientName: String, \n      recipientId: Long, conversationId: Long?) {\n        val intent = Intent(context, ChatActivity::class.java)\n        intent.putExtra(\"CONVERSATION_ID\", conversationId)\n        intent.putExtra(\"RECIPIENT_ID\", recipientId)\n        intent.putExtra(\"RECIPIENT_NAME\", recipientName)\n\n        context.startActivity(intent)\n      }\n\n      class ViewHolder(val itemLayout: LinearLayout) : \n      RecyclerView.ViewHolder(itemLayout)\n    }\n```", "```\n  class ContactsFragment : Fragment() {\n\n    private lateinit var activity: MainActivity\n    private lateinit var rvContacts: RecyclerView\n    var contacts: ArrayList<UserVO> = ArrayList()\n    lateinit var contactsAdapter: ContactsAdapter\n\n    override fun onCreateView(inflater: LayoutInflater, \n    container: ViewGroup, savedInstanceState: Bundle?): View? {\n      val baseLayout = inflater.inflate(R.layout.fragment_contacts, \n      container, false)\n      rvContacts = baseLayout.findViewById(R.id.rv_contacts)\n      contactsAdapter = ContactsAdapter(getActivity(), contacts)\n\n      rvContacts.adapter = contactsAdapter\n      rvContacts.layoutManager = \n      LinearLayoutManager(getActivity().baseContext)\n\n      return baseLayout\n    }\n\n    fun setActivity(activity: MainActivity) {\n      this.activity = activity\n    }\n  }\n```", "```\nclass ContactsAdapter(private val context: Context, \n                      private val dataSet: List<UserVO>) :\n                      RecyclerView.Adapter<ContactsAdapter.ViewHolder>(), \n                      ChatView.ChatAdapter {\n\n  override fun onCreateViewHolder(parent: ViewGroup, \n                                  viewType: Int): ViewHolder {\n    val itemLayout = LayoutInflater.from(parent.context)\n                      .inflate(R.layout.vh_contacts, parent, false)\n    val llContainer = itemLayout.findViewById<LinearLayout>\n                      (R.id.ll_container)\n\n    return ViewHolder(llContainer)\n  }\n\n  override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n    val item = dataSet[position]\n    val itemLayout = holder.itemLayout\n\n    itemLayout.findViewById<TextView>(R.id.tv_username).text = item.username\n    itemLayout.findViewById<TextView>(R.id.tv_phone).text = item.phoneNumber\n    itemLayout.findViewById<TextView>(R.id.tv_status).text = item.status\n\n    itemLayout.setOnClickListener {\n      navigateToChat(item.username, item.id)\n    }\n  }\n\n  override fun getItemCount(): Int {\n    return dataSet.size\n  }\n\n  override fun navigateToChat(recipientName: String, \n                              recipientId: Long, conversationId: Long?) {\n    val intent = Intent(context, ChatActivity::class.java)\n    intent.putExtra(\"RECIPIENT_ID\", recipientId)\n    intent.putExtra(\"RECIPIENT_NAME\", recipientName)\n\n    context.startActivity(intent)\n  }\n\n  class ViewHolder(val itemLayout: LinearLayout) : \n    RecyclerView.ViewHolder(itemLayout)\n  }\n```", "```\n  private lateinit var llContainer: LinearLayout\n  private lateinit var presenter: MainPresenter\n\n  // Creation of fragment instances\n  private val contactsFragment = ContactsFragment()\n  private val conversationsFragment = ConversationsFragment()\n```", "```\noverride fun onCreate(savedInstanceState: Bundle?) {\n  super.onCreate(savedInstanceState)\n  setContentView(R.layout.activity_main)\n  presenter = MainPresenterImpl(this)\n\n  conversationsFragment.setActivity(this)\n  contactsFragment.setActivity(this)\n\n  bindViews()\n  showConversationsScreen()\n}\n```", "```\n  override fun bindViews() {\n    llContainer = findViewById(R.id.ll_container)\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun showConversationsLoadError() {\n    Toast.makeText(this, \"Unable to load conversations. \n    Try again later.\",\n    Toast.LENGTH_LONG).show()\n  }\n\n  override fun showContactsLoadError() {\n    Toast.makeText(this, \"Unable to load contacts. Try again later.\",\n    Toast.LENGTH_LONG).show()\n  }\n```", "```\noverride fun showConversationsScreen() {   \n  val fragmentTransaction = fragmentManager.beginTransaction()\n  fragmentTransaction.replace(R.id.ll_container,  conversationsFragment)\n  fragmentTransaction.commit()\n\n  // Begin conversation loading process\n  presenter.loadConversations()\n\n  supportActionBar?.title = \"Messenger\"\n  supportActionBar?.setDisplayHomeAsUpEnabled(false)\n}\n\noverride fun showContactsScreen() {\n  val fragmentTransaction = fragmentManager.beginTransaction()\n  fragmentTransaction.replace(R.id.ll_container, contactsFragment)\n  fragmentTransaction.commit()\n  presenter.loadContacts()\n\n  supportActionBar?.title = \"Contacts\"\n  supportActionBar?.setDisplayHomeAsUpEnabled(true)\n}\n```", "```\n  override fun showNoConversations() {\n    Toast.makeText(this, \"You have no active conversations.\", \n    Toast.LENGTH_LONG).show()\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      android.R.id.home -> showConversationsScreen()\n      R.id.action_settings -> navigateToSettings()\n      R.id.action_logout -> presenter.executeLogout()\n    }\n\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun getContext(): Context {\n    return this\n  }\n\n  override fun getContactsFragment(): ContactsFragment {\n    return contactsFragment\n  }\n\n  override fun getConversationsFragment(): ConversationsFragment {\n    return conversationsFragment\n  }\n\n  override fun navigateToLogin() {\n    startActivity(Intent(this, LoginActivity::class.java))\n    finish()\n  }\n\n  override fun navigateToSettings() {\n    startActivity(Intent(this, SettingsActivity::class.java))\n  }\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:app=\"http://schemas.android.com/apk/res-auto\">\n<item\n  android:id=\"@+id/action_settings\"\n  android:orderInCategory=\"100\"\n  android:title=\"@string/action_settings\"\n  app:showAsAction=\"never\" />\n<item\n  android:id=\"@+id/action_logout\"\n  android:orderInCategory=\"100\"\n  android:title=\"@string/action_logout\"\n  app:showAsAction=\"never\" />\n</menu>\n```", "```\nimplementation 'com.github.stfalcon:chatkit:0.2.2'\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\"com.example.messenger.ui.chat.ChatActivity\">\n  <com.stfalcon.chatkit.messages.MessagesList\n    android:id=\"@+id/messages_list\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_above=\"@+id/message_input\"/>\n  <com.stfalcon.chatkit.messages.MessageInput\n    android:id=\"@+id/message_input\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    app:inputHint=\"@string/hint_enter_a_message\" />\n</RelativeLayout>\n\n```", "```\npackage com.example.messenger.ui.chat\n\nimport com.example.messenger.ui.base.BaseView\nimport com.example.messenger.utils.message.Message\nimport com.stfalcon.chatkit.messages.MessagesListAdapter\n\ninterface ChatView : BaseView {\n\n  interface ChatAdapter {\n    fun navigateToChat(recipientName: String, recipientId: Long, \n    conversationId: Long? = null)\n  }\n\n  fun showConversationLoadError()\n\n  fun showMessageSendError()\n\n  fun getMessageListAdapter(): MessagesListAdapter<Message>\n}\n```", "```\npackage com.example.messenger.utils.message\n\nimport com.stfalcon.chatkit.commons.models.IMessage\nimport com.stfalcon.chatkit.commons.models.IUser\nimport java.util.*\n\ndata class Message(private val authorId: Long, private val body: String,\nprivate val createdAt: Date) : IMessage {\n\n  override fun getId(): String {\n    return authorId.toString()\n  }\n\n  override fun getCreatedAt(): Date {\n    return createdAt\n  }\n\n  override fun getUser(): IUser {\n    return Author(authorId, \"\")\n  }\n\n  override fun getText(): String {\n    return body\n  }\n\n}\n```", "```\npackage com.example.messenger.utils.message\n\nimport com.stfalcon.chatkit.commons.models.IUser\n\ndata class Author(val id: Long, val username: String) : IUser {\n\n  override fun getAvatar(): String? {\n    return null\n  }\n\n  override fun getName(): String {\n    return username\n  }\n\n  override fun getId(): String {\n    return id.toString()\n  }\n\n}\n```", "```\npackage com.example.messenger.ui.chat\n\nimport com.example.messenger.data.vo.ConversationVO\n\ninterface ChatInteractor {\n\n  interface OnMessageSendFinishedListener {\n    fun onSendSuccess()\n\n    fun onSendError()\n  }\n\n  interface onMessageLoadFinishedListener {\n    fun onLoadSuccess(conversationVO: ConversationVO)\n    fun onLoadError()\n  }\n\n  fun sendMessage(recipientId: Long, message: String, listener: \n  OnMessageSendFinishedListener)\n\n  fun loadMessages(conversationId: Long, listener: \n  onMessageLoadFinishedListener)\n}\n```", "```\npackage com.example.messenger.ui.chat\n\nimport android.content.Context\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.data.remote.repository.ConversationRepository\nimport com.example.messenger.data.remote.repository.ConversationRepositoryImpl\nimport com.example.messenger.data.remote.request.MessageRequestObject\nimport com.example.messenger.service.MessengerApiService\nimport io.reactivex.android.schedulers.AndroidSchedulers\nimport io.reactivex.schedulers.Schedulers\n\nclass ChatInteractorImpl(context: Context) : ChatInteractor {\n\n  private val preferences: AppPreferences = AppPreferences.create(context)\n  private val service: MessengerApiService = MessengerApiService\n                                             .getInstance()\n  private val conversationsRepository: ConversationRepository = \n                           ConversationRepositoryImpl(context)\n```", "```\n\n  override fun loadMessages(conversationId: Long, listener: \n  ChatInteractor.onMessageLoadFinishedListener) {\n    conversationsRepository.findConversationById(conversationId)\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe({ res -> listener.onLoadSuccess(res)},\n    { error ->\n      listener.onLoadError()\n      error.printStackTrace()})\n  }\n\n```", "```\n\n  override fun sendMessage(recipientId: Long, message: String,\n  listener: ChatInteractor.OnMessageSendFinishedListener) {\n  service.createMessage(MessageRequestObject(\n  recipientId, message), preferences.accessToken as String)\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe({ _ -> listener.onSendSuccess()},\n  { error ->\n    listener.onSendError()\n    error.printStackTrace()})\n  }\n}\n```", "```\npackage com.example.messenger.ui.chat\n\ninterface ChatPresenter {\n\n  fun sendMessage(recipientId: Long, message: String)\n\n  fun loadMessages(conversationId: Long)\n}\n```", "```\npackage com.iyanuadelekan.messenger.ui.chat\n\nimport android.widget.Toast\nimport com.iyanuadelekan.messenger.data.vo.ConversationVO\nimport com.iyanuadelekan.messenger.utils.message.Message\nimport java.text.SimpleDateFormat\n\nclass ChatPresenterImpl(val view: ChatView) : ChatPresenter,\n        ChatInteractor.OnMessageSendFinishedListener,\n        ChatInteractor.onMessageLoadFinishedListener {\n\n  private val interactor: ChatInteractor = ChatInteractorImpl\n                                           (view.getContext())\n\n  override fun onLoadSuccess(conversationVO: ConversationVO) {\n    val adapter = view.getMessageListAdapter() \n\n    // create date formatter to format createdAt dates \n    // received from Messenger API\n    val dateFormatter = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n\n```", "```\n\n    conversationVO.messages.forEach { message ->\n      adapter.addToStart(Message(message.senderId, message.body,\n             dateFormatter.parse(message.createdAt.split(\".\")[0])), true)\n    }\n  }\n\n  override fun onLoadError() {\n    view.showConversationLoadError()\n  }\n\n  override fun onSendSuccess() {\n    Toast.makeText(view.getContext(), \"Message sent\", Toast.LENGTH_LONG).show()\n  }\n\n  override fun onSendError() {\n    view.showMessageSendError()\n  }\n\n  override fun sendMessage(recipientId: Long, message: String) {\n    interactor.sendMessage(recipientId, message,this)\n  }\n\n  override fun loadMessages(conversationId: Long) {\n    interactor.loadMessages(conversationId, this)\n  }\n}\n```", "```\npackage com.example.messenger.ui.chat\n\nimport android.content.Context\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.MenuItem\nimport android.widget.Toast\nimport com.example.messenger.R\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.ui.main.MainActivity\nimport com.example.messenger.utils.message.Message\nimport com.stfalcon.chatkit.messages.MessageInput\nimport com.stfalcon.chatkit.messages.MessagesList\nimport com.stfalcon.chatkit.messages.MessagesListAdapter\nimport java.util.*\n\nclass ChatActivity : AppCompatActivity(), ChatView, MessageInput.InputListener {\n\n  private var recipientId: Long = -1\n  private lateinit var messageList: MessagesList\n  private lateinit var messageInput: MessageInput\n  private lateinit var preferences: AppPreferences\n  private lateinit var presenter: ChatPresenter\n  private lateinit var messageListAdapter: MessagesListAdapter<Message>\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_chat)\n    supportActionBar?.setDisplayHomeAsUpEnabled(true)\n    supportActionBar?.title = intent.getStringExtra(\"RECIPIENT_NAME\")\n\n    preferences = AppPreferences.create(this)\n    messageListAdapter = MessagesListAdapter(\n    preferences.userDetails.id.toString(), null)\n    presenter = ChatPresenterImpl(this)\n    bindViews()\n\n```", "```\nval conversationId = intent.getLongExtra(\"CONVERSATION_ID\", -1)\nrecipientId = intent.getLongExtra(\"RECIPIENT_ID\", -1)\n\n```", "```\nif (conversationId != -1L) {\n      presenter.loadMessages(conversationId)\n    }\n  }\n}\n```", "```\n  override fun onSubmit(input: CharSequence?): Boolean {\n    // create a new Message object and add it to the \n    // start of the MessagesListAdapter\n    messageListAdapter.addToStart(Message(\n    preferences.userDetails.id, input.toString(), Date()), true)\n\n    // start message sending procedure with the ChatPresenter\n    presenter.sendMessage(recipientId, input.toString())\n\n    return true\n  }\n```", "```\n  override fun showConversationLoadError() {\n    Toast.makeText(this, \"Unable to load thread. \n    Please try again later.\",\n      Toast.LENGTH_LONG).show()\n  }\n\n  override fun showMessageSendError() {\n    Toast.makeText(this, \"Unable to send message. \n    Please try again later.\",\n      Toast.LENGTH_LONG).show()\n  }\n\n  override fun getContext(): Context {\n    return this\n  }\n\n  override fun getMessageListAdapter(): MessagesListAdapter<Message> {\n    return messageListAdapter\n  }\n```", "```\n  override fun bindViews() {\n    messageList = findViewById(R.id.messages_list)\n    messageInput = findViewById(R.id.message_input)\n\n    messageList.setAdapter(messageListAdapter)\n    messageInput.setInputListener(this)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    if (item?.itemId == android.R.id.home) {\n      onBackPressed()\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onBackPressed() {\n    super.onBackPressed()\n    finish()\n  }\n```", "```\n<PreferenceScreen xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <SwitchPreference\n  android:defaultValue=\"true\"\n  android:key=\"example_switch\"\n  android:summary=\n  \"@string/pref_description_social_recommendations\"\n  android:title=\"@string/pref_title_social_recommendations\" />\n\n  <!-- NOTE: EditTextPreference accepts EditText attributes. -->\n  <!-- NOTE: EditTextPreference's summary should be set to \n  its value by the activity code. -->\n  <EditTextPreference\n    android:capitalize=\"words\"\n    android:defaultValue=\"@string/pref_default_display_name\"\n    android:inputType=\"textCapWords\"\n    android:key=\"example_text\"\n    android:maxLines=\"1\"\n    android:selectAllOnFocus=\"true\"\n    android:singleLine=\"true\"\n    android:title=\"@string/pref_title_display_name\" />\n\n  <!-- NOTE: Hide buttons to simplify the UI. \n  Users can touch outside the dialog to\n  dismiss it. -->\n  <!-- NOTE: ListPreference's summary should be set to \n  its value by the activity code. -->\n  <ListPreference\n    android:defaultValue=\"-1\"\n    android:entries=\"@array/pref_example_list_titles\"\n    android:entryValues=\"@array/pref_example_list_values\"\n    android:key=\"example_list\"\n    android:negativeButtonText=\"@null\"\n    android:positiveButtonText=\"@null\"\n    android:title=\"@string/pref_title_add_friends_to_messages\" />\n\n</PreferenceScreen>\n\n```", "```\npackage com.example.messenger.ui.settings\n\nimport android.content.Context\nimport android.preference.EditTextPreference\nimport android.text.TextUtils\nimport android.util.AttributeSet\nimport android.widget.Toast\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.data.remote.request.StatusUpdateRequestObject\nimport com.example.messenger.service.MessengerApiService\nimport io.reactivex.android.schedulers.AndroidSchedulers\nimport io.reactivex.schedulers.Schedulers\n\nclass ProfileStatusPreference(context: Context, attributeSet: AttributeSet) : EditTextPreference(context, attributeSet) {\n\n  private val service: MessengerApiService = MessengerApiService\n                                             .getInstance()\n  private val preferences: AppPreferences = AppPreferences\n                                            .create(context)\n\n  override fun onDialogClosed(positiveResult: Boolean) {\n    if (positiveResult) {\n\n```", "```\n      val etStatus = editText\n\n      if (TextUtils.isEmpty(etStatus.text)) {\n        // Display error message when user tries \n        // to submit an empty status.\n      Toast.makeText(context, \"Status cannot be empty.\", \n      Toast.LENGTH_LONG).show()\n\n    } else {\n      val requestObject = \n      StatusUpdateRequestObject(etStatus.text.toString())\n\n```", "```\n\n      service.updateUserStatus(requestObject,  \n      preferences.accessToken as String)\n      .subscribeOn(Schedulers.io())\n      .observeOn(AndroidSchedulers.mainThread())\n      .subscribe({ res ->\n\n```", "```\n\n        preferences.storeUserDetails(res) },\n        { error ->\n          Toast.makeText(context, \"Unable to update status at the \" +\n          \"moment. Try again later.\", Toast.LENGTH_LONG).show()\n          error.printStackTrace()})\n     }\n   }\n\n    super.onDialogClosed(positiveResult)\n  }\n}\n```", "```\n<PreferenceScreen xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <com.example.messenger.ui.settings.ProfileStatusPreference\n    android:key=\"profile_status\"\n    android:singleLine=\"true\"\n    android:inputType=\"text\"\n    android:maxLines=\"1\"\n    android:selectAllOnFocus=\"true\"\n    android:title=\"Profile status\"\n    android:defaultValue=\"Available\"\n    android:summary=\"Set profile status (visible to contacts).\"/>\n</PreferenceScreen>\n\n```", "```\n<preference-headers xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <!-- These settings headers are only used on tablets. -->\n  <header\n    android:fragment=\n    \"com.example.messenger.ui.settings.SettingsActivity\n    $GeneralPreferenceFragment\"\n    android:icon=\"@drawable/ic_info_black_24dp\"\n    android:title=\"@string/pref_header_general\" />\n  <header\n    android:fragment=\n    \"com.example.messenger.ui.settings.SettingsActivity\n    $NotificationPreferenceFragment\"\n    android:icon=\"@drawable/ic_notifications_black_24dp\"\n    android:title=\"@string/pref_header_notifications\" />\n  <header\n    android:fragment=\n    \"com.example.messenger.ui.settings.SettingsActivity\n    $DataSyncPreferenceFragment\"\n    android:icon=\"@drawable/ic_sync_black_24dp\"\n    android:title=\"@string/pref_header_data_sync\" />\n</preference-headers>\n```", "```\n<preference-headers xmlns:android=\"http://schemas.android.com/apk/res/android\">\n<header\n  android:fragment=\n  \"com.example.messenger.ui.settings.SettingsActivity\n  $GeneralPreferenceFragment\"\n  android:icon=\"@drawable/ic_info_black_24dp\"\n  android:title=\"@string/pref_header_account\" />\n</preference-headers>\n```", "```\npackage com.example.messenger.ui.settings\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.preference.PreferenceActivity\nimport android.preference.PreferenceFragment\nimport android.view.MenuItem\nimport android.support.v4.app.NavUtils\nimport com.example.messenger.R\n\n```", "```\n\nclass SettingsActivity : AppCompatPreferenceActivity() {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    supportActionBar?.setDisplayHomeAsUpEnabled(true)\n  }\n\n  override fun onMenuItemSelected(featureId: Int, item: MenuItem): \n  Boolean {\n    val id = item.itemId\n\n    if (id == android.R.id.home) {\n      if (!super.onMenuItemSelected(featureId, item)) {\n        NavUtils.navigateUpFromSameTask(this)\n      }\n      return true\n    }\n    return super.onMenuItemSelected(featureId, item)\n  }\n\n```", "```\n\n  override fun onBuildHeaders(target: List<PreferenceActivity.Header>) \n  {\n    loadHeadersFromResource(R.xml.pref_headers, target)\n  }  \n```", "```\n\n  override fun isValidFragment(fragmentName: String): Boolean {\n    return PreferenceFragment::class.java.name == fragmentName\n    || GeneralPreferenceFragment::class.java.name == fragmentName\n  }\n\n```", "```\n\n  class GeneralPreferenceFragment : PreferenceFragment() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n      super.onCreate(savedInstanceState)\n\n      addPreferencesFromResource(R.xml.pref_general)\n      setHasOptionsMenu(true)\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n      val id = item.itemId\n\n      if (id == android.R.id.home) {\n        startActivity(Intent(activity, SettingsActivity::class.java))\n        return true\n      }\n      return super.onOptionsItemSelected(item)\n    }\n  }\n}\n```"]