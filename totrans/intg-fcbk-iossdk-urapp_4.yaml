- en: Chapter 4. Displaying User Profile
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。显示用户配置文件
- en: In this chapter, we are going to extend our social application with user information
    fetched from the Facebook Platform. We are going to take a look at the types of
    information we can fetch with and without explicitly asking for the user's permission.
    We will learn how to fetch extra user information using `FBSession`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过从Facebook平台获取用户信息来扩展我们的社交应用程序。我们将探讨在明确请求用户权限的情况下和未明确请求用户权限的情况下可以获取的信息类型。我们将学习如何使用`FBSession`获取额外的用户信息。
- en: Understanding Facebook Platform
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Facebook平台
- en: The Facebook protects enforces a user's data through a permission system. In
    order to access a user's information, we need to ask the user to give the application
    permissions to fetch such data. You can find the whole list of user information
    at [https://developers.facebook.com/docs/reference/api/user/.](https://developers.facebook.com/docs/reference/api/user/.)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook通过权限系统保护用户数据。为了访问用户信息，我们需要请求用户允许应用程序获取此类数据。您可以在[https://developers.facebook.com/docs/reference/api/user/](https://developers.facebook.com/docs/reference/api/user/)找到用户信息的完整列表。
- en: 'When users log in to our system, they give the application permission to access
    their basic information. Basic information includes the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录到我们的系统时，他们允许应用程序访问他们的基本信息。基本信息包括以下内容：
- en: '`id`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`'
- en: '`name`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`'
- en: '`first_name`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`first_name`'
- en: '`last_name`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_name`'
- en: '`link`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`link`'
- en: '`username`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username`'
- en: '`gender`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gender`'
- en: '`locale`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locale`'
- en: '`age_range`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`age_range`'
- en: You can find basic information on friends at
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下位置找到有关朋友的基本信息
- en: '[https://developers.facebook.com/docs/reference/login/public-profile-and-friend-list/](https://developers.facebook.com/docs/reference/login/public-profile-and-friend-list/).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.facebook.com/docs/reference/login/public-profile-and-friend-list/](https://developers.facebook.com/docs/reference/login/public-profile-and-friend-list/).'
- en: If we are planning to use any other user information types, we will need to
    ask the user and be sure our application is smart enough to handle denied/revoked
    permissions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们计划使用任何其他用户信息类型，我们需要请求用户，并确保我们的应用程序足够智能，能够处理拒绝/撤销的权限。
- en: '**Email** is important information that needs to be carefully handled. Users
    need to give their permission to access such data. Do not spam the user''s e-mail.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**电子邮件**是重要信息，需要谨慎处理。用户需要授权才能访问此类数据。不要向用户的电子邮件发送垃圾邮件。'
- en: '[https://developers.facebook.com/docs/reference/login/-permissions/](https://developers.facebook.com/docs/reference/login/-permissions/)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.facebook.com/docs/reference/login/-permissions/](https://developers.facebook.com/docs/reference/login/-permissions/)'
- en: '**Extended Profile Properties** permissions give access to the remaining fields
    not included in basic information. You can find complete information about Extended
    Profile properties at'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展配置文件属性**权限提供访问基本信息中未包含的剩余字段。您可以在以下位置找到关于扩展配置文件属性的完整信息'
- en: '[https://developers.facebook.com/docs/reference/login/extended-profile-properties/](https://developers.facebook.com/docs/reference/login/extended-profile-properties/).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.facebook.com/docs/reference/login/extended-profile-properties/](https://developers.facebook.com/docs/reference/login/extended-profile-properties/).'
- en: '**Extended Permissions** give access to sensitive information plus the ability
    to publish and delete data on the Social Graph. Information is available at'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展权限**提供访问敏感信息以及发布和删除社交图上数据的权限。信息可在以下位置找到'
- en: '[https://developers.facebook.com/docs/reference/login/extended-permissions/](https://developers.facebook.com/docs/reference/login/extended-permissions/).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.facebook.com/docs/reference/login/extended-permissions/](https://developers.facebook.com/docs/reference/login/extended-permissions/).'
- en: '**OpenGraph Permissions** give the ability to interact with Open Graph. Users
    will be able to publish and retrieve actions on Open Graph through our application.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放图权限**提供与开放图交互的能力。用户将通过我们的应用程序发布和检索开放图上的操作。'
- en: '[https://developers.facebook.com/docs/reference/login/open-graph-permissions/](https://developers.facebook.com/docs/reference/login/open-graph-permissions/)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.facebook.com/docs/reference/login/open-graph-permissions/](https://developers.facebook.com/docs/reference/login/open-graph-permissions/)'
- en: For the scope of this chapter, we will be using the user's basic and e-mail
    information to display in our application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章范围内，我们将使用用户的基本信息和电子邮件信息在我们的应用程序中显示。
- en: Setting up the user profile interface
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置用户配置文件界面
- en: In the previous chapter, we implemented the Storyboard Facebook Scene to show
    the profile picture after a user has logged in. In this part of the chapter, we
    are going to extend the scene to include their name and e-mail.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们实现了Storyboard Facebook场景，在用户登录后显示个人资料图片。在本章的这一部分，我们将扩展场景以包括他们的姓名和电子邮件。
- en: The name information is already provided through the basic permissions. Now,
    for the user's e-mail, we will need to explicitly ask the user to give us access
    to it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 姓名 信息已经通过基本权限提供。现在，对于用户的电子邮件，我们需要明确请求用户允许我们访问它。
- en: 'First, we need to add two new labels to our Facebook Scene to display the new
    information. The following figure shows the look of the scene after adding the
    labels:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要向我们的Facebook场景添加两个新的标签来显示新信息。以下图显示了添加标签后的场景外观：
- en: '![](img/cIj0azJJ.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cIj0azJJ.jpg)'
- en: The new labels will be dynamically set with the user's information after the
    user logs in. When the user logs out, we will replace the name and e-mail info
    with empty strings.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 用户登录后，新标签将动态设置用户信息。当用户注销时，我们将姓名和电子邮件信息替换为空字符串。
- en: Click on the **Show the Assistant Editor** button, and drag-and-drop the labels
    one at a time within the `LBFacebookViewController.m` interface statement.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**显示辅助编辑器**按钮，并在`LBFacebookViewController.m`接口声明中逐个拖放标签。
- en: 'The following code snippet shows the result of creating label references:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了创建标签引用的结果：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that we have the label references for name and e-mail, we can fetch the
    user's information from Open Graph.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了姓名和电子邮件的标签引用，我们可以从Open Graph获取用户信息。
- en: Fetching a user's information
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用户信息
- en: In this section, we are going to focus on implementing the code to show and
    hide a user's name and e-mail.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于实现显示和隐藏用户姓名和电子邮件的代码。
- en: In the previous chapter, we created a delegate method for the `FBLoginView`
    component in the Facebook Scene to access a user's information. Hide **Assistant
    Editor** and open the `LBFacebookViewController.m` file. We need to add some code
    to the `loginViewFetchedUserInfo` method to customize the new labels.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们在Facebook场景中为`FBLoginView`组件创建了一个代理方法来访问用户信息。隐藏**辅助编辑器**并打开`LBFacebookViewController.m`文件。我们需要在`loginViewFetchedUserInfo`方法中添加一些代码来定制新的标签。
- en: Starting with customizing the name label, we can use the `(id&lt;FBGraphUser&gt;)user`
    input parameter provided by the method to access the user's name and set the label.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从自定义姓名标签开始，我们可以使用方法提供的`(id<FBGraphUser>)user`输入参数来访问用户姓名并设置标签。
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `self.nameLabel.test = user.name` code line will set the UI name label content
    with a user's name provided by the `FBLoginView` callback.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.nameLabel.test = user.name`代码行将使用`FBLoginView`回调提供的用户姓名设置UI姓名标签内容。'
- en: 'When the user logs out, we need to set the name label content with an empty
    string as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户注销时，我们需要将姓名标签内容设置为空字符串，如下所示：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `self.nameLabel.test = @"Name"` instruction will set the name label back
    to the default content.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.nameLabel.test = @"Name"`指令将姓名标签恢复到默认内容。'
- en: 'In order to fetch a user''s e-mail, we first need to ask the user to give the
    application access to this information. We need to customize `FBLoginView` by
    adding the e-mail permission as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取用户的电子邮件，我们首先需要请求用户允许应用程序访问此信息。我们需要通过以下方式定制`FBLoginView`，添加电子邮件权限：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The previous code snippet shows how to set additional permissions to `FBLoginView`.
    First define a list with read permissions that the application needs and set the
    `FBLoginView readPermissions` field with the created array.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了如何设置`FBLoginView`的附加权限。首先定义一个包含应用程序需要的读取权限的列表，并将创建的数组设置为`FBLoginView
    readPermissions`字段。
- en: 'The following screenshot shows the user permission interface with the additional
    e-mail request:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有附加电子邮件请求的用户权限界面：
- en: '![](img/BankWSko.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/BankWSko.jpg)'
- en: 'If the user accepted the request, we can fetch the user information through
    the `FBLoginView` delegate using the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户接受了请求，我们可以通过以下代码使用`FBLoginView`代理获取用户信息：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first method will fetch the e-mail field only if it is present in the Platform
    response. The second method will replace the user's e-mail with default content.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法仅在平台响应中存在电子邮件字段时才会获取电子邮件字段。第二种方法将用户的电子邮件替换为默认内容。
- en: 'The following screenshot shows the final result:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了最终结果：
- en: '![](img/KhYhdtDE.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/KhYhdtDE.jpg)'
- en: Creating the friends view interface
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建朋友视图接口
- en: When we think about social activities, we think about sharing experiences and
    moments of life with our friends.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想到社交活动时，我们会想到与朋友分享生活经历和时刻。
- en: In this part of the chapter, we are going to create a simple friend picker view
    controller. The controller will display all friends associated with our Facebook
    account and provide the ability to select one or more of them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们将创建一个简单的朋友选择视图控制器。该控制器将显示与我们的Facebook账户关联的所有朋友，并提供选择一个或多个朋友的能力。
- en: In the next chapters, we are going to use the friend picker to share parts of
    our information with them.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用朋友选择器与他们分享我们信息的一部分。
- en: Using Version 2.x of the Facebook SDK, implementing the friends list would involve
    a lot of work compared to the new SDK. Building a friends list with the previous
    SDK would have involved the creation of a new UI component to display friends'
    information, for example, table view controller. The logic behind this is also
    challenging because we are supposed to handle the security token extension and
    parse the response in order to populate the friends list UI.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Facebook SDK的2.x版本，与新的SDK相比，实现好友列表将涉及大量工作。使用之前的SDK构建好友列表将需要创建一个新的UI组件来显示朋友信息，例如，表格视图控制器。背后的逻辑也是具有挑战性的，因为我们需要处理安全令牌扩展并解析响应以填充好友列表UI。
- en: Creating a friends list is a completely different story with Facebook iOS SDK
    3.x. With the Version 3.x of SDK, Facebook engineers worked really well to create
    flawless out-of-the-box, ready-to-use components. One such component is `FBFriendPickerViewController`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Facebook iOS SDK 3.x创建好友列表是一个完全不同的故事。在SDK的3.x版本中，Facebook工程师们非常努力地创建出完美无缺、即用即得的组件。其中之一就是`FBFriendPickerViewController`。
- en: '`FBFriendPickerViewController` encapsulates user interaction and logic to handle
    a user''s friends list. It will provide a table-like UI, because it inherits from
    `UITabelViewController`. The entire communication from/to Facebook Platform is
    completely handled by the new component.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBFriendPickerViewController`封装了用户交互和逻辑，以处理用户的好友列表。它将提供一个类似表格的UI，因为它继承自`UITabelViewController`。从/到Facebook平台的整个通信完全由新组件处理。'
- en: Some of the customizations we can perform on `FBFriendPickerViewController`
    are the ability to sort by first or last name, changing the way friends' names
    are displayed, and so on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`FBFriendPickerViewController`上执行的一些自定义操作包括按姓氏或名字排序，更改显示朋友名字的方式等。
- en: 'The following screenshot shows the final result of the UI using the new view
    controller:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用新视图控制器生成的最终UI结果：
- en: '![](img/lxlO1N6Y.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/lxlO1N6Y.jpg)'
- en: The friends list will only be enabled when the selected users are logged in.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当所选用户登录时，好友列表才会启用。
- en: Creating the UI
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建UI
- en: In order to display the friends list, we need to start by adding a new button
    to the Facebook UI. Open Storyboard and select the Facebook scene. Holding the
    *Ctrl* keyboard button, drag-and-drop a button from the **Object Library** and
    place it underneath the e-mail label. Set the label text, for example **Friends**,
    for the new button. Deselect the option **Enabled** by navigating to **Utilities
    Panel** | **Attribute Inspector**.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示好友列表，我们需要首先向Facebook UI添加一个新按钮。打开Storyboard，选择Facebook场景。按住*Ctrl*键盘按钮，从**对象库**中拖放一个按钮并将其放置在电子邮件标签下方。为新按钮设置标签文本，例如**好友**。通过导航到**实用工具面板**|**属性检查器**取消选择**启用**选项。
- en: The screenshots 1 to 5 show the **Attribute Inspector** with the **Enabled**
    option not checked.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 截图1到5显示了**属性检查器**中的**启用**选项未被勾选。
- en: '![](img/IA6PwehN.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/IA6PwehN.jpg)'
- en: The **Friends** button will trigger the code that will create an instance of
    `FBFriendPickerViewController` only if the user is already logged in; otherwise,
    it will be disabled. Since we need to enable and disable the button, we need to
    have a reference of the button in our `LBFacebookViewController`, which will be
    accessed using the `FBLoginView` delegates. To create the button reference, open
    the Assistant Editor and create the friends button reference by dragging and dropping
    the button within the `LBFacebookViewController` interface statement.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**好友**按钮只有在用户已经登录的情况下才会触发创建`FBFriendPickerViewController`实例的代码；否则，它将被禁用。由于我们需要启用和禁用按钮，我们需要在我们的`LBFacebookViewController`中有一个按钮的引用，该引用将通过`FBLoginView`代理来访问。为了创建按钮引用，打开辅助编辑器，并在`LBFacebookViewController`接口声明内通过拖放创建好友按钮引用。'
- en: '![](img/OXMcGTgo.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/OXMcGTgo.jpg)'
- en: When the user clicks on the **Friends** button, it will trigger the code to
    create the friends list. To map the `click` event on the **Friends** button with
    the `LBFacebookViewController` method, hold the *Ctrl* keyboard button and drag-and-drop
    the button after the `loginViewShowingLoggedOutUser` method. XCode will ask for
    the name of the new method that will map the **Touch Up Inside** event.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **朋友** 按钮时，将触发创建朋友列表的代码。要将 **朋友** 按钮的 `click` 事件映射到 `LBFacebookViewController`
    方法，请按住 *Ctrl* 键盘按钮，并将按钮拖放到 `loginViewShowingLoggedOutUser` 方法之后。XCode 将要求输入新方法的名称，该方法将映射
    **Touch Up Inside** 事件。
- en: '![](img/nt3OH8Kl.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/nt3OH8Kl.jpg)'
- en: 'After we click on **Connect**, XCode will generate the method following the
    code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们点击 **连接** 后，XCode 将根据以下代码生成方法：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The previous snippet will contain the code to show an instance of `FBFriendPickerViewController`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的片段将包含显示 `FBFriendPickerViewController` 实例的代码。
- en: Displaying FBFriendPickerViewController
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示 FBFriendPickerViewController
- en: In order to show the UI friends list component, we need to keep an instance
    of `FBFriendPickerViewController` within `LBFacebookViewController`. Open the
    `LBFacebookViewController.m` file, and add a new instance of `FBFriendPickerViewController`
    within the `interface` statement.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示UI朋友列表组件，我们需要在 `LBFacebookViewController` 中保持一个 `FBFriendPickerViewController`
    的实例。打开 `LBFacebookViewController.m` 文件，并在 `interface` 语句中添加一个新的 `FBFriendPickerViewController`
    实例。
- en: The following code shows the `interface` statement.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了 `interface` 语句。
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will notice that `FBFriendPickerViewController` is also a delegate of `FBFriendPickerViewController`
    as the previous code snippet is showing on the first line of the `interface` statement.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会注意到，`FBFriendPickerViewController` 也作为委托出现在之前的代码片段中，这是在 `interface` 语句的第一行显示的。
- en: Now we need to update the `onFriendsClick`method to initialize or re-use the
    `friendPickerViewController`property and display the friends list. The next application
    method shows the `onFriendsClick` method implementation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要更新 `onFriendsClick` 方法，以初始化或重用 `friendPickerViewController` 属性并显示朋友列表。下一个应用程序方法显示了
    `onFriendsClick` 方法的实现。
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first part of the method checks whether `friendPickerViewController` is
    already initialized. If it is not initialized, the method will allocate new memory
    for the instance and set title for the UI and current class as delegate for the
    friends list controller. The `loadData` method will load the friends' information
    from the Platform, or from the cache if it is still valid. The `clearSelection`
    method will clear the user selection if the friends list UI was already used.
    At the end of the method, we show the new view controller using the `presentViewController`
    method that will push the `FBFriendPickerViewController` view at the top of the
    UI stack.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的第一部分检查 `friendPickerViewController` 是否已经初始化。如果没有初始化，该方法将为实例分配新的内存，并为UI设置标题，将当前类作为朋友列表控制器的委托。`loadData`
    方法将从平台加载朋友信息，或者如果仍然有效，则从缓存中加载。`clearSelection` 方法将清除用户选择，如果朋友列表UI已经被使用。在方法结束时，我们使用
    `presentViewController` 方法显示新的视图控制器，这将把 `FBFriendPickerViewController` 视图推到UI堆栈的顶部。
- en: As we said, `FBFriendPickerViewController` needs a delegate in order to interact
    with users and the rest of the application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，`FBFriendPickerViewController` 需要一个委托才能与用户和其他应用程序交互。
- en: For the scope of this chapter, we are going to use two delegate methods to handle
    the **Done** and **Cancel** button in `FBFriendPicker` view. In this chapter,
    the two delegate methods will only hide the friends list UI. The next code shows
    the delegate method for `FBFriendPickerViewController`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的范围内，我们将使用两个委托方法来处理 `FBFriendPicker` 视图中的 **完成** 和 **取消** 按钮。在本章中，这两个委托方法将仅隐藏朋友列表UI。下一代码显示了
    `FBFriendPickerViewController` 的委托方法。
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Both delegate methods in the previous code call `dismissViewControllerAnimated`
    that will pop the friends list UI from the stack.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码中的两种委托方法都调用了 `dismissViewControllerAnimated`，这将从堆栈中弹出朋友列表UI。
- en: Customizing the friends list using a search bar
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用搜索栏自定义朋友列表
- en: In the previous section, we created the friends list UI that also includes the
    ability to navigate the user's friends list using the index on the right side
    of the interface.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们创建了朋友列表UI，它还包括使用界面右侧的索引导航用户朋友列表的能力。
- en: Users have a lot of friends and sometimes the index cannot be fast enough. We
    would like to provide users with a search bar on top of the friends list.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 用户有很多朋友，有时索引可能不够快。我们希望向用户提供一个位于朋友列表顶部的搜索栏。
- en: We will start creating a new class that will inherit from `FBFriendPickerViewController`.
    The new class will contain a `UISearchBar` UI component, and because of it we
    need to set the same class as a `UISearchBar` delegate. While the user is typing
    within the search bar, the new class will filter the friends entries based on
    the search query content.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始创建一个新的类，该类将继承自 `FBFriendPickerViewController`。新的类将包含一个 `UISearchBar` UI
    组件，因此我们需要将其设置为 `UISearchBar` 代理。当用户在搜索栏中输入时，新类将根据搜索查询内容过滤朋友条目。
- en: In order to create the new class, open the **Project Navigator** and select
    the `iLikeBook` folder within **iLikeBook** project. Right-click on it and select
    **New File…**, and then select the `Cocoa Touch` and `Objective-C class` templates.
    Click on **Next** and set the class name, for example `LBFriendPickerViewController`,
    and set `FBFriendPickerViewController` as a subclass. The new class will have
    the same functionalities and properties of `FBFriendPickerViewController`. Click
    on **Next** to create the file. We can now see two new files in the **Project
    Navigator**.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建新类，打开 **项目导航器** 并选择 **iLikeBook** 项目中的 **iLikeBook** 文件夹。右键单击它并选择 **新建文件…**，然后选择
    `Cocoa Touch` 和 `Objective-C class` 模板。点击 **下一步** 并设置类名，例如 `LBFriendPickerViewController`，并将
    `FBFriendPickerViewController` 设置为子类。新类将具有与 `FBFriendPickerViewController` 相同的功能和属性。点击
    **下一步** 创建文件。我们现在可以在 **项目导航器** 中看到两个新文件。
- en: 'In order to extend our new friend picker controller, we need two more properties
    as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展我们的新朋友选择控制器，我们需要另外两个属性，如下所示：
- en: '`SearchText`: It is a variable that contains the current search query. The
    `Friend Picker` delegate will access it to filter out the friends that do not
    satisfy the search query.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SearchText`：它是一个包含当前搜索查询的变量。`Friend Picker` 代理将访问它以过滤掉不满足搜索查询的朋友。'
- en: '`UISearchBar`: It is the UI component that will allow the user to type the
    search query.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UISearchBar`：它是允许用户输入搜索查询的 UI 组件。'
- en: '`SearchText`, as we mentioned in the preceding points, will be used to filter
    out friends from the `Friend Picker` list; therefore we can define it as public.
    Open the `LBFriendPickerViewController.h` file, and add the `SearchText`variable
    as a public field. The following listing shows it within the `LBFriendPickerViewController`
    class.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`SearchText`，正如我们前面提到的，将用于从 `Friend Picker` 列表中过滤出朋友；因此我们可以将其定义为公共变量。打开 `LBFriendPickerViewController.h`
    文件，并将 `SearchText` 变量添加为公共字段。以下列表显示了它在 `LBFriendPickerViewController` 类中的位置。'
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information, you can check these two URLs: [https://developers.facebook.com/docs/reference/ios/3.2/protocol/FBFriendPickerDelegate](https://developers.facebook.com/docs/reference/ios/3.2/protocol/FBFriendPickerDelegate)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，您可以查看以下两个 URL：[https://developers.facebook.com/docs/reference/ios/3.2/protocol/FBFriendPickerDelegate](https://developers.facebook.com/docs/reference/ios/3.2/protocol/FBFriendPickerDelegate)
- en: '[http://developer.apple.com/library/ios/#documentation/uikit/reference/UISearchBarDelegate_Protocol/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UISearchBarDelegate_Protocol/Reference/Reference.html)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.apple.com/library/ios/#documentation/uikit/reference/UISearchBarDelegate_Protocol/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UISearchBarDelegate_Protocol/Reference/Reference.html)'
- en: Now open `LBFriendPickerViewController.h`; we are going to implement the UI
    for friends search.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开 `LBFriendPickerViewController.h` 文件；我们将实现朋友搜索的 UI。
- en: 'Start adding the `UISearchBar` component to the `interface` statement. We also
    need to define the current class as `UISearchBarDelegate` in order to capture
    the user''s input as the following snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 开始将 `UISearchBar` 组件添加到 `interface` 语句中。我们还需要将当前类定义为 `UISearchBarDelegate`，以便捕获用户的输入，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `UISearchBar` will appear on top of the friends list, and the width will
    be exactly the same as the container view width. The bar will be built by the
    application after the container view loads.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`UISearchBar` 将显示在朋友列表的顶部，其宽度将与容器视图的宽度完全相同。该栏将在容器视图加载后由应用程序构建。'
- en: '![](img/KAb33AEJ.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/KAb33AEJ.jpg)'
- en: Create an `init` method if one does not already exist. Within this method, call
    the parent `init` method and set the `searchBar` variable as `nil`, as displayed
    in the following code snippet.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果还没有创建 `init` 方法，请创建一个。在这个方法中，调用父类的 `init` 方法，并将 `searchBar` 变量设置为 `nil`，如下面的代码片段所示。
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We need to customize the `viewDidLoad` method in order to build the `UISearchBar`
    on the friend picker view.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要自定义 `viewDidLoad` 方法，以便在朋友选择视图中构建 `UISearchBar`。
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous code shows the new `viewDidLoad` method with the new, not yet defined
    method `addSearchBarToFriendPickerView`. The new method initializes the `searchBar`,
    only if this one is set to `nil`. After the initialization is complete, the `searchBar`
    is added to the view container.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码展示了新的`viewDidLoad`方法，其中包含尚未定义的新方法`addSearchBarToFriendPickerView`。新方法仅在`searchBar`设置为`nil`时初始化`searchBar`。初始化完成后，`searchBar`将被添加到视图容器中。
- en: The following snippet shows the `addSearchBarToFriendPickerView` implementation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了`addSearchBarToFriendPickerView`的实现。
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding method first checks whether the `searchBar` is already initialized;
    if it is not, the method will do it. The `searchBarHeight` variable is the final
    height of `UISearchBar` that will be used as an input parameter to initialize
    the `searchBar` variable when creating a custom frame.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法首先检查`searchBar`是否已经初始化；如果没有，该方法将进行初始化。`searchBarHeight`变量是`UISearchBar`的最终高度，它将被用作初始化`searchBar`变量时的输入参数，以创建自定义框架。
- en: Moving forward, we will define `searchBar autoresizingMask` in order to have
    the same width as the view container. `UISearchBar` needs a delegate to access
    the user's search query; therefore we set a delegate. Using the `self.searchBar.showsCancelButton`instruction,
    we can set the **Cancel** button within the `UISearchBar` button as visible or
    hidden.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续前进的过程中，我们将定义`searchBar autoresizingMask`以确保其宽度与视图容器相同。`UISearchBar`需要一个代理来访问用户的搜索查询；因此我们设置了一个代理。使用`self.searchBar.showsCancelButton`指令，我们可以设置`UISearchBar`按钮内的**取消**按钮为可见或隐藏。
- en: The `searchBar` component needs to be added to the current view. Since `LBFriendPickerViewController`
    is inheriting `FBFriendPickerViewController`, we can receive access to the parent
    view using the `self.canvasView` property. The `searchBar` component will be displayed
    on the top because we defined the frame with position (`0`, `0`).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`searchBar`组件需要被添加到当前视图。由于`LBFriendPickerViewController`继承了`FBFriendPickerViewController`，我们可以通过`self.canvasView`属性接收对父视图的访问。`searchBar`组件将显示在顶部，因为我们定义了位置（`0`，`0`）的框架。'
- en: After adding the search bar, we need to resize the friends table view height
    using `searchBarHeight`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加搜索栏后，我们需要使用`searchBarHeight`来调整朋友表格视图的高度。
- en: The UI part is now complete; we still need to take care of the communication
    between the `UISearchBar` and `LBFriendPickerViewController` classes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: UI部分现在已完成；我们仍需注意`UISearchBar`和`LBFriendPickerViewController`类之间的通信。
- en: 'Create a helper method to handle the search, as shown in the following code
    sample:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个辅助方法来处理搜索，如下面的代码示例所示：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding method will set the `searchText` property with the current `UISearchBar`
    content value, and will call `updateView`. The `UpdateView` method will call the
    `LBFriendPickerViewController` delegate method to filter out the users. We will
    dive into that method later in this section.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法将使用当前的`UISearchBar`内容值设置`searchText`属性，并调用`updateView`。`UpdateView`方法将调用`LBFriendPickerViewController`的代理方法来过滤用户。我们将在本节稍后深入了解该方法。
- en: '`UISearchBar` needs the delegate methods to handle a user''s search. We need
    to create three delegate methods to handle the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`UISearchBar`需要代理方法来处理用户的搜索。我们需要创建三个代理方法来处理以下操作：'
- en: Search bar text is changed.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索栏文本已更改。
- en: '**Search** button is clicked.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索**按钮被点击。'
- en: '**Cancel** button is clicked.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**取消**按钮被点击。'
- en: 'The text change method is pretty simple. While the user is typing, the application
    will dynamically filter out users. The code for the new delegate method is shown
    in the following snippet:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 文本更改方法相当简单。当用户输入时，应用程序将动态过滤用户。新代理方法的代码如下所示：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `textDidChange` method uses the `handleSearch` helper to handle the search.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`textDidChange`方法使用`handleSearch`辅助方法来处理搜索。'
- en: 'To handle the **Search** button, click and create the method as shown in the
    following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理**搜索**按钮，点击并创建如下所示的方法：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The only difference with the previous delegate method is the call to `resignFirstResponder`
    that will hide the keypad after clicking on the **Search** button.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的代理方法相比，唯一的区别是调用`resignFirstResponder`，这将点击**搜索**按钮后隐藏键盘。
- en: The **Cancel** button method is more complicated; it will reset the `searchText`
    and `searchBar` content values as empty strings, update the view, and hide the
    keypad.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**取消**按钮的方法更复杂；它将重置`searchText`和`searchBar`内容值为空字符串，更新视图，并隐藏键盘。'
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As a final touch, we need to override the `clearSelection` method to perform
    the parent duty and reset the `searchText` and `searchBar` contents.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的润色，我们需要重写`clearSelection`方法以执行父级职责并重置`searchText`和`searchBar`的内容。
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we have the new friend picker controller, we need to use it. Previously,
    we used the `FBFriendPickerViewController` inside `LBFriendPickerViewController`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了新的好友选择控制器，我们需要使用它。之前，我们在`LBFriendPickerViewController`内部使用了`FBFriendPickerViewController`。
- en: Open `LBFriendPickerViewController.m` and replace the `FBFriendPickerViewController`
    property and its initialization with `LBFriendPickerViewController`, the new class
    just created. You should have only two occurrences of it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`LBFriendPickerViewController.m`，将`FBFriendPickerViewController`属性及其初始化替换为`LBFriendPickerViewController`，即刚刚创建的新类。你应该只有两个这样的实例。
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The last method we need to implement is the delegate method to filter out the
    users from the friends list. At the end of the `LBFriendPickerViewController.m`,
    create the method shown in the following code snippet:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现的最后一个方法是过滤好友列表中用户的代理方法。在`LBFriendPickerViewController.m`的末尾，创建以下代码片段所示的方法：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The method listed in the preceding code will check each of the users in our
    friends list in order to find a match with the current user search query, and
    will return true and false. LBFriendPickerViewController and UISearchBar call
    this method.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中列出的方法将检查我们好友列表中的每个用户，以找到与当前用户搜索查询的匹配项，并将返回true和false。LBFriendPickerViewController和UISearchBar调用此方法。
- en: 'The following screenshot shows the final result of the customization:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了定制的最终结果：
- en: '![](img/X7clOEd2.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/X7clOEd2.jpg)'
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we discussed which information we can fetch using basic permission.
    Using storyboard, we built the profile UI where we display the Facebook profile
    name and picture. Using `FBLoginView`, we implemented login and logout flows without
    handling Facebook session information.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了我们可以使用基本权限获取哪些信息。使用故事板，我们构建了个人资料UI，在那里我们显示Facebook个人资料名称和图片。使用`FBLoginView`，我们实现了登录和注销流程，而不需要处理Facebook会话信息。
- en: We inserted a new button within the profile UI that will trigger a new modal
    view controller. The new controller inherits from `FBFriendPickerViewController`
    that will enable our social app to easily fetch the friends list.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在个人资料UI中插入了一个新的按钮，该按钮将触发一个新的模态视图控制器。新的控制器继承自`FBFriendPickerViewController`，这将使我们的社交应用能够轻松获取好友列表。
- en: We customized the friends list UI by inserting a new search component that we
    can use to filter friends based on the user's input.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过插入一个新的搜索组件来自定义了好友列表的用户界面，我们可以使用这个组件根据用户的输入来过滤好友。
