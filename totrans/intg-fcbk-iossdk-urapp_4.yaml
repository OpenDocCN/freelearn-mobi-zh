- en: Chapter 4. Displaying User Profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to extend our social application with user information
    fetched from the Facebook Platform. We are going to take a look at the types of
    information we can fetch with and without explicitly asking for the user's permission.
    We will learn how to fetch extra user information using `FBSession`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Facebook Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Facebook protects enforces a user's data through a permission system. In
    order to access a user's information, we need to ask the user to give the application
    permissions to fetch such data. You can find the whole list of user information
    at [https://developers.facebook.com/docs/reference/api/user/.](https://developers.facebook.com/docs/reference/api/user/.)
  prefs: []
  type: TYPE_NORMAL
- en: 'When users log in to our system, they give the application permission to access
    their basic information. Basic information includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`first_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`link`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`username`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gender`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`locale`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`age_range`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find basic information on friends at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.facebook.com/docs/reference/login/public-profile-and-friend-list/](https://developers.facebook.com/docs/reference/login/public-profile-and-friend-list/).'
  prefs: []
  type: TYPE_NORMAL
- en: If we are planning to use any other user information types, we will need to
    ask the user and be sure our application is smart enough to handle denied/revoked
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Email** is important information that needs to be carefully handled. Users
    need to give their permission to access such data. Do not spam the user''s e-mail.'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.facebook.com/docs/reference/login/-permissions/](https://developers.facebook.com/docs/reference/login/-permissions/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extended Profile Properties** permissions give access to the remaining fields
    not included in basic information. You can find complete information about Extended
    Profile properties at'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.facebook.com/docs/reference/login/extended-profile-properties/](https://developers.facebook.com/docs/reference/login/extended-profile-properties/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extended Permissions** give access to sensitive information plus the ability
    to publish and delete data on the Social Graph. Information is available at'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.facebook.com/docs/reference/login/extended-permissions/](https://developers.facebook.com/docs/reference/login/extended-permissions/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenGraph Permissions** give the ability to interact with Open Graph. Users
    will be able to publish and retrieve actions on Open Graph through our application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.facebook.com/docs/reference/login/open-graph-permissions/](https://developers.facebook.com/docs/reference/login/open-graph-permissions/)'
  prefs: []
  type: TYPE_NORMAL
- en: For the scope of this chapter, we will be using the user's basic and e-mail
    information to display in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the user profile interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we implemented the Storyboard Facebook Scene to show
    the profile picture after a user has logged in. In this part of the chapter, we
    are going to extend the scene to include their name and e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: The name information is already provided through the basic permissions. Now,
    for the user's e-mail, we will need to explicitly ask the user to give us access
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add two new labels to our Facebook Scene to display the new
    information. The following figure shows the look of the scene after adding the
    labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cIj0azJJ.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The new labels will be dynamically set with the user's information after the
    user logs in. When the user logs out, we will replace the name and e-mail info
    with empty strings.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Show the Assistant Editor** button, and drag-and-drop the labels
    one at a time within the `LBFacebookViewController.m` interface statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows the result of creating label references:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the label references for name and e-mail, we can fetch the
    user's information from Open Graph.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching a user's information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to focus on implementing the code to show and
    hide a user's name and e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we created a delegate method for the `FBLoginView`
    component in the Facebook Scene to access a user's information. Hide **Assistant
    Editor** and open the `LBFacebookViewController.m` file. We need to add some code
    to the `loginViewFetchedUserInfo` method to customize the new labels.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with customizing the name label, we can use the `(id&lt;FBGraphUser&gt;)user`
    input parameter provided by the method to access the user's name and set the label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `self.nameLabel.test = user.name` code line will set the UI name label content
    with a user's name provided by the `FBLoginView` callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user logs out, we need to set the name label content with an empty
    string as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `self.nameLabel.test = @"Name"` instruction will set the name label back
    to the default content.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to fetch a user''s e-mail, we first need to ask the user to give the
    application access to this information. We need to customize `FBLoginView` by
    adding the e-mail permission as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The previous code snippet shows how to set additional permissions to `FBLoginView`.
    First define a list with read permissions that the application needs and set the
    `FBLoginView readPermissions` field with the created array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the user permission interface with the additional
    e-mail request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/BankWSko.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user accepted the request, we can fetch the user information through
    the `FBLoginView` delegate using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first method will fetch the e-mail field only if it is present in the Platform
    response. The second method will replace the user's e-mail with default content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/KhYhdtDE.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the friends view interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we think about social activities, we think about sharing experiences and
    moments of life with our friends.
  prefs: []
  type: TYPE_NORMAL
- en: In this part of the chapter, we are going to create a simple friend picker view
    controller. The controller will display all friends associated with our Facebook
    account and provide the ability to select one or more of them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapters, we are going to use the friend picker to share parts of
    our information with them.
  prefs: []
  type: TYPE_NORMAL
- en: Using Version 2.x of the Facebook SDK, implementing the friends list would involve
    a lot of work compared to the new SDK. Building a friends list with the previous
    SDK would have involved the creation of a new UI component to display friends'
    information, for example, table view controller. The logic behind this is also
    challenging because we are supposed to handle the security token extension and
    parse the response in order to populate the friends list UI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a friends list is a completely different story with Facebook iOS SDK
    3.x. With the Version 3.x of SDK, Facebook engineers worked really well to create
    flawless out-of-the-box, ready-to-use components. One such component is `FBFriendPickerViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: '`FBFriendPickerViewController` encapsulates user interaction and logic to handle
    a user''s friends list. It will provide a table-like UI, because it inherits from
    `UITabelViewController`. The entire communication from/to Facebook Platform is
    completely handled by the new component.'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the customizations we can perform on `FBFriendPickerViewController`
    are the ability to sort by first or last name, changing the way friends' names
    are displayed, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the final result of the UI using the new view
    controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/lxlO1N6Y.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The friends list will only be enabled when the selected users are logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to display the friends list, we need to start by adding a new button
    to the Facebook UI. Open Storyboard and select the Facebook scene. Holding the
    *Ctrl* keyboard button, drag-and-drop a button from the **Object Library** and
    place it underneath the e-mail label. Set the label text, for example **Friends**,
    for the new button. Deselect the option **Enabled** by navigating to **Utilities
    Panel** | **Attribute Inspector**.
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots 1 to 5 show the **Attribute Inspector** with the **Enabled**
    option not checked.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/IA6PwehN.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Friends** button will trigger the code that will create an instance of
    `FBFriendPickerViewController` only if the user is already logged in; otherwise,
    it will be disabled. Since we need to enable and disable the button, we need to
    have a reference of the button in our `LBFacebookViewController`, which will be
    accessed using the `FBLoginView` delegates. To create the button reference, open
    the Assistant Editor and create the friends button reference by dragging and dropping
    the button within the `LBFacebookViewController` interface statement.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/OXMcGTgo.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the user clicks on the **Friends** button, it will trigger the code to
    create the friends list. To map the `click` event on the **Friends** button with
    the `LBFacebookViewController` method, hold the *Ctrl* keyboard button and drag-and-drop
    the button after the `loginViewShowingLoggedOutUser` method. XCode will ask for
    the name of the new method that will map the **Touch Up Inside** event.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/nt3OH8Kl.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After we click on **Connect**, XCode will generate the method following the
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The previous snippet will contain the code to show an instance of `FBFriendPickerViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying FBFriendPickerViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to show the UI friends list component, we need to keep an instance
    of `FBFriendPickerViewController` within `LBFacebookViewController`. Open the
    `LBFacebookViewController.m` file, and add a new instance of `FBFriendPickerViewController`
    within the `interface` statement.
  prefs: []
  type: TYPE_NORMAL
- en: The following code shows the `interface` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We will notice that `FBFriendPickerViewController` is also a delegate of `FBFriendPickerViewController`
    as the previous code snippet is showing on the first line of the `interface` statement.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to update the `onFriendsClick`method to initialize or re-use the
    `friendPickerViewController`property and display the friends list. The next application
    method shows the `onFriendsClick` method implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first part of the method checks whether `friendPickerViewController` is
    already initialized. If it is not initialized, the method will allocate new memory
    for the instance and set title for the UI and current class as delegate for the
    friends list controller. The `loadData` method will load the friends' information
    from the Platform, or from the cache if it is still valid. The `clearSelection`
    method will clear the user selection if the friends list UI was already used.
    At the end of the method, we show the new view controller using the `presentViewController`
    method that will push the `FBFriendPickerViewController` view at the top of the
    UI stack.
  prefs: []
  type: TYPE_NORMAL
- en: As we said, `FBFriendPickerViewController` needs a delegate in order to interact
    with users and the rest of the application.
  prefs: []
  type: TYPE_NORMAL
- en: For the scope of this chapter, we are going to use two delegate methods to handle
    the **Done** and **Cancel** button in `FBFriendPicker` view. In this chapter,
    the two delegate methods will only hide the friends list UI. The next code shows
    the delegate method for `FBFriendPickerViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Both delegate methods in the previous code call `dismissViewControllerAnimated`
    that will pop the friends list UI from the stack.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the friends list using a search bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we created the friends list UI that also includes the
    ability to navigate the user's friends list using the index on the right side
    of the interface.
  prefs: []
  type: TYPE_NORMAL
- en: Users have a lot of friends and sometimes the index cannot be fast enough. We
    would like to provide users with a search bar on top of the friends list.
  prefs: []
  type: TYPE_NORMAL
- en: We will start creating a new class that will inherit from `FBFriendPickerViewController`.
    The new class will contain a `UISearchBar` UI component, and because of it we
    need to set the same class as a `UISearchBar` delegate. While the user is typing
    within the search bar, the new class will filter the friends entries based on
    the search query content.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create the new class, open the **Project Navigator** and select
    the `iLikeBook` folder within **iLikeBook** project. Right-click on it and select
    **New File…**, and then select the `Cocoa Touch` and `Objective-C class` templates.
    Click on **Next** and set the class name, for example `LBFriendPickerViewController`,
    and set `FBFriendPickerViewController` as a subclass. The new class will have
    the same functionalities and properties of `FBFriendPickerViewController`. Click
    on **Next** to create the file. We can now see two new files in the **Project
    Navigator**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to extend our new friend picker controller, we need two more properties
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SearchText`: It is a variable that contains the current search query. The
    `Friend Picker` delegate will access it to filter out the friends that do not
    satisfy the search query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UISearchBar`: It is the UI component that will allow the user to type the
    search query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SearchText`, as we mentioned in the preceding points, will be used to filter
    out friends from the `Friend Picker` list; therefore we can define it as public.
    Open the `LBFriendPickerViewController.h` file, and add the `SearchText`variable
    as a public field. The following listing shows it within the `LBFriendPickerViewController`
    class.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information, you can check these two URLs: [https://developers.facebook.com/docs/reference/ios/3.2/protocol/FBFriendPickerDelegate](https://developers.facebook.com/docs/reference/ios/3.2/protocol/FBFriendPickerDelegate)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.apple.com/library/ios/#documentation/uikit/reference/UISearchBarDelegate_Protocol/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UISearchBarDelegate_Protocol/Reference/Reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Now open `LBFriendPickerViewController.h`; we are going to implement the UI
    for friends search.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start adding the `UISearchBar` component to the `interface` statement. We also
    need to define the current class as `UISearchBarDelegate` in order to capture
    the user''s input as the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `UISearchBar` will appear on top of the friends list, and the width will
    be exactly the same as the container view width. The bar will be built by the
    application after the container view loads.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/KAb33AEJ.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create an `init` method if one does not already exist. Within this method, call
    the parent `init` method and set the `searchBar` variable as `nil`, as displayed
    in the following code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We need to customize the `viewDidLoad` method in order to build the `UISearchBar`
    on the friend picker view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous code shows the new `viewDidLoad` method with the new, not yet defined
    method `addSearchBarToFriendPickerView`. The new method initializes the `searchBar`,
    only if this one is set to `nil`. After the initialization is complete, the `searchBar`
    is added to the view container.
  prefs: []
  type: TYPE_NORMAL
- en: The following snippet shows the `addSearchBarToFriendPickerView` implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method first checks whether the `searchBar` is already initialized;
    if it is not, the method will do it. The `searchBarHeight` variable is the final
    height of `UISearchBar` that will be used as an input parameter to initialize
    the `searchBar` variable when creating a custom frame.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, we will define `searchBar autoresizingMask` in order to have
    the same width as the view container. `UISearchBar` needs a delegate to access
    the user's search query; therefore we set a delegate. Using the `self.searchBar.showsCancelButton`instruction,
    we can set the **Cancel** button within the `UISearchBar` button as visible or
    hidden.
  prefs: []
  type: TYPE_NORMAL
- en: The `searchBar` component needs to be added to the current view. Since `LBFriendPickerViewController`
    is inheriting `FBFriendPickerViewController`, we can receive access to the parent
    view using the `self.canvasView` property. The `searchBar` component will be displayed
    on the top because we defined the frame with position (`0`, `0`).
  prefs: []
  type: TYPE_NORMAL
- en: After adding the search bar, we need to resize the friends table view height
    using `searchBarHeight`.
  prefs: []
  type: TYPE_NORMAL
- en: The UI part is now complete; we still need to take care of the communication
    between the `UISearchBar` and `LBFriendPickerViewController` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a helper method to handle the search, as shown in the following code
    sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method will set the `searchText` property with the current `UISearchBar`
    content value, and will call `updateView`. The `UpdateView` method will call the
    `LBFriendPickerViewController` delegate method to filter out the users. We will
    dive into that method later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: '`UISearchBar` needs the delegate methods to handle a user''s search. We need
    to create three delegate methods to handle the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Search bar text is changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search** button is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cancel** button is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The text change method is pretty simple. While the user is typing, the application
    will dynamically filter out users. The code for the new delegate method is shown
    in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `textDidChange` method uses the `handleSearch` helper to handle the search.
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle the **Search** button, click and create the method as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The only difference with the previous delegate method is the call to `resignFirstResponder`
    that will hide the keypad after clicking on the **Search** button.
  prefs: []
  type: TYPE_NORMAL
- en: The **Cancel** button method is more complicated; it will reset the `searchText`
    and `searchBar` content values as empty strings, update the view, and hide the
    keypad.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As a final touch, we need to override the `clearSelection` method to perform
    the parent duty and reset the `searchText` and `searchBar` contents.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the new friend picker controller, we need to use it. Previously,
    we used the `FBFriendPickerViewController` inside `LBFriendPickerViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: Open `LBFriendPickerViewController.m` and replace the `FBFriendPickerViewController`
    property and its initialization with `LBFriendPickerViewController`, the new class
    just created. You should have only two occurrences of it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The last method we need to implement is the delegate method to filter out the
    users from the friends list. At the end of the `LBFriendPickerViewController.m`,
    create the method shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The method listed in the preceding code will check each of the users in our
    friends list in order to find a match with the current user search query, and
    will return true and false. LBFriendPickerViewController and UISearchBar call
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the final result of the customization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/X7clOEd2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we discussed which information we can fetch using basic permission.
    Using storyboard, we built the profile UI where we display the Facebook profile
    name and picture. Using `FBLoginView`, we implemented login and logout flows without
    handling Facebook session information.
  prefs: []
  type: TYPE_NORMAL
- en: We inserted a new button within the profile UI that will trigger a new modal
    view controller. The new controller inherits from `FBFriendPickerViewController`
    that will enable our social app to easily fetch the friends list.
  prefs: []
  type: TYPE_NORMAL
- en: We customized the friends list UI by inserting a new search component that we
    can use to filter friends based on the user's input.
  prefs: []
  type: TYPE_NORMAL
