["```swift\n/*\n  =============================================\n  Our object is created here as instance of NSNumber.\n  We directly assign a float number to it;\n  =============================================\n*/\n\nNSNumber *sampleNumber = @(3.1415);\n\n/*\n  =============================================\n  Now, we send the built-in message \"intValue\" to convert the float value stored in it to an integer value.\n  =============================================\n*/\n\nNSNumber firstNumber = @([ sampleNumber intValue]);\n```", "```swift\n/*\n  =============================================\n  We create our string with the uppercase characters: \"QWERTY\"\n  =============================================\n*/\n\nNSString *sampleString = @\"QWERTY\";\n\n/*\n  =============================================\n  Now, we send a message to it, requesting to convert the uppercase characters to lowercase\n  =============================================\n*/\n\nsampleString = [sampleString lowercaseString];\n\n/*\n  =============================================\n  After this process, our string has now the characters: \"qwerty\"\n  =============================================\n*/\n```", "```swift\n/*\n  =============================================\n  sampleArray is allocated, initialized and created with the strings \"Item 1\" and \"Item 2\"\n  =============================================\n*/\nNSArray *sampleArray = [[NSArray alloc] initWithArray:@[\n              @\"Item 1\",\n              @\"Item 2\"]];\n//This will throw a compile time error as NSArray is not mutable.\n[sampleArray addObject:@\"Item 3\"];\n```", "```swift\n/*\n  =============================================\n  secondSampleArray is allocated and initialized but not yet created.\n  =============================================\n*/\nNSArray *secondSampleArray = nil;\n\n/*\n  =============================================\n  Later in our code, we can create it setting contents to it, but it also happens once, the contents won't be changed.\n  =============================================\n*/\nsecondSampleArray = @[@\"Item 1\", @\"Item 2\"];\n```", "```swift\n/*\n  =============================================\n  We will create now a mutable version of an array, using the class NSMutableArray.\n  =============================================\n*/\nNSMutableArray *mutableSampleArray = [[NSMutableArray alloc] init];\n\n/*\n  =============================================\n  Now, we assign to it the list of strings:\n  \"String 1\", \"String 2\", \"String 3\"\n  =============================================\n*/\nmutableSampleArray = @[@\"String 1\",\n       @\"String 2\",\n        @\"String 3\"];\n\n/*\n  =============================================\n  Later, we change the 2nd item of the list with the string \"Replacement String\", having our array the list: \"String 1\", \"Replacement String\", \"String 3\"\n  The indexes are 0 based and starts from 0\n  =============================================\n*/\n\n[mutableSampleArray replaceObjectAtIndex:1 withObject:@\"Replacement String\"];\n```", "```swift\n  /*\n  =============================================\n    The variable is allocated and initialized but still has no content, its value is nil.\n  ============================================= */\n  NSString *simpleInitializedString = [[NSString alloc] init];\n  /*\n  =============================================\n    Allocated and initialized by it's custom method, initWithString:, inherited from init. In this case, the variable is initialized with a content, \"Hey!\"\n  ============================================= */\n  NSString *customInitializedString = [[NSString alloc] initWithString:@\"Hey!\"];\n```", "```swift\n#import MultiFraction.h\n\n/*\n  =============================================\n  Creating a MultiFraction object with the default init method, inherited from NSObject.\n  ============================================= */\nMultiFraction *firstMultiFraction = [[MultiFraction alloc] init];\n// Later, when calling a method to calculate the fraction we will\n// get a nil if we handle our instance variables or an error, if\n// we try to calculate as they are, nil values.\n\n/*\n  =============================================\n  Creating a MultiFraction object with the convenience initialization method we've created.\n  ============================================= */\nMultiFraction *secondMultiFraction = [[MultiFraction alloc] initWithFirstNumerator:25 secondNumerator:3 denominator:4];\n// For the secondMultiFraction, when trying to calculate the\n// fraction, we will get 18.75 as a float, if we take any\n// argument as float when calculating the result.\n```", "```swift\n [UIScreen mainScreen]\n```", "```swift\n@interface connectionLibrary : NSObject\n+ (connectionLibrary*)mySharedInstance;\n@end\n```", "```swift\n+ (connectionLibrary*)mySharedInstance {\n  // First, we create a static variable to hold our instance \n  static connectionLibrary *_mySharedInstance = nil;\n  /*\n  Create a static variable to ensure the instance will be initialized only once\n  */\n  static dispatch_once_t initOnce;\n/*\n    Now, the core of the singleton pattern is GCD, Grand Central Dispatch, that executes a block where the initialization method is never called once the class was already initiated.\n*/\n    dispatch_once(&initOnce, ^{\n    _mySharedInstance = [[connectionLibrary alloc] init];\n});\n  return _mySharedInstance;\n}\n```", "```swift\nconnectionLibrary *sharedInstance = [connectionLibrary mySharedInstance];\n```", "```swift\n@implementation Book {\n  int _numberOfPages;\n  int _numberOfChapters;\n  NSArray *_authorsInfo;\n}\n```", "```swift\n@interface Book : NSObject\n@property (strong, nonatomic) NSString *chapterNote;\n@end\n```", "```swift\nBook *objCBook = [[Book alloc] init];\n// This is our setter, we are setting an value to it\nobjCBook.chapterNote = \"I really love this chapter\";\n//This non dot syntax setter is also valid [objCBook setChapterNote:@\"I really love this chapter\"];\n/*\n  This is our getter, we get the value hold on chapterNote and save it in myLastNote\n*/\nNSString *myLastNote = objCBook.chapterNote\n```", "```swift\n-(BOOL) doYouLikeThisBook\n{\n  return true;\n}\n```", "```swift\n-(id) initSomethingWithoutKnowingTheType\n{\n  self = [super class];\n  return self;\n}\n```", "```swift\n-(void) storeUserDetails:(NSString *)userName withID(int)userID\n{\n  self.name = userName;\n  self.id = userID;\n}\n```", "```swift\n// Here we print a message, it's already a string.\nNSLog(@\"I'm a message. A string\");\n```", "```swift\n/*\n    Now we print the string value stored on a property\n    The console will print the message: \"Hello, Mr. Gaius Julius Caesar\"\n*/\nNSString *myStringObject = @\"Gaius Julius Caesar\";\nNSLog(@\"Hello, Mr. %@\", myStringObject);\n```"]