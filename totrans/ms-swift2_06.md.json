["```swift\nprotocol PersonProtocol {\n    var firstName: String {get set}\n    var lastName: String {get set}\n    var birthDate: NSDate {get set}\n    var profession: String {get}\n\n    init (firstName: String, lastName: String, birthDate: NSDate)\n}\n```", "```swift\n  func updatePerson(person: PersonProtocol) -> PersonProtocol {\n      // Code to update person goes here\n      return person\n   }\n```", "```swift\nvar myPerson: PersonProtocol\n```", "```swift\nvar people: [PersonProtocol] = []\n```", "```swift\nvar test = PersonProtocol(firstName: \"Jon\", lastName: \"Hoffman\", birthDate: bDateProgrammer)\n```", "```swift\nvar myPerson: PersonProtocol\n\nmyPerson = SwiftProgrammer(firstName: \"Jon\", lastName: \"Hoffman\", birthDate: bDateProgrammer)\nprint(\"\\(myPerson.firstName) \\(myPerson.lastName)\")\n\nmyPerson = FootballPlayer(firstName: \"Dan\", lastName: \"Marino\", birthDate: bDatePlayer)\nprint(\"\\(myPerson.firstName) \\(myPerson.lastName)\")\n```", "```swift\nvar programmer = SwiftProgrammer(firstName: \"Jon\", lastName: \"Hoffman\", birthDate: bDateProgrammer)\n\nvar player = FootballPlayer(firstName: \"Dan\", lastName: \"Marino\", birthDate: bDatePlayer)\n\nvar people: [PersonProtocol] = []\npeople.append(programmer)\npeople.append(player)\n```", "```swift\nfor person in people {\n    print(\"\\(person.firstName) \\(person.lastName): \\(person.profession)\")\n}\n```", "```swift\nJon Hoffman: Swift Programmer\nDan Marino: Football Player\n```", "```swift\nfor person in people {\n  if person is SwiftProgrammer {\n     print(\"\\(person.firstName) is a Swift Programmer\")\n}\n}\n```", "```swift\nfor person in people {\n    switch (person) {\n    case is SwiftProgrammer:\n        print(\"\\(person.firstName) is a Swift Programmer\")\n    case is FootballPlayer:\n        print(\"\\(person.firstName) is a Football Player\")\n    default:\n        print(\"\\(person.firstName) is an unknown type\")\n    }\n}\n```", "```swift\nfor person in people where person is SwiftProgrammer {\n    print(\"\\(person.firstName) is a Swift Programmer\")\n\n}\n```", "```swift\nfor person in people {\n    if let p = person as? SwiftProgrammer {\n        print(\"\\(person.firstName) is a Swift Programmer\")\n    }\n}\n```", "```swift\nfor person in people where person is SwiftProgrammer {\n  let p = person as! SwiftProgrammer\n}\n```", "```swift\nprotocol DogProtocol {\n    var name: String {get set}\n    var color: String {get set}\n}\n```", "```swift\nstruct JackRussel: DogProtocol {\n    var name: String\n    var color: String\n}\n\nclass WhiteLab: DogProtocol {\n    var name: String\n    var color: String\n\n    init(name: String, color: String) {\n        self.name = name\n        self.color = color\n    }\n}\n\nstruct Mutt: DogProtocol {\n    var name: String\n    var color: String\n}\n```", "```swift\nprotocol DogProtocol {\n    var name: String {get set}\n    var color: String {get set}\n   func speak() -> String\n}\n```", "```swift\nstruct JackRussel: DogProtocol {\n    var name: String\n    var color: String\n     func speak() -> String {\n        return \"Woof Woof\"\n    }\n}\n\nclass WhiteLab: DogProtocol {\n    var name: String\n    var color: String\n\n    init(name: String, color: String) {\n        self.name = name\n        self.color = color\n    }\n    func speak() -> String {\n        return \"Woof Woof\"\n    }\n\n}\n\nstruct Mutt: DogProtocol {\n    var name: String\n    var color: String\n    func speak() -> String {\n        return \"Woof Woof\"\n    }\n\n}\n```", "```swift\nprotocol DogProtocol {\n    var name: String {get set}\n    var color: String {get set}\n}\n\nextension DogProtocol {\n    func speak() -> String {\n        return \"Woof Woof\"\n    }\n}\n```", "```swift\nstruct JackRussel: DogProtocol {\n    var name: String\n    var color: String\n}\nclass WhiteLab: DogProtocol {\n    var name: String\n    var color: String\n\n    init(name: String, color: String) {\n        self.name = name\n        self.color = color\n    }\n}\n\nstruct Mutt: DogProtocol {\n    var name: String\n    var color: String\n}\n```", "```swift\nlet dash = JackRussel(name: \"Dash\", color: \"Brown and White\")\nlet lily = WhiteLab(name: \"Lily\", color: \"White\")\nlet buddy = Mutt(name: \"Buddy\", color: \"Brown\")\nlet dSpeak = dash.speak()  // returns \"woof woof\"\nlet lSpeak = lily.speak()  // returns \"woof woof\"\nlet bSpeak = buddy.speak() // returns \"woof woof\"\n```", "```swift\nstruct Mutt: DogProtocol {\n    var name: String\n    var color: String\n    func speak() -> String {\n        return \"I am hungry\"\n    }\n}\n```", "```swift\n protocol TextValidationProtocol {\n\n    var regExMatchingString: String {get}\n    var regExFindMatchString: String {get}\n    var validationMessage: String {get}\n\n    func validateString(str: String) -> Bool\n    func getMatchingString(str: String) -> String?\n}\n```", "```swift\nstruct AlphaValidation1: TextValidationProtocol {\n    static let sharedInstance = AlphaValidation1()\n    private init(){}\n\n    let regExFindMatchString = \"^[a-zA-Z]{0,10}\"\n    let validationMessage = \"Can only contain Alpha characters\"\n\n    var regExMatchingString: String { get {\n        return regExFindMatchString + \"$\"\n        }\n    }\n\n    func validateString(str: String) -> Bool {\n        if let _ = str.rangeOfString(regExMatchingString, options: .RegularExpressionSearch) {\n            return true\n        } else {\n            return false\n        }\n    }\n    func getMatchingString(str: String) -> String? {\n        if let newMatch = str.rangeOfString(regExFindMatchString, options: .RegularExpressionSearch) {\n            return str.substringWithRange(newMatch)\n        } else {\n            return nil\n        }\n    }\n}\n```", "```swift\nprotocol TextValidationProtocol {\n    var regExFindMatchString: String {get}\n    var validationMessage: String {get}\n}\n```", "```swift\nextension TextValidationProtocol {\n\n    var regExMatchingString: String { get {\n        return regExFindMatchString + \"$\"\n        }\n    }\n\n    func validateString(str: String) -> Bool {\n        if let _ = str.rangeOfString(regExMatchingString, options: .RegularExpressionSearch) {\n            return true\n        } else {\n            return false\n        }\n    }\n    func getMatchingString(str: String) -> String? {\n        if let newMatch = str.rangeOfString(regExFindMatchString, options: .RegularExpressionSearch) {\n            return str.substringWithRange(newMatch)\n        } else {\n            return nil\n        }\n    }\n}\n```", "```swift\nstruct AlphaValidation: TextValidationProtocol {\n    static let sharedInstance = AlphaValidation()\n    private init(){}\n\n    let regExFindMatchString = \"^[a-zA-Z]{0,10}\"\n    let validationMessage = \"Can only contain Alpha characters\"\n}\n\nstruct AlphaNumericValidation: TextValidationProtocol {\n    static let sharedInstance = AlphaNumericValidation()\n    private init(){}\n\n    let regExFindMatchString = \"^[a-zA-Z0-9]{0,15}\"\n    let validationMessage = \"Can only contain Alpha Numeric characters\"\n}\n\nstruct DisplayNameValidation: TextValidationProtocol {\n    static let sharedInstance = DisplayNameValidation()\n    private init(){}\n\n    let regExFindMatchString = \"^[\\\\s?[a-zA-Z0-9\\\\-_\\\\s]]{0,15}\"\n    let validationMessage = \"Display Name can contain only contain Alphanumeric Characters\"\n}\n```", "```swift\nvar validators = [UITextField: TextValidationProtocol]()\n```", "```swift\nvalidators[alphaTextField] = AlphaValidation.sharedInstance\n\nvalidators[alphaNumericTextField] = AlphaNumericValidation.sharedInstance\n\nvalidators[displayNameTextField] = DisplayNameValidation.sharedInstance\n```", "```swift\nalphaTextField.addTarget(self,   action:Selector(\"keyPressed:\"), forControlEvents: UIControlEvents.EditingChanged)\nalphaNumericTextField.addTarget(self, action: Selector(\"keyPressed:\"), forControlEvents: UIControlEvents.EditingChanged)\ndisplayNameTextField.addTarget(self, action:           Selector(\"keyPressed:\"), forControlEvents: UIControlEvents.EditingChanged)\n```", "```swift\n@IBAction func keyPressed(textField: UITextField) {\n        if let validator = validators[textField] where !validator.validateString(textField.text!) {\n            textField.text = validator.getMatchingString(textField.text!)\n            messageLabel?.text = validator.validationMessage\n        }\n    }\n```"]