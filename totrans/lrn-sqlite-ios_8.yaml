- en: Chapter 8. More Features and Advances in SQLite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will explore some new features in SQLite, and it will also cover
    the recent advances made in this database. This chapter will show you how SQLite
    is exposed to other languages and frameworks and discuss the extensions of the
    C API, the usage of **PhoneGap**, and other cross-platform development environments.
    This chapter will also outline SQLite's other features and how SQLite has advanced
    to ensure that all those who use it can master it quickly.
  prefs: []
  type: TYPE_NORMAL
- en: You will also look at how SQLite has changed in recent years, how it has advanced
    to be integrated with a variety of existing technologies, and how its simple,
    easy-to-use formula has guaranteed its popularity to others. The amount of apps
    that use database technology, without disclosing the backend or local database,
    is incredible. SQLite, as will be shown later, has advanced to new levels and
    kept its simplicity but with developers pushing it to achieve new heights and
    popularity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Firefox** and SQLite extensions to their browsers are available for administration
    purposes. SQLite has gone through several code changes, and in the future, it
    will continue to do so or be overtaken by something newer.'
  prefs: []
  type: TYPE_NORMAL
- en: Adobe's Enterprise Management system works with PhoneGap, which uses SQLite.
    Because of its simple setup, there are several cases of SQLite using different
    technologies and integrating well.
  prefs: []
  type: TYPE_NORMAL
- en: The growth of relational database management systems to this date have been
    very strong, and if the data requires industrial strength, storage, and application,
    SQLite is the right format. However, in more recent years, solutions such as NOSQL,
    which purely rely on the data selected from technologies such as REST APIs or
    web services, have not used **RDBMS** (**relational database management system**)
    to store their data. It will be retrieved and held in a file type structure, in
    effect, as its own version of RDMS. SQLite does not have the industrial support
    of tools like **database backup** or **database recovery**. In a world of mobile
    devices where the growth has been intensive and beating all types of expectation,
    SQLite is by far the easiest and quickest one to use with a minimum time spent
    learning.
  prefs: []
  type: TYPE_NORMAL
- en: The **Firefox SQLite Manager** facility is a good software extension to the
    browser. Once installed, it can serve as an aid to various processes of the database
    administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Its simplicity and flexibility make it great for developing and testing. There
    is no mechanism to ensure performance, and it is possible to tune up the library.
    SQLite is great for embedded applications that are somewhat fixed, single user,
    mobile users, and gaming information storage.
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to download and install SQLite. Once this is done, it gets fired
    up to work.
  prefs: []
  type: TYPE_NORMAL
- en: PhoneGap plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to develop a software for PhoneGap with SQLite, the environment
    must be set up properly for the PhoneGap framework to work correctly with SQLite.
    The PhoneGap environment will enable the SQLite database to be set up and connected
    with Xcode, toward the end, to produce an iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a native SQLite plugin for PhoneGap, called **Brodysoft** (refer
    to [https://build.phonegap.com/plugins/2368](https://build.phonegap.com/plugins/2368)),
    that provides an interface for the storage and usage of the standard Web SQL database
    standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the demand for mobile technology, mobile apps, and mobile development grows,
    the need for further advancement, with products such as PhoneGap, will be demanding
    the following, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: PhoneGap will have increased application size limits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will have support for different plugins, including the Cordova plugins repository
    `plugins.cordova.io`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional PhoneGap plugins may not have to go through an approval process and
    can be approved easily
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be a facility to upload your own plugins to your own development
    area so that you can test them privately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To support additional plugins, which are more than 600 on the PhoneGap environment,
    the `source` attribute can be used.
  prefs: []
  type: TYPE_NORMAL
- en: PhoneGap plugins, unlike before, can contain compiled components such as frameworks,
    `.jar` files, and other related binaries. There is a lot of documentation about
    this procedure on the PhoneGap site. PhoneGap is now moving ahead with an `Amazon
    Mobile Ad Network` plugin, which will allow developers to monetize their app.
    This is because the `Amazon Ads` API has been created to be used within applications
    to facilitate advertising, and is a platform for this sole purpose. It will be
    used across different tablets, mobile devices, different utilities, and game apps.
  prefs: []
  type: TYPE_NORMAL
- en: The `cordova.xml` file used by **Cordova** or PhoneGap is the main parameter
    file where configuration changes are made to the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, using the native Cordova/PhoneGap plugin for Android and iOS,
    the HTML5 Web SQL API can be used to code directly, as shown in the following.
    Here, the code is waiting to see if the API has been loaded before attempting
    to open the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is a plugin available and developed for the PhoneGap system [https://github.com/litehelpers/Cordova-sqlite-storage](https://github.com/litehelpers/Cordova-sqlite-storage).
    In order to use this plugin, add the following code to your `config.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This plugin is compatible with both iOS and Android operating systems and also
    works with Cordova.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following piece of code is essential to ensure that a check is done, to
    see if the device is ready and if Cordova is ready to load:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding plugin, it makes the inclusion of SQL directly into HTML5
    easier and faster, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It becomes easy to add the necessary HTML content, and this works with both
    iOS and Android. The relationship between HTML5, SQLite, and PhoneGap to compile
    is an advancement of technology.
  prefs: []
  type: TYPE_NORMAL
- en: Not all the aspects of the `ALTER TABLE` statement are implemented in SQLite,
    and there is no support for the `GRANT` or `REVOKE` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions to the C API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQLite binding functionality extends the popularity and diversity of the SQLite
    language, but it is not supported by the core developers of the database. Instead,
    the SQLite community takes care of these integrations, and is well-documented
    online. Scripting languages, such as Perl, PHP, and Python or Java, work nicely
    with SQLite.
  prefs: []
  type: TYPE_NORMAL
- en: 'The C API interface specification for SQLite has several interface elements
    and can be grouped into the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Category one has a list of objects and datatypes utilized by the SQLite library.
    There are over a dozen objects and datatypes in it. The most meaningful and common
    ones are the database object called `sqlite3` and the prepare statement called
    `sqlite3_stmt.`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Category two will have its list of constants used by SQLite and are referenced
    by the usage of the `#defines` syntax in the `sqlite3.h` header file. These are
    standard constants, such as `SQLITE_OPEN_READONLY.`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Category three is a list of all the functions available and the methods they
    use within the objects, for returning values and usage of standard constants.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, the `int sqlite3_sleep(int);` function is based on the number of
    milliseconds that it will suspend the execution of an instruction.
  prefs: []
  type: TYPE_NORMAL
- en: As mobiles become more powerful, there will always be an alteration to the amount
    of memory resources that SQLite can handle or use. The technology that is used
    within SQLite is called page cache. Now, page caching is important since this
    is how memory is used and set up for the SQLite performance. It has one I/O algorithm
    and two search algorithms. There is a binary search that uses the index of the
    table and full on brutal attack to read the full table. Since the limited decisions
    were made about how to write and implement them, and since it is more general
    and not designed for any specific application, the performance generally may not
    be equal to what is expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although, SQLite does have an optimizer, it is not the most advanced of its
    type, but it is practical. In the following example, we see the creation of two
    tables and a join. We will use the `EXPLAIN` statement and then ask SQLite to
    see how it would get the results. As the results will begin to show, it will use
    one of the category formats discussed earlier in this section, which is just a
    major scan. It will only work properly if there is a `SELECT` statement with `JOIN`
    but with an index or a key on a simple query. On a complex query, you need to
    use the `EXPLAIN` statement. We just select one column from the first table and
    a scan of the whole table takes place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In terms of page cache, SQLite, as mentioned earlier, uses a disk with a page-based
    format. The cache along with SQLite is pulled from disk. There is no automatic
    recycling of pages; it can be reused once the page is empty. Also, if a page is
    reused again and again, it will become fragmented, and its data will be spread
    across the database file, which will decrease in terms of the performance.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously in this book, there is **Core Data** from Apple, standard
    for iOS, but SQLite, which is free, is the dominant and cross-platform database
    solution for mobile.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the advancement of new frameworks, there is a new technology, which aims
    to replace both: SQLite and Core Data. It is called **Realm**. It is free for
    both iOS and Android and would be a good product to investigate. While the others
    maybe limited, this product must ensure that it is easy to set up, use, and administer.
    So far, it is being used by a variety of large e-commerce and data sites, such
    as Pinterest or BBC. [Realm.io](http://Realm.io) is the location for this database
    software, is modern API for today''s changeable market.'
  prefs: []
  type: TYPE_NORMAL
- en: With Realm, there is a plugin for **Xcode**, which seems to hook in and work
    well as per the demo. There is a complete API reference, which works with Objective-C,
    Swift, and Java. Realm also has its own Realm Browser from the Apple app store,
    which is used as an app to manage the databases, such as the Firefox plugin for
    SQLite.
  prefs: []
  type: TYPE_NORMAL
- en: Write Ahead Logging with SQLite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Write Ahead Logging** with SQLite, also known as **WAL**, is the standard
    method that states how SQLite implements the `rollback` and `commit` processes
    with this mobile database system. The disk access and input and output operations
    are more sequential, using the `WAL` methods. Using `WAL` will involve less of
    the `fsync()` functions and operations. It means it is more likely to work properly
    on different operating systems and smartphones. `WAL` is faster on most operations
    and provides better concurrencies, as there are no conflicts with processes reading
    and writing at the same time with a big reduction in any data block.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As much as there are advantages, there are also limitations to this method.
    `WAL` does not work efficiently with very large transactions, but much better
    with smaller transactions. For transactions of around 100 megabytes, it will work
    fine, but over a gigabyte, it will start to reduce its efficiency. There is also
    another issue: `WAL` could fail operations if it encounters a *disk full* error,
    although, an extra operation is **checkpointing**, which is embedded as a part
    of the system. Developers need to be aware of this checkpointing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`WAL` and `rollback` may be slower than the current/traditional method of operation.
    This is because of the amount of reads and low attempts of writes on the database.
    This is only in the range of 1-2%. Another disadvantage is that the database page
    size cannot be changed when using the WAL mode even if it is an empty database.
    To resolve the problem, you have to restore from a backup using the provided **BACKUP
    API**, and you must be in a rollback journal mode in order to succeed. There is
    also a problem reading the **read-only WAL** databases.'
  prefs: []
  type: TYPE_NORMAL
- en: '`WAL` works by creating and writing up a copy of the original database with
    no changes into a new/separate rollback journal file. Changes are then directly
    made to the database file. If there is a crash and the system has to perform the
    `rollback` operation, then the unchanged original version is played back to the
    database file, which will change to its original state. The `commit` operation
    is done when the rollback journal is deleted. It is quite an effective procedure.
    Transactions writing to disk are always fast because the content is written only
    once.'
  prefs: []
  type: TYPE_NORMAL
- en: The B-tree usage with SQLite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The arbitrary storage of leaf nodes and its location on the actual disk will
    not link up or respond to the index order or any logical positioning. Therefore,
    a database search algorithm is used with the right structure, to change the position
    and quickly output a balanced search tree or, in short, a B-tree. Each branch
    of data will have its leaf nodes that link or refer to the memory location that
    is used to store each and every table of the database.
  prefs: []
  type: TYPE_NORMAL
- en: B-tree allows sequential access, deletions, and insertions, based on the general
    binary search tree in a node that can have two or more children. When data is
    removed or added, the number of child nodes will change, and in order to maintain
    a specific range, some internal nodes may join or split. Every internal node within
    a B-tree structure will have a number of keys. Each of these keys will have a
    value and will be divided into subtrees. B-tree is a good way to search for data
    with a key associated to find the right data, but it is inefficient at search
    data with a query string; it uses an index to speed up this searching. B-trees
    are an efficient way of searching data with a key, and when executed correctly,
    they become very quick. This is an explanation about B-tree and how it is applied
    with SQLite.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple Swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the advent of Swift and Swift2, there is the use of an environment called
    a **playground** now. It is a place where you can set up a quick environment with
    some code and then see the results. It is a quick, new way to use the new setup.
    When you start, it will have a main window and the results on the second, split
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Xcode, navigate to **New** | **Playground** and the following screenshot
    will be shown. Give a name to your playground. You can have several running of
    them under different platforms, so a meaningful name would be useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple Swift](img/4725_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this is created and the **Next** button is clicked on, the following screen
    will appear. Here, you can create the code, test ideas and code snippets, and
    just try it out. It is a great and simple idea, which will help motivate existing
    developers, and create new developers for the future:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple Swift](img/4725_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, there is a split page on the right-hand
    side, which can be adjusted as per requirement. The code appears on the left-hand
    side, and the results appear on the right-hand side. In the preceding code, a
    call to `UIKIT` is made; the next line creates a variable called `str` and has
    a default string value of `Hello playground`.
  prefs: []
  type: TYPE_NORMAL
- en: '**UIKit** is the core foundation of iOS framework that is used for on app development.
    After `var` is defined as `str` to equal `Hello Playground` in order to change,
    it should be defined as `str = New Playground`, which will reassign the variable
    to a new value. Creating a default system, using the `var` statement, and then
    assigning it, shows that the default variable value can be changed. However, if
    you use the `let` statement to say `let str =new play` and straight after that
    add `str =newnewplay line`, the system would throw an error, because you cannot
    change the value of a constant with the `let` command.'
  prefs: []
  type: TYPE_NORMAL
- en: The playground can accept different types of data types, as you would imagine,
    making it a fun but productive way to get into development or test new ideas.
    In the next simple example, a variable called `age`, with a datatype of `int`,
    is set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'A default value of `25` is given to this value. Then, take the value of age
    and multiply it by `10`, and you will get a new value of `250`, as shown in the
    following screenshot. This is the beauty of the playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple Swift](img/4725_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Swift has a good range of comparison operators, just as most languages, but
    you can use the `=` and `>` ways or the `<` way as well, as shown the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple Swift](img/4725_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Swift interpolation is also easier with Swift. By creating a variable and
    then using the command to print the name , for example, by using the `\(name)`
    where name is variable name, as shown in the following screenshot. It is easy,
    but it is good to practice this again and again so that the information is locked
    inside your mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple Swift](img/4725_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the following screenshot, the usage of the `+` concatenation does
    not work in Swift, especially the merging of string, doubles, or integers. But
    the expression in the next image clearly shows how `\` between the `name`, `age`,
    or `latitude` can be a part of the correct syntax, expressing the output properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple Swift](img/4725_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The use of arrays is easier in Swift, and these arrays will store a collection
    of data, such as a grid, as a part of a big collection of information. An array
    called `oddNumbers` will have four figures, such as `(3, 5, 7, 9)`. There will
    be another array called `songs`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple Swift](img/4725_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Swift language is vast and has many examples, but we can't cover all of
    them in this short chapter. This chapter will show you the updates from SQLite,
    PhoneGap, and some updates on Swift.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the `for` loop is an easier one to use, which is clearly shown
    in the following scrweenshot. In this statement, the print statement would have
    run 10 times as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple Swift](img/4725_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is another example of trying to use the `for` command where the number
    in the loop is not required and `_` is used instead. But, the `str` print command
    has completed its execution five times because the word `gone` was sought, printed,
    and concatenated, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple Swift](img/4725_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned previously, the use of playgrounds will be—as the name suggests—
    *Swift and fun to use*.
  prefs: []
  type: TYPE_NORMAL
- en: Just cut and paste it in code and then run it. From Xcode 7 and beyond, the
    actual code that you can put into playgrounds will be rich, have comments, and
    be much more than pseudo coding, because it can be added into your apps.
  prefs: []
  type: TYPE_NORMAL
- en: You will be able to add rich text features, comments, and other necessary text
    that will aid the development and creativity of the programming process.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that when an update of an API is released, it will be a great and fast
    way to look at the API and write or hack some code to make it work in playground.
    Apart from being informative and quick, it will also serve as a training tool
    for you and your colleagues. It will boost training sessions, and enable developers
    to try new ideas and programming code without hindrance to others and their common
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: What a beautifully interactive and modern way to learn and use the existing
    programming skills to gain new knowledge. The usage and availability of an interactive
    debugging console in Swift allows a change/enhancement to the product that modernizes
    its efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Since it was designed from the ground up, Swift aimed to be quick, fast in action
    and coding, and work with both the Objective-C interoperability and Swift to include
    and shared libraries, code, and values, as modern 21st century compiler will aid
    its dominance in the coming years. Objective-C and Swift code can co-exist and
    work together or separately.
  prefs: []
  type: TYPE_NORMAL
- en: The built-in high performance compiler has been created to maximize the Apple
    hardware, protocols, and network availability. It is optimized to run very quickly
    and improve development and compilation speeds.
  prefs: []
  type: TYPE_NORMAL
- en: As part of its portfolio, the Swift language is one of the most modern languages,
    using the "best of" other scripting languages and removing problems such as poor
    performance, or syntax related issues to move on from the C and Objective-C code
    paradigm. There are many languages out there. But Swift is the only one where
    you can code and learn in a modern way. By learning now, you are preparing for
    the near future, where this language will be popular. It is a full successor to
    Objective-C and C-related languages.
  prefs: []
  type: TYPE_NORMAL
- en: Swift has been designed to be modern and opt out of the functionality that would
    actually stop a programmer developing. So, all the stops for slow development
    are extinct. For example, all values are, by default, not null. The use of safety
    for the language has been encouraged and built as part of the software, for example,
    a variable uses the `var` statement, and the `let` statement will be there for
    constants. When defining any "Swift" object for example, the value won't be nil
    because the compiler will deal with it and set it as a part of the safety regime.
    Enforcing these types of niceties encourages better, professional, cleaner, fun,
    and innovative code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Swift has a superbly modern and much-improved error-handling model that will
    provide a clear and concise way to develop and gain modern skills using state-of-the-art,
    object-oriented technology. It also captures any necessary error so that the program
    does not crash, and deal with it. It works nicely with **NSError** and other related
    iOS frameworks. For example, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Swift2 has now been made open source, which will encourage many more users,
    on many different platforms, to architect, design, and develop software. It will
    enable Apple to get into areas of development often used by their competitors
    in the market place. It will have a huge following, and more so when those faithful
    Objective-C programmers change to Swift.
  prefs: []
  type: TYPE_NORMAL
- en: New, interesting, and heavy duty code can be written in Swift using some great
    and powerful language/syntax, with commands such as `repeat`, `defer`, and `guard`.
    Apple is also providing a migration tool to convert code to new playgrounds and
    application development code for easy execution. These are some of the benefits
    that await us for development using Swift2.
  prefs: []
  type: TYPE_NORMAL
- en: Swift is designed to be modern, Swift2 uses information, functionality, and
    the compiler development from modern research, programming languages, and previous
    experience of different Apple development, product and coding skills. A modern
    approach, and the ability to structure extensions and protocols, will ensure that
    it is around for some time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned some advanced aspects and future advances of SQLite
    and how it fits with the current cross-platform development. The chapter outlines
    the changes of SQLite and its growth and links with PhoneGap. PhoneGap also has
    integrated with content management systems, such as Adobe Enterprise Manager,
    which has had several advances in technology, and client license purchases have
    rocketed its popularity. In this chapter, you have also touched on what is possible
    in the new Swift language and how it will affect the future of games, apps, and
    utilities.
  prefs: []
  type: TYPE_NORMAL
