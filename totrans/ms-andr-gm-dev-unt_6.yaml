- en: GameScene and SceneFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, we have only worked with the startScene but in this chapter
    we will see how to add other scenes to the game, and we'll need a MainMenu scene
    from where we can go to other scenes, like the options or the achievements scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these scenes will have specific game objects and buttons which will
    enable us to either change settings or buttons that can take us back to the MainMenu
    Scene.
  prefs: []
  type: TYPE_NORMAL
- en: The MainMenu scene also needs to have a play button which should link to the
    startScene which in turn is responsible for starting the game.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, we can add more scenes and menus according to the needs of the game.
  prefs: []
  type: TYPE_NORMAL
- en: Let us first see how to add buttons to the startScene, so that at the end of
    the game we can restart the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter includes the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing the project folder structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a game restart button to the startScene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a pause button to the startScene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a MainMenu button to the startScene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a MainMenu scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an Options scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an Achievements scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding buttons to the startScene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, we saw how to add text to the scene. However, we can also
    add buttons to the scene. The button creation process is the same as for creating
    a text UI. Go to GameObjects | UI | Button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A button will be created in the scene, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_002.png)'
  prefs: []
  type: TYPE_IMG
- en: A button will have a Canvas, a Button, and a Text component. If you are creating
    a button in a scene where a Canvas component already exists, it will just use
    the current Canvas and create the button beneath it.
  prefs: []
  type: TYPE_NORMAL
- en: We have the Canvas component from the previous chapter. Click on the button
    in the Hierarchy window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The button has Rect Transform, Canvas Renderer, Image (Script), and Button
    (Script) components. We have already come across the Rect Transform and Canvas
    Renderer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_003.png)'
  prefs: []
  type: TYPE_IMG
- en: You can specify the image of the button in the Image (Script) component. To
    set the image, you will import an image and convert it to Sprite types. You can
    only assign it to the source image after you have assigned the image to a Sprite
    type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Color: You can specify the button color; otherwise, you can set the default
    color as white.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Material: If you would like to assign a specific texture it can be done here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raycast Target: This allows the target to clickable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image Type: You can use the image as it is or you can change it to tiled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next in the Button (Script) section, we can specify what the button should do
    once it is clicked. By clicking on Interactable option, we specify that the button
    will change to something else once it is highlighted, pressed, or disabled.
  prefs: []
  type: TYPE_NORMAL
- en: The rate at which the button is changed once it has been clicked on is specified
    by the Fade Duration parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Text (Script) specifies whether any text need to be shown. If text is appropriate,
    you can specify the text in the text box. Otherwise you can leave it blank. It
    is generally better to have buttons that are standard and self-explanatory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_004.png)'
  prefs: []
  type: TYPE_IMG
- en: Organizing the folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `resources` folder for this chapter, you will see a bunch of images for
    buttons. Drag and drop the buttons into a folder called `buttons`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also a good time to start organizing your folders a bit. For the sake
    of convenience and personal sanity, it is better to put assets into folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I have created folders structure with the following folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '3dAssets: Contains player FBX, You can also add other 3D objects, like a 3D
    environment, and 3D meshes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'animController: I have placed Animation Controllers here. When you have lot
    of enemies, you will probably have separate Animation Controllers for each, so
    it is better to also have a separate controller for each.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'buttons: Sprites for buttons can go in here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fonts: Although Arial is a beautiful font, you might want to choose a font
    that it is more suitable to your game. So, create a folder to put these here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Materials: Once again, more objects mean more materials, so get organized!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'prefabs: Put all prefabs in a separate folder so that they are easier to access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scenes: Scenes are the most accessed files when creating a game, so keep them
    in a separate folders for easy access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scripts: Overtime, you might use a lot of scripts for different things so create
    separate folders for these as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you open the buttons folder, it looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The button images all have a small arrow on their right-hand edge. That is
    because they have already been converted to Sprite types. To convert an image
    to sprite, select the image and in the Inspector pane, and change the Texture
    Type field to Sprite (2D and UI) option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_007.png)'
  prefs: []
  type: TYPE_IMG
- en: Do the same for all the buttons in the buttons folder.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a game restart button in the startScene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now create a new button in the startScene and rename the button to resetBtn
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Inspector pane, under the Source Image field, select the resetBtn2 Sprite
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Leave the rest of the parameters as they are. You will also see a preview of
    the reset button in the Inspector pane along with its dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Position the button so that it is just under and to the right of the GAMEOVER!!!
    text. By this we will make it accessible to the player''s thumb:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once positioned, it should look like the following in the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we have to create a small script so that, when the button is clicked, the
    startScene is called. To do this, create a new script, call it buttonClick, and
    save it in the `Scripts` folder. Inside the script add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `SceneManager.LoadScene` function is responsible for loading the scene in
    Unity.
  prefs: []
  type: TYPE_NORMAL
- en: When the button is clicked, we will select the `OnButtonClick` function, then
    pass in a name of the scene to be loaded, and this string will be passed into
    the `LoadScene` function, which will load the scene itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now create an empty game object by going to GameObject| CreateEmpty. Name it
    buttonClickGo. It doesn''t matter where this game object is located in the scene.
    Now add the `buttonClick` script to this game object, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the `resetBtn` in the Hierarchy. In the Inspector pane for the button,
    you will see an On Click () section below the Button (Script) section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_014.png)'
  prefs: []
  type: TYPE_IMG
- en: In the first dropdown menu, select Editor and Runtime option, so the function
    can be called inside the editor during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select the buttonClickGO game object from the dropdown list, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_015.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, select the `buttonClick.onButtonClick` function from the dropdown. This
    is under ButtonClick | onButtonClick (string):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_016.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, enter the string as the name of the scene that will gets called--in this
    case we want to call the startScene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We still need to hide the reset button till the game is over. So, in the `gameScript`,
    create a public `Button` type, and call it `resetButton`, shown as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in the `Start` function we set the active property to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will ensure that the reset button won''t be visible initially. Finally,
    once the game is over, update the `SetActive` function to `true` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For Unity to get the scene you want it to load, you need to add it to the Scenes
    In Build list in Build Settings option. So, go to File | Build Settings and click
    the Add Open Scenes button at the bottom, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_018.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the scene has been added, close the window. Now run the game and, once
    the game is over, you can press the reset button and the game will start again.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a pause button to the startScene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we are in startScene, let's add one more type of button, called a *toggle*
    button, to pause or unpause the game.
  prefs: []
  type: TYPE_NORMAL
- en: Go to GameObject | UI and create a new toggle button. Once created, position
    it at the top right of the game screen. Rename the button to pauseBtn.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like other buttons and UI elements, it has a Rect Transform section which can
    be used to position the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_019.png)'
  prefs: []
  type: TYPE_IMG
- en: It also has a Toggle (Script) which can be set to the default values. Select
    the Background tab, to choose the background image to be used for the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Image (Script) under Background, select the pauseBtnOff Sprite type
    as the background image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_020.png)'
  prefs: []
  type: TYPE_IMG
- en: There is also a label tab for any text script, which you can leave blank as
    we will only be using the image.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you click the button, it will create a tick mark over the pause image
    to specify that the button is toggled. If you click on it again it will revert
    to the usual image.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the `gameScript` file, we create a public variable toggle type, called
    `pauseButton`, and also create a `public` Boolean variable, called `bIsGamePaused`,
    and initialize it to `false`. We will use this newly created Boolean variable
    to go through the player and AI update loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in the `gameScript`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next, in the `Update` function, set the value of `bIsGamePaused` to `pauseButtons.isOn`
    variable. This will set the value to `true` or `false` based on whether you clicked
    on the pause button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Update` function will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in the `enemyScript`, enclose the `Update` function and check whether
    the `bIsGamePaused` is `false`, in a similar way to how we check if the game is
    over or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Do the same in `playerScript`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, when you run the game, you can pause the game by tapping on the pause button.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `mainCamera` do not forget to assign the `toggleBtn` to the `gameScript` script
    as it is expecting it to be similar to how you attached `resetBtn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_021.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a main menu button to the startScene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a main menu button, so that we can press it to go to the MainMenu
    scene when we select it. To do this, we will create a new button and name it mainMenuBtn.
    Position the mainMenuBtn so that it is to the left of the middle of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also select the homeBtn2 option as the Source Image in the Image (Script) section;
    and leave the rest of the values set to their defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Like the reset button, we can only show the main menu button once the game
    is over. So, in `gameScript`, create a new public variable called `mainMenuButton`,
    shown as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the active status of the `mainMenuButton` to `false` in the `Start` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When the game is over, set the active state to true.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in the `mainMenu` button object, go to the Button (Script) tab and, in
    the On Click () tab, set it so that it calls mainMenuScene when the button is
    clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_023.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, mainMenuScene has not been created yet, so we will create a mainMenuScene
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Creating MainMenu scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go to the Scenes folder in the Project tab, right-click and create a new scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_024.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Name the scene mainMenuScene. Now you will have two scenes in the project''s
    Scenes folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_025.png)'
  prefs: []
  type: TYPE_IMG
- en: Double-click on the mainMenuScene scene and open it. This is a new empty scene,
    so we will start populating this scene now.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll add a background image. Go to GameObject-> UI and create an Image.
    It will create a new canvas and an image. Leave the canvas values set to their
    defaults.
  prefs: []
  type: TYPE_NORMAL
- en: Next, rename the image to `bgImage`. Select the `scenary-ipad` file as the background
    image, and click on Set Native Size option so that the image gets resized.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in the titleText, we can add a name for the game, which we will call PunchyPunch.
    In the text box, rename the text to PunchyPunch. It is also a good idea to change
    the font from Ariel. In the `Resources` folder for this chapter, you will find
    a duncecapbb font. Copy and paste the font into the `Assets/fonts` folder. Under
    the Character section, in the Font option, select the duncecapbb_re as the font.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, change the color so that it is a lighter shade of blue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_026.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After these additions, the MainMenu scene should be starting to take shape
    and look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_027.png)'
  prefs: []
  type: TYPE_IMG
- en: Save this scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to make sure mainMenuScene gets called when we click on the mainMenuBtn button
    in startScene, we have to add the scene to the Build Settings, so open up Build
    Settings menu by going into the file and clicking Add Open Scenes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_028.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, open the startScene and click the play button. Once the game is over the
    mainMenuBtn button will appear. Click on it, and the MainMenu scene should load.
  prefs: []
  type: TYPE_NORMAL
- en: Now let us add a play button to mainScene that will call startScene. So, open
    up mainMenuScene again.
  prefs: []
  type: TYPE_NORMAL
- en: Go to GameObjects | UI to create a button. Call this button `playBtn`. It will
    be created under the current canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Position the play button so that it is at the center of the screen. In Image
    (Script), for the Source Image field, select playBtn_normal option. In Button
    (Script) section, select the Sprite Swap option Transition type field. We will
    swap the image to show that the button was pressed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select platBtn (Image) in the Target Graphic field; playBtn_normal in the Highlighted
    Sprite field; playBtn_pressed in the Pressed Sprite field; and playBtn_normal
    in the Disabled Sprite field (or you could leave it blank as we will never disable
    this button):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_029.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding the play button, the main menu scene should look like the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_030.png)'
  prefs: []
  type: TYPE_IMG
- en: To make the button interactive, we have to create an empty object and attach
    the `buttonClick` script to it. So, create an empty object, call it `buttonClickGO`,
    and attach the `buttonClick` script to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, on the `playBtn` game object in the On Click () section, select the buttonClickGO,
    call the `onButtonClick` function, and pass in the startScene variable to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_031.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, when you click the play button, it will load game by loading startScene.
  prefs: []
  type: TYPE_NORMAL
- en: I have also created one more scene, for *options*. The **Options** scene will
    contain the functionality to mute or reduce the sound in the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, one more button need to be added to the MainMenu scene, as these
    scenes will only be accessible from the MainMenu scene. Additionally, we will
    add one more button which will open the achievements window. The button images
    are provided in the resources folder and you can use these images and place then
    anywhere in the MainMenu scene as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_032.png)'
  prefs: []
  type: TYPE_IMG
- en: The same `buttonClickGO` was used so that when either button is clicked, it
    will take you to their respective scenes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, one scene was created, called optionsScene. Now the `Scenes` project
    folder should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/scenes-image.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the options scene. There is nothing much here at the moment, but in
    the next chapter, when we add audio, we will also create a mute button here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_06_035.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to create new scenes and transition between scenes
    at the click of a button... literally! We added buttons to start the game and
    travel between the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the buttons a lot in the next chapter, when we will see how
    to add achievements, in app purchases, and add integration. Almost all of these
    will include the addition of a button. We will also see how to add some different
    types of buttons.
  prefs: []
  type: TYPE_NORMAL
