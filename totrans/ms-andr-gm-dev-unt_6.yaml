- en: GameScene and SceneFlow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GameScene 和 SceneFlow
- en: Up to this point, we have only worked with the startScene but in this chapter
    we will see how to add other scenes to the game, and we'll need a MainMenu scene
    from where we can go to other scenes, like the options or the achievements scenes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只处理了 startScene，但在本章中，我们将看到如何向游戏中添加其他场景，并且我们需要一个MainMenu场景，从这里我们可以进入其他场景，如选项或成就场景。
- en: Each of these scenes will have specific game objects and buttons which will
    enable us to either change settings or buttons that can take us back to the MainMenu
    Scene.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个场景都将有特定的游戏对象和按钮，这将使我们能够更改设置或按钮，这些按钮可以带我们回到 MainMenu 场景。
- en: The MainMenu scene also needs to have a play button which should link to the
    startScene which in turn is responsible for starting the game.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: MainMenu 场景还需要一个播放按钮，该按钮应链接到 startScene，而 startScene 负责启动游戏。
- en: Obviously, we can add more scenes and menus according to the needs of the game.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们可以根据游戏需求添加更多场景和菜单。
- en: Let us first see how to add buttons to the startScene, so that at the end of
    the game we can restart the game.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看如何向 startScene 添加按钮，这样在游戏结束时我们就可以重新启动游戏。
- en: 'This chapter includes the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下主题：
- en: Introduction to buttons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮简介
- en: Organizing the project folder structure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织项目文件夹结构
- en: Adding a game restart button to the startScene
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 startScene 添加游戏重启按钮
- en: Adding a pause button to the startScene
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 startScene 添加暂停按钮
- en: Adding a MainMenu button to the startScene
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 startScene 添加一个 MainMenu 按钮
- en: Creating a MainMenu scene
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 MainMenu 场景
- en: Adding an Options scene
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个选项场景
- en: Adding an Achievements scene
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个成就场景
- en: Adding buttons to the startScene
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 startScene 添加按钮
- en: 'In the last chapter, we saw how to add text to the scene. However, we can also
    add buttons to the scene. The button creation process is the same as for creating
    a text UI. Go to GameObjects | UI | Button:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何向场景中添加文本。然而，我们也可以向场景中添加按钮。按钮的创建过程与创建文本UI的过程相同。前往 GameObjects |
    UI | Button：
- en: '![](img/image_06_001.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_001.png)'
- en: 'A button will be created in the scene, as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 场景中将会创建一个按钮，如下面的截图所示：
- en: '![](img/image_06_002.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_002.png)'
- en: A button will have a Canvas, a Button, and a Text component. If you are creating
    a button in a scene where a Canvas component already exists, it will just use
    the current Canvas and create the button beneath it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个按钮将包含 Canvas、Button 和 Text 组件。如果你在一个已经存在 Canvas 组件的场景中创建按钮，它将直接使用当前 Canvas
    并在其下方创建按钮。
- en: We have the Canvas component from the previous chapter. Click on the button
    in the Hierarchy window.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有上一章中的 Canvas 组件。在 Hierarchy 窗口中点击按钮。
- en: 'The button has Rect Transform, Canvas Renderer, Image (Script), and Button
    (Script) components. We have already come across the Rect Transform and Canvas
    Renderer:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮包含 Rect Transform、Canvas Renderer、Image（脚本）和 Button（脚本）组件。我们已经遇到了 Rect Transform
    和 Canvas Renderer：
- en: '![](img/image_06_003.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_003.png)'
- en: You can specify the image of the button in the Image (Script) component. To
    set the image, you will import an image and convert it to Sprite types. You can
    only assign it to the source image after you have assigned the image to a Sprite
    type.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Image（脚本）组件中指定按钮的图像。要设置图像，你需要导入一个图像并将其转换为 Sprite 类型。你只能在将图像分配给 Sprite 类型后将其分配给源图像。
- en: 'Color: You can specify the button color; otherwise, you can set the default
    color as white.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色：你可以指定按钮颜色；否则，你可以将默认颜色设置为白色。
- en: 'Material: If you would like to assign a specific texture it can be done here.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材质：如果你想要分配一个特定的纹理，可以在这里完成。
- en: 'Raycast Target: This allows the target to clickable.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raycast Target：这允许目标可点击。
- en: 'Image Type: You can use the image as it is or you can change it to tiled.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像类型：你可以使用原始图像，或者将其更改为平铺。
- en: Next in the Button (Script) section, we can specify what the button should do
    once it is clicked. By clicking on Interactable option, we specify that the button
    will change to something else once it is highlighted, pressed, or disabled.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在按钮（脚本）部分的下一次，我们可以指定按钮在被点击后应该执行的操作。通过点击交互选项，我们指定按钮在被高亮、按下或禁用时将变为其他内容。
- en: The rate at which the button is changed once it has been clicked on is specified
    by the Fade Duration parameter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮被点击后改变的速度由 Fade Duration 参数指定。
- en: 'The Text (Script) specifies whether any text need to be shown. If text is appropriate,
    you can specify the text in the text box. Otherwise you can leave it blank. It
    is generally better to have buttons that are standard and self-explanatory:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 文本（脚本）指定是否需要显示任何文本。如果文本是合适的，你可以在文本框中指定文本。否则，你可以将其留空。通常，最好有标准且易于理解的按钮：
- en: '![](img/image_06_004.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_004.png)'
- en: Organizing the folder structure
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织文件夹结构
- en: In the `resources` folder for this chapter, you will see a bunch of images for
    buttons. Drag and drop the buttons into a folder called `buttons`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的`resources`文件夹中，你会看到一些按钮的图像。将按钮拖放到名为`buttons`的文件夹中。
- en: 'It is also a good time to start organizing your folders a bit. For the sake
    of convenience and personal sanity, it is better to put assets into folders:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是开始组织你的文件夹的好时机。为了方便和个人精神健康，最好将资产放入文件夹：
- en: '![](img/image_06_005.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_005.png)'
- en: 'I have created folders structure with the following folders:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经创建了以下文件夹结构的文件夹：
- en: '3dAssets: Contains player FBX, You can also add other 3D objects, like a 3D
    environment, and 3D meshes.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '3dAssets: 包含玩家FBX，你也可以添加其他3D对象，如3D环境，和3D网格。'
- en: 'animController: I have placed Animation Controllers here. When you have lot
    of enemies, you will probably have separate Animation Controllers for each, so
    it is better to also have a separate controller for each.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画控制器：我已经在这里放置了动画控制器。当你有很多敌人时，你可能需要为每个敌人分别创建单独的动画控制器，因此最好也为每个控制器创建一个单独的控制器。
- en: 'buttons: Sprites for buttons can go in here.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮：按钮的精灵可以放入这里。
- en: 'Fonts: Although Arial is a beautiful font, you might want to choose a font
    that it is more suitable to your game. So, create a folder to put these here.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体：虽然Arial是一种美丽的字体，但你可能想要选择一个更适合你游戏的字体。因此，创建一个文件夹来存放这些字体。
- en: 'Materials: Once again, more objects mean more materials, so get organized!'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材质：再次强调，更多的对象意味着更多的材质，因此要组织好！
- en: 'prefabs: Put all prefabs in a separate folder so that they are easier to access.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预制体：将所有预制体放入单独的文件夹，以便更容易访问。
- en: 'Scenes: Scenes are the most accessed files when creating a game, so keep them
    in a separate folders for easy access.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景：场景是在创建游戏时最常访问的文件，因此将它们保存在单独的文件夹中以便于访问。
- en: 'Scripts: Overtime, you might use a lot of scripts for different things so create
    separate folders for these as well.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本：随着时间的推移，你可能需要为不同的事情编写很多脚本，因此也为这些创建单独的文件夹。
- en: 'When you open the buttons folder, it looks like the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开按钮文件夹时，它看起来如下截图所示：
- en: '![](img/image_06_006.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_006.png)'
- en: 'The button images all have a small arrow on their right-hand edge. That is
    because they have already been converted to Sprite types. To convert an image
    to sprite, select the image and in the Inspector pane, and change the Texture
    Type field to Sprite (2D and UI) option:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮图像的右侧边缘都有一个小箭头。这是因为它们已经被转换为精灵类型。要将图像转换为精灵，请选择图像并在检查器面板中，将纹理类型字段更改为精灵（2D和UI）选项：
- en: '![](img/image_06_007.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_007.png)'
- en: Do the same for all the buttons in the buttons folder.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为按钮文件夹中的所有按钮执行相同的操作。
- en: Adding a game restart button in the startScene
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在startScene中添加游戏重启按钮
- en: 'Now create a new button in the startScene and rename the button to resetBtn
    as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在startScene中创建一个新的按钮，并将其重命名为resetBtn，如下截图所示：
- en: '![](img/image_06_008.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_008.png)'
- en: 'In the Inspector pane, under the Source Image field, select the resetBtn2 Sprite
    type:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器面板中，在源图像字段下，选择resetBtn2精灵类型：
- en: '![](img/image_06_009.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_009.png)'
- en: 'Leave the rest of the parameters as they are. You will also see a preview of
    the reset button in the Inspector pane along with its dimensions:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将其余参数保持不变。你还会在检查器面板中看到重置按钮的预览以及其尺寸：
- en: '![](img/image_06_010.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_010.png)'
- en: 'Position the button so that it is just under and to the right of the GAMEOVER!!!
    text. By this we will make it accessible to the player''s thumb:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将按钮定位在GAMEOVER!!!文本的正下方和右侧。通过这种方式，我们将使其对玩家的拇指可访问：
- en: '![](img/image_06_011.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_011.png)'
- en: 'Once positioned, it should look like the following in the game:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定位，在游戏中应该看起来如下：
- en: '![](img/image_06_012.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_012.png)'
- en: 'Now we have to create a small script so that, when the button is clicked, the
    startScene is called. To do this, create a new script, call it buttonClick, and
    save it in the `Scripts` folder. Inside the script add the following lines:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须创建一个小脚本，以便当按钮被点击时，调用startScene。为此，创建一个新的脚本，命名为buttonClick，并将其保存在`Scripts`文件夹中。在脚本内部添加以下行：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `SceneManager.LoadScene` function is responsible for loading the scene in
    Unity.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`SceneManager.LoadScene`函数负责在Unity中加载场景。'
- en: When the button is clicked, we will select the `OnButtonClick` function, then
    pass in a name of the scene to be loaded, and this string will be passed into
    the `LoadScene` function, which will load the scene itself.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮被点击时，我们将选择`OnButtonClick`函数，然后传入要加载的场景名称，这个字符串将被传递给`LoadScene`函数，该函数将加载场景本身。
- en: 'Now create an empty game object by going to GameObject| CreateEmpty. Name it
    buttonClickGo. It doesn''t matter where this game object is located in the scene.
    Now add the `buttonClick` script to this game object, as shown in the following
    screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过GameObject| CreateEmpty创建一个空的游戏对象。将其命名为buttonClickGo。这个游戏对象在场景中的位置无关紧要。现在将`buttonClick`脚本添加到这个游戏对象中，如下截图所示：
- en: '![](img/image_06_013.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_013.png)'
- en: 'Select the `resetBtn` in the Hierarchy. In the Inspector pane for the button,
    you will see an On Click () section below the Button (Script) section:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次结构中选择`resetBtn`。在按钮的检查器面板中，您将在Button (Script)部分下方看到一个On Click ()部分：
- en: '![](img/image_06_014.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_014.png)'
- en: In the first dropdown menu, select Editor and Runtime option, so the function
    can be called inside the editor during runtime.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个下拉菜单中，选择Editor和Runtime选项，以便在运行时可以在编辑器中调用该函数。
- en: 'Next, select the buttonClickGO game object from the dropdown list, as shown
    in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从下拉列表中选择buttonClickGO游戏对象，如下截图所示：
- en: '![](img/image_06_015.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_015.png)'
- en: 'Then, select the `buttonClick.onButtonClick` function from the dropdown. This
    is under ButtonClick | onButtonClick (string):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从下拉列表中选择`buttonClick.onButtonClick`函数。这位于ButtonClick | onButtonClick (string)：
- en: '![](img/image_06_016.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_016.png)'
- en: 'Now, enter the string as the name of the scene that will gets called--in this
    case we want to call the startScene:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入字符串作为将被调用的场景名称--在这种情况下，我们想要调用startScene：
- en: '![](img/image_06_017.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_017.png)'
- en: 'We still need to hide the reset button till the game is over. So, in the `gameScript`,
    create a public `Button` type, and call it `resetButton`, shown as following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要在游戏结束前隐藏重置按钮。因此，在`gameScript`中创建一个公共的`Button`类型，命名为`resetButton`，如下所示：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, in the `Start` function we set the active property to `false`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`Start`函数中，我们将活动属性设置为`false`：
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will ensure that the reset button won''t be visible initially. Finally,
    once the game is over, update the `SetActive` function to `true` again:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保重置按钮最初不可见。最后，一旦游戏结束，将`SetActive`函数再次设置为`true`：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For Unity to get the scene you want it to load, you need to add it to the Scenes
    In Build list in Build Settings option. So, go to File | Build Settings and click
    the Add Open Scenes button at the bottom, as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Unity加载您想要的场景，您需要在构建设置选项中的Scenes In Build列表中添加它。因此，转到File | Build Settings并点击底部的Add
    Open Scenes按钮，如下截图所示：
- en: '![](img/image_06_018.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_018.png)'
- en: Once the scene has been added, close the window. Now run the game and, once
    the game is over, you can press the reset button and the game will start again.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦场景被添加，关闭窗口。现在运行游戏，一旦游戏结束，您可以按重置按钮，游戏将重新开始。
- en: Adding a pause button to the startScene
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在startScene中添加暂停按钮
- en: Since we are in startScene, let's add one more type of button, called a *toggle*
    button, to pause or unpause the game.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们处于startScene，让我们添加另一种类型的按钮，称为*切换*按钮，用于暂停或恢复游戏。
- en: Go to GameObject | UI and create a new toggle button. Once created, position
    it at the top right of the game screen. Rename the button to pauseBtn.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 前往GameObject | UI创建一个新的切换按钮。创建后，将其定位在游戏屏幕的右上角。将按钮重命名为pauseBtn。
- en: 'Like other buttons and UI elements, it has a Rect Transform section which can
    be used to position the button:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如同其他按钮和UI元素一样，它有一个Rect Transform部分，可以用来定位按钮：
- en: '![](img/image_06_019.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_019.png)'
- en: It also has a Toggle (Script) which can be set to the default values. Select
    the Background tab, to choose the background image to be used for the button.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有一个Toggle (Script)，可以设置为默认值。选择Background选项卡，以选择用于按钮的背景图像。
- en: 'In the Image (Script) under Background, select the pauseBtnOff Sprite type
    as the background image:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在背景下的图像（脚本）中，选择pauseBtnOff精灵类型作为背景图像：
- en: '![](img/image_06_020.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_020.png)'
- en: There is also a label tab for any text script, which you can leave blank as
    we will only be using the image.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何文本脚本，还有一个标签页，您可以将其留空，因为我们只会使用图像。
- en: Whenever you click the button, it will create a tick mark over the pause image
    to specify that the button is toggled. If you click on it again it will revert
    to the usual image.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每次点击按钮时，它都会在暂停图像上创建一个勾选标记，以指定按钮已被切换。如果您再次点击它，它将恢复到正常图像。
- en: Now, in the `gameScript` file, we create a public variable toggle type, called
    `pauseButton`, and also create a `public` Boolean variable, called `bIsGamePaused`,
    and initialize it to `false`. We will use this newly created Boolean variable
    to go through the player and AI update loop.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`gameScript`文件中，我们创建一个名为`pauseButton`的公共变量，类型为`toggle`，并创建一个名为`bIsGamePaused`的`public`布尔变量，并将其初始化为`false`。我们将使用这个新创建的布尔变量来遍历玩家和AI更新循环。
- en: 'So, in the `gameScript`, add the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在`gameScript`中添加以下代码：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, in the `Update` function, set the value of `bIsGamePaused` to `pauseButtons.isOn`
    variable. This will set the value to `true` or `false` based on whether you clicked
    on the pause button.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`Update`函数中，将`bIsGamePaused`的值设置为`pauseButtons.isOn`变量的值。这将根据您是否点击了暂停按钮将值设置为`true`或`false`。
- en: 'The `Update` function will look like the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Update`函数将如下所示：'
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, in the `enemyScript`, enclose the `Update` function and check whether
    the `bIsGamePaused` is `false`, in a similar way to how we check if the game is
    over or not:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`enemyScript`中，将`Update`函数括起来，并检查`bIsGamePaused`是否为`false`，方式与我们检查游戏是否结束类似：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Do the same in `playerScript`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`playerScript`中也进行相同的操作：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, when you run the game, you can pause the game by tapping on the pause button.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您运行游戏时，您可以通过轻触暂停按钮来暂停游戏。
- en: 'In `mainCamera` do not forget to assign the `toggleBtn` to the `gameScript` script
    as it is expecting it to be similar to how you attached `resetBtn`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mainCamera`中不要忘记将`toggleBtn`分配给`gameScript`脚本，因为它期望它与您附加`resetBtn`的方式相似：
- en: '![](img/image_06_021.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_021.png)'
- en: Adding a main menu button to the startScene
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在`startScene`中添加主菜单按钮
- en: We will create a main menu button, so that we can press it to go to the MainMenu
    scene when we select it. To do this, we will create a new button and name it mainMenuBtn.
    Position the mainMenuBtn so that it is to the left of the middle of the screen.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个主菜单按钮，以便在选中时可以按下它进入`MainMenu`场景。为此，我们将创建一个新的按钮并将其命名为`mainMenuBtn`。将`mainMenuBtn`定位在屏幕中间的左侧。
- en: 'Also select the homeBtn2 option as the Source Image in the Image (Script) section;
    and leave the rest of the values set to their defaults:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要在图像（脚本）部分选择homeBtn2选项作为源图像；并将其余值设置为默认值：
- en: '![](img/image_06_022.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_022.png)'
- en: 'Like the reset button, we can only show the main menu button once the game
    is over. So, in `gameScript`, create a new public variable called `mainMenuButton`,
    shown as following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与重置按钮一样，我们只能在游戏结束后显示主菜单按钮。因此，在`gameScript`中创建一个新的公共变量，名为`mainMenuButton`，如下所示：
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Set the active status of the `mainMenuButton` to `false` in the `Start` function:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Start`函数中将`mainMenuButton`的激活状态设置为`false`：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When the game is over, set the active state to true.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏结束时，将激活状态设置为`true`。
- en: '[PRE10]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, in the `mainMenu` button object, go to the Button (Script) tab and, in
    the On Click () tab, set it so that it calls mainMenuScene when the button is
    clicked:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`mainMenu`按钮对象中，转到按钮（脚本）标签，并在`On Click ()`标签中设置，以便在按钮被点击时调用`mainMenuScene`：
- en: '![](img/image_06_023.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_023.png)'
- en: Now, mainMenuScene has not been created yet, so we will create a mainMenuScene
    next.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`mainMenuScene`尚未创建，因此我们将创建一个`mainMenuScene`。
- en: Creating MainMenu scene
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`MainMenu`场景
- en: 'Go to the Scenes folder in the Project tab, right-click and create a new scene:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目标签页中的场景文件夹中，右键单击并创建一个新场景：
- en: '![](img/image_06_024.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_024.png)'
- en: 'Name the scene mainMenuScene. Now you will have two scenes in the project''s
    Scenes folder:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将场景命名为`mainMenuScene`。现在您将在项目的场景文件夹中有两个场景：
- en: '![](img/image_06_025.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_025.png)'
- en: Double-click on the mainMenuScene scene and open it. This is a new empty scene,
    so we will start populating this scene now.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 双击`mainMenuScene`场景并打开它。这是一个新的空场景，因此我们现在将开始填充这个场景。
- en: First, we'll add a background image. Go to GameObject-> UI and create an Image.
    It will create a new canvas and an image. Leave the canvas values set to their
    defaults.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个背景图片。转到GameObject-> UI创建一个Image。它将创建一个新的画布和一个图片。保留画布值设置为默认值。
- en: Next, rename the image to `bgImage`. Select the `scenary-ipad` file as the background
    image, and click on Set Native Size option so that the image gets resized.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将图片重命名为`bgImage`。选择`scenary-ipad`文件作为背景图片，并点击设置原生大小选项，以便图片被调整大小。
- en: Next, in the titleText, we can add a name for the game, which we will call PunchyPunch.
    In the text box, rename the text to PunchyPunch. It is also a good idea to change
    the font from Ariel. In the `Resources` folder for this chapter, you will find
    a duncecapbb font. Copy and paste the font into the `Assets/fonts` folder. Under
    the Character section, in the Font option, select the duncecapbb_re as the font.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在titleText中，我们可以添加游戏名称，我们将称之为PunchyPunch。在文本框中，将文本重命名为PunchyPunch。将字体从Arial更改为也是一个好主意。在`Resources`文件夹的此章节中，你可以找到一个duncecapbb字体。将字体复制并粘贴到`Assets/fonts`文件夹中。在Character部分，在Font选项中，选择duncecapbb_re作为字体。
- en: 'Finally, change the color so that it is a lighter shade of blue:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更改颜色，使其成为浅蓝色色调：
- en: '![](img/image_06_026.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_026.png)'
- en: 'After these additions, the MainMenu scene should be starting to take shape
    and look like the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些添加之后，MainMenu场景应该开始成形，看起来如下所示：
- en: '![](img/image_06_027.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_027.png)'
- en: Save this scene.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此场景。
- en: 'Next, to make sure mainMenuScene gets called when we click on the mainMenuBtn button
    in startScene, we have to add the scene to the Build Settings, so open up Build
    Settings menu by going into the file and clicking Add Open Scenes:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了确保在startScene中点击mainMenuBtn按钮时调用mainMenuScene，我们必须将这些场景添加到构建设置中，因此通过进入文件并点击添加打开场景打开构建设置菜单：
- en: '![](img/image_06_028.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_028.png)'
- en: Now, open the startScene and click the play button. Once the game is over the
    mainMenuBtn button will appear. Click on it, and the MainMenu scene should load.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开startScene并点击播放按钮。一旦游戏结束，mainMenuBtn按钮将出现。点击它，应该加载MainMenu场景。
- en: Now let us add a play button to mainScene that will call startScene. So, open
    up mainMenuScene again.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向mainScene添加一个播放按钮，该按钮将调用startScene。因此，再次打开mainMenuScene。
- en: Go to GameObjects | UI to create a button. Call this button `playBtn`. It will
    be created under the current canvas.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 前往GameObject | UI创建一个按钮。将此按钮命名为`playBtn`。它将在当前画布下创建。
- en: Position the play button so that it is at the center of the screen. In Image
    (Script), for the Source Image field, select playBtn_normal option. In Button
    (Script) section, select the Sprite Swap option Transition type field. We will
    swap the image to show that the button was pressed.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将播放按钮放置在屏幕中心。在Image (Script)中，对于Source Image字段，选择playBtn_normal选项。在Button (Script)部分，选择Sprite
    Swap选项的Transition type字段。我们将交换图片以显示按钮被按下。
- en: 'Select platBtn (Image) in the Target Graphic field; playBtn_normal in the Highlighted
    Sprite field; playBtn_pressed in the Pressed Sprite field; and playBtn_normal
    in the Disabled Sprite field (or you could leave it blank as we will never disable
    this button):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标图形字段中选择platBtn (Image)；在突出显示精灵字段中选择playBtn_normal；在按下精灵字段中选择playBtn_pressed；在禁用精灵字段中选择playBtn_normal（或者你也可以留空，因为我们永远不会禁用此按钮）：
- en: '![](img/image_06_029.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_029.png)'
- en: 'After adding the play button, the main menu scene should look like the following
    image:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加播放按钮后，主菜单场景应该看起来如下所示：
- en: '![](img/image_06_030.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_030.png)'
- en: To make the button interactive, we have to create an empty object and attach
    the `buttonClick` script to it. So, create an empty object, call it `buttonClickGO`,
    and attach the `buttonClick` script to it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要使按钮交互式，我们必须创建一个空对象并将`buttonClick`脚本附加到它上。因此，创建一个空对象，命名为`buttonClickGO`，并将`buttonClick`脚本附加到它上。
- en: 'Now, on the `playBtn` game object in the On Click () section, select the buttonClickGO,
    call the `onButtonClick` function, and pass in the startScene variable to it:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`playBtn`游戏对象的OnClick()部分，选择buttonClickGO，调用`onButtonClick`函数，并将startScene变量传递给它：
- en: '![](img/image_06_031.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_031.png)'
- en: Now, when you click the play button, it will load game by loading startScene.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你点击播放按钮时，它将通过加载startScene来加载游戏。
- en: I have also created one more scene, for *options*. The **Options** scene will
    contain the functionality to mute or reduce the sound in the game.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我还创建了一个名为*options*的另一个场景。**选项**场景将包含静音或降低游戏音量的功能。
- en: 'To do this, one more button need to be added to the MainMenu scene, as these
    scenes will only be accessible from the MainMenu scene. Additionally, we will
    add one more button which will open the achievements window. The button images
    are provided in the resources folder and you can use these images and place then
    anywhere in the MainMenu scene as shown in the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，需要在`MainMenu`场景中再添加一个按钮，因为这些场景只能从`MainMenu`场景访问。此外，我们还将添加一个按钮，用于打开成就窗口。按钮图片已提供在资源文件夹中，您可以使用这些图片并将它们放置在`MainMenu`场景的任何位置，如下面的截图所示：
- en: '![](img/image_06_032.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图片_06_032](img/image_06_032.png)'
- en: The same `buttonClickGO` was used so that when either button is clicked, it
    will take you to their respective scenes.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的`buttonClickGO`被使用，所以当点击任意一个按钮时，它将带您进入相应的场景。
- en: 'Obviously, one scene was created, called optionsScene. Now the `Scenes` project
    folder should look like the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，已经创建了一个场景，名为`optionsScene`。现在`Scenes`项目文件夹应该看起来如下：
- en: '![](img/scenes-image.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![场景图片](img/scenes-image.png)'
- en: 'Here is the options scene. There is nothing much here at the moment, but in
    the next chapter, when we add audio, we will also create a mute button here:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是选项场景。目前这里没有什么，但在下一章，当我们添加音频时，我们也将在这里创建一个静音按钮：
- en: '![](img/image_06_035.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片_06_035](img/image_06_035.png)'
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to create new scenes and transition between scenes
    at the click of a button... literally! We added buttons to start the game and
    travel between the scenes.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过点击按钮来创建新场景并在场景之间进行切换...字面意义上！我们添加了按钮来启动游戏和在场景之间旅行。
- en: We will be using the buttons a lot in the next chapter, when we will see how
    to add achievements, in app purchases, and add integration. Almost all of these
    will include the addition of a button. We will also see how to add some different
    types of buttons.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将大量使用按钮，我们将看到如何添加成就、应用内购买和集成。几乎所有这些都将包括添加按钮。我们还将了解如何添加不同类型的按钮。
