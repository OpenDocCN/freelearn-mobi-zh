["```kt\nclass FindBiggestNumberKtTest : FunSpec({\n    test(\"Find the biggest out of positive numbers\") {\n        findBiggestNumber(listOf(17, 18, 6)) shouldBe 18\n    }\n})\n```", "```kt\nclass FindBiggestNumberParameterizedTest : FunSpec({\n    context(\"Find the biggest out of positive numbers\") {\n        withData(\n            emptyList<Int>() to null,\n            listOf(8) to 8,\n            listOf(99, 8) to 99,\n            listOf(17, 18, 6) to 18,\n            listOf(944, 0, 633) to 944,\n            listOf(0, -32, 76) to 76,\n            listOf(-11, -32, -102) to -11,\n            listOf(-25, -57, 0) to 0,\n            listOf(\n                Integer.MAX_VALUE + 1,\n                Integer.MAX_VALUE,\n                0,\n                Int.MIN_VALUE,\n                -Int.MIN_VALUE - 1,\n                -Int.MAX_VALUE,\n                Int.MIN_VALUE - 1\n            ) to Integer.MAX_VALUE,\n        ) { (allNumbers, expectedMax) ->\n            findBiggestNumber(allNumbers) shouldBe expectedMax\n        }\n    }\n})\n```", "```kt\nfun findBiggestNumber(numbers: List<Int>): Int? = numbers.maxOrNull()\n```", "```kt\nclass ExerciseExecutorTest : BehaviorSpec({\n    Given(\"Today is sunny\") {\n        val exerciseLog = mockk<ExerciseLog>()\n        val executor = ExerciseExecutor(exerciseLog)\n        every { exerciseLog.record(any(), any()) } returns Unit\n        val weather = Weather.SUNNY\n        When(\"doing an exercise\") {\n            val now = Instant.now()\n            Then(\"running in the park\") {\n                executor.doExercise(weather, now) shouldBe Exercise.RunInThePark\n            }\n            And(\"the exercise is logged\") {\n                verify { exerciseLog.record(Exercise.RunInThePark, now) }\n            }\n        }\n    }\n})\n```", "```kt\ninterface ExerciseLog {\n    fun record(time: Instant, exercise: Exercise)\n}\n```", "```kt\nenum class Weather {\n    SUNNY,\n    RAINY,\n    CLOUDY,\n    STORMY,\n}\n```", "```kt\nsealed class Exercise {\n    data object RunInThePark: Exercise()\n    data object GoToGym: Exercise()\n}\n```", "```kt\nclass ExerciseExecutor(\n    private val log: ExerciseLog\n) {\n    fun doExercise(\n        weather: Weather,\n        time: Instant\n    ): Exercise {\n        val exercise = when (weather) {\n            Weather.SUNNY, Weather.CLOUDY -> Exercise.RunInThePark\n            Weather.STORMY, Weather.RAINY -> Exercise.GoToGym\n        }\n        log.record(time, exercise)\n        return exercise\n    }\n}\n```", "```kt\n2024-09-30T18:39:03.353250: GoToGym\n```", "```kt\nclass ExerciseExecutorIntegrationTest : StringSpec({\n    \"Gym when cloudy and run in the park when rainy as recorded in file log\" {\n        val file = File.createTempFile(\"Exer\", \"cise\")\n            .apply { deleteOnExit() }\n        val exec = ExerciseExecutor(ExerciseFileLog(file))\n        val now = Instant.now()\n        val fourHoursLater = now.plus(4, HOURS)\n        val utc = ZoneId.of(\"UTC\")\n        exec.doExercise(RAINY, now)\n        exec.doExercise(CLOUDY, fourHoursLater)\n        FileReader(file).readLines() shouldBe listOf(\n\"${now.atZone(utc).toLocalDateTime()}: GoToGym\",\n\"${fourHoursLater.atZone(utc).toLocalDateTime()}: RunInThePark\",\n        )\n    }\n})\n```", "```kt\nclass ExerciseFileLog(\n    private val file: File,\n) : ExerciseLog {\n    val utc = ZoneId.of(\"UTC\")\n    override fun record(\n        time: Instant,\n        exercise: Exercise,\n    ) {\n        try {\n            val utcDateTime = time.atZone(utc).toLocalDateTime()\n            val text = \"$utcDateTime: $exercise\\n\"\n            file.appendText(text)\n        } catch (e: IOException) {\n            println(\"error writing to the file: $file\")\n        }\n    }\n}\n```", "```kt\nclass HouseholdServiceTest : StringSpec({\n        \"fail to create household of empty surname\" {\n            val service = HouseholdService()\n            service.createHousehold(Household(surname = \"\")) shouldBe Failure(\n                \"Surname must be non-empty\"\n            )\n        }\n    })\n```", "```kt\nclass Failure(reason: String) { }\nclass Household(surname: String) { }\nclass HouseholdService {\n    fun createHousehold(household: Household): Failure {\n        TODO(\"Not yet implemented\")\n    }\n}\n```", "```kt\nkotlin.NotImplementedError: An operation is not implemented: Not yet implemented.\n```", "```kt\ndata class Failure(val reason: String)\nclass Household(surname: String) { }\nclass HouseholdService {\n    fun createHousehold(household: Household) = Failure(\"Surname must be non-empty\")\n}\n```", "```kt\n\"successfully create a household\" {\n    val service = HouseholdService()\n    val household = Household(surname = Arb.string(minSize = 3).next())\n    service.createHousehold(household) shouldBe Success(household)\n}\n```", "```kt\ndata class Success(val household: Household)\n```", "```kt\nExpected :Success(household=example.tdd.step2_2.Household@1f958876)\nActual   :Failure(reason=Surname must be non-empty)\n```", "```kt\nsealed class Result {\n    data class Success(val household: Household): Result()\n    data class Failure(val reason: String): Result()\n}\n```", "```kt\ndata class Household(val surname: String)\n```", "```kt\nfun createHousehold(household: Household): Result =\n    if (household.surname.isNotBlank()) {\n        Success(household)\n    } else {\n        Failure(\"Surname must be non-empty\")\n    }\n```", "```kt\nclass HouseholdServiceTest : DescribeSpec({\n  val blankStrings = listOf(\"\", \" \", \"\\t\", \"\\n\", \"  \", \" \\t\", \" \\t \\n \")\n  describe(\"household creation\") {\n    blankStrings.forEach { blankString ->\n      it(\"ensures surname is not blank\") {\n        val service = HouseholdService()\n        service.createHousehold(Household(surname = blankString)) shouldBe Failure(\"Surname must be non-empty\")\n      }\n    }\n    it(\"succeeds with non-blank surname\") {\n      val service = HouseholdService()\n      val household = Household(surname = Arb.string(minSize = 3).next())\n      service.createHousehold(household) shouldBe Success(household)\n    }\n  }\n})\n```", "```kt\nFeature: Household creation\n  Scenario: Creation of households with non-empty surnames\n    Given the household surname is non-empty\n    When the user requests to create the household\n    Then the household is created\n```"]