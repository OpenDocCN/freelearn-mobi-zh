["```kt\nfun isEven(num: Int): Boolean {\n  val div2 = num / 2\n  return (div2 * 2) == num\n}\n```", "```kt\nandroidTestImplementation \"androidx.test.ext:junit:1.1.3\"\nandroidTestImplementation \"androidx.compose.ui:ui-test-\n  junit4:$compose_version\"\ndebugImplementation \"androidx.compose.ui:ui-test-\n  manifest:$compose_version\"\ntestImplementation 'junit:junit:4.13.2'\nandroidTestImplementation \"androidx.test.espresso:espresso-\n  core:3.4.0\"\n```", "```kt\nPackage\n  eu.thomaskuenneth.composebook.testinganddebuggingdemo\nimport org.junit.*\nimport org.junit.Assert.assertEquals\nclass SimpleUnitTest {\n  companion object {\n    @BeforeClass\n    @JvmStatic\n    fun setupAll() {\n      println(\"Setting things up\")\n    }\n  }\n  @Before\n  fun setup() {\n    println(\"Setup test\")\n  }\n  @After\n  fun teardown() {\n    println(\"Clean up test\")\n  }\n  @Test\n  fun testListOfInts() {\n    val nums = listOf(Int.MIN_VALUE, -3, -2, 2, 3,\n                      Int.MAX_VALUE)\n    val results = listOf(true, false, true, true, false,\n                         false)\n    nums.forEachIndexed { index, num ->\n      val result = isEven(num)\n      println(\"isEven($num) returns $result\")\n      assertEquals(result, results[index])\n    }\n  }\n}\n```", "```kt\n@Test\nfun testIsEvenZero() {\n  assertEquals(true, isEven(0))\n}\n```", "```kt\n@Composable\nfun SimpleButtonDemo() {\n  val a = stringResource(id = R.string.a)\n  val b = stringResource(id = R.string.b)\n  var text by remember { mutableStateOf(a) }\n  Box(\n    modifier = Modifier.fillMaxSize(),\n    contentAlignment = Alignment.Center\n  ) {\n    Button(onClick = {\n      text = if (text == a) b else a\n    }) {\n      Text(text = text)\n    }\n  }\n}\n```", "```kt\n@RunWith(AndroidJUnit4::class)\nclass SimpleInstrumentedTest {\n  @get:Rule\n  val rule = createComposeRule()\n  @Before\n  fun setup() {\n    rule.setContent {\n      SimpleButtonDemo()\n    }\n  }\n  @Test\n  fun testInitialLetterIsA() {\n    rule.onNodeWithText(\"A\").assertExists()\n  }\n}\n```", "```kt\n@get:Rule\nvar name = TestName()\n...\n@Test\nfun testPrintMethodName() {\n  println(name.methodName)\n}\n```", "```kt\n@Test\nfun testLetterAfterButtonClickIsB() {\n  rule.onNodeWithText(\"A\")\n    .performClick()\n    .assert(hasText(\"B\"))\n}\n```", "```kt\n.printToLog(\"SimpleInstrumentedTest\")\n```", "```kt\n@Composable\nfun ImageDemo() {\n  Image(\n    painter = painterResource(id =\n        R.drawable.ic_baseline_airport_shuttle_24),\n    contentDescription = stringResource(id =\n        R.string.airport_shuttle),\n    contentScale = ContentScale.FillBounds,\n    modifier = Modifier\n      .size(width = 128.dp, height = 128.dp)\n      .background(Color.Blue)\n  )\n}\n```", "```kt\n@RunWith(AndroidJUnit4::class)\nclass AnotherInstrumentedTest {\n  @get:Rule\n  val rule = createComposeRule()\n  @Test\n  fun testImage() {\n    var contentDescription = \"\"\n    rule.setContent {\n      ImageDemo()\n      contentDescription = stringResource(id =\n          R.string.airport_shuttle)\n    }\n    rule.onNodeWithContentDescription(contentDescription)\n      .assertWidthIsEqualTo(128.dp)\n  }\n}\n```", "```kt\nval COLOR1 = Color.White\nval COLOR2 = Color.LightGray\n@Composable\nfun BoxButtonDemo() {\n  var color by remember { mutableStateOf(COLOR1) }\n  Box(\n    modifier = Modifier\n      .fillMaxSize()\n      .background(color = color),\n    contentAlignment = Alignment.Center\n  ) {\n    Button(onClick = {\n      color = if (color == COLOR1)\n        COLOR2\n      else\n        COLOR1\n    }) {\n      Text(text = stringResource(id = R.string.toggle))\n    }\n  }\n}\n```", "```kt\nval TAG1 = \"BoxButtonDemo\"\nBox(\n  modifier = ...\n    .testTag(TAG1)\n    ...\n```", "```kt\n@Test\nfun testBoxInitialBackgroundColorIsColor1() {\n  rule.setContent {\n    BoxButtonDemo()\n  }\n  rule.onNode(hasTestTag(TAG1)).assertExists()\n}\n```", "```kt\nval BackgroundColorKey =\n        SemanticsPropertyKey<Color>(\"BackgroundColor\")\nvar SemanticsPropertyReceiver.backgroundColor by\n BackgroundColorKey\n@Composable\nfun BoxButtonDemo() {\n  ...\n  Box(\n    modifier = ...\n      .semantics { backgroundColor = color }\n      .background(color = color),\n      ...\n```", "```kt\n@Test\nfun testBoxInitialBackgroundColorIsColor1() {\n  rule.setContent {\n    BoxButtonDemo()\n  }\n  rule.onNode(SemanticsMatcher.expectValue\n             (BackgroundColorKey,COLOR1))\n     .assertExists()\n}\n```", "```kt\nfun Modifier.simpleDebug() = then(object : DrawModifier {\n  override fun ContentDrawScope.draw() {\n    println(\"width=${size.width}, height=${size.height}\")\n    drawContent()\n  }\n})\n```", "```kt\n.semantics { backgroundColor = color }.also {\n  (it as CombinedModifier).run {\n    val inner = this.javaClass.getDeclaredField(\"inner\")\n    inner.isAccessible = true\n    val value = inner.get(this) as InspectorValueInfo\n    value.inspectableElements.forEach {\n      println(it)\n    }\n  }\n}\n```"]