["```kt\n09:50:22.261 [main] INFO  o.e.household.HouseholdRepository - Created a new household 'Whittington'\n```", "```kt\n{\n  \"@timestamp\": \"2024-08-20T09:50:22.261878+01:00\",\n  \"@version\": \"1\",\n  \"message\": \"Created a new household 'Whittington'\",\n  \"logger_name\":\n  \"org.example.household.HouseholdRepository\",\n  \"thread_name\": \"main\",\n  \"level\": \"INFO\",\n  \"level_value\": 20000,\n  \"householdName\": \"Whittington\"\n}\n```", "```kt\n    implementation(\"io.github.oshai:kotlin-logging-jvm:7.0.0\")\n    implementation(\"org.slf4j:slf4j-api:2.0.16\")\n    implementation(\"ch.qos.logback:logback-classic:1.5.7\")\n    implementation(\"net.logstash.logback:logstash-logback-encoder:8.0\")\n```", "```kt\n    <appender name=\"structuredAppender\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n        </encoder>\n    </appender>\n    <root level=\"debug\">\n        <appender-ref ref=\"structuredAppender\" />\n    </root>\n```", "```kt\n        log.atInfo {\n            message = \"Created a new household '$householdName'\"\n            payload = mapOf(\n                \"householdName\" to householdName\n            )\n        }\n```", "```kt\n        withLoggingContext(\"session\" to sessionId) {\n            log.atInfo {\n                message = \"Created a new household '$householdName'\"\n                payload = mapOf(\n                    \"householdName\" to householdName\n                )\n            }\n        }\n```", "```kt\n    <appender name=\"plainTextWithMdc\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} MDC=%X{session} - %msg%n</pattern>\n        </encoder>\n    </appender>\n```", "```kt\n{\n  \"@timestamp\": \"2024-08-20T09:50:22.261878+01:00\",\n  \"@version\": \"1\",\n  \"message\": \"Created a new household 'Whittington'\",\n  \"logger_name\": \"org.example.household.HouseholdRepository\",\n  \"thread_name\": \"main\",\n  \"level\": \"INFO\",\n  \"level_value\": 20000,\n  \"session\": \"57fa4035-0390-406c-9f2b-7dfcfc131d5a\",\n  \"householdName\": \"Whittington\"\n}\n```", "```kt\ndata class Actor(\n    val id: UUID,\n    val type: String,\n    val involvement: String,\n)\n```", "```kt\ndata class Resource (\n    val id: UUID,\n    val type: String,\n    val applicationId: String,\n    val version: Int? = null\n)\n```", "```kt\ndata class EventEnvelope<E>(\n    val id: UUID,\n    val sessionId: UUID? = null,\n    val correlationId: UUID? = null,\n    val happenedAt: Instant,\n    val action: String,\n    val outcome: String,\n    val actor: Actor,\n    val otherActors: Set<Actor>? = null,\n    val resource: Resource,\n    val otherResources: Set<Resource>? = null,\n    val content: E,\n    val diffs: List<Difference>? = null,\n)\n```", "```kt\ndata class Difference(\n    val op: String,\n    val path: String,\n    val fromValue: Any? = null,\n    val toValue: Any? = null\n)\n```", "```kt\n    val elapsedInMillis = measureTimeMillis { someProcess() }\n    val elapsedInNanos = measureNanoTime { someProcess() }\n    ```", "```kt\n    implementation(\"io.opentelemetry:opentelemetry-api:1.43.0\")\n    implementation(\"io.opentelemetry:opentelemetry-sdk:1.43.0\")\n    implementation(\"io.opentelemetry:opentelemetry-exporter-otlp:1.43.0\")\n    implementation(\"io.opentelemetry:opentelemetry-extension-annotations:1.18.0\")\n```", "```kt\nval tracer: Tracer = run {\n    val oltpEndpont = \"http://localhost:8123\"\n    val otlpExporter = OtlpGrpcSpanExporter.builder()\n        .setEndpoint(oltpEndpont)\n        .build()\n    val spanProcessor = SimpleSpanProcessor.create(otlpExporter)\n    val tracerProvider = SdkTracerProvider.builder()\n        .addSpanProcessor(spanProcessor)\n        .build()\n    OpenTelemetrySdk.builder()\n        .setTracerProvider(tracerProvider)\n        .buildAndRegisterGlobal()\n    GlobalOpenTelemetry.getTracer(\"example-tracer\")\n}\n```", "```kt\nfun main() {\n    val span: Span = tracer\n        .spanBuilder(\"process data\")\n        .startSpan()\n        .apply { setAttribute(\"data.source\", \"memory\") }\n    try {\n        println(\"process finished\")\n    } catch (e: Exception) {\n        span.recordException(e)\n    } finally {\n        span.end()\n    }\n}\n```"]