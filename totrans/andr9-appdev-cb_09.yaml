- en: Using the Touchscreen and Sensors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用触摸屏和传感器
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Listening for click and long-press events
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听点击和长按事件
- en: Recognizing tap and other common gestures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别点击和其他常见手势
- en: Pinch-to-zoom with multi-touch gestures
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多指手势进行捏合缩放
- en: Swipe-to-refresh
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滑动刷新
- en: Listing available sensors—an introduction to the Android Sensor Framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出可用传感器——Android 传感器框架简介
- en: Reading sensor data—using Android Sensor Framework events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取传感器数据——使用 Android 传感器框架事件
- en: Reading device orientation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取设备方向
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: These days, mobile devices are packed with sensors, often including a gyroscope,
    magnetic, gravity, pressure, and/or temperature sensors, not to mention the touchscreen.
    This provides many new and exciting options to interact with your user. Through
    the sensors, you can determine three-dimensional device location and how the device
    is being used, such as shaking, rotation, tilt, and so on. Even the touchscreen
    offers many new input methods from just the simple click to gestures and multi-touch.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，移动设备配备了各种传感器，通常包括陀螺仪、磁性、重力、压力和/或温度传感器，更不用说触摸屏了。这为与用户交互提供了许多新的和令人兴奋的选项。通过传感器，您可以确定三维设备位置以及设备的使用方式，例如摇晃、旋转、倾斜等。甚至触摸屏也提供了从简单的点击到手势和多指的许多新的输入方法。
- en: We'll start this chapter by exploring touchscreen interactions, starting with
    a simple click and long-press, then move on to detecting common gestures using
    the `SimpleOnGestureListener` class. Next, we'll look at multi-touch using the
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始探索触摸屏交互，从简单的点击和长按开始，然后继续使用 `SimpleOnGestureListener` 类检测常见的手势。接下来，我们将查看多指使用
- en: pinch-to-zoom gesture with `ScaleGestureDetector`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ScaleGestureDetector` 进行捏合缩放手势。
- en: This book is meant to offer a quick guide to adding features and functionality
    to your own applications. As such, the focus is on the code required but it's
    highly recommended that you become familiar with the design guidelines as well.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在为您提供快速指南，以添加您自己的应用程序的功能和功能。因此，重点在于所需的代码，但强烈建议您也熟悉设计指南。
- en: Check out the Google Gesture Design Guidelines at [https://www.google.com/design/spec/patterns/gestures.html](https://www.google.com/design/spec/patterns/gestures.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看谷歌手势设计指南：[https://www.google.com/design/spec/patterns/gestures.html](https://www.google.com/design/spec/patterns/gestures.html)。
- en: In the latter part of this chapter, we'll look at sensor abilities in Android,
    using the Android Sensor Framework. We'll demonstrate how to obtain a list of
    all available sensors, plus how to check for a specific sensor. Once we identify
    a sensor, we'll demonstrate setting up a listener to read the sensor data. Finally,
    we'll end the chapter with a demonstration of how to determine the device orientation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后半部分，我们将探讨 Android 中的传感器功能，使用 Android 传感器框架。我们将演示如何获取所有可用传感器的列表，以及如何检查特定传感器。一旦我们识别出传感器，我们将演示如何设置监听器以读取传感器数据。最后，我们将以演示如何确定设备方向结束本章。
- en: Listening for click and long-press events
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听点击和长按事件
- en: Almost every application needs to recognize and respond to basic events such
    as clicks and long-presses. It's so basic, in most recipes we use the XML `onClick`
    attribute, but more advanced listeners require to be set up through code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个应用程序都需要识别并响应对基本事件，如点击和长按。这是如此基础，在大多数食谱中，我们使用 XML 的 `onClick` 属性，但更高级的监听器需要通过代码设置。
- en: 'Android provides an Event Listener interface for receiving a single notification
    when certain actions occur, as shown in the following list:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Android 提供了一个事件监听器接口，用于在发生某些操作时接收单个通知，如下列所示：
- en: '`onClick()`: It''s called when a View is pressed'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onClick()`: 当视图被按下时调用'
- en: '`onLongClick()`: It''s called when the View is long-pressed'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onLongClick()`: 当视图被长按时调用'
- en: '`onFocusChange()`: It''s called when the user navigates to or from the View'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onFocusChange()`: 当用户导航到或离开视图时调用'
- en: '`onKey()`: It''s called when a hardware key is pressed or released'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onKey()`: 当硬件键被按下或释放时调用'
- en: '`onTouch()`: It''s called when a touch event occurs'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onTouch()`: 当发生触摸事件时调用'
- en: This recipe will demonstrate responding to a click event, as well as a long-press
    event.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将演示如何响应用击事件以及长按事件。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `PressEvents`. Use the default Phone
    & Tablet options and select Empty Activity on the Add an Activity to Mobile dialog.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `PressEvents`。使用默认的 Phone & Tablet 选项，并在 `Add
    an Activity to Mobile` 对话框中选择 Empty Activity。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Setting up to receive basic View events is very simple. First, we will create
    a View; we''ll use a button for our example, then set the Event Listener in the
    Activity''s `onCreate()` method. Following are the steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 设置以接收基本视图事件非常简单。首先，我们将创建一个视图；在我们的示例中，我们将使用按钮，然后在活动的 `onCreate()` 方法中设置事件监听器。以下是步骤：
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `Button`:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 并将现有的 `TextView` 替换为以下 `Button`：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now open `MainActivy.java` and add the following code to the existing `onCreate()`
    method:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开 `MainActivy.java` 并将以下代码添加到现有的 `onCreate()` 方法中：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Run the application on a device or emulator and try a regular click and long-press.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序，并尝试常规点击和长按。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In most examples used in this book, we set up the `onClick` listener in XML
    using the following attribute:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中使用的多数示例中，我们使用以下属性在 XML 中设置 `onClick` 监听器：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You may notice the XML `onClick()` method callback requires the same method
    signature as the `setOnClickListener` .`onClick()` callback:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到 XML `onClick()` 方法回调需要与 `setOnClickListener` 的 `.onClick()` 回调相同的方法签名。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That's because Android automatically sets up the callback for us when we use
    the XML `onClick` attribute. This example also demonstrates that we can have multiple
    listeners on a single View.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为当我们使用 XML `onClick` 属性时，Android 会自动为我们设置回调。此示例还演示了我们可以在一个视图上拥有多个监听器。
- en: The last point to note is that the `onLongClick()` method returns a Boolean,
    as do most of the other event listeners. `true` is returned to indicate the event
    has been handled.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点要注意的是，`onLongClick()` 方法返回一个布尔值，正如大多数其他事件监听器一样。返回 `true` 表示事件已被处理。
- en: There's more...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Although a button is typically used to indicate where a user should press, we
    could have used both `setOnClickListener()` and `setOnLongClickListener()` with
    any View, or even a `TextView`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管按钮通常用于指示用户应按下的位置，但我们可以在任何视图（甚至 `TextView`）上使用 `setOnClickListener()` 和 `setOnLongClickListener()`。
- en: 'As mentioned in the introduction, there are other Event Listeners. You can
    use Android Studio''s auto-complete feature to bring up a list of available listeners
    by typing the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如介绍中所述，还有其他事件监听器。你可以通过输入以下内容使用 Android Studio 的自动完成功能来列出可用监听器：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you start typing, you'll see a list of available choices with Android Studio's
    auto-complete list.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始输入时，你会在 Android Studio 的自动完成列表中看到可用选项的列表。
- en: Recognizing tap and other common gestures
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别点击和其他常见手势
- en: 'Unlike the Event Listeners described in the previous recipe, gestures require
    a two-step process:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个食谱中描述的事件监听器不同，手势需要一个两步过程：
- en: Gather movement data
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集运动数据
- en: Analyze the data to determine whether it matches a known gesture
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析数据以确定它是否匹配已知的手势
- en: 'Step 1 begins when the user touches the screen, which fires the `onTouchEvent()`
    callback with the movement data sent in a `MotionEvent` object. Fortunately, Android
    makes step 2, analyzing the data, easier with the `GestureDetector` class, which
    detects the following gestures:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步在用户触摸屏幕时开始，这会触发带有在 `MotionEvent` 对象中发送的运动数据的 `onTouchEvent()` 回调。幸运的是，Android
    使用 `GestureDetector` 类使第二步，即数据分析，变得更容易，该类可以检测以下手势：
- en: '`onTouchEvent()`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onTouchEvent()`'
- en: '`onDown()`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDown()`'
- en: '`onFling()`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onFling()`'
- en: '`onLongPress()`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onLongPress()`'
- en: '`onScroll()`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onScroll()`'
- en: '`onShowPress()`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onShowPress()`'
- en: '`onDoubleTap()`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDoubleTap()`'
- en: '`onDoubleTapEvent()`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDoubleTapEvent()`'
- en: '`onSingleTapConfirmed()`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onSingleTapConfirmed()`'
- en: This recipe will demonstrate using `GestureDetector.SimpleOnGestureListener `to
    recognize the touch and double tap gestures.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将演示使用 `GestureDetector.SimpleOnGestureListener` 来识别触摸和双击手势。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `CommonGestureDetector`.
    Use the default Phone & Tablet options and select Empty Activity when prompted
    for the Activity Type.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `CommonGestureDetector`。使用默认的“电话”和“平板电脑”选项，并在提示活动类型时选择“空活动”。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We will be using the activity itself to detect gestures, so we don''t need
    to add any Views to the layout. Open `MainActivity.java` and perform the following
    steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用活动本身来检测手势，因此我们不需要在布局中添加任何视图。打开 `MainActivity.java` 并执行以下步骤：
- en: 'Add the following global variable:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainActivity` 类中添加以下全局变量：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following `GestureListener` class within the `MainActivity` class:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainActivity` 类中添加以下 `GestureListener` 类：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following `onTouchEvent()` method to the `MainActivity` class to handle
    touch event notifications:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `onTouchEvent()` 方法添加到 `MainActivity` 类中，以处理触摸事件通知：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Lastly, add the following line of code to `onCreate()`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下行代码添加到 `onCreate()` 中：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run this application on a device or emulator.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行此应用程序。
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We're using `GestureDetectorCompat`, which is from the support library that
    allows gesture support on devices running Android 1.6 and later.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `GestureDetectorCompat`，这是支持库的一部分，它允许在运行 Android 1.6 及以上版本的设备上支持手势。
- en: As mentioned in the recipe introduction, detecting gestures is a two-step process.
    To gather movement or gesture data, we start tracking movement with the touch
    event. Every time the `onTouchEvent()` is called, we send that data to the `GestureDetector`.
    The `GestureDetector` handles the second step, analyzing the data. Once a gesture
    has been detected, the appropriate callback is made. Our example handles both
    single and double tap gestures.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如配方介绍中所述，检测手势是一个两步过程。为了收集运动或手势数据，我们开始通过触摸事件跟踪运动。每次调用 `onTouchEvent()` 时，我们都将那些数据发送到
    `GestureDetector`。`GestureDetector` 处理第二步，即分析数据。一旦检测到手势，就会调用适当的回调。我们的示例处理单次和双击手势。
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Your application can easily add support for the remaining gestures detected
    by the `GestureDetector` simply by overriding the appropriate callback.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序可以通过简单地重写适当的回调来轻松添加对 `GestureDetector` 检测到的剩余手势的支持。
- en: See also
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: See the next recipe, *Pinch-to-zoom with multi-touch gestures*, for multi-touch
    gestures
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅下一配方，*使用多指手势进行缩放*，了解多指手势
- en: Pinch-to-zoom with multi-touch gestures
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多指手势进行缩放
- en: The previous recipe used `SimpleOnGestureListener` to provide detection of simple,
    one-finger gestures. In this recipe, we'll use the `SimpleOnScaleGestureListener`
    class to detect the common multi-touch gesture "pinch to zoom".
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的配方使用了 `SimpleOnGestureListener` 来提供对简单、单指手势的检测。在这个配方中，我们将使用 `SimpleOnScaleGestureListener`
    类来检测常见的多指手势“缩放手势”。
- en: 'Here are two screenshots from the application we''ll create in this recipe.
    The first shows the icon zoomed out:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是本配方中我们将创建的应用程序的两个截图。第一个显示了图标被缩小：
- en: '![](img/0bed65a1-eeca-4669-9847-c0ef32116f29.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bed65a1-eeca-4669-9847-c0ef32116f29.png)'
- en: 'This second screenshot shows the icon zoomed in:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这第二个截图显示了图标被放大：
- en: '![](img/38cd3bce-80d7-4e42-8bb5-572bb44fe95f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38cd3bce-80d7-4e42-8bb5-572bb44fe95f.png)'
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `MultiTouchZoom`. Use the
    default Phone & Tablet options and select Empty Activity when prompted for the
    Activity Type.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `MultiTouchZoom`。使用默认的 Phone & Tablet 选项，并在提示活动类型时选择
    Empty Activity。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'To provide a visual indication of pinch-to-zoom, we''ll use an `ImageView`
    with the application icon. Open `activity_main.xml` and follow these steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供缩放手势的视觉指示，我们将使用带有应用程序图标的 `ImageView`。打开 `activity_main.xml` 并按照以下步骤操作：
- en: 'Replace the existing `TextView` with the following `ImageView`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下 `ImageView` 替换现有的 `TextView`：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, open `MainActivity.java` and add the following global variables to the
    class:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `MainActivity.java` 并将以下全局变量添加到类中：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following `onTouchEvent()` implementation to the `MainActivity` class:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `onTouchEvent()` 实现添加到 `MainActivity` 类中：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following `ScaleListener` class to the `MainActivity` class:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `ScaleListener` 类添加到 `MainActivity` 类中：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的 `onCreate()` 方法中：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To experiment with the pinch-to-zoom functionality, run the application on a
    device with a touchscreen.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实验缩放手势功能，请在带触摸屏的设备上运行应用程序。
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `ScaleGestureDetector` does all the work by analyzing gesture data and reporting
    the final scale factor through the `onScale()` callback. We get the actual scale
    factor by calling `getScaleFactor()` on `ScaleGestureDetector`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`ScaleGestureDetector` 通过分析手势数据并通过 `onScale()` 回调报告最终缩放因子来完成所有工作。我们通过在 `ScaleGestureDetector`
    上调用 `getScaleFactor()` 来获取实际的缩放因子。'
- en: 'We use an `ImageView` with the application icon to provide a visual representation
    of the scaling by setting the `ImageView` scale, using the scale factor returned
    from `ScaleGestureDetector`. We use the following code to prevent the scaling
    from becoming too large or too small:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用带有应用程序图标的 `ImageView` 来提供缩放的视觉表示，通过设置 `ImageView` 的缩放，使用从 `ScaleGestureDetector`
    返回的缩放因子。我们使用以下代码来防止缩放变得过大或过小：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Swipe-to-Refresh
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滑动刷新
- en: Pulling down a list to indicate a manual refresh is known as the Swipe-to-Refresh
    gesture. It's such a common feature that this functionality has been encapsulated
    in a single widget called `SwipeRefreshLayout`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 向下拉列表以指示手动刷新称为Swipe-to-Refresh手势。这是一个如此常见的功能，以至于这种功能被封装在一个名为`SwipeRefreshLayout`的单个小部件中。
- en: 'This recipe will add Swipe-to-Refresh functionality with a `ListView`. The
    following screenshot shows the refresh in action:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱将添加带有`ListView`的Swipe-to-Refresh功能。以下截图显示了刷新操作：
- en: '![](img/a8f6f355-f15d-4a23-9ac6-ccc38021df31.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a8f6f355-f15d-4a23-9ac6-ccc38021df31.png)'
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `SwipeToRefresh`. Use the
    default Phone & Tablet options and select Empty Activity on the Add an Activity
    to Mobile dialog.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`SwipeToRefresh`。使用默认的“手机和平板”选项，并在“添加活动到移动”对话框中选择“空活动”。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First, we need to add the `SwipeRefreshLayout` widget and `ListView` to the
    activity layout, then we will implement the refresh listener in the Java code.
    Here are the detailed steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将`SwipeRefreshLayout`小部件和`ListView`添加到活动布局中，然后我们将在Java代码中实现刷新监听器。以下是详细步骤：
- en: 'Open `activity_main.xml` and replace the existing constraint layout with the
    following:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`并用以下内容替换现有的约束布局：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now open `MainActivity.java` and add the following global variables to the
    class:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`MainActivity.java`并为该类添加以下全局变量：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following method to the `MainActivity` class to handle the refresh:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加到`MainActivity`类中，以处理刷新：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的`onCreate()`方法中：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Run the application on a device or an emulator.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Most of the code for this recipe simulates a refresh by adding items to the
    `ListView` each time the refresh method is called. The main steps for implementing
    Swipe-to-Refresh include:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的大部分代码通过在每次调用刷新方法时向`ListView`添加项目来模拟刷新。实现Swipe-to-Refresh的主要步骤包括：
- en: Add the `SwipeRefreshLayout` widget
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`SwipeRefreshLayout`小部件
- en: Include the `ListView` within the `SwipeRefreshLayout`
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SwipeRefreshLayout`中包含`ListView`
- en: Add the `OnRefreshListener` to call your refresh method
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`OnRefreshListener`以调用您的刷新方法
- en: Call `setRefreshing(false)` after completing your update
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成更新后调用`setRefreshing(false)`
- en: That's it. The widget makes adding Swipe-to-Refresh very easy!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。这个小部件使得添加Swipe-to-Refresh变得非常简单！
- en: There's more...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Although the Swipe-to-Refresh gesture is a common feature these days, it''s
    still good practice to include a menu item (especially for accessibility reasons).
    Following is a snippet of XML for the menu layout:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Swipe-to-Refresh手势现在是一个常见的功能，但仍然是一个好习惯，包括一个菜单项（特别是为了可访问性原因）。以下是一个XML菜单布局的片段：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Call your refresh method in the `onOptionsItemSelected()` callback. When performing
    a refresh from code, such as from the menu item event, you want to notify `SwipeRefreshLayout`
    of the refresh so it can update the UI. Do this with the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onOptionsItemSelected()`回调中调用您的刷新方法。当从代码执行刷新操作，例如从菜单项事件时，您想通知`SwipeRefreshLayout`刷新，以便它可以更新UI。以下代码可以做到这一点：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This tells the `SwipeRefreshLayout` that a refresh is starting so it can display
    the in-progress indicator.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉`SwipeRefreshLayout`开始刷新，以便它可以显示正在进行的指示器。
- en: Listing available sensors – an introduction to the Android Sensor Framework
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出可用传感器 - Android传感器框架简介
- en: 'Android includes support for hardware sensors using the Android Sensor Framework.
    The framework includes the following classes and interfaces:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Android使用Android传感器框架支持硬件传感器。该框架包括以下类和接口：
- en: '`SensorManager`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SensorManager`'
- en: '`Sensor`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sensor`'
- en: '`SensorEventListener`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SensorEventListener`'
- en: '`SensorEvent`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SensorEvent`'
- en: 'Most Android devices include hardware sensors, but they vary greatly between
    different manufacturers and models. If your application utilizes sensors, you
    have two choices:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Android设备都包括硬件传感器，但它们在不同制造商和型号之间差异很大。如果您的应用程序使用传感器，您有两个选择：
- en: Specify the sensor in the Android Manifest
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AndroidManifest中指定传感器
- en: Check for the sensor at runtime
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时检查传感器
- en: 'To specify your application uses a sensor, include the `<uses-feature>` declaration
    in the Android Manifest. Here is an example requiring a compass to be available:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定您的应用程序使用传感器，请在AndroidManifest中包含`<uses-feature>`声明。以下是一个需要可用指南针的示例：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If your application utilizes the compass, but does not require it to function,
    you should set `android:required="false"` instead; otherwise your application
    will not be available to install from Google Play.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序使用指南针，但不需要它来运行，则应将`android:required="false"`设置为；否则，您的应用程序将无法从Google
    Play安装。
- en: 'Sensors are grouped into the following three categories:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器被分为以下三个类别：
- en: 'Motion sensors: Measure acceleration and rotational forces along three axes'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运动传感器：测量沿三个轴的加速度和旋转力
- en: 'Environmental sensors: Measure the local environment, such as ambient air temperature
    and pressure, humidity, and illumination'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境传感器：测量局部环境，如环境空气温度和压力、湿度以及光照
- en: 'Position sensors: Measure the physical position of the device using position
    and a magnometer'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置传感器：使用位置和磁力计测量设备的物理位置
- en: 'The Android SDK provides support for the following sensor types:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK支持以下传感器类型：
- en: '| Sensor | Detects | Use |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 传感器 | 检测 | 用途 |'
- en: '| --- | --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `TYPE_ACCELEROMETER` | Motion detection including gravity | Used to determine
    shake, tilt, and so on |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_ACCELEROMETER` | 包含重力运动检测 | 用于确定震动、倾斜等 |'
- en: '| `TYPE_AMBIENT_TEMPERATURE` | Measures ambient room temperature | Used for
    determining local temperature |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_AMBIENT_TEMPERATURE` | 测量环境室温 | 用于确定局部温度 |'
- en: '| `TYPE_GRAVITY` | Measures the force of gravity on all three axes | Used for
    motion detection |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_GRAVITY` | 测量三个轴上的重力力 | 用于运动检测 |'
- en: '| `TYPE_GYROSCOPE` | Measures rotation on all three axes | Used to determine
    turn, spin, and so on |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_GYROSCOPE` | 测量三个轴上的旋转 | 用于确定转弯、旋转等 |'
- en: '| `TYPE_LIGHT` | Measures light level | Used for setting screen brightness
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_LIGHT` | 测量光强度 | 用于设置屏幕亮度 |'
- en: '| `TYPE_LINEAR_ACCELERATION` | Motion detection excluding gravity | Used to
    determine acceleration |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_LINEAR_ACCELERATION` | 排除重力运动检测 | 用于确定加速度 |'
- en: '| `TYPE_MAGNETIC_FIELD` | Measures geomagnetic field | Used to create a compass
    or determine bearing |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_MAGNETIC_FIELD` | 测量地磁场 | 用于创建指南针或确定方位 |'
- en: '| `TYPE_PRESSURE` | Measures air pressure | Used for barometer |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_PRESSURE` | 测量空气压力 | 用于气压计 |'
- en: '| `TYPE_PROXIMITY` | Measures objects relative to the screen | Used to determine
    whether the device is being held against the ear during a phone call |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_PROXIMITY` | 测量相对于屏幕的物体 | 用于确定在通话期间设备是否被紧贴耳朵 |'
- en: '| `TYPE_RELATIVE_HUMIDITY` | Measures relative humidity | Used to determine
    dew point and humidity |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_RELATIVE_HUMIDITY` | 测量相对湿度 | 用于确定露点和湿度 |'
- en: '| `TYPE_ROTATION_VECTOR` | Measures device orientation | Used to detect motion
    and rotation |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `TYPE_ROTATION_VECTOR` | 测量设备方向 | 用于检测运动和旋转 |'
- en: There are two additional sensors, `TYPE_ORIENTATION` and `TYPE_TEMPERATURE`,
    which have been deprecated as they have been replaced by newer sensors.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个额外的传感器，`TYPE_ORIENTATION`和`TYPE_TEMPERATURE`，已经被弃用，因为它们已被新的传感器所取代。
- en: 'This recipe will demonstrate retrieving a list of available sensors. Here is
    a screenshot from the Pixel 2 emulator:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将演示如何检索可用传感器的列表。以下是Pixel 2模拟器的截图：
- en: '![](img/7008410a-903b-497c-80b4-101c14b46060.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7008410a-903b-497c-80b4-101c14b46060.png)'
- en: Getting ready
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `ListDeviceSensors`. Use
    the default Phone & Tablet options and select Empty Activity when prompted for
    the Activity Type.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`ListDeviceSensors`。使用默认的Phone & Tablet选项，并在提示活动类型时选择Empty
    Activity。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we''ll query the list of sensors available, then display the results
    in a `ListView`. Here are the detailed steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查询可用的传感器列表，然后将在`ListView`中显示结果。以下是详细步骤：
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，将现有的`TextView`替换为以下内容：
- en: '[PRE22]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, open `ActivityMain.java` and add the following code to the existing `onCreate()`
    method:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`ActivityMain.java`，并将以下代码添加到现有的`onCreate()`方法中：
- en: '[PRE23]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Run the program on a device or emulator.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序。
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The following line of code is responsible for getting the list of available
    sensors; the rest of the code populates the `ListView`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行负责获取可用传感器的列表；其余代码将填充`ListView`：
- en: '[PRE24]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Notice that we get back a list of `Sensor` objects. We only get the sensor name
    to display in the `ListView`, but there are other properties available as well.
    See the link provided in the *See also* section for a complete list.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们返回了一个`Sensor`对象列表。我们只获取传感器名称以在`ListView`中显示，但还有其他属性可用。请参阅*另请参阅*部分提供的完整列表。
- en: There's more...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'It''s important to note a device can have multiple sensors of the same type.
    If you are looking for a specific sensor, you can pass in one of the constants
    from the table shown in the introduction. In this case, if you wanted to see all
    the accelerometer sensors available, you could use this call:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，一个设备可以有多种相同类型的传感器。如果你正在寻找特定的传感器，你可以传递介绍中显示的表中的一个常量。在这种情况下，如果你想查看所有可用的加速度计传感器，你可以使用这个调用：
- en: '[PRE25]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you''re not looking for a list of sensors, but need to work with a specific
    sensor, you can check for a default sensor using this code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是在寻找传感器列表，而是需要与特定传感器一起工作，你可以使用以下代码检查默认传感器：
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The Android Developer Sensor website at [http://developer.android.com/reference/android/hardware/Sensor.html](http://developer.android.com/reference/android/hardware/Sensor.html)
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android开发者传感器网站[http://developer.android.com/reference/android/hardware/Sensor.html](http://developer.android.com/reference/android/hardware/Sensor.html)
- en: Reading sensor data – using Android Sensor Framework events
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取传感器数据 – 使用Android传感器框架事件
- en: 'The previous recipe, *Listing available sensors – an introduction to the Android
    Sensor Framework*, provided an introduction to the Android Sensor Framework. Now,
    we''ll look at reading sensor data using `SensorEventListener`. The `SensorEventListener`
    interface only has two callbacks:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的配方，*列出可用传感器 – Android传感器框架简介*，提供了对Android传感器框架的介绍。现在，我们将查看使用`SensorEventListener`读取传感器数据。`SensorEventListener`接口只有两个回调：
- en: '`onSensorChanged()`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onSensorChanged()`'
- en: '`onAccuracyChanged()`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onAccuracyChanged()`'
- en: When the sensor has new data to report, it calls `onSensorChanged()` with a
    `SensorEvent` object. This recipe will demonstrate reading a light sensor, but
    since all the sensors use the same framework, it's very easy to adapt this example
    to any of the other sensors. (See the list of sensor types available in the previous
    recipe's introduction.)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当传感器有新数据要报告时，它将使用`SensorEvent`对象调用`onSensorChanged()`。本配方将演示读取光传感器，但由于所有传感器都使用相同的框架，因此将此示例适配到任何其他传感器都非常容易。（请参阅之前配方介绍中提供的传感器类型列表。）
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `ReadingSensorData`. Use
    the default Phone & Tablet options and select Empty Activity when prompted for
    the Activity Type.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`ReadingSensorData`。使用默认的Phone & Tablet选项，并在提示活动类型时选择Empty
    Activity。
- en: How to do it...
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''ll add a `TextView` to the activity layout to display sensor data, then
    we''ll add the `SensorEventListener` to the Java code. We''ll use the `onResume()`
    and `onPause()` events to start and stop our Event Listener. To get started, open
    `activity_main.xml `and follow these steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在活动布局中添加一个`TextView`来显示传感器数据，然后我们将添加`SensorEventListener`到Java代码中。我们将使用`onResume()`和`onPause()`事件来启动和停止我们的事件监听器。要开始，打开`activity_main.xml`并按照以下步骤操作：
- en: 'Modify the existing `TextView` as follows:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改现有的`TextView`：
- en: '[PRE27]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, open `MainActivity.java` and add the following global variable declarations:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`MainActivity.java`并添加以下全局变量声明：
- en: '[PRE28]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Implement the `SensorListener` class in the `MainActivity` class as follows:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`类中实现`SensorListener`类，如下所示：
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We''ll register and unregister sensor events in `onResume()` and `onPause()`
    as follows:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`onResume()`和`onPause()`中注册和取消注册传感器事件，如下所示：
- en: '[PRE30]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the following code to `onCreate()`:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`onCreate()`中：
- en: '[PRE31]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You can now run the application on a physical device to see the raw data from
    the light sensor.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以在物理设备上运行应用程序，以查看来自光传感器的原始数据。
- en: How it works...
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Using the Android Sensor Framework starts with obtaining the sensor, which we
    do in `onCreate()`. Here, we call `getDefaultSensor(),` requesting `TYPE_LIGHT`.
    We register the listener in `onResume()` and unregister it again in `onPause()`
    to reduce battery consumption. We pass in our `mSensorListener` object when we
    call `registerListener()`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Android传感器框架首先是从获取传感器开始，我们在`onCreate()`中这样做。在这里，我们调用`getDefaultSensor()`，请求`TYPE_LIGHT`。我们在`onResume()`中注册监听器，并在`onPause()`中再次取消注册以减少电池消耗。当我们调用`registerListener()`时，我们传递我们的`mSensorListener`对象。
- en: In our case, we are only looking for sensor data, which is sent in the `onSensorChanged()`
    callback. When the sensor changes, we update the `TextView` with the sensor data.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们只寻找传感器数据，这些数据在`onSensorChanged()`回调中发送。当传感器发生变化时，我们使用传感器数据更新`TextView`。
- en: There's more...
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: Now that you've worked with one sensor, you know how to work with all sensors,
    as they all use the same framework. Of course, what you do with the data will
    vary greatly, depending on the type of data you're reading. Environment sensors,
    as shown here, return a single value, but position and motion sensors can also
    return additional elements, indicated as follows.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经使用过一个传感器了，你知道如何使用所有传感器，因为它们都使用相同的框架。当然，你对数据的处理将因你所读取的数据类型而大不相同。环境传感器，如这里所示，返回一个单一值，但位置和运动传感器也可以返回额外的元素，如下所示。
- en: Environment sensors
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境传感器
- en: 'Android supports the following four environment sensors:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Android支持以下四种环境传感器：
- en: Humidity
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 湿度
- en: Light
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光
- en: Pressure
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压力
- en: Temperature
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度
- en: Environment sensors are generally easier to work with since the data returned
    is in a single element and doesn't usually require calibration or filtering. We
    used a light sensor (`Sensor.TYPE_LIGHT`) for this recipe since most devices include
    a light sensor to control screen brightness.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 环境传感器通常更容易处理，因为返回的数据是单个元素，通常不需要校准或过滤。我们在这个菜谱中使用了光传感器（`Sensor.TYPE_LIGHT`），因为大多数设备都包含光传感器来控制屏幕亮度。
- en: Position sensors
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置传感器
- en: 'Position sensors include:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 位置传感器包括：
- en: Geomagnetic Field
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地磁场
- en: Proximity
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 距离
- en: 'The following sensor types use the Geomagnetic field:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下传感器类型使用地磁场：
- en: '`TYPE_GAME_ROTATION_VECTOR`'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_GAME_ROTATION_VECTOR`'
- en: '`TYPE_GEOMAGNETIC_ROTATION_VECTOR`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_GEOMAGNETIC_ROTATION_VECTOR`'
- en: '`TYPE_MAGNETIC_FIELD`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_MAGNETIC_FIELD`'
- en: '`TYPE_MAGNETIC_FIELD_UNCALIBRATED`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_MAGNETIC_FIELD_UNCALIBRATED`'
- en: These sensors return three values in the `onSensorChanged()` event, except for
    `TYPE_MAGNETIC_FIELD_UNCALIBRATED`, which sends six values.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这些传感器在`onSensorChanged()`事件中返回三个值，除了`TYPE_MAGNETIC_FIELD_UNCALIBRATED`，它发送六个值。
- en: 'A third sensor, the Orientation sensor, has been deprecated, and you are now
    recommended to use `getRotation()` and `getRotationMatrix()` to calculate orientation
    changes. (For device orientation, such as Portrait and Landscape modes, see the
    next recipe: *Reading device orientation*.)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个传感器，方向传感器，已被弃用，现在建议使用`getRotation()`和`getRotationMatrix()`来计算方向变化。（有关设备方向，如纵向和横向模式，请参阅下一道菜谱：*读取设备方向*。）
- en: Motion sensors
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运动传感器
- en: 'Motion sensors include the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 运动传感器包括以下：
- en: Accelerometer
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加速度计
- en: Gyroscope
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 惯性仪
- en: Gravity
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重力
- en: Linear acceleration
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性加速度
- en: Rotation vector
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转向量
- en: 'These include the following sensor types:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包括以下传感器类型：
- en: '`TYPE_ACCELEROMETE`'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_ACCELEROMETE`'
- en: '`TYPE_GRAVITY`'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_GRAVITY`'
- en: '`TYPE_GYROSCOPE`'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_GYROSCOPE`'
- en: '`TYPE_GYROSCOPE_UNCALIBRATED`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_GYROSCOPE_UNCALIBRATED`'
- en: '`TYPE_LINEAR_ACCELERATION`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_LINEAR_ACCELERATION`'
- en: '`TYPE_ROTATION_VECTOR`'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_ROTATION_VECTOR`'
- en: '`TYPE_SIGNIFICANT_MOTION`'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_SIGNIFICANT_MOTION`'
- en: '`TYPE_STEP_COUNTER`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_STEP_COUNTER`'
- en: '`TYPE_STEP_DETECTOR`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE_STEP_DETECTOR`'
- en: These sensors also include three data elements, with the exception of the last
    three. `TYPE_SIGNIFICANT_MOTION` and `TYPE_STEP_DETECTOR` indicate an event, while
    `TYPE_STEP_COUNTER` returns the number of steps since last boot (while the sensor
    was active).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这些传感器也包括三个数据元素，除了最后三个。`TYPE_SIGNIFICANT_MOTION`和`TYPE_STEP_DETECTOR`表示一个事件，而`TYPE_STEP_COUNTER`返回自上次启动（传感器处于活动状态）以来的步数。
- en: See also
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Listing available sensors - an introduction to the Android Sensor Framework*
    recipe
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*列出可用传感器 - Android传感器框架简介*菜谱'
- en: The *Creating a Compass using sensor data and RotateAnimation* recipe in [Chapter
    10](a9bb5495-da76-415c-b83e-c75d0b8ce4fd.xhtml), *Graphics and Animation*
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第10章*图形和动画*的*使用传感器数据和RotateAnimation创建指南针*菜谱中
- en: For device orientation, see the next recipe: *Reading device orientation*
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关设备方向，请参阅下一道菜谱：*读取设备方向*
- en: See the GPS and Location recipe in [Chapter 14](01fd07ae-9274-4fb2-a536-bc3ed6ec088c.xhtml),
    *Location and Using Geofencing*
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅第14章*位置和地理围栏使用*中的GPS和位置菜谱
- en: Reading device orientation
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取设备方向
- en: 'Although the Android framework will automatically load new resources (such
    as the layout) upon orientation changes, there are times when you may wish to
    disable this behavior. If you wish to be notified of an orientation change instead
    of Android handling it automatically, add the following attribute to the Activity
    in the Android Manifest:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Android框架会在方向更改时自动加载新资源（如布局），但有时您可能希望禁用此行为。如果您希望被通知方向更改而不是Android自动处理，请将以下属性添加到Android
    Manifest中的Activity：
- en: '[PRE32]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When any of the following configuration changes occur, the system will notify
    you through the `onConfigurationChanged()` method instead of handling it automatically:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 当以下配置更改发生时，系统将通过 `onConfigurationChanged()` 方法通知您，而不是自动处理：
- en: '`keyboardHidden`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyboardHidden`'
- en: '`orientation`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orientation`'
- en: '`screenSize`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screenSize`'
- en: 'The `onConfigurationChanged()` signature is as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`onConfigurationChanged()` 方法的签名如下：'
- en: '[PRE33]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You'll find the new orientation in `newConfig.orientation`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在 `newConfig.orientation` 中找到新的方向。
- en: Disabling the automatic configuration change (which causes the layout to be
    reloaded and state information to be reset) should not be used as a replacement
    for properly saving state information. Your application can still be interrupted
    or stopped altogether at any time and killed by the system. (See *Saving an activity's
    state* in [Chapter 1](ef2fe8b4-1320-45f5-b0d5-fb9fd1d35e07.xhtml), *Activities*,
    for how to properly save a state.)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用自动配置更改（这会导致布局重新加载并重置状态信息）不应作为正确保存状态信息的替代方案。您的应用程序仍然可能在任何时间被中断或完全停止，并由系统终止。（有关如何正确保存状态的信息，请参阅[第1章](ef2fe8b4-1320-45f5-b0d5-fb9fd1d35e07.xhtml)，*活动*中的*保存活动状态*。）
- en: This recipe will demonstrate how to determine the current device orientation.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将演示如何确定当前设备方向。
- en: Getting ready
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `GetDeviceOrientation`. Use
    the default Phone & Tablet options and select Empty Activity when prompted for
    the Activity Type.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `GetDeviceOrientation`。使用默认的 Phone & Tablet 选项，并在提示活动类型时选择
    Empty Activity。
- en: How to do it...
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll add a button to the layout to check the orientation on demand. Start
    by opening `activity_main.xml` and follow these steps:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在布局中添加一个按钮以按需检查方向。首先打开 `activity_main.xml` 并按照以下步骤操作：
- en: 'Replace the existing `TextView` with the following `Button`:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下 `Button` 替换现有的 `TextView`：
- en: '[PRE34]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following method to handle the button click:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来处理按钮点击：
- en: '[PRE35]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Run the application on a device or emulator.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: Use *Ctrl* + *F11* to rotate the emulator.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *Ctrl* + *F11* 来旋转模拟器。
- en: How it works...
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'All we need to do to get the current orientation is call this line of code:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取当前方向，我们只需调用此行代码：
- en: '[PRE36]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The orientation is returned as an `int`, which we compare to one of three possible
    values, as demonstrated.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 方向以 `int` 的形式返回，我们将其与三个可能值之一进行比较，如下所示。
- en: There's more...
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: Another scenario where you may need to know the current orientation is when
    working with camera data, pictures, and/or videos. In this case, you need to get
    the device orientation as and when required.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能需要知道当前方向的情况是在处理相机数据、图片和/或视频时。在这种情况下，您需要根据需要获取设备方向。
- en: Getting current device rotation
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取当前设备旋转
- en: 'Often, the image may be rotated according to the device orientation or to compensate
    for the current orientation. In this scenario, there''s another option available
    to get the rotation:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，图像可能会根据设备方向或为了补偿当前方向而旋转。在这种情况下，还有一个选项可以获取旋转：
- en: '[PRE37]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the preceding line of code, `rotation` will be one of the following values:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一行代码中，`rotation` 将是以下值之一：
- en: '`Surface.ROTATION_0`'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Surface.ROTATION_0`'
- en: '`Surface.ROTATION_90`'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Surface.ROTATION_90`'
- en: '`Surface.ROTATION_180`'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Surface.ROTATION_180`'
- en: '`Surface.ROTATION_270`'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Surface.ROTATION_270`'
- en: The rotation value will be from its normal orientation. For example, when using
    a table with a normal orientation of landscape, if a picture is taken in portrait
    orientation the value will be `ROTATION_90` or `ROTATION_270`.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转值将从其正常方向开始。例如，当使用正常方向为横向的桌子时，如果以纵向方向拍照，值将是 `ROTATION_90` 或 `ROTATION_270`。
- en: See also
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Saving an activity's state* recipe in [Chapter 1](ef2fe8b4-1320-45f5-b0d5-fb9fd1d35e07.xhtml),
    *Activities*
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ef2fe8b4-1320-45f5-b0d5-fb9fd1d35e07.xhtml)，*活动*中的*保存活动状态*食谱
- en: 'Refer to the following developer link for more information on the Configuration
    class: [http://developer.android.com/reference/android/content/res/Configuration.html](http://developer.android.com/reference/android/content/res/Configuration.html)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`Configuration`类的更多信息，请参阅以下开发者链接：[http://developer.android.com/reference/android/content/res/Configuration.html](http://developer.android.com/reference/android/content/res/Configuration.html)
- en: Refer to the following link for more information on the `getRotation()` method: [http://developer.android.com/reference/android/view/Display.html#getRotation()](http://developer.android.com/reference/android/view/Display.html#getRotation())
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`getRotation()`方法的更多信息，请参阅以下链接：[http://developer.android.com/reference/android/view/Display.html#getRotation()](http://developer.android.com/reference/android/view/Display.html#getRotation())
