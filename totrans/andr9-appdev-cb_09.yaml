- en: Using the Touchscreen and Sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Listening for click and long-press events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recognizing tap and other common gestures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pinch-to-zoom with multi-touch gestures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swipe-to-refresh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing available sensors—an introduction to the Android Sensor Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading sensor data—using Android Sensor Framework events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading device orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days, mobile devices are packed with sensors, often including a gyroscope,
    magnetic, gravity, pressure, and/or temperature sensors, not to mention the touchscreen.
    This provides many new and exciting options to interact with your user. Through
    the sensors, you can determine three-dimensional device location and how the device
    is being used, such as shaking, rotation, tilt, and so on. Even the touchscreen
    offers many new input methods from just the simple click to gestures and multi-touch.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start this chapter by exploring touchscreen interactions, starting with
    a simple click and long-press, then move on to detecting common gestures using
    the `SimpleOnGestureListener` class. Next, we'll look at multi-touch using the
  prefs: []
  type: TYPE_NORMAL
- en: pinch-to-zoom gesture with `ScaleGestureDetector`.
  prefs: []
  type: TYPE_NORMAL
- en: This book is meant to offer a quick guide to adding features and functionality
    to your own applications. As such, the focus is on the code required but it's
    highly recommended that you become familiar with the design guidelines as well.
  prefs: []
  type: TYPE_NORMAL
- en: Check out the Google Gesture Design Guidelines at [https://www.google.com/design/spec/patterns/gestures.html](https://www.google.com/design/spec/patterns/gestures.html).
  prefs: []
  type: TYPE_NORMAL
- en: In the latter part of this chapter, we'll look at sensor abilities in Android,
    using the Android Sensor Framework. We'll demonstrate how to obtain a list of
    all available sensors, plus how to check for a specific sensor. Once we identify
    a sensor, we'll demonstrate setting up a listener to read the sensor data. Finally,
    we'll end the chapter with a demonstration of how to determine the device orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for click and long-press events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost every application needs to recognize and respond to basic events such
    as clicks and long-presses. It's so basic, in most recipes we use the XML `onClick`
    attribute, but more advanced listeners require to be set up through code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android provides an Event Listener interface for receiving a single notification
    when certain actions occur, as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onClick()`: It''s called when a View is pressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onLongClick()`: It''s called when the View is long-pressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onFocusChange()`: It''s called when the user navigates to or from the View'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onKey()`: It''s called when a hardware key is pressed or released'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onTouch()`: It''s called when a touch event occurs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe will demonstrate responding to a click event, as well as a long-press
    event.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `PressEvents`. Use the default Phone
    & Tablet options and select Empty Activity on the Add an Activity to Mobile dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up to receive basic View events is very simple. First, we will create
    a View; we''ll use a button for our example, then set the Event Listener in the
    Activity''s `onCreate()` method. Following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `Button`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open `MainActivy.java` and add the following code to the existing `onCreate()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Run the application on a device or emulator and try a regular click and long-press.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In most examples used in this book, we set up the `onClick` listener in XML
    using the following attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You may notice the XML `onClick()` method callback requires the same method
    signature as the `setOnClickListener` .`onClick()` callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: That's because Android automatically sets up the callback for us when we use
    the XML `onClick` attribute. This example also demonstrates that we can have multiple
    listeners on a single View.
  prefs: []
  type: TYPE_NORMAL
- en: The last point to note is that the `onLongClick()` method returns a Boolean,
    as do most of the other event listeners. `true` is returned to indicate the event
    has been handled.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although a button is typically used to indicate where a user should press, we
    could have used both `setOnClickListener()` and `setOnLongClickListener()` with
    any View, or even a `TextView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned in the introduction, there are other Event Listeners. You can
    use Android Studio''s auto-complete feature to bring up a list of available listeners
    by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you start typing, you'll see a list of available choices with Android Studio's
    auto-complete list.
  prefs: []
  type: TYPE_NORMAL
- en: Recognizing tap and other common gestures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike the Event Listeners described in the previous recipe, gestures require
    a two-step process:'
  prefs: []
  type: TYPE_NORMAL
- en: Gather movement data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyze the data to determine whether it matches a known gesture
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Step 1 begins when the user touches the screen, which fires the `onTouchEvent()`
    callback with the movement data sent in a `MotionEvent` object. Fortunately, Android
    makes step 2, analyzing the data, easier with the `GestureDetector` class, which
    detects the following gestures:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onTouchEvent()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDown()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onFling()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onLongPress()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onScroll()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onShowPress()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDoubleTap()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDoubleTapEvent()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onSingleTapConfirmed()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe will demonstrate using `GestureDetector.SimpleOnGestureListener `to
    recognize the touch and double tap gestures.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `CommonGestureDetector`.
    Use the default Phone & Tablet options and select Empty Activity when prompted
    for the Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using the activity itself to detect gestures, so we don''t need
    to add any Views to the layout. Open `MainActivity.java` and perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following global variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `GestureListener` class within the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `onTouchEvent()` method to the `MainActivity` class to handle
    touch event notifications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, add the following line of code to `onCreate()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Run this application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're using `GestureDetectorCompat`, which is from the support library that
    allows gesture support on devices running Android 1.6 and later.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned in the recipe introduction, detecting gestures is a two-step process.
    To gather movement or gesture data, we start tracking movement with the touch
    event. Every time the `onTouchEvent()` is called, we send that data to the `GestureDetector`.
    The `GestureDetector` handles the second step, analyzing the data. Once a gesture
    has been detected, the appropriate callback is made. Our example handles both
    single and double tap gestures.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your application can easily add support for the remaining gestures detected
    by the `GestureDetector` simply by overriding the appropriate callback.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See the next recipe, *Pinch-to-zoom with multi-touch gestures*, for multi-touch
    gestures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pinch-to-zoom with multi-touch gestures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipe used `SimpleOnGestureListener` to provide detection of simple,
    one-finger gestures. In this recipe, we'll use the `SimpleOnScaleGestureListener`
    class to detect the common multi-touch gesture "pinch to zoom".
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are two screenshots from the application we''ll create in this recipe.
    The first shows the icon zoomed out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0bed65a1-eeca-4669-9847-c0ef32116f29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This second screenshot shows the icon zoomed in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38cd3bce-80d7-4e42-8bb5-572bb44fe95f.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `MultiTouchZoom`. Use the
    default Phone & Tablet options and select Empty Activity when prompted for the
    Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To provide a visual indication of pinch-to-zoom, we''ll use an `ImageView`
    with the application icon. Open `activity_main.xml` and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the existing `TextView` with the following `ImageView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `MainActivity.java` and add the following global variables to the
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `onTouchEvent()` implementation to the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `ScaleListener` class to the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To experiment with the pinch-to-zoom functionality, run the application on a
    device with a touchscreen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ScaleGestureDetector` does all the work by analyzing gesture data and reporting
    the final scale factor through the `onScale()` callback. We get the actual scale
    factor by calling `getScaleFactor()` on `ScaleGestureDetector`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use an `ImageView` with the application icon to provide a visual representation
    of the scaling by setting the `ImageView` scale, using the scale factor returned
    from `ScaleGestureDetector`. We use the following code to prevent the scaling
    from becoming too large or too small:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Swipe-to-Refresh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pulling down a list to indicate a manual refresh is known as the Swipe-to-Refresh
    gesture. It's such a common feature that this functionality has been encapsulated
    in a single widget called `SwipeRefreshLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe will add Swipe-to-Refresh functionality with a `ListView`. The
    following screenshot shows the refresh in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8f6f355-f15d-4a23-9ac6-ccc38021df31.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `SwipeToRefresh`. Use the
    default Phone & Tablet options and select Empty Activity on the Add an Activity
    to Mobile dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to add the `SwipeRefreshLayout` widget and `ListView` to the
    activity layout, then we will implement the refresh listener in the Java code.
    Here are the detailed steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing constraint layout with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open `MainActivity.java` and add the following global variables to the
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to the `MainActivity` class to handle the refresh:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Run the application on a device or an emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the code for this recipe simulates a refresh by adding items to the
    `ListView` each time the refresh method is called. The main steps for implementing
    Swipe-to-Refresh include:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `SwipeRefreshLayout` widget
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the `ListView` within the `SwipeRefreshLayout`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `OnRefreshListener` to call your refresh method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `setRefreshing(false)` after completing your update
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it. The widget makes adding Swipe-to-Refresh very easy!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although the Swipe-to-Refresh gesture is a common feature these days, it''s
    still good practice to include a menu item (especially for accessibility reasons).
    Following is a snippet of XML for the menu layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Call your refresh method in the `onOptionsItemSelected()` callback. When performing
    a refresh from code, such as from the menu item event, you want to notify `SwipeRefreshLayout`
    of the refresh so it can update the UI. Do this with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This tells the `SwipeRefreshLayout` that a refresh is starting so it can display
    the in-progress indicator.
  prefs: []
  type: TYPE_NORMAL
- en: Listing available sensors – an introduction to the Android Sensor Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android includes support for hardware sensors using the Android Sensor Framework.
    The framework includes the following classes and interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SensorManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Sensor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SensorEventListener`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SensorEvent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most Android devices include hardware sensors, but they vary greatly between
    different manufacturers and models. If your application utilizes sensors, you
    have two choices:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the sensor in the Android Manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for the sensor at runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To specify your application uses a sensor, include the `<uses-feature>` declaration
    in the Android Manifest. Here is an example requiring a compass to be available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If your application utilizes the compass, but does not require it to function,
    you should set `android:required="false"` instead; otherwise your application
    will not be available to install from Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sensors are grouped into the following three categories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Motion sensors: Measure acceleration and rotational forces along three axes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Environmental sensors: Measure the local environment, such as ambient air temperature
    and pressure, humidity, and illumination'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Position sensors: Measure the physical position of the device using position
    and a magnometer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Android SDK provides support for the following sensor types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Sensor | Detects | Use |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_ACCELEROMETER` | Motion detection including gravity | Used to determine
    shake, tilt, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_AMBIENT_TEMPERATURE` | Measures ambient room temperature | Used for
    determining local temperature |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_GRAVITY` | Measures the force of gravity on all three axes | Used for
    motion detection |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_GYROSCOPE` | Measures rotation on all three axes | Used to determine
    turn, spin, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_LIGHT` | Measures light level | Used for setting screen brightness
    |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_LINEAR_ACCELERATION` | Motion detection excluding gravity | Used to
    determine acceleration |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_MAGNETIC_FIELD` | Measures geomagnetic field | Used to create a compass
    or determine bearing |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_PRESSURE` | Measures air pressure | Used for barometer |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_PROXIMITY` | Measures objects relative to the screen | Used to determine
    whether the device is being held against the ear during a phone call |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_RELATIVE_HUMIDITY` | Measures relative humidity | Used to determine
    dew point and humidity |'
  prefs: []
  type: TYPE_TB
- en: '| `TYPE_ROTATION_VECTOR` | Measures device orientation | Used to detect motion
    and rotation |'
  prefs: []
  type: TYPE_TB
- en: There are two additional sensors, `TYPE_ORIENTATION` and `TYPE_TEMPERATURE`,
    which have been deprecated as they have been replaced by newer sensors.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe will demonstrate retrieving a list of available sensors. Here is
    a screenshot from the Pixel 2 emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7008410a-903b-497c-80b4-101c14b46060.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `ListDeviceSensors`. Use
    the default Phone & Tablet options and select Empty Activity when prompted for
    the Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''ll query the list of sensors available, then display the results
    in a `ListView`. Here are the detailed steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open `ActivityMain.java` and add the following code to the existing `onCreate()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Run the program on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following line of code is responsible for getting the list of available
    sensors; the rest of the code populates the `ListView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we get back a list of `Sensor` objects. We only get the sensor name
    to display in the `ListView`, but there are other properties available as well.
    See the link provided in the *See also* section for a complete list.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s important to note a device can have multiple sensors of the same type.
    If you are looking for a specific sensor, you can pass in one of the constants
    from the table shown in the introduction. In this case, if you wanted to see all
    the accelerometer sensors available, you could use this call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re not looking for a list of sensors, but need to work with a specific
    sensor, you can check for a default sensor using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android Developer Sensor website at [http://developer.android.com/reference/android/hardware/Sensor.html](http://developer.android.com/reference/android/hardware/Sensor.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading sensor data – using Android Sensor Framework events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous recipe, *Listing available sensors – an introduction to the Android
    Sensor Framework*, provided an introduction to the Android Sensor Framework. Now,
    we''ll look at reading sensor data using `SensorEventListener`. The `SensorEventListener`
    interface only has two callbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onSensorChanged()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onAccuracyChanged()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the sensor has new data to report, it calls `onSensorChanged()` with a
    `SensorEvent` object. This recipe will demonstrate reading a light sensor, but
    since all the sensors use the same framework, it's very easy to adapt this example
    to any of the other sensors. (See the list of sensor types available in the previous
    recipe's introduction.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `ReadingSensorData`. Use
    the default Phone & Tablet options and select Empty Activity when prompted for
    the Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll add a `TextView` to the activity layout to display sensor data, then
    we''ll add the `SensorEventListener` to the Java code. We''ll use the `onResume()`
    and `onPause()` events to start and stop our Event Listener. To get started, open
    `activity_main.xml `and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the existing `TextView` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `MainActivity.java` and add the following global variable declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `SensorListener` class in the `MainActivity` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll register and unregister sensor events in `onResume()` and `onPause()`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to `onCreate()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You can now run the application on a physical device to see the raw data from
    the light sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Android Sensor Framework starts with obtaining the sensor, which we
    do in `onCreate()`. Here, we call `getDefaultSensor(),` requesting `TYPE_LIGHT`.
    We register the listener in `onResume()` and unregister it again in `onPause()`
    to reduce battery consumption. We pass in our `mSensorListener` object when we
    call `registerListener()`.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we are only looking for sensor data, which is sent in the `onSensorChanged()`
    callback. When the sensor changes, we update the `TextView` with the sensor data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've worked with one sensor, you know how to work with all sensors,
    as they all use the same framework. Of course, what you do with the data will
    vary greatly, depending on the type of data you're reading. Environment sensors,
    as shown here, return a single value, but position and motion sensors can also
    return additional elements, indicated as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Environment sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android supports the following four environment sensors:'
  prefs: []
  type: TYPE_NORMAL
- en: Humidity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pressure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temperature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment sensors are generally easier to work with since the data returned
    is in a single element and doesn't usually require calibration or filtering. We
    used a light sensor (`Sensor.TYPE_LIGHT`) for this recipe since most devices include
    a light sensor to control screen brightness.
  prefs: []
  type: TYPE_NORMAL
- en: Position sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Position sensors include:'
  prefs: []
  type: TYPE_NORMAL
- en: Geomagnetic Field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proximity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following sensor types use the Geomagnetic field:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TYPE_GAME_ROTATION_VECTOR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_GEOMAGNETIC_ROTATION_VECTOR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_MAGNETIC_FIELD`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_MAGNETIC_FIELD_UNCALIBRATED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These sensors return three values in the `onSensorChanged()` event, except for
    `TYPE_MAGNETIC_FIELD_UNCALIBRATED`, which sends six values.
  prefs: []
  type: TYPE_NORMAL
- en: 'A third sensor, the Orientation sensor, has been deprecated, and you are now
    recommended to use `getRotation()` and `getRotationMatrix()` to calculate orientation
    changes. (For device orientation, such as Portrait and Landscape modes, see the
    next recipe: *Reading device orientation*.)'
  prefs: []
  type: TYPE_NORMAL
- en: Motion sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Motion sensors include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Accelerometer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gyroscope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gravity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linear acceleration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotation vector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These include the following sensor types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TYPE_ACCELEROMETE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_GRAVITY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_GYROSCOPE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_GYROSCOPE_UNCALIBRATED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_LINEAR_ACCELERATION`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_ROTATION_VECTOR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_SIGNIFICANT_MOTION`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_STEP_COUNTER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE_STEP_DETECTOR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These sensors also include three data elements, with the exception of the last
    three. `TYPE_SIGNIFICANT_MOTION` and `TYPE_STEP_DETECTOR` indicate an event, while
    `TYPE_STEP_COUNTER` returns the number of steps since last boot (while the sensor
    was active).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Listing available sensors - an introduction to the Android Sensor Framework*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a Compass using sensor data and RotateAnimation* recipe in [Chapter
    10](a9bb5495-da76-415c-b83e-c75d0b8ce4fd.xhtml), *Graphics and Animation*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For device orientation, see the next recipe: *Reading device orientation*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the GPS and Location recipe in [Chapter 14](01fd07ae-9274-4fb2-a536-bc3ed6ec088c.xhtml),
    *Location and Using Geofencing*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading device orientation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although the Android framework will automatically load new resources (such
    as the layout) upon orientation changes, there are times when you may wish to
    disable this behavior. If you wish to be notified of an orientation change instead
    of Android handling it automatically, add the following attribute to the Activity
    in the Android Manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When any of the following configuration changes occur, the system will notify
    you through the `onConfigurationChanged()` method instead of handling it automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '`keyboardHidden`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orientation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screenSize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `onConfigurationChanged()` signature is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You'll find the new orientation in `newConfig.orientation`.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling the automatic configuration change (which causes the layout to be
    reloaded and state information to be reset) should not be used as a replacement
    for properly saving state information. Your application can still be interrupted
    or stopped altogether at any time and killed by the system. (See *Saving an activity's
    state* in [Chapter 1](ef2fe8b4-1320-45f5-b0d5-fb9fd1d35e07.xhtml), *Activities*,
    for how to properly save a state.)
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to determine the current device orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `GetDeviceOrientation`. Use
    the default Phone & Tablet options and select Empty Activity when prompted for
    the Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll add a button to the layout to check the orientation on demand. Start
    by opening `activity_main.xml` and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the existing `TextView` with the following `Button`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to handle the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use *Ctrl* + *F11* to rotate the emulator.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All we need to do to get the current orientation is call this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The orientation is returned as an `int`, which we compare to one of three possible
    values, as demonstrated.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another scenario where you may need to know the current orientation is when
    working with camera data, pictures, and/or videos. In this case, you need to get
    the device orientation as and when required.
  prefs: []
  type: TYPE_NORMAL
- en: Getting current device rotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often, the image may be rotated according to the device orientation or to compensate
    for the current orientation. In this scenario, there''s another option available
    to get the rotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding line of code, `rotation` will be one of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Surface.ROTATION_0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Surface.ROTATION_90`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Surface.ROTATION_180`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Surface.ROTATION_270`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rotation value will be from its normal orientation. For example, when using
    a table with a normal orientation of landscape, if a picture is taken in portrait
    orientation the value will be `ROTATION_90` or `ROTATION_270`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Saving an activity's state* recipe in [Chapter 1](ef2fe8b4-1320-45f5-b0d5-fb9fd1d35e07.xhtml),
    *Activities*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following developer link for more information on the Configuration
    class: [http://developer.android.com/reference/android/content/res/Configuration.html](http://developer.android.com/reference/android/content/res/Configuration.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the following link for more information on the `getRotation()` method: [http://developer.android.com/reference/android/view/Display.html#getRotation()](http://developer.android.com/reference/android/view/Display.html#getRotation())
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
