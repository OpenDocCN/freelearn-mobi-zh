["```java\n<service android:name=\".MyService\"/>\n```", "```java\nvoid onCreate();\nvoid onDestroy()\nvoid onStartCommand(Intent intent, int flags, int startId)  \nIBinder onBind(Intent intent)   \nboolean onUnbind(Intent intent)\n```", "```java\n         ComponentName startService(Intent service)\n```", "```java\n     startService(new Intent(this,MyStartedService.class));\n```", "```java\n  int onStartCommand(Intent intent, int flags, int startId)\n```", "```java\npublic class SaveMyLocationService extends Service {\n  boolean shouldStop = false;\n  Queue<String> jobs = new LinkedList<String>();\n\n  Thread thread = new Thread() {\n    @Override\n    public void run() {\n      while (!shouldStop) {\n        String location = takeLocation();\n        if (location != null) {\n          consumeLocation(location);\n        }\n      }\n    }\n  };\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    thread.start();\n}\n\nString takeLocation() {\n  String location = null;\n  synchronized (jobs) {\n    if (jobs.isEmpty()) {\n      try {\n       jobs.wait();\n      } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       return null;\n      }\n     }\n     location = jobs.poll();\n    }\n    return location;\n  }\nvoid consumeLocation(String location) {...}\n}\n```", "```java\n   <service android:name=\".chapter5.SaveMyLocationService\"/>\n```", "```java\n@Override\npublic int onStartCommand(Intent intent, int flags, int startId) {\n  super.onStartCommand(intent, flags, startId);\n  String location = intent.getStringExtra(LOCATION_KEY);\n  synchronized (jobs) {\n    jobs.add(location);\n    jobs.notify();\n  }\n  return START_STICKY;\n    }\n```", "```java\n@Override\npublic void onDestroy() { \n  super.onDestroy();\n  synchronized (jobs) {\n    shouldStop = true;\n    jobs.notify();\n  }\n}\n```", "```java\npublic class SaveMyLocationActivity extends Activity {\n\n  ...\n\n  void onStartServiceClick() {\n    Intent intent = new Intent(this, SaveMyLocationService.class);\n    intent.putExtra(SaveMyLocationService.LOCATION_KEY,\n                    getCurrentLocation());\n    startService(intent);\n  }\n\n  void onStopServiceClick() {\n    Intent intent = new Intent(this,SaveMyLocationService.class);\n    stopService(intent);\n  }\n}\n```", "```java\nabstract void onHandleIntent(Intent intent);\n```", "```java\nstartService(new Intent(context, MyIntentService.class));\n```", "```java\nIntent intent = new Intent(context, MyIntentService.class);\nintent.setData(uri); intent.putExtra(\"param\", \"some value\");\nstartService(intent);\n```", "```java\npublic class MyIntentService extends IntentService {\n\n  public MyIntentService() {\n    super(\"myIntentService\");\n  }\n  protected void onHandleIntent(Intent intent) {\n    // executes on the background HandlerThread.\n  }\n}\n```", "```java\n   <service android:name=\".chapter5.MyIntentService\"/>\n```", "```java\n   <service android:name=\".chapter5.MyIntentService\"\n            android:exported=\"false\"/>\n```", "```java\npublic class CountMsgsIntentService extends IntentService {\n\npublic static final String NUMBER_KEY = \"number\";\n\npublic CountMsgsIntentService() {\n    super(\"CountThread\");\n  }\n\n@Override\nprotected void onHandleIntent(Intent intent) {\n  String phoneNumber = intent.getStringExtra(NUMBER_KEY);\n  Cursor cursor = getMsgsFrom(phoneNumber);\n  int numberOfMsgs = cursor.getCount();\n    // Return will be adressed later\n    ...\n  }\n  // Retrieve the number of messages in the inbox for a\n  // specific number\n  private Cursor getMsgsFrom(String phoneNumber) {\n    String[] select = {\n      Telephony.Sms._ID,\n      Telephony.Sms.ADDRESS,\n      Telephony.Sms.BODY,\n    };\n  String whereClause =\n    Telephony.Sms.ADDRESS + \" = '\" + phoneNumber + \"'\";\n    Uri quri = Uri.parse(\"content://sms/inbox\");\n    return getContentResolver().query(\n        quri,\n        select, // Columns to select\n        whereClause, // Clause to filter results\n        null, // Arguments for the whereClause\n        null);\n  }\n}\n```", "```java\nvoid triggerIntentService(String phone) {\n    Intent intent = new Intent(this,\n                               CountMsgsIntentService.class);\n    intent.putExtra(CountMsgsIntentService.NUMBER_KEY, phone);\n    startService(intent);\n}\n```", "```java\n    public static final String PENDING_RESULT = \"pending_result\";\n    public static final String RESULT = \"result\";\n    public static final int RESULT_CODE = \"countMsgs\".hashCode();\n```", "```java\nprivate static final int REQUEST_CODE = 0;\n```", "```java\n PendingIntent pending = createPendingResult(REQUEST_CODE,\n                                             new Intent(), 0);\n```", "```java\nprivate void triggerIntentService(String phone) {\n    PendingIntent pending = createPendingResult(\n                              REQUEST_CODE, new Intent(), 0);\n    Intent intent = new Intent(this,CountMsgsIntentService.class);\n    intent.putExtra(CountMsgsIntentService.NUMBER_KEY, phone);\n    intent.putExtra(CountMsgsIntentService.PENDING_RESULT, \n                   pending);\n    startService(intent);\n}\n```", "```java\nprotected void onActivityResult(int req, int res, Intent data) {\n\n    if (req == REQUEST_CODE &&\n        res == CountMsgsIntentService.RESULT_CODE) {\n\n     // Retrieve the count from result Intent\n      int result = data.getIntExtra(\n                  CountMsgsIntentService.RESULT, -1);\n\n     // Update UI View with the result\n       TextView msgCountBut = (TextView) findViewById(\n                               R.id.msgCountTv);\n  msgCountBut.setText(Integer.toString(result));\n    }\n    super.onActivityResult(req, res, data);\n}\n```", "```java\n@Override\nprotected void onHandleIntent(Intent intent) {\n\n  String phoneNumber = intent.getStringExtra(NUMBER_KEY);\n  Cursor cursor = countMsgsFrom(phoneNumber);\n  int numberOfMsgs = cursor.getCount();\n\n  try {\n Intent result = new Intent();\n result.putExtra(RESULT, numberOfMsgs);\n PendingIntent reply = intent.getParcelableExtra(\n                           PENDING_RESULT);\n    reply.send(this, RESULT_CODE, result);\n  } catch (PendingIntent.CanceledException exc) {\n Log.e(\"CountMsgsIntentService\", \"reply cancelled\", exc);\n  }\n}\n```", "```java\nprivate void notifyUser(String phoneNumber, int msgsCount) {\n\n  String msg = String.format(\n    \"Found %d from the phone number %s\", msgsCount, phoneNumber);\n\n  NotificationCompat.Builder builder =\n    new NotificationCompat.Builder(this)\n      .setSmallIcon(R.drawable.ic_sms_counter_not)\n      .setContentTitle(\"Inbox Counter\")\n      .setContentText(msg);\n\n  // Gets an instance of the NotificationManager service\n  NotificationManager nm = (NotificationManager) getSystemService(\n                             Context.NOTIFICATION_SERVICE);\n  // Sets an unique ID for this notification\n  nm.notify(phoneNumber.hashCode(), builder.build());\n}\n```", "```java\n@Override\nprotected void onHandleIntent(Intent intent) {\n\n  String phoneNumber = intent.getStringExtra(NUMBER_KEY);\n  Cursor cursor = countMsgsFrom(phoneNumber);\n  int numberOfMsgs = cursor.getCount();\n  notifyUser(phoneNumber,numberOfMsgs);\n  ...\n}\n```", "```java\ngrid.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n  @Override\n  public void onItemClick(AdapterView<?> parent, View view,\n                          int position, long id) {\n    Cursor cursor = (Cursor) mAdapter.getItem(position);\n    int albumId = cursor.getInt( \n      cursor.getColumnIndex(MediaStore.Audio.Albums._ID));\n    Uri sArtworkUri = Uri.parse(\n      \"content://media/external/audio/albumart\");\n    Uri albumArtUri = ContentUris.\n                        withAppendedId(sArtworkUri, albumId);\n    Intent intent = new Intent(UploadArtworkActivity.this,\n                               UploadArtworkIntentService.class);\n    intent.setData(albumArtUri);\n    startService(intent);\n  }\n});\n```", "```java\npublic void onCreate() {\n  super.onCreate();\n  mImageUploader = new ImageUploader(getContentResolver());\n}\n```", "```java\npublic boolean upload(Uri data, ProgressCallack callback) {\n  HttpURLConnection conn = null;\n  try {\n    int len = getContentLength(data);\n    URL destination = new URL(UPLOAD_URL);\n    conn = (HttpURLConnection) destination.openConnection();\n    conn.setRequestMethod(\"POST\");\n    ...\n    OutputStream out = null;\n    try {\n      pump(in = mContentResolver.openInputStream(data),\n           out = conn.getOutputStream(),\n           callback, len);\n    } finally {\n      if (in != null )\n        in.close();\n      if (out != null )\n        out.close();\n      int responseCode = conn.getResponseCode();\n      return (( responseCode >= 200) &&\n              (responseCode < 400));\n    }\n  } catch (IOException e) {\n    Log.e(\"Upload Service\", \"upload failed\", e);\n    return false;\n  } finally {\n    conn.disconnect();\n  }\n}\n```", "```java\nprivate void pump(InputStream in, OutputStream out,\n                  ProgressCallack callback, int len)\nthrows IOException {\n\n  int length, i = 0, size = 1024;\n  byte[] buffer = new byte[size]; // 1kb buffer\n  while ((length = in.read(buffer)) > -1) {   \n    out.write(buffer, 0, length);\n    out.flush();\n    if (callback != null)\n      callback.onProgress(len, ++i * size);\n  }\n}\n```", "```java\nBuilder setProgress(int max, int progress, boolean indeterminate);\n```", "```java\nprivate class ProgressNotificationCallback\n  implements ImageUploader.ProgressCallack {\n  private NotificationCompat.Builder builder;\n  private NotificationManager nm;\n  private int id, prev;\n\n  public ProgressNotificationCallback(\n    Context ctx, int id, String msg) {\n    this.id = id;\n    prev = 0;\n    builder = new NotificationCompat.Builder(ctx)\n      .setSmallIcon(android.R.drawable.stat_sys_upload_done)\n      .setContentTitle(\"Uploading Artwork\")\n      .setContentText(msg)\n      .setProgress(100, 0, false);\n    nm = (NotificationManager)\n         getSystemService(Context.NOTIFICATION_SERVICE);\n    nm.notify(id, builder.build());\n  }\n\n  public void onProgress(int max, int progress) {\n    int percent = (int) ((100f * progress) / max);\n    if (percent > (prev + 5)) {\n      builder.setProgress(100, percent, false);\n      nm.notify(id, builder.build());\n      prev = percent;\n    }\n  }\n\n  public void onComplete(String msg) {\n    builder.setProgress(0, 0, false);\n    builder.setContentText(msg);\n    nm.notify(id, builder.build());\n  }\n}\n```", "```java\n@Override\nprotected void onHandleIntent(Intent intent) {\n  Uri data = intent.getData();\n\n  // Unique id per upload, so each has its own notification\n  int id = Integer.parseInt(data.getLastPathSegment());\n  String msg = String.format(\"Uploading %s.jpg\", id);\n\n  ProgressNotificationCallback progress =\n    new ProgressNotificationCallback(this, id, msg);\n\n  // On Upload sucess\n  if (mImageUploader.upload(data, progress)) {\n    progress.onComplete(\n      String.format(\"Upload finished for %s.jpg\", id)); \n  // On Upload Failure\n  } else {\n    progress.onComplete(\n      String.format(\"Upload failed %s.jpg\", id));\n  }\n}\n```", "```java\nIBinder onBind(Intent intent)\n```", "```java\nboolean onUnbind (Intent intent)\n```", "```java\npublic class Sha1HashService extends Service {\n\n  // Instance Binder given to clients\n  private final IBinder mBinder = new LocalBinder();\n\n  public class LocalBinder extends Binder {\n    Sha1HashService getService() {\n      // Return this instance of LocalService\n      // so clients can call public methods\n      return Sha1HashService.this;\n    }\n  }\n  @Override\n  public IBinder onBind(Intent intent) {\n    return mBinder;\n  }\n}\n```", "```java\npublic class Sha1Activity extends Activity {\n\n  Sha1HashService mService;\n  boolean mBound = false;\n\n  // Defines callbacks for service binding,\n  // passed to bindService()\n  private ServiceConnection mConnection = new ServiceConnection()   \n  {\n    @Override\n    public void onServiceConnected(ComponentName name,\n                                   IBinder service) {\n\n      // We've bound to LocalService,\n      // cast the IBinder and get LocalService instance\n      Sha1HashService.LocalBinder binder =\n        (Sha1HashService.LocalBinder) service;\n      mService = binder.getService();\n      mBound = true;\n\n      // After this the Activity can invoke the Service methods\n    }\n\n    @Override\n    public void onServiceDisconnected(ComponentName arg0) {\n      mBound = false;\n      mService = null;\n    }\n  };\n}\n```", "```java\n@Override\nprotected void onStart() {\n    super.onStart();\n    // Bind to LocalService\n    Intent intent = new Intent(this, Sha1HashService.class);\n    bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n}\n\n@Override\nprotected void onStop() {\n    super.onStop();\n    // Unbind from the service\n    if (mBound) {\n        unbindService(mConnection);\n        mBound = false;\n    }\n}\n```", "```java\npublic class Sha1HashService extends Service {\n\n  private static final int CORE_POOL_SIZE = 2;\n  private static final int MAXIMUM_POOL_SIZE = 4;\n  private static final int MAX_QUEUE_SIZE = 32;\n  private static final BlockingQueue<Runnable> sPoolWorkQueue =\n    new LinkedBlockingQueue<Runnable>(MAX_QUEUE_SIZE);\n\n  private ThreadPoolExecutor mExecutor;\n\n  // Factory to set the Thread Names\n  private static final ThreadFactory sThreadFactory =\n  new ThreadFactory() {\n    private final AtomicInteger mCount = new AtomicInteger(1);\n    public Thread newThread(Runnable r) {\n      Thread t = new Thread(r, \"SHA1HashService #\" +\n                                mCount.getAndIncrement());\n      t.setPriority(Thread.MIN_PRIORITY);\n      return t;\n    }\n  };\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    mExecutor = new ThreadPoolExecutor(CORE_POOL_SIZE,\n                                       MAXIMUM_POOL_SIZE, 1,\n                                       TimeUnit.SECONDS, \n                                       sPoolWorkQueue,\n                                       sThreadFactory);\n    mExecutor.prestartAllCoreThreads();\n  }\n```", "```java\nvoid getSha1Digest(final String text) {\n\n  Runnable runnable = new Runnable() {\n    @Override\n    public void run() {\n     try {\n        // Execute the Long Running Computation\n        final String digest = SHA1(text);\n      } catch (Exception e) {\n        Log.e(\"Sha1HashService\", \"Hash failed for \"+ text, e);\n      }\n    }\n  };\n  // Submit the Runnable on the ThreadPool\n  mExecutor.execute(runnable);\n}\n\nprivate String SHA1(String text) throws Exception {\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n  md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n  byte[] sha1hash = md.digest();\n  return convertToHex(sha1hash);\n}\nprivate String convertToHex(byte[] data) {\n   ...\n}\n```", "```java\n// Invoke the Sha1Hash Service to calculate the digest\n//  when the hash button is pressed\nqueryButton.setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    EditText et = (EditText)findViewById(R.id.text);\n    if (mService != null) {\n      mService.getSha1Digest(et.getText().toString());\n    }\n  }\n});\n```", "```java\npublic interface ResultCallback<T> {\n    void onResult(T data);\n}\n```", "```java\nprivate void postResultOnUI(final String result,\n  final WeakReference<ResultCallback<String>> refCallback) {\n\n  // Retrieve the main Thread Looper\n  Looper mainLooper = Looper.getMainLooper();\n  final Handler handler = new Handler(mainLooper);\n  handler.post(new Runnable() {\n    @Override\n    public void run() {\n      if ( refCallback.get() != null ) {\n        refCallback.get().onResult(result);\n      }\n    }\n  });\n}\n\npublic void getSha1Digest(final String text, \n                          ResultCallback<String> callback) {\n\n  final WeakReference<ResultCallback<String>> ref =\n    new WeakReference<ResultCallback<String>>(callback);\n\n  Runnable runnable = new Runnable() {\n    @Override\n    public void run() {\n      try {\n        // Execute the Long Running Computation\n        final String digest = SHA1(text);     \n        // Execute the Runnable on UI Thread\n        postResultOnUI(digest, ref);\n      } catch (Exception e) {\n        Log.e(\"Sha1HashService\", \"Hash failed\", e);\n      }\n    }\n  };\n  // Submit the Runnable on the ThreadPool\n  mExecutor.execute(runnable);\n}\n```", "```java\npublic class Sha1Activity extends Activity\n  implements ResultCallback<String> {\n\n   @Override\n    public void onResult(String data) {\n        // Updates the result view with the digest string\n        TextView et = (TextView)findViewById(R.id.hashResult);\n        et.setText(data);\n    }\n   }\n```", "```java\nif ( mService != null ) {\n  mService.getSha1Digest(et.getText().toString(),\n                         Sha1Activity.this);\n}\n```", "```java\nvoid getSha1Digest(final String text,\n                   ResultCallback<String> callback) {\n\n  AsyncTask.SERIAL_EXECUTOR.execute(runnable);\n  // or\n  AsyncTask.THREAD_POOL_EXECUTOR.execute(runnable);\n}\n```", "```java\n    public static final String DIGEST_BROADCAST =\n            \"asynchronousandroid.chapter5.DIGEST_BROADCAST\";\n    public static final String RESULT = \"digest\";\n```", "```java\n    private void broadcastResult(String digest) {\n        Intent intent = new Intent(DIGEST_BROADCAST);\n        intent.putExtra(RESULT, digest);\n        LocalBroadcastManager.getInstance(this).\n          sendBroadcast(intent);\n    }\n```", "```java\nvoid getSha1Digest(final String text) {\n  Runnable runnable = new Runnable() {\n    @Override\n    public void run() {\n      try {\n        // Execute the Long Running Computation\n        final String digest = SHA1(text);\n        // Broadcast Result to Subscribers\n        broadcastResult(digest);       \n  ...\n}\n```", "```java\nprivate static class DigestReceiver extends BroadcastReceiver {\n\n  private TextView view;\n\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    if (view != null) {\n      String result = intent.getStringExtra(\n                        Sha1HashService.RESULT);\n      view.setText(result);\n    } else {\n      Log.i(\"Sha1HashService\", \" ignoring - we're detached\");\n    }\n  }\n\n  public void attach(TextView view) {\n    this.view = view;\n  }\n  public void detach() {\n    this.view = null;\n  }\n};\n```", "```java\n@Override\nprotected void onStart() {\n  super.onStart();\n     ...\n  mReceiver.attach((TextView) findViewById(R.id.hashResult));\n  IntentFilter filter =\n    new IntentFilter(Sha1HashService.DIGEST_BROADCAST);\n  LocalBroadcastManager.getInstance(this).\n  registerReceiver(mReceiver, filter);\n}\n\n@Override\nprotected void onStop() {\n  ...\n  LocalBroadcastManager.getInstance(this).\n  unregisterReceiver(mReceiver);\n  mReceiver.detach();\n}\n```", "```java\npublic static final String HANDLED = \"intent_handled\";\n```", "```java\nvoid broadcastResult(final String text) { \n  Intent intent = new Intent(DIGEST_BROADCAST);\n  intent.putExtra(RESULT, digest);              \n  // Synchronous Broadcast\n LocalBroadcastManager.getInstance(Sha1HashService.this).\n sendBroadcastSync(intent);\n  boolean handled = intent.getBooleanExtra(HANDLED, false);\n}\n```", "```java\n@Override\npublic void onReceive(Context context, Intent intent) {\n  if (view != null) {\n    String result = intent.getStringExtra(\n                      Sha1HashBroadCastUnhService.RESULT);\n    intent.putExtra(Sha1HashBroadCastUnhService.HANDLED, true);\n    view.setText(result);\n  } else {\n    Log.i(\"Sha1HashService\", \" ignoring - we're detached\");\n  }\n}\n```", "```java\nprivate void broadcastResult(final String text,\n                             final String digest) {\n\n  Looper mainLooper = Looper.getMainLooper();\n  Handler handler = new Handler(mainLooper);\n  handler.post(new Runnable() {\n    @Override\n    public void run() {\n      Intent intent = new Intent(DIGEST_BROADCAST);\n      intent.putExtra(RESULT, digest);\n      LocalBroadcastManager.getInstance(Sha1HashService.this).\n      sendBroadcastSync(intent);\n      boolean handled = intent.getBooleanExtra(HANDLED,\n                                               false);\n      if (!handled) {\n        notifyUser(text, digest);\n      }\n    }\n  });\n}\n```", "```java\nvoid getSha1Digest(final String text) {\n  ...\n  final String digest = SHA1(text);\n  // Execute the Runnable on UI Thread\n  broadcastResult(text, digest);\n  ...\n}\n```"]