- en: Chapter 6. Storing Documents within the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：在云中存储文档
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Storing and using documents within iCloud
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在iCloud中存储和使用文档
- en: Working with the iCloud storage APIs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用iCloud存储API进行操作
- en: Using iCloud document storage
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用iCloud文档存储
- en: Storing key-value data in iCloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在iCloud中存储键值数据
- en: Detecting file version conflicts within iCloud
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在iCloud中检测文件版本冲突
- en: Building the `iCloud` application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建`iCloud`应用程序
- en: Requesting entitlements for iCloud storage
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求iCloud存储权限
- en: Configuring iOS devices to use iCloud
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置iOS设备以使用iCloud
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The iCloudExample application allows you to keep a visual record for simple
    reminders for your everyday needs. This application records this information,
    and then adds this information into your iCloud account repository, using the
    **iCloud storage APIs**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: iCloudExample应用程序允许您为日常需求创建简单的提醒的视觉记录。该应用程序记录这些信息，然后使用**iCloud存储API**将这些信息添加到您的iCloud账户存储库中。
- en: In this chapter, we will take a look at the features of iCloud and the storage
    APIs, and see how we can incorporate these into our applications, so that it can
    interact with the iCloud servers to read, write, and edit documents, and provide
    us with the ability to access these items from all our iOS devices, without the
    need of having to synchronize or transfer these files.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨iCloud的功能和存储API，并了解如何将这些功能集成到我们的应用程序中，以便它可以与iCloud服务器交互，读取、写入和编辑文档，并为我们提供从所有iOS设备访问这些项的能力，无需同步或传输这些文件。
- en: Storing documents within the user's iCloud account provides us with an additional
    layer of security, so even if the user loses their device, these documents can
    easily be retrieved, and provide the ability to sync data between devices, provided
    that they are contained within iCloud storage.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户的iCloud账户中存储文档为我们提供了额外的安全层，因此即使用户丢失了设备，这些文档也可以轻松检索，并提供了在设备之间同步数据的能力，前提是它们包含在iCloud存储中。
- en: Storing and using documents within iCloud
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iCloud中存储和使用文档
- en: In this recipe, we will learn about the different methods that can be used to
    store and use documents within iCloud.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将了解可以用于在iCloud中存储和使用文档的不同方法。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we will learn about the file coordinator and the file presenter
    classes and how the `UIDocument` class can be registered to receive updates whenever
    the iCloud data gets updated.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解文件协调器和文件展示类，以及如何将`UIDocument`类注册为在iCloud数据更新时接收更新。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following example shows how to use the `NSFileCoordinator` class:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何使用`NSFileCoordinator`类：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The job of a file coordinator is to coordinate the reads and writes performed
    by your application and the **sync** **daemon** on the same document. For example,
    your application and the daemon may both read the document at the same time, but
    only one may write to the file at any single time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文件协调器的任务是协调应用程序和同一文档上的**同步****守护进程**执行的读取和写入操作。例如，您的应用程序和守护进程可能同时读取文档，但任何时候只能有一个写入文件。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `NSFileCoordinator` class, you can refer to the
    Apple Developer Documentation located at the following link location: [https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFileCoordinator_class/Reference/Reference.html](https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFileCoordinator_class/Reference/Reference.html)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`NSFileCoordinator`类的更多信息，您可以参考以下链接位置的Apple开发者文档：[https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFileCoordinator_class/Reference/Reference.html](https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFileCoordinator_class/Reference/Reference.html)
- en: 'The following example shows how to move a document from local storage to iCloud:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何将文档从本地存储移动到iCloud：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `NSFilePresenter` protocol reference, you can refer
    to the Apple developer documentation located at the following link location:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`NSFilePresenter`协议参考的更多信息，您可以参考以下链接位置的Apple开发者文档：[https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html](https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html)
- en: '[https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html](https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html](https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html)'
- en: As you can see from the following screenshot, it shows the process when changes
    are made on one device, and having those changes stored locally before being pushed
    back out to the iCloud service, using a local daemon process. We will learn about
    the `NSFileCoordinator` class and storing documents in the cloud when we look
    at building our example application for this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，它显示了在一个设备上做出更改的过程，并在将更改推回到iCloud服务之前将其存储在本地，使用本地守护进程。当我们查看本章的示例应用程序时，我们将了解
    `NSFileCoordinator` 类和云存储文档。
- en: '![How to do it...](img/3349OT_06_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3349OT_06_01.jpg)'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Whenever your application stores documents to iCloud, it must specify one or
    more containers in which those documents contents will be stored, by including
    the `com.apple.developer.ubiquity-container-identifiers` key value entry within
    your application's `entitlements` file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用程序将文档存储到iCloud时，它必须指定一个或多个容器，这些容器将存储文档内容，通过在你的应用程序的 `entitlements` 文件中包含
    `com.apple.developer.ubiquity-container-identifiers` 键值条目来实现。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned how to establish a `UIDocument` document as a file
    presenter so that you can register the class to receive updates whenever its cloud
    data gets updated by telling `NSFileCoordinator` to add the document as *presenter*.
    This means that a presenter class is one that takes a strong interest in knowing
    when outside changes happen to a given file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们学习了如何将 `UIDocument` 文档作为一个文件展示者来建立，这样你就可以通过告诉 `NSFileCoordinator` 将文档添加为
    *展示者* 来注册这个类，以便在它的云数据更新时接收更新。这意味着展示者类是对知道给定文件外部变化发生有强烈兴趣的类。
- en: Whenever you register for changes, you start by creating a document and a coordinator
    and then initialize the coordinator with the document as its performer, as shown
    in the first code snippet. Handling it this way, means that, the new document
    or presenter using the `NSFileCoordinator` class allows it to receive alerts about
    these changes and allows you to update your applications UI to handle when these
    changes occur.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你注册更改时，你首先创建一个文档和一个协调器，然后将文档作为其表演者初始化协调器，如第一个代码片段所示。以这种方式处理，意味着使用 `NSFileCoordinator`
    类的新文档或展示者可以接收关于这些更改的警报，并允许你更新应用程序的UI以处理这些更改发生的情况。
- en: Next, we use the `NSFileManager` class that allows you to move local files to
    and from the cloud using the `setUbiquitous:itemAtURL:destinationURL:error:` method.
    This method does nothing more, except moves the file safely from your sandbox
    into the central iCloud folder and back.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 `NSFileManager` 类，该类允许你使用 `setUbiquitous:itemAtURL:destinationURL:error:`
    方法在本地文件和云之间移动。此方法除了将文件安全地从你的沙盒移动到中央iCloud文件夹并返回外，不做任何其他操作。
- en: 'The method takes three arguments. The first establishes the direction of movement.
    `YES` brings items from the sandbox to the cloud. The second argument must always
    be the source URL, and the third its destination. If all three arguments are placed
    in the wrong order, the method will fail. The local sandbox URL takes on the following
    form as can be seen in the following URL:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受三个参数。第一个参数确定移动的方向。`YES` 将项目从沙盒移动到云。第二个参数必须是源URL，第三个是目标。如果三个参数放置顺序错误，该方法将失败。本地沙盒URL的形式如下，如以下URL所示：
- en: '`file://localhost/private/var/mobile/Library/Mobile%20Documents/TEAMID~com~geniesoftstudios~iCloudExample/Document.doc;`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`file://localhost/private/var/mobile/Library/Mobile%20Documents/TEAMID~com~geniesoftstudios~iCloudExample/Document.doc;`'
- en: See also
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Working with the iCloud storage APIs* recipe
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与iCloud存储API一起工作* 菜谱'
- en: The *Requesting entitlements for iCloud storage* recipe
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*请求iCloud存储权限* 菜谱'
- en: Working with the iCloud storage APIs
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与iCloud存储API一起工作
- en: In this recipe, we will take a look at the different types of storage methods
    available to us when using iCloud, and how these can be incorporated into your
    own applications.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨在使用iCloud时我们可用的不同存储方法，以及这些方法如何被纳入你自己的应用程序中。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Storing documents within iCloud lets your applications write documents and data
    to a common central location. This also provides the ability to sync and access
    items and recover documents from all of your other iOS devices and Mac OS X computers,
    should the user lose their iOS device.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在iCloud中存储文档允许你的应用程序将文档和数据写入一个共同的中央位置。这也提供了同步和访问项目以及从用户丢失的iOS设备上的所有其他iOS设备和Mac
    OS X计算机中恢复文档的能力。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To fully utilize iCloud storage, there is a need to fully understand one of
    the two ways in which this can happen and how information can be accessed. The
    following table explains the various storage types and their descriptions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用iCloud存储，需要完全理解实现此功能两种方式之一以及如何访问信息。以下表格解释了各种存储类型及其描述：
- en: '| Storage type | Description |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 存储类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| iCloud document storage | Use this feature to store and share user documents
    and data in the user''s iCloud account. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| iCloud文档存储 | 使用此功能在用户的iCloud账户中存储和共享用户文档和数据。 |'
- en: '| iCloud key-value data storage | Use this feature to store and share small
    amounts of data among instances of your application. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| iCloud键值数据存储 | 使用此功能在您的应用程序实例之间存储和共享少量数据。 |'
- en: '![How to do it...](img/3349OT_06_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349OT_06_02.jpg)'
- en: As you can see from the previous screenshot, this shows you the overall process
    involved whenever information is created within local iCloud storage within your
    application's sandbox.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，这显示了在您的应用程序沙盒内的本地iCloud存储中创建信息时涉及的整个过程。
- en: Using iCloud document storage
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用iCloud文档存储
- en: Storing documents within iCloud is easiest to implement and can be achieved
    by subclassing a class called the `UIDocument` class. This class handles everything
    that is required to read and write files, coordinating with the iCloud daemon,
    and more.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在iCloud中存储文档是最容易实现的，可以通过对名为`UIDocument`的类进行子类化来实现。此类处理读取和写入文件所需的一切，包括与iCloud守护进程的协调等。
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will be taking a more in depth look at how to create a sub-class of the `UIDocument`
    class when we start building our iCloud application to store and retrieve document
    content within the cloud.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始构建我们的iCloud应用程序以在云中存储和检索文档内容时，我们将更深入地探讨如何创建`UIDocument`类的子类。
- en: Storing key-value data in iCloud
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在iCloud中存储键值数据
- en: Storing data within iCloud provides you with a means of making your applications
    share data between other copies of the application running on other Mac OS X computers
    and other iOS devices.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在iCloud中存储数据为您提供了使您的应用程序在运行在其他Mac OS X计算机和其他iOS设备上的其他应用程序副本之间共享数据的方法。
- en: 'The following code snippet shows how to set up the cloud so that you are able
    to write data to the user''s iCloud using the key-value approach:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了如何设置云，以便您能够使用键值方法将数据写入用户的iCloud：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When your application uses the iCloud `key-value` data store approach, the user
    will never see this happening as your application will be using this to share
    very small amounts of information that is only used by your application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的应用程序使用iCloud `键值`数据存储方法时，用户将永远不会看到这一过程，因为您的应用程序将使用此方法来共享仅由您的应用程序使用的非常小的信息。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When using the `NSUbiquitousKeyValueStore` class, you must ensure that you have
    ticked the `Key-Value Store` checkbox within your project preferences.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`NSUbiquitousKeyValueStore`类时，您必须确保在项目首选项中勾选了`键值存储`复选框。
- en: The amount of space available for a `single key-value store` is limited to 64
    kilobytes and any data that is written to a single key-value within your container
    must not exceed 4 kilobytes in size. This is suitable for storing small amounts
    of data about your application, but it is not advisable to use it to store documents
    or large amounts of data.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 单个`键值存储`可用的空间限制为64千字节，并且写入容器中单个键值的数据大小不得超过4千字节。这适用于存储有关您应用程序的少量数据，但不建议用它来存储文档或大量数据。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about iCloud, refer to the Apple developer documentation
    at [https://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/iCloud/iCloud.html](https://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/iCloud/iCloud.html)`#//apple_ref/doc/uid/TP40007072-CH5-SW1`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有关iCloud的更多信息，请参阅Apple开发者文档[https://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/iCloud/iCloud.html](https://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/iCloud/iCloud.html)`#//apple_ref/doc/uid/TP40007072-CH5-SW1`。
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned about the different methods that can be used to store
    information within the iCloud. When working with document storage, we need to
    set up "a ubiq" (short for ubiquitous), variable to point to our current documents
    container within our iCloud account, and then use the `ubiquitousPackage` class,
    and then append our filename to the location of the iCloud documents container.
    We then initialize our `UIDocument` class document with some default contents,
    and then use the `UIDocumentSaveForCreating` property of our `forSaveOperation`
    method to create a brand new document.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们了解了可以用于在iCloud中存储信息的不同方法。当处理文档存储时，我们需要设置一个“ubiq”（ubiquitous的简称），变量来指向我们iCloud账户中的当前文档容器，然后使用`ubiquitousPackage`类，然后将我们的文件名附加到iCloud文档容器的位置。然后我们使用一些默认内容初始化我们的`UIDocument`类文档，然后使用`forSaveOperation`方法的`UIDocumentSaveForCreating`属性创建一个全新的文档。
- en: Alternatively, when working with `key-value` data, you will need to use the
    `NSUbiquitousKeyValueStore` class that gives you the ability to share small amounts
    of data between each of your devices. We then use the `NSUserDefaults` class to
    programmatically interact with the system defaults, so that we can use the `setString:`
    method to store the string `Success` for the `iCloudStatus` key determined by
    the `forKey:` method. Finally, we call the `synchronize` method to store the values
    that we specified back to the iCloud server, and then use the `stringForKey:`
    method and retrieve the value for our key and display this value to the console
    window.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，当与`key-value`数据一起工作时，您需要使用`NSUbiquitousKeyValueStore`类，它使您能够在您的每个设备之间共享少量数据。然后我们使用`NSUserDefaults`类以编程方式与系统默认值交互，这样我们就可以使用`setString:`方法将字符串`Success`存储为`iCloudStatus`键，该键由`forKey:`方法确定。最后，我们调用`synchronize`方法将我们指定的值存储回iCloud服务器，然后使用`stringForKey:`方法检索我们的键的值并将此值显示在控制台窗口中。
- en: See also
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building the iCloud application* recipe
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建iCloud应用程序*菜谱'
- en: The *Storing and using documents within iCloud* recipe
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在iCloud中存储和使用文档*菜谱'
- en: The *Requesting entitlements for iCloud storage* recipe
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*请求iCloud存储权限*菜谱'
- en: Detecting file version conflicts within iCloud
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iCloud中检测文件版本冲突
- en: In this recipe, we will take a look at how easy it is to implement and handle
    file version conflicts within your own applications.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看看如何在您的应用程序中实现和处理文件版本冲突是多么容易。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Handling version conflicts of files is a common issue in software development.
    With iCloud, this needs to be handled effectively and efficiently when multiple
    instances of your applications are running on multiple devices, and both try to
    modify the same document. This will result in a conflict when both devices try
    to upload the changes made to the document at the same time. At this point, iCloud
    will end up with two different versions of the same file, and has to decide what
    to do with them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 处理文件版本冲突是软件开发中常见的问题。使用iCloud时，当多个实例在多个设备上运行并尝试修改同一文档时，需要有效地和高效地处理。当两个设备同时尝试上传对文档所做的更改时，这将导致冲突。在这种情况下，iCloud将最终拥有同一文件的两个不同版本，并必须决定如何处理它们。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In order to determine when a document file conflict has occurred, you will
    need to register an observer object to periodically check the `documentState`
    property for the `UIDocumentStateChangedNotification` notification object whenever
    changes have been made to the document to check for the presence of a conflict
    and act accordingly:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确定何时发生文档文件冲突，您需要注册一个观察者对象，在每次对文档进行更改时，定期检查`UIDocumentStateChangedNotification`通知对象的`documentState`属性，以检查冲突的存在并相应地采取行动：
- en: '[PRE4]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, we need to create the `documentChanged:` method. This method runs as a
    notification handler and waits for the `UIDocumentStateChangedNotification` notification
    to occur in order to be able to check the `documentState` of the object when processing
    completes.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建`documentChanged:`方法。这个方法作为一个通知处理程序运行，等待`UIDocumentStateChangedNotification`通知发生，以便在处理完成后能够检查对象的`documentState`。
- en: '[PRE5]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned how to register and use a notification handler to
    notify us when changes in document state occur by the `UIDocumentStateChangedNotification`
    notification object.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们学习了如何通过`UIDocumentStateChangedNotification`通知对象注册和使用通知处理程序，以便在文档状态发生变化时通知我们。
- en: We then use the `URLForUbiquityContainerIdentifier` method of the `NSFileManager`
    object while passing through `nil` as an argument in order to default to the first
    container listed in the entitlements file. The recommended approach is that all
    documents are required to be stored within the `Documents` subdirectory and need
    to be appended to the URL path as well.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`NSFileManager`对象的`URLForUbiquityContainerIdentifier`方法，并通过将`nil`作为参数传递来默认选择权限文件中列出的第一个容器。建议的方法是所有文档都必须存储在`Documents`子目录中，并且需要附加到URL路径上。
- en: Finally, we use the `NSFileVersion` object to replace all unresolved versions
    of the document with the current document. Next, we enumerate through our array
    containing the `NSFileVersion` object representing the conflicted versions of
    the document and set the `resolved` property for each object to `YES` to remove
    all conflict versions associated with the document file.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`NSFileVersion`对象将文档的所有未解决版本替换为当前文档。接下来，我们遍历包含表示文档冲突版本的`NSFileVersion`对象的数组，并将每个对象的`resolved`属性设置为`YES`，以删除与文档文件关联的所有冲突版本。
- en: 'The following table provides you with a description of the different document
    states:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格为您提供了不同文档状态的描述：
- en: '| Document state | Description |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 文档状态 | 描述 |'
- en: '| --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `UIDocumentStateNormal` | Indicated that the document is open and enabled
    for user editing. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `UIDocumentStateNormal` | 表示文档已打开并启用用户编辑。|'
- en: '| `UIDocumentStateClosed` | Indicates that the document is currently closed,
    or an error occurred while reading of the document. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `UIDocumentStateClosed` | 表示文档当前已关闭，或读取文档时发生错误。|'
- en: '| `UIDocumentStateConflict` | Indicates that conflicts have been detected for
    the current document. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `UIDocumentStateConflict` | 表示已检测到当前文档的冲突。|'
- en: '| `UIDocumentStateSavingError` | Indicates that an error occurred during an
    attempt to save the document. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `UIDocumentStateSavingError` | 表示在尝试保存文档时发生错误。|'
- en: '| `UIDocumentStateEditingDisabled` | Indicates that the document is busy, and
    is not currently safe for editing. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `UIDocumentStateEditingDisabled` | 表示文档正忙，目前不适合编辑。|'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `UIDocumentStateChangedNotification` framework,
    refer to the Apple developer documentation located at the following URL:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`UIDocumentStateChangedNotification`框架的更多信息，请参阅位于以下URL的Apple开发者文档：
- en: '[https://developer.apple.com/library/ios/#documentation/DataManagement/Conceptual/DocumentBasedAppPGiOS/Introduction/Introduction.html](https://developer.apple.com/library/ios/#documentation/DataManagement/Conceptual/DocumentBasedAppPGiOS/Introduction/Introduction.html)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/#documentation/DataManagement/Conceptual/DocumentBasedAppPGiOS/Introduction/Introduction.html](https://developer.apple.com/library/ios/#documentation/DataManagement/Conceptual/DocumentBasedAppPGiOS/Introduction/Introduction.html)'
- en: See also
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Working with the iCloud storage APIs* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用iCloud存储API进行工作*的配方'
- en: The *Detecting file version conflicts within iCloud* recipe
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在iCloud中检测文件版本冲突*的配方'
- en: Building the iCloud application
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建iCloud应用程序
- en: In this recipe, we will learn how to build an iCloud-aware application using
    the iCloud storage APIs.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何使用iCloud存储API构建一个感知iCloud的应用程序。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this section, we will learn how to create an application that will enable
    us to create new documents within our iCloud repository. To begin, follow the
    following simple steps as outlined:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建一个应用程序，使我们能够在我们的iCloud存储库中创建新的文档。首先，按照以下简单步骤进行操作：
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序执行以下简单步骤：
- en: Launch Xcode from the `/Xcode4/Applications` folder.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`/Xcode4/Applications`文件夹启动Xcode。
- en: Choose **Create a new Xcode project**, or navigate to **File** | **New Project**.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建一个新的Xcode项目**，或导航到**文件** | **新建项目**。
- en: Select the **Single View Application** option from the list of available templates.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用模板列表中选择**单视图应用程序**选项。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮，继续向导的下一步。
- en: Next, enter in `iCloudExample`as the name for your project.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`iCloudExample`作为项目名称输入。
- en: Choose **iPhone** from under the **Devices** drop-down list.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**设备**下拉列表中选择**iPhone**。
- en: Ensure that the **Use Storyboards** checkbox has not been selected.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保未选中**使用故事板**复选框。
- en: Ensure that the **Use Automatic Reference Counting** checkbox is selected.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已选中**使用自动引用计数**复选框。
- en: Ensure that the **Include Unit Tests** checkbox has not been ticked.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保没有勾选**包含单元测试**复选框。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮继续到向导的下一个步骤。
- en: Specify the location where you would like to save your project.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定您希望保存项目的位置。
- en: Then, click on the **Create** button to continue and display the Xcode workspace.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**创建**按钮继续并显示Xcode工作区。
- en: Now that we have created our `iCloudExample` project, we can start building
    our user interface that will allow us to create and modify documents and then
    having these saved back to iCloud.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`iCloudExample`项目，我们可以开始构建用户界面，这将允许我们创建和修改文档，并将这些文档保存回iCloud。
- en: Select the `ViewController.xib` file from the **Project Navigator** window.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口中选择`ViewController.xib`文件。
- en: From the **Object Library** window, select-and-drag a toolbar, add this to the
    top of the view.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**窗口中选择并拖动一个工具栏，将其添加到视图的顶部。
- en: Select the **Item** button located within our toolbar that we previously added.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们之前添加到工具栏中的**项目**按钮。
- en: From the **Attributes Inspector** section, change the value of the **Identifier**
    property to **Save** and change the value of the **Style** property to **Bordered.**
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性检查器**部分，将**标识符**属性的值更改为**保存**，并将**样式**属性的值更改为**带边框**。
- en: From the **Object Library**, select and drag a `Bar Button Item` object, and
    add this next to the **Save** button that we added previously.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中选择并拖动一个`Bar Button Item`对象，并将其添加到我们之前添加的**保存**按钮旁边。
- en: From the **Attributes Inspector** section, change the value of the **Identifier**
    property to **Custom** and change the value of the **Title** property to **Load**.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性检查器**部分，将**标识符**属性的值更改为**自定义**，并将**标题**属性的值更改为**加载**。
- en: Finally, from the **Object Library**, select and drag a `Text View` object to
    the center of our view controller, and adjust the size so that it fills the entire
    area of the screen.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从**对象库**中选择并拖动一个`Text View`对象到视图控制器的中心，并调整大小以填充整个屏幕区域。
- en: The following screenshot shows the completed user interface with the added toolbar,
    buttons, and the `Text View` control.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了添加了工具栏、按钮和`Text View`控制器的完成用户界面。
- en: '![How to do it...](img/3349OT_06_03.jpg)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/3349OT_06_03.jpg)'
- en: 'Our next step is to create the outlet and property events for each of our buttons,
    as well as the `Text View` control. Creating these will allow us to access the
    associated methods and control properties directly within our code. To create
    an outlet, follow these simple steps:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们下一步是创建每个按钮以及`Text View`控制器的出口和属性事件。创建这些事件将允许我们在代码中直接访问相关方法和控制属性。要创建出口，请按照以下简单步骤操作：
- en: Open the **Assistant Editor** page by navigating to **Navigate** | **Open in
    Assistant Editor**, or by pressing the *option* + *command* + keys.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**导航** | **在辅助编辑器中打开**，或按住**选项** + **命令**键打开**辅助编辑器**页面。
- en: Ensure that the `ViewController.h` interface file is displayed within the **Assistant
    Editor** window.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**辅助编辑器**窗口中显示`ViewController.h`接口文件。
- en: Select the **Save** (`Bar Button Item`) control, then hold down the *Control*
    key, and drag it into the `ViewController.h` interface file.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**保存**（`Bar Button Item`）控件，然后按住**控制**键，将其拖入`ViewController.h`接口文件。
- en: Choose **Outlet** from the **Connection** dropdown for the connection to be
    created.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建连接时，从**连接**下拉菜单中选择**出口**。
- en: Enter in `btnSave` for the name of the **Outlet** property to create.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`btnSave`作为要创建的**出口**属性的名称。
- en: Choose **strong** from the **Storage** drop-down menu.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**存储**下拉菜单中选择**strong**。
- en: Repeat steps 3 to 6 to create the outlet properties for the **Load** bar button
    item and the **Text View** control, while providing the following naming `btnLoad`
    and `docContents`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤3到6来创建**加载**按钮项和**Text View**控制器的出口属性，同时提供以下命名`btnLoad`和`docContents`。
- en: 'Now that we have created the instance variable outlets for our controls, we
    need to create the associated actions for the **Save** button. Creating these
    actions allows an event to be fired when the button is pressed. To create an action,
    follow these simple steps:'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的控件创建了实例变量出口，我们需要为**保存**按钮创建相关动作。创建这些动作允许在按钮按下时触发事件。要创建动作，请按照以下简单步骤操作：
- en: With the `ViewController.h` interface file still displayed within the **Assistant
    Editor** window, select the **Save** (`Bar Button Item`) control, and hold down
    the *control* key and drag it into the `ViewController.h` interface file.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Assistant Editor** 窗口中仍然显示 `ViewController.h` 接口文件时，选择 **Save** (`Bar Button
    Item`) 控件，并按住 *control* 键将其拖入 `ViewController.h` 接口文件。
- en: Choose **Action** from the **Connection** drop-down list for the connection
    to be created.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Connection** 下拉列表中选择 **Action** 以创建连接。
- en: Enter in `btnSave` for the **Name** value of the method to be created.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将方法的 **Name** 值输入为 `btnSave`。
- en: Repeat steps 1 to 3 to create the outlet properties for the **Load** and **Text
    View** controls, while providing the following naming `btnLoad` and `docContents`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤 1 到 3 以创建 **Load** 和 **Text View** 控件的输出属性，同时提供以下命名 `btnLoad` 和 `docContents`。
- en: 'The following code snippet shows the completed `ViewController.h` interface
    file:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码片段显示了完成的 `ViewController.h` 接口文件：
- en: '[PRE6]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Our next step is to use the `UIDocument` class that comes with iOS 5 to make
    it much easier for us to work with iCloud documents. This class acts as the middleware
    between the file and the actual data that it contains, and implements the `NSFilePresenter`
    protocol to handle the entire document processing in the background, so that the
    application is not blocked when files are opened or saved.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们下一步是使用 iOS 5 中包含的 `UIDocument` 类，使我们能够更容易地处理 iCloud 文档。这个类充当文件和它包含的实际数据之间的中间件，并实现了
    `NSFilePresenter` 协议来处理整个文档处理的后台操作，这样在文件打开或保存时应用程序不会被阻塞。
- en: From the **Xcode** menu bar, navigate to **File** | **New** | **File...** or
    press *Command* + *N*.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Xcode** 菜单栏中，导航到 **File** | **New** | **File...** 或按 *Command* + *N*。
- en: Select the **Objective-C class** template from the list of templates.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模板列表中选择 **Objective-C class** 模板。
- en: Click on the **Next** button to proceed to the next step within the wizard.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Next** 按钮继续向导中的下一步。
- en: Enter in `Snippet` as the name of the file to be created.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `Snippet` 作为要创建的文件名。
- en: Ensure that you have selected `UIDocument` as the type to create from the **Subclass
    of** dropdown.![How to do it...](img/3349OT_06_04.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已从 **Subclass of** 下拉菜单中选择 `UIDocument` 作为创建的类型。![如何操作...](img/3349OT_06_04.jpg)
- en: Note
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't see the `UIDocument` class shown within your drop-down list, simply
    type it in manually.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您在下拉列表中看不到 `UIDocument` 类，只需手动输入即可。
- en: Click on the **Next** button to proceed with the next step of the wizard.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Next** 按钮继续向导的下一步。
- en: Click on the **Create** button to save the file to the folder location specified.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Create** 按钮将文件保存到指定的文件夹位置。
- en: 'Open the `Snippet.h` interface file, located within the `iCloudExample` folder
    and enter in the following code snippet:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于 `iCloudExample` 文件夹中的 `Snippet.h` 接口文件，并输入以下代码片段：
- en: '[PRE7]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open the `Snippet.m` implementation file, located within the `iCloudExample`
    folder, and enter in the following code snippet:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于 `iCloudExample` 文件夹中的 `Snippet.m` 实现文件，并输入以下代码片段：
- en: '[PRE8]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that we have finished created our `UIDocument` subclass, we can start to
    implement the methods that will be responsible for saving our content to the Cloud.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经完成了 `UIDocument` 子类的创建，我们可以开始实现负责将内容保存到云的方法。
- en: 'Modify the `ViewController.h` interface file located within the `iCloudExample`
    folder; enter in the following highlighted code sections as shown in the snippet:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改位于 `iCloudExample` 文件夹中的 `ViewController.h` 接口文件；输入以下高亮显示的代码片段，如图所示：
- en: '[PRE9]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Modify the `ViewController.m` implementation file located within the `iCloudExample`
    folder and add the following `synthesize` methods:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改位于 `iCloudExample` 文件夹中的 `ViewController.m` 实现文件，并添加以下 `synthesize` 方法：
- en: '[PRE10]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, modify the `ViewDidLoad` method as shown in the following code snippet:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改 `ViewDidLoad` 方法，如图所示的高亮代码片段：
- en: '[PRE11]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, modify the `viewDidUnload` method as shown by the highlighted code sections
    in the following code snippet:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改 `viewDidUnload` 方法，如图所示的高亮代码片段：
- en: '[PRE12]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, modify the `viewDidAppear` method as shown by the highlighted code sections
    in the following code snippet:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改 `viewDidAppear` 方法，如图所示的高亮代码片段：
- en: '[PRE13]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, we need to implement the method that will be responsible for saving the
    document to the iCloud when the user presses the **Save** button.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现当用户点击 **Save** 按钮时将文档保存到 iCloud 的方法。
- en: 'Open the `viewController.m` implementation file, locate the `btnSave` method,
    and enter in the following code snippet:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `viewController.m` 实现文件，定位 `btnSave` 方法，并输入以下代码片段：
- en: '[PRE14]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, locate the `btnLoad` method, and enter in the following code snippet:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定位 `btnLoad` 方法，并输入以下代码片段：
- en: '[PRE15]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, create the `processQuery:` method as shown in the following code snippet:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `processQuery:` 的方法，如下面的代码片段所示：
- en: '[PRE16]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, finally, create the `documentChanged:` method as shown in the following
    code snippet:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，最后，创建一个名为 `documentChanged:` 的方法，如下面的代码片段所示：
- en: '[PRE17]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, Build and Run the application by choosing **Product | Run** from the **Product**
    menu, or alternatively pressing *Command + R*.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从 **产品** 菜单中选择 **产品 | 运行** 或按 *Command + R* 键来构建和运行应用程序。
- en: Note
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about the `NSMetadataQuery` object, refer to the following
    link:'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 `NSMetadataQuery` 对象的更多信息，请参阅以下链接：
- en: '[http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSMetadataQuery_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSMetadataQuery_Class/Reference/Reference.html)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSMetadataQuery_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSMetadataQuery_Class/Reference/Reference.html)'
- en: The following screenshot shows our `iCloudExample` application running on two
    different iOS devices. When a change is made on the second device, and then the
    **Save** button is pressed, the iCloud daemon service detects this change. The
    first device displays an `alertview` dialog notifying that the document has been
    modified on another device.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了我们的 `iCloudExample` 应用程序在两个不同的iOS设备上运行。当在第二个设备上做出更改，然后按下 **保存** 按钮时，iCloud守护进程服务检测到这一变化。第一个设备显示一个
    `alertview` 对话框，通知文档在另一台设备上已被修改。
- en: '![How to do it...](img/3349OT_06_05.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349OT_06_05.jpg)'
- en: 'The following screenshot shows our snippet document existing within our application''s
    container within iCloud:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了我们的片段文档存在于我们应用程序的容器中，在iCloud内：
- en: '![How to do it...](img/3349OT_06_06.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349OT_06_06.jpg)'
- en: Note
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The previous screen can be accessed using the **Settings** application and then
    navigating to **Settings** | **iCloud** | **Storage & Backup** | **Manage Storage**.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 **设置** 应用程序访问上一个屏幕，然后导航到 **设置** | **iCloud** | **存储与备份** | **管理存储**。
- en: How it works...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned how to build and create the user interface for our
    `iCloudExample` application to store and retrieve documents within iCloud. We
    then created the outlet properties for each of our buttons to have the ability
    of saving and loading the document when pressed. In our next step, we create a
    `UIDocument` subclass and declare an `NSString` property variable `docContent`
    that will be used to store the contents of our document when it gets created or
    modified. We then proceed to synthesize our document content property so that
    our class can access those objects associated with it. We then proceed to override
    the `loadFromContents:` method to read the data from the file into our `UIDocument`
    subclass. The most important parameter to note here is contents; this is an `NSData`
    object containing the actual data that was entered when you created or updated
    your document model.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们学习了如何构建和创建 `iCloudExample` 应用程序的用户界面，以便在iCloud中存储和检索文档。然后，我们为每个按钮创建了出口属性，以便在按下时能够保存和加载文档。在下一步中，我们创建了一个
    `UIDocument` 子类，并声明了一个 `NSString` 属性变量 `docContent`，该变量将用于存储在创建或修改文档时文档的内容。然后我们继续合成文档内容属性，以便我们的类可以访问与其相关的对象。然后我们继续重写
    `loadFromContents:` 方法，从文件中读取数据到我们的 `UIDocument` 子类。这里要注意的最重要参数是 contents；这是一个
    `NSData` 对象，包含你在创建或更新文档模型时输入的实际数据。
- en: The background queue `NSFilePresenter` calls this method whenever a read operation
    has completed. If the document was saved without entering any data, we assign
    a default value of empty string. We then proceed to override the `contentsForType:`
    method that is used when the background queue of the `NSFilePresenter` requests
    a snapshot of the contents of the `UIDocument` subclass. Here we check to ensure
    that the document contains contents, and if so, we convert our documents data
    to an `NSData` object, and return this as an `NSData` instance. Next, we declare
    our `Snippet` object that will be used to hold the document that gets created,
    as well as our `NSMetadataQuery` object that will be used to query and look up
    the document within our application's iCloud repository and access the relevant
    object properties of each file. In our next steps, we first check to ensure that
    we can access our application's iCloud repository, and then proceed to set the
    background color and font name and size for our `docContents` control, before
    finally calling the `reload:` method to pull the document from our iCloud repository.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 背景队列`NSFilePresenter`在读取操作完成时调用此方法。如果文档在没有输入任何数据的情况下保存，我们分配一个空字符串的默认值。然后，我们继续重写`contentsForType:`方法，该方法在`NSFilePresenter`的背景队列请求`UIDocument`子类的内容快照时使用。在这里，我们检查文档是否包含内容，如果是，我们将我们的文档数据转换为`NSData`对象，并将其作为`NSData`实例返回。接下来，我们声明我们的`Snippet`对象，该对象将用于保存创建的文档，以及我们的`NSMetadataQuery`对象，该对象将用于在我们的应用程序的iCloud存储库中查询和查找文档，并访问每个文件的相关对象属性。在我们的下一步操作中，我们首先检查我们是否可以访问我们的应用程序的iCloud存储库，然后继续设置`docContents`控件的后台颜色和字体名称和大小，最后调用`reload:`方法从我们的iCloud存储库中检索文档。
- en: We then proceed to register an observer object to enable us to periodically
    check for changes in document state using the `UIDocumentStateChangedNotification`
    notification object. Next, we declare our `btnSave:` method and set up an `ubiq`
    variable to point to our document container within our iCloud account. We then
    use the `ubiquitousPackage` class, and then append our filename to the location
    of the iCloud documents container. We then initialize our `UIDocument` class document
    with some default contents and then use the `UIDocumentSaveForCreating` property
    of our `forSaveOperation` method to create a brand new document.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来注册一个观察者对象，以便我们能够使用`UIDocumentStateChangedNotification`通知对象定期检查文档状态的变化。然后，我们声明我们的`btnSave:`方法，并设置一个`ubiq`变量来指向我们iCloud账户中的文档容器。接着，我们使用`ubiquitousPackage`类，并将我们的文件名追加到iCloud文档容器的位置。然后，我们使用一些默认内容初始化我们的`UIDocument`类文档，并使用`forSaveOperation`方法的`UIDocumentSaveForCreating`属性来创建一个全新的文档。
- en: For the `btnLoad:` method, we start by ensuring that we can connect it to the
    iCloud data store, and then set up and initialize our `docQuery` query predicate
    to look for our document using the predicate class method `NSMetadataQueryUbiquitousDocumentScope`
    and then set up an observer `queryDidFinishGathering` notification that gets called
    when the metadata search finishes gathering all items. Next, in our `processQuery:`
    method, we grab our document item from our results query and write the contents
    of the extracted document to our `docContent` object. Finally, in our `documentChanged:`
    method, we use the `documentState` property of our notification object to determine
    if any file conflicts have been detected, and if so, we display an alert message
    using the `UIAlertView` class; we then point to our iCloud documents container
    to bring back the URL of the file and we use the `NSFileVersion` object to replace
    all unresolved versions of the document with the current document and then enumerate
    through our array containing the `NSFileVersion` object representing all conflicted
    versions of the document and then set the `resolved` property for each object
    to `YES` and remove all conflict versions associated with the document file URL.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `btnLoad:` 方法，我们首先确保可以将其连接到 iCloud 数据存储，然后设置并初始化我们的 `docQuery` 查询谓词，使用谓词类方法
    `NSMetadataQueryUbiquitousDocumentScope` 来查找我们的文档，然后设置一个观察者 `queryDidFinishGathering`
    通知，当元数据搜索完成收集所有项目时会被调用。接下来，在我们的 `processQuery:` 方法中，我们从结果查询中获取文档项，并将提取的文档内容写入我们的
    `docContent` 对象。最后，在我们的 `documentChanged:` 方法中，我们使用通知对象的 `documentState` 属性来确定是否检测到任何文件冲突，如果是，我们使用
    `UIAlertView` 类显示一个警告消息；然后指向我们的 iCloud 文档容器以获取文件的 URL，并使用 `NSFileVersion` 对象将所有未解决的文档版本替换为当前文档，然后遍历包含表示文档所有冲突版本的
    `NSFileVersion` 对象的数组，并将每个对象的 `resolved` 属性设置为 `YES`，并删除与文档文件 URL 相关的所有冲突版本。
- en: See also
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Requesting entitlements for iCloud storage* recipe
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*请求 iCloud 存储权限* 菜单'
- en: The *Storing and using documents within iCloud* recipe
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 iCloud 中存储和使用文档* 菜单'
- en: The *Working with the iCloud storage APIs* recipe
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 iCloud 存储API* 菜单'
- en: Requesting entitlements for iCloud storage
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求 iCloud 存储权限
- en: In this recipe, we will take a look at how easy it is to add and configure entitlements
    using Xcode to enable your applications to communicate with the iCloud service.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将探讨如何使用 Xcode 添加和配置权限，以便使您的应用程序能够与 iCloud 服务通信。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to protect the data your application creates, a number of specific
    entitlements need to be created at build-time, in order to use iCloud storage.
    You will need to ensure that you have selected the option to enable iCloud for
    your application's app ID.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护应用程序创建的数据，需要在构建时创建一些特定的权限，以便使用 iCloud 存储。您需要确保已选择为应用程序的 App ID 启用 iCloud
    的选项。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Before your application can communicate with the iCloud service, you will need
    to create a new app ID from within the iOS provisioning portal, which can be located
    at [https://developer.apple.com/ios/manage/bundles/index.action/](https://developer.apple.com/ios/manage/bundles/index.action/).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序能够与 iCloud 服务通信之前，您需要从 iOS 配置文件门户中创建一个新的 App ID，该门户位于 [https://developer.apple.com/ios/manage/bundles/index.action/](https://developer.apple.com/ios/manage/bundles/index.action/)。
- en: 'If you are using an existing app ID, this cannot consist of a wild card ID,
    and must contain the full name of the application that you will be creating, for
    example, `com.yourcompany.*`.To enable your app ID to communicate with the iCloud
    service, follow the following simple steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用现有的 App ID，则它不能包含通配符 ID，并且必须包含您将要创建的应用程序的完整名称，例如，`com.yourcompany.*`。为了使您的
    App ID 能够与 iCloud 服务通信，请按照以下简单步骤操作：
- en: Create a `new App ID` value or edit the one that you have created previously.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `new App ID` 值或编辑您之前创建的一个。
- en: Set up your provisioning profile for use with iCloud, by simply checking the
    **Enable for iCloud** checkbox from the **Configure App ID** screen:![How to do
    it...](img/3349OT_06_07.jpg)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在“配置 App ID”屏幕中简单地勾选“**启用 iCloud**”复选框来设置您的配置文件以用于 iCloud：![如何操作...](img/3349OT_06_07.jpg)
- en: Next, you will be presented with a pop-up dialog box, explaining that any new
    provisioning profiles that you create using the chosen App ID will be enabled
    for iCloud services:![How to do it...](img/3349OT_06_08.jpg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到一个弹出对话框，解释说明您使用所选 App ID 创建的任何新配置文件都将启用 iCloud 服务：![如何操作...](img/3349OT_06_08.jpg)
- en: Once you have clicked on the **OK** button, you will be returned back to the
    **Configure App ID** screen, and the **Enable for iCloud** button will be set
    to green, as shown in the following screenshot:![How to do it...](img/3349OT_06_09.jpg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击了**确定**按钮，您将返回到**配置App ID**屏幕，并且**启用iCloud**按钮将变为绿色，如以下截图所示：![如何操作...](img/3349OT_06_09.jpg)
- en: Click on the **Done** button to close this screen.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**按钮关闭此屏幕。
- en: Next, click on the **Provisioning** tab, and then click on the **Development**
    tab to download your **Development Provisioning** **Profiles** as shown in the
    following screenshot:![How to do it...](img/3349OT_06_10.jpg)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**配置**选项卡，然后点击**开发**选项卡，下载如以下截图所示的**开发配置配置文件**：![如何操作...](img/3349OT_06_10.jpg)
- en: Next, from the **Provisioning** tab, and click on the **Distribution** tab to
    download **Distribution Provisioning Profiles** as shown in the following screenshot:![How
    to do it...](img/3349OT_06_11.jpg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**配置**选项卡，点击**分发**选项卡，下载如以下截图所示的**分发配置配置文件**：![如何操作...](img/3349OT_06_11.jpg)
- en: Next, from the **Project Navigator** window, click on your project, in the **Targets**
    section, and then on the **Summary** page and scroll down till you get to the
    **Entitlements** section.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**项目导航器**窗口中，点击您的项目，在**目标**部分，然后点击**摘要**页面，并向下滚动到**权限**部分。
- en: Check the **Enable Entitlements** and the **Enabled iCloud** checkboxes. This
    will add a file called `iCloudExample.entitlements` to your project.![How to do
    it...](img/3349OT_06_12.jpg)
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**启用权限**和**启用iCloud**复选框。这将向您的项目添加一个名为`iCloudExample.entitlements`的文件。![如何操作...](img/3349OT_06_12.jpg)
- en: Next, click on the **+** button to autofill the **Ubiquity Containers** and
    **Keychain Groups** sections.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**+**按钮来自动填充**通用容器**和**密钥链组**部分。
- en: Note
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Whenever you add entitlements to your projects, these are bound directly to
    your application's provisioning profiles that are used to separate your application's
    documents and data repositories from that of other applications that you create.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次您向项目添加权限时，这些权限将直接绑定到用于将您的应用程序文档和数据存储库与其他应用程序分开的应用程序配置文件。
- en: 'There are two entitlements that an application can request, depending on which
    iCloud features it is required to use. These are explained in the following table:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序需要使用的iCloud功能，应用程序可以请求两种权限。以下表格中对此进行了说明：
- en: '| Entitlement | Description |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| 权限 | 描述 |'
- en: '| --- | --- |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `com.apple.developer.ubiquity-container-identifiers` | Use this to request
    the iCloud document storage entitlement.The value of this key is an array of container-identifier
    strings. (The first string in the array must not contain any wildcard characters.)
    |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `com.apple.developer.ubiquity-container-identifiers` | 使用此选项请求iCloud文档存储权限。此键的值是一个容器标识符字符串数组。（数组中的第一个字符串不得包含任何通配符字符。）|'
- en: '| `com.apple.developer.ubiquity-kvstore-identifier` | Use this to request the
    iCloud key-value data store entitlement. The value of this key is a single container
    identifier string. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `com.apple.developer.ubiquity-kvstore-identifier` | 使用此选项请求iCloud键值数据存储权限。此键的值是一个单独的容器标识符字符串。|'
- en: When working with the `Key-Value` store data, you will need to ensure that the
    **Use Store with Identifier** option has been ticked. This must be consistent
    and take on the form `<TEAMID>.<CUSTOM_STRING>`, where `<TEAMID>` is the unique
    10 character identifier that is associated with your development team. The `<CUSTOM_STRING>`
    identifier is the reverse DNS string that identifies the container for storing
    your applications documents.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理`Key-Value`存储数据时，您需要确保已勾选**使用具有标识符的存储**选项。这必须保持一致，并采用以下形式 `<TEAMID>.<CUSTOM_STRING>`，其中
    `<TEAMID>` 是与您的开发团队关联的唯一10个字符标识符。`<CUSTOM_STRING>`标识符是反向DNS字符串，用于标识存储您的应用程序文档的容器。
- en: Note
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To locate your unique identifier associated with your development team, log
    in to the Apple developer connection website, and then go to the **Member Center**
    page which can be found at [http://developer.apple.com/membercenter](http://developer.apple.com/membercenter).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要定位与您的开发团队关联的唯一标识符，请登录到Apple开发者连接网站，然后转到位于[http://developer.apple.com/membercenter](http://developer.apple.com/membercenter)的**会员中心**页面。
- en: Select the **Your Account** tab, and then select **Organization Profile** (if
    you have set up your profile to be used as an organization) from the column on
    the left of the tab. Your team's identifier is in the **Company / Organization
    ID** field.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**您的账户**标签，然后从标签左侧的列中选择**组织配置文件**（如果您已将您的配置文件设置为用作组织），您的团队标识符位于**公司/组织ID**字段中。
- en: Applications using iCloud document storage can specify multiple containers for
    storing documents and data. The `com.apple.developer.ubiquity-container-identifiers`
    key is an array of strings.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用iCloud文档存储的应用程序可以指定多个容器来存储文档和数据。`com.apple.developer.ubiquity-container-identifiers`键是一个字符串数组。
- en: 'The following screenshot displays the property list view within the project
    navigator of the `iCloudExample.Entitlements` entitlements file:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`iCloudExample.Entitlements`权限文件在项目导航器中的属性列表视图：
- en: '![How to do it...](img/3349OT_06_13.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349OT_06_13.jpg)'
- en: 'The `TEAMID` value (as shown in the previous screenshot), can be obtained from
    the `Account Summary` page of your developer account, and using the `Individual
    ID` value, as shown in the following screenshot:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`TEAMID`值（如前一个截图所示），可以从您的开发者账户的**账户摘要**页面获取，并使用以下截图中的`Individual ID`值：'
- en: '![How to do it...](img/3349OT_06_14.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349OT_06_14.jpg)'
- en: Note
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The strings specified in your entitlements file are also the strings you pass
    to the `URLForUbiquityContainerIdentifier:` method, when requesting the location
    of a directory in the user's iCloud storage.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的权限文件中指定的字符串也是您在请求用户iCloud存储中目录位置时传递给`URLForUbiquityContainerIdentifier:`方法的字符串。
- en: How it works...
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we learned how to set up and configure an app ID so that it
    has the ability to communicate with the iCloud service. Whenever a new or existing
    application ID is created and/or modified, this will be directly bound to your
    provisioning profiles for both development and distribution, and will need to
    be downloaded and reinstalled on your computer to avoid issues when you deploy
    this on your iOS devices.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们学习了如何设置和配置应用程序ID，以便它具有与iCloud服务通信的能力。每当创建或修改新的或现有的应用程序ID时，它将直接绑定到您的开发和分发配置文件，并且需要在您的计算机上下载和重新安装以避免在iOS设备上部署时出现问题。
- en: You can also choose to do this using the Xcode development environment using
    the Organizer interface. In our next steps, we need to set up the entitlements
    that will give our application access to the iCloud directory by enabling the
    **Enable iCloud** checkbox and auto-filling the **Ubiquity Contrainers** and **Keychain
    Group** sections.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以选择使用Xcode开发环境通过组织者界面来完成此操作。在接下来的步骤中，我们需要设置权限，这将通过启用**启用iCloud**复选框并自动填写**通用容器**和**密钥链组**部分来使我们的应用程序能够访问iCloud目录。
- en: When these have been set, it sets up the directory location on the device where
    you can find and create the iCloud files. The `iCloud daemon` service will then
    automatically fetch new files to this directory, as they become available, update
    files that are currently there, and watch for any changes to file states that
    you put there.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些设置完成时，它将在设备上设置目录位置，您可以在其中找到和创建iCloud文件。然后，`iCloud守护进程`服务将自动获取新文件到该目录，当它们可用时更新现有文件，并监视您放入该目录的文件状态的变化。
- en: Configuring iOS devices to use iCloud
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置iOS设备以使用iCloud
- en: In this recipe, we will take a look at how easy it is to configure your iOS
    devices to use iCloud so that it has the ability to store documents.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将看看如何轻松地将您的iOS设备配置为使用iCloud，以便它具有存储文档的能力。
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before any application can start to store data within iCloud, we will need to
    properly configure and set up our application to use iCloud, and store documents
    onto an iOS device. For this to happen, the device must be running iOS 5 or later.
    This will not work within the iOS Simulator.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何应用程序开始将数据存储在iCloud之前，我们需要正确配置和设置我们的应用程序以使用iCloud，并将文档存储到iOS设备上。为此，设备必须运行iOS
    5或更高版本。iOS模拟器中不会工作。
- en: How to do it...
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps show you how easy it is to set up an iCloud account:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤显示了设置iCloud账户有多简单：
- en: From the **Settings** pane within your iOS device, select **iCloud**. This is
    shown in the following screenshot:![How to do it...](img/3349OT_06_15.jpg)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的iOS设备中的**设置**面板选择**iCloud**。以下截图显示了这一操作：![如何操作...](img/3349OT_06_15.jpg)
- en: Next, sign in with your Apple ID and password, and then click on the **Sign
    In** button as shown in the following screenshot.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用您的Apple ID和密码登录，然后点击以下截图所示的**登录**按钮。
- en: You will have to agree to the iCloud terms and conditions, and then click on
    the **Agree** button to close the pop-up dialog box.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须同意iCloud的条款和条件，然后点击**同意**按钮以关闭弹出对话框。
- en: Next, click on the **Storage & Backup** option to proceed to the next screen.![How
    to do it...](img/3349OT_06_16.jpg)
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**存储与备份**选项，进入下一屏幕。![如何操作...](img/3349OT_06_16.jpg)
- en: Next set the **Backup to iCloud** option to **ON** from under the **Backup sections**
    pane. This will automatically start synching your **Mail**, **Contacts**, **Calendars**,
    **Reminders**, **Bookmarks**, or **Notes** and start pushing or pulling your account
    information to iCloud.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**备份部分**面板中将**备份到iCloud**选项设置为**开启**。这将自动开始同步您的**邮件**、**联系人**、**日历**、**提醒**、**书签**或**笔记**，并将您的账户信息推送到或从iCloud中拉取。
- en: Note
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you prefer, you can also log in to your iCloud account by using any web browser
    at [http://www.iCloud.com/](http://www.iCloud.com/), using the same information
    you entered into your iOS device. Once you are successfully logged in, you can
    choose **Contacts** or **Calendar** to see your data already pulled into the cloud.
    Making edits via the web interface will push them directly back to your iOS device.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您愿意，也可以通过任何网络浏览器登录到您的iCloud账户，网址为[http://www.iCloud.com/](http://www.iCloud.com/)，使用您在iOS设备上输入的相同信息。一旦成功登录，您可以选择**联系人**或**日历**来查看已同步到云中的数据。通过网页界面进行编辑将直接推送到您的iOS设备。
- en: How it works...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned how easy it is to set up and configure iCloud on
    the iOS device. iCloud is a free service that comes with an initial 5 GB of free
    storage space, upon successful signup. This then allows you to synchronize all
    of your contact information, e-mails, and documents.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们学习了如何在iOS设备上轻松设置和配置iCloud。iCloud是一项免费服务，在成功注册后提供初始5GB的免费存储空间。这允许您同步所有联系信息、电子邮件和文档。
- en: Should you require additional storage space, Apple provides this to you through
    the **iCloud Settings** menu under **Storage & Backup**.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要额外的存储空间，Apple通过**存储与备份**菜单下的**iCloud设置**为您提供。
- en: When using the iCloud storage APIs from within your applications, any documents
    that your application stores explicitly in iCloud are not backed up with your
    application, as these will already be stored within your iCloud account, and therefore
    do not need to be backed up separately.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在应用程序中使用iCloud存储API时，您应用程序明确存储在iCloud中的任何文档都不会与您的应用程序一起备份，因为这些文档已经存储在您的iCloud账户中，因此不需要单独备份。
