- en: Chapter 6. Storing Documents within the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Storing and using documents within iCloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the iCloud storage APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using iCloud document storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing key-value data in iCloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting file version conflicts within iCloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the `iCloud` application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting entitlements for iCloud storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring iOS devices to use iCloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The iCloudExample application allows you to keep a visual record for simple
    reminders for your everyday needs. This application records this information,
    and then adds this information into your iCloud account repository, using the
    **iCloud storage APIs**.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at the features of iCloud and the storage
    APIs, and see how we can incorporate these into our applications, so that it can
    interact with the iCloud servers to read, write, and edit documents, and provide
    us with the ability to access these items from all our iOS devices, without the
    need of having to synchronize or transfer these files.
  prefs: []
  type: TYPE_NORMAL
- en: Storing documents within the user's iCloud account provides us with an additional
    layer of security, so even if the user loses their device, these documents can
    easily be retrieved, and provide the ability to sync data between devices, provided
    that they are contained within iCloud storage.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and using documents within iCloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn about the different methods that can be used to
    store and use documents within iCloud.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn about the file coordinator and the file presenter
    classes and how the `UIDocument` class can be registered to receive updates whenever
    the iCloud data gets updated.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following example shows how to use the `NSFileCoordinator` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The job of a file coordinator is to coordinate the reads and writes performed
    by your application and the **sync** **daemon** on the same document. For example,
    your application and the daemon may both read the document at the same time, but
    only one may write to the file at any single time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `NSFileCoordinator` class, you can refer to the
    Apple Developer Documentation located at the following link location: [https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFileCoordinator_class/Reference/Reference.html](https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFileCoordinator_class/Reference/Reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how to move a document from local storage to iCloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `NSFilePresenter` protocol reference, you can refer
    to the Apple developer documentation located at the following link location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html](https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the following screenshot, it shows the process when changes
    are made on one device, and having those changes stored locally before being pushed
    back out to the iCloud service, using a local daemon process. We will learn about
    the `NSFileCoordinator` class and storing documents in the cloud when we look
    at building our example application for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever your application stores documents to iCloud, it must specify one or
    more containers in which those documents contents will be stored, by including
    the `com.apple.developer.ubiquity-container-identifiers` key value entry within
    your application's `entitlements` file.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to establish a `UIDocument` document as a file
    presenter so that you can register the class to receive updates whenever its cloud
    data gets updated by telling `NSFileCoordinator` to add the document as *presenter*.
    This means that a presenter class is one that takes a strong interest in knowing
    when outside changes happen to a given file.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you register for changes, you start by creating a document and a coordinator
    and then initialize the coordinator with the document as its performer, as shown
    in the first code snippet. Handling it this way, means that, the new document
    or presenter using the `NSFileCoordinator` class allows it to receive alerts about
    these changes and allows you to update your applications UI to handle when these
    changes occur.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we use the `NSFileManager` class that allows you to move local files to
    and from the cloud using the `setUbiquitous:itemAtURL:destinationURL:error:` method.
    This method does nothing more, except moves the file safely from your sandbox
    into the central iCloud folder and back.
  prefs: []
  type: TYPE_NORMAL
- en: 'The method takes three arguments. The first establishes the direction of movement.
    `YES` brings items from the sandbox to the cloud. The second argument must always
    be the source URL, and the third its destination. If all three arguments are placed
    in the wrong order, the method will fail. The local sandbox URL takes on the following
    form as can be seen in the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file://localhost/private/var/mobile/Library/Mobile%20Documents/TEAMID~com~geniesoftstudios~iCloudExample/Document.doc;`'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Working with the iCloud storage APIs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Requesting entitlements for iCloud storage* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the iCloud storage APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at the different types of storage methods
    available to us when using iCloud, and how these can be incorporated into your
    own applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storing documents within iCloud lets your applications write documents and data
    to a common central location. This also provides the ability to sync and access
    items and recover documents from all of your other iOS devices and Mac OS X computers,
    should the user lose their iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To fully utilize iCloud storage, there is a need to fully understand one of
    the two ways in which this can happen and how information can be accessed. The
    following table explains the various storage types and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Storage type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| iCloud document storage | Use this feature to store and share user documents
    and data in the user''s iCloud account. |'
  prefs: []
  type: TYPE_TB
- en: '| iCloud key-value data storage | Use this feature to store and share small
    amounts of data among instances of your application. |'
  prefs: []
  type: TYPE_TB
- en: '![How to do it...](img/3349OT_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the previous screenshot, this shows you the overall process
    involved whenever information is created within local iCloud storage within your
    application's sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: Using iCloud document storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Storing documents within iCloud is easiest to implement and can be achieved
    by subclassing a class called the `UIDocument` class. This class handles everything
    that is required to read and write files, coordinating with the iCloud daemon,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We will be taking a more in depth look at how to create a sub-class of the `UIDocument`
    class when we start building our iCloud application to store and retrieve document
    content within the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Storing key-value data in iCloud
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Storing data within iCloud provides you with a means of making your applications
    share data between other copies of the application running on other Mac OS X computers
    and other iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows how to set up the cloud so that you are able
    to write data to the user''s iCloud using the key-value approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When your application uses the iCloud `key-value` data store approach, the user
    will never see this happening as your application will be using this to share
    very small amounts of information that is only used by your application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the `NSUbiquitousKeyValueStore` class, you must ensure that you have
    ticked the `Key-Value Store` checkbox within your project preferences.
  prefs: []
  type: TYPE_NORMAL
- en: The amount of space available for a `single key-value store` is limited to 64
    kilobytes and any data that is written to a single key-value within your container
    must not exceed 4 kilobytes in size. This is suitable for storing small amounts
    of data about your application, but it is not advisable to use it to store documents
    or large amounts of data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about iCloud, refer to the Apple developer documentation
    at [https://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/iCloud/iCloud.html](https://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/iCloud/iCloud.html)`#//apple_ref/doc/uid/TP40007072-CH5-SW1`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned about the different methods that can be used to store
    information within the iCloud. When working with document storage, we need to
    set up "a ubiq" (short for ubiquitous), variable to point to our current documents
    container within our iCloud account, and then use the `ubiquitousPackage` class,
    and then append our filename to the location of the iCloud documents container.
    We then initialize our `UIDocument` class document with some default contents,
    and then use the `UIDocumentSaveForCreating` property of our `forSaveOperation`
    method to create a brand new document.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, when working with `key-value` data, you will need to use the
    `NSUbiquitousKeyValueStore` class that gives you the ability to share small amounts
    of data between each of your devices. We then use the `NSUserDefaults` class to
    programmatically interact with the system defaults, so that we can use the `setString:`
    method to store the string `Success` for the `iCloudStatus` key determined by
    the `forKey:` method. Finally, we call the `synchronize` method to store the values
    that we specified back to the iCloud server, and then use the `stringForKey:`
    method and retrieve the value for our key and display this value to the console
    window.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building the iCloud application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Storing and using documents within iCloud* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Requesting entitlements for iCloud storage* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting file version conflicts within iCloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at how easy it is to implement and handle
    file version conflicts within your own applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Handling version conflicts of files is a common issue in software development.
    With iCloud, this needs to be handled effectively and efficiently when multiple
    instances of your applications are running on multiple devices, and both try to
    modify the same document. This will result in a conflict when both devices try
    to upload the changes made to the document at the same time. At this point, iCloud
    will end up with two different versions of the same file, and has to decide what
    to do with them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to determine when a document file conflict has occurred, you will
    need to register an observer object to periodically check the `documentState`
    property for the `UIDocumentStateChangedNotification` notification object whenever
    changes have been made to the document to check for the presence of a conflict
    and act accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to create the `documentChanged:` method. This method runs as a
    notification handler and waits for the `UIDocumentStateChangedNotification` notification
    to occur in order to be able to check the `documentState` of the object when processing
    completes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to register and use a notification handler to
    notify us when changes in document state occur by the `UIDocumentStateChangedNotification`
    notification object.
  prefs: []
  type: TYPE_NORMAL
- en: We then use the `URLForUbiquityContainerIdentifier` method of the `NSFileManager`
    object while passing through `nil` as an argument in order to default to the first
    container listed in the entitlements file. The recommended approach is that all
    documents are required to be stored within the `Documents` subdirectory and need
    to be appended to the URL path as well.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use the `NSFileVersion` object to replace all unresolved versions
    of the document with the current document. Next, we enumerate through our array
    containing the `NSFileVersion` object representing the conflicted versions of
    the document and set the `resolved` property for each object to `YES` to remove
    all conflict versions associated with the document file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table provides you with a description of the different document
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Document state | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `UIDocumentStateNormal` | Indicated that the document is open and enabled
    for user editing. |'
  prefs: []
  type: TYPE_TB
- en: '| `UIDocumentStateClosed` | Indicates that the document is currently closed,
    or an error occurred while reading of the document. |'
  prefs: []
  type: TYPE_TB
- en: '| `UIDocumentStateConflict` | Indicates that conflicts have been detected for
    the current document. |'
  prefs: []
  type: TYPE_TB
- en: '| `UIDocumentStateSavingError` | Indicates that an error occurred during an
    attempt to save the document. |'
  prefs: []
  type: TYPE_TB
- en: '| `UIDocumentStateEditingDisabled` | Indicates that the document is busy, and
    is not currently safe for editing. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `UIDocumentStateChangedNotification` framework,
    refer to the Apple developer documentation located at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/DataManagement/Conceptual/DocumentBasedAppPGiOS/Introduction/Introduction.html](https://developer.apple.com/library/ios/#documentation/DataManagement/Conceptual/DocumentBasedAppPGiOS/Introduction/Introduction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Working with the iCloud storage APIs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting file version conflicts within iCloud* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the iCloud application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to build an iCloud-aware application using
    the iCloud storage APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to create an application that will enable
    us to create new documents within our iCloud repository. To begin, follow the
    following simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Xcode4/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Create a new Xcode project**, or navigate to **File** | **New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Single View Application** option from the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter in `iCloudExample`as the name for your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **iPhone** from under the **Devices** drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Storyboards** checkbox has not been selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Automatic Reference Counting** checkbox is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Include Unit Tests** checkbox has not been ticked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the location where you would like to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to continue and display the Xcode workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have created our `iCloudExample` project, we can start building
    our user interface that will allow us to create and modify documents and then
    having these saved back to iCloud.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` file from the **Project Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library** window, select-and-drag a toolbar, add this to the
    top of the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Item** button located within our toolbar that we previously added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the value of the **Identifier**
    property to **Save** and change the value of the **Style** property to **Bordered.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library**, select and drag a `Bar Button Item` object, and
    add this next to the **Save** button that we added previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the value of the **Identifier**
    property to **Custom** and change the value of the **Title** property to **Load**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, from the **Object Library**, select and drag a `Text View` object to
    the center of our view controller, and adjust the size so that it fills the entire
    area of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows the completed user interface with the added toolbar,
    buttons, and the `Text View` control.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_06_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Our next step is to create the outlet and property events for each of our buttons,
    as well as the `Text View` control. Creating these will allow us to access the
    associated methods and control properties directly within our code. To create
    an outlet, follow these simple steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the **Assistant Editor** page by navigating to **Navigate** | **Open in
    Assistant Editor**, or by pressing the *option* + *command* + keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the `ViewController.h` interface file is displayed within the **Assistant
    Editor** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Save** (`Bar Button Item`) control, then hold down the *Control*
    key, and drag it into the `ViewController.h` interface file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Outlet** from the **Connection** dropdown for the connection to be
    created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `btnSave` for the name of the **Outlet** property to create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **strong** from the **Storage** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 3 to 6 to create the outlet properties for the **Load** bar button
    item and the **Text View** control, while providing the following naming `btnLoad`
    and `docContents`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have created the instance variable outlets for our controls, we
    need to create the associated actions for the **Save** button. Creating these
    actions allows an event to be fired when the button is pressed. To create an action,
    follow these simple steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the `ViewController.h` interface file still displayed within the **Assistant
    Editor** window, select the **Save** (`Bar Button Item`) control, and hold down
    the *control* key and drag it into the `ViewController.h` interface file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Action** from the **Connection** drop-down list for the connection
    to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `btnSave` for the **Name** value of the method to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 1 to 3 to create the outlet properties for the **Load** and **Text
    View** controls, while providing the following naming `btnLoad` and `docContents`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code snippet shows the completed `ViewController.h` interface
    file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our next step is to use the `UIDocument` class that comes with iOS 5 to make
    it much easier for us to work with iCloud documents. This class acts as the middleware
    between the file and the actual data that it contains, and implements the `NSFilePresenter`
    protocol to handle the entire document processing in the background, so that the
    application is not blocked when files are opened or saved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **Xcode** menu bar, navigate to **File** | **New** | **File...** or
    press *Command* + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Objective-C class** template from the list of templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step within the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `Snippet` as the name of the file to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have selected `UIDocument` as the type to create from the **Subclass
    of** dropdown.![How to do it...](img/3349OT_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't see the `UIDocument` class shown within your drop-down list, simply
    type it in manually.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed with the next step of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button to save the file to the folder location specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `Snippet.h` interface file, located within the `iCloudExample` folder
    and enter in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `Snippet.m` implementation file, located within the `iCloudExample`
    folder, and enter in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have finished created our `UIDocument` subclass, we can start to
    implement the methods that will be responsible for saving our content to the Cloud.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the `ViewController.h` interface file located within the `iCloudExample`
    folder; enter in the following highlighted code sections as shown in the snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `ViewController.m` implementation file located within the `iCloudExample`
    folder and add the following `synthesize` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `ViewDidLoad` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidUnload` method as shown by the highlighted code sections
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidAppear` method as shown by the highlighted code sections
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to implement the method that will be responsible for saving the
    document to the iCloud when the user presses the **Save** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `viewController.m` implementation file, locate the `btnSave` method,
    and enter in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, locate the `btnLoad` method, and enter in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `processQuery:` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, finally, create the `documentChanged:` method as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, Build and Run the application by choosing **Product | Run** from the **Product**
    menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information about the `NSMetadataQuery` object, refer to the following
    link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSMetadataQuery_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSMetadataQuery_Class/Reference/Reference.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following screenshot shows our `iCloudExample` application running on two
    different iOS devices. When a change is made on the second device, and then the
    **Save** button is pressed, the iCloud daemon service detects this change. The
    first device displays an `alertview` dialog notifying that the document has been
    modified on another device.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows our snippet document existing within our application''s
    container within iCloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous screen can be accessed using the **Settings** application and then
    navigating to **Settings** | **iCloud** | **Storage & Backup** | **Manage Storage**.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to build and create the user interface for our
    `iCloudExample` application to store and retrieve documents within iCloud. We
    then created the outlet properties for each of our buttons to have the ability
    of saving and loading the document when pressed. In our next step, we create a
    `UIDocument` subclass and declare an `NSString` property variable `docContent`
    that will be used to store the contents of our document when it gets created or
    modified. We then proceed to synthesize our document content property so that
    our class can access those objects associated with it. We then proceed to override
    the `loadFromContents:` method to read the data from the file into our `UIDocument`
    subclass. The most important parameter to note here is contents; this is an `NSData`
    object containing the actual data that was entered when you created or updated
    your document model.
  prefs: []
  type: TYPE_NORMAL
- en: The background queue `NSFilePresenter` calls this method whenever a read operation
    has completed. If the document was saved without entering any data, we assign
    a default value of empty string. We then proceed to override the `contentsForType:`
    method that is used when the background queue of the `NSFilePresenter` requests
    a snapshot of the contents of the `UIDocument` subclass. Here we check to ensure
    that the document contains contents, and if so, we convert our documents data
    to an `NSData` object, and return this as an `NSData` instance. Next, we declare
    our `Snippet` object that will be used to hold the document that gets created,
    as well as our `NSMetadataQuery` object that will be used to query and look up
    the document within our application's iCloud repository and access the relevant
    object properties of each file. In our next steps, we first check to ensure that
    we can access our application's iCloud repository, and then proceed to set the
    background color and font name and size for our `docContents` control, before
    finally calling the `reload:` method to pull the document from our iCloud repository.
  prefs: []
  type: TYPE_NORMAL
- en: We then proceed to register an observer object to enable us to periodically
    check for changes in document state using the `UIDocumentStateChangedNotification`
    notification object. Next, we declare our `btnSave:` method and set up an `ubiq`
    variable to point to our document container within our iCloud account. We then
    use the `ubiquitousPackage` class, and then append our filename to the location
    of the iCloud documents container. We then initialize our `UIDocument` class document
    with some default contents and then use the `UIDocumentSaveForCreating` property
    of our `forSaveOperation` method to create a brand new document.
  prefs: []
  type: TYPE_NORMAL
- en: For the `btnLoad:` method, we start by ensuring that we can connect it to the
    iCloud data store, and then set up and initialize our `docQuery` query predicate
    to look for our document using the predicate class method `NSMetadataQueryUbiquitousDocumentScope`
    and then set up an observer `queryDidFinishGathering` notification that gets called
    when the metadata search finishes gathering all items. Next, in our `processQuery:`
    method, we grab our document item from our results query and write the contents
    of the extracted document to our `docContent` object. Finally, in our `documentChanged:`
    method, we use the `documentState` property of our notification object to determine
    if any file conflicts have been detected, and if so, we display an alert message
    using the `UIAlertView` class; we then point to our iCloud documents container
    to bring back the URL of the file and we use the `NSFileVersion` object to replace
    all unresolved versions of the document with the current document and then enumerate
    through our array containing the `NSFileVersion` object representing all conflicted
    versions of the document and then set the `resolved` property for each object
    to `YES` and remove all conflict versions associated with the document file URL.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Requesting entitlements for iCloud storage* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Storing and using documents within iCloud* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with the iCloud storage APIs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting entitlements for iCloud storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at how easy it is to add and configure entitlements
    using Xcode to enable your applications to communicate with the iCloud service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to protect the data your application creates, a number of specific
    entitlements need to be created at build-time, in order to use iCloud storage.
    You will need to ensure that you have selected the option to enable iCloud for
    your application's app ID.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before your application can communicate with the iCloud service, you will need
    to create a new app ID from within the iOS provisioning portal, which can be located
    at [https://developer.apple.com/ios/manage/bundles/index.action/](https://developer.apple.com/ios/manage/bundles/index.action/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using an existing app ID, this cannot consist of a wild card ID,
    and must contain the full name of the application that you will be creating, for
    example, `com.yourcompany.*`.To enable your app ID to communicate with the iCloud
    service, follow the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `new App ID` value or edit the one that you have created previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up your provisioning profile for use with iCloud, by simply checking the
    **Enable for iCloud** checkbox from the **Configure App ID** screen:![How to do
    it...](img/3349OT_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will be presented with a pop-up dialog box, explaining that any new
    provisioning profiles that you create using the chosen App ID will be enabled
    for iCloud services:![How to do it...](img/3349OT_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have clicked on the **OK** button, you will be returned back to the
    **Configure App ID** screen, and the **Enable for iCloud** button will be set
    to green, as shown in the following screenshot:![How to do it...](img/3349OT_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Done** button to close this screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Provisioning** tab, and then click on the **Development**
    tab to download your **Development Provisioning** **Profiles** as shown in the
    following screenshot:![How to do it...](img/3349OT_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **Provisioning** tab, and click on the **Distribution** tab to
    download **Distribution Provisioning Profiles** as shown in the following screenshot:![How
    to do it...](img/3349OT_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **Project Navigator** window, click on your project, in the **Targets**
    section, and then on the **Summary** page and scroll down till you get to the
    **Entitlements** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Enable Entitlements** and the **Enabled iCloud** checkboxes. This
    will add a file called `iCloudExample.entitlements` to your project.![How to do
    it...](img/3349OT_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **+** button to autofill the **Ubiquity Containers** and
    **Keychain Groups** sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever you add entitlements to your projects, these are bound directly to
    your application's provisioning profiles that are used to separate your application's
    documents and data repositories from that of other applications that you create.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are two entitlements that an application can request, depending on which
    iCloud features it is required to use. These are explained in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Entitlement | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `com.apple.developer.ubiquity-container-identifiers` | Use this to request
    the iCloud document storage entitlement.The value of this key is an array of container-identifier
    strings. (The first string in the array must not contain any wildcard characters.)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `com.apple.developer.ubiquity-kvstore-identifier` | Use this to request the
    iCloud key-value data store entitlement. The value of this key is a single container
    identifier string. |'
  prefs: []
  type: TYPE_TB
- en: When working with the `Key-Value` store data, you will need to ensure that the
    **Use Store with Identifier** option has been ticked. This must be consistent
    and take on the form `<TEAMID>.<CUSTOM_STRING>`, where `<TEAMID>` is the unique
    10 character identifier that is associated with your development team. The `<CUSTOM_STRING>`
    identifier is the reverse DNS string that identifies the container for storing
    your applications documents.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To locate your unique identifier associated with your development team, log
    in to the Apple developer connection website, and then go to the **Member Center**
    page which can be found at [http://developer.apple.com/membercenter](http://developer.apple.com/membercenter).
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Your Account** tab, and then select **Organization Profile** (if
    you have set up your profile to be used as an organization) from the column on
    the left of the tab. Your team's identifier is in the **Company / Organization
    ID** field.
  prefs: []
  type: TYPE_NORMAL
- en: Applications using iCloud document storage can specify multiple containers for
    storing documents and data. The `com.apple.developer.ubiquity-container-identifiers`
    key is an array of strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the property list view within the project
    navigator of the `iCloudExample.Entitlements` entitlements file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `TEAMID` value (as shown in the previous screenshot), can be obtained from
    the `Account Summary` page of your developer account, and using the `Individual
    ID` value, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The strings specified in your entitlements file are also the strings you pass
    to the `URLForUbiquityContainerIdentifier:` method, when requesting the location
    of a directory in the user's iCloud storage.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to set up and configure an app ID so that it
    has the ability to communicate with the iCloud service. Whenever a new or existing
    application ID is created and/or modified, this will be directly bound to your
    provisioning profiles for both development and distribution, and will need to
    be downloaded and reinstalled on your computer to avoid issues when you deploy
    this on your iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: You can also choose to do this using the Xcode development environment using
    the Organizer interface. In our next steps, we need to set up the entitlements
    that will give our application access to the iCloud directory by enabling the
    **Enable iCloud** checkbox and auto-filling the **Ubiquity Contrainers** and **Keychain
    Group** sections.
  prefs: []
  type: TYPE_NORMAL
- en: When these have been set, it sets up the directory location on the device where
    you can find and create the iCloud files. The `iCloud daemon` service will then
    automatically fetch new files to this directory, as they become available, update
    files that are currently there, and watch for any changes to file states that
    you put there.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring iOS devices to use iCloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at how easy it is to configure your iOS
    devices to use iCloud so that it has the ability to store documents.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before any application can start to store data within iCloud, we will need to
    properly configure and set up our application to use iCloud, and store documents
    onto an iOS device. For this to happen, the device must be running iOS 5 or later.
    This will not work within the iOS Simulator.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps show you how easy it is to set up an iCloud account:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Settings** pane within your iOS device, select **iCloud**. This is
    shown in the following screenshot:![How to do it...](img/3349OT_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, sign in with your Apple ID and password, and then click on the **Sign
    In** button as shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will have to agree to the iCloud terms and conditions, and then click on
    the **Agree** button to close the pop-up dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Storage & Backup** option to proceed to the next screen.![How
    to do it...](img/3349OT_06_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next set the **Backup to iCloud** option to **ON** from under the **Backup sections**
    pane. This will automatically start synching your **Mail**, **Contacts**, **Calendars**,
    **Reminders**, **Bookmarks**, or **Notes** and start pushing or pulling your account
    information to iCloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you prefer, you can also log in to your iCloud account by using any web browser
    at [http://www.iCloud.com/](http://www.iCloud.com/), using the same information
    you entered into your iOS device. Once you are successfully logged in, you can
    choose **Contacts** or **Calendar** to see your data already pulled into the cloud.
    Making edits via the web interface will push them directly back to your iOS device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how easy it is to set up and configure iCloud on
    the iOS device. iCloud is a free service that comes with an initial 5 GB of free
    storage space, upon successful signup. This then allows you to synchronize all
    of your contact information, e-mails, and documents.
  prefs: []
  type: TYPE_NORMAL
- en: Should you require additional storage space, Apple provides this to you through
    the **iCloud Settings** menu under **Storage & Backup**.
  prefs: []
  type: TYPE_NORMAL
- en: When using the iCloud storage APIs from within your applications, any documents
    that your application stores explicitly in iCloud are not backed up with your
    application, as these will already be stored within your iCloud account, and therefore
    do not need to be backed up separately.
  prefs: []
  type: TYPE_NORMAL
