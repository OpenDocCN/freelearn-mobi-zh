["```kt\n$ npm install -g json-server\n```", "```kt\n$ json-server -v\n```", "```kt\n{\n  \"Movie\": [\n    {\n      \"id\": 1,\n      \"Movie Name\": \"Avengers: Infinity War\",\n      \"Year\": \"2018\",\n      \"Category\": \"Science Fiction\"\n    },\n    {\n      \"id\": 2,\n      \"first_name\": \"Black Panther\",\n      \"Year\": \"2018\",\n      \"Category\": \"Science Fiction\"\n    },\n    {\n      \"id\": 3,\n      \"first_name\": \"Mission: Impossible – Fallout\",\n      \"Year\": \"2018\",\n      \"Category\": \"Action\"\n    },\n    {\n      \"id\": 4,\n      \"first_name\": \"Annihilation\",\n      \"Year\": \"2018\",\n      \"Category\": \"Fantasy\"\n    }\n  ]\n}\n```", "```kt\n$ json-server --watch db.json\n```", "```kt\nFuture<http.Response> fetchPost() {\n  return http.get('http://localhost:3000/Movie/1');\n}\n```", "```kt\nclass Post {\n  final int id;\n  final String movieName;\n  final int year;\n  final String category;\n\n  Post({this.id, this.movieName, this.year, this.category});\n\n  factory Post.fromJson(Map<String, dynamic> json) {\n    return Post(\n      id: json['id'],\n      movieName: json['movieName'],\n      year: json['year'],\n      category: json['category'],\n    );\n  }\n}\n```", "```kt\ndependencies: convert: ^2.1.1\n```", "```kt\nFuture<Post> fetchPost() async {\n  final response =\n  await http.get('http://localhost:3000/Movies/1');\n\n  if (response.statusCode == 200) {\n    // If the call to the server was successful, parse the JSON\n    return Post.fromJson(json.decode(response.body));\n  } else {\n    // If that call was not successful, flag an error.\n    throw Exception('Failed to load post');\n  }\n}\n\n```", "```kt\nFutureBuilder<Post>(\n            future: post,\n            builder: (context, snapshot) {\n              if (snapshot.hasData) {\n                return Text(snapshot.data.movieName);\n              } else if (snapshot.hasError) {\n                return Text(\"${snapshot.error}\");\n              }\n\n              // By default, show a loading spinner\n              return CircularProgressIndicator();\n            },\n);\n```", "```kt\nclass MyApp extends StatelessWidget {\n  final Future<Post> post;\n\n  MyApp({Key key, this.post}) : super(key: key);\n```", "```kt\nimport 'dart:async';\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nFuture<Post> fetchPost() async {\n  final response =\n  await http.get('http://localhost:3000/Movies/1');\n\n  if (response.statusCode == 200) {\n    // If the call to the server was successful, parse the JSON\n    return Post.fromJson(json.decode(response.body));\n  } else {\n    // If that call was not successful, throw an error.\n    throw Exception('Failed to load post');\n  }\n}\n\nclass Post {\n  final int id;\n  final String movieName;\n  final int year;\n  final String category;\n\n  Post({this.id, this.movieName, this.year, this.category});\n\n  factory Post.fromJson(Map<String, dynamic> json) {\n    return Post(\n      id: json['id'],\n      movieName: json['movieName'],\n      year: json['year'],\n      category: json['category'],\n    );\n  }\n}\n\nvoid main() => runApp(MyApp(post: fetchPost()));\n\nclass MyApp extends StatelessWidget {\n  final Future<Post> post;\n\n  MyApp({Key key, this.post}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'JSON Fetch Data Example',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('JSON Fetch Data Example'),\n        ),\n        body: Center(\n          child: FutureBuilder<Post>(\n            future: post,\n            builder: (context, snapshot) {\n              if (snapshot.hasData) {\n                return Text(snapshot.data.movieName);\n              } else if (snapshot.hasError) {\n                return Text(\"${snapshot.error}\");\n              }\n\n              // By default, show a loading spinner\n              return CircularProgressIndicator();\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n```", "```kt\nText(\n  'Hello India, how are you?',\n  textAlign: TextAlign.center,\n  overflow: TextOverflow.ellipsis,\n  style: TextStyle(fontWeight: FontWeight.normal),\n  textScaleFactor: 1.5,\n)\n```", "```kt\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_localizations:\n    sdk: flutter\n```", "```kt\nWidget build(BuildContext context) {\n  return MaterialApp(\n    onGenerateTitle: (BuildContext context) => DemoLocalizations.of(context).title,\n    localizationsDelegates: [\n\n// ... app-specific localization delegate[s] here\n\n      const DemoLocalizationsDelegate(),\n      GlobalMaterialLocalizations.delegate,\n      GlobalWidgetsLocalizations.delegate,\n    ],\n    supportedLocales: [\n      const Locale('en', ''), //Supporting English\n      const Locale('hi', ''), // Supporting Hindi\n      const Locale('es', ''), // Supporting Spanish\n    ],\n```", "```kt\nimport 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart' show SynchronousFuture;\nimport 'package:flutter_localizations/flutter_localizations.dart';\n\nclass DemoLocalizations {\n  DemoLocalizations(this.locale);\n\n  final Locale locale;\n\n  static DemoLocalizations of(BuildContext context) {\n    return Localizations.of<DemoLocalizations>(context, DemoLocalizations);\n  }\n\n  static Map<String, Map<String, String>> _localizedValues = {\n    'en': {\n      'title': 'Locale in English',\n    },\n    'es': {\n      'title': 'Local en españa',\n    },\n    'hi': {\n      'title': 'लोकेल हिंदी में',\n    },\n  };\n\n  String get title {\n    return _localizedValues[locale.languageCode]['title'];\n  }\n}\n\nclass DemoLocalizationsDelegate extends LocalizationsDelegate<DemoLocalizations> {\n  const DemoLocalizationsDelegate();\n\n  @override\n  bool isSupported(Locale locale) => ['en', 'es', 'hi'].contains(locale.languageCode);\n\n  @override\n  Future<DemoLocalizations> load(Locale locale) {\n    // Returning a SynchronousFuture here because an async \"load\" operation\n    // isn't needed to produce an instance of DemoLocalizations.\n    return SynchronousFuture<DemoLocalizations>(DemoLocalizations(locale));\n  }\n\n  @override\n  bool shouldReload(DemoLocalizationsDelegate old) => false;\n}\n\nclass DemoApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(DemoLocalizations.of(context).title),\n      ),\n      body: Center(\n        child: Text(DemoLocalizations.of(context).title),\n      ),\n    );\n  }\n}\n\nclass Demo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      onGenerateTitle: (BuildContext context) => DemoLocalizations.of(context).title,\n      localizationsDelegates: [\n        const DemoLocalizationsDelegate(),\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n      ],\n      supportedLocales: [\n        const Locale('en', ''),\n        const Locale('es', ''),\n        const Locale('hi', ''),\n      ],\n\n      home: DemoApp(),\n    );\n  }\n}\n\nvoid main() {\n  runApp(Demo());\n}\n```"]