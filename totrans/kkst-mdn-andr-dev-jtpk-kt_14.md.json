["```kt\ninterface RepositoriesApiService {\n   @GET(\"repositories?q=mobile&sort=stars&page=1&per_page=20\")\n   suspend fun getRepositories(): RepositoriesResponse\n}\n```", "```kt\ndata class RepositoriesResponse(\n    @SerializedName(\"items\") val repos: List<Repository>\n)\ndata class Repository(\n    @SerializedName(\"id\")\n    val id: String,\n    @SerializedName(\"full_name\")\n    val name: String,\n    @SerializedName(\"description\")\n    val description: String)\n```", "```kt\nobject DependencyContainer {\n    val repositoriesRetrofitClient: RepositoriesApiService =         \n        Retrofit.Builder()\n            .addConverterFactory(GsonConverterFactory.create())\n            .baseUrl(\"https://api.github.com/search/\")\n            .build().create(RepositoriesApiService::class.java)\n}\n```", "```kt\nclass RepositoriesViewModel(\n    private val restInterface: RepositoriesApiService\n    = DependencyContainer.repositoriesRetrofitClient\n) : ViewModel() {\n    val repositories = mutableStateOf(emptyList<Repository>())\n    init {\n        viewModelScope.launch {\n            repositories.value =\n                restInterface.getRepositories().repos\n        }\n    }\n}\n```", "```kt\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            RepositoriesAppTheme {\n                val viewModel: RepositoriesViewModel = \n                    viewModel()\n                val repos = viewModel.repositories.value\n                RepositoriesScreen(repos)\n            }\n        }\n    }\n}\n```", "```kt\n@Composable\nfun RepositoriesScreen(repos: List<Repository>) {\n    LazyColumn(\n        contentPadding = PaddingValues(\n            vertical = 8.dp,\n            horizontal = 8.dp)\n    ) {\n        itemsIndexed(repos) { index, repo ->\n            RepositoryItem(index, repo) \n        }\n    }\n}\n```", "```kt\n@Composable\nfun RepositoryItem(index: Int, item: Repository) {\n    Card(\n        elevation = 4.dp,\n        modifier = Modifier.padding(8.dp).height(120.dp)\n    ) {\n        Row(\n            verticalAlignment = Alignment.CenterVertically,\n            modifier = Modifier.padding(8.dp)\n        ) {\n            Text(\n                text = index.toString(),\n                style = MaterialTheme.typography.h6,\n                modifier = Modifier\n                    .weight(0.2f)\n                    .padding(8.dp))\n            Column(modifier = Modifier.weight(0.8f)) {\n                Text(\n                    text = item.name,\n                    style = MaterialTheme.typography.h6)\n                Text(\n                    text = item.description,\n                    style = MaterialTheme.typography.body2,\n                    overflow = TextOverflow.Ellipsis,\n                    maxLines = 3)\n            }\n        }\n    }\n}\n```", "```kt\nclass RepositoriesViewModel(\n    private val restInterface: RepositoriesApiService =  [...]\n) : ViewModel() {\n    val repositories = mutableStateOf(emptyList<Repository>())\n    init {\n        viewModelScope.launch {\n            repositories.value =\n                restInterface.getRepositories().repos\n        }\n    }\n}\n```", "```kt\nclass SomeViewModel(…) : ViewModel() {\n    init {\n        viewModelScope.launch {\n            getRepositories().collect { repos ->\n                // Update UI\n            }\n        }\n    }\n    […]\n}\n```", "```kt\n    dependencies {\n        […]\n        implementation \"androidx.paging:\n            paging-compose:1.0.0-alpha14\"\n    }\n    ```", "```kt\n    interface RepositoriesApiService {\n        @GET(\"repositories?q=mobile&sort=stars&per_page=20\")\n        suspend fun getRepositories(@Query(\"page\") page:Int): \n            RepositoriesResponse\n    }\n    ```", "```kt\nclass RepositoriesPagingSource(\n    private val restInterface: RepositoriesApiService\n    = DependencyContainer.repositoriesRetrofitClient,\n) : PagingSource<Int, Repository>() {\n    override suspend fun load(params: LoadParams<Int>)\n            : LoadResult<Int, Repository> {\n    }\n    override fun getRefreshKey(\n        state: PagingState<Int, Repository>,\n    ): Int? {\n        return null\n    }\n}\n```", "```kt\nclass RepositoriesPagingSource(…) : […] {\n    override suspend fun load(params: LoadParams<Int>)\n    : LoadResult<Int, Repository> {\n        try {\n        } catch (e: Exception) {\n            return LoadResult.Error(e)\n        }\n    }\n    override fun getRefreshKey(…): Int? { … }\n}\n```", "```kt\n    class RepositoriesPagingSource(…) : […] {\n        override suspend fun load(params: LoadParams<Int>)\n        : LoadResult<Int, Repository> {\n            try {\n                val nextPage = params.key ?: 1\n            } catch (e: Exception) {\n                return LoadResult.Error(e) \n            }\n        }\n        override fun getRefreshKey(…): Int? { … }\n    }\n    ```", "```kt\n    class RepositoriesPagingSource(…) : […] {\n        override suspend fun load(params: LoadParams<Int>)\n                : LoadResult<Int, Repository> {\n            try {\n                val nextPage = params.key ?: 1\n                val repos = restInterface\n                    .getRepositories(nextPage).repos\n            } catch (e: Exception) {\n                return LoadResult.Error(e) \n            }\n        }\n        override fun getRefreshKey(…): Int? { … }\n    }\n    ```", "```kt\n    class RepositoriesPagingSource(…) : […] {\n        override suspend fun load(params: LoadParams<Int>)\n                : […] {\n            try {\n                val nextPage = params.key ?: 1\n                val repos = restInterface\n                    .getRepositories(nextPage).repos\n                return LoadResult.Page(\n                    data = repos,\n                    prevKey = if (nextPage == 1) null\n                              else nextPage - 1,\n                    nextKey = nextPage + 1)\n            } catch (e: Exception) {\n                return LoadResult.Error(e)\n            }\n        }\n        override fun getRefreshKey(…): Int? { … }\n    }\n    ```", "```kt\n    class RepositoriesViewModel(\n        private val reposPagingSource:\n        RepositoriesPagingSource = RepositoriesPagingSource()\n    ) : ViewModel() {\n    }\n    ```", "```kt\n    import kotlinx.coroutines.flow.Flow\n    class RepositoriesViewModel(\n        private val reposPagingSource:\n        RepositoriesPagingSource = RepositoriesPagingSource()\n    ) : ViewModel() {\n        val repositories: Flow<PagingData<Repository>>\n    }\n    ```", "```kt\n    class RepositoriesViewModel(\n        private val reposPagingSource:\n        RepositoriesPagingSource = RepositoriesPagingSource()\n    ) : ViewModel() {\n        val repositories: Flow<PagingData<Repository>> =\n            Pager(\n                config = PagingConfig(pageSize = 20),\n                pagingSourceFactory = {\n                    reposPagingSource\n                })\n    }\n    ```", "```kt\n    class RepositoriesViewModel(...) : ViewModel() {\n        val repositories: Flow<PagingData<Repository>> =\n            Pager(\n                config = PagingConfig(pageSize = 20),\n                pagingSourceFactory = {\n                    reposPagingSource\n                }).flow.cachedIn(viewModelScope)\n    }\n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                RepositoriesAppTheme {\n                    val viewModel: RepositoriesViewModel = \n                        viewModel()\n                    val reposFlow = viewModel.repositories\n                    RepositoriesScreen()\n                }\n            }\n        }\n    }\n    ```", "```kt\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            RepositoriesAppTheme {\n                val viewModel: […] = viewModel()\n                val reposFlow = viewModel.repositories\n                val lazyRepoItems\n                        : LazyPagingItems<Repository> =\n                    reposFlow.collectAsLazyPagingItems()\n                RepositoriesScreen(lazyRepoItems)\n            }\n        }\n    }\n}\n```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>\n    ) {\n        LazyColumn (…) {\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>\n    ) {\n        LazyColumn(…) {\n            itemsIndexed(repos) { index, repo ->\n                if (repo != null) {\n                    RepositoryItem(index, repo)\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>\n    ) {\n        LazyColumn(…) {\n            itemsIndexed(repos) { index, repo ->\n                if (repo != null) {\n                    RepositoryItem(index, repo)\n                }\n            }\n            val refreshLoadState = repos.loadState.refresh\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>\n    ) {\n        LazyColumn(…) {\n            itemsIndexed(repos) { index, repo ->\n                if (repo != null) {\n                    RepositoryItem(index, repo)\n                }\n            }\n            val refreshLoadState = repos.loadState.refresh\n            when {\n                refreshLoadState is LoadState.Loading -> {\n                    item {\n                        LoadingItem(\n                            Modifier.fillParentMaxSize())\n                    }\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun LoadingItem(\n        modifier: Modifier = Modifier\n    ) {\n        Column(\n            modifier = modifier.padding(24.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment =\n                Alignment.CenterHorizontally\n        ) { CircularProgressIndicator() }\n    }\n    ```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>\n    ) {\n        LazyColumn(…) {\n            itemsIndexed(repos) { index, repo -> […] }\n            val refreshLoadState = repos.loadState.refresh\n            when {\n                refreshLoadState is LoadState.Loading -> {\n                    item { LoadingItem(…) }\n                }\n                refreshLoadState is LoadState.Error -> {\n                    val error = refreshLoadState.error\n                    item {\n                        ErrorItem(\n                            message = error.localizedMessage\n                                ?: \"\",\n                            modifier =\n                               Modifier.fillParentMaxSize()\n                        )\n                    }\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun ErrorItem(\n        message: String,\n        modifier: Modifier = Modifier) {\n        Row(\n            modifier = modifier.padding(16.dp),\n            horizontalArrangement = \n                Arrangement.SpaceBetween,\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Text(\n                text = message,\n                maxLines = 2,\n                modifier = Modifier.weight(1f),\n                style = MaterialTheme.typography.h6,\n                color = Color.Red)\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun ErrorItem(\n        message: String,\n        modifier: Modifier = Modifier,\n        onClick: () -> Unit) {\n        Row(...) {\n            Text(...)\n            Button(\n                onClick = onClick,\n                modifier = Modifier.padding(8.dp)\n            ) { Text(text = \"Try again\") }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>\n    ) {\n        LazyColumn(…) {\n            itemsIndexed(repos) { index, repo -> […] }\n            val refreshLoadState = repos.loadState.refresh\n            when {\n                refreshLoadState is LoadState.Loading -> {\n                    …\n                }\n                refreshLoadState is LoadState.Error -> {\n                    val error = refreshLoadState.error\n                    item {\n                        ErrorItem(\n                            message = error.localizedMessage\n                                ?: \"\",\n                            modifier =\n                               Modifier.fillParentMaxSize(),\n                            onClick = { repos.retry() })\n                    }\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>\n    ) {\n        LazyColumn(…) {\n            itemsIndexed(repos) { […] }\n            val refreshLoadState = repos.loadState.refresh\n            val appendLoadState = repos.loadState.append\n            when {\n                refreshLoadState is LoadState.Loading -> {\n                    item {\n                        LoadingItem(...)\n                    }\n                }\n                refreshLoadState is LoadState.Error -> {\n                    val error = refreshLoadState.error\n                    item {\n                        ErrorItem(\n                            message = error.localizedMessage\n                                ?: \"\",\n                            modifier = ...,\n                            onClick = { repos.retry() })\n                    }\n                }\n                appendLoadState is LoadState.Loading -> {\n                    item {\n                        LoadingItem(\n                            Modifier.fillMaxWidth())\n                    }\n                }\n                appendLoadState is LoadState.Error -> {\n                    val error = appendLoadState.error\n                    item {\n                        ErrorItem(\n                            message = error.localizedMessage\n                                ?: \"\",\n                            onClick = { repos.retry() })\n                    }\n                }\n            }\n        }\n    }\n    ```"]