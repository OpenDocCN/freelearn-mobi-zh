- en: Chapter 7. Social Media Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days, social media integration is a common feature that all mobile applications
    incorporate. Some applications allow users to share data and updates to their
    social profiles such as Facebook and Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, the traditional login process for the application using an e-mail
    ID and password is turning out to be cumbersome for the users. So to target such
    issues, many applications use Facebook and Twitter as their base login. Users
    can sign up using their Facebook or Twitter account. This even simplifies the
    steps of the login process and provides one-click sign up and login to the user.
    Keeping such things in mind, Parse provides you with the Plug and Play approach
    to integrate with social media, both for sharing and for the login process. In
    this chapter, you will learn in detail about social media integration using Parse.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's easy to integrate Facebook with your Parse application. The Facebook SDK
    can be used with the Parse SDK. You can link your `PFUser` with the Facebook user
    identities. You can use Facebook for sign up processes as well. Parse allows you
    to authenticate the user from Facebook and associate the user in your `PFUser`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: In this section you will learn the integration of Facebook from your Parse application.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with the integration of Facebook with Parse, you need to set
    up the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Register on the Facebook developer portal ([https://developers.facebook.com/](https://developers.facebook.com/))
    and create a Facebook application ([https://developers.facebook.com/docs/ios/getting-started/](https://developers.facebook.com/docs/ios/getting-started/)),
    if you have not created it already.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facebook provides step-by-step procedure to create an app ([https://developers.facebook.com/apps](https://developers.facebook.com/apps))
    and link it with the Facebook SDK.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with Facebook, you need to configure the following in your application:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project file from the left-hand side panel, click on **Targets**
    and navigate to the **Info** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Custom iOS Target Properties** section, add a new key with **Facebook
    App Id** as a string value and provide your Facebook app ID as the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now add another key name with **URL** **Type**. Expand the key and at last you
    will see the **URL identifier**. Replace the **URL identifier** with **URL Schemes**
    and fill it with `fbYour_App_Id` (for example, Fb1234567890).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After updating your application with the Facebook keys, perform the following
    steps for setting up the code in your application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `application:didFinishLaunchingWithOptions:` method, add the following
    line of code to initialize Facebook, just below the code where you have initialized
    the Parse SDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following methods in your `AppDelegate` file to handle the single sign-on
    feature of the Facebook SDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Signing up on Facebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the Parse SDK you can allow users to sign up using Facebook. The user
    object will also be created and saved for you by Parse. The following method will
    allow you to log in with Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, `permissions` is an array of strings that specify what
    data your application wants to access from Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will demonstrate the way you log in or sign up using Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: On the button action you can add the previous code to log in or sign up using
    Facebook. In the previous code, we have used `permissionsArray`. This array will
    hold the strings to indicate the user data needed from Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing the preceding function, the following steps will take place:'
  prefs: []
  type: TYPE_NORMAL
- en: The app will be redirected to Facebook or will prompt for permissions to access
    the data from Facebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user authenticates via Facebook, your application will receive a callback
    using the `handleOpenUrl` method that we had configured in the previous section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Parse SDK will fetch the data and save it to the `PFUser` class and will
    save the data on Parse if the user is new.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your code block will be called with the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parse provides you with a very deep integration with Facebook, as Parse has
    been acquired by Facebook, Inc. This also spells for even greater and deeper integration
    with Parse in future.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing on Facebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To post some updates on the user wall, you need to acquire publishing permissions
    from the user. The following code will acquire the publishing permission from
    the users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Requesting user data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After user login, you can start fetching the user data from Facebook using
    the Graph API. The following code will demonstrate the way to fetch the user data
    from Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `result` dictionary will hold all the requested data. You can fetch the
    data by querying with the key.
  prefs: []
  type: TYPE_NORMAL
- en: Linking users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In case of anonymous login or sign up using an e-mail ID and password, you
    can associate the existing `PFUser` to a Facebook account. The following code
    will illustrate a way to link an existing user to Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After successful log in the `PFUser` class will be updated with the Facebook
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will unlink a Facebook account from a current user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Logging out
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To log out the current user from the application, you simply need to call the
    `logOut` method on the `PFUser` class. The following code will log out the user
    from the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Keeping users logged in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's cumbersome for the user to log in every time while launching the application.
    This is because Facebook session information is not stored in between launches.
    Parse makes this easy for us by internally saving the session in the `currentUser`
    object of the `PFUser` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the launch view controller, you can check for the current session. If it
    exists, you can bypass the log in. The following code will illustrate how to bypass
    the log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Integrating Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like Facebook integration, Parse provides an easy way to integrate Twitter
    authentication as well. Just after a few lines of code, you will be able to log
    in with Twitter and save the data over the Parse Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need to perform the following steps to set up Twitter authentication using
    Parse:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have not created your application on Twitter already, you need to create
    your application on the Twitter developer portal ([https://d](https://d)[ev.twitter.com/apps](http://ev.twitter.com/apps)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add your Twitter application's **Consumer Key** on the Parse application's settings
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a valid **Callback URL** for the Twitter application. This value is important
    for you to have control over this callback URL, so that the information isn't
    hijacked along the way. So, in this way, this value is used for authentication
    purposes by Twitter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in your `application:didFinishLaunchingWithOptions:`
    method, just below the code where you initialized Parse:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is all you need to do to set up Twitter in your application. Now, we can
    allow the user to log in using Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up and logging in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Parse provides you with the `PFTwitterUtils` class to allow your users to log
    in using Twitter. The following code will allow the user to sign up using Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'On executing the previous code, the following should happen:'
  prefs: []
  type: TYPE_NORMAL
- en: The user will be prompted for the permission to access Twitter authentication
    through an alert box or login dialog box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After authorizing the application, the application will receive a callback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parse will receive the data on successful log in and will save it to the `PFUser`
    class on the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In case of anonymous login or sign up using an e-mail ID and password, you
    can associate the existing PFUser to a Twitter account. The following code will
    illustrate a way to link an existing user to Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After successful log in the `PFUser` class will be updated with the Twitter
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will unlink the Twitter account from a current user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the integration of the Facebook and Twitter SDK
    with the Parse SDK.
  prefs: []
  type: TYPE_NORMAL
- en: We started by exploring Facebook integration with setting up an application
    on the Facebook developer portal and then saw the login setup.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we learned about publishing posts on Facebook, and linking users from
    Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learned about integrating in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we explored Twitter integration and log in in our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the cloud functions and its usage in
    our application.
  prefs: []
  type: TYPE_NORMAL
