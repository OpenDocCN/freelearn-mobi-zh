["```swift\ncurl -sL toolbox.vapor.sh | bash\n\n```", "```swift\nvapor -help\n\n```", "```swift\nvapor new storefront\n\n```", "```swift\nvapor xcode \n\n```", "```swift\n$vapor xcode \nNo Packages folder, fetch may take a while... \nFetching Dependencies [Done] \nGenerating Xcode Project [Done] \nSelect the `App` scheme to run. \nMake sure Xcode > Toolchains > 3.0-GM-CANDIDATE is selected. \nOpen Xcode project? \ny/n>nz \n\n```", "```swift\nvapor clean or vapor build --clean \n\n```", "```swift\nimport PackageDescription \n\nlet package = Package( \n    name: \"VaporApp\", \n    dependencies: [ \n        .Package(url: \"https://github.com/vapor/vapor.git\", majorVersion: 0, minor: 18) \n], \n    exclude: [ \n        \"Config\", \n        \"Database\", \n        \"Localization\", \n        \"Public\", \n        \"Resources\", \n        \"Tests\", \n    ] \n) \n\n```", "```swift\nimport Vapor \n\nlet drop = Droplet() \n\n```", "```swift\ndrop.get(\"/\") { request in \n    return try drop.view.make(\"shop.html\") \n} \n\ndrop.post(\"purchase\") { request in \n\n// more stuff happening here but omitted \n\nvar response = try Response(status: .ok, json: json) \n    return response \n} \n\n```", "```swift\n// Nested route \ndrop.get(\"products\", \"vehicles\", \"trucks\") { request in \n    return \"You requested /products/vehicles/trucks\" \n} \n\n```", "```swift\n// Type Safe parameters \ndrop.get(\"artboard\", Int.self) { request, productId in \n    return \"You requested Artboard #\\(productId)\" \n} \n\n```", "```swift\ndrop.get(\"artboard\", \":id\") { request in \n    guard let productId = request.parameters[\"id\"]?.int else { \n        throw Abort.badRequest \n    } \n\n    return \"You requested Artboard #\\(productId)\" \n} \n\n```", "```swift\ndrop.get(\"/\") { request in \n    return try drop.view.make(\"shop.html\") \n} \n\n```", "```swift\ndrop.get(\"shop_template\") { request in \n    return try drop.view.make(\"shop.template\", [ \n        \"countdown\": \"2 days left\", \n        \"shopper_count\": \"1,000\" \n        ]) \n} \n\n```", "```swift\ndrop.post(\"purchase\") { request in \n    drop.log.info(\"purchase request made\") \n    guard let product_id = request.data[\"product_id\"]?.int else { \n        throw Abort.badRequest \n    } \n\n    guard let product = products.filter({ (prod) -> Bool in \n        return prod.id == product_id \n    }).first else{ \n        throw Abort.badRequest \n    } \n\n    let json = try JSON(node: [ \n        \"Product\" : \"\\(product.name)\", \n        \"price\" : \"\\(product.price)\", \n        ]) \n\n// more work happening and omitted  \n\n    var response = try Response(status: .ok, json: json) \n\n    return response \n} \n\n```", "```swift\n\ndrop.post(\"purchase\") { request in \n // omitted code above \n\n    let slack_payload = try JSON(node: [ \"attachments\": \n        try JSON(node: [ \n            try JSON(node: [ \n                \"fallback\": \"New purchase Request\", \n                \"pretext\": \"New purchase Request\", \n                \"color\": \"#D00000\", \n                \"fields\": try JSON(node: [ \n                    try JSON(node: [ \n                        \"title\" : \"Product: \\(product.name)\", \n                        \"value\" : \"Price: \\(product.price)\", \n                        \"short\" : \"false\" \n                        ]) \n                    ]) \n                ]) \n            ]) \n        ]) \n\n     _ = try drop.client.post(\"https://hooks.slack.com/services/<your hook id>\", headers: [:], query: [:], body: slack_payload) \n\n    var response = try Response(status: .ok, json: json) \n\n    return response \n} \n\n```"]