- en: There Is an API for That!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see what we can do to prove our hypotheses by building
    a mash-up. It takes more effort than just a simple landing page but it takes less
    time than developing a full application. By combining apps or other resources,
    you can put a solution together for the problem that you are trying to solve with
    a minimum amount of effort. This is an interesting approach for at least a proof
    of concept. Once you have learned the lessons you wanted to learn you could always
    set up a more robust solution. On the other hand your strategy for your app can
    be just that- combining resources and launch it as your product or service itself.
    This applies in particular to apps that offer aggregated information. Alternatively,
    you can think of apps that require heavy integration with social networks, such
    as Facebook, Twitter, or YouTube. Social referring is always easier than building
    a user base completely by yourself, so integrating a social component into your
    app is always a smart thing to do, but it is particularly interesting if you create
    a mash-up solution with it.
  prefs: []
  type: TYPE_NORMAL
- en: You can combine various apps and services but there is also something else that
    could result in very interesting mash-up solutions. Data is available about almost
    everything and much of this data has been made publicly available through various
    API's. You can use that data, combine it with other data and visualize the outcome
    in a different way. For example, you can display the results on a Google map,
    instead of showing it in a list. The most popular mash-ups do exactly that. They
    visualize existing data in a different way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Investigate how mash-ups can help us to prove hypotheses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a look at some popular mash-ups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investigate what APIs and mobile SDKs are available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prove our hypotheses by building a mobile mash-up solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prove our hypotheses using an IFTT recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Succeed or fail fast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A mash-up allows you to succeed or to fail fast. If you fail you can rephrase
    your hypotheses at an early stage. Using the feedback you get you can build a
    better app and find out what it takes to build an app that people actually want.
  prefs: []
  type: TYPE_NORMAL
- en: It is also true that, by using APIs or SDKs of third parties you can rely on
    much larger platforms than yours and since it is proven technology it is less
    error prone. For example, if you want to integrate payments other than In App
    purchases you will of course use the existing solution of a payment provider.
  prefs: []
  type: TYPE_NORMAL
- en: You can take advantage of social networks, by providing a single sign on for
    your app. You could, for example, provide a way for the user to sign up or to
    login with his Facebook or login account. It lowers the registration barrier,
    resulting in higher sign up conversions. Not only does the user have to take fewer
    actions to get on board but you also have access to additional data such as a
    name and profile photo. Right after the sign up this results in a more personalized
    experience of the app. We will elaborate on this in [Chapter 11](774e65d5-5ac0-4ade-9f9e-cffb2a911441.xhtml),
    *Onboarding and Registration*, about the process of on boarding new users.
  prefs: []
  type: TYPE_NORMAL
- en: What is in a mash-up solution?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For now, let's have a closer look a mash-ups. What exactly are mash-ups and
    how does the phenomenon materialize? In general, mash-ups consume specific data
    from one or more sources, have an alternative presentation, and/or provide additional
    logic
  prefs: []
  type: TYPE_NORMAL
- en: A mash-up is typically a combination of consuming reusable data, specific complex
    functionality, presentation, and some new logic. It does not necessarily need
    to have all of these elements. A mash-up could be a solution that gathers and
    combines data from multiple sources. Through APIs anyone can consume various types
    of datasets. The added value of your app could just be the result of the fact
    that you aggregate data. For example, think of an app that displays all the available
    jobs for which otherwise you would have to visit over 10 different websites. Data
    mining and various other techniques can help you to further enrich data.
  prefs: []
  type: TYPE_NORMAL
- en: Mash-ups can also utilize APIs to perform complex functionality (data processing
    and payment handling) or they can be used to outsource various tasks in the nondigital
    world. This could be tasks such as 3D printing on demand, delivery of goods or
    the execution of small tasks performed by humans. Amazon's Mechanical Turk API
    is a good example of this. Through this API, you can dispatch small tasks to other
    people. You can think of writing reviews, validating or reviewing user input,
    or performing research. There are a huge amount of SaaS solutions available and
    most of them come with an **application-programming interface** (**API**). All
    this API can be tied together to create something new. They allow developers to
    test their hypotheses even faster.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing an API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the other hand, you can also offer an API yourself if you have got some (enriched)
    data to share. If that is data that others can utilize to build something new,
    you might want to think of an API as a service that you can charge some money
    for. If your API is providing some real value, then you can probably make a profitable
    business out of it. It could have an interesting, recurring revenue model.
  prefs: []
  type: TYPE_NORMAL
- en: Since it may be hard to monetize your app the traditional way, it might be an
    interesting idea to think of publishing an API related to your app or your app
    eco system. Many companies, such as SalesForce or Expedia, already get most of
    their revenues from API subscriptions, so this is an interesting path to explore.
  prefs: []
  type: TYPE_NORMAL
- en: Lego or Duplo?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you compare mash-up solutions with those that are created from scratch, it
    will be like comparing Duplo with Lego. If you use third-party solutions, then
    the development of your app will be faster, smarter, and probably cheaper. Small
    and reusable microservices can easily be assembled into a larger and more complex
    app. Obviously, playing with Lego is more fun, but you can build a tower much
    faster using Duplo.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of diving deeply into all kinds of technical challenges, you can focus
    on what matters the most. The implementation of the functionality that will result
    in the **unique value proposition** (**UVP**) for your solution.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different types of mash-ups. Think of consumer mash-ups, business
    mash-ups, data mash-ups, and logical mash-ups. Do you need specific data? Do you
    want to offer flights or holidays? Do you need a payment solution? Alternatively,
    do you need to send bulk SMS, dim the lights, or want to outsource tasks? Guess
    what? There is an API for that!
  prefs: []
  type: TYPE_NORMAL
- en: APIs versus SDKs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: APIs are interfaces, often made available as a REST service. A **Software Development
    Kit** (**SDK**) is meant specially for implementing the API on a particular platform,
    such as iOS or Android. It will make the integration process more smooth. We have
    already seen an example of this in [Chapter 4](0455b0c7-1234-4a39-a89c-b35deb8f92ed.xhtml),
    *An Agile Workflow In A Nutshell*, where we looked at an Android app using Firebase.
    In that example, you might have noticed a Gradle dependency for Firebase. It is
    a reference to the Android SDK, which will take care of the communication with
    the Firebase API. The API itself allows you to perform all operations, but the
    SDK will save you a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The nature of APIs and SDKs is that they will be updated often. For this reason,
    a smart dependency management plan is important. You do not want to update the
    modules or update the entire code everywhere in your app each time a new version
    of the SDK has been released.
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For Android, you should use external Gradle dependencies, rather than adding
    library modules to your project. If you are using Android Studio, then you can
    start using Gradle right away. You will find the listing of dependencies for your
    app in the `build.gradle` file within the app folder of your project. The dependency
    section would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in this example, RetroFit, HockeyApp, and a couple of other dependencies
    are defined here. You might be familiar with them already. Retrofit and the Gson
    converter, for example, are solutions for consuming data over HTTP and deserializing
    the result into an object. While dependencies could also refer to local libraries,
    it is strongly recommended to use dependencies as illustrated earlier. For more
    information on Gradle, check the website at [http://gradle.org](http://gradle.org).
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For iOS (and many other languages and IDEs), you could use Gradle as well. This
    is particularly interesting and valuable if you work on both the Android and iOS
    platforms and if you wish to use the same tools for building your apps using build
    servers such as TeamCity or Jenkins. More on this in [Chapter 18](d8f75536-5799-4326-aea8-a187b809e758.xhtml),
    *Continuous Integration, Delivery and Deployment*, about Continuous Delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Another well-known solution, but available to iOS development only, is CocoaPods.
    It is a dependency manager for iOS projects (Objective C or Swift). It manages
    third-party libraries by creating a workspace that, besides your own projects
    will contain a CocoaPods project, where our dependencies will reside.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pod` file contains the list of dependencies and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in this example, the `pod` file is, among other pods, referring
    to the `Zxing` library. It is a perfect solution for creating and for scanning
    bar code images. Installing and configuring `cocoapods` is pretty easy. You just
    type `gem install cocoapods` in your terminal app to do so. The next thing to
    do is to define the `pod` file that will contain the references that your project
    will use. You need to do a `pod install` to actually get the dependency libraries.
    Running this command in your terminal app will add all the dependencies as listed
    in the `pod` file. We will have a closer look at this process in the paragraph
    where we build our MVP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Also worth mentioning here is Carthage. It is an alternative solution to CocoaPods
    and it is the first dependency manager to work with Swift explicitly. CocoaPods
    is built with Ruby, where as Carthage is built with Swift. Carthage seems to be
    a bit more flexible but also more complex to use.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on CocoaPods, you can look at [https://cocoapods.org](https://cocoapods.org).
    If you would like to know more about Carthage and the differences between CocoaPods
    and Carthage, you can check out [https://github.com/Carthage/Carthage](https://github.com/Carthage/Carthage).
  prefs: []
  type: TYPE_NORMAL
- en: Available APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data about many different topics and from various sources can be gathered through
    (open) APIs. You will find them on the websites of many companies delivering SaaS
    or you can check them out on one of the sites that offers aggregated lists of
    almost all available APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'On [https://www.programmableweb.com/](https://www.programmableweb.com/) or
    [http://mashable.com/](http://mashable.com/), you will find many APIs that you
    can use for inspiration. You will also find many mash-up solutions there. You
    can find many APIs that you can use for your app. Most of them are not explicitly
    intended for mobile apps but as long as the data can be consumed as JSON or as
    XML then that does not really have to be an issue. On the website, you can search
    for particular categories, particular data types, or just browse through the latest
    additions. As you can see, following the weather is always an interesting kind
    of data source and there are many apps using this data. One example is the app
    InstaWeather (See [http://instaweather.me/](http://instaweather.me/)). In a later
    paragraph, we will see how we can use these APIs for our MVP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51b086ea-f7d9-4438-a337-2c3d6380666e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The other places to look for APIs and examples of mash-ups are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.mashable.com](http://www.mashable.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.data.gov](https://www.data.gov)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.opendatanetwork.com](http://www.opendatanetwork.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://data.sfgov.org](https://data.sfgov.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://data.worldbank.org/developers](http://data.worldbank.org/developers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dev.socrata.com](https://dev.socrata.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.nytimes.com](http://developer.nytimes.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you know of a data source for which no API is available, then you can think
    of an alternative such as (site) scraping. It is an approach that many sites,
    offering aggregated content (jobs, real estate, and insurance), use. Site scraping
    can be tricky though. It could be very error prone, but sometimes it is the only
    way to get things done quickly or to obtain specific data. In particular for your
    first experiments (MVP) it is an interesting method to use.
  prefs: []
  type: TYPE_NORMAL
- en: An iOS app proving our hypotheses, MoviUber
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far for the theory. It is time to build our MVP. This MVP combines data from
    various sources to demonstrate how you can create a valuable app real quickly.
    In this section, we will build an app for iOS that can be used to explore locations
    of well-known movies. It will demonstrate the concept of using APIs and SDKs to
    prove our hypotheses.
  prefs: []
  type: TYPE_NORMAL
- en: Hypothesis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We cannot get started without defining our hypothesis first. All people like
    movies. Some people like them more than others. Let's assume that movie freaks
    love to travel to cities such as San Francisco to explore the city and visit the
    locations where well-known movies have been filmed. Many locations cannot easily
    be reached by public transport. To get there, they will have to use Uber.
  prefs: []
  type: TYPE_NORMAL
- en: So this app is about traveling in San Francisco and visiting movie hotspots
    using Uber. It consumes data, provides a new representation of the corresponding
    data (maybe on a map even), and connects a real-life service, such as Uber, to
    it. Maybe we can even enrich the data a little by looking up the movie title from
    the **Internet Movie DataBase** (**IMDB**). Let's call this app MoviUber. For
    this app, we will not elaborate too much about the business model. We just want
    to figure out if we can connect the dots here. Would it not be cool if we can
    make this work? What do we need to do to make that happen?
  prefs: []
  type: TYPE_NORMAL
- en: Validating the idea through customer interviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to know first if it makes sense creating this mash-up. And maybe you
    want to give your own twist to the concept first and then, as an exercise, try
    to validate the idea. See if you can find someone, who loves movies and who is
    already using Uber.
  prefs: []
  type: TYPE_NORMAL
- en: Tell him or her about the concept and ask what he or she thinks about it. Ask
    open questions only. If you ask a friend, "Do you think this will be a fantastic
    idea?", you will probably get a positive answer anyway. While this is nice to
    hear, it will not help you to get the idea validated.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, if he or she is very enthusiastic about the concept, then perhaps some
    new ideas or features will come up or maybe you get some great insights why this
    whole app idea is actually a very bad plan. You never know.
  prefs: []
  type: TYPE_NORMAL
- en: Since this chapter is specifically about creating a mash-up solution, we will
    assume the idea has been validated thoroughly. It is a brilliant plan and we have
    gathered positive feedback through customer interviews. Let's build an app.
  prefs: []
  type: TYPE_NORMAL
- en: Let's build an app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started, let''s define the ingredients for our MVP. Here it is:'
  prefs: []
  type: TYPE_NORMAL
- en: Movie locations (duh), shown as a list to browse through all movies and locations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Uber button, to call a driver to get us there.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IMDB is an optional ingredient but it would be nice to have. We can use
    this to display some additional information about a particular movie.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A map will be a great feature that can be used for planning if the user wants
    to go from one site to another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Movie locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the San Francisco data API, powered by Socrata, we can get movie locations
    in San Francisco. To get an impression, you can browse through the dataset you
    will find at this location: [https://data.sfgov.org/Culture-and-Recreation/Film-Locations-in-San-Francisco/yitu-d5am](https://data.sfgov.org/Culture-and-Recreation/Film-Locations-in-San-Francisco/yitu-d5am).
    You want to go where Sharon Stone went? You can look it up in this dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But instead of downloading the dataset here, it would be more convenient to
    have access to the data through an API. That is something that can be found here:
    [https://dev.socrata.com/foundry/data.sfgov.org/wwmu-gmzc](https://dev.socrata.com/foundry/data.sfgov.org/wwmu-gmzc).
    After doing some research, it turns out that there is even an SDK. That is even
    better. Soda-Swift is a native Swift library that can access Socrata open data
    servers. You will find it on GitHub at: [https://github.com/socrata/soda-swift](https://github.com/socrata/soda-swift).'
  prefs: []
  type: TYPE_NORMAL
- en: Uber
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Uber offers an API and SDKs for various platforms, including an iOS Swift library,
    available on GitHub. Check it out at [https://github.com/uber/rides-ios-sdk](https://github.com/uber/rides-ios-sdk)
    . The API is described at [https://developer.uber.com/docs/tutorials-rides-api](https://developer.uber.com/docs/tutorials-rides-api).
  prefs: []
  type: TYPE_NORMAL
- en: IMDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It seems there is no IMDb API yet, but there is the OMDb API. This API is a
    free web service for obtaining movie information. You can find it at [http://www.omdbapi.com](http://www.omdbapi.com).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, for the map we will be using Apple maps. All you need for that is the
    MapKit framework. Awesome. What do we need to do next?
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we will download the SDK. Also, we will download the Socrata sample
    app from [https://github.com/socrata/soda-swift](https://github.com/socrata/soda-swift).
    We will use the sample app for our MVP. We will modify a few things such as the
    data token and dataset. To obtain a token, you need a developer''s account at
    Socrata first. You can register for free at [https://dev.socrata.com](https://dev.socrata.com/foundry/data.sfgov.org/wwmu-gmzc).
    Next you need to create an app on their website. Open the Socrata-Swift project
    in Xcode and from the SODASample project open the QueryViewController. Modify
    the domain and token for the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `refesh` method, you need to modify the dataset for the query and change
    the order field to `title`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `cellForRowAtIndexPath` function, change the fields of the item to `title`
    and `locations` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you run the app, it will display a nice list of movies and locations
    on the first tab. To display them as well on the map on the second tab, we need
    to do a little extra:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4aed3958-bcc6-40d5-8d3a-258cf6080731.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying locations on a map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To display the locations on the map as pin points, we need values for longitude
    and latitude, but unfortunately we have only a (vague) address description. We
    need to convert the address to an actual location. To do so, you need to open
    the MapViewController and find the `updateWithData` function that we will modify
    by using the `CLGeocoder`. This class is very smart at converting addresses to
    actual locations with longitude and latitude values.
  prefs: []
  type: TYPE_NORMAL
- en: For each location, we will determine what the longitude and latitude values
    are for a particular address. Once we have found one of these or placemarks for
    a given location, we will create a pin point for it and add to the map. Finally,
    we will navigate the user to San Francisco on the map, so we can actually see
    the pinpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the map will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86683e76-2dcc-4fe0-81f4-37bd892fa7ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Uber integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have a map with pin points now. We can start with the integration of Uber
    functionality. We will keep it simple by just displaying an Uber ride request
    button in our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new app at [https://developer.uber.com](https://developer.uber.com).
    Log in or sign up for Uber first, if you have not done so yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a2d5031f-9ec7-423f-97ce-ebb1bf3dcea5.png)'
  prefs: []
  type: TYPE_IMG
- en: Give a name and a description for your app and save the changes. It will reveal
    a client ID that you need for implementing Uber functionality in your app. You
    can find the Uber Swift SDK on GitHub at [https://github.com/uber/rides-ios-sdk](https://github.com/uber/rides-ios-sdk),
    but you can also use CocoaPods to include it with your app, which is the recommended
    way of integrating the Uber functionality with your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have not done this before, install CocoaPods first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console app, go to the folder where the Soda Swift project is. To create
    a new `pod` file type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `pod` file that has been created and modified for you, so it will
    load the UberRides project for us into the workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install the dependency using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `info.plist` content by right-clicking on the file and choosing
    Open as, Source code. Add these key-value pairs to the dictionary and add your
    Uber client ID, which you can find on the Uber developers site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `AppDelegate` file in such a way that it will use the sandbox mode
    of Uber for testing. It probably will be somewhat inconvenient to be picked up
    at your location each time you test the app. Import `UberRides` and enable the
    sandbox mode in the `didFinishLaunchWithOptions` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In QueryViewController, add new imports for `MapKit` and `UberRides`, just
    below the import of UIKit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We need to modify the `didSelectRowAtIndexPath` function a bit. If the user
    clicks on any of the rows, a button will be shown that can be clicked to initiate
    a ride. Both the code and the UI require some beautification, but that is beyond
    the scope of the MVP. For that purpose, the selected item's longitude and latitude
    value will be retrieved, this time to tell Uber where the user wants to go to
    (the drop-off location). We do not specify a pick up location. By default, the
    Uber SDK will use the user's current location. That may not always be sufficiently
    accurate, but for an MVP it is just fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Uber Rides SDK checks the value of `locationServicesEnabled()` in `CLLocationManager`,
    which must be true to be able to retrieve the user''s current location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the end, the method shown adds an Uber button to the view. This is including
    the knowledge of where the user currently is and where he wants to go. This allows
    the user to click on a button in the app to order a ride and it contains all the
    knowledge Uber needs to know.
  prefs: []
  type: TYPE_NORMAL
- en: Enriching the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, as an optional exercise and if you want to enrich the movie location
    data, you can get some extra movie info and an image of the movie from the OMDb
    API. Since we know the title of the movie, we can perform a query on the API.
    The response, nicely formatted as JSON, teaches us something about the plot, actors
    and it even gives us the URL to an IMDB image. We can show this in the app to
    inform the user what the movie is all about.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain an API key go to [http://www.omdbapi.com](http://www.omdbapi.com)
    and click on the API key link. You can get one for free if you register with your
    email address. You will receive an email with your own API-key and an activation
    link. After activation you can add your API key in the request.: [http://www.omdbapi.com/?t=Basic+instinct&y=&plot=short&r=json&apikey=<api
    key>](http://www.omdbapi.com/?t=Basic+instinct&y=&plot=short&r=json&apikey=%3Capi%20key%3E).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The response for this query looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: By bundling data from multiple datasets, by displaying them in an alternative
    way (in a list and on a map on a mobile device), and by adding Uber functionality
    making traveling from one spot to another more convenient, we have created a really
    cool mash-up iOS app. To see where this could be going to, including the OMDb
    data integration, you can download and examine the full app code from Packt.
  prefs: []
  type: TYPE_NORMAL
- en: We had to do some coding to build this MVP. You might wonder if there is no
    way to get things proved without coding. And there is. We are not talking about
    user interviews or the analyzing metrics here. We can also use **If This Then
    That** (**IFTT**) to build an MVP. It allows us to automate simple but often interesting
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Look! No code. Prove your hypotheses with IFTT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Services such as IFTT add a logical component to the possibilities of APIs.
    If something happens for a particular data feed (channel), then something else
    needs to be done. It works well for **Internet of Things** (**IoT**) related concepts
    in particular, but you can connect almost any service that you like. You can check
    it out for yourself at [http://iftt.com/?reqp=1&reqr=](http://iftt.com/?reqp=1&reqr=).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using IFTT requires little to no coding, making it the perfect environment
    to automate small tasks (the so-called recipes). It could also help you to validate
    your hypotheses, before you actually build the thing. Let''s try this. If you
    have not signed up for IFTT yet, then do so before you continue. We want to prove
    our hypotheses, which for the sake of simplicity narrows down to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fec1d0b-e167-4dcd-bfde-8dc01b635607.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Users want to be reminded to put a towel in their bag. That is particularly
    important on #towel day (May 25) but also when they go to the airport, where UFOs
    can easily land. Just wave to the UFOs using your towel, if you want them to pick
    you up.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Eh, what did you just read? If you think this is a lame example, or if it does
    not make sense to you, I suggest you read the Hitchhikers Guide to Galaxy first.
    You can also check it out on [http://www.towelday.org](http://www.towelday.org).
    Anyway, let''s examine what IFTT is about and how we can use it to prove this
    hypothesis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8aa9a32e-f06b-4e7c-acf9-a69241dcfd53.png)'
  prefs: []
  type: TYPE_IMG
- en: Recipes, channels, and triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a new recipe is simple. For our MVP, the user location will be the
    trigger. In this example, we will be using the IFTT Android app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We choose the Android location as the channel and we choose You enter an area
    as the trigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a776958-c0df-4ff7-8432-440438895d46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you need to define the particular location, which is the nearest airport.
    In my case, it is Rotterdam Airport:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/201814f9-4ceb-4895-9080-cfbb253e29c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Whenever the user enters this area, we want to be notified. Let''s use Twitter
    as the channel to send a message about the event. We will get a direct message
    from Twitter whenever this event happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e4eee52-e4d0-4346-b7c1-c1c913c472e4.png)'
  prefs: []
  type: TYPE_IMG
- en: And we are done. It technically works for yourself or for others, if you share
    the recipe. It is that easy to set something up that could help to prove your
    hypotheses. If you have completed the validation process, you can always build
    a real app that can perform the same task.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other recipes that you can think of. For example, if you have
    a smart thermostat, you can lower the temperature, since you are at the airport
    anyway. Alternatively, you can have a look at this recipe; for example, "Send
    an email when you land" at `https://ifttt.com/recipes/134835-send-an-email-when-you-land`.
    Without any extra effort, your relatives will know that you are safe.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how APIs and mash-ups can help us to prove our hypotheses.
    With a minimal amount of effort, we can create an MVP. Before we could use only
    APIs for consuming and combining data, but nowadays we can also use them to outsource
    tasks. You can think of image recognition, 3D printing, delivery or a task performed
    by humans.
  prefs: []
  type: TYPE_NORMAL
- en: We saw what mash-up solutions are and what types of mash-up exist. We created
    an iOS MVP app that demonstrates the idea of combining multiple API's.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at the services provided by IFTT, which, depending on your
    needs, is probably the fastest way to prove your hypothesis first and then build
    the actual app later. There are plenty of recipes available at IFTT that you could
    use, or you can create your own. We also discussed the benefits from integrating
    the APIs and SDKs from social networks, such as Facebook and Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming chapter, we will have a closer look at the integration of social
    networks and how this affects the on boarding process in particular. You will
    read more about this in the next chapter about the on boarding and registration
    process.
  prefs: []
  type: TYPE_NORMAL
