- en: There Is an API for That!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有相应的API！
- en: In this chapter, we will see what we can do to prove our hypotheses by building
    a mash-up. It takes more effort than just a simple landing page but it takes less
    time than developing a full application. By combining apps or other resources,
    you can put a solution together for the problem that you are trying to solve with
    a minimum amount of effort. This is an interesting approach for at least a proof
    of concept. Once you have learned the lessons you wanted to learn you could always
    set up a more robust solution. On the other hand your strategy for your app can
    be just that- combining resources and launch it as your product or service itself.
    This applies in particular to apps that offer aggregated information. Alternatively,
    you can think of apps that require heavy integration with social networks, such
    as Facebook, Twitter, or YouTube. Social referring is always easier than building
    a user base completely by yourself, so integrating a social component into your
    app is always a smart thing to do, but it is particularly interesting if you create
    a mash-up solution with it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨通过构建一个混合应用来验证我们的假设我们能做些什么。这比仅仅创建一个简单的着陆页需要更多的努力，但比开发一个完整的应用程序所需的时间要少。通过结合应用程序或其他资源，你可以用最少的努力为你要解决的问题制定一个解决方案。这对于至少一个概念验证来说是一个有趣的方法。一旦你学到了你想要学习的课程，你总是可以设置一个更稳健的解决方案。另一方面，你的应用程序策略可能就是如此——结合资源，并将其作为你的产品或服务本身推出。这尤其适用于提供聚合信息的应用程序。或者，你也可以考虑需要与社交网络（如Facebook、Twitter或YouTube）进行大量集成的应用程序。与完全自己建立用户基础相比，社交推荐总是更容易，因此将社交组件集成到你的应用程序中始终是一个明智的选择，但如果你用它创建了一个混合解决方案，那就更有趣了。
- en: You can combine various apps and services but there is also something else that
    could result in very interesting mash-up solutions. Data is available about almost
    everything and much of this data has been made publicly available through various
    API's. You can use that data, combine it with other data and visualize the outcome
    in a different way. For example, you can display the results on a Google map,
    instead of showing it in a list. The most popular mash-ups do exactly that. They
    visualize existing data in a different way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以结合各种应用程序和服务，但还有其他可能产生非常有趣的混合解决方案的东西。几乎关于任何事情都有数据，其中大部分数据已经通过各种API公开提供。你可以使用这些数据，将其与其他数据相结合，并以不同的方式可视化结果。例如，你可以在谷歌地图上显示结果，而不是在列表中显示。最受欢迎的混合应用正是这样做的。它们以不同的方式可视化现有数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Investigate how mash-ups can help us to prove hypotheses
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查混合应用如何帮助我们验证假设
- en: Have a look at some popular mash-ups
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看一些流行的混合应用
- en: Investigate what APIs and mobile SDKs are available
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查可用的API和移动SDK
- en: Prove our hypotheses by building a mobile mash-up solution
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过构建移动混合解决方案来验证我们的假设
- en: Prove our hypotheses using an IFTT recipe
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IFTT食谱来验证我们的假设
- en: Succeed or fail fast
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速成功或失败
- en: A mash-up allows you to succeed or to fail fast. If you fail you can rephrase
    your hypotheses at an early stage. Using the feedback you get you can build a
    better app and find out what it takes to build an app that people actually want.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 混合应用允许你快速成功或失败。如果你失败了，你可以在早期阶段重新表述你的假设。使用你获得的反馈，你可以构建一个更好的应用程序，并找出人们真正想要的应用程序需要什么。
- en: It is also true that, by using APIs or SDKs of third parties you can rely on
    much larger platforms than yours and since it is proven technology it is less
    error prone. For example, if you want to integrate payments other than In App
    purchases you will of course use the existing solution of a payment provider.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，通过使用第三方API或SDK，你可以依赖比你的平台更大的平台，并且由于它是经过验证的技术，因此它更不容易出错。例如，如果你想集成除应用内购买之外的其他支付方式，你当然会使用支付提供商的现有解决方案。
- en: You can take advantage of social networks, by providing a single sign on for
    your app. You could, for example, provide a way for the user to sign up or to
    login with his Facebook or login account. It lowers the registration barrier,
    resulting in higher sign up conversions. Not only does the user have to take fewer
    actions to get on board but you also have access to additional data such as a
    name and profile photo. Right after the sign up this results in a more personalized
    experience of the app. We will elaborate on this in [Chapter 11](774e65d5-5ac0-4ade-9f9e-cffb2a911441.xhtml),
    *Onboarding and Registration*, about the process of on boarding new users.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过提供单一登录功能来利用社交网络，为你的应用程序。例如，你可以提供一个用户使用Facebook或登录账户注册或登录的方式。这降低了注册门槛，从而提高了注册转化率。用户需要采取的行动更少，你也能获取到额外的数据，如姓名和头像。注册后，这将为应用程序带来更加个性化的体验。我们将在第11章[Onboarding
    and Registration](774e65d5-5ac0-4ade-9f9e-cffb2a911441.xhtml)中详细阐述这个过程，关于新用户注册的过程。
- en: What is in a mash-up solution?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混搭解决方案中有什么？
- en: For now, let's have a closer look a mash-ups. What exactly are mash-ups and
    how does the phenomenon materialize? In general, mash-ups consume specific data
    from one or more sources, have an alternative presentation, and/or provide additional
    logic
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更深入地了解一下混搭。混搭究竟是什么，这种现象是如何产生的？一般来说，混搭会从一个或多个来源消费特定的数据，具有不同的展示方式，并提供额外的逻辑。
- en: A mash-up is typically a combination of consuming reusable data, specific complex
    functionality, presentation, and some new logic. It does not necessarily need
    to have all of these elements. A mash-up could be a solution that gathers and
    combines data from multiple sources. Through APIs anyone can consume various types
    of datasets. The added value of your app could just be the result of the fact
    that you aggregate data. For example, think of an app that displays all the available
    jobs for which otherwise you would have to visit over 10 different websites. Data
    mining and various other techniques can help you to further enrich data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 混搭通常是由消费可重用数据、特定的复杂功能、展示和一些新的逻辑组合而成的。它不一定需要所有这些元素。混搭可能是一个从多个来源收集和合并数据的解决方案。通过API，任何人都可以消费各种类型的数据集。你应用程序的附加价值可能仅仅是聚合数据的结果。例如，想象一个应用程序，它显示了所有可用的职位，否则你可能需要访问10多个不同的网站。数据挖掘和其他技术可以帮助你进一步丰富数据。
- en: Mash-ups can also utilize APIs to perform complex functionality (data processing
    and payment handling) or they can be used to outsource various tasks in the nondigital
    world. This could be tasks such as 3D printing on demand, delivery of goods or
    the execution of small tasks performed by humans. Amazon's Mechanical Turk API
    is a good example of this. Through this API, you can dispatch small tasks to other
    people. You can think of writing reviews, validating or reviewing user input,
    or performing research. There are a huge amount of SaaS solutions available and
    most of them come with an **application-programming interface** (**API**). All
    this API can be tied together to create something new. They allow developers to
    test their hypotheses even faster.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 混搭还可以利用API执行复杂功能（数据处理和支付处理），或者它们可以被用来外包非数字世界中的各种任务。这可能包括按需3D打印、商品交付或执行由人类完成的小任务。Amazon的Mechanical
    Turk API就是这样一个很好的例子。通过这个API，你可以将小任务分配给其他人。你可以想象写评论、验证或审查用户输入，或进行研究。有大量的SaaS解决方案可用，其中大多数都带有**应用程序编程接口**（**API**）。所有这些API可以结合起来创造新的东西。它们允许开发者更快地测试他们的假设。
- en: Publishing an API
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布一个API
- en: On the other hand, you can also offer an API yourself if you have got some (enriched)
    data to share. If that is data that others can utilize to build something new,
    you might want to think of an API as a service that you can charge some money
    for. If your API is providing some real value, then you can probably make a profitable
    business out of it. It could have an interesting, recurring revenue model.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你有一些可以分享的（丰富）数据，你也可以自己提供一个API。如果这些数据可以被他人利用来构建新的东西，你可能想要将API视为一种可以收费的服务。如果你的API提供了真正的价值，那么你很可能从中获得利润。它可能有一个有趣且可持续的盈利模式。
- en: Since it may be hard to monetize your app the traditional way, it might be an
    interesting idea to think of publishing an API related to your app or your app
    eco system. Many companies, such as SalesForce or Expedia, already get most of
    their revenues from API subscriptions, so this is an interesting path to explore.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可能很难以传统方式使你的应用盈利，考虑发布与你的应用或应用生态系统相关的API可能是一个有趣的想法。许多公司，如SalesForce或Expedia，已经从API订阅中获得了大部分收入，所以这是一个值得探索的有趣途径。
- en: Lego or Duplo?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 乐高还是得宝？
- en: If you compare mash-up solutions with those that are created from scratch, it
    will be like comparing Duplo with Lego. If you use third-party solutions, then
    the development of your app will be faster, smarter, and probably cheaper. Small
    and reusable microservices can easily be assembled into a larger and more complex
    app. Obviously, playing with Lego is more fun, but you can build a tower much
    faster using Duplo.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将混合体解决方案与从头开始创建的解决方案进行比较，那就像比较得宝与乐高。如果你使用第三方解决方案，那么你的应用开发将更快、更智能，可能也更便宜。小型且可重用的微服务可以轻松组装成更大、更复杂的应用。显然，玩乐高更有趣，但使用得宝可以更快地搭建一座塔。
- en: Instead of diving deeply into all kinds of technical challenges, you can focus
    on what matters the most. The implementation of the functionality that will result
    in the **unique value proposition** (**UVP**) for your solution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必深入所有各种技术挑战，你可以专注于最重要的事情。实现将产生你解决方案**独特价值主张**（**UVP**）的功能。
- en: There are many different types of mash-ups. Think of consumer mash-ups, business
    mash-ups, data mash-ups, and logical mash-ups. Do you need specific data? Do you
    want to offer flights or holidays? Do you need a payment solution? Alternatively,
    do you need to send bulk SMS, dim the lights, or want to outsource tasks? Guess
    what? There is an API for that!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同类型的混合体。想想看，有消费者混合体、商业混合体、数据混合体和逻辑混合体。你需要特定的数据吗？你想提供航班或假期吗？你需要支付解决方案吗？或者，你需要发送大量短信、调暗灯光，或者想要外包任务？猜猜看？为此有一个API！
- en: APIs versus SDKs
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API与SDK的比较
- en: APIs are interfaces, often made available as a REST service. A **Software Development
    Kit** (**SDK**) is meant specially for implementing the API on a particular platform,
    such as iOS or Android. It will make the integration process more smooth. We have
    already seen an example of this in [Chapter 4](0455b0c7-1234-4a39-a89c-b35deb8f92ed.xhtml),
    *An Agile Workflow In A Nutshell*, where we looked at an Android app using Firebase.
    In that example, you might have noticed a Gradle dependency for Firebase. It is
    a reference to the Android SDK, which will take care of the communication with
    the Firebase API. The API itself allows you to perform all operations, but the
    SDK will save you a lot of time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: API是接口，通常作为REST服务提供。**软件开发套件**（**SDK**）专门用于在特定平台（如iOS或Android）上实现API。这将使集成过程更加顺畅。我们已经在[第4章](0455b0c7-1234-4a39-a89c-b35deb8f92ed.xhtml)，“敏捷工作流程概述”中看到了一个例子，我们查看了一个使用Firebase的Android应用。在那个例子中，你可能注意到了Firebase的Gradle依赖项。这是一个对Android
    SDK的引用，它将负责与Firebase API的通信。API本身允许你执行所有操作，但SDK将为你节省大量时间。
- en: Dependency management
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项管理
- en: The nature of APIs and SDKs is that they will be updated often. For this reason,
    a smart dependency management plan is important. You do not want to update the
    modules or update the entire code everywhere in your app each time a new version
    of the SDK has been released.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: API和SDK的本质是它们将经常更新。因此，一个智能的依赖管理计划很重要。你不想每次SDK发布新版本时，都要更新模块或更新应用中的所有代码。
- en: Android
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android
- en: 'For Android, you should use external Gradle dependencies, rather than adding
    library modules to your project. If you are using Android Studio, then you can
    start using Gradle right away. You will find the listing of dependencies for your
    app in the `build.gradle` file within the app folder of your project. The dependency
    section would look like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android，你应该使用外部Gradle依赖项，而不是将库模块添加到你的项目中。如果你使用Android Studio，那么你就可以立即开始使用Gradle。你将在项目中的应用文件夹中的`build.gradle`文件中找到你应用的依赖项列表。依赖项部分看起来可能如下所示：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in this example, RetroFit, HockeyApp, and a couple of other dependencies
    are defined here. You might be familiar with them already. Retrofit and the Gson
    converter, for example, are solutions for consuming data over HTTP and deserializing
    the result into an object. While dependencies could also refer to local libraries,
    it is strongly recommended to use dependencies as illustrated earlier. For more
    information on Gradle, check the website at [http://gradle.org](http://gradle.org).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如此例所示，Retrofit、HockeyApp以及一些其他依赖项在此处被定义。你可能已经熟悉它们。例如，Retrofit和Gson转换器是用于通过HTTP消费数据并将结果反序列化为对象的解决方案。虽然依赖项也可以指本地库，但强烈建议使用前面所示的方式使用依赖项。有关Gradle的更多信息，请访问[http://gradle.org](http://gradle.org)。
- en: iOS
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS
- en: For iOS (and many other languages and IDEs), you could use Gradle as well. This
    is particularly interesting and valuable if you work on both the Android and iOS
    platforms and if you wish to use the same tools for building your apps using build
    servers such as TeamCity or Jenkins. More on this in [Chapter 18](d8f75536-5799-4326-aea8-a187b809e758.xhtml),
    *Continuous Integration, Delivery and Deployment*, about Continuous Delivery.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于iOS（以及许多其他语言和IDE），你也可以使用Gradle。如果你在Android和iOS平台上工作，并且希望使用相同的工具通过构建服务器（如TeamCity或Jenkins）构建你的应用程序，这将特别有趣和有价值。关于这一点，请参阅第18章，*持续集成、交付和部署*，关于持续交付的更多信息。
- en: Another well-known solution, but available to iOS development only, is CocoaPods.
    It is a dependency manager for iOS projects (Objective C or Swift). It manages
    third-party libraries by creating a workspace that, besides your own projects
    will contain a CocoaPods project, where our dependencies will reside.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个广为人知的解决方案，但仅适用于iOS开发，是CocoaPods。它是一个用于iOS项目（Objective C或Swift）的依赖管理器。它通过创建一个工作区来管理第三方库，该工作区除了包含您自己的项目外，还将包含一个CocoaPods项目，我们的依赖将驻留其中。
- en: 'The `pod` file contains the list of dependencies and it looks like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`pod`文件包含依赖项列表，其外观如下：'
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see in this example, the `pod` file is, among other pods, referring
    to the `Zxing` library. It is a perfect solution for creating and for scanning
    bar code images. Installing and configuring `cocoapods` is pretty easy. You just
    type `gem install cocoapods` in your terminal app to do so. The next thing to
    do is to define the `pod` file that will contain the references that your project
    will use. You need to do a `pod install` to actually get the dependency libraries.
    Running this command in your terminal app will add all the dependencies as listed
    in the `pod` file. We will have a closer look at this process in the paragraph
    where we build our MVP:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如此例所示，`pod`文件在众多pods中，引用了`Zxing`库。这是一个创建和扫描条形码图像的完美解决方案。安装和配置`cocoapods`相当简单。你只需在你的终端应用程序中输入`gem
    install cocoapods`即可。接下来要做的事情是定义包含项目将使用的引用的`pod`文件。你需要执行`pod install`来实际获取依赖库。在终端应用程序中运行此命令将在`pod`文件中列出所有依赖项。我们将在构建MVP的段落中更详细地了解此过程：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Also worth mentioning here is Carthage. It is an alternative solution to CocoaPods
    and it is the first dependency manager to work with Swift explicitly. CocoaPods
    is built with Ruby, where as Carthage is built with Swift. Carthage seems to be
    a bit more flexible but also more complex to use.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是Carthage。它是CocoaPods的替代方案，并且是第一个明确支持Swift的依赖管理器。CocoaPods是用Ruby构建的，而Carthage是用Swift构建的。Carthage似乎更加灵活，但使用起来也更复杂。
- en: For more information on CocoaPods, you can look at [https://cocoapods.org](https://cocoapods.org).
    If you would like to know more about Carthage and the differences between CocoaPods
    and Carthage, you can check out [https://github.com/Carthage/Carthage](https://github.com/Carthage/Carthage).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解有关CocoaPods的更多信息，请访问[https://cocoapods.org](https://cocoapods.org)。如果你想知道更多关于Carthage以及CocoaPods和Carthage之间差异的信息，请查看[https://github.com/Carthage/Carthage](https://github.com/Carthage/Carthage)。
- en: Available APIs
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用API
- en: Data about many different topics and from various sources can be gathered through
    (open) APIs. You will find them on the websites of many companies delivering SaaS
    or you can check them out on one of the sites that offers aggregated lists of
    almost all available APIs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过（公开）API收集关于许多不同主题和来自各种来源的数据。你可以在提供SaaS的许多公司的网站上找到它们，或者你可以检查提供几乎所有可用API的聚合列表的网站之一。
- en: 'On [https://www.programmableweb.com/](https://www.programmableweb.com/) or
    [http://mashable.com/](http://mashable.com/), you will find many APIs that you
    can use for inspiration. You will also find many mash-up solutions there. You
    can find many APIs that you can use for your app. Most of them are not explicitly
    intended for mobile apps but as long as the data can be consumed as JSON or as
    XML then that does not really have to be an issue. On the website, you can search
    for particular categories, particular data types, or just browse through the latest
    additions. As you can see, following the weather is always an interesting kind
    of data source and there are many apps using this data. One example is the app
    InstaWeather (See [http://instaweather.me/](http://instaweather.me/)). In a later
    paragraph, we will see how we can use these APIs for our MVP:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://www.programmableweb.com/](https://www.programmableweb.com/)或[http://mashable.com/](http://mashable.com/)上，您将找到许多可以用于灵感的API。您也会在那里找到许多混合解决方案。您会发现许多可以用于您的应用程序的API。大多数API并非专门为移动应用程序设计，但只要数据可以以JSON或XML格式消费，这实际上并不是一个问题。在网站上，您可以搜索特定类别、特定数据类型，或者浏览最新的添加内容。正如您所看到的，跟踪天气总是一种有趣的数据来源，并且有许多应用程序使用这些数据。一个例子是应用程序InstaWeather（见[http://instaweather.me/](http://instaweather.me/)）。在后面的段落中，我们将看到我们如何使用这些API来构建我们的MVP：
- en: '![](img/51b086ea-f7d9-4438-a337-2c3d6380666e.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51b086ea-f7d9-4438-a337-2c3d6380666e.png)'
- en: 'The other places to look for APIs and examples of mash-ups are:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在其他地方寻找API和混合解决方案的示例：
- en: '[http://www.mashable.com](http://www.mashable.com)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.mashable.com](http://www.mashable.com)'
- en: '[https://www.data.gov](https://www.data.gov)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.data.gov](https://www.data.gov)'
- en: '[http://www.opendatanetwork.com](http://www.opendatanetwork.com)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.opendatanetwork.com](http://www.opendatanetwork.com)'
- en: '[https://data.sfgov.org](https://data.sfgov.org)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://data.sfgov.org](https://data.sfgov.org)'
- en: '[http://data.worldbank.org/developers](http://data.worldbank.org/developers)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://data.worldbank.org/developers](http://data.worldbank.org/developers)'
- en: '[https://dev.socrata.com](https://dev.socrata.com)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://dev.socrata.com](https://dev.socrata.com)'
- en: '[http://developer.nytimes.com](http://developer.nytimes.com)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://developer.nytimes.com](http://developer.nytimes.com)'
- en: If you know of a data source for which no API is available, then you can think
    of an alternative such as (site) scraping. It is an approach that many sites,
    offering aggregated content (jobs, real estate, and insurance), use. Site scraping
    can be tricky though. It could be very error prone, but sometimes it is the only
    way to get things done quickly or to obtain specific data. In particular for your
    first experiments (MVP) it is an interesting method to use.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您知道一个没有API的数据源，那么您可以考虑一个替代方案，比如（网站）抓取。这是一种许多提供聚合内容（工作、房地产和保险）的网站所采用的方法。不过，网站抓取可能会很棘手。它可能会非常容易出错，但有时它是快速完成任务或获取特定数据的唯一方法。特别是对于您的第一次实验（MVP）来说，这是一个有趣的方法。
- en: An iOS app proving our hypotheses, MoviUber
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证明我们假设的iOS应用程序，MoviUber
- en: So far for the theory. It is time to build our MVP. This MVP combines data from
    various sources to demonstrate how you can create a valuable app real quickly.
    In this section, we will build an app for iOS that can be used to explore locations
    of well-known movies. It will demonstrate the concept of using APIs and SDKs to
    prove our hypotheses.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了理论。现在是时候构建我们的最小可行产品（MVP）了。这个MVP结合了来自各种来源的数据，以展示您如何能够快速创建一个有价值的应用程序。在本节中，我们将构建一个iOS应用程序，用于探索著名电影的地点。它将展示使用API和SDK来验证我们假设的概念。
- en: Hypothesis
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假设
- en: We cannot get started without defining our hypothesis first. All people like
    movies. Some people like them more than others. Let's assume that movie freaks
    love to travel to cities such as San Francisco to explore the city and visit the
    locations where well-known movies have been filmed. Many locations cannot easily
    be reached by public transport. To get there, they will have to use Uber.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有首先定义我们的假设之前，我们无法开始。所有人都喜欢电影。有些人比其他人更喜欢。让我们假设电影狂热者喜欢去像旧金山这样的城市旅行，探索城市并参观著名电影拍摄过的地点。许多地点无法通过公共交通轻松到达。为了到达那里，他们必须使用Uber。
- en: So this app is about traveling in San Francisco and visiting movie hotspots
    using Uber. It consumes data, provides a new representation of the corresponding
    data (maybe on a map even), and connects a real-life service, such as Uber, to
    it. Maybe we can even enrich the data a little by looking up the movie title from
    the **Internet Movie DataBase** (**IMDB**). Let's call this app MoviUber. For
    this app, we will not elaborate too much about the business model. We just want
    to figure out if we can connect the dots here. Would it not be cool if we can
    make this work? What do we need to do to make that happen?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个应用是关于在旧金山旅行并使用Uber参观电影热门地点的。它消耗数据，提供了对应数据的新的表示形式（也许是在地图上），并将现实生活中的服务，如Uber，与之连接。也许我们甚至可以通过查找**互联网电影数据库**（**IMDB**）中的电影标题来稍微丰富一下数据。让我们把这个应用称为MoviUber。对于这个应用，我们不会过多地阐述商业模式。我们只想弄清楚我们是否可以连接这些点。如果我们可以让这一切工作起来，那岂不是酷毙了？我们需要做什么才能让它发生？
- en: Validating the idea through customer interviews
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过客户访谈验证想法
- en: We need to know first if it makes sense creating this mash-up. And maybe you
    want to give your own twist to the concept first and then, as an exercise, try
    to validate the idea. See if you can find someone, who loves movies and who is
    already using Uber.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要知道创建这个混合解决方案是否有意义。也许你首先想给这个概念添加自己的特色，然后作为一个练习，尝试验证这个想法。看看你是否能找到一个既热爱电影又已经在使用Uber的人。
- en: Tell him or her about the concept and ask what he or she thinks about it. Ask
    open questions only. If you ask a friend, "Do you think this will be a fantastic
    idea?", you will probably get a positive answer anyway. While this is nice to
    hear, it will not help you to get the idea validated.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 向他或她介绍这个概念，并询问他或她对它的看法。只问开放式问题。如果你问朋友，“你认为这会是一个极好的主意吗？”，你很可能会得到一个肯定的回答。虽然听起来很令人高兴，但这并不能帮助你验证这个想法。
- en: Anyway, if he or she is very enthusiastic about the concept, then perhaps some
    new ideas or features will come up or maybe you get some great insights why this
    whole app idea is actually a very bad plan. You never know.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，如果他或她对这个概念非常热情，那么可能会有一些新的想法或功能出现，或者你可能得到一些关于为什么这个整个应用想法实际上是一个非常糟糕的计划的大洞察。你永远不知道。
- en: Since this chapter is specifically about creating a mash-up solution, we will
    assume the idea has been validated thoroughly. It is a brilliant plan and we have
    gathered positive feedback through customer interviews. Let's build an app.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章专门讨论创建混合解决方案，我们将假设这个想法已经得到了充分的验证。这是一个绝妙的计划，我们通过客户访谈收集到了积极的反馈。让我们构建一个应用。
- en: Let's build an app
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们构建一个应用
- en: 'To get started, let''s define the ingredients for our MVP. Here it is:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们定义我们的MVP（最小可行产品）的组成部分。如下所示：
- en: Movie locations (duh), shown as a list to browse through all movies and locations.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电影地点（当然），以列表形式展示，可以浏览所有电影和地点。
- en: An Uber button, to call a driver to get us there.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Uber按钮，用来叫车到那里。
- en: The IMDB is an optional ingredient but it would be nice to have. We can use
    this to display some additional information about a particular movie.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IMDB是一个可选的组成部分，但拥有它会很不错。我们可以用它来显示关于特定电影的额外信息。
- en: A map will be a great feature that can be used for planning if the user wants
    to go from one site to another.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户想要从一个地点去另一个地点，地图将是一个很棒的功能，可以用来规划路线。
- en: Movie locations
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电影地点
- en: 'Using the San Francisco data API, powered by Socrata, we can get movie locations
    in San Francisco. To get an impression, you can browse through the dataset you
    will find at this location: [https://data.sfgov.org/Culture-and-Recreation/Film-Locations-in-San-Francisco/yitu-d5am](https://data.sfgov.org/Culture-and-Recreation/Film-Locations-in-San-Francisco/yitu-d5am).
    You want to go where Sharon Stone went? You can look it up in this dataset.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用由Socrata提供的旧金山数据API，我们可以获取旧金山的电影地点。为了获得一些印象，你可以浏览这个位置的数据集：[https://data.sfgov.org/Culture-and-Recreation/Film-Locations-in-San-Francisco/yitu-d5am](https://data.sfgov.org/Culture-and-Recreation/Film-Locations-in-San-Francisco/yitu-d5am)。你想去莎朗·斯通去过的地方？你可以在这个数据集中查找。
- en: 'But instead of downloading the dataset here, it would be more convenient to
    have access to the data through an API. That is something that can be found here:
    [https://dev.socrata.com/foundry/data.sfgov.org/wwmu-gmzc](https://dev.socrata.com/foundry/data.sfgov.org/wwmu-gmzc).
    After doing some research, it turns out that there is even an SDK. That is even
    better. Soda-Swift is a native Swift library that can access Socrata open data
    servers. You will find it on GitHub at: [https://github.com/socrata/soda-swift](https://github.com/socrata/soda-swift).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但与其在这里下载数据集，不如通过API访问数据更方便。这里可以找到这样的东西：[https://dev.socrata.com/foundry/data.sfgov.org/wwmu-gmzc](https://dev.socrata.com/foundry/data.sfgov.org/wwmu-gmzc)。经过一番研究，发现甚至还有一个SDK。这更好。Soda-Swift是一个本地的Swift库，可以访问Socrata开放数据服务器。你可以在GitHub上找到它：[https://github.com/socrata/soda-swift](https://github.com/socrata/soda-swift)。
- en: Uber
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Uber
- en: Uber offers an API and SDKs for various platforms, including an iOS Swift library,
    available on GitHub. Check it out at [https://github.com/uber/rides-ios-sdk](https://github.com/uber/rides-ios-sdk)
    . The API is described at [https://developer.uber.com/docs/tutorials-rides-api](https://developer.uber.com/docs/tutorials-rides-api).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Uber为各种平台提供API和SDK，包括iOS Swift库，可在GitHub上找到。查看[https://github.com/uber/rides-ios-sdk](https://github.com/uber/rides-ios-sdk)
    。API的描述在[https://developer.uber.com/docs/tutorials-rides-api](https://developer.uber.com/docs/tutorials-rides-api)。
- en: IMDB
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IMDB
- en: It seems there is no IMDb API yet, but there is the OMDb API. This API is a
    free web service for obtaining movie information. You can find it at [http://www.omdbapi.com](http://www.omdbapi.com).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 目前似乎还没有IMDb API，但有一个OMDb API。这是一个免费的在线服务，用于获取电影信息。你可以在[http://www.omdbapi.com](http://www.omdbapi.com)找到它。
- en: Finally, for the map we will be using Apple maps. All you need for that is the
    MapKit framework. Awesome. What do we need to do next?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于我们将要使用的地图，我们将使用Apple地图。为此，你只需要MapKit框架。太棒了。我们接下来需要做什么？
- en: 'For this, we will download the SDK. Also, we will download the Socrata sample
    app from [https://github.com/socrata/soda-swift](https://github.com/socrata/soda-swift).
    We will use the sample app for our MVP. We will modify a few things such as the
    data token and dataset. To obtain a token, you need a developer''s account at
    Socrata first. You can register for free at [https://dev.socrata.com](https://dev.socrata.com/foundry/data.sfgov.org/wwmu-gmzc).
    Next you need to create an app on their website. Open the Socrata-Swift project
    in Xcode and from the SODASample project open the QueryViewController. Modify
    the domain and token for the client:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个，我们将下载SDK。同时，我们还将从[https://github.com/socrata/soda-swift](https://github.com/socrata/soda-swift)下载Socrata示例应用。我们将使用这个示例应用来构建我们的最小可行产品（MVP）。我们将修改一些东西，比如数据令牌和数据集。要获取令牌，你首先需要在Socrata上有一个开发者账户。你可以在[https://dev.socrata.com](https://dev.socrata.com/foundry/data.sfgov.org/wwmu-gmzc)免费注册。接下来，你需要在他们的网站上创建一个应用。在Xcode中打开Socrata-Swift项目，然后从SODASample项目打开QueryViewController。修改客户端的域名和令牌：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `refesh` method, you need to modify the dataset for the query and change
    the order field to `title`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`refesh`方法中，你需要修改查询的数据集，并将排序字段改为`title`：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `cellForRowAtIndexPath` function, change the fields of the item to `title`
    and `locations` as shown in the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`cellForRowAtIndexPath`函数中，将项目的字段改为`title`和`locations`，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, when you run the app, it will display a nice list of movies and locations
    on the first tab. To display them as well on the map on the second tab, we need
    to do a little extra:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行应用时，它将在第一个标签页上显示一个漂亮的电影和位置列表。为了在第二个标签页上的地图上显示它们，我们需要做一些额外的工作：
- en: '![](img/4aed3958-bcc6-40d5-8d3a-258cf6080731.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4aed3958-bcc6-40d5-8d3a-258cf6080731.png)'
- en: Displaying locations on a map
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在地图上显示位置
- en: To display the locations on the map as pin points, we need values for longitude
    and latitude, but unfortunately we have only a (vague) address description. We
    need to convert the address to an actual location. To do so, you need to open
    the MapViewController and find the `updateWithData` function that we will modify
    by using the `CLGeocoder`. This class is very smart at converting addresses to
    actual locations with longitude and latitude values.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要在地图上以标记点的方式显示位置，我们需要经度和纬度值，但不幸的是，我们只有（模糊的）地址描述。我们需要将地址转换为实际位置。为此，你需要打开MapViewController，找到我们将要修改的`updateWithData`函数，我们将使用`CLGeocoder`来修改它。这个类非常擅长将地址转换为具有经纬度值的实际位置。
- en: For each location, we will determine what the longitude and latitude values
    are for a particular address. Once we have found one of these or placemarks for
    a given location, we will create a pin point for it and add to the map. Finally,
    we will navigate the user to San Francisco on the map, so we can actually see
    the pinpoints.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个位置，我们将确定特定地址的经纬度值。一旦我们找到了这些或给定位置的placemark，我们将为它创建一个标记点并将其添加到地图上。最后，我们将用户导航到地图上的旧金山，这样我们就可以实际看到标记点。
- en: 'The code will look like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将看起来像这样：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is what the map will look like:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是地图将看起来像什么：
- en: '![](img/86683e76-2dcc-4fe0-81f4-37bd892fa7ad.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86683e76-2dcc-4fe0-81f4-37bd892fa7ad.png)'
- en: Uber integration
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Uber集成
- en: We have a map with pin points now. We can start with the integration of Uber
    functionality. We will keep it simple by just displaying an Uber ride request
    button in our app.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个带有标记点的地图。我们可以从Uber功能的集成开始。我们将保持简单，只在我们的应用中显示一个Uber行程请求按钮。
- en: 'Create a new app at [https://developer.uber.com](https://developer.uber.com).
    Log in or sign up for Uber first, if you have not done so yet:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://developer.uber.com](https://developer.uber.com)创建一个新的应用。如果您还没有这样做，请先登录或注册Uber：
- en: '![](img/a2d5031f-9ec7-423f-97ce-ebb1bf3dcea5.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2d5031f-9ec7-423f-97ce-ebb1bf3dcea5.png)'
- en: Give a name and a description for your app and save the changes. It will reveal
    a client ID that you need for implementing Uber functionality in your app. You
    can find the Uber Swift SDK on GitHub at [https://github.com/uber/rides-ios-sdk](https://github.com/uber/rides-ios-sdk),
    but you can also use CocoaPods to include it with your app, which is the recommended
    way of integrating the Uber functionality with your app.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的应用提供一个名称和描述，并保存更改。它将揭示您在应用中实现Uber功能所需的客户端ID。您可以在GitHub上找到Uber Swift SDK [https://github.com/uber/rides-ios-sdk](https://github.com/uber/rides-ios-sdk)，但您也可以使用CocoaPods将其包含到您的应用中，这是推荐的方式将Uber功能集成到您的应用中。
- en: 'If you have not done this before, install CocoaPods first:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前没有这样做，请先安装CocoaPods：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the console app, go to the folder where the Soda Swift project is. To create
    a new `pod` file type the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台应用中，转到Soda Swift项目所在的文件夹。要创建一个新的`pod`文件，请输入以下内容：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open the `pod` file that has been created and modified for you, so it will
    load the UberRides project for us into the workspace:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 打开为您创建和修改的`pod`文件，这样它就会将UberRides项目加载到我们的工作区中：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, install the dependency using this command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令安装依赖项：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Modify the `info.plist` content by right-clicking on the file and choosing
    Open as, Source code. Add these key-value pairs to the dictionary and add your
    Uber client ID, which you can find on the Uber developers site:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过右键单击文件并选择“以源代码方式打开”来修改`info.plist`内容。将以下键值对添加到字典中，并添加您在Uber开发者网站上可以找到的Uber客户端ID：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Modify the `AppDelegate` file in such a way that it will use the sandbox mode
    of Uber for testing. It probably will be somewhat inconvenient to be picked up
    at your location each time you test the app. Import `UberRides` and enable the
    sandbox mode in the `didFinishLaunchWithOptions` function:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以一种方式修改`AppDelegate`文件，使其使用Uber的沙盒模式进行测试。每次测试应用时，在您的位置被接走可能有些不便。在`didFinishLaunchWithOptions`函数中导入`UberRides`并启用沙盒模式：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In QueryViewController, add new imports for `MapKit` and `UberRides`, just
    below the import of UIKit:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在QueryViewController中，在UIKit导入的下方添加对`MapKit`和`UberRides`的新导入：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We need to modify the `didSelectRowAtIndexPath` function a bit. If the user
    clicks on any of the rows, a button will be shown that can be clicked to initiate
    a ride. Both the code and the UI require some beautification, but that is beyond
    the scope of the MVP. For that purpose, the selected item's longitude and latitude
    value will be retrieved, this time to tell Uber where the user wants to go to
    (the drop-off location). We do not specify a pick up location. By default, the
    Uber SDK will use the user's current location. That may not always be sufficiently
    accurate, but for an MVP it is just fine.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要稍微修改一下`didSelectRowAtIndexPath`函数。如果用户点击任何一行，将显示一个按钮，可以点击以启动行程。代码和UI都需要一些美化，但这超出了MVP的范围。为此，将检索选中项的经纬度值，这次是为了告诉Uber用户想去哪里（下车地点）。我们没有指定接车地点。默认情况下，Uber
    SDK将使用用户的当前位置。这可能并不总是足够准确，但对于MVP来说已经足够了。
- en: 'The Uber Rides SDK checks the value of `locationServicesEnabled()` in `CLLocationManager`,
    which must be true to be able to retrieve the user''s current location:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Uber Rides SDK会检查`CLLocationManager`中的`locationServicesEnabled()`的值，它必须是true才能检索用户的当前位置：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the end, the method shown adds an Uber button to the view. This is including
    the knowledge of where the user currently is and where he wants to go. This allows
    the user to click on a button in the app to order a ride and it contains all the
    knowledge Uber needs to know.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，所示的方法在视图中添加了一个Uber按钮。这包括用户当前所在的位置和他想去的位置的知识。这使得用户可以点击应用中的按钮来订购行程，并且它包含了Uber需要知道的所有知识。
- en: Enriching the data
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 丰富数据
- en: Finally, as an optional exercise and if you want to enrich the movie location
    data, you can get some extra movie info and an image of the movie from the OMDb
    API. Since we know the title of the movie, we can perform a query on the API.
    The response, nicely formatted as JSON, teaches us something about the plot, actors
    and it even gives us the URL to an IMDB image. We can show this in the app to
    inform the user what the movie is all about.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，作为一个可选练习，如果您想丰富电影位置数据，您可以从OMDb API获取一些额外的电影信息和电影图片。由于我们知道电影的标题，我们可以在API上执行查询。格式良好的JSON响应告诉我们有关剧情、演员的信息，甚至还提供了IMDb图片的URL。我们可以在应用中显示这些信息，以告知用户电影的内容。
- en: 'To obtain an API key go to [http://www.omdbapi.com](http://www.omdbapi.com)
    and click on the API key link. You can get one for free if you register with your
    email address. You will receive an email with your own API-key and an activation
    link. After activation you can add your API key in the request.: [http://www.omdbapi.com/?t=Basic+instinct&y=&plot=short&r=json&apikey=<api
    key>](http://www.omdbapi.com/?t=Basic+instinct&y=&plot=short&r=json&apikey=%3Capi%20key%3E).'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取API密钥，请访问[http://www.omdbapi.com](http://www.omdbapi.com)并点击API密钥链接。如果您使用电子邮件地址注册，可以免费获得一个。您将收到一封包含您自己的API密钥和激活链接的电子邮件。激活后，您可以在请求中添加您的API密钥。[http://www.omdbapi.com/?t=Basic+instinct&y=&plot=short&r=json&apikey=<api
    key>](http://www.omdbapi.com/?t=Basic+instinct&y=&plot=short&r=json&apikey=%3Capi%20key%3E).
- en: 'The response for this query looks like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询的响应看起来像这样：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: By bundling data from multiple datasets, by displaying them in an alternative
    way (in a list and on a map on a mobile device), and by adding Uber functionality
    making traveling from one spot to another more convenient, we have created a really
    cool mash-up iOS app. To see where this could be going to, including the OMDb
    data integration, you can download and examine the full app code from Packt.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过捆绑来自多个数据集的数据，通过以不同的方式显示它们（在移动设备上的列表和地图上），以及通过添加Uber功能使从一个地点到另一个地点的旅行更加方便，我们创建了一个真正酷炫的iOS混合应用。要查看这可能走向何方，包括OMDb数据集成，您可以下载并检查Packt的完整应用代码。
- en: We had to do some coding to build this MVP. You might wonder if there is no
    way to get things proved without coding. And there is. We are not talking about
    user interviews or the analyzing metrics here. We can also use **If This Then
    That** (**IFTT**) to build an MVP. It allows us to automate simple but often interesting
    tasks.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不进行一些编码来构建这个MVP。你可能想知道是否有不通过编码就能证明事物的方法。确实有。我们这里不讨论用户访谈或分析指标。我们也可以使用**If
    This Then That**（**IFTT**）来构建MVP。它允许我们自动化简单但往往有趣的任务。
- en: Look! No code. Prove your hypotheses with IFTT
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 看！没有代码。用IFTT证明你的假设
- en: Services such as IFTT add a logical component to the possibilities of APIs.
    If something happens for a particular data feed (channel), then something else
    needs to be done. It works well for **Internet of Things** (**IoT**) related concepts
    in particular, but you can connect almost any service that you like. You can check
    it out for yourself at [http://iftt.com/?reqp=1&reqr=](http://iftt.com/?reqp=1&reqr=).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如IFTT之类的服务为API的可能性添加了一个逻辑组件。如果特定数据源（通道）发生某些事情，那么需要执行其他操作。这对于**物联网**（**IoT**）相关概念尤其有效，但您可以连接几乎任何您喜欢的服务。您可以亲自检查[http://iftt.com/?reqp=1&reqr=](http://iftt.com/?reqp=1&reqr=)。
- en: 'Using IFTT requires little to no coding, making it the perfect environment
    to automate small tasks (the so-called recipes). It could also help you to validate
    your hypotheses, before you actually build the thing. Let''s try this. If you
    have not signed up for IFTT yet, then do so before you continue. We want to prove
    our hypotheses, which for the sake of simplicity narrows down to the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IFTT需要很少或不需要编程，使其成为自动化小任务（所谓的食谱）的完美环境。它还可以在您实际构建事物之前帮助您验证您的假设。让我们试试。如果您还没有注册IFTT，请在继续之前注册。我们想证明我们的假设，为了简单起见，这缩小到以下内容：
- en: '![](img/9fec1d0b-e167-4dcd-bfde-8dc01b635607.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fec1d0b-e167-4dcd-bfde-8dc01b635607.png)'
- en: 'Users want to be reminded to put a towel in their bag. That is particularly
    important on #towel day (May 25) but also when they go to the airport, where UFOs
    can easily land. Just wave to the UFOs using your towel, if you want them to pick
    you up.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 用户希望被提醒把毛巾放进包里。这在#towel day（5月25日）尤其重要，但当他们去机场时也同样重要，因为UFO可以轻易降落。如果你想让他们接你，就挥舞你的毛巾。
- en: 'Eh, what did you just read? If you think this is a lame example, or if it does
    not make sense to you, I suggest you read the Hitchhikers Guide to Galaxy first.
    You can also check it out on [http://www.towelday.org](http://www.towelday.org).
    Anyway, let''s examine what IFTT is about and how we can use it to prove this
    hypothesis:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，你刚才读了什么？如果你认为这是一个蹩脚的例子，或者它对你来说没有意义，我建议你先读一读《银河系漫游指南》。你也可以在[http://www.towelday.org](http://www.towelday.org)上查看。无论如何，让我们来探讨IFTT是什么以及我们如何使用它来验证这个假设：
- en: '![](img/8aa9a32e-f06b-4e7c-acf9-a69241dcfd53.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8aa9a32e-f06b-4e7c-acf9-a69241dcfd53.png)'
- en: Recipes, channels, and triggers
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 食谱、通道和触发器
- en: Creating a new recipe is simple. For our MVP, the user location will be the
    trigger. In this example, we will be using the IFTT Android app.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的食谱很简单。对于我们的MVP，用户位置将是触发器。在这个例子中，我们将使用IFTT安卓应用程序。
- en: 'We choose the Android location as the channel and we choose You enter an area
    as the trigger:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择Android位置作为通道，并选择“你进入一个区域”作为触发器：
- en: '![](img/7a776958-c0df-4ff7-8432-440438895d46.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7a776958-c0df-4ff7-8432-440438895d46.png)'
- en: 'Next, you need to define the particular location, which is the nearest airport.
    In my case, it is Rotterdam Airport:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要定义特定的位置，即最近的机场。在我的例子中，是鹿特丹机场：
- en: '![](img/201814f9-4ceb-4895-9080-cfbb253e29c8.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/201814f9-4ceb-4895-9080-cfbb253e29c8.png)'
- en: 'Whenever the user enters this area, we want to be notified. Let''s use Twitter
    as the channel to send a message about the event. We will get a direct message
    from Twitter whenever this event happens:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时用户进入这个区域，我们都希望得到通知。让我们使用Twitter作为通道发送关于这个事件的短信。每当这个事件发生时，我们都会从Twitter收到一条直接消息：
- en: '![](img/1e4eee52-e4d0-4346-b7c1-c1c913c472e4.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1e4eee52-e4d0-4346-b7c1-c1c913c472e4.png)'
- en: And we are done. It technically works for yourself or for others, if you share
    the recipe. It is that easy to set something up that could help to prove your
    hypotheses. If you have completed the validation process, you can always build
    a real app that can perform the same task.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们就完成了。如果你自己或其他人分享这个食谱，技术上它就可以工作。设置这样的事情来帮助验证你的假设真是太简单了。如果你已经完成了验证过程，你总是可以构建一个能够执行相同任务的真实应用程序。
- en: There are many other recipes that you can think of. For example, if you have
    a smart thermostat, you can lower the temperature, since you are at the airport
    anyway. Alternatively, you can have a look at this recipe; for example, "Send
    an email when you land" at `https://ifttt.com/recipes/134835-send-an-email-when-you-land`.
    Without any extra effort, your relatives will know that you are safe.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以想到很多其他的食谱。例如，如果你有一个智能恒温器，你可以降低温度，因为你已经在机场了。或者，你可以看看这个食谱；例如，“当你降落时发送电子邮件”在`https://ifttt.com/recipes/134835-send-an-email-when-you-land`。无需额外努力，你的亲人就会知道你安全了。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how APIs and mash-ups can help us to prove our hypotheses.
    With a minimal amount of effort, we can create an MVP. Before we could use only
    APIs for consuming and combining data, but nowadays we can also use them to outsource
    tasks. You can think of image recognition, 3D printing, delivery or a task performed
    by humans.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了API和混合如何帮助我们验证假设。只需付出最小的努力，我们就可以创建一个MVP。在我们之前，我们只能使用API来消费和组合数据，但现在我们也可以使用它们来外包任务。你可以想象图像识别、3D打印、配送或由人类执行的任务。
- en: We saw what mash-up solutions are and what types of mash-up exist. We created
    an iOS MVP app that demonstrates the idea of combining multiple API's.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了什么是混合解决方案以及存在哪些类型的混合。我们创建了一个iOS MVP应用程序，展示了结合多个API的想法。
- en: Finally, we looked at the services provided by IFTT, which, depending on your
    needs, is probably the fastest way to prove your hypothesis first and then build
    the actual app later. There are plenty of recipes available at IFTT that you could
    use, or you can create your own. We also discussed the benefits from integrating
    the APIs and SDKs from social networks, such as Facebook and Twitter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了IFTT提供的服务，这取决于你的需求，可能是验证假设最快的方法，然后是构建实际应用程序。在IFTT上有大量的食谱可供使用，或者你可以创建自己的食谱。我们还讨论了集成来自社交网络（如Facebook和Twitter）的API和SDK的好处。
- en: In the upcoming chapter, we will have a closer look at the integration of social
    networks and how this affects the on boarding process in particular. You will
    read more about this in the next chapter about the on boarding and registration
    process.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将到来的章节中，我们将更深入地探讨社交网络的整合以及这如何特别影响入职流程。你将在下一章关于入职和注册流程的内容中了解更多相关信息。
