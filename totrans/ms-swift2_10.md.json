["```swift\nvar message: String = \"My String\"\nmessage = nil\n```", "```swift\nvar myString: String?\n```", "```swift\nvar myString1: String?\nvar myString2: Optional<String>\n```", "```swift\nenum Optional<T> {\n  case None\n  case Some(T)\n}\n```", "```swift\nint i;\nMyObject *m;\n```", "```swift\n-(int)myMethodWithValue:(int)i {\n    return i*2;\n}\n```", "```swift\nMyObject *m;\nNSLog(@\"Value: %d\",[m myMethodWithValue:5]);\n```", "```swift\nvar myString: String\nprint(myString)\n```", "```swift\nvar myOptional: String?\n```", "```swift\nvar myString1: String?\nmyString1 = \"test\"\nvar test: String = myString1!\n```", "```swift\nvar myString1: String?\nmyString1 = \"test\"\nif myString1 != nil {\n    var test:String = myString1!\n}\n```", "```swift\nif let constantName = optional {\n   statements\n}\n```", "```swift\nif var variableName = optional {\n   statements\n}\n```", "```swift\nvar myString3: String?\nmyString3 = \"Space\"\nif let tempVar = myString3 {\n    print(tempVar)\n} else {\n    print(\"No value\")\n}\n```", "```swift\nIf let tmp1 = optional1, tmp2 = optional2, tmp3 = optional3 {\n}\n```", "```swift\nif let myOptional = myOptional {\n  print(myOptional)\n} else {\n  print(\"myOptional was nil\")\n}\n```", "```swift\nvar myOptional: String?\nmyOptional = \"test\"\nif var tmp = myOptional {\n    print(\"Inside:  \\(tmp)\")\n}\n// This next line will cause a compile time error\nprint(\"Outside: \\(tmp)\")\n```", "```swift\nfunc getName(index: Int) -> String? {\n    let names = [\"Jon\", \"Kim\", \"Kailey\", \"Kara\"]\n    if index >= names.count || index < 0 {\n        return nil\n    } else {\n        return names[index]\n    }\n}\n```", "```swift\nvar name = getName(2)\nvar name2 = getName(5)\n```", "```swift\nsubscript(index: Int) -> String? {\n   //some statements\n}\n```", "```swift\nfunc optionalParam(myString: String?) {\n  if let temp = myString {\n    print(\"Contains value \\(temp)\")\n  }\n  else {\n    print(\"Does not contain value\")\n  }\n}\n```", "```swift\nvar tuple1: (one: String, two: Int)?\nvar tuple2: (one: String, two: Int?)\n```", "```swift\nclass Collar {\n    var color: String\n    init(color: String) {\n        self.color = color\n    }\n}\n\nclass Pet {\n    var name: String\n    var collar: Collar?\n    init(name: String) {\n        self.name = name\n    }\n}\n\nclass Person {\n    var name: String\n    var pet: Pet?\n    init(name: String) {\n        self.name = name\n    }\n}\n```", "```swift\nvar jon = Person(name: \"Jon\")\nvar buddy = Pet(name: \"Buddy\")\njon.pet = buddy\nvar collar = Collar(color: \"red\")\nbuddy.collar = collar\n```", "```swift\nif let tmpPet = jon.pet, tmpCollar = tmpPet.collar {\n   print(\"The color of the collar is \\(tmpCollar.color)\")\n  }\nelse {\n    print(\"Cannot retrieve color\")\n}\n```", "```swift\nif let color = jon.pet?.collar?.color {\n    print(\"The color of the collar is \\(color)\")\n} else {\n    print(\"Cannot retrieve color\")\n}\n```", "```swift\noptionalA ?? defaultValue\n```", "```swift\nvar defaultName = \"Jon\"\n\nvar optionalA: String?\nvar optionalB: String?\n\noptionalB = \"Buddy\"\n\nvar nameA = optionalA ?? defaultName\nvar nameB = optionalB ?? defaultName\n```"]