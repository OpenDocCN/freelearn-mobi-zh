["```kt\nmkdir ARCore\ncd ARCore\ngit clone https://github.com/google-ar/arcore-unity-sdk.git ARCoreDesign\n```", "```kt\nnamespace Packt.ARCoreDesign\n{\n...  //code omitted\npublic class SceneController : MonoBehaviour  //rename me\n***...*** //code omitted\n}  // don't forget the closing brace at the end\n```", "```kt\n using System.Collections.Generic;\n using GoogleARCore;\n using UnityEngine;\n using UnityEngine.Rendering; \n using GoogleARCore.HelloAR;\n\n#if UNITY_EDITOR\n    using Input = GoogleARCore.InstantPreviewInput; \n#endif\n```", "```kt\nprivate List<GameObject> m_sceneObjects = new List<GameObject>();\nprivate List<GameObject> m_scenePlanes = new List<GameObject>();\nprivate bool m_planeOnState;\npublic void ClearScene()\n{\n  foreach(var obj in m_sceneObjects)\n  {\n    Destroy(obj);\n  }\n  m_sceneObjects.Clear();\n}\npublic void Planes()\n{\n  m_planeOnState = !m_planeOnState;\n  //turn plane visibility on or off\n  foreach(var plane in m_scenePlanes)\n  {\n    plane.SetActive(m_planeOnState);\n  }\n}\n```", "```kt\nvar andyObject = Instantiate... //after me\nm_sceneObjects.Add(andyObject);\n```", "```kt\nGameObject planeObject = Instantiate... //after mem_scenePlanes.Add(planeObject);\n```", "```kt\nShader \"ARCoreDesgin/ARMobileSpecularOutline\"\n```", "```kt\nProperties\n{\n  _Albedo (\"Albedo\", Color) = (1, 1, 1, 1)\n  ***_***Shininess (\"Shininess\", Range (0.03, 1)) = 0.078125\n _MainTex (\"Base (RGB) Gloss (A)\", 2D) = \"white\" {}\n [NoScaleOffset] _BumpMap (\"Normalmap\", 2D) = \"bump\" {}\n  _Outline (\"_Outline\", Range(0,0.1)) = 0\n  _OutlineColor (\"Color\", Color) = (1, 1, 1, 1)\n}\n```", "```kt\nTags { \"RenderType\"=\"Opaque\" }\nLOD 250 //after me\nPass {\n  Tags { \"RenderType\"=\"Opaque\" }\n  Cull Front\n\n  CGPROGRAM\n\n  #pragma vertex vert\n  #pragma fragment frag\n  #include \"UnityCG.cginc\"\n\n  struct v2f {\n    float4 pos : SV_POSITION;\n  };\n  float _Outline;\n  float4 _OutlineColor;\n\n  float4 vert(appdata_base v) : SV_POSITION {\n    v2f o;\n    o.pos = UnityObjectToClipPos(v.vertex);\n    float3 normal = mul((float3x3) UNITY_MATRIX_MV, v.normal);\n    normal.x *= UNITY_MATRIX_P[0][0];\n    normal.y *= UNITY_MATRIX_P[1][1];\n    o.pos.xy += normal.xy * _Outline;\n      return o.pos;\n    }\n\n    half4 frag(v2f i) : COLOR {\n      return _OutlineColor;\n    }\n\n    ENDCG\n  }\n```", "```kt\nfixed _GlobalLightEstimation;  //after me\nfloat4 _Albedo;\n```", "```kt\nfrom o.Albedo = tex.rgb;\n\nto o.Albedo = tex.rgb * _Albedo;\n```", "```kt\nnamespace Packt.ARCoreDesign\n{\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n\n    public class ObjectOutliner : MonoBehaviour\n    {\n        public int MaterialSlot;\n        public Material DefaultMaterial;\n        public Material OutlineMaterial;\n        public bool outlineOn; \n        public void Outline()\n        {\n            outlineOn = !outlineOn;\n            var renderer = GetComponent<MeshRenderer>();\n            Material[] mats = renderer.materials;\n            if (outlineOn)\n            {\n                mats[MaterialSlot] = OutlineMaterial;\n            }\n            else\n            {\n                mats[MaterialSlot] = DefaultMaterial;\n            }\n            renderer.materials = mats;\n        }\n    }\n}\n```", "```kt\nRaycastHit rayHit;\nif (Physics.Raycast(FirstPersonCamera.ScreenPointToRay(touch.position), out rayHit, 2))\n  {\n    var outliner = rayHit.collider.gameObject.GetComponent<ObjectOutliner>();\n    if (outliner != null)\n    {                    \n      outliner.Outline();\n    }\n  }\n  else\n  {\n    // Raycast against the location the player touched to search for planes. \n TrackableHit hit;\n TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon |\n TrackableHitFlags.FeaturePointWithSurfaceNormal;\n\n if (Frame.Raycast(touch.position.x, touch.position.y, raycastFilter, out hit))\n {\n var andyObject = Instantiate(AndyAndroidPrefab, hit.Pose.position, hit.Pose.rotation);\n m_sceneObjects.Add(andyObject);\n // Create an anchor to allow ARCore to track the hitpoint as understanding of the physical\n // world evolves.\n var anchor = hit.Trackable.CreateAnchor(hit.Pose);\n\n // Andy should look at the camera but still be flush with the plane.\n if ((hit.Flags & TrackableHitFlags.PlaneWithinPolygon) != TrackableHitFlags.None)\n {\n // Get the camera position and match the y-component with the hit position.\n Vector3 cameraPositionSameY = FirstPersonCamera.transform.position;\n cameraPositionSameY.y = hit.Pose.position.y;\n\n // Have Andy look toward the camera respecting his \"up\" perspective, which may be from ceiling.\n andyObject.transform.LookAt(cameraPositionSameY, andyObject.transform.up);\n }\n\n // Make Andy model a child of the anchor.\n andyObject.transform.parent = anchor.transform;\n }/end of Frame.Raycast\n  }\n```", "```kt\npublic GameObject m_andyAndroidPrefab; //after me\npublic float MoveSpeed = .1f;\n```", "```kt\nif (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\n{\n return;\n} //replace me with\n\nif (Input.touchCount < 1) return;\ntouch = Input.GetTouch(0);\nif (touch.phase == TouchPhase.Began) //handle a single touch\n{   //starting single touch\n```", "```kt\n    // Make Andy model a child of the anchor.\n    andyObject.transform.parent = anchor.transform;\n }\n} //after me\n}  //be sure to add the brace\nelse if (touch.phase == TouchPhase.Moved)\n{\n  var change = FirstPersonCamera.transform.forward * touch.deltaPosition.y;\n  change += FirstPersonCamera.transform.right * touch.deltaPosition.x;\n  change *= Time.deltaTime * MoveSpeed;\n\n  foreach (var obj in m_sceneObjects)\n  {\n    var outliner = obj.GetComponentInChildren<ObjectOutliner>();\n    if (outliner != null && outliner.outlineOn)\n    {\n      obj.transform.position += change;\n    }\n  }\n}\n```", "```kt\nif (outliner != null && outliner.outlineOn == false)\n{\n  outliner.Outline();\n}\n```", "```kt\nelse\n{  //after me\n  //touched outside, reset all outlined objects\n  foreach (var obj in m_sceneObjects)\n  {\n    var outliner = obj.GetComponentInChildren<ObjectOutliner>();\n    if (outliner != null && outliner.outlineOn)\n    {\n      outliner.Outline();\n    }\n  }\n\nTrackableHit hit;  //before me\n```", "```kt\nShader \"ARCoreDesign/UnlitShadowReceiver\" \n{\n Properties\n { \n  _Color(\"Main Color\", Color) = (1,1,1,1) \n  _MainTex(\"Base (RGB)\", 2D) = \"white\" {} \n  _Cutoff(\"Cutout\", Range(0,1)) = 0.5 \n }\n SubShader\n { \n  Pass\n  { \n   Alphatest Greater[_Cutoff] SetTexture[_MainTex] \n  } \n\n  Pass\n  { \n   Blend DstColor Zero Tags{ \"LightMode\" = \"ForwardBase\" }\n\n   CGPROGRAM\n   #pragma vertex vert\n   #pragma fragment frag\n   #include \"UnityCG.cginc\"\n   #pragma multi_compile_fwdbase\n   #include \"AutoLight.cginc\"\n\n   struct v2f \n   {\n    float4 pos : SV_POSITION; LIGHTING_COORDS(0,1)\n   };\n   v2f vert(appdata_base v) \n   {\n    v2f o; \n    o.pos = UnityObjectToClipPos(v.vertex);\n    TRANSFER_VERTEX_TO_FRAGMENT(o);\n    return o; \n   }\n   fixed4 frag(v2f i) : COLOR \n   {\n    float attenuation = LIGHT_ATTENUATION(i);\n    return attenuation;\n   } \n  ENDCG\n  }\n }\n Fallback \"Transparent/Cutout/VertexLit\" \n}\n```"]