- en: Chapter 9. Integrating your Apps with External Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to APIs that use basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching data from the Google Places API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to FourSquare using OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting a check-in to FourSquare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching and retrieving data via Yahoo! YQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating push notifications with UrbanAirship.com
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing push notifications using PHP and HTTP POST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many mobile applications are self-contained programs (such as a Calculator app)
    and have no need to interact with other services or systems. However, will find
    that as you build more and more, it will start to become necessary to integrate
    with external vendors and systems in order to keep your users happy. The recent
    trend towards integrating Facebook "like" buttons and the ability to Tweet from
    within an app are excellent examples of this.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to be concentrating on talking to a variety of
    different service providers in a number of common ways, including basic authorization,
    open authorization, and using a service provider (such as Urban Airship), coupled
    with some PHP code, to make push notifications work on your iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to APIs that use basic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basic authentication is a method for gaining access to a system by way of Base64
    encoding using the username and password credentials before sending them over
    HTTP. For example, given the username 'Aladdin' and password 'open sesame', the
    string 'Aladdin:open sesame' is Base64 encoded, resulting in 'QWxhZGRpbjpvcGVuIHNlc2FtZQ=='.
    This Base64 string is then decoded by the receiving server, resulting in the original
    username-password string separated by a colon. While this is not the most secure
    of authentication schemes, it is unreadable to the human eye, and for small APIs
    or private systems it is very easily implemented. All web browsers from the HTTP/1.1
    support basic authentication, so it can be widely implemented across both the
    Web and mobile devices without being concerned about browser support.
  prefs: []
  type: TYPE_NORMAL
- en: Many external services use basic authentication and session keys in order for
    you to access and interact with their APIs. In this example, I will show you how
    to access the Blurtit API using the basic authentication mechanism. The basic
    principles of this recipe should work for any other standard API that uses basic
    authentication as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blurtit is a free online question and answer system, much like Yahoo! Answers,
    or many of the other Q&A style message boards that are on the Web. You will need
    to set up an account with Blurtit.com and register for their API, which is at
    [http://api.blurtit.com](http://api.blurtit.com). After registering, you will
    be given a user ID, API key, login name, and password. You'll need these four
    items in order to connect to the API and retrieve data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 9/Recipe
    1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Titanium Studio, and open up the `app.js` file, removing
    all of the existing code. First, we''ll create some variables which will contain
    your API key, user ID, username, password, and the URL to the API. Make sure you
    replace the `loginName` and `loginPassword` variable values in the following code
    with the login information given to you when you signed up for the API in the
    *Getting ready* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to do the basic authentication, we need to create a request header. This
    information gets sent after your **xhr** `httpClient` object is declared, but
    before you execute the `send` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create your parameter array based on the Blurtit API. In this case, we''re
    passing in our `login_name` and `password` variables to perform a `signin` request.
    Attach the `params` array to your `xhr.send()` method like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `xhr.onload()` method, read in the `responseText` and assign
    it to a JSON object. We can then read in the returned data (in this case, a session
    ID) and we''ll assign it to a label for display purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have authorized and stored our session variable, we can call the
    functions available to us on the Blurtit API. The following is a sample which
    asks the API a simple question and then logs the JSON response to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic authentication system works on the principle of authenticating and
    receiving a session token which can then be used in every following API call as
    a means of indentifying yourself to the server. This session variable is passed
    in as a parameter for every call to the system you will make. This can be seen
    in our previous code where we are calling the search questions method (`questions/search.json?query=xxx`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It should be noted that security is not the purpose of encoding the username
    and password variables into a Base64 string. Rather, it is done to ensure that
    possible non-HTTP compatible characters are encoded into values that are HTTP
    compatible. The basic authentication method is still widely in use on the Internet.
    However, it is being replaced with OAuth in many cases today. We will look at
    integrating with OAuth in one of the next recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching data from the Google Places API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Places API is a new part of Google Maps and returns information about
    places (for example, banks, cash machines, services, airports, and more). It marks
    an attempt by Google to connect users directly to shops or items of interest near
    their location, and is heavily geared towards mobile usage. In this recipe, we
    will create a new module which will contain all of the code required to connect
    to, and return data from, the Google Places API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will require an API key from Google in order to perform requests against
    the Places API. You can obtain a key from Google''s developer website here: [https://code.google.com/apis/console](http://https://code.google.com/apis/console).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this recipe can be found in the `/Chapter 9/Recipe
    2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Titanium Studio, which you can give any name you want.
    Then, create a new file called `placesapi.js` file, and save it to your project''s
    `Resources` directory. Type the following code into this new JavaScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now open your `app.js` file (or wherever you intend to call the Places module
    from), removing all of the existing code. Type in the following sample code in
    order to get data back using our API wrapper. Note that you can return XML data
    from this API in this example only using JSON, which should really be your de-facto
    standard for any mobile development. You will also need to replace the XXXXXXXXXXXXXXXXXXX
    API key with your own valid API key from Google.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the sample application in the emulator and you should be able to get a
    JSON formatted list returned, and the first item in that list logged to the console.
    Try extending this sample to integrate with Google Maps using real-time location
    data! You can also get more detailed place information by calling the `getPlaceDetails()`
    method of the API, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Places API is probably the simplest kind of service integration available.
    With it, there is no authentication method except requiring an API key and all
    of the parameters are passed via the query string using a HTTP GET.
  prefs: []
  type: TYPE_NORMAL
- en: The request header is one important feature of this method. Note that we need
    to set the content type to `application/json` before performing our `send()` call
    on the xhr object. Without setting the content type you run the risk of the data
    being returned to you in HTML or some other format that won't be 100 percent JSON
    compatible. Therefore, it would probably not load into a JSON object.
  prefs: []
  type: TYPE_NORMAL
- en: When the Places service returns JSON results from a search, it places them within
    a results array. Even if the service returns no results, it still returns an empty
    results array. Each element of the response contains a single place result from
    the area you specified by the latitude and longitude inputs, ordered by prominence.
    Many things, including the number of check-ins, can affect the prominence of results
    and therefore its popularity. The Google documentation provides the following
    information on the data returned for each place result (see [http://code.google.com/apis/maps/documentation/places/):](http://code.google.com/apis/maps/documentation/places/))
  prefs: []
  type: TYPE_NORMAL
- en: '**name** contains the human-readable name for the returned result. For **establishment**
    results, this is usually the business name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vicinity** contains a feature name of a nearby location. This feature often
    refers to a street or neighborhood within the given results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**types[]** contains an array of feature types describing the given result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**geometry** contains geometry information about the result, generally including
    the **location** (geocode) of the Place and (optionally) the **viewport** identifying
    its general area of coverage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**icon** contains the URL of a recommended icon, which may be displayed to
    the user when indicating this result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reference** contains a unique token that you can use to retrieve additional
    information about this place. You can store this token and use it at any time
    in the future to refresh cached data about this Place, but the same token is not
    guaranteed to be returned for any given Place across different searches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**id** contains a unique stable identifier denoting this place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many other features within the Places API, including the ability to
    "check-in" to a place and more. Additionally, you should also note that when including
    this recipe into a live application, part of Google's terms is that you must show
    the "powered by Google" logo in your application, unless the results you're displaying
    are already on a Google branded map.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to FourSquare using OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Authorization (known normally by its shortened name, OAuth) is an open
    standard developed for authorization, which allows a user to share private data
    stored on one site or device (e.g. your mobile phone) with another site. Instead
    of using credentials such as a username and password, OAuth relies on tokens instead.
    Each token has encoded within in it a series of details for a specific site (e.g.
    FourSquare or Twitter), using specific resources or permissions (for example,
    photos or your personal information) for a specific duration of time (for example,
    two hours).
  prefs: []
  type: TYPE_NORMAL
- en: FourSquare is a popular location-based social networking site specifically made
    for GPS-enabled mobile devices. It allows you to check-in to various locations,
    and in doing so, earn points and rewards in the form of "badges". In this recipe,
    we will use OAuth to connect to FourSquare and retrieve an access token that we
    can use later on to enable our application to "check-in" to various locations
    within the FourSquare community.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need a Client ID key from FourSquare in order to perform requests
    against the FourSquare API. You can obtain a key from the developer website for
    free here: [http://developer.foursquare.com](http://developer.foursquare.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 9/Recipe
    3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in Titanium Studio, which you can give any name you want.
    Then, create a new file called `fsq_module.js` and save it to your projects `Resources`
    directory. This file will contain all of the needed source code to create a module
    that we can include anywhere in our Titanium app. Open your new `fsq_module.js`
    file in your editor and type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, back in your `app.js` file, type in the following code to include the
    new FourSquare module and execute the sign-in function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Try running your application in either the Android or iPhone emulator. You
    should get a login screen appear on startup that looks similar to the one in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The module we have built in this recipe follows a pattern and style that is
    very similar to others found on the Web, including modules that have been built
    for Titanium against Facebook, Twitter, and others. It consists of creating a
    modal view that "pops" up over top of the existing window, and contains a webview
    to the mobile version of the FourSquare login page. Once the user has logged into
    the system, we can then grab the access token from the response in the `authorizeCallBack()`
    method, and save the resulting token to our module's `ACCESS_TOKEN` property.
  prefs: []
  type: TYPE_NORMAL
- en: Posting a check-in to FourSquare
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created the basic module in order to authenticate against FourSquare,
    we are going to extend it in order to let the user "check-in" to a particular
    location. This works by sending details of your current place (for example, a
    bar, cinema, park, or museum) along with its latitude and longitude values to
    the FourSquare servers. From there, you can then tell which of your friends are
    nearby, or alternatively, make your location and activities public for everyone
    to see.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this recipe can be found in the `/Chapter 9/Recipe
    4` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your `fsq_module.js` file and extend the existing module so that it has
    the extra method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now back in your `app.js` file, we are going to extend the "login" call we
    wrote in the previous recipe to now post a FourSquare check-in after a successful
    authorization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now try running your app in the emulator. After logging into the FourSquare
    system, you should automatically have posted a test check-in titled "This is my
    check-in message!" and the FourSquare system should send you a successful response
    message and log it to the console.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `callMethod()` function of our FourSquare module does all of the work here.
    It is essentially taking in the method name to call, along with whether it is
    a GET or POST call and the parameters required to make that method work. Our example
    code is calling the `checkins/add` method, which is a POST, and passing it through
    the parameters of `shout, broadcast`, and `ll`. These are our message, privacy
    setting, and current location respectively. All of the authorization work, including
    saving our access token, is done via the previous recipe. The following console
    output shows our response from FourSquare after a successful checkin post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Searching and retrieving data via Yahoo! YQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: YQL is an SQL-like language that allows you to query, filter, and combine data
    from multiple sources across both the Yahoo! Network and other open data sources.
    Normally, developer access to data from multiple resources is disparate and requires
    calls to multiple APIs from different providers, often with varying feed formats.
    YQL eliminates this problem by providing a single endpoint to query and shape
    the data you request. You may remember that we briefly touched on the usage of
    YQL via standard HTTP Request calls in [Chapter 2](ch02.html "Chapter 2. Working
    with Local and Remote Data Sources"), however, in this chapter, we will be utilizing
    the built-in Titanium YQL methods.
  prefs: []
  type: TYPE_NORMAL
- en: Titanium has built-in support for YQL, and in this recipe we will create a simple
    application that searches for stock data on the YQL network, and then displays
    that data in a simple label.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that when using YQL in an un-authenticated manner (such as we are doing
    here), there is a usage limit imposed of 100,000 calls per day. For most applications,
    this is a more than generous limit. However, if you do wish to have it increased,
    you will need to authenticate your calls via OAuth. You can do this by signing
    up with Yahoo! and registering your application.
  prefs: []
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 9/Recipe
    5` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project, and then open the `app.js` file, removing any existing
    content. Now type in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now be able to run the app in your emulator and search for a stock
    symbol (such as ''AAPL'' for Apple Inc.), and have some of the results listed
    out to a label on the screen, as seen next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is actually going on here within the `searchYQL()` function? First, we're
    doing a very basic validation on the text field to ensure the user has entered
    in a stock symbol before pressing search. If a stock symbol is found, we use the
    `blur()` method of the text field to ensure the keyboard becomes hidden. The meat
    of the code revolves around creating a Yahoo! YQL query using the correct syntax
    and providing the text field value as the symbol parameter. This YQL query is
    simply a string, joined together using the + symbol, much like you would do with
    any other string manipulation in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: We then execute our query using the `Titanium.Yahoo.yql()` method, which returns
    the results within the 'e' object of the inline response function. We can then
    manipulate and use this JSON data in any way we wish. In this case, we're assigning
    a subsection of it to a label on the screen so the user can view the daily opening
    and closing figures of the stock in question.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating push notifications with UrbanAirship.com
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Push notifications is a constantly-open IP connection used to forward notifications
    from the servers of third party applications to your iOS device. They are used
    as an alternative to "always running" applications, and allow your device to receive
    notifications from a specific app even when it is not running. If you have ever
    received an SMS on your iPhone, then you'll aready know what push notifications
    looks like. They are essentially a message box that consists of a title, a message,
    and both a "Close" button and an "Action" button. The "Action" button can be defined
    by your code, in both appearance and the underlying action and data that you want
    to be passed to your application when that button is pushed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to register for an account with Urban Airship at [https://go.urbanairship.com/accounts/register/](http://https://go.urbanairship.com/accounts/register/).
    Once you have registered and verified your account via the email link sent to
    you from Urban Airship, you will need to add a new app to your account at [https://go.urbanairship.com/apps/](http://https://go.urbanairship.com/apps/).
    If you haven't already done so, create and download a new Apple Push Certificate
    from your Apple Developer account. You can do this by creating a new App ID under
    "Provisioning" in your iOS Developer account, and then in the list of apps find
    the one you just created, and click on the "configure" link.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new page should then show up and allow you to select the push notifications
    option, such as the one in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3968_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will need to create an application-specific client SSL certificate, which
    can be done through keychain. Click on the **Configure** button next to the **Development
    SSL Certificate** option, and work through the step-by-step wizard. When it is
    finished, you should be able to download a new Apple Push Notification certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Save this certificate to your computer's hard drive and then double-click the
    saved file to open it in Keychain Access. In Keychain Access, click on **My Certificates**,
    and then find the new Apple Push Notification certificate you just created, right-click
    on it, and select **Export**. You will need to give your new P12 certificate a
    name. After clicking **Save** you'll also be asked to provide a password, as seen
    in the following screenshot. This can be anything you like, such as **packt**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3968_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now go back to the Urban Airship page where you are creating your new application
    and upload the new P12 certificate, providing the password in the box as requested.
    Save your application and you are now ready to send push notifications!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 9/Recipe
    6` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new development provisioning profile for your application in the provisioning
    section of the Developer website, and download it to your computer. Next, create
    a new Titanium project and ensure the app identifier you use matches the identifier
    you just used to create the provisioning certificate in the Developer Portal.
    Urban Airship has already created a basic registration sample for you, so we are
    also going to use that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the `app.js` file, removing any existing content. Type in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, in order to test this code, you must run the application on a device. The
    emulator simply does not have the push capability and so will not work for this
    recipe. Go to the **Run on Device** tab in Titanium Studio and provide the screen
    with the debug provision profile you created in the first steps of this recipe.
    Next, click on the **Install Now** button to compile and push the application
    package to your device using iTunes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your application has launched on the device and it is running, go to your
    web browser and, in your Urban Airship''s app page, click on **Push** and then
    **Device Tokens**. Your new token should be listed on this page. If it is not,
    double check all of your steps again and ensure you are using the correct mobile
    provisioning profiles to build your app. You can now click on **Send Broadcast**
    in order to send a sample push notification to your device directly from the Urban
    Airship website. Try this now, and you should receive a message on your iPhone
    that looks very similar to the one shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a number of key factors in ensuring you are successful in getting
    Push Notifications to work with your Titanium application. Keep these points in
    mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that each application you create needs its own Push Certificate, you
    cannot use wildcard certificates when integrating Push.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always create the Push Certificate under your Application settings in the developer
    console first, and then create your provisioning profiles. Doing it the other
    way around will mean your profile will be invalid and your app will not accept
    any push notification requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push notifications can only be tested on actual iPhone or iPod Touch devices,
    they will not work under the emulator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Titanium.Network.registerForPushNotifications` method requires the types
    of notifications you wish to use as the first parameter. If you do not request
    a specific permission from the user upfront, you may not be able to send them
    that kind of notification in the future. Furthermore, users must always agree
    to allow you to send push notifications to their device. You will not be able
    to do so if they do not allow the process to occur.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to create separate profiles and certificates for push notifications
    in both the Apple iOS Developer console and Urban Airship. You cannot use a development
    profile in production and vice versa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing push notifications using PHP and HTTP POST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for our server application to programmatically push notifications to
    a user or group of users, we will need to create a script that can push the notifications
    to the Urban Airship servers. This can be done in a variety of methods (via desktop
    app, .NET application, web application and so on), but for the purposes of this
    recipe we will use PHP, which is simple, fast, and freely available.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 9/Recipe
    7` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we need to create the PHP script which will communicate with the Urban
    Airship servers to send a push notification. Create the following PHP script,
    save it as `airship.php`, and upload it to a server capable of running PHP and
    with CURL installed. There are plenty of free PHP/Apache hosting accounts available
    online if you don't already have one capable of doing this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following sample is taken from the Urban Airship website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: All that is left to do now is run the PHP script in a browser, and when you
    do, you should see a success message echoed out to the browser page, and you should
    also be able to see a new push notification delivered to your device that was
    set up in the previous recipe, as seen in the following screenshot:.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PHP script in this recipe is doing much the same job as the actual Urban
    Airship website does when you can perform tests via their console. Here, we are
    using PHP to build a CURL request in JSON and post it to the Urban Airship server.
    That request is in turn received and then pushed out to your device or devices
    as a Push Notification by the Urban Airship system.
  prefs: []
  type: TYPE_NORMAL
- en: In a production environment, you would want to extend your PHP script to either
    receive the badge and message variables as POST variables, or perhaps hook up
    the script directly to a database with whatever business logic your app requires.
    You should also note that Urban Airship provides samples for languages other than
    PHP. So if your system is built in .NET or another platform, the same principles
    of sending out broadcasts still apply.
  prefs: []
  type: TYPE_NORMAL
