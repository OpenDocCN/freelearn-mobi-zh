["```swift\n<androidx.recyclerview.widget.RecyclerView\n    android:id=\"@+id/recycler_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    tools:listitem=\"@layout/item_sample\" />\n```", "```swift\n    <TextView\n        android:id=\"@+id/hello_label\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n    ```", "```swift\n    <androidx.recyclerview.widget.RecyclerView\n      android:id=\"@+id/recycler_view\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      app:layout_constraintTop_toBottomOf=\"@+id/hello_label\" />\n    ```", "```swift\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n  ...>\n  <TextView\n    android:id=\"@+id/hello_label\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Hello World!\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n  <androidx.recyclerview.widget.RecyclerView\n    android:id=\"@+id/recycler_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintTop_toBottomOf=\"@+id/hello_label\" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```", "```swift\ndata class EmployeeUiModel(\n    val name: String,\n    val biography: String,\n    val role: EmployeeRole,\n    val gender: Gender,\n    val imageUrl: String\n)\n```", "```swift\nenum class EmployeeRole {\n    HumanResources,\n    Management,\n    Technology\n}\nenum class Gender {\n    Female,\n    Male,\n    Unknown\n}\n```", "```swift\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout ...>\n    <ImageView\n        android:id=\"@+id/item_employee_photo\"\n        android:layout_width=\"60dp\"\n        android:layout_height=\"60dp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        tools:background=\"@color/colorPrimary\" />\n```", "```swift\n  <TextView\n    android:id=\"@+id/item_employee_name\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_marginStart=\"16dp\"\n    android:layout_marginLeft=\"16dp\"\n    android:textStyle=\"bold\"\n    app:layout_constraintStart_toEndOf=\"@+id/item_employee_photo\"\n    app:layout_constraintTop_toTopOf=\"parent\"\n    tools:text=\"Oliver\" />\n  <TextView\n    android:id=\"@+id/item_employee_role\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:textColor=\"@color/colorAccent\"\n    app:layout_constraintStart_toStartOf=\"@+id/item_employee_name\"\n    app:layout_constraintTop_toBottomOf=\"@+id/\n        item_employee_name\"\n    tools:text=\"Exotic Shorthair\" />\n  <TextView\n    android:id=\"@+id/item_employee_biography\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintStart_toStartOf=\"@+id/item_employee_role\"\n    app:layout_constraintTop_toBottomOf=\"@+id/item_employee_role\"\n    tools:text=\"Stealthy and witty. Better avoid in dark alleys.\" />\n  <TextView\n    android:id=\"@+id/item_employee_gender\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:textSize=\"30sp\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\"\n    tools:text=\"&#9794;\" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```", "```swift\nprivate const val FEMALE_SYMBOL = \"\\u2640\"\nprivate const val MALE_SYMBOL = \"\\u2642\"\nprivate const val UNKNOWN_SYMBOL = \"?\"\nclass EmployeeViewHolder(\n  containerView: View,\n  private val imageLoader: ImageLoader\n) : ViewHolder(containerView) {\nprivate val employeeNameView: TextViewby lazy {\n    containerView.findViewById(R.id.item_employee_name) }\nprivate val employeeRoleView: TextViewby lazy {\n    containerView.findViewById(R.id.item_employee_role) }\nprivate val employeeBioView: TextViewby lazy {\n    containerView.findViewById(R.id.item_employee_bio) }\nprivate val employeeGenderView: TextViewby lazy {\n    containerView.findViewById(R.id.item_employee_gender) }\n  fun bindData(employeeData: EmployeeUiModel) {\n    imageLoader.loadImage(employeeData.imageUrl,\n      employeePhotoView)\n    employeeNameView.text = employeeData.name\n    employeeRoleView.text = when (employeeData.role) {\n      EmployeeRole.HumanResources -> \"Human Resources\"\n      EmployeeRole.Management -> \"Management\"\n      EmployeeRole.Technology -> \"Technology\"\n    }\n    employeeBioView.text = employeeData.biography\n    employeeGenderView.text = when (employeeData.gender) {\n      Gender.Female -> FEMALE_SYMBOL\n      Gender.Male -> MALE_SYMBOL\n      else -> UNKNOWN_SYMBOL\n    }\n  }\n}\n```", "```swift\nclass EmployeesAdapter(\n  private val layoutInflater: LayoutInflater,\n  private val imageLoader: ImageLoader\n) : RecyclerView.Adapter<EmployeeViewHolder>() {\n  private val employees = mutableListOf<EmployeeUiModel>()\n  fun setData(newEmployees: List<EmployeeUiModel>) {\n    employees.clear()\n    employees.addAll(newEmployees)\n    notifyDataSetChanged()\n  }\n  override fun onCreateViewHolder(parent: ViewGroup,\n    viewType: Int): EmployeeViewHolder {\n    val view = layoutInflater.inflate(\n      R.layout.item_employee, parent, false)\n    return EmployeeViewHolder(view, imageLoader)\n  }\n  override fun getItemCount() = employees.size\n  override fun onBindViewHolder(\n    holder: EmployeeViewHolder, position: Int) {\n    holder.bindData(employees [position])\n  }\n}\n```", "```swift\nclass MainActivity : AppCompatActivity() {  \n    private val employeesAdapter  \n        by lazy { EmployeesAdapter(layoutInflater, \n        GlideImageLoader(this)) }  \n    private val recyclerView: RecyclerView \n        by lazy { findViewById(R.id.main_recycler_view) }  \n    override fun onCreate(savedInstanceState: Bundle?) {  \n        super.onCreate(savedInstanceState)  \n        setContentView(R.layout.activity_main)  \n        recyclerView.adapter = employeesAdapter  \n        recyclerView.layoutManager = LinearLayoutManager(  \n            this, LinearLayoutManager.VERTICAL, false)  \n        employeesAdapter.setData(  \n            listOf(  \n                EmployeeUiModel(  \n                    \"Robert\",  \n                    \"Rose quickly through the organization\",  \n                    EmployeeRole.Management,  \n                    Gender.Male,  \n                    \"https://images.pexels.com/photos/220453/\n                    pexels-photo-220453.jpeg?  \n                    auto=compress&cs=tinysrgb&h=650&w=940\"  \n                 ),  \n                 EmployeeUiModel(  \n                    \"Wilma\",  \n                    \"A talented developer\",  \n                    EmployeeRole.Technology,  \n                    Gender.Female,  \n                    \"https://images.pexels.com/photos/3189024/\n                    pexels-photo-3189024.jpeg?  \n                    auto=compress&cs=tinysrgb&h=650&w=940\"  \n                 ),  \n                 EmployeeUiModel( \n                    \"Curious George\",  \n                    \"Excellent at retention\",  \n                    EmployeeRole.HumanResources,  \n                    Gender.Unknown,  \n                    \"https://images.pexels.com/photos/771742/\n                    pexels-photo-771742.jpeg? \n                    auto=compress&cs=tinysrgb&h=750&w=1260\"  \n                 )  \n             )  \n        )  \n    }  \n} \n```", "```swift\n    data class CatUiModel(\n        val gender: Gender,\n        val breed: CatBreed,\n        val name: String,\n        val biography: String,\n        val imageUrl: String\n    )\n    ```", "```swift\n    enum class CatBreed {\n        AmericanCurl, BalineseJavanese, ExoticShorthair\n    }\n    ```", "```swift\n    enum class Gender {\n        Female, Male, Unknown\n    }\n    ```", "```swift\n    <ImageView\n        android:id=\"@+id/item_cat_photo\"\n        android:layout_width=\"60dp\"\n        android:layout_height=\"60dp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        tools:background=\"@color/colorPrimary\" />\n    <TextView\n        android:id=\"@+id/item_cat_name\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"16dp\"\n        android:layout_marginLeft=\"16dp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintStart_toEndOf=\"@+id/\n            item_cat_photo\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        tools:text=\"Oliver\" />\n```", "```swift\n    interface ImageLoader {\n      fun loadImage(imageUrl: String, imageView: ImageView)\n    }\n    ```", "```swift\n    private val FEMALE_SYMBOL = \"\\u2640\"\n    private val MALE_SYMBOL = \"\\u2642\"\n    private const val UNKNOWN_SYMBOL = \"?\"\n    class CatViewHolder(\n      containerView: View,\n      private val imageLoader: ImageLoader\n    ) : ViewHolder(containerView) {\n      private val catBiographyView: TextView by lazy {\n        containerView\n          .findViewById(R.id.item_cat_biography) }\n      private val catBreedView: TextView by lazy {\n        containerView.findViewById(R.id.item_cat_breed) }\n      private val catGenderView: TextView by lazy {\n        containerView.findViewById(R.id.item_cat_gender) }\n      private val catNameView: TextView by lazy {\n        containerView.findViewById(R.id.item_cat_name) }\n      private val catPhotoView: ImageView by lazy {\n        containerView.findViewById(R.id.item_cat_photo) }\n      fun bindData(cat: CatUiModel) {\n        imageLoader.loadImage(cat.imageUrl, catPhotoView)\n        catNameView.text = cat.name\n        catBreedView.text = when (cat.breed) {\n          AmericanCurl -> \"American Curl\"\n          BalineseJavanese -> \"Balinese-Javanese\"\n          ExoticShorthair -> \"Exotic Shorthair\"\n        }\n        catBiographyView.text = cat.biography\n        catGenderView.text = when (cat.gender) {\n          Female -> FEMALE_SYMBOL\n          Male -> MALE_SYMBOL\n          else -> UNKNOWN_SYMBOL\n        }\n      }\n    }\n    ```", "```swift\n    package com.example.myrecyclerviewapp\n    import { ... }\n    class CatsAdapter(\n        private val layoutInflater: LayoutInflater,\n        private val imageLoader: ImageLoader\n    ) : RecyclerView.Adapter<CatViewHolder>() {\n        private val cats = mutableListOf<CatUiModel>()\n        fun setData(newCats: List<CatUiModel>) {\n            cats.clear()\n            cats.addAll(newCats)\n            notifyDataSetChanged()\n        }\n        override fun onCreateViewHolder(parent: ViewGroup,\n          viewType: Int): CatViewHolder {\n            val view = layoutInflater\n              .inflate(R.layout.item_cat, parent, false)\n            return CatViewHolder(view, imageLoader)\n        }\n        override fun getItemCount() = cats.size\n        override fun onBindViewHolder(\n            holder: CatViewHolder, position: Int) {\n            holder.bindData(cats[position])\n        }\n    }\n    ```", "```swift\n    implementation 'com.github.bumptech.glide:glide:4.14.2'\n    ```", "```swift\n    package com.example.myrecyclerviewapp\n    [imports]\n    class GlideImageLoader(context: Context) : ImageLoader {\n        private val glide by lazy { Glide(context) }\n        override fun loadImage(imageUrl: String,\n        imageView: ImageView) {\n            glide.load(imageUrl)\n                .centerCrop().into(imageView)\n        }\n    }\n    ```", "```swift\n    class MainActivity : AppCompatActivity() {\n      private val recyclerView: RecyclerView by lazy {\n        findViewById(R.id.recycler_view) }\n      private val catsAdapter by lazy { CatsAdapter(\n        layoutInflater, GlideImageLoader(this)) }\n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        recyclerView.adapter = catsAdapter\n        recyclerView.layoutManager = LinearLayoutManager(\n          this, LinearLayoutManager.VERTICAL, false)\n        catsAdapter.setData(\n          listOf(\n            CatUiModel(Gender.Male,\n              CatBreed.BalineseJavanese, \"Fred\",\n              \"Silent and deadly\",\n              \"https://cdn2.thecatapi.com/image/DBmIBhhyv.\n              jpg\"\n            ),\n            CatUiModel(Gender.Female,\n              CatBreed.ExoticShorthair, \"Wilma\",\n              \"Cuddly assassin\",\n              \"https://cdn2.thecatapi.com/images/KJF8fB_20.\n              jpg\"\n            ),\n            CatUiModel(Gender.Unknown,\n              CatBreed.AmericanCurl, \"Curious George\",\n              \"Award winning investigator\",\n              \"https://cdn2.thecatapi.com/images/vJB8rwfdX.\n              jpg\"\n            )\n          )\n        )\n      }\n    }\n    ```", "```swift\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <androidx.constraintlayout.widget.ConstraintLayout\n      ...>\n      <TextView\n        android:id=\"@+id/main_label\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/main_title\"\n        android:textSize=\"24sp\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n      <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recycler_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintTop_toBottomOf=\"@+id/main_label\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n    ```", "```swift\n    <resources>\n      <string name=\"app_name\">SCA - Secret Cat Agents</string>\n      <string name=\"main_title\">Our Agents</string>\n    </resources>\n    ```", "```swift\ninterface OnClickListener {\n    fun onClick(cat: CatUiModel)\n}\n```", "```swift\nclass CatViewHolder(\n    containerView: View,\n    private val imageLoader: ImageLoader,\n    private val onClickListener: OnClickListener\n) : ViewHolder(containerView) {\n    ...\n}\n```", "```swift\ncontainerView.setOnClickListener {\n    onClickListener.onClick(cat) }\n```", "```swift\n    interface OnClickListener {\n        fun onClick(cat: CatUiModel)\n    }\n    ```", "```swift\n    class CatViewHolder(\n        private val containerView: View,\n        private val imageLoader: ImageLoader,\n        private val onClickListener: OnClickListener\n    ) : ViewHolder(containerView) {\n    ```", "```swift\n    containerView.setOnClickListener {\n        onClickListener.onClick(cat) }\n    ```", "```swift\n    interface OnClickListener {\n        fun onItemClick(cat: CatUiModel)\n    }\n    ```", "```swift\n    class CatsAdapter(\n        private val layoutInflater: LayoutInflater,\n        private val imageLoader: ImageLoader,\n        private val onClickListener: OnClickListener\n    ) : RecyclerView.Adapter<CatViewHolder>() {\n    ```", "```swift\n    return CatViewHolder(view, imageLoader, object :\n    CatViewHolder.OnClickListener {\n    override fun onClick(cat: CatUiModel) =\n    onClickListener.onItemClick(cat)\n    })\n    ```", "```swift\n    private val catsAdapter by lazy {\n      CatsAdapter(layoutInflater, GlideImageLoader(this),\n        object : CatsAdapter.OnClickListener {\n          override fun onClick(cat: CatUiModel) =\n            onClickListener.onItemClick(cat)\n        }\n      )\n    }\n    ```", "```swift\n    private fun showSelectionDialog(cat: CatUiModel) {\n      AlertDialog.Builder(this)\n        .setTitle(\"Agent Selected\")\n        .setMessage(\"You have selected agent ${cat.name}\")\n        .setPositiveButton(\"OK\") { _, _ -> }.show()\n    }\n    ```", "```swift\nsealed class ListItem {\n    data class Group(val name: String) : ListItem()\n    data class Cat(val cat: CatUiModel) : ListItem()\n}\n```", "```swift\nlistOf(\n  ListItem.Group(\"Happy Cats\"),\n  ListItem.Cat(\n    CatUiModel(Gender.Female, CatBreed.AmericanCurl,\n      \"Kitty\", \"Kitty is warm and fuzzy.\",\n      \"https://cdn2.thecatapi.com/images/...\"\n    )\n  ),\n  ListItem.Cat(\n    CatUiModel(Gender.Male, CatBreed.ExoticShorthair,\n      \"Joey\", \"Loves to cuddle.\",\n      \"https://cdn2.thecatapi.com/images/...\"\n    )\n  ),\n  ListItem.Group(\"Sad Cats\"),\n  ListItem.Cat(\n    CatUiModel(Gender.Unknown, CatBreed.AmericanCurl,\n      \"Ginger\", \"Just not in the mood.\",\n      \"https://cdn2.thecatapi.com/images/...\"\n    )\n  ),\n  ListItem.Cat(\n      CatUiModel(Gender.Female, CatBreed.ExoticShorthair,\n      \"Butters\", \"Sleeps most of the time.\",\n      \"https://cdn2.thecatapi.com/images/...\"\n    )\n  )\n)\n```", "```swift\noverride fun getItemViewType(position: Int) =\n  when (listData[position]) {\n    is ListItem.Group -> VIEW_TYPE_GROUP\n    is ListItem.Cat -> VIEW_TYPE_CAT\n  }\n```", "```swift\nprivate const val VIEW_TYPE_GROUP = 0\nprivate const val VIEW_TYPE_CAT = 1\n```", "```swift\noverride fun onCreateViewHolder(parent: ViewGroup,\nviewType: Int) = when (viewType) {\n    VIEW_TYPE_GROUP -> {\n        val view = layoutInflater.inflate(\n            R.layout.item_title, parent, false)\n        GroupViewHolder(view)\n    }\n    VIEW_TYPE_CAT -> {\n        val view = layoutInflater.inflate(\n            R.layout.item_cat, parent, false)\n        CatViewHolder(view, imageLoader, object :\n        CatViewHolder.OnClickListener {\n        override fun onClick(cat: CatUiModel) =\n            onClickListener.onItemClick(cat)\n        })\n    }\n    else -> throw IllegalArgumentException(\n      \"Unknown view type requested: $viewType\")\n}\n```", "```swift\nrequire(listItem is ListItemUiModel.Group)\n    { \"Expected ListItemUiModel.Group\" }\nrequire(listItem is ListItemUiModel.Cat)\n    { \"Expected ListItemUiModel.Cat\" }\n```", "```swift\n    sealed class ListItemUiModel {\n        data class Title(val title: String) :\n            ListItemUiModel()\n        data class Cat(val cat: CatUiModel) :\n            ListItemUiModel()\n    }\n    ```", "```swift\n    abstract class ListItemViewHolder(containerView: View\n    ) : RecyclerView.ViewHolder(containerView) {\n        abstract fun bindData(listItem: ListItemUiModel)\n    }\n    ```", "```swift\n    class CatViewHolder(...) :\n        ListItemViewHolder(containerView) {\n    ```", "```swift\n    override fun bindData(listItem: ListItemUiModel)\n    ```", "```swift\n    require(listItem is ListItemUiModel.Cat)\n        { \"Expected ListItemUiModel.Cat\" }\n    val cat = listItem.cat\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <TextView\n      xmlns:android=\n        \"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:id=\"@+id/item_title_title\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:padding=\"8dp\"\n      android:textSize=\"16sp\"\n      android:textStyle=\"bold\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toTopOf=\"parent\"\n      tools:text=\"Sleeper Agents\" />\n    ```", "```swift\n    class TitleViewHolder(\n      containerView: View\n    ) : ListItemViewHolder(containerView) {\n      private val titleView: TextView by lazy {\n        containerView.findViewById(R.id.item_title_title)\n      }\n      override fun bindData(listItem: ListItemUiModel) {\n        require(listItem is ListItemUiModel.Title)\n          { \"Expected ListItemUiModel.Title\" }\n        titleView.text = listItem.title\n      }\n    }\n    ```", "```swift\n    class ListItemsAdapter(...) :\n        RecyclerView.Adapter<ListItemViewHolder>() {\n    ```", "```swift\n    private val listData = mutableListOf<ListItemUiModel>()\n    fun setData(newListData: List<ListItemUiModel>) {\n        listData.clear()\n        listData.addAll(newListData)\n        notifyDataSetChanged()\n    }\n    ```", "```swift\n    override fun onBindViewHolder(holder:\n        ListItemViewHolder, position: Int) {\n        holder.bindData(listData[position])\n    }\n    ```", "```swift\n    private const val VIEW_TYPE_TITLE = 0\n    private const val VIEW_TYPE_CAT = 1\n    ```", "```swift\n    override fun getItemViewType(position: Int) =\n        when (listData[position]) {\n            is ListItemUiModel.Title -> VIEW_TYPE_TITLE\n            is ListItemUiModel.Cat -> VIEW_TYPE_CAT\n        }\n    ```", "```swift\n    override fun onCreateViewHolder(parent: ViewGroup,\n      viewType: Int) = when (viewType) {\n      VIEW_TYPE_TITLE -> {\n        val view = layoutInflater.inflate(\n          R.layout.item_title, parent, false)\n        TitleViewHolder(view)\n      }\n      VIEW_TYPE_CAT -> {\n        val view = layoutInflater.inflate(\n          R.layout.item_cat, parent, false)\n        CatViewHolder(\n          view,\n          imageLoader,\n          object : CatViewHolder.OnClickListener {\n            override fun onClick(cat: CatUiModel) =\n              onClickListener.onItemClick(catData)\n          })\n      }\n      else -> throw IllegalArgumentException(\"Unknown view type requested: $viewType\")\n    }\n    ```", "```swift\nlistItemsAdapter.setData(\n  listOf(\n      ListItemUiModel.Title(\"Sleeper Agents\"),\n      ListItemUiModel.Cat(\n        CatUiModel(Gender.Male,\n          CatBreed.ExoticShorthair, \"Garvey\",\n          \"Garvey is as a lazy, fat, and cynical orange \n          cat.\",\n          \"https://cdn2.thecatapi.com/images/FZpeiLi4n.jpg\"\n        )\n      ),\n      ListItemUiModel.Cat(\n        CatUiModel(Gender.Unknown,\n          CatBreed.AmericanCurl, \"Curious George\",\n          \"Award winning investigator\",\n          \"https://cdn2.thecatapi.com/images/vJB8rwfdX.\n          jpg\"\n        )\n      ),\n      ListItemUiModel.Title(\"Active Agents\"),\n```", "```swift\nfun removeItem(position: Int) {\n    listData.removeAt(position)\n    notifyItemRemoved(position)\n}\n```", "```swift\ninner class SwipeToDeleteCallback :\n  ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.RIGHT) {\n  override fun onMove(\n    recyclerView: RecyclerView,\n    viewHolder: RecyclerView.ViewHolder,\n    target: RecyclerView.ViewHolder\n  ): Boolean = false\n  override fun getMovementFlags(\n    recyclerView: RecyclerView,\n    viewHolder: RecyclerView.ViewHolder\n  ) = if (viewHolder is CatViewHolder) {\n    makeMovementFlags(\n      ItemTouchHelper.ACTION_STATE_IDLE,\n      ItemTouchHelper.RIGHT\n    ) or makeMovementFlags(\n      ItemTouchHelper.ACTION_STATE_SWIPE,\n      ItemTouchHelper.RIGHT\n    )\n  } else { 0 }\n  override fun onSwiped(viewHolder: RecyclerView.ViewHolder,\n    direction: Int) {\n    val position = viewHolder.adapterPosition\n    removeItem(position)\n  }\n}\n```", "```swift\nval itemTouchHelper =\n  ItemTouchHelper(listItemsAdapter.swipeToDeleteCallback)\nitemTouchHelper.attachToRecyclerView(recyclerView)\n```", "```swift\n    fun removeItem(position: Int) {\n        listData.removeAt(position)\n        notifyItemRemoved(position)\n    }\n    ```", "```swift\n    inner class SwipeToDeleteCallback :\n      ItemTouchHelper.SimpleCallback(0,\n      ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {\n      override fun onMove(\n        recyclerView: RecyclerView,\n        viewHolder: RecyclerView.ViewHolder,\n        target: RecyclerView.ViewHolder\n      ): Boolean = false\n        override fun getMovementFlags(\n          recyclerView: RecyclerView,\n        viewHolder: RecyclerView.ViewHolder\n      ) = if (viewHolder is CatViewHolder) {\n        makeMovementFlags(\n          ItemTouchHelper.ACTION_STATE_IDLE,\n          ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT\n        ) or makeMovementFlags(\n          ItemTouchHelper.ACTION_STATE_SWIPE,\n          ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT\n        )\n      } else { 0 }\n      override fun onSwiped(viewHolder:\n        RecyclerView.ViewHolder, direction: Int) {\n        val position = viewHolder.adapterPosition\n        removeItem(position)\n      }\n    }\n    ```", "```swift\n    class ListItemsAdapter(...) :\n      RecyclerView.Adapter<ListItemViewHolder>() {\n      val swipeToDeleteCallback = SwipeToDeleteCallback()\n    ```", "```swift\n    recyclerView.layoutManager = ...\n    val itemTouchHelper = ItemTouchHelper(listItemsAdapter\n      .swipeToDeleteCallback)\n    itemTouchHelper.attachToRecyclerView(recyclerView)\n    ```", "```swift\n    android:layout_height=\"0dp\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintTop_toBottomOf=\"@+id/main_label\" />\n    ```", "```swift\nfun addItem(position: Int, item: ListItemUiModel) {\n    listData.add(position, item)\n    notifyItemInserted(position)\n}\n```", "```swift\n<Button\n    android:id=\"@+id/main_add_item_button\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Add A Cat\"\n    app:layout_constraintBottom_toBottomOf=\"parent\" />\n```", "```swift\naddItemButton.setOnClickListener {\n  listItemsAdapter.addItem(1, ListItemUiModel.Cat(\n    CatUiModel(Gender.Female, CatBreed.BalineseJavanese,\n      \"Anonymous\", \"Unknown\",\n      \"https://cdn2.thecatapi.com/images/zJkeHza2K.jpg\"\n    ))\n  )\n}\n```", "```swift\n    fun addItem(position: Int, item: ListItemUiModel) {\n        listData.add(position, item)\n        notifyItemInserted(position)\n    }\n    ```", "```swift\n    <Button\n        android:id=\"@+id/main_add_item_button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Add A Cat\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" />\n    ```", "```swift\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n    ```", "```swift\napp:layout_constraintBottom_toTopOf=\"@+id/main_add_item_button\"\n```", "```swift\n    private val addItemButton: View by lazy {\n        findViewById(R.id.main_add_item_button) }\n    ```", "```swift\n    itemTouchHelper.attachToRecyclerView(recyclerView)\n    ```", "```swift\naddItemButton.setOnClickListener {\n    listItemsAdapter.addItem(1,\n        ListItemUiModel.Cat(CatUiModel(\n            Gender.Female, CatBreed.BalineseJavanese,\n            \"Anonymous\", \"Unknown\",\n            \"https://cdn2.thecatapi.com/images/zJkeHza2K.jpg\"\n        ))\n    )\n}\n```"]