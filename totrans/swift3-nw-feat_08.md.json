["```swift\nlet avg1: Double = 98.1 \nvar avg2 = avg1 \navg2 += 1.2   // -> 99.3 \n\n```", "```swift\n\nlet dateComponents1 = NSDateComponents() \ndateComponents1.setValue(10, forComponent: .Day) \ndateComponents1.day // => 10 \nvar dateComponents2 = dateComponents1 \ndateComponents2.setValue(2, forComponent: .Day) \ndateComponents1.day // => 2 \ndateComponents2.day // => 2 \n\n```", "```swift\ntypedef NS_ENUM(NSUInteger, NSDateFormatterStyle), \n{ \n   NSDateFormatterNoStyle     = kCFDateFormatterNoStyle, \n   NSDateFormatterShortStyle  = kCFDateFormatterShortStyle, \n   NSDateFormatterMediumStyle = kCFDateFormatterMediumStyle, \n   NSDateFormatterLongStyle   = kCFDateFormatterLongStyle, \n   NSDateFormatterFullStyle   = kCFDateFormatterFullStyle \n}; \n\ntypedef NS_ENUM(NSUInteger, NSDateFormatterBehavior){ \n   NSDateFormatterBehaviorDefault = 0, \n   NSDateFormatterBehavior10_0    = 1_000, \n   NSDateFormatterBehavior10_4    = 1_040, \n}; \n\n```", "```swift\nenum NSDateFormatterStyle : UInt { \n    case NoStyle \n    case ShortStyle \n    case MediumStyle \n    case LongStyle \n    case FullStyle \n} \n\nenum NSDateFormatterBehavior : UInt { \n    case BehaviorDefault \n    case Behavior10_0 \n    case Behavior10_4 \n} \n\n```", "```swift\nDateFormatter { \n\n    public enum Style : UInt { \n        case none \n        case short \n        case medium \n        case long \n        case full \n    } \n\n    public enum Behavior : UInt { \n        case `default` \n        case behavior10_4 \n    } \n} \n\n```", "```swift\nNSString *const UIApplicationDidEnterBackgroundNotification        \nNSString *const UIApplicationWillEnterForegroundNotification      NSString *const UIApplicationDidFinishLaunchingNotification; \n\n```", "```swift\ntypedef NSString *NSNotificationName NS_EXTENSIBLE_STRING_ENUM; \nNSNotificationName const UIApplicationDidEnterBackgroundNotification        \nNSNotificationName const UIApplicationWillEnterForegroundNotification      NSNotificationName const UIApplicationDidFinishLaunchingNotification; \n\n```", "```swift\nextension NSNotification.Name { \npublic static let UIApplicationDidEnterBackground: NSNotification.Name \npublic static let UIApplicationWillEnterForeground: NSNotification.Name \npublic static let UIApplicationDidFinishLaunching: NSNotification.Name \n} \n\n```", "```swift\n@interface NSCharacterSet  \n+ (NSCharacterSet *)controlCharacterSet; \n+ (NSCharacterSet *)whitespaceCharacterSet; \n+ (NSCharacterSet *)whitespaceAndNewlineCharacterSet; \n@end \n\n```", "```swift\n@interface NSCharacterSet  \n@property(class, readonly, strong) controlCharacterSet; \n@property(class, readonly, strong) whitespaceCharacterSet; \n@property(class, readonly, strong) whitespaceAndNewlineCharacterSet; \n@end \n\n```", "```swift\nclass NSCharacterSet{ \n class func controlCharacters() -> NSCharacterSet \n class func whitespaces() -> NSCharacterSet \n class func whitespacesAndNewlines() -> NSCharacterSet \n} \n\n```", "```swift\nclass NSCharacterSet{ \n class var controlCharacters: CharacterSet { get } \n class var whitespaces: CharacterSet { get } \n class var whitespacesAndNewlines: CharacterSet { get } \n} \n\n```", "```swift\n\nif let filePath = NSBundle.mainBundle().pathForResource(\"testFile\", ofType: \"txt\"){ \n    let fileURL = NSURL.fileURLWithPath(filePath) \n    let keys = [NSURLCreationDateKey, NSURLPathKey, NSURLFileSizeKey,NSURLTagNamesKey] \n    var values = try fileURL.resourceValuesForKeys(keys) \n    if let creationDate = values[NSURLCreationDateKey]{ \n        print(\"creationDate: \\(creationDate)\") \n    } \n\n    values[NSURLTagNamesKey] = [\"test\", \"sample\", \"playground\"] \n    values[NSURLCreationDateKey] = \"now\"   // à creates an error \n    print(values[NSURLTagNamesKey]) \n    print(values[NSURLCreationDateKey]) \n    try fileURL.setResourceValues(values)  \n} \n\n```", "```swift\nif let filePath = Bundle.main.path(forResource: \"testFile\",  \nofType: \"txt\") { \n    var fileURL = URL(fileURLWithPath: filePath) \n    let keys: Set<URLResourceKey> = [.creationDateKey, .pathKey, \n                                     .fileSizeKey, .tagNamesKey] \n    let values = try fileURL.resourceValues(forKeys: keys)  \n    if let creationDate = values.creationDate{ \n        print(\"creationDate: \\(creationDate)\") \n    } \n\n    var newvalues = values \n    newvalues.creationDate = \"now\" \n    //error: cannot assign value of type 'String' to type 'Date?' \n    //    newvalues.creationDate = \"now\" \n    //                             ^~~~~ \n} \n\n```", "```swift\npublic struct Measurement<UnitType : Unit> : ReferenceConvertible, Comparable, Equatable { \n\n    public typealias ReferenceType = NSMeasurement \n\n    /// The unit component of the `Measurement`. \n    public let unit: UnitType \n\n    /// The value component of the `Measurement`. \n    public var value: Double \n\n    /// Create a `Measurement` given a specified value and unit. \n    public init(value: Double, unit: UnitType) \n} \n\nlet initialAngle = Measurement(value: 30, unit: UnitAngle.degrees) \nlet maxAngle = Measurement(value: 90, unit: UnitAngle.degrees) \nvar currentAngle = initialAngle * 2.5  // 75.0 ° \n\nif currentAngle > maxAngle{ \n    print(\"Angle is greater than max supported angle\") \n} \n\n```", "```swift\nclass Unit : NSObject, NSCopying, NSSecureCoding { \n    open var symbol: String { get } \n    public init(symbol: String) \n} \n\nclass Dimension : Unit, NSSecureCoding {     \n    @NSCopying open var converter: UnitConverter { get } \n    public init(symbol: String, converter: UnitConverter) \n    class func baseUnit() -> Self \n} \n\n```", "```swift\nlet boxHeight = Measurement(value: 3.2, unit: UnitLength.feet) \nlet smallBoxHeight = Measurement(value: 20, unit: UnitLength.inches)  \nlet totalHeight = boxHeight + smallBoxHeight \nprint(totalHeight) // 1.48336 m  \n\n```", "```swift\nif boxHeight > smallBoxHeight{ \n    print(\"boxHeight is still larger\") \n} \n\n```", "```swift\nlet burgerSymbol = \"\\u{1F354}\" //  \nlet burgers = UnitLength(symbol: burgerSymbol , converter: UnitConverterLinear(coefficient: 2)) \n\n```", "```swift\nlet gittieSecond = UnitDuration(symbol: \"gs\", converter: UnitConverterLinear(coefficient: 0.5)) \n\n```", "```swift\npublic class ToddlerMovement: Dimension{ \n    static let tummyCrawl = ToddlerMovement(symbol: \"crawls\", converter: UnitConverterLinear(coefficient: 0.25)) \n    static let allFours = ToddlerMovement(symbol: \"allfours\", converter: UnitConverterLinear(coefficient: 2.0)) \n    static let shakySteps = ToddlerMovement(symbol: \"shaky_steps\", converter: UnitConverterLinear(coefficient: 1)) \n} \n\nlet playPenDistance = Measurement(value: 4, unit: ToddleMovement.tummyCrawl) \nlet kitchenFloorDistance = Measurement(value: 20, unit: ToddleMovement.shakySteps) \nlet almostThereDistance = Measurement(value: 10, unit: ToddleMovement.allFours) \n\nprint(playPinDistance) // 4.0 crawls \nprint(kitchenFloorDistance) // 20.0 shaky_steps \nprint(almostThereDistance) // 10.0 allfours \n\n```", "```swift\nclass UnitConverterLinear : UnitConverter { \n   var coefficient: Double { get } \n   var constant: Double { get } \n   init(coefficient: Double) \n   init(coefficient: Double, constant: Double) \n} \n\n```", "```swift\nbaseUnit = value * coefficient + constant \nvalue = (baseUnit - constant) / coefficient \n\n```", "```swift\nclass UnitConverter : NSObject { \n   open func baseUnitValue(fromValue value: Double) -> Double \n   open func value(fromBaseUnitValue baseUnitValue: Double) -> Double \n} \n\n```", "```swift\nclass MeasurementFormatter : Formatter, NSSecureCoding { \n   var unitOptions: MeasurementFormatter.UnitOptions \n   var unitStyle: Formatter.UnitStyle \n   @NSCopying var locale: Locale! \n   @NSCopying var numberFormatter: NumberFormatter! \n   func string(from measurement: Measurement<Unit>) -> String \n   func string(from unit: Unit) -> String \n} \n\n```", "```swift\nextension MeasurementFormatter { \n   public struct UnitOptions : OptionSet { \n\n   public init(rawValue: UInt) \n\n   public static var providedUnit:  \n                           MeasurementFormatter.UnitOptions { get } \n   public static var naturalScale:  \n                           MeasurementFormatter.UnitOptions { get } \n   public static var temperatureWithoutUnit: \n                           MeasurementFormatter.UnitOptions { get } \n    } \n} \n\n```", "```swift\nlet formatter = MeasurementFormatter() \nlet gittieSecond = UnitDuration(symbol: \"gs\", converter: UnitConverterLinear(coefficient: 0.5)) \nlet getterThere = Measurement(value: 5, unit: gittieSecond) // 5.0 gs \nlet formattedGS = formmatter.string(from: getterThere) \nprint(formattedGS) // 2.5 sec \n\n```", "```swift\nformatter.unitOptions = .providedUnit \nformatter.string(from: getterThere) // 5 gs \n\n```"]