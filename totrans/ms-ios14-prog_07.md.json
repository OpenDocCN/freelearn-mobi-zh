["```swift\nprotocol PetType {\n\n    var name: String { get }\n    var age: Int { get set }\n    static var latinName: String { get }\n\n    func sleep()\n\n}\n```", "```swift\nfunc sleep(pet: Pet) {\n    pet.sleep()\n}\n```", "```swift\nstruct Cat: PetType {\n\n    let name: String\n    var age: Int\n    static let latinName: String = 'Felis catus'\n\n    func sleep() {\n        print('Cat: Zzzz')\n    }\n\n}\nstruct Dog: PetType {\n    let name: String\n    var age: Int\n    static let latinName: String = 'Canis familiaris'\n\n    func sleep() {\n        print('Dog: Zzzz')\n    }\n\n}\nfunc nap(pet: PetType) {\n    pet.sleep()\n}\n```", "```swift\nstruct Pigeon: Bird, FlyingType, OmnivoreType, Domesticatable\n```", "```swift\nprotocol Domesticatable {\n    var homeAddress: String? { get }\n}\nfunc printHomeAddress(animal: Domesticatable) {\n    if let address = animal.homeAddress {\n        print(address)\n    }\n}\n```", "```swift\nprotocol Domesticatable {\n    var homeAddress: String? { get }\n}\nprotocol HerbivoreType {\n    var favoritePlant: String { get }\n}\nprotocol CarnivoreType {\n    var favoriteMeat: String { get }\n}\nprotocol OmnivoreType: HerbivoreType, CarnivoreType { }\n```", "```swift\nfunc printFavoriteMeat(forAnimal animal: CarnivoreType) {\n    print(animal.favoriteMeat)\n}\nfunc printFavoritePlant(forAnimal animal: HerbivoreType) {\n    print(animal.favoritePlant)\n}\n```", "```swift\nextension Domesticatable {\n    func printHomeAddress() {\n        if let address = homeAddress {\n            print(address)\n        }\n    }\n}\n```", "```swift\nlet pidgeon = Pigeon(favoriteMeat: 'Insects',\n                       favoritePlant: 'Seeds',\n                       homeAddress: 'Greater Manchester,                        England')\npidgeon.printHomeAddress()\n```", "```swift\nstruct Pigeon: Bird, FlyingType, OmnivoreType, Domesticatable {\n    let favoriteMeat: String\n    let favoritePlant: String\n    let homeAddress: String?\n\n    func printHomeAddress() {\n        if let address = homeAddress {\n            print('address: \\(address.uppercased())')\n        }\n    }\n}\n```", "```swift\nprotocol Domesticatable {\n    var homeAddress: String? { get }\n    func printHomeAddress()\n}\n```", "```swift\nprotocol Domesticatable {\n    var homeAddress: String? { get }\n    var hasHomeAddress: Bool { get }\n    func printHomeAddress()\n}\nextension Domesticatable {\n    var hasHomeAddress: Bool {\n        return homeAddress != nil\n    }\n\n    func printHomeAddress() {\n        if let address = homeAddress {\n            print(address)\n        }\n    }\n}\n```", "```swift\nprotocol HerbivoreType {\n    var plantsEaten: [PlantType] { get set }\n    mutating func eat(plant: PlantType)\n}\nextension HerbivoreType {\n    mutating func eat(plant: PlantType) {\n        plantsEaten.append(plant)\n    }\n}\n```", "```swift\nprotocol PlantType {\n    var latinName: String { get }\n}\n```", "```swift\nstruct Grass: PlantType{ var latinName = 'Poaceae'\n}\nstruct Pine: PlantType{ var latinName = 'Pinus'\n}\nstruct Cow: HerbivoreType {\n    var plantsEaten = [PlantType]()\n}\n```", "```swift\nvar cow = Cow()\nlet pine = Pine()\ncow.eat(plant: pine)\n```", "```swift\nprotocol HerbivoreType {\n    associatedtype Plant: PlantType\n    var plantsEaten: [Plant] { get set }\n    mutating func eat(plant: Plant)\n}\nextension HerbivoreType {\n    mutating func eat(plant: Plant) {\n        print('eating a \\(plant.latinName)')\n        plantsEaten.append(plant)\n    }\n}\n```", "```swift\nstruct Cow: HerbivoreType {\n    var plantsEaten = [Grass]()\n}\n```", "```swift\nstruct Carrot: PlantType {\n    let latinName = 'Daucus carota'\n}\nstruct Rabbit: HerbivoreType {\n    var plantsEaten = [Carrot]()\n}\n```", "```swift\nprotocol HerbivoreType {\n    associatedtype Plant: PlantType\n    var plantsEaten: [Plant] { get set }\n    mutating func eat(plant: Plant)\n}\n```", "```swift\nstruct Cow<Plant: PlantType>: HerbivoreType {\n    var plantsEaten = [Plant]()\n}\n```", "```swift\nlet grassCow = Cow<Grass>()\nlet flowerCow = Cow<Flower>()\n```", "```swift\nlet strings = [String]()\nlet strings = Array<String>()\n```", "```swift\nfunc simpleMap<T, U>(_ input: [T], transform: (T) -> U) -> [U] {\n\n    var output = [U]()\n    for item in input {\n        output.append(transform(item))\n    }\n\n    return output\n}\n```", "```swift\nlet result = simpleMap([1, 2, 3]) { item in\n    return item * 2\n}\nprint(result) // [2, 4, 6]\n```"]