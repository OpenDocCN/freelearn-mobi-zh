["```swift\nvar number = 10\nnumber + 5\n\n// Not recommended\nvar count = 1;\nvar age = 18; age++\n```", "```swift\nvar count = 10            //count: Int\nvar name = \"Sara\"         //name: String\nvar empty = name.isEmpty   //empty: Bool\n\n// Not recommended\nvar count: Int = 10\nvar name: String = \"Sara\"\nvar empty: Bool = name.isEmpty\n\n// When you must provide type annotation\nvar count: Int\nvar name: String\n\ncount = 10\nname = \"Sara\"\n```", "```swift\n    let add10 = { $0 + 10 }\n    add10(5)\n\n    let numbers = [1, 2, 3, 4]\n    numbers.map { $0 + 10 }\n    numbers.map(add10)\n    ```", "```swift\n    func complexFunc (x: Int, _ y: Int = 0, extraNumber z: Int = 0, name: String = \"default\") -> String{\n        return  \"\\(name): \\(x) + \\(y) + \\(z) = \\(x + y + z)\"\n    }\n\n    complexFunc(10)\n    complexFunc(10, 11)\n    complexFunc(10, 11, extraNumber: 20, name: \"name\")\n    ```", "```swift\n    struct Person {\n        let name: String\n        let lastName: String\n        let age: Int\n    }\n\n    Person(name: \"Jon\", lastName: \"Bosh\", age: 23)\n    ```", "```swift\n    let numbers = [1, 2, 3, 4]\n    let num2 = numbers[2]\n\n    let population = [\n      \"China\" : 1_370_940_000,\n      \"Australia\" : 23_830_900\n    ]\n    population[\"Australia\"]\n    ```", "```swift\n    // Custom subscript\n    struct Stack {\n      private var items: [Int]\n\n      subscript (index: Int) -> Int {\n        return items[index]\n      }\n\n      // Stack standard functions\n      mutating func push(item: Int) {\n        items.append(item)\n      }\n\n      mutating func pop() -> Int {\n        return items.removeLast()\n      }\n    }\n\n    var stack = Stack(items: [10, 2])\n    stack.push(6)\n    stack[2]\n    stack.pop()\n    ```", "```swift\n    let numbers = [10, 20]\n    let array = [1, 2, 3]\n    let res = array + numbers\n\n    struct Vector {\n      let x: Int\n      let y: Int\n    }\n\n    func + (lhs: Vector, rhs: Vector) -> Vector {\n      return Vector(x: lhs.x + rhs.x, y: lhs.y + rhs.y);\n    }\n\n    let a = Vector(x: 10, y: 5)\n    let b = Vector(x: 2, y: 3)\n\n    let c = a + b\n    ```", "```swift\n    func doItGuard(x: Int?, y: Int) {\n      guard let x = x else { return }\n      //handle x \n      print(x)\n\n      guard y > 10 else { return }\n      //handle y\n      print(y)\n     }\n    ```", "```swift\nstruct Person {\n  let name: String\n  let age: Int\n}\n\nlet people = [\n  Person(name: \"Sam\", age: 10),\n  Person(name: \"Sara\", age: 24),\n  Person(name: \"Ola\", age: 42),\n  Person(name: \"Jon\", age: 19)\n]\n\nlet kids = people.filter { person in person.age < 18 }\nlet names = people.map { $0.name.lowercaseString }\n```", "```swift\n//Person.h File\n@import Foundation;\n\n@interface Person : NSObject\n\n@property (nonatomic) NSString *name;\n@property (nonatomic) NSInteger age;\n\n- (instancetype)initWithName:(NSString *)name age:(NSInteger)age;\n\n@end\n\n//Person.m File\n#import \"Person.h\"\n\n@implementation Person\n\n- (instancetype)initWithName:(NSString *)name age:(NSInteger)age {\n  self = [super init];\n  if (!self) return nil;\n\n  _name = name;\n  _age = age;\n\n  return self;\n}\n\n@end\n\nNSArray *people = @[\n    [[Person alloc] initWithName:@\"Sam\" age:10],\n    [[Person alloc] initWithName:@\"Sara\" age:24],\n    [[Person alloc] initWithName:@\"Ola\" age:42],\n    [[Person alloc] initWithName:@\"Jon\" age:19]\n];\n\nNSArray *kids = [people filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@\"age < 18\"]];\n\nNSMutableArray *names = [NSMutableArray new];\nfor (Person *person in people) {\n  [names addObject:person.name.lowercaseString];\n}\n```", "```swift\nlet number = 10\nlet part = 1.5\n\nnumber + part; // Error\n\nlet result = Double(number) + part\n```", "```swift\nvar name: String = \"Sara\"\nname = nil //Error. You can't assign nil to a non-optional type\n\nvar maybeName: String?\nmaybeName = \"Sara\"\nmaybeName = nil // This is allowed now\n```", "```swift\nvar someName: Optional<String>\n```", "```swift\nif let name = maybeName {\n  var res = \"Name - \" + name\n} else {\n  print(\"No name\")\n}\n```", "```swift\n    enum MyErrors: ErrorType {\n      case NotFound \n      case BadInstruction\n    }\n    ```", "```swift\n    func dangerous(x: Int) throws\n    func dangerousIncrease(x: Int) throws -> Int\n    ```", "```swift\n    throw MyErrors.BadInstruction\n    ```", "```swift\n      try dangerous(10)\n    ```", "```swift\n    do {\n      try dangerous(10)\n    }\n    catch {\n      print(\"error\")\n    }\n    ```", "```swift\nenum Error: ErrorType {\n  case NotNumber(String)\n  case Empty\n}\n\nfunc increase(x: String) throws -> String {\n  if x.isEmpty {\n    throw Error.Empty\n  }\n\n  guard let num = Int(x) else {\n    throw Error.NotNumber(x)\n  }\n\n  return String(num + 1)\n}\n\ndo {\n  try increase(\"10\")\n  try increase(\"Hi\")\n}\ncatch Error.Empty {\n  print(\"Empty\")\n}\ncatch Error.NotNumber (let string) {\n  print(\"\\\"\\(string)\\\" is not a number\")\n}\ncatch {\n  print(error)\n}\n```", "```swift\n    struct Person {\n      let name: String\n      let lastName: String\n\n      func fullName() -> String {\n        return name + \" \" + lastName\n      }\n    }\n\n    let sara = Person(name: \"Sara\", lastName: \"Johan\")\n    sara.fullName()\n    ```", "```swift\n    let numbers = (1, 5.5)\n    numbers.0\n    numbers.1\n\n    let result: (code: Int, message: String) = (404, \"Not fount\")\n    result.code\n    result.message\n\n    let (code ,message) = (404, \"Not fount\")\n    ```", "```swift\n    let range = Range(start: 0, end: 100)\n    let ten = 1...10 //Closed range, include last value 10\n    let nine = 0..<10 //half-open, not include 10\n    ```", "```swift\n    enum Action: String {\n      case TakePhoto\n      case SendEmail\n      case Delete\n    }\n\n    let sendEmail = Action.SendEmail\n    sendEmail.rawValue //\"SendEmail\"\n\n    let delete = Action(rawValue: \"Delete\")\n    ```", "```swift\nvar str = \"Hello\"\nvar str2 = str\n\nstr += \" :)\"\n```", "```swift\nextension CollectionType {\n\n  func findFirst (find: (Self.Generator.Element) -> Bool) -> Self.Generator.Element? {\n\n    for x in self { \n      if find(x) {\n        return x\n      }\n    }\n    return nil\n  }\n}\n```", "```swift\nlet a = [1, 200, 400]\nlet r = a.findFirst { $0  > 100 }\n```", "```swift\nlet ar = [1, 200, 400]\n\n//Old way\nmap(filter(map(ar) { $0 * 2 }) { $0 > 50 }) { $0 + 10 } \n\n//New way\nar.map{ $0 * 2 } .filter{ $0 > 50 } .map{ $0 + 10 }\n```", "```swift\n// Array filter function from Swift standard library\nfunc filter(includeElement: (T) -> Bool) -> [T]\n\nlet numbers = [1, 2, 4]\n\nfunc isEven (x: Int) -> Bool {\n    return x % 2 == 0\n}\nlet res = numbers.filter(isEven)\n```", "```swift\nfunc minimum(x: Int, _ y: Int) -> Int {\n  return (x < y) ? x : y\n}\n\nminimum(10, 11)\nminimum(11,5, 14.3) // error\n```", "```swift\nfunc minimum <T : Comparable>(x: T, _ y: T) -> T {\n  return (x < y) ? x : y\n}\n\nminimum (10, 11)\nminimum (10.5, 1.4)\nminimum (\"A\", \"ABC\")\n```", "```swift\nimport Foundation\nimport UIKit\nimport Alamofire // Custom framework\n```", "```swift\n//\n//  Use this file to import your target's public headers that you //  would like to expose to Swift.\n\n#import \"MyClass.h\"\n```", "```swift\n#import <UIKit/UIKit.h>\n\n//! Project version number for MySwiftKit.\nFOUNDATION_EXPORT double MySwiftKitVersionNumber;\n\n//! Project version string for MySwiftKit.\nFOUNDATION_EXPORT const unsigned char MySwiftKitVersionString[];\n\n// In this header, you should import all the public headers of your framework using statements like #import <MySwiftKit/PublicHeader.h>\n\n#import <SimpleFramework/MyClass.h>\n```", "```swift\nimport UIKit\nimport Foundation\n\nlet date = NSDate()\ndate.timeIntervalSinceNow\n\nUIColor.blackColor()\nUIColor(red: 0.5, green: 1, blue: 1, alpha: 1)\n\nclass MyView: UIView {\n    //custom implementation\n}\n```", "```swift\nlet array = [1, 2, 3]\n\nfunc takeArray(array: NSArray) { }\n\nvar objcArray: NSArray = array\ntakeArray(array)\n```", "```swift\n//Upcasting or safe casting\nlet otherArray: [AnyObject] = objcArray as [AnyObject]\n\n//Downcasting, unsafe casting\nif let safeNums = objcArray as? [Int] {\n  safeNums[0] + 10 //11\n}\n\nlet string: NSString = \"Hi\"\nlet str: String = string as String\n```", "```swift\nvar name: String = \"Name\"\nname.stringByAppendingString(\": Sara\")\n```", "```swift\n//Objective-C\n\n- (instancetype)initWithFrame:(CGRect)frame;\n+ (UIColor *)colorWithWhite:(CGFloat)white alpha:(CGFloat)alpha;\n\n// Swift \ninit(frame: CGRect)\ninit(white: CGFloat, alpha: CGFloat)\n```", "```swift\n#import \"SwiftApp-Swift.h\"\n#import <MySwiftKit/MySwiftKit-Swift.h>\n```", "```swift\n    @objc(KOKPerson) class Person: NSObject {\n      @objc(isMan) func man() -> Bool {\n        ...\n      }\n    }\n    @objc enum Options: Int {\n      case One\n      case Two\n    }\n    ```", "```swift\n    class Person: NSObject {\n    }\n    ```"]