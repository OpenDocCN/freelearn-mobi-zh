["```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout\n\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/AppTheme.AppBarOverlay\">\n\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:popupTheme=\"@style/AppTheme.PopupOverlay\" />\n\n    </android.support.design.widget.AppBarLayout>\n\n    <LinearLayout\n\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@color/white\"\n        android:orientation=\"vertical\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n\n        <Button\n            android:id=\"@+id/btn1\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"8dp\"\n            android:text=\"@string/button1\"/>\n\n        <Button\n            android:id=\"@+id/btn2\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"8dp\"\n            android:text=\"@string/button2\"/>\n\n        <Button\n            android:id=\"@+id/btn3\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"8dp\"\n            android:text=\"@string/button3\"/>\n\n    </LinearLayout>\n\n</android.support.design.widget.CoordinatorLayout>\n```", "```kt\npublic class HelloWorldActivity extends AppCompatActivity {\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_hello_world);\n        final Button btn1 = (Button) findViewById(R.id.btn1);\n        final Button btn2 = (Button) findViewById(R.id.btn2);\n        final Button btn3 = (Button) findViewById(R.id.btn3);\n        final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setTitle(\"Let's click\");\n        btn1.setOnClickListener(new View.OnClickListener() {\n public void onClick(View v) {\n Toast.makeText(HelloWorldActivity.this, \"Button 1 has been clicked by you! One\", Toast.LENGTH_SHORT).show();\n }\n });\n        btn2.setOnClickListener(new View.OnClickListener() {\n public void onClick(View v) {\n Toast.makeText(HelloWorldActivity.this, \"Button 2 has been clicked by you! Two.\", Toast.LENGTH_SHORT).show();\n }\n });\n btn3.setOnClickListener(new View.OnClickListener() {\n public void onClick(View v) {\n Toast.makeText(HelloWorldActivity.this, \"Button 3 has been clicked by you! Three\", Toast.LENGTH_SHORT).show();\n }\n });\n    }\n}\n```", "```kt\nclass HelloWorldActivity2 : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setSupportActionBar(toolbar)\n        supportActionBar?.title = \"Let's click\"\n        btn1.setOnClickListener(object : View.OnClickListener {\n override fun onClick(v: View?) {\n toast(\"Button 1 has been clicked by you! One\")\n }\n })\n btn2.setOnClickListener(object : View.OnClickListener {\n override fun onClick(v: View?) {\n toast(\"Button 2 has been clicked by you! Two\")\n }\n })\n btn3.setOnClickListener(object : View.OnClickListener {\n override fun onClick(v: View?) {\n toast(\"Button 3 has been clicked by you! Three\")\n }\n })\n    }\n}\n```", "```kt\nclass HelloWorldActivity2 : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setSupportActionBar(toolbar)\n        supportActionBar?.title = \"Let's click\"\n        btn1.setOnClickListener({ toast(\"Button 1 has been clicked by you! One\") })\n btn2.setOnClickListener({ toast(\"Button 2 has been clicked by you! Two\") })\n btn3.setOnClickListener({ toast(\"Button 3 has been clicked by you! Three\") })\n    }\n}\n```", "```kt\nfun setOnClickListener(listener: (View) -> Unit)\nsomeView.setOnClickListener({ view -> doSomething() })\n```", "```kt\nsomeView.setOnClickListener() { doSomething() }\n```", "```kt\nbutton.setOnClickListener { doSomething() }\n```", "```kt\nclass HelloWorldActivity2 : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setSupportActionBar(toolbar)\n        supportActionBar?.title = \"Let's click\"\n        btn1.onClick { toast(\"Button 1 has been clicked by you! One\") }\n btn2.onClick { toast(\"Button 2 has been clicked by you! Two\") }\n btn3.onClick { toast(\"Button 3 has been clicked by you! Three\") }\n    }\n}\n```", "```kt\nval / var <property name>: <Type> by <delegate>\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    private val textView : TextView by lazy {\n        findViewById<TextView>(R.id.textView) as TextView\n    }\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        textView.text=\"ABC\"\n    }\n}\n```", "```kt\nclass Delegate {\n    operator fun getValue(\n            thisRef: Any?,\n            property: KProperty<*>\n    ): String {\n        // return value\n    }\n operator fun setValue(\n            thisRef: Any?,\n            property: KProperty<*>, value: String\n    ) {\n        // assign\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var a:String by Delegates.observable(\"\",{_,oldValue,newValue ->\n        println(\"old value: $oldValue, new value: $newValue \")\n    })\n    a=\"a\"\n    a=\"b\"\n>}\n//Output:old value: , new value: a \n old value: a, new value: b\n```", "```kt\nfun main(args: Array<String>) {\n    var student:Student by Delegates.vetoable(Student(10),{property, oldValue, newValue ->\n        if(newValue.age>25){\n            println(\"Age can't be greater than 25\")\n            return@vetoable false\n        }\n        true\n    })\n    student=Student(26)\n}\nclass Student(var age:Int)\n```", "```kt\n//Output: Age can't be greater than 25\n```", "```kt\ninline fun <T> vetoable(\ninitialValue: T, \ncrossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Boolean\n): ReadWriteProperty<Any?, T> (source)\n```", "```kt\nclass SingleInitializableProperty<T>() : ReadWriteProperty<Any?, T>{\n    private var value: T? = null\n    override fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        if(value==null){\n            throw IllegalStateException(\"Variable not initialized\")\n        }else {\n            return value!!\n        }\n    }\n    override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        if(this.value==null){\n            this.value=value\n        }else{\n            throw IllegalStateException(\"Cannot be initialized twice\")\n        }\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var a:String by SingleInitializableProperty()\n    println(a)\n}\n```", "```kt\nOutput: Exception in thread \"main\" java.lang.IllegalStateException: Variable not initialized\n```", "```kt\nfun main(args: Array<String>) {\n    var a:String by SingleInitializableProperty()\n    a=\"first\"\n    println(a)\n    a=\"second\"\n}\n```", "```kt\nOutput:first\nException in thread \"main\" java.lang.IllegalStateException: Cannot be initialized twice\n```", "```kt\nvar student:Student?=null\n```", "```kt\nval student=Student()\n```", "```kt\npublic class MyTest {  \n    lateinit var subject: TestSubject\n    @SetUp fun setup() {  \n        subject = TestSubject()  \n    }   \n    @Test fun test() {  \n        subject.method() // dereference directly  \n    } \n}\n```", "```kt\n@Inject\n lateinit var mPresenter:EducationMvpPresenter\n```", "```kt\npublic class Student{ \n    val name: String by lazy { \n        “Aanand Shekhar Roy” \n    }\n}\n```", "```kt\nclass Prefs (mContext:Context){\n    val sharedPrefences=mContext.getSharedPreferences(\"com.ankoexamples.app\",Context.MODE_PRIVATE)\n    val PREF_USERNAME=\"pref_username\"\n}\n```", "```kt\nvar username:String\n    get() = sharedPrefences.getString(PREF_USERNAME,null)\n   set(value)=sharedPrefences.edit().putString(PREF_USERNAME,value).apply()\n```", "```kt\nclass App:Application() {\n    companion object {\n        var prefs: Prefs? = null\n    }\n\n    override fun onCreate() {\n        prefs = Prefs(this)\n        super.onCreate()\n    }\n}\n```", "```kt\nval prefs: Prefs by lazy {\n    App.prefs!!\n}\nclass App:Application() {\n    companion object {\n        var prefs: Prefs? = null\n    }\n    override fun onCreate() {\n        prefs = Prefs(this)\n        super.onCreate()\n    }\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        prefs.username=\"Aanand\"\n    }\n}\n```", "```kt\nLog.d(prefs.username) // Aanand\n```", "```kt\nsomeVariable.let{\n    // someVariable is present as \"*it\"* }\n```", "```kt\nif(someVariable!=null){\n    // do something \n}\n```", "```kt\nif(variableA!=null){\n    if(variableB!=null){\n        if(variableC!=null){\n            // do something.\n        }\n    }\n}\n```", "```kt\nfun <T1: Any, T2: Any,T3:Any, R: Any> multiLet(p1: T1?, p2: T2?,p3:T3?, block: (T1, T2,T3)->R?): R? {\n    return if (p1 != null && p2 != null &&p3!=null) block(p1, p2,p3) else null\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var variableA=\"a\"\n    var variableB=\"c\"\n    var variableC=\"b\"\n    multiLet(variableA,variableB,variableC){\n        _,_,_->\n        println(\"Everything not null\")\n    }\n}\n\n//Output: Everything not null\n```", "```kt\nvar nonNullList=listOf(\"a\",\"b\",\"c\")\nnonNullList.whenAllNotNull {\n    println(\"all not null\")\n}\nfun <T: Any, R: Any> Collection<T?>.whenAllNotNull(block: (List<T>)->R) {\n    if (this.all { it != null }) {\n        block(this.filterNotNull())\n    }\n}\n\nOutput: all not null\n```", "```kt\nfun main(args: Array<String>) {\n    var student:Student?=null\n}\n```", "```kt\nprintln(student?.age)\n```", "```kt\nfun main(args: Array<String>) {\n    lateinit var student:Student\n    student=Student()\n    println(student.age)\n}\n```"]