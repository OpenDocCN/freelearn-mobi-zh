- en: '*Chapter 3*: Handling Coroutine Cancelations and Exceptions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第三章*：处理协程取消和异常'
- en: In the previous chapter, you dove deep into Kotlin coroutines and learned how
    to use them for asynchronous programming in Android with simple code. You learned
    how to create coroutines with coroutine builders. Finally, you explored coroutine
    dispatchers, coroutine scopes, coroutine contexts, and jobs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你深入学习了 Kotlin 协程，并了解了如何使用简单的代码在 Android 中进行异步编程。你学习了如何使用协程构建器创建协程。最后，你探索了协程调度器、协程作用域、协程上下文和任务。
- en: Coroutines can be canceled when their purpose has been fulfilled or their job
    has been done. You can also cancel them based on specific instances in your app,
    such as when you want users to manually stop a task with a tap of a button. Coroutines
    do not always succeed and can fail; developers must be able to handle these cases
    so that the app will not crash, and they can inform the users by displaying a
    toast or snackbar message.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当协程的目的已经实现或任务已完成时，可以取消协程。你也可以根据你应用程序中的特定实例来取消它们，例如当你想要用户通过点击按钮手动停止一个任务时。协程并不总是成功的，也可能失败；开发者必须能够处理这些情况，以确保应用程序不会崩溃，并且可以通过显示
    toast 或 snackbar 消息来通知用户。
- en: In this chapter, we will start by understanding coroutine cancelation. You will
    learn how to cancel coroutines and handle cancelations and timeouts for your coroutines.
    Then, you will learn how to manage failures and exceptions that can happen in
    your coroutines.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先理解协程取消。你将学习如何取消协程，并处理协程的取消和超时。然后，你将学习如何管理协程中可能发生的失败和异常。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Canceling coroutines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消协程
- en: Managing coroutine timeouts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理协程超时
- en: Catching exceptions in coroutines
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在协程中捕获异常
- en: By the end of this chapter, you will understand coroutine cancelations and how
    you can make your coroutines cancelable. You will be able to add and handle timeouts
    in your coroutines. You will also know how to add code to catch exceptions in
    your coroutines.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将理解协程取消以及如何使你的协程可取消。你将能够在你自己的协程中添加和处理超时。你还将知道如何在协程中添加代码来捕获异常。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need to download and install the latest version of Android Studio.
    You can find the latest version at [https://developer.android.com/studio](https://developer.android.com/studio).
    For an optimal learning experience, a computer with the following specifications
    is recommended: Intel Core i5 or equivalent or higher, 4 GB RAM minimum, and 4
    GB available space.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要下载并安装 Android Studio 的最新版本。你可以在 [https://developer.android.com/studio](https://developer.android.com/studio)
    找到最新版本。为了获得最佳的学习体验，建议使用以下配置的计算机：Intel Core i5 或更高版本，至少 4 GB RAM，以及 4 GB 可用空间。
- en: The code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter03](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter03).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码示例可以在 GitHub 上找到，地址为 [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter03](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter03)。
- en: Canceling coroutines
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消协程
- en: In this section, we will start by looking at coroutine cancelations Developers
    can cancel coroutines in their projects manually or programmatically. You must
    make sure your application can handle these cancelations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先探讨协程取消。开发者可以在他们的项目中手动或通过程序取消协程。你必须确保你的应用程序可以处理这些取消。
- en: If your application is doing a long-running operation that is taking longer
    than expected and you think it could cause a crash, you might want to stop that
    task. You can also end tasks that are no longer necessary to free up memory and
    resources, such as when the user moves out of the activity that launched the task
    or closes the application. Users can also manually discontinue certain operations
    if you have that feature in your application. Coroutines make it easier for developers
    to cancel these tasks.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序正在进行一个长时间运行的操作，耗时超过了预期，你认为它可能会导致崩溃，你可能想要停止该任务。你也可以结束那些不再必要的任务，以释放内存和资源，例如当用户离开启动任务的
    activity 或关闭应用程序时。如果你在应用程序中提供了该功能，用户也可以手动停止某些操作。协程使开发者更容易取消这些任务。
- en: If you are using `viewModelScope` from `ViewModel` or `lifecycleScope` from
    the Jetpack Lifecycle Kotlin extension libraries, you can easily create coroutines
    without manually handling the cancelation. When `ViewModel` is cleared, `viewModelScope`
    is automatically canceled, while `lifecycleScope` is automatically canceled when
    the life cycle is destroyed. If you created your own coroutine scope, you must
    add the cancelation yourself.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用`ViewModel`或`lifecycleScope`从Jetpack Lifecycle Kotlin扩展库中，你可以轻松地创建协程而无需手动处理取消。当`ViewModel`被清除时，`viewModelScope`会自动取消，而`lifecycleScope`在生命周期被销毁时会自动取消。如果你创建了自定义的协程作用域，你必须自己添加取消操作。
- en: 'In the previous chapter, you learned that using coroutine builders such as
    `launch` returns a `cancel()` function to cancel the coroutine. Take the following
    example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你了解到使用如`launch`之类的协程构建器会返回一个`cancel()`函数来取消协程。以下是一个示例：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `job.cancel()` function will cancel the coroutine launched to call the `fetchMovies()`
    function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`job.cancel()`函数将取消启动以调用`fetchMovies()`函数的协程。'
- en: 'After canceling the job, you may want to wait for the cancelation to be finished
    before continuing to the next task to avoid race conditions. You can do that by
    calling the `join` function after calling the `call` function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在取消作业后，你可能想在继续下一个任务之前等待取消完成，以避免竞态条件。你可以通过在调用`call`函数后调用`join`函数来实现这一点：
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Adding `job.join()` here would make the code wait for the job to be canceled
    before doing the next task, which is `hideProgressBar()`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里添加`job.join()`会使代码在执行下一个任务`hideProgressBar()`之前等待作业被取消。
- en: 'You can also use the `Job.cancelAndJoin()` extension function, which is the
    same as calling `cancel` and then the `join` function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`Job.cancelAndJoin()`扩展函数，它与调用`cancel`然后调用`join`函数相同：
- en: '[PRE24]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `cancelAndJoin` function simplifies the call to the `cancel` and `join`
    functions into a single line of code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`cancelAndJoin`函数将调用`cancel`和`join`函数简化为单行代码。'
- en: Coroutine jobs can have child coroutine jobs. When you cancel a job, its child
    jobs (if there are any) will also be canceled, recursively.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 协程作业可以有子协程作业。当你取消一个作业时，其子作业（如果有）也将被取消，递归地。
- en: 'If your coroutine scope has multiple coroutines and you need to cancel all
    of them, you can use the `cancel` function from the coroutine scope instead of
    canceling the jobs one by one. This will cancel all the coroutines in the scope.
    Here’s an example of using the coroutine scope’s `cancel` function to cancel coroutines:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的协程作用域有多个协程，并且你需要取消所有这些协程，你可以使用协程作用域中的`cancel`函数而不是逐个取消作业。这将取消作用域中的所有协程。以下是一个使用协程作用域的`cancel`函数来取消协程的示例：
- en: '[PRE36]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In this example, when `scope.cancel()` is called, it will cancel both the `job1`
    and `job2` coroutines, which were created in the coroutine `scope` scope.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，当调用`scope.cancel()`时，它将取消在协程`scope`作用域中创建的`job1`和`job2`协程。
- en: 'Using the `cancel` function from the coroutine scope makes it easier to cancel
    multiple jobs launched with the specified scope. However, the coroutine scope
    won’t be able to launch new coroutines after you called the `cancel` function
    on it. If you want to cancel the scope’s coroutines but still want to create coroutines
    from the scope later, you can use `scope.coroutineContext.cancelChildren()` instead:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用协程作用域中的`cancel`函数可以更容易地取消使用指定作用域启动的多个作业。然而，在你对该作用域调用`cancel`函数之后，协程作用域将无法再启动新的协程。如果你想取消作用域的协程，但之后还想从作用域中创建协程，你可以使用`scope.coroutineContext.cancelChildren()`代替：
- en: '[PRE53]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Calling the `cancelAll` function will cancel all the child jobs in the coroutine
    context of the scope. You will still be able to use the scope later to create
    coroutines.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`cancelAll`函数将取消作用域协程上下文中的所有子作业。你之后仍然可以使用该作用域来创建协程。
- en: Canceling a coroutine will throw `CancellationException`, a special exception
    that indicates the coroutine was canceled. This exception will not crash the application.
    You will learn more about coroutines and exceptions later in this chapter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 取消协程将抛出`CancellationException`，这是一个特殊异常，表示协程已被取消。这个异常不会使应用程序崩溃。你将在本章的后面部分学习更多关于协程和异常的内容。
- en: 'You can also pass a subclass of `CancellationException` to the `cancel` function
    to specify a different cause:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将`CancellationException`的子类传递给`cancel`函数以指定不同的原因：
- en: '[PRE71]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: This cancels the `movieJob` job with `CancellationException` containing the
    message `Cancelled by user` as the cause when the user calls the `stopFetching`
    function.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户调用 `stopFetching` 函数时，此操作会使用包含消息 `Cancelled by user` 的 `CancellationException`
    取消 `movieJob` 作业。
- en: 'When you cancel a coroutine, the coroutine’s job’s state will change to `Cancelling`.
    It won’t automatically go to the `Cancelled` state and cancel the coroutine. The
    coroutine can continue to run even after the cancelation, unless your coroutine
    has code that can stop it from running. These states of a job and its life cycle
    are summarized in the following diagram:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当你取消一个协程时，协程作业的状态将变为 `Cancelling`。它不会自动进入 `Cancelled` 状态并取消协程。除非你的协程有可以停止其运行的代码，否则协程可以在取消后继续运行。作业及其生命周期中的这些状态总结在下图中：
- en: '![Figure 3.1 – Coroutine job life cycle'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.1 – Coroutine job life cycle]'
- en: '](img/Figure_3.1_B17773.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.1_B17773.jpg]'
- en: Figure 3.1 – Coroutine job life cycle
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.1 – Coroutine job life cycle]'
- en: Your coroutine code needs to cooperate to be cancelable. The coroutine should
    handle cancelations as quickly as possible. It must check for cancelations of
    the coroutine and if the coroutine is already canceled, it throws `CancellationException`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你的协程代码需要协作才能可取消。协程应尽可能快地处理取消操作。它必须检查协程的取消操作，如果协程已被取消，则抛出 `CancellationException`。
- en: 'One way to make your coroutine cancelable is to check whether the coroutine
    job is active (still running or completing) or not by using `isActive`. The value
    of `isActive` will become false once the coroutine job changes its state to `Cancelling`,
    `Cancelled`, or `Completed`. You can make your coroutine cancelable with `isActive`
    with the following approaches:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使你的协程可取消的一种方法是通过使用 `isActive` 来检查协程作业是否处于活动状态（仍在运行或完成）或不是。一旦协程作业的状态变为 `Cancelling`、`Cancelled`
    或 `Completed`，`isActive` 的值将变为假。你可以通过以下方法使用 `isActive` 使你的协程可取消：
- en: Perform tasks while `isActive` is true.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 `isActive` 为真时执行任务。
- en: Perform tasks only if `isActive` is true.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有当 `isActive` 为真时才执行任务。
- en: Return or throw an exception if `isActive` is false.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `isActive` 为假，则返回或抛出异常。
- en: Another function you can also use is `Job.ensureActive()`. It will check whether
    the coroutine job is active, and if it’s not, it will throw `CancellationException`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用的另一个函数是 `Job.ensureActive()`。它将检查协程作业是否处于活动状态，如果不是，则抛出 `CancellationException`。
- en: 'Here’s an example of how you can make your coroutine cancelable with `isActive`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，说明如何使用 `isActive` 使你的协程可取消：
- en: '[PRE84]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: The coroutine in the `processSensorData` function will check whether the job
    is active and will only proceed with the task if the value of `isActive` is true.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`processSensorData` 函数中的协程将检查作业是否处于活动状态，并且只有在 `isActive` 的值为真时才会继续执行任务。'
- en: Another way to make your coroutine code cancelable is to use suspending functions
    from the `kotlinx.coroutines` package, such as `yield` or `delay`. The `yield`
    function yields a thread (or a thread pool) of the current coroutine dispatcher
    to other coroutines to run.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使你的协程代码可取消的另一种方法是使用 `kotlinx.coroutines` 包中的挂起函数，例如 `yield` 或 `delay`。`yield`
    函数将当前协程调度器的线程（或线程池）让给其他协程运行。
- en: 'The `yield` and `delay` functions already check for cancelation and stop the
    execution or throw `CancellationException`. Thus, you no longer need to manually
    check for cancelation when you are using them in your coroutines. Here’s an example
    using the preceding code snippet, which has been updated with suspending function
    delay to make the coroutine cancelable:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield` 和 `delay` 函数已经检查了取消操作，并停止了执行或抛出了 `CancellationException`。因此，当你在协程中使用它们时，不再需要手动检查取消操作。以下是一个使用前面代码片段的示例，该片段已更新为使用挂起函数
    `delay` 以使协程可取消：'
- en: '[PRE101]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: The `delay` suspending function will check whether the coroutine job is canceled
    and will throw `CancellationException` if it is, making your coroutine cancelable.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`delay` 挂起函数将检查协程作业是否已取消，如果是，则抛出 `CancellationException`，使你的协程可取消。'
- en: Let’s learn how to implement a coroutine cancelation for an Android project
    in the next section.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在 Android 项目中实现协程取消。
- en: Exercise 3.01 – canceling coroutines in an Android app
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.01 – 在 Android 应用中取消协程
- en: 'In this exercise, you will work on an application that uses a coroutine that
    slowly counts down from 100 to 0 and displays the value on `TextView`. You will
    then add a button to cancel the coroutine to stop the countdown before it reaches
    0:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将工作于一个使用协程从 100 慢慢倒数到 0 并在 `TextView` 上显示值的程序。然后你将添加一个按钮来取消协程，在计数达到
    0 之前停止倒计时：
- en: Create a new project in Android Studio. Don’t change the suggested name of `MainActivity`
    for the activity.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目。不要更改`MainActivity`活动的建议名称。
- en: 'Open the `app/build.gradle` file and add the dependency for `kotlinx-coroutines-android`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/build.gradle`文件并添加`kotlinx-coroutines-android`的依赖项：
- en: '[PRE120]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: This will add the `kotlinx-coroutines-core` and `kotlinx-coroutines-android`
    libraries to your project, allowing you to use coroutines in your code.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`kotlinx-coroutines-core`和`kotlinx-coroutines-android`库添加到你的项目中，允许你在代码中使用协程。
- en: 'Open the `activity_main.xml` layout file and add an `id` attribute to `TextView`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`布局文件并为`TextView`添加一个`id`属性：
- en: '[PRE121]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: The `id` attribute will allow you to change the content of this `TextView` later.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`属性将允许你稍后更改此`TextView`的内容。'
- en: 'Open the `MainActivity` file. Add the following properties to the `MainActivity`
    class:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity`文件。向`MainActivity`类添加以下属性：
- en: '[PRE122]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The first line specifies the scope for the coroutine, `CoroutineScope`, with
    `Dispatchers.Main` as the dispatcher. The second line creates a `job` property
    for the coroutine job. The `textView` property will be used to display the countdown
    text and `count` initializes the countdown to 100\. In the `onCreate` function
    of the `MainActivity` file, initialize the value for `TextView`:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一行指定协程的作用域，`CoroutineScope`，使用`Dispatchers.Main`作为调度器。第二行创建一个协程作业的`job`属性。`textView`属性将用于显示倒计时文本，`count`初始化倒计时为100。在`MainActivity`文件的`onCreate`函数中，初始化`TextView`的值：
- en: '[PRE123]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: You will update this `textView` with the decreasing value of value later.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用这个`textView`来更新值减少的值。
- en: 'Create a countdown function that will do the counting down of the value:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个倒计时函数，用于计数：
- en: '[PRE124]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: This decreases the value of `count` by 1 and displays it on the text view.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这将`count`的值减1并在文本视图中显示它。
- en: 'In the `onCreate` function, below the `textView` initialization, add the following
    to start the coroutine to count down the value and display it on the text view:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`函数中，在`textView`初始化下方，添加以下代码以启动协程来计数并显示在文本视图中：
- en: '[PRE125]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: This will call the countdown function every `0.1` seconds, which will count
    down and display the value on the text view.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这将每`0.1`秒调用倒计时函数，它将倒计时并显示在文本视图中。
- en: 'Run the application. You will see that it slowly counts down and displays the
    value from 100 to 0, similar to the following:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。你会看到它缓慢地倒计时并显示从100到0的值，类似于以下内容：
- en: '![Figure 3.2 – The app counting down from 100 to 0'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2 – 应用从100倒计时到0'
- en: '](img/Figure_3.02_B17773_new.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.02_B17773_new.jpg]'
- en: Figure 3.2 – The app counting down from 100 to 0
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 应用从100倒计时到0
- en: 'Open the `strings.xml` file and add a string for the button:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`strings.xml`文件并为按钮添加一个字符串：
- en: '[PRE126]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: You will use this as the text for the button to stop the countdown.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用这个作为停止倒计时的按钮文本。
- en: 'Go to the `activity_main.xml` file again and add a button below `TextView`:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开`activity_main.xml`文件，在`TextView`下方添加一个按钮：
- en: '[PRE127]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: This will add a `Button` below `TextView`. The button will be used to stop the
    countdown later.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`TextView`下方添加一个`Button`。该按钮将用于稍后停止倒计时。
- en: 'Open `MainActivity` and after the job initialization, create a variable for
    the button:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity`并在作业初始化后，为按钮创建一个变量：
- en: '[PRE128]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: This button, when tapped, will allow the user to stop the countdown.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个按钮被点击时，将允许用户停止倒计时。
- en: 'Below that, add a click listener to the button that cancels the job:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面，给按钮添加一个取消作业的点击监听器：
- en: '[PRE129]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: When you click the button, it will cancel the coroutine.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击按钮时，它将取消协程。
- en: 'Run the application again. Tap on the **STOP** button and notice that the counting
    down stops, as shown in the following figure:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行应用程序。点击**STOP**按钮并注意倒计时停止，如图所示：
- en: '![Figure 3.3 – Clicking the STOP button cancels the coroutine'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 – 点击STOP按钮取消协程'
- en: '](img/Figure_3.03_B17773_new.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.03_B17773_new.jpg]'
- en: Figure 3.3 – Clicking the STOP button cancels the coroutine
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 点击STOP按钮取消协程
- en: Tapping on the `job.cancel()` call. This works because the coroutine is using
    the suspending `delay` function, which checks whether the coroutine is active
    or not.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`job.cancel()`调用。这之所以有效，是因为协程正在使用挂起的`delay`函数，该函数会检查协程是否处于活动状态。
- en: In this exercise, you have worked on adding code to cancel a running coroutine
    in an Android app by tapping on a button.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你已经通过点击按钮添加了代码来取消Android应用中正在运行的协程。
- en: There may be instances where you want to continue work even if you have canceled
    the job. To ensure the tasks will be done even if the coroutine is canceled, you
    can use `withContext(NonCancellable)` on the task.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在一些情况，即使你取消了作业，你仍然想继续工作。为了确保即使在协程被取消的情况下任务也会完成，你可以在任务上使用`withContext(NonCancellable)`。
- en: In this section, you learned how to cancel coroutines and how to make sure your
    coroutine code is cancelable. You will learn how to handle coroutine timeouts
    in the next section.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何取消协程以及如何确保你的协程代码是可取消的。你将在下一节中学习如何处理协程超时。
- en: Managing coroutine timeouts
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理协程超时
- en: In this section, you will learn about timeouts and how you can cancel your coroutines
    with a timeout. Setting a fixed amount of time after which to stop asynchronous
    code that is running longer than expected can help you save resources and immediately
    notify users of any issues.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习关于超时以及如何使用超时取消你的协程。设置一个固定的时间，在此之后停止运行时间超过预期的异步代码，可以帮助你节省资源，并立即通知用户任何问题。
- en: 'When your application is doing a background task, you may want to stop it because
    it is taking too long. You can manually track the time and cancel the task. Or
    you can use the `withTimeout` suspending function. With the `withTimeout` function,
    you can set your timeout in milliseconds or `Duration`. Once this timeout is exceeded,
    it will throw `TimeOutCancellationException`, a subclass of `CancellationException`.
    Here’s an example of how you can use `withTimeout`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用程序正在执行后台任务时，你可能想停止它，因为它花费了太长时间。你可以手动跟踪时间并取消任务。或者你可以使用`withTimeout`挂起函数。使用`withTimeout`函数，你可以设置以毫秒或`Duration`为单位的超时时间。一旦这个超时时间被超过，它将抛出`TimeOutCancellationException`，这是`CancellationException`的一个子类。以下是如何使用`withTimeout`的一个示例：
- en: '[PRE130]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: A timeout of 5,000 milliseconds (5 seconds) has been set for the coroutine.
    If the `fetchMovies` task takes longer than that, the coroutine will time out
    and throw `TimeoutCancellationException`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 为协程设置了5,000毫秒（5秒）的超时。如果`fetchMovies`任务花费的时间超过这个时间，协程将超时并抛出`TimeoutCancellationException`。
- en: 'Another function you can use is `withTimeoutOrNull`. It is similar to the `withTimeout`
    function, but it will return null if the timeout was exceeded. Here’s an example
    of how you can use `withTimeoutOrNull`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用另一个函数`withTimeoutOrNull`。它与`withTimeout`函数类似，但如果超时被超过，它将返回null。以下是如何使用`withTimeoutOrNull`的一个示例：
- en: '[PRE142]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: The coroutine will return null if `fetchMovies` times out after 5 seconds, and
    if not, it will return the list of movies fetched.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`fetchMovies`在5秒后超时，协程将返回null，如果没有超时，它将返回获取到的电影列表。
- en: As you learned in the previous section, the coroutine must be cancelable so
    that it will be canceled after the timeout. In the next section, you will learn
    how to handle the cancelation exception from coroutines.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前一节中学到的，协程必须是可取消的，这样它才会在超时后被取消。在下一节中，你将学习如何处理协程的取消异常。
- en: In this section, you have learned about coroutine timeouts and how you can set
    an amount of time after which to automatically cancel a coroutine.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了协程超时以及如何设置一个时间，在此之后自动取消协程。
- en: Catching exceptions in coroutines
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在协程中捕获异常
- en: In this section, you will learn about coroutine exceptions and how to handle
    them in your application. As it is always possible that your coroutines will fail,
    it is important to learn how to catch exceptions so that you can avoid crashes
    and notify your users.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习关于协程异常以及如何在你的应用程序中处理它们。由于你的协程可能会失败，因此学习如何捕获异常以避免崩溃并通知用户是非常重要的。
- en: 'To handle exceptions in your coroutines, you can simply use `try-catch`. For
    example, if you have a coroutine started with a `launch` coroutine builder, you
    can do the following to handle exceptions:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理协程中的异常，你可以简单地使用`try-catch`。例如，如果你使用`launch`协程构建器启动了一个协程，你可以执行以下操作来处理异常：
- en: '[PRE156]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: If `fetchMovies` has an exception, `ViewModel` will write the exception message
    to the logs.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`fetchMovies`有异常，`ViewModel`将异常信息写入日志。
- en: 'If your coroutine was built using the `async` coroutine builder, the exception
    will be thrown when you call the `await` function on the `Deferred` object. Your
    code to handle the exception would look like the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`async`协程构建器构建了协程，当你在`Deferred`对象上调用`await`函数时，将抛出异常。处理异常的代码可能如下所示：
- en: '[PRE169]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: If an exception is encountered while the `fetchMovies` call is running, the
    movies list will be an empty list of movies, and `ViewModel` will write the exception
    message to the logs.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`fetchMovies`调用运行时遇到异常，电影列表将是一个空的电影列表，并且`ViewModel`将异常消息写入日志。
- en: 'When a coroutine encounters an exception, it will cancel the job and pass on
    the exception to its parent. This parent coroutine will be canceled, as well as
    its children. Exceptions in the child coroutines will not affect the parent and
    its sibling coroutines if you use `SupervisorJob` as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 当协程遇到异常时，它将取消作业并将异常传递给其父级。这个父级协程以及其子协程都将被取消。如果你使用如下`SupervisorJob`，子协程中的异常不会影响父级及其兄弟协程：
- en: Creating the coroutine scope with the suspending `supervisorScope{}` builder
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`supervisorScope{}`构建器创建协程作用域
- en: 'Using `SupervisorJob` for your coroutine scope: `CoroutineScope(SupervisorJob())`'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的协程作用域使用`SupervisorJob`：`CoroutineScope(SupervisorJob())`
- en: If the exception of your coroutine is a subclass of `CancellationException`,
    for example, `TimeoutCancellationException` or a custom one you pass to the `cancel`
    function, the exception will not be transmitted to the parent.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的协程异常是`CancellationException`的子类，例如`TimeoutCancellationException`或你传递给`cancel`函数的自定义异常，异常将不会传递给父级。
- en: 'When handling coroutine exceptions, you can also use a single place to handle
    these exceptions with `CoroutineExceptionHandler`. `CoroutineExceptionHandler`
    is a coroutine context element that you can add to your coroutine to handle uncaught
    exceptions. The following lines of code show how you can use it:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理协程异常时，你也可以使用`CoroutineExceptionHandler`在单个位置处理这些异常。`CoroutineExceptionHandler`是你可以添加到你的协程中以处理未捕获异常的协程上下文元素。以下代码行展示了如何使用它：
- en: '[PRE186]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: The exceptions from the coroutines started from the scope will be handled by
    `exceptionHandler`, if it’s not handled wherever an error could occur, which will
    write the exception message to the logs.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 从作用域启动的协程异常将由`exceptionHandler`处理，如果它没有在任何可能出错的地方被处理，它将把异常消息写入日志。
- en: Let’s try to add code to handle exceptions in your coroutines.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试添加代码来处理你的协程中的异常。
- en: Exercise 3.02 – catching exceptions in your coroutines
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.02 – 在你的协程中捕获异常
- en: 'In this exercise, you will continue working on the application that displays
    on `TextView` a number from 100 and slowly decreases it down to 0\. You will be
    adding code to handle exceptions in the coroutine:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将继续工作于在`TextView`上显示从100开始并逐渐减少到0的应用程序。你将添加代码来处理协程中的异常：
- en: Open the countdown app you built in the previous exercise.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你在上一个练习中构建的倒计时应用程序。
- en: 'Go the `MainActivity` file and at the end of the countdown function, add the
    following to simulate an exception:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`MainActivity`文件，并在倒计时函数的末尾添加以下代码以模拟异常：
- en: '[PRE195]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: This will generate a random number from 0 to 9 and if it’s 0, it will throw
    an exception. It will simulate the coroutine encountering an exception.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个从0到9的随机数，如果是0，它将抛出异常。这将模拟协程遇到异常。
- en: Run the application. It will start to count down and some point later, it will
    throw the exception and crash the app.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。它将开始倒计时，并在某个时刻抛出异常并崩溃应用。
- en: 'Surround the code in your coroutine with a `try-catch` block to catch the exception
    in the app:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的协程中的代码周围使用`try-catch`块来捕获应用中的异常：
- en: '[PRE196]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: This will catch the exception from the countdown function. The app will no longer
    crash but you will need to inform the user about the exception.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这将捕获倒计时函数中的异常。应用将不再崩溃，但你需要通知用户关于异常的信息。
- en: 'Inside the `catch` block, replace `//TODO` with `Snackbar` to display the exception
    message:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`catch`块中，将`//TODO`替换为`Snackbar`以显示异常消息：
- en: '[PRE197]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: This will display a snackbar message with the text `An error occurred`, which
    is the message of the exception.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个包含文本`An error occurred`的snackbar消息，这是异常的消息。
- en: 'Run the application again. It will start to count down but instead of crashing,
    a snackbar message will be displayed, as shown in the following figure:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行应用程序。它将开始倒计时，但不会崩溃，而是会显示一个snackbar消息，如图下所示：
- en: '![Figure 3.4 – Snackbar displayed when the coroutine has encountered the exception'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 – 当协程遇到异常时显示的Snackbar]'
- en: '](img/Figure_3.04_B17773_new.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.04_B17773_new.jpg]'
- en: Figure 3.4 – Snackbar displayed when the coroutine has encountered the exception
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 当协程遇到异常时显示的Snackbar
- en: In this exercise, you updated your application so that it can handle exceptions
    in the coroutines instead of crashing.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你更新了你的应用程序，使其能够处理协程中的异常而不是崩溃。
- en: In this section, you have learned about coroutine exceptions and how you can
    catch them in your Android apps.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了关于协程异常以及如何在你的Android应用中捕获它们。
- en: Summary
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about coroutine cancelations. You can cancel coroutines
    by using the `cancel` or `cancelAndJoin` function from the coroutine job or the
    `cancel` function from the coroutine scope.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了关于协程取消的内容。你可以通过使用协程作业中的`cancel`或`cancelAndJoin`函数，或者协程作用域中的`cancel`函数来取消协程。
- en: You learned that a coroutine cancelation needs to be cooperative. You also learned
    how you can change your code to make your coroutine cancelable by using `isActive`
    checks or by using suspending functions from the `kotlinx.coroutines` package.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 你了解到协程取消需要是协作式的。你还学习了如何通过使用`isActive`检查或使用`kotlinx.coroutines`包中的挂起函数来更改你的代码，使你的协程可取消。
- en: Then, you learned about coroutine timeouts. You can set a timeout (in milliseconds
    or `Duration`) using `withTimeout` or `withTimeoutOrNull`.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你学习了关于协程超时的内容。你可以使用`withTimeout`或`withTimeoutOrNull`来设置超时（以毫秒或`Duration`为单位）。
- en: You also learned about coroutine exceptions and how to catch them. `try-catch`
    blocks can be used to handle exceptions. You can also use `CoroutineExceptionHandler`
    in your coroutine scope to catch and handle exceptions in a single location.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了协程异常以及如何捕获它们。可以使用`try-catch`块来处理异常。你还可以在协程作用域中使用`CoroutineExceptionHandler`来在单个位置捕获和处理异常。
- en: Finally, you worked on an exercise to add cancelation to a coroutine and another
    exercise to update your code to handle coroutine exceptions.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你进行了一个练习，向协程添加取消功能，以及另一个练习来更新你的代码以处理协程异常。
- en: In the next chapter, you will dive into creating and running tests for the coroutines
    in your Android projects.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将深入探讨如何在你的Android项目中创建和运行协程的测试。
