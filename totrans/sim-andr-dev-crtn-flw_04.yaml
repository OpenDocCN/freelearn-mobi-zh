- en: '*Chapter 3*: Handling Coroutine Cancelations and Exceptions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you dove deep into Kotlin coroutines and learned how
    to use them for asynchronous programming in Android with simple code. You learned
    how to create coroutines with coroutine builders. Finally, you explored coroutine
    dispatchers, coroutine scopes, coroutine contexts, and jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Coroutines can be canceled when their purpose has been fulfilled or their job
    has been done. You can also cancel them based on specific instances in your app,
    such as when you want users to manually stop a task with a tap of a button. Coroutines
    do not always succeed and can fail; developers must be able to handle these cases
    so that the app will not crash, and they can inform the users by displaying a
    toast or snackbar message.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will start by understanding coroutine cancelation. You will
    learn how to cancel coroutines and handle cancelations and timeouts for your coroutines.
    Then, you will learn how to manage failures and exceptions that can happen in
    your coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Canceling coroutines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing coroutine timeouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catching exceptions in coroutines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand coroutine cancelations and how
    you can make your coroutines cancelable. You will be able to add and handle timeouts
    in your coroutines. You will also know how to add code to catch exceptions in
    your coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to download and install the latest version of Android Studio.
    You can find the latest version at [https://developer.android.com/studio](https://developer.android.com/studio).
    For an optimal learning experience, a computer with the following specifications
    is recommended: Intel Core i5 or equivalent or higher, 4 GB RAM minimum, and 4
    GB available space.'
  prefs: []
  type: TYPE_NORMAL
- en: The code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter03](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter03).
  prefs: []
  type: TYPE_NORMAL
- en: Canceling coroutines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start by looking at coroutine cancelations Developers
    can cancel coroutines in their projects manually or programmatically. You must
    make sure your application can handle these cancelations.
  prefs: []
  type: TYPE_NORMAL
- en: If your application is doing a long-running operation that is taking longer
    than expected and you think it could cause a crash, you might want to stop that
    task. You can also end tasks that are no longer necessary to free up memory and
    resources, such as when the user moves out of the activity that launched the task
    or closes the application. Users can also manually discontinue certain operations
    if you have that feature in your application. Coroutines make it easier for developers
    to cancel these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using `viewModelScope` from `ViewModel` or `lifecycleScope` from
    the Jetpack Lifecycle Kotlin extension libraries, you can easily create coroutines
    without manually handling the cancelation. When `ViewModel` is cleared, `viewModelScope`
    is automatically canceled, while `lifecycleScope` is automatically canceled when
    the life cycle is destroyed. If you created your own coroutine scope, you must
    add the cancelation yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned that using coroutine builders such as
    `launch` returns a `cancel()` function to cancel the coroutine. Take the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `job.cancel()` function will cancel the coroutine launched to call the `fetchMovies()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'After canceling the job, you may want to wait for the cancelation to be finished
    before continuing to the next task to avoid race conditions. You can do that by
    calling the `join` function after calling the `call` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Adding `job.join()` here would make the code wait for the job to be canceled
    before doing the next task, which is `hideProgressBar()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `Job.cancelAndJoin()` extension function, which is the
    same as calling `cancel` and then the `join` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `cancelAndJoin` function simplifies the call to the `cancel` and `join`
    functions into a single line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Coroutine jobs can have child coroutine jobs. When you cancel a job, its child
    jobs (if there are any) will also be canceled, recursively.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your coroutine scope has multiple coroutines and you need to cancel all
    of them, you can use the `cancel` function from the coroutine scope instead of
    canceling the jobs one by one. This will cancel all the coroutines in the scope.
    Here’s an example of using the coroutine scope’s `cancel` function to cancel coroutines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In this example, when `scope.cancel()` is called, it will cancel both the `job1`
    and `job2` coroutines, which were created in the coroutine `scope` scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `cancel` function from the coroutine scope makes it easier to cancel
    multiple jobs launched with the specified scope. However, the coroutine scope
    won’t be able to launch new coroutines after you called the `cancel` function
    on it. If you want to cancel the scope’s coroutines but still want to create coroutines
    from the scope later, you can use `scope.coroutineContext.cancelChildren()` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Calling the `cancelAll` function will cancel all the child jobs in the coroutine
    context of the scope. You will still be able to use the scope later to create
    coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: Canceling a coroutine will throw `CancellationException`, a special exception
    that indicates the coroutine was canceled. This exception will not crash the application.
    You will learn more about coroutines and exceptions later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also pass a subclass of `CancellationException` to the `cancel` function
    to specify a different cause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: This cancels the `movieJob` job with `CancellationException` containing the
    message `Cancelled by user` as the cause when the user calls the `stopFetching`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you cancel a coroutine, the coroutine’s job’s state will change to `Cancelling`.
    It won’t automatically go to the `Cancelled` state and cancel the coroutine. The
    coroutine can continue to run even after the cancelation, unless your coroutine
    has code that can stop it from running. These states of a job and its life cycle
    are summarized in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Coroutine job life cycle'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.1_B17773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Coroutine job life cycle
  prefs: []
  type: TYPE_NORMAL
- en: Your coroutine code needs to cooperate to be cancelable. The coroutine should
    handle cancelations as quickly as possible. It must check for cancelations of
    the coroutine and if the coroutine is already canceled, it throws `CancellationException`.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to make your coroutine cancelable is to check whether the coroutine
    job is active (still running or completing) or not by using `isActive`. The value
    of `isActive` will become false once the coroutine job changes its state to `Cancelling`,
    `Cancelled`, or `Completed`. You can make your coroutine cancelable with `isActive`
    with the following approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform tasks while `isActive` is true.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform tasks only if `isActive` is true.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return or throw an exception if `isActive` is false.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another function you can also use is `Job.ensureActive()`. It will check whether
    the coroutine job is active, and if it’s not, it will throw `CancellationException`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of how you can make your coroutine cancelable with `isActive`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: The coroutine in the `processSensorData` function will check whether the job
    is active and will only proceed with the task if the value of `isActive` is true.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to make your coroutine code cancelable is to use suspending functions
    from the `kotlinx.coroutines` package, such as `yield` or `delay`. The `yield`
    function yields a thread (or a thread pool) of the current coroutine dispatcher
    to other coroutines to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `yield` and `delay` functions already check for cancelation and stop the
    execution or throw `CancellationException`. Thus, you no longer need to manually
    check for cancelation when you are using them in your coroutines. Here’s an example
    using the preceding code snippet, which has been updated with suspending function
    delay to make the coroutine cancelable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: The `delay` suspending function will check whether the coroutine job is canceled
    and will throw `CancellationException` if it is, making your coroutine cancelable.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn how to implement a coroutine cancelation for an Android project
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.01 – canceling coroutines in an Android app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will work on an application that uses a coroutine that
    slowly counts down from 100 to 0 and displays the value on `TextView`. You will
    then add a button to cancel the coroutine to stop the countdown before it reaches
    0:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio. Don’t change the suggested name of `MainActivity`
    for the activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `app/build.gradle` file and add the dependency for `kotlinx-coroutines-android`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add the `kotlinx-coroutines-core` and `kotlinx-coroutines-android`
    libraries to your project, allowing you to use coroutines in your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `activity_main.xml` layout file and add an `id` attribute to `TextView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `id` attribute will allow you to change the content of this `TextView` later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `MainActivity` file. Add the following properties to the `MainActivity`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first line specifies the scope for the coroutine, `CoroutineScope`, with
    `Dispatchers.Main` as the dispatcher. The second line creates a `job` property
    for the coroutine job. The `textView` property will be used to display the countdown
    text and `count` initializes the countdown to 100\. In the `onCreate` function
    of the `MainActivity` file, initialize the value for `TextView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will update this `textView` with the decreasing value of value later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a countdown function that will do the counting down of the value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This decreases the value of `count` by 1 and displays it on the text view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `onCreate` function, below the `textView` initialization, add the following
    to start the coroutine to count down the value and display it on the text view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will call the countdown function every `0.1` seconds, which will count
    down and display the value on the text view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application. You will see that it slowly counts down and displays the
    value from 100 to 0, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The app counting down from 100 to 0'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.02_B17773_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – The app counting down from 100 to 0
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `strings.xml` file and add a string for the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will use this as the text for the button to stop the countdown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `activity_main.xml` file again and add a button below `TextView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add a `Button` below `TextView`. The button will be used to stop the
    countdown later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `MainActivity` and after the job initialization, create a variable for
    the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This button, when tapped, will allow the user to stop the countdown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below that, add a click listener to the button that cancels the job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you click the button, it will cancel the coroutine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application again. Tap on the **STOP** button and notice that the counting
    down stops, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Clicking the STOP button cancels the coroutine'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.03_B17773_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – Clicking the STOP button cancels the coroutine
  prefs: []
  type: TYPE_NORMAL
- en: Tapping on the `job.cancel()` call. This works because the coroutine is using
    the suspending `delay` function, which checks whether the coroutine is active
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you have worked on adding code to cancel a running coroutine
    in an Android app by tapping on a button.
  prefs: []
  type: TYPE_NORMAL
- en: There may be instances where you want to continue work even if you have canceled
    the job. To ensure the tasks will be done even if the coroutine is canceled, you
    can use `withContext(NonCancellable)` on the task.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to cancel coroutines and how to make sure your
    coroutine code is cancelable. You will learn how to handle coroutine timeouts
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Managing coroutine timeouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about timeouts and how you can cancel your coroutines
    with a timeout. Setting a fixed amount of time after which to stop asynchronous
    code that is running longer than expected can help you save resources and immediately
    notify users of any issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'When your application is doing a background task, you may want to stop it because
    it is taking too long. You can manually track the time and cancel the task. Or
    you can use the `withTimeout` suspending function. With the `withTimeout` function,
    you can set your timeout in milliseconds or `Duration`. Once this timeout is exceeded,
    it will throw `TimeOutCancellationException`, a subclass of `CancellationException`.
    Here’s an example of how you can use `withTimeout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: A timeout of 5,000 milliseconds (5 seconds) has been set for the coroutine.
    If the `fetchMovies` task takes longer than that, the coroutine will time out
    and throw `TimeoutCancellationException`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another function you can use is `withTimeoutOrNull`. It is similar to the `withTimeout`
    function, but it will return null if the timeout was exceeded. Here’s an example
    of how you can use `withTimeoutOrNull`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: The coroutine will return null if `fetchMovies` times out after 5 seconds, and
    if not, it will return the list of movies fetched.
  prefs: []
  type: TYPE_NORMAL
- en: As you learned in the previous section, the coroutine must be cancelable so
    that it will be canceled after the timeout. In the next section, you will learn
    how to handle the cancelation exception from coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned about coroutine timeouts and how you can set
    an amount of time after which to automatically cancel a coroutine.
  prefs: []
  type: TYPE_NORMAL
- en: Catching exceptions in coroutines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about coroutine exceptions and how to handle
    them in your application. As it is always possible that your coroutines will fail,
    it is important to learn how to catch exceptions so that you can avoid crashes
    and notify your users.
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle exceptions in your coroutines, you can simply use `try-catch`. For
    example, if you have a coroutine started with a `launch` coroutine builder, you
    can do the following to handle exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: If `fetchMovies` has an exception, `ViewModel` will write the exception message
    to the logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your coroutine was built using the `async` coroutine builder, the exception
    will be thrown when you call the `await` function on the `Deferred` object. Your
    code to handle the exception would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: If an exception is encountered while the `fetchMovies` call is running, the
    movies list will be an empty list of movies, and `ViewModel` will write the exception
    message to the logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a coroutine encounters an exception, it will cancel the job and pass on
    the exception to its parent. This parent coroutine will be canceled, as well as
    its children. Exceptions in the child coroutines will not affect the parent and
    its sibling coroutines if you use `SupervisorJob` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the coroutine scope with the suspending `supervisorScope{}` builder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using `SupervisorJob` for your coroutine scope: `CoroutineScope(SupervisorJob())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the exception of your coroutine is a subclass of `CancellationException`,
    for example, `TimeoutCancellationException` or a custom one you pass to the `cancel`
    function, the exception will not be transmitted to the parent.
  prefs: []
  type: TYPE_NORMAL
- en: 'When handling coroutine exceptions, you can also use a single place to handle
    these exceptions with `CoroutineExceptionHandler`. `CoroutineExceptionHandler`
    is a coroutine context element that you can add to your coroutine to handle uncaught
    exceptions. The following lines of code show how you can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: The exceptions from the coroutines started from the scope will be handled by
    `exceptionHandler`, if it’s not handled wherever an error could occur, which will
    write the exception message to the logs.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try to add code to handle exceptions in your coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.02 – catching exceptions in your coroutines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will continue working on the application that displays
    on `TextView` a number from 100 and slowly decreases it down to 0\. You will be
    adding code to handle exceptions in the coroutine:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the countdown app you built in the previous exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go the `MainActivity` file and at the end of the countdown function, add the
    following to simulate an exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate a random number from 0 to 9 and if it’s 0, it will throw
    an exception. It will simulate the coroutine encountering an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Run the application. It will start to count down and some point later, it will
    throw the exception and crash the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Surround the code in your coroutine with a `try-catch` block to catch the exception
    in the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will catch the exception from the countdown function. The app will no longer
    crash but you will need to inform the user about the exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `catch` block, replace `//TODO` with `Snackbar` to display the exception
    message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will display a snackbar message with the text `An error occurred`, which
    is the message of the exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application again. It will start to count down but instead of crashing,
    a snackbar message will be displayed, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Snackbar displayed when the coroutine has encountered the exception'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.04_B17773_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Snackbar displayed when the coroutine has encountered the exception
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you updated your application so that it can handle exceptions
    in the coroutines instead of crashing.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned about coroutine exceptions and how you can
    catch them in your Android apps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about coroutine cancelations. You can cancel coroutines
    by using the `cancel` or `cancelAndJoin` function from the coroutine job or the
    `cancel` function from the coroutine scope.
  prefs: []
  type: TYPE_NORMAL
- en: You learned that a coroutine cancelation needs to be cooperative. You also learned
    how you can change your code to make your coroutine cancelable by using `isActive`
    checks or by using suspending functions from the `kotlinx.coroutines` package.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you learned about coroutine timeouts. You can set a timeout (in milliseconds
    or `Duration`) using `withTimeout` or `withTimeoutOrNull`.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned about coroutine exceptions and how to catch them. `try-catch`
    blocks can be used to handle exceptions. You can also use `CoroutineExceptionHandler`
    in your coroutine scope to catch and handle exceptions in a single location.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you worked on an exercise to add cancelation to a coroutine and another
    exercise to update your code to handle coroutine exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will dive into creating and running tests for the coroutines
    in your Android projects.
  prefs: []
  type: TYPE_NORMAL
