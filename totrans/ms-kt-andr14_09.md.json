["```kt\ncompose-navigation = \"androidx.navigation:navigation-compose:2.7.2\"\n```", "```kt\nimplementation(libs.compose.navigation)\n```", "```kt\nsealed class Screens(val route: String) {\n    object PetsScreen : Screens(\"pets\")\n    object PetDetailsScreen : Screens(\"petDetails\")\n}\n```", "```kt\n@Composable\nfun AppNavigation() {\n    val navController = rememberNavController()\n    NavHost(\n        navController = navController,\n        startDestination =  Screens.PetsScreen.route\n    ){\n        composable(Screens.PetsScreen.route){\n            PetsScreen()\n        }\n    }\n}\n```", "```kt\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun PetsScreen(onPetClicked: (Cat) -> Unit) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = \"Pets\")\n                },\n                colors =  TopAppBarDefaults.smallTopAppBarColors(\n                    containerColor = MaterialTheme.colorScheme.primary,\n                )\n            )\n        },\n        content =  { paddingValues ->\n            PetList(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(paddingValues),\n                onPetClicked = onPetClicked\n            )\n        }\n    )\n}\n```", "```kt\nChapterSevenTheme {\n    AppNavigation()\n}\n```", "```kt\n@OptIn(ExperimentalLayoutApi::class)\n@Composable\nfun PetDetailsScreenContent(modifier: Modifier) {\n    Column(\n        modifier = modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        AsyncImage(\n            model = \"https://cataas.com/cat/rV1MVEh0Af2Bm4O0\",\n            contentDescription = \"Cute cat\",\n            modifier = Modifier\n                .fillMaxWidth()\n                .height(200.dp),\n            contentScale = ContentScale.FillWidth\n        )\n        FlowRow(\n            modifier = Modifier\n                .padding(start = 6.dp, end = 6.dp)\n        ) {\n            repeat(2) {\n                SuggestionChip(\n                    modifier = Modifier\n                        .padding(start = 3.dp, end = 3.dp),\n                    onClick = { },\n                    label = {\n                        Text(text = \"Tag $it\")\n                    }\n                )\n            }\n        }\n    }\n}\n```", "```kt\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun PetDetailsScreen(onBackPressed: () -> Unit) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(text = \"Pet Details\")\n                },\n                colors =  TopAppBarDefaults.smallTopAppBarColors(\n                    containerColor = MaterialTheme.colorScheme.primary,\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = onBackPressed,\n                        content = {\n                            Icon(\n                                imageVector = Icons.Default.ArrowBack,\n                                contentDescription = \"Back\"\n                            )\n                        }\n                    )\n                }\n            )\n        },\n        content = { paddingValues ->\n            PetDetailsScreenContent(\n                modifier = Modifier\n                    .padding(paddingValues)\n            )\n        }\n    )\n}\n```", "```kt\ncomposable(Screens.PetDetailsScreen.route){\n    PetDetailsScreen(\n        onBackPressed = {\n            navController.popBackStack()\n        }\n    )\n}\n```", "```kt\n@OptIn(ExperimentalLayoutApi::class)\n@Composable\nfun PetListItem(cat: Cat, onPetClicked: (Cat) -> Unit) {\n    ElevatedCard(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(6.dp)\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(bottom = 10.dp)\n                .clickable {\n                    onPetClicked(cat)\n                }\n        ) {\n            AsyncImage(\n                model = \"https://cataas.com/cat/${cat.id}\",\n                contentDescription = \"Cute cat\",\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(200.dp),\n                contentScale = ContentScale.FillWidth\n            )\n            FlowRow(\n                modifier = Modifier\n                    .padding(start = 6.dp, end = 6.dp)\n            ) {\n              repeat(cat.tags.size) {\n                  SuggestionChip(\n                      modifier = Modifier\n                          .padding(start = 3.dp, end = 3.dp),\n                      onClick = { },\n                      label = {\n                          Text(text = cat.tags[it])\n                      }\n                  )\n              }\n            }\n        }\n    }\n}\n```", "```kt\n@Composable\nfun PetList(modifier: Modifier, onPetClicked: (Cat) -> Unit) {\n    // other code\n}\n```", "```kt\nPetListItem(\n    cat = pet,\n    onPetClicked = onPetClicked\n)\n```", "```kt\nPetsScreen(\n    onPetClicked = {\n        navController.navigate(Screens.PetDetailsScreen.route)\n    }\n)\n```", "```kt\n    @OptIn(ExperimentalLayoutApi::class)\n    @Composable\n    fun PetDetailsScreenContent(modifier: Modifier, cat: Cat) {\n        Column(\n            modifier = modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            AsyncImage(\n                model = \"https://cataas.com/cat/${cat.id}\",\n                contentDescription = \"Cute cat\",\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(200.dp),\n                contentScale = ContentScale.FillWidth\n            )\n            FlowRow(\n                modifier = Modifier\n                    .padding(start = 6.dp, end = 6.dp)\n            ) {\n                repeat(cat.tags.size) {\n                    SuggestionChip(\n                        modifier = Modifier\n                            .padding(start = 3.dp, end = 3.dp),\n                        onClick = { },\n                        label = {\n                            Text(text = cat.tags[it])\n                        }\n                    )\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @OptIn(ExperimentalMaterial3Api::class)\n    @Composable\n    fun PetDetailsScreen(onBackPressed: () -> Unit, cat: Cat) {\n        Scaffold(\n            topBar = {\n                TopAppBar(\n                    title = {\n                        Text(text = \"Pet Details\")\n                    },\n                    colors =  TopAppBarDefaults.smallTopAppBarColors(\n                        containerColor = MaterialTheme.colorScheme.primary,\n                    ),\n                    navigationIcon = {\n                        IconButton(\n                            onClick = onBackPressed,\n                            content = {\n                                Icon(\n                                    imageVector = Icons.Default.ArrowBack,\n                                    contentDescription = \"Back\"\n                                )\n                            }\n                        )\n                    }\n                )\n            },\n            content = { paddingValues ->\n                PetDetailsScreenContent(\n                    modifier = Modifier\n                        .padding(paddingValues),\n                    cat = cat\n                )\n            }\n        )\n    }\n    ```", "```kt\n    composable(\n        route = \"${Screens.PetDetailsScreen.route}/{cat}\",\n        arguments = listOf(\n            navArgument(\"cat\") {\n                type = NavType.StringType\n            }\n        )\n    ){\n        PetDetailsScreen(\n            onBackPressed = {\n                navController.popBackStack()\n            },\n            cat = Json.decodeFromString(it.arguments?.getString(\"cat\") ?: \"\")\n        )\n    }\n    ```", "```kt\n    composable(Screens.PetsScreen.route) {\n        PetsScreen(\n            onPetClicked = { cat ->\n                navController.navigate(\n                    \"${Screens.PetDetailsScreen.route}/${Json.encodeToString(cat)}\"\n                )\n            }\n        )\n    }\n    ```", "```kt\n    sealed interface NavigationType {\n        object BottomNavigation : NavigationType\n        object NavigationDrawer : NavigationType\n        object NavigationRail : NavigationType\n    }\n    ```", "```kt\n    sealed interface ContentType {\n        object List : ContentType\n        object ListAndDetail : ContentType\n    }\n    ```", "```kt\n    sealed class Screens(val route: String) {\n        object PetsScreen : Screens(\"pets\")\n        object PetDetailsScreen : Screens(\"petDetails\")\n        object FavoritePetsScreen : Screens(\"favoritePets\")\n    }\n    ```", "```kt\n    compose-window-size = \"androidx.compose.material3:material3-window-size-class:1.2.0-alpha07\"\n    androidx-window = \"androidx.window:window:1.1.0\"\n    ```", "```kt\n    implementation(libs.compose.window.size)\n    implementation(libs.androidx.window)\n    ```", "```kt\n    @Composable\n    fun PetsNavigationRail(\n        onFavoriteClicked: () -> Unit,\n        onHomeClicked: () -> Unit,\n        onDrawerClicked: () -> Unit\n    ) {\n        val items = listOf(Screens.PetsScreen, Screens.FavoritePetsScreen)\n        val selectedItem = remember { mutableStateOf(items[0]) }\n        NavigationRail(\n            modifier = Modifier\n                .fillMaxHeight()\n        ) {\n            NavigationRailItem(\n                selected = false,\n                onClick = onDrawerClicked,\n                icon = {\n                    Icon(\n                        imageVector = Icons.Default.Menu,\n                        contentDescription = \"Menu Icon\"\n                    )\n                }\n            )\n            NavigationRailItem(\n                selected = selectedItem.value == Screens.PetsScreen,\n                onClick = {\n                    onHomeClicked()\n                    selectedItem.value = Screens.PetsScreen\n                },\n                icon = {\n                    Icon(\n                        imageVector = Icons.Default.Home,\n                        contentDescription = \"Home Icon\"\n                    )\n                }\n            )\n            NavigationRailItem(\n                selected = selectedItem.value == Screens.FavoritePetsScreen,\n                onClick = {\n                    onFavoriteClicked()\n                    selectedItem.value = Screens.FavoritePetsScreen\n                },\n                icon = {\n                    Icon(\n                        imageVector = Icons.Default.Favorite,\n                        contentDescription = \"Favorite Icon\"\n                    )\n                }\n            )\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PetsBottomNavigationBar(\n        onFavoriteClicked: () -> Unit,\n        onHomeClicked: () -> Unit\n    ) {\n        val items = listOf(Screens.PetsScreen, Screens.FavoritePetsScreen)\n        val selectedItem = remember { mutableStateOf(items[0]) }\n        NavigationBar(\n            modifier = Modifier\n                .fillMaxWidth(),\n            containerColor = MaterialTheme.colorScheme.background\n        ) {\n            NavigationBarItem(\n                selected = selectedItem.value == Screens.PetsScreen,\n                onClick = {\n                    onHomeClicked()\n                    selectedItem.value = Screens.PetsScreen\n                },\n                icon = {\n                    Icon(\n                        imageVector = Icons.Default.Home,\n                        contentDescription = \"Home Icon\"\n                    )\n                }\n            )\n            NavigationBarItem(\n                selected = selectedItem.value == Screens.FavoritePetsScreen,\n                onClick = {\n                    onFavoriteClicked()\n                    selectedItem.value = Screens.FavoritePetsScreen\n                },\n                icon = {\n                    Icon(\n                        imageVector = Icons.Default.Favorite,\n                        contentDescription = \"Favorite Icon\"\n                    )\n                }\n            )\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PetsNavigationDrawer(\n        onFavoriteClicked: () -> Unit,\n        onHomeClicked: () -> Unit,\n        onDrawerClicked: () -> Unit = {}\n    ) {\n        val items = listOf(Screens.PetsScreen, Screens.FavoritePetsScreen)\n        val selectedItem = remember { mutableStateOf(items[0]) }\n        Column(\n            modifier = Modifier\n                .wrapContentWidth()\n                .fillMaxHeight()\n                .background(MaterialTheme.colorScheme.inverseOnSurface)\n                .padding(16.dp)\n        ) {\n            Row(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(16.dp),\n                horizontalArrangement = Arrangement.SpaceBetween,\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\n                    text = \"Chapter Seven\",\n                    style = MaterialTheme.typography.titleMedium,\n                    color = MaterialTheme.colorScheme.primary\n                )\n                IconButton(\n                    onClick = onDrawerClicked\n                ) {\n                    Icon(\n                        imageVector = Icons.Default.Menu,\n                        contentDescription = \"Navigation Drawer Icon\"\n                    )\n                }\n            }\n            NavigationDrawerItem(\n                label = { Text(text = \"Pets\") },\n                selected = selectedItem.value == Screens.PetsScreen,\n                onClick = {\n                    onHomeClicked()\n                    selectedItem.value = Screens.PetsScreen\n                },\n                icon = {\n                    Icon(\n                        imageVector = Icons.Default.Home,\n                        contentDescription = \"Home Icon\"\n                    )\n                }\n            )\n            NavigationDrawerItem(\n                label = { Text(text = \"Favorites\") },\n                selected = selectedItem.value == Screens.FavoritePetsScreen,\n                onClick = {\n                    onFavoriteClicked()\n                    selectedItem.value = Screens.FavoritePetsScreen\n                },\n                icon = {\n                    Icon(\n                        imageVector = Icons.Default.Favorite,\n                        contentDescription = \"Favorite Icon\"\n                    )\n                }\n            )\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun FavoritePetsScreen() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Text(text = \"Favorite Pets\")\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun AppNavigation(\n        contentType: ContentType,\n        navHostController: NavHostController = rememberNavController()\n    ) {\n        NavHost(\n            navController = navHostController,\n            startDestination = Screens.PetsScreen.route\n        ) {\n            composable(Screens.PetsScreen.route) {\n                PetsScreen(\n                    onPetClicked = { cat ->\n                        navHostController.navigate(\n                            \"${Screens.PetDetailsScreen.route}/${Json.encodeToString(cat)}\"\n                        )\n                    },\n                    contentType = contentType\n                )\n            }\n            composable(\n                route = \"${Screens.PetDetailsScreen.route}/{cat}\",\n                arguments = listOf(\n                    navArgument(\"cat\") {\n                        type = NavType.StringType\n                    }\n                )\n            ) {\n                PetDetailsScreen(\n                    onBackPressed = {\n                        navHostController.popBackStack()\n                    },\n                    cat = Json.decodeFromString(it.arguments?.getString(\"cat\") ?: \"\")\n                )\n            }\n            composable(Screens.FavoritePetsScreen.route) {\n                FavoritePetsScreen()\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PetsScreen(\n        onPetClicked: (Cat) -> Unit,\n        contentType: ContentType,\n    ) {\n        val petsViewModel: PetsViewModel = koinViewModel()\n        val petsUIState by petsViewModel.petsUIState.collectAsStateWithLifecycle()\n        PetsScreenContent(\n            modifier = Modifier\n                .fillMaxSize(),\n            onPetClicked = onPetClicked,\n            contentType = contentType,\n            petsUIState = petsUIState\n        )\n    }\n    ```", "```kt\n    @Composable\n    fun PetsScreenContent(\n        modifier: Modifier,\n        onPetClicked: (Cat) -> Unit,\n        contentType: ContentType,\n        petsUIState: PetsUIState\n    ) {\n        Column(\n            modifier = modifier\n                .padding(16.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            AnimatedVisibility(\n                visible = petsUIState.isLoading\n            ) {\n                CircularProgressIndicator()\n            }\n            AnimatedVisibility(\n                visible = petsUIState.pets.isNotEmpty()\n            ) {\n                if (contentType == ContentType.List) {\n                    PetList(\n                        onPetClicked = onPetClicked,\n                        pets = petsUIState.pets,\n                        modifier = Modifier\n                            .fillMaxWidth()\n                    )\n                } else {\n                    PetListAndDetails(\n                        pets = petsUIState.pets\n                    )\n                }\n            }\n            AnimatedVisibility(\n                visible = petsUIState.error != null\n            ) {\n                Text(text = petsUIState.error ?: \"\")\n            }\n        }\n    }\n    ```", "```kt\n        @Composable\n        fun PetList(\n            onPetClicked: (Cat) -> Unit,\n            pets: List<Cat>,\n            modifier: Modifier\n        ) {\n            LazyColumn(\n                modifier = modifier\n            ) {\n                items(pets) { pet ->\n                    PetListItem(\n                        cat = pet,\n                        onPetClicked = onPetClicked\n                    )\n                }\n            }\n        }\n        ```", "```kt\n        @Composable\n        fun PetListAndDetails(pets: List<Cat>) {\n            var currentPet by remember {\n                mutableStateOf(pets.first())\n            }\n            Row(\n                modifier = Modifier\n                    .fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceEvenly\n            ) {\n                PetList(\n                    onPetClicked = {\n                        currentPet = it\n                    },\n                    pets = pets,\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .weight(1f)\n                )\n                PetDetailsScreenContent(\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(16.dp)\n                        .weight(1f),\n                    cat = currentPet\n                )\n            }\n        }\n        ```", "```kt\n        @Composable\n        fun AppNavigationContent(\n            contentType: ContentType,\n            navigationType: NavigationType,\n            onFavoriteClicked: () -> Unit,\n            onHomeClicked: () -> Unit,\n            navHostController: NavHostController,\n            onDrawerClicked: () -> Unit = {}\n        ) {\n            Row(\n                modifier = Modifier\n                    .fillMaxSize(),\n            ) {\n                AnimatedVisibility(\n                    visible = navigationType == NavigationType.NavigationRail\n                ) {\n                    PetsNavigationRail(\n                        onFavoriteClicked = onFavoriteClicked,\n                        onHomeClicked = onHomeClicked,\n                        onDrawerClicked = onDrawerClicked\n                    )\n                }\n                Scaffold(\n                    content = { paddingValues ->\n                        Column(\n                            modifier = Modifier\n                                .fillMaxSize()\n                                .padding(paddingValues)\n                        ) {\n                            AppNavigation(\n                                contentType = contentType,\n                                navHostController = navHostController\n                            )\n                        }\n                    },\n                    bottomBar = {\n                        AnimatedVisibility(\n                            visible = navigationType == NavigationType.BottomNavigation\n                        ) {\n                            PetsBottomNavigationBar(\n                                onFavoriteClicked = onFavoriteClicked,\n                                onHomeClicked = onHomeClicked\n                            )\n                        }\n                    }\n                )\n            }\n        }\n        ```", "```kt\n        sealed interface DeviceFoldPosture {\n            data class BookPosture(val hingePosition: Rect) : DeviceFoldPosture\n            data class SeparatingPosture(\n                val hingePosition: Rect,\n                val orientation: FoldingFeature.Orientation\n            ) : DeviceFoldPosture\n            object NormalPosture : DeviceFoldPosture\n        }\n        @OptIn(ExperimentalContracts::class)\n        fun isBookPosture(foldFeature: FoldingFeature?): Boolean {\n            contract { returns(true) implies (foldFeature != null) }\n            return foldFeature?.state == FoldingFeature.State.HALF_OPENED &&\n                    foldFeature.orientation == FoldingFeature.Orientation.VERTICAL\n        }\n        @OptIn(ExperimentalContracts::class)\n        fun isSeparating(foldFeature: FoldingFeature?): Boolean {\n            contract { returns(true) implies (foldFeature != null) }\n            return foldFeature?.state == FoldingFeature.State.FLAT && foldFeature.isSeparating\n        }\n        ```", "```kt\n        val deviceFoldingPostureFlow = WindowInfoTracker.getOrCreate(this).windowLayoutInfo(this)\n            .flowWithLifecycle(this.lifecycle)\n            .map { layoutInfo ->\n                val foldingFeature =\n                    layoutInfo.displayFeatures\n                        .filterIsInstance<FoldingFeature>()\n                        .firstOrNull()\n                when {\n                    isBookPosture(foldingFeature) ->\n                        DeviceFoldPosture.BookPosture(foldingFeature.bounds)\n                    isSeparating(foldingFeature) ->\n                        DeviceFoldPosture.SeparatingPosture(\n                            foldingFeature.bounds,\n                            foldingFeature.orientation\n                        )\n                    else -> DeviceFoldPosture.NormalPosture\n                }\n            }\n            .stateIn(\n                scope = lifecycleScope,\n                started = SharingStarted.Eagerly,\n                initialValue = DeviceFoldPosture.NormalPosture\n            )\n        ```", "```kt\n        val devicePosture = deviceFoldingPostureFlow.collectAsStateWithLifecycle().value\n        val windowSizeClass = calculateWindowSizeClass(activity = this)\n        val scope = rememberCoroutineScope()\n        val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\n        val navController = rememberNavController()\n        ```", "```kt\n        val navigationType: NavigationType\n        val contentType: ContentType\n        when (windowSizeClass.widthSizeClass) {\n            WindowWidthSizeClass.Compact -> {\n                navigationType = NavigationType.BottomNavigation\n                contentType = ContentType.List\n            }\n            WindowWidthSizeClass.Medium -> {\n                navigationType = NavigationType.NavigationRail\n                contentType = if (devicePosture is DeviceFoldPosture.BookPosture\n                    || devicePosture is DeviceFoldPosture.SeparatingPosture\n                ) {\n                    ContentType.ListAndDetail\n                } else {\n                    ContentType.List\n                }\n            }\n            WindowWidthSizeClass.Expanded -> {\n                navigationType = if (devicePosture is DeviceFoldPosture.BookPosture) {\n                    NavigationType.NavigationRail\n                } else {\n                    NavigationType.NavigationDrawer\n                }\n                contentType = ContentType.ListAndDetail\n            }\n            else -> {\n                navigationType = NavigationType.BottomNavigation\n                contentType = ContentType.List\n            }\n        }\n        ```", "```kt\n        if (navigationType == NavigationType.NavigationDrawer) {\n            PermanentNavigationDrawer(\n                drawerContent = {\n                    PermanentDrawerSheet {\n                        PetsNavigationDrawer(\n                            onFavoriteClicked = {\n                                navController.navigate(Screens.FavoritePetsScreen.route)\n                            },\n                            onHomeClicked = {\n                                navController.navigate(Screens.PetsScreen.route)\n                            }\n                        )\n                    }\n                }\n            ) {\n                AppNavigationContent(\n                    navigationType = navigationType,\n                    contentType = contentType,\n                    onFavoriteClicked = {\n                        navController.navigate(Screens.FavoritePetsScreen.route)\n                    },\n                    onHomeClicked = {\n                        navController.navigate(Screens.PetsScreen.route)\n                    },\n                    navHostController = navController\n                )\n            }\n        }\n        ```", "```kt\n        else {\n          ModalNavigationDrawer(\n              drawerContent = {\n                  ModalDrawerSheet {\n                      PetsNavigationDrawer(\n                          onFavoriteClicked = {\n                              navController.navigate(Screens.FavoritePetsScreen.route)\n                          },\n                          onHomeClicked = {\n                              navController.navigate(Screens.PetsScreen.route)\n                          },\n                          onDrawerClicked = {\n                              scope.launch {\n                                  drawerState.close()\n                              }\n                          }\n                      )\n                  }\n              },\n              drawerState = drawerState\n          ) {\n              AppNavigationContent(\n                  navigationType = navigationType,\n                  contentType = contentType,\n                  onFavoriteClicked = {\n                      navController.navigate(Screens.FavoritePetsScreen.route)\n                  },\n                  onHomeClicked = {\n                      navController.navigate(Screens.PetsScreen.route)\n                  },\n                  navHostController = navController,\n                  onDrawerClicked = {\n                      scope.launch {\n                          drawerState.open()\n                      }\n                  }\n              )\n          }\n        }\n        ```"]