- en: Chapter 5. Posting on Walls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will implement the UI and the logic to enable the application
    to post on the current users' and their friends' walls.
  prefs: []
  type: TYPE_NORMAL
- en: We will start implementing the user interface that will allow the user to review
    the information to be posted before actually sending the data to the Facebook
    Platform. We will define the step to post on the current user's wall and customize
    the post dialog.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to tag friends on posts, add context to posts (for example,
    location), and upload pictures on the Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Post Dialog interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a post on the Facebook Platform means publishing an action on the Facebook
    News Feed. This can be done using the Open Graph API, which is available in Facebook
    SDK 2.x, versus the new Native or Web Dialogs with Version 3.x of the framework.
    Note that you can still use Open Graph APIs to publish on your Feed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to post on the Facebook News Feed, we first need to ask the user for
    permission to write on their feed; more specifically, `publish_actions`. Once
    the application is granted permission, we can use the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FBNativeDialogs`: This is used to provide a native user interface. It is available
    on iOS 6 and above with a Facebook account set up on the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FBWebDialogs`: This is used to present Web Dialogs to publish on Open Graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native Dialogs are the ideal choice to share information on the Platform because
    they require less code to write and offer more out-of-the-box features; for example,
    location tags and privacy settings (see the following screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/kfNmAJlN.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Feed Share dialog
  prefs: []
  type: TYPE_NORMAL
- en: The previous screenshot shows a Native Dialog with feed content and also offers
    the ability to tag the current location through the **Add Location** button and
    change the privacy settings using the **Friends** button.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the book model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting to implement the actual share functionality, we need a way to
    pass the information from `LBViewController`, the book info controller, to the
    Facebook View Controller. In order to pass that information, we are going to create
    a new model class. Model is the type of class that is used to store information
    with no logic associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new model class, right-click on the main folder (aka `Group`) in
    Project Navigator, create a new group, and name it `models`. Right-click on `models`
    and create a new file. Choose the **Objective-C** class and set the **Class**
    field as `LBBook`, subclass of `NSObject`. Save these settings and we will have
    our new `LBBook` class in the `models` group. The following screenshot shows the
    project structure after creating the new `model` book class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/F6f7U6Th.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Project structure after adding the LBBook class
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to populate the `model` class with the necessary properties to contain
    the book''s information. We need the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Title`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Author`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Review`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Score`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the `LBBook.h` file and add the preceding properties as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We do not need to customize the `LBBook.m` file. As mentioned before, we are
    going to use this class only as a container. No more coding is required for this
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Passing information between controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to collect the user inputs though the `LBViewController` interface.
    We can proceed following two different approaches. The first will require creating
    a reference for each of the UI input components in `LBViewController` and collecting
    the data when the user clicks on the **Go Social** button. The other technique
    will require updating the book information every time the user edits the book
    information through the interface. Both techniques need to have an instance of
    the `LBBook` class as a private property of the `LBViewController`. We are going
    to pursue the first approach and collect all information as the user clicks on
    the **Go Social** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `LBViewController.m` and import the `LBBook.h` file. The new book property
    will be private; therefore, edit the interface statement by adding the code as
    shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to collect the book information provided by the user, we need to have
    references for each of the UI components in the `LBViewController.m` interface
    statement. To create these references, open Storyboard and select **Book Scene**.
    Open `LBViewController.m` as a file in the Assistant Editor window. Drag-and-drop
    each of the UI input controls within the `interface` statement to create a reference
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As we already anticipated, we are going to collect the book information from
    the view after the user clicks on the **Go Social** button. We need to create
    a method to bind the button event. For the book scene, press and hold the *Ctrl*
    button and drag-and-drop the button within the `implementation.m` statement in
    the `LBViewController` file to create a handler method. Set the name of the new
    method as `onGoSocialClick`.
  prefs: []
  type: TYPE_NORMAL
- en: Within the new method, we need to collect the book information and populate
    the `LBBook` instance with such information. We first need to check if the book
    property is already initialized; if it is not, we need to take care of it. For
    each of the UI inputs, we are going to set the corresponding property in the `book`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet shows the final version of the `onGoSocialClick`
    method. Before setting any of the book properties, we need to check whether the
    corresponding UI input field is different from NIL; if so, we use an empty string.
    We should perform some sort of validation on the data provided; for example, the
    book title should not be empty. We are going to implement validation before posting
    the book information on the user's wall.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the book variable populated with the current information provided
    by the user, we need to create a similar property in `LBFacebookViewController.h`
    but accessible from other classes. Using this approach, `LBViewController` can
    update book properties on `LBFacebookViewController` and the post methods will
    have access to such data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `LBFacebookViewController.h` and create a new `LBBook` property. This
    time the property will not be defined as `strong`, since we already have a `strong`
    reference to the same memory, but as `weak`. Memory management is out of the scope
    of this book. If you have any trouble understanding the `weak`/`strong` concept,
    you can take a look at the ARC documentation provided by Apple, which can be found
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html](http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to focus on passing the book object from `LBViewController` to `LBFacebookViewController`.
    We are going to use the segue that links the book scene with Facebook and overrides
    the segue handler method in `LBViewController`. First we need to define an identifier
    for the segue. Open Storyboard and select the segue between the book and the Facebook
    Scene. Open the Utilities Panel and within Attribute Inspector set the identifier
    for the segue as `GoSocialSegue`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the segue, we can pass data from the source to the destination controller,
    which is exactly what we are going to do. Each time a segue is performed, the
    application calls a method in the source controller that can be overridden at
    our own convenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `LBFacebookViewController.m` and override the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the current segue has the `GoSocialSegue` identifier, we can set the destination
    controller book property with the current `book` property defined in `LBViewController`.
    The following code snippet shows the code for the preceding method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we double-check the segue destination `viewController`
    class type and set the `book` property with the current one.
  prefs: []
  type: TYPE_NORMAL
- en: We are now able to pass book information from one controller to another.
  prefs: []
  type: TYPE_NORMAL
- en: Feed Share Dialogs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the book information stored in `LBFacebookViewController`,
    we can create the Native and Web Feed dialogs in order to share information on
    the user's wall.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting the implementation of the Feed Dialogs, we need to ask the user
    for `publish_action` permissions. When the application is granted publishing permissions,
    we can focus on the dialogs' implementation.
  prefs: []
  type: TYPE_NORMAL
- en: We will use both Native and Web Dialogs to publish on a user's timeline.
  prefs: []
  type: TYPE_NORMAL
- en: Upload action permission
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to check if our application has been granted publish action permissions
    every time the user is trying to create a new Feed on the Platform.
  prefs: []
  type: TYPE_NORMAL
- en: We need to create a new button that will allow the user to create a new Feed
    and send the current book information to Open Graph. The current Facebook Scene
    layout doesn't easily allow adding new components but we can always rearrange
    UI components in a different way. Open Storyboard and rearrange the Facebook Scene.
    The next picture shows the new Facebook scene layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/coVtgD7e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The new Facebook Scene layout
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding screenshot, we can see that the profile picture, name, and
    e-mail labels are smaller and in different positions. Now drag-and-drop a new
    button above the **Friends** button and name it `Book on Feed`. The following
    screenshot shows the Facebook Scene with the new button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/g381pgNM.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Book on Feed button
  prefs: []
  type: TYPE_NORMAL
- en: This button should behave exactly like the **Friends** button; it will only
    be activated after the user logs in successfully; therefore, we need a reference
    of the button within the `LBFacebookViewController.m` file's `interface` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rVfaTdd3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Book on Feed button reference
  prefs: []
  type: TYPE_NORMAL
- en: We need to map the **Book on Feed** button's click event with a new method.
    Open Assistant Editor and with the `LBFacebookViewController.m` file open, hold
    the *Ctrl* button and create a connection within the `implementation` statement
    inside the file. This will allow the user to publish the current book information
    on News Feed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/qoGgPgQz.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Book on Feed button's click handler reference
  prefs: []
  type: TYPE_NORMAL
- en: As we already anticipated, we need to ask the user for permission to publish
    on their News Feed. Asking for publishing permissions is pretty easy; we only
    need to call a method from the `FBSession` object. The `FBSession` object is a
    singleton component that keeps track of the current user's Facebook session status.
    The `FBLoginView` component interacts with `FBSession` every time the user logs
    in and out in order to keep the session up to date; therefore, we can use this
    session object to perform any request after the user has successfully logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Within the `onBookOnFeedClick` method, a publish action permission request will
    be sent to the user and the user's response will be saved on the Facebook Platform.
    Based on the user's response, the application will continue posting the current
    book information or display a message that alerts the user to the missing permission.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding screenshot shows how to check whether the application is already
    granted `publish_action` permission. If not, we will perform a request for publishing
    permission using the currently active Facebook sessions. When we ask for publish
    action permissions, we also need to define the audience for the new post; for
    example, `FBSessionDefaultAudienceEveryone`. The types of audience values we can
    set are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FBSessionDefaultAudienceNone`: This defines only Facebook Platform as the
    audience. No other users have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FBSessionDefaultAudienceOnlyMe`: This defines the current user only as the
    audience for the new story.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FBSessionDefaultAudienceFriends`: This defines the user''s friends as the
    audience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FBSessionDefaultAudienceEveryone`: This defines the current post as public.
    Everyone can read it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `completionHandler` method checks whether the user has given permission
    for the current action. If permission was given, the application will prompt a
    window interface with the new post information using the `publishCurrentBook`
    method, which will be discussed later in the Facebook and Native sections of this
    chapter. If the user doesn''t grant permissions, we will have to show an alert
    message through `showDeniedPermissionAlertMessage`. The following code snippet
    demonstrates the usage of the `showDeniedPermissionAlertMessage` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Facebook Web Dialogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Web Dialog class was introduced with Version 3 of the Facebook iOS SDK.
    For more details, visit [https://developers.facebook.com/docs/reference/ios/3.6/class/FBWebDialogs/](https://developers.facebook.com/docs/reference/ios/3.6/class/FBWebDialogs/).
  prefs: []
  type: TYPE_NORMAL
- en: This type of dialog is supported across all iOS versions and without setting
    a Facebook account on the current device.
  prefs: []
  type: TYPE_NORMAL
- en: Web Dialog is a useful component to show the Feed Dialog that will allow users
    to publish a story to a profile's timeline. For more details on this, visit [https://developers.facebook.com/docs/reference/dialogs/feed/](https://developers.facebook.com/docs/reference/dialogs/feed/).
  prefs: []
  type: TYPE_NORMAL
- en: '`FBWebDialogs` provides static methods to publish information on the timeline
    and sends requests to friends.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this part of the book, we are going to explore the implantation of the following
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We are going to use the current Facebook open session and the book information
    to populate the input parameters for the preceding method.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new method in the `LBFacebookViewController.m` file named `displayWebPostDialog`
    with `dictionary` as the input parameter. The following code snippet demonstrates
    the implementation of this method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When we call the static method `presentFeedDialogModallyWithSession`, the application
    will show the user a window with post information, similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/W39kwaeg.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Post on the Timeline Dialog
  prefs: []
  type: TYPE_NORMAL
- en: The missing piece now is to understand which part of the code is calling `displayWebPostDialog`
    and passing the right information to populate the Facebook Web Dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Create the `publishCurrentBook` method within the `LBFacebookViewController.m`
    file. For now, the method will create the dictionary for the Web Dialog information
    populated with the book data and invoke the `displayWebPostDialog` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `publishCurrentBook` method reads the book information from the internal
    property book that was initialized by `onGoSocialSegue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The book fields will be used to populate the Web Dialog information. The following
    screenshot shows the map between the dictionary keys and the Web Dialog interface
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Yn7X7YMS.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Web dialog with book information
  prefs: []
  type: TYPE_NORMAL
- en: 'The user will be able to add more information through the textbox and be able
    to confirm or cancel the story. The following screenshot shows the story on Facebook''s
    Timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/PZwuQHRt.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A user post on the Timeline
  prefs: []
  type: TYPE_NORMAL
- en: Publishing on a friend's wall
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to give the user the ability to choose which Facebook wall to post the
    story on, updating the UI and the logic. The **Book on Feed** button will trigger
    a UI alert message that will let us choose which Wall to use instead of trying
    to post the story. The feature to publish on a friend's Wall will only be available
    using `FBWebDialogs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new method, `checkForPublishPermissionAndPublish`, within `LBFacebookViewController.m`.
    Move the content from the `onBookOnFeedClick` method to the new method just created.
    The following code shows the new method body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We need to create the `UIAlertMessage` interface to allow the user to choose
    between Walls. In order to catch the user's response on the `UIAlertMessage` interface,
    we need to set `LBFacebookViewController` as `UIAlertViewDelegate`. The following
    code snippet shows the new delegate extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Modify `onBookOnFeedClick` to display the alert message to the user as displayed
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we are giving the user the option to choose between
    their wall or their friend''s wall:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/kmU18Oju.jpg)'
  prefs: []
  type: TYPE_IMG
- en: UIAlertMessage – Wall options
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to track a user''s choice, we will use two private properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@property BOOL myWall`: This keeps track of which wall to post to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@property (strong, nonatomic) id&lt;FBGraphUser&gt; selectedFriend`: This
    keeps track of which friend is currently selected. We will use this object to
    extract the Facebook user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the above variables within the `LBFacebookViewController.m` file.
  prefs: []
  type: TYPE_NORMAL
- en: Set the `myWall` variable as `false` within `viewDidLoad`. The `selectedFriend`
    variable will be set after clicking on the **Done** button in the **Friend Picker**
    component after the user chooses to post on a friend's wall.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to create the `UIAlertViewMessage` delegate method to catch the
    user''s response and choose the right Wall to post to, as displayed in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `clickButtonAtIndex` `UIAlertViewDelegate` method was purposefully not overwritten.
    If the application were to try to run a modal view controller while the alert
    message is still visible, nothing would be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: If the user clicks on the **mine** button, the application sets the `myWall`
    variable to `true`. This will show the post view controller and will let the user
    publish the new story on his or her own Wall.
  prefs: []
  type: TYPE_NORMAL
- en: If the user clicks on **cancel** to cancel the operation, we will set the `myWall`
    property to a `true` value and dismiss the alert message.
  prefs: []
  type: TYPE_NORMAL
- en: When a user clicks on the **friend's** button, the application will set the
    `myWall` property to `false` and `LBFriendPickerViewController` will be shown
    to the user in order to select a friend.
  prefs: []
  type: TYPE_NORMAL
- en: The following code snippet shows the implementation of a new function, `showFriendPickerViewControllerWithMultiSelection`,
    that will show the friend picker view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method takes a Boolean value as input to enable or disable multiple
    selections. We will disable `multiSelection` when the user is trying to post a
    new story to a friend's wall.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `onFriendsClick` using the new method created in the preceding code;
    see the output in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We now need to update the `facebookViewControllerDoneWasPressed` delegate method
    in order to retrieve which user was selected and store the reference to `self.selectedFriend`.
    The application will only let the user post on a single friend's wall. Once the
    delegate method is called, we can easily check if a friend selection was made
    and post to a friend's wall. The following code snippet demonstrates the usage
    of the new delegate method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If the `friendPickerViewController` selection array has at least one selection,
    we set the property `self.selectedFriend` with the first object in the friend's
    list selection. If more than one selection is returned, we reset the `self.myWall`
    property to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: When `LBFriendPickerViewController` is dismissed, we will show the publish interface
    with the friend's name as receiver of the new story if the `self.myWall` property
    is set to `false`; otherwise it shows nothing.
  prefs: []
  type: TYPE_NORMAL
- en: The last step to perform is to add the wall recipient to the publish story interface.
    Update the `publishCurrentBook` method to check the `self.myWall` property. If
    that property is set to `false`, it means that the user is trying to post on a
    friend's wall. Therefore, we need to collect the friend's Facebook ID using the
    `self.selectedFriend` property. That information needs to be added to the information
    previously defined for the `displayWebDialod` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet shows how the application set the parameter `to`
    using the friend's Facebook ID. This will change the receiver of the new story.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/yA11XMbg.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FBWebDialog – posting on a friend's Wall
  prefs: []
  type: TYPE_NORMAL
- en: Facebook Native Dialogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We mentioned several times that Apple introduced Facebook integration for iOS6
    and later versions. With this version of iOS SDK, Facebook engineers introduced
    native components to interact with the Platform; for example, `FBNativeDialogs`.
    The Framework native components are based on `SLComposeViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: The `FBNativeDialog` provides a better user interface and interaction but has
    some limitations. For example, currently `FBNativeDialog` is not able to post
    on a friend's wall.
  prefs: []
  type: TYPE_NORMAL
- en: First, as we already anticipated previously, the current iOS device needs to
    have a Facebook account set in order to use the native components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new method, `displayNativePostDialog`, as demonstrated in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method returns `true` when the current iOS device has a Facebook
    account associated with it. This method uses an image for the new story. You can
    drag-and-drop an image to your current project and reference it using the `imageNamed`
    method. You can also use the iOS APIs to acquire pictures from the camera or the
    media library. It is also possible to upload several pictures using their URLs.
    For more details on Facebook Native Dialogs, see [https://developers.facebook.com/docs/reference/ios/3.6/class/FBNativeDialogs/](https://developers.facebook.com/docs/reference/ios/3.6/class/FBNativeDialogs/).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to invoke the `displayNativeDialog` method within `publishCurrentBook`
    as a first instruction. If that method returns `false`, meaning no Facebook integration
    on the current device, we will call `displayWebDialog`. The new `publishCurrentBook`
    method looks like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows how the Native Share Dialog looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ZutbOLYU.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Native Share dialog
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the Native Dialog with an image set through the
    `displayWebDialog` code to the left. The Native Dialog offers the ability to change
    the audience by clicking on the **Friends** button and pass information about
    the current location of the user clicking on **Add Location**. We can also associate
    a Facebook album to the picture that we are going to upload.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ht6Lv6oX.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Story updated using Facebook's Native Share dialog
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the story updated using the Facebook Native dialog.
    Unfortunately, the post doesn't report the name of our social application and
    part of the book's information.
  prefs: []
  type: TYPE_NORMAL
- en: In order to increase the visibility of our application on Facebook Platform,
    we should definitely opt for the Web dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned how to use the two important components of the new
    Facebook SDK, Native and Web dialogs. We used both components to post on a user's
    or their friend's wall. We learned to ask and check for public permission before
    performing the publish action. We also implemented a way to publish information
    on users' News Feeds.
  prefs: []
  type: TYPE_NORMAL
- en: An important part of this chapter focused on how to use Storyboard to create
    a social posting interface and pass information between view controllers.
  prefs: []
  type: TYPE_NORMAL
- en: The Web dialog is definitely recommended if we want to customize user experience
    and, of course, promote our application on users' feeds.
  prefs: []
  type: TYPE_NORMAL
