- en: Chapter 5. Connecting your Apps with Social Media and E-mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Composing and sending an e-mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding attachments to an e-mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a custom Facebook application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Facebook into your Titanium App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting on your Facebook wall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to Twitter using OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading an image using PHP and HttpRequest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending a tweet through Birdhouse and OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once thought to be the domain of the geeky Gen Y, social media has grown exponentially
    over the past few years into the hottest area of the web. Facebook now has over
    500 million users worldwide, twice the population of the United States! Twitter
    was once the place where you'd hear about what someone had just eaten for breakfast,
    now it's the first place many people go to for breaking news. The rise of smartphones
    and mobile applications has hastened the growth of these social networking services
    as online socializing is no longer confined to a desktop. People can be seen using
    Facebook and Twitter, among other services, while on the train, in their cars,
    and pretty much anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: It's because these services are so ubiquitous that many people now expect them
    to be a standard service from within an application. A simple app, such as one
    that lists RSS feeds from news sites, is made that much more useful when the user
    can tweet, post, or e-mail articles at the touch of a button. In this chapter,
    we will begin with the original social communication medium, e-mail, before continuing
    to show you how to integrate the world's largest social networking services, Facebook
    and Twitter, into your application.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-requisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should already be familiar with Titanium basics, including creating UI objects
    and using Titanium Studio. Additionally, to test functionality, you are going
    to need an account from Twitter and an account from Facebook. You will also need
    to have an e-mail account set up on your iPhone or Android device.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can signup for Facebook free of charge at: [http://www.facebook.com](http://www.facebook.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can sign up for Twitter free of charge at: [http://twitter.com](http://twitter.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google provides free e-mail services that are easily set up on both iPhone
    and Android. You can sign up at: [http://www.google.com/mail](http://www.google.com/mail)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this entire chapter can be found in `/Chapter 5/PhotoShare`.
  prefs: []
  type: TYPE_NORMAL
- en: Composing and sending an e-mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to start this chapter with the simplest form of social communication,
    both in terms of use and in terms of development—e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: If you are intending to follow the entire chapter and build the PhotoShare app
    then pay careful attention to the first *Getting ready* section for this recipe,
    as it will guide you through setting up the project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for this recipe, open up Titanium Studio and log in if you have not
    already done so. If you need to register a new account, you can do so for free
    directly from within the application. Once you are logged in, click on New Project,
    and the details window for creating a new project will appear. Enter in `PhotoShare`
    as the name of the app, and fill in the rest of the details with your own information.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our project has now been created using Titanium Studio. Let''s get down to
    business! Open up the `app.js` file in your editor and remove all existing code.
    After you have done that, type in the following and then hit save:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code lays out our basic application and integrates a simple photo
    gallery selector, much as we did in the previous chapter ([Chapter 4](ch04.html
    "Chapter 4. Enhancing your Apps with Audio, Video, and the Camera"), *Enhancing
    your Apps with Audio, Video, and the Camera)*. We will now create a new button
    which will call a function to create and display the e-mail dialog when tapped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once you have completed typing in your source code, run your app in the simulator
    or on your device. You should be able to select an image from the photo gallery,
    and then type in a title and message for your e-mail using the text fields. This
    will happen before clicking on the `buttonEmail` object to launch the e-mail dialog
    window with your message and title attached. Note that if you are using the simulator
    and you don't have some photos in the gallery already, the best way to obtain
    some is by visiting [http://images.google.com](http://images.google.com) in mobile
    Safari, and searching for images. You can then save them to the photo gallery
    on the simulator by clicking on and holding the image until the **Save Image**
    pop-up appears.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968EXP_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first block of code is creating our layout view with a single window and
    a number of basic components, all of which has already been covered in chapters
    1 through 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'The EmailDialog itself is created using the `Titanium.UI. createEmailDialog()`
    method and only requires a few simple parameters in order to be able to send a
    basic e-mail message. The `subject, messageBody` and `toRecipients` parameters
    are standard e-mail fields. While it is not necessary to provide these fields
    in order to launch an e-mail dialog, you will normally provide at least one or
    two of these as a matter of course. While the `subject` and `messageBody` fields
    are both simple strings, it should be noted that the `toRecipients` parameter
    is actually a basic array. You can add multiple recipients by simply adding another
    array parameter. For example, if we chose to send our e-mail to two different
    users, we could write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add BCC or CC recipients in the same manner, using the `ccRecipients`
    and `bccRecipients` methods of the e-mail dialog respectively. Finally, we launch
    the e-mail dialog using the `open()` method, at which point you should see something
    like the following standard e-mail dialog appear in your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3968EXP_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One more thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the e-mail dialog''s event listener, *complete*, in order to tell
    when an e-mail has been successfully sent or not. The `result` property in your
    event handler will provide you with the status of your e-mail, which will be one
    of the following strings:'
  prefs: []
  type: TYPE_NORMAL
- en: CANCELLED (iOS only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FAILED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SENT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAVED (iOS only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding attachments to an e-mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have a basic e-mail dialog up and running, but ideally what we want to
    do is attach the photo that we selected from our photo gallery to our new e-mail
    message. Luckily for us, Titanium makes this easy by exposing a method, `addAttachment()`,
    that accepts a local path of the file we want to attach.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding an attachment is usually as simple as passing the `addAttachment()`
    method of the e-mail dialog and the location of the file or blob you wish to attach,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Our case is a bit trickier than this though. In order to successfully attach
    our chosen image, we need to first save it temporarily to the file system, and
    then pass the file system path to `addAttachment()`. Alter your `postToEmail`
    function to match the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see from the code, an attachment can be added to your e-mail dialog
    as a blob object, a file, or from a file path. In our example, we are saving the
    image from our photo gallery to a temporary file first, before adding it to the
    e-mail dialog, in order to have it displayed as a proper image attachment (as
    seen in the following screenshot). You can also call the `addAttachment` method
    multiple times. However, be aware that multiple attachments are currently only
    supported on the iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3968EXP_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a custom Facebook application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating Facebook into your Titanium application may seem like a daunting
    prospect at first. However, once you understand the steps necessary you will see
    it's not really too hard at all! Before you can allow users to post or retrieve
    Facebook content from your mobile app, you will first need to set-up an application
    on Facebook itself. This application will provide you with the necessary API keys
    you need before the user can authorize your mobile application to post and get
    content on their behalf.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, you will need to log in to Facebook using the e-mail address and password
    you signed up with. If you do not have a Facebook account, you will need to create
    one for the first time. Don''t worry though as it is completely free! You will
    then need to add the **Developer App** to your Facebook account. You can do this
    by simply searching for `Developer` in the search bar, and then clicking on through
    until it is added to your account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968EXP_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have the Developer application added to your account and loaded, simply
    click on the **Set Up New App** button on the Developer homepage. The **Create
    Application** screen will then appear, allowing you to give your application a
    name and requesting that you agree to Facebook''s terms and conditions before
    proceeding. We have called our app `PhotoShare Titanium`, however, you may use
    whatever name you wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968EXP_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the next screen that appears, give your application a description and fill
    in the other requested fields as required. When you have finished, simply save
    your changes. The final screen in the process provides us with the all important
    information we need in order to connect our Titanium application to the Facebook
    API. There are three important values here you are going to need in the next recipe,
    so be sure to write them down somewhere safe!
  prefs: []
  type: TYPE_NORMAL
- en: 'These fields are:'
  prefs: []
  type: TYPE_NORMAL
- en: Application ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App Secret
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968EXP_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Integrating Facebook into your Titanium App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a Facebook application set up, we can get down to connecting
    our Titanium application to it. Luckily for us, Appcelerator has integrated Facebook's
    new Graph API tightly into Titanium from version 1.6.0 onwards, so connecting
    and publishing to the Facebook platform is quite easy!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    4` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we need to do is create a new button which will authorize our
    Titanium app to publish data on our user''s behalf. Enter in the following code
    in your `app.js` file to create a new button underneath the existing **email user**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now select an image and click on the Facebook button. If you entered in your
    client ID correctly (which you would have obtained by following the previous recipe)
    then you should see a login window open up and connect to the Facebook website,
    showing your application and the permissions it is requesting, as shown in the
    following example screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968EXP_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're creating a function that provides Facebook functionality to our application,
    and allows us to log in to Facebook and let the user accept the permissions we
    require in order to post to their wall. This function allows us to authenticate
    against the Facebook API using the App ID that we created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: This authorization, when successful, allows the user to log in and agree to
    your request to use certain permissions against their Facebook account. A successful
    authorization will return and save a Facebook Token. This token is essentially
    a random string that contains all of the user ID and permission data we will need
    to execute Facebook Graph requests against the authorized user's account. A successful
    login will set the `Titanium.Facebook.loggedIn` variable to true, and in the next
    recipe, we will extend our `postToFacebook` function, using this variable as part
    of a request to post our chosen photo to our Facebook wall.
  prefs: []
  type: TYPE_NORMAL
- en: Posting on your Facebook wall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are able to authenticate against Facebook, it's time to post a photo
    from the gallery to our wall! To achieve this, we need to use Facebook's Graph
    API, making a call to the correct graph function, with the correct permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    5` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s extend our new `postToFacebook()` function by writing a new if-else
    statement which will take a couple of parameters and execute a Graph request against
    the Facebook API. Extend the `postToFacebook()` function in `app.js`, so that
    it matches the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now run the application in your emulator or device. If you post an image successfully,
    you should end up seeing an alert dialog appear in your app, the ID of the new
    image object from the graph API appear in your developer console, and the photo
    appear as a post on your Facebook wall!
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968EXP_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We extended the `postToFacebook()` function that we created in our previous
    recipe, updating it to first log in to the Facebook API, and then on subsequent
    post attempts to send a graph request along with a photo to our Facebook Wall.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now use Facebook''s Graph API (encapsulated in our new `graphRequest`
    function) to execute our request, passing it the session token we retrieved from
    the authentication dialog in the previous recipe, along with the name of the graph
    method we want to call (`me/photos`), and the data properties that method requires.
    In the case of the `me/photos` method, these two properties are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**caption:** A string value which will accompany our image file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**picture:** A blob/image containing our image data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the Graph API and the Facebook login and post function which we have
    built, it is possible to execute any kind of graph request in your app that Facebook
    (and your user permissions) will allow. The following screenshot shows an example
    post:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3968EXP_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connecting to Twitter using OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Appcelerator doesn't currently provide an integrated method of connecting to
    Twitter in your Titanium applications. However, there are plenty of other options
    available. One of the best libraries is provided by Joe Purcell and is called
    "Birdhouse". In this recipe we are going to set up a Twitter application online,
    get the necessary API keys together (much the same as we did for Facebook), and
    then implement the OAuth libraries from Google, and finally, the Birdhouse Titanium
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    6` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can try to implement the Birdhouse and OAuth libraries, we first need
    to create an application through Twitter. If you do not have a Twitter account,
    you will need to create one for the first time. Don't worry though as it is completely
    free! Log in to your Twitter account at [https://dev.twitter.com/apps/new](http://https://dev.twitter.com/apps/new)
    and, once Twitter authenticates your details, you'll be able to create a new Twitter
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Fill in all of the fields with your own details. For our purposes, we have called
    the Twitter app `PhotoShare` and set the company and website to that of Packt
    Publishing. Ensure the application type is set to `Browser`, and that the Default
    Access Type is set to `Read & Write`. All other fields can either be created as
    you see fit, or left blank. Enter in the Captcha code and click on **Register
    Application**, accepting the terms of service as you do.
  prefs: []
  type: TYPE_NORMAL
- en: Once that is done, your application is ready to receive requests from Titanium.
    Before we can implement the Birdhouse library though, we first need to grab the
    `oauth.js` and `sha1.js` source files from Google. You can download these from
    their SVN repository at [http://oauth.googlecode.com/svn/code/javascript/](http://oauth.googlecode.com/svn/code/javascript/).
    Download and save these two files to a new folder called `lib` inside your existing
    `Resources` folder. Then, navigate your browser to [https://github.com/jpurcell/birdhouse](http://https://github.com/jpurcell/birdhouse)
    and download the `birdhouse.js` module file, again saving it to your `Resources`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968EXP_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final step now is including the `birdhouse.js` library into our `app.js`
    file and executing the Twitter authorization process. First of all, include the
    library at the top of your `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to create a new button to authorize and eventually post our Tweet.
    Enter the following code near the bottom of your `app.js` replacing the `consumer_key`
    and `consumer_secret` values with the ones provided to you on the Twitter app
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! You should now be able to choose an image, and then click on the
    new **Post To Twitter** button at the bottom of the screen. The authorization
    screen, with our Twitter applications details, should appear and you should be
    able to log in to Twitter using your existing username and password, as seen in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968EXP_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Uploading an image using PHP and HttpRequest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of ways to post an image to Twitter, including using a service
    such as yfrog or TwitPic. However, for this example we are going to post the image
    to our own server using PHP and return back the URL. You will need a server running
    PHP with the GDImage for this recipe to work. There are plenty of cheap or free
    PHP hosting services online if you don't already have a server. Alternatively,
    if you are proficient in another web language (such as ASP.NET) you can always
    rewrite the sample code as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    7` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new file on your server called `upload.php` and save it with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now in the `postToTwitter` function in your existing `app.js` file, we are going
    to extend the code in order to accommodate posting an image to our server. However,
    before performing any post image code, we will perform an authorized method call
    to the Birdhouse API and ensure that the user is currently logged into Twitter.
    We'll also generate a random 5-letter filename. It's important to keep this nice
    and short to keep the number of characters we're using to a minimum as Twitter
    messages have a 140-character limit!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are utilizing some of our existing knowledge in posting via `HttpRequest`
    and then extending that knowledge to also send across blob data, using PHP and
    GDImage. This is then used to write that blob data to an image file on our remote
    server before returning the new URL. You'll notice that we also extended our `postToTwitter`
    function to check whether the user is already authorized against Twitter or not
    before performing this post.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a tweet through Birdhouse and OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our final recipe, we're going to put everything together and, using a combination
    of our previous recipe's "image post" functionality and the Birdhouse API, post
    a tweet containing a message from our app and the image URL that accompanies it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    8` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Complete source code for this entire chapter can be found in the `/Chapter 5/PhotoShare`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Alter the `postToTwitter` function in your existing `app.js` file to match
    the following code by adding our new `BH.tweet` method call. If you already integrated
    the photo upload code from the previous recipe, then this source code snippet
    should appear in the `xhr.onload()` event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Try running your application now in the simulator, and after authorization to
    Twitter (if necessary) your new tweet should get posted directly from your app!
    Go to [http://twitter.com/yourusername](http://twitter.com/yourusername) to see
    the tweet posted to your timeline (as seen next). Clicking on the link should
    then load your uploaded photo!
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968EXP_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is very simple, as all of the hard work in connecting to Twitter
    and uploading an image to our server has been taken care of. Therefore pushing
    our final message via Birdhouse to the Twitter API is actually very easy. Here
    we are calling the Birdhouse `tweet()` function, which accepts both a message
    (as a string) and a second parameter that acts as the event handler for the response
    from Twitter. You can also use this tweet function outside of posting an image
    or file to the server. Try posting a simple message tweet without the image and
    code and you'll see it works just as well!
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3968EXP_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
