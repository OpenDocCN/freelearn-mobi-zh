- en: Chapter 5. Connecting your Apps with Social Media and E-mail
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：连接你的应用程序与社交媒体和电子邮件
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Composing and sending an e-mail
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写和发送电子邮件
- en: Adding attachments to an e-mail
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向电子邮件添加附件
- en: Setting up a custom Facebook application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置自定义Facebook应用程序
- en: Integrating Facebook into your Titanium App
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Facebook集成到你的Titanium应用程序中
- en: Posting on your Facebook wall
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的Facebook墙上发布
- en: Connecting to Twitter using OAuth
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OAuth连接到Twitter
- en: Uploading an image using PHP and HttpRequest
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP和HttpRequest上传图片
- en: Sending a tweet through Birdhouse and OAuth
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Birdhouse和OAuth发送推文
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Once thought to be the domain of the geeky Gen Y, social media has grown exponentially
    over the past few years into the hottest area of the web. Facebook now has over
    500 million users worldwide, twice the population of the United States! Twitter
    was once the place where you'd hear about what someone had just eaten for breakfast,
    now it's the first place many people go to for breaking news. The rise of smartphones
    and mobile applications has hastened the growth of these social networking services
    as online socializing is no longer confined to a desktop. People can be seen using
    Facebook and Twitter, among other services, while on the train, in their cars,
    and pretty much anywhere.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经被认为是古怪Y世代的地盘，社交媒体在过去几年里以指数级增长，成为网络最热门的领域。Facebook现在拥有超过5亿用户，是美国人口的两倍！Twitter曾经是人们分享早餐吃了什么的地方，现在它成为了许多人获取突发新闻的首选。智能手机和移动应用程序的兴起加速了这些社交网络服务的增长，因为在线社交不再局限于桌面。人们可以在火车上、在车里，几乎在任何地方使用Facebook和Twitter等众多服务。
- en: It's because these services are so ubiquitous that many people now expect them
    to be a standard service from within an application. A simple app, such as one
    that lists RSS feeds from news sites, is made that much more useful when the user
    can tweet, post, or e-mail articles at the touch of a button. In this chapter,
    we will begin with the original social communication medium, e-mail, before continuing
    to show you how to integrate the world's largest social networking services, Facebook
    and Twitter, into your application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正因为这些服务如此普遍，现在许多人期望它们能够作为应用程序内的标准服务。一个简单的应用程序，比如列出新闻网站RSS源的应用程序，当用户可以一键推文、发布或发送文章时，就变得更加有用。在本章中，我们将从原始的社交沟通媒介电子邮件开始，然后再继续展示如何将世界上最大的社交网络服务Facebook和Twitter集成到你的应用程序中。
- en: Pre-requisites
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: You should already be familiar with Titanium basics, including creating UI objects
    and using Titanium Studio. Additionally, to test functionality, you are going
    to need an account from Twitter and an account from Facebook. You will also need
    to have an e-mail account set up on your iPhone or Android device.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经熟悉Titanium基础知识，包括创建UI对象和使用Titanium Studio。此外，为了测试功能，你需要一个Twitter账户和一个Facebook账户。你还需要在你的iPhone或Android设备上设置电子邮件账户。
- en: 'You can signup for Facebook free of charge at: [http://www.facebook.com](http://www.facebook.com)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以免费在[http://www.facebook.com](http://www.facebook.com)注册Facebook。
- en: 'You can sign up for Twitter free of charge at: [http://twitter.com](http://twitter.com)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[http://twitter.com](http://twitter.com)免费注册Twitter。
- en: 'Google provides free e-mail services that are easily set up on both iPhone
    and Android. You can sign up at: [http://www.google.com/mail](http://www.google.com/mail)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google提供免费电子邮件服务，可以在iPhone和Android上轻松设置。你可以在[http://www.google.com/mail](http://www.google.com/mail)注册。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this entire chapter can be found in `/Chapter 5/PhotoShare`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 整个章节的完整源代码可以在`/Chapter 5/PhotoShare`中找到。
- en: Composing and sending an e-mail
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写和发送电子邮件
- en: We're going to start this chapter with the simplest form of social communication,
    both in terms of use and in terms of development—e-mail.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，以最简单的社交沟通形式，无论是使用还是开发——电子邮件。
- en: If you are intending to follow the entire chapter and build the PhotoShare app
    then pay careful attention to the first *Getting ready* section for this recipe,
    as it will guide you through setting up the project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算跟随整个章节并构建PhotoShare应用程序，那么请仔细注意这个菜谱的第一个*准备就绪*部分，因为它将指导你设置项目。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To prepare for this recipe, open up Titanium Studio and log in if you have not
    already done so. If you need to register a new account, you can do so for free
    directly from within the application. Once you are logged in, click on New Project,
    and the details window for creating a new project will appear. Enter in `PhotoShare`
    as the name of the app, and fill in the rest of the details with your own information.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个食谱，打开Titanium Studio并登录，如果你还没有这样做的话。如果你需要注册一个新账户，你可以在应用程序内部免费注册。登录后，点击“新建项目”，创建新项目的详细信息窗口将出现。将应用程序名称输入为`PhotoShare`，并使用你自己的信息填写其余的详细信息。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    1` folder.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可以在`/第五章/食谱1`文件夹中找到。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Our project has now been created using Titanium Studio. Let''s get down to
    business! Open up the `app.js` file in your editor and remove all existing code.
    After you have done that, type in the following and then hit save:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经使用Titanium Studio创建了项目。让我们开始吧！在你的编辑器中打开`app.js`文件，并删除所有现有的代码。完成之后，输入以下内容并保存：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The previous code lays out our basic application and integrates a simple photo
    gallery selector, much as we did in the previous chapter ([Chapter 4](ch04.html
    "Chapter 4. Enhancing your Apps with Audio, Video, and the Camera"), *Enhancing
    your Apps with Audio, Video, and the Camera)*. We will now create a new button
    which will call a function to create and display the e-mail dialog when tapped:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码展示了我们的基本应用程序，并集成了一个简单的照片画廊选择器，就像我们在上一章（[第4章](ch04.html "第4章. 使用音频、视频和摄像头增强你的应用")，*使用音频、视频和摄像头增强你的应用*）中所做的那样。现在我们将创建一个新的按钮，当点击时将调用一个函数来创建并显示电子邮件对话框：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once you have completed typing in your source code, run your app in the simulator
    or on your device. You should be able to select an image from the photo gallery,
    and then type in a title and message for your e-mail using the text fields. This
    will happen before clicking on the `buttonEmail` object to launch the e-mail dialog
    window with your message and title attached. Note that if you are using the simulator
    and you don't have some photos in the gallery already, the best way to obtain
    some is by visiting [http://images.google.com](http://images.google.com) in mobile
    Safari, and searching for images. You can then save them to the photo gallery
    on the simulator by clicking on and holding the image until the **Save Image**
    pop-up appears.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成源代码的输入后，在模拟器或设备上运行你的应用程序。你应该能够从照片画廊中选择一张图片，然后使用文本字段输入电子邮件的标题和消息。这将在点击`buttonEmail`对象以启动带有你的消息和标题的电子邮件对话框窗口之前发生。请注意，如果你使用的是模拟器并且画廊中没有照片，最佳的方法是通过在移动Safari中访问[http://images.google.com](http://images.google.com)并搜索图片来获取一些图片。然后你可以通过在模拟器中点击并按住图片直到出现**保存图片**弹出窗口来将这些图片保存到照片画廊中。
- en: '![How to do it...](img/3968EXP_05_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3968EXP_05_01.jpg)'
- en: How it works…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first block of code is creating our layout view with a single window and
    a number of basic components, all of which has already been covered in chapters
    1 through 4.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一块代码是创建我们的布局视图，包含一个窗口和多个基本组件，这些内容已经在第1章到第4章中介绍过了。
- en: 'The EmailDialog itself is created using the `Titanium.UI. createEmailDialog()`
    method and only requires a few simple parameters in order to be able to send a
    basic e-mail message. The `subject, messageBody` and `toRecipients` parameters
    are standard e-mail fields. While it is not necessary to provide these fields
    in order to launch an e-mail dialog, you will normally provide at least one or
    two of these as a matter of course. While the `subject` and `messageBody` fields
    are both simple strings, it should be noted that the `toRecipients` parameter
    is actually a basic array. You can add multiple recipients by simply adding another
    array parameter. For example, if we chose to send our e-mail to two different
    users, we could write the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`EmailDialog`本身是通过`Titanium.UI.createEmailDialog()`方法创建的，并且只需要提供几个简单的参数就可以发送基本的电子邮件消息。`subject`、`messageBody`和`toRecipients`参数是标准的电子邮件字段。虽然提供这些字段不是启动电子邮件对话框的必要条件，但通常情况下，你至少会提供其中的一到两个字段。需要注意的是，`subject`和`messageBody`字段都是简单的字符串，而`toRecipients`参数实际上是一个基本的数组。你可以通过添加另一个数组参数来添加多个收件人。例如，如果我们选择将电子邮件发送给两个不同的用户，我们可以编写以下代码：'
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also add BCC or CC recipients in the same manner, using the `ccRecipients`
    and `bccRecipients` methods of the e-mail dialog respectively. Finally, we launch
    the e-mail dialog using the `open()` method, at which point you should see something
    like the following standard e-mail dialog appear in your application:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以以相同的方式添加BCC或CC收件人，分别使用电子邮件对话框的`ccRecipients`和`bccRecipients`方法。最后，我们使用`open()`方法启动电子邮件对话框，此时您应该会在应用程序中看到如下标准电子邮件对话框：
- en: '![How it works…](img/3968EXP_05_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3968EXP_05_02.jpg)'
- en: One more thing
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有一件事
- en: 'You can use the e-mail dialog''s event listener, *complete*, in order to tell
    when an e-mail has been successfully sent or not. The `result` property in your
    event handler will provide you with the status of your e-mail, which will be one
    of the following strings:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用电子邮件对话框的事件监听器`complete`来告知电子邮件是否已成功发送。在您的事件处理程序中的`result`属性将为您提供电子邮件的状态，它将是以下字符串之一：
- en: CANCELLED (iOS only)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消（仅限iOS）
- en: FAILED
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败
- en: SENT
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已发送
- en: SAVED (iOS only)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存（仅限iOS）
- en: Adding attachments to an e-mail
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向电子邮件添加附件
- en: Now we have a basic e-mail dialog up and running, but ideally what we want to
    do is attach the photo that we selected from our photo gallery to our new e-mail
    message. Luckily for us, Titanium makes this easy by exposing a method, `addAttachment()`,
    that accepts a local path of the file we want to attach.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个基本的电子邮件对话框正在运行，但理想的情况是我们想将我们从照片库中选择的照片附加到我们的新电子邮件消息中。幸运的是，Titanium通过公开一个接受我们想要附加的文件本地路径的方法`addAttachment()`，使这变得很容易。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    2` folder.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的源代码可以在`/Chapter 5/Recipe 2`文件夹中找到。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Adding an attachment is usually as simple as passing the `addAttachment()`
    method of the e-mail dialog and the location of the file or blob you wish to attach,
    for example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 添加附件通常就像传递电子邮件对话框的`addAttachment()`方法和您希望附加的文件或blob的位置一样简单，例如：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Our case is a bit trickier than this though. In order to successfully attach
    our chosen image, we need to first save it temporarily to the file system, and
    then pass the file system path to `addAttachment()`. Alter your `postToEmail`
    function to match the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们的情况比这要复杂一些。为了成功附加我们选择的照片，我们需要首先将其临时保存到文件系统，然后将文件系统路径传递给`addAttachment()`。修改您的`postToEmail`函数以匹配以下代码：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: As you can see from the code, an attachment can be added to your e-mail dialog
    as a blob object, a file, or from a file path. In our example, we are saving the
    image from our photo gallery to a temporary file first, before adding it to the
    e-mail dialog, in order to have it displayed as a proper image attachment (as
    seen in the following screenshot). You can also call the `addAttachment` method
    multiple times. However, be aware that multiple attachments are currently only
    supported on the iPhone.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从代码中看到的，可以将附件作为blob对象、文件或从文件路径添加到您的电子邮件对话框中。在我们的示例中，我们在将图片添加到电子邮件对话框之前，首先将其从照片库保存到临时文件中，以便将其作为合适的图片附件显示（如下面的截图所示）。您也可以多次调用`addAttachment`方法。然而，请注意，目前iPhone上仅支持多个附件。
- en: '![How it works...](img/3968EXP_05_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3968EXP_05_03.jpg)'
- en: Setting up a custom Facebook application
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置自定义Facebook应用程序
- en: Integrating Facebook into your Titanium application may seem like a daunting
    prospect at first. However, once you understand the steps necessary you will see
    it's not really too hard at all! Before you can allow users to post or retrieve
    Facebook content from your mobile app, you will first need to set-up an application
    on Facebook itself. This application will provide you with the necessary API keys
    you need before the user can authorize your mobile application to post and get
    content on their behalf.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将Facebook集成到您的Titanium应用程序中可能一开始看起来是一个令人畏惧的前景。然而，一旦您了解了必要的步骤，您会发现这实际上并不太难！在您允许用户从您的移动应用程序发布或检索Facebook内容之前，您首先需要在Facebook本身上设置一个应用程序。该应用程序将为您提供在用户授权您的移动应用程序代表他们发布和获取内容之前所需的必要API密钥。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Firstly, you will need to log in to Facebook using the e-mail address and password
    you signed up with. If you do not have a Facebook account, you will need to create
    one for the first time. Don''t worry though as it is completely free! You will
    then need to add the **Developer App** to your Facebook account. You can do this
    by simply searching for `Developer` in the search bar, and then clicking on through
    until it is added to your account:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要使用你注册时使用的电子邮件地址和密码登录到Facebook。如果你没有Facebook账户，你需要首次创建一个。不过别担心，这是完全免费的！然后你需要将**开发者应用**添加到你的Facebook账户。你可以通过在搜索栏中搜索`开发者`来完成此操作，然后点击直到它被添加到你的账户：
- en: '![How to do it...](img/3968EXP_05_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3968EXP_05_04.jpg)'
- en: 'Once you have the Developer application added to your account and loaded, simply
    click on the **Set Up New App** button on the Developer homepage. The **Create
    Application** screen will then appear, allowing you to give your application a
    name and requesting that you agree to Facebook''s terms and conditions before
    proceeding. We have called our app `PhotoShare Titanium`, however, you may use
    whatever name you wish:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将开发者应用程序添加到你的账户并加载，只需在开发者主页上点击**设置新应用**按钮。然后会出现**创建应用程序**屏幕，允许你给你的应用程序命名，并在继续之前同意Facebook的条款和条件。我们称我们的应用程序为`PhotoShare
    Titanium`，然而，你可以使用你想要的任何名称：
- en: '![How to do it...](img/3968EXP_05_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3968EXP_05_05.jpg)'
- en: On the next screen that appears, give your application a description and fill
    in the other requested fields as required. When you have finished, simply save
    your changes. The final screen in the process provides us with the all important
    information we need in order to connect our Titanium application to the Facebook
    API. There are three important values here you are going to need in the next recipe,
    so be sure to write them down somewhere safe!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在出现的下一个屏幕上，给你的应用程序添加一个描述并填写其他所需字段。完成之后，只需保存你的更改。过程中的最后一个屏幕为我们提供了连接我们的Titanium应用程序到Facebook
    API所需的所有重要信息。这里有三个重要的值，你将在下一个食谱中使用，所以请确保将它们安全地记录下来！
- en: 'These fields are:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段是：
- en: Application ID
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序ID
- en: API Key
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API密钥
- en: App Secret
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序密钥
- en: '![How to do it...](img/3968EXP_05_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3968EXP_05_06.jpg)'
- en: Integrating Facebook into your Titanium App
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Facebook集成到你的Titanium应用程序中
- en: Now that we have a Facebook application set up, we can get down to connecting
    our Titanium application to it. Luckily for us, Appcelerator has integrated Facebook's
    new Graph API tightly into Titanium from version 1.6.0 onwards, so connecting
    and publishing to the Facebook platform is quite easy!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了Facebook应用程序，我们可以着手将我们的Titanium应用程序连接到它。幸运的是，从1.6.0版本开始，Appcelerator已经将Facebook的新Graph
    API紧密集成到Titanium中，因此连接和发布到Facebook平台相当简单！
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    4` folder.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可以在`/Chapter 5/Recipe 4`文件夹中找到。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The first thing we need to do is create a new button which will authorize our
    Titanium app to publish data on our user''s behalf. Enter in the following code
    in your `app.js` file to create a new button underneath the existing **email user**
    button:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建一个新的按钮，该按钮将授权我们的Titanium应用程序代表用户发布数据。在你的`app.js`文件中输入以下代码以在现有的**电子邮件用户**按钮下方创建一个新按钮：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now select an image and click on the Facebook button. If you entered in your
    client ID correctly (which you would have obtained by following the previous recipe)
    then you should see a login window open up and connect to the Facebook website,
    showing your application and the permissions it is requesting, as shown in the
    following example screenshots:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请选择一张图片并点击Facebook按钮。如果你正确地输入了客户端ID（你应该是通过遵循前面的食谱获得的），那么你应该会看到一个登录窗口打开并连接到Facebook网站，显示你的应用程序及其请求的权限，如下面的示例截图所示：
- en: '![How to do it...](img/3968EXP_05_07.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3968EXP_05_07.jpg)'
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We're creating a function that provides Facebook functionality to our application,
    and allows us to log in to Facebook and let the user accept the permissions we
    require in order to post to their wall. This function allows us to authenticate
    against the Facebook API using the App ID that we created in the previous recipe.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一个函数，为我们的应用程序提供Facebook功能，并允许我们登录到Facebook并让用户接受我们为了在他们墙上发布所需权限。此函数允许我们使用在先前的食谱中创建的应用程序ID对Facebook
    API进行身份验证。
- en: This authorization, when successful, allows the user to log in and agree to
    your request to use certain permissions against their Facebook account. A successful
    authorization will return and save a Facebook Token. This token is essentially
    a random string that contains all of the user ID and permission data we will need
    to execute Facebook Graph requests against the authorized user's account. A successful
    login will set the `Titanium.Facebook.loggedIn` variable to true, and in the next
    recipe, we will extend our `postToFacebook` function, using this variable as part
    of a request to post our chosen photo to our Facebook wall.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当此授权成功时，允许用户登录并同意您使用其Facebook账户的某些权限。成功的授权将返回并保存一个Facebook令牌。此令牌本质上是一个包含所有所需用户ID和权限数据的随机字符串，我们将使用它来执行针对授权用户账户的Facebook
    Graph请求。成功的登录将设置`Titanium.Facebook.loggedIn`变量为true，在下一道菜谱中，我们将扩展我们的`postToFacebook`函数，使用这个变量作为请求的一部分，将我们选择的图片发布到我们的Facebook墙上。
- en: Posting on your Facebook wall
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的Facebook墙上发布
- en: Now that we are able to authenticate against Facebook, it's time to post a photo
    from the gallery to our wall! To achieve this, we need to use Facebook's Graph
    API, making a call to the correct graph function, with the correct permissions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够对Facebook进行身份验证，是时候从相册中发布一张照片到我们的墙上了！为了实现这一点，我们需要使用Facebook的Graph API，调用正确的graph函数，并使用正确的权限。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    5` folder.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的完整源代码可以在`/Chapter 5/Recipe 5`文件夹中找到。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s extend our new `postToFacebook()` function by writing a new if-else
    statement which will take a couple of parameters and execute a Graph request against
    the Facebook API. Extend the `postToFacebook()` function in `app.js`, so that
    it matches the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过编写一个新的if-else语句来扩展我们的新`postToFacebook()`函数，该语句将接受一些参数并执行对Facebook API的Graph请求。在`app.js`中扩展`postToFacebook()`函数，使其与以下代码匹配：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now run the application in your emulator or device. If you post an image successfully,
    you should end up seeing an alert dialog appear in your app, the ID of the new
    image object from the graph API appear in your developer console, and the photo
    appear as a post on your Facebook wall!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在您的模拟器或设备上运行应用程序。如果您成功发布了一张图片，您应该在应用程序中看到一个警报对话框出现，在开发人员控制台中显示来自graph API的新图像对象的ID，并且照片作为帖子出现在您的Facebook墙上！
- en: '![How to do it...](img/3968EXP_05_08.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/3968EXP_05_08.jpg)'
- en: How it works…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: We extended the `postToFacebook()` function that we created in our previous
    recipe, updating it to first log in to the Facebook API, and then on subsequent
    post attempts to send a graph request along with a photo to our Facebook Wall.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了我们在上一个菜谱中创建的`postToFacebook()`函数，更新它以首先登录到Facebook API，然后在随后的帖子尝试中发送一个包含照片的graph请求到我们的Facebook墙。
- en: 'We can now use Facebook''s Graph API (encapsulated in our new `graphRequest`
    function) to execute our request, passing it the session token we retrieved from
    the authentication dialog in the previous recipe, along with the name of the graph
    method we want to call (`me/photos`), and the data properties that method requires.
    In the case of the `me/photos` method, these two properties are:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用Facebook的Graph API（封装在我们的新`graphRequest`函数中）来执行我们的请求，传递我们从上一个菜谱中的身份验证对话框中检索到的会话令牌，以及我们想要调用的graph方法名称（`me/photos`），以及该方法所需的数据属性。在`me/photos`方法的情况下，这两个属性是：
- en: '**caption:** A string value which will accompany our image file'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**：将伴随我们的图像文件的字符串值'
- en: '**picture:** A blob/image containing our image data'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图片**：包含我们图像数据的blob/image'
- en: 'Using the Graph API and the Facebook login and post function which we have
    built, it is possible to execute any kind of graph request in your app that Facebook
    (and your user permissions) will allow. The following screenshot shows an example
    post:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Graph API和Facebook登录及发布函数，我们可以执行Facebook（以及您的用户权限）允许的任何类型的graph请求。以下截图显示了一个示例帖子：
- en: '![How it works…](img/3968EXP_05_09.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3968EXP_05_09.jpg)'
- en: Connecting to Twitter using OAuth
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OAuth连接到Twitter
- en: Appcelerator doesn't currently provide an integrated method of connecting to
    Twitter in your Titanium applications. However, there are plenty of other options
    available. One of the best libraries is provided by Joe Purcell and is called
    "Birdhouse". In this recipe we are going to set up a Twitter application online,
    get the necessary API keys together (much the same as we did for Facebook), and
    then implement the OAuth libraries from Google, and finally, the Birdhouse Titanium
    module.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Appcelerator目前没有为Titanium应用程序提供连接到Twitter的集成方法。然而，有许多其他选项可供选择。其中最好的库之一是由Joe
    Purcell提供的，称为“Birdhouse”。在这个食谱中，我们将在线设置一个Twitter应用程序，获取必要的API密钥（与Facebook类似），然后实现Google的OAuth库，最后实现Birdhouse
    Titanium模块。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    6` folder.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可以在 `/第五章/食谱6` 文件夹中找到。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Before we can try to implement the Birdhouse and OAuth libraries, we first need
    to create an application through Twitter. If you do not have a Twitter account,
    you will need to create one for the first time. Don't worry though as it is completely
    free! Log in to your Twitter account at [https://dev.twitter.com/apps/new](http://https://dev.twitter.com/apps/new)
    and, once Twitter authenticates your details, you'll be able to create a new Twitter
    application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们尝试实现鸟屋和OAuth库之前，我们首先需要通过Twitter创建一个应用程序。如果您没有Twitter账户，您将需要首次创建一个。不过，请放心，这是完全免费的！登录到您的Twitter账户
    [https://dev.twitter.com/apps/new](http://https://dev.twitter.com/apps/new)，一旦Twitter验证了您的详细信息，您将能够创建一个新的Twitter应用程序。
- en: Fill in all of the fields with your own details. For our purposes, we have called
    the Twitter app `PhotoShare` and set the company and website to that of Packt
    Publishing. Ensure the application type is set to `Browser`, and that the Default
    Access Type is set to `Read & Write`. All other fields can either be created as
    you see fit, or left blank. Enter in the Captcha code and click on **Register
    Application**, accepting the terms of service as you do.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您自己的详细信息填写所有字段。出于我们的目的，我们已将Twitter应用程序命名为`PhotoShare`，并将公司和网站设置为Packt Publishing。确保应用程序类型设置为`浏览器`，默认访问类型设置为`读/写`。所有其他字段可以按需创建，或者留空。输入验证码并点击**注册应用程序**，接受服务条款。
- en: Once that is done, your application is ready to receive requests from Titanium.
    Before we can implement the Birdhouse library though, we first need to grab the
    `oauth.js` and `sha1.js` source files from Google. You can download these from
    their SVN repository at [http://oauth.googlecode.com/svn/code/javascript/](http://oauth.googlecode.com/svn/code/javascript/).
    Download and save these two files to a new folder called `lib` inside your existing
    `Resources` folder. Then, navigate your browser to [https://github.com/jpurcell/birdhouse](http://https://github.com/jpurcell/birdhouse)
    and download the `birdhouse.js` module file, again saving it to your `Resources`
    folder.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，您的应用程序就准备好接收Titanium的请求了。但在我们实现Birdhouse库之前，我们首先需要从Google获取`oauth.js`和`sha1.js`源文件。您可以从他们的SVN仓库
    [http://oauth.googlecode.com/svn/code/javascript/](http://oauth.googlecode.com/svn/code/javascript/)
    下载这些文件。下载并将这两个文件保存到现有`Resources`文件夹中的新文件夹`lib`中。然后，将您的浏览器导航到 [https://github.com/jpurcell/birdhouse](http://https://github.com/jpurcell/birdhouse)
    并下载`birdhouse.js`模块文件，再次将其保存到您的`Resources`文件夹中。
- en: '![How to do it...](img/3968EXP_05_10.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3968EXP_05_10.jpg)'
- en: 'The final step now is including the `birdhouse.js` library into our `app.js`
    file and executing the Twitter authorization process. First of all, include the
    library at the top of your `app.js` file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的最终步骤是将`birdhouse.js`库包含到我们的`app.js`文件中，并执行Twitter授权过程。首先，在您的`app.js`文件顶部包含该库：
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We then need to create a new button to authorize and eventually post our Tweet.
    Enter the following code near the bottom of your `app.js` replacing the `consumer_key`
    and `consumer_secret` values with the ones provided to you on the Twitter app
    page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要创建一个新的按钮来授权并最终发布我们的推文。在`app.js`文件的底部附近输入以下代码，用Twitter应用页面提供的`consumer_key`和`consumer_secret`值替换这些值：
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'That''s it! You should now be able to choose an image, and then click on the
    new **Post To Twitter** button at the bottom of the screen. The authorization
    screen, with our Twitter applications details, should appear and you should be
    able to log in to Twitter using your existing username and password, as seen in
    the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在您应该能够选择一张图片，然后点击屏幕底部的新的 **发布到 Twitter** 按钮。应该会出现带有我们 Twitter 应用程序详细信息的授权屏幕，您可以使用现有的用户名和密码登录到
    Twitter，如下面的截图所示：
- en: '![How to do it...](img/3968EXP_05_11.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3968EXP_05_11.jpg)'
- en: Uploading an image using PHP and HttpRequest
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PHP 和 HttpRequest 上传图片
- en: There are a number of ways to post an image to Twitter, including using a service
    such as yfrog or TwitPic. However, for this example we are going to post the image
    to our own server using PHP and return back the URL. You will need a server running
    PHP with the GDImage for this recipe to work. There are plenty of cheap or free
    PHP hosting services online if you don't already have a server. Alternatively,
    if you are proficient in another web language (such as ASP.NET) you can always
    rewrite the sample code as you see fit.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 向 Twitter 发布图片有多种方式，包括使用 yfrog 或 TwitPic 这样的服务。然而，在这个例子中，我们将使用 PHP 将图片发布到我们自己的服务器，并返回
    URL。如果您还没有服务器，您需要运行 PHP 并具有 GDImage 才能使本菜谱工作。如果您没有服务器，网上有很多便宜或免费的 PHP 主机服务。或者，如果您精通其他网络语言（如
    ASP.NET），您总是可以根据需要重写示例代码。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    7` folder.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的完整源代码可以在 `/Chapter 5/Recipe 7` 文件夹中找到。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a new file on your server called `upload.php` and save it with the following
    contents:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的服务器上创建一个名为 `upload.php` 的新文件，并保存以下内容：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now in the `postToTwitter` function in your existing `app.js` file, we are going
    to extend the code in order to accommodate posting an image to our server. However,
    before performing any post image code, we will perform an authorized method call
    to the Birdhouse API and ensure that the user is currently logged into Twitter.
    We'll also generate a random 5-letter filename. It's important to keep this nice
    and short to keep the number of characters we're using to a minimum as Twitter
    messages have a 140-character limit!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在您现有的 `app.js` 文件中的 `postToTwitter` 函数中，我们将扩展代码以适应将图片发布到我们的服务器。然而，在执行任何发布图片代码之前，我们将执行对
    Birdhouse API 的授权方法调用，并确保用户当前已登录到 Twitter。我们还将生成一个随机的 5 个字母文件名。保持它简洁是很重要的，以将我们使用的字符数保持在最低，因为
    Twitter 消息有 140 个字符的限制！
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Here we are utilizing some of our existing knowledge in posting via `HttpRequest`
    and then extending that knowledge to also send across blob data, using PHP and
    GDImage. This is then used to write that blob data to an image file on our remote
    server before returning the new URL. You'll notice that we also extended our `postToTwitter`
    function to check whether the user is already authorized against Twitter or not
    before performing this post.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在利用我们现有的通过 `HttpRequest` 发布的知识，并将其扩展到使用 PHP 和 GDImage 发送 blob 数据。然后，我们将这些
    blob 数据写入我们远程服务器上的图像文件，并在返回新 URL 之前。您会注意到我们还扩展了 `postToTwitter` 函数，在执行此发布之前检查用户是否已经对
    Twitter 进行了授权。
- en: Sending a tweet through Birdhouse and OAuth
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Birdhouse 和 OAuth 发送推文
- en: For our final recipe, we're going to put everything together and, using a combination
    of our previous recipe's "image post" functionality and the Birdhouse API, post
    a tweet containing a message from our app and the image URL that accompanies it.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最终菜谱中，我们将把所有内容组合起来，并使用我们之前菜谱的“图片发布”功能与 Birdhouse API 的组合，发布包含来自我们应用程序的消息和伴随图片
    URL 的推文。
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this recipe can be found in the `/Chapter 5/Recipe
    8` folder.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的完整源代码可以在 `/Chapter 5/Recipe 8` 文件夹中找到。
- en: Complete source code for this entire chapter can be found in the `/Chapter 5/PhotoShare`
    folder.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整源代码可以在 `/Chapter 5/PhotoShare` 文件夹中找到。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Alter the `postToTwitter` function in your existing `app.js` file to match
    the following code by adding our new `BH.tweet` method call. If you already integrated
    the photo upload code from the previous recipe, then this source code snippet
    should appear in the `xhr.onload()` event handler:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将您现有的 `app.js` 文件中的 `postToTwitter` 函数修改为以下代码，通过添加我们的新 `BH.tweet` 方法调用。如果您已经集成了之前菜谱中的照片上传代码，那么此源代码片段应出现在
    `xhr.onload()` 事件处理程序中：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Try running your application now in the simulator, and after authorization to
    Twitter (if necessary) your new tweet should get posted directly from your app!
    Go to [http://twitter.com/yourusername](http://twitter.com/yourusername) to see
    the tweet posted to your timeline (as seen next). Clicking on the link should
    then load your uploaded photo!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试在模拟器中运行你的应用程序，并在必要时授权给Twitter后，你的新推文应该会直接从你的应用程序中发布！前往[http://twitter.com/yourusername](http://twitter.com/yourusername)查看发布到你的时间线上的推文（如下一页所示）。点击链接后，应该会加载你上传的图片！
- en: '![How to do it…](img/3968EXP_05_12.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/3968EXP_05_12.jpg)'
- en: How it works…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: This recipe is very simple, as all of the hard work in connecting to Twitter
    and uploading an image to our server has been taken care of. Therefore pushing
    our final message via Birdhouse to the Twitter API is actually very easy. Here
    we are calling the Birdhouse `tweet()` function, which accepts both a message
    (as a string) and a second parameter that acts as the event handler for the response
    from Twitter. You can also use this tweet function outside of posting an image
    or file to the server. Try posting a simple message tweet without the image and
    code and you'll see it works just as well!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱非常简单，因为连接到Twitter并将图片上传到我们的服务器上的所有艰苦工作都已经有人处理了。因此，通过Birdhouse将我们的最终消息推送到Twitter
    API实际上非常容易。在这里，我们调用Birdhouse的`tweet()`函数，该函数接受一个消息（作为字符串）和第二个参数，该参数作为Twitter响应的事件处理器。你还可以在将图片或文件上传到服务器之外使用这个`tweet`函数。尝试发布一个不带图片和代码的简单消息推文，你会发现它同样工作得很好！
- en: '![How it works…](img/3968EXP_05_13.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3968EXP_05_13.jpg)'
