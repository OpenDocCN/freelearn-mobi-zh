["```swift\nsharedFileUtils.searchMode = CCFileUtilsSearchModeDirectory;\n```", "```swift\nsharedFileUtils.searchMode = CCFileUtilsSearchModeSuffix;//CCFileUtilsSearchModeDirectory;\n```", "```swift\n@interface MainScene : CCNode\n{\n  CGSize winSize;\n}\n+(CCScene*)scene;\n@end\n```", "```swift\n#import \"MainScene.h\"\n\n@implementation MainScene\n\n+(CCScene *)scene\n{\n  return [[self alloc] init];\n}\n\n-(id)init\n{\n  if ((self=[super init]))\n  {\n   //used for positioning items on screen\n    winSize = [[CCDirector sharedDirector] viewSize];\n\n    float grey = 70 / 255.f;\n   //these values range 0 to 1.0, so use float to get ratio\n    CCNode *background = [CCNodeColor nodeWithColor:[CCColor colorWithRed:grey green:grey blue:grey]];\n    [self addChild:background];\n  }\n  return self;\n}\n\n@end\n```", "```swift\nreturn [CCBReader loadAsScene:@\"MainScene\"];\n```", "```swift\nreturn [MainScene scene];\n```", "```swift\n#import \"MainScene.h\"\n```", "```swift\n@interface MainScene : CCNode\n{\n  CGSize winSize;\n  //Add the following:\n  //the labels used for displaying the game info\n  CCLabelTTF *lblTurnsSurvived, *lblUnitsKilled, *lblTotalScore;\n}\n```", "```swift\nCCLabelTTF *lblTurnsSurvivedDesc = [CCLabelTTF labelWithString:@\"Turns Survived:\" fontName:@\"Arial\" fontSize:12];\nlblTurnsSurvivedDesc.position = ccp(winSize.width * 0.1, winSize.height * 0.8);\n[self addChild:lblTurnsSurvivedDesc];\n\nlblTurnsSurvived = [CCLabelTTF labelWithString:@\"0\" fontName:@\"Arial\" fontSize:22];\nlblTurnsSurvived.position = ccp(winSize.width * 0.1, winSize.height * 0.75);\n[self addChild:lblTurnsSurvived];\n\nCCLabelTTF *lblUnitsKilledDesc = [CCLabelTTF labelWithString:@\"Units Killed:\" fontName:@\"Arial\" fontSize:12];\nlblUnitsKilledDesc.position = ccp(winSize.width * 0.1, winSize.height * 0.6);\n[self addChild:lblUnitsKilledDesc];\n\nlblUnitsKilled = [CCLabelTTF labelWithString:@\"0\" fontName:@\"Arial\" fontSize:22];\nlblUnitsKilled.position = ccp(winSize.width * 0.1, winSize.height * 0.55);\n[self addChild:lblUnitsKilled];\n\nCCLabelTTF *lblTotalScoreDesc = [CCLabelTTF labelWithString:@\"Total Score:\" fontName:@\"Arial\" fontSize:12];\nlblTotalScoreDesc.position = ccp(winSize.width * 0.1, winSize.height * 0.4);\n[self addChild:lblTotalScoreDesc];\n\nlblTotalScore = [CCLabelTTF labelWithString:@\"1\" fontName:@\"Arial\" fontSize:22];\nlblTotalScore.position = ccp(winSize.width * 0.1, winSize.height * 0.35);\n[self addChild:lblTotalScore];\n```", "```swift\n@interface MainScene : CCNode\n{\n  CGSize winSize;\n//the labels used for displaying the game info\n//this line now uses CCLabelBMFont instead of CCLabelTTFFont\nCCLabelBMFont *lblTurnsSurvived, *lblUnitsKilled, *lblTotalScore;\n}\n```", "```swift\nCCLabelBMFont *lblTurnsSurvivedDesc = [CCLabelBMFont labelWithString:@\"Turns Survived:\" fntFile:@\"bmFont.fnt\"];\nlblTurnsSurvivedDesc.position = ccp(winSize.width * 0.125, winSize.height * 0.8);\n[self addChild:lblTurnsSurvivedDesc];\n\nlblTurnsSurvived = [CCLabelBMFont labelWithString:@\"0\" fntFile:@\"bmFont.fnt\"];\nlblTurnsSurvived.position = ccp(winSize.width * 0.125, winSize.height * 0.75);\n[self addChild:lblTurnsSurvived];\n\nCCLabelBMFont *lblUnitsKilledDesc = [CCLabelBMFont labelWithString:@\"Units Killed:\" fntFile:@\"bmFont.fnt\"];\nlblUnitsKilledDesc.position = ccp(winSize.width * 0.125, winSize.height * 0.6);\n[self addChild:lblUnitsKilledDesc];\n\nlblUnitsKilled = [CCLabelBMFont labelWithString:@\"0\" fntFile:@\"bmFont.fnt\"];\nlblUnitsKilled.position = ccp(winSize.width * 0.125, winSize.height * 0.55);\n[self addChild:lblUnitsKilled];\n\nCCLabelBMFont *lblTotalScoreDesc = [CCLabelBMFont labelWithString:@\"Total Score:\" fntFile:@\"bmFont.fnt\"];\nlblTotalScoreDesc.position = ccp(winSize.width * 0.125, winSize.height * 0.4);\n[self addChild:lblTotalScoreDesc];\n\nlblTotalScore = [CCLabelBMFont labelWithString:@\"1\" fntFile:@\"bmFont.fnt\"];\nlblTotalScore.position = ccp(winSize.width * 0.125, winSize.height * 0.35);\n[self addChild:lblTotalScore];\n```", "```swift\n- (CCScene*) startScene\n{\n  [[CCSpriteFrameCache sharedSpriteFrameCache] addSpriteFramesWithFile:@\"buttonSheet.plist\"];\n\n  return [MainScene scene];//[CCBReader loadAsScene:@\"MainScene\"];\n}\n```", "```swift\nCCButton *btnMenu = [CCButton buttonWithTitle:@\"\"\n  spriteFrame:[CCSpriteFrame frameWithImageNamed:@\"btnMenu.png\"]];\nbtnMenu.position = ccp(winSize.width * 0.125, winSize.height * 0.1);\n[self addChild:btnMenu];\n```", "```swift\nCCButton *btnMenu = [CCButton buttonWithTitle:@\"\" spriteFrame:[CCSpriteFrame frameWithImageNamed:@\"btnMenu.png\"]];\n\nCCButton *btnRestart = [CCButton buttonWithTitle:@\"\" spriteFrame:[CCSpriteFrame frameWithImageNamed:@\"btnRestart.png\"]];\n\nCCLayoutBox *layoutButtons = [[CCLayoutBox alloc] init];\n[layoutButtons addChild:btnRestart];\n[layoutButtons addChild:btnMenu];\nlayoutButtons.spacing = 10.f;\nlayoutButtons.anchorPoint = ccp(0.5f, 0.5f);\nlayoutButtons.direction = CCLayoutBoxDirectionVertical;\n[layoutButtons layout];\nlayoutButtons.position = ccp(winSize.width * 0.125, winSize.height * 0.15);\n[self addChild:layoutButtons];\n```", "```swift\nCCSprite *board = [CCSprite spriteWithImageNamed:@\"imgBoard.png\"];\nboard.position = ccp(winSize.width * 0.625, winSize.height/2);\n[self addChild:board];\n```", "```swift\nif (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)\n  board.scale = 0.8;\n```", "```swift\n#import \"CCSprite.h\"\n\nNS_ENUM(NSInteger, UnitDirection)\n{\n  DirUp,\n  DirDown,\n  DirLeft,\n  DirRight,\n  DirStanding //for when a new one spawns at the center\n};\n\n@interface Unit : CCSprite\n\n@property (nonatomic, assign) NSInteger unitValue;\n@property (nonatomic, assign) BOOL isFriendly;\n@property (nonatomic, assign) enum UnitDirection direction;\n//9x9 grid, 1,1 is top left, 9,9 is bottom right\n@property (nonatomic, assign) CGPoint gridPos;\n@property (nonatomic, strong) CCColor *color;\n@property (nonatomic, strong) CCLabelBMFont *lblValue;\n\n+(Unit*)friendlyUnit;\n+(Unit*)enemyUnitWithNumber:(NSInteger)value atGridPosition:(CGPoint)pos;\n@end\n```", "```swift\n+(Unit*)friendlyUnit\n{\n  return [[self alloc] initWithFriendlyUnit];\n}\n\n+(Unit*)enemyUnitWithNumber:(NSInteger)num atGridPosition:(CGPoint)pos\n{\n  return [[self alloc] initWithEnemyWithNumber:num atPos:pos];\n}\n\n-(id)initCommon\n{\n  if ((self=[super initWithImageNamed:@\"imgUnit.png\"]))\n  {\n    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)\n      self.scale = 0.8;\n\n    self.lblValue = [CCLabelBMFont labelWithString:@\"1\" fntFile:@\"bmFont.fnt\"];\n    self.lblValue.scale = 1.5;\n    self.lblValue.position = ccp(self.contentSize.width/2, self.contentSize.height/1.75);\n    [self addChild:self.lblValue];\n  }\n  return self;\n}\n\n-(id)initWithFriendlyUnit\n{\n  if ((self=[self initCommon]))\n  {\n    self.isFriendly = YES;\n    self.unitValue = 1;\n    self.direction = DirStanding;\n    self.color = [CCColor colorWithRed:0 green:0.8f blue:0]; //green for friendly\n    self.gridPos = ccp(5,5);\n  }\n  return self;\n}\n\n-(id)initWithEnemyWithNumber:(NSInteger)num atPos:(CGPoint)p\n{\n  if ((self=[self initCommon]))\n  {\n    self.isFriendly = NO;\n    self.unitValue = num;\n    self.lblValue.string = [NSString stringWithFormat:@\"%ld\", (long)num];\n    self.direction = DirLeft;\n    self.color = [CCColor colorWithRed:0.8f green:0 blue:0]; //red for enemy\n    self.gridPos = p;\n  }\n  return self;\n}\n```", "```swift\nUnit *friendly = [Unit friendlyUnit];\nfriendly.position = ccp(winSize.width/2, winSize.height/2);\n[self addChild:friendly];\n\nUnit *enemy = [Unit enemyUnitWithNumber:1 atGridPosition:ccp(1,1)];\nenemy.position = ccp(winSize.width - 50, winSize.height/2);\n[self addChild:enemy];\n```", "```swift\n-(CGPoint)getPositionForGridCoord:(CGPoint)pos\n{\n  CGPoint screenPos;\n  Unit *u = [Unit friendlyUnit];\n\n  CGFloat borderValue = 1.f;\n  if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)\n    borderValue = 0.6f;\n\n  screenPos.x = winSize.width * 0.625 + (u.boundingBox.size.width + borderValue) * (pos.x-5);\n  screenPos.y = winSize.height/2 - (u.boundingBox.size.width + borderValue) * (pos.y-5);\n\n  return screenPos;\n}\n\nNow change the positioning of the units to reflect this change:\nUnit *friendly = [Unit friendlyUnit];\nfriendly.position = [self getPositionForGridCoord:friendly.gridPos];\n[self addChild:friendly];\n\nUnit *enemy = [Unit enemyUnitWithNumber:2 atGridPosition:ccp(4,7)];\nenemy.position = [self getPositionForGridCoord:enemy.gridPos];\n[self addChild:enemy];\n```", "```swift\n[self setUserInteractionEnabled:YES];\n\nThen add the following methods in Unit.m that will intercept all touches made on each unit:\n-(void)touchBegan:(CCTouch *)touch withEvent:(CCTouchEvent *)event\n{\n\n}\n\n-(void)touchMoved:(CCTouch *)touch withEvent:(CCTouchEvent *)event\n{\n\n}\n\n-(void)touchEnded:(CCTouch *)touch withEvent:(CCTouchEvent *)event\n{\n\n}\n```", "```swift\n@property (nonatomic, assign) BOOL isBeingDragged;\n@property (nonatomic, assign) CGPoint touchDownPos;\n@property (nonatomic, assign) enum UnitDirection dragDirection;\n```", "```swift\n-(void)updateLabel;\n```", "```swift\n-(void)updateLabel\n{\n  self.lblValue.string = [NSString stringWithFormat:@\"%ld\", (long)self.unitValue];\n}\n```", "```swift\nself.touchDownPos = [touch locationInNode:self];\nself.dragDirection = DirStanding;\n```", "```swift\nCGPoint touchPos = [touch locationInNode:self];\n//if it's not already being dragged and the touch is dragged far enough away...\nif (!self.isBeingDragged && ccpDistance(touchPos, self.touchDownPos) > 6)\n{  \n  self.isBeingDragged = YES;\n\n  CGPoint difference = ccp(touchPos.x - self.touchDownPos.x, touchPos.y - self.touchDownPos.y);\n  //determine direction\n  if (difference.x > 0)\n  {\n      if (difference.x > fabsf(difference.y))\n        self.dragDirection = DirRight;\n      else if (difference.y > 0)\n        self.dragDirection = DirUp;\n      else\n        self.dragDirection = DirDown;\n  }\n  else\n  {\n      if (difference.x < -1* fabsf(difference.y))\n        self.dragDirection = DirLeft;\n      else if (difference.y > 0)\n        self.dragDirection = DirUp;\n      else\n        self.dragDirection = DirDown;\n  }\n}\n```", "```swift\n//if it was being dragged in the first place\nif (self.isBeingDragged)\n{\n  CGPoint touchPos = [touch locationInNode:self];\n  //stop the dragging\n  self.isBeingDragged = NO;\n\n  if (ccpDistance(touchPos, self.touchDownPos) > self.boundingBox.size.width/2)\n  {\n      NSInteger gridX, gridY;\n      gridX = self.gridPos.x;\n      gridY = self.gridPos.y;\n\n      //move unit that direction\n      if (self.dragDirection == DirUp)\n        --gridY;\n      else if (self.dragDirection == DirDown)\n        ++gridY;\n      else if (self.dragDirection == DirLeft)\n        --gridX;\n      else if (self.dragDirection == DirRight)\n        ++gridX;\n\n      //keep within the grid bounds\n      if (gridX < 1) gridX = 1;\n      if (gridY > 9) gridX = 9;\n\n      if (gridY < 1) gridY = 1;\n      if (gridY > 9) gridY = 9;\n\n      //if it's not in the same place... aka, a valid move taken\n      if (!(gridX == self.gridPos.x && gridY == self.gridPos.y))\n      {\n        self.gridPos = ccp(gridX, gridY);\n        self.unitValue++;\n        self.direction = self.dragDirection;\n        [self updateLabel];\n      }\n  }\n}\n```", "```swift\nFOUNDATION_EXPORT NSString *const kTurnCompletedNotification;\n```", "```swift\nNSString *const kTurnCompletedNotification = @\"unitDragComplete\";\n```", "```swift\n//pass the unit through to the MainScene\n[[NSNotificationCenter defaultCenter] postNotificationName:kTurnCompletedNotification object:nil userInfo:@{@\"unit\" : self}];\n```", "```swift\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(moveUnit:) name:kTurnCompletedNotification object:nil];\n```", "```swift\n-(void)moveUnit:(NSNotification*)notif\n{\n  NSDictionary *userInfo = [notif userInfo];\n  Unit *u = (Unit*)userInfo[@\"unit\"];\n  u.position = [self getPositionForGridCoord:u.gridPos];\n}\n\n-(void)dealloc\n{\n  [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n```", "```swift\nNSInteger numTurnSurvived, numUnitsKilled, numTotalScore;\n```", "```swift\n-(void)updateLabels\n{\n  lblTotalScore.string = [NSString stringWithFormat:@\"%ld\", (long)numTotalScore];\n  lblTurnsSurvived.string = [NSString stringWithFormat:@\"%ld\", (long)numTurnSurvived];\n  lblUnitsKilled.string = [NSString stringWithFormat:@\"%ld\", (long)numUnitsKilled];\n}\n```", "```swift\n++numTurnSurvived;\n++numTotalScore;\n[self updateLabels];\n```", "```swift\nnumTotalScore = 1;\nnumTurnSurvived = 0;\nnumUnitsKilled = 0;\n```", "```swift\nNSMutableArray *arrEnemies;\n```", "```swift\narrEnemies = [[NSMutableArray alloc] init];\n[arrEnemies addObject:enemy];\n```", "```swift\n//for each Unit in the arrEnemies array...\nfor (Unit *enemy in arrEnemies)\n{\n  if (enemy.gridPos.x == u.gridPos.x &&\n     enemy.gridPos.y == u.gridPos.y)\n  {\n     //collision!\n\n  }\n}\n```", "```swift\n{\n      //collision!      \n      NSInteger enemyVal = enemy.unitValue;\n      NSInteger friendVal = u.unitValue;\n\n      //tie, both dead\n      if (enemyVal == friendVal)\n      {\n        [self removeChild:u];\n        [arrEnemies removeObject:enemy];\n        [self removeChild:enemy];\n        ++numUnitsKilled;\n      }\n      //enemy higher\n      else if (enemy.unitValue > u.unitValue)\n      {\n        enemy.unitValue -= friendVal;\n        [enemy updateLabel];\n        [self removeChild:u];\n      }\n      //friendly higher\n      else\n      {\n        u.unitValue -= enemyVal;\n        [u updateLabel];\n        [arrEnemies removeObject:enemy];\n        [self removeChild:enemy];\n        ++numUnitsKilled;\n      }\n\n      //exit the for loop so no \"bad things\" happen\n      break;\n  }\n```", "```swift\n@interface MenuScene : CCNode\n{\n  CGSize winSize;\n}\n+(CCScene*)scene;\n@end\n```", "```swift\n+(CCScene *)scene\n{\n  return [[self alloc] init];\n}\n\n-(id)init\n{\n  if ((self=[super init]))\n  {\n\n  }\n  return self;\n}\n```", "```swift\n-(id)init\n{\n  if ((self=[super init]))\n  {\n    //these values range 0 to 1.0, so use float to get ratio\n    CCNode *background = [CCNodeColor nodeWithColor:[CCColor colorWithRed:58/255.f green:138/255.f blue:88/255.f]];\n    [self addChild:background];\n  }\n  return self;\n}\n```", "```swift\n#import \"MainScene.h\"\n#import \"MenuScene.h\" //the line to add. Note: it says MENU scene, not MAIN scene. They're similar, but different. We want both here.\n\n@implementation MainScene\n```", "```swift\n[btnMenu setTarget:self selector:@selector(goToMenu)];\n```", "```swift\n-(void)goToMenu\n{\n  [[CCDirector sharedDirector] replaceScene:[MenuScene scene]];\n}\n```", "```swift\nwinSize = [CCDirector sharedDirector].viewSize;\nCCButton *btnPlay = [CCButton buttonWithTitle:@\"\" spriteFrame:[CCSpriteFrame frameWithImageNamed:@\"btnPlay.png\"]];\nbtnPlay.position = ccp(winSize.width/2, winSize.height/2);\n[btnPlay setTarget:self selector:@selector(goToGame)];\n[self addChild:btnPlay];\n```", "```swift\n-(void)goToGame\n{\n  [[CCDirector sharedDirector] replaceScene:[MainScene scene]];\n}\n```"]