["```swift\nView.ignoreSiblingOrder = true\n```", "```swift\nView.showsFPS = true          // #1\n\nView.showsNodeCount = true    //#2\n\nView.showsDrawCount = true    //#3\n\nView.showsQuadCount = true    //#4\n```", "```swift\nlet scoreText = SKLabelNode(fontNamed: \"Chalkduster\")\n    var score = 0\n```", "```swift\nfunc addScoreLabel()\n    {\n        self.scoreText.text = \"Score: 0\"\n        self.scoreText.fontSize = 30\n        self.scoreText.position = CGPointMake(CGRectGetMinX(self.frame) + scoreText.frame.width / 1.8  , CGRectGetMidY(self.frame) + scoreText.frame.height * 4.2)\n        self.addChild(self.scoreText)\n    }\n```", "```swift\nself.score = score + 10\n\nself.scoreText.text = \"Score: \\(String(self.score))\"\n```", "```swift\nself.highestScore = self.score\nNSUserDefaults.standardUserDefaults().setObject(highestScore, forKey:\"HighestScore\")\nNSUserDefaults.standardUserDefaults().setInteger(highestScore, forKey:\"SCORE\")\n```", "```swift\nself.player.runAction(SKAction.sequence(\n[inOutActionWhenPlayerDied,\ninOutActionWhenPlayerDied.reversedAction(),\nupActionWhenPlayerDied,removeFromParent]),gotoMenuScreen)\n```", "```swift\nself.player.runAction(SKAction.sequence(\n[inOutActionWhenPlayerDied,\ninOutActionWhenPlayerDied.reversedAction(),\nupActionWhenPlayerDied,removeFromParent]),\ncompletion: gotoSavePlayerScreen)\n```", "```swift\nfunc gotoSavePlayerScreen()\n    {\n        self.player.removeFromParent()\n\n        println(\"The Saved Score Is:  \\(savedScore)\")\n        println(\"The Highest Score Is:  \\(highestScore)\")\n\n        if self.highestScore > savedScore\n        {\n            let transitionEffect = SKTransition.doorsCloseHorizontalWithDuration(1.5)\n            highScorerListInstance = ScoreList\n    (size: self.size) // , playbutton: \"Play\", background: \"BG\")\n            highScorerListInstance!.anchorPoint = CGPoint(x: 0.5, y: 0.5)\n            self.view?.presentScene(highScorerListInstance , transition:transitionEffect)\n        }\n\n        else if self.highestScore <= savedScore\n\n        {\n           gotoMenuScreen()\n        }\n}\n```", "```swift\nfunc congratsUserAndSaveScorerName()\n    {\n         var congratsUserLabel = SKLabelNode(fontNamed: \"Chalkduster\")\n        congratsUserLabel.fontColor = UIColor.redColor()\n        congratsUserLabel.name = \"CONGRATS\"\n        congratsUserLabel.color = UIColor.lightGrayColor()\n        congratsUserLabel.text = \"Congratulations!! \"\n        congratsUserLabel.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame) + congratsUserLabel.frame.height * 2)\n        congratsUserLabel.zPosition = 3\n        self.addChild(congratsUserLabel)\n    }\n```", "```swift\nfunc addCancelBtn()\n    {\n        var Cancelbutton = SKLabelNode(fontNamed: FontFile)\n        Cancelbutton.fontColor = UIColor.blueColor()\n        Cancelbutton.name = \"CANCEL\"\n        Cancelbutton.text = \"CANCEL\"\n        Cancelbutton.position = CGPointMake(CGRectGetMinX(self.frame) + Cancelbutton.frame.width/2 , CGRectGetMinY(self.frame))\n        Cancelbutton.zPosition = 3\n        self.addChild(Cancelbutton)\n    }\nfunc gotoMenuScreen()\n    {\n        self.playerNameTextField.removeFromSuperview()\n        let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n        menuSceneInstance = MenuScene(size: self.size , playbutton: \"Play\", background: \"BG\")\n        menuSceneInstance!.anchorPoint = CGPoint(x: 0.5, y: 0.5)\n        self.view?.presentScene(menuSceneInstance , transition:transitionEffect)\n\n    }\n```", "```swift\nif node.name == \"CANCEL\"\n{\n     gotoMenuScreen()\n\n}\n```", "```swift\nlet playerNameTextField = UITextField(frame: CGRectMake(50, 150, 250, 50))\n```", "```swift\nfunc addPlayerNameTextBox()\n    {\n        playerNameTextField.center = CGPointMake(self.size.width / 2, self.size.height / 2)\n        playerNameTextField.backgroundColor = UIColor.whiteColor()\n        playerNameTextField.placeholder = \"Enter Your Name\"\n        playerNameTextField.borderStyle = UITextBorderStyle.RoundedRect\n        self.view?.addSubview(playerNameTextField)\n    }\n```", "```swift\nfunc textFieldShouldReturn(playerNameTextField: UITextField) -> Bool\n    {\n        println(\"Text Field Return Key\")\n        playerNameTextField.resignFirstResponder()\n        return true\n\n    }\n```", "```swift\nlet addPlayerButton = SKSpriteNode(imageNamed:\"add-player\")\n```", "```swift\nfunc addScoresSceneBtn()\n    {\n        addPlayerButton.name = \"SCORES\"\n        self.addPlayerButton.position = CGPointMake(CGRectGetMidX(self.frame),CGRectGetMinY(self.frame)/3)\n        self.addChild(self.addPlayerButton)\n    }\ndeclare the following variable before adding didMoveToView() method\n\nvar highestScorerName:String = String()\n```", "```swift\nif node.name == \"SCORES\"\n            {\n                if playerNameTextField.text.isEmpty\n                {\n                    playerNameTextField.placeholder = \"Please Enter the Player Name\"\n                }\n                else\n                {\n                    self.highestScorerName = self.playerNameTextField.text NSUserDefaults.standardUserDefaults().setObject(highestScorerName, forKey:\"HighestScorerName\")\n                    NSUserDefaults.standardUserDefaults().synchronize()\n                     gotoMenuScreen()\n                }\n            }\n```", "```swift\nfunc gotoMenuScreen()\n    {\n        self.playerNameTextField.removeFromSuperview()\n        let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n        menuSceneInstance = MenuScene(size: self.size , playbutton: \"Play\", background: \"BG\")\n        menuSceneInstance!.anchorPoint = CGPoint(x: 0.5, y: 0.5)\nself.view?.presentScene(menuSceneInstance , transition:transitionEffect)\n    }\n```", "```swift\nvar savedScorerName: String = String()\nfunc showHeighestScorerName()\n    {\nif(NSUserDefaults.standardUserDefaults().objectForKey\n(\"HighestScorerName\")) == (nil)\n        { savedScorerName = \" \"\n        }\n        else\n        { savedScorerName = NSUserDefaults.standardUserDefaults().objectForKey\n(\"HighestScorerName\") as String\n            println(savedScorerName)\n        }\nvar highScorerNameLabel = SKLabelNode(fontNamed: \"Chalkduster\")\n        highScorerNameLabel.fontColor = UIColor.blueColor()\n        highScorerNameLabel.name = \"HIGHESTSCORERNAME\"\n        highScorerNameLabel.color = UIColor.lightGrayColor()\n        highScorerNameLabel.text = \"High Scorer :  \\(savedScorerName)\"\n        highScorerNameLabel.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame) + (highScorerNameLabel.frame.height * 2))\n        highScorerNameLabel.zPosition = 3\n        self.addChild(highScorerNameLabel)\n    }\n```", "```swift\n    func showHeighestScores()\n    {\nif(NSUserDefaults.standardUserDefaults().objectForKey\n(\"HighestScore\")) == (nil)\n        {\n            savedScore = 0\n        }\n        else\n        {\n            savedScore = NSUserDefaults.standardUserDefaults().objectForKey(\"HighestScore\") as! Int\n            println(savedScore)\n        }\n\n        var highScoreLabel = SKLabelNode(fontNamed: \"Chalkduster\")\n        highScoreLabel.fontColor = UIColor.blueColor()\n        highScoreLabel.name = \"HIGHESTSCORE\"\n        highScoreLabel.color = UIColor.lightGrayColor()\n        highScoreLabel.text = \"The Score is: \\(savedScore)\"\n        highScoreLabel.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame))\n        highScoreLabel.zPosition = 3\n        self.addChild(highScoreLabel)\n    }\n```", "```swift\nfunc addBackBtn()\n    {\n        var mainMenubutton = SKLabelNode(fontNamed: FontFile)\n        mainMenubutton.fontColor = UIColor.blueColor()\n        mainMenubutton.name = \"MAIN MENU\"\n        mainMenubutton.text = \"MAIN MENU\"\n        mainMenubutton.position = CGPointMake(CGRectGetMinX(self.frame) + mainMenubutton.frame.width/2 , CGRectGetMinY(self.frame))\n        mainMenubutton.zPosition = 3\n        self.addChild(mainMenubutton)\n    }\n\nvar menuSceneInstance : MenuScene?\n func goToMenuScene()\n    {\n        let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n        menuSceneInstance = MenuScene(size: self.size , playbutton: \"Play\", background: \"BG\")\n        menuSceneInstance!.anchorPoint = CGPoint(x: 0.5, y: 0.5)\n        self.view?.presentScene(menuSceneInstance , transition:transitionEffect)\n    }\n```", "```swift\nfor touch: AnyObject in touches\n        {\n            let location = touch.locationInNode(self)\n            let node = self.nodeAtPoint(location)\n            if node.name == \"MAIN MENU\"\n            {\n                goToMenuScene()\n            }\n        }\n```", "```swift\n    Import AVFoundation\n    ```", "```swift\n    var avPlayer:AVAudioPlayer!\n    ```", "```swift\n    let backgroundSound = \"game_music\"\n        let gameOutSound = \"Strong_Punch-Mike_Koenig-574430706\"\n    ```", "```swift\n    func readFileIntoAVPlayer(soundName:String, ext:String)\n        {\n            var error: NSError?\n            let fileURL:NSURL = NSBundle.mainBundle().URLForResource(soundName, withExtension: ext)!\n\n            // the player must be a field. Otherwise it will be released before playing starts.\n            self.avPlayer = AVAudioPlayer(contentsOfURL: fileURL, error: &error)\n            if avPlayer == nil\n            {\n                if let e = error {\n                    println(e.localizedDescription)\n                }\n            }\n            if avPlayer.playing\n            {\n                avPlayer.stop()\n            }\n\n            println(\"playing \\(fileURL)\")\n            avPlayer.delegate = self\n            avPlayer.prepareToPlay()\n            avPlayer.volume = 1.0\n            avPlayer.play()\n\n        }\n    ```", "```swift\n    readFileIntoAVPlayer(backgroundSound, ext: \"mp3\")\n    ```", "```swift\n    avPlayer.stop()\n\n    readFileIntoAVPlayer(gameOutSound, ext: \"wav\")\n    ```", "```swift\nplayer = SKSpriteNode(texture:atlasForPlayerRun.textureNamed(\"bro5_run0001.png\"))\n```", "```swift\nfunc runForwardTexture()\n    {\n        let hero_run_anim = SKAction.animateWithTextures([\n\n            atlasForPlayerRun.textureNamed(\"bro5_run0002.png\"),\n            atlasForPlayerRun.textureNamed(\"bro5_run0002.png\"),\n            atlasForPlayerRun.textureNamed(\"bro5_run0003.png\"),\n            atlasForPlayerRun.textureNamed(\"bro5_run0004.png\"),\n            atlasForPlayerRun.textureNamed(\"bro5_run0005.png\"),\n            atlasForPlayerRun.textureNamed(\"bro5_run0006.png\"),\n            atlasForPlayerRun.textureNamed(\"bro5_run0007.png\")\n            ], timePerFrame: 0.06)\n\n        let run = SKAction.repeatActionForever(hero_run_anim)\n\n        player.runAction(run, withKey: \"running\")\n\n    }\n```"]