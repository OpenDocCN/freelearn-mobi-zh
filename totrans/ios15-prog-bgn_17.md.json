["```swift\n    struct ExploreItem {\n    }\n    ```", "```swift\n    Struct ExploreItem {\n    name property will store the cuisine name, and the image property will store the filename of an image from the Assets.xcassets file.Important InformationStructures are covered in [*Chapter 7*](B17469_07_Final_VK_ePub.xhtml#_idTextAnchor108), *Classes, Structures, and Enumerations.*\n    ```", "```swift\nlet myExploreItem = ExploreItem(name:\"name\", \nimage:\"image\")\n```", "```swift\n    extension ExploreItem {\n\n    }\n    ```", "```swift\n    init(dict: [String: String]) {\n\n    }\n    ```", "```swift\n    self.name = dict[\"name\"]\n    self.image = dict[\"image\"]\n    ```", "```swift\n    extension ExploreItem {\n       init(dict: [String: String]) {\n          self.name = dict[\"name\"]\n          self.image = dict[\"image\"]\n       }\n    }\n    ```", "```swift\n    class ExploreDataManager {\n\n    }\n    ```", "```swift\n    private func loadData() -> [[String: String]] {\n       let decoder = PropertyListDecoder()\n       if let path = Bundle.main.path(forResource:\n       \"ExploreData\", ofType: \"plist\"), \n       let exploreData = FileManager.default.contents(\n       atPath: path), \n       let exploreItems = try? decoder.decode([[String: \n       String]].self, from: exploreData) {\n          return exploreItems\n       }\n       return [[:]]\n    }\n    ```", "```swift\n    private\n    ```", "```swift\n    func loadData() -> [[String: String]]\n    ```", "```swift\n    let decoder = PropertyListDecoder()\n    ```", "```swift\n    if let path = Bundle.main.path(forResource:\n    \"ExploreData\", ofType: \"plist\"),\n    ```", "```swift\n    let exploreData = FileManager.default.contents(\n    atPath: path),\n    ```", "```swift\n    let exploreItems = try? decoder.decode([[String: \n    String]].self, from: exploreData) {\n    ```", "```swift\n   return exploreItems\n}\n```", "```swift\n   return [[:]]\n}\n```", "```swift\n    func fetch() {\n       for data in loadData() {\n          print(data)\n       }\n    }\n    ```", "```swift\n    override func viewDidLoad() {\n       super.viewDidLoad()\n    ExploreData.plist file are read and printed in the Debug area, as shown:![Figure 14.5: Debug area displaying contents of ExploreData.plist\n    ](img/Figure_14.05_B17469.jpg)Figure 14.5: Debug area displaying contents of ExploreData.plistNow, you'll assign the `name` and `image` strings from each dictionary in the array to an `ExploreItem` instance.\n    ```", "```swift\n    private var exploreItems: [ExploreItem] = []\n    ```", "```swift\n    exploreItems.append(ExploreItem(dict: data))\n    ```", "```swift\n    import Foundation\n    class ExploreDataManager {\n       private var exploreItems: [ExploreItem] = []\n       func fetch() {\n          for data in loadData() {\n             exploreItems.append(ExploreItem(dict: \n             data))\n          }\n       }\n       private func loadData() -> [[String: String]] {\n          let decoder = PropertyListDecoder()\n          if let path = Bundle.main.path(forResource:\n          \"ExploreData\", ofType: \"plist\"), \n          let exploreData = \n          FileManager.default.contents(atPath: path), \n          let exploreItems = try? \n          decoder.decode([[String: String]].self, \n          from: exploreData) {\n             return exploreItems\n          }\n          return [[:]]\n       }\n    }\n    ```", "```swift\n    import UIKit\n    class ExploreCell: UICollectionViewCell {\n    }\n    ```", "```swift\nfunc numberOfExploreItems() -> Int {\n   exploreItems.count\n}\nfunc exploreItem(at index: Int) -> ExploreItem {\n   exploreItems[index]\n}\n```", "```swift\n    override func viewDidLoad() {\n       super.viewDidLoad()\n       let manager = ExploreDataManager()\n       manager.fetch()\n    }\n    ```", "```swift\n    @IBOutlet var collectionView: UICollectionView!\n    let manager = ExploreDataManager()\n    ```", "```swift\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n       manager.numberOfExploreItems()\n    }\n    ```", "```swift\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n       let cell = collectionView.dequeueReusableCell(\n       withReuseIdentifier: \"exploreCell\", for: \n       indexPath) ExploreCell.\n\n    ```", "```swift\n\n    Gets the `ExploreItem` instance that corresponds to the current cell in the collection view. In other words, the first cell in the collection view corresponds to the first `ExploreItem` instance in the `exploreItems` array, the second cell corresponds to the second `ExploreItem` instance, and so on.\n\n    ```", "```swift\n\n    Sets the `text` property of the cell's `nameLabel` to the name of the `ExploreItem` instance.\n\n    ```", "```swift\n\n    Gets the `image` string from the `ExploreItem` instance, gets the corresponding image from the `Assets.xcassets` file, and assigns it to the `image` of the cell's `imgExplore` property.\n    ```"]