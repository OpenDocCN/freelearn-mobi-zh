["```java\n    public class TrackerStat : MonoBehaviour {\n    ```", "```java\n    public class TrackerStat {\n    ```", "```java\n    public string key = \"\";\n    public float averageTime = 0;\n    public int totalCalls = 0;\n    public float longestCall = 0;\n    ```", "```java\n    public float openTime = 0;\n    public bool isOpen = false;\n    ```", "```java\n    public void Open() {\n      if(isOpen) {\n        Debug.LogWarning(\"Tracking is already open. Key: \" + key);\n      }\n\n      isOpen = true;\n      openTime = Time.realtimeSinceStartup;\n    }\n    ```", "```java\n    public void Close(float closeTime) {\n      if(!isOpen) {\n        Debug.LogWarning(\"Tracking is already closed. Key: \" + key);\n        return;\n      }\n      isOpen = false;\n      AddValue(closeTime - openTime);\n    }\n    ```", "```java\n    public void AddValue(float callLength) {\n      float totalTime = averageTime * totalCalls;\n      averageTime = (totalTime + callLength) / (totalCalls + 1);\n\n      longestCall = longestCall < callLength ? callLength : longestCall;\n\n      totalCalls++;\n    }\n    ```", "```java\n    private static TrackerStat[] stats = new TrackerStat[0];\n    ```", "```java\n    public static void Open(string key) {\n      int index = -1;\n\n      for(int i=0;i<stats.Length;i++) {\n        if(stats[i].key == key) {\n          index = i;\n          break;\n        }\n      }\n    ```", "```java\n      if(index < 0) {\n        AddNewStat(key);\n        index = stats.Length – 1;\n      }\n\n      stats[index].Open();\n    }\n    ```", "```java\n    private static void AddNewStat(string key) {\n      TrackerStat[] temp = stats;\n      stats = new TrackerStat[temp.Length + 1];\n\n      for(int i=0;i<temp.Length;i++) {\n        stats[i] = temp[i];\n      }\n\n      stats[stats.Length – 1] = new TrackerStat();\n      stats[stats.Length – 1].key = key;\n    }\n    ```", "```java\n    public static void Close(string key) {\n      float closeTime = Time.realtimeSinceStartup;\n\n      for(int i=0;i<stats.Length;i++) {\n        if(stats[i].key == key) {\n          stats[i].Close(closeTime);\n          return;\n        }\n      }\n\n      Debug.LogError(\"Tracking stat not found. Key: \" + key);\n    }\n    ```", "```java\n    public static void Clear() {\n      stats = new TrackerStat[0];\n    }\n    ```", "```java\n    public void OnGUI() {\n      GUILayout.BeginVertical();\n\n      GUILayout.BeginHorizontal();\n      GUILayout.Label(\"Key\", GUILayout.Width(150));\n      GUILayout.Label(\"Average\", GUILayout.Width(100));\n      GUILayout.Label(\"Total\", GUILayout.Width(50));\n      GUILayout.Label(\"Longest\", GUILayout.Width(100));\n      GUILayout.EndHorizontal();\n    ```", "```java\n      for(int i=0;i<stats.Length;i++) {\n        GUILayout.BeginHorizontal();\n\n        GUILayout.Label(stats[i].key.ToString(), GUILayout.Width(150));\n        GUILayout.Label(stats[i].averageTime.ToString(), GUILayout.Width(100));\n        GUILayout.Label(stats[i].totalCalls.ToString(), GUILayout.Width(50));\n        GUILayout.Label(stats[i].longestCall.ToString(), GUILayout.Width(100));\n\n        GUILayout.EndHorizontal();\n      }\n    ```", "```java\n      if(GUILayout.Button(\"Clear\"))\n        Clear();\n\n      GUILayout.EndVertical();\n    }\n    ```", "```java\n    ScriptTracker.Open(\"PlayerShip_Rotate\");\n    ```", "```java\n    ScriptTracker.Close(\"PlayerShip_Rotate\");\n    ```"]