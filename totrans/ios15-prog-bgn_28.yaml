- en: '*Chapter 24*: Getting Started with Swift Concurrency'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第24章*：Swift 并发入门'
- en: Apple introduced **Swift Concurrency** during WWDC2021, which adds support for
    structured asynchronous and parallel programming to Swift 5.5\. This allows you
    to write concurrent code which is more readable and easier to understand.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果公司在 WWDC2021 上推出了 **Swift 并发**，为 Swift 5.5 添加了对结构化异步和并行编程的支持。这使得您可以编写更易读、更易于理解的并发代码。
- en: In this chapter, you will learn the basic concepts of Swift Concurrency. Next,
    you will examine an app without concurrency and explore its issues. After that,
    you will use `RestaurantListViewController` class in your *Let's Eat* app to use
    `async`/`await` for loading restaurant images.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习 Swift 并发的基本概念。接下来，您将检查一个没有并发的应用，并探讨其问题。然后，您将在您的 *Let's Eat* 应用中使用
    `RestaurantListViewController` 类来使用 `async`/`await` 加载餐厅图片。
- en: By the end of this chapter, you'll have learned the basics on how Swift Concurrency
    works, and how to update your own apps to use it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解 Swift 并发的工作原理以及如何更新自己的应用以使用它。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将涵盖以下主题：
- en: Understanding Swift Concurrency
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Swift 并发
- en: Examining an app without concurrency
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查没有并发的应用
- en: Updating the app using `async`/`await`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `async`/`await` 更新应用
- en: Improving efficiency using `async-let`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `async-let` 提高效率
- en: Updating `RestaurantListViewController` to use async/await
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `RestaurantListViewController` 更新为使用 async/await
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will use a sample app, *BreakfastMaker*, to help you understand the concepts
    of Swift Concurrency. Later in the chapter, you will continue working on the `LetsEat`
    project that you modified in [*Chapter 22*](B17469_22_Final_VK_ePub.xhtml#_idTextAnchor431)*,
    Getting Started with Mac Catalyst*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用一个示例应用，*BreakfastMaker*，来帮助您理解 Swift 并发的概念。在本章的后面部分，您将继续在您在 [*第22章*](B17469_22_Final_VK_ePub.xhtml#_idTextAnchor431)*，Mac
    Catalyst 入门* 中修改的 `LetsEat` 项目中工作。
- en: 'The completed Xcode project for this chapter is in the `Chapter24` folder of
    the code bundle for this book, which can be downloaded here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完成版 Xcode 项目位于本书代码包的 `Chapter24` 文件夹中，您可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频，看看代码的实际效果：
- en: '[https://bit.ly/3d4YWH5](https://bit.ly/3d4YWH5)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3d4YWH5](https://bit.ly/3d4YWH5)'
- en: Let's start by learning about Swift Concurrency in the next section.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下一节学习 Swift 并发开始。
- en: Understanding Swift Concurrency
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Swift 并发
- en: In Swift 5.5, Apple has added support for writing asynchronous and parallel
    code in a structured way.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Swift 5.5 中，苹果添加了对以结构化方式编写异步和并行代码的支持。
- en: Asynchronous code allows your app to suspend and resume code. This allows your
    app to do things like update the user interface while still performing operations
    like downloading data from the internet.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 异步代码允许您的应用挂起和恢复代码。这允许您的应用在执行如从互联网下载数据等操作的同时更新用户界面。
- en: Parallel code allows your app to run multiple pieces of code simultaneously.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 并行代码允许您的应用同时运行多个代码片段。
- en: Important Information
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: You can find links to all of Apple's Swift Concurrency videos during WWDC2021
    at [https://developer.apple.com/news/?id=2o3euotz](https://developer.apple.com/news/?id=2o3euotz).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.apple.com/news/?id=2o3euotz](https://developer.apple.com/news/?id=2o3euotz)
    找到 WWDC2021 期间苹果所有 Swift 并发视频的链接。
- en: You can read Apple's Swift Concurrency documentation at [https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html](https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html](https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html)
    阅读苹果的 Swift 并发文档。
- en: 'To give you an idea of how Swift Concurrency works, imagine that you are making
    a poached egg sandwich for breakfast. Here is one way of doing it:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您了解 Swift 并发的工作原理，想象一下您正在为早餐制作一个水煮蛋三明治。以下是制作的一种方法：
- en: Put two slices of bread into the toaster.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两片面包放入烤面包机中。
- en: Wait two minutes until the bread is toasted.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待两分钟，直到面包烤熟。
- en: Put an egg in a bowl with some water and put the bowl into the microwave.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个装有水的碗中放入一个鸡蛋，并将碗放入微波炉中。
- en: Wait six minutes until the egg is cooked.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待六分钟，直到鸡蛋煮熟。
- en: Make your sandwich.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作您的三明治。
- en: 'This takes eight minutes in total. Now think about this sequence of events.
    Do you spend that time just staring at the toaster and the microwave? You''ll
    probably be using your phone while the bread is in the toaster and the egg is
    in the microwave. In other words, you can do other things while the bread and
    egg are being prepared. So, the sequence of events would be more accurately described
    as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 总共需要八分钟。现在考虑这个事件序列。你只是盯着烤面包机和微波炉吗？你可能会在面包在烤面包机和鸡蛋在微波炉中时使用手机。换句话说，你可以在面包和鸡蛋准备的过程中做其他事情。因此，事件序列更准确地描述如下：
- en: Put two slices of bread into the toaster.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两片面包放入烤面包机中。
- en: Use your phone for two minutes until the bread is toasted.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用手机使用两分钟，直到面包烤好。
- en: Put an egg in a bowl with some water and put the bowl into the microwave.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个装有水的碗中放一个鸡蛋，然后将碗放入微波炉中。
- en: Use your phone for six minutes until the egg is cooked.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用手机使用六分钟，直到鸡蛋煮熟。
- en: Make your sandwich.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作你的三明治。
- en: Here, you can see that your interaction with the toaster and microwave can be
    suspended, then resumed, which means these operations are asynchronous. The operation
    still takes eight minutes, but you were able to do other things during that time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到你与烤面包机和微波炉的交互可以被挂起，然后恢复，这意味着这些操作是异步的。操作仍然需要八分钟，但你可以在那段时间内做其他事情。
- en: 'There is another factor to consider. You don''t need to wait for the bread
    to finish toasting before you put the egg in the microwave. This means you could
    modify the sequence of steps as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的因素是，你不需要等待面包烤完才能把鸡蛋放入微波炉。这意味着你可以修改步骤序列如下：
- en: Put two slices of bread into the toaster.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两片面包放入烤面包机中。
- en: While the bread is toasting, put an egg in a bowl with some water, and put the
    bowl into the microwave.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当面包正在烤的时候，把一个鸡蛋放在一个装有水的碗中，然后把碗放入微波炉中。
- en: Use your phone for six minutes until the egg is cooked.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用手机使用六分钟，直到鸡蛋煮熟。
- en: Make your sandwich.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作你的三明治。
- en: Toasting the bread and poaching the egg are now carried out in parallel, which
    saves you two minutes. Great! Do note however that you have more things to keep
    track of.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 烤面包和煮鸡蛋现在是并行进行的，这为你节省了两分钟。太好了！但是请注意，你还有更多的事情要跟踪。
- en: Now that you understand the concepts of asynchronous and parallel operations,
    let's study the issues an app that does not have concurrency has in the next section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了异步和并行操作的概念，让我们在下一节研究没有并发功能的应用程序所遇到的问题。
- en: Examining an app without concurrency
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查没有并发功能的程序
- en: 'You''ve seen how asynchronous and parallel operations can help you prepare
    breakfast faster and allow you to use your phone while you''re doing it. Now let''s
    look at a sample app that simulates the process of preparing breakfast. Initially,
    this app does not have concurrency implemented, so you can see how that affects
    the app. Follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了异步和并行操作如何帮助你更快地准备早餐，并允许你在操作过程中使用手机。现在让我们看看一个模拟准备早餐过程的示例应用程序。最初，这个应用程序没有实现并发，所以你可以看到这如何影响应用程序。按照以下步骤操作：
- en: 'If you have not already done so, download the `Chapter24` folder of the code
    bundle for this book at this link: [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果还没有这样做，请在此链接下载本书的代码包中的`Chapter24`文件夹：[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)。
- en: Open the `resources` folder in the `Chapter24` folder, and you'll see two folders,
    `BreakfastMaker-start` and `BreakfastMaker-complete`. The first folder contains
    the app that you will be modifying in this chapter, and the second contains the
    completed app.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter24`文件夹中打开`resources`文件夹，你会看到两个文件夹，`BreakfastMaker-start`和`BreakfastMaker-complete`。第一个文件夹包含你将在本章中修改的应用程序，第二个文件夹包含完成的应用程序。
- en: 'Open the `BreakfastMaker-start` folder and open the `BreakfastMaker` Xcode
    project. Click on the `Main` storyboard file in the Project navigator. You should
    see four labels and a button in the **View Controller Scene** as shown:![Figure
    24.1: Main storyboard file showing the View Controller Scene'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BreakfastMaker-start`文件夹，然后打开`BreakfastMaker` Xcode项目。在项目导航器中点击`Main`故事板文件。你应该会看到四个标签和一个按钮在**视图控制器场景**中，如图所示：![图24.1：显示视图控制器场景的主故事板文件
- en: '](img/Figure_24.01_B17469.jpg)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_24.01_B17469.jpg]'
- en: 'Figure 24.1: Main storyboard file showing the View Controller Scene'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图24.1：显示视图控制器场景的主故事板文件
- en: The app will display a screen which shows the status of the toast, egg, and
    sandwich, and the time taken to prepare the sandwich. The app will also display
    a button you can use to test the responsiveness of the user interface.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用将显示一个屏幕，显示烤面包、鸡蛋和三明治的状态，以及准备三明治所需的时间。应用还将显示一个按钮，你可以使用它来测试用户界面的响应性。
- en: 'Click the `ViewController` file in the Project navigator. You should see the
    following code in the Editor area:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`ViewController`文件。你应该在编辑器区域看到以下代码：
- en: '[PRE0]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, this code simulates the process of making breakfast that was
    described in the previous section. Let''s break it down:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，这段代码模拟了之前章节中描述的做早餐的过程。让我们来分解一下：
- en: '[PRE1]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These outlets are linked to four labels in the `Main` storyboard file. When
    you run the app, these labels will display the status of the toast, egg, and sandwich,
    and also show the time taken to complete the process.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些输出连接到`Main`故事板文件中的四个标签。当你运行应用时，这些标签将显示烤面包、鸡蛋和三明治的状态，以及显示完成整个过程所需的时间。
- en: '[PRE2]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This method is called when the view controller's view appears on screen.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当视图控制器视图出现在屏幕上时，会调用此方法。
- en: '[PRE3]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sets `startTime` to the current time, so the app can later calculate how
    long it takes to make the sandwich.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将`startTime`设置为当前时间，以便应用可以稍后计算制作三明治所需的时间。
- en: '[PRE4]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This makes `toastLabel` display the text `Making toast...`.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使得`toastLabel`显示文本`Making toast...`。
- en: '[PRE5]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This calls the `makeToast()` method, which waits for two seconds to simulate
    the time taken to make toast, then returns the text `Toast done`, which will be
    displayed by `toastLabel`.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这调用`makeToast()`方法，该方法等待两秒来模拟烤面包所需的时间，然后返回文本`Toast done`，将通过`toastLabel`显示。
- en: '[PRE6]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This makes `eggLabel` display the text `Poaching egg...`.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使得`eggLabel`显示文本`Poaching egg...`。
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This calls the `poachEgg()` method, which waits for six seconds to simulate
    the time taken to poach an egg, then returns the text `Egg done`, which will be
    displayed by `eggLabel`.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这调用`poachEgg()`方法，该方法等待六秒来模拟煮鸡蛋所需的时间，然后返回文本`Egg done`，将通过`eggLabel`显示。
- en: '[PRE8]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This calls the `makeSandwich()` method, which returns the text `Sandwich done`,
    which will be displayed by `sandwichLabel`.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这调用`makeSandwich()`方法，该方法返回文本`Sandwich done`，将通过`sandwichLabel`显示。
- en: '[PRE9]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This sets `endTime` to the current time.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将`endTime`设置为当前时间。
- en: '[PRE10]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This calculates the elapsed time (approximately eight seconds), which will be
    displayed by `elapsedTimeLabel`.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这计算了经过的时间（大约八秒），将通过`elapsedTimeLabel`显示。
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This displays `Button tapped` in the Debug area each time the button on screen
    is tapped.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次屏幕上的按钮被点击时，都会在调试区域显示`Button tapped`。
- en: 'Build and run the app, and tap the button the moment the user interface appears:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用，并在用户界面出现时立即点击按钮：
- en: '![Figure 24.2: iOS Simulator running the BreakfastMaker app showing the button
    to be tapped'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图24.2：iOS模拟器运行BreakfastMaker应用，显示要点击的按钮'
- en: '](img/Figure_24.02_B17469.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_24.02_B17469.jpg)'
- en: 'Figure 24.2: iOS Simulator running the BreakfastMaker app showing the button
    to be tapped'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.2：iOS模拟器运行BreakfastMaker应用，显示要点击的按钮
- en: 'You should notice the following issues:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意以下问题：
- en: Tapping the button has no effect initially, and you'll only see `Button tapped`
    in the Debug area after approximately eight seconds.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始点击没有效果，你只能在大约八秒后在调试区域看到`Button tapped`。
- en: '`Making toast...` and `Poaching egg...` are never displayed, and `Toast done`
    and `Egg done` only appear after approximately eight seconds.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Making toast...`和`Poaching egg...`永远不会显示，而`Toast done`和`Egg done`只在大约八秒后出现。'
- en: The reason why this happens is because your app's code did not update the user
    interface while the `makeToast()` and `poachEgg()` methods are running. Your app
    did register the button taps, but was only able to process them and update the
    labels after `makeToast()` and `poachEgg()` have completed execution. These issues
    do not give the user a good experience with your app.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 发生这种情况的原因是因为你的应用代码在`makeToast()`和`poachEgg()`方法运行时没有更新用户界面。你的应用确实注册了按钮点击，但在`makeToast()`和`poachEgg()`完成执行后才能处理它们并更新标签。这些问题不会给你的应用提供良好的用户体验。
- en: You have now experienced the issues presented by an app that does not have concurrency
    implemented. In the next section, you'll modify the app using `async`/`await`
    so that it is able to update the user interface while the `makeToast()` and `poachEgg()`
    methods are running.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经体验了没有实现并发性的应用所呈现的问题。在下一节中，你将使用`async`/`await`修改应用，使其能够在`makeToast()`和`poachEgg()`方法运行时更新用户界面。
- en: Updating the app using async/await
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用async/await更新应用
- en: As you have seen previously, the app is unresponsive when the `makeToast()`
    and `poachEgg()` methods are running. To resolve this, you will use `async`/`await`
    in the app.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您之前所见，当`makeToast()`和`poachEgg()`方法正在运行时，应用会无响应。为了解决这个问题，您将在应用中使用`async`/`await`。
- en: 'Writing the `async` keyword in the method declaration indicates that the method
    is asynchronous. This is what it looks like:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法声明中写入`async`关键字表示该方法异步。这看起来是这样的：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Writing the `await` keyword in front of a method call marks a point where execution
    may be suspended, thus allowing other operations to run. This is what it looks
    like:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法调用之前写入`await`关键字标记了一个可能暂停执行的点，从而允许其他操作运行。这看起来是这样的：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Important Information
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: You can watch Apple's WWDC2021 video discussing async/await at [https://developer.apple.com/videos/play/wwdc2021/10132/](https://developer.apple.com/videos/play/wwdc2021/10132/).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以观看Apple的WWDC2021视频，讨论async/await：[https://developer.apple.com/videos/play/wwdc2021/10132/](https://developer.apple.com/videos/play/wwdc2021/10132/)。
- en: 'You will modify your app to use `async`/`await`. This will enable it to suspend
    the `makeToast()` and `poachEgg()` methods to process button taps and update the
    user interface, then resume execution of both methods afterward. Follow these
    steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您将修改您的应用以使用`async`/`await`。这将使它能够挂起`makeToast()`和`poachEgg()`方法以处理按钮点击并更新用户界面，然后之后继续执行这两个方法。按照以下步骤操作：
- en: 'Modify the `makeToast()` and `poachEgg()` methods as shown to make the code
    in their bodies asynchronous:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照所示修改`makeToast()`和`poachEgg()`方法，使它们的代码体异步：
- en: '[PRE14]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Errors will appear for both `makeToast()` and `poachEgg()`. Click either error
    icon to display the error message:![Figure 24.3: Errors with error icons highlighted'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`makeToast()`和`poachEgg()`方法都会出现错误。点击任一错误图标以显示错误信息：![图24.3：带有错误图标的错误'
- en: '](img/Figure_24.03_B17469.jpg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_24.03_B17469.jpg)'
- en: 'Figure 24.3: Errors with error icons highlighted'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图24.3：带有错误图标的错误
- en: The error is displayed because you're calling an asynchronous method inside
    a method that does not support concurrency. You will need to add the `async` keyword
    to the method declaration to indicate it is asynchronous.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误显示是因为您在不支持并发的方法中调用异步方法。您需要将`async`关键字添加到方法声明中，以指示它是异步的。
- en: For each method, click the `async` keyword to the method declaration.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个方法，点击方法声明中的`async`关键字。
- en: 'Verify that your code looks like this after you''re done:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您完成后的代码看起来像这样：
- en: '[PRE15]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The errors in the `makeToast()` and `poachEgg()` methods should be gone, but
    new errors will appear in the `viewDidAppear()` method. Click one of the error
    icons to see the error message, which will be the same as the message you saw
    earlier. This is because you're calling an asynchronous method inside a method
    that does not support concurrency.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`makeToast()`和`poachEgg()`方法中的错误应该已经消失，但在`viewDidAppear()`方法中会出现新的错误。点击一个错误图标以查看错误信息，该信息将与您之前看到的相同。这是因为您在不支持并发的方法中调用异步方法。'
- en: Click the **Fix** button, and more errors will appear.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**修复**按钮，将出现更多错误。
- en: 'Ignore the one in the method declaration for now and click the one next to
    the `makeToast()` method call to see the error message:![Figure 24.4: Errors with
    error icon for makeToast() highlighted'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在忽略方法声明中的那个，点击`makeToast()`方法调用旁边的错误图标以查看错误信息：![图24.4：带有makeToast()错误图标的错误
- en: '](img/Figure_24.04_B17469.jpg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_24.04_B17469.jpg)'
- en: 'Figure 24.4: Errors with error icon for makeToast() highlighted'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图24.4：带有makeToast()错误图标的错误
- en: This error message is displayed because you did not use `await` when calling
    an asynchronous function.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此错误信息显示是因为您在调用异步函数时没有使用`await`。
- en: Click the `await` keyword before the method call.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法调用之前点击`await`关键字。
- en: Repeat *step 7* and *step 8* for the error next to the `poachEgg()` method call.
    The `await` keyword will be inserted for the `poachEgg()` method call as well.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`poachEgg()`方法调用旁边的错误，重复*步骤7*和*步骤8*。`await`关键字也将插入到`poachEgg()`方法调用中。
- en: 'Click the error icon in the `viewDidLoad()` method declaration to see the error
    message:![Figure 24.5: Error with error icon highlighted'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`viewDidLoad()`方法声明中的错误图标以查看错误信息：![图24.5：带有错误图标的错误
- en: '](img/Figure_24.05_B17469.jpg)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_24.05_B17469.jpg)'
- en: 'Figure 24.5: Error with error icon highlighted'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图24.5：带有错误图标的错误
- en: This error is displayed because you can't use the `async` keyword to make the
    `viewDidAppear()` method asynchronous, as this capability is not present in the
    superclass.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个错误显示出来是因为你不能使用`async`关键字使`viewDidAppear()`方法异步，因为这个功能在父类中不存在。
- en: 'To resolve this issue, you''ll remove the `async` keyword and enclose all the
    code after `super.viewDidAppear()` in a `Task` block, which will allow it to execute
    asynchronously in a synchronous method. Modify your code as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，你将移除`async`关键字，并将`super.viewDidAppear()`之后的全部代码放在一个`Task`块中，这将允许它在同步方法中异步执行。按照以下方式修改你的代码：
- en: '[PRE16]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Build and run the app, and tap the button as soon as you see the user interface.
    Note that `Button tapped` now appears immediately in the Debug area, and the labels
    update as they should. This is because the app is now able to suspend the `makeToast()`
    and `poachEgg()` methods to respond to taps and update the user interface, and
    resume them later. Awesome!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用，并在看到用户界面后立即点击按钮。注意，`Button tapped`现在立即出现在调试区域，并且标签按预期更新。这是因为应用现在能够挂起`makeToast()`和`poachEgg()`方法以响应用户点击并更新用户界面，然后稍后恢复它们。太棒了！
- en: 'However, if you look at the elapsed time, you''ll see that the app takes slightly
    longer to prepare breakfast than it did before:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你查看经过的时间，你会发现应用准备早餐的时间比之前稍微长一点：
- en: '![Figure 24.6: iOS Simulator running the BreakfastMaker app showing elapsed
    time'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 24.6: iOS 模拟器运行 BreakfastMaker 应用，显示经过的时间'
- en: '](img/Figure_24.06_B17469.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_24.06_B17469.jpg]'
- en: 'Figure 24.6: iOS Simulator running the BreakfastMaker app showing elapsed time'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 24.6: iOS 模拟器运行 BreakfastMaker 应用，显示经过的时间'
- en: This is partly due to the overhead required for suspending and resuming methods,
    but there is another factor involved. Even though the `makeToast()` and `poachEgg()`
    methods are now asynchronous, the `poachEgg()` method only starts execution after
    the `makeToast()` method has finished execution. In the next section, you'll see
    how you can use `async-let` to run the `makeToast()` and `poachEgg()` methods
    in parallel.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分是由于挂起和恢复方法所需的开销，但还有一个因素在起作用。尽管`makeToast()`和`poachEgg()`方法现在是异步的，但`poachEgg()`方法只有在`makeToast()`方法执行完毕后才开始执行。在下一节中，你将看到如何使用`async-let`来并行运行`makeToast()`和`poachEgg()`方法。
- en: Improving efficiency using async-let
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 async-let 提高效率
- en: 'Even though your app is now responsive to button taps and is able to update
    the user interface while the `makeToast()` and `poachEgg()` methods are running,
    both methods still execute sequentially. The solution here is to use `async-let`.
    Writing `async` in front of a `let` statement when you define a constant, and
    then writing `await` when you access the constant, allows parallel execution of
    asynchronous methods:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你的应用现在对按钮点击做出响应，并且能够在`makeToast()`和`poachEgg()`方法运行时更新用户界面，这两个方法仍然会顺序执行。这里的解决方案是使用`async-let`。在定义常量时在`let`语句前写上`async`，然后在访问常量时写上`await`，这允许异步方法的并行执行：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, `methodName1()` and `methodName2()` will run in parallel.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`methodName1()`和`methodName2()`将并行运行。
- en: 'You will modify your app to use `async-let` to enable the `makeToast()` and
    `poachEgg()` methods run in parallel. In the `ViewController` file, modify the
    code in the `Task` block as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你将修改你的应用以使用`async-let`来使`makeToast()`和`poachEgg()`方法并行运行。在`ViewController`文件中，按照以下方式修改`Task`块中的代码：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Build and run the app. You''ll see that the elapsed time is now less than what
    it was before:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用。你会看到经过的时间现在比之前短：
- en: '![Figure 24.7: iOS Simulator running the BreakfastMaker app showing elapsed
    time'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 24.7: iOS 模拟器运行 BreakfastMaker 应用，显示经过的时间'
- en: '](img/Figure_24.07_B17469.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_24.07_B17469.jpg]'
- en: 'Figure 24.7: iOS Simulator running the BreakfastMaker app showing elapsed time'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'Figure 24.7: iOS 模拟器运行 BreakfastMaker 应用，显示经过的时间'
- en: This is because using `async-let` allows both the `makeToast()` and `poachEgg()`
    methods to run in parallel, and the `poachEgg()` method no longer waits for the
    `makeToast()` method to complete before starting execution. Cool!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为使用`async-let`允许`makeToast()`和`poachEgg()`方法并行运行，并且`poachEgg()`方法不再等待`makeToast()`方法完成后再开始执行。酷！
- en: Important Information
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: There is still lots more to learn about Swift Concurrency, such as structured
    concurrency and actors, but that is beyond the scope of this chapter. You can
    learn more about structured concurrency at [https://developer.apple.com/wwdc21/10134](https://developer.apple.com/wwdc21/10134),
    and you can learn more about actors at [https://developer.apple.com/wwdc21/10133](https://developer.apple.com/wwdc21/10133).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Swift 并发还有很多东西可以学习，比如结构化并发和 actors，但这些内容超出了本章的范围。你可以在 [https://developer.apple.com/wwdc21/10134](https://developer.apple.com/wwdc21/10134)
    上了解更多关于结构化并发的信息，以及在 [https://developer.apple.com/wwdc21/10133](https://developer.apple.com/wwdc21/10133)
    上了解更多关于 actors 的信息。
- en: In the next section, you'll update the `RestaurantListViewController` class
    in the *Let's Eat* app to use `async`/`await` when getting restaurant images.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将更新 *Let's Eat* 应用中的 `RestaurantListViewController` 类，以便在获取餐厅图像时使用 `async`/`await`。
- en: Updating RestaurantListViewController to use async/await
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 RestaurantListViewController 更新为使用 async/await
- en: When you run your *Let's Eat* app, you may notice a delay when the **Restaurant
    List** screen is displaying a list of restaurants. This is because the code used
    to download restaurant images is not asynchronous, and the app is not able to
    do other work while restaurant images are being downloaded.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行你的 *Let's Eat* 应用时，你可能会注意到当 **餐厅列表** 屏幕显示餐厅列表时会有延迟。这是因为用于下载餐厅图像的代码不是异步的，当餐厅图像正在下载时，应用无法执行其他工作。
- en: The code that downloads the restaurant image data and converts it into an image
    is inside the `collectionView(_:cellForItemAt:)` method in the `RestaurantListViewController`
    class definition. You'll modify this code so that it is performed asynchronously.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 下载餐厅图像数据并将其转换为图像的代码位于 `RestaurantListViewController` 类定义中的 `collectionView(_:cellForItemAt:)`
    方法内。你将修改此代码，使其异步执行。
- en: 'Open your `LetsEat` project that you modified in [*Chapter 22*](B17469_22_Final_VK_ePub.xhtml#_idTextAnchor431)*,
    Getting Started with Mac Catalyst*, and open the `RestaurantListViewController`
    file (inside the `Restaurants` folder) in the Project navigator. Update the `collectionView(_:cellForItemAt:)`
    method as shown below:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你在 [*第 22 章*](B17469_22_Final_VK_ePub.xhtml#_idTextAnchor431)*，使用 Mac Catalyst
    入门* 中修改的 `LetsEat` 项目，在项目导航器中打开 `RestaurantListViewController` 文件（位于 `Restaurants`
    文件夹内）。按照以下方式更新 `collectionView(_:cellForItemAt:)` 方法：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s break this down:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This creates a unit of asynchronous work.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个异步工作的单元。
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This `guard` statement creates a URL from the `RestaurantItem` instance's `imageURL`
    property and assigns it to `url`, and returns if it is not able to do so.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `guard` 语句从 `RestaurantItem` 实例的 `imageURL` 属性创建一个 URL，并将其分配给 `url`，如果不能这样做则返回。
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This asynchronously downloads the data from the URL stored in `url`, and assigns
    it to `imageData`. The response from the server is assigned to `response`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这异步从存储在 `url` 中的 URL 下载数据，并将其分配给 `imageData`。服务器的响应分配给 `response`。
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This `guard` statement checks to see if the server response code is `200` (which
    means that the download was successful) and returns if it is not.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `guard` 语句检查服务器响应代码是否为 `200`（这意味着下载成功），如果不是则返回。
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This `guard` statement creates a `UIImage` instance from the data stored in
    `imageData` and assigns to `cellImage`, and returns if it is not able to do so.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `guard` 语句从存储在 `imageData` 中的数据创建一个 `UIImage` 实例，并将其分配给 `cellImage`，如果不能这样做则返回。
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This assigns the `UIImage` stored in `cellImage` to the `restaurantCell` instance's
    `restaurantImageView` property, which will be displayed in the `restaurantImageView`
    property will be displayed.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 `cellImage` 中存储的 `UIImage` 分配给 `restaurantCell` 实例的 `restaurantImageView`
    属性，它将在 `restaurantImageView` 属性中显示。
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This returns the `restaurantCell` instance.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回 `restaurantCell` 实例。
- en: 'Build and run your app. You''ll notice that the **Restaurant List** screen
    will be more responsive and scroll more smoothly than before:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。你会发现 **餐厅列表** 屏幕比以前更响应，滚动也更平滑：
- en: '![Figure 24.8: iOS Simulator showing the Restaurant List screen with downloaded
    images'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 24.8：iOS 模拟器显示带有下载图像的餐厅列表屏幕]'
- en: '](img/Figure_24.08_B17469.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_24.08_B17469.jpg)'
- en: 'Figure 24.8: iOS Simulator showing the Restaurant List screen with downloaded
    images'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 24.8：iOS 模拟器显示带有下载图像的餐厅列表屏幕
- en: 'If you disable your internet connection, the **Restaurant List** screen will
    still work but it will display the default placeholder images instead:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你禁用你的互联网连接，**餐厅列表** 屏幕仍然可以工作，但它将显示默认的占位符图像：
- en: '![Figure 24.9: iOS Simulator showing the Restaurant List screen with default
    images'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 24.9：iOS 模拟器显示带有默认图像的餐厅列表屏幕]'
- en: '](img/Figure_24.09_B17469.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_24.09_B17469.jpg)'
- en: 'Figure 24.9: iOS Simulator showing the Restaurant List screen with default
    images'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 24.9：iOS 模拟器显示带有默认图片的餐厅列表屏幕
- en: Important Information
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: You can find more information on how to use async/await with `URLSession` at
    [https://developer.apple.com/wwdc21/10095](https://developer.apple.com/wwdc21/10095).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://developer.apple.com/wwdc21/10095](https://developer.apple.com/wwdc21/10095)
    找到更多关于如何使用 `URLSession` 与 async/await 的信息。
- en: You have successfully implemented asynchronous code in your app's `RestaurantListViewController`
    class. Fantastic! There are still a lot of things to learn about Swift Concurrency,
    such as structured concurrency and actors, but that is beyond the scope of this
    chapter.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在你的应用 `RestaurantListViewController` 类中成功实现了异步代码。太棒了！关于 Swift 并发还有很多东西要学习，比如结构化并发和
    actors，但这些超出了本章的范围。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about Swift Concurrency, and how to implement it
    in both the *BreakfastMaker* and *Let's Eat* apps.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Swift 并发以及如何在 *BreakfastMaker* 和 *Let's Eat* 应用中实现它。
- en: You started by learning the basic concepts of Swift Concurrency. Next, you examined
    an app without concurrency and explored its issues. After that, you implemented
    concurrency in the app using `async`/`await`. Next, you made your app more efficient
    by using `async-let`. Finally, you updated the `RestaurantListViewController`
    class in your *Let's Eat* app to use `async`/`await` for loading restaurant images.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先学习了 Swift 并发的基本概念。接下来，你检查了一个没有并发的应用并探讨了它的问题。之后，你通过使用 `async`/`await` 在应用中实现了并发。然后，你通过使用
    `async-let` 使你的应用更加高效。最后，你更新了 *Let's Eat* 应用中的 `RestaurantListViewController`
    类，以使用 `async`/`await` 来加载餐厅图片。
- en: You now understand the basics of Swift Concurrency and will now be able to use
    `async`/`await` and `async-let` in your own apps.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经理解了 Swift 并发的基础知识，并且将能够在你自己的应用中使用 `async`/`await` 和 `async-let`。
- en: In the next chapter, you will learn about **SharePlay**, a great way to share
    group experiences for users of your app.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于 **SharePlay** 的内容，这是一种为你的应用用户共享群体体验的绝佳方式。
