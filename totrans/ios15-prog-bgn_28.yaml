- en: '*Chapter 24*: Getting Started with Swift Concurrency'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple introduced **Swift Concurrency** during WWDC2021, which adds support for
    structured asynchronous and parallel programming to Swift 5.5\. This allows you
    to write concurrent code which is more readable and easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn the basic concepts of Swift Concurrency. Next,
    you will examine an app without concurrency and explore its issues. After that,
    you will use `RestaurantListViewController` class in your *Let's Eat* app to use
    `async`/`await` for loading restaurant images.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned the basics on how Swift Concurrency
    works, and how to update your own apps to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Swift Concurrency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining an app without concurrency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the app using `async`/`await`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving efficiency using `async-let`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating `RestaurantListViewController` to use async/await
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will use a sample app, *BreakfastMaker*, to help you understand the concepts
    of Swift Concurrency. Later in the chapter, you will continue working on the `LetsEat`
    project that you modified in [*Chapter 22*](B17469_22_Final_VK_ePub.xhtml#_idTextAnchor431)*,
    Getting Started with Mac Catalyst*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter24` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3d4YWH5](https://bit.ly/3d4YWH5)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by learning about Swift Concurrency in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Swift Concurrency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Swift 5.5, Apple has added support for writing asynchronous and parallel
    code in a structured way.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous code allows your app to suspend and resume code. This allows your
    app to do things like update the user interface while still performing operations
    like downloading data from the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Parallel code allows your app to run multiple pieces of code simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: You can find links to all of Apple's Swift Concurrency videos during WWDC2021
    at [https://developer.apple.com/news/?id=2o3euotz](https://developer.apple.com/news/?id=2o3euotz).
  prefs: []
  type: TYPE_NORMAL
- en: You can read Apple's Swift Concurrency documentation at [https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html](https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'To give you an idea of how Swift Concurrency works, imagine that you are making
    a poached egg sandwich for breakfast. Here is one way of doing it:'
  prefs: []
  type: TYPE_NORMAL
- en: Put two slices of bread into the toaster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait two minutes until the bread is toasted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put an egg in a bowl with some water and put the bowl into the microwave.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait six minutes until the egg is cooked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make your sandwich.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This takes eight minutes in total. Now think about this sequence of events.
    Do you spend that time just staring at the toaster and the microwave? You''ll
    probably be using your phone while the bread is in the toaster and the egg is
    in the microwave. In other words, you can do other things while the bread and
    egg are being prepared. So, the sequence of events would be more accurately described
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Put two slices of bread into the toaster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your phone for two minutes until the bread is toasted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put an egg in a bowl with some water and put the bowl into the microwave.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your phone for six minutes until the egg is cooked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make your sandwich.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, you can see that your interaction with the toaster and microwave can be
    suspended, then resumed, which means these operations are asynchronous. The operation
    still takes eight minutes, but you were able to do other things during that time.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another factor to consider. You don''t need to wait for the bread
    to finish toasting before you put the egg in the microwave. This means you could
    modify the sequence of steps as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Put two slices of bread into the toaster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While the bread is toasting, put an egg in a bowl with some water, and put the
    bowl into the microwave.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your phone for six minutes until the egg is cooked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make your sandwich.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toasting the bread and poaching the egg are now carried out in parallel, which
    saves you two minutes. Great! Do note however that you have more things to keep
    track of.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand the concepts of asynchronous and parallel operations,
    let's study the issues an app that does not have concurrency has in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Examining an app without concurrency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ve seen how asynchronous and parallel operations can help you prepare
    breakfast faster and allow you to use your phone while you''re doing it. Now let''s
    look at a sample app that simulates the process of preparing breakfast. Initially,
    this app does not have concurrency implemented, so you can see how that affects
    the app. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have not already done so, download the `Chapter24` folder of the code
    bundle for this book at this link: [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `resources` folder in the `Chapter24` folder, and you'll see two folders,
    `BreakfastMaker-start` and `BreakfastMaker-complete`. The first folder contains
    the app that you will be modifying in this chapter, and the second contains the
    completed app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `BreakfastMaker-start` folder and open the `BreakfastMaker` Xcode
    project. Click on the `Main` storyboard file in the Project navigator. You should
    see four labels and a button in the **View Controller Scene** as shown:![Figure
    24.1: Main storyboard file showing the View Controller Scene'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_24.01_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 24.1: Main storyboard file showing the View Controller Scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The app will display a screen which shows the status of the toast, egg, and
    sandwich, and the time taken to prepare the sandwich. The app will also display
    a button you can use to test the responsiveness of the user interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `ViewController` file in the Project navigator. You should see the
    following code in the Editor area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you can see, this code simulates the process of making breakfast that was
    described in the previous section. Let''s break it down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These outlets are linked to four labels in the `Main` storyboard file. When
    you run the app, these labels will display the status of the toast, egg, and sandwich,
    and also show the time taken to complete the process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method is called when the view controller's view appears on screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This sets `startTime` to the current time, so the app can later calculate how
    long it takes to make the sandwich.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This makes `toastLabel` display the text `Making toast...`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This calls the `makeToast()` method, which waits for two seconds to simulate
    the time taken to make toast, then returns the text `Toast done`, which will be
    displayed by `toastLabel`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This makes `eggLabel` display the text `Poaching egg...`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This calls the `poachEgg()` method, which waits for six seconds to simulate
    the time taken to poach an egg, then returns the text `Egg done`, which will be
    displayed by `eggLabel`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This calls the `makeSandwich()` method, which returns the text `Sandwich done`,
    which will be displayed by `sandwichLabel`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This sets `endTime` to the current time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This calculates the elapsed time (approximately eight seconds), which will be
    displayed by `elapsedTimeLabel`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This displays `Button tapped` in the Debug area each time the button on screen
    is tapped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build and run the app, and tap the button the moment the user interface appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 24.2: iOS Simulator running the BreakfastMaker app showing the button
    to be tapped'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_24.02_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 24.2: iOS Simulator running the BreakfastMaker app showing the button
    to be tapped'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should notice the following issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Tapping the button has no effect initially, and you'll only see `Button tapped`
    in the Debug area after approximately eight seconds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Making toast...` and `Poaching egg...` are never displayed, and `Toast done`
    and `Egg done` only appear after approximately eight seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reason why this happens is because your app's code did not update the user
    interface while the `makeToast()` and `poachEgg()` methods are running. Your app
    did register the button taps, but was only able to process them and update the
    labels after `makeToast()` and `poachEgg()` have completed execution. These issues
    do not give the user a good experience with your app.
  prefs: []
  type: TYPE_NORMAL
- en: You have now experienced the issues presented by an app that does not have concurrency
    implemented. In the next section, you'll modify the app using `async`/`await`
    so that it is able to update the user interface while the `makeToast()` and `poachEgg()`
    methods are running.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the app using async/await
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen previously, the app is unresponsive when the `makeToast()`
    and `poachEgg()` methods are running. To resolve this, you will use `async`/`await`
    in the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing the `async` keyword in the method declaration indicates that the method
    is asynchronous. This is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Writing the `await` keyword in front of a method call marks a point where execution
    may be suspended, thus allowing other operations to run. This is what it looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: You can watch Apple's WWDC2021 video discussing async/await at [https://developer.apple.com/videos/play/wwdc2021/10132/](https://developer.apple.com/videos/play/wwdc2021/10132/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will modify your app to use `async`/`await`. This will enable it to suspend
    the `makeToast()` and `poachEgg()` methods to process button taps and update the
    user interface, then resume execution of both methods afterward. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `makeToast()` and `poachEgg()` methods as shown to make the code
    in their bodies asynchronous:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Errors will appear for both `makeToast()` and `poachEgg()`. Click either error
    icon to display the error message:![Figure 24.3: Errors with error icons highlighted'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_24.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 24.3: Errors with error icons highlighted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The error is displayed because you're calling an asynchronous method inside
    a method that does not support concurrency. You will need to add the `async` keyword
    to the method declaration to indicate it is asynchronous.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For each method, click the `async` keyword to the method declaration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that your code looks like this after you''re done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The errors in the `makeToast()` and `poachEgg()` methods should be gone, but
    new errors will appear in the `viewDidAppear()` method. Click one of the error
    icons to see the error message, which will be the same as the message you saw
    earlier. This is because you're calling an asynchronous method inside a method
    that does not support concurrency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Fix** button, and more errors will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ignore the one in the method declaration for now and click the one next to
    the `makeToast()` method call to see the error message:![Figure 24.4: Errors with
    error icon for makeToast() highlighted'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_24.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 24.4: Errors with error icon for makeToast() highlighted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This error message is displayed because you did not use `await` when calling
    an asynchronous function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the `await` keyword before the method call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *step 7* and *step 8* for the error next to the `poachEgg()` method call.
    The `await` keyword will be inserted for the `poachEgg()` method call as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the error icon in the `viewDidLoad()` method declaration to see the error
    message:![Figure 24.5: Error with error icon highlighted'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_24.05_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 24.5: Error with error icon highlighted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This error is displayed because you can't use the `async` keyword to make the
    `viewDidAppear()` method asynchronous, as this capability is not present in the
    superclass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To resolve this issue, you''ll remove the `async` keyword and enclose all the
    code after `super.viewDidAppear()` in a `Task` block, which will allow it to execute
    asynchronously in a synchronous method. Modify your code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run the app, and tap the button as soon as you see the user interface.
    Note that `Button tapped` now appears immediately in the Debug area, and the labels
    update as they should. This is because the app is now able to suspend the `makeToast()`
    and `poachEgg()` methods to respond to taps and update the user interface, and
    resume them later. Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you look at the elapsed time, you''ll see that the app takes slightly
    longer to prepare breakfast than it did before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 24.6: iOS Simulator running the BreakfastMaker app showing elapsed
    time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_24.06_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 24.6: iOS Simulator running the BreakfastMaker app showing elapsed time'
  prefs: []
  type: TYPE_NORMAL
- en: This is partly due to the overhead required for suspending and resuming methods,
    but there is another factor involved. Even though the `makeToast()` and `poachEgg()`
    methods are now asynchronous, the `poachEgg()` method only starts execution after
    the `makeToast()` method has finished execution. In the next section, you'll see
    how you can use `async-let` to run the `makeToast()` and `poachEgg()` methods
    in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: Improving efficiency using async-let
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Even though your app is now responsive to button taps and is able to update
    the user interface while the `makeToast()` and `poachEgg()` methods are running,
    both methods still execute sequentially. The solution here is to use `async-let`.
    Writing `async` in front of a `let` statement when you define a constant, and
    then writing `await` when you access the constant, allows parallel execution of
    asynchronous methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, `methodName1()` and `methodName2()` will run in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will modify your app to use `async-let` to enable the `makeToast()` and
    `poachEgg()` methods run in parallel. In the `ViewController` file, modify the
    code in the `Task` block as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the app. You''ll see that the elapsed time is now less than what
    it was before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 24.7: iOS Simulator running the BreakfastMaker app showing elapsed
    time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_24.07_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 24.7: iOS Simulator running the BreakfastMaker app showing elapsed time'
  prefs: []
  type: TYPE_NORMAL
- en: This is because using `async-let` allows both the `makeToast()` and `poachEgg()`
    methods to run in parallel, and the `poachEgg()` method no longer waits for the
    `makeToast()` method to complete before starting execution. Cool!
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: There is still lots more to learn about Swift Concurrency, such as structured
    concurrency and actors, but that is beyond the scope of this chapter. You can
    learn more about structured concurrency at [https://developer.apple.com/wwdc21/10134](https://developer.apple.com/wwdc21/10134),
    and you can learn more about actors at [https://developer.apple.com/wwdc21/10133](https://developer.apple.com/wwdc21/10133).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll update the `RestaurantListViewController` class
    in the *Let's Eat* app to use `async`/`await` when getting restaurant images.
  prefs: []
  type: TYPE_NORMAL
- en: Updating RestaurantListViewController to use async/await
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run your *Let's Eat* app, you may notice a delay when the **Restaurant
    List** screen is displaying a list of restaurants. This is because the code used
    to download restaurant images is not asynchronous, and the app is not able to
    do other work while restaurant images are being downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: The code that downloads the restaurant image data and converts it into an image
    is inside the `collectionView(_:cellForItemAt:)` method in the `RestaurantListViewController`
    class definition. You'll modify this code so that it is performed asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `LetsEat` project that you modified in [*Chapter 22*](B17469_22_Final_VK_ePub.xhtml#_idTextAnchor431)*,
    Getting Started with Mac Catalyst*, and open the `RestaurantListViewController`
    file (inside the `Restaurants` folder) in the Project navigator. Update the `collectionView(_:cellForItemAt:)`
    method as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This creates a unit of asynchronous work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This `guard` statement creates a URL from the `RestaurantItem` instance's `imageURL`
    property and assigns it to `url`, and returns if it is not able to do so.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This asynchronously downloads the data from the URL stored in `url`, and assigns
    it to `imageData`. The response from the server is assigned to `response`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This `guard` statement checks to see if the server response code is `200` (which
    means that the download was successful) and returns if it is not.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This `guard` statement creates a `UIImage` instance from the data stored in
    `imageData` and assigns to `cellImage`, and returns if it is not able to do so.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This assigns the `UIImage` stored in `cellImage` to the `restaurantCell` instance's
    `restaurantImageView` property, which will be displayed in the `restaurantImageView`
    property will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This returns the `restaurantCell` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. You''ll notice that the **Restaurant List** screen
    will be more responsive and scroll more smoothly than before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 24.8: iOS Simulator showing the Restaurant List screen with downloaded
    images'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_24.08_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 24.8: iOS Simulator showing the Restaurant List screen with downloaded
    images'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you disable your internet connection, the **Restaurant List** screen will
    still work but it will display the default placeholder images instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 24.9: iOS Simulator showing the Restaurant List screen with default
    images'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_24.09_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 24.9: iOS Simulator showing the Restaurant List screen with default
    images'
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on how to use async/await with `URLSession` at
    [https://developer.apple.com/wwdc21/10095](https://developer.apple.com/wwdc21/10095).
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully implemented asynchronous code in your app's `RestaurantListViewController`
    class. Fantastic! There are still a lot of things to learn about Swift Concurrency,
    such as structured concurrency and actors, but that is beyond the scope of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about Swift Concurrency, and how to implement it
    in both the *BreakfastMaker* and *Let's Eat* apps.
  prefs: []
  type: TYPE_NORMAL
- en: You started by learning the basic concepts of Swift Concurrency. Next, you examined
    an app without concurrency and explored its issues. After that, you implemented
    concurrency in the app using `async`/`await`. Next, you made your app more efficient
    by using `async-let`. Finally, you updated the `RestaurantListViewController`
    class in your *Let's Eat* app to use `async`/`await` for loading restaurant images.
  prefs: []
  type: TYPE_NORMAL
- en: You now understand the basics of Swift Concurrency and will now be able to use
    `async`/`await` and `async-let` in your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about **SharePlay**, a great way to share
    group experiences for users of your app.
  prefs: []
  type: TYPE_NORMAL
