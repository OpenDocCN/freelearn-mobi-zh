- en: '*Chapter 7*: Testing Kotlin Flows'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：测试 Kotlin 流'
- en: In the previous chapter, we focused on understanding Kotlin Flow cancellation,
    learning how to make Flows cancellable, and handling the cancellation. We also
    learned about retrying tasks with Flows and handling completion and exceptions
    in your Flows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们专注于理解 Kotlin 流的取消，学习如何使流可取消，并处理取消。我们还学习了使用流重试任务以及处理流中的完成和异常。
- en: Adding tests for the Kotlin Flows in your code is an important part of app development.
    Tests will ensure that the Flows we add to our projects are free of bugs or errors
    and that they will work as we intended. They can make developing apps easier and
    help you refactor and maintain your code confidently.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的代码中的 Kotlin 流添加测试是应用程序开发的重要部分。测试将确保我们添加到项目中的流没有错误或错误，并且它们将按预期工作。它们可以使开发应用程序更容易，并帮助您自信地重构和维护代码。
- en: In this chapter, we will learn how to test Kotlin Flows in Android. First, we
    will understand how to set up your Android project for testing Flows. We will
    then proceed with creating and running tests for Kotlin Flows.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在 Android 中测试 Kotlin 流。首先，我们将了解如何为测试流设置您的 Android 项目。然后，我们将继续创建和运行
    Kotlin 流的测试。
- en: 'This chapter covers the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主要内容：
- en: Setting up an Android project for testing Flows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为测试流设置 Android 项目
- en: Testing Kotlin Flows
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 Kotlin 流
- en: Testing Flows with Turbine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Turbine 测试流
- en: By the end of this chapter, you will have learned about Kotlin Flow testing.
    You will be able to write and run unit and integration tests for the Flows in
    your Android applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解 Kotlin 流测试。您将能够为您的 Android 应用程序中的流编写和运行单元和集成测试。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need to download and install the latest version of Android Studio.
    You can find the latest version at [https://developer.android.com/studio](https://developer.android.com/studio).
    For an optimal learning experience, a computer with the following specifications
    is recommended:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要下载并安装最新版本的 Android Studio。您可以在 [https://developer.android.com/studio](https://developer.android.com/studio)
    找到最新版本。为了获得最佳学习体验，建议使用以下规格的计算机：
- en: Intel Core i5 or equivalent or higher
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔酷睿 i5 或更高版本
- en: A minimum of 4 GB of RAM
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少 4 GB 的 RAM
- en: 4 GB of available space
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用空间至少 4 GB
- en: The code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter07](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter07).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码示例可以在 GitHub 上找到，网址为 [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter07](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter07)。
- en: Setting up an Android project for testing Flows
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为测试流设置 Android 项目
- en: In this section, we will start by looking at how to set up our Android project
    for testing Kotlin Flows. Once we have done that, it will be easy for us to add
    unit and integration tests for the Flows in our project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先了解如何为测试 Kotlin 流设置我们的 Android 项目。一旦我们完成了这个，添加我们项目中流的单元和集成测试将变得容易。
- en: 'To create a unit test in Android, your project must have the JUnit 4 testing
    library, a unit testing framework for Java. New projects created in Android Studio
    should already have this added in the `app/build` dependencies. If your project
    does not have JUnit yet, you can add it by adding the following in your `app/build.gradle`
    dependencies:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Android 中创建单元测试，您的项目必须具有 JUnit 4 测试库，这是 Java 的单元测试框架。在 Android Studio 中创建的新项目应该已经将此添加到
    `app/build` 依赖项中。如果您的项目还没有 JUnit，您可以通过在 `app/build.gradle` 依赖项中添加以下内容来添加它：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding this to your dependencies enables you to use the JUnit 4 testing framework
    to unit-test your code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到您的依赖项中，您可以使用 JUnit 4 测试框架对您的代码进行单元测试。
- en: 'It is also a good idea to use mock objects for your tests. Mockito is a popular
    Java mocking library that you can use on Android. You can also use Mockito-Kotlin
    to use Mockito with idiomatic Kotlin code. To add Mockito and Mockito-Kotlin to
    your Android tests, you can add the following in your `app/build.gradle` dependencies:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模拟对象进行测试也是一个好主意。Mockito 是一个流行的 Java 模拟库，您可以在 Android 上使用它。您还可以使用 Mockito-Kotlin
    来使用 Mockito 与惯用的 Kotlin 代码一起使用。要将 Mockito 和 Mockito-Kotlin 添加到您的 Android 测试中，您可以在
    `app/build.gradle` 依赖项中添加以下内容：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will allow you to use Mockito to create mock objects for your Android
    tests using Kotlin-like code. Mockito-Kotlin has a dependency to `mockito-core`
    and `mockito-kotlin`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许你使用 Mockito 通过 Kotlin 代码创建用于 Android 测试的模拟对象。Mockito-Kotlin 依赖于 `mockito-core`
    和 `mockito-kotlin`：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As Kotlin Flow is built on top of coroutines, you can use the `kotlinx-coroutines-test`
    library to help you add tests for both coroutines and Flows. This library contains
    utility classes to make the writing of tests easier. To add it to your project,
    you can add the following to your `app/build.gradle` dependencies:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Kotlin Flow 是建立在协程之上的，你可以使用 `kotlinx-coroutines-test` 库来帮助你添加对协程和 Flows 的测试。这个库包含了一些实用类，可以让你更容易地编写测试。要将它添加到你的项目中，你可以在
    `app/build.gradle` 的依赖项中添加以下内容：
- en: '[PRE15]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Adding this allows you to use the `kotlinx-coroutines-test` library for testing
    coroutines and flows in your project.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这个库允许你在项目中使用 `kotlinx-coroutines-test` 库来测试协程和 Flows。
- en: In this section, we have learned about setting up our Android project to test
    Kotlin Flows. We will learn about testing Kotlin Flows in the next section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何设置我们的 Android 项目以测试 Kotlin 流。在下一节中，我们将学习如何测试 Kotlin 流。
- en: Testing Kotlin Flows
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Kotlin 流
- en: In this section, we will focus on testing Kotlin Flows. We can create unit and
    integration tests for classes such as `ViewModel` that use Flow in their code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于测试使用 Flow 的 Kotlin 流。我们可以为使用 Flow 的类，如 `ViewModel`，创建单元和集成测试。
- en: To test code that collects a Flow, you can use a mock object that can return
    values which you can do assertion checks. For example, if your `ViewModel` listens
    to the Flow from a repository, you can create a custom `Repository` class that
    emits a Flow with a predefined set of values for easier testing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试收集 Flow 的代码，你可以使用可以返回值的模拟对象来进行断言检查。例如，如果你的 `ViewModel` 监听来自存储库的 Flow，你可以创建一个自定义的
    `Repository` 类，该类发出一个包含预定义值的 Flow，以便更容易地进行测试。
- en: 'For example, say you have a `MovieViewModel` class such as the following that
    has a `fetchMovies` function that collects a Flow:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你有一个 `MovieViewModel` 类，如下所示，它有一个返回 Flow 的 `fetchMovies` 函数：
- en: '[PRE20]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here, the `fetchMovies` function collects a Flow from `movieRepository.fetchMovies()`.
    You can write a test for this `MovieViewModel` by creating `MovieRepository` ,
    which returns a specific set of values, which you will check to see whether it’s
    the same value that will be set to the movies `LiveData` in `MovieViewModel`.
    An example implementation of this looks like the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`fetchMovies` 函数从 `movieRepository.fetchMovies()` 收集一个 Flow。你可以通过创建 `MovieRepository`
    并返回一组特定的值来为这个 `MovieViewModel` 编写测试，然后检查这些值是否与 `MovieViewModel` 中的 `movies` `LiveData`
    设置的值相同。这个实现的示例如下：
- en: '[PRE29]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In this example, `fetchMoviesFlow` of `MovieRepository` returns a list of movies
    that has only one item. After calling `movieViewModel.fetchMovies()`, the test
    checks whether the value in the `MovieViewModel.movies` `LiveData` was set to
    this list.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`MovieRepository` 的 `fetchMoviesFlow` 返回一个只有一个项目的电影列表。在调用 `movieViewModel.fetchMovies()`
    之后，测试检查 `MovieViewModel.movies` `LiveData` 中的值是否被设置为这个列表。
- en: You can also test a Flow by collecting it to another object. You can do that
    by converting the Flow to a list with `toList()` or to a set with `toSet()`, getting
    the first item with first, taking items with `take()`, and other terminal operators.
    Then, you can check the values returned with the expected values.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过收集它到另一个对象来测试一个 Flow。你可以通过将 Flow 转换为列表（使用 `toList()`）或集合（使用 `toSet()`），获取第一个元素（使用
    `first`），获取元素（使用 `take()`）和其他终端操作来实现。然后，你可以检查返回的值与预期值是否一致。
- en: 'For example, say you have `MovieViewModel`, which has a function that returns
    a Flow, such as the following class:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你有一个 `MovieViewModel`，它有一个返回 Flow 的函数，如下面的类所示：
- en: '[PRE53]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Here, the `fetchFavoriteMovies` function returns a Flow of `List<Movie>`. You
    can write a test for this function by converting `Flow<List<Movie>>` into a list,
    as shown in the following example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`fetchFavoriteMovies` 函数返回一个 `List<Movie>` 的 Flow。你可以通过将 `Flow<List<Movie>>`
    转换为列表来为这个函数编写测试，如下面的示例所示：
- en: '[PRE60]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: In this example, you converted the Flow of the list of movies from `movieViewModel.fetchFavoriteMovies()`
    to a list of movies and compared it with the expected list.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将 `movieViewModel.fetchFavoriteMovies()` 返回的电影列表 Flow 转换为电影列表，并与预期的列表进行比较。
- en: 'To test error-handling in Flow, you can mock your test objects to throw an
    exception. You can then check the exception thrown or the code that handles it.
    The following example shows how you can write tests for a Flow’s failure case:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 Flow 中的错误处理，你可以模拟你的测试对象以抛出异常。然后你可以检查抛出的异常或处理它的代码。以下示例展示了如何为 Flow 的失败情况编写测试：
- en: '[PRE79]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: In this test class, every time `MovieService.getMovies()` is called, it will
    throw `IOException`. We then call `movieRepository.fetchMoviesFlow()` and use
    the `catch` operator to handle the exception. Then, we compare the exception message
    with the expected string.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试类中，每次调用 `MovieService.getMovies()` 时，它都会抛出 `IOException`。然后我们调用 `movieRepository.fetchMoviesFlow()`
    并使用 `catch` 操作符来处理异常。然后，我们将异常消息与预期字符串进行比较。
- en: We can also test Flow retries by mocking our class to return a specific exception
    that would trigger a retry. For retries that still fail afterward, you can check
    the exception or the exception handling. To test retries that succeed, you can
    mock your class to either throw an exception or return a Flow that you can compare
    with the expected values.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过模拟我们的类以返回一个可以触发重试的特定异常来测试 Flow 重试。对于之后仍然失败的重试，你可以检查异常或异常处理。要测试成功的重试，你可以模拟你的类以抛出异常或返回一个可以与预期值比较的
    Flow。
- en: 'The following example shows how you can test a Flow that has a retry for `IOException`
    and any number of attempts:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何测试一个具有对 `IOException` 重试和任意次数尝试的 Flow：
- en: '[PRE95]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Here, we used a `hasRetried` variable to determine whether to return a Flow
    of movies or to throw an exception that can trigger a retry. It is `false` by
    default to allow a retry. Later in the code, we can change this value to `true`
    to return a Flow of movies, which we can then compare to the expected values.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一个 `hasRetried` 变量来确定是否返回一个电影流或抛出一个可以触发重试的异常。默认情况下它是 `false` 以允许重试。在代码的后面部分，我们可以将此值更改为
    `true` 以返回一个电影流，然后我们可以将其与预期值进行比较。
- en: In this section, we learned how to create and run tests for Kotlin Flows in
    our Android project. We will learn about testing hot flows with Turbine in the
    next section.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何在 Android 项目中创建和运行 Kotlin Flow 的测试。我们将在下一节中学习如何使用 Turbine 测试热流。
- en: Testing Flows with Turbine
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Turbine 测试 Flows
- en: In this section, we will learn how to test Flows using Turbine, which is a third-party
    library that we can use to test flows in our project.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用 Turbine 测试 Flows，这是一个第三方库，我们可以用它来测试项目中的流。
- en: Hot flows such as `SharedFlow` and `StateFlow`, as you learned in the previous
    chapter, emit values even if there are no listeners. They also keep emitting values
    and do not complete. Testing them is a bit more complicated. You won’t be able
    to convert these flows to a list and then compare it to the expected values.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 热流，如 `SharedFlow` 和 `StateFlow`，正如你在上一章中学到的，即使在没有监听器的情况下也会发出值。它们也会继续发出值而不会完成。测试它们稍微复杂一些。你无法将这些流转换为列表并与预期值进行比较。
- en: To test hot flows and make testing other Flows easier, you can use a library
    from Cash App called Turbine ([https://github.com/cashapp/turbine](https://github.com/cashapp/turbine)).
    Turbine is a small testing library for Kotlin Flow that you can use in Android.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试热流并使测试其他 Flows 更容易，你可以使用 Cash App 中的一个名为 Turbine 的库（[https://github.com/cashapp/turbine](https://github.com/cashapp/turbine)）。Turbine
    是一个用于 Kotlin Flow 的小型测试库，你可以在 Android 中使用它。
- en: 'You can use the Turbine testing library in your Android project by adding the
    following to your `app/build.gradle` dependencies:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在你的 `app/build.gradle` 依赖项中添加以下内容来在你的 Android 项目中使用 Turbine 测试库：
- en: '[PRE114]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Adding this will allow you to use the Turbine testing library in your project
    to test the Flow in your code.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此内容将允许你在项目中使用 Turbine 测试库来测试代码中的 Flow。
- en: Turbine has a `test` extension function on Flow. It has a suspending validation
    block, where you can consume items from the Flow one by one and compare them with
    the expected values. It will then cancel the Flow at the end of the validation
    block.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Turbine 在 Flow 上有一个 `test` 扩展函数。它有一个挂起验证块，你可以逐个从 Flow 中消费项目并与预期值进行比较。然后在验证块的末尾取消
    Flow。
- en: 'An example of using Turbine and the `test` extension function to test Flows
    is shown in the following code block:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块展示了如何使用 Turbine 和 `test` 扩展函数测试 Flows 的示例：
- en: '[PRE118]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Here, the test used an `awaitItem()` function to get the next item emitted by
    the Flow and compared it with the expected items. Then, it used an `awaitComplete()`
    function to assert that the Flow had completed.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，测试使用了 `awaitItem()` 函数来获取 Flow 发出的下一个项目，并将其与预期的项目进行比较。然后，它使用了 `awaitComplete()`
    函数来断言 Flow 已完成。
- en: 'To test for exceptions thrown by the Flow, you can use the `awaitError()` function
    that returns `Throwable`. You can then compare this `Throwable` to the one you
    expected to be thrown. The following example shows how you can use this to test
    your Flow:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 Flow 抛出的异常，你可以使用返回 `Throwable` 的 `awaitError()` 函数。然后你可以将这个 `Throwable`
    与你期望抛出的异常进行比较。以下是如何使用此方法测试你的 Flow 的示例：
- en: '[PRE139]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: In this example, we used the `awaitError()` function to receive the exception
    and compare its message with the expected exception.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了 `awaitError()` 函数来接收异常，并将其消息与预期的异常进行比较。
- en: To test hot flows, you have to emit values inside the `test` lambda. You can
    also use the `cancelAndConsumeRemainingEvents()` function or the `cancelAndIgnoreRemainingEvents()`
    function to cancel any remaining events from the Flow.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试热流，你必须在 `test` lambda 中发出值。你也可以使用 `cancelAndConsumeRemainingEvents()` 函数或
    `cancelAndIgnoreRemainingEvents()` 函数来取消 Flow 中任何剩余的事件。
- en: 'The following shows an example of using the `cancelAndIgnoreRemainingEvents()`
    function after checking the first item from the Flow:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用 `cancelAndIgnoreRemainingEvents()` 函数的示例，在检查 Flow 的第一个项目之后：
- en: '[PRE162]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Here, the test will check the first item from the Flow, ignore any remaining
    items, and cancel the Flow.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，测试将检查 Flow 的第一个项目，忽略任何剩余的项目，并取消 Flow。
- en: In this section, you have learned how to test Flows with Turbine. Let’s try
    what we have learned so far by adding some tests to Flows in an Android project.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何使用 Turbine 测试 Flows。让我们通过向 Android 项目中的 Flows 添加一些测试来尝试我们迄今为止所学的内容。
- en: Exercise 7.01 – Adding tests to Flows in an Android app
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 7.01 – 在 Android 应用中为 Flows 添加测试
- en: 'For this exercise, you will be continuing the movie app you worked on in *Exercise
    6.01 – Handling Flow exception in an Android app*. This application displays the
    movies that are currently playing in movie theatres. You will be adding tests
    for the Kotlin Flows in the project by following these steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将继续你在 *练习 6.01 – 在 Android 应用中处理 Flow 异常* 中工作的电影应用。这个应用显示当前正在电影院上映的电影。你将通过以下步骤在项目中添加对
    Kotlin Flows 的测试：
- en: Open in Android Studio the movie app you worked on in *Exercise 6.01 – Handling
    Flow exception in an Android app*.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android Studio 中打开你在 *练习 6.01 – 在 Android 应用中处理 Flow 异常* 中工作的电影应用。
- en: Go to the `MovieViewModelTest` class. Run the test class, and the `fetchMovies()`
    test function will fail. That is because we changed the implementation to use
    Flow in the previous chapter.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `MovieViewModelTest` 类。运行测试类，`fetchMovies()` 测试函数将失败。那是因为我们在上一章中更改了实现以使用
    Flow。
- en: 'Remove the content of the `fetchMovies()` test function and replace it with
    the following content:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `fetchMovies()` 测试函数的内容，并替换为以下内容：
- en: '[PRE182]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: With this code, we will be mocking `MovieRepository` to return a Flow of a list
    of movies, `movies`, which contains a single movie.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码，我们将模拟 `MovieRepository` 返回一个包含单个电影的列表流 `movies`。
- en: 'At the end of the `fetchMovies()` function, add the following code to test
    the `fetchMovies()` function of `MovieViewModel`:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `fetchMovies()` 函数的末尾，添加以下代码来测试 `MovieViewModel` 的 `fetchMovies()` 函数：
- en: '[PRE183]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: This will call the `fetchMovies()` function from `movieViewModel`. We will then
    compare the returned `movieViewModel.movies` to see whether they are the same
    as the expected `movies` list (with a single Movie item).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用 `movieViewModel` 中的 `fetchMovies()` 函数。然后我们将比较返回的 `movieViewModel.movies`
    是否与预期的 `movies` 列表（包含单个 Movie 项目）相同。
- en: 'In the `loading()` test function, replace the assertions with the following:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `loading()` 测试函数中，将断言替换为以下内容：
- en: '[PRE184]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: The `loading` variable is no longer nullable, so this simplifies the assertion
    statements.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`loading` 变量不再可以为空，因此这简化了断言语句。'
- en: Run the `MovieViewModelTest` class again. It should successfully run, and all
    the tests will pass.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行 `MovieViewModelTest` 类。它应该成功运行，并且所有测试都将通过。
- en: 'Open the `MovieRepositoryTest` class. We will be adding tests for the `fetchMoviesFlow()`
    function of `MovieRepository`. First, add the following function to test the successful
    case of the function:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MovieRepositoryTest` 类。我们将为 `MovieRepository` 的 `fetchMoviesFlow()` 函数添加测试。首先，添加以下函数来测试函数的成功情况：
- en: '[PRE185]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: This will mock `MovieRepository` to always return the list of movies that we
    will later compare with the movies from the `fetchMoviesFlow()` function.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这将模拟`MovieRepository`，使其始终返回我们将要稍后与`fetchMoviesFlow()`函数中的电影进行比较的电影列表。
- en: 'Add the following function to add a test for the case when the `fetchMoviesFlow()`
    function throws an exception:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下函数以添加对`fetchMoviesFlow()`函数抛出异常情况的测试：
- en: '[PRE186]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: This test will use a fake `MovieRepository` that will always throw an error
    when calling `fetchMoviesFlow`. We will then test whether the exception thrown
    will be the same as the one that we expect.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试将使用一个假的`MovieRepository`，在调用`fetchMoviesFlow`时始终抛出错误。然后，我们将测试抛出的异常是否与我们预期的相同。
- en: Run the `MovieRepositoryTest` class. All the tests in `MovieRepository Test`
    should run and pass without an error.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`MovieRepositoryTest`类。`MovieRepository Test`中的所有测试应该运行并通过，没有错误。
- en: 'Now, we will use the Turbine testing library to test the Flow from the `fetchMoviesFlow()`
    function of `MovieRepository`. Add the following in the `app/build.gradle` dependencies:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用Turbine测试库来测试`MovieRepository`的`fetchMoviesFlow()`函数生成的Flow。在`app/build.gradle`依赖中添加以下内容：
- en: '[PRE187]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: This will allow us to use the Turbine testing library to create unit tests for
    Flows in our Android project.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们能够使用Turbine测试库为Android项目中的Flows创建单元测试。
- en: 'Add a new test function to test the success case of the `fetchMoviesFlow()`
    function by adding the following:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下新测试函数以测试`fetchMoviesFlow()`函数的成功情况：
- en: '[PRE188]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: With this, we will be mocking `MovieRepository` to return a list of movies.
    We will later compare that with the list from `movieRepository.fetchMoviesFlow()`
    using `awaitItem()`. The `awaitComplete()` function will then check that the Flow
    has terminated.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们将模拟`MovieRepository`以返回一个电影列表。然后，我们将使用`awaitItem()`将其与`movieRepository.fetchMoviesFlow()`返回的列表进行比较。然后`awaitComplete()`函数将检查Flow是否已终止。
- en: 'Add another function to test using Turbine in the case when `fetchMoviesFlow`
    throws an exception by adding the following:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`fetchMoviesFlow`抛出异常的情况下，添加以下函数来测试使用Turbine：
- en: '[PRE189]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: This will use a `MovieRepository` mock class that will throw `RuntimeException`
    when calling `fetchMoviesFlow()`. We will then test that the exception message
    is the same one that was fetched, using the `awaitError()` call.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用一个`MovieRepository`模拟类，当调用`fetchMoviesFlow()`时将抛出`RuntimeException`。然后，我们将使用`awaitError()`调用测试异常信息是否与获取的相同。
- en: Run the `MovieRepositoryTest` class again. All the tests in `MovieRepository
    Test` should run and pass without an error.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`MovieRepositoryTest`类。`MovieRepository Test`中的所有测试应该运行并通过，没有错误。
- en: In this exercise, we have worked on an Android project that uses Kotlin Flow,
    and we have created tests for these Flows.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们处理了一个使用Kotlin Flow的Android项目，并为这些Flows创建了测试。
- en: Summary
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on testing Kotlin Flows in our Android project. We started
    by setting up the project for adding tests for the Flows. The coroutines testing
    library (**kotlinx-coroutines-test**) can help you in creating tests for coroutines
    and Flows.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了在Android项目中测试Kotlin Flows。我们首先为添加Flows测试设置了项目。协程测试库（**kotlinx-coroutines-test**）可以帮助你创建协程和Flows的测试。
- en: We learned how to add tests for the Flows in your Android application. You can
    use a mock class that returns a Flow of values and then compare it with the returned
    values. You can also convert a Flow into `List` or `Set`, or take values from
    the Flow; you can then compare them with the expected values.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何在Android应用程序中添加Flows的测试。你可以使用返回值流的模拟类，然后将其与返回的值进行比较。你还可以将Flow转换为`List`或`Set`，或从Flow中获取值；然后你可以将它们与预期值进行比较。
- en: Then, we learned about testing hot Flows with Turbine, a third-party testing
    library for testing Kotlin Flows. Turbine has a `test` extension on Flow where
    you can consume and compare values one by one.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了如何使用Turbine测试库测试热流，这是一个用于测试Kotlin流的第三方测试库。Turbine在Flow上有一个`test`扩展，你可以逐个消费和比较值。
- en: Finally, we worked on an exercise where we created tests for the Kotlin Flows
    in an existing Android project. We also used the Turbine testing library to make
    the writing of tests for Flows easier.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在一个练习中为现有Android项目中的Kotlin Flows编写了测试。我们还使用了Turbine测试库来简化Flows测试的编写。
- en: Throughout the book, we have gained knowledge and skills about asynchronous
    programming in Android. We learned how to use Kotlin coroutines and Flow to simplify
    asynchronous programming in our Android projects.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们获得了关于Android中异步编程的知识和技能。我们学习了如何使用Kotlin协程和Flow简化Android项目中的异步编程。
- en: Everything in Android is always evolving. There are also more advanced topics
    about coroutines and Flow that we have not covered. It is good to keep yourself
    up to date with the latest updates about Android, Kotlin coroutines, and Kotlin
    Flow. You can find out the latest about coroutines on Android at [https://developer.android.com/kotlin/coroutines](https://developer.android.com/kotlin/coroutines)
    and the latest about Kotlin Flow on Android at [https://developer.android.com/kotlin/flow](https://developer.android.com/kotlin/flow).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Android 中的所有内容都在不断进化。还有一些关于协程和 Flow 的更高级主题我们没有涉及。保持对 Android、Kotlin 协程和 Kotlin
    Flow 最新更新的了解是很好的。您可以在 [https://developer.android.com/kotlin/coroutines](https://developer.android.com/kotlin/coroutines)
    上找到关于 Android 协程的最新信息，以及在 [https://developer.android.com/kotlin/flow](https://developer.android.com/kotlin/flow)
    上找到关于 Android Kotlin Flow 的最新信息。
