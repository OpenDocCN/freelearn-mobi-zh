- en: '*Chapter 7*: Testing Kotlin Flows'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we focused on understanding Kotlin Flow cancellation,
    learning how to make Flows cancellable, and handling the cancellation. We also
    learned about retrying tasks with Flows and handling completion and exceptions
    in your Flows.
  prefs: []
  type: TYPE_NORMAL
- en: Adding tests for the Kotlin Flows in your code is an important part of app development.
    Tests will ensure that the Flows we add to our projects are free of bugs or errors
    and that they will work as we intended. They can make developing apps easier and
    help you refactor and maintain your code confidently.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to test Kotlin Flows in Android. First, we
    will understand how to set up your Android project for testing Flows. We will
    then proceed with creating and running tests for Kotlin Flows.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Android project for testing Flows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Kotlin Flows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Flows with Turbine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned about Kotlin Flow testing.
    You will be able to write and run unit and integration tests for the Flows in
    your Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to download and install the latest version of Android Studio.
    You can find the latest version at [https://developer.android.com/studio](https://developer.android.com/studio).
    For an optimal learning experience, a computer with the following specifications
    is recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: Intel Core i5 or equivalent or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A minimum of 4 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 GB of available space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter07](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Android project for testing Flows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start by looking at how to set up our Android project
    for testing Kotlin Flows. Once we have done that, it will be easy for us to add
    unit and integration tests for the Flows in our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a unit test in Android, your project must have the JUnit 4 testing
    library, a unit testing framework for Java. New projects created in Android Studio
    should already have this added in the `app/build` dependencies. If your project
    does not have JUnit yet, you can add it by adding the following in your `app/build.gradle`
    dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adding this to your dependencies enables you to use the JUnit 4 testing framework
    to unit-test your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also a good idea to use mock objects for your tests. Mockito is a popular
    Java mocking library that you can use on Android. You can also use Mockito-Kotlin
    to use Mockito with idiomatic Kotlin code. To add Mockito and Mockito-Kotlin to
    your Android tests, you can add the following in your `app/build.gradle` dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will allow you to use Mockito to create mock objects for your Android
    tests using Kotlin-like code. Mockito-Kotlin has a dependency to `mockito-core`
    and `mockito-kotlin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As Kotlin Flow is built on top of coroutines, you can use the `kotlinx-coroutines-test`
    library to help you add tests for both coroutines and Flows. This library contains
    utility classes to make the writing of tests easier. To add it to your project,
    you can add the following to your `app/build.gradle` dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Adding this allows you to use the `kotlinx-coroutines-test` library for testing
    coroutines and flows in your project.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned about setting up our Android project to test
    Kotlin Flows. We will learn about testing Kotlin Flows in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Kotlin Flows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will focus on testing Kotlin Flows. We can create unit and
    integration tests for classes such as `ViewModel` that use Flow in their code.
  prefs: []
  type: TYPE_NORMAL
- en: To test code that collects a Flow, you can use a mock object that can return
    values which you can do assertion checks. For example, if your `ViewModel` listens
    to the Flow from a repository, you can create a custom `Repository` class that
    emits a Flow with a predefined set of values for easier testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say you have a `MovieViewModel` class such as the following that
    has a `fetchMovies` function that collects a Flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `fetchMovies` function collects a Flow from `movieRepository.fetchMovies()`.
    You can write a test for this `MovieViewModel` by creating `MovieRepository` ,
    which returns a specific set of values, which you will check to see whether itâ€™s
    the same value that will be set to the movies `LiveData` in `MovieViewModel`.
    An example implementation of this looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `fetchMoviesFlow` of `MovieRepository` returns a list of movies
    that has only one item. After calling `movieViewModel.fetchMovies()`, the test
    checks whether the value in the `MovieViewModel.movies` `LiveData` was set to
    this list.
  prefs: []
  type: TYPE_NORMAL
- en: You can also test a Flow by collecting it to another object. You can do that
    by converting the Flow to a list with `toList()` or to a set with `toSet()`, getting
    the first item with first, taking items with `take()`, and other terminal operators.
    Then, you can check the values returned with the expected values.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say you have `MovieViewModel`, which has a function that returns
    a Flow, such as the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `fetchFavoriteMovies` function returns a Flow of `List<Movie>`. You
    can write a test for this function by converting `Flow<List<Movie>>` into a list,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: In this example, you converted the Flow of the list of movies from `movieViewModel.fetchFavoriteMovies()`
    to a list of movies and compared it with the expected list.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test error-handling in Flow, you can mock your test objects to throw an
    exception. You can then check the exception thrown or the code that handles it.
    The following example shows how you can write tests for a Flowâ€™s failure case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: In this test class, every time `MovieService.getMovies()` is called, it will
    throw `IOException`. We then call `movieRepository.fetchMoviesFlow()` and use
    the `catch` operator to handle the exception. Then, we compare the exception message
    with the expected string.
  prefs: []
  type: TYPE_NORMAL
- en: We can also test Flow retries by mocking our class to return a specific exception
    that would trigger a retry. For retries that still fail afterward, you can check
    the exception or the exception handling. To test retries that succeed, you can
    mock your class to either throw an exception or return a Flow that you can compare
    with the expected values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how you can test a Flow that has a retry for `IOException`
    and any number of attempts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used a `hasRetried` variable to determine whether to return a Flow
    of movies or to throw an exception that can trigger a retry. It is `false` by
    default to allow a retry. Later in the code, we can change this value to `true`
    to return a Flow of movies, which we can then compare to the expected values.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to create and run tests for Kotlin Flows in
    our Android project. We will learn about testing hot flows with Turbine in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Flows with Turbine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to test Flows using Turbine, which is a third-party
    library that we can use to test flows in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Hot flows such as `SharedFlow` and `StateFlow`, as you learned in the previous
    chapter, emit values even if there are no listeners. They also keep emitting values
    and do not complete. Testing them is a bit more complicated. You wonâ€™t be able
    to convert these flows to a list and then compare it to the expected values.
  prefs: []
  type: TYPE_NORMAL
- en: To test hot flows and make testing other Flows easier, you can use a library
    from Cash App called Turbine ([https://github.com/cashapp/turbine](https://github.com/cashapp/turbine)).
    Turbine is a small testing library for Kotlin Flow that you can use in Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the Turbine testing library in your Android project by adding the
    following to your `app/build.gradle` dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Adding this will allow you to use the Turbine testing library in your project
    to test the Flow in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Turbine has a `test` extension function on Flow. It has a suspending validation
    block, where you can consume items from the Flow one by one and compare them with
    the expected values. It will then cancel the Flow at the end of the validation
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of using Turbine and the `test` extension function to test Flows
    is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Here, the test used an `awaitItem()` function to get the next item emitted by
    the Flow and compared it with the expected items. Then, it used an `awaitComplete()`
    function to assert that the Flow had completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test for exceptions thrown by the Flow, you can use the `awaitError()` function
    that returns `Throwable`. You can then compare this `Throwable` to the one you
    expected to be thrown. The following example shows how you can use this to test
    your Flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we used the `awaitError()` function to receive the exception
    and compare its message with the expected exception.
  prefs: []
  type: TYPE_NORMAL
- en: To test hot flows, you have to emit values inside the `test` lambda. You can
    also use the `cancelAndConsumeRemainingEvents()` function or the `cancelAndIgnoreRemainingEvents()`
    function to cancel any remaining events from the Flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows an example of using the `cancelAndIgnoreRemainingEvents()`
    function after checking the first item from the Flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Here, the test will check the first item from the Flow, ignore any remaining
    items, and cancel the Flow.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how to test Flows with Turbine. Letâ€™s try
    what we have learned so far by adding some tests to Flows in an Android project.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.01 â€“ Adding tests to Flows in an Android app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this exercise, you will be continuing the movie app you worked on in *Exercise
    6.01 â€“ Handling Flow exception in an Android app*. This application displays the
    movies that are currently playing in movie theatres. You will be adding tests
    for the Kotlin Flows in the project by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open in Android Studio the movie app you worked on in *Exercise 6.01 â€“ Handling
    Flow exception in an Android app*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `MovieViewModelTest` class. Run the test class, and the `fetchMovies()`
    test function will fail. That is because we changed the implementation to use
    Flow in the previous chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the content of the `fetchMovies()` test function and replace it with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this code, we will be mocking `MovieRepository` to return a Flow of a list
    of movies, `movies`, which contains a single movie.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `fetchMovies()` function, add the following code to test
    the `fetchMovies()` function of `MovieViewModel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will call the `fetchMovies()` function from `movieViewModel`. We will then
    compare the returned `movieViewModel.movies` to see whether they are the same
    as the expected `movies` list (with a single Movie item).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `loading()` test function, replace the assertions with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `loading` variable is no longer nullable, so this simplifies the assertion
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `MovieViewModelTest` class again. It should successfully run, and all
    the tests will pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `MovieRepositoryTest` class. We will be adding tests for the `fetchMoviesFlow()`
    function of `MovieRepository`. First, add the following function to test the successful
    case of the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will mock `MovieRepository` to always return the list of movies that we
    will later compare with the movies from the `fetchMoviesFlow()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following function to add a test for the case when the `fetchMoviesFlow()`
    function throws an exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This test will use a fake `MovieRepository` that will always throw an error
    when calling `fetchMoviesFlow`. We will then test whether the exception thrown
    will be the same as the one that we expect.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `MovieRepositoryTest` class. All the tests in `MovieRepository Test`
    should run and pass without an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will use the Turbine testing library to test the Flow from the `fetchMoviesFlow()`
    function of `MovieRepository`. Add the following in the `app/build.gradle` dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will allow us to use the Turbine testing library to create unit tests for
    Flows in our Android project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new test function to test the success case of the `fetchMoviesFlow()`
    function by adding the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this, we will be mocking `MovieRepository` to return a list of movies.
    We will later compare that with the list from `movieRepository.fetchMoviesFlow()`
    using `awaitItem()`. The `awaitComplete()` function will then check that the Flow
    has terminated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another function to test using Turbine in the case when `fetchMoviesFlow`
    throws an exception by adding the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will use a `MovieRepository` mock class that will throw `RuntimeException`
    when calling `fetchMoviesFlow()`. We will then test that the exception message
    is the same one that was fetched, using the `awaitError()` call.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `MovieRepositoryTest` class again. All the tests in `MovieRepository
    Test` should run and pass without an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, we have worked on an Android project that uses Kotlin Flow,
    and we have created tests for these Flows.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focused on testing Kotlin Flows in our Android project. We started
    by setting up the project for adding tests for the Flows. The coroutines testing
    library (**kotlinx-coroutines-test**) can help you in creating tests for coroutines
    and Flows.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to add tests for the Flows in your Android application. You can
    use a mock class that returns a Flow of values and then compare it with the returned
    values. You can also convert a Flow into `List` or `Set`, or take values from
    the Flow; you can then compare them with the expected values.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we learned about testing hot Flows with Turbine, a third-party testing
    library for testing Kotlin Flows. Turbine has a `test` extension on Flow where
    you can consume and compare values one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we worked on an exercise where we created tests for the Kotlin Flows
    in an existing Android project. We also used the Turbine testing library to make
    the writing of tests for Flows easier.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we have gained knowledge and skills about asynchronous
    programming in Android. We learned how to use Kotlin coroutines and Flow to simplify
    asynchronous programming in our Android projects.
  prefs: []
  type: TYPE_NORMAL
- en: Everything in Android is always evolving. There are also more advanced topics
    about coroutines and Flow that we have not covered. It is good to keep yourself
    up to date with the latest updates about Android, Kotlin coroutines, and Kotlin
    Flow. You can find out the latest about coroutines on Android at [https://developer.android.com/kotlin/coroutines](https://developer.android.com/kotlin/coroutines)
    and the latest about Kotlin Flow on Android at [https://developer.android.com/kotlin/flow](https://developer.android.com/kotlin/flow).
  prefs: []
  type: TYPE_NORMAL
