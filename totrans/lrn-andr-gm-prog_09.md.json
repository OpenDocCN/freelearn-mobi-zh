["```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.nikmlnkr.my3Dgame\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n<activity android:name=\".MainActivity\" \n        android:screenOrientation=\"landscape\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n\n```", "```kt\npackage com.nikmlnkr.my3Dgame;\n\nimport android.app.Activity;\nimport android.opengl.GLSurfaceView;\nimport android.os.Bundle;\n\npublic class MainActivity extends Activity {\n\n    private GLSurfaceView gv;\n\n    //Our onCreate method\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        gv = new GLSurfaceView(this);\n        gv.setRenderer(new MyGLRenderer(this));\n        this.setContentView(gv);\n    }\n\n    //Resume method\n    @Override\n    protected void onResume() {\n        super.onResume();\n        gv.onResume();\n    }\n\n    //Pause method\n    @Override\n    protected void onPause() {\n    super.onPause();\n        gv.onPause();\n    }\n}\n\n```", "```kt\npublic class MyGLRenderer implements GLSurfaceView.Renderer {\n    Context ct;    //Context variable\n\n    //Constructor of our renderer class\n    public MyGLRenderer(Context ct) {\n        this.ct = ct;\n    }\n}\n\n```", "```kt\n    @Override\n    public void onSurfaceCreated(GL10 gles, EGLConfig c) {\n        gles.glClearColor(0.0f, 0.0f, 0.0f, 1.0f); \n        //Clear color and set to black\n\n        gles.glClearDepthf(1.0f); \n        //Clear depth\n\n        gles.glEnable(GL10.GL_DEPTH_TEST);\n        //Enable depth test\n\n        gles.glDepthFunc(GL10.GL_LEQUAL); \n        //Set depth function\n\n        gles.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, \n        GL10.GL_NICEST);\n        //set gl to nicest\n\n        gles.glShadeModel(GL10.GL_SMOOTH); \n        //set shade model to smooth\n\n        gles.glDisable(GL10.GL_DITHER); \n        //disable dither\n    }\n\n```", "```kt\n    @Override\n    public void onSurfaceChanged(GL10 gles, int w, int h) {\n        if (h == 0) h = 1;\n        float aspect = (float)w / h;\n\n        gles.glViewport(0, 0, w, h); \n        //dynamically set the width and height of our viewport as per screen \n        resolution\n\n        gles.glMatrixMode(GL10.GL_PROJECTION); \n        //set our matrix mode projection\n\n        gles.glLoadIdentity();\n        GLU.gluPerspective(gles, 45, aspect, 0.1f, 100.f);\n\n        gles.glMatrixMode(GL10.GL_MODELVIEW); \n        //set our camera view matrix mode\n\n        gles.glLoadIdentity();\n    }\n\n```", "```kt\n    @Override\n    public void onDrawFrame(GL10 gles) {\n        gles.glClear(GL10.GL_COLOR_BUFFER_BIT | \n        GL10.GL_DEPTH_BUFFER_BIT);    \n        //clear depth buffer\n    }\n\n```", "```kt\npackage com.nikmlnkr.my3Dgame;\n\n/**\n * Created by nikhilmalankar on 05/03/17.\n */\nimport javax.microedition.khronos.egl.EGLConfig;\nimport javax.microedition.khronos.opengles.GL10;\nimport android.content.Context;\nimport android.opengl.GLSurfaceView;\nimport android.opengl.GLU;\n\npublic class MyGLRenderer implements GLSurfaceView.Renderer {\n    Context ct;    //Our context variable\n\n    // Constructor of our renderer\n    public MyGLRenderer(Context ct) {\n        this.ct = ct;\n    }\n\n    // Call back when the surface is first created or re-created\n    @Override\n    public void onSurfaceCreated(GL10 gles, EGLConfig c) {\n        gles.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n        gles.glClearDepthf(1.0f);\n        gles.glEnable(GL10.GL_DEPTH_TEST);\n        gles.glDepthFunc(GL10.GL_LEQUAL);\n        gles.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, \n        GL10.GL_NICEST);\n        gles.glShadeModel(GL10.GL_SMOOTH);\n        gles.glDisable(GL10.GL_DITHER);\n    }\n\n    @Override\n    public void onSurfaceChanged(GL10 gles, int w, int h) {\n        if (h == 0) h = 1;\n        float aspect = (float)w / h;\n\n        gles.glViewport(0, 0, w, h);\n\n        gles.glMatrixMode(GL10.GL_PROJECTION);\n\n        gles.glLoadIdentity();\n        GLU.gluPerspective(gles, 45, aspect, 0.1f, 100.f);\n\n        gles.glMatrixMode(GL10.GL_MODELVIEW);\n        gles.glLoadIdentity();\n    }\n\n    @Override\n    public void onDrawFrame(GL10 gles) {\n        gles.glClear(GL10.GL_COLOR_BUFFER_BIT | \n        GL10.GL_DEPTH_BUFFER_BIT);    \n        //clear our depth buffer\n    }\n}\n\n```", "```kt\npackage com.nikmlnkr.my3Dgame;\n\n/**\n * Created by nikhilmalankar on 05/03/17.\n */\npublic class Triangle {\n    private float[] v = {  // Vertices of our triangle\n        0.0f,  1.0f, 0.0f, // 0\\. top vertices\n        -1.0f, -1.0f, 0.0f, // 1\\. left-bottom vertices\n        1.0f, -1.0f, 0.0f  // 2\\. right-bottom vertices\n    };\n}\n\n```", "```kt\n    private FloatBuffer vb;\n    private ByteBuffer ib\n\n    private byte[] ind = { 0, 1, 2 };\n\n    public Triangle() {\n        ByteBuffer vbb = ByteBuffer.allocateDirect(v.length * 4);\n        vbb.order(ByteOrder.nativeOrder());\n        vb = vbb.asFloatBuffer();\n        vb.put(v);\n        vb.position(0);\n\n        ib = ByteBuffer.allocateDirect(ind.length);\n        ib.put(ind);\n        ib.position(0);\n    }\n\n```", "```kt\npublic void draw(GL10 gles) {\n    gles.glEnableClientState(GL10.GL_VERTEX_ARRAY);\n    gles.glVertexPointer(3, GL10.GL_FLOAT, 0, vb);\n\n    gles.glDrawElements(GL10.GL_TRIANGLES, ind.length,\n    GL10.GL_UNSIGNED_BYTE, ib);\n    gles.glDisableClientState(GL10.GL_VERTEX_ARRAY);\n}\n\n```", "```kt\npackage com.nikmlnkr.my3Dgame;\n\n/**\n * Created by nikhilmalankar on 05/03/17.\n */\n\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.FloatBuffer;\nimport javax.microedition.khronos.opengles.GL10;\n\npublic class Triangle {\n    private FloatBuffer vb;\n    private ByteBuffer ib;\n\n    private float[] v = {  // Vertices of our triangle\n        0.0f,  1.0f, 0.0f, // 0\\. top vertices\n        -1.0f, -1.0f, 0.0f, // 1\\. left-bottom vertices\n        1.0f, -1.0f, 0.0f  // 2\\. right-bottom vertices\n    };\n    private byte[] indices = { 0, 1, 2 };\n\n    public Triangle() {\n        ByteBuffer vbb = ByteBuffer.allocateDirect(v.length * 4);\n        vbb.order(ByteOrder.nativeOrder());\n        vb = vbb.asFloatBuffer();\n        vb.put(v);\n        vb.position(0);\n\n        ib = ByteBuffer.allocateDirect(ind.length);\n        ib.put(ind);\n        ib.position(0);\n    }\n\n    public void draw(GL10 gles) {\n        gles.glEnableClientState(GL10.GL_VERTEX_ARRAY);\n        gles.glVertexPointer(3, GL10.GL_FLOAT, 0, vb);\n\n        gles.glDrawElements(GL10.GL_TRIANGLES, ind.length,\n        GL10.GL_UNSIGNED_BYTE, ib);\n        gles.glDisableClientState(GL10.GL_VERTEX_ARRAY);\n    }\n}\n\n```"]