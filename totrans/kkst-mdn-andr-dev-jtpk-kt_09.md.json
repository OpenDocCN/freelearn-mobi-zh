["```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n        val viewModel: RestaurantsViewModel = viewModel()\n        val restaurants = viewModel.state.value\n        LazyColumn(…){\n            items(restaurants) { restaurant ->\n                RestaurantItem(…)\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n        val viewModel: RestaurantsViewModel = viewModel()\n        val restaurants = viewModel.state.value\n        val isLoading = restaurants.isEmpty()\n        LazyColumn(…){ … }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n        …\n        val isLoading = restaurants.isEmpty()\n        Box() {\n            LazyColumn(…){…}\n            if(isLoading)\n                CircularProgressIndicator()\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n        …\n        Box(contentAlignment = Alignment.Center,\n            modifier = Modifier.fillMaxSize()) {\n            …\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n        …\n        val isLoading = restaurants.isEmpty()\n        …\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        private var restInterface: RestaurantsApiService\n        private var restaurantsDao = ...\n        val state = mutableStateOf(emptyList<Restaurant>())\n        private suspend fun getAllRestaurants(): … {…}\n            ...\n        private suspend fun refreshCache() {...}\n    }\n    ```", "```kt\n    data class RestaurantsScreenState(\n        val restaurants: List<Restaurant>,\n        val isLoading: Boolean)\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        …\n        val state = mutableStateOf(\n            RestaurantsScreenState(\n                restaurants = listOf(),\n                isLoading = true)\n        )\n        …\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) {\n            val restaurants = getAllRestaurants()\n            state.value = state.value.copy(\n                restaurants = restaurants,\n                isLoading = false)\n        }\n    }\n    ```", "```kt\n    fun toggleFavorite(id: Int, oldValue: Boolean) {\n        viewModelScope.launch(errorHandler) {\n            val updatedRestaurants = […]\n            state.value = state.value.copy(restaurants =      \n                updatedRestaurants)\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n        val viewModel: RestaurantsViewModel = viewModel()\n        val state = viewModel.state.value\n        Box(…) {\n            LazyColumn(…) {\n                 items(state.restaurants) {…}\n            }\n            if (state.isLoading)\n                CircularProgressIndicator()\n        }\n    }\n    ```", "```kt\n    data class RestaurantsScreenState(\n        val restaurants: List<Restaurant>,\n        val isLoading: Boolean,\n        val error: String? = null\n    )\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        …\n        private val errorHandler =\n            CoroutineExceptionHandler { _, exception ->\n                exception.printStackTrace()\n                state.value = state.value.copy(\n                    error = exception.message,\n                    isLoading = false\n                )\n            }\n        ...\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n        …\n        Box(…) {\n            LazyColumn(...) {…}\n            if (state.isLoading)\n                CircularProgressIndicator()\n            if (state.error != null)\n                Text(state.error)\n        }\n    }\n    ```", "```kt\nclass RestaurantsViewModel() : ViewModel() {\n    private var restInterface: RestaurantsApiService\n    private var restaurantsDao = [...]\n        ...\n    private suspend fun refreshCache() {...}\n}\n```", "```kt\n    class RestaurantsRepository { }\n    ```", "```kt\n    class RestaurantsRepository {\n        private var restInterface: RestaurantsApiService =\n            Retrofit.Builder()\n                .addConverterFactory(…)\n                .baseUrl(…)\n                .build()\n                .create(RestaurantsApiService::class.java)\n    }\n    ```", "```kt\n    class RestaurantsRepository {\n        private var restInterface: RestaurantsApiService = …\n        private var restaurantsDao = RestaurantsDb\n            .getDaoInstance(\n                RestaurantsApplication.getAppContext())\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        private val repository = RestaurantsRepository()\n        val state = mutableStateOf(…)\n        private val errorHandler = CoroutineExceptionHandler { … } \n        init {\n            getRestaurants()\n        }\n         […]\n    }\n    ```", "```kt\n    class RestaurantsRepository {\n        private var restInterface: RestaurantsApiService = …\n        private var restaurantsDao = […]\n        private suspend fun toggleFavoriteRestaurant(…) = […]\n        private suspend fun getAllRestaurants(): […] { … }\n        private suspend fun refreshCache() { … }\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        […]\n        init { getRestaurants() }\n        fun toggleFavorite(id: Int, oldValue: Boolean) {…}\n        private fun getRestaurants() {…}\n    }\n    ```", "```kt\n    class RestaurantsRepository {\n        […]\n        suspend fun toggleFavoriteRestaurant(…) = […]\n        suspend fun getAllRestaurants(): […] { … }\n        private suspend fun refreshCache() { … }\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) {\n            val restaurants = repository.getAllRestaurants()\n            state.value = state.value.copy(…)\n        }\n    }\n    ```", "```kt\n    fun toggleFavorite(id: Int, oldValue: Boolean) {\n        viewModelScope.launch(errorHandler) {\n            val updatedRestaurants = repository\n                .toggleFavoriteRestaurant(id, oldValue)\n            state.value = state.value.copy(…)\n        }\n    }\n    ```", "```kt\nclass RestaurantsViewModel() : ViewModel() {\n    …\n    val state = mutableStateOf(RestaurantsScreenState(\n        restaurants = listOf(),\n        isLoading = true))\n    …\n}\n```", "```kt\n@Composable\nfun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n    val viewModel: RestaurantsViewModel = viewModel()\n    val state = viewModel.state.value\n    Box(…) {…}\n}\n```", "```kt\n@Composable\nfun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n    val viewModel: RestaurantsViewModel = viewModel()\n    val state = viewModel.state.value\n    Box(…) {…}\n    viewModel.state.value = viewModel.state.value.copy(\n        isLoading = false)\n}\n```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        …\n        private val state = mutableStateOf(…)\n        …\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        …\n        private val _state = mutableStateOf(…)\n        private val errorHandler =\n            CoroutineExceptionHandler {\n                …\n                exception.printStackTrace()\n                _state.value = _state.value.copy(…)\n            }\n        […]\n        fun toggleFavorite(id: Int, oldValue: Boolean) {\n            viewModelScope.launch(errorHandler) {\n                val updatedRestaurants = …\n                _state.value = _state.value.copy(…)\n            }\n        }\n        private fun getRestaurants() {\n            viewModelScope.launch(errorHandler) {\n                val restaurants =\n                    repository.getAllRestaurants()\n                _state.value = _state.value.copy(…)\n            }\n        }\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        …\n        private val _state = mutableStateOf(...)\n        val state: State<RestaurantsScreenState>\n            get() = _state\n        …\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n        val viewModel: RestaurantsViewModel = viewModel()\n        val state = viewModel.state.value\n        Box(…) {…}\n    }\n    ```", "```kt\n@Composable\nfun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n    val viewModel: RestaurantsViewModel = viewModel()\n    val state = viewModel.state.value\n    Box(…) {…}\n    viewModel.state.value = viewModel.state.value.copy(\n        isLoading = false)\n}\n```"]