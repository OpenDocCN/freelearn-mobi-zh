["```swift\nimport Foundation\n```", "```swift\nfunc howLongUntilChristmas() -> String {\n\n}\n```", "```swift\nlet calendar = Calendar.current\nlet timeZone = TimeZone.current\n```", "```swift\nlet now = Date()\nlet yearOfNextChristmas = calendar.component(.year, from: now)\n```", "```swift\nvar components = DateComponents(calendar: calendar, \n                                timeZone: timeZone, \n                                year: yearOfNextChristmas, \n                                month: 12, \n                                day: 25, \n                                hour: 0, \n                                minute: 0, \n                                second: 0)\n```", "```swift\nvar christmas = components.date!\n```", "```swift\n// If we have already had Christmas this year, \n// then we need to use Christmas next year.\nif christmas < now {\n  components.year = yearOfNextChristmas + 1 \n  christmas = components.date!\n}\n```", "```swift\nlet componentFormatter = DateComponentsFormatter()\ncomponentFormatter.unitsStyle = .full\ncomponentFormatter.allowedUnits = [.month, .day, .hour, .minute, \n  .second]\n```", "```swift\nreturn componentFormatter.string(from: now, to: christmas)!\n```", "```swift\nlet timeUntilChristmas = howLongUntilChristmas()\nprint(\"Time until Christmas: \\(timeUntilChristmas)\")\n```", "```swift\nlet calendar = Calendar.current\nlet timeZone = TimeZone.current\n```", "```swift\nlet now = Date()\n```", "```swift\nlet yearOfNextChristmas = calendar.component(.year, from: now)\n```", "```swift\nvar components = DateComponents(calendar: calendar,\n                                timeZone: timeZone,\n                                year: yearOfNextChristmas,\n                                month: 12,\n                                day: 25,\n                                hour: 0,\n                                minute: 0,\n                                second: 0)\n\n```", "```swift\nvar christmas = components.date!\n```", "```swift\nif christmas < now {\n   components.year = yearOfNextChristmas + 1\n   christmas = components.date!\n}\n```", "```swift\nlet componentFormatter = DateComponentsFormatter()\ncomponentFormatter.unitsStyle = .full\ncomponentFormatter.allowedUnits = [.month, .day, .hour, .minute, \n  .second]\n\n```", "```swift\nreturn componentFormatter.string(from: now, to: christmas)!\n```", "```swift\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n```", "```swift\nimport Foundation\nlet config = URLSessionConfiguration.default\nlet session = URLSession(configuration: config)\n```", "```swift\nlet urlString = \"https://imgs.xkcd.com/comics/api.png\"\nlet url = URL(string: urlString)!\nlet request = URLRequest(url: url)\n```", "```swift\nlet task = session.dataTask(with: request, completionHandler: { \n  (data, response, error) in\n\n})\n```", "```swift\nimport UIKit\n```", "```swift\nlet task = session.dataTask(with: request) { (data, response, error)\n  in\n    guard let imageData = data else {\n        return // No Image, handle error\n    }\n    _ = UIImage(data: imageData)\n}\n```", "```swift\ntask.resume()\n```", "```swift\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n```", "```swift\nimport Foundation\nlet config = URLSessionConfiguration.default\nlet session = URLSession(configuration: config)\n```", "```swift\nlet urlString = \"https://imgs.xkcd.com/comics/api.png\"\nlet url = URL(string: urlString)!\nlet request = URLRequest(url: url)\n```", "```swift\nlet task = session.dataTask(with: request, completionHandler: { (data,\n  response, error) in\n\n})\n```", "```swift\nlet task = session.dataTask(with: request) { (data, response, error) in\n    guard let imageData = data else {\n        return // No Image, handle error\n    }\n    _ = UIImage(data: imageData)\n}\n```", "```swift\ntask.resume()\n```", "```swift\n{\n  \"name\": { \n    \"givenName\": \"Keith\",\n    \"middleName\": \"David\",\n    \"familyName\": \"Moon\"\n  },\n  \"age\": 40,\n  \"heightInMetres\": 1.778,\n  \"isBritish\": true,\n  \"favouriteFootballTeam\": null\n}\n```", "```swift\n[\n  {\n    \"name\": { \n      \"givenName\": \"Keith\",\n      \"middleName\": \"David\",\n      \"familyName\": \"Moon\"\n    },\n    \"age\": 40,\n    \"heightInMetres\": 1.778,\n    \"isBritish\": true,\n    \"favouriteFootballTeam\": null\n  },\n  {\n    \"name\": { \n      \"givenName\": \"Alissa\",\n      \"middleName\": \"May\",\n      \"familyName\": \"Moon\"\n    },\n    \"age\": 35,\n    \"heightInMetres\": 1.765,\n    \"isBritish\": false,\n    \"favouriteFootballTeam\": null\n  }\n]\n```", "```swift\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nlet config = URLSessionConfiguration.default\nlet session = URLSession(configuration: config)\n```", "```swift\nfunc fetchRepos(forUsername username: String) {\n\n  let urlString = \"https://api.github.com/users/\\(username)/repos\"\n  let url = URL(string: urlString)!\n  var request = URLRequest(url: url)\n  request.setValue(\"application/vnd.github.v3+json\", \n    forHTTPHeaderField: \"Accept\")\n\n  let task = session.dataTask(with: request) { (data, response, \n    error) in\n\n  }\n  task.resume()\n}\n```", "```swift\nfunc fetchRepos(forUsername username: String) {\n\n  let urlString = \"https://api.github.com/users/\\(username)/repos\"\n  let url = URL(string: urlString)!\n  var request = URLRequest(url: url)\n  request.setValue(\"application/vnd.github.v3+json\",\n    forHTTPHeaderField: \"Accept\")\n  let task = session.dataTask(with: request) { (data, response, \n    error) in\n\n    // Once we have handled this response, the Playground\n    // can finish executing.\n    defer {\n      PlaygroundPage.current.finishExecution()\n    }\n\n    // First unwrap the optional data\n    guard let jsonData = data else {\n      // If it is nil, there was probably a network error\n      print(error ?? \"Network Error\")\n      return\n    }\n\n    do {\n      // Deserialisation can throw an error, so we have to `try` and \n        // catch errors\n      let deserialised = try JSONSerialization.jsonObject(with: \n        jsonData, options: [])\n      print(deserialised)\n\n    } catch {\n      print(error)\n    }\n  }\n  task.resume()\n}\n```", "```swift\nfetchRepos(forUsername: \"PacktPublishing\")\n```", "```swift\nfunc fetchRepos(forUsername username: String) {\n   //...\n   let task = session.dataTask(with: request) { (data, response, error) \n     in\n     //...\n     do {\n       // Deserialisation can throw an error, so we have to `try` and \n         // catch errors\n       let deserialised = try JSONSerialization.jsonObject(with:\n         jsonData, options: [])\n       print(deserialised)\n       // As `deserialised` has type `Any` we need to cast\n       guard let repos = deserialised as? [[String: Any]] else {\n         print(\"Unexpected Response\")\n         return\n       }\n       print(repos)\n     } catch {\n       print(error)\n     }\n   }\n}\n```", "```swift\nfunc fetchRepos(forUsername username: String, completionHandler: \n  @escaping ([[String: Any]]?, Error?) -> Void) {\n\n  let urlString = \"https://api.github.com/users/\\(username)/repos\"\n  let url = URL(string: urlString)!\n  var request = URLRequest(url: url)\n  request.setValue(\"application/vnd.github.v3+json\",\n    forHTTPHeaderField: \"Accept\")\n  let task = session.dataTask(with: request) { (data, response, error) \n    in\n\n    // Once we have handled this response, the Playground\n    // can finish executing.\n    defer {\n      PlaygroundPage.current.finishExecution()\n    }\n\n    // First unwrap the optional data\n    guard let jsonData = data else {\n      // If it is nil, there was probably a network error\n      completionHandler(nil, ResponseError.requestUnsuccessful)\n      return\n    }\n\n    do {\n      // Deserialisation can throw an error, so we have to `try` and \n       // catch errors\n      let deserialised = try JSONSerialization.jsonObject(with: \n        jsonData, options: [])\n       // As `deserialised` has type `Any` we need to cast\n      guard let repos = deserialised as? [[String: Any]] else {\n        completionHandler(nil, \n          ResponseError.unexpectedResponseStructure)\n        return\n      }\n\n      completionHandler(repos, nil)\n\n    } catch {\n      completionHandler(nil, error)\n    }\n  }\n  task.resume()\n}\n```", "```swift\nenum ResponseError: Error {\n  case requestUnsuccessful\n  case unexpectedResponseStructure\n}\n```", "```swift\nfetchRepos(forUsername: \"PacktPublishing\") { (repos, error) in\n\n  if let repos = repos {\n    print(repos)\n  } else if let error = error {\n    print(error)\n  }\n}\n```", "```swift\nfunc authHeaderValue(for token: String) -> String {\n  let authorisationValue = Data(\"\\(token):x-oauth-\n    basic\".utf8).base64EncodedString()\n  return \"Basic \\(authorisationValue)\"\n}\n```", "```swift\nfunc createIssue(inRepo repo: String, \n                 forUser user: String, \n                 title: String, \n                 body: String?) {\n\n}\n```", "```swift\nfunc createIssue(inRepo repo: String, \n                 forUser user: String, \n                 title: String, \n                 body: String?) {\n\n    // Create the URL and Request\n\n    let urlString = \"https://api.github.com/repos/\\(user)/\\\n      (repo)/issues\"\n    let url = URL(string: urlString)!\n    var request = URLRequest(url: url)\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/vnd.github.v3+json\", \n                     forHTTPHeaderField: \"Accept\")\n    let authorisationValue = authHeaderValue(for: <#your personal \n      access token>)\n    request.setValue(authorisationValue, forHTTPHeaderField: \n      \"Authorization\")\n    // Put the issue information into the JSON structure required\n    var json = [\"title\": title]\n\n    if let body = body {\n        json[\"body\"] = body\n    }\n\n    // Serialise the json into Data. We can use try! as we know it is \n     // valid JSON.\n    // Just be aware that the this will fail if provided value can't be\n     //  converted into valid JSON.\n    let jsonData = try! JSONSerialization.data(withJSONObject: json, \n      options: .prettyPrinted)\n    request.httpBody = jsonData\n\n    session.dataTask(with: request) { (data, response, error) in\n        // TO FINISH\n    }\n}\n```", "```swift\nfunc createIssue(inRepo repo: String, \n                 forUser user: String, \n                 title: String, \n                 body: String?, \n                 completionHandler: @escaping ([String: Any]?, Error?) \n                   -> Void) {\n    //...\n\n    session.dataTask(with: request) { (data, response, error) in\n\n        guard let jsonData = data else { \n            completionHandler(nil, ResponseError.requestUnsuccessful)\n            return\n        }\n\n        do {\n            // Deserialisation can throw an error, so we have to `try` \n            // and catch errors\n            let deserialised = try JSONSerialization.jsonObject(with: \n              jsonData, options: [])\n            // As `deserialised` has type `Any` we need to cast\n            guard let createdIssue = deserialised as? [String: Any]\n              else {\n                completionHandler(nil, \n                  ResponseError.unexpectedResponseStructure)\n                return\n            }\n\n            completionHandler(createdIssue, nil)\n\n        } catch {\n            completionHandler(nil, error)\n        }\n    }\n}\n```", "```swift\ncreateIssue(inRepo: \"Swift-5-Cookbook-Second-Edition\", \n            forUser: \"PacktPublishing\", \n            title: <#The title of your feedback#>, \n            body: <#Extra detail#>) { (issue, error) in\n\n                if let issue = issue {\n                    print(issue)\n                } else if let error = error {\n                    print(error)\n                }\n}\n```", "```swift\nfunc fetchRepos(forUsername username: String,\n    completionHandler: @escaping (Result<[[String: Any]], Error?) - \n      -> Void) {\n\n    //...\n\n    let task = session.dataTask(with: request) { (data, response, \n      error) in\n\n        //...\n\n        // First unwrap the optional data\n        guard let jsonData = data else {\n            // If it is nil, there was probably a network error\n            completionHandler(.failure(ResponseError.\n              requestUnsuccessful))\n            return\n        }\n\n        do {\n            // Deserialisation can throw an error, \n            // so we have to `try` and catch errors\n            let deserialised = try JSONSerialization.jsonObject(with: \n              jsonData, options: [] ) \n            // As `deserialised` has type `Any` we need to cast\n            guard let repos = deserialised as? [[String: Any]] else {\n                let error = ResponseError.unexpectedResponseStructure\n                completionHandler(.failure(error))\n                return\n            }\n            completionHandler(.success(repos))\n        } catch {\n            completionHandler(.failure(error))\n        }\n    }\n    task.resume()\n}\n```", "```swift\nfetchRepos(forUsername: \"PacktPublishing\", completionHandler:{ result\n  in\n    switch result {\n        case .success(let repos):\n            print(repos)\n\n        case .failure(let error):\n            print(error)\n    }\n})\n```", "```swift\nfunc createIssue(inRepo repo: String, \n                 forUser user: String, \n                 title: String, \n                 body: String?, \n                 completionHandler: @escaping (Result<[[String:   \n                   Any]], Error?) -> Void) {\n    //...\n    let task = session.dataTask(with: request) { (data, response, \n      error) in\n\n        guard let jsonData = data else { \n            completionHandler(.failure(ResponseError.\n              requestUnsuccessful))\n            return\n        }\n\n        do {\n            // Deserialisation can throw an error, \n            // so we have to `try` and catch errors\n            let deserialised = try JSONSerialization.jsonObject(with: \n              jsonData, options: [])\n\n            // As `deserialised` has type `Any` we need to cast\n            guard let createdIssue = deserialised as? [String: Any] \n              else {\n                let error = ResponseError.unexpectedResponseStructure\n                completionHandler(.failure(error))\n                return\n            }\n\n            completionHandler(.success(createdIssue))\n\n        } catch {\n            completionHandler(.failure(error))\n        }\n    }\n    task.resume()\n}\n```", "```swift\ncreateIssue(inRepo: \"Swift-5-Cookbook-Second-Edition\", \n            forUser: \"PacktPublishing\", \n            title: <#The title of your feedback#>, \n            body: <#Extra detail#>) { result in\n\n    switch result {\n        case .success(let issue):\n            print(issue)\n\n        case .failure(let error):\n            print(error)\n    }\n}\n```", "```swift\n[\n    {\n        \"id\": 68144965,\n        \"name\": \"JSONNode\",\n        \"full_name\": \"keefmoon/JSONNode\",\n        \"owner\": {\n            \"login\": \"keefmoon\",\n            \"id\": 271298,\n            \"avatar_url\": \n              \"https://avatars.githubusercontent.com/u/271298?v=3\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/keefmoon\",\n            \"html_url\": \"https://github.com/keefmoon\",\n            \"followers_url\":\n              \"https://api.github.com/users/keefmoon/followers\",\n            //... Some more URLs\n            \"received_events_url\": \n            \"https://api.github.com/users/keefmoon/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n        },\n        \"private\": false,\n        //... more values\n    }\n    //... more repositories\n]\n```", "```swift\nlet jsonData = //... returned from the network\n\nguard \n    let deserialised = try? JSONSerialization.jsonObject(with: \n      jsonData, options: []), \n    let repoArray = deserialised as? [[String: Any]], \n    let firstRepo = repoArray.first, \n    let ownerDictionary = firstRepo[\"owner\"] as? [String: Any], \n    let username = ownerDictionary[\"login\"] as? String \n    else {\n        return\n}\nprint(username)\n```", "```swift\nlet jsonData = //... returned from the network\nguard \n    let jsonNode = try? JSONNode(data: jsonData),\n    let username = jsonNode[0][\"owner\"][\"username\"].string \n    else {\n        return\n}\n\nprint(username)\n```", "```swift\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nfunc fetchBBCNewsRSSFeed() {\n\n    let session = URLSession.shared\n    let url = URL(string: \"http://feeds.bbci.co.uk/news/rss.xml\")!\n    let dataTask = session.dataTask(with: url) { (data, response, \n      error) in\n\n        guard let data = data, error == nil else {\n            print(error ?? \"Unexpected response\")\n            return\n        }\n\n        let dataAsString = String(data: data, encoding: .utf8)!\n        print(dataAsString)\n    }\n    dataTask.resume()\n}\n\nfetchBBCNewsRSSFeed()\n```", "```swift\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?xml-stylesheet title=\"XSL_formatting\" type=\"text/xsl\" href=\"/shared/bsp/xsl/rss/nolsol.xsl\"?>\n<rss    version=\"2.0\" >\n  <channel>\n    <title><![CDATA[BBC News - Home]]></title>;\n    <description><![CDATA[BBC News - Home]]></description>\n    <link>https://www.bbc.co.uk/news/</link>\n    <image>\n <url>https://news.bbcimg.co.uk/nol/shared/img/bbc_news_120x60.gif</url>\n <title>BBC News - Home</title>\n <link>https://www.bbc.co.uk/news/</link>\n  </image>\n    <generator>RSS for Node</generator>\n    <lastBuildDate>Sat, 15 Aug 2020 00:41:41 GMT</lastBuildDate>\n   <copyright><![CDATA[Copyright: (C) British Broadcasting \n       Corporation, see http://news.bbc.co.uk/2/hi/help/rss/4498287.stm \n         for terms and conditions of reuse.]]></copyright>\n    <language><![CDATA[en-gb]]></language>\n    <ttl>15</ttl>\n    <item>\n      <title><![CDATA[Coronavirus: Thousands return to UK to beat \n         France quarantine]]></title>\n      <description><![CDATA[Holidaymakers have just hours to return to \n         the UK to avoid the 14-day self-isolation requirement.]]>\n     </description>\n      <link>https://www.bbc.co.uk/news/uk-53782019</link>\n      <guid isPermaLink=\"true\">https://www.bbc.co.uk/news/uk-\n         53782019</guid>\n      <pubDate>Fri, 14 Aug 2020 21:21:54 GMT</pubDate>\n    </item>\n    //... More items\n  </channel>\n</rss>\n```", "```swift\n<link>https://www.bbc.co.uk/news/uk-53782019</link>\n```", "```swift\n<guid isPermaLink=\"true\">https://www.bbc.co.uk/news/uk-53782019</guid>\n```", "```swift\n<image>\n    <url>http://news.bbcimg.co.uk/nol/shared/img/bbc_news_120x60.gif</url>\n    <title>BBC News - Home</title>\n    <link>http://www.bbc.co.uk/news/</link>\n</image>\n```", "```swift\n<title><![CDATA[Coronavirus: Thousands return to UK to beat France \n   quarantine]]></title>\n```", "```swift\n<xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quotes>\n    <quote attribution=\"Homer Simpson\">\n        Press any key to continue, where's the any key?\n    <;/quote>\n    <quote attribution=\"Unknown\">\n        Why do nerds confuse Halloween and Christmas? Because \n          OCT31=DEC25\n    </quote>\n</quotes>\n```", "```swift\nfunc parserDidStartDocument(_ parser: XMLParser)\n```", "```swift\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quotes>\n** Parser is here **\n    <quote attribution=\"Homer Simpson\">\n        Press any key to continue, where's the any key?\n    </quote>\n    <quote attribution=\"Unknown>\n        Why do nerds confuse Halloween and Christmas? Because \n          OCT31=DEC25\n    </quote>\n</quotes>\n```", "```swift\nfunc parser(_ parser: XMLParser,\n            didStartElement elementName: String,\n            namespaceURI: String?,\n            qualifiedName qName: String?,\n            attributes attributeDict: [String : String] = [:]) {\n    /*\n    elementName = quotes\n    namespaceURI = nil\n    qName = nil\n    attributeDict = [:]\n    */\n}\n```", "```swift\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n<quotes>\n    <quote attribution=\"Homer Simpson\">\n** Parser is here **\n        Press any key to continue, where's the any key?\n    </quote>\n    <quote attribution=\"Unknown\">\n        Why do nerds confuse Halloween and Christmas? Because \n          OCT31=DEC25\n    </quote>\n</quotes>\n```", "```swift\nfunc parser(_ parser: XMLParser,\n            didStartElement elementName: String,\n            namespaceURI: String?,\n            qualifiedName qName: String?,\n            attributes attributeDict: [String : String] = [:]) {\n    /*\n    elementName = quote\n    namespaceURI = nil\n    qName = nil\n    attributeDict = [\"attribution\": \"Homer Simpson\"]\n    */\n}\n```", "```swift\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quotes>\n    <quote attribution=\"Homer Simpson\">\n        Press any key to continue, ** Parser is here **where's the \n          any key?\n    </quote>\n    <quote attribution=\"Unknown>\n        Why do nerds confuse Halloween and Christmas? Because \n           OCT31=DEC25\n   </quote>\n</quotes>\n```", "```swift\nfunc parser(_ parser: XMLParser, foundCharacters string: String) {\n    /*\n    string = \"Press any key to continue, \"\n    */\n}\n```", "```swift\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quotes>\n    <quote attribution=\"Homer Simpson\">\n        Press any key to continue, where's the any key?\n ** Parser is here **\n    </quote>\n    <quote attribution=\"Unknown\">\n        Why do nerds confuse Halloween and Christmas? Because \n          OCT31=DEC25\n    </quote>\n</quotes>\n```", "```swift\nfunc parser(_ parser: XMLParser, foundCharacters string: String) {\n    /*\n    string = \"where's the any key?\"\n    */\n}\n```", "```swift\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quotes>\n    <quote attribution=\"Homer Simpson\">\n        Press any key to continue, where's the any key?\n    </quote>\n** Parser is here **\n    <quote attribution=\"Unknown\">\n        Why do nerds confuse Halloween and Christmas? Because \n          OCT31=DEC25\n    </quote>\n</quotes>\n```", "```swift\nfunc parser(_ parser: XMLParser,\n didEndElement elementName: String,\n namespaceURI: String?,\n qualifiedName qName: String?) {\n /*\n elementName = \"quote\"\n namespaceURI = nil\n qName = nil\n */\n}\n```", "```swift\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quotes>\n    <quote attribution=\"Homer Simpson\">\n        Press any key to continue, where's the any key?\n    </quote>\n    <quote attribution=\"Unknown\">\n        Why do nerds confuse Halloween and Christmas? Because \n          OCT31=DEC25\n    </quote>\n</quotes>\n** Parser is here **\n```", "```swift\nfunc parser(_ parser: XMLParser,\n            didEndElement elementName: String,\n            namespaceURI: String?,\n            qualifiedName qName: String?) {\n    /*\n    elementName = \"quotes\"\n    namespaceURI = nil\n    qName = nil\n    */\n}\n```", "```swift\nfunc parserDidEndDocument(_ parser: XMLParser) {\n\n}\n```", "```swift\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?xml-stylesheet title=\"XSL_formatting\" type=\"text/xsl\" href=\"/shared/bsp/xsl/rss/nolsol.xsl\"?>\n<rss    version=\"2.0\" >\n    <channel>\n        <title><![CDATA[BBC News - Home]]></title>\n        <description><![CDATA[BBC News - Home]]></description>\n        <link>https://www.bbc.co.uk/news/</link>\n        <image>\n            <url>https://news.bbcimg.co.uk/nol/shared/img/\n               bbc_news_120x60.gif</url>\n            <title>BBC News - Home</title>\n            <link>https://www.bbc.co.uk/news/</link>\n        </image>\n        <generator>RSS for Node</generator>\n        <lastBuildDate>Sat, 15 Aug 2020 00:41:41 GMT</lastBuildDate>\n        <copyright><![CDATA[Copyright: (C) British Broadcasting \n          Corporation, see http://news.bbc.co.uk/2/hi/help/rss/\n           4498287.stm for terms and conditions of reuse.]]>\n            </copyright>\n        <language><![CDATA[en-gb]]></language>\n        <ttl>15</ttl>\n        <item>\n            <title><![CDATA[Coronavirus: Thousands return to UK to beat \n               France quarantine]]></title>\n            <description><![CDATA[Holidaymakers have just hours to \n                return to the UK to avoid the 14-day self-isolation \n                   requirement.]]></description>\n            <link>https://www.bbc.co.uk/news/uk-53782019</link>\n            <guid isPermaLink=\"true\">https://www.bbc.co.uk/news/uk-\n               53782019</guid>\n            <pubDate>Fri, 14 Aug 2020 21:21:54 GMT</pubDate>\n        </item>\n        //... More items\n    </channel>\n</rss>\n\n```", "```swift\nstruct NewsArticle {\n    let title: String\n    let url: URL\n}\n```", "```swift\nclass RSSNewsArticleBuilder: NSObject, XMLParserDelegate {\n\n}\n```", "```swift\nclass RSSNewsArticleBuilder: NSObject, XMLParserDelegate {\n\n    var inItem = false\n\n    func parser(_ parser: XMLParser,\n                didStartElement elementName: String,\n                namespaceURI: String?,\n                qualifiedName qName: String?,\n                attributes attributeDict: [String : String] = [:]) {\n\n        switch elementName {\n\n        case \"item\":\n            inItem = true\n\n        default:\n            break\n\n        }\n    }\n\n    func parser(_ parser: XMLParser,\n                didEndElement elementName: String,\n                namespaceURI: String?,\n                qualifiedName qName: String?) {\n\n        switch elementName {\n\n        case \"item\":\n            inItem = false\n\n        default:\n            break\n        }\n    }\n}\n```", "```swift\n<item>\n  <title><![CDATA[Coronavirus: Thousands return to UK to beat France \n     quarantine]]></title>\n  <description><![CDATA[Holidaymakers have just hours to return to the \n      UK to avoid the 14-day self-isolation requirement.]]>\n       </description>\n  <link>https://www.bbc.co.uk/news/uk-53782019</link>\n  <guid isPermaLink=\"true\">https://www.bbc.co.uk/news/uk-\n     53782019</guid>\n  <pubDate>Fri, 14 Aug 2020 21:21:54 GMT</pubDate>\n</item>\n```", "```swift\nclass RSSNewsArticleBuilder: NSObject, XMLParserDelegate {\n\n    var inItem = false\n    var inTitle = false\n    var inLink = false\n    var titleData: Data?\n    var linkString: String?\n\n    //...\n}\n```", "```swift\nfunc parser(_ parser: XMLParser,\n            didStartElement elementName: String,\n            namespaceURI: String?,\n            qualifiedName qName: String?,\n            attributes attributeDict: [String : String] = [:]) {\n\n    switch elementName {\n\n    case \"item\":\n        inItem = true\n\n    case \"title\":\n        inTitle = true\n        titleData = Data()\n\n    case \"link\":\n        inLink = true\n        linkString = \"\"\n\n    default:\n        break\n    }\n}\n```", "```swift\nclass RSSNewsArticleBuilder: NSObject, XMLParserDelegate {\n\n    //...\n    func parser(_ parser: XMLParser, foundCDATA CDATABlock: Data) {\n\n        if inTitle {\n            titleData?.append(CDATABlock)\n        }\n    }\n\n    func parser(_ parser: XMLParser, foundCharacters string: String) {\n\n        if inLink {\n            linkString?.append(string)\n        }\n    }\n}\n```", "```swift\nclass RSSNewsArticleBuilder: NSObject, XMLParserDelegate {\n    //...\n    func parser(_ parser: XMLParser,\n                didEndElement elementName: String,\n                namespaceURI: String?,\n                qualifiedName qName: String?) {\n\n        switch elementName {\n\n        case \"item\":\n            inItem = false\n\n            guard\n                let titleData = titleData,\n                let titleString = String(data: titleData, encoding: \n                  .utf8),\n                let linkString = linkString,\n                let link = URL(string: linkString)\n                else { break }\n\n            print(titleString)\n            print(link)\n\n        case \"title\":\n            inTitle = false\n\n        case \"link\":\n            inLink = false\n\n        default:\n            break\n        }\n    }\n    //...\n}\n```", "```swift\nclass RSSNewsArticleBuilder: NSObject, XMLParserDelegate {\n\n    var inItem = false\n    var inTitle = false\n    var inLink = false\n    var titleData: Data?\n    var linkString: String?\n    var articles = [NewsArticle]()\n\n    //...\n}\n```", "```swift\nclass RSSNewsArticleBuilder: NSObject, XMLParserDelegate {\n\n    //...\n    func parser(_ parser: XMLParser,\n                didEndElement elementName: String,\n                namespaceURI: String?,\n                qualifiedName qName: String?) {\n\n        switch elementName {\n\n        case \"item\":\n            inItem = false\n\n            guard\n                let titleData = titleData,\n                let titleString = String(data: titleData, encoding: \n                  .utf8),\n                let linkString = linkString,\n                let link = URL(string: linkString)\n                else { break }\n\n            let article = NewsArticle(title: titleString, url: link)\n            articles.append(article)\n\n        case \"title\":\n            inTitle = false\n\n        case \"link\":\n            inLink = false\n\n        default:\n            break\n        }\n    }\n    //...\n}\n```", "```swift\nclass RSSNewsArticleBuilder: NSObject, XMLParserDelegate {\n    //...\n    func parserDidStartDocument(_ parser: XMLParser) {\n        inItem = false\n        inTitle = false\n        inLink = false\n        titleData = nil\n        linkString = nil\n        articles = [NewsArticle]()\n    }\n    //...\n}\n```", "```swift\nfunc fetchBBCNewsRSSFeed() {\n\n    let session = URLSession.shared\n    let url = URL(string: \"http://feeds.bbci.co.uk/news/rss.xml\")!\n    let dataTask = session.dataTask(with: url) { (data, response, \n      error) in\n\n        guard let data = data, error == nil else {\n            print(error ?? \"Unexpected response\")\n            return\n        }\n\n        let dataAsString = String(data: data, encoding: .utf8)!\n        print(dataAsString)\n    }\n    dataTask.resume()\n}\n```", "```swift\nfunc fetchBBCNewsRSSFeed() {\n\n    let session = URLSession.shared\n    let url = URL(string: \"http://feeds.bbci.co.uk/news/rss.xml\")!\n    let dataTask = session.dataTask(with: url) { (data, response,\n      error) in\n\n        guard let data = data, error == nil else {\n            print(error ?? \"Unexpected response\")\n            return\n        }\n\n        let parser = XMLParser(data: data)\n        let articleBuilder = RSSNewsArticleBuilder()\n        parser.delegate = articleBuilder\n        parser.parse()\n        let articles = articleBuilder.articles\n        print(articles)\n    }\n    dataTask.resume()\n}\n```", "```swift\nfunc fetchBBCNewsRSSFeed(completion: @escaping ([NewsArticle]?, Error?)\n  -> Void) {\n\n    let session = URLSession.shared\n    let url = URL(string: \"http://feeds.bbci.co.uk/news/rss.xml\")!\n    let dataTask = session.dataTask(with: url) { (data, response, \n      error) in\n\n        guard let data = data, error == nil else {\n            completion(nil, error)\n            return\n        }\n\n        let parser = XMLParser(data: data)\n        let articleBuilder = RSSNewsArticleBuilder()\n        parser.delegate = articleBuilder\n        parser.parse()\n        let articles = articleBuilder.articles\n        completion(articles, nil)\n    }\n    dataTask.resume()\n}\n```", "```swift\nfetchBBCNewsRSSFeed() { (articles, error) in\n\n    if let articles = articles {\n        print(articles)\n    } else if let error = error {\n        print(error)\n    }\n}\n```", "```swift\n<articles>\n    <article>\n        <title>Donald Trump calls Fidel Castro 'brutal dictator'\n          </title>\n        <url>http://www.bbc.co.uk/news/world-latin-america-\n           38118739</url>\n    </article>\n    <article>\n        <title>Fidel Castro: Jeremy Corbyn praises 'huge figure'\n           </title>\n        <url>http://www.bbc.co.uk/news/uk-38117068</url>\n    </article>\n</articles>\n```", "```swift\nfunc createXML(representing articles: [NewsArticle]) -> Data {\n\n    let root = XMLElement(name: \"articles\")\n    let document = XMLDocument(rootElement: root)\n\n    for article in articles {\n\n        let articleElement = XMLElement(name: \"article\")\n        let titleElement = XMLElement(name: \"title\", \n                                      stringValue: article.title)\n        let urlElement = XMLElement(name: \"url\", \n                         stringValue: article.url.absoluteString)\n\n        articleElement.addChild(titleElement)\n        articleElement.addChild(urlElement)\n        root.addChild(articleElement)\n    }\n    print(document.xmlString)\n    return document.xmlData\n}\n```", "```swift\nfetchBBCNewsRSSFeed() { (articles, error) in\n\n    if let articles = articles {\n\n        let articleXMLData = createXML(representing: articles)\n        print(articleXMLData.length)\n\n    } else if let error = error {\n        print(error)\n    }\n}\n```", "```swift\nfetchBBCNewsRSSFeed() { (articles, error) in\n\n    if let articles = articles {\n\n        let xmlData = createXML(representing: articles)\n\n        let documentsURL = FileManager.default.urls(for: \n          .documentDirectory, in: .userDomainMask).first!\n        let writeURL = documentsURL.appendingPathComponent(\n          \"articles.xml\")\n        print(\"Writing data to: \\(writeURL)\")\n        try! xmlData.write(to: writeURL)\n\n    } else if let error = error {\n        print(error)\n    }\n}\n```"]