["```kt\n@Composable\nfun ComposeUnitConverterTheme(\n  darkTheme: Boolean = isSystemInDarkTheme(),\n  content: @Composable () -> Unit\n) {\n  val colors = if (darkTheme) {\n    DarkColorPalette\n  } else {\n    LightColorPalette\n  }\n  MaterialTheme(\n    colors = colors,\n    content = content\n  )\n}\n```", "```kt\nprivate val LightColorPalette = lightColors(\n  primary = AndroidGreen,\n  primaryVariant = AndroidGreenDark,\n  secondary = Orange,\n  secondaryVariant = OrangeDark\n)\n```", "```kt\nval AndroidGreen = Color(0xFF3DDC84)\n```", "```kt\nshapes = Shapes(small = CutCornerShape(8.dp)),\n```", "```kt\ntypography = Typography(button = TextStyle(fontSize =\n                                           24.sp)),\n```", "```kt\nclass ComposeUnitConverterActivity : ComponentActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    val factory = …\n    setContent {\n      ComposeUnitConverter(factory)\n    }\n  }\n}\n```", "```kt\n@Composable\nfun ComposeUnitConverter(factory: ViewModelFactory) {\n  …\n  ComposeUnitConverterTheme {\n    Scaffold( ...\n```", "```kt\n@Composable\n@Preview\nfun MaterialThemeDemo() {\n  MaterialTheme(\n    typography = Typography(\n      h1 = TextStyle(color = Color.Red)\n    )\n  ) {\n    Row {\n      Text(\n        text\"= \"He\"lo\",\n        style = MaterialTheme.typography.h1\n      )\n      Spacer(modifier = Modifier.width(2.dp))\n      MaterialTheme(\n        typography = Typography(\n          h1 = TextStyle(color = Color.Blue)\n        )\n      ) {\n        Text(\n          text\"= \"Comp\"se\",\n          style = MaterialTheme.typography.h1\n        )\n      }\n    }\n  }\n}\n```", "```kt\n<resources>\n  <style name=\"Theme.ComposeUnitConverter\"\n         parent=\"Theme.AppCompat.DayNight.NoActionBar\">\n    <item\n     name=\"colorPrimaryDark\">@color/android_green_dark\n    </item>\n  </style>\n</resources>\n```", "```kt\n<resources>\n  <color name=\"android_green_dark\">#FF20B261</color>\n  <color name=\"orange_dark\">#FFCC8400</color>\n</resources>\n```", "```kt\n<resources>\n  <style name=\"Theme.ComposeUnitConverter\"\n         parent=\"Theme.AppCompat.DayNight.NoActionBar\">\n    <item name=\"colorPrimaryDark\">@color/orange_dark</item>\n  </style>\n</resources>\n```", "```kt\nval AndroidGreenDark = Color(0xFF20B261)\n```", "```kt\nprivate val LightColorPalette = lightColors(\n  primary = AndroidGreen,\n  primaryVariant = AndroidGreenDark,\n  secondaryVariant = OrangeDark\n)\n```", "```kt\n@Composable\nfun ComposeUnitConverterTheme(\n  darkTheme: Boolean = isSystemInDarkTheme(),\n  content: @Composable () -> Unit\n) {\n  val colors = if (darkTheme) {\n    DarkColorPalette\n  } else {\n    LightColorPalette.copy(secondary = colorResource(\n      id = R.color.orange_dark))\n  }\n  MaterialTheme(\n    colors = colors,\n    …\n```", "```kt\n@Composable\nfun ComposeUnitConverter(factory: ViewModelFactory) {\n  val navController = rememberNavController()\n  val menuItems = listOf(\"Item #1\", \"Item #2\")\n  val scaffoldState = rememberScaffoldState()\n  val snackbarCoroutineScope = rememberCoroutineScope()\n  ComposeUnitConverterTheme {\n    Scaffold(scaffoldState = scaffoldState,\n      topBar = {\n        ComposeUnitConverterTopBar(menuItems) { s ->\n          snackbarCoroutineScope.launch {\n            scaffoldState.snackbarHostState.showSnackbar(s)\n          }\n        }\n      },\n      bottomBar = {\n        ComposeUnitConverterBottomBar(navController)\n      }\n    ) {\n      ComposeUnitConverterNavHost(\n        navController = navController,\n        factory = factory\n      )\n    }\n  }\n}\n```", "```kt\n@Composable\nfun ComposeUnitConverterTopBar(menuItems: List<String>, \n                               onClick: (String) -> Unit) {\n  var menuOpened by remember { mutableStateOf(false) }\n  TopAppBar(title = {\n    Text(text = stringResource(id = R.string.app_name))\n  },\n    actions = {\n      Box {\n        IconButton(onClick = {\n          menuOpened = true\n        }) {\n          Icon(Icons.Default.MoreVert, \"\")\n        }\n        DropdownMenu(expanded = menuOpened,\n          onDismissRequest = {\n            menuOpened = false\n          }) {\n          menuItems.forEachIndexed { index, s ->\n            if (index > 0) Divider()\n            DropdownMenuItem(onClick = {\n              menuOpened = false\n              onClick(s)\n            }) {\n              Text(s)\n            }\n          }\n        }\n      }\n    }\n  )\n}\n```", "```kt\nsealed class ComposeUnitConverterScreen(\n  val route: String,\n  @StringRes val label: Int,\n  @DrawableRes val icon: Int\n) {\n  companion object {\n    val screens = listOf(\n      Temperature,\n      Distances\n    )\n    const val route_temperature = \"temperature\"\n    const val route_distances = \"distances\"\n  }\n  private object Temperature : ComposeUnitConverterScreen(\n    route_temperature,\n    R.string.temperature,\n    R.drawable.baseline_thermostat_24\n  )\n  private object Distances : ComposeUnitConverterScreen(\n    route_distances,\n    R.string.distances,\n    R.drawable.baseline_square_foot_24\n  )\n}\n```", "```kt\n@Composable\nfun ComposeUnitConverterBottomBar(navController:\n   NavHostController) {\n  BottomNavigation {\n    val navBackStackEntry by\n          navController.currentBackStackEntryAsState()\n    val currentDestination = navBackStackEntry?.destination\n    ComposeUnitConverterScreen.screens.forEach { screen ->\n      BottomNavigationItem(\n        selected = currentDestination?.hierarchy?.any {\n          it.route == screen.route } == true,\n        onClick = {\n          navController.navigate(screen.route) {\n            launchSingleTop = true\n          }\n        },\n        label = {\n          Text(text = stringResource(id = screen.label))\n        },\n        icon = {\n          Icon(\n            painter = painterResource(id = screen.icon),\n            contentDescription = stringResource(id =\n              screen.label)\n          )\n        },\n        alwaysShowLabel = false\n      )\n    }\n  }\n}\n```", "```kt\nComposeUnitConverterScreen.screens.forEach { screen ->\n```", "```kt\n@Composable\nfun ComposeUnitConverterNavHost(\n  navController: NavHostController,\n  factory: ViewModelProvider.Factory?\n) {\n  NavHost(\n    navController = navController,\n    startDestination =\n        ComposeUnitConverterScreen.route_temperature\n  ) {\n    composable(ComposeUnitConverterScreen.route_temperature) {\n      TemperatureConverter(\n        viewModel = viewModel(factory = factory)\n      )\n    }\n    composable(ComposeUnitConverterScreen.route_distances) {\n      DistancesConverter(\n        viewModel = viewModel(factory = factory)\n      )\n    }\n  }\n}\n```"]