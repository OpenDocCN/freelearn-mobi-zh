["```swift\nlet pathPath = CGMutablePath()\n```", "```swift\n pathPath.closeSubpath()\n pathPath.move(to: CGPoint(x: 159, y: 104.854378))\n```", "```swift\nstruct WeTextShape: Shape {\n    func path(in rect: CGRect) -> Path {\n    }\n}\n```", "```swift\nstruct WeTextShape: Shape {\n  func path(in rect: CGRect) -> Path {\n    let pathPath = CGMutablePath()\n      pathPath.move(to: CGPoint(x: 33.544579, y: \n        105.919167))\n      pathPath.addCurve(to: CGPoint(x: 20.994799, y: \n        60.169167), control1: CGPoint(x: 32.057159, y: \n        101.184097), control2: CGPoint(x: 29.932928, y: \n        93.440262))\n      pathPath.addCurve(to: CGPoint(x: 3.45976, y: \n        7.26897), control1: CGPoint(x: 8.184458, y: \n        12.4843), control2: CGPoint(x: 7.749718, y: \n        11.17275))\n      pathPath.addLine(to: CGPoint(x: 0, y: 0.16917))\n      ........................................................\n      pathPath.addCurve(to: CGPoint(x: 236.485107, y: \n        93.6082), control1: CGPoint(x: 237.051361, y: \n        79.890518), control2: CGPoint(x: 236.884613, y: \n        86.149673))\n      pathPath.addLine(to: CGPoint(x: 235.758789, y: \n        107.169159))\n      pathPath.addLine(to: CGPoint(x: 197.379395, y: \n        107.169159))\n      pathPath.addLine(to: CGPoint(x: 159, y: 107.169159))\n      pathPath.addLine(to: CGPoint(x: 159, y: 104.854378))\n      pathPath.closeSubpath()\n      pathPath.move(to: CGPoint(x: 159, y: 104.854378))\n  }\n}\n```", "```swift\nvar path = Path()\n```", "```swift\nreturn path\n```", "```swift\nfunc path(in rect: CGRect) -> Path {\n    var path = Path()\n    path.move(to: CGPoint(x: 33.544579, y: 105.919167))\n    path.addCurve(to: CGPoint(x: 3.45976, y: 7.26897), \n      control1: CGPoint(x: 8.184458, y: 12.4843), control2: \n      CGPoint(x: 7.749718, y: 11.17275))\n       •••SHAPE CODE HERE•••\n    return path\n  }\n```", "```swift\n//MARK: - VARIABLES\n    @State var strokeReset: Bool = true\n    @State var startStroke: CGFloat = 0.0\n    @State var endStroke: CGFloat = 0.0\n```", "```swift\nvar body: some View {\n    ZStack {\n    }\n  }\n```", "```swift\n ZStack {\n        Group {\n            //SHAPE OUTLINE\n            WeTextShape()\n                .stroke(style: StrokeStyle(lineWidth: 0.5, \n                  lineCap: .round, lineJoin: .round))\n                .foregroundColor(.gray)\n        }\n    }\n```", "```swift\n    Group {\n        //SHAPE OUTLINE\n        WeTextShape()\n            .stroke(style: StrokeStyle(lineWidth: 0.5, \n              lineCap: .round, lineJoin: .round))\n            .foregroundColor(.gray)\n        //ANIMATING STROKE\n        WeTextShape()\n            .trim(from: startStroke, to: endStroke)\n.stroke(style: StrokeStyle(lineWidth: 5, \n              lineCap: .round, lineJoin: .round))\n            .foregroundColor(Color.red)\n    }.offset(x: 75, y: 50)\n  )\n   }\n```", "```swift\n.onAppear() {\n    Timer.scheduledTimer(withTimeInterval: 0.23, repeats: \n      true) { timer in\n        if (endStroke >= 1) {\n            if (strokeReset) {\n                Timer.scheduledTimer(withTimeInterval: 0.6, \n                  repeats: false) { _ in\n                    endStroke = 0\n                    startStroke = 0\n                    strokeReset.toggle()\n                }\n                strokeReset = false\n            }\n        }\n        withAnimation(Animation.easeOut) {\n            endStroke += 0.12\n            startStroke = endStroke - 0.4\n        }\n    }\n  }\n```", "```swift\nstruct HeartShape: Shape {\n    func path(in rect: CGRect) -> Path {\n    }\n }\n```", "```swift\nstruct HeartShape: Shape {\n  func path(in rect: CGRect) -> Path {\n    let pathPath = CGMutablePath()\n       pathPath.move(to: CGPoint(x: 245.632095, y: \n         460.368713))\n       pathPath.addCurve(to: CGPoint(x: 221.824585, y: \n         420.429504), control1: CGPoint(x: 240.765762, y: \n         449.02652), control2: CGPoint(x: 231.057922, y: \n         432.740723))\n........................................................\n      pathPath.closeSubpath()\n       pathPath.move(to: CGPoint(x: 245.632095, y: \n         460.368713))\n    }\n }\n```", "```swift\nvar path = Path()\n```", "```swift\nreturn path\n```", "```swift\n//MARK: - VARIABLES\n    @State var strokeReset: Bool = true\n    @State var startStroke: CGFloat = 0.0\n    @State var endStroke: CGFloat = 0.0\n```", "```swift\nvar body: some View {\n  ZStack {\n    Group {\n      //SHAPE OUTLINE\n      HeartShape()\n          .stroke(style: StrokeStyle(lineWidth: 0.5, \n            lineCap: .round, lineJoin: .round))\n          .foregroundColor(.gray)\n      //ANIMATING STROKE\n      HeartShape()\n          .trim(from: startStroke, to: endStroke)\n          .stroke(style: StrokeStyle(lineWidth: 5, lineCap: \n            .round, lineJoin: .round))\n          .foregroundColor(Color.white)\n  }.offset (x: 75, y: -30)\n  }.onAppear() {\n    Timer.scheduledTimer(withTimeInterval: 0.23, repeats: \n      true) { timer in\n        if (endStroke >= 1) {\n          if (strokeReset) {\n              Timer.scheduledTimer(withTimeInterval: 0.6, \n                repeats: false) { _ in\n                  endStroke = 0\n                  startStroke = 0\n                  strokeReset.toggle()\n              }\n              strokeReset = false\n          }\n      }\n      withAnimation(Animation.easeOut) {\n          endStroke += 0.12\n          startStroke = endStroke - 0.4 \n      }\n    }\n  }\n}\n```", "```swift\nGroup {\n      //SHAPE OUTLINE\n      HeartShape()\n          .stroke(style: StrokeStyle(lineWidth: 0.5, \n            lineCap: .round, lineJoin: .round))\n          .foregroundColor(.gray)\n      //ANIMATING STROKE\n      HeartShape()\n          .trim(from: startStroke, to: endStroke)\n          .stroke(style: StrokeStyle(lineWidth: 5, lineCap: \n            .round, lineJoin: .round))\n          .foregroundColor(Color.blue)\n      ///HEART BITMAP IMAGE\nImage(\"heart\").resizable().aspectRatio(contentMode: \n        .fit)\n          .frame(width: 246, alignment: .center)\n          .position(x: 125, y:117.5)\n     }\n```", "```swift\nstruct SwiftUILogoShape: Shape {\n  func path(in rect: CGRect) -> Path {\n    var path = Path()\n    path.move(to: CGPoint(x: 201.374207, y: 235.109955))\n    path.addCurve(to: CGPoint(x: 231.023102, y: \n      220.544876), control1: CGPoint(x: 212.656006, y: \n      233.244553), control2: CGPoint(x: 222.89035, y: \n      228.216904))\n   ........................................................\n     path.addCurve(to: CGPoint(x: 207.854324, y: \n       191.140839), control1: CGPoint(x: 209.692215, y: \n       193.796051), control2: CGPoint(x: 208.764877, y: \n       192.663177))\n     path.addLine(to: CGPoint(x: 207.854324, y: \n       191.140839))\n     path.closeSubpath()\n     path.move(to: CGPoint(x: 207.854324, y: 191.140839))\n        return path\n    }\n}\n```", "```swift\nstruct SwiftUILogoView: View {\n    //MARK: - VARIABLES\n    @State var strokeReset: Bool = true\n    @State var startStroke: CGFloat = 0.0\n    @State var endStroke: CGFloat = 0.0\n    var body: some View {\n      ZStack {\n        Group {\n          //SHAPE OUTLINE\n              SwiftUILogoShape()\n          .stroke(style: StrokeStyle(lineWidth: 0.5, \n            lineCap: .round, lineJoin: .round))\n          .foregroundColor(.gray)\n      //ANIMATING STROKE\n      SwiftUILogoShape()\n          .trim(from: startStroke, to: endStroke)\n          .stroke(style: StrokeStyle(lineWidth: 5, lineCap: \n            .round, lineJoin: .round))\n          .foregroundColor(Color.blue)\n  }.offset(x: UIScreen.main.bounds.size.width / 5.5)\n    }.onAppear() {\n  Timer.scheduledTimer(withTimeInterval: 0.23, repeats: \n    true) { timer in\n      if (endStroke >= 1) {\n          if (strokeReset) {\n              Timer.scheduledTimer(withTimeInterval: 0.6, \n                repeats: false) { _ in\n                  endStroke = 0\n                  startStroke = 0\n                  strokeReset.toggle()\n              }\n              strokeReset = false\n          }\n      }\n      withAnimation(Animation.easeOut) {\n          endStroke += 0.12\n          startStroke = endStroke - 0.4 \n        }\n      }\n   }\n  }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack  {\n            WeView()\n            HeartView()\n            SwiftUILogoView()\n        }.background(Color.black)\n    }\n}\n```"]