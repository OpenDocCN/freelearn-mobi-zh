- en: Getting Started with Kotlin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin 入门
- en: 'This chapter covers the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下食谱：
- en: How to create an Android project with Kotlin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Kotlin 创建 Android 项目
- en: Creating a Toast in Kotlin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Kotlin 中创建 Toast
- en: Runtime permission in Kotlin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin 中的运行时权限
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Kotlin is probably the biggest change to come to Android development in the
    last few years, since the change from Eclipse to Android Studio anyway. Kotlin
    was announced by JetBrains in July 2011 and released as open source in February
    2012\. Version 1.0 was released in February 2016, with Google announcing first-class
    support for the language at Google I/O 2017\. Android Studio 3.0 came with full
    support for Kotlin already included (and is the minimum requirement for the following
    recipes.)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 可能是近年来 Android 开发中最大的变化，至少从 Eclipse 到 Android Studio 的变化来看。Kotlin 于 2011
    年 7 月由 JetBrains 宣布，并于 2012 年 2 月作为开源软件发布。1.0 版本于 2016 年 2 月发布，Google 在 2017 年的
    Google I/O 上宣布了对该语言的一级支持。Android Studio 3.0 随着对 Kotlin 的全面支持而发布（并且是以下食谱的最低要求。）
- en: '**Why Kotlin?**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么选择 Kotlin？**'
- en: 'With so many existing languages already available, why did JetBrains create
    another? According to their own announcements, they were looking for an alternative
    to Java. Since over 70% of their existing code was already in Java, starting from
    scratch wasn''t an option. They wanted a modern language that was compatible with
    Java. After comparing the many options and finding nothing that met all their
    needs, they decided to create Kotlin. One interesting aspect of Kotlin is that
    it was created by developers using the language, and not academics. Here are some
    of the features Kotlin brings to Android development:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在已有如此多的语言可供选择的情况下，为什么 JetBrains 还要创建另一种语言呢？根据他们自己的公告，他们正在寻找 Java 的替代品。由于他们现有的超过
    70% 的代码已经是 Java 编写的，从头开始并不是一个选择。他们需要一个与现代 Java 兼容的现代语言。在比较了许多选项并发现没有任何一种能满足所有需求后，他们决定创建
    Kotlin。Kotlin 的一个有趣之处在于，它是通过使用该语言的开发者创建的，而不是学者。以下是 Kotlin 为 Android 开发带来的某些特性：
- en: Simpler, more concise code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码更简洁
- en: Full JVM support and can be used anywhere Java is used
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全支持 JVM，可以在任何使用 Java 的地方使用
- en: Full support included in the IDE, especially since JetBrains is the creator
    of both the Kotlin language and Android Studio
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE 中已包含全面支持，特别是鉴于 JetBrains 既是 Kotlin 语言的创造者，也是 Android Studio 的创造者
- en: 'Safer code: Nullability built in to the language'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更安全的代码：语言内置了空值检查
- en: 'Rising popularity: Many big companies are adopting Kotlin'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激增的受欢迎程度：许多大型公司正在采用 Kotlin
- en: 'Modern language: Offers many features found in the latest language offerings'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代语言：提供了最新语言提供中的许多特性
- en: 'More enjoyable: Many surveys are finding Kotlin to have the highest satisfaction
    rating'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更有趣味性：许多调查发现 Kotlin 具有最高的满意度评分
- en: Hopefully, these reasons are enough to at least take a look at Kotlin, especially
    since Java developers can usually follow the code without too much difficulty.
    As you'll see with the first recipe in this chapter, it's very easy to add Kotlin
    support to an Android project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这些原因足以让您至少了解一下 Kotlin，尤其是对于 Java 开发者来说，通常可以轻松地跟随代码。正如您在本章的第一个示例中所看到的，将 Kotlin
    支持添加到 Android 项目中非常简单。
- en: How to create an Android project with Kotlin
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Kotlin 创建 Android 项目
- en: Developing in Kotlin couldn't be easier! As you'll see from the simple step
    here, full Kotlin support is already built into the Android Studio IDE.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kotlin 中开发再简单不过了！正如您从下面的简单步骤中看到的，完整的 Kotlin 支持已经内置到 Android Studio IDE 中。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Kotlin support requires Android Studio 3.0 or later, so there are no additional
    requirements needed for this recipe or any of the recipes in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 支持需要 Android Studio 3.0 或更高版本，因此对于本食谱或本章中的任何食谱都没有额外的要求。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'It''s actually very simple to add Kotlin support to an Android project and
    you may have noticed the checkbox already. When creating a new project, Android
    Studio gives you an option. In fact, it''s so obvious, you may not even notice
    it anymore so we''ll start at the beginning and show a screenshot. To begin, launch
    Android Studio and click Start a new Android project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，将 Kotlin 支持添加到 Android 项目中非常简单，您可能已经注意到了复选框。在创建新项目时，Android Studio 会为您提供选项。实际上，它如此明显，您可能甚至没有注意到它，所以我们从开始处开始，展示一个截图。首先，启动
    Android Studio 并点击“开始新 Android 项目”：
- en: 'In the Create Android Project dialog, click the Include Kotlin support checkbox,
    as shown here:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“创建 Android 项目”对话框中，勾选“包含 Kotlin 支持”复选框，如图所示：
- en: '![](img/310b7c47-f7c4-4132-926a-b9d94b0f3211.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/310b7c47-f7c4-4132-926a-b9d94b0f3211.png)'
- en: That's it! Click through the remaining dialogs and you'll have your first Kotlin
    project for Android.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！点击剩余的对话框，您将拥有您的第一个 Android Kotlin 项目。
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The IDE already handles everything you need to do to start developing in Kotlin.
    Even the first Activity is now created using Kotlin code, as you can see when
    you open the `MainActivity.kt` file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: IDE 已经处理了您开始使用 Kotlin 开发所需的所有操作。甚至第一个 Activity 现在也是使用 Kotlin 代码创建的，正如您在打开 `MainActivity.kt`
    文件时可以看到的那样：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, this is very similar to the Java code. Java developers will
    likely be able to read and at least understand Kotlin code. A few items worth
    mentioning if this is your first look at Kotlin include that semicolons are not
    needed for line termination. Another point worth noting is that variable types
    comes after the variable name, separated with a colon. What about that question
    mark after `Bundle`? That signifies the variable may be null.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这与 Java 代码非常相似。Java 开发者可能会能够阅读并至少理解 Kotlin 代码。如果您是第一次接触 Kotlin，以下是一些值得注意的事项：分号不是行终止符所必需的。另一个值得注意的点是，变量类型位于变量名称之后，用冒号分隔。关于
    `Bundle` 后面的那个问号又是怎么回事呢？这表示变量可能为 null。
- en: There's more...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you already have an existing project and want to add Kotlin code, this can
    be done with the File | New | Kotlin File/Class menu option, as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个现有的项目并且想要添加 Kotlin 代码，可以通过 File | New | Kotlin File/Class 菜单选项来完成，如图所示：
- en: '![](img/e5cf5e6d-d8f8-4a41-9311-3307037bb866.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5cf5e6d-d8f8-4a41-9311-3307037bb866.png)'
- en: 'Android Studio (3.0 and above) give two options to easily convert Java code
    to Kotlin:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio（3.0 及以上版本）提供了两种轻松将 Java 代码转换为 Kotlin 的选项：
- en: Open a Java file and select the Code | Convert to Kotlin menu item.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个 Java 文件，并选择 Code | Convert to Kotlin 菜单项。
- en: 'In Android Studio, copy your Java code to the clipboard, then paste the code
    into your Kotlin file. Select Yes when you see the following dialog asking if
    you want to convert the code:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android Studio 中，将您的 Java 代码复制到剪贴板，然后将代码粘贴到您的 Kotlin 文件中。当您看到以下对话框询问是否要转换代码时，请选择是：
- en: '![](img/c1f7f0cc-32f6-4f3e-8547-9f9867352654.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1f7f0cc-32f6-4f3e-8547-9f9867352654.png)'
- en: See also
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关链接
- en: 'Here are some resources to get you started on Kotlin development:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些资源，可以帮助您开始 Kotlin 开发：
- en: The Kotlin website: [https://kotlinlang.org](https://kotlinlang.org)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin 网站：[https://kotlinlang.org](https://kotlinlang.org)
- en: The Kotlin GitHub repository: [https://github.com/jetbrains/kotlin](https://github.com/jetbrains/kotlin)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin GitHub 仓库：[https://github.com/jetbrains/kotlin](https://github.com/jetbrains/kotlin)
- en: Creating a Toast in Kotlin
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Kotlin 中创建 Toast
- en: 'Toasts are such a useful tool when developing an application, especially when
    learning a new language, that we''re going to revisit the Toast. This recipe will
    show you the Kotlin way of displaying the very familiar Toast, as shown here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Toast 是开发应用程序时非常有用的工具，尤其是在学习新语言时，因此我们将重新审视 Toast。这个配方将向您展示显示非常熟悉的 Toast 的 Kotlin
    方法，如图所示：
- en: '![](img/52064701-a463-442e-beb6-a8b15af15e51.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52064701-a463-442e-beb6-a8b15af15e51.png)'
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `KotlinToast`. Use the default Phone
    & Tablet options and select Empty Activity when prompted for the Activity Type. Remember
    to check the Include Kotlin support checkbox in the Create Android Project dialog.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `KotlinToast`。使用默认的 Phone & Tablet 选项，并在提示 Activity
    类型时选择 Empty Activity。请记住，在创建 Android 项目对话框中勾选 Include Kotlin support 复选框。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll keep this simple by using the default Toast layout and focus on the
    Kotlin code. Start by opening `activity_main.xml` and follow these steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用默认的 Toast 布局来保持简单，并专注于 Kotlin 代码。首先打开 `activity_main.xml` 并按照以下步骤操作：
- en: 'Replace the existing `<TextView>` element with a `<Button>` as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的 `<TextView>` 元素替换为 `<Button>`，如下所示：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, open `ActivityMain.kt` and add the following code to the existing `onCreate()`
    method:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `ActivityMain.kt` 并将以下代码添加到现有的 `onCreate()` 方法中：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the program on a device or emulator.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序。
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There''s really only two parts to showing the Toast: creating the event listener
    and calling the Toast itself. We create the event listener using `setOnClickListener`.
    It''s the same concept as in Java, just much cleaner code syntax. In the braces,
    we have code that will be called. In our example, it''s the Toast. This basically
    looks the same because it''s calling the exact same library, as you''ll see if
    you check the import statement:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 显示Toast实际上只有两个部分：创建事件监听器和调用Toast本身。我们使用`setOnClickListener`创建事件监听器。这与Java中的概念相同，只是代码语法更简洁。在大括号中，我们有将被调用的代码。在我们的例子中，它是Toast。这基本上看起来是一样的，因为它调用的是完全相同的库，正如你将在导入语句中看到的那样：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you've used a Toast in Java, or gone through the *Creating a Toast using
    a custom layout* recipe in [Chapter 8](3d708b9b-223b-493a-bf48-48fc306aa0a5.xhtml),
    *Alerts and Notifications*, then you'll notice this looks very similar. It is.
    But you'll also notice it's much simpler and cleaner code. This is one of the
    big appeals of Kotlin. What if you want to create a custom layout, like the earlier
    Java example? Basically, it's the same since the resources (the layout XML and
    drawables) are not Kotlin or Java specific; they are Android specific. So, use
    the same resources as the previous example.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前在Java中使用过Toast，或者已经通过[第8章](3d708b9b-223b-493a-bf48-48fc306aa0a5.xhtml)中的*使用自定义布局创建Toast*配方进行过操作，*警报和通知*，那么你会注意到这看起来非常相似。确实如此。但你也会注意到它要简单得多，代码也更干净。这是Kotlin的一个大吸引力。如果你想创建一个自定义布局，就像之前的Java示例一样？基本上，它们是相同的，因为资源（布局XML和可绘制资源）不是Kotlin或Java特定的；它们是Android特定的。所以，使用与之前示例相同的资源。
- en: See also
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '*Creating a Toast using a custom layout* recipe in [Chapter 8](3d708b9b-223b-493a-bf48-48fc306aa0a5.xhtml), Alerts
    and Notifications'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用自定义布局创建Toast*的配方在[第8章](3d708b9b-223b-493a-bf48-48fc306aa0a5.xhtml)，警报和通知'
- en: Runtime permission in Kotlin
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin中的运行时权限
- en: Even though the Runtime permission model was released back in Android 6.0 (API
    23), this topic still receives many queries. Since it's basically a requirement
    for all future apps, you'll likely need to implement this in Kotlin as well. Take
    a look at the previous recipe (see links below) for information on the APIs and
    this recipe for the Kotlin code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管运行时权限模型早在Android 6.0（API 23）时就已经发布，但这个话题仍然收到很多查询。由于这基本上是所有未来应用的基本要求，你很可能也需要在Kotlin中实现这一点。查看之前的配方（见以下链接）以获取有关API的信息，以及这个配方以获取Kotlin代码。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `KotlinRuntimePermission`.
    Use the default Phone & Tablet option, select Empty Activity when prompted for Activity
    Type, and remember to check the Include Kotlin support checkbox.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目并命名为`KotlinRuntimePermission`。使用默认的Phone & Tablet选项，当被提示选择Activity类型时，选择Empty
    Activity，并记得勾选Include Kotlin support复选框。
- en: The sample source code sets the minimum API to 23, but this is not required.
    If your `compileSdkVersion` is API 23 or above, the compiler will flag your code
    for the new security model.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 示例源代码将最小API设置为23，但这不是必需的。如果你的`compileSdkVersion`是API 23或更高，编译器将标记你的代码以使用新的安全模型。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We need to start by adding our required permission to the manifest, then we''ll
    add a button to call our check permission code. Open the Android Manifest and
    follow these steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先将所需的权限添加到清单中，然后我们将添加一个按钮来调用我们的检查权限代码。打开Android Manifest并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open `activity_main.xml` and replace the existing `TextView` with this button:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`并将现有的`TextView`替换为以下按钮：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open `MainActivity.kt` and add the following constant above (outside) the MainActivity
    class:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.kt`并在MainActivity类上方（外部）添加以下常量：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add this method for a permission check:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加此方法以进行权限检查：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add this method to request the permission:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加此方法以请求权限：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add this method to show the explanation dialog:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加此方法以显示解释对话框：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add this method to handle the button click:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加此方法以处理按钮点击：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Override `onRequestPermissionsResult()` as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下重写`onRequestPermissionsResult()`：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, you're ready to run the application on a device or emulator.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Using the new runtime permission model involves the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的运行时权限模型包括以下内容：
- en: Check to see whether you have the desired permissions
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你是否拥有所需的权限
- en: If not, check whether we should display the rationale (meaning the request was
    previously denied)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不是，检查我们是否应该显示理由（意味着请求之前已被拒绝）
- en: Request the permission; only the OS can display the permission request
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求权限；只有操作系统才能显示权限请求
- en: Handle the request response
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理请求响应
- en: 'Here are the corresponding methods:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相应的函数：
- en: '`ContextCompat.checkSelfPermission`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ContextCompat.checkSelfPermission`'
- en: '`ActivityCompat.requestPermissions`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityCompat.requestPermissions`'
- en: '`ActivityCompat.shouldShowRequestPermissionRationale`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityCompat.shouldShowRequestPermissionRationale`'
- en: '`onRequestPermissionsResult`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRequestPermissionsResult`'
- en: Even though you are requesting permissions at runtime, the desired permission
    must be listed in the Android Manifest. If the permission is not specified, the
    OS will automatically deny the request.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您在运行时请求权限，所需的权限也必须在AndroidManifest.xml中列出。如果未指定权限，操作系统将自动拒绝请求。
- en: See also
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: For the Java version, see the *The Android 6.0 Runtime Permission Model* recipe in
    [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml), Getting Your App Ready
    for the Play Store
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Java版本，请参阅[第15章](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml)中的*《Android 6.0
    运行时权限模型》*配方，在[为Play商店准备您的应用](Getting_Your_App_Ready_for_the_Play_Store)
