- en: Getting Started with Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create an Android project with Kotlin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Toast in Kotlin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime permission in Kotlin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin is probably the biggest change to come to Android development in the
    last few years, since the change from Eclipse to Android Studio anyway. Kotlin
    was announced by JetBrains in July 2011 and released as open source in February
    2012\. Version 1.0 was released in February 2016, with Google announcing first-class
    support for the language at Google I/O 2017\. Android Studio 3.0 came with full
    support for Kotlin already included (and is the minimum requirement for the following
    recipes.)
  prefs: []
  type: TYPE_NORMAL
- en: '**Why Kotlin?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'With so many existing languages already available, why did JetBrains create
    another? According to their own announcements, they were looking for an alternative
    to Java. Since over 70% of their existing code was already in Java, starting from
    scratch wasn''t an option. They wanted a modern language that was compatible with
    Java. After comparing the many options and finding nothing that met all their
    needs, they decided to create Kotlin. One interesting aspect of Kotlin is that
    it was created by developers using the language, and not academics. Here are some
    of the features Kotlin brings to Android development:'
  prefs: []
  type: TYPE_NORMAL
- en: Simpler, more concise code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full JVM support and can be used anywhere Java is used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full support included in the IDE, especially since JetBrains is the creator
    of both the Kotlin language and Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Safer code: Nullability built in to the language'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rising popularity: Many big companies are adopting Kotlin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modern language: Offers many features found in the latest language offerings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More enjoyable: Many surveys are finding Kotlin to have the highest satisfaction
    rating'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hopefully, these reasons are enough to at least take a look at Kotlin, especially
    since Java developers can usually follow the code without too much difficulty.
    As you'll see with the first recipe in this chapter, it's very easy to add Kotlin
    support to an Android project.
  prefs: []
  type: TYPE_NORMAL
- en: How to create an Android project with Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing in Kotlin couldn't be easier! As you'll see from the simple step
    here, full Kotlin support is already built into the Android Studio IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin support requires Android Studio 3.0 or later, so there are no additional
    requirements needed for this recipe or any of the recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s actually very simple to add Kotlin support to an Android project and
    you may have noticed the checkbox already. When creating a new project, Android
    Studio gives you an option. In fact, it''s so obvious, you may not even notice
    it anymore so we''ll start at the beginning and show a screenshot. To begin, launch
    Android Studio and click Start a new Android project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Create Android Project dialog, click the Include Kotlin support checkbox,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/310b7c47-f7c4-4132-926a-b9d94b0f3211.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it! Click through the remaining dialogs and you'll have your first Kotlin
    project for Android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The IDE already handles everything you need to do to start developing in Kotlin.
    Even the first Activity is now created using Kotlin code, as you can see when
    you open the `MainActivity.kt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this is very similar to the Java code. Java developers will
    likely be able to read and at least understand Kotlin code. A few items worth
    mentioning if this is your first look at Kotlin include that semicolons are not
    needed for line termination. Another point worth noting is that variable types
    comes after the variable name, separated with a colon. What about that question
    mark after `Bundle`? That signifies the variable may be null.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you already have an existing project and want to add Kotlin code, this can
    be done with the File | New | Kotlin File/Class menu option, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5cf5e6d-d8f8-4a41-9311-3307037bb866.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Android Studio (3.0 and above) give two options to easily convert Java code
    to Kotlin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Java file and select the Code | Convert to Kotlin menu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Android Studio, copy your Java code to the clipboard, then paste the code
    into your Kotlin file. Select Yes when you see the following dialog asking if
    you want to convert the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1f7f0cc-32f6-4f3e-8547-9f9867352654.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some resources to get you started on Kotlin development:'
  prefs: []
  type: TYPE_NORMAL
- en: The Kotlin website: [https://kotlinlang.org](https://kotlinlang.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kotlin GitHub repository: [https://github.com/jetbrains/kotlin](https://github.com/jetbrains/kotlin)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Toast in Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Toasts are such a useful tool when developing an application, especially when
    learning a new language, that we''re going to revisit the Toast. This recipe will
    show you the Kotlin way of displaying the very familiar Toast, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52064701-a463-442e-beb6-a8b15af15e51.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `KotlinToast`. Use the default Phone
    & Tablet options and select Empty Activity when prompted for the Activity Type. Remember
    to check the Include Kotlin support checkbox in the Create Android Project dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll keep this simple by using the default Toast layout and focus on the
    Kotlin code. Start by opening `activity_main.xml` and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the existing `<TextView>` element with a `<Button>` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `ActivityMain.kt` and add the following code to the existing `onCreate()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Run the program on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There''s really only two parts to showing the Toast: creating the event listener
    and calling the Toast itself. We create the event listener using `setOnClickListener`.
    It''s the same concept as in Java, just much cleaner code syntax. In the braces,
    we have code that will be called. In our example, it''s the Toast. This basically
    looks the same because it''s calling the exact same library, as you''ll see if
    you check the import statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you've used a Toast in Java, or gone through the *Creating a Toast using
    a custom layout* recipe in [Chapter 8](3d708b9b-223b-493a-bf48-48fc306aa0a5.xhtml),
    *Alerts and Notifications*, then you'll notice this looks very similar. It is.
    But you'll also notice it's much simpler and cleaner code. This is one of the
    big appeals of Kotlin. What if you want to create a custom layout, like the earlier
    Java example? Basically, it's the same since the resources (the layout XML and
    drawables) are not Kotlin or Java specific; they are Android specific. So, use
    the same resources as the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Creating a Toast using a custom layout* recipe in [Chapter 8](3d708b9b-223b-493a-bf48-48fc306aa0a5.xhtml), Alerts
    and Notifications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime permission in Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though the Runtime permission model was released back in Android 6.0 (API
    23), this topic still receives many queries. Since it's basically a requirement
    for all future apps, you'll likely need to implement this in Kotlin as well. Take
    a look at the previous recipe (see links below) for information on the APIs and
    this recipe for the Kotlin code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `KotlinRuntimePermission`.
    Use the default Phone & Tablet option, select Empty Activity when prompted for Activity
    Type, and remember to check the Include Kotlin support checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: The sample source code sets the minimum API to 23, but this is not required.
    If your `compileSdkVersion` is API 23 or above, the compiler will flag your code
    for the new security model.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to start by adding our required permission to the manifest, then we''ll
    add a button to call our check permission code. Open the Android Manifest and
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and replace the existing `TextView` with this button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `MainActivity.kt` and add the following constant above (outside) the MainActivity
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this method for a permission check:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this method to request the permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this method to show the explanation dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this method to handle the button click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Override `onRequestPermissionsResult()` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, you're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the new runtime permission model involves the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Check to see whether you have the desired permissions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If not, check whether we should display the rationale (meaning the request was
    previously denied)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request the permission; only the OS can display the permission request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handle the request response
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here are the corresponding methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ContextCompat.checkSelfPermission`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ActivityCompat.requestPermissions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ActivityCompat.shouldShowRequestPermissionRationale`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onRequestPermissionsResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though you are requesting permissions at runtime, the desired permission
    must be listed in the Android Manifest. If the permission is not specified, the
    OS will automatically deny the request.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the Java version, see the *The Android 6.0 Runtime Permission Model* recipe in
    [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml), Getting Your App Ready
    for the Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
