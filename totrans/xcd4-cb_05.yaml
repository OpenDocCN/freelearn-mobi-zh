- en: Chapter 5. Working with the Location Services and the MapKit Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the CoreLocation and MapKit frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple CoreLocation application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the current GPS location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and working with the MapView control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding overlay regions to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding annotation placeholders to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reversing geocode address information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the different map types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will be taking a closer look at how we can use the CoreLocation
    and MapKit frameworks to determine the location of the user. The MapKit framework
    is based on both the Google Earth and Google Maps data, as well as the APIs that
    provide developers with a simple mechanism of integrating detailed and interactive
    mapping capabilities into their own applications.
  prefs: []
  type: TYPE_NORMAL
- en: The core element of the MapKit framework is the `MKMapView` class. This class
    is a subclass of `UIView` that provides a canvas onto which map and/or satellite
    information is presented to the user. We will also learn how we can add placeholders
    directly onto the map and create annotations for these.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will learn how we can use the `CLGeoLocation` class to apply reverse
    geocoding of the map coordinates to display location information, as well as applying
    the different types of map views.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the CoreLocation and MapKit frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to include the CoreLocation and MapKit frameworks
    to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will learn how to create a new application and add the frameworks
    to our project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Xcode4/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Create a new Xcode project**, or go to **File** | **New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Single View Application** template from the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter in `CoreLocation` as the name for your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **iPhone** from under the **Devices** drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Storyboards** checkbox has not been selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Automatic Reference Counting** checkbox is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Include Unit Tests** checkbox has not been ticked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the location where you would like to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to continue and display the Xcode workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to add the CoreLocation framework to our project. This can
    be achieved by performing these simple steps outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **CoreLocation** project from the **Project Navigator** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select your project from under the **TARGETS** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Build Phases** tab and expand the **Link Binaries With Libraries**
    disclosure triangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** button and select the **CoreLocation.framework** from the
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Add** button to add the framework to your project as shown
    in the following screenshot:![How to do it...](img/3349_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 4 and 5 to add the `MapKit.framework` to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you cant find the framework you are looking for, there is also the added
    ability to search for this directly right from within the list of available frameworks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we learned how to add both the CoreLocation and MapKit frameworks
    to our project so that we can use these to determine our current location and
    handle geocoding information to add placeholders to the map.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building a simple CoreLocation application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple CoreLocation application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to build the user interface for our Core Location
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will start by building the components that will comprise
    of our user interface for our CoreLocation application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Select `ViewController.xib` file from the **Project Navigator** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Object Library**, select and drag a (**UIToolbar**) toolbar control,
    and add this to the top of the view and select the **Item** button located within
    our toolbar that we previously added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the value of **Title** to
    **Change Map**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from **Object Library**, select and drag a (**MKMapView**) map view control
    to the center of our **View Controller**, and adjust the size of the **Map View**
    section to fill the entire area of the screen:![How to do it...](img/3349_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the completed user interface with the added
    UIToolbar and button, as well as the `MapView` control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our next step is to create the `Outlet` and `property` events for the **Change
    Map** button and **MKMapView** control. Creating these will allow us to access
    the associated methods and control properties directly within our code. To create
    an `Outlet` event, follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Assistant Editor** by choosing **Navigate** | **Open in Assistant
    Editor**, or by pressing the *Option* + *Command* buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the `ViewController.h` interface file is displayed within the **Assistant
    Editor** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Change Map** (`UIBarButtonItem`) control, hold down the *Ctrl*
    key, and drag it into the `ViewController.h` interface file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to create the `IBOutlet` outlets, these will need to be created inside
    the curly braces under the `@interface` directive as these are not created by
    default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose **Outlet** from the **Connection** drop-down menu for the connection
    to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `changeMap` for the name of the **Outlet** event to create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Strong** from the **Storage** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 4 to 6 to create the `Outlet` property for the `MKMapView` control,
    using the name `mapView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have created the instance variable outlets for our controls, we
    need to create the associated actions for the `changeMap` button. Creating these
    actions allows an event to be fired when the button is pressed. To create an action,
    follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: With the `ViewController.h` interface file still displayed within the **Assistant
    Editor** window, select the **Change Map** (`UIBarButtonItem`) control, and hold
    down the *Ctrl* key and drag it into the `ViewController.h` interface file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Action** from the **Connection** drop-down list for the connection
    to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `changeMapType` for the **Name** of the method to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to make our application correctly display the map to our view, we will
    need to import the `<MapKit/MapKit.h>` interface header file so that we can utilize
    its methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `ViewController.h` interface file located within the `Classes` folder,
    and add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following code snippet shows the completed `ViewController.h` interface
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we started by building our user interface by adding a `UIToolbar`
    and `MKMapView` control to our view controller. We then created the necessary
    outlets and actions event methods that need to be executed when the `changeMapType`
    button is pressed. We then imported the `MapKit.h` interface files into our `ViewController.h`
    interface file so that we can access their class methods for the `MKMapView` class.
  prefs: []
  type: TYPE_NORMAL
- en: In our next recipe we will look at how we can use the `MKMapView` class to determine
    our current geographic GPS location using the `CLLocationManager` class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Determining the current GPS location* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Displaying and using maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* and *Creating outlets to Interface
    Builder objects* recipes in [Chapter 1](ch01.html "Chapter 1. Getting and Installing
    the iOS SDK Development Tools"), *Getting and Installing the iOS SDK Development
    Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the current GPS location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to determine the current GPS location of our
    iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will see how we can use the CoreLocation framework to determine
    our latitude and longitude GPS location and output this information within an
    `alertView` dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the **Project Navigator** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `ViewController.m` implementation file from the **Project Navigator**
    section, and add the following highlighted code statement underneath the `@implementation`
    directive statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidLoad` method as shown by the highlighted code sections
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `didUpdateToLocation:` method as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that once the program executes, core location will communicate
    with the iOS device to make a determination where you are located, and display
    this information within a `UIAlertview` dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we imported the `MapView.h` header file information for our `CoreLocation.h`
    interface file so that we can access its class methods. We then need to extend
    our class to include the class protocol for the `CLLocationManagerDelegate` so
    that we can access the protocol's respective methods. We then initialized our
    superclass's inherited members and then set the `foundLocation` to `NO` the first
    time round and set the view controller to be the `mapView` delegate so we can
    pass on the notifications whenever the map moves.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we instantiate the `locationManager` class and set its delegate property
    to our `mapView`, and set the `desiredAccuracy` property of the object of the
    `locationManager` class to `kCLLocationAccuracyBest`, which specifies the location
    and heading information provided by the `loctionManager` class should be as accurate
    as the iOS device's hardware can provide, and as a test, it would be better to
    test this on an actual iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we declare the `didUpdateToLocation` method to handle whenever the
    `CLLocationManger` class changes the current location of the iOS device. From
    here, we then obtain the current latitude and longitude coordinates and display
    this within an `UIAlertview` dialog, before finally setting the `foundLocation`
    variable to `YES`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `CLLocationManager` class, you can refer to the
    Apple Developer Documentation located at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We implemented the `locationManager:didFailWithError` class, which gets called,
    whenever the use of location services is unavailable or unable to retrieve a location
    straight away. We use the `error` property to determine the type of error that
    occurred and then call the `stopUpdatingLocation` method of the `locationManager`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows each of the valid error codes and their descriptions,
    as returned by the `locationManager:didFailWithError` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Core location error code | Location manager error description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `kCLErrorLocationUnknown` | This error tells you that the location manager
    was unable to obtain a location at the moment. |'
  prefs: []
  type: TYPE_TB
- en: '| `kCLErrorDenied` | This error lets you know that the user denied the access
    to the location service. |'
  prefs: []
  type: TYPE_TB
- en: '| `kCLErrorNetwork` | This error tells you that the network was unavailable
    or a network error occurred. |'
  prefs: []
  type: TYPE_TB
- en: '| `kCLErrorHeadingFailure` | This error tells you that the heading location
    travelled could not be determined. |'
  prefs: []
  type: TYPE_TB
- en: '| `kCLErrorRegionMonitoringDenied` | This error tells you that the user denied
    the access to the region monitoring service. |'
  prefs: []
  type: TYPE_TB
- en: '| `kCLErrorRegionMonitoringFailure` | This error tells you that a registered
    region could not be monitored. |'
  prefs: []
  type: TYPE_TB
- en: '| `kCLErrorRegionMonitoringSetupDelayed` | This error tells you that core location
    could not initialize the region monitoring service immediately. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the `didFailWithError` error codes of the core location
    class, you can refer to the Apple Developer Documentation located at [https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/CLLocationManagerDelegate/CLLocationManagerDelegate.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/CLLocationManagerDelegate/CLLocationManagerDelegate.html)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding and working with the MapView control* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reversing geocode address information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and working with the MapView control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to use the location simulator to provide you
    with the ability to test your location-based features in your application without
    leaving your desk.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will see how we can use the location simulator to allow you
    to select from preset locations and routes within the iOS Simulator and pick a
    custom latitude and longitude with accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `viewDidLoad` method as shown by the highlighted code sections
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that once the program executes, core location communicates with
    the iOS device to make a determination where you are located, and displays this
    using a blue flashing marker.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also choose to navigate to a different location using Xcode while the
    application is being run on the iOS device. To do this, follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Xcode debug console, click on the **Simulate Location** icon as shown
    in the following screenshot. This will display a list of available locations:![How
    to do it...](img/3349_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Hong Kong, China**, or a similar option from the list of displayed
    locations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The iOS device will then be updated to reflect the chosen location. You will
    need to zoom out and manually scroll to the location to see the change, as shown
    in the following screenshot:![How to do it...](img/3349_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we learned how we can set the `MapView` control to show our current
    location on the map by using the `setShowsUserLocation` property of the map view
    control, as well as how we can use Xcode to allow our iOS device to simulate the
    different locations, using the **Simulate Location** feature.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Determining the current GPS location* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding overlay regions to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding overlay regions to maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to create an overlay to mark an area on our
    map view control object. These overlay objects are essentially data objects that
    contain the geographic data needed to represent the map area. For example, overlays
    can take the form of common shapes such as rectangles and circles.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will see how we can use the `MKOverlayView` class and the
    `MKOverlay` protocol to allow us to represent both a point and an area on the
    map.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `overlayCurrentUserLocation` function as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `mapView:viewForOverlay:` method as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `locationManager:didUpdateToLocation:` method and enter in the following
    highlighted code sections as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice that once the program executes, core location communicates
    with the iOS device to determine where you are located and then zooms in and displays
    a circle showing the radius of the area to which we specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we created a function called `createOverlayArea` which created
    a circle with a 100 km. radius based on the current user location, and then created
    a title for this location using the title property of the `MKCircle` class and
    used the `addOverlay` method to overlay and add our circle to our `mapView` control.
  prefs: []
  type: TYPE_NORMAL
- en: In our next step, we used `MKCoordinateRegion` to create a 2 km. area span and
    then zoom in to the area allocated by the radius using the `setRegion` setter
    method. We then created the `mapView:viewForOverlay:` method which gets called
    whenever a object gets overlaid onto the map view control and fills the circle
    for the overlaid region using the `MKCircleView` class and then setting the look
    and feel of the circle, by setting the `strokeColor`, `lineWidth`, and `fillColor`
    properties of the circle. In our final section, we modified the `locationManager:didUpdateToLocation:`
    method to include a call to our `ceateOverlayArea` function.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `MKOverlayView` class, you can refer to the Apple
    Developer Documentation located at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKOverlayView_class/Reference/Reference.html](https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKOverlayView_class/Reference/Reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding annotation placeholders to the map* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reversing geocode address information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding annotation placeholders to the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to create our own custom class that will enable
    us to add annotations to our map view control.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will see how we can use the `MKAnnotation` and `MKAnnotationView`
    classes to enable us to apply a series of annotation pins based on the geographic
    latitude and longitude values to our `mapView` control.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **CoreLocation** group, choose **File** | **New** | **File…** or
    press *Command* + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Objective-C` class template from the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `MapViewAnnotation` as the name of the class to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have selected **NSObject** as the type of subclass to create
    from the **Subclass of** drop-down list:![How to do it…](img/3349_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed with the next step of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to save the file to the folder location
    specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to implement the functionality and methods used by this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `MapViewAnnotation.h` interface file from the **Project Navigator**
    section, and enter in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `MapViewAnnotation.m` implementation file from the **Project Navigator**
    section, and enter in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open the `ViewController.m` implementation file from the **Project Navigator**
    section, and enter in the highlighted code sections in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `plotGeographicalData` method as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the `mapView:viewForAnnotation:` method as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we created a new custom `MapViewAnnotation` class and then extend
    this class to make use of the `MKAnnotation` protocol so that we can access its
    associated class methods. Next, we created a method `initWithTitle:` within our
    `MapViewAnnotation.m` implementation file that will be used to store our header
    and coordinates for the pin placement.
  prefs: []
  type: TYPE_NORMAL
- en: In our next step, we modified our `ViewController.m` implementation file and
    created a new function called `plotGeographicalData` that is used to create a
    number of different geographic locations using `CLLocationCoordinate2DMake` to
    create the latitude and longitude values for each geographic location in the array.
  prefs: []
  type: TYPE_NORMAL
- en: We then pass the geographic locations to the `addAnnotation` method of the `MapViewAnnotation`
    class to add the annotation to the map. Finally, we create the `mapView:viewForAnnotation`
    method to place the annotation object onto the map by using our `MapViewAnnotation`
    class instance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `MKAnnotationView` class, you can refer to the
    Apple Developer Documentation located at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKAnnotationView_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKAnnotationView_Class/Reference/Reference.html)`#//apple_ref/occ/cl/MKAnnotationView`'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to ensure that the map annotations happen, we need to modify the `locationManager:didUpdateToLocation`
    method. This method is called after the iOS device has found the users' current
    location on the map or whenever the map location changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `locationManager:didUpdateToLocation:` method and enter in the following
    highlighted code sections as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `zoomToFitMapAnnotations` function as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the previous code snippet, the `zoomToFitMapAnnotations` method is used to
    create a scrollable area around the visible region that the user can move around
    in. This is accomplished by using the `MKPolygon` class to create a series of
    points around each of the annotations on the map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.![There's more…](img/3349_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `MKPolygon` class, you can refer to the Apple Developer
    Documentation located at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKPolygon_class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKPolygon_class/Reference/Reference.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding overlay regions to the map* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reversing geocode address information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reversing geocode address information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn about reverse geocoding address information into
    human readable information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will gain an understanding of the phrase reverse geocoding,
    and how this can be used to transform latitude and longitude information into
    human-recognizable address information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `viewDidLoad` method as shown by the highlighted code sections in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `getGeocodingInformation` method as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that once the program executes, the provided latitude and longitude
    information has been transformed into human recognizable address information.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we added a new method call, `getGeocodingInformation`, to our
    `viewDidLoad` method that will be responsible for displaying our geographical
    location information within an `UIAlertView` dialog window. We then create a new
    object variable `geoCoder` of the `CLGeoCoder` class and then pass a set of latitude
    and longitude values to the `CLLocation` class, which then gets passed to the
    `reverseGeocodeLocation` method of the `CLGeoCode` class to work out the geographic
    location details of the coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Once a determination has been made by the `reverseGeocodeLocation` method, the
    result is returned into an NSArray object `placemarks` that hold the actual data.
    Finally, we make a call to the `CLPlacemark` class to retrieve the location information
    using the `addressDictionary` of the `placemark` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table provides a brief description of some of the different types
    of information returned by the `CLPlacemark` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Placemark properties | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Name` | This property contains the name of the placemark. |'
  prefs: []
  type: TYPE_TB
- en: '| `Country` | This property is self-explanatory and simply stores the country''s
    name. |'
  prefs: []
  type: TYPE_TB
- en: '| `CountryCode` | This property provides you with the abbreviated country name.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Thoroughfare` | This contains the street address associated with the placemark.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Sublocality` | This property provides you with additional city-level information
    for the placemark. |'
  prefs: []
  type: TYPE_TB
- en: '| `SubAdministrativeArea` | This property provides you with additional information
    for the landmark. |'
  prefs: []
  type: TYPE_TB
- en: '| `ZIP` | This is typically the postal code for the placemark. |'
  prefs: []
  type: TYPE_TB
- en: In addition to these properties shown previously, the address dictionary provides
    you with a `FormattedAddressLines` entry that stores an array of preformatted
    strings for the address in question.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use these strings to display an address, for example: "Taman Batu Metropolitan,
    Jalan Damansara, 50470 Kuala Lumpur KL, Malaysia", the following code snippet
    shows you how this can be achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `CLPlacemark` object stores information relating to the placemark data for
    a given latitude and longitude and contains information such as the country, state,
    city, as well as the street address information that is associated with the specified
    coordinates. This class also includes points of interest and geographically related
    data. Placemarks are typically generated using the `CLGeocoder` object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `CLGeoCoderand CLPlacemark` class, you can refer
    to the Apple Developer Documentation located at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLGeocoder_class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLGeocoder_class/Reference/Reference.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLPlacemark_class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLPlacemark_class/Reference/Reference.html)`#//apple_ref/occ/cl/CLPlacemark`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Determining the current GPS location* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the different map types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to change between the different map views.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will start by implementing the method that will be responsible
    for handling changing of the different map views that the MapKit framework provides.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the **Project Navigator** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `changeMapType:` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the following `clickedButtonAtIndex:` method as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu, or alternatively pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we started by extending our interface file class so that we can
    include the protocol for our `UIActionSheetDelegate` so that we can gain access
    to the respective methods. We then declared and instantiated an `actionSheet`
    object that is based on the `UIActionSheet` class, and then initialized our `actionSheet`
    object to display the different map types to choose from. We then proceed to set
    the style for `actionSheet` using the `actionSheetStyle` property of the `UIActionSheet`
    class, and then display the `actionSheet` into the current view using the `showInView:self.view`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: In our next part, we declared a delegate method to determine the button that
    was pressed from the `actionSheet` object, using the `clickedButtonIndex` method
    of the `acionSheet` property. Finally, we check the value of the `buttonIndex`
    variable to determine the index of the button that was pressed. When using the
    `buttonIndex` variable, keep in mind that the starting value is always 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table provides a brief description of each of the different map
    views:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Map type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `MKMapTypeStandard` | This is the default map type to be displayed, if none
    is specified. This setting will display a normal map containing the street and
    road names. |'
  prefs: []
  type: TYPE_TB
- en: '| `MKMapTypeSatellite` | This type of map will display the satellite view information.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `MKMapTypeHybrid` | This type of map will show a combination of a satellite
    view with road and street information that is overlaid onto the map. |'
  prefs: []
  type: TYPE_TB
- en: The following screenshot shows the CoreLocation application running on an iOS
    device, showing the current location and the different geographic locations plotted
    to the map, as well as the selection of map types available when the **Map Type**
    button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3349_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `MapKit` class, you can refer to the Apple Developer
    Documentation located at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKMapView_Class/MKMapView/MKMapView.html](https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKMapView_Class/MKMapView/MKMapView.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding annotation placeholders to the map* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Determining the current GPS location* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
