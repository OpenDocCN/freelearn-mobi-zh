["```\nlet imgFilledStar = #imageL iteral(resourceName: \"filled-star\")\nlet imgHalfStar = #imageLiteral(resourceName: \"half-star\")\nlet imgEmptyStar = #imageLiteral(resourceName: \"empty-star\")\nlet shouldBecomeFirstResponder = true\nvar rating:CGFloat = 0.0\nvar totalStars = 5 \n```", "```\noverride init(frame: CGRect) {\n    super.init(frame: frame)\n}\nrequired init?(coder aDecoder: NSCoder) {\n    super.init(coder: aDecoder)\n}\noverride func setNeedsLayout() {\n    super.setNeedsLayout()\n    self.setNeedsLayout()\n}\n```", "```\nprivate extension RatingView {\n    func drawStar(with frame:CGRect, highlighted:Bool) {\n        let image = highlighted ? imgFilledStar :imgEmptyStar\n        draw(with: image, and: frame)\n    }\n\n    func drawHalfStar(with frame:CGRect) {\n        draw(with: imgHalfStar, and: frame)\n    }\n\n    func draw(with image:UIImage, and frame:CGRect) {\n        image.draw(in: frame)\n    }\n}\n```", "```\noverride func draw(_ rect: CGRect) {\n    let context = UIGraphicsGetCurrentContext()\n    context!.setFillColor( colorLiteral(red: 1, green: 1, blue: 1, alpha: 0).cgColor)\n    context!.fill(rect)\n\n    let availWidth = rect.size.width\n    let cellWidth = availWidth / CGFloat(totalStars)\n    let starSide = (cellWidth <= rect.size.height) ? cellWidth : rect.size.height\n\n    for index in 0...totalStars {\n        let value = cellWidth*CGFloat(index) + cellWidth/2\n        let center = CGPoint(x: value+1, y: rect.size.height/2)\n        let frame = CGRect(x: center.x - starSide/2, y: center.y - starSide/2, width: starSide, height: starSide)\n        let highlighted = (Float(index+1) <= ceilf(Float(self.rating)))\n\n        if highlighted && (CGFloat(index+1) > CGFloat(self.rating)) {\n            drawHalfStar(with: frame)\n        } else {\n            drawStar(with: frame, highlighted: highlighted)\n        }\n    }\n}\n```", "```\nimport MapKit\nThen, after imgMap, add the following outlet:\n@IBOutlet weak var ratingView: RatingView!\n```", "```\nprivate extension RestaurantDetailViewController {\n    func setupLabels() {\n        guard let restaurant = selectedRestaurant else { return }\n        if let name = restaurant.name {\n            lblName.text = name\n            title = name\n        }\n        if let cuisine = restaurant.subtitle { lblCuisine.text = cuisine }\n        if let address = restaurant.address {\n            lblAddress.text = address\n            lblHeaderAddress.text = address\n        }\n        lblTableDetails.text = \"Table for 7, tonight at 10:00 PM\"\n    }\n    func createMap() {\n        guard let annotation = selectedRestaurant, let long = annotation.longitude, let lat = annotation.latitude else { return }\n        let location = CLLocationCoordinate2D(\n            latitude: lat,\n            longitude: long\n        )\n        takeSnapShot(with: location)\n    }\n\n    func takeSnapShot(with location: CLLocationCoordinate2D) {\n        let mapSnapshotOptions = MKMapSnapshotOptions()\n        var loc = location\n        let polyLine = MKP  olyline(coordinates: &loc, count: 1)\n        let region = MKCoordinateRegionForMapRect(polyLine.boundingMapRect)\n        mapSnapshotOptions.region = region\n        mapSnapshotOptions.scale = UIScreen.main.scale\n        mapSnapshotOptions.size = CGSize(width: 340, height: 208)\n        mapSnapshotOptions.showsBuildings = true\n        mapSnapshotOptions.showsPointsOfInterest = true\n        let snapShotter = MKMapSnapshotter(options: mapSnapshotOptions)\n        snapShotter.start() { snapshot, error in\n            guard let snapshot = snapshot else {\n                return\n            }\n            UIGraphicsBeginImageContextWithOptions(mapSnapshotOptions.size, true, 0)\n            snapshot.image.draw(at: .zero)\n            let identifier = \"custompin\"\n            let annotation = MKPointAnnotation()\n            annotation.coordinate = location\n            let pinView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n            pinView.image = UIImage(named: \"custom-annotation\")!\n            let pinImage = pinView.image\n            var point = snapshot.point(for: location)\n            let rect = self.imgMap.bounds\n            if rect.contains(point) {\n                let pinCenterOffset = pinView.centerOffset\n                point.x -= pinView.bounds.size.width / 2\n                point.y -= pinView.bounds.size.height / 2\n                point.x += pinCenterOffset.x\n                point.y += pinCenterOffset.y\n                pinImage?.draw(at: point)\n            }\n\n            if let image = UIGraphicsGetImageFromCurrentImageContext() {\n                UIGraphicsEndImageContext()\n                DispatchQueue.main.async {\n                    self.imgMap.image = image\n                }\n            }\n        }\n    }\n}\n```", "```\nfunc createRating() {\n    ratingView.rating = 3.5\n}\n```", "```\noverride var canBecomeFirstResponder: Bool {\n    return shouldBecomeFirstResponder\n}\noverride func beginTracking(_ touch: UITouch, with event: UIEvent?) -> Bool {\n    if self.isEnabled {\n        super.beginTracking(touch, with: event)\n        if (shouldBecomeFirstResponder && self.isFirstResponder) {\n            becomeFirstResponder()\n        }\n        handle(with: touch)\n        return true\n    }\n    else { return false }\n}\n```", "```\nfunc handle(with touch: UITouch) {\n    let cellWidth = self.bounds.size.width / CGFloat(totalStars)\n    let location = touch.location(in: self)\n    var value = location.x / cellWidth\n\n    if (value + 0.5 < CGFloat(ceilf(Float(value)))) {\n        value = floor(value) + 0.5\n    }\n    else {\n        value = CGFloat(ceilf(Float(value)))\n    }\n\n    updateRating(with: value)\n}\n// Update Rating\nfunc updateRating(with value:CGFloat) {\n    if (self.rating != value && value >= 0 && value <= CGFloat(totalStars)) {\n        self.rating = value\n        setNeedsDisplay()\n    }\n}\n```", "```\nratingView.isEnabled = true\n```", "```\n@IBAction func unwindReviewCancel(segue:UIStoryboardSegue) {}\n```", "```\n@IBOutlet weak var ratingView: RatingView!\n@IBOutlet weak var tfTitle: UITextField!\n@IBOutlet weak var tfName: UITextField!\n@IBOutlet weak var tvReview: UITextView!\n```", "```\n@IBAction func onSaveTapped(_ sender: Any) {\n  print(ratingView.rating)\n  print(tfTitle.text as Any)\n  print(tfName.text as Any)\n  print(tvReview.text)\n  dismiss(animated: true, completion: nil)\n}\n```"]