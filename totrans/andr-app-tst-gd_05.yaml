- en: Chapter 5. Android Testing Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We built our application and a decent set of tests that we run to verify the
    basic aspect and behavior of the Temperature Converter application. Now it is
    time to provide different conditions to run these tests, other tests, or even
    run the application manually to understand what the user experience would be while
    using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating **Android Virtual Devices** (**AVD**) to provide different conditions
    and configurations for the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the different configurations we can specify while creating AVDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to run AVDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to detach an AVD from its window to create headless emulators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlocking the screen to be able to run all the tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating real-life network conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running `monkey` to generate events to send to the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Android Virtual Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the best opportunity of detecting problems related with the device where
    the application is running, you need the widest possible coverage of features
    and configurations.
  prefs: []
  type: TYPE_NORMAL
- en: While final and conclusive tests should always be run on real devices with the
    everyday increasing number of devices, it is virtually impossible that you will
    have one device of each to test your application. There are also device farms
    in the cloud to test on a variety of devices but its cost sometimes is above the
    average developer budget. Hopefully, Android provides a way of simulating, more
    or less verbatim, a great variety of features and configuration just from the
    convenience of the emulator and AVD configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the examples in this chapter are run from a Ubuntu 10.04 (Lucid Lynx) 64bit
    using **Android SDK and AVD Manager** Revision 10 and **Android SDK** with platform
    2.3 (API 9) installed.
  prefs: []
  type: TYPE_NORMAL
- en: To create AVD you use `android` from the command line or even from inside Eclipse
    using **Window | Android SDK and AVD Manager** or its shortcut icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the command you access the **Android SDK and AVD Manager** where you
    press the **New..**. button to create a new AVD, and this dialog box is presented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Android Virtual Devices](img/3500_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you press **Create AVD** you finish the creation of the AVD using the default
    values. However if you need to support different configurations, you can specify
    different hardware properties by using the **New..**. button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties that can be set are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Camera support | boolean | Whether the device has a camera or not. |'
  prefs: []
  type: TYPE_TB
- en: '| Cache partition size | integer | The size of the cache partition. |'
  prefs: []
  type: TYPE_TB
- en: '| SD Card support | boolean | Whether the device supports insertion and removal
    of virtual SD Cards. |'
  prefs: []
  type: TYPE_TB
- en: '| Cache partition support | boolean | Whether the cache partition is supported.
    Usually this partition is mounted in `/cache`. |'
  prefs: []
  type: TYPE_TB
- en: '| Keyboard support | boolean | Whether the device has a physical QWERTY keyboard.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Audio playback support | boolean | Whether the device can play audio |'
  prefs: []
  type: TYPE_TB
- en: '| Audio recording support | boolean | Whether the device can record audio.
    |'
  prefs: []
  type: TYPE_TB
- en: '| DPAD support | boolean | Whether the device has DPAD keys. |'
  prefs: []
  type: TYPE_TB
- en: '| Maximum vertical camera pixels | integer | The maximum vertical dimension
    in pixels of the virtual camera. |'
  prefs: []
  type: TYPE_TB
- en: '| Accelerometer | boolean | Whether the device has an accelerometer. |'
  prefs: []
  type: TYPE_TB
- en: '| GPS support | boolean | Whether the device has a GPS. |'
  prefs: []
  type: TYPE_TB
- en: '| Device RAM size | integer | The amount of physical RAM on the device. This
    is expressed in megabytes. |'
  prefs: []
  type: TYPE_TB
- en: '| Touch-screen support | boolean | Whether there is a touch screen on the device.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Battery support | boolean | Whether the device can run on battery. |'
  prefs: []
  type: TYPE_TB
- en: '| GSM modem support | boolean | Whether there is a GSM modem in the device.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Track-ball support | boolean | Whether there is a trackball on the device.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Maximum horizontal camera pixels | integer | The maximum horizontal dimension
    in pixels of the virtual camera. |'
  prefs: []
  type: TYPE_TB
- en: 'After pressing **Start..**. to start the AVD you can select other properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Android Virtual Devices](img/3500_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting the scale is also very useful to test your application in a window that
    resembles the size of a real device. It is a very common mistake to test your
    application in an AVD with a window size that is at least twice the size of a
    real device, and using a mouse pointer believing that everything is fine, to later
    realize on a physical device with a screen of 5 or 6 inches that some items on
    the UI are impossible to touch with your finger.
  prefs: []
  type: TYPE_NORMAL
- en: To scale the AVD screen you should also set the **Monitor dpi** to a value that
    corresponds to the monitor you are using.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it is also helpful to test your application under the same conditions
    repeatedly. To be able to test under the same conditions again and again, it is
    sometimes helpful to delete all the information that was entered in previous sessions.
    If this is the case, check **Wipe user data** to start afresh every time.
  prefs: []
  type: TYPE_NORMAL
- en: Running AVDs from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wouldn't it be nice if we could run different AVDs from the command line and
    perhaps automate the way we run our tests or script them?
  prefs: []
  type: TYPE_NORMAL
- en: By freeing the AVD from its windows, open a whole new world of automation and
    scripting possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Well, let's explore these alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: Headless emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A headless emulator (its window is not displayed) comes in very handy when we
    run automated tests and nobody is looking at the window, or the interaction between
    the test runner and the application is so fast that we hardly see anything.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, it is also worth mentioning that sometimes you can't understand why
    some tests fail until you see the interaction on the screen, so use both alternatives
    with a bit of judgment.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that we may have noticed running AVDs is that their communication
    ports are assigned at runtime, incrementing the last used port by 2 and starting
    with 5554\. This is used to name the emulator and set its serial number, for example,
    the emulator using port 5554 becomes `emulator-5554`. This is very useful when
    we run AVDs during the development process because we don't have to pay attention
    to port assignment. But it can be very confusing and difficult to track which
    test runs on which emulator if we are running more than one simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: In those cases, we will be assigning known ports to the communication ports
    to keep the specific AVD under our control.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, when we are running tests on more than one emulator at the same time,
    not only do we want to detach the window, but also avoid sound output. We will
    add options for this as well:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The command line to launch the test AVD we just created would be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The port must be an integer between 5554 and 5584:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This shows the device in the device list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to install the application and the tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we can use the specified serial number to run the tests on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Disabling the keyguard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can see the tests being run with no intervention and not requiring access
    to the emulator GUI.
  prefs: []
  type: TYPE_NORMAL
- en: But sometimes you may receive some errors for tests that are not failing if
    you run in a more standard approach, like in a standard emulator launched from
    Eclipse. In such cases one of the reasons is that the emulator may be locked at
    the first screen and we need to unlock it to be able to run tests involving the
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'To unlock the screen you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The lock screen can also be disabled programmatically; however this has the
    disadvantage of including testing-related code in your application. This code
    should be removed or disabled once the application is ready to ship.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, the following permission should be added to the manifest file (`AndroidManifest.xml`),
    and then disable the screen lock in your application under test.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the permission, add this element to the manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Then in the `Activity` under test you should add the following code, preferably
    in `onResume():`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That is, get the `KeyguardManager`, then obtain the `KeyguardLock` specifying
    a tag, customize the package name to be able to debug who is disabling the keyguard.
  prefs: []
  type: TYPE_NORMAL
- en: Then disable the keyguard from showing using `disableKeyguard()`. If the keyguard
    is currently showing, it is hidden. The keyguard will be prevented from showing
    again until `reenableKeyguard()` is called.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On certain occasions you also need to clean up services and processes started
    after running some tests to prevent the results of the latter from being influenced
    by the ending conditions of the previous tests. In these cases, it is always better
    to start from a known condition freeing all the used memory, stopping services,
    reloading resources, and restarting processes, which is achievable by warm-booting
    the emulator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command line opens the emulator shell for our emulator and runs the stop
    and start commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The evolution of these commands can be monitored using the `logcat` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see messages like these:'
  prefs: []
  type: TYPE_NORMAL
- en: '**D/AndroidRuntime( 241):**'
  prefs: []
  type: TYPE_NORMAL
- en: '**D/AndroidRuntime( 241): >>>>>>>>>>>>>> AndroidRuntime START <<<<<<<<<<<<<<**'
  prefs: []
  type: TYPE_NORMAL
- en: '**D/AndroidRuntime( 241): CheckJNI is ON**'
  prefs: []
  type: TYPE_NORMAL
- en: '**D/AndroidRuntime( 241): --- registering native functions ---**'
  prefs: []
  type: TYPE_NORMAL
- en: '**I/SamplingProfilerIntegration( 241): Profiler is disabled**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**I/Zygote ( 241): Preloading classes..**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**D/dalvikvm( 241): GC_EXPLICIT freed 816 objects / 47208 bytes in 7ms**'
  prefs: []
  type: TYPE_NORMAL
- en: '**I/ServiceManager( 28): service ''connectivity'' died**'
  prefs: []
  type: TYPE_NORMAL
- en: '**I/ServiceManager( 28): service ''throttle'' died**'
  prefs: []
  type: TYPE_NORMAL
- en: '**I/ServiceManager( 28): service ''accessibility'' died**'
  prefs: []
  type: TYPE_NORMAL
- en: '**…**'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This warm boot doesn't work well on Android 2.2 Froyo emulator but works perfectly
    on Android devices. A bug has been reported and you can follow its evolution at
    [http://code.google.com/p/android/issues/detail?id=9814](http://code.google.com/p/android/issues/detail?id=9814).
  prefs: []
  type: TYPE_NORMAL
- en: Terminating the emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we have finished working with one of the headless emulator instances,
    we started using the command mentioned before. We use the following command line
    to kill it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will stop the emulator and free the used resources and terminate the emulator
    process on the host computer.
  prefs: []
  type: TYPE_NORMAL
- en: Additional emulator configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes what we need to test is outside the reach of the options that can
    be set when the AVD is created or configured.
  prefs: []
  type: TYPE_NORMAL
- en: One of the cases could be the need to test our application under different locales.
    Let's say we want to test our application on a Japanese phone—an emulator with
    the language and country set to Japanese and Japan respectively.
  prefs: []
  type: TYPE_NORMAL
- en: We have the ability to pass these properties in the emulator command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-prop` command line option allows us to set any of the properties we could
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that our settings were successful, we can use the `getprop` command
    to verify them, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**ja**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**JP**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to clear all the user data after playing with the persistent settings,
    you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: And the emulator will start afresh.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating network conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is extremely important to test under different network conditions but it
    is neglected more often than not. This would lead to misconceptions and to believe
    that the application behaves differently because we use the host network which
    presents a different speed and latency.
  prefs: []
  type: TYPE_NORMAL
- en: The Android emulator supports network throttling, for example to support slower
    network speeds and higher connection latencies. This can be done in the emulator
    command line using the options `-netspeed <speed>` and `-netdelay <delay>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete list of supporting options is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For network speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Description** | **Speeds [kbits/s]** |'
  prefs: []
  type: TYPE_TB
- en: '| `-netspeed gsm` | GSM/CSD | up: 14.4, down: 14.4 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netspeed hscsd` | HSCSD | up: 14.4, down: 43.2 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netspeed gprs` | GPRS | up: 40.0, down: 80.0 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netspeed edge` | EDGE/EGPRS | up: 118.4, down: 236.8 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netspeed umts` | UMTS/3G | up: 128.0, down: 1920.0 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netspeed hsdpa` | HSDPA | up: 348.0, down: 14400.0 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netspeed full` | no limit | up: 0.0, down: 0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netspeed <num>` | select both upload and download speed | up: as specified,
    down: as specified |'
  prefs: []
  type: TYPE_TB
- en: '| `-netspeed <up>:<down>` | select individual up and down speed | up: as specified,
    down: as specified |'
  prefs: []
  type: TYPE_TB
- en: 'For latency:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description | Delay [msec] |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-netdelay gprs` | GPRS | min 150, max 550 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netdelay edge` | EDGE/EGPRS | min 80, max 400 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netdelay umts` | UMTS/3G | min 35, max 200 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netdelay none` | no latency | min 0, max 0 |'
  prefs: []
  type: TYPE_TB
- en: '| `-netdelay <num>` | select exact latency | latency as specified |'
  prefs: []
  type: TYPE_TB
- en: '| `-netdelay <min>:<max>` | select min and max latencies | minimum and maximum
    latencies as specified |'
  prefs: []
  type: TYPE_TB
- en: 'The emulator, if values are not specified, uses the following default values:'
  prefs: []
  type: TYPE_NORMAL
- en: Default network speed is 'full'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default network latency is 'none'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is an example of an emulator using these options to select the GSM network
    speed of 14.4 kbits/sec and a GPRS latency of 150 to 500 msec.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the emulator is running, you can verify these network settings or change
    them interactively using the Android console using a TELNET client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Trying ::1..**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trying 127.0.0.1..**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connected to localhost**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Escape character is ''^]''**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android Console: type ''help'' for a list of commands**'
  prefs: []
  type: TYPE_NORMAL
- en: '**OK**'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we are connected we can type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Current network status:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**download speed: 14400 bits/s (1.8 KB/s)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**upload speed: 14400 bits/s (1.8 KB/s)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**minimum latency: 150 ms**'
  prefs: []
  type: TYPE_NORMAL
- en: '**maximum latency: 550 ms**'
  prefs: []
  type: TYPE_NORMAL
- en: '**OK**'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the emulator to test applications using network services either
    manually or in an automated way.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases this not only involves throttling the network speed but also changing
    the state of the GPRS connection to investigate how the application behaves and
    copes with these situations. To change this status we can also use the Android
    console in a running emulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example to unregister the emulator from the network we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Trying ::1..**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trying 127.0.0.1..**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connected to localhost**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Escape character is ''^]''**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android Console: type ''help'' for a list of commands**'
  prefs: []
  type: TYPE_NORMAL
- en: '**OK**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next to receiving the **OK** subprompt, we can set the data network mode as
    unregistered by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**OK**'
  prefs: []
  type: TYPE_NORMAL
- en: '**quit**'
  prefs: []
  type: TYPE_NORMAL
- en: 'After testing the application under this condition you can return to a connected
    state by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**OK**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify the status you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**OK**'
  prefs: []
  type: TYPE_NORMAL
- en: Additional qemu options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may know that the Android emulator is based on an Open Source project named
    Qemu ([http://qemu.org](http://qemu.org)).
  prefs: []
  type: TYPE_NORMAL
- en: Qemu is a generic emulator and virtualizer. Android uses its emulator capabilities
    to run an OS that is made for a different architecture on a different machine
    as your PC or Mac. It uses dynamic translation achieving very good performance,
    so good that to resemble real Android devices the emulation is throttled in some
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this you can add some qemu-specific options when you run the emulator.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we may want to open the qemu console which is accessible via VNC
    [Virtual Network Computing], another Open Source project providing remote frame-buffer
    capabilities ([http://en.wikipedia.org/wiki/Virtual_Network_Computing](http://en.wikipedia.org/wiki/Virtual_Network_Computing)).
    In this console, we can issue some qemu-specific commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, let''s add the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: All the options following `-qemu` are passed verbatim to qemu. In this case
    we pass `-vnc :2`, to open the virtual display 2, which is at the port 5902 as
    VNC starts counting from 5900.
  prefs: []
  type: TYPE_NORMAL
- en: Using some VNC client, like Vinagre—Remote Desktop Viewer, which is provided
    under the GNOME desktop in most of the distributions we can open the connection
    to the console. Vinagre can be launched from the GNOME desktop by **Applications
    | Internet | Remote Desktop Viewer**.
  prefs: []
  type: TYPE_NORMAL
- en: In Microsoft Windows RealVNC can be used as the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we should open the connection to the VNC server in qemu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Additional qemu options](img/3500_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will then be presented with the qemu console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Additional qemu options](img/3500_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The list of internal commands can be obtained by entering the following command
    on the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The analysis of these commands is outside the scope of this book but you can
    find some information online on the Qemu website.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Latest versions of the emulator, starting with Android 2.2 (Froyo), have a
    bug that prevents qemu options from being specified in the command line (even
    the help option (`-qemu -h`) is not working), even though they are listed in the
    emulator help (`emulator -help`) as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-qemu args... pass arguments to qemu`'
  prefs: []
  type: TYPE_NORMAL
- en: '`-qemu -h display qemu help`'
  prefs: []
  type: TYPE_NORMAL
- en: Running monkey
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may know about the infinite monkey theorem. This theorem states that a monkey
    hitting keys at random on a typewriter keyboard for an infinite amount of time
    will almost surely type a given text, such as the complete works of William Shakespeare.
  prefs: []
  type: TYPE_NORMAL
- en: The Android version of this theorem states that a monkey producing random touches
    on a device could crash your application in, well... much less than an infinite
    amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: In this line, Android features a monkey application ([http://developer.android.com/guide/developing/tools/monkey.html](http://developer.android.com/guide/developing/tools/monkey.html))
    that would generate the random events instead of a real monkey.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to run monkey against our application to generate random events
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And you will be receiving this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Events injected: 1000**'
  prefs: []
  type: TYPE_NORMAL
- en: '**:Dropped: keys=0 pointers=0 trackballs=0 flips=0**'
  prefs: []
  type: TYPE_NORMAL
- en: '**## Network stats: elapsed time=100914ms (0ms mobile, 0ms wifi, 100914ms not
    connected)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**// Monkey finished**'
  prefs: []
  type: TYPE_NORMAL
- en: '**This displays the details of the events injected through monkey**.'
  prefs: []
  type: TYPE_NORMAL
- en: The monkey will send events only to the specified package (`-p`), in this case
    `com.example.aatg.tc`, in a very verbose manner (`-v -v`). The count of events
    sent will be 1000.
  prefs: []
  type: TYPE_NORMAL
- en: Client-server monkey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is another way of running monkey. It also presents a client-server model
    that ultimately allows for the creation of scripts controlling what events are
    sent and not relying only on random generation.
  prefs: []
  type: TYPE_NORMAL
- en: Usually the port used by monkey is 1080 but you can use another one if it better
    suits your preferences.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to redirect the emulator port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to send events. To do it manually we can use a TELNET client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Trying ::1..**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trying 127.0.0.1..**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connected to localhost**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Escape character is ''^]''**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the connection is established we can type the specific monkey command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**OK**'
  prefs: []
  type: TYPE_NORMAL
- en: To finish this exit the telnet command.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we need to exercise the application repeatedly, it is much more convenient
    to create a script with the commands we want to send. A monkey script could look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The events and its parameters are defined here.
  prefs: []
  type: TYPE_NORMAL
- en: 'After having started the Temperature Converter application we can run this
    script to exercise the user interface. To start the application you can use the
    emulator window and click on its launcher icon or use the command line, which
    is the only alternative if the emulator is headless, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This is informed in the log by this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting: Intent { cmp=com.example.aatg.tc/.TemperatureConverterActivity
    }**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the application has started you can send the events using the script and
    the `netcat` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This will send the events contained in the script file to the emulator. These
    are the following events:'
  prefs: []
  type: TYPE_NORMAL
- en: touch and select the Celsius field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type 123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: touch and select the Fahrenheit field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: delete its content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type -460.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this manner simple scripts consisting of touch events and key presses can
    be created.
  prefs: []
  type: TYPE_NORMAL
- en: Test scripting with monkeyrunner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The possibilities of monkey are fairly limited and the lack of flow control
    restricts its use to very simple cases.
  prefs: []
  type: TYPE_NORMAL
- en: To circumvent these limitations a new project was created, named monkeyrunner
    ([http://developer.android.com/guide/developing/tools/monkeyrunner_concepts.html](http://developer.android.com/guide/developing/tools/monkeyrunner_concepts.html)).
    Notwithstanding that the name is almost the same and leads to not a small amount
    of confusion, they are not related in any way.
  prefs: []
  type: TYPE_NORMAL
- en: Monkeyrunner, which is already included in the latest versions of the Android
    SDK, is in its initial stages and nowadays its use is quite limited but its future
    could be bright. It is a tool providing an API for writing scripts that externally
    control an Android device or emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Monkeyrunner is built on top of Jython ([http://www.jython.org/](http://www.jython.org/)),
    a version of Python ([http://www.python.org/](http://www.python.org/)) programming
    language which is designed to run on the Java(tm) Platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to its documentation, monkeyrunner tool provides these unique features
    for Android testing. These are just the highlights of the complete list of features,
    examples and reference documentation that can be obtained from the monkeyrunner
    home page ([http://developer.android.com/guide/developing/tools/monkeyrunner_concepts.html](http://developer.android.com/guide/developing/tools/monkeyrunner_concepts.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multiple device control:** The `monkeyrunner` API can apply one or more test
    suites across multiple devices or emulators. You can physically attach all the
    devices or start up all the emulators (or both) at once, connect to each one in
    turn programmatically, and then run one or more tests. You can also start up an
    emulator configuration programmatically, run one or more tests, and then shut
    down the emulator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functional testing:** `monkeyrunner` can run an automated start-to-finish
    test of an Android application. You provide input values with keystrokes or touch
    events, and view the results as screenshots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regression testing:** `monkeyrunner` can test application stability by running
    an application and comparing its output screenshots to a set of screenshots that
    are known to be correct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible automation:** Since `monkeyrunner` is an API toolkit, you can
    develop an entire system of Python-based modules and programs for controlling
    Android devices. Besides using the `monkeyrunner` API itself, you can use the
    standard Python OS and subprocess modules to call Android tools such as Android
    Debug Bridge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also add your own classes to the `monkeyrunner` API. This is described
    in more detail in the online documentation under Extending monkeyrunner with plugins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting test screenshots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, one of the most evident uses of monkeyrunner is getting screenshots
    of the application under test to be further analyzed or compared.
  prefs: []
  type: TYPE_NORMAL
- en: 'These screenshots can be obtained with the help of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing the needed modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the connection with the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking for errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting the `TemperatureConverter` activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding some delay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Typing '123'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding some delay to allow for the events to be processed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtaining the screenshots and saving it to a file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pressing **BACK** to exit the Activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the code for the script needed to perform the above mentioned
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Once this script runs, you will find the screenshot of `TemperatureConverter`
    in `/tmp/device.png`.
  prefs: []
  type: TYPE_NORMAL
- en: Record and playback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need something simpler probably there is no need to manually create these
    scripts. To simplify the process, the script `monkey_recorder.py`, which is included
    in the Android source repository in the sdk project ([http://android.git.kernel.org/?p=platform/sdk.git;a=summary](http://android.git.kernel.org/?p=platform/sdk.git;a=summary)),
    can be used to record event descriptions that are later interpreted by another
    script called `monkey_playback.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `monkey_recorder.py` from the command line and you will be presented with
    this UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Record and playback](img/3500_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This interface has a toolbar with buttons to insert different commands in the
    recorded script:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Button | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Wait** | How many seconds to wait. This number is requested by a dialog
    box. |'
  prefs: []
  type: TYPE_TB
- en: '| **Press a Button** | Sends a MENU, HOME, or SEARCH button. Press, Down, or
    Up event. |'
  prefs: []
  type: TYPE_TB
- en: '| **Type Something** | Sends a string. |'
  prefs: []
  type: TYPE_TB
- en: '| **Fling** | Sends a fling event in the specified direction, distance, and
    number of steps. |'
  prefs: []
  type: TYPE_TB
- en: '| **Export Actions** | Saves the script. |'
  prefs: []
  type: TYPE_TB
- en: '| **Refresh Display** | Refreshes the copy of the screenshot that is displayed.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Once the script is completed, save it, let''s say as `script.mr` and then you
    can re-run it by using this command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now all the events will be replayed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we covered all the alternatives we have to expose our application
    and its tests to a wide range of conditions and configurations, ranging from different
    screen sizes, the availability of devices such as cameras or keyboards, to simulating
    real life network conditions to detect problems in our application.
  prefs: []
  type: TYPE_NORMAL
- en: We also analyzed all of the options we have to be able to control emulators
    remotely when they are detached from its windows. This prepares the foundation
    for Continuous Integration that we will be visiting in [Chapter 8](ch08.html "Chapter 8. Continuous
    Integration"), *Continuous Integration*, and relies on the ability to automatically
    run all the test suites and having the ability to configure, start, and stop the
    emulator will be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: At the end, some scripting alternatives were introduced and examples to get
    you started were provided.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will introduce Behavior Driven Development—a technique that
    makes use of a common vocabulary to express the tests permitting the inclusion
    of business people in the software development project.
  prefs: []
  type: TYPE_NORMAL
