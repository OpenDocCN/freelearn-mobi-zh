- en: Creating Sprites and Interactive Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have learned almost everything about the basics that we need to create various
    components in Android, so we can now move on to do some more exciting stuff. Now,
    at this point, we will start working on a proper 2D game. It will be a small 2D
    side scroller game like Mario. However, before we do that, let''s first talk about
    games as a development concept. In order to understand more about games, you will
    need to understand a bit of **Game Theory**. So, before we proceed with creating
    images and backgrounds on screen, let''s dive into some game theory. Here are
    a list of topics we will be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Game Theory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating images on screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a continuous scrolling background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with the first one.
  prefs: []
  type: TYPE_NORMAL
- en: Game Theory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you observe a game carefully in its source code level, you will observe
    that a game is just a set of illusions to create certain effects and display them
    on screen. Perhaps, the best example of this can be the game that we are about
    to develop. In order to make your character move ahead, you can do either of two
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the character move ahead
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the background move behind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at this in a bit more detail. The preceding two points can
    be achieved with the help of some illusions; let's understand how.
  prefs: []
  type: TYPE_NORMAL
- en: Illusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Either of the two things mentioned in the preceding section will give you an
    illusion that the character is moving in a certain direction. Also, if you remember Mario
    properly, then you will notice that the clouds and grasses are one and the same,
    only their colors were changed. This was because of the memory limitations of
    the console platform at the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_02-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Game developers use many such *tricks* in order to get their game running. Of
    course, in today's times, we don't have to worry much about memory limitations
    because our mobile device has the capability of the Apollo 11 rocket, which landed
    on the moon. Now, keeping in mind the mentioned two scenarios; we will use one
    of them in our game to make our character move.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have to understand that every game is a loop of activities. Unlike
    an app, you will need to draw your game resources at every single frame. The illusion
    of moving or any other effect will be stronger the more frames per second the
    mobile device can draw them. This concept is called as **Frames Per Second** (**FPS**). It''s
    almost similar to that of the concept of old films where a huge film used to be
    projected on the screen by rolling per frame. Take a look at the following screenshot to
    understand this concept better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Sprite sheet of a game character
  prefs: []
  type: TYPE_NORMAL
- en: You must have been wondering since the last chapter what a sprite means, if
    not the popular cold drink. As you can see in the preceding screenshot, a sprite
    sheet is simply an image consisting of multiple images within themselves in order
    to create an animation, and thereby a sprite is simply an image. If we want to
    make our character run, we will simply read the file `Run_000` and play it all
    the way sequentially through to `Run_009`, which will make it appear as though
    the character is running. We will take a look at this in [*Chapter 5*](517d0010-d72f-4ccc-9f45-365f6918e87f.xhtml),
    *Adding Animation to Your Game*, which we will follow through.
  prefs: []
  type: TYPE_NORMAL
- en: A majority of things that you will be working with when making a game would
    be based on manipulating your movements. So, you will need to be clear about your
    coordinates system because it will come in handy—be it for firing a bullet out
    of a gun, character movement, or simply turning around to look here and there--all
    of it is based on the simple component of movement.
  prefs: []
  type: TYPE_NORMAL
- en: Game loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In its core, every game is basically just a loop of events. It is a set up
    to give calls to various functions and code blocks to execute in order to have
    draw calls on your screen, and thereby making the game playable. Mostly, your
    game comprises three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Draw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing the game means to set an entry point to your game through which
    the other two parts can be called. Your game begins here and is called just once.
  prefs: []
  type: TYPE_NORMAL
- en: Once your game is initialized, you need to start giving calls to your events
    that can be managed through your `update` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `draw` function is responsible for drawing all your image data on the screen. Everything
    you see on the screen including your backgrounds, images, or even your GUI is
    the responsibility of the `draw` method.
  prefs: []
  type: TYPE_NORMAL
- en: To say the least, your game loop is the heart of your game. This is just a basic
    overview of the game loop, and there is much more complexity you can add to it.
    However, for now, this much information is sufficient for you to get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image perfectly illustrates what a game loop is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Source: [https://gamedevelopment.tutsplus.com/articles/gamedev-glossary-what-is-the-game-loop--gamedev-2469](https://gamedevelopment.tutsplus.com/articles/gamedev-glossary-what-is-the-game-loop--gamedev-2469)
  prefs: []
  type: TYPE_NORMAL
- en: Game Design Document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before starting a game, it is essential to create a **Game Design Document
    (GDD)**. This document serves as a groundwork for the game you will be making.
    In all, 99% of the time when we start making a game, we lose track of the features
    planned for it and deviate from the core game experience. So, it is always recommended
    to have a GDD in place in order to keep focus. A GDD consists of the following
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: Gameplay mechanics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Story (if any)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Level design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sound and music
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI planning and game controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can read more about the Game Design Document by navigating to the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Game_design_document](https://en.wikipedia.org/wiki/Game_design_document)'
  prefs: []
  type: TYPE_NORMAL
- en: Prototyping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When making a game, we need to test it simultaneously. A game is one of the
    most complex pieces of software, and if we mess up on one part there is a chance
    that it might break the entire game as a whole. This process can be called as
    **Prototyping**. Making a prototype of your game is one of the most important
    aspects of a game because this is where you test out the basic mechanics of your
    game. A prototype should be a simple working model of your game with basic functionality.
    It can also be termed as a **stripped down version** of your game.
  prefs: []
  type: TYPE_NORMAL
- en: Surface and Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw how to create images and buttons using components from our palette in
    an Android app. However, this concept is a bit different in games. In games, we
    work with something known as a **Canvas**, which is used to draw images onto our
    **Surface**. To give you a basic understanding, a Surface is anything that holds
    pixels onto it. Basically, a Surface holds your Canvas, which then maps it onto
    your views. All of your image manipulations are is based on this. So, for the
    purpose of drawing anything in our game, we will use a `SurfaceView` component.
  prefs: []
  type: TYPE_NORMAL
- en: Working with colors and images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have learned these concepts as well as having an understanding
    of working on Android Studio, we can proceed to start working on making our game
    from scratch. Let''s clear all the buttons and text views in our `activity_fullscreen.xml`
    file and remove all the references in our Java code so that it looks somewhat
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Take a look at the Component Tree window below your Palette for a proper reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Note here that at this point we are back to square one with our app.
  prefs: []
  type: TYPE_NORMAL
- en: When you are done with this, just run and test your app once to check whether
    there are any errors; if not, then proceed further. We will now take a look at
    how to create basic colors using hex color codes and then proceed to create images
    for our background as well as other components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is fairly simple, and we have seen this in our previous chapter as well.
    Simply go to your `colors.xml` file located in the `app/res/values/` folder. Here,
    you can observe multiple hex color code values. A hex color code represents a
    six-digit alphanumeric value, which is responsible for giving a color. The value
    starts from **#000000** (black) to **#ffffff** (white).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `colors.xml`, if you observe there are already predefined values as
    seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Hex color code values
  prefs: []
  type: TYPE_NORMAL
- en: 'In this file, you can tweak in these values or simply add your own values as
    well. Let''s say if you want to add the color red, then you simply add the following
    line into this code to get the red value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you observe the syntax closely, you will observe that this hex code is in
    the format of `RRGGBB`, which means that the first two alphanumeric digits constitute
    the composition of the red color, the second two digits correspond to the green
    color, and the last two digits correspond to that of the blue color. Also, with
    the name field, you can use this color in any component as we have done in our
    background. Go ahead, try and tweak some values in the `colorPrimary`, and see
    what changes happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, note here that in hex color code, we can only use numbers from 0-9 and
    characters from a-f. So, if you use something such as #99z9pt, then this won''t
    give out any color or number output. Try this out so that you get a clearer understanding
    of this color code concept.'
  prefs: []
  type: TYPE_NORMAL
- en: That is all about colors in Android Studio. You can use them in your backgrounds,
    surfaces, and so on using your understanding of XML files as we have seen in previous
    chapters, or you also set them programmatically from your Java code. Let's now
    move on to the most interesting part, working with images.
  prefs: []
  type: TYPE_NORMAL
- en: Creating images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've taken a look at the project structure of an Android project. So, by now
    we are clear about the difference between where to put code files and where to
    put our resources. Images are resources, and therefore, they can either be put
    in the `res` folder of our Android Studio Project or AssetManager, but more specifically,
    we can't just put them in the `res` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is, by convention, a specific folder exclusively for our image resources,
    that is, the `drawable` folder. You can find this folder in `app/res/drawable`.
    If you are not able to see it, then create it manually by right-clicking on the
    `res` folder and selecting New | Android resource directory, and in Resource Type,
    select drawable. You do not have to do this if the `drawable` folder already exists
    in your folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the drawable folder
  prefs: []
  type: TYPE_NORMAL
- en: 'This folder includes all your image resources in your project including resources,
    such as background images, icons, and sprite sheets. For the purpose of this game,
    we''ll put all our image resources into the `drawable` folder. We will now create
    a background image, and in our next chapter, we will learn how to put another
    image on top of that. After we are done with this, we will create an `OnClickListener`
    on our newly created image on top of our background so that it changes the image.
    So for this, we will need three image resources. Let''s call them the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`background_image`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this chapter, we have taken the following stock images. You are free to
    use any images of your choice as you deem fit.
  prefs: []
  type: TYPE_NORMAL
- en: '`background_image`: The following is the background image we will be using
    for our game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_11.png)'
  prefs: []
  type: TYPE_IMG
- en: '`image_1`: The following is one of the frames of our player:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '`image_2`: The following is another image frame of our character:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, we will have our `background_image` and `image_1` on top of it. When we
    click on our `image_1`, it will get converted into `image_2`. Let''s get some
    stock image resources and put them into our `res/drawable` folder. To do this,
    simply right-click on any images you want to put in the `drawable` folder and
    select Copy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And then, right-click on the drawable folder and select Paste:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_08.png)'
  prefs: []
  type: TYPE_IMG
- en: After this, you will be prompted with a dialog box. Press Ok to successfully
    import your image resources in your `project` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our image resources in place, it''s time to get them on our
    screen. You can do this right away by taking an ImageView component and setting
    its property to your desired image, but since we are making a game, we will go
    the *Canvas Way*. To do that, first we need to replace our entire Java code, in
    our `FullscreenActivity.java` and make it look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All the changes you need to do in your existing code have been marked in **bold**
  prefs: []
  type: TYPE_NORMAL
- en: Note here that we have eliminated all the toggle status bar functions and have
    kept only our `onCreate` method. The other interesting thing we did with the `getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
    WindowManager.LayoutParams.FLAG_FULLSCREEN);` is that we have manually set our
    game to fullscreen mode. We also eliminated the Title screen window with `requestWindowFeature(Window.FEATURE_NO_TITLE);`
    code. Now, note here you will be getting an error on your `GameView(this)` code.
    This is because we still haven't created our `GameView` class. So, let's go ahead
    and make that but before that let's make one minor change in our manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your `AndroidManifest.xml` file located in the `app/manifests/` folder.
    In your `<activity>` code, add the orientation as landscape as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will now explicitly tell the application that our game is in landscape
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s move ahead and make our `GameView` class. To do so, simply right-click
    on your `app/java/packagename` folder and select New | Java Class, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you do so, a new window will open up asking you the details of the new
    class you want to make. Simply type in `GameView` inside of the Name text box
    and press OK to proceed, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will be needing two more classes to set our side-scrolling background image,
    so repeat the same process and create the following two classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BackgroundImage`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MainGameThread`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, in total, you now have four classes in your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BackgroundImage`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FullscreenActivity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GameView`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MainGameThread`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our aim is to have a background image on the screen, which would continuously
    scroll through our view. Let''s first open up our `BackgroundImage.java` file
    and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to understand this code now. We have simply created a class here
    and following is a step-by-step breakdown of each code block inside our class:'
  prefs: []
  type: TYPE_NORMAL
- en: We imported Bitmap and Canvas, which is needed for our image and Canvas operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We declared private variables `xc`, `yc`, and `dxc`, which are simply the *x*,
    *y* coordinates and displacement in *x*. The default value of these variables
    will be zero since we haven't initialized them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then declared a Bitmap private variable, which will be holding our actual
    image file to be displayed on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we created a constructor for our class, so we can pass an image into it
    using the res reference inside it and within our constructor, we equated this
    reference with our background image variable declared in step 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then created a vector displacement method in order to add a unit vector to
    our image's position value in order to make it move.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we used the update method that will be called every time and put all our
    displacement and reset logic in it. If the image goes out of our screen, then
    we reset the position to 0 in order to give a continuous movement effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you remember, we discussed at the beginning that in order to draw anything
    on the screen, you need a Canvas. So, using the draw method, we took a Canvas
    as a reference variable and included our draw logic in it. Observe here that we
    are drawing our background image twice. This is because if our image is scrolling
    continuously, then there will be a void in between and it'll appear black, so
    we use the same image and draw it twice on screen a bit further from our main
    image in order to give a continuous loop effect. In order to understand this as
    a live example, you can try removing either one of the `canvas.drawBitmap()` code
    to see for yourself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That''s it for the `BackgroundImage.java` file. By this time, you must be getting
    a few errors on your `GameView.WIDTH` code. Don''t worry about that. We will come
    to it later. Before addressing that error, we must first set up our game thread
    since all our update functions are going to be called from our thread. Our objectives
    for our `MainGameThread.java` file are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Give a continuous call to the update function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base our performance on frames per second
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, open up your `MainGameThread.java` file and type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what we have done in our `MainGameThread.java` file:'
  prefs: []
  type: TYPE_NORMAL
- en: We created all the variables needed to run our thread.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created the constructor for our `MainGameThread` file by taking a `SurfaceHolder`
    and `GameView` references and set their references to `this` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a method to keep a track of our running thread with a return value
    of Boolean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We override the default `run` method of a thread to make it do the stuff we
    need specifically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use our surfaceholder variable for manipulating our image pixel data.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We calculate our frames per second.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We take an average of frames per second to calculate and display it in the console
    view.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By doing this, we are now ready with our thread class and finally only left
    with our `GameView` class. In our `GameView`, we are actually going to put all
    the image data we built on screen and display it. So, let''s open up the `GameView.java`
    file and start typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This code is pretty easy to understand. Our `GameView` is the place where we
    create our Surface and draw everything onto it. So, we have extended the `SurfaceView`
    and implemented our callback, `SurfaceHolder`. This gives us access to some pre-written
    methods, which we will be overriding. Before you understand these methods, let''s
    try to understand the logic behind this code. It can be divided into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We create the default constructor for our GameView class, which then gives a
    call to start our `MainGameThread`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using predefined methods, we override them and create our Canvas on top of our
    surface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We call the update function in our `BackgroundImage` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set scaling of our image to match our phone's resolution dynamically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we know the logic, we can now read through the methods and understand
    them each one by one. We have the following methods in our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`surfaceChanged`: We have created an empty method with parameters. If our surface
    changes, then this method is called'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`surfaceDestroyed`: If the surface is destroyed, this method is called'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`surfaceCreated`: After our surface is created, we can start the game loop;
    this is where we initialize our background image and set its resource, as you
    can see in the code, `bgImg = newBackgroundImage(BitmapFactory.decodeResource(getResources(),
    R.drawable.background_image));`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onTouchEvent`: This method is called whenever there is a touch on the screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update`: This method is the update method, and in here, we are giving a call
    to the `update` method of `BackgroundImage`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`draw`: This method gives a call to draw our image onto the screen, and we make
    some calculations to scale our image and set it properly onto our phone as per
    its resolution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you are done with this file, don''t forget to check your `FullscreenActivity.java`
    and make sure that its code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It is now recommended that you build an apk for this game and test it on your
    device since if you try running this on your emulator it will run extremely slow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build it and execute it on your device/emulator, and you will see an output
    like this in which your background image is continuously scrolling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_04_11.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it! Your side-scrolling background is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have successfully learned how to create images and work
    with colors in Android Studio. You have also implemented a side-scrolling background,
    which will act as a foundation for the further part of this game.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will create our player character and implement a click
    listener on our image objects as well as learn how to animate objects with the
    concept of sprite sheets we have just learned.
  prefs: []
  type: TYPE_NORMAL
