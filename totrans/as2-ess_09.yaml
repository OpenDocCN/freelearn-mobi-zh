- en: Chapter 9. Preparing for Release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned enough to test and debug your application.
    What do you need to do to prepare your application for its release? How can you
    do this using Android Studio?
  prefs: []
  type: TYPE_NORMAL
- en: This chapter describes the necessary steps to prepare your application for release
    using Android Studio. First of all, you will learn about **application packages**
    (**APK**) files—a variation of the JAR files in which Android applications are
    packed. You will then learn how you need to change your application after fully
    testing it. Finally, we will sign our APK file, leaving it ready to upload to
    Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: APK files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a signed APK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing in release mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding an APK file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android applications are packed in a file with the `.apk` extension. These
    files are just compressed ZIP files, so their content can easily be explored.
    An APK file usually contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assets/`: This is a folder that contains the asset files of the application.
    This is the same `assets` folder that exists in our project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`META-INF/`: This is a folder that contains our certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib/`: This is a folder that contains compiled code, in case it is needed
    for a processor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res/`: This is a folder that contains the application resources such as images,
    strings, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AndroidManifest.xml`: This is the application manifest file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`classes.dex`: This is a file that contains the application''s compiled code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources.arsc`: This is a file that contains some precompiled resources,
    such as binary XML files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Having the APK file allows the application to be distributed and installed
    on the Android operating system. Android applications can be distributed as you
    prefer: through app markets such as Google Play, Amazon App store, or Opera Mobile
    Store; through your own website; or even via an e-mail to your users. If you choose
    one of the two last options, take into account that Android, by default, blocks
    installations from locations other than Google Play. You should inform your users
    that they need to disable this restriction in their devices to be able to install
    your application. They have to check the **Unknown sources** option by navigating
    to **Settings** | **Security** in their Android devices.'
  prefs: []
  type: TYPE_NORMAL
- en: Build types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Applications have to be signed with a private key when they are built. An application
    can''t be installed in a device or even in the emulator if it is not signed. To
    build our application, there are two types: **debug** and **release**. Both APK
    versions contain the same folders and compiled files; the difference is in the
    key used to sign them. Both modes are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Debug**: When we ran and tested our application in the previous chapters,
    we were in debug mode, but we didn''t have a key nor did we do anything to sign
    our application. The Android SDK tools automatically create a debug key, an alias,
    and their passwords to sign the APK. This process occurs when we are running or
    debugging our application with Android Studio without us realizing. We can''t
    publish an APK signed with the debug key created by the SDK tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release**: When we distribute our application, we have to build a release
    version. Google Play requires the APK file to be signed with a certificate, for
    which the developer keeps the private key. In this case, we need our own private
    key, alias, and password and need to provide them to the build tools. The certificate
    identifies the developer of the application and can be a self-signed certificate.
    It is not necessary for a certificate authority to sign the certificate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep the key store with your certificate in a secure place. To upgrade your
    application, you have to use the same key in order to upload the new version.
    If you lose the key store, you won't be able to update your application. You will
    have to create a new application with a different package name.
  prefs: []
  type: TYPE_NORMAL
- en: Steps prior to releasing your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you generate the APK file, it is necessary to prepare your application
    to build it in release mode. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, make sure you have completely tested your application. We recommend
    testing your application in the following ways:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On a device using the minimum required platform
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On a device using the target platform
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On a device using the latest available platform
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On a real device and not just the emulator
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On a variety of screen resolutions and sizes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On a tablet if your application supports it
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By switching to landscape mode if you allow it, both in a mobile device and
    in a tablet
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On different network conditions, such as with no Internet connectivity or low
    coverage
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When the GPS or other location service is not activated on your device (if your
    application uses GPS or any location service)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When the back button is pressed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Secondly, we have to check the log messages that are printed from our application.
    Printing some log messages can be considered a security vulnerability. Logs generated
    by the Android system can be captured and analyzed, so we should avoid showing
    critical information about the application's internal working. You should also
    remove the `android:debuggable` property from the application manifest file. You
    can also set this property to `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thirdly, if your application communicates with a server, check that the configured
    URL is the production URL. It is possible that, during the debug phase, you referenced
    an URL of a server in a prerelease environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, set the correct value for the `android:versionCode` and `android:versionName`
    properties from the application manifest file. The version code is a number (integer)
    that represents the application version. New versions should have greater version
    codes. This code is used to determine whether an application installed on a device
    is the latest version or whether there is a newer version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The version name is a string that represents the application version. Unlike
    the version code, the version name is visible to the user and appears in the public
    information about the application. It is just an informative version name to the
    user and is not used for any internal purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify a value of `1` for the version code and `1.0` for the version name.
    The `manifest` tag should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A new version of our application will have a value of `2` for the version code
    and could have `1.1` for the version name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generating a signed APK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To generate the signed APK, navigate to **Build** | **Generate Signed APK**.
    Select the **app** module and click on the **Next** button. In the dialog to generate
    the signed APK, we are asked for a certificate. The APK is signed by this certificate,
    which indicates that it belongs to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is our first application, we might not have any certificates. Click
    on the **Create new...** button to open the **New Key Store** dialog. Now, fill
    in the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key store path**: This is the path in your system to create the key store.
    The key store is a file with the `.jks` extension, for example, `release_keystore.jks`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: This is the key store password. You have to confirm it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alias**: This is the alias for your certificate and is a pair of public and
    private keys. Let''s name it `releasekey`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: This is the certificate password. You have to confirm it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validity (years)**: This is the certificate that will be valid until the
    validity date. A value of 25 years or more is recommended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate**: This is the personal information contained in the certificate.
    Type your first and last name, organizational unit, organization, city or locality,
    state or province, and country code; for example, `AS` as **Organizational Unit**,
    `packtpub` as **Organization**, and `ES` as **Country Code**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see the **New Key Store** dialog in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating a signed APK](img/B05459_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **OK**. The dialog to create the signed APK is now loaded with the
    key store data. The next time we create a signed APK, we will already have a certificate,
    so we will select the **Choose existing** button. Click on the **Next** button.
    In the next step, select the path to save the APK file, select the release build
    type, and click on **Finish**. When the APK is completely generated, you will
    be informed by a message on the bottom bar of Android Studio and by the following
    notification on the top part of Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating a signed APK](img/B05459_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We should have the APK file created in the selected path. Now that you have
    the APK file ready for release, it is recommended that you test it again in a
    device before distributing it.
  prefs: []
  type: TYPE_NORMAL
- en: Sign automatically in release mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apps are signed automatically when running in debug mode, since the debug key
    is automatically generated. If we try to run our app in release mode, the following
    error will be displayed because Android Studio does not know how to sign our app:
    *Error: The apk for your currently selected variant (app-release-unsigned.apk)
    is not signed. Please specify a signing configuration for this variant (release)*.'
  prefs: []
  type: TYPE_NORMAL
- en: We need to configure our build settings if we want to run our app in release
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Project Structure** settings by navigating to **File** | **Project
    Structure...**. Select your app in the **Modules** section and open the **Signing**
    tab. Click on the plus button to create a new signing configuration. Rename the
    configuration and type the data of your key store, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sign automatically in release mode](img/B05459_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the **Build Types** tab, in which the default two build types are
    listed: debug and release. Select **release** and choose the recently created
    configuration (**releaseConfig**) in the **Signing Config** selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sign automatically in release mode](img/B05459_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Press **Ok** to finish the configuration. Now, your app will automatically be
    signed in release mode using your release key.
  prefs: []
  type: TYPE_NORMAL
- en: 'This signing configuration has actually modified the `build.gradle` file of
    your app module. Open this file to observe the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The new signing configuration has been added using the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The release build type now points to the previous signing configuration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are some alternatives if you do not want to expose your password in the
    `build.gradle` file, for example, saving your password in a `properties` file
    that you can read from the `build.gradle` file.
  prefs: []
  type: TYPE_NORMAL
- en: Running your app in release mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our app will be signed automatically for release, we can run and test
    our application using the release mode. To run an app in release mode, open the
    **Build Variants** panel, which is located in the left-side bar of Android Studio,
    as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running your app in release mode](img/B05459_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your app module is displayed in the **Build Variants** panel, along with the
    current build variant, which by default is **debug**. Change the build variant
    value to **release** and then your app is ready to run in release mode.
  prefs: []
  type: TYPE_NORMAL
- en: APK Analyzer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android Studio 2.2 introduced a new feature—the **APK Analyzer**. This tool
    analyzes the content of a selected APK file. You can review the sizes of the components,
    the final `AndroidManifest.xml` file, and the compiled resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Build** | **APK Analyzer** and select your APK file. A new tab
    will open with the APK file details, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![APK Analyzer](img/B05459_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'All the files in the APK are listed along with their file sizes: **Raw File
    Size** and **Download Size**. The download size is the estimation of the file
    size when the user downloads the APK.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you select a file, you can see its details in the bottom part. Select
    the `classes.dex` file to see the list of all the classes in the APK file, like
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![APK Analyzer](img/B05459_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For each class, the number of methods is displayed and a summary is also provided.
    This information is useful to avoid the 64k referenced method limit issue. There
    is a limit in the total number of methods that can be referenced within a **Dalvix
    Executable** (**dex**) bytecode file: 65536\. Using the APK analyzer, you can
    keep track of the number of methods in your APK.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your app is over the limit and refactoring or code cleaning are not enough,
    you can enable a multidex configuration for your app. A multidex configuration
    will create different `dex` files. Add the following line in the `defaultConfig`
    of your `build.gradle` file to enable multidex:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You also need to add the `MultiDexApplication` class to your application in
    the manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You learned how to make an APK file and how to modify your application to make
    it ready for release. You also learned how to sign our application using the developer
    certificate. By the end of this chapter, you should have generated a signed APK
    prepared for its release.
  prefs: []
  type: TYPE_NORMAL
- en: In [Appendix](apa.html "Appendix A. Getting Help"), *Getting Help*, you will
    learn how to get help using Android Studio. We will access the Android Studio
    online documentation and go through the help topics. Finally, you will learn about
    keeping your Android Studio instance updated using the inbuilt feature for updates.
  prefs: []
  type: TYPE_NORMAL
