["```swift\n    MainViewController mainController = new MainViewController ();\n    window.RootViewController = mainController;\n\n    ```", "```swift\nMainViewController mainController = new MainViewController ();\n\n```", "```swift\nwindow.RootViewController = mainController;\n\n```", "```swift\npublic override void ViewDidLoad (){\nbase.ViewDidLoad();\nthis.myLabel.Text = \"View loaded!\";\n}\n\n```", "```swift\n    UINavigationController navController;\n\n    ```", "```swift\n    RootViewController rootController = new RootViewController();\n    this.navController = new UINavigationController(rootController);\n    window.RootViewController = this.navController;\n\n    ```", "```swift\n    public override void ViewDidLoad (){\n    this.buttonFirstView.TouchUpInside += delegate {\n    ViewController1 cont1 = new ViewController1 ();\n    cont1.Title = \"Controller #1\";\n    this.NavigationController.PushViewController (cont1, true);\n    };\n    this.buttonSecondView.TouchUpInside += delegate {\n    ViewController2 cont2 = new ViewController2 ();\n    cont2.Title = \"Controller #2\";\n    this.NavigationController.PushViewController (cont2, true);\n    };\n    }\n\n    ```", "```swift\n    public override void ViewDidLoad (){\n    this.buttonPop.TouchUpInside += delegate {\n    this.NavigationController.PopToRootViewController (true);\n    };\n    }\n\n    ```", "```swift\nthis.NavigationController.PushViewController (cont1, true);\n\n```", "```swift\nthis.navController = new UINavigationController(rootController);\n\n```", "```swift\nthis.NavigationController.PopToRootViewController (true);\n\n```", "```swift\n    UITabBarController tabController;\n\n    ```", "```swift\n    MainController mainController = new MainController();\n    SettingsController settingsController = new SettingsController();\n    mainController.TabBarItem.Title = \"Main\";\n    settingsController.TabBarItem.Title = \"Settings\";\n    this.tabController = new UITabBarController();\n    this.tabController.SetViewControllers(new UIViewController[] {\n    mainController,\n    settingsController\n    } , false);\n    window.RootViewController = this.tabController;\n    this.tabController.ViewControllerSelected += delegate(object sender, UITabBarSelectionEventArgs e) {\n    Console.WriteLine(\"Selected {0} controller.\", e.ViewController.TabBarItem.Title);\n    } ;\n\n    ```", "```swift\nthis.tabBarController.ViewControllerSelected += new EventHandler<UITabBarSelectionEventArgs> (delegate(object sender, UITabBarSelectionEventArgs e) {\n\n```", "```swift\nConsole.WriteLine (\"Controller {0} selected.\", e.ViewController.TabBarItem.Title);\n\n```", "```swift\nthis.tabController.SetViewControllers(new UIViewController[] {\nmainController,\nsettingsController\n});\n\n```", "```swift\n    TableController tableController = new TableController();\n    window.RootViewController = tableController;\n\n    ```", "```swift\n    public partial class TableController : UITableViewController\n\n    ```", "```swift\n    public override void ViewDidLoad (){\n    this.buttonPresent.TouchUpInside += delegate {\n    ModalController modal = new ModalController ();\n    this.PresentModalViewController (modal, true);\n    };\n    }\n\n    ```", "```swift\n    this.buttonDismiss.TouchUpInside += delegate {\n    this.DismissModalViewControllerAnimated (true);\n    };\n\n    ```", "```swift\n    MainController mainController = new MainController ();\n    window.RootViewController = mainController;\n\n    ```", "```swift\nthis.buttonPresent.TouchUpInside += delegate {\nModalController modal = new ModalController ();\nthis.PresentModalViewController (modal, true);\n};\n\n```", "```swift\nthis.DismissModalViewControllerAnimated (true);\n\n```", "```swift\nmodal.ModalTransitionStyle = UIModalTransitionStyle.FlipHorizontal;\n\n```", "```swift\n    using System;\n    using System.Drawing;\n    using MonoTouch.Foundation;\n    using MonoTouch.UIKit;\n    public class BaseController : UIViewController{\n    //Constructors\n    public BaseController (string nibName, NSBundle bundle) : base(nibName, bundle){}\n    public override void TouchesMoved (NSSet touches, UIEvent evt){\n    base.TouchesMoved (touches, evt);\n    // Capture the position of touches\n    UITouch touch = (UITouch)touches.AnyObject;\n    PointF locationInView = touch.LocationInView (this.View);\n    Console.WriteLine (\"Touch position: {0}\", locationInView);\n    }\n    }\n\n    ```", "```swift\n    DerivedController derivedController = new DerivedController();\n    window. RootViewController = derivedController;\n\n    ```", "```swift\npublic BaseController (string nibName, NSBundle bundle) : base(nibName, bundle){}\n\n```", "```swift\nderivedController = new DerivedController();\n\n```", "```swift\n    private Dictionary<int, string> cacheList;\n    private Dictionary<int, string> cacheList;\n    public override void DidReceiveMemoryWarning (){\n    // Releases the view if it doesn't have a superview.\n    base.DidReceiveMemoryWarning ();\n    Console.WriteLine(\"Will clear cache in DidReceiveMemoryWarning...\");\n    // Release any cached data, images, and so on that aren't in use.\n    this.cacheList.Clear();\n    }\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    //any additional setup after loading the view, typically from a nib.\n    this.cacheList = new Dictionary<int, string>() {\n    { 0, \"One\" },\n    { 1, \"Two\" },\n    { 2, \"Three\" }\n    } ;\n    this.btnShowData.TouchUpInside += ButtonShowData_TouchUpInside;\n    }\n    public override void ViewDidUnload (){\n    base.ViewDidUnload ();\n    // Release any retained subviews of the main view.\n    // e.g. myOutlet = null;\n    this.lblOutput = null;\n    this.btnShowData.TouchUpInside -= ButtonShowData_TouchUpInside;\n    this.btnShowData = null;\n    }\n    private void ButtonShowData_TouchUpInside (object sender, EventArgs e){\n    foreach (KeyValuePair<int, string> eachItem in this.cacheList){\n    this.lblOutput.Text += string.Format(\"Key: {0} - Value: {1}\", eachItem.Key, eachItem.Value);\n    }//end foreach\n    }\n    }\n\n    ```", "```swift\nthis.cacheList.Clear();\n\n```", "```swift\nthis.lblOutput = null;\nthis.btnShowData.TouchUpInside -= ButtonShowData_TouchUpInside;\nthis.btnShowData = null;\n\n```", "```swift\npublic override ViewDidUnload()\n{\nbase.ViewDidUnload();\nthis.View = null; // Never do this.\n}\n\n```", "```swift\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.Title = \"Main\";\n    this.buttonPush.TouchUpInside += delegate {\n    this.NavigationController.PushViewController(new AfterMainController(), true);\n    };\n    }\n\n    ```", "```swift\n    UINavigationController navController;\n    UITabBarController tabController;\n\n    ```", "```swift\n    MainController mainController = new MainController();\n    SettingsController settingsController = new SettingsController();\n    this.tabController = new UITabBarController();\n    this.navController = new UINavigationController(mainController);\n    this.tabController.SetViewControllers(new UIViewController[] {\n    this.navController,\n    settingsController\n    } , false);\n    navController.TabBarItem.Title = \"Main\";\n    settingsController.TabBarItem.Title = \"Settings\";\n    window.RootViewController = this.tabController;\n\n    ```", "```swift\n    UISplitViewController splitController;\n    FirstController firstController;\n    SecondController secondController;\n\n    ```", "```swift\n    this.firstController = new FirstController();\n    this.secondController = new SecondController();\n    this.splitController = new UISplitViewController();\n    this.splitController.ViewControllers = new UIViewController[] {\n    this.firstController,\n    this.secondController\n    } ;\n    this.splitController.Delegate = new SplitControllerDelegate(this.secondController);\n    window.RootViewController = this.splitController;\n\n    ```", "```swift\n    private class SplitControllerDelegate : UISplitViewControllerDelegate{\n    public SplitControllerDelegate (SecondController controller){\n    this.parentController = controller;\n    }//end ctor\n    private SecondController parentController;\n    public override void WillHideViewController ( UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem, UIPopoverController pc){\n    barButtonItem.Title = \"First\";\n    this.parentController.SecToolbar.SetItems (new UIBarButtonItem[] { barButtonItem }, true);\n    }\n    public override void WillShowViewController ( UISplitViewController svc, UIViewController aViewController, UIBarButtonItem button){\n    this.parentController.SecToolbar.SetItems (new UIBarButtonItem[0], true);\n    }\n    }\n\n    ```", "```swift\n    public UIToolbar SecToolbar{\n    get { return this.secToolbar; }\n    }\n\n    ```", "```swift\npublic override void WillHideViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem, UIPopoverController pc){\nbarButtonItem.Title = \"First\";\nthis.parentController.SecToolbar.SetItems (new UIBarButtonItem[] { barButtonItem }, true);\n}\n\n```", "```swift\npublic override void WillShowViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem button){\nthis.parentController.SecToolbar.SetItems (new UIBarButtonItem[0], true);\n}\n\n```", "```swift\npublic bool ShouldAutorotateToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation){\nreturn true;\n}\n\n```", "```swift\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Pad){\n    this.View.Frame = new RectangleF (0f, 0f, 768f, 1024f);\n    this.labelMessage.Text = \"Running on an iPad!\";\n    }\n    }\n\n    ```", "```swift\n    MainController mainController = new MainController();\n    window.RootViewController = mainController;\n\n    ```", "```swift\nif (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Pad)\n\n```"]