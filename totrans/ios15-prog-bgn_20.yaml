- en: '*Chapter 17*: Getting Started with JSON Files'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you configured the `.plist` file. You configured custom
    annotations for each restaurant location and configured the callout buttons in
    them to present the **Restaurant Detail** screen when tapped. You also organized
    your code using extensions to make it easier to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will use data stored in `.plist` file. Next, you'll configure
    the `LocationViewController` class to store the location selected by the user
    in the `ExploreViewController` instance when the `ExploreViewController` class
    to pass the selected location and cuisine to the `RestaurantListViewController`
    instance when a type of cuisine is selected. Finally, the `RestaurantListViewController`
    class will then be modified to get a list of restaurants from a JSON file corresponding
    to the selected location and cuisine and display them in the **Restaurant List**
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll know how to load and parse data from JSON
    files for use in your own apps. You'll also learn about `UITableViewDelegate`
    methods and ways to pass data from one view controller to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting data from JSON files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using data from JSON files in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the `MapDataManager` instance to use data from the `RestaurantDataManager`
    instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing a user-selected location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing location and cuisine information to the `RestaurantListViewController`
    instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter17` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3Hl8Ulz](https://bit.ly/3Hl8Ulz)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by learning how to read and parse JSON files to get data for use
    in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data from JSON files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*, Getting
    Data into Collection Views*, you learned how to load a file, read data from it
    using a data manager class, and put it into objects in your app. In this chapter,
    you will also do the same thing, the difference is that you will be reading data
    from a JSON file instead of a `.plist` file. This will simulate reading data from
    an online web-based service, where JSON is a commonly used format. Let's start
    by learning more about JSON files and how they work.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the JSON format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript Object Notation (JSON) is a way to structure data in a file that
    can be easily read by both people and computers. Many iOS apps work with an online
    web-based service to access JSON files, which are then used to provide the app
    with data.
  prefs: []
  type: TYPE_NORMAL
- en: You will not be learning about how to connect to an online service in this chapter.
    Instead, you will use sample JSON files downloaded from [http://opentable.herokuapp.com](http://opentable.herokuapp.com),
    which have been modified by Craig Clayton for this book. As you will see, working
    with JSON files is similar to working with `.plist` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help you to understand the JSON format, you will add the sample JSON files
    to your project and look at the structure of one of them. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project navigator, create a new group inside the `Misc` folder and name
    it `JSON`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have not yet downloaded the project files for this chapter, go ahead
    and download them from this link: [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the folder and open the `resources` folder in the `Chapter17` folder.
    You should see several JSON files inside.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag all of the JSON files there into the `JSON` folder you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Finish** on the screen that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Each JSON file contains restaurant details for a particular city. Click `Charleston.json`
    and you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.1: Editor area showing contents for Charleston.json'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.01_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.1: Editor area showing contents for Charleston.json'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the file starts with an opening square bracket, and each item
    inside consists of key-value pairs containing restaurant information, enclosed
    by curly braces and separated by commas. At the very end of the file, you can
    see a closing square bracket. The square brackets denote arrays, and the curly
    braces denote dictionaries. In other words, the JSON file contains an array of
    dictionaries, exactly the same as the `.plist` files you have been using earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have seen what a JSON file looks like, let's create a data manager
    class to load data from JSON files into your app in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the RestaurantDataManager class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have learned how to create a data manager class to load data from a `.plist`
    file in [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*, Getting
    Data into Collection Views*. You will now create `RestaurantDataManager`, a data
    manager class that loads data from the JSON files that you added to your project
    earlier. As you will see, loading data from a JSON file will be similar to loading
    data from a `.plist` file.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about parsing JSON files, watch the video available here: [https://developer.apple.com/videos/play/wwdc2017/212/](https://developer.apple.com/videos/play/wwdc2017/212/).'
  prefs: []
  type: TYPE_NORMAL
- en: Before you create the `RestaurantDataManager` class, you'll need to modify the
    `RestaurantItem` class so it conforms to the `Decodable` protocol. Adopting this
    protocol allows you to use the `JSONDecoder` class to populate `RestaurantItem`
    instances using data from JSON files.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about Decodable and the JSON Decoder class, see these links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types](https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/documentation/foundation/jsondecoder](https://developer.apple.com/documentation/foundation/jsondecoder)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify the `RestaurantItem` class so it conforms to the `Decodable` protocol,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the `RestaurantItem` file inside the `Model`
    folder in the `Map` folder. Modify the class declaration for `RestaurantItem`
    as shown to adopt the `Decodable` protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the `init()` method and add the following enumeration to make the `RestaurantItem`
    class conform to the `Decodable` protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CodingKeys` enumeration matches the `RestaurantItem` class properties to
    the keys in the JSON file. This allows the `JSONDecoder` instance to get values
    from the JSON file and assign them to properties in the `RestaurantItem` class.
    If the key name does not match the property name, you can map the key to the property,
    as shown in the preceding code block for `postalCode`, `imageURL`, and restaurantID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you modify the `RestaurantItem` class, you'll see an error in the `fetch(completion:)`
    method in the `MapDataManager` file. Don't worry about it as you will fix it in
    the next section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s create the `RestaurantDataManager` class, which will read the JSON
    file and put the data into an array of `RestaurantItem` instances. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Restaurants` folder and create a new group named `Model`.
    Then right-click on the `Model` folder and choose **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `RestaurantDataManager`. Click `RestaurantDataManager` file appears
    in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following after the `import` statement to declare the `RestaurantDataManager`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following property between the curly braces to hold an array of `RestaurantItem`
    instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `restaurantItems` array will store the `RestaurantItem` instances obtained
    from the JSON file. The `private` keyword means it is only accessible from within
    this class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following method after the `restaurantItems` property to read a JSON
    file and return an array of `RestaurantItem` instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This method takes three parameters: `location`, a string containing the restaurant
    location, `selectedCuisine`, a string containing the cuisine selected by the user,
    and `completionHandler`, a closure used to process the result of this method when
    it has finished execution. If you do not provide a value for `selectedCuisine`,
    it will default to `"All"`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This gets the URL of the JSON file in the app bundle and assigns it to `file`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`do` code block:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The first statement attempts to assign the contents of `file` to `data`. The
    next statement attempts to use a `JSONDecoder` instance to parse `data` and store
    it as an array of `RestaurantItem` instances, which is assigned to `restaurants`.
    In the next statement, if `selectedCuisine` is not `All`, the `filter` method
    is applied to the `restaurants` array using the `{($0.cuisines.contains(selectedCuisine))}`
    closure. This results in an array of `RestaurantItem` instances where the `cuisines`
    property contains the user-selected cuisine, and this array is assigned to `restaurantItems`.
    Otherwise, the entire `restaurants` array is assigned to `restaurantItems`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch` code block:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This prints an error message to the Debug area if the `do` code block fails.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This statement processes the `restaurantItems` array using the closure provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that when you call this method in Xcode, the autocomplete feature gives
    you two possible choices; one that includes the `selectedCuisine:` parameter (that
    takes a string containing the selected cuisine) and one that doesn't (`selectedCuisine`
    is set to All).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a method after the `fetch(location:selectedCuisine:completionHandler:)`
    method to return the number of items in the `restaurantItems` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll call this method to determine the number of collection view cells to
    display in the **Restaurant List** screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a method just after the `numberOfRestaurantItems()` method to return a
    `RestaurantItem` instance from the `restaurantItems` array at the index provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll call this method to configure the content of each collection view cell
    in the **Restaurant List** screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `RestaurantDataManager` class has been created, which allows you to read
    data stored in `JSON` files and put it into an array of `RestaurantItem` instances.
    Before you can use it, you'll need to modify your project quite a bit. Let's see
    what's required to display restaurant information in the **Map** and **RestaurantList**
    screens in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using data from JSON files in your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's review how the app works. In the **Map** screen, the user will see all
    the restaurants near the user's location. Tapping a restaurant will display a
    callout bubble, and tapping the button in the callout button will display the
    details of said restaurant in the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Explore** screen, the user will tap the **LOCATION** button and select
    a location such as **Charleston, NC** on the **Locations** screen. After a location
    has been selected, the user taps **Done** and will be returned to the **Explore**
    screen. The user will then select a cuisine in the **Explore** screen, and a list
    of restaurants in that location that offer that cuisine will be displayed in the
    **Restaurant List** screen. Tapping a restaurant will display the details of said
    restaurant in the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the `MapViewController` class to get a list of restaurants from a
    JSON file instead of a `.plist` file. This will also fix the error in the `MapDataManager`
    class's `fetch(completion:)` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `LocationViewController` class to store the location selected
    by the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass the selected location to the `ExploreViewController` instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `ExploreViewController` class to pass the selected location and
    cuisine to the `RestaurantListViewController` instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `RestaurantListViewController` class to get a list of restaurants
    from a JSON file corresponding to the selected location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `RestaurantListViewController` class to display a list of restaurants
    based on the location and cuisine selected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This may seem daunting, so you'll do things step by step. To start, you'll configure
    the `MapDataManager` class to read data from JSON files instead of `.plist` files.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the MapDataManager instance to use data from the RestaurantDataManager
    instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, there is an error in the `MapDataManager` file. This is because
    the `fetch(completion:)` method in your `MapDataManager` class calls the initializer
    method that you removed from the `RestaurantItem` class. You will now update the
    `MapDataManager` class to use the `RestaurantDataManager` instance as a data source,
    fixing the error in the process. Click the `MapDataManager` file (inside the `Model`
    folder in the `Map` folder) in the Project navigator and update the `fetch(completion:)`
    method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This method has a completion method parameter. The completion method will be
    used to process the result when the method has finished execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This creates an instance of the `RestaurantDataManager` class and assigns it
    to `manager`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This calls the `manager` instance's `fetch()` method to get a list of restaurants
    from `Boston.json`. This is hardcoded for now as the iOS Simulator does not have
    a functional GPS. To see restaurants at a different location, change the name
    of the JSON file used to another location. The array of `RestaurantItem` instances
    returned by this method is assigned to the `MapViewController` instance's `items`
    array, and the completion method that was passed in is used to process this array.
    As you saw in the previous chapter, this will generate the annotations that will
    be added to the map view in the **Map** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about how to determine your location, visit [https://developer.apple.com/documentation/mapkit/mkmapview/converting_a_user_s_location_to_a_descriptive_placemark](https://developer.apple.com/documentation/mapkit/mkmapview/converting_a_user_s_location_to_a_descriptive_placemark).
  prefs: []
  type: TYPE_NORMAL
- en: If you run your app now and select the **Map** screen, you should see pins for
    restaurants in Boston.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll configure the `LocationViewController` class so
    it can store the location selected by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Storing a user-selected location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At present, the `LocationDataManager` class loads data from `Locations.plist`
    and stores location information in an array of strings. You will create a new
    structure, `LocationItem`, and configure the `LocationDataManager` class to store
    locations in an array of `LocationItem` instances. After that, you''ll modify
    the `LocationViewController` class so that it can store a `LocationItem` instance
    containing the user-selected location. You can then pass this instance to the
    `RestaurantListViewController` instance in your app. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Model` folder inside the `Location` folder and select **New
    File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `LocationItem`. Click `LocationItem` file appears in the Project
    navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `LocationItem` file and add the following after the `import` statement
    to declare and define the `LocationItem` structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `LocationItem` structure has two `String` properties, `city` and `state`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `init()` method takes a dictionary, `dict`, as a parameter and assigns the
    values of the `city` and `state` keys to the `city` and `state` properties.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `cityAndState` computed property returns a string made from combining the
    `city` and `state` values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now you''ll update the `LocationDataManager` class so that it can store city
    and state information in an array of `LocationItem` instances instead of strings.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `LocationDataManager` in the Project navigator and modify the `locations`
    array to store `LocationItem` instances instead of strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `fetch()` method will now show an error. Modify the `fetch()` method to
    work with `LocationItem` instances instead of strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `locationItem(at:)` method now shows an error. Modify it so it returns
    a `LocationItem` instance instead of a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You are done with the `LocationDataManager` class at this point. Next, you''ll
    update the `LocationViewController` class to use `LocationItem` instances instead
    of strings to populate the table view cells. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `LocationViewController` file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see an error in the `tableView(_:cellForRowAtIndexPath:)` method.
    This error is because you can''t assign a `LocationItem` instance to the cell''s
    `textLabel` property. Modify this method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You need a property to keep track of the user''s selection. Add the following
    property declaration just after the `manager` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To handle user interaction with the table view, you'll make the `LocationViewController`
    class conform to the `UITableViewDelegate` protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The `UITableViewDelegate` protocol is covered in [*Chapter 15*](B17469_15_Final_VK_ePub.xhtml#_idTextAnchor213)*,
    Getting Started with Table Views*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UITableViewDelegate` protocol specifies the messages that a table view
    will send to its delegate when the user interacts with the rows in it. Follow
    these steps to adopt it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following extension after the `UITableViewDataSource` extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The extension helps to keep your code organized, and the `// MARK:` syntax makes
    this extension easy to find in the Editor area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `UITableViewDelegate` method triggered when a user taps a row in the table
    view is `tableView(_:didSelectRowAt:)`. Add this method between the extension''s
    curly braces. It should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `LocationViewController` class can now store a user-selected location, but
    when you choose a location in the `ExploreViewController` class and assign it
    to the **Done** button, but before you do, you'll create a new view controller
    for the collection view section header in the **Explore** screen first. This will
    let you display the user-selected location in the **Explore** screen. You'll do
    this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a UICollectionReusableView subclass for the section header in the Explore
    screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UICollectionReusableView` subclass for the collection view section header,
    and set up an outlet for the subtitle label, so you can display the user-selected
    location in the collection view section header. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `View` folder inside the `Explore` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ExploreHeaderView`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UICollectionReusableView`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click `ExploreHeaderView` file appears in the Project navigator. Verify that
    it contains the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `Main` storyboard file in the Project navigator. Select the `ExploreHeaderView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.2: Identity inspector with Class set to ExploreHeaderView'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.02_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.2: Identity inspector with Class set to ExploreHeaderView'
  prefs: []
  type: TYPE_NORMAL
- en: Note that **Collection Reusable View** will change to **Explore Header View**
    in the document outline.
  prefs: []
  type: TYPE_NORMAL
- en: The `ExploreHeaderView` class is now managing the collection view section header.
    In the next section, you will link the subtitle label in the collection view section
    header to an outlet in the `ExploreHeaderView` class, and add a property for the
    `ExploreHeaderView` class in the `ExploreViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the section header's label to the ExploreViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To display the user-selected city in the collection view section header, you''ll
    connect the subtitle label to an outlet in the `ExploreHeaderView` class, then
    add a property for it in the `ExploreViewController` class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the document outline, click the subtitle label for the **Explore Header
    View** (it is the label that has the text **PLEASE SELECT A LOCATION**):![Figure
    17.3: Document outline with PLEASE SELECT A LOCATION label selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.3: Document outline with PLEASE SELECT A LOCATION label selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the Adjust Editor Options button and choose Assistant from the menu. An
    assistant editor appears on the right side of the screen. Make sure that it's
    showing the contents of the `ExploreHeaderView` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Ctrl + Drag* from the **PLEASE SELECT A LOCATION** label to the space between
    the curly braces:![Figure 17.4: Editor area showing ExploreHeaderView file contents'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.4: Editor area showing ExploreHeaderView file contents'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the box that appears, set the name to `locationLabel` and click **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `locationLabel` outlet has been created in the `ExploreHeaderView` class.
    Close the assistant editor by clicking the **x** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `ExploreViewController` file in the Project navigator. Add the following
    property declaration after the `manager` declaration to store the location passed
    to the `ExploreViewController` instance by the `LocationViewController` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the `selectedCity` property declaration, declare a property that will
    be assigned an `ExploreHeaderView` instance, which will allow the `ExploreViewController`
    instance to set the value for `locationLabel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, let's configure the `locationLabel` to the user-selected city and state
    when tapped. The **Explore** screen will then appear with the selected city displayed
    in the collection view section header. You will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an unwind action method to the Done button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*, Building
    Your User Interface*, you added an unwind action method for the `ExploreViewController`
    class, which dismisses the `selectedCity` property in the `ExploreViewController`
    instance to the location selected by the user. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following just after the `unwindLocationCancel(segue:)` method to implement
    the unwind action for the `LocationViewController` instance and the destination
    view controller is an `ExploreViewController` instance. This method first checks
    to see if the source view controller is a `LocationViewController` instance. If
    it is, the value of the `LocationViewController` instance's `selectedCity` property
    is assigned to the `ExploreViewController` instance's `selectedCity` property,
    if it exists. If the `ExploreViewController` instance's `selectedCity` property
    has a value, it is assigned to `location`, and the text of the subtitle label
    is set to the `cityAndState` property of `location`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `collectionView(_:viewForSupplementaryElementOf Kind:at:)` method
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `Main` storyboard file. Select the **Location View Controller Scene**.
    To set the method to be triggered by the **Done** button, *Ctrl + Drag* from the
    **Done** button to the Exit icon in the Scene Dock:![Figure 17.5: Location View
    Controller Scene showing Done button action being set'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.05_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.5: Location View Controller Scene showing Done button action being
    set'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose `unwindLocationDoneWithSegue:` from the pop-up menu. This links the
    `unwindLocationDone(segue:)` unwind action in the `ExploreViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.6: Pop-up menu with unwindLocationDoneWithSegue: selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.06_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.6: Pop-up menu with unwindLocationDoneWithSegue: selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app and tap the **LOCATION** button. Tap a city and a tick
    will appear in the row. Tap **Done**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.7: iOS Simulator showing Locations screen with location selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.07_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.7: iOS Simulator showing Locations screen with location selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'The selected city name and state will replace the **PLEASE SELECT A LOCATION**
    text in the subtitle label inside the collection view section header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.8: iOS Simulator showing Explore screen with subtitle label set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.08_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.8: iOS Simulator showing Explore screen with subtitle label set'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although this works, there are two issues that you need to fix when selecting
    a location. The first issue is that you can select multiple locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.9: iOS simulator showing Locations screen with multiple locations
    selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.09_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.9: iOS simulator showing Locations screen with multiple locations
    selected'
  prefs: []
  type: TYPE_NORMAL
- en: You want the user to only select one location, and if another is selected, the
    location selected earlier should be deselected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second issue is that the checkmark next to the user-selected location disappears
    if you click **Done** in the **Locations** screen and click the **LOCATION** button
    in the **Explore** screen again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.10: iOS simulator showing Locations screen with missing checkmark'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.10_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.10: iOS simulator showing Locations screen with missing checkmark'
  prefs: []
  type: TYPE_NORMAL
- en: The last selected location should have a checkmark when you go back to the **Locations**
    screen again.
  prefs: []
  type: TYPE_NORMAL
- en: Let's modify the `LocationDataManager` class to make sure only one location
    can be selected at a time in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting only one location in the Locations screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, you can select multiple locations in the **Locations** screen.
    You should only be able to select one location, and if another is selected, the
    previously selected location selected should be deselected. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `LocationItem` file. Make `LocationItem` conform to the `Equatable`
    protocol by modifying the `LocationItem` structure as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `LocationViewController` file. After the `viewDidLoad()` method,
    add a method that sets a checkmark only on the row containing the selected city:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `setCheckmark(for:location:)` method takes `cell`, a table view cell, and
    `location`, a `LocationItem` instance, as arguments. If `location` and `selectedCity`
    are equal, the checkmark for that row is set. Otherwise, the checkmark is not
    set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `tableView(_:cellForRowAt:)` method, modify the code as follows to call
    `setCheckmark(for:location:)` after the line that sets the text for the cell''s
    `textLabel` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `tableView(_:didSelectRowAt:)` method, modify the code in the `if` statement
    as follows to reload the table view (thus rendering all the rows in it) after
    a location has been selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run your project. You should only be able to set one location now,
    and if you choose another location, the location you chose earlier will be deselected.
  prefs: []
  type: TYPE_NORMAL
- en: You'll fix the second issue in the next section so that once a location is selected,
    it will remain selected when you go back to the `RestaurantListViewController`
    instance, so it can eventually display a list of restaurants at a particular location
    matching the cuisine selected by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: This is a long chapter, so you may wish to take a break here.
  prefs: []
  type: TYPE_NORMAL
- en: Passing location and cuisine information to the RestaurantListViewController
    instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At present, you''re able to set a location in the `RestaurantListViewController`
    instance, which will then display the restaurants at the selected location that
    offer the selected cuisine. You''ll also make the checkmark next to your selected
    location reappear if you have selected a location in the **Locations** screen
    earlier. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll add identifiers for each segue connected to the `Main` storyboard file
    and click the **Explore View Controller Scene**. Select the segue between the
    **Explore View Controller Scene** and the **Location View Controller Scene**:![Figure
    17.11: Editor area showing segue between Explore and Location screens selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.11_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.11: Editor area showing segue between Explore and Location screens
    selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Attributes inspector button. Under `locationList`:![Figure 17.12:
    Attributes inspector with Identifier set to locationList'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.12_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.12: Attributes inspector with Identifier set to locationList'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the segue between `restaurantList`:![Figure 17.13: Attributes inspector
    identifier setting for the segue between'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the Explore and Restaurant List screens
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_17.13_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.13: Attributes inspector identifier setting for the segue between
    the Explore and Restaurant List screens'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you know which segue is occurring, you can specify the methods to be executed
    for each segue. You'll create two methods, `showLocationList(segue:)` and `showRestaurantList(segue:)`,
    and you'll use the `prepare(for:sender:)` method to execute the desired method
    depending on which segue is occurring.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `ExploreViewController` file in the Project navigator. Inside the
    `private` extension, declare and define the `showLocationList(segue:)` method
    before the `unwindLocationCancel()` method to pass the user-selected city back
    to the `LocationViewController` instance if it was set earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `showLocationList(segue:)` method will be called before the `Main` storyboard
    file, you embedded the `viewControllers` property that holds an array of view
    controllers, and the last view controller in the array has its view visible onscreen.
    You can access the last view controller in the array using the `topViewController`
    property of the navigation controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `guard` statement checks whether the segue destination is a `UINavigationController`
    instance and whether `topViewController` is the `LocationViewController` instance.
    If it is, the `selectedCity` property of the `ExploreViewController` instance
    is checked to see if it contains a value. If it does, that value is assigned to
    the `selectedCity` property of the `LocationViewController` instance. Remember
    that the `setCheckmark(for:at:)` method of the `LocationViewController` instance
    will be called for each row in the table view, and this sets a checkmark on the
    row containing the selected city.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This will fix the second issue with the `RestaurantListViewController` instance.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `RestaurantListViewController` file in the Project navigator. Add
    the following properties inside the `RestaurantListViewController` class just
    before the `@IBOutlet` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code after the `viewDidLoad()` method to print the selected
    city and cuisine to the Debug area when the view for the `RestaurantListViewController`
    instance appears onscreen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`viewDidAppear()` is called every time a view controller''s view appears onscreen,
    while `viewDidLoad()` is only called once when a view controller initially loads
    its view. `viewDidAppear()` is used here because the `RestaurantListViewController`
    instance will show a different list of restaurants each time its view appears
    onscreen, depending on the choices made by the user. At the moment, the code just
    prints the selected location and cuisine to the Debug area, so you can see that
    these values are being passed correctly.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To learn more about the view controller lifecycle, see this link: [https://developer.apple.com/documentation/uikit/uiviewcontroller](https://developer.apple.com/documentation/uikit/uiviewcontroller).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `ExploreViewController` file in the Project navigator. Declare and
    define the `showRestaurantList(segue:)` method after the `showLocationList(segue:)`
    method to set the `RestaurantListViewController` instance''s `selectedCuisine`
    and `selectedCity` properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will call this method before the `if-let` statement checks to see whether
    the destination view controller is the `RestaurantListViewController` instance,
    sets `city` to the `selectedCity` value of the `ExploreViewController` instance
    if it is, and gets the index of the collection view cell the user tapped. If the
    statement is successful, the `RestaurantListViewController` instance's `selectedCuisine`
    property is set to the `name` of the `ExploreItem` instance located at that index
    in the `items` array. In the next line, the `RestaurantListViewController` instance's
    `selectedCity` property will be assigned the value stored in `city`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For this method to work, the `selectedCity` property of the `ExploreViewController`
    instance has to be set first before transitioning to the **Restaurant Detail**
    screen. You will alert the user to set the city before choosing a cuisine. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `ExploreViewController` file in the Project navigator. Add the following
    method before `unwindLocationCancel()` to display an alert:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `showLocationRequiredAlert()` method creates a `UIAlertController` instance
    with the title set to `"Location Needed"` and a message, `"Please select a location."`.
    A `UIAlertAction` instance with an OK button is then added to the `UIAlertController`
    instance. Finally, the alert is presented to the user, and tapping the OK button
    dismisses it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code after `viewDidLoad()` to display this alert if a location
    has not been selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `shouldPerformSegue(withIdentifier:sender:)` method is used to check whether
    the `restaurantList` and if the `selectedCity` is set; if not, the `showLocationRequiredAlert()`
    method is called and `shouldPerformSegue(withIdentifier:sender:)` returns `false`.
    Otherwise, `shouldPerformSegue(withIdentifier:sender:)` returns `true`, and the
    **Restaurant List** screen appears.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that you''ve created the `showLocationList(segue:)` and the `showRestaurantList(segue:)`
    methods, you''ll add code to implement the `prepare(for:sender:)` method after
    `viewDidLoad()` and before `shouldPerformSegue(withIdentifier:)`. This method
    calls `showLocationList(segue:)` or `showRestaurantList(segue:)` depending on
    the segue that will be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: When the `locationList`, so the `showLocationList(segue:)` method is executed
    before the transition to the `restaurantList`, so the `showRestaurantListing(segue:)`
    method is executed before the transition to the `selectedType` and `selectedCity`
    properties in the `RestaurantListViewController` instance, which will be printed
    to the Debug area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your project. If you try to select a cuisine, you''ll see this
    alert, stating you need to select a location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.14: iOS Simulator showing alert'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.14_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.14: iOS Simulator showing alert'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you pick a location, tap **Done**, and tap the **LOCATION** button again
    the location you selected earlier should still be selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.15: iOS simulator showing Locations screen with checkmark'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.15_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.15: iOS simulator showing Locations screen with checkmark'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you pick a cuisine, you''ll see the **Restaurant List** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.16: iOS Simulator showing Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.16_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.16: iOS Simulator showing Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'The location and cuisine you picked will appear in the Debug area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.17: Debug area showing location and cuisine you selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.17_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.17: Debug area showing location and cuisine you selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the `RestaurantListViewController` instance has a location, you can
    get the restaurant data for that location from the `RestaurantDataManager` instance.
    Click the `RestaurantListViewController` file in the Project navigator and update
    `viewDidAppear()` as follows. This prints the list of restaurants from the selected
    location that serves the selected cuisine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `guard` statement checks to see if `city` and `cuisine` have been assigned
    values successfully, and returns if they have not. Next, an instance of `RestaurantDataManager`
    is created and assigned to `manager`. The `fetch(location:selectedCuisine:completion:)`
    method returns an array of `RestaurantItem` instances for the selected `city`
    and `cuisine`, and the `for` loop prints the restaurant names to the Debug area.
    If there are no restaurants matching the criteria, `No data` will be printed to
    the Debug area. Build and run your project, select a city, tap a cuisine, and
    note the results in the Debug area.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see the results in the Report navigator. Click the Report navigator
    button and select the first entry as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.18: Report navigator showing list of restaurant names'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.18_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.18: Report navigator showing list of restaurant names'
  prefs: []
  type: TYPE_NORMAL
- en: You'll see either a list of restaurants or `No data` in the Editor area.
  prefs: []
  type: TYPE_NORMAL
- en: So, at this point, the `RestaurantListViewController` instance is successfully
    getting the data that it needs to display the list of restaurants. Now that you
    have this data, you need to configure the collection view to display it to the
    user. To do that, you will need to create a view controller for the collection
    view cells, and configure the `RestaurantListViewController` instance to populate
    them. You will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a view controller for the cells on the Restaurant List screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present the `RestaurantCell` class for this purpose. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Restaurants` folder and choose `View`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `View` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`RestaurantCell`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UICollectionViewCell`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click `RestaurantCell` file appears in the Project navigator. It contains the
    implementation of the `RestaurantCell` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now let's create the outlets for the collection view cell in the `RestaurantCell`
    class. You will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the outlets for the RestaurantCell class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you''ve created the `RestaurantCell` class, you''ll need to create
    outlets in it and link them to the UI elements inside the collection view cells
    for the `RestaurantCell` instances to manage what is displayed by the collection
    view cell. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file. Click `restaurantCell` in the `RestaurantCell`:![Figure
    17.19: Identity inspector Class settings for restaurantCell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.19_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.19: Identity inspector Class settings for restaurantCell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `RestaurantCell.swift`) to be displayed in the assistant editor when the
    Adjust Editor Options button is clicked:![Figure 17.20: Document outline with
    Available Times label selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.20_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.20: Document outline with Available Times label selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the Adjust Editor Options button and choose **Assistant** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The assistant editor appears. The path bar at the top should show `RestaurantCell`
    file:![Figure 17.21: Assistant editor showing RestaurantCell.swift'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.21_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.21: Assistant editor showing RestaurantCell.swift'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the box that appears, type `titleLabel` in the **Name** field and click
    **Connect**:![Figure 17.22: Dialog box showing label Name set to titleLabel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.22_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.22: Dialog box showing label Name set to titleLabel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Ctrl + Drag* from the subtitle `titleLabel` property you just created. In
    the box that appears, type `cuisineLabel` in the **Name** field and click **Connect**:![Figure
    17.23: Dialog box showing label Name set to cuisineLabel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.23_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.23: Dialog box showing label Name set to cuisineLabel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Ctrl + Drag* from the `american` image view to just after the other properties
    you created. In the box that appears, type `restaurantImageView` in the **Name**
    field and click **Connect**:![Figure 17.24: Dialog box showing image view Name
    set to restaurantImageView'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_17.24_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.24: Dialog box showing image view Name set to restaurantImageView'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **x** button to close the assistant editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The outlets for the `RestaurantCell` class are now connected to the UI elements
    in the collection view cell. Later you'll configure the `RestaurantListViewController`
    instance to populate this collection view, but before you do, there is a possibility
    to consider. The user's choices for location and cuisine may not return any results,
    so you will implement a screen that informs the user when there is no data to
    be displayed. You'll do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a custom UIView to indicate no data is available
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The location and cuisine choices the user makes on the `UIView` subclass and
    an accompanying **XIB** file. XIB stands for **Xcode Interface Builder** and XIB
    files were used to create the user interface before storyboards were implemented.
    Let''s create both files now by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Misc` folder and select `No Data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `No Data` folder and choose **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`NoDataView`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UIView`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `NoDataView` file appears in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `No Data` folder and create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **View** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `NoDataView`. Click `NoDataView` XIB file appears in the Project
    navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `NoDataView` file in the Project navigator and declare and define
    the `NoDataView` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This class is a subclass of the `UIView` class, and it will manage the view
    in the `NoDataView` XIB file. Let''s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`view` will be assigned the view from the `NoDataView` XIB file during initialization.'
  prefs: []
  type: TYPE_NORMAL
- en: '`titleLabel` and `descLabel` will be assigned to two `UILabel` instances that
    will be placed in the `NoDataView` XIB file when you build the user interface
    in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NoDataView` class is a subclass of `UIView`. A `UIView` object has two
    `init` methods: the first handles view creation programmatically, and the second
    handles the loading of XIB files from the app bundle stored on the device. Here,
    both methods will call `setupView()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This method finds and loads the `NoDataView` XIB file from the app bundle and
    returns a `UIView` instance stored inside it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This method calls `loadViewFromNib()`, configures the view so it is the same
    size as the device screen, makes the width and height of the view flexible to
    adapt to size and orientation changes, and adds it to the device view hierarchy
    so it is visible onscreen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This method sets the text of the `titleLabel` and `descLabel` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s set up the `NoDataView` XIB file. You may want to refer to [*Chapter
    12*](B17469_12_Final_VK_ePub.xhtml#_idTextAnchor182)*, Modifying and Configuring
    Cells*, which covers using the Size inspector and the Auto Layout constraint menus
    in more detail. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `NoDataView` XIB file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `NoDataView` and press *Return*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Library button to display the library. Type `label` in the filter
    field. A **Label** object appears in the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag two **Label** objects into the **View**, with one **Label** object above
    the other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the top label to represent the title. In the Attributes inspector, update
    the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TITLE GOES HERE` to the text field under the `Default (Label Color)`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Center`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`System Bold 26.0`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With the same label selected, update the following values in the Size inspector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`335`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`36`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the bottom label. This will represent the description. In the Attributes
    inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Description goes here` to the text field under the `Default (Label Color)`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Center`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`System Thin 17.0`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the Size inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`335`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`21`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select both labels by clicking the first label and holding down the *Shift*
    key while selecting the second label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With both labels still selected, click the **Editor** menu and choose **Embed
    In** | **Stack View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Vertical`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Center`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`8`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the `10`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`10`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Add 2 constraints** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With the **Stack View** still selected, click the Align button. Set the following
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Horizontally in Container** (ticked)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Vertically in Container** (ticked)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Add 2 Constraints** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **File's Owner** in the document outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Connections inspector and connect `titleLabel` to the label that says
    `TITLE GOES HERE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect `descLabel` to the other label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are done, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.25: Editor area showing NoDataView XIB file contents'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.25_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.25: Editor area showing NoDataView XIB file contents'
  prefs: []
  type: TYPE_NORMAL
- en: You have completed configuring `NoDataView.xib`. Now, let's put it all together
    so that the `NoDataView` if there aren't any restaurants offering the selected
    cuisine at a particular location. You will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a list of restaurants on the Restaurant List screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You now have everything you need to display a list of restaurants based on
    the selected location and cuisine on the **Restaurant List** screen. So, now it''s
    time to put it all together. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `RestaurantListViewController` file in the Project navigator. Before
    the `selectedRestaurant` property, add the following to create an instance of
    `RestaurantDataManager` and assign it to a `manager` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the following method inside the `private` extension to populate `manager`'s
    `items` array and to set the background view for the `selectedCity` and `selectedCuisine`
    properties are set; if they are, assign `selectedCity` to `city` and `selectedCuisine`
    to `cuisine`. Otherwise, exit the method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Calls the `fetch(location:selectedCuisine:completion:)` method of the `RestaurantDataManager`
    instance, which loads the appropriate `RestaurantItem` instances into its `restaurantItems`
    array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the `restaurantItems` array of the `RestaurantDataManager` instance is not
    empty, set `backgroundView` of the `collectionView` instance to `nil`. Otherwise,
    create an instance of `NoDataView`, set its title and description, and set it
    as the `backgroundView` property of the `collectionView` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tells `collectionView` to refresh its view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update `collectionView(_:cellForItemAt:)` as follows to set the `RestaurantCell`
    instance''s properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: cell.titleLabel.text = restaurantItem.name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: if let cuisine = restaurantItem.subtitle {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cell.cuisineLabel.text = cuisine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: if let imageURL = restaurantItem.imageURL {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if let url = URL(string: imageURL) {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let data = try? Data(contentsOf: url)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if let imageData = data {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: DispatchQueue.main.async {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cell.restaurantImageView.image =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'UIImage(data: imageData)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: return cell
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `collectionView(_:numberOfItemsInSection:)` as follows to get the number
    of collection views to be displayed from `manager`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `viewDidAppear()` as follows to call `createData()` when the collection
    view appears onscreen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run your app. Set a location and click a cuisine. If there are restaurants
    that match the selected criteria, you'll see them displayed in the `NoDataView`
    instance will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.26: iOS simulator showing Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.26_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.26: iOS simulator showing Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you finish with the `RestaurantListViewController` class, there is just
    one more thing. It would be nice if the selected city were shown in the **Restaurant
    List** screen. Let''s add code to display it at the top of the **Restaurant List**
    screen''s navigation bar using large titles. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `RestaurantListViewController` file, add the following method into the
    `private` extension after `createData()` to display the selected city in the navigation
    bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Every `UIViewController` instance has a `title` property, and if the navigation
    bar is visible, `title` will be visible as well. This method shows the navigation
    bar and sets the `RestaurantListViewController` instance's `title` to a string
    containing the city and state names in uppercase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call `setupTitle()` after `createData()` in the `viewDidLoad()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run your app. Select a location and cuisine. You should see the city
    and state in uppercase letters at the top of the **Restaurant List** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.27: iOS Simulator showing Restaurant List screen with title'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.27_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.27: iOS Simulator showing Restaurant List screen with title'
  prefs: []
  type: TYPE_NORMAL
- en: You have completed the implementation of the **Restaurant List** screen, and
    you have finally reached the end of this chapter. Good job!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have accomplished a lot in this chapter. You started by learning about the
    JSON format, and you created the `RestaurantDataManager` class, a data manager
    class that can load data from JSON files. You configured the `MapViewController`
    class to get data from a `RestaurantDataManager` instance to display a list of
    restaurants on the `LocationViewController` class to store the location selected
    by the user and pass it to an `ExploreViewController` instance when the `ExploreViewController`
    class to pass the selected location and cuisine to the `RestaurantListViewController`
    instance when a type of cuisine is selected. Finally, you configured the `RestaurantListViewController`
    class to get a list of restaurants from the `RestaurantDataManager` instance,
    and display them in the `NoDataView` class and view, which is displayed if there
    are no restaurants at a particular location offering the selected cuisine.
  prefs: []
  type: TYPE_NORMAL
- en: You are now able to load and read data from JSON files and pass that data between
    different view controllers in your app for display in collection views and map
    views. You also learned how to use `UITableViewController` delegate methods to
    handle user interaction with table views. This will be useful when you're creating
    your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll implement the **Restaurant Detail** screen, which
    displays details of a specific restaurant using a table view containing static
    cells.
  prefs: []
  type: TYPE_NORMAL
