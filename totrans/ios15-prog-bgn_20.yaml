- en: '*Chapter 17*: Getting Started with JSON Files'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第17章*: 开始使用 JSON 文件'
- en: In the previous chapter, you configured the `.plist` file. You configured custom
    annotations for each restaurant location and configured the callout buttons in
    them to present the **Restaurant Detail** screen when tapped. You also organized
    your code using extensions to make it easier to read and maintain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您配置了 `.plist` 文件。您为每个餐厅位置配置了自定义注释，并在其中配置了呼出按钮，以便在点击时显示**餐厅详情**屏幕。您还使用扩展来组织代码，使其更容易阅读和维护。
- en: In this chapter, you will use data stored in `.plist` file. Next, you'll configure
    the `LocationViewController` class to store the location selected by the user
    in the `ExploreViewController` instance when the `ExploreViewController` class
    to pass the selected location and cuisine to the `RestaurantListViewController`
    instance when a type of cuisine is selected. Finally, the `RestaurantListViewController`
    class will then be modified to get a list of restaurants from a JSON file corresponding
    to the selected location and cuisine and display them in the **Restaurant List**
    screen.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用存储在 `.plist` 文件中的数据。接下来，您将配置 `LocationViewController` 类以在用户在 `ExploreViewController`
    实例中选择位置时存储该位置，当选择一种菜系时，`ExploreViewController` 类将传递所选位置和菜系到 `RestaurantListViewController`
    实例。最后，`RestaurantListViewController` 类将被修改以从与所选位置和菜系对应的 JSON 文件中获取餐厅列表并显示在**餐厅列表**屏幕上。
- en: By the end of this chapter, you'll know how to load and parse data from JSON
    files for use in your own apps. You'll also learn about `UITableViewDelegate`
    methods and ways to pass data from one view controller to another.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解如何从 JSON 文件中加载数据并进行解析，以便在自己的应用中使用。您还将学习关于 `UITableViewDelegate` 方法以及如何从一个视图控制器传递数据到另一个视图控制器的方法。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Getting data from JSON files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 JSON 文件中获取数据
- en: Using data from JSON files in your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的应用中使用来自 JSON 文件的数据
- en: Configuring the `MapDataManager` instance to use data from the `RestaurantDataManager`
    instance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 `MapDataManager` 实例以使用来自 `RestaurantDataManager` 实例的数据
- en: Storing a user-selected location
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储用户选择的地点
- en: Passing location and cuisine information to the `RestaurantListViewController`
    instance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将位置和菜系信息传递给 `RestaurantListViewController` 实例
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您将继续在上一章中修改的 `LetsEat` 项目上工作。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter17` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源文件和完成的 Xcode 项目位于本书代码包的 `Chapter17` 文件夹中，可在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际运行情况：
- en: '[https://bit.ly/3Hl8Ulz](https://bit.ly/3Hl8Ulz)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3Hl8Ulz](https://bit.ly/3Hl8Ulz)'
- en: Let's start by learning how to read and parse JSON files to get data for use
    in your app.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习如何读取和解析 JSON 文件以获取用于应用中的数据开始。
- en: Getting data from JSON files
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 JSON 文件中获取数据
- en: In [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*, Getting
    Data into Collection Views*, you learned how to load a file, read data from it
    using a data manager class, and put it into objects in your app. In this chapter,
    you will also do the same thing, the difference is that you will be reading data
    from a JSON file instead of a `.plist` file. This will simulate reading data from
    an online web-based service, where JSON is a commonly used format. Let's start
    by learning more about JSON files and how they work.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第14章*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*，将数据加载到集合视图中*，您学习了如何加载文件，使用数据管理类从文件中读取数据，并将其放入应用中的对象中。在本章中，您也将做同样的事情，不同的是，您将读取来自
    JSON 文件而不是 `.plist` 文件的数据。这将模拟从在线基于 Web 的服务中读取数据，其中 JSON 是一种常用的格式。让我们先了解更多关于 JSON
    文件以及它们是如何工作的信息。
- en: Understanding the JSON format
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 JSON 格式
- en: JavaScript Object Notation (JSON) is a way to structure data in a file that
    can be easily read by both people and computers. Many iOS apps work with an online
    web-based service to access JSON files, which are then used to provide the app
    with data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 对象表示法 (JSON) 是一种在文件中结构化数据的方式，既可以被人阅读，也可以被计算机读取。许多 iOS 应用通过与在线基于 Web
    的服务合作来访问 JSON 文件，这些文件随后被用来为应用提供数据。
- en: You will not be learning about how to connect to an online service in this chapter.
    Instead, you will use sample JSON files downloaded from [http://opentable.herokuapp.com](http://opentable.herokuapp.com),
    which have been modified by Craig Clayton for this book. As you will see, working
    with JSON files is similar to working with `.plist` files.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将不会学习如何连接到在线服务。相反，您将使用从 [http://opentable.herokuapp.com](http://opentable.herokuapp.com)
    下载的示例 JSON 文件，这些文件已被 Craig Clayton 为本书修改。您将看到，处理 JSON 文件与处理 `.plist` 文件类似。
- en: 'To help you to understand the JSON format, you will add the sample JSON files
    to your project and look at the structure of one of them. Follow these steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您理解 JSON 格式，您需要将示例 JSON 文件添加到您的项目中，并查看其中一个的结构。按照以下步骤操作：
- en: In the Project navigator, create a new group inside the `Misc` folder and name
    it `JSON`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，在 `Misc` 文件夹内创建一个新的组，并将其命名为 `JSON`。
- en: 'If you have not yet downloaded the project files for this chapter, go ahead
    and download them from this link: [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未下载本章的项目文件，请从以下链接下载：[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).
- en: Unzip the folder and open the `resources` folder in the `Chapter17` folder.
    You should see several JSON files inside.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压文件夹，打开 `Chapter17` 文件夹中的 `resources` 文件夹。您应该在里面看到几个 JSON 文件。
- en: Drag all of the JSON files there into the `JSON` folder you just created.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有 JSON 文件拖放到您刚刚创建的 `JSON` 文件夹中。
- en: Click **Finish** on the screen that appears.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的屏幕上点击 **完成**。
- en: 'Each JSON file contains restaurant details for a particular city. Click `Charleston.json`
    and you should see the following:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个 JSON 文件都包含特定城市的餐厅详细信息。点击 `Charleston.json`，您应该看到以下内容：
- en: '![Figure 17.1: Editor area showing contents for Charleston.json'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 17.1: Editor area showing contents for Charleston.json](img/Figure_17.01_B17469.jpg)'
- en: '](img/Figure_17.01_B17469.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_17.01_B17469.jpg](img/Figure_17.01_B17469.jpg)'
- en: 'Figure 17.1: Editor area showing contents for Charleston.json'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.1：显示 `Charleston.json` 内容的编辑区域
- en: As you can see, the file starts with an opening square bracket, and each item
    inside consists of key-value pairs containing restaurant information, enclosed
    by curly braces and separated by commas. At the very end of the file, you can
    see a closing square bracket. The square brackets denote arrays, and the curly
    braces denote dictionaries. In other words, the JSON file contains an array of
    dictionaries, exactly the same as the `.plist` files you have been using earlier.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，文件以一个开方括号开始，文件内的每个项目都由包含餐厅信息的键值对组成，这些键值对被花括号包围，并用逗号分隔。在文件的最后，您可以看到一个闭方括号。方括号表示数组，花括号表示字典。换句话说，JSON
    文件包含一个字典数组，这与您之前使用过的 `.plist` 文件完全相同。
- en: Now that you have seen what a JSON file looks like, let's create a data manager
    class to load data from JSON files into your app in the next section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了 JSON 文件的样子，让我们在下一节创建一个数据管理类，以便将数据从 JSON 文件加载到您的应用中。
- en: Creating the RestaurantDataManager class
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 `RestaurantDataManager` 类
- en: You have learned how to create a data manager class to load data from a `.plist`
    file in [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*, Getting
    Data into Collection Views*. You will now create `RestaurantDataManager`, a data
    manager class that loads data from the JSON files that you added to your project
    earlier. As you will see, loading data from a JSON file will be similar to loading
    data from a `.plist` file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何在 [*第 14 章*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201) “将数据放入集合视图”
    中创建一个数据管理类来从 `.plist` 文件加载数据。现在，您将创建 `RestaurantDataManager`，这是一个数据管理类，用于从您之前添加到项目中的
    JSON 文件加载数据。您将看到，从 JSON 文件加载数据将与从 `.plist` 文件加载数据类似。
- en: Important Information
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'To learn more about parsing JSON files, watch the video available here: [https://developer.apple.com/videos/play/wwdc2017/212/](https://developer.apple.com/videos/play/wwdc2017/212/).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于解析 JSON 文件的信息，请观看这里可用的视频：[https://developer.apple.com/videos/play/wwdc2017/212/](https://developer.apple.com/videos/play/wwdc2017/212/).
- en: Before you create the `RestaurantDataManager` class, you'll need to modify the
    `RestaurantItem` class so it conforms to the `Decodable` protocol. Adopting this
    protocol allows you to use the `JSONDecoder` class to populate `RestaurantItem`
    instances using data from JSON files.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在您创建 `RestaurantDataManager` 类之前，您需要修改 `RestaurantItem` 类，使其符合 `Decodable` 协议。采用此协议允许您使用
    `JSONDecoder` 类，通过 JSON 文件中的数据填充 `RestaurantItem` 实例。
- en: Important Information
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'To learn more about Decodable and the JSON Decoder class, see these links:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Decodable和JSON解码器类的信息，请查看以下链接：
- en: '[https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types](https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types](https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types)'
- en: '[https://developer.apple.com/documentation/foundation/jsondecoder](https://developer.apple.com/documentation/foundation/jsondecoder)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/documentation/foundation/jsondecoder](https://developer.apple.com/documentation/foundation/jsondecoder)'
- en: 'To modify the `RestaurantItem` class so it conforms to the `Decodable` protocol,
    follow these steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改`RestaurantItem`类以使其符合`Decodable`协议，请按照以下步骤操作：
- en: 'In the Project navigator, click the `RestaurantItem` file inside the `Model`
    folder in the `Map` folder. Modify the class declaration for `RestaurantItem`
    as shown to adopt the `Decodable` protocol:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击`Map`文件夹中`Model`文件夹内的`RestaurantItem`文件。修改`RestaurantItem`类的声明以采用`Decodable`协议，如下所示：
- en: '[PRE0]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Remove the `init()` method and add the following enumeration to make the `RestaurantItem`
    class conform to the `Decodable` protocol:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`init()`方法并添加以下枚举以使`RestaurantItem`类符合`Decodable`协议：
- en: '[PRE1]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `CodingKeys` enumeration matches the `RestaurantItem` class properties to
    the keys in the JSON file. This allows the `JSONDecoder` instance to get values
    from the JSON file and assign them to properties in the `RestaurantItem` class.
    If the key name does not match the property name, you can map the key to the property,
    as shown in the preceding code block for `postalCode`, `imageURL`, and restaurantID.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CodingKeys`枚举将`RestaurantItem`类的属性与JSON文件中的键匹配。这允许`JSONDecoder`实例从JSON文件中获取值并将它们分配给`RestaurantItem`类中的属性。如果键名与属性名不匹配，你可以将键映射到属性，如前一个代码块中所示，对于`postalCode`、`imageURL`和restaurantID。'
- en: After you modify the `RestaurantItem` class, you'll see an error in the `fetch(completion:)`
    method in the `MapDataManager` file. Don't worry about it as you will fix it in
    the next section.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改`RestaurantItem`类后，你将在`MapDataManager`文件中的`fetch(completion:)`方法中看到一个错误。不用担心，你将在下一节中修复它。
- en: 'Now let''s create the `RestaurantDataManager` class, which will read the JSON
    file and put the data into an array of `RestaurantItem` instances. Follow these
    steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建`RestaurantDataManager`类，它将读取JSON文件并将数据放入一个`RestaurantItem`实例数组中。按照以下步骤操作：
- en: Right-click on the `Restaurants` folder and create a new group named `Model`.
    Then right-click on the `Model` folder and choose **New File**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Restaurants`文件夹，创建一个名为`Model`的新组。然后右键点击`Model`文件夹并选择**New File**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Swift File**然后点击**Next**。'
- en: Name this file `RestaurantDataManager`. Click `RestaurantDataManager` file appears
    in the Project navigator.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`RestaurantDataManager`。点击`RestaurantDataManager`文件出现在项目导航器中。
- en: 'Add the following after the `import` statement to declare the `RestaurantDataManager`
    class:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`import`语句之后添加以下内容以声明`RestaurantDataManager`类：
- en: '[PRE2]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following property between the curly braces to hold an array of `RestaurantItem`
    instances:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号之间添加以下属性以保存一个`RestaurantItem`实例数组：
- en: '[PRE3]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `restaurantItems` array will store the `RestaurantItem` instances obtained
    from the JSON file. The `private` keyword means it is only accessible from within
    this class.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`restaurantItems`数组将存储从JSON文件中获取的`RestaurantItem`实例。`private`关键字表示它只能从这个类内部访问。'
- en: 'Add the following method after the `restaurantItems` property to read a JSON
    file and return an array of `RestaurantItem` instances:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`restaurantItems`属性之后添加以下方法以读取JSON文件并返回一个`RestaurantItem`实例数组：
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s break this down:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This method takes three parameters: `location`, a string containing the restaurant
    location, `selectedCuisine`, a string containing the cuisine selected by the user,
    and `completionHandler`, a closure used to process the result of this method when
    it has finished execution. If you do not provide a value for `selectedCuisine`,
    it will default to `"All"`.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法接受三个参数：`location`，一个包含餐厅位置的字符串，`selectedCuisine`，一个包含用户选择的菜系的字符串，以及`completionHandler`，一个闭包，用于在方法执行完毕后处理此方法的执行结果。如果您不提供`selectedCuisine`的值，它将默认为`"All"`。
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This gets the URL of the JSON file in the app bundle and assigns it to `file`.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将获取应用包中JSON文件的网络地址并将其分配给`file`。
- en: '`do` code block:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`do`代码块：'
- en: The first statement attempts to assign the contents of `file` to `data`. The
    next statement attempts to use a `JSONDecoder` instance to parse `data` and store
    it as an array of `RestaurantItem` instances, which is assigned to `restaurants`.
    In the next statement, if `selectedCuisine` is not `All`, the `filter` method
    is applied to the `restaurants` array using the `{($0.cuisines.contains(selectedCuisine))}`
    closure. This results in an array of `RestaurantItem` instances where the `cuisines`
    property contains the user-selected cuisine, and this array is assigned to `restaurantItems`.
    Otherwise, the entire `restaurants` array is assigned to `restaurantItems`.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一条语句尝试将`file`的内容分配给`data`。下一条语句尝试使用`JSONDecoder`实例解析`data`并将其存储为`RestaurantItem`实例数组，该数组被分配给`restaurants`。在下一条语句中，如果`selectedCuisine`不是`All`，则使用`{($0.cuisines.contains(selectedCuisine))}`闭包将`filter`方法应用于`restaurants`数组。这导致一个`RestaurantItem`实例数组，其中`cuisines`属性包含用户选择的菜系，并将此数组分配给`restaurantItems`。否则，整个`restaurants`数组被分配给`restaurantItems`。
- en: '`catch` code block:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`catch`代码块：'
- en: This prints an error message to the Debug area if the `do` code block fails.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`do`代码块失败，此操作将在调试区域打印错误信息。
- en: '[PRE7]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This statement processes the `restaurantItems` array using the closure provided.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此语句使用提供的闭包处理`restaurantItems`数组。
- en: Note that when you call this method in Xcode, the autocomplete feature gives
    you two possible choices; one that includes the `selectedCuisine:` parameter (that
    takes a string containing the selected cuisine) and one that doesn't (`selectedCuisine`
    is set to All).
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，当你使用Xcode调用此方法时，自动完成功能会给你两个可能的选择；一个包含`selectedCuisine:`参数（该参数包含所选菜系字符串）的选项，另一个不包含（`selectedCuisine`设置为全部）。
- en: 'Add a method after the `fetch(location:selectedCuisine:completionHandler:)`
    method to return the number of items in the `restaurantItems` array:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`fetch(location:selectedCuisine:completionHandler:)`方法之后添加一个方法，返回`restaurantItems`数组中的项目数量：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You'll call this method to determine the number of collection view cells to
    display in the **Restaurant List** screen.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将调用此方法来确定在**餐厅列表**屏幕中显示的收集视图单元格的数量。
- en: 'Add a method just after the `numberOfRestaurantItems()` method to return a
    `RestaurantItem` instance from the `restaurantItems` array at the index provided:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`numberOfRestaurantItems()`方法之后添加一个方法，从`restaurantItems`数组中返回索引提供的`RestaurantItem`实例：
- en: '[PRE9]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You'll call this method to configure the content of each collection view cell
    in the **Restaurant List** screen.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将调用此方法来配置**餐厅列表**屏幕中每个收集视图单元格的内容。
- en: The `RestaurantDataManager` class has been created, which allows you to read
    data stored in `JSON` files and put it into an array of `RestaurantItem` instances.
    Before you can use it, you'll need to modify your project quite a bit. Let's see
    what's required to display restaurant information in the **Map** and **RestaurantList**
    screens in the next section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 已创建`RestaurantDataManager`类，它允许你读取存储在`JSON`文件中的数据并将其放入`RestaurantItem`实例数组中。在使用它之前，你需要相当大幅度地修改你的项目。让我们看看在下一节中显示**地图**和**餐厅列表**屏幕所需的条件。
- en: Using data from JSON files in your app
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的应用中使用来自JSON文件的数据
- en: Let's review how the app works. In the **Map** screen, the user will see all
    the restaurants near the user's location. Tapping a restaurant will display a
    callout bubble, and tapping the button in the callout button will display the
    details of said restaurant in the **Restaurant Detail** screen.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下应用的工作原理。在**地图**屏幕中，用户将看到用户位置附近的全部餐厅。点击餐厅将显示一个呼出气泡，点击呼出按钮将显示该餐厅的详细信息在**餐厅详情**屏幕中。
- en: In the **Explore** screen, the user will tap the **LOCATION** button and select
    a location such as **Charleston, NC** on the **Locations** screen. After a location
    has been selected, the user taps **Done** and will be returned to the **Explore**
    screen. The user will then select a cuisine in the **Explore** screen, and a list
    of restaurants in that location that offer that cuisine will be displayed in the
    **Restaurant List** screen. Tapping a restaurant will display the details of said
    restaurant in the **Restaurant Detail** screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在**探索**屏幕中，用户将点击**位置**按钮并在**位置**屏幕上选择一个位置，例如**查尔斯顿，北卡罗来纳州**。选择位置后，用户点击**完成**按钮，将返回到**探索**屏幕。然后，用户将在**探索**屏幕中选择一个菜系，该位置提供该菜系的餐厅列表将在**餐厅列表**屏幕中显示。点击餐厅将显示该餐厅的详细信息在**餐厅详情**屏幕中。
- en: 'You will do the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要执行以下操作：
- en: Configure the `MapViewController` class to get a list of restaurants from a
    JSON file instead of a `.plist` file. This will also fix the error in the `MapDataManager`
    class's `fetch(completion:)` method.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`MapViewController`类，以便从JSON文件而不是`.plist`文件中获取餐厅列表。这将修复`MapDataManager`类中的`fetch(completion:)`方法的错误。
- en: Configure the `LocationViewController` class to store the location selected
    by the user.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`LocationViewController`类以存储用户选定的位置。
- en: Pass the selected location to the `ExploreViewController` instance.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将选定的位置传递给`ExploreViewController`实例。
- en: Configure the `ExploreViewController` class to pass the selected location and
    cuisine to the `RestaurantListViewController` instance.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`ExploreViewController`类，以便将选定的位置和菜系传递给`RestaurantListViewController`实例。
- en: Configure the `RestaurantListViewController` class to get a list of restaurants
    from a JSON file corresponding to the selected location.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`RestaurantListViewController`类，以便从与选定位置对应的JSON文件中获取餐厅列表。
- en: Configure the `RestaurantListViewController` class to display a list of restaurants
    based on the location and cuisine selected.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`RestaurantListViewController`类，以便根据选定的位置和菜系显示餐厅列表。
- en: This may seem daunting, so you'll do things step by step. To start, you'll configure
    the `MapDataManager` class to read data from JSON files instead of `.plist` files.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有些令人畏惧，所以您将逐步进行。首先，您将配置`MapDataManager`类，使其从JSON文件而不是`.plist`文件中读取数据。
- en: Configuring the MapDataManager instance to use data from the RestaurantDataManager
    instance
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置MapDataManager实例以使用RestaurantDataManager实例的数据
- en: 'Currently, there is an error in the `MapDataManager` file. This is because
    the `fetch(completion:)` method in your `MapDataManager` class calls the initializer
    method that you removed from the `RestaurantItem` class. You will now update the
    `MapDataManager` class to use the `RestaurantDataManager` instance as a data source,
    fixing the error in the process. Click the `MapDataManager` file (inside the `Model`
    folder in the `Map` folder) in the Project navigator and update the `fetch(completion:)`
    method as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`MapDataManager`文件中存在一个错误。这是因为您在`MapDataManager`类中的`fetch(completion:)`方法调用了您从`RestaurantItem`类中移除的初始化方法。您现在将更新`MapDataManager`类，使其使用`RestaurantDataManager`实例作为数据源，从而修复错误。在项目导航器中点击`MapDataManager`文件（位于`Map`文件夹中的`Model`文件夹内），并按以下方式更新`fetch(completion:)`方法：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s break this down:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This method has a completion method parameter. The completion method will be
    used to process the result when the method has finished execution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有一个完成方法参数。完成方法将在方法执行完毕后用于处理结果。
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This creates an instance of the `RestaurantDataManager` class and assigns it
    to `manager`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个`RestaurantDataManager`类的实例，并将其分配给`manager`。
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This calls the `manager` instance's `fetch()` method to get a list of restaurants
    from `Boston.json`. This is hardcoded for now as the iOS Simulator does not have
    a functional GPS. To see restaurants at a different location, change the name
    of the JSON file used to another location. The array of `RestaurantItem` instances
    returned by this method is assigned to the `MapViewController` instance's `items`
    array, and the completion method that was passed in is used to process this array.
    As you saw in the previous chapter, this will generate the annotations that will
    be added to the map view in the **Map** screen.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用`manager`实例的`fetch()`方法，从`Boston.json`获取餐厅列表。目前这是硬编码的，因为iOS模拟器没有功能性的GPS。要查看不同位置的餐厅，请更改用于另一个位置的JSON文件名称。此方法返回的`RestaurantItem`实例数组被分配给`MapViewController`实例的`items`数组，并且传入的完成方法用于处理此数组。正如您在上一章中看到的，这将生成将在**地图**屏幕中添加到地图视图的注释。
- en: Important Information
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about how to determine your location, visit [https://developer.apple.com/documentation/mapkit/mkmapview/converting_a_user_s_location_to_a_descriptive_placemark](https://developer.apple.com/documentation/mapkit/mkmapview/converting_a_user_s_location_to_a_descriptive_placemark).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于如何确定您位置的信息，请访问[https://developer.apple.com/documentation/mapkit/mkmapview/converting_a_user_s_location_to_a_descriptive_placemark](https://developer.apple.com/documentation/mapkit/mkmapview/converting_a_user_s_location_to_a_descriptive_placemark)。
- en: If you run your app now and select the **Map** screen, you should see pins for
    restaurants in Boston.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在运行您的应用程序并选择**地图**屏幕，您应该会看到波士顿的餐厅标记。
- en: In the next section, you'll configure the `LocationViewController` class so
    it can store the location selected by the user.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将配置`LocationViewController`类，使其能够存储用户选定的位置。
- en: Storing a user-selected location
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储用户选定的位置
- en: 'At present, the `LocationDataManager` class loads data from `Locations.plist`
    and stores location information in an array of strings. You will create a new
    structure, `LocationItem`, and configure the `LocationDataManager` class to store
    locations in an array of `LocationItem` instances. After that, you''ll modify
    the `LocationViewController` class so that it can store a `LocationItem` instance
    containing the user-selected location. You can then pass this instance to the
    `RestaurantListViewController` instance in your app. Follow these steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`LocationDataManager` 类从 `Locations.plist` 加载数据并将位置信息存储在字符串数组中。你将创建一个新的结构
    `LocationItem`，并配置 `LocationDataManager` 类以将位置存储在 `LocationItem` 实例数组中。之后，你将修改
    `LocationViewController` 类，使其能够存储包含用户选中位置的一个 `LocationItem` 实例。然后你可以将此实例传递到你的应用中的
    `RestaurantListViewController` 实例。按照以下步骤：
- en: Right-click on the `Model` folder inside the `Location` folder and select **New
    File**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Location` 文件夹内的 `Model` 文件夹，然后选择 **New File**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Swift File** 然后点击 **Next**。'
- en: Name this file `LocationItem`. Click `LocationItem` file appears in the Project
    navigator.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `LocationItem`。点击后，`LocationItem` 文件将出现在项目导航器中。
- en: 'Click the `LocationItem` file and add the following after the `import` statement
    to declare and define the `LocationItem` structure:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `LocationItem` 文件中，在 `import` 语句之后添加以下内容以声明和定义 `LocationItem` 结构：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `LocationItem` structure has two `String` properties, `city` and `state`.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LocationItem` 结构有两个 `String` 属性，`city` 和 `state`。'
- en: The `init()` method takes a dictionary, `dict`, as a parameter and assigns the
    values of the `city` and `state` keys to the `city` and `state` properties.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`init()` 方法接受一个字典 `dict` 作为参数，并将 `city` 和 `state` 键的值分配给 `city` 和 `state` 属性。'
- en: The `cityAndState` computed property returns a string made from combining the
    `city` and `state` values.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`cityAndState` 计算属性返回由 `city` 和 `state` 值组合而成的字符串。'
- en: 'Now you''ll update the `LocationDataManager` class so that it can store city
    and state information in an array of `LocationItem` instances instead of strings.
    Follow these steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将更新 `LocationDataManager` 类，使其能够将城市和州信息存储在 `LocationItem` 实例数组中而不是字符串。按照以下步骤：
- en: 'Click the `LocationDataManager` in the Project navigator and modify the `locations`
    array to store `LocationItem` instances instead of strings:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `LocationDataManager` 并修改 `locations` 数组以存储 `LocationItem` 实例而不是字符串：
- en: '[PRE15]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `fetch()` method will now show an error. Modify the `fetch()` method to
    work with `LocationItem` instances instead of strings:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fetch()` 方法现在将显示一个错误。修改 `fetch()` 方法以使用 `LocationItem` 实例而不是字符串：'
- en: '[PRE16]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `locationItem(at:)` method now shows an error. Modify it so it returns
    a `LocationItem` instance instead of a string:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`locationItem(at:)` 方法现在显示了一个错误。修改它，使其返回一个 `LocationItem` 实例而不是一个字符串：'
- en: '[PRE17]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You are done with the `LocationDataManager` class at this point. Next, you''ll
    update the `LocationViewController` class to use `LocationItem` instances instead
    of strings to populate the table view cells. Follow these steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经完成了 `LocationDataManager` 类。接下来，你将更新 `LocationViewController` 类，使用
    `LocationItem` 实例而不是字符串来填充表格视图单元格。按照以下步骤：
- en: Click the `LocationViewController` file in the Project navigator.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `LocationViewController` 文件。
- en: 'You will see an error in the `tableView(_:cellForRowAtIndexPath:)` method.
    This error is because you can''t assign a `LocationItem` instance to the cell''s
    `textLabel` property. Modify this method as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会在 `tableView(_:cellForRowAtIndexPath:)` 方法中看到一个错误。这个错误是因为你不能将一个 `LocationItem`
    实例分配给单元格的 `textLabel` 属性。按照以下方式修改此方法：
- en: '[PRE18]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You need a property to keep track of the user''s selection. Add the following
    property declaration just after the `manager` declaration:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要一个属性来跟踪用户的选中项。在 `manager` 声明之后添加以下属性声明：
- en: '[PRE19]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To handle user interaction with the table view, you'll make the `LocationViewController`
    class conform to the `UITableViewDelegate` protocol.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理用户与表格视图的交互，你将使 `LocationViewController` 类遵守 `UITableViewDelegate` 协议。
- en: Tip
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `UITableViewDelegate` protocol is covered in [*Chapter 15*](B17469_15_Final_VK_ePub.xhtml#_idTextAnchor213)*,
    Getting Started with Table Views*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITableViewDelegate` 协议在 [*第15章*](B17469_15_Final_VK_ePub.xhtml#_idTextAnchor213)*，开始使用表格视图*
    中进行了介绍。'
- en: 'The `UITableViewDelegate` protocol specifies the messages that a table view
    will send to its delegate when the user interacts with the rows in it. Follow
    these steps to adopt it:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITableViewDelegate` 协议指定了当用户与其中的行交互时，表格视图将向其代理发送的消息。按照以下步骤采用它：'
- en: 'Add the following extension after the `UITableViewDataSource` extension:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`UITableViewDataSource`扩展之后添加以下扩展：
- en: '[PRE20]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The extension helps to keep your code organized, and the `// MARK:` syntax makes
    this extension easy to find in the Editor area.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此扩展有助于保持您的代码整洁，而`// MARK:`语法使得此扩展在编辑器区域中易于查找。
- en: 'The `UITableViewDelegate` method triggered when a user taps a row in the table
    view is `tableView(_:didSelectRowAt:)`. Add this method between the extension''s
    curly braces. It should look like the following:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户在表格视图中点击一行时，会触发`UITableViewDelegate`方法`tableView(_:didSelectRowAt:)`。在扩展的大括号之间添加此方法。它应该看起来像以下这样：
- en: '[PRE21]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `LocationViewController` class can now store a user-selected location, but
    when you choose a location in the `ExploreViewController` class and assign it
    to the **Done** button, but before you do, you'll create a new view controller
    for the collection view section header in the **Explore** screen first. This will
    let you display the user-selected location in the **Explore** screen. You'll do
    this in the next section.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocationViewController`类现在可以存储用户选择的位置，但在您在`ExploreViewController`类中选择位置并将其分配给**完成**按钮之前，您首先需要在**Explore**屏幕中创建一个新的视图控制器来管理集合视图部分标题。这将允许您在**Explore**屏幕中显示用户选择的位置。您将在下一节中这样做。'
- en: Adding a UICollectionReusableView subclass for the section header in the Explore
    screen
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Explore屏幕中为部分标题添加一个UICollectionReusableView子类
- en: 'The `UICollectionReusableView` subclass for the collection view section header,
    and set up an outlet for the subtitle label, so you can display the user-selected
    location in the collection view section header. Follow these steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 集合视图部分标题的`UICollectionReusableView`子类，并为副标题标签设置一个出口，以便您可以在集合视图部分标题中显示用户选择的位置。按照以下步骤操作：
- en: Right-click the `View` folder inside the `Explore` folder and select **New File**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Explore`文件夹内的`View`文件夹，然后选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch类**然后点击**下一步**。'
- en: 'Configure the file as follows:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置文件：
- en: '`ExploreHeaderView`'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ExploreHeaderView`'
- en: '`UICollectionReusableView`'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UICollectionReusableView`'
- en: '`Swift`'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: 'Click `ExploreHeaderView` file appears in the Project navigator. Verify that
    it contains the following:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`ExploreHeaderView`文件出现在项目导航器中。验证它是否包含以下内容：
- en: '[PRE22]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Click the `Main` storyboard file in the Project navigator. Select the `ExploreHeaderView`:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`Main`故事板文件。选择`ExploreHeaderView`：
- en: '![Figure 17.2: Identity inspector with Class set to ExploreHeaderView'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.2：将类设置为ExploreHeaderView的标识检查器]'
- en: '](img/Figure_17.02_B17469.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.02_B17469.jpg)'
- en: 'Figure 17.2: Identity inspector with Class set to ExploreHeaderView'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2：将类设置为ExploreHeaderView的标识检查器
- en: Note that **Collection Reusable View** will change to **Explore Header View**
    in the document outline.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在文档大纲中**可重用视图**将更改为**Explore标题视图**。
- en: The `ExploreHeaderView` class is now managing the collection view section header.
    In the next section, you will link the subtitle label in the collection view section
    header to an outlet in the `ExploreHeaderView` class, and add a property for the
    `ExploreHeaderView` class in the `ExploreViewController` class.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`ExploreHeaderView`类正在管理集合视图部分标题。在下一节中，您将把集合视图部分标题中的副标题标签链接到`ExploreHeaderView`类中的一个出口，并在`ExploreViewController`类中为`ExploreHeaderView`类添加一个属性。
- en: Connecting the section header's label to the ExploreViewController class
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将部分标题的标签连接到ExploreViewController类
- en: 'To display the user-selected city in the collection view section header, you''ll
    connect the subtitle label to an outlet in the `ExploreHeaderView` class, then
    add a property for it in the `ExploreViewController` class. Follow these steps:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要在集合视图部分标题中显示用户选择的城市，您需要将副标题标签连接到`ExploreHeaderView`类中的一个出口，然后在`ExploreViewController`类中为它添加一个属性。按照以下步骤操作：
- en: 'In the document outline, click the subtitle label for the **Explore Header
    View** (it is the label that has the text **PLEASE SELECT A LOCATION**):![Figure
    17.3: Document outline with PLEASE SELECT A LOCATION label selected'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档大纲中，点击**Explore标题视图**的副标题标签（它是带有文本**请选择一个位置**的标签）：![图17.3：带有请选择一个位置标签选中的文档大纲]
- en: '](img/Figure_17.03_B17469.jpg)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_17.03_B17469.jpg)'
- en: 'Figure 17.3: Document outline with PLEASE SELECT A LOCATION label selected'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.3：带有请选择一个位置标签选中的文档大纲
- en: Click the Adjust Editor Options button and choose Assistant from the menu. An
    assistant editor appears on the right side of the screen. Make sure that it's
    showing the contents of the `ExploreHeaderView` file.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击调整编辑器选项按钮，从菜单中选择助手。一个助手编辑器出现在屏幕的右侧。确保它显示的是`ExploreHeaderView`文件的内容。
- en: '*Ctrl + Drag* from the **PLEASE SELECT A LOCATION** label to the space between
    the curly braces:![Figure 17.4: Editor area showing ExploreHeaderView file contents'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Ctrl + 拖动*从**请选择一个位置**标签到花括号之间：![Figure 17.4: 编辑器区域显示ExploreHeaderView文件内容'
- en: '](img/Figure_17.04_B17469.jpg)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_17.04_B17469.jpg]'
- en: 'Figure 17.4: Editor area showing ExploreHeaderView file contents'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Figure 17.4: 编辑器区域显示ExploreHeaderView文件内容'
- en: In the box that appears, set the name to `locationLabel` and click **Connect**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的框中，将名称设置为`locationLabel`，然后点击**连接**。
- en: The `locationLabel` outlet has been created in the `ExploreHeaderView` class.
    Close the assistant editor by clicking the **x** button.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`locationLabel`出口已在`ExploreHeaderView`类中创建。通过点击**x**按钮关闭辅助编辑器。'
- en: 'Click the `ExploreViewController` file in the Project navigator. Add the following
    property declaration after the `manager` declaration to store the location passed
    to the `ExploreViewController` instance by the `LocationViewController` instance:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`ExploreViewController`文件。在`manager`声明之后添加以下属性声明，以存储由`LocationViewController`实例传递给`ExploreViewController`实例的位置：
- en: '[PRE23]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After the `selectedCity` property declaration, declare a property that will
    be assigned an `ExploreHeaderView` instance, which will allow the `ExploreViewController`
    instance to set the value for `locationLabel`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在声明`selectedCity`属性之后，声明一个属性，该属性将被分配一个`ExploreHeaderView`实例，这将允许`ExploreViewController`实例设置`locationLabel`的值：
- en: '[PRE24]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Next, let's configure the `locationLabel` to the user-selected city and state
    when tapped. The **Explore** screen will then appear with the selected city displayed
    in the collection view section header. You will do this in the next section.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们配置`locationLabel`，当点击时将其设置为用户选择的市和州。然后，**探索**屏幕将出现，所选城市显示在集合视图部分的标题中。你将在下一节中完成这项操作。
- en: Adding an unwind action method to the Done button
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向完成按钮添加撤销操作方法
- en: 'In [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*, Building
    Your User Interface*, you added an unwind action method for the `ExploreViewController`
    class, which dismisses the `selectedCity` property in the `ExploreViewController`
    instance to the location selected by the user. Follow these steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第10章*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*，构建您的用户界面*中，您为`ExploreViewController`类添加了一个撤销操作方法，该方法将`ExploreViewController`实例中的`selectedCity`属性撤销到用户选择的位置。按照以下步骤操作：
- en: Add the following just after the `unwindLocationCancel(segue:)` method to implement
    the unwind action for the `LocationViewController` instance and the destination
    view controller is an `ExploreViewController` instance. This method first checks
    to see if the source view controller is a `LocationViewController` instance. If
    it is, the value of the `LocationViewController` instance's `selectedCity` property
    is assigned to the `ExploreViewController` instance's `selectedCity` property,
    if it exists. If the `ExploreViewController` instance's `selectedCity` property
    has a value, it is assigned to `location`, and the text of the subtitle label
    is set to the `cityAndState` property of `location`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`unwindLocationCancel(segue:)`方法之后添加以下内容，以实现`LocationViewController`实例的撤销操作，目标视图控制器是一个`ExploreViewController`实例。此方法首先检查源视图控制器是否是`LocationViewController`实例。如果是，则将`LocationViewController`实例的`selectedCity`属性的值分配给如果存在的`ExploreViewController`实例的`selectedCity`属性。如果`ExploreViewController`实例的`selectedCity`属性有值，则将其分配给`location`，并将副标题标签的文本设置为`location`的`cityAndState`属性。
- en: 'Modify the `collectionView(_:viewForSupplementaryElementOf Kind:at:)` method
    as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`collectionView(_:viewForSupplementaryElementOfKind:at:)`方法如下：
- en: '[PRE25]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Click the `Main` storyboard file. Select the **Location View Controller Scene**.
    To set the method to be triggered by the **Done** button, *Ctrl + Drag* from the
    **Done** button to the Exit icon in the Scene Dock:![Figure 17.5: Location View
    Controller Scene showing Done button action being set'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击`Main`故事板文件。选择**位置视图控制器场景**。为了设置由**完成**按钮触发的操作，*Ctrl + 拖动*从**完成**按钮到场景工具栏中的退出图标：![Figure
    17.5: 位置视图控制器场景显示完成按钮操作设置'
- en: '](img/Figure_17.05_B17469.jpg)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_17.05_B17469.jpg]'
- en: 'Figure 17.5: Location View Controller Scene showing Done button action being
    set'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Figure 17.5: 位置视图控制器场景显示完成按钮操作设置'
- en: 'Choose `unwindLocationDoneWithSegue:` from the pop-up menu. This links the
    `unwindLocationDone(segue:)` unwind action in the `ExploreViewController` class:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从弹出菜单中选择 `unwindLocationDoneWithSegue:`。这将在 `ExploreViewController` 类中将 `unwindLocationDone(segue:)`
    返回操作链接起来：
- en: '![Figure 17.6: Pop-up menu with unwindLocationDoneWithSegue: selected'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.6：显示 unwindLocationDoneWithSegue: 已选的弹出菜单'
- en: '](img/Figure_17.06_B17469.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.06_B17469.jpg)'
- en: 'Figure 17.6: Pop-up menu with unwindLocationDoneWithSegue: selected'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '图 17.6：显示 unwindLocationDoneWithSegue: 已选的弹出菜单'
- en: 'Build and run your app and tap the **LOCATION** button. Tap a city and a tick
    will appear in the row. Tap **Done**:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用，并点击 **地点** 按钮。点击一个城市，行中会出现一个勾选标记。点击 **完成**：
- en: '![Figure 17.7: iOS Simulator showing Locations screen with location selected'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.7：iOS 模拟器显示已选择地点的地点屏幕'
- en: '](img/Figure_17.07_B17469.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.07_B17469.jpg)'
- en: 'Figure 17.7: iOS Simulator showing Locations screen with location selected'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.7：iOS 模拟器显示已选择地点的地点屏幕
- en: 'The selected city name and state will replace the **PLEASE SELECT A LOCATION**
    text in the subtitle label inside the collection view section header:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 选定的城市名称和州将替换集合视图部分标题内的 **请选择一个地点** 文本：
- en: '![Figure 17.8: iOS Simulator showing Explore screen with subtitle label set'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.8：iOS 模拟器显示带有副标题标签的探索屏幕'
- en: '](img/Figure_17.08_B17469.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.08_B17469.jpg)'
- en: 'Figure 17.8: iOS Simulator showing Explore screen with subtitle label set'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.8：iOS 模拟器显示带有副标题标签的探索屏幕
- en: 'Although this works, there are two issues that you need to fix when selecting
    a location. The first issue is that you can select multiple locations:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可行，但在选择地点时你需要修复两个问题。第一个问题是你可以选择多个地点：
- en: '![Figure 17.9: iOS simulator showing Locations screen with multiple locations
    selected'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.9：iOS 模拟器显示已选择多个地点的地点屏幕'
- en: '](img/Figure_17.09_B17469.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.09_B17469.jpg)'
- en: 'Figure 17.9: iOS simulator showing Locations screen with multiple locations
    selected'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.9：iOS 模拟器显示已选择多个地点的地点屏幕
- en: You want the user to only select one location, and if another is selected, the
    location selected earlier should be deselected.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望用户只能选择一个地点，如果选择了另一个地点，则之前选择的地点应该取消选中。
- en: 'The second issue is that the checkmark next to the user-selected location disappears
    if you click **Done** in the **Locations** screen and click the **LOCATION** button
    in the **Explore** screen again:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是，如果你在 **地点** 屏幕中点击 **完成** 并再次在 **探索** 屏幕中点击 **地点** 按钮，用户选择的地点旁边的勾选标记会消失：
- en: '![Figure 17.10: iOS simulator showing Locations screen with missing checkmark'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.10：iOS 模拟器显示缺少勾选标记的地点屏幕'
- en: '](img/Figure_17.10_B17469.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.10_B17469.jpg)'
- en: 'Figure 17.10: iOS simulator showing Locations screen with missing checkmark'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.10：iOS 模拟器显示缺少勾选标记的地点屏幕
- en: The last selected location should have a checkmark when you go back to the **Locations**
    screen again.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次回到 **地点** 屏幕时，最后选择的地点应该有一个勾选标记。
- en: Let's modify the `LocationDataManager` class to make sure only one location
    can be selected at a time in the next section.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节修改 `LocationDataManager` 类，以确保一次只能选择一个地点。
- en: Selecting only one location in the Locations screen
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在地点屏幕中仅选择一个地点
- en: 'At present, you can select multiple locations in the **Locations** screen.
    You should only be able to select one location, and if another is selected, the
    previously selected location selected should be deselected. Follow these steps:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你可以在 **地点** 屏幕中选择多个地点。你应该只能选择一个地点，如果选择了另一个地点，则之前选择的地点应该取消选中。按照以下步骤操作：
- en: 'Click the `LocationItem` file. Make `LocationItem` conform to the `Equatable`
    protocol by modifying the `LocationItem` structure as follows:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `LocationItem` 文件。通过修改 `LocationItem` 结构使其符合 `Equatable` 协议：
- en: '[PRE26]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Click the `LocationViewController` file. After the `viewDidLoad()` method,
    add a method that sets a checkmark only on the row containing the selected city:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `LocationViewController` 文件。在 `viewDidLoad()` 方法之后，添加一个方法，只为包含所选城市的行设置勾选标记：
- en: '[PRE27]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `setCheckmark(for:location:)` method takes `cell`, a table view cell, and
    `location`, a `LocationItem` instance, as arguments. If `location` and `selectedCity`
    are equal, the checkmark for that row is set. Otherwise, the checkmark is not
    set.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`setCheckmark(for:location:)` 方法接受 `cell`，一个表格视图单元格，和 `location`，一个 `LocationItem`
    实例，作为参数。如果 `location` 和 `selectedCity` 相等，则设置该行的勾选标记。否则，不设置勾选标记。'
- en: 'In the `tableView(_:cellForRowAt:)` method, modify the code as follows to call
    `setCheckmark(for:location:)` after the line that sets the text for the cell''s
    `textLabel` property:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tableView(_:cellForRowAt:)`方法中，修改如下代码，在设置单元格的`textLabel`属性文本的行之后调用`setCheckmark(for:location:)`：
- en: '[PRE28]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `tableView(_:didSelectRowAt:)` method, modify the code in the `if` statement
    as follows to reload the table view (thus rendering all the rows in it) after
    a location has been selected:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tableView(_:didSelectRowAt:)`方法中，修改`if`语句中的代码，在选择了位置后重新加载表格视图（从而渲染其中的所有行）：
- en: '[PRE29]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Build and run your project. You should only be able to set one location now,
    and if you choose another location, the location you chose earlier will be deselected.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的项目。现在您应该只能设置一个位置，如果您选择另一个位置，之前选择的位置将被取消选中。
- en: You'll fix the second issue in the next section so that once a location is selected,
    it will remain selected when you go back to the `RestaurantListViewController`
    instance, so it can eventually display a list of restaurants at a particular location
    matching the cuisine selected by the user.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将修复第二个问题，以便一旦选择了一个位置，当您返回到`RestaurantListViewController`实例时，它将保持选中状态，这样最终可以显示用户选择的菜系在特定位置的餐厅列表。
- en: Tip
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: This is a long chapter, so you may wish to take a break here.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一章很长的内容，所以您可能希望在这里休息一下。
- en: Passing location and cuisine information to the RestaurantListViewController
    instance
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将位置和菜系信息传递给RestaurantListViewController实例
- en: 'At present, you''re able to set a location in the `RestaurantListViewController`
    instance, which will then display the restaurants at the selected location that
    offer the selected cuisine. You''ll also make the checkmark next to your selected
    location reappear if you have selected a location in the **Locations** screen
    earlier. Follow these steps:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您可以在`RestaurantListViewController`实例中设置位置，然后它会显示所选位置的提供所选菜系的餐厅。如果您在**Locations**屏幕中之前选择了一个位置，您还将使旁边的选择标记重新出现。按照以下步骤操作：
- en: 'You''ll add identifiers for each segue connected to the `Main` storyboard file
    and click the **Explore View Controller Scene**. Select the segue between the
    **Explore View Controller Scene** and the **Location View Controller Scene**:![Figure
    17.11: Editor area showing segue between Explore and Location screens selected'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '您将为连接到`Main`故事板文件的每个切换添加标识符，并点击**Explore View Controller Scene**。选择**Explore
    View Controller Scene**和**Location View Controller Scene**之间的切换：![Figure 17.11:
    Editor area showing segue between Explore and Location screens selected'
- en: '](img/Figure_17.11_B17469.jpg)'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_17.11_B17469.jpg]'
- en: 'Figure 17.11: Editor area showing segue between Explore and Location screens
    selected'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.11：编辑区域显示Explore和Location屏幕之间的切换选择
- en: 'Click the Attributes inspector button. Under `locationList`:![Figure 17.12:
    Attributes inspector with Identifier set to locationList'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击属性检查器按钮。在`locationList`下：![Figure 17.12: Attributes inspector with Identifier
    set to locationList'
- en: '](img/Figure_17.12_B17469.jpg)'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_17.12_B17469.jpg]'
- en: 'Figure 17.12: Attributes inspector with Identifier set to locationList'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.12：属性检查器中设置标识符为locationList
- en: 'Select the segue between `restaurantList`:![Figure 17.13: Attributes inspector
    identifier setting for the segue between'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '选择`restaurantList`之间的切换：![Figure 17.13: Attributes inspector identifier setting
    for the segue between'
- en: the Explore and Restaurant List screens
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Explore和Restaurant List屏幕
- en: '](img/Figure_17.13_B17469.jpg)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_17.13_B17469.jpg]'
- en: 'Figure 17.13: Attributes inspector identifier setting for the segue between
    the Explore and Restaurant List screens'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.13：设置Explore和Restaurant List屏幕之间切换的属性检查器标识符
- en: Once you know which segue is occurring, you can specify the methods to be executed
    for each segue. You'll create two methods, `showLocationList(segue:)` and `showRestaurantList(segue:)`,
    and you'll use the `prepare(for:sender:)` method to execute the desired method
    depending on which segue is occurring.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦您知道哪个切换正在发生，您可以为每个切换指定要执行的方法。您将创建两个方法，`showLocationList(segue:)`和`showRestaurantList(segue:)`，您将使用`prepare(for:sender:)`方法根据哪个切换正在发生来执行所需的方法。
- en: 'Click the `ExploreViewController` file in the Project navigator. Inside the
    `private` extension, declare and define the `showLocationList(segue:)` method
    before the `unwindLocationCancel()` method to pass the user-selected city back
    to the `LocationViewController` instance if it was set earlier:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`ExploreViewController`文件。在`private`扩展中，在`unwindLocationCancel()`方法之前声明并定义`showLocationList(segue:)`方法，以便如果之前设置了用户选择的城市，则将其传递回`LocationViewController`实例：
- en: '[PRE30]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `showLocationList(segue:)` method will be called before the `Main` storyboard
    file, you embedded the `viewControllers` property that holds an array of view
    controllers, and the last view controller in the array has its view visible onscreen.
    You can access the last view controller in the array using the `topViewController`
    property of the navigation controller.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Main`故事板文件之前，`showLocationList(segue:)`方法会被调用，你嵌入的`viewControllers`属性包含一个视图控制器数组，并且数组中的最后一个视图控制器的视图在屏幕上是可见的。你可以使用导航控制器的`topViewController`属性来访问数组中的最后一个视图控制器。
- en: The `guard` statement checks whether the segue destination is a `UINavigationController`
    instance and whether `topViewController` is the `LocationViewController` instance.
    If it is, the `selectedCity` property of the `ExploreViewController` instance
    is checked to see if it contains a value. If it does, that value is assigned to
    the `selectedCity` property of the `LocationViewController` instance. Remember
    that the `setCheckmark(for:at:)` method of the `LocationViewController` instance
    will be called for each row in the table view, and this sets a checkmark on the
    row containing the selected city.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`guard`语句检查segue目标是否是`UINavigationController`实例，以及`topViewController`是否是`LocationViewController`实例。如果是，则检查`ExploreViewController`实例的`selectedCity`属性是否包含值。如果包含，则将该值分配给`LocationViewController`实例的`selectedCity`属性。记住，`LocationViewController`实例的`setCheckmark(for:at:)`方法将为表格视图中的每一行调用，并在包含选定城市的行上设置勾选标记。'
- en: 'This will fix the second issue with the `RestaurantListViewController` instance.
    Follow these steps:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这将修复`RestaurantListViewController`实例的第二个问题。按照以下步骤操作：
- en: 'Click the `RestaurantListViewController` file in the Project navigator. Add
    the following properties inside the `RestaurantListViewController` class just
    before the `@IBOutlet` declaration:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`RestaurantListViewController`文件。在`RestaurantListViewController`类中`@IBOutlet`声明之前添加以下属性：
- en: '[PRE31]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following code after the `viewDidLoad()` method to print the selected
    city and cuisine to the Debug area when the view for the `RestaurantListViewController`
    instance appears onscreen:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`viewDidLoad()`方法之后添加以下代码，以便在`RestaurantListViewController`实例的视图出现在屏幕上时，将选定的城市和菜系打印到调试区域：
- en: '[PRE32]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`viewDidAppear()` is called every time a view controller''s view appears onscreen,
    while `viewDidLoad()` is only called once when a view controller initially loads
    its view. `viewDidAppear()` is used here because the `RestaurantListViewController`
    instance will show a different list of restaurants each time its view appears
    onscreen, depending on the choices made by the user. At the moment, the code just
    prints the selected location and cuisine to the Debug area, so you can see that
    these values are being passed correctly.'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`viewDidAppear()`方法会在每次视图控制器视图出现在屏幕上时被调用，而`viewDidLoad()`方法则只会在视图控制器最初加载其视图时被调用一次。在这里使用`viewDidAppear()`是因为`RestaurantListViewController`实例每次其视图出现在屏幕上时都会显示不同的餐厅列表，这取决于用户的选择。目前，代码只是将选定的位置和菜系打印到调试区域，因此你可以看到这些值正在正确传递。'
- en: Important Information
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'To learn more about the view controller lifecycle, see this link: [https://developer.apple.com/documentation/uikit/uiviewcontroller](https://developer.apple.com/documentation/uikit/uiviewcontroller).'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解更多关于视图控制器生命周期的信息，请参阅此链接：[https://developer.apple.com/documentation/uikit/uiviewcontroller](https://developer.apple.com/documentation/uikit/uiviewcontroller)。
- en: 'Click the `ExploreViewController` file in the Project navigator. Declare and
    define the `showRestaurantList(segue:)` method after the `showLocationList(segue:)`
    method to set the `RestaurantListViewController` instance''s `selectedCuisine`
    and `selectedCity` properties:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`ExploreViewController`文件。在`showLocationList(segue:)`方法之后声明并定义`showRestaurantList(segue:)`方法，以设置`RestaurantListViewController`实例的`selectedCuisine`和`selectedCity`属性：
- en: '[PRE33]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You will call this method before the `if-let` statement checks to see whether
    the destination view controller is the `RestaurantListViewController` instance,
    sets `city` to the `selectedCity` value of the `ExploreViewController` instance
    if it is, and gets the index of the collection view cell the user tapped. If the
    statement is successful, the `RestaurantListViewController` instance's `selectedCuisine`
    property is set to the `name` of the `ExploreItem` instance located at that index
    in the `items` array. In the next line, the `RestaurantListViewController` instance's
    `selectedCity` property will be assigned the value stored in `city`.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `if-let` 语句检查目标视图控制器是否为 `RestaurantListViewController` 实例之前，你将调用此方法，如果它是，则将
    `city` 设置为 `ExploreViewController` 实例的 `selectedCity` 值，并获取用户点击的集合视图单元格的索引。如果该语句成功，则将
    `RestaurantListViewController` 实例的 `selectedCuisine` 属性设置为 `items` 数组中该索引处的 `ExploreItem`
    实例的 `name`。在下一行，`RestaurantListViewController` 实例的 `selectedCity` 属性将被分配 `city`
    中存储的值。
- en: 'For this method to work, the `selectedCity` property of the `ExploreViewController`
    instance has to be set first before transitioning to the **Restaurant Detail**
    screen. You will alert the user to set the city before choosing a cuisine. Follow
    these steps:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使此方法正常工作，必须在过渡到 **餐厅详情** 屏幕之前先设置 `ExploreViewController` 实例的 `selectedCity`
    属性。你将在选择菜系之前提醒用户设置城市。按照以下步骤操作：
- en: 'Click the `ExploreViewController` file in the Project navigator. Add the following
    method before `unwindLocationCancel()` to display an alert:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `ExploreViewController` 文件。在 `unwindLocationCancel()` 之前添加以下方法以显示警报：
- en: '[PRE34]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `showLocationRequiredAlert()` method creates a `UIAlertController` instance
    with the title set to `"Location Needed"` and a message, `"Please select a location."`.
    A `UIAlertAction` instance with an OK button is then added to the `UIAlertController`
    instance. Finally, the alert is presented to the user, and tapping the OK button
    dismisses it.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`showLocationRequiredAlert()` 方法创建一个标题设置为 `"Location Needed"` 和消息的 `UIAlertController`
    实例。然后向 `UIAlertController` 实例添加一个带有 OK 按钮的 `UIAlertAction` 实例。最后，将警报呈现给用户，并点击
    OK 按钮以关闭它。'
- en: 'Add the following code after `viewDidLoad()` to display this alert if a location
    has not been selected:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad()` 之后添加以下代码以显示此警报，如果尚未选择位置：
- en: '[PRE35]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `shouldPerformSegue(withIdentifier:sender:)` method is used to check whether
    the `restaurantList` and if the `selectedCity` is set; if not, the `showLocationRequiredAlert()`
    method is called and `shouldPerformSegue(withIdentifier:sender:)` returns `false`.
    Otherwise, `shouldPerformSegue(withIdentifier:sender:)` returns `true`, and the
    **Restaurant List** screen appears.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`shouldPerformSegue(withIdentifier:sender:)` 方法用于检查 `restaurantList` 是否已设置以及
    `selectedCity` 是否已设置；如果没有，则调用 `showLocationRequiredAlert()` 方法，并且 `shouldPerformSegue(withIdentifier:sender:)`
    返回 `false`。否则，`shouldPerformSegue(withIdentifier:sender:)` 返回 `true`，并且出现 **餐厅列表**
    屏幕。'
- en: 'Now that you''ve created the `showLocationList(segue:)` and the `showRestaurantList(segue:)`
    methods, you''ll add code to implement the `prepare(for:sender:)` method after
    `viewDidLoad()` and before `shouldPerformSegue(withIdentifier:)`. This method
    calls `showLocationList(segue:)` or `showRestaurantList(segue:)` depending on
    the segue that will be executed:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 `showLocationList(segue:)` 和 `showRestaurantList(segue:)` 方法，你将在 `viewDidLoad()`
    之后和 `shouldPerformSegue(withIdentifier:)` 之前添加代码以实现 `prepare(for:sender:)` 方法。这个方法根据将要执行的
    segue 调用 `showLocationList(segue:)` 或 `showRestaurantList(segue:)`：
- en: '[PRE36]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When the `locationList`, so the `showLocationList(segue:)` method is executed
    before the transition to the `restaurantList`, so the `showRestaurantListing(segue:)`
    method is executed before the transition to the `selectedType` and `selectedCity`
    properties in the `RestaurantListViewController` instance, which will be printed
    to the Debug area.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `locationList`，因此 `showLocationList(segue:)` 方法在过渡到 `restaurantList` 之前执行，所以
    `showRestaurantListing(segue:)` 方法在过渡到 `RestaurantListViewController` 实例中的 `selectedType`
    和 `selectedCity` 属性之前执行，这将打印到调试区域。
- en: 'Build and run your project. If you try to select a cuisine, you''ll see this
    alert, stating you need to select a location:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的项目。如果你尝试选择一种菜系，你会看到这个警报，指出你需要选择一个位置：
- en: '![Figure 17.14: iOS Simulator showing alert'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.14：iOS 模拟器显示警报'
- en: '](img/Figure_17.14_B17469.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.14_B17469.jpg)'
- en: 'Figure 17.14: iOS Simulator showing alert'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.14：iOS 模拟器显示警报
- en: 'If you pick a location, tap **Done**, and tap the **LOCATION** button again
    the location you selected earlier should still be selected:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了一个位置，点击 **完成**，然后再次点击 **位置** 按钮，之前选择的位置应该仍然被选中：
- en: '![Figure 17.15: iOS simulator showing Locations screen with checkmark'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.15：iOS模拟器显示带有勾选标记的位置屏幕'
- en: '](img/Figure_17.15_B17469.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_17.15_B17469.jpg]'
- en: 'Figure 17.15: iOS simulator showing Locations screen with checkmark'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.15：iOS模拟器显示带有勾选标记的位置屏幕
- en: 'If you pick a cuisine, you''ll see the **Restaurant List** screen:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了一个菜系，你会看到**餐厅列表**屏幕：
- en: '![Figure 17.16: iOS Simulator showing Restaurant List screen'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.16：iOS模拟器显示餐厅列表屏幕'
- en: '](img/Figure_17.16_B17469.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_17.16_B17469.jpg]'
- en: 'Figure 17.16: iOS Simulator showing Restaurant List screen'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.16：iOS模拟器显示餐厅列表屏幕
- en: 'The location and cuisine you picked will appear in the Debug area:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的位置和菜系将出现在调试区域：
- en: '![Figure 17.17: Debug area showing location and cuisine you selected'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.17：显示所选位置和菜系的调试区域'
- en: '](img/Figure_17.17_B17469.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_17.17_B17469.jpg]'
- en: 'Figure 17.17: Debug area showing location and cuisine you selected'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.17：显示所选位置和菜系的调试区域
- en: 'Now that the `RestaurantListViewController` instance has a location, you can
    get the restaurant data for that location from the `RestaurantDataManager` instance.
    Click the `RestaurantListViewController` file in the Project navigator and update
    `viewDidAppear()` as follows. This prints the list of restaurants from the selected
    location that serves the selected cuisine:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`RestaurantListViewController`实例有了位置，你可以从`RestaurantDataManager`实例获取该位置的餐厅数据。在项目导航器中点击`RestaurantListViewController`文件，并更新`viewDidAppear()`如下。这将打印出所选位置和菜系提供的餐厅列表：
- en: '[PRE37]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `guard` statement checks to see if `city` and `cuisine` have been assigned
    values successfully, and returns if they have not. Next, an instance of `RestaurantDataManager`
    is created and assigned to `manager`. The `fetch(location:selectedCuisine:completion:)`
    method returns an array of `RestaurantItem` instances for the selected `city`
    and `cuisine`, and the `for` loop prints the restaurant names to the Debug area.
    If there are no restaurants matching the criteria, `No data` will be printed to
    the Debug area. Build and run your project, select a city, tap a cuisine, and
    note the results in the Debug area.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`guard`语句检查`city`和`cuisine`是否已成功分配了值，如果没有则返回。接下来，创建一个`RestaurantDataManager`实例并将其分配给`manager`。`fetch(location:selectedCuisine:completion:)`方法返回一个包含所选`city`和`cuisine`的`RestaurantItem`实例的数组，`for`循环将餐厅名称打印到调试区域。如果没有符合标准的餐厅，调试区域将打印`No
    data`。构建并运行你的项目，选择一个城市，点击一个菜系，并在调试区域中注意结果。'
- en: 'You can also see the results in the Report navigator. Click the Report navigator
    button and select the first entry as shown:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在报告导航器中看到结果。点击报告导航器按钮并选择如所示的第一项：
- en: '![Figure 17.18: Report navigator showing list of restaurant names'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.18：显示餐厅名称列表的报告导航器'
- en: '](img/Figure_17.18_B17469.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_17.18_B17469.jpg]'
- en: 'Figure 17.18: Report navigator showing list of restaurant names'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.18：显示餐厅名称列表的报告导航器
- en: You'll see either a list of restaurants or `No data` in the Editor area.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在编辑器区域看到餐厅列表或`No data`。
- en: So, at this point, the `RestaurantListViewController` instance is successfully
    getting the data that it needs to display the list of restaurants. Now that you
    have this data, you need to configure the collection view to display it to the
    user. To do that, you will need to create a view controller for the collection
    view cells, and configure the `RestaurantListViewController` instance to populate
    them. You will do this in the next section.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，到目前为止，`RestaurantListViewController`实例已成功获取显示餐厅列表所需的数据。现在你有了这些数据，你需要配置集合视图以向用户显示它。为此，你需要创建集合视图单元格的视图控制器，并配置`RestaurantListViewController`实例以填充它们。你将在下一节中这样做。
- en: Creating a view controller for the cells on the Restaurant List screen
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为餐厅列表屏幕上的单元格创建视图控制器
- en: 'At present the `RestaurantCell` class for this purpose. Follow these steps:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为这个目的使用`RestaurantCell`类。按照以下步骤操作：
- en: Right-click the `Restaurants` folder and choose `View`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Restaurants`文件夹并选择`查看`。
- en: Right-click the `View` folder and select **New File**.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`View`文件夹并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch Class**然后点击**下一步**。'
- en: 'Configure the file as follows:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置文件：
- en: '`RestaurantCell`'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RestaurantCell`'
- en: '`UICollectionViewCell`'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UICollectionViewCell`'
- en: '`Swift`'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: 'Click `RestaurantCell` file appears in the Project navigator. It contains the
    implementation of the `RestaurantCell` class:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`RestaurantCell`文件。它包含`RestaurantCell`类的实现：
- en: '[PRE38]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Now let's create the outlets for the collection view cell in the `RestaurantCell`
    class. You will do this in the next section.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在`RestaurantCell`类中创建用于收集视图单元格的出口。你将在下一节中完成这个操作。
- en: Connecting the outlets for the RestaurantCell class
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接RestaurantCell类的出口
- en: 'Now that you''ve created the `RestaurantCell` class, you''ll need to create
    outlets in it and link them to the UI elements inside the collection view cells
    for the `RestaurantCell` instances to manage what is displayed by the collection
    view cell. Follow these steps:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了`RestaurantCell`类，你需要在其中创建出口并将它们链接到收集视图单元格内的UI元素，以便`RestaurantCell`实例管理收集视图单元格显示的内容。按照以下步骤操作：
- en: 'Click the `Main` storyboard file. Click `restaurantCell` in the `RestaurantCell`:![Figure
    17.19: Identity inspector Class settings for restaurantCell'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Main`故事板文件。在`RestaurantCell`中点击`restaurantCell`。![图17.19：restaurantCell的标识检查器类设置
- en: '](img/Figure_17.19_B17469.jpg)'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_17.19_B17469.jpg)'
- en: 'Figure 17.19: Identity inspector Class settings for restaurantCell'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.19：restaurantCell的标识检查器类设置
- en: 'In `RestaurantCell.swift`) to be displayed in the assistant editor when the
    Adjust Editor Options button is clicked:![Figure 17.20: Document outline with
    Available Times label selected'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击调整编辑器选项按钮时在辅助编辑器中显示的`RestaurantCell.swift`文件中：![图17.20：文档大纲中选中Available Times标签
- en: '](img/Figure_17.20_B17469.jpg)'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_17.20_B17469.jpg)'
- en: 'Figure 17.20: Document outline with Available Times label selected'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.20：文档大纲中选中Available Times标签
- en: Click the Adjust Editor Options button and choose **Assistant** from the menu.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击调整编辑器选项按钮并从菜单中选择**助手**。
- en: 'The assistant editor appears. The path bar at the top should show `RestaurantCell`
    file:![Figure 17.21: Assistant editor showing RestaurantCell.swift'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 辅助编辑器出现。顶部的路径栏应显示`RestaurantCell`文件：![图17.21：辅助编辑器显示RestaurantCell.swift
- en: '](img/Figure_17.21_B17469.jpg)'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_17.21_B17469.jpg)'
- en: 'Figure 17.21: Assistant editor showing RestaurantCell.swift'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.21：辅助编辑器显示RestaurantCell.swift
- en: 'In the box that appears, type `titleLabel` in the **Name** field and click
    **Connect**:![Figure 17.22: Dialog box showing label Name set to titleLabel'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的框中，在**名称**字段中输入`titleLabel`并点击**连接**：![图17.22：显示标签名称设置为titleLabel的对话框
- en: '](img/Figure_17.22_B17469.jpg)'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_17.22_B17469.jpg)'
- en: 'Figure 17.22: Dialog box showing label Name set to titleLabel'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.22：显示标签名称设置为titleLabel的对话框
- en: '*Ctrl + Drag* from the subtitle `titleLabel` property you just created. In
    the box that appears, type `cuisineLabel` in the **Name** field and click **Connect**:![Figure
    17.23: Dialog box showing label Name set to cuisineLabel'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你刚刚创建的副标题`titleLabel`属性处*Ctrl + 拖动*。在出现的框中，在**名称**字段中输入`cuisineLabel`并点击**连接**：![图17.23：显示标签名称设置为cuisineLabel的对话框
- en: '](img/Figure_17.23_B17469.jpg)'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_17.23_B17469.jpg)'
- en: 'Figure 17.23: Dialog box showing label Name set to cuisineLabel'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.23：显示标签名称设置为cuisineLabel的对话框
- en: '*Ctrl + Drag* from the `american` image view to just after the other properties
    you created. In the box that appears, type `restaurantImageView` in the **Name**
    field and click **Connect**:![Figure 17.24: Dialog box showing image view Name
    set to restaurantImageView'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`american`图像视图处*Ctrl + 拖动*到其他你创建的属性之后。在出现的框中，在**名称**字段中输入`restaurantImageView`并点击**连接**：![图17.24：显示图像视图名称设置为restaurantImageView的对话框
- en: '](img/Figure_17.24_B17469.jpg)'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_17.24_B17469.jpg)'
- en: 'Figure 17.24: Dialog box showing image view Name set to restaurantImageView'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.24：显示图像视图名称设置为restaurantImageView的对话框
- en: Click the **x** button to close the assistant editor.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**x**按钮关闭辅助编辑器。
- en: The outlets for the `RestaurantCell` class are now connected to the UI elements
    in the collection view cell. Later you'll configure the `RestaurantListViewController`
    instance to populate this collection view, but before you do, there is a possibility
    to consider. The user's choices for location and cuisine may not return any results,
    so you will implement a screen that informs the user when there is no data to
    be displayed. You'll do this in the next section.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestaurantCell`类的出口现在已连接到收集视图单元格中的UI元素。稍后你将配置`RestaurantListViewController`实例以填充这个收集视图，但在你这样做之前，有一个需要考虑的可能性。用户对位置和菜系的选项可能不会返回任何结果，因此你需要实现一个屏幕来通知用户没有数据可以显示。你将在下一节中完成这个操作。'
- en: Displaying a custom UIView to indicate no data is available
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示自定义UIView以指示没有可用数据
- en: 'The location and cuisine choices the user makes on the `UIView` subclass and
    an accompanying **XIB** file. XIB stands for **Xcode Interface Builder** and XIB
    files were used to create the user interface before storyboards were implemented.
    Let''s create both files now by following these steps:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在 `UIView` 子类和相应的 **XIB** 文件中做出的位置和餐饮选择。XIB 代表 **Xcode 接口构建器**，在实现故事板之前，XIB
    文件被用来创建用户界面。现在，让我们按照以下步骤创建这两个文件：
- en: Right-click on the `Misc` folder and select `No Data`.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Misc` 文件夹并选择 `No Data`。
- en: Right-click on the `No Data` folder and choose **New File**.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `No Data` 文件夹并选择 **新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Cocoa Touch 类** 然后点击 **下一步**。'
- en: 'Configure the file as follows:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置文件：
- en: '`NoDataView`'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`NoDataView`'
- en: '`UIView`'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UIView`'
- en: '`Swift`'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击 **下一步**。
- en: Click `NoDataView` file appears in the Project navigator.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `NoDataView` 文件出现在项目导航器中。
- en: Right-click on the `No Data` folder and create a new file.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `No Data` 文件夹并创建一个新文件。
- en: '**iOS** should already be selected. Choose **View** and then click **Next**.'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **视图** 然后点击 **下一步**。'
- en: Name this file `NoDataView`. Click `NoDataView` XIB file appears in the Project
    navigator.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `NoDataView`。点击 `NoDataView` XIB 文件出现在项目导航器中。
- en: 'Click the `NoDataView` file in the Project navigator and declare and define
    the `NoDataView` class as follows:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `NoDataView` 文件并声明和定义 `NoDataView` 类如下：
- en: '[PRE39]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This class is a subclass of the `UIView` class, and it will manage the view
    in the `NoDataView` XIB file. Let''s break this down:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 此类是 `UIView` 类的子类，它将管理 `NoDataView` XIB 文件中的视图。让我们分解一下：
- en: '[PRE40]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`view` will be assigned the view from the `NoDataView` XIB file during initialization.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`view` 将在初始化期间分配来自 `NoDataView` XIB 文件的视图。'
- en: '`titleLabel` and `descLabel` will be assigned to two `UILabel` instances that
    will be placed in the `NoDataView` XIB file when you build the user interface
    in the next section.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`titleLabel` 和 `descLabel` 将被分配给两个将在下一节构建用户界面时放置在 `NoDataView` XIB 文件中的 `UILabel`
    实例。'
- en: '[PRE41]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `NoDataView` class is a subclass of `UIView`. A `UIView` object has two
    `init` methods: the first handles view creation programmatically, and the second
    handles the loading of XIB files from the app bundle stored on the device. Here,
    both methods will call `setupView()`.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`NoDataView` 类是 `UIView` 的子类。一个 `UIView` 对象有两个 `init` 方法：第一个处理视图的编程创建，第二个处理从设备上存储的应用程序包中加载
    XIB 文件。在这里，两种方法都将调用 `setupView()`。'
- en: '[PRE42]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This method finds and loads the `NoDataView` XIB file from the app bundle and
    returns a `UIView` instance stored inside it.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法查找并加载 `NoDataView` XIB 文件从应用程序包中，并返回存储在其内部的 `UIView` 实例。
- en: '[PRE43]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This method calls `loadViewFromNib()`, configures the view so it is the same
    size as the device screen, makes the width and height of the view flexible to
    adapt to size and orientation changes, and adds it to the device view hierarchy
    so it is visible onscreen.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法调用 `loadViewFromNib()`，配置视图使其与设备屏幕大小相同，使视图的宽度和高度灵活以适应大小和方向变化，并将其添加到设备视图层次结构中以便在屏幕上可见。
- en: '[PRE44]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This method sets the text of the `titleLabel` and `descLabel` properties.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法设置 `titleLabel` 和 `descLabel` 属性的文本。
- en: 'Now let''s set up the `NoDataView` XIB file. You may want to refer to [*Chapter
    12*](B17469_12_Final_VK_ePub.xhtml#_idTextAnchor182)*, Modifying and Configuring
    Cells*, which covers using the Size inspector and the Auto Layout constraint menus
    in more detail. Follow these steps:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们设置 `NoDataView` XIB 文件。你可能需要参考 [*第12章*](B17469_12_Final_VK_ePub.xhtml#_idTextAnchor182)*，修改和配置单元格*，它更详细地介绍了使用大小检查器和自动布局约束菜单。按照以下步骤操作：
- en: Click the `NoDataView` XIB file in the Project navigator.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `NoDataView` XIB 文件。
- en: Select `NoDataView` and press *Return*.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `NoDataView` 并按 *Enter* 键。
- en: Click the Library button to display the library. Type `label` in the filter
    field. A **Label** object appears in the results.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击库按钮以显示库。在过滤器字段中输入 `label`。一个 **标签** 对象出现在结果中。
- en: Drag two **Label** objects into the **View**, with one **Label** object above
    the other.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个 **标签** 对象拖入 **视图**，一个标签对象在另一个标签对象上方。
- en: 'Select the top label to represent the title. In the Attributes inspector, update
    the following values:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择顶部标签以表示标题。在属性检查器中更新以下值：
- en: '`TITLE GOES HERE` to the text field under the `Default (Label Color)`'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `Default (Label Color)` 下的文本框中输入 `TITLE GOES HERE`。
- en: '`Center`'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Center`'
- en: '`System Bold 26.0`'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`System Bold 26.0`'
- en: 'With the same label selected, update the following values in the Size inspector:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择相同的标签的情况下，在大小检查器中更新以下值：
- en: '`335`'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`335`'
- en: '`36`'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`36`'
- en: 'Select the bottom label. This will represent the description. In the Attributes
    inspector, update the following values:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择底部标签。这将代表描述。在属性检查器中更新以下值：
- en: '`Description goes here` to the text field under the `Default (Label Color)`'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`默认（标签颜色）`下的文本字段中输入`Description goes here`。
- en: '`Center`'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Center`'
- en: '`System Thin 17.0`'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`System Thin 17.0`'
- en: 'In the Size inspector, update the following values:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大小检查器中更新以下值：
- en: '`335`'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`335`'
- en: '`21`'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`21`'
- en: Select both labels by clicking the first label and holding down the *Shift*
    key while selecting the second label.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击第一个标签并按住**Shift**键同时选择第二个标签来选择两个标签。
- en: With both labels still selected, click the **Editor** menu and choose **Embed
    In** | **Stack View**.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个标签仍然被选择的情况下，点击**编辑**菜单并选择**嵌入** | **堆叠视图**。
- en: Select the `Vertical`
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Vertical`
- en: '`Center`'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Center`'
- en: '`8`'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`8`'
- en: With the `10`
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `10`
- en: '`10`'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`10`'
- en: Click the **Add 2 constraints** button.
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**添加2个约束**按钮。
- en: 'With the **Stack View** still selected, click the Align button. Set the following
    values:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择**Stack View**的情况下，点击对齐按钮。设置以下值：
- en: '**Horizontally in Container** (ticked)'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**水平容器内**（勾选）'
- en: '**Vertically in Container** (ticked)'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**垂直容器内**（勾选）'
- en: Click the **Add 2 Constraints** button.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**添加2个约束**按钮。
- en: Select **File's Owner** in the document outline.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档大纲中选择**文件所有者**。
- en: Open the Connections inspector and connect `titleLabel` to the label that says
    `TITLE GOES HERE`.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开连接检查器，将`titleLabel`连接到显示`TITLE GOES HERE`的标签。
- en: Connect `descLabel` to the other label.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`descLabel`连接到另一个标签。
- en: 'When you are done, you should see the following:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，你应该看到以下内容：
- en: '![Figure 17.25: Editor area showing NoDataView XIB file contents'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 17.25: 显示NoDataView XIB文件内容的编辑区域'
- en: '](img/Figure_17.25_B17469.jpg)'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.25_B17469.jpg)'
- en: 'Figure 17.25: Editor area showing NoDataView XIB file contents'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 'Figure 17.25: 显示NoDataView XIB文件内容的编辑区域'
- en: You have completed configuring `NoDataView.xib`. Now, let's put it all together
    so that the `NoDataView` if there aren't any restaurants offering the selected
    cuisine at a particular location. You will do this in the next section.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了`NoDataView.xib`的配置。现在，让我们将其全部组合起来，以便在没有任何餐厅提供所选菜系的位置时显示`NoDataView`。你将在下一节中完成此操作。
- en: Displaying a list of restaurants on the Restaurant List screen
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在餐厅列表屏幕上显示餐厅列表
- en: 'You now have everything you need to display a list of restaurants based on
    the selected location and cuisine on the **Restaurant List** screen. So, now it''s
    time to put it all together. Follow these steps:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在拥有了在**餐厅列表**屏幕上根据所选位置和菜系显示餐厅列表所需的一切。所以，现在是时候将其全部组合起来。按照以下步骤操作：
- en: 'Click the `RestaurantListViewController` file in the Project navigator. Before
    the `selectedRestaurant` property, add the following to create an instance of
    `RestaurantDataManager` and assign it to a `manager` property:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`RestaurantListViewController`文件。在`selectedRestaurant`属性之前添加以下内容以创建`RestaurantDataManager`实例并将其分配给`manager`属性：
- en: '[PRE45]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Add the following method inside the `private` extension to populate `manager`'s
    `items` array and to set the background view for the `selectedCity` and `selectedCuisine`
    properties are set; if they are, assign `selectedCity` to `city` and `selectedCuisine`
    to `cuisine`. Otherwise, exit the method.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`private`扩展内部添加以下方法以填充`manager`的`items`数组，并设置`selectedCity`和`selectedCuisine`属性的背景视图；如果它们已设置，将`selectedCity`赋值给`city`，将`selectedCuisine`赋值给`cuisine`。否则，退出该方法。
- en: '[PRE46]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Calls the `fetch(location:selectedCuisine:completion:)` method of the `RestaurantDataManager`
    instance, which loads the appropriate `RestaurantItem` instances into its `restaurantItems`
    array.
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用`RestaurantDataManager`实例的`fetch(location:selectedCuisine:completion:)`方法，该方法将适当的`RestaurantItem`实例加载到其`restaurantItems`数组中。
- en: '[PRE47]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: If the `restaurantItems` array of the `RestaurantDataManager` instance is not
    empty, set `backgroundView` of the `collectionView` instance to `nil`. Otherwise,
    create an instance of `NoDataView`, set its title and description, and set it
    as the `backgroundView` property of the `collectionView` instance.
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`RestaurantDataManager`实例的`restaurantItems`数组不为空，则将`collectionView`实例的`backgroundView`设置为`nil`。否则，创建`NoDataView`实例，设置其标题和描述，并将其设置为`collectionView`实例的`backgroundView`属性。
- en: '[PRE48]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Tells `collectionView` to refresh its view.
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 告诉`collectionView`刷新其视图。
- en: 'Update `collectionView(_:cellForItemAt:)` as follows to set the `RestaurantCell`
    instance''s properties:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式更新`collectionView(_:cellForItemAt:)`以设置`RestaurantCell`实例的属性：
- en: '[PRE49]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: cell.titleLabel.text = restaurantItem.name
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cell.titleLabel.text = restaurantItem.name
- en: '[PRE50]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: if let cuisine = restaurantItem.subtitle {
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if let cuisine = restaurantItem.subtitle {
- en: cell.cuisineLabel.text = cuisine
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cell.cuisineLabel.text = cuisine
- en: '}'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE51]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: if let imageURL = restaurantItem.imageURL {
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if let imageURL = restaurantItem.imageURL {
- en: 'if let url = URL(string: imageURL) {'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if let url = URL(string: imageURL) {'
- en: 'let data = try? Data(contentsOf: url)'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let data = try? Data(contentsOf: url)'
- en: if let imageData = data {
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if let imageData = data {
- en: DispatchQueue.main.async {
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DispatchQueue.main.async {
- en: cell.restaurantImageView.image =
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cell.restaurantImageView.image =
- en: 'UIImage(data: imageData)'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'UIImage(data: imageData)'
- en: '}'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE52]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: return cell
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回cell
- en: '}'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE53]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Update `collectionView(_:numberOfItemsInSection:)` as follows to get the number
    of collection views to be displayed from `manager`:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下更新`collectionView(_:numberOfItemsInSection:)`以从`manager`获取要显示的集合视图数量：
- en: '[PRE54]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Update `viewDidAppear()` as follows to call `createData()` when the collection
    view appears onscreen:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下更新`viewDidAppear()`以在集合视图出现在屏幕上时调用`createData()`：
- en: '[PRE55]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Build and run your app. Set a location and click a cuisine. If there are restaurants
    that match the selected criteria, you'll see them displayed in the `NoDataView`
    instance will be displayed.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。设置一个地点并点击一个菜系。如果有符合所选标准的餐厅，你将在`NoDataView`实例中看到它们被显示。
- en: '![Figure 17.26: iOS simulator showing Restaurant List screen'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.26：iOS模拟器显示餐厅列表屏幕'
- en: '](img/Figure_17.26_B17469.jpg)'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_17.26_B17469.jpg](img/Figure_17.26_B17469.jpg)'
- en: 'Figure 17.26: iOS simulator showing Restaurant List screen'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.26：iOS模拟器显示餐厅列表屏幕
- en: 'Before you finish with the `RestaurantListViewController` class, there is just
    one more thing. It would be nice if the selected city were shown in the **Restaurant
    List** screen. Let''s add code to display it at the top of the **Restaurant List**
    screen''s navigation bar using large titles. Follow these steps:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在你完成`RestaurantListViewController`类之前，还有一件事。如果所选城市在**餐厅列表**屏幕上显示，那就很好了。让我们添加代码在**餐厅列表**屏幕的导航栏顶部显示它，使用大标题。按照以下步骤操作：
- en: 'In the `RestaurantListViewController` file, add the following method into the
    `private` extension after `createData()` to display the selected city in the navigation
    bar:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RestaurantListViewController`文件中，在`createData()`之后在`private`扩展中添加以下方法，以在导航栏中显示所选城市：
- en: '[PRE56]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Every `UIViewController` instance has a `title` property, and if the navigation
    bar is visible, `title` will be visible as well. This method shows the navigation
    bar and sets the `RestaurantListViewController` instance's `title` to a string
    containing the city and state names in uppercase.
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个`UIViewController`实例都有一个`title`属性，如果导航栏可见，`title`也会可见。此方法显示导航栏并将`RestaurantListViewController`实例的`title`设置为包含城市和州名称的全大写字符串。
- en: 'Call `setupTitle()` after `createData()` in the `viewDidLoad()` method:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`viewDidLoad()`方法中在`createData()`之后调用`setupTitle()`：
- en: '[PRE57]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Build and run your app. Select a location and cuisine. You should see the city
    and state in uppercase letters at the top of the **Restaurant List** screen:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。选择一个地点和菜系。你应该在**餐厅列表**屏幕的顶部看到城市和州的全大写字母：
- en: '![Figure 17.27: iOS Simulator showing Restaurant List screen with title'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.27：iOS模拟器显示带有标题的餐厅列表屏幕'
- en: '](img/Figure_17.27_B17469.jpg)'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_17.27_B17469.jpg](img/Figure_17.27_B17469.jpg)'
- en: 'Figure 17.27: iOS Simulator showing Restaurant List screen with title'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.27：iOS模拟器显示带有标题的餐厅列表屏幕
- en: You have completed the implementation of the **Restaurant List** screen, and
    you have finally reached the end of this chapter. Good job!
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了**餐厅列表**屏幕的实现，你终于到达了本章的结尾。做得好！
- en: Summary
  id: totrans-436
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You have accomplished a lot in this chapter. You started by learning about the
    JSON format, and you created the `RestaurantDataManager` class, a data manager
    class that can load data from JSON files. You configured the `MapViewController`
    class to get data from a `RestaurantDataManager` instance to display a list of
    restaurants on the `LocationViewController` class to store the location selected
    by the user and pass it to an `ExploreViewController` instance when the `ExploreViewController`
    class to pass the selected location and cuisine to the `RestaurantListViewController`
    instance when a type of cuisine is selected. Finally, you configured the `RestaurantListViewController`
    class to get a list of restaurants from the `RestaurantDataManager` instance,
    and display them in the `NoDataView` class and view, which is displayed if there
    are no restaurants at a particular location offering the selected cuisine.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 你在本章中取得了许多成就。你首先学习了JSON格式，并创建了`RestaurantDataManager`类，这是一个可以从JSON文件加载数据的数据管理类。你配置了`MapViewController`类，使其从`RestaurantDataManager`实例获取数据，以在`LocationViewController`类中显示餐厅列表，并在用户选择位置后将其传递给`ExploreViewController`实例。当选择一种菜系时，`ExploreViewController`类将选择的位置和菜系传递给`RestaurantListViewController`实例。最后，你配置了`RestaurantListViewController`类，使其从`RestaurantDataManager`实例获取餐厅列表，并在`NoDataView`类和视图中显示它们，如果特定位置没有提供所选菜系的餐厅，则会显示该视图。
- en: You are now able to load and read data from JSON files and pass that data between
    different view controllers in your app for display in collection views and map
    views. You also learned how to use `UITableViewController` delegate methods to
    handle user interaction with table views. This will be useful when you're creating
    your own apps.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你能够从JSON文件中加载数据并读取数据，并在你的应用中传递这些数据，以便在集合视图和地图视图中显示。你还学习了如何使用`UITableViewController`代理方法来处理与表格视图的用户交互。这在你创建自己的应用时将非常有用。
- en: In the next chapter, you'll implement the **Restaurant Detail** screen, which
    displays details of a specific restaurant using a table view containing static
    cells.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将实现**餐厅详情**屏幕，该屏幕通过包含静态单元格的表格视图显示特定餐厅的详细信息。
