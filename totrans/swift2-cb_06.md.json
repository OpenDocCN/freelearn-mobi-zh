["```swift\n    var name = \"Cecil Costa\"\n    var str = \"Hello, \\(name)\"\n    ```", "```swift\n    var myCity = \"Cambridge\"\n    var yourCity = \"New York\"\n\n    if myCity == yourCity {\n        print(\"We live in the same city\")\n    }else {\n        print(\"We live in different cities\")\n    }\n    ```", "```swift\n    var fib_n = 1\n    var fib_n_1 = 1\n\n    for i in 3...10 {\n        var sum = fib_n + fib_n_1\n        fib_n_1 = fib_n\n        fib_n = sum\n    }\n\n    fib_n\n    ```", "```swift\n    func fib (n:Int) -> Int{\n        if n == 1 || n == 2  {\n            return 1\n        }\n        return fib(n-1) + fib(n-2)\n    }\n\n    fib(10)\n    ```", "```swift\n    for i in 1...5 {\n        for j in 1...i {\n            print(\"*\")\n        }\n        print()\n    }\n    ```", "```swift\n        for j in 1...i {\n            print(\"*\")\n     j // ‚Üê Yes, only the letter \"j\"\n        }\n    ```", "```swift\n    var temperatures = [15, 8, 3, -1, 2, 3, 3, 9, 14, 18, 23, 27, 30, 34, 20, 30, 35, 39, 41]\n    ```", "```swift\n    for temp in temperatures {\n        var color:UIColor\n        if temp <= 0 {\n            color = UIColor(red: 0.0, green: 0.0, blue: 1.0, alpha: 1.0)\n        } else if temp >= 40 {\n            color = UIColor(red: 1.0, green: 0.0, blue: 0.0, alpha: 1.0)\n        }else {\n            var proportional = CGFloat(temp) / CGFloat(40)\n            color = UIColor(red: proportional, green: 0, blue: CGFloat(1) - proportional, alpha: 1.0)\n        }\n        color // Temperature representation\n    }\n    ```", "```swift\n    class ImageStretcher{\n        var imageView:UIImageView\n        var times = 0\n        var currentFrame:CGRect\n        init(){\n            let image = UIImage(named: \"secret_message\")!\n            imageView = UIImageView(image: image)\n            currentFrame = imageView.frame\n        }\n\n        func stretch(){\n            currentFrame.size.height *=  CGFloat(1.1)\n            currentFrame.size.width *=  CGFloat(0.9)\n            imageView.frame = currentFrame\n            times++\n        }\n    }\n    ```", "```swift\n    let imageStretcher = ImageStretcher()\n    ```", "```swift\n    for i in 1...15 {\n       imageStretcher.stretch()\n    }\n    ```", "```swift\n    let string = NSMutableAttributedString(string: \"The quick brown fox jumps over the lazy dog\")\n    ```", "```swift\n    let fontSizes = [CGFloat(14.0), CGFloat(18.0), CGFloat(24.0)]\n    let colors = [UIColor.blackColor(), UIColor.blueColor(), UIColor.redColor()]\n    ```", "```swift\n    let fontSelectors = [\n        {(size: CGFloat) -> Void in\n            string.addAttribute(NSFontAttributeName , value: UIFont.systemFontOfSize(size), range: NSMakeRange(0, string.length))\n        },\n        {(size: CGFloat) -> Void in\n            string.addAttribute(NSFontAttributeName , value: UIFont(name: \"HelveticaNeue-Bold\", size: size)!, range: NSMakeRange(0, string.length))\n        },{(size: CGFloat) -> Void in\n            string.addAttribute(NSFontAttributeName , value: UIFont(name: \"HelveticaNeue-Italic\", size: size)!, range: NSMakeRange(0, string.length))\n        }\n    ]\n    ```", "```swift\n    for fontSize in fontSizes {\n      for color in colors {\n        for selector in fontSelectors {\n          string.addAttribute(NSForegroundColorAttributeName, value: color, range: NSMakeRange(0, string.length))\n          selector(fontSize)\n\n          string\n        }\n      }\n    }\n    ```", "```swift\n    fontSizes.map { (fontSize)-> Bool in\n      colors.map { (color) -> Bool in\n        fontSelectors.map { (selector) -> Bool in\n          string.addAttribute(NSForegroundColorAttributeName, value: color, range: NSMakeRange(0, string.length))\n          selector(fontSize)\n          string\n          return true\n        }\n        return true\n      }\n      return true\n    }\n    ```", "```swift\n    let url = NSURL(string: \"https://api.github.com/users/mralexgray/repos\")!\n    ```", "```swift\n    let request = NSURLRequest(URL: url)\n    ```", "```swift\n    NSURLConnection.sendAsynchronousRequest(request, queue: NSOperationQueue(), completionHandler:{ (response: NSURLResponse!, data: NSData!, error: NSError!) -> Void in\n        if error != nil {\n            error.description\n        }else {\n            data\n        }\n    })\n    ```", "```swift\n    import XCPlayground\n\n    XCPSetExecutionShouldContinueIndefinitely(continueIndefinitely: true)\n    ```", "```swift\n    class HttpDelegate: NSObject, NSURLConnectionDelegate {\n\n        func connection(connection: NSURLConnection, canAuthenticateAgainstProtectionSpace protectionSpace: NSURLProtectionSpace) -> Bool{\n            return true\n        }\n\n        func connection(connection: NSURLConnection, didReceiveAuthenticationChallenge challenge: NSURLAuthenticationChallenge){\n            challenge.sender.useCredential(NSURLCredential(trust: challenge.protectionSpace.serverTrust!), forAuthenticationChallenge: challenge)\n        }\n    }\n    let delegate = HttpDelegate()\n    var total = 0\n    XCPCaptureValue(\"total\",total)\n    let connection = NSURLConnection(request: request, delegate: delegate, startImmediately: true)!\n    ```", "```swift\n            total++\n            XCPCaptureValue(\"total\",total)\n            var err: NSError?\n            var firstResponse = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: &err)  as [[String:AnyObject]]?\n\n            for response in firstResponse!{\n                for (key, value) in response{\n                    if (key as NSString).containsString(\"_url\") && value is String{\n                        let valueString = value as String\n                        if !(valueString as NSString).containsString(\"{\"){\n                            let _url = NSURL(string: value as String)!\n                            let _request = NSURLRequest(URL: _url)\n                            NSURLConnection.sendAsynchronousRequest(_request, queue: NSOperationQueue(), completionHandler: { (_response, _data, err) -> Void in\n                                total = total + 1\n                                total\n                                XCPCaptureValue(\"total\",total)\n                            })\n                        }\n                    }\n                }\n            }\n    ```", "```swift\n    class CheckersBoard:NSObject {\n    ```", "```swift\n        enum BoardSpace {\n            case FREE,\n            WHITE,\n            BLACK\n        }\n    ```", "```swift\n        var board = [[BoardSpace]](count:8 , repeatedValue:[BoardSpace](count: 8, repeatedValue: .FREE))\n    ```", "```swift\n        let squareSize = 24\n    ```", "```swift\n        func debugQuickLookObject() -> AnyObject? {\n    ```", "```swift\n            UIGraphicsBeginImageContext(CGSizeMake(CGFloat(squareSize * 8), CGFloat(squareSize * 8)))\n    ```", "```swift\n    for row in 0...7 {\n      for col in 0...7 {\n    ```", "```swift\n    let offsetx = CGFloat(col * squareSize)\n                    let offsety = CGFloat(row * squareSize)\n    ```", "```swift\n                    if col % 2 == row % 2 {\n                        UIColor.grayColor().setFill()\n                    }else {\n                        UIColor.blackColor().setFill()\n                    }\n    ```", "```swift\n              var bezier = UIBezierPath(rect: CGRectMake(offsetx, offsety, CGFloat(squareSize), CGFloat(squareSize)))\n              bezier.fill()\n    ```", "```swift\n    switch board[row][col] {\n                    case .WHITE:\n                        UIColor.whiteColor().setFill()\n                    case .BLACK:\n                        UIColor.brownColor().setFill()\n                    default:\n                        continue\n                    }\n                    bezier = UIBezierPath(arcCenter: CGPointMake(offsetx + CGFloat( squareSize / 2 ) , offsety + CGFloat(squareSize / 2)), radius: CGFloat(squareSize / 3), startAngle: CGFloat(0.0), endAngle: CGFloat(360), clockwise: true)\n                    bezier.closePath()\n                    bezier.fill()\n    ```", "```swift\n                }\n            }\n\n            let image = UIGraphicsGetImageFromCurrentImageContext()\n            UIGraphicsEndImageContext()\n            return image\n        }\n    }\n    ```", "```swift\n    var board = CheckersBoard()\n\n    board.board[2][5] = .WHITE\n    board.board[2][3] = .BLACK\n    board.board[4][3] = .WHITE\n    board.board[2][1] = .BLACK\n    board.board[0][5] = .WHITE\n    board.board[1][0] = .BLACK\n    board.board[7][6] = .WHITE\n    board.board[5][6] = .BLACK\n\n    board\n    ```", "```swift\n    import UIKit\n\n    class SomeSimpleClass: NSObject {\n\n        var someVar: NSString?\n        var someOtherVar: NSString?\n\n        func doSomething() {\n            print(\"Doing something...\")\n        }\n\n        func doSomethingWithStuff(parameterOne: String, parameterTwo: Bool) -> String {\n            print(\"This is parameter one: \\(parameterOne)\")\n            print(\"This is parameter two: \\(parameterTwo)\")\n\n            return \"Some kind of string.\"\n        }\n\n    }\n    ```", "```swift\n    /// A simple class that does some stuff you want it to do.\n    ```", "```swift\n    /// Does something; in this case, prints out a message letting the user know that something is happening.\n    ```", "```swift\n    /**\n            This method does something, but accepts parameters and also return a String value. Lets add some explicit documentation for these items.\n\n            - Parameter parameterOne: The first parameter to be passed in.\n            - Parameter parameterTwo: The second parameter to be passed in.\n\n            - Returns: A string value\n         */\n    ```", "```swift\n    /**\n            This method does something, but accepts parameters and also return a String value. Lets add some explicit documentation for these items.\n\n            - Parameters: \n                - parameterOne: The first parameter to be passed in.\n                - parameterTwo: The second parameter to be passed in.\n\n            - Returns: A string value\n         */\n    ```", "```swift\n    - Author: Kyle Begeman\n\n    - Version: 1.04\n\n    - Note: This is a simple class\n\n    - Warning: This class doesn't actually do anything!\n\n    - ToDo: Add some actual functionality to this class\n    ```", "```swift\n    # Lists\n\n             You can apply *italic*, **bold**, or `code` inline styles to any text.\n\n             ## Unordered Lists\n\n             - Some item\n             - Another item\n             - The last item\n\n             ## Ordered Lists\n\n             1\\. Some item\n             2\\. Another item\n             3\\. The last item\n    ```", "```swift\n    //: [Next](@next)\n    ```", "```swift\n    //: [Start Page](Start%20Now)\n    ```"]