["```swift\n$motion create LearnTest\n\n```", "```swift\ndescribe \"Application 'LearnTest'\" do\n  before do\n    @app = UIApplication.sharedApplication\n  end\n\n  it \"has one window\" do\n    @app.windows.size.should == 1\n  end\nend\n```", "```swift\ndescribe \"Application 'LearnTest'\" do\nend\n```", "```swift\n  it \"has one window\" do\n    @app.windows.size.should == 1\n  end\n```", "```swift\n$ rake spec\nBuild ./build/iPhoneSimulator-6.0-Development\n Compile ./app/app_delegate.rb\n Compile /Library/RubyMotion/lib/motion/spec.rb\n Compile /Library/RubyMotion/lib/motion/spec/helpers/ui.rb\n Compile ./spec/main_spec.rb\n Create ./build/iPhoneSimulator-6.0-Development/LearnTest_spec.app\n Link ./build/iPhoneSimulator-6.0-Development/LearnTest_spec.app/LearnTest\n Create ./build/iPhoneSimulator-6.0-Development/LearnTest_spec.app/Info.plist\n Create ./build/iPhoneSimulator-6.0-Development/LearnTest_spec.app/PkgInfo\n Create ./build/iPhoneSimulator-6.0-Development/LearnTest_spec.dSYM\n Simulate ./build/iPhoneSimulator-6.0-Development/LearnTest_spec.app\nApplication 'LearnTest'\n has one window [FAILED]\n\nBacon::Error: 0.==(1) failed\n spec.rb:649:in 'satisfy:': Application 'LearnTest' - has one window\n spec.rb:663:in 'method_missing:'\n spec.rb:279:in 'block in run_spec_block'\n spec.rb:403:in 'execute_block'\n spec.rb:279:in 'run_spec_block'\n spec.rb:294:in 'run'\n\n1 specifications (1 requirements), 1 failures, 0 errors\n\n```", "```swift\nclass AppDelegate\n  def application(application, didFinishLaunchingWithOptions:launchOptions)\n    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.applicationFrame)\n    @window.makeKeyAndVisible\n  true\n  end\nend\n```", "```swift\n$rake spec\nApplication 'LearnTest'\n - has one window\n\n1 specifications (1 requirements), 0 failures, 0 errors\n\n```", "```swift\nit \"should set rootviewcontroller as RootViewController\" do\n   @app.keyWindow.rootViewController.class.should == RootViewController\nend\n```", "```swift\nclass RootViewController  < UIViewController\ndef viewDidLoad\n\n end\nend\n\n```", "```swift\n@window.rootViewController = RootViewController.alloc.init\n```", "```swift\ndescribe \"sum_of_square_number\" do  \n  it \"should return sum of squares of numbers\" do\n    array = [2,4,1]\n    controller.sum_of_square_number(array).should.equal 21\n  end\n\n  it \"should return 0 if array is blank\" do\n    array = []\n    controller.sum_of_square_number(array).should.equal 0\n  end\nend\n```", "```swift\ndef sum_of_square_number(array)\n  sum = 0\n  array.each do |number|  \n    sum = sum + number*number\n  end\n  sum\nend\n```", "```swift\nrake spec files=foo_spec,spec/bar_spec.rb\n\n```", "```swift\nit \"should have a label and a button\" do\n  view('Click Button').should.not.equal nil\n  button = view('Click Me')\n  button.should.not.equal nil\n  button.isEnabled.should.equal true\nend\n```", "```swift\nviews(UIButton) # => [button1, button2]\n```", "```swift\ndef viewDidLoad\n  super\n  view.backgroundColor = UIColor.whiteColor\n  @label = UILabel.new\n  @label.text = 'Click Button'\n  @label.textAlignment = UITextAlignmentCenter\n  @label.frame = [[80,50],[150,50]]\n  view.addSubview(@label)\n  @normal_button = UIButton.buttonWithType(UIButtonTypeRoundedRect)\n  @normal_button.frame = [[80,150],[180,37]]\n  @normal_button.setTitle(\"Click Me\", forState:UIControlStateNormal)\n  @normal_button.addTarget(self, action:'buttonIsPressed', forControlEvents:UIControlEventTouchDown)\n  view.addSubview(@normal_button)\nend\n```", "```swift\n$rake\n\n```", "```swift\nit \"should show sum of squares on click of button\" do\n  tap 'Click Me'\n  view('55').should.not.equal nil\nend\n```", "```swift\ndef buttonIsPressed\n  array = [1,2,3,4,5]\n  @label.text = sum_of_square_number(array).to_s\nend\n```", "```swift\n$rake\n\n```", "```swift\nrotate_device(:to => orientation, :button => location)\n```", "```swift\nit \"has default orientations for portrait\" do\n   rotate_device :to => :landscape\n   controller.interfaceOrientation.should == UIInterfaceOrientationPortrait\n\n   rotate_device :to => :portrait\n   controller.interfaceOrientation.should == UIInterfaceOrientationPortrait\nend\n```", "```swift\n$rake spec\nApplication 'LearnTest'\n has one window\n should set rootviewcontroller as RootViewController\nRootViewController\n should have label and button\n should show sum of square on click of button\n has default orientations for portrait [FAILED]\n\nsum_of_square_number\n should written sum of square of numbers\n should written 0 if array is blank\n\nBacon::Error: 4.==(1) failed\n spec.rb:649:in 'satisfy:': RootViewController - has default orientations for portrait\n spec.rb:663:in 'method_missing:'\n spec.rb:279:in 'block in run_spec_block'\n spec.rb:403:in 'execute_block'\n spec.rb:279:in 'run_spec_block'\n spec.rb:294:in 'run'\n\n```", "```swift\napp.interface_orientations = [:portrait]\n\n```", "```swift\n$rake spec\n\nApplication 'LearnTest'\n - has one window\n - should set rootviewcontroller as RootViewController\n\nRootViewController\n - should have label and button\n - should show sum of square on click of button\n - has default orientations for portrait\n\nsum_of_square_number\n - should written sum of square of numbers\n - should written 0 if array is blank\n\n7 specifications (10 requirements), 0 failures, 0 errors\n\n```", "```swift\n$rake\n\n```", "```swift\naccelerate(:x => x_axis_acceleration, :y => y_axis_acceleration,\n :z => z_axis_acceleration, :duration => duration)\n\n```", "```swift\ntap(label_or_view, :at => location, :times => number_of_taps, :touches => number_of_fingers)\n```", "```swift\ntap \"Test Label\"\n```", "```swift\ntap 'Test Label', :times => 5, :touches => 2\n```", "```swift\nflick(label_or_view, :from => location, :to => location, :duration => duration)\n```", "```swift\nflick \"test label\", :to => :right\n```", "```swift\npinch_open(label_or_view, :from => location, :to => location, :duration => duration)\n```", "```swift\nview('Test Zoom').zoomScale # => 1.0\npinch_open 'Test Zoom'\nview('Test Zoom').zoomScale # => 2.0\n```", "```swift\npinch_close(label_or_view, :from => location, :to => location, :duration => duration)\n```", "```swift\nview('Test Zoom').zoomScale # => 1.0\npinch_close 'Test Zoom'\nview('Test Zoom').zoomScale # => 0.5\n```", "```swift\ndrag(label_or_view, :from => location, :to => location, :number_of_points => steps,\n     :points => path, :touches => number_of_fingers, :duration => duration)\n```", "```swift\nview('Some Scrollable scrollview').contentOffset.y # => 0\ndrag 'Some Scrollable scrollview', :from => :bottom\nview('Some Scrollable scrollview').contentOffset.y # => 400\n```", "```swift\nrotate(label_or_view, :radians => angle, :degrees => angle, :touches => number_of_fingers, :duration => duration)\n```"]