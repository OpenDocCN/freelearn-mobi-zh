["```swift\n$ git clone -b 2nd/chapter04 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition.git PassXYZ.Vault2 \n```", "```swift\n<Label Text=\"{Binding FirstName}\" /> \n```", "```swift\nlabel.SetBinding(Label.TextProperty, new Binding(\"FirstName\")); \n```", "```swift\n<StackLayout Spacing=\"20\" Padding=\"15\">\n  <Label Text=\"Name:\" FontSize=\"Medium\" />\n  <Label Text=\"{Binding Name}\" FontSize=\"Small\"/>                  //(1)\n  <Label Text=\"Description:\" FontSize=\"Medium\" />\n  <Label Text=\"{Binding Description}\" FontSize=\"Small\"/>           //(2)\n</StackLayout> \n```", "```swift\nObject -> BindableObject -> Element -> NavigableElement -> VisualElement -> View -> Label \n```", "```swift\nusing PassXYZ.Vault.Models;\nnamespace PassXYZ.Vault.ViewModels {\n[QueryProperty(nameof(ItemId), nameof(ItemId))]\npublic class ItemDetailViewModel : BaseViewModel {\n        private string itemId;\n        private string name;\n        private string description;\n        public string Id { get; set; }\n        public string Name {                                      //(1)\n            get => name;\n            set => SetProperty(ref name, value);\n        }\n        public string Description...                              //(2)\n        public string ItemId...\n        public async void LoadItemId(string itemId) {             //(3)\n            try {\n                var item = await DataStore.GetItemAsync\n                    (itemId);\n                Id = item.Id;\n                Name = item.Name;\n                Description = item.Description;\n            }\n            catch (Exception) {\n                Debug.WriteLine(\"Failed to Load Item\");\n            }\n        }\n} \n```", "```swift\n<object property=\"{Binding bindProp1=value1[, bindPropN=valueN]*}\" ... /> \n```", "```swift\n<Label Text=\"{Binding Path=Description}\" FontSize=\"Small\"/> \n```", "```swift\n<Label Text=\"{Binding Description}\" FontSize=\"Small\"/> \n```", "```swift\n<Label Text=\"{Binding Source={x:Reference someLabel}, Path=Text}\" /> \n```", "```swift\nusing PassXYZ.Vault.ViewModels;\nusing System.ComponentModel;\nusing Microsoft.Maui;\nusing Microsoft.Maui.Controls;\nnamespace PassXYZ.Vault.Views\n{\n  public partial class ItemDetailPage : ContentPage\n  {\n    public ItemDetailPage()\n    {\n      InitializeComponent();\n      BindingContext = new ItemDetailViewModel();                 //(1)\n    }\n  }\n} \n```", "```swift\n<StackLayout Spacing=\"20\" Padding=\"15\">\n  <Label Text=\"Text:\" FontSize=\"Medium\" />\n  <Label x:Name=\"labelText\" FontSize=\"Small\"/>                     //(2)\n  <Label Text=\"Description:\" FontSize=\"Medium\" />\n  <Label Text=\"{Binding Description}\" FontSize=\"Small\"/>\n</StackLayout> \n```", "```swift\n public ItemDetailPage()\n    {\n        InitializeComponent();\n        BindingContext = new ItemDetailViewModel();\n        labelText.SetBinding(Label.TextProperty, \"Text\");          //(3)\n    } \n```", "```swift\nIsRefreshing=\"{Binding IsBusy, Mode=OneWay}\" \n```", "```swift\n<Label Text=\"Text\" FontSize=\"Medium\" />\n<Entry Text=\"{Binding Text, Mode=TwoWay}\" FontSize=\"Medium\"/>\n<Label Text=\"Description\" FontSize=\"Medium\" />\n<Editor Text=\"{Binding Description, Mode=OneWayToSource}\"\n  AutoSize=\"TextChanges\" FontSize=\"Medium\" Margin=\"0\" /> \n```", "```swift\nnamespace PassXYZ.Vault.ViewModels;\npublic class BaseViewModel : INotifyPropertyChanged              //(1)\n{\n  public IDataStore<Item> DataStore =>\n    DependencyService.Get<IDataStore<Item>>();\n  bool isBusy = false;\n  public bool IsBusy {\n    get { return isBusy; }\n    set { SetProperty(ref isBusy, value); }                      //(2)\n  }\n  string title = string.Empty;\n  public string Title {\n    get { return title; }\n    set { SetProperty(ref title, value); }\n  }\n  protected bool SetProperty<T>(ref T backingStore,\n      T value,\n      [CallerMemberName] string propertyName = \"\",\n      Action onChanged = null) {\n    if (EqualityComparer<T>.Default.Equals\n        (backingStore, value))\n        return false;\n    backingStore = value;\n    onChanged?.Invoke();\n    OnPropertyChanged(propertyName);\n    return true;\n  }\n#region INotifyPropertyChanged\n public event PropertyChangedEventHandler PropertyChanged;        //(4)\n  protected void OnPropertyChanged([CallerMemberName]\n    string propertyName = \"\") {                                   //(3)\n    var changed = PropertyChanged;\n    if (changed == null)\n        return;\n    changed.Invoke(this, new PropertyChangedEventArgs(propertyName));\n  }\n#endregion\n} \n```", "```swift\n public string Name {\n            get => name;\n            set => SetProperty(ref name, value);\n        }\n        public string Description {\n            get => description;\n            set => SetProperty(ref description, value);\n        } \n```", "```swift\n    <ItemGroup>\n      <PackageReference Include=\"CommunityToolkit.Mvvm\"\n        Version=\"8.2.1\" />\n    </ItemGroup> \n    ```", "```swift\nprivate string description;\npublic string Description {\n  get => description;\n  set => SetProperty(ref description, value);\n} \n```", "```swift\n[ObservableProperty]\nprivate string description; \n```", "```swift\n<Label Text=\"{Binding Description}\"\n  FontSize=\"Small\"\n  TextType =\"Html\"\n  Style=\"{DynamicResource ListItemDetailTextStyle}\" /> \n```", "```swift\npublic class ItemsViewModel : BaseViewModel\n{\n  ...\n  public Command LoadItemsCommand { get; }                      //(1)\n  public Command AddItemCommand { get; }                        //(2)\n\n  public ItemsViewModel()\n  {\n    ...\n    LoadItemsCommand = new Command(\n        async () => await LoadItems());                         //(3)\n    AddItemCommand = new Command(AddItem);                      //(4)\n    ...\n  }\n  private async Task LoadItems()                                //(5)\n  {\n    ...\n  }\n  private async void AddItem(object obj)                        //(6)\n  {\n    await Shell.Current.GoToAsync(nameof(NewItemPage));\n  }\n  ...\n} \n```", "```swift\npublic partial class ItemsViewModel : BaseViewModel\n{\n  ...\n  [RelayCommand]\n  private async void AddItem(object obj)                        //(1)\n  {\n    await Shell.Current.GoToAsync(nameof(NewItemPage));\n  }\n\n  ...\n\n  [RelayCommand]\n  private async Task LoadItems()                                //(2)\n  {\n    ...\n  }\n} \n```", "```swift\npublic class Item\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n  public string Description { get; set; }\n} \n```", "```swift\nusing System.Text;\nnamespace KPCLib\n{\n  public abstract class Item : INotifyPropertyChanged             //(8)\n  {\n    public abstract DateTime LastModificationTime {get;\n        set;};}                                                   //(7)\n    public abstract string Name { get; set; }                     //(1)\n    public abstract string Description { get;}                    //(2)\n    public abstract string Notes { get; set; }                    //(3)\n    public abstract bool IsGroup { get; }                         //(4)\n    public abstract string Id { get; }                            //(5)\n    virtual public Object ImgSource { get; set; }                 //(6)\n#region INotifyPropertyChanged ...\n  }\n} \n```", "```swift\n <ItemGroup>\n    <PackageReference Include=\"PassXYZLib\" Version=\"2.1.2\" />\n  </ItemGroup> \n```", "```swift\ndotnet add package PassXYZLib \n```", "```swift\n Static string[] jsonData =â€¦;\n    readonly List<Item> items;\n    public MockDataStore() {\n        items = new List<Item>() {\n            new PxEntry(jsonData[0]),\n            new PxEntry(jsonData[1]),\n            new PxEntry(jsonData[2]),\n            new PxEntry(jsonData[3]),\n            new PxEntry(jsonData[4])\n        };\n    } \n```", "```swift\n[QueryProperty(nameof(ItemId), nameof(ItemId))]\npublic partial class ItemDetailViewModel : BaseViewModel\n{\n  readonly IDataStore<Item> dataStore;\n  ILogger<ItemDetailViewModel> logger;\n  public ObservableCollection<Field> Fields { get; set; }         //(1)\n  public ItemDetailViewModel(IDataStore<Item> dataStore,\n    ILogger<ItemDetailViewModel> logger)\n  {\n    this.dataStore = dataStore;\n    this.logger = logger;\n    Fields = new ObservableCollection<Field>();                   //(2)\n  }\n  [ObservableProperty]\n  private string? title;\n  [ObservableProperty]\n  private string? id;\n  [ObservableProperty]\n  private string? description;\n  [ObservableProperty]\n  private bool isBusy;\n  private string? itemId;\n  public string ItemId {\n    get {\n      if(itemId == null)\n      { throw new NullReferenceException(nameof(itemId)); }\n      return itemId;\n    }\n    set {\n      itemId = value;\n      LoadItemId(value);\n    }\n  }\n  public override void OnItemSelecteion(object sender)\n  {\n    logger.LogDebug(\"OnItemSelecteion is invoked.\");\n  }\n  public async void LoadItemId(string itemId)\n  {\n    if (itemId == null)\n    { throw new ArgumentNullException(nameof(itemId)); }\n    var item = await dataStore.GetItemAsync(itemId);\n    if (item == null)\n    { throw new NullReferenceException(itemId); }\n    Id = item.Id;\n    Title = item.Name;\n    Description = item.Description;\n    if (!item.IsGroup) {\n      PwEntry dataEntry = (PwEntry)item;                          //(3)\n      Fields.Clear();\n      List<Field> fields =\n        dataEntry.GetFields(GetImage: FieldIcons.GetImage);       //(4)\n      foreach (Field field in fields) {\n        Fields.Add(field);\n      }\n      logger.LogDebug($\"ItemDetailViewModel:\n        Name={dataEntry.Name}.\");\n    }\n  }\n} \n```", "```swift\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage\n  xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n  x:Class=\"PassXYZ.Vault.Views.ItemDetailPage\"\n  xmlns:local=\"clr-namespace:PassXYZ.Vault.ViewModels\"\n  xmlns:model=\"clr-namespace:KPCLib;assembly=KPCLib\"              //(1)\n  x:DataType=\"local:ItemDetailViewModel\"\n  Title=\"{Binding Title}\">\n  <StackLayout>\n    <ListView\n      x:Name=\"FieldsListView\"\n      ItemsSource=\"{Binding Fields}\"                              //(2)\n      VerticalOptions=\"FillAndExpand\"\n      HasUnevenRows=\"False\"\n      RowHeight=\"84\"\n      IsPullToRefreshEnabled=\"true\"\n      IsRefreshing=\"{Binding IsBusy, Mode=OneWay}\"\n      CachingStrategy=\"RetainElement\"\n      ItemSelected=\"OnFieldSelected\">\n      <ListView.ItemTemplate>\n        <DataTemplate>                                            //(3)\n        ...               \n        </DataTemplate>\n      </ListView.ItemTemplate>\n      <ListView.Footer>\n        <StackLayout Padding=\"5\" Orientation=\"Horizontal\">\n          <Label\n            Text=\"{Binding Description}\"\n            FontSize=\"Small\"\n            Style=\"{DynamicResource ListItemDetailTextStyle}\"\n            TextType =\"Html\"/>\n        </StackLayout>\n      </ListView.Footer>\n    </ListView>\n  </StackLayout>\n</ContentPage> \n```", "```swift\nxmlns:model=\"clr-namespace:KPCLib;assembly=KPCLib\" \n```", "```swift\n<DataTemplate>\n  <ViewCell>\n    <Grid Padding=\"10\" x:DataType=\"model:Field\" >                  //(1)\n      <Grid.RowDefinitions...>\n      <Grid.ColumnDefinitions...>\n      <Grid Grid.RowSpan=\"2\" Padding=\"10\">\n        <Grid.ColumnDefinitions...>\n        <Image Grid.Column=\"0\" Source=\"{Binding ImgSource}\"        //(2)\n        HorizontalOptions=\"Fill\"\n        VerticalOptions=\"Fill\" />                        \n      </Grid>\n      <Label Text=\"{Binding Key}\"  Grid.Column=\"1\".../>            //(3)\n      <Label Text=\"{Binding Value}\" Grid.Row=\"1\"                   //(4)\n        Grid.Column=\"1\".../>                   \n    </Grid>\n  </ViewCell>\n</DataTemplate> \n```", "```swift\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ViewCell ...\n  xmlns:vm=\"clr-namespace:PassXYZ.Vault.ViewModels\"\n  x:Class=\"PassXYZ.Vault.Views.Templates.**KeyValueView**\">           //(1)\n  <Grid Padding=\"10\" VerticalOptions=\"FillAndExpand\">             //(2)\n    <Grid.RowDefinitions>\n      <RowDefinition Height=\"Auto\" />\n      <RowDefinition Height=\"Auto\" />\n    </Grid.RowDefinitions>\n    <Grid.ColumnDefinitions>\n      <ColumnDefinition Width=\"Auto\" />\n      <ColumnDefinition Width=\"Auto\" />\n    </Grid.ColumnDefinitions>\n    <Grid Grid.RowSpan=\"2\" Padding=\"10\">\n      <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"32\" />\n      </Grid.ColumnDefinitions>\n      <Image x:Name=**\"imageField\"** Grid.Column=\"0\"                 //(5)\n        HorizontalOptions=\"Fill\" VerticalOptions=\"Fill\">\n        <Image.Source>\n        ...\n        </Image.Source>\n      </Image>\n    </Grid>\n    <Label x:Name=**\"keyField\"** ... />                              //(3)\n    <Label x:Name=**\"valueField\"** ... />                            //(4)\n    <Grid.GestureRecognizers>\n      <TapGestureRecognizer\n        NumberOfTapsRequired=\"1\"\n        Command=\"{Binding Source=\n        {RelativeSource AncestorType=\n        {x:Type vm:BaseViewModel}},\n        Path=ItemSelectionChangedCommand}\"\n        CommandParameter=\"{Binding .}\">\n      </TapGestureRecognizer>\n    </Grid.GestureRecognizers>\n  </Grid>\n</ViewCell> \n```", "```swift\npublic partial class KeyValueView : ViewCell {\n  public KeyValueView() {\n    InitializeComponent();\n  }\n  public static readonly BindableProperty KeyProperty =\n    BindableProperty.Create(nameof(Key), typeof(string),\n    typeof(KeyValueView), string.Empty,\n    propertyChanging: (bindable, oldValue, newValue) =>\n    {\n      var control = bindable as KeyValueView;\n      var changingFrom = oldValue as string;\n      var changingTo = newValue as string;\n      if(control == null) {\n        throw new NullReferenceException(nameof(control)); }\n      if(changingTo == null) {\n        throw new NullReferenceException(nameof(changingTo));\n      }\n      control.Key = changingTo;\n    });\n  public string Key {                                            //(1)\n    get { return (string)GetValue(KeyProperty); }\n    set {\n        keyField.Text = value;\n        SetValue(KeyProperty, value);\n    }\n  }\n  public static readonly BindableProperty ValueProperty =\n    BindableProperty.Create(nameof(Value), typeof(string),\n    typeof(KeyValueView), string.Empty,\n    propertyChanging: (bindable, oldValue, newValue) =>\n    {\n      var control = bindable as KeyValueView;\n      var changingFrom = oldValue as string;\n      var changingTo = newValue as string;\n      if (control == null)\n        { throw new NullReferenceException(nameof(control)); }\n      if (changingTo == null) {\n        throw new NullReferenceException(nameof(changingTo));\n      }\n      control.Value = changingTo;\n    });\n  public string Value {                                           //(2)\n      get { return (string)GetValue(ValueProperty); }\n      set {\n          valueField.Text = value;\n          SetValue(ValueProperty, value);\n      }\n  }\n  public static readonly BindableProperty SourceProperty =\n    BindableProperty.Create(nameof(Source),\n    typeof(ImageSource), typeof(KeyValueView), default!,\n    propertyChanging: (bindable, oldValue, newValue) =>\n    {\n      var control = bindable as KeyValueView;\n      var changingFrom = oldValue as ImageSource;\n      var changingTo = newValue as ImageSource;\n      if (control == null)\n        { throw new NullReferenceException(nameof(control)); }\n      if (changingTo == null) {\n        throw new NullReferenceException(nameof(changingTo));\n      }\n      control.Source = changingTo;\n    });\n  public ImageSource Source {                                     //(3)\n    get { return (ImageSource)GetValue(SourceProperty); }\n    set {\n      imageField.Source = value;\n      SetValue(SourceProperty, value);\n    }\n  }\n} \n```", "```swift\n public static readonly BindableProperty **KeyProperty** =\n    BindableProperty.Create(nameof(Key), typeof(string),\n    typeof(KeyValueView), string.Empty,\n    propertyChanging: (bindable, oldValue, newValue) =>\n    {\n      var control = bindable as KeyValueView;\n      var changingFrom = oldValue as string;\n      var changingTo = newValue as string;\n      if(control == null) {\n        throw new NullReferenceException(nameof(control)); }\n      if(changingTo == null) {\n        throw new NullReferenceException(nameof(changingTo));\n      }\n      control.Key = changingTo;\n    }); \n```", "```swift\n public string Key {\n    get { return (string)GetValue(KeyProperty); }\n    set {\n      keyField.Text = value;\n      SetValue(KeyProperty, value);\n    }\n  } \n```", "```swift\n<DataTemplate x:DataType=\"model:Field\">\n  <template:KeyValueView\n    Key=\"{Binding Key}\"\n    Value=\"{Binding Value}\"\n    Source=\"{Binding ImgSource}\"/>\n</DataTemplate> \n```"]