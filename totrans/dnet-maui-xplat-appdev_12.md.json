["```swift\n$ git clone -b 2nd/chapter10 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition.git PassXYZ.Vault2 \n```", "```swift\n<Router AppAssembly=\"@typeof(Main).Assembly\">\n  <Found Context=\"routeData\">\n    <RouteView RouteData=\"@routeData\"\n      DefaultLayout=\"@typeof(MainLayout)\" />\n    <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\n  </Found>\n  <NotFound>\n    <LayoutView Layout=\"@typeof(MainLayout)\">\n      <p role=\"alert\">\n        Sorry, there's nothing at this address.\n      </p>\n    </LayoutView>\n  </NotFound>\n</Router> \n```", "```swift\n@inherits LayoutComponentBase\n<div class=\"page\">\n  <div class=\"sidebar\"><NavMenu/></div>\n  <main>@Body</main>\n</div> \n```", "```swift\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Components.Rendering;\nnamespace PassXYZ.Vault.Pages;\npublic class AppName : ComponentBase\n{\n  protected override void BuildRenderTree\n    (RenderTreeBuilder builder)\n  {\n    base.BuildRenderTree(builder);\n    builder.OpenElement(0, \"div\");\n    builder.AddContent(1, \"PassXYZ.Vault\");\n    builder.CloseElement();\n  }\n} \n```", "```swift\n...\n<AppName/>\n... \n```", "```swift\ndotnet new razorclasslib -n PassXYZ.BlazorUI \n```", "```swift\ndotnet sln add PassXYZ.BlazorUI\\PassXYZ.BlazorUI.csproj \n```", "```swift\n<ItemGroup>\n  <ProjectReference\n    Include=\"..\\PassXYZ.BlazorUI\\PassXYZ.BlazorUI.csproj\"\n      />\n</ItemGroup> \n```", "```swift\n@using PassXYZ.BlazorUI \n```", "```swift\n<script src=\"img/bootstrap.bundle.min.js\"/> \n```", "```swift\n<script src=\"_content/PassXYZ.BlazorUI/css/bootstrap/\n  bootstrap.bundle.min.js\"/> \n```", "```swift\n<div class=\"modal fade\" id=@Id tabindex=\"-1\"\n    aria-labelledby=\"ModelLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog\"><div class=\"modal-content\">\n    <div class=\"modal-header\">                                      //(1)\n      <h5 class=\"modal-title\" id=\"ModelLabel\">@Title</h5>           //(2)\n      <button type=\"button\" class=\"btn-close\"                       //(3)\n        data-bs-dismiss=\"modal\" aria-label=\"Close\"/>\n    </div>\n    <div class=\"modal-body\">                                        //(4)\n      <form class=\"row gx-2 gy-3\">\n        @ChildContent                                               //(5)\n        <div class=\"col-12\">\n          <button type=\"button\" class=\"btn btn-secondary\"\n            data-bs-dismiss=\"modal\" @onclick=\n              \"OnClickClose\">\n            @CloseButtonText                                        //(6)\n          </button>\n            <button type=\"submit\" class=\"btn btn-primary\"\n              data-bs-dismiss=\"modal\" @onclick=\n                \"OnClickSave\">\n            @SaveButtonText                                         //(7)\n          </button>\n        </div>\n      </form>\n    </div>\n  </div></div>\n</div> \n```", "```swift\n<ModalDialog Id=@id Title=\"Please confirm\" \n  OnSaveAsync=@OnSaveClicked\n  SaveButtonText=\"Save\" CloseButtonText=\"Close\">\n    Do you want to delete UserName?\n</ModalDialog>\n<button class=\"dropdown-item\" data-bs-toggle=\"modal\"\n  data-bs-target=\"#@Id\">Please confirm</button> \n```", "```swift\n<ModalDialog Id=@id Title=\"Please confirm\" \n  OnSaveAsync=@OnSaveClicked\n  SaveButtonText=\"Save\" CloseButtonText=\"Close\"> \n```", "```swift\nusing Microsoft.AspNetCore.Components;\nusing System.Diagnostics;\nusing System.Diagnostics.CodeAnalysis;\nnamespace PassXYZ.BlazorUI;\npublic partial class ModalDialog : IDisposable\n{\n  [Parameter]\n  public string? Id { get; set; }                                 //(1)\n  [Parameter]\n  public string? Title { get; set; }                              //(2)\n  [Parameter]\n  public RenderFragment ChildContent { get; set; }                //(3)\n  [Parameter]\n  public Func<Task>? OnClose { get; set; }                        //(4)\n  [Parameter]\n  public Func<Task<bool>>? OnSaveAsync { get; set; }                //(5)\n  [Parameter]\n  [NotNull]\n  public string? CloseButtonText { get; set; }                      //(6)\n  [Parameter]\n  [NotNull]\n  public string? SaveButtonText { get; set; }                       //(7)\n  private async Task OnClickClose() {\n    if (OnClose != null) { await OnClose(); }\n  }\n  private async Task OnClickSave() {\n    if (OnSaveAsync != null) { await OnSaveAsync(); }\n  }\n  void IDisposable.Dispose() {\n      GC.SuppressFinalize(this);\n  }\n} \n```", "```swift\n<ModalDialog Id=@Id Title=@($w\"Deleting {Title}\")   \n  OnSaveAsync=@OnSave\n  SaveButtonText=\"Confirm\" CloseButtonText=\"Cancel\">\n  Please confirm to delete @Title?\n</ModalDialog>\n@code {\n  [CascadingParameter(Name = \"Id\")]\n  public string Id { get; set; } = \"confirmDialog\";                //(1)\n  [Parameter]\n  public string? Title { get; set; }                               //(2)\n  [Parameter]\n  public Action? OnConfirmClick { get; set; }\n  async Task<bool> OnSave() {\n    OnConfirmClick?.Invoke();\n    return await Task.FromResult(true);\n  }\n} \n```", "```swift\nonclick (DOM) -> OnSaveAsync (ModalDialog) -> OnConfirmClick (ConfirmDialog) \n```", "```swift\n<ModalDialog ...>Please confirm to delete @Title?</ModalDialog> \n```", "```swift\n<ModalDialog Id=@Id Title=@($\"Deleting {Title}\")\n  OnSaveAsync=@OnSave\n    SaveButtonText=\"Confirm\" CloseButtonText=\"Cancel\">\n    Please confirm to delete @Title?\n</ModalDialog> \n```", "```swift\n<ModalDialog Id=@Id Title=@Key OnSaveAsync=@OnSaveClicked\n  SaveButtonText =\"Save\" CloseButtonText=\"Close\">\n  @if (IsKeyEditingEnable) {                                        //(1)\n    <input type=\"text\" class=\"form-control\" id=\"keyField\"\n       @bind=\"Key\" placeholder=@KeyPlaceHolder required>            //(2)\n  }\n  @ChildContent\n  <div>\n    <textarea class=\"form-control\" id=\"valueField\"\n      style=\"height: 100px\"\n      placeholder=@ValuePlaceHolder\n      @bind=\"Value\" required />                                     //(3)\n  </div>\n</ModalDialog> \n```", "```swift\n <input type=\"text\" class=\"form-control\" id=\"keyField\"\n       @bind=\"Key\" placeholder=@KeyPlaceHolder required> \n```", "```swift\n<input type=\"text\" class=\"form-control\" id=\"keyField\"\n  value=\"@Key\"\n  @onchange=\"@((ChangeEventArgs e) => Key = e?.Value?\n    .ToString())\"\n  placeholder=@KeyPlaceHolder required> \n```", "```swift\n<input type=\"text\" class=\"form-control\" id=\"keyField\"\n  @bind=\"Key\" @bind:event=\"oninput\" placeholder=@KeyPlaceHolder required> \n```", "```swift\n<EditorDialog Id=@_dialogEditId\n  @bind-Key=\"listGroupField.Key\"                                   //(1)\n  @bind-Value=\"listGroupField.Value\"                               //(2)\n  IsKeyEditingEnable=@_isNewField \n  OnSave=\"UpdateFieldAsync\"\n  KeyPlaceHolder=\"Field name\" \n  ValuePlaceHolder=\"Field content\">\n  @if (_isNewField) {\n    <div class=\"form-check\">\n      <input class=\"form-check-input\" type=\"checkbox\"\n        @bind=\"listGroupField.IsProtected\"\n          id=\"flexCheckDefault\">\n      <label class=\"form-check-label\"\n        for=\"flexCheckDefault\">\n        Password\n      </label>\n    </div>\n  }\n</EditorDialog> \n```", "```swift\nnamespace PassXYZ.BlazorUI;\npublic partial class EditorDialog {\n  [Parameter]\n  public string? Id { get; set; }\n  bool _isKeyEditingEnable = false;\n  [Parameter]\n  public bool IsKeyEditingEnable ...\n  [Parameter]\n  public EventCallback<bool>? IsKeyEditingEnableChanged {\n    get; set; }\n  string _key = string.Empty;\n  [Parameter]\n  public string Key {                                               //(1)\n    get => _key;\n    set {\n      if(_key != value) {\n        _key = value;\n        KeyChanged?.InvokeAsync(_key);                              //(3)\n      }\n    }\n  }\n  [Parameter]\n  public EventCallback<string>? KeyChanged { get; set; }            //(2)\n  [Parameter]\n  public string? KeyPlaceHolder { get; set; }\n  string _value = string.Empty;\n  [Parameter]\n  public string Value ...\n  [Parameter]\n  public EventCallback<string>? ValueChanged { get; set; }\n  [Parameter]\n  public string? ValuePlaceHolder { get; set; }\n  [Parameter]\n  public RenderFragment ChildContent { get; set; } =\n    default!;\n  [Parameter]\n  public Action<string, string>? OnSave { get; set; }\n  async Task<bool> OnSaveClicked() {\n      OnSave?.Invoke(Key, Value);\n      return true;\n  }\n} \n```", "```swift\n<ConfirmDialog Id=\"@_dialogDeleteId\" \n  Title=@listGroupItem.Name\n  OnConfirmClick=\"DeleteItemAsync\" /> \n```", "```swift\n<ModalDialog Id=@Id Title=@($\"Deleting {Title}\")\n  OnSaveAsync=@OnSave\n  SaveButtonText=\"Confirm\" CloseButtonText=\"Cancel\">\n  Please confirm to delete @Title?\n</ModalDialog> \n```", "```swift\n<div class=\"modal fade\" id=@Id tabindex=\"-1\"\n  aria-labelledby=\"ModelLabel\" aria-hidden=\"true\"> ... \n```", "```swift\n<CascadingValue Value=\"@_dialogDeleteId\" Name=\"Id\">\n  <ConfirmDialog Title=@listGroupItem.Name\n    OnConfirmClick=\"DeleteItemAsync\" />\n</CascadingValue> \n```", "```swift\n[CascadingParameter(Name = \"Id\")]\npublic string Id { get; set; } = default!; \n```", "```swift\n<CascadingValue Value=\"@_dialogEditId\" Name=\"Id\">\n  <EditorDialog @bind-Key=\"listGroupItem.Name\"\n      @bind-Value=\"listGroupItem.Notes\"\n      IsKeyEditingEnable=true\n      OnSave=\"UpdateItemAsync\" KeyPlaceHolder=\"Item name\"\n      ValuePlaceHolder=\"Please provide a description\">\n    @if (_isNewItem) {\n      <select @bind=\"newItem.SubType\" class=\"form-select\"\n        aria-label=\"Group\">\n        <option selected value=@ItemSubType.Group>\n          @ItemSubType.Group</option>\n        <option value=@ItemSubType.Entry>\n          @ItemSubType.Entry</option>\n        <option value=@ItemSubType.PxEntry>\n          @ItemSubType.PxEntry</option>\n        <option value=@ItemSubType.Notes>\n          @ItemSubType.Notes</option>\n      </select>\n    }\n  </EditorDialog>\n</CascadingValue>\n<CascadingValue Value=\"@_dialogDeleteId\" Name=\"Id\">\n  <ConfirmDialog Title=@listGroupItem.Name\n    OnConfirmClick=\"DeleteItemAsync\" />\n</CascadingValue> \n```", "```swift\npublic override Task SetParametersAsync(ParameterView parameters) \n```", "```swift\nprotected override void OnInitialized()\nprotected override async Task OnInitializedAsync() \n```", "```swift\nprotected override void OnParametersSet()\nprotected override async Task OnParametersSetAsync() \n```", "```swift\nprotected override bool ShouldRender() \n```", "```swift\nprotected override void OnAfterRender(bool firstRender)\nprotected override async Task OnAfterRenderAsync(bool\n  firstRender) \n```", "```swift\npublic ConfirmDialog()\n{\n  Debug.WriteLine($\"ConfirmDialog-{Id}: is created\");\n}\npublic override Task SetParametersAsync\n  (ParameterView parameters)\n{\n  Debug.WriteLine($\"ConfirmDialog-{Id}:\n    SetParametersAsync called\");\n  return base.SetParametersAsync(parameters);\n}\nprotected override void OnInitialized()\n  => Debug.WriteLine($\"ConfirmDialog-{Id}: OnInitialized\n    called - {Title}\");\nprotected override async Task OnInitializedAsync() =>\n  await Task.Run(() => {\n  Debug.WriteLine($\"ConfirmDialog-{Id}: OnInitializedAsync\n    called - {Title}\");\n});\nprotected override void OnParametersSet()\n  => Debug.WriteLine($\"ConfirmDialog-{Id}: OnParametersSet\n    called - {Title}\");\nprotected override async Task OnParametersSetAsync() =>\n  await Task.Run(() => {\nDebug.WriteLine($\"ConfirmDialog-{Id}:\n  OnParametersSetAsync called - {Title}\");\n});\nprotected override void OnAfterRender(bool firstRender)\n  => Debug.WriteLine($\"ConfirmDialog-{Id}: OnAfterRender\n    called with firstRender = {firstRender}\");\nprotected override async Task OnAfterRenderAsync(bool\n  firstRender) => await Task.Run(() => {\n    Debug.WriteLine($\"ConfirmDialog-{Id}:\n      OnAfterRenderAsync called - {Title}\");\n});\nprotected override bool ShouldRender() {\n  Debug.WriteLine($\"ConfirmDialog-{Id}: ShouldRender called\n    - {Title}\");\n  return true;\n} \n```", "```swift\nConfirmDialog-: is created\nConfirmDialog-: SetParametersAsync called\nConfirmDialog-deleteModel: OnInitialized called -\nConfirmDialog-deleteModel: OnInitializedAsync called -\nConfirmDialog-deleteModel: OnParametersSet called -\nConfirmDialog-deleteModel: OnParametersSetAsync called -\nConfirmDialog-deleteModel: ShouldRender called -\nConfirmDialog-deleteModel: ShouldRender called -\nConfirmDialog-deleteModel: OnAfterRender called with\n  firstRender = True\nConfirmDialog-deleteModel: OnAfterRenderAsync called -\nConfirmDialog-deleteModel: OnAfterRender called with\n  firstRender = False\nConfirmDialog-deleteModel: OnAfterRenderAsync called -\nConfirmDialog-deleteModel: OnAfterRender called with\n  firstRender = False\nConfirmDialog-deleteModel: OnAfterRenderAsync called - \n```", "```swift\nConfirmDialog-deleteModel: SetParametersAsync called\nConfirmDialog-deleteModel: OnParametersSet called - Google\nConfirmDialog-deleteModel: ShouldRender called - Google\nConfirmDialog-deleteModel: OnParametersSetAsync called –\n  Google\nConfirmDialog-deleteModel: ShouldRender called - Google\nConfirmDialog-deleteModel: OnAfterRender called with\n  firstRender = False\nConfirmDialog-deleteModel: OnAfterRenderAsync called –\n  Google\nConfirmDialog-deleteModel: OnAfterRender called with\n  firstRender = False\nConfirmDialog-deleteModel: OnAfterRenderAsync called –\n  Google \n```", "```swift\nprotected override void OnParametersSet() {\n  base.OnParametersSet();\n  if (SelectedItemId == null) {                                     //(1)\n    throw new InvalidOperationException(\n    \"ItemDetail: SelectedItemId is null\");\n  }\n  selectedItem = DataStore.GetItem(SelectedItemId, true);           //(2)\n  if (selectedItem == null) {\n    throw new InvalidOperationException(\n  \"ItemDetail: entry cannot be found with SelectedItemId\");\n  }\n  else {\n    if (selectedItem.IsGroup) {\n      throw new InvalidOperationException(\n        \"ItemDetail: SelectedItemId should not be a group\n          here.\");\n    }\n    fields.Clear();\n    List<Field> tmpFields = selectedItem.GetFields();               //(3)\n    foreach (Field field in tmpFields) {\n      fields.Add(field);\n    }\n    notes = selectedItem.GetNotesInHtml();\n  }\n} \n```", "```swift\n bool _isNewItem = false; \n```", "```swift\n<div class=\"container\"><div class=\"row\">\n  <div class=\"col-12\"><h1>\n    @if (selectedItem?.GetParentLink() != null) {\n      <a class=\"btn btn-outline-dark\"\n        href=\"@selectedItem?.GetParentLink()\">\n        <span class=\"oi oi-chevron-left\"\n          aria-hidden=\"true\"></span></a>                           //(1)\n    }\n    @(\" \" + Title)                                                 //(2)\n<button type=\"button\"\n  class=\"btn btn-outline-dark float-end\"\n      data-bs-toggle=\"modal\"\n      data-bs-target=\"#@_dialogEditId\"\n      @onclick=\"@(() => _isNewItem=true)\">\n      <span class=\"oi oi-plus\" aria-hidden=\"true\">\n    </span></button>                                               //(3)\n  </h1></div>\n</div></div> \n```", "```swift\n<div class=\"list-group\">\n  @foreach (var item in items) {\n<div class=\"dropdown list-group-item list-group-item-action\n  d-flex gap-1 py-2\" aria-current=\"true\">\n      <img src=\"img/@item.GetIcon()\" alt=\"twbs\" width=\"32\"\n        height=\"32\"\n          class=\"rounded-circle flex-shrink-0 float-start\">\n      <a href=\"@item.GetActionLink()\" class=\"...\"> ...\n      <button class=\"opacity-50 btn btn-light\n          dropdown-toggle\" type=\"button\"\n            id=\"itemsContextMenu\"\n          data-bs-toggle=\"dropdown\" aria-expanded=\"false\"\n          @onclick=\"@(() => listGroupItem=item)\">                  //(1)\n        <span class=\"oi oi-menu\" aria-hidden=\"true\"></span>\n      </button>\n      <ul class=\"dropdown-menu\" aria-labelledby=\n        \"itemsContextMenu\">\n        <li><button class=\"dropdown-item\"\n          data-bs-toggle=\"modal\"\n              data-bs-target=\"#@_dialogEditId\"\n              @onclick=\"@(() => _isNewItem=false)\">                //(2)\n              Edit</button></li>\n        <li><button class=\"dropdown-item\"\n          data-bs-toggle=\"modal\"\n              data-bs-target=\"#@_dialogDeleteId\">                  //(3)\n              Delete</button></li>\n      </ul>\n    </div>\n  }\n</div> \n```", "```swift\nprivate async void UpdateItemAsync(string key, string value) {\n  if (listGroupItem == null) { return; }\n  if (string.IsNullOrEmpty(key) || string.IsNullOrEmpty(value))\n  { return; }\n  listGroupItem.Name = key;\n  listGroupItem.Notes = value;\n  if (_isNewItem) {                                               //(1)\n      // Add new item\n    if (listGroupItem is NewItem aNewItem) {\n      Item? newItem = DataStore.CreateNewItem\n        (aNewItem.SubType);\n      if (newItem != null) {\n        newItem.Name = aNewItem.Name;\n        newItem.Notes = aNewItem.Notes;\n        items.Add(newItem);\n        await DataStore.AddItemAsync(newItem);\n      }\n    }\n  }\n  else {\n    // Update the current item\n    await DataStore.UpdateItemAsync(listGroupItem);\n  }\n} \n```", "```swift\nprivate async void DeleteItemAsync() {\n  if (listGroupItem == null) return;\n  if (items.Remove(listGroupItem)) {\n      _ = await DataStore.DeleteItemAsync\n         (listGroupItem.Id);\n  }\n} \n```", "```swift\n bool _isNewField = false; \n```", "```swift\n<div class=\"container\">\n  <div class=\"row\"><div class=\"col-12\">\n    <h1>\n      @if (selectedItem?.GetParentLink() != null) {\n        <a class=\"btn btn-outline-dark\"\n          href=\"@selectedItem?.GetParentLink()\">\n        <span class=\"oi oi-chevron-left\"\n          aria-hidden=\"true\"></span></a>\n      }\n      @(\" \" + selectedItem!.Name)\n      <button type=\"button\" class=\"btn btn-outline-dark\n        float-end\"\n        data-bs-toggle=\"modal\" data-bs-\n          target=\"#@_dialogEditId\"\n        @onclick=\"@(() => _isNewField=true)\">\n          <span class=\"oi oi-plus\"\n            aria-hidden=\"true\"></span></button>\n    </h1>\n  </div></div>\n</div> \n```", "```swift\n<div class=\"list-group\">\n  @foreach (var field in fields) {\n    @if(field.ShowContextAction == null) {\n      <div class=\"dropdown list-group-item ...\n        aria-current=\"true\">\n        <span class=\"oi oi-pencil\" aria-hidden=\"true\">\n         </span>\n        <div class=\"d-flex gap-2 w-100\n          justify-content-between\"> ...\n        <button class=\"opacity-50 btn btn-light\n          dropdown-toggle\" type=\"button\"\n          id=\"itemDetailContextMenu\"\n          data-bs-toggle=\"dropdown\" aria-expanded=\"false\"\n          @onclick=\"@(() => listGroupField=field)\">                //(1)\n            <span class=\"oi oi-menu\" aria-hidden=\"true\">\n            </span>\n        </button>\n        <ul class=\"dropdown-menu\"\n          aria-labelledby=\"itemDetailContextMenu\">\n          <li><button class=\"dropdown-item\"\n            data-bs-toggle=\"modal\"\n            data-bs-target=\"#@_dialogEditId\"\n            @onclick=\"@(() => _isNewField=false)\">                 //(2)\n                Edit\n          </button></li>\n          <li><button class=\"dropdown-item\"\n            data-bs-toggle=\"modal\"\n            data-bs-target=\"#@_dialogDeleteId\">                    //(3)\n                Delete\n          </button></li>\n          @if (field.IsProtected) {\n            <li><button class=\"dropdown-item\"\n              @onclick=\"OnToggleShowPassword\">                     //(4)\n                @if (field.IsHide) { <span>Show</span> }\n                else { <span>Hide</span> }\n            </button></li>\n          }\n        </ul>\n      </div>\n    }\n  }\n</div> \n```", "```swift\nprivate async void UpdateFieldAsync(string key, string\n  value) {\n  if (selectedItem == null || listGroupField == null) {\n      throw new NullReferenceException(\"Selected item is\n        null\");\n  }\n  if (string.IsNullOrEmpty(key) ||\n      string.IsNullOrEmpty(value)) { return; }\n  listGroupField.Key = key;\n  listGroupField.Value = value;\n  if (_isNewField) {\n    // Add a new field\n    Field newField = selectedItem.AddField\n      (listGroupField.Key,\n      ((listGroupField.IsProtected) ?\n        listGroupField.EditValue : listGroupField.Value),\n          listGroupField.IsProtected);\n    fields.Add(newField);\n  }\n  else {\n    // Update the current field\n    var newData = (listGroupField.IsProtected) ?\n      listGroupField.EditValue : listGroupField.Value;\n    selectedItem.UpdateField(listGroupField.Key, newData, \n      listGroupField.IsProtected);\n  }\n  await DataStore.UpdateItemAsync(selectedItem);\n} \n```", "```swift\nprivate async void DeleteFieldAsync() {\n  if (listGroupField == null || selectedItem == null) {\n    throw new NullReferenceException(\n      \"Selected item or field is null\");\n  }\n  listGroupField.ShowContextAction = listGroupField;\n  selectedItem.DeleteField(listGroupField);\n  await DataStore.UpdateItemAsync(selectedItem);\n} \n```", "```swift\nItems and ItemDetail pages, resulting in a duplication:\n```", "```swift\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h1>\n        @if (selectedItem?.GetParentLink() != null) {             //(1)\n          <a class=\"btn btn-outline-dark\"\n            href=\"@selectedItem?.GetParentLink()\">\n            <span class=\"oi oi-chevron-left\"\n              aria-hidden=\"true\"></span></a>                      //(2)\n        }\n        @(\" \" + Title)                                            //(3)\n        <button type=\"button\"\n          class=\"btn btn-outline-dark float-end\"\n          data-bs-toggle=\"modal\"\n          data-bs-target=\"#@_dialogEditId\"\n          @onclick=\"@(() => _isNewItem=true)\">                    //(4)\n          <span class=\"oi oi-plus\" aria-hidden=\"true\">\n          </span>\n        </button>\n      </h1>\n    </div>\n  </div>\n</div> \n```", "```swift\npublic partial class Navbar\n{\n  [Parameter]\n  public string? ParentLink { get; set; }                         //(1)\n  [Parameter]\n  public string? DialogId { get; set; }                           //(2)\n  [Parameter]\n  public string? Title { get; set; }                              //(3)\n  [Parameter]\n  public EventCallback<MouseEventArgs> OnAddClick { get;\n  set; }                                                          //(4)\n  private void OnClickClose(MouseEventArgs e) {\n      OnAddClick.InvokeAsync();\n  }\n} \n```", "```swift\n@namespace PassXYZ.BlazorUI\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h1>\n        @if (ParentLink != null) {                                //(1)\n          <a class=\"btn btn-outline-dark\"\n            href=\"@ParentLink\">                                   //(1)\n            <span class=\"oi oi-chevron-left\"\n              aria-hidden=\"true\"></span>\n          </a>\n        }\n        @(\" \" + Title)                                            //(3)\n        <button type=\"button\"\n          class=\"btn btn-outline-dark float-end\"\n          data-bs-toggle=\"modal\"\n          data-bs-target=\"#@DialogId\"                             //(2)\n          @onclick=\"OnClickClose\">                                //(4)\n          <span class=\"oi oi-plus\" aria-hidden=\"true\">\n          </span>\n        </button>\n      </h1>\n    </div>\n  </div>\n</div> \n```", "```swift\n<Navbar ParentLink=\"@selectedItem?.GetParentLink()\"\n  Title=\"@Title\" DialogId=\"@_dialogEditId\"\n  OnAddClick=\"@(() => {_isNewItem=true;})\" /> \n```", "```swift\n<Navbar ParentLink=\"@selectedItem?.GetParentLink()\"\n  Title=\"@selectedItem?.Name\" DialogId=\"@_dialogEditId\"\n  OnAddClick=\"@(() => {_isNewField=true;})\" /> \n```", "```swift\n<button class=\"opacity-50 btn btn-light dropdown-toggle\"\n  type=\"button\" id=\"itemsContextMenu\"\n  data-bs-toggle=\"dropdown\"\n  aria-expanded=\"false\"\n  @onclick=\"@(() => listGroupItem=item)\">\n    <span class=\"oi oi-menu\" aria-hidden=\"true\"></span>\n</button>\n<ul class=\"dropdown-menu\"\n  aria-labelledby=\"itemsContextMenu\">\n  <li><button class=\"dropdown-item\" data-bs-toggle=\"modal\"\n        data-bs-target=\"#@_dialogEditId\"\n        @onclick=\"@(() => _isNewItem=false)\">\n        Edit\n  </button></li>\n  <li><button class=\"dropdown-item\" data-bs-toggle=\"modal\"\n        data-bs-target=\"#@_dialogDeleteId\">\n      Delete\n  </button></li>\n</ul> \n```", "```swift\n@namespace PassXYZ.BlazorUI\n<button class=\"opacity-50 btn btn-light dropdown-toggle\"\n  type=\"button\" id=\"itemDetailContextMenu\"\n  data-bs-toggle=\"dropdown\"\n  aria-expanded=\"false\" @onclick=\"OnClick\">\n  <span class=\"oi oi-menu\" aria-hidden=\"true\"></span>\n</button>                                                         //(1)\n<ul class=\"dropdown-menu\"\n  aria-labelledby=\"itemDetailContextMenu\">\n  @ChildContent\n</ul>                                                            //(2) \n```", "```swift\nnamespace PassXYZ.BlazorUI;\npublic partial class Dropdown\n{\n  [Parameter]\n  public EventCallback<MouseEventArgs> OnClick {get;set;}        //(1)\n  [Parameter]\n  public RenderFragment ChildContent { get; set; }               //(2)\n} \n```", "```swift\n@namespace PassXYZ.BlazorUI\n<li>\n  <button class=\"dropdown-item\" data-bs-toggle=\"modal\"\n    data-bs-target=\"#@Id\" @onclick=\"OnClick\">\n    @ChildContent\n  </button>\n</li> \n```", "```swift\nnamespace PassXYZ.BlazorUI;\npublic partial class MenuItem\n{\n  [Parameter]\n  public string? Id { get; set; }                                  //(1)\n  [Parameter]\n  public EventCallback<MouseEventArgs> OnClick {get; set;}         //(2)\n  [Parameter]\n  public RenderFragment ChildContent { get; set; }                 //(3)\n} \n```", "```swift\n<Dropdown OnClick=\"@(() => currentItem.Data=listGroupItem=item)\">\n  <MenuItem Id=\"@_dialogEditId\"\n    OnClick=\"@(() => _isNewItem=false)\">Edit</MenuItem>\n  <MenuItem Id=\"@_dialogDeleteId\">Delete</MenuItem>\n</Dropdown> \n```", "```swift\n<Dropdown OnClick=\"@(() = >\n  {currentField.Data=listGroupField=field;})\">\n  <MenuItem Id=\"@_dialogEditId\"\n    OnClick=\"@(() => _isNewField=false)\">Edit</MenuItem>\n  <MenuItem Id=\"@_dialogDeleteId\">Delete</MenuItem>\n  @if (field.IsProtected) {\n    <MenuItem OnClick=\"OnToggleShowPassword\">\n      @(field.IsHide ? \"Show\":\"Hide\")\n    </MenuItem>\n  }\n</Dropdown> \n```", "```swift\n<MenuItem Id=\"@_dialogDeleteId\">\n  <strong>Delete</strong>\n</MenuItem> \n```", "```swift\n[Parameter]\npublic RenderFragment ChildContent { get; set; } \n```", "```swift\n<MenuItem Id=\"@_dialogDeleteId\">\n  <ChildContent>\n    <strong>Delete</strong>\n  </ChildContent>\n</MenuItem> \n```", "```swift\n@namespace PassXYZ.BlazorUI\n@typeparam TItem\n<div class=\"list-group\">\n  @if (Header != null) {\n      @Header                                                     //(1)\n  }\n  @if (Row != null && Items != null) {\n    @foreach (var item in Items) {\n      <div class=\"dropdown list-group-item\n        list-group-item-action\n        d-flex gap-1 py-2\" style=\"border: none\"\n        aria-current=\"true\">\n          @Row.Invoke(item)                                       //(2)\n      </div>\n    }\n  }\n  @if (Footer != null) {\n      <div class=\"container\">\n        <article>@Footer</article>\n      </div>                                                      //(3)\n  }\n</div> \n```", "```swift\n@Row(item) \n```", "```swift\n@Row.Invoke(item) \n```", "```swift\nnamespace PassXYZ.BlazorUI;\npublic partial class ListView<TItem>\n{\n  [Parameter]\n  public RenderFragment? Header { get; set; }                    //(1)\n  [Parameter]\n  public RenderFragment<TItem>? Row { get; set; }                //(2)\n  [Parameter]\n  public IEnumerable<TItem>? Items { get; set; }                 //(3)\n  [Parameter]\n  public RenderFragment? Footer { get; set; }                    //(4)\n} \n```", "```swift\n<ListView Items=\"fields\">                                        //(1)\n  <Row Context=\"field\">                                          //(2)\n    @if (field.ShowContextAction == null) {\n      <span class=\"oi oi-pencil\" aria-hidden=\"true\"></span>\n      <div class=\"d-flex gap-2 w-100\n        justify-content-between\">\n        <div>\n          <h6 class=\"mb-0\">@field.Key</h6>\n          <p class=\"mb-0\">@field.Value</p>\n        </div>\n      </div>\n      <Dropdown\n       OnClick=\"@(() =>\n       {currentField.Data=listGroupField=field;})\">\n         <MenuItem Id=\"@_dialogEditId\"\n           OnClick=\"@(() => _isNewField=false)\">\n           Edit\n         </MenuItem>\n         <MenuItem Id=\"@_dialogDeleteId\">Delete</MenuItem>\n        @if (field.IsProtected) {\n          <MenuItem OnClick=\"OnToggleShowPassword\">\n            @(field.IsHide ? \"Show\":\"Hide\")\n          </MenuItem>\n        }\n      </Dropdown>\n    }\n  </Row>\n  <Footer>\n    @((MarkupString)notes)\n  </Footer>\n</ListView> \n```", "```swift\n<Row Context=\"field\"> \n```", "```swift\nPublic static bool IsPrivacyNoticeAccepted\n{\nget => Preferences.Get(PrivacyNotice, false);\nset => Preferences.Set(PrivacyNotice, value);\n} \n```"]