- en: Play Store and App Store Hacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to continually learn from your MVP, you must be continually running
    tests, collecting data, and evolving your app. However, one barrier to validated
    learning comes in the form of the App Stores themselves.
  prefs: []
  type: TYPE_NORMAL
- en: As we will see next, the two platforms have different limitations and requirements
    that impact every aspect and stage of an app's release. Store listing requirements,
    app approval delays, analytics, and beta deployment options, for instance, all
    differ between the two platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are ways to workaround these challenges. In this chapter, we
    will explore the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What split testing is and why it is a crucial tool for every app developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to run split tests in both store listings and in apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to overcome limitations and obstacles that are inevitable when performing
    real-world split testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential split testing techniques, as well as examples of how to run split
    tests in the App Store and in Google Play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before covering these topics, let''s briefly elaborate on what experiments
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6216c247-1a5d-4796-b0d5-64fe5614b6d1.png)'
  prefs: []
  type: TYPE_IMG
- en: What is an experiment?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in science, a business experiment posits a hypothesis, and then runs a test
    or tests to validate or invalidate that idea. In the lean methodology, MVPs are
    experiments that test fundamental hypotheses about value and growth—that is, whether
    your idea solves a problem and whether your product can grow sustainably.
  prefs: []
  type: TYPE_NORMAL
- en: Though the MVP is an experiment itself, there are many other experiments that
    you can run within that context. In this chapter, we will cover the obstacles
    to testing inside the App Stores, workarounds that allow you to split test inside
    your app and inside the App Stores, and, finally, we will look at how you can
    apply these skills with a pair of practical examples.
  prefs: []
  type: TYPE_NORMAL
- en: A/B testing as a technique for experimentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Split tests can be viewed as experiments, like any other experiment, which begins
    with a hypothesis. These tests are much smaller in scale when compared to large-scale
    hypotheses, such as the value hypothesis upon which the entire MVP is built. However,
    the underlying principle is the same.
  prefs: []
  type: TYPE_NORMAL
- en: For those who do not know, a split test serves alternate versions of a web page
    or app, for instance, to a group of users in order to determine which version
    converts the highest. In a two-way split test, called an A/B test, you might test
    two separate landing page headlines in order to test their impact on conversion
    rates.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also test the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Copywriting, such as headlines or calls-to-action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design elements, such as colors or button shapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App Store listing elements, such as screenshots or descriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why perform split testing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This will be covered in more detail as follows, but there are a number of benefits
    to split testing. Here are some of the biggest benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Split testing allows you to better understand your users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion rates can be improved, that is, it's a bread-and-butter optimization
    method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can improve the user experience and usability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important metrics, such as user retention and time-in-app, can be more deeply
    understood and improved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two types of app experiments that we will cover in this chapter:
    store listing tests and app tests.'
  prefs: []
  type: TYPE_NORMAL
- en: Store listing tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'App Store rankings, such as search engine rankings, have an enormous impact
    on how many people find and try your app. If you can improve your store listing''s
    ranking and its conversion rate, then you stand to reap significant benefits as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Improved organic discovery and more users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased download rates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decreased cost of user acquisition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving your App Store ranking, or **App Store Optimization** (**ASO**), has
    been called the new SEO, as a testament to its importance. Keeping in line with
    other search engines across the internet, App Store search algorithms rank based
    on a variety of predictable factors, such as keyword relevance and user reviews.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app marketplaces have never published best practices that can guide developers
    on how they can improve their App Store rankings. However, widespread unofficial
    ASO improvement techniques focus on a few important areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Download rates and uninstall rates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The quality of the reviews from users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relevancy of the keywords in the headline and description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usefulness of the listing copy, the icon, screenshots, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing tests are split tests that are designed to help you improve all of these
    areas, either directly or indirectly. Every time you split test elements, you
    will measure the result that you are trying to impact. An A/B test, for example,
    could compare two versions of a description, then use install rates to measure
    the results of that test. A test that compares review solicitation mechanisms
    could examine the impact on positive reviews.
  prefs: []
  type: TYPE_NORMAL
- en: App testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Split testing the app itself is another crucial tool in your experimentation
    toolbox. While App Store listing tests will help you improve conversion rates,
    app testing helps you learn about your users, improve your product, and increase
    engagement rates.
  prefs: []
  type: TYPE_NORMAL
- en: 'When testing the app, you will perform split tests designed to improve the
    app experience, usability, and engagement. App tests can be performed on any number
    of app-related variables, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Screen design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appropriate metrics that can help you judge your testing efforts include engagement
    metrics, such as time in app and retention rates or conversion rates for specific
    targets. A change designed to improve the conversion rates for advertising, for
    instance, should measure ad conversion rates. As with App Store listing tests,
    you should focus on metrics that measure the result you are trying to impact with
    any given test.
  prefs: []
  type: TYPE_NORMAL
- en: Why do you care?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App testing is not just icing on the cake, since such experiments can make or
    break an app. Testing has become a critical facet of the lean developer's *modus
    operandi*, so it pays to understand what makes testing so valuable.
  prefs: []
  type: TYPE_NORMAL
- en: The competition is intense
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apps need a way to stand out in a saturated, competitive marketplace. According
    to Statista, Google Play grew from 1 million apps in July 2013 to 2.8 million
    in March, 2017\. Between June 2013 and January 2017, the App Store count grew
    from 900,000 to 2.2 million.
  prefs: []
  type: TYPE_NORMAL
- en: This ocean of apps poses two concerns—not only do developers need to stay visible
    in the ocean of apps, they need to engage their users' attention and keep it.
  prefs: []
  type: TYPE_NORMAL
- en: Although people spend dozens of hours per month using apps, they are quick to
    abandon apps that bore them. According to 2016 data from Localytics, which was
    widely publicized on major tech blogs, nearly one in four users will abandon an
    app after only one use. A number of causes can lie behind app abandonment rates,
    from users' busy schedules to usability issues.
  prefs: []
  type: TYPE_NORMAL
- en: Though not all of these causes can be influenced, there is one reason that developers
    use experimentation to stay competitive.
  prefs: []
  type: TYPE_NORMAL
- en: Experiments work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with engagement metrics, conversion rates are impacted by a number of factors,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Traffic source**: The exact number changes depending on where you get your
    information, but studies usually show that between 40-50% or more users find apps
    by searching in the App Store. Think with Google reports that one in four users
    find their apps through a search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The app listing itself**: As mentioned, every element of an App Store listing
    can impact conversion rates, from the icon to the description to the screenshots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The industry**: Not all industries have the same average conversion rates.
    Music apps, according to data published by splitmetrics, have the highest App
    Store conversion rates, while games have the lowest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App pricing**: Free apps are governed by different averages than paid apps.
    In general, free apps have higher download rates, but they also have higher abandonment
    rates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best way to impact any of these factors is by performing experiments. Split
    testing can improve App Store conversion rates by 20% or more.
  prefs: []
  type: TYPE_NORMAL
- en: Decreased conversion rates, in turn, decrease the cost of user acquisition,
    while in-app split tests help you improve engagement metrics, which often has
    a direct impact on your revenue model.
  prefs: []
  type: TYPE_NORMAL
- en: Although the app marketplaces pose their own difficulties, these are not insurmountable.
    Next, we will look at some of these obstacles and how to overcome them so you
    can make the most of your tests.
  prefs: []
  type: TYPE_NORMAL
- en: Why running experiments with Google Play or App Store is hard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your MVP becomes listed on the App Stores, it becomes harder to split test.
    Your app becomes bound by the rules of each App Store. Then, when you want to
    update, you must wait for the App Store's approval. Additionally, certain limitations
    inhibit your ability to run tests or collect accurate data.
  prefs: []
  type: TYPE_NORMAL
- en: Obstacles to testing with store listings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of the two major platforms behaves differently and each has its own set
    of listing requirements. Generally, Google Play is easier for testing, since re-listing
    takes less time, the requirements are less strict, and it offers simple split
    testing options for the store listing. However, the App Store's significant audience—and
    that audience's purchasing power—is reason enough to code for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Here are a few of the major platform differences that make testing all the more
    difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Different app listing requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When listing your app, you must learn to operate in two separate ecosystems.
    Not only do you have to code each app differently, you need to learn the ropes
    for maximizing visibility in each marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are three examples and different requirements for each App Store as of
    the writing of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App titles**: On Google Play, titles are limited to 50 characters, while
    on the App Store they are limited to 30.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App descriptions**: Apple does not have a short description. But it does
    have a "Subtitle". Subtitle is limited to 30 characters. If the differences between
    the two platforms with description feels too complicted, we swap this item for
    Promotional text. Apple''s promotional text is limited to 170 characters. Google
    terms this field "Release notes" and it is lmited to 500 characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App categories**: The App Store allows you to choose a primary and secondary
    category, but special cases allow you to add more categories, thus increasing
    potential visibility. Google Play, on the other hand, only allows one mutual category
    for both apps and games. Google allows for an application type along with the
    category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are just a few of the differences that you must take into account when
    running App Store optimization tests. The other differences between the two stores
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The number of screenshots allowed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The length of promo videos allowed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether social media actions are allowed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether promo graphics are allowed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No standard way to measure results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each store offers separate metrics with which to measure the results of your
    experiments:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apple**: You can view sales and trends through iTunes Connect, which gives
    you access to data and reports on downloads and sales. App Analytics is an analytics
    package that tracks many standard metrics, such as engagement, monetization, and
    marketing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google**: From the Google Developer console, you can track user acquisition
    with the option to narrow your focus on specific acquisition channels, locations,
    and time periods. Google Analytics for mobile or Firebase Analytics, similar to
    Apple''s analytics package, allows you to track monetization, engagement, and
    marketing efforts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since these precise numbers differ, you will not be able to measure results
    in parallel, even if these experiments are conducted simultaneously. It is worth
    mentioning that Apple and Google are both continually improving their tools to
    make testing easier, so some specific features may have changed by the time of
    publication.
  prefs: []
  type: TYPE_NORMAL
- en: Limited infrastructure for A/B testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your app is listed, you have limited options when it comes to split testing
    in the store itself. Apple, in general, has a reputation for enforcing stricter
    standards across its App Store, from screenshots to keywords to bugs. Therefore,
    it is not surprising that they offer no support for split testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Play allows you to split test store listings. With this program, you
    can create two types of experiments:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Global**: Global tests allow you to test graphics, screenshots, the promo
    video, and the icon. These tests only affect your app''s default language, so
    the ones using other languages will still be shown their default localized versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Localized**: When you perform a localized test, you can test all of the preceding
    variables, plus descriptions in as many as five languages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These experiments are created and run from the Google Developer console, where
    you can choose targeting information, attributes, variants, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Why it is difficult to run parallel experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It may be clear by now why running experiments side by side is no easy task:'
  prefs: []
  type: TYPE_NORMAL
- en: Different store listing requirements means that each listing must be different
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different coding requirements makes parallel app creation difficult
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different A/B testing capabilities in each App Store means you cannot run the
    same listing tests simultaneously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different metrics means you will be measuring slightly different results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different turnaround times for each store means your updates will have different
    timelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another challenge is that since testing conditions fluctuate with time, it is
    difficult to maintain strong controls and reliable results when testing serially.
    For instance, user behavior and market temperament could vary enough between two
    time periods to alter the results of two otherwise identical tests. Though effective
    testing clearly has its share of roadblocks, there are ways to overcome these
    challenges, as we will see next.
  prefs: []
  type: TYPE_NORMAL
- en: Hacks to workaround the challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though none of the following methods are ideal, they will allow you to learn
    from your customers, validate your hypotheses, and create continual improvements
    to your MVP. Each of the upcoming sections will cover some essential techniques
    for working around the platform limitations that have been discussed so far.
  prefs: []
  type: TYPE_NORMAL
- en: Store listing hacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned, Google Play allows you to split test core elements of the listing
    itself, while Apple does not. If, however, you want to expand your testing options
    and perform more complex multivariate testing, you will need to explore other
    options.
  prefs: []
  type: TYPE_NORMAL
- en: How do users find apps in the first place?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing where users come from and how they discover your apps can be very useful,
    both for testing and for your business. Not only can you learn about how various
    traffic sources compare in terms of quantity and quality, you can also perform
    tests outside the App Store, which can then offer more information about your
    customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before examining the experiments themselves, it pays to briefly examine the
    major discovery portals and traffic sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App Store search**: As mentioned previously, think with Google research discovered
    that at least 40% of users find new apps by searching within the App store itself,
    making it one of your most important traffic sources. For this reason, App Store
    indexing and optimization should be top priorities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traditional search**: The same study also reported that 27% of users discovered
    apps through search engines, making search another critical traffic source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App packs**: App packs are grids that appear above, within, or below standard
    Google search results when the search engine determines that a person is searching
    for an app. The apps that appear in App packs are chosen by the search engine,
    not the App Store rankings. However, since the search algorithms rely on many
    of the same factors, the results are strongly correlated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deep linking**: Deep linking, or URIs that open up apps, can be triggered
    from a variety of places, including search ads and other digital ads. In the event
    that an app is not installed, users will be directed to install the app, which
    can then complete the action initiated by the original link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned, Google will allow you to perform in-store listing tests. Since
    certain traffic sources, such as in-store searches and app packs, send users directly
    to these listings, Android developers should certainly take advantage of this
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Use microtesting to collect data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although you cannot test listings in Apple's App Store—and although there are
    limitations to tests you can run inside Google Play—you can still use external
    landing pages to test essential content such as screenshots, headlines, icons,
    and descriptions.
  prefs: []
  type: TYPE_NORMAL
- en: To perform this technique, which has been called microtesting by some, you simply
    experiment with a landing page that mimics the App Store listing itself. Create
    a test that mirrors the appearance of the App Store as closely as possible and
    when users click on the install button, direct them to the actual store listing.
  prefs: []
  type: TYPE_NORMAL
- en: After the testing period has finished, use the highest-converting landing page
    to recreate your App Store listing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To track and analyze results, you should utilize a split testing platform.
    Some are free and some are paid, but given the benefits they provide, paid platforms
    can be well worth the investment. A few of the most popular include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Analytics**: This is an essential testing solution that is included
    as part of Google Analytics, making it easy to use and work into any existing
    GA workflow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimizely**: This is one of the world''s most popular split testing options,
    offering features that extend far beyond a straight landing page test'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unbounce**: This is another extremely popular landing page platform, with
    an easy-to-use landing page builder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kissmetrics**: This is one of the world''s most robust split testing and
    analytics platforms; Kissmetrics is ideal for deep customer research'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A little research will help you determine which price point meets your budget
    and which features meet your needs. For the teams that plan to engage in expansive
    tracking, such as marketing tests and app tests, it is worth looking at platforms
    that are more in-depth. Kissmetrics, for example, offers analytics for both apps
    and websites, so you can manage, view, and review more of your analytics from
    a single place.
  prefs: []
  type: TYPE_NORMAL
- en: Running app tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same way that you can use split testing to experiment with multiple versions
    of web page elements, you can run tests that collect data on in-app elements,
    including design elements and workflow changes. This approach is the practical
    application of the build-measure-learn cycle you measure data, learn from it,
    and build new iterations.
  prefs: []
  type: TYPE_NORMAL
- en: When working with preproduction versions, you can run tests in parallel. Testing
    two versions of the app simultaneously doubles the amount of information you can
    collect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the ways in which you can run parallel tests on both platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Alpha Deployments**: Before releasing your app to production, you
    can perform open and closed alpha and beta tests with users who have Google Accounts
    or G Suite accounts. Since you can only run one open and one closed at the same
    time, Google recommends testing a closed alpha alongside an open beta.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apple TestFligh**t: This operates similarly to Google Alpha Deployments,
    allowing you to create open or closed beta tests. You can segment multiple builds
    among up to 2,000 open beta testers, which gives you plenty of room to receive
    feedback on different versions of your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Third party applications**: There are a number of services that help streamline
    beta deployment and distribution. Install, DeployGate, and Fabric, which was acquired
    by Google in early 2017, are platforms that make this stage of prototyping easier
    and more efficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the right approach to deployment, and a creative approach to split testing
    your listing, it is possible to hack your way past some of the obstacles posed
    by the two app marketplaces. Next, we will apply some of the skills and tools
    we have examined so far by looking at example experiments in the App Store and
    in Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An experimental, scientific approach is the foundation of the Lean method.
  prefs: []
  type: TYPE_NORMAL
- en: Experimentation and split testing are fundamental tools in every developer's
    toolkit, but running tests in the marketplace can be tricky and messy. The techniques
    covered in this chapter can help you circumvent real-world limitations and obstacles,
    improve learning, and accelerate growth. The examples provided can give you ideas
    on how to run your own experiments in either the App Store or in Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: With the right tools, the right techniques, and a creative approach to testing,
    you can continue to learn and experiment, even after you have launched your product
    in an app marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is time to look at how we can use split tests to find out what works
    best in our apps as we seek to create apps that our customers will love.
  prefs: []
  type: TYPE_NORMAL
