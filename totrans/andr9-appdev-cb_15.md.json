["```kt\n<uses-permission android:name=\"android.permission.SEND_SMS\"/>\n```", "```kt\n<Button\n    android:id=\"@+id/button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Do Something\"\n    android:onClick=\"doSomething\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\nprivate final int REQUEST_PERMISSION_SEND_SMS=1; \n```", "```kt\nprivate boolean checkPermission(String permission) { \n    int permissionCheck = \n         ContextCompat.checkSelfPermission( \n            this, permission); \n    return (permissionCheck == \n         PackageManager.PERMISSION_GRANTED); \n} \n```", "```kt\nprivate void requestPermission(String permissionName, int permissionRequestCode) {    \n    ActivityCompat.requestPermissions(this, new String[]{permissionName}, \n            permissionRequestCode);\n}\n```", "```kt\nprivate void showExplanation(String title, String message, \n                             final String permission, \n                             final int permissionRequestCode) {\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setTitle(title)\n            .setMessage(message)\n            .setPositiveButton(android.R.string.ok,\n                    new DialogInterface.OnClickListener() {\n                        public void onClick(DialogInterface    \n                        dialog,int id) \n{\n                            requestPermission(permission,    \n                            permissionRequestCode);\n                        }\n                    });\n    builder.create().show();\n}\n```", "```kt\npublic void doSomething(View view) {\n    if (!checkPermission(Manifest.permission.SEND_SMS)) {\n        if (ActivityCompat.shouldShowRequestPermissionRationale(this, \n                Manifest.permission.SEND_SMS)) {\n            showExplanation(\"Permission Needed\", \"Rationale\",\n                    Manifest.permission.SEND_SMS, REQUEST_PERMISSION_SEND_SMS);\n        } else {\n            requestPermission(Manifest.permission.SEND_SMS,\n                    REQUEST_PERMISSION_SEND_SMS);\n        }\n    } else {\n        Toast.makeText(MainActivity.this, \"Permission (already) \n        Granted!\", Toast.LENGTH_SHORT)\n                .show();\n    }\n}\n```", "```kt\n@Override\npublic void onRequestPermissionsResult(int requestCode, String permissions[], \n                                       int[] grantResults) {\n    switch (requestCode) {\n        case REQUEST_PERMISSION_SEND_SMS: {\n            if (grantResults.length > 0 && grantResults[0] ==\n                    PackageManager.PERMISSION_GRANTED) {\n                Toast.makeText(MainActivity.this, \"Granted!\", Toast.LENGTH_SHORT)\n                        .show();\n            } else {\n                Toast.makeText(MainActivity.this, \"Denied!\", Toast.LENGTH_SHORT)\n                        .show();\n            }\n            return;\n        }\n    }\n}\n```", "```kt\nadb shell pm [grant|revoke] <package> <permission-name> \n```", "```kt\nadb shell pm grant com.packtpub.androidcookbook.runtimepermissions android.permission.SEND_SMS \n```", "```kt\n<receiver android:name=\".AlarmBroadcastReceiver\">\n    <intent-filter>\n        <action android:name=\"com.packtpub.alarms.ACTION_ALARM\" />\n    </intent-filter>\n</receiver>\n```", "```kt\n<Button\n    android:id=\"@+id/button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Set Alarm\"\n    android:onClick=\"setAlarm\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\npublic class AlarmBroadcastReceiver extends BroadcastReceiver {    \n    public static final String ACTION_ALARM= \"com.packtpub.alarms.ACTION_ALARM\";\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        if (ACTION_ALARM.equals(intent.getAction())) {\n            Toast.makeText(context, ACTION_ALARM, Toast.LENGTH_SHORT).show();\n        }\n    }\n} \n```", "```kt\npublic void setAlarm(View view) {\n    Intent intentToFire = new Intent(getApplicationContext(), AlarmBroadcastReceiver.class);\n    intentToFire.setAction(AlarmBroadcastReceiver.ACTION_ALARM);\n    PendingIntent alarmIntent = PendingIntent.getBroadcast(getApplicationContext(), 0,\n            intentToFire, 0);\n    AlarmManager alarmManager = (AlarmManager)getSystemService(Context.ALARM_SERVICE);\n    long thirtyMinutes=SystemClock.elapsedRealtime() + 30 * 1000;\n    alarmManager.set(AlarmManager.ELAPSED_REALTIME, thirtyMinutes, alarmIntent);\n}\n```", "```kt\nalarmManager.set(AlarmManager.ELAPSED_REALTIME, thirtyMinutes, \n     alarmIntent);\n```", "```kt\nset(AlarmType, Time, PendingIntent); \n```", "```kt\npublic static final String ACTION_ALARM= \"com.packtpub.alarms.ACTION_ALARM\";\n```", "```kt\nalarmManager.cancel(alarmIntent); \n```", "```kt\nsetRepeating(AlarmType, Time (in milliseconds), Interval, PendingIntent);\n```", "```kt\n<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n```", "```kt\n<receiver android:name=\".BootBroadcastReceiver\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n        <category android:name=\"android.intent.category.DEFAULT\" />\n    </intent-filter>\n</receiver>\n```", "```kt\npublic class BootBroadcastReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        if (intent.getAction().equals(\n                \"android.intent.action.BOOT_COMPLETED\")) {            \n            Toast.makeText(context, \"BOOT_COMPLETED\", Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n```", "```kt\n@Override\npublic void onReceive(Context context, Intent intent) {\n    if (intent.getAction().equals(\"android.intent.action.BOOT_COMPLETED\")) {\n        Toast.makeText(context, \"BOOT_COMPLETED\", Toast.LENGTH_SHORT).show();\n    } else if (intent.getAction().equals(\"<another_action>\")) {\n        //handle another action \n    }\n}\n```", "```kt\n<Button\n    android:id=\"@+id/buttonStart\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Start\"\n    android:onClick=\"start\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\nButton mButtonStart; \n```", "```kt\nprivate class CountingTask extends AsyncTask<Integer, Integer, Integer> {\n    @Override\n    protected Integer doInBackground(Integer... params) {\n        int count = params[0];\n        for (int x=0;x<count; x++){\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        return count;\n    }\n    @Override\n    protected void onPostExecute(Integer returnVal) {\n        super.onPostExecute(returnVal);\n        mButtonStart.setEnabled(true);\n    }\n}\n```", "```kt\nmButtonStart=findViewById(R.id.buttonStart);\n```", "```kt\npublic void start(View view){\n    mButtonStart.setEnabled(false);\n    new CountingTask().execute(10);\n}\n```", "```kt\nAsyncTask<Params, Progress, Result > \n```", "```kt\n< AsyncTask>.cancel(true); \n```", "```kt\n<TextView\n    android:id=\"@+id/textView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Hello World!\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n\n<ImageButton\n    android:id=\"@+id/imageButton\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:src=\"img/ic_btn_speak_now\"\n    android:onClick=\"speakNow\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\" />\n```", "```kt\nprivate final int REQUEST_SPEECH=1; \n```", "```kt\nPackageManager pm = getPackageManager();\nList<ResolveInfo> activities = pm\n        .queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH), 0);\nif (activities.isEmpty()) {\n    findViewById(R.id.imageButton).setEnabled(false);\n    Toast.makeText(this, \"Speech Recognition Not Supported\", Toast.LENGTH_LONG).show();\n}\n```", "```kt\npublic void speakNow(View view) {\n    Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, \n            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);\n    startActivityForResult(intent, REQUEST_SPEECH);\n}\n```", "```kt\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (requestCode==REQUEST_SPEECH && resultCode == RESULT_OK && data!=null) {\n        ArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);\n        TextView textView = findViewById(R.id.textView);\n        if (!result.isEmpty()){\n            textView.setText(\"\");\n            for (String item : result ) {\n                textView.append(item+\"\\n\");\n            }\n        }\n    }\n}\n```", "```kt\nfloat[] confidence = data.getFloatArrayExtra(RecognizerIntent.EXTRA_CONFIDENCE_SCORES);\n```", "```kt\nSpeechRecognizer speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this);\n```", "```kt\nimplementation 'com.google.android.gms:play-services-auth:16.0.0'\n```", "```kt\n<com.google.android.gms.common.SignInButton\n    android:id=\"@+id/signInButton\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\nprivate final int REQUEST_SIGN_IN=1;\nGoogleSignInClient mGoogleSignInClient;\n```", "```kt\nfindViewById(R.id.signInButton).setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        signIn();\n    }\n});\nGoogleSignInOptions googleSignInOptions = new GoogleSignInOptions\n        .Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\n        .requestEmail()\n        .build();\nmGoogleSignInClient = GoogleSignIn.getClient(this, googleSignInOptions);\n```", "```kt\nprivate void signIn() {\n    Intent signInIntent = mGoogleSignInClient.getSignInIntent();\n    startActivityForResult(signInIntent, REQUEST_SIGN_IN);\n}\n```", "```kt\n@Override\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n\n    if (requestCode == REQUEST_SIGN_IN) {\n        Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);\n        try {\n            GoogleSignInAccount account = task.getResult(ApiException.class);\n            findViewById(R.id.signInButton).setVisibility(View.GONE);\n            Toast.makeText(this, \"Logged in:\"+account.getDisplayName(), Toast.LENGTH_SHORT)\n                    .show();\n        } catch (ApiException e) {\n            e.printStackTrace();\n            Toast.makeText(this, \"Sign in failed:\"+e.getLocalizedMessage(), Toast.LENGTH_SHORT)\n                    .show();\n        }\n    }\n}\n```", "```kt\nGoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(this);\n```"]