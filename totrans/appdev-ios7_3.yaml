- en: Chapter 3. Auto Layout 2.0
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 自动布局 2.0
- en: In this chapter, we will create our project and start building our application,
    **Food and Me**, starting with the custom menu view. First, we will create the
    project itself in Xcode 5\. Next, we will create our storyboard. This consists
    of adding all the required elements and using the new Auto Layout to add constraints
    to our views. This is where we will dive directly into how Auto Layout works and
    how you will continue using Auto Layout for your future projects. Lastly, we will
    hook everything up to our code and set up our navigation. On completing this chapter,
    we will have a functional menu view complete with a bare navigation controller.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建我们的项目并开始构建我们的应用程序，**Food and Me**，从自定义菜单视图开始。首先，我们将在Xcode 5中创建项目本身。接下来，我们将创建我们的Storyboard。这包括添加所有必需的元素并使用新的自动布局为我们的视图添加约束。这就是我们将直接深入了解自动布局是如何工作的以及你将如何继续在未来的项目中使用自动布局的地方。最后，我们将一切连接到我们的代码并设置我们的导航。完成本章后，我们将拥有一个功能齐全的菜单视图，包括一个基本的导航控制器。
- en: Why you should use Auto Layout
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你应该使用自动布局
- en: Prior to Auto Layout, building applications to dynamically support multiple
    screen sizes and orientations required large amounts of work. Auto-resizing masks,
    springs, and struts are all examples of the tools that developers would commonly
    struggle to use. These tools did not always produce the correct result, so the
    typical next best action was to detect screen sizes in code and adjust the layout
    accordingly. When working on an application with many views and layouts, this
    can become frustrating.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动布局之前，构建支持动态多屏幕尺寸和方向的程序需要大量工作。自动调整遮罩、弹簧和梁都是开发者通常会努力使用的工具。这些工具并不总是产生正确的结果，因此典型的下一步行动是在代码中检测屏幕尺寸并相应地调整布局。当在一个具有许多视图和布局的应用程序上工作时，这可能会变得令人沮丧。
- en: 'With iOS 6, Apple introduced a new feature called Auto Layout. The premise
    was pretty straightforward: allow developers to define constraints on all visual
    elements in a storyboard in order to control the layout and flow of an application.
    Unfortunately, Auto Layout caused many headaches.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS 6中，苹果引入了一个名为自动布局的新功能。其前提相当简单：允许开发者定义在Storyboard中所有视觉元素上的约束，以便控制应用程序的布局和流程。不幸的是，自动布局带来了许多麻烦。
- en: The main issue was related to the fact that Auto Layout required every object
    to have proper constraints attached to it. If you failed to provide a single constraint,
    Xcode would generate it automatically, sometimes overriding some of your currently
    set constraints. This would commonly cause many layout issues at runtime, resulting
    in a poor user experience.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 主要问题与自动布局要求每个对象都必须有适当的约束相关联的事实有关。如果你未能提供单个约束，Xcode会自动生成它，有时会覆盖你当前设置的某些约束。这通常会在运行时导致许多布局问题，从而造成糟糕的用户体验。
- en: With iOS 7, Apple has completely revamped Auto Layout, making it much easier
    to provide layout constraints with simple tools and giving developers more control
    over each constraint.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS 7中，苹果完全重写了自动布局，使其通过简单的工具更容易提供布局约束，并给予开发者对每个约束更多的控制。
- en: Properly using Auto Layout will drastically reduce the time spent on building
    dynamic layouts. This is accomplished by replacing complex and cumbersome code
    with easily defined constraints created in our storyboard. Auto Layout does not
    provide a solution for everything, so it is important to decide when to use code
    versus when to use Auto Layout.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正确使用自动布局将大大减少构建动态布局所需的时间。这是通过用我们在Storyboard中创建的易于定义的约束替换复杂且繁琐的代码来实现的。自动布局并不是解决所有问题的方案，因此决定何时使用代码与何时使用自动布局非常重要。
- en: You can download all of the assets, including the completed project, by visiting
    the project's downloadable content and downloading the files to your computer.
    Let's get started!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问项目的可下载内容并下载文件到你的电脑来下载所有资产，包括完成的项目。让我们开始吧！
- en: Creating our project
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的项目
- en: We are going to use Auto Layout to set up constraints for our main menu of the
    **Food and Me** app. We will not be using Auto Layout for the entire application
    for the sake of simplicity, but we will be covering all of the necessary elements
    to learn how to use the new Auto Layout.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用自动布局为**Food and Me**应用程序的主菜单设置约束。为了简化起见，我们不会为整个应用程序使用自动布局，但我们将涵盖所有必要的元素，以便学习如何使用新的自动布局。
- en: First, let's create a new project. Open Xcode and select **Create a new Xcode
    project** on the welcome screen (or navigate to **File** | **New** | **Project**
    from the menu bar if the welcome screen does not appear). Select **Single View
    Application** and then click on **Next**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个新的项目。打开 Xcode 并在欢迎屏幕上选择**创建一个新的 Xcode 项目**（或者在欢迎屏幕未出现时，从菜单栏导航到**文件**
    | **新建** | **项目**）。选择**单视图应用程序**，然后点击**下一步**。
- en: 'Fill in the template options as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下模板选项填写：
- en: '**Product Name**: `Food and Me`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品名称**: `Food and Me`'
- en: '**Organization Name**: Enter the name of your organization or company'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织名称**: 输入您的组织或公司名称'
- en: '**Company Identifier**: Input your desired identifier that will be used on
    the developer portal, using reverse domain notation'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公司标识符**: 输入您希望在开发者门户上使用的标识符，使用反向域名表示法'
- en: '**Class Prefix**: Leave this option empty'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类前缀**: 请保持此选项为空'
- en: '**Devices**: **iPhone**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备**: **iPhone**'
- en: Xcode creates a standard project for us, including the app delegate, a single
    view controller, a storyboard file, and an asset catalog for our launch image
    and icon. First, let's rename `ViewController.h` and `ViewController.m` to something
    more descriptive. Select `ViewController.h` in the navigator to show this file
    in the editor. Right-click on the `ViewController` text found immediately after
    `@interface`, and then navigate to **Refactor** | **Rename...**. It is possible
    for this refactor to sometimes skip renaming filenames in storyboards, so it is
    always a good practice to double-check this. Using snapshots and/or source control
    is another great way to reduce risk.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 为我们创建了一个标准项目，包括应用程序代理、一个单视图控制器、一个故事板文件以及用于我们的启动图像和图标的资源目录。首先，让我们将`ViewController.h`和`ViewController.m`重命名为更具描述性的名称。在导航器中选择`ViewController.h`以在编辑器中显示此文件。在`@interface`之后立即找到的`ViewController`文本上右键单击，然后导航到**重构**
    | **重命名...**。这种重构有时可能会跳过故事板中的文件名重命名，因此始终检查这是一个好习惯。使用快照和/或源代码控制也是降低风险的好方法。
- en: We will be creating the menu view in this file, so let's rename it `MenuViewController`.
    Type this in and make sure **Rename related files** is checked, and then click
    on **Preview**. A new window will appear giving you a preview of what files will
    be changed and where. You should see a header file and an implementation file
    in the preview as well as the storyboard (Xcode is smart enough to update every
    related project file). After clicking on the **Save** button, a prompt will appear
    asking if you would like to enable snapshots. This is similar to the **Source
    Control** menu and is completely optional.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本文件中创建菜单视图，所以让我们将其重命名为`MenuViewController`。输入此名称，并确保**重命名相关文件**选项被勾选，然后点击**预览**。一个新窗口将出现，显示将要更改的文件和位置预览。您应该会看到预览中包含一个头文件、一个实现文件以及故事板（Xcode
    足够智能，可以更新所有相关的项目文件）。点击**保存**按钮后，将出现一个提示，询问您是否希望启用快照功能。这与**源代码控制**菜单类似，完全是可选的。
- en: Lastly, we need to add our image files to the provided Asset Catalog. Open the
    `Food and Me` folder that we downloaded earlier. You will see another folder titled
    `Final Image Files`. If you open this folder, you will see all the image files
    (both regular size and *2x* retina size) used for our project. Switch to your
    Xcode project and select `Images.xcassets`. Drag-and-drop every single image in
    the `Final Images Files` folder onto the box that contains the `AppIcon` and `LaunchImage`
    set. A new image set will be created for each *2x* and regular size image pair.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将我们的图像文件添加到提供的资源目录中。打开我们之前下载的`Food and Me`文件夹。您将看到一个名为`Final Image Files`的文件夹。如果您打开此文件夹，您将看到所有用于我们项目的图像文件（包括常规尺寸和*2x*视网膜尺寸）。切换到您的
    Xcode 项目，并选择`Images.xcassets`。将`Final Images Files`文件夹中的每个图像拖放到包含`AppIcon`和`LaunchImage`设置的框中。对于每个*2x*和常规尺寸图像对，将创建一个新的图像集。
- en: Starting our storyboard
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始我们的故事板
- en: Now that all of our files and images are added, we can start building our storyboard
    and apply Auto Layout constraints. Open `Main.storyboard` and we should see an
    empty view controller assigned to our `MenuViewController` class.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了所有文件和图像，我们可以开始构建我们的故事板并应用自动布局约束。打开`Main.storyboard`，我们应该会看到一个空视图控制器分配给我们的`MenuViewController`类。
- en: Our menu will be made up of four separate components. Let's start by adding
    the first three to our storyboard file (the fourth will be created programmatically).
    Open the Xcode **Utilities** pane (if it is not already open) and select the object
    library at the bottom of the view.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主菜单将由四个独立的部分组成。让我们首先将前三个部分添加到我们的故事板文件中（第四个将通过编程创建）。打开 Xcode 的 **实用工具** 面板（如果尚未打开）并选择视图底部的对象库。
- en: First, drag one `UIImageView` class onto our `MenuViewController` making sure
    it is sized to fit the entire view. Next, drag two `UIButton`s on top of the `UIImageView`
    without worrying about their position. In our **Utilities** pane, select the **Attributes
    Inspector**, and then select one of the two buttons. Erase the **Default Title**
    option so that it is blank. Next, click on the drop-down menu for **Image** and
    select `foodButton` as our image. Xcode will automatically resize `UIButton` to
    the dimensions of our button image. Repeat this process for the remaining `UIButton`,
    except this time select `addButton` for the image property in the **Attributes
    Inspector**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将一个 `UIImageView` 类拖到我们的 `MenuViewController` 中，确保它的大小适合整个视图。接下来，将两个 `UIButton`
    拖到 `UIImageView` 上面，无需担心它们的位置。在我们的 **实用工具** 面板中，选择 **属性检查器**，然后选择两个按钮中的一个。删除 **默认标题**
    选项，使其为空。接下来，点击 **图像** 的下拉菜单并选择 `foodButton` 作为我们的图像。Xcode 将自动调整 `UIButton` 的大小以适应我们的按钮图像。对剩余的
    `UIButton` 重复此过程，这次在 **属性检查器** 中的图像属性中选择 `addButton`。
- en: 'Now reposition the buttons at the bottom of the screen, evenly spaced apart
    from one another. The exact position is not important, so adjust the position
    based on personal preference. The final view of the storyboard should now look
    similar to the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将屏幕底部的按钮重新定位，使它们彼此之间均匀分布。确切的定位不重要，所以根据个人喜好调整位置。现在故事板的最终视图应该看起来类似于以下截图：
- en: '![Starting our storyboard](img/0319OT_03_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![开始我们的故事板](img/0319OT_03_01.jpg)'
- en: Setting up button actions
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置按钮动作
- en: Our final step before applying our Auto Layout constraints is to connect our
    buttons to the class, using an `IBAction` for each button. While `MenuViewController`
    is selected, open the assistant editor from the toolbar and make sure you select
    the header file (`MenuViewController.h`).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用自动布局约束之前的最后一步是将我们的按钮连接到类，为每个按钮使用一个 `IBAction`。当选择 `MenuViewController` 时，从工具栏打开辅助编辑器并确保您选择了头文件（`MenuViewController.h`）。
- en: While holding down the *control* key on your keyboard, click on and drag the
    **My Foods** button into the header file. Position your mouse between `@interface`
    and `@end` and release the mouse once you see a small popup that says **Inset
    Outlet, Action, or Outlet Collection**. In the new view that pops up, select **Action**
    from the **Connection** drop-down menu, and name this action `myFoodsPressed`.
    Lastly, select the **Type** drop-down option, and select `UIButton`. Repeat this
    process for **Add New** with an action name `addNewPressed`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 按住键盘上的 **control** 键，点击并拖动 **My Foods** 按钮到头文件中。将鼠标放在 `@interface` 和 `@end`
    之间，并在看到一个小弹出窗口显示 **内嵌输出、动作或输出集合** 时释放鼠标。在新弹出的视图中，从 **连接** 下拉菜单中选择 **动作**，并将此动作命名为
    `myFoodsPressed`。最后，从 **类型** 下拉选项中选择，并选择 `UIButton`。为 **Add New** 重复此过程，动作名称为
    `addNewPressed`。
- en: 'Your header file should now look like the following code snippet:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您的头文件现在应该看起来像以下代码片段：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that our view is populated and all actions have been created, we can get
    started with Auto Layout.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经填充了视图并创建了所有动作，我们可以开始使用自动布局了。
- en: Using Auto Layout
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自动布局
- en: Simply put, Auto Layout is a set of instructions given to each view related
    to the size and position in its superview or the nearest neighboring views. Two
    very common uses for Auto Layout is to make sure your views know what to do when
    an application runs on a 3.5-inch screen versus a 4-inch screen versus an iPad
    screen or when the device changes orientation. We want our application to support
    both screen sizes, so we will be focusing on this when adding our constraints.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，自动布局是一组针对每个视图的指令，这些指令与其父视图或最近的相邻视图的大小和位置有关。自动布局的两个非常常见的用途是确保您的视图在应用程序运行在
    3.5 英寸屏幕、4 英寸屏幕或 iPad 屏幕时知道该做什么，以及当设备改变方向时。我们希望我们的应用程序支持这两种屏幕尺寸，因此我们将在添加约束时关注这一点。
- en: Xcode provides multiple ways to apply your constraints, and each constraint
    also has its own properties that can be individually manipulated. With all of
    these options, I prefer to set up my Xcode environment to fully embrace all Auto
    Layout options.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode提供了多种应用约束的方法，每个约束也有其自己的属性，可以单独操作。有了所有这些选项，我更喜欢将我的Xcode环境设置为完全拥抱所有Auto Layout选项。
- en: 'Be sure that your **Utilities** pane is open. This will allow you to manually
    change your constraints'' properties while working on your layouts. In the bottom-left
    corner of the storyboard view, you will see a button with an arrow pointing towards
    the right. This button will open the document outline view. This pane allows you
    to have a bird''s-eye view of all view controllers and their subviews, including
    all constraints applied to each view. Open this view and your Xcode view should
    now look similar to the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的**实用工具**面板是打开的。这将允许你在处理布局时手动更改你的约束属性。在故事板视图的左下角，你会看到一个带有指向右侧箭头的按钮。这个按钮将打开文档大纲视图。这个面板允许你从全局视角查看所有视图控制器及其子视图，包括应用于每个视图的所有约束。打开这个视图，你的Xcode视图现在应该类似于下面的截图：
- en: '![Using Auto Layout](img/0319OT_03_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用Auto Layout](img/0319OT_03_02.jpg)'
- en: Applying constraints
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用约束
- en: Our menu view features two buttons to navigate to separate areas of the application.
    We want the buttons to always be in alignment with one another, so let's add some
    constraints to our buttons to make that happen.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的面板菜单有两个按钮，用于导航到应用程序的不同区域。我们希望按钮始终对齐，所以让我们添加一些约束到我们的按钮，以实现这一点。
- en: One way to add a constraint between two objects is the control drag from one
    object to the other. Hold down the *control* key on your keyboard and then click-and-drag
    from the **Add New** button to the **My Foods** button. A new pop up will show
    these multiple options to add constraints. Each of these items can be selected
    and will provide the respective constraints between the two objects. Holding down
    the *shift* key will allow you to select more than one option at a time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个对象之间添加约束的一种方法是从一个对象控制拖动到另一个对象。在键盘上按住*control*键，然后从**添加新**按钮拖动到**我的食物**按钮。一个新弹出窗口将显示这些多个选项以添加约束。这些项目中的每一个都可以被选中，并将提供两个对象之间的相应约束。按住*shift*键将允许你一次选择多个选项。
- en: 'From the menu, select **Horizontal Spacing**. You will notice an orange outline
    appear around the **Add New** button, and a horizontal I-shaped line will appear
    between the two buttons, as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从菜单中选择**水平间距**。你会注意到**添加新**按钮周围出现一个橙色轮廓，并且两个按钮之间将出现一条水平I形线，如下面的截图所示：
- en: '![Applying constraints](img/0319OT_03_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![应用约束](img/0319OT_03_03.jpg)'
- en: In order for Auto Layout to properly calculate the position of our views, it
    must have a complete set of constraints. All constraints will be highlighted in
    orange until a complete set of constraints is provided. Currently, we have only
    one constraint between the two buttons, which tells Xcode that these two views
    need to always remain an equal distance apart.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Auto Layout正确计算我们视图的位置，它必须有一套完整的约束。所有约束都将突出显示为橙色，直到提供了一套完整的约束。目前，我们只在两个按钮之间有一个约束，这告诉Xcode这两个视图需要始终保持相等距离。
- en: 'Let''s add some more constraints. Each button should also remain vertically
    aligned, so let''s add that constraint. This time, however, hold down the *command*
    key and select both buttons. With both items selected, Xcode 5 knows that any
    constraints provided will be applied to these two views. On the bottom-right corner
    of the storyboard view, you will notice a group of buttons as shown in the following
    screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些更多的约束。每个按钮也应该保持垂直对齐，所以让我们添加这个约束。然而，这次，请按住*command*键并选择两个按钮。在选择了这两个项目后，Xcode
    5知道提供的任何约束都将应用于这两个视图。在故事板视图的右下角，你会注意到一组按钮，如下面的截图所示：
- en: '![Applying constraints](img/0319OT_03_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![应用约束](img/0319OT_03_04.jpg)'
- en: These buttons provide quick access to all Auto Layout options. With both buttons
    still selected, click on the second button in the group of four buttons as shown
    in the previous screenshot. A new pop up will appear (see the following image)
    with a complete list of options and properties to set/edit. You may have recognize
    some of these properties and constraints from the previous menu displayed when
    we used control dragging from one button to another.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些按钮提供了快速访问所有自动布局选项。在仍然选择两个按钮的情况下，点击之前截图所示的四个按钮组中的第二个按钮。将出现一个新的弹出窗口（见以下图片），其中包含设置/编辑的完整选项和属性列表。你可能已经从我们使用控制拖动从一个按钮到另一个按钮时显示的先前菜单中识别出一些这些属性和约束。
- en: We want to focus on alignment, which can be found at the bottom of the pop-up
    view. Check the box next to **Alignment**, and from the drop-down menu select
    **Top Edges**. Now click on **Add Constraint** to apply it to our button views.
    A new line will appear above both the buttons to indicate that both will always
    be top aligned to one another.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要关注对齐，这可以在弹出视图的底部找到。勾选**对齐**旁边的框，并从下拉菜单中选择**顶部边缘**。现在点击**添加约束**将其应用到我们的按钮视图中。在两个按钮上方将出现一条新线，表示两者将始终对齐。
- en: Our constraints will still appear orange, which means we still need to add more
    constraints for Xcode to make proper calculations. Xcode has detected this as
    well and provides a really great tool that provides suggestions based on what
    is required. In the document outline view to the left, a small red circle with
    an arrow has appeared next to **Menu View Controller Scene**. Clicking on this
    arrow will push a new view that lists all of the missing constraints and warnings.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的约束仍然显示为橙色，这意味着我们仍然需要添加更多约束，以便Xcode能够进行适当的计算。Xcode也检测到了这一点，并提供了一个非常棒的工具，它基于所需内容提供建议。在左侧的文档大纲视图中，**菜单视图控制器场景**旁边出现了一个带有箭头的小红圈。点击此箭头将弹出一个新视图，列出所有缺失的约束和警告。
- en: '![Applying constraints](img/0319OT_03_05.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![应用约束](img/0319OT_03_05.jpg)'
- en: Our warnings are pointing to two very specific issues related to the X position
    and the Y position. We need to add constraints that will tell Xcode how to lay
    out the buttons' X and Y positions, so let's do that now.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的警告指向与X位置和Y位置相关的两个非常具体的问题。我们需要添加约束，告诉Xcode如何布局按钮的X和Y位置，所以现在就让我们这么做吧。
- en: Select just the **Add New** button. Our application has a pretty simple layout,
    and it is safe to say that we would prefer our buttons to keep an equal distance
    from the bottom of the screen regardless of size, so let's add a constraint that
    does just that. While keeping the button selected, navigate your mouse to the
    **Editor** menu option at the top of the screen, and select **Pin** | **Leading
    Space To Superview**. A new I-shaped bar appears between the edge of the view
    and the **Add New** button. This will make sure that an equal distance is kept
    between the button and the main view.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 只选择**添加新按钮**。我们的应用程序布局相当简单，可以肯定的是，我们希望按钮与屏幕底部保持相等距离，无论大小如何，所以让我们添加一个约束来实现这一点。在保持按钮选择状态的同时，将鼠标导航到屏幕顶部的**编辑器**菜单选项，并选择**固定**
    | **左侧空间到父视图**。在视图边缘和**添加新按钮**之间会出现一个新的I形条。这将确保按钮和主视图之间保持相等距离。
- en: Now that we have taken care of the X position, let's do the same for the Y position.
    Select **Editor** | **Pin** | **Bottom Space To Superview**. A new bar appears
    from the bottom of the button to the bottom of the screen. This will make sure
    there is an equal distance between the button and the bottom of the screen.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经处理了X位置，那么让我们也为Y位置做同样的操作。选择**编辑器** | **固定** | **底部空间到父视图**。从按钮底部到屏幕底部会出现一个新的条形。这将确保按钮和屏幕底部之间保持相等距离。
- en: With this new constraint, all of our constraints have now turned blue, which
    means Xcode has all the information it needs to calculate the positions of our
    views! You may be wondering how this is the case, when we have not added these
    superview constraints to the **My Foods** button.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个新约束，现在我们所有的约束都已经变成了蓝色，这意味着Xcode已经拥有了计算我们视图位置所需的所有信息！你可能想知道，当我们没有为**我的食物**按钮添加这些父视图约束时，这是如何实现的。
- en: 'The answer is that we don''t need to. The first couple of constraints we added
    actually take care of this for us. Both buttons will always stay top aligned,
    which will take care of the Y position of the other button. Additionally, we set
    the horizontal spacing between the buttons, which will automatically take care
    of the other button''s X position. The following image illustrates how this is
    possible:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是我们不需要这样做。我们添加的前几个约束实际上已经为我们处理了这个问题。两个按钮将始终保持顶部对齐，这将处理另一个按钮的Y位置。此外，我们设置了按钮之间的水平间距，这将自动处理另一个按钮的X位置。以下图像说明了这是如何可能的：
- en: '![Applying constraints](img/0319OT_03_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![应用约束](img/0319OT_03_06.jpg)'
- en: Now that our constraints are set up, let's set the background image. Select
    the image view we added earlier, and in the **Attributes Inspector**, set the
    image to Background. Now go ahead and run the application first on the 4-inch
    iPhone and then on the 3.5-inch iPhone. The buttons at the bottom of our screen
    will automatically position themselves based on our constraints, and we didn't
    have to write a single line of code to do so!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了约束，让我们设置背景图像。选择我们之前添加的图像视图，在**属性检查器**中将图像设置为背景。现在先在4英寸iPhone上运行应用程序，然后是3.5英寸iPhone。屏幕底部的按钮将根据我们的约束自动定位，而我们不需要写一行代码就能做到这一点！
- en: Resolving Auto Layout issues
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决自动布局问题
- en: After seeing our application running on an iPhone, it may be in our best interest
    to move the buttons down just a bit for a more balanced layout. Return to Xcode,
    and select both buttons by holding down the *command* key and clicking on each.
    Move them down a few pixels based on preference.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在看到我们的应用程序在iPhone上运行后，为了获得更平衡的布局，可能最好将按钮向下移动一点。返回Xcode，并按住*command*键点击每个按钮来选择这两个按钮。根据个人喜好将它们向下移动几个像素。
- en: You will notice that suddenly there are two dashed red lines surrounding our
    buttons. Xcode does not automatically update constraints when a view is manually
    repositioned, so now the previous calculations are no longer valid. The dashed
    red lines let you know there is an error with our constraints that requires correction.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到突然有两个虚线红色的线条围绕着我们的按钮。Xcode在手动重新定位视图时不会自动更新约束，因此之前的计算现在不再有效。这些虚线红色的线条告诉你我们的约束存在错误，需要修正。
- en: Thankfully, Xcode has some handy features available to help correct these issues.
    From the menu bar, navigate to **Editor** | **Resolve Auto Layout Issues** | **Update
    Constraints**. This can also be accomplished using the fourth button to the bottom-right
    corner of the storyboard. By selecting this, Xcode will recalculate the previous
    constraints based on our view's current physical position. The whole of the error
    will now disappear with no issues.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Xcode有一些实用的功能可以帮助解决这些问题。从菜单栏中，导航到**编辑器** | **解决自动布局问题** | **更新约束**。这也可以通过故事板右下角第四个按钮来完成。通过选择这个按钮，Xcode将根据我们视图的当前物理位置重新计算之前的约束。所有的错误现在都将消失，没有任何问题。
- en: In addition to updating constraints, this menu option also gives you the ability
    to add missing constraints, update current constraints, and even clear all constraints.
    These automated options can be very helpful, but it is always recommended to set
    your constraints manually for better accuracy. If you are not sure what to do
    next, these options may also give you some guidance.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了更新约束外，此菜单选项还允许你添加缺失的约束、更新当前约束，甚至清除所有约束。这些自动化选项可能非常有帮助，但始终建议手动设置约束以获得更好的准确性。如果你不确定下一步该做什么，这些选项也可能为你提供一些指导。
- en: Finishing our menu view
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成我们的菜单视图
- en: 'Our buttons tend to blend into the background slightly, so let''s add a new
    view that will help them stand out better. First, let''s navigate to our storyboard
    and create a new outlet for our background image. Select our `MenuViewController`
    class, and open the assistant editor. Control drag from the background image in
    our storyboard to the `MenuViewController.h` file (between `@interface` and `@end`).
    Name this outlet `mainBackground`. Now switch to `MenuViewController.m`, and add
    the following code to `ViewDidLoad`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按钮倾向于稍微融入背景中，所以让我们添加一个新的视图来帮助它们更好地突出。首先，让我们导航到我们的故事板并为我们的背景图像创建一个新的出口。选择我们的`MenuViewController`类，并打开辅助编辑器。从故事板中的背景图像控制拖动到`MenuViewController.h`文件（在`@interface`和`@end`之间）。将此出口命名为`mainBackground`。现在切换到`MenuViewController.m`，并在`ViewDidLoad`中添加以下代码：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first line creates a new `UIView` and sets its frame. We set its Y position
    based on the screen height to guarantee that regardless of screen size, the `UIview`
    will be at the very bottom of the view.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行创建了一个新的`UIView`并设置了其框架。我们根据屏幕高度设置其Y位置，以确保无论屏幕大小如何，`UIview`都将位于视图的底部。
- en: Next, we set the background color to be solid white and set the alpha to `0.5`
    (half) so that the view appears slightly transparent.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将背景颜色设置为纯白色，并将alpha设置为`0.5`（一半），使视图看起来略微透明。
- en: Lastly, we add the button background view to our main view. We know that our
    button background should be above the main background but below the buttons, so
    we insert the view using `aboveSubview` so that it will always be directly above
    the main background. Run the application and take a look at the final design of
    our menu.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将按钮背景视图添加到主视图中。我们知道按钮背景应该位于主背景之上但位于按钮之下，因此我们使用`aboveSubview`方法插入视图，以确保它始终直接位于主背景之上。运行应用程序并查看我们菜单的最终设计。
- en: Preparing for navigation
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备导航
- en: The last thing we need to do is add a navigation controller for our view. This
    will be required to display (or push) our **My Foods** view. We can accomplish
    this in our storyboards with a single click of a menu item.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后需要做的是为我们的视图添加一个导航控制器。这将用于显示（或推送）我们的**我的食物**视图。我们可以在故事板中通过单击菜单项来完成此操作。
- en: 'Switch to our `Main.storyboard` and then select `MenuViewController`. From
    the top menu bar, navigate to **Editor** | **Embed In** | **Navigation Controller**.
    Xcode will automatically add a navigation controller to the storyboard, set our
    `MenuViewController` as the root view controller, and then set our new navigation
    controller as the initial view to load. Our storyboard will now look like the
    following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到`Main.storyboard`，然后选择`MenuViewController`。从顶部菜单栏，导航到**编辑** | **嵌入** | **导航控制器**。Xcode将自动将导航控制器添加到故事板中，将我们的`MenuViewController`设置为根视图控制器，并将我们的新导航控制器设置为初始视图。现在，我们的故事板将看起来像以下截图：
- en: '![Preparing for navigation](img/0319OT_03_07.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![准备导航](img/0319OT_03_07.jpg)'
- en: 'We don''t want our menu view to display the navigation bar, so let''s switch
    back to `MenuViewController.m` and add the following final line of code to `viewDidLoad`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望我们的菜单视图显示导航栏，所以让我们切换回`MenuViewController.m`，并在`viewDidLoad`中添加以下最终代码行：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the new features of Auto Layout by building our
    menu view and applying constraints. Now that you have a good understanding of
    the new features of Auto Layout and how to use them, I highly recommend that you
    practice all the different types of constraints available on multiple views. Auto
    Layout is very powerful and, when used correctly, will eliminate a large portion
    of code normally attributed to dynamic layouts!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过构建我们的菜单视图并应用约束来介绍了Auto Layout的新特性。现在，你对Auto Layout的新特性和如何使用它们有了很好的理解，我强烈建议你在多个视图中练习所有不同类型的约束。Auto
    Layout非常强大，并且当正确使用时，将消除通常归因于动态布局的大量代码！
- en: In the next chapter, we will continue by building the next part of our application.
    We will explore some of the new design principles of iOS 7 and apply them to our
    app, **Food and Me**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续构建我们应用程序的下一部分。我们将探索iOS 7的一些新设计原则，并将它们应用到我们的应用程序**Food and Me**中。
