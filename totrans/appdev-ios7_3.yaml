- en: Chapter 3. Auto Layout 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create our project and start building our application,
    **Food and Me**, starting with the custom menu view. First, we will create the
    project itself in Xcode 5\. Next, we will create our storyboard. This consists
    of adding all the required elements and using the new Auto Layout to add constraints
    to our views. This is where we will dive directly into how Auto Layout works and
    how you will continue using Auto Layout for your future projects. Lastly, we will
    hook everything up to our code and set up our navigation. On completing this chapter,
    we will have a functional menu view complete with a bare navigation controller.
  prefs: []
  type: TYPE_NORMAL
- en: Why you should use Auto Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to Auto Layout, building applications to dynamically support multiple
    screen sizes and orientations required large amounts of work. Auto-resizing masks,
    springs, and struts are all examples of the tools that developers would commonly
    struggle to use. These tools did not always produce the correct result, so the
    typical next best action was to detect screen sizes in code and adjust the layout
    accordingly. When working on an application with many views and layouts, this
    can become frustrating.
  prefs: []
  type: TYPE_NORMAL
- en: 'With iOS 6, Apple introduced a new feature called Auto Layout. The premise
    was pretty straightforward: allow developers to define constraints on all visual
    elements in a storyboard in order to control the layout and flow of an application.
    Unfortunately, Auto Layout caused many headaches.'
  prefs: []
  type: TYPE_NORMAL
- en: The main issue was related to the fact that Auto Layout required every object
    to have proper constraints attached to it. If you failed to provide a single constraint,
    Xcode would generate it automatically, sometimes overriding some of your currently
    set constraints. This would commonly cause many layout issues at runtime, resulting
    in a poor user experience.
  prefs: []
  type: TYPE_NORMAL
- en: With iOS 7, Apple has completely revamped Auto Layout, making it much easier
    to provide layout constraints with simple tools and giving developers more control
    over each constraint.
  prefs: []
  type: TYPE_NORMAL
- en: Properly using Auto Layout will drastically reduce the time spent on building
    dynamic layouts. This is accomplished by replacing complex and cumbersome code
    with easily defined constraints created in our storyboard. Auto Layout does not
    provide a solution for everything, so it is important to decide when to use code
    versus when to use Auto Layout.
  prefs: []
  type: TYPE_NORMAL
- en: You can download all of the assets, including the completed project, by visiting
    the project's downloadable content and downloading the files to your computer.
    Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Creating our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use Auto Layout to set up constraints for our main menu of the
    **Food and Me** app. We will not be using Auto Layout for the entire application
    for the sake of simplicity, but we will be covering all of the necessary elements
    to learn how to use the new Auto Layout.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's create a new project. Open Xcode and select **Create a new Xcode
    project** on the welcome screen (or navigate to **File** | **New** | **Project**
    from the menu bar if the welcome screen does not appear). Select **Single View
    Application** and then click on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the template options as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product Name**: `Food and Me`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization Name**: Enter the name of your organization or company'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Company Identifier**: Input your desired identifier that will be used on
    the developer portal, using reverse domain notation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class Prefix**: Leave this option empty'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Devices**: **iPhone**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode creates a standard project for us, including the app delegate, a single
    view controller, a storyboard file, and an asset catalog for our launch image
    and icon. First, let's rename `ViewController.h` and `ViewController.m` to something
    more descriptive. Select `ViewController.h` in the navigator to show this file
    in the editor. Right-click on the `ViewController` text found immediately after
    `@interface`, and then navigate to **Refactor** | **Rename...**. It is possible
    for this refactor to sometimes skip renaming filenames in storyboards, so it is
    always a good practice to double-check this. Using snapshots and/or source control
    is another great way to reduce risk.
  prefs: []
  type: TYPE_NORMAL
- en: We will be creating the menu view in this file, so let's rename it `MenuViewController`.
    Type this in and make sure **Rename related files** is checked, and then click
    on **Preview**. A new window will appear giving you a preview of what files will
    be changed and where. You should see a header file and an implementation file
    in the preview as well as the storyboard (Xcode is smart enough to update every
    related project file). After clicking on the **Save** button, a prompt will appear
    asking if you would like to enable snapshots. This is similar to the **Source
    Control** menu and is completely optional.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we need to add our image files to the provided Asset Catalog. Open the
    `Food and Me` folder that we downloaded earlier. You will see another folder titled
    `Final Image Files`. If you open this folder, you will see all the image files
    (both regular size and *2x* retina size) used for our project. Switch to your
    Xcode project and select `Images.xcassets`. Drag-and-drop every single image in
    the `Final Images Files` folder onto the box that contains the `AppIcon` and `LaunchImage`
    set. A new image set will be created for each *2x* and regular size image pair.
  prefs: []
  type: TYPE_NORMAL
- en: Starting our storyboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that all of our files and images are added, we can start building our storyboard
    and apply Auto Layout constraints. Open `Main.storyboard` and we should see an
    empty view controller assigned to our `MenuViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: Our menu will be made up of four separate components. Let's start by adding
    the first three to our storyboard file (the fourth will be created programmatically).
    Open the Xcode **Utilities** pane (if it is not already open) and select the object
    library at the bottom of the view.
  prefs: []
  type: TYPE_NORMAL
- en: First, drag one `UIImageView` class onto our `MenuViewController` making sure
    it is sized to fit the entire view. Next, drag two `UIButton`s on top of the `UIImageView`
    without worrying about their position. In our **Utilities** pane, select the **Attributes
    Inspector**, and then select one of the two buttons. Erase the **Default Title**
    option so that it is blank. Next, click on the drop-down menu for **Image** and
    select `foodButton` as our image. Xcode will automatically resize `UIButton` to
    the dimensions of our button image. Repeat this process for the remaining `UIButton`,
    except this time select `addButton` for the image property in the **Attributes
    Inspector**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now reposition the buttons at the bottom of the screen, evenly spaced apart
    from one another. The exact position is not important, so adjust the position
    based on personal preference. The final view of the storyboard should now look
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting our storyboard](img/0319OT_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up button actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our final step before applying our Auto Layout constraints is to connect our
    buttons to the class, using an `IBAction` for each button. While `MenuViewController`
    is selected, open the assistant editor from the toolbar and make sure you select
    the header file (`MenuViewController.h`).
  prefs: []
  type: TYPE_NORMAL
- en: While holding down the *control* key on your keyboard, click on and drag the
    **My Foods** button into the header file. Position your mouse between `@interface`
    and `@end` and release the mouse once you see a small popup that says **Inset
    Outlet, Action, or Outlet Collection**. In the new view that pops up, select **Action**
    from the **Connection** drop-down menu, and name this action `myFoodsPressed`.
    Lastly, select the **Type** drop-down option, and select `UIButton`. Repeat this
    process for **Add New** with an action name `addNewPressed`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your header file should now look like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that our view is populated and all actions have been created, we can get
    started with Auto Layout.
  prefs: []
  type: TYPE_NORMAL
- en: Using Auto Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simply put, Auto Layout is a set of instructions given to each view related
    to the size and position in its superview or the nearest neighboring views. Two
    very common uses for Auto Layout is to make sure your views know what to do when
    an application runs on a 3.5-inch screen versus a 4-inch screen versus an iPad
    screen or when the device changes orientation. We want our application to support
    both screen sizes, so we will be focusing on this when adding our constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode provides multiple ways to apply your constraints, and each constraint
    also has its own properties that can be individually manipulated. With all of
    these options, I prefer to set up my Xcode environment to fully embrace all Auto
    Layout options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be sure that your **Utilities** pane is open. This will allow you to manually
    change your constraints'' properties while working on your layouts. In the bottom-left
    corner of the storyboard view, you will see a button with an arrow pointing towards
    the right. This button will open the document outline view. This pane allows you
    to have a bird''s-eye view of all view controllers and their subviews, including
    all constraints applied to each view. Open this view and your Xcode view should
    now look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Auto Layout](img/0319OT_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Applying constraints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our menu view features two buttons to navigate to separate areas of the application.
    We want the buttons to always be in alignment with one another, so let's add some
    constraints to our buttons to make that happen.
  prefs: []
  type: TYPE_NORMAL
- en: One way to add a constraint between two objects is the control drag from one
    object to the other. Hold down the *control* key on your keyboard and then click-and-drag
    from the **Add New** button to the **My Foods** button. A new pop up will show
    these multiple options to add constraints. Each of these items can be selected
    and will provide the respective constraints between the two objects. Holding down
    the *shift* key will allow you to select more than one option at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the menu, select **Horizontal Spacing**. You will notice an orange outline
    appear around the **Add New** button, and a horizontal I-shaped line will appear
    between the two buttons, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying constraints](img/0319OT_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order for Auto Layout to properly calculate the position of our views, it
    must have a complete set of constraints. All constraints will be highlighted in
    orange until a complete set of constraints is provided. Currently, we have only
    one constraint between the two buttons, which tells Xcode that these two views
    need to always remain an equal distance apart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add some more constraints. Each button should also remain vertically
    aligned, so let''s add that constraint. This time, however, hold down the *command*
    key and select both buttons. With both items selected, Xcode 5 knows that any
    constraints provided will be applied to these two views. On the bottom-right corner
    of the storyboard view, you will notice a group of buttons as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying constraints](img/0319OT_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These buttons provide quick access to all Auto Layout options. With both buttons
    still selected, click on the second button in the group of four buttons as shown
    in the previous screenshot. A new pop up will appear (see the following image)
    with a complete list of options and properties to set/edit. You may have recognize
    some of these properties and constraints from the previous menu displayed when
    we used control dragging from one button to another.
  prefs: []
  type: TYPE_NORMAL
- en: We want to focus on alignment, which can be found at the bottom of the pop-up
    view. Check the box next to **Alignment**, and from the drop-down menu select
    **Top Edges**. Now click on **Add Constraint** to apply it to our button views.
    A new line will appear above both the buttons to indicate that both will always
    be top aligned to one another.
  prefs: []
  type: TYPE_NORMAL
- en: Our constraints will still appear orange, which means we still need to add more
    constraints for Xcode to make proper calculations. Xcode has detected this as
    well and provides a really great tool that provides suggestions based on what
    is required. In the document outline view to the left, a small red circle with
    an arrow has appeared next to **Menu View Controller Scene**. Clicking on this
    arrow will push a new view that lists all of the missing constraints and warnings.
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying constraints](img/0319OT_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our warnings are pointing to two very specific issues related to the X position
    and the Y position. We need to add constraints that will tell Xcode how to lay
    out the buttons' X and Y positions, so let's do that now.
  prefs: []
  type: TYPE_NORMAL
- en: Select just the **Add New** button. Our application has a pretty simple layout,
    and it is safe to say that we would prefer our buttons to keep an equal distance
    from the bottom of the screen regardless of size, so let's add a constraint that
    does just that. While keeping the button selected, navigate your mouse to the
    **Editor** menu option at the top of the screen, and select **Pin** | **Leading
    Space To Superview**. A new I-shaped bar appears between the edge of the view
    and the **Add New** button. This will make sure that an equal distance is kept
    between the button and the main view.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have taken care of the X position, let's do the same for the Y position.
    Select **Editor** | **Pin** | **Bottom Space To Superview**. A new bar appears
    from the bottom of the button to the bottom of the screen. This will make sure
    there is an equal distance between the button and the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: With this new constraint, all of our constraints have now turned blue, which
    means Xcode has all the information it needs to calculate the positions of our
    views! You may be wondering how this is the case, when we have not added these
    superview constraints to the **My Foods** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is that we don''t need to. The first couple of constraints we added
    actually take care of this for us. Both buttons will always stay top aligned,
    which will take care of the Y position of the other button. Additionally, we set
    the horizontal spacing between the buttons, which will automatically take care
    of the other button''s X position. The following image illustrates how this is
    possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying constraints](img/0319OT_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that our constraints are set up, let's set the background image. Select
    the image view we added earlier, and in the **Attributes Inspector**, set the
    image to Background. Now go ahead and run the application first on the 4-inch
    iPhone and then on the 3.5-inch iPhone. The buttons at the bottom of our screen
    will automatically position themselves based on our constraints, and we didn't
    have to write a single line of code to do so!
  prefs: []
  type: TYPE_NORMAL
- en: Resolving Auto Layout issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After seeing our application running on an iPhone, it may be in our best interest
    to move the buttons down just a bit for a more balanced layout. Return to Xcode,
    and select both buttons by holding down the *command* key and clicking on each.
    Move them down a few pixels based on preference.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that suddenly there are two dashed red lines surrounding our
    buttons. Xcode does not automatically update constraints when a view is manually
    repositioned, so now the previous calculations are no longer valid. The dashed
    red lines let you know there is an error with our constraints that requires correction.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, Xcode has some handy features available to help correct these issues.
    From the menu bar, navigate to **Editor** | **Resolve Auto Layout Issues** | **Update
    Constraints**. This can also be accomplished using the fourth button to the bottom-right
    corner of the storyboard. By selecting this, Xcode will recalculate the previous
    constraints based on our view's current physical position. The whole of the error
    will now disappear with no issues.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to updating constraints, this menu option also gives you the ability
    to add missing constraints, update current constraints, and even clear all constraints.
    These automated options can be very helpful, but it is always recommended to set
    your constraints manually for better accuracy. If you are not sure what to do
    next, these options may also give you some guidance.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing our menu view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our buttons tend to blend into the background slightly, so let''s add a new
    view that will help them stand out better. First, let''s navigate to our storyboard
    and create a new outlet for our background image. Select our `MenuViewController`
    class, and open the assistant editor. Control drag from the background image in
    our storyboard to the `MenuViewController.h` file (between `@interface` and `@end`).
    Name this outlet `mainBackground`. Now switch to `MenuViewController.m`, and add
    the following code to `ViewDidLoad`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first line creates a new `UIView` and sets its frame. We set its Y position
    based on the screen height to guarantee that regardless of screen size, the `UIview`
    will be at the very bottom of the view.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set the background color to be solid white and set the alpha to `0.5`
    (half) so that the view appears slightly transparent.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we add the button background view to our main view. We know that our
    button background should be above the main background but below the buttons, so
    we insert the view using `aboveSubview` so that it will always be directly above
    the main background. Run the application and take a look at the final design of
    our menu.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing we need to do is add a navigation controller for our view. This
    will be required to display (or push) our **My Foods** view. We can accomplish
    this in our storyboards with a single click of a menu item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to our `Main.storyboard` and then select `MenuViewController`. From
    the top menu bar, navigate to **Editor** | **Embed In** | **Navigation Controller**.
    Xcode will automatically add a navigation controller to the storyboard, set our
    `MenuViewController` as the root view controller, and then set our new navigation
    controller as the initial view to load. Our storyboard will now look like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing for navigation](img/0319OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We don''t want our menu view to display the navigation bar, so let''s switch
    back to `MenuViewController.m` and add the following final line of code to `viewDidLoad`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the new features of Auto Layout by building our
    menu view and applying constraints. Now that you have a good understanding of
    the new features of Auto Layout and how to use them, I highly recommend that you
    practice all the different types of constraints available on multiple views. Auto
    Layout is very powerful and, when used correctly, will eliminate a large portion
    of code normally attributed to dynamic layouts!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue by building the next part of our application.
    We will explore some of the new design principles of iOS 7 and apply them to our
    app, **Food and Me**.
  prefs: []
  type: TYPE_NORMAL
