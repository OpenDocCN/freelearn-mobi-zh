["```swift\n    @testable import ToDo\n    ```", "```swift\n    // ToDoItemTests.swift\n    func test_init_takesTitle() {\n      ToDoItem(title: \"Dummy\")\n    }\n    ```", "```swift\n    // ToDoItem.swift\n    struct ToDoItem {\n    }\n    ```", "```swift\n    let item = ToDoItem()\n    ```", "```swift\n    // ToDoItem.swift\n    struct ToDoItem {\n      let title: String\n    }\n    ```", "```swift\nfunc test_init_takesTitle() {\n  let item = ToDoItem(title: \"Dummy\")\n  XCTAssertNotNil(item, \"item should not be nil\")\n}\n```", "```swift\n    // ToDoItemTests.swift\n    func test_init_takesTitleAndDescription() {\n      _ = ToDoItem(title: \"Dummy\",\n                   itemDescription: \"Dummy Description\")\n    }\n    ```", "```swift\n    // ToDoItem.swift\n    struct ToDoItem {\n      let title: String\n      let itemDescription: String?\n    }\n    ```", "```swift\n    // ToDoItem.swift\n    init(title: String,\n         itemDescription: String? = nil) {\n      self.title = title\n      self.itemDescription = itemDescription\n    }\n    ```", "```swift\nstruct ToDoItem {\n//  let title: String\n//  let itemDescription: String?\n\n  init(title: String,\n       itemDescription: String? = nil) {\n\n//    self.title = title\n//    self.itemDescription = itemDescription\n  }\n}\n```", "```swift\n// ToDoItemTests.swift\nfunc test_init_whenGivenTitle_setsTitle() {\n  let item = ToDoItem(title: \"Dummy\")\n  XCTAssertEqual(item.title, \"Dummy\")\n}\n```", "```swift\n// ToDoItemTests.swift\nfunc test_init_whenGivenDescription_setsDescription() {\n  let item = ToDoItem(title: \"Dummy\",\n                      itemDescription: \"Dummy Description\")\n  XCTAssertEqual(item.itemDescription, \"Dummy Description\")\n}\n```", "```swift\n    // ToDoItemTests.swift\n    func test_init_setsTimestamp() {\n      let dummyTimestamp: TimeInterval = 42.0\n      let item = ToDoItem(title: \"Dummy\",\n                          timestamp: dummyTimestamp)\n      XCTAssertEqual(item.timestamp, dummyTimestamp)\n    }\n    ```", "```swift\n    // ToDoItem.swift\n    struct ToDoItem {\n      let title: String\n      let itemDescription: String?\n      let timestamp: TimeInterval?\n\n      init(title: String,\n           itemDescription: String? = nil,\n           timestamp: TimeInterval? = nil) {\n\n        self.title = title\n        self.itemDescription = itemDescription\n        self.timestamp = timestamp\n      }\n    }\n    ```", "```swift\n    XCTAssertEqual(item.timestamp!,\n                   dummyTimestamp,\n                   accuracy: 0.000_001)\n    ```", "```swift\n// ToDoItemTests.swift\nfunc test_init_setsTimestamp() throws {\n  let dummyTimestamp: TimeInterval = 42.0\n  let item = ToDoItem(title: \"Dummy\",\n                      timestamp: dummyTimestamp)\n  let timestamp = try XCTUnwrap(item.timestamp)\n  XCTAssertEqual(timestamp,\n                 dummyTimestamp,\n                 accuracy: 0.000_001)\n} \n```", "```swift\n    // ToDoItemTests.swift\n    func test_init_whenGivenLocation_setsLocation() {\n      let dummyLocation = Location(name: \"Dummy Name\")\n    }\n    ```", "```swift\n    // Location.swift\n    struct Location {\n      let name: String\n    }\n    ```", "```swift\n    // ToDoItemTests.swift\n    func test_init_whenGivenLocation_setsLocation() {\n      let dummyLocation = Location(name: \"Dummy Name\")\n      let item = ToDoItem(title: \"Dummy Title\",\n                          location: dummyLocation)\n      XCTAssertEqual(item.location?.name,\n                     dummyLocation.name)\n    }\n    ```", "```swift\nXCTAssertEqual(item.location, dummyLocation)\n```", "```swift\n    // ToDoItem.swift\n    struct ToDoItem {\n      let title: String\n      let itemDescription: String?\n      let timestamp: TimeInterval?\n      let location: Location?\n\n      init(title: String,\n           itemDescription: String? = nil,\n           timestamp: TimeInterval? = nil,\n           location: Location? = nil) {\n\n        self.title = title\n        self.itemDescription = itemDescription\n        self.timestamp = timestamp\n        self.location = location\n      }\n    }\n    ```", "```swift\n    // LocationTests.swift\n    import XCTest\n    @testable import ToDo\n    import CoreLocation\n    ```", "```swift\n    // LocationTests.swift\n    func test_init_setsCoordinate() throws {\n      let coordinate = CLLocationCoordinate2D(latitude: 1,\n                                              longitude: 2)\n      let location = Location(name: \"\",\n                              coordinate: coordinate)\n      let resultCoordinate = try XCTUnwrap(location.coordinate)\n      XCTAssertEqual(resultCoordinate.latitude, 1,\n                     accuracy: 0.000_001)\n      XCTAssertEqual(resultCoordinate.longitude, 2,\n                     accuracy: 0.000_001)\n    }\n    ```", "```swift\n    // Location.swift\n    import Foundation\n    import CoreLocation\n\n    struct Location {\n      let name: String\n      let coordinate: CLLocationCoordinate2D?\n\n      init(name: String,\n           coordinate: CLLocationCoordinate2D? = nil) {\n\n        self.name = \"\"\n        self.coordinate = coordinate\n      }\n    }\n    ```", "```swift\n    // LocationTests.swift\n    func test_init_setsName() {\n      let location = Location(name: \"Dummy\")\n      XCTAssertEqual(location.name, \"Dummy\")\n    }\n    ```"]