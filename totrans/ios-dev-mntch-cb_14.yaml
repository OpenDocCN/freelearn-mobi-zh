- en: Chapter 14. Deploying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ad-hoc distribution bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing an app for the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting to the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of deploying apps to devices or the App Store is considered quite
    complicated. This, of course, is for the benefit of developers also, since various
    certificates and profiles are required to get the application bundle from the
    development Mac to a device.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will walk through all the required steps for preparing and
    installing the appropriate certificates on the development computer. We will also
    learn how to create the provisioning profiles that will allow us to deploy the
    application to a device, whether it is our own, or to send it to beta testers
    for installation on theirs.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will see how to prepare the application for App Store submission
    and the process for the final release to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Creating profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will go through a step-by-step guide to creating and installing
    the appropriate certificates and provisioning profiles that are required for deploying
    an application to the device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will guide you through creating your developer certificate
    and appropriate provisioning profiles for an application.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with the developer certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the iOS Developer website: [http://developer.apple.com/ios](http://developer.apple.com/ios).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the iOS Provisioning Portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Certificates** from the menu on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is the first time you are working with developer certificates on your
    Mac, download and install the **WWDR intermediate certificate**. You will find
    the link under the **Development** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **How To** tab, you will find the instructions for creating a Certificate
    Sign in Request, which is a requirement for issuing your developer certificate
    and how to download and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the developer certificate has been installed correctly, you will be able
    to select it in your project''s options in MonoDevelop, under the **iPhone Bundle
    Signing** node in the **Identity** drop-down list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can view your developer certificate under the **Development** tab in the
    **Certificates** option on the **iOS Provisioning Portal.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have issued and installed our developer certificate, we need to
    register the devices that we will be using for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Devices** option on the menu on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Manage** tab, click on the **Add Devices** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Device Name** field, enter a name that will allow you to identify the
    particular device (for example, `My iPhone)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Device ID** field, enter the device's **Unique Device Identifier**
    (UDID). You can find the device's UDID by connecting the device to your Mac and
    opening **iTunes**. Under the device's **Summary** tab, clicking on the serial
    number will switch to the UDID. Press *Command* + *C* to copy the UDID to the
    clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus (+) button and then **Submit**. Repeat all the steps for all
    the devices you want to add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need an **App ID.**
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **App IDs** option on the menu on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Manage** tab, enter a description/name for your application. Do
    not use special characters and spaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the **Bundle Seed ID (App ID Prefix)** option to **Generate New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a **Bundle Identifier**. The best practice for bundle identifier is to
    follow the example and recommendation given just above the field. The **Bundle
    Identifier** is important, as you will need it in at least one more step in the
    deployment process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button to create the App ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Almost there. Time for the provisioning profile.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Provisioning** option on the menu on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Development** tab, click the **New Profile** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a profile name. You can enter any character you want in this field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Certificate** option, select the developer certificate for the profile.
    If you have successfully created your developer certificate, your name (or the
    name of whom the iOS Developer account belongs to) will be displayed with a checkbox
    next to it. Tick the checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **App ID** option, select the **App ID** for the provisioning profile
    you are creating.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Devices** option, check on the device(s) that will be included in the
    provisioning profile. Your application can only be installed on the devices you
    select here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button to complete the creation of the profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the provisioning profile status is **Pending** in the list, just refresh
    the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Download button on the row of your profile to download it. A file
    with a .mobileprovision extension will be downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your device to your Mac. Close **iTunes** if it is open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click on the `.mobileprovision` file you downloaded in *step 9*. Xcode
    will open and install the provisioning profile on your device. You can check this
    by viewing the profile status in Xcode''s **Organizer** window. To display the
    **Organizer** window, press *Shift + Command + 2* , or select **Window | Organizer**
    from the menu. You can view the provisioning profiles for each device by selecting
    the **Provisioning** option on the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Provisioning profiles marked with the red **X** indicate that they are expired.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process described in this recipe will allow you to deploy and debug your
    application on a device connected to your Mac. It will not allow you to distribute
    your application to beta testers or to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: The Developer certificate is the certificate that allows the compilation of
    applications that will be deployed to devices. It is only meant for development,
    and one developer certificate corresponds to one iOS Developer Program enrollment.
    After creating and installing it on the development machine, you cannot issue
    a new one. An existing development certificate, however, can be transferred to
    other Macs.
  prefs: []
  type: TYPE_NORMAL
- en: Each provisioning profile holds information on what devices it can be installed
    on. An Apple Developer enrolled to the iOS Developer Program can add up to 100
    devices and include them in a provisioning profile.
  prefs: []
  type: TYPE_NORMAL
- en: The App ID is the identifier of your application. Create one App ID for each
    of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: The provisioning profile is the electronic signature that allows your application
    to be deployed on the device. Each provisioning profile corresponds to one application
    and holds all the appropriate permissions that will allow the application to execute
    on the device(s) included in it and the App ID information. It is also what distinguishes
    an application for development or distribution. Provisioning profiles are issued
    with an expiration time. At the time of writing, it is about one year.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To compile and debug an application on the device, select the developer certificate
    and provisioning profile in MonoDevelop, under the **iPhone Bundle Signing** node
    in **Project Options:**
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1468_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This has to be done for each build configuration **(Debug, Release**, and so
    on).
  prefs: []
  type: TYPE_NORMAL
- en: Under the **iPhone Application** node, set the **Display name, Bundle Identifier**,
    and **Bundle version** fields for your application. If you leave them blank, MonoDevelop
    will set their values to default. Specifically, the **Bundle Identifier** will
    be set to the one that is included in the App ID. However, if you set the **Bundle
    Identifier** to something other than what is declared in the App ID, an error
    on compilation will occur.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1468_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Provisioning profiles expiration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a provisioning profile expires, the application will no longer work on
    the device. You can either renew the existing profile or create a new one and
    install it on the device again.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ad-hoc distribution bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Development Tools"),'
  prefs: []
  type: TYPE_NORMAL
- en: '*Compiling*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ad-hoc distribution bundle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a bundle of our application, which
    we will be able to send to beta testers for them to test on their devices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create an ad-hoc distribution bundle, make sure you have created an App ID
    on the iOS Provisioning Portal for your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process of creating ad-hoc provisioning profiles is similar to the process
    of creating development distribution profiles. The following steps will guide
    you through the process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Distribution certificate:** For distributing applications to various devices
    that are not connected to your Mac, but also for submitting to the application
    store, you need a distribution certificate to be installed. Follow the same steps
    described in the previous task for creating a developer certificate. This time,
    though, you will have to work under the **Distribution** tab in the **Certificates**
    menu option in the **iOS Provisioning Portal**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ad-hoc distribution provisioning profile:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **iOS Provisioning Portal**, go to **Provisioning | Distribution**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Distribution Method** field, select **Ad Hoc**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter a **Profile Name** for the profile. It would be good to add the word `AdHoc`
    to the name for future reference, for example, `MyAppAdHoc`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Distribution Certificate** is automatically selected.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the **App ID**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the devices for the profile.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Submit** to create the profile.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the profile from the displayed list. Once more, you will get a .mobileprovision
    file. Double-click on it to allow Xcode to install it. A device does not need
    to be connected at this point. Do not delete the file; we will need it later.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create an ad-hoc build:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your project loaded in MonoDevelop, go to **Project | Solution Options**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under **Build | Configurations**, create a new configuration by clicking on
    **Add**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter a name for the configuration. The name used here is `MyAppDistribution`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **iPhone** in the **Platform** option. The following screenshot shows
    how the **New Configuration** dialog should look:![How to do it...](img/1468_14_05.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the Create configurations for all solution items option is checked.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **OK** button.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a new **Property List** file to the project, and name it `Entitlements`.![How
    to do it...](img/1468_14_06.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MonoDevelop will automatically load the `Entitlements.plist` file with the **Property
    List Editor**. Add the key `get-task-allow,` and set its **type** to **Boolean**.
    Set its value to **No**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the **iPhone Bundle Signing** node of the project options, select the
    configuration we created earlier (MyAppDistribution). Set the **Custom entitlements**
    field to the `Entitlements.plist` file, which was created in the previous steps.
    It can easily be found by clicking on the **browse ()** button next to the field.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the Distribution profile and the appropriate provisioning profile for ad-hoc
    distribution in the same window.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the project's current configuration to the distribution configuration created
    earlier (MyAppDistribution).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the project.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The application is now ready for ad-hoc distribution!
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Distributing to beta testers:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Finder**, and navigate to the `bin` folder of your project.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the `iPhone/MyAppDistribution` folder. Compress the application bundle
    with OS X's default compression tool by right-clicking and selecting **Compress
    "MyApp"** (or whatever the name of your application is). The application bundle
    is a folder displayed with the following icon:![How to do it...](img/1468_14_07.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Send the zipped application bundle along with the `.mobileprovision` file to
    your beta testers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To install the application, your application's beta testers have to extract
    the application bundle from the zip archive.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After extracting it, dragging-and-dropping it in **iTunes** in the **Apps**
    section, along with the `.mobileprovision` file, imports it in **iTunes Library**.
    Note that the application will be displayed in **iTunes** with a default icon.
    This is normal for ad-hoc distribution if you haven't set any icons for the application.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronize the device in **iTunes**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the beta testers are working with **iTunes** on a Windows machine, instruct
    them not to use the default decompression utility, but a third-party application.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For distributing applications, we need a distribution certificate. Just like
    the developer certificate, the distribution certificate is created once, but can
    be transferred to another Mac if needed.
  prefs: []
  type: TYPE_NORMAL
- en: The creation process of the ad-hoc distribution provisioning profile is the
    same as the process for creating development provisioning profiles. The only difference
    is that we have the option of the type of distribution, which is either *App Store*
    or *Ad Hoc*.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration we created is not a requirement, but it helps us organize
    the build process better. It also saves us from having to set the different provisioning
    profiles and settings for each build.
  prefs: []
  type: TYPE_NORMAL
- en: The `Entitlements.plist` file, along with the `get-task-allow` key, is for preventing
    the application from trying to find a debugger to connect to upon startup.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MonoDevelop provides an option for directly creating and zipping the application
    bundle. **Select Project | Zip App bundle..**. on the menu, and after selecting
    a location and filename for the output, it will compile and zip the application
    bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Syncing ad-hoc app bundles with iTunes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different users have different settings set up in their iTunes application.
    In case a user syncs the device and cannot find the application on the device,
    make sure the application is selected for syncing, under the **Apps** tab of the
    selected device in **iTunes**.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating profiles*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing an application for the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss the important steps we need to take for preparing
    an application for the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps in the previous recipes to create an App Store distribution
    profile for your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One very important step in the preparation for the App Store regards the images
    that should be included in your application.
  prefs: []
  type: TYPE_NORMAL
- en: '**App Icon:** This is the icon that will represent your application on the
    users'' devices. For iPhone and iPod Touch, prepare an icon with dimensions of
    `57x57` pixels for the lower-resolution screens and an icon with dimensions of
    `114x114` pixels for the higher-resolution screens (for example, iPhone 4 and
    newer). For the iPad, the icon size should be `72x72` pixels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the icon files with the PNG format. You can name them whatever you want,
    but it is a good practice to keep a consistent naming scheme, for example, `Icon-57.png,
    Icon-114.png`, and so on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the image files to the project. Open the project options dialog and go to
    the **iPhone Icons** section of the **iPhone Application** node, under the **Summary**
    tab, as shown in the following screenshot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468_14_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the appropriate button to find the icon file and assign it. Note that
    the image selection dialog that will open only looks in files included in your
    project. So, make sure to add your images to the project first. There is no need
    to set their **Build Action** to **Content**. Click on the **OK** button to save
    the changes to the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Launch image:** The launch image is the first thing that is displayed when
    an application starts. Prepare a launch image in at least two dimensions for iPhone
    and iPod Touch applications: `320x480` pixels for the lower version and `640x960`
    pixels for the higher version. Name the files `Default.png` and `Default@2x.png`
    respectively, and add them to the project. Set their **Build Action** to **Content**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your application is universal and, therefore, downloadable by iPad users,
    or it is an iPad-only application, then you should provide launch images for each
    of the application's supported orientations. The sizes should be 768x1004 pixels
    for the portrait versions and 1024x748 for the landscape versions. For an application
    that supports portrait and landscape-right orientations, the filenames should
    be Default-Portrait.png and Default-LandscapeRight.png, respectively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Final Settings:** Last but not least, fill the appropriate application information
    in the **Summary** tab of the **iPhone Application** node in the **project** options,
    as described in the *Creating Profiles* recipe in the beginning of this chapter.
    Build the project and compress the application bundle. Your application is ready
    for submission!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The applications icons are very important. It is what the user will see on the
    device screen and tap to start your application. Although all application icons
    appear as buttons with rounded corners and a lighting effect, you should not include
    these graphical features in your icons. These graphical features are automatically
    rendered upon application submission to the application store. The icons should
    be perfect squares. Also, always provide a background for the icons. Do not use
    transparencies, because any transparencies on the icon will be displayed with
    the black color, potentially destroying your intended icon appearance.
  prefs: []
  type: TYPE_NORMAL
- en: The launch image is displayed first when the application starts. When a screen
    goes blank at startup, it means that there is no launch image. According to Apple's
    *iOS Human Interface Guidelines* ([http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/Introduction/Introduction.html](http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/Introduction/Introduction.html)
    ), this image should be the first screen that is loaded when the application completes
    the launch process and is ready to accept input. It should only contain the static
    content of the first screen and not content that is likely to change, such as
    localized text. For example, the following screenshot illustrates the launch image
    of the g-force measurement app, GBox.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1468_14_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following screenshot shows the application after it is fully loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1468_14_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The launch image is there to provide a sense of responsiveness to the user while
    the application loads, avoiding blank screens. Although the *iOS Human Interface
    Guidelines* are what the name suggests, guidelines, it is a good practice to follow
    them. Apple suggests avoiding the usage of the launch image for splash screens,
    "about" information and branding.
  prefs: []
  type: TYPE_NORMAL
- en: Lighting effect on icons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we would like to provide our own lighting effect for the icon, or even not
    allow the default iOS one to be displayed, we can add the `UIPrerenderedIcon`
    key to the `Info.plist` file with its **type** set to **Boolean** and enable it.
    This setting prevents the shine effect from being created when the application
    icon is displayed on the device's home screen.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating profiles*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting to the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will go through the required steps to submit an application
    to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this task, you will have to have your zipped distribution application bundle
    ready.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps below for submitting your application to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: '**Screenshots:** Prepare screenshots that display various aspects of your application.
    For iPhone/iPod Touch apps, the dimensions should be `320x480` for portrait and
    `480x320` for landscape. For iPad applications the dimensions of the screenshots
    should be `768x1024` for portrait and `1024x768` for landscape. If the application
    does not hide the status bar, it would be better if it was included in the screenshots.
    For each application, we can have up to five screenshots on the App Store.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**App Store icon:** Prepare the icon that will represent the application on
    the App Store. Its dimensions must be `512x512` pixels, and it must be the same
    as the application icon.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Description and keywords:** Prepare the text that describes your application.
    Try to include the most significant features. Remember, the description is what
    users will read before downloading the application, so the more appealing it is,
    the better.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare keywords that will help your application climb on top of the search
    results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Both application description and keywords are required.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Log in to iTunes Connect:** iTunes Connect is the developer portal for managing
    and submitting applications (among other App Store related stuff). Log in to iTunes
    Connect ([http://itunesconnect.apple.com](http://itunesconnect.apple.com) ) with
    your Apple Developer ID. Click on the link **Manage your Applications**. Then,
    click on the **Add New App** button on the top-left. Follow the steps to complete
    the application preparation on the portal. When you finish, make sure the application
    status is **Waiting for Upload**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Uploading:** After you have created a new application on the portal, you
    can upload the zipped application bundle with the **Application Loader**. It is
    installed by default with Xcode, and it can be found under the path `/Developer/Application/Utilities`,
    or by searching through the **Spotlight**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you start **Application Loader**, it will ask you to log in with your
    **Apple Developer ID**. After logging in, you will be presented with the following
    window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468_14_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on the **Deliver Your App** button, and it will connect to **iTunes Connect**,
    and find the applications you have in the **Waiting for Upload** status, and load
    them in the list box:![How to do it...](img/1468_14_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will then be presented with a summary view of your application:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468_14_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click the **Choose..**. button, and a dialog will appear that will allow you
    to select the zipped application bundle. After selecting it, proceed with the
    upload. You are all set! If all steps have been completed correctly, the application
    will be uploaded, and it will be under review for release on the App Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Application screenshots and the App Store icon are very important. They can
    be in any of the `JPG, TIF`, or `PNG` formats, in RGB color, and at a resolution
    of at least 72 DPI.
  prefs: []
  type: TYPE_NORMAL
- en: But the images are important only when users are already viewing your application
    in the App Store. The keywords and the description are the parameters that will
    allow your application to come up higher on search results and make the user decide
    whether the application is worth the download. Especially regarding the keywords,
    choose them wisely. Do not include as many as you can; fewer keywords that reflect
    the key aspects of the application are always better.
  prefs: []
  type: TYPE_NORMAL
- en: iTunes Connect is the developer portal for managing applications, reviewing
    financial data, application downloads, and includes the contracts and agreements
    a developer needs to sign. Make sure you read and accept the contracts, or else
    you will not be able to proceed with the application preparation process. During
    that process, you are required to provide the necessary information for your application
    that is described previously and also the price range if it is a paid application,
    the countries in which it will be available, as well as the release date for it,
    if you do not want it to be released automatically as soon as it has passed through
    the App Store review process.
  prefs: []
  type: TYPE_NORMAL
- en: When everything is set up correctly and the application's status is **Waiting
    for Upload**, you can then run the **Application Loader** to upload it. Periodically
    and with each release of iOS and iOS SDK versions, various components or procedures
    change. Always make sure your iOS SDK version is up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At some point in the application preparation process, you will be required to
    enter a **Stock Keeping Unit** (SKU) number. This number is a unique identifier
    for each product or service. It can be any number you want, but keep a specific
    pattern to keep track of the identifiers, for example, when you develop additional
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Preparing an app for the App Store*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
