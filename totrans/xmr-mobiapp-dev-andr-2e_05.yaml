- en: Chapter 5. Adding a Details View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will walk you through the process of creating a new activity
    to display the details of the selected POI. This activity also allows the user
    to create, update, and delete POIs from the server. The following topics will
    be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the layout and activity for displaying POI details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `LinearLayout`, `TableLayout`, and `ScrollView` to lay out the activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data between the activities using Intent bundles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming web services to perform the HTTP `POST` and `DELETE` operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing the `EditText` validation using the `EditText.Error` property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying confirmation prompts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the POIDetail layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have built the `POIApp` to display the list of POIs fetched from
    the server. Currently, the list view displays limited information about POIs such
    as name, address, image, and distance. Let's now extend the `POIApp` by adding
    another activity that displays detailed information of the selected POI. The POI
    details activity will be revealed only when the user taps on any of the POI item
    from the list or when the user selects the **New** (**+**) action from the navigation
    bar. Additionally, the details activity will allow the user to create a new POI,
    update, or delete the existing POI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping all the preceding use cases in mind, let''s create a new layout for
    POI details:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Resources/layout` folder in the **Solution** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Add** and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New File** dialog box, click on **Android** and select **Layout**,
    enter POI detail in the **Name** field, and select **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that a new file is created with `LinearLayout` as the top-level container.
    The `POIDetail` view will have a number of fields and will likely require scrolling
    on devices with a smaller screen size. The default Android layout managers, such
    as `LinearLayout`, `RelativeLayout`, `FrameLayout`, or `TableLayout`, do not provide
    automatic scrolling when the content grows and the data goes beyond its actual
    screen size.
  prefs: []
  type: TYPE_NORMAL
- en: In our previous chapter, for displaying the POI list, the layout gave us scrolling
    for free because we were using `ListView`; however, in the case of the POI detail
    activity, we need to use `ScrollView` for making the items scrollable.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ScrollView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ScrollView` is a special kind of layout designed to hold a view larger than
    its actual size. When the child''s Views size grows beyond the `ScrollView` size,
    it automatically adds the scroll bar and can scroll vertically. The following
    are some of the key things you must to know before using ScrollView:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ScrollView` can hold at most one direct child. This means that if you have
    a complex layout with multiple children, then you must enclose them inside another
    standard layout, such as LinearLayout, TableLayout, or RelativeLayout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like any other standard layout manager, the `layout_height` and `layout_width`
    attributes can be used to adjust the height and width of `ScrollView`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ScrollView` is ideal for screens where scrolling is required, but it is an
    overhead when scroll view is used to render a larger collection of data. For such
    instances, you should consider using specialized adapter views, such as `ListView`
    and `GridView`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Never place a `ListView` or `GridView` inside `ScrollView` because they both
    take care of their own vertical scrolling. By doing so, the `ListView` child will
    never receive gestures because it will be handled by the parent `ScrollView`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ScrollView` only supports vertical scrolling. For horizontal scrolling, you
    can use `HorizontalScrollView`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `android:fillViewport` property defines whether the `ScrollView` should
    stretch its content to fill the viewport. You can set the same property by calling
    the `setFillViewport(true)` method on `ScrollView`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we understand `ScrollView`, let''s jump back to the `POIDetail` layout
    and add a `ScrollView` to support vertical scrolling of content for devices of
    smaller screen size:'
  prefs: []
  type: TYPE_NORMAL
- en: With the `POIDetail.xaml` file opened in the `Content` view, select the top-level
    `LinearLayout` and press the *Delete* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Toolbox** pad, locate the **ScrollView** widget and drag it onto the
    Content view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Toolbox** pad, locate the **LinearLayout** (vertical) widget and drag
    it onto the Content view inside `ScrollView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `LinearLayout` selected, set **Padding** in the Layout section of the **Properties**
    pad to `5dp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are now ready to add labels and edit controls to the layout. The following
    screenshot depicts the layout we are trying to achieve:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/PIsRjcV4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will use simple `TextView` widgets to serve as labels and `EditText` widgets
    to serve as input controls. The `EditText` widget contains a number of properties
    that can be used to customize its behavior. One of these properties is named `InputType`,
    and it controls aspects such as which type of keyboard to use for inputs (alpha,
    numeric, and so on) and how many lines of text are allowed. The **Toolbox** pad
    presents a number of templates or preconfigured `EditText` widgets in the list
    under the group name **Text Fields**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/FJbX9Qgz.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a series of `TextView` and `EditText` controls to the **Name**, **Description**,
    and **Address** fields. Name the `EditText` widgets according to the following
    table and use the corresponding Toolbox widget so that the appropriate editing
    characteristics are applied:'
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs: []
  type: TYPE_NORMAL
- en: Widget toolbox name
  prefs: []
  type: TYPE_NORMAL
- en: '`nameEditText`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plain Text**'
  prefs: []
  type: TYPE_NORMAL
- en: '`descrEditText`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multiline Text**'
  prefs: []
  type: TYPE_NORMAL
- en: '`addrEditText`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multiline Text**'
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to address the **Latitude** and **Longitude** fields, and we
    will employ a new layout manager, `TableLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the TableLayout manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `TableLayout` manager is an extension of `LinearLayout`. As the name indicates,
    `TableLayout` is used to align a child's View elements in rows and columns format.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of `TableLayout` works something similar to an HTML table. `TableLayout`
    consists of the `&lt;table&gt;` tag and `TableRow` is like a `&lt;tr&gt;` element.
    You can add any view or view group inside a table cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'We would like to add the **Latitude** and **Longitude** fields in a table.
    Let''s add a `TableLayout` with two rows and two columns with the top row being
    used for the labels and the bottom row being used for the edit fields. In order
    to do so, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate `TableLayout` in the **Toolbox** pad, drag it onto the Content view below
    the `addrEditText` widget and drop it. A `TableLayout` will be created with three
    rows and three columns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select one of the rows in `TableLayout`, right-click on it and select **Delete
    Row**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select one of the columns in the `TableLayout`, right-click on it and select
    **Delete Column**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the first column, right-click on and select **Stretch Column**. Similarly,
    do it for the second column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now have a `TableLayout` with a visible outline of two rows, each
    having two columns like what is depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/hGGSLbu3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We now need to add the `TextView` widgets for the two labels in the first row
    and number (decimal) widgets for the **Latitude** and **Longitude** edit controls,
    naming them `latEditText` and `longEditText`.
  prefs: []
  type: TYPE_NORMAL
- en: We have now completed the `POIDetail` layout, and the Content view you see should
    look the same as the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Working with EditText's InputType
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `EditText` element provides a property named `InputType` that checks the
    behavior of the control when data is being entered. When the description and address
    widgets were added, we selected **Multiline Text** from the **Toolbox** pad. The
    following code shows that in this case the `inputType` was automatically set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `InputType` property can also be set or changed from within the **Properties**
    pad under the **Widget** tab in the **Input Format** section. What may not be
    obvious is that `inputType` can combine values, which come in handy in our situation.
    The following table shows a reasonable set of values for `inputType`; feel free
    to experiment:'
  prefs: []
  type: TYPE_NORMAL
- en: Widget
  prefs: []
  type: TYPE_NORMAL
- en: Input type
  prefs: []
  type: TYPE_NORMAL
- en: '`nameEditText`'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputType="textCapWords"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`descrEditText`'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputType="textMultiLine|textCapSentences"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`addrEditText`'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputType="textMultiLine"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`latEditText`'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputType="numberDecimal|numberSigned"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`longEditText`'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputType="numberDecimal|numberSigned"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the Code view to see what has been added to the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating POIDetailActivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have the `POIDetail` layout ready, we need a corresponding activity.
    Perform the following steps to create a new activity for the POI details:'
  prefs: []
  type: TYPE_NORMAL
- en: With the `POIApp` project selected in the **Solution** pad, right-click on it
    and navigate to **Add** | **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New File** dialog, click on **Android** and select **Activity**, enter
    `POIDetailActivity` as **Name**, and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you may recall from Chapter 3, *Creating the Points Of Interest App*, one
    of the first things that needs to be done when an activity is created is to set
    the layout content, which is accomplished by calling `SetContentView(layoutId)`.
    Add the following line of code to the `OnCreate()` method of the `POIDetailActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Adding navigation to POIDetailActivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two scenarios where we need to navigate from `POIListActivity` to
    `POIDetailActivity`, either by selecting the **New** action on the navigation
    bar or by selecting any of the POIs from the list. The main difference between
    the two scenarios is that when selecting an existing POI from the list, we will
    have to pass the details of the selected POI to the `POIDetailActivity` so that
    the user can edit and update the POI record. When creating a new POI, we don't
    pass any data. Let's first choose the simplest one, and add the navigation to
    the **New** action.
  prefs: []
  type: TYPE_NORMAL
- en: The `Activity` class provides a method named `StartActivity()` that is used
    to start a new activity. The `StartActivity()` method can also be used in a number
    of different scenarios. In case of the **New** action, we will be using it in
    its most basic form. For starting an activity, all that we need to do is to invoke
    `StartActivity()` by passing the type for the activity we want to start.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet demonstrates the code that needs to be added to
    the placeholder that we added to `POIListActivity` in the `OnOptionsItemSelected()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now run the app on the Android device or simulator and see what we have
    built so far. In `POIListActivity`, click on the **New** button on the navigation
    bar, and notice that the newly created `POIDetailActivity` is opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/LSCs9ILv.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Navigation on the POIList item click
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the second scenario, we need to pass the details of the POI to display `POIDetailActivity`.
    To accomplish this, we will use the `Intent` class. The `Intent` class can be
    used in conjunction with `StartActivity()` in order to launch a new activity and
    pass information about the activity to be launched. We will use the `Intent` class
    to launch `POIDetailActivity` and pass the details of the selected POI.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to construct an instance of `Intent` by providing the current
    activity context and the type of target activity that will receive the intent;
    in our case, `POIDetailActivity`. The following code demonstrates how to properly
    construct the intent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Intent` object has an `Extras` property that is used to send extra data
    as a bundle from one activity to another. The `Intent` class provides a series
    of overloaded versions of the `PutExtra()` method, which allows you to add various
    types of **key/value** pairs to the `Extras` property. The values can be of any
    primitive types such as `int`, `boolean`, `char`, `string`, `double`, `float`,
    `long`, and so on. For example, to add the string data type, you can use the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For `POIApp`, we need to add all of the properties of the selected `PointOfInterest`
    object. Instead of passing each property with a distinct key, we can further simplify
    this process using the **Json.NET** component. It serializes the `PointOfInterest`
    .NET object into a JSON string that can be passed to `POIDetailActivity` with
    the distinct key `poi`, and at the receiver end, we will deserialize it back to
    the `PointOfInterest` object.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from using the `Intent` bundle, there are various other options to pass
    data between activities. For complex objects, serializing using the Json.NET component
    and passing data bundles using Internet is not a recommended option. The size
    limit for the Android intent bundle is limited to somewhere around 1 MB, so you
    should always be cautioned about your data limits. You may consider using any
    of the other alternatives for better performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of my recommendations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Write the data to a file and pass only the file path to the second activity.
    The second activity can access the content using the same file path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use SQLite to store the object in a table. Pass only the unique ID or query
    a parameter to the second activity. The second activity can access the data by
    reading from the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a singleton class to hold the data. The second activity can directly
    access the data using a singleton instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, the POI object is tiny. We are happy to go with the `Intent` bundle
    approach. The following code syntax converts the selected `PointOfInterest` object
    to a JSON string using the `SerializeObject()` method of the `JsonConvert` class
    and adds it to `Intent` using the `PutExtra()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is a call to `StartActivity()`, passing in the `Intent` class
    we created in the earlier step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, your POIListActivity `OnListItemClick` should have the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have passed the data from `POIListActivity`, let's now access the
    POI object from the `POIDetailActivity` class.
  prefs: []
  type: TYPE_NORMAL
- en: Receiving the data in POIDetailActivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we get to the `OnCreate()` method of the `POIDetailActivity`, we need to
    access the `PointOfInterest` object sent from `POIListActivity`. This object will
    be used to display the details of the selected POI. The following section will
    walk you through the process of retrieving the extra bundle metadata from `Intent`.
  prefs: []
  type: TYPE_NORMAL
- en: Each activity has an `Intent` property that contains the intent and the corresponding
    information that was passed while starting the activity. The `Intent` class provides
    a number of methods to access any of the `Extras` bundle data by providing the
    corresponding keys. Before we retrieve the data, we can confirm whether the value
    for the specified key is available by calling the `HasExtra ("poi")` method. The
    `HasExtra` method returns a `boolean` value; if it returns `false`, we can assume
    that we are creating a new POI; otherwise, we need to retrieve the value of the
    extra.
  prefs: []
  type: TYPE_NORMAL
- en: The `Intent` class has a series of `GetXXExtra()` methods, where `XX` represents
    the type for the value of a key/value pair. In our case, we can use the `GetStringExtra()`
    method on the intent to get the `poiJson` string passed in from `POIListActivity`.
    The `GetStringExtra()` method accepts a string (which is the key from the key/value
    pair originally set on the intent) and returns the value associated with the key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s declare a `PointOfIntrest` variable to hold the POI object received
    from `POIListActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following listing to the `OnCreate()` method of `POIDetailActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Binding variables to controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we learned in the previous chapter, we need to manually bind user interface
    widgets to internal program references in order to manipulate their content, assign
    event handlers, and so on. Declare a set of private variables for each of the
    input widgets we created in the layout. The following listing is from the source
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A call to `FindViewById&lt;T&gt;` is required to bind each variable to its
    corresponding user interface widget. The following listing depicts what should
    be added to the `OnCreate()` method somewhere after the call to `SetContentView()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Populating user interface widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we have a reference to the `PointOfInterest` object, but we have
    not taken any action to populate the content on UI. Populating the POI details
    on UI is a pretty straightforward process.
  prefs: []
  type: TYPE_NORMAL
- en: The `EditText` widget has a property named `Text`, which we can set to initialize
    the content for the widget. Let's create a simple method named `UpdateUI()`, which
    takes care of populating the POI details on the user interface widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following listing shows what is needed for `UpdateUI()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Call the `UpdateUI()` method at the end of the `OnCreate()` callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to run `POIApp` now, and test the navigation by clicking
    on any one of the list rows in `POIListActivity`. Notice that the `POIDetailActivity`
    will display the details of the selected POI object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/V733e2Kh.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the save and delete actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using `POIDetailActivity`, users can choose to save or delete POIs. The same
    Save button works for two scenarios: when the POI details are passed from `POIListActivity`,
    it will update the POI details; otherwise, it will create a new record.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need a way to accomplish these tasks from the user interface. Let''s use
    `ActionBar` and add two actions: `Save` and `Delete`. Create a new file named
    `POIDetailMenu.xml` under the `Resources/menu` directory to declare the menu layout.
    The following listing shows what is needed for `POIDetailMenu.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that each menu item has an icon specified. These icons can be found in
    the code bundle `Assets` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to override both the `OnCreateOptionsMenu()` and `OnOptionsItemSelected()`
    methods. This is very similar to what we created in Chapter 4, *Adding a ListView*.
    Add the following code snippets to the `POIDetailActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You may notice that, in the previous code snippets, we introduced two new methods:
    `SavePOI()` and `DeletePOI()`. Both of these methods are used to keep the `OnOptionsItemSelected()`
    method clean and concise. The `SavePOI()` and `DeletePOI()` methods encapsulate
    the logic required to save or delete the POI object.'
  prefs: []
  type: TYPE_NORMAL
- en: Disabling the delete action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One thing that's different in `POIDetailView` is that we have a scenario where
    we need to disable the `Delete` action. If a new POI is being created, the `Delete`
    action should not be allowed. First, we need to get the reference of the menu
    item inside the `OnPrepareOptionsMenu()` method, and then we can call the `SetEnabled(bool)`
    method by passing your preference to enable or disable the menu action.
  prefs: []
  type: TYPE_NORMAL
- en: The `IMenu` class provides a `FindItem()` method that can be used to obtain
    a reference to a specific IMenuItem, which in turn provides the `SetEnabled()`
    method for enabling and disabling actions. Disabling a menu item makes the button
    nonfunctional; however, it will still be visible on the screen. For better user
    experience, let's hide the `Delete` action completely by calling the `SetVisible(false)`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following listing shows how to disable the `Delete` action when a new POI
    is being entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Adding the save and delete actions in POIService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 4, *Adding a ListView*, we created the specialized `POIService` class
    that handles the logic for downloading data using the `async` and `await` keywords
    in conjunction with `HttpClient`. For now, the `POIService` class has only one
    method `GetPoisListAsync()`, that deals with fetching the list of records from
    the REST web service. Let's extend its functionality to create a new or update
    and delete a POI. Let's first start with creating a POI.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the web service to create or update a POI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, we have already deployed the web service provided in the book
    code bundle, and `POIApp` is already consuming the same web services to fetch
    the list of POIs. In this section, we will use the same web service to create
    a new or update an existing POI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following API specification is used to create a new or update an existing
    POI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice some of the key points in the preceding API specification: the request
    method is `POST`, Content-type is `application/json`, and the POI JSON object
    is sent as part of the request body. The `POST` method is an indication for the
    server application to lookup for the attached request content body, and the Content-Type
    describes the MIME type of the data the server is about to receive. In this case,
    the content type is `application/json`, which means that the server is expecting
    the POI details to be sent in the form of a JSON string.'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new POI, we need to send the POI details such as name, description,
    latitude, longitude, and address while creating a new POI record. Once the POI
    is created, a unique ID will be created and assigned for each POI record. To update
    the existing POI record, we must send the POI ID along with the updated POI details
    as part of the request body.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the CreateOrUpdatePOIAsync method to POIService
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we understand that the details of the web service can be used to create
    or update a POI record, let''s create a new `async` method named `CreateOrUpdatePOIAsync()`
    in the `POIService` class, and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `async` method `CreateOrUpdatePOIAsync()` that accepts the `PointOfInterest`
    instance. This holds the details of the POI that you need to send to the server
    in order to create or update the operation. This method returns `Task&lt;String&gt;`
    because the result of the create/update request is returned as a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a string constant that represents the web service endpoint in order
    to create a new or update an existing POI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, you can use the following Apiary mock API URL, if you have not
    set up the web server code already:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you might have noticed in the web service API specification, the server
    expects the POI details in a JSON string format. Hence, we need to serialize the
    POI object to a JSON using the Json.NET component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code will convert the POI object to the following JSON format:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding JSON string contains the uppercase keys, such as `Name`, `Address`,
    which are incompatible for a given web service API specification. For this, we
    can use the `ContractResolver` class from Json.NET to provide custom settings
    while serializing the POI object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Declare an inner class named `POIContractResolver` inside `POIService` and
    extend it from `DefaultContractResolver`. Override the `ResolvePropertyName` method.
    You need to include the `Newtonsoft.Json.Serialization` namespace directive in
    the `POIService` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code snippet is self-explanatory. It resolves all the `PointOfInterest`
    object properties to lowercase JSON keys.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we can use the following code snippet to serialize the POI object into
    a JSON string with lowercase keys. Add the following listing to the `CreateOrUpdatePOIAsync`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let us now asynchronously send the POI details JSON data using `HttpClient`
    class. The `HttpClient` class provides `PostAsync()` method that is used to sends
    a POST request to the specified URI as an asynchronous operation. The following
    code snippet demonstrates posting data to the server using the `HttpClient` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code block looks familiar to the `GetPoisListAsync` method but
    with some obvious differences. Here, we are calling `PostAsync` instead of the
    `GetAsync` method to send an asynchronous POST request. The `PostAsync` method
    accepts two parameters: a string representing a web service URL and an instance
    of `HttpContent` for the HTTP entity body. The `PostAsync` method accepts the
    different HTTP entity body formats such as `ByteArrayContent`, `MultipartContent`,
    `StreamContent`, and `StringContent`, representing the request body and content
    header. Here, in our case, we are sending the POI JSON as `StringContent`.'
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the `CreateOrUpdatePOIAsync()` method prints the result of this operation
    on the console. Later in this chapter, we will see how to use the `CreateOrUpdatePOIAsync
    ()` method from `POIDetailActivity` to complete the save operation.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the web service to delete the POI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete the POI from the server, the client needs to send the information
    about the POI to be deleted. As all the POI records are uniquely assigned with
    a unique ID property, we just need to pass the ID of the POI to be deleted. Let''s
    understand the following API specification used to delete the POI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding API specification, the request method is `DELETE` and the
    web service requires the POI ID to be passed to the end of the URL for the server
    to know which POI to be deleted. As we are not sending any data to the request
    body, we don't need to specify the `Content-Type` request header. The result of
    the operation is that this API responds back with a `Success` or `Failure` plain
    text message.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the DeletePOIAsync method to POIService
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consuming the web service to delete a POI is similar to the `GetPoisListAsync()`
    method implementation. The following steps will help you create a new `async`
    method and consume the web service to delete the POI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `async` method `DeletePOIAsync()` that accepts an integer value
    `poiId` that represents a unique `PointOfInterest` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a string constant that represents the URL to web service API for the
    delete action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that the `DELETE_POI` string expects the `poiId` parameter to end of
    the URL. This is the ID of the POI to be deleted from the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Alternatively, you can use the following Apiary test URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s now proceed to create an instance of `HttpClient` and to delete the
    POI from the server. Add the following code snippets to the `DeletePOIAsync()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, the `DeleteAsync()` method sends a delete request
    asynchronously to the specified **Uniform Resource Identifier** (**URI**), and
    the result of this operation is printed on the console.
  prefs: []
  type: TYPE_NORMAL
- en: Creating SavePOI()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Notice that in the previous step, in the *Adding Save and Delete action* section,
    we are calling the `SavePOI()` and `DeletePOI()` actions from the `OnOptionsItemSelected()`
    method, but we haven't declared them at all. These two methods will deal with
    consuming web services to create, update, and delete the POI. The following sections
    will take you through both the `SavePOI()` and `DeletePOI()` actions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now declare a new method `SavePOI()` in the `POIDetailActivity` class.
    The `SavePOI()` method could avoid placing a lot of logic in the `OnOptionsItemSelected()`
    method. This method will validate the user input and initiate the server request
    to create or update the POI.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the field validation in an upcoming section and now focus on
    getting the user data from the screen and initiate a create/update request. The
    following listing shows what should be present in `SavePOI()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are calling a new method, that is, `CreateOrUpdatePOIAsync()`
    from `SavePOI()`. We need to add the `CreateOrUpdatePOIAsync()` to `POIDetailActivity`.
    It is an `async` method, which will take care of initializing the `POIService`
    class and initiating the web service request to save the POI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet listing shows what should be present in the `CreateOrUpdatePOIAsync()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the preceding method does the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: First, it creates an instance of the `POIService` class and confirms the network
    availability by calling the `isConnected()` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a device is not connected to the Internet, it shows an appropriate `Toast`
    message to the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the network is available, it calls the `CreateOrUpdatePOIAsync()` method,
    which is defined in the `POIService` class. The web service request can be a long-running
    blocking operation, and hence, we are using **async await** to make the request
    asynchronous.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A toast message is displayed to notify the user about the result of the save/update
    operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the save request is successful, it displays a toast message and calls the
    activity `Finish()` method. The `Finish()` method causes the `POIDetailActivity`
    activity to be closed, and the previous activity on the stack will be brought
    back to the foreground; in our case, `POIListActivity`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating DeletePOI()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like `SavePOI()`, the `DeletePOI()` method was created to simplify the logic
    in `OnOptionsItemSelected()`. Before deleting the POI, we must ask the user to
    reconfirm by showing a dialog. Later in this chapter, we will show you how to
    display a confirmation prompt before initiating the deleted request.
  prefs: []
  type: TYPE_NORMAL
- en: We created the `CreateOrUpdatePOIAsync()` method in `POIDetailActivity`, let's
    now add another new method named `DeletePOIAsync()`. This method performs pretty
    much the same task as the `CreateOrUpdatePOIAsync()` method does in `POIDetailActivity`.
    It checks for the Internet connection availability, initiates the delete operation
    asynchronously, and finally, notifies the user with a toast message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `DeletePOIAsync` method to your `POIDetailActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following listing shows what should be present in the `DeletePOI()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now build and run the app. You should now be able to perform the add,
    update, and delete operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/JAsfJjf8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're using the Apiary mock feed URL for the save and delete operation,
    no POI will be deleted or saved. Apiary is just used for testing purpose only.
    You must deploy the web service code bundle provided in this book for the `Save`
    and `Delete` action to take effect on the server data.
  prefs: []
  type: TYPE_NORMAL
- en: Adding validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any nontrivial app will have some level of the validation required. The `POIApp`
    app is somewhat trivial, but we have a small set of rules we need to enforce that
    will facilitate the discussion:'
  prefs: []
  type: TYPE_NORMAL
- en: Property
  prefs: []
  type: TYPE_NORMAL
- en: Rule
  prefs: []
  type: TYPE_NORMAL
- en: '`Name`'
  prefs: []
  type: TYPE_NORMAL
- en: This cannot be empty or null
  prefs: []
  type: TYPE_NORMAL
- en: '`Latitude`'
  prefs: []
  type: TYPE_NORMAL
- en: This contains a valid decimal number between `-90` and `90`
  prefs: []
  type: TYPE_NORMAL
- en: '`Longitude`'
  prefs: []
  type: TYPE_NORMAL
- en: This contains a valid decimal number between `-180` and `180`
  prefs: []
  type: TYPE_NORMAL
- en: Using the EditText.Error property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `EditText` widget has a string property named `Error`, which simplifies
    the effort of displaying errors to the user, particularly if you want to be able
    to show all the fields with errors at once. The following screenshot displays
    the error received for leaving the **Name** field empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/TAoykf1S.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To use this facility, simply set the property to an error message and clear
    the property when no errors exist. The following example demonstrates implementing
    the rule for the **Name** property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Notice the local Boolean variable named `errors`, which is used to keep track
    of whether any errors have been found. Edits for **Latitude** and **Longitude**
    are a little more involved, as you need to account for converting text to a `double`
    value and allow a `null` value to be specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code demonstrates one of the approaches to implement the edits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Implement the rules identified at the start of this section in the `SavePOI()`
    method using the `EditText.Error` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can update and save the POI properties only if all of the edits are passed.
    The following listing shows one of the ways to structure the logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Run `POIApp` and confirm that the validations are working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a delete confirmation prompt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's a best practice for apps to provide a confirmation before performing any
    type of destructive update, particularly if it cannot be undone. As such we need
    to provide a confirmation for the `Delete` action. Fortunately, Android makes
    this relatively easy with the `AlertDialog` and `AlertDialog.Builder` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AlertDialog` class allows you to display a modal confirmation dialog.
    The `AlertDialog.Builder` class is an embedded class that helps you construct
    an instance of an `AlertDialog` method; you can think of it as a factory class.
    The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an instance of `AlertDialog.Builder`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set various properties on the builder instance, such as the message, the button
    text, the calling of event handlers when a button is clicked, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `Show()` on the instance of `AlertDialog.Builder` to create and display
    an instance of `AlertDialog`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our case, we want an `AlertDialog` class with a simple message and an **OK**
    and **Cancel** button. When we click on **Cancel**, we simply need to close the
    dialog and do nothing. When the user selects **OK**, we need to initiate the delete
    POI operation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create an event handler that will be called when you click on the **OK** button.
    This method will now call `DeletePOIAsync()` to perform the delete operation.
    The following listing depicts these changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the logic that constructs the `AlertDialog` class into the existing `DeletePOI()`
    method. The following listing depicts this logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `SetPositiveButton()` and `SetNegativeButton()` methods allow button captions
    and event handlers to be specified. In the case of the *negative* button **Cancel**,
    we provide an empty event handler because there is nothing to do; Android will
    take care of closing the dialog. `AlertDialog` also provides a *neutral* button.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On devices prior to Honeycomb, the button order (left to right) was *positive*
    - *neutral* - *negative*. On newer devices, using the Holo theme, the button order
    (left to right) is *negative* - *neutral* - *positive*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `POIApp` and verify that the delete confirmation is working correctly.
    The following screenshot shows the delete confirmation dialog when the user clicks
    on the delete action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/vkmgTyjW.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Refreshing POIListActivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Actions we take on `POIDetailActivity`, such as `Save` and `Delete`, have an
    effect on the data displayed in `POIListActivity`. We need to ensure that `ListView`
    in `POIListActivity` is refreshed and displays the updated POI list when it becomes
    active again. To achieve this, we have to depend on the activity life cycle callback
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: As you may recall from Chapter 1, *The Anatomy of an Android App*, when an activity
    is moved to the background due to the start of a new activity, the `OnPause()`
    method is called. This would have happened for `POIListActivity` when `POIDetailActivity`
    was started. Once `POIDetailActivity` is completed by either calling the `Finish()`
    method or by pressing the device back button, the `POIListActivity` will be brought
    back to the foreground and the `OnResume()` method will be called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s remove the call to `DownloadPoisListAsync()` in the `OnCreate()` method
    and add the following snippets to refresh `POIListActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We have covered a lot of ground in this chapter. We have completed the POI details
    activity to perform add, update, or delete POIs. If you have any unintended deviations,
    you can refer to the code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot of ground creating complex layouts using different
    layout managers such as `LinearLayout`, `TableLayout`, and `ScrollView` and using
    `EditText` to validate the form data.
  prefs: []
  type: TYPE_NORMAL
- en: Now a new activity is added to `POIApp` that displays the details of the POI
    and allows the user to perform add, update, or delete POI operations. The `StartActivity`
    method is used in combination with `Intent` for passing the data bundle between
    activities.
  prefs: []
  type: TYPE_NORMAL
- en: We also extended the `POIService` class by adding additional methods to perform
    the web service `POST` and `DELETE` operations.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will guide you to deal with the application behavior when a
    device orientation changes.
  prefs: []
  type: TYPE_NORMAL
