- en: '*Chapter 2*: Understanding Kotlin Coroutines'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you revisited the concept of asynchronous programming
    and how it helps you execute long-running tasks in the background without freezing
    the app and annoying your app’s users. You learned how to carry out asynchronous
    programming with Threads, AsyncTasks, and Executors. Finally, you were introduced
    to the new way of doing it on Android: Kotlin Coroutines and Flows.'
  prefs: []
  type: TYPE_NORMAL
- en: Coroutines is a Kotlin library for multithreading and asynchronous programming,
    such as making network calls and accessing files or databases. Kotlin Coroutines
    is Google’s official recommendation for asynchronous programming on Android. Android
    Jetpack libraries, such as ViewModel, Lifecycle, WorkManager, and Room, include
    support for Kotlin Coroutines. Third-party Android libraries, such as Retrofit,
    now provide support for Kotlin Coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will dive deep into Kotlin Coroutines. You will learn how
    to use coroutines to carry out asynchronous programming in Android with simple
    code. You will also learn how to create coroutines in your Android app. Then,
    we will discuss other building blocks of coroutines, such as builders, scopes,
    dispatchers, contexts, and jobs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating coroutines in Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring coroutine builders, scopes, and dispatchers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding coroutine contexts and jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise – using coroutines in an Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will have an understanding of using Kotlin
    coroutines. You will be able to add coroutines for various cases in your Android
    apps. You will also understand the basic building blocks of Coroutines: builders,
    scopes, dispatchers, contexts, and jobs.'
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need to download and install the latest version
    of Android Studio. You can find the latest version at [https://developer.android.com/studio](https://developer.android.com/studio).
    For an optimal learning experience, a computer with the following specifications
    is recommended: Intel Core i5 or equivalent or higher, 4 GB of RAM minimum, and
    4 GB available space.'
  prefs: []
  type: TYPE_NORMAL
- en: The code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter02](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: Creating coroutines in Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start by looking at how to create coroutines in Android.
    Coroutines provide an easy way to write asynchronous code with Kotlin’s standard
    functions. You can use coroutines when making a network call or when fetching
    data from or saving data to a local database.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple coroutine looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It has four parts: `CoroutineScope`, `Dispatchers`, `launch`, and the lambda
    function that will be executed by the coroutine. An instance of `CoroutineScope`
    was created for the coroutine’s scope. `Dispatchers.IO` is the dispatcher that
    will specify that this coroutine will run on the I/O dispatcher, the one usually
    used for `launch` is the coroutine builder that creates the coroutine. We will
    explore these components in detail later in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram summarizes these parts of a coroutine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Parts of a coroutine'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B1773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Parts of a coroutine
  prefs: []
  type: TYPE_NORMAL
- en: 'In Android Studio, the `performTask()` call has the suspend function call gutter
    icon next to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Android Studio suspend function call gutter icon'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.02_B17773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Android Studio suspend function call gutter icon
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you have an Android application that displays the list of movies that
    are currently playing in cinemas. So, let’s look at the ways you can use the `suspend`
    function and add coroutines to the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using Retrofit 2.6.0 or above, you can mark the endpoint function
    as a suspending function with `suspend`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can create a coroutine that will call the `getMovies` suspending
    function and display the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will create a coroutine that fetches the movies in the background. The
    `withContext` call will change the context of the coroutine to use `Dispatchers.Main`
    to display the fetched movies in the main thread.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Room-KTX 2.1 or above, you can add the `suspend` keyword to
    your **Data Access Object** (**DAO**) functions so that the query or operation
    can be executed on the background thread and the result will be posted on the
    main thread. The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will make the `getMovies` query a suspending function. When you call this
    function, Room-KTX internally executes the query on a background thread. The results
    can be displayed on the main thread without it freezing your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create a coroutine inside another coroutine, the new coroutine becomes
    the child of the original coroutine. The original coroutine becomes the parent
    of the new coroutine. This can be seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The second coroutine that was launched with `performTask2` was created using
    the `Coroutine Scope` of the parent coroutine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you explored how to add coroutines to your Android project
    and learned how to create coroutines for your app. In the next section, you will
    explore some of the building blocks of coroutines: builders, scopes, and dispatchers.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring coroutine builders, scopes, and dispatchers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to use coroutine builders and explore coroutine
    scopes and dispatchers. Coroutine builders are functions that are used to create
    coroutines. Coroutine scope is the scope with which the coroutines run. Dispatchers
    specify in what thread the coroutine will run.
  prefs: []
  type: TYPE_NORMAL
- en: Coroutine builders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, you created a coroutine with `launch`. However, there
    are other ways to create coroutines. Coroutine builders are the functions that
    you can use to create coroutines. To create a coroutine, you can use the following
    Kotlin coroutine builders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`launch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`async`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`runBlocking`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`async` and `launch` need to be started on a coroutine scope. Meanwhile, `runBlocking`
    doesn’t need to be started from a coroutine scope.'
  prefs: []
  type: TYPE_NORMAL
- en: The `launch` keyword creates a coroutine and doesn’t return a value. Instead,
    it returns a `Job` object that represents the coroutine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `launch` coroutine builder is ideal to use when you want to run a task
    and then forget about it (this means you are not waiting for the result of the
    operation). Here’s an example of using the `launch` coroutine builder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Once the activity has been created, a coroutine will be launched. This coroutine
    will call the `delay` suspending function to delay the coroutine for a second,
    resume, and display the progress bar; then, it’s done.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, the `async` builder is similar to `launch` but it returns
    a value: a `Deferred` object. Later, you can get this value with the `await` function.
    The `async` builder should be used when you want to execute a task and want to
    get the output of said task. An example of using the `async` coroutine builder
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Here, a coroutine was started with `async` to call the `getText` function. This
    will return a deferred object called `text`. There will be a delay of 1 second
    and then the actual value from `text` will be called with `text.await()`, which
    will be set as the text for `textView`. With `async`, two tasks can be computed
    in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: '`runBlocking` starts a new coroutine and blocks the current thread until the
    task has been executed. This is useful for cases when you need to block the thread.
    Creating unit tests is one of these cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `runBlocking` code will create a coroutine and block
    the thread. After a delay of 2,000 milliseconds (2 seconds), it will display the
    progress bar.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you explored how to use coroutine builders to create coroutines.
    You also learned about the `async`, `launch`, and `runBlocking` coroutine builders.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will explore coroutine scopes.
  prefs: []
  type: TYPE_NORMAL
- en: Coroutine scopes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`CoroutineScope` is the scope with which the coroutine will run. It defines
    the life cycle of the coroutines created from it, from its start to its end. If
    you cancel a scope, it will cancel all the coroutines it created. Coroutines follow
    the principle of structured concurrency – that is, a mechanism that provides the
    structure of a coroutine.'
  prefs: []
  type: TYPE_NORMAL
- en: The `launch` and `async` coroutine builders are extension functions from `CoroutineScope`
    for creating coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say we have created a coroutine using `MainScope`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: This launches a coroutine using `MainScope` to display the progress bar.
  prefs: []
  type: TYPE_NORMAL
- en: '`MainScope` is the main `CoroutineScope` for the main thread, which uses `Dispatchers.Main`
    for its coroutine. It is normally used for creating coroutines that will update
    the user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also create a `CoroutineScope` instead of using `MainScope` by creating
    one with the `CoroutineScope` factory function. The `CoroutineScope` function
    requires you to pass in a coroutine context. `CoroutineContext` is a collection
    of elements for the coroutines that specify how the coroutine should run.
  prefs: []
  type: TYPE_NORMAL
- en: You passed a dispatcher and both a dispatcher and a job in the previous examples
    for the coroutine context. Dispatchers and jobs are coroutine context elements.
    You will learn more about coroutine contexts later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Your `CoroutineScope` must have a job and a way for the coroutine to be canceled,
    such as when `Activity`, `Fragment`, or `ViewModel` has been closed.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at a built-in coroutine scope called `lifecycleScope`,
    which is part of Jetpack’s Lifecycle library.
  prefs: []
  type: TYPE_NORMAL
- en: lifecycleScope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`lifecycleScope` is a `CoroutineScope` from Jetpack’s Lifecycle library that
    you can use to create coroutines. It is tied to the `Lifecycle` object (similar
    to your activity or fragment) and is automatically canceled when the life cycle
    is destroyed. Thus, you no longer need to manually cancel them.'
  prefs: []
  type: TYPE_NORMAL
- en: '`lifecycleScope` simplifies how scopes are created, how jobs are handled, and
    how they can be canceled within your activity or fragment. A `lifecycleScope`
    uses `Dispatchers.Main.immediate` for its dispatcher and a `SupervisorJob` for
    its job, such as `viewModelScope`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `lifecycleScope`, you must add the following line to your `app/build.gradle`
    file dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of `lifeCycleScope` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: When the activity is created, it launches a coroutine from `lifecycleScope`
    to display the progress bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the dispatcher that the coroutine will use, you can pass in a dispatcher
    when using the `launch` and `async` coroutine builders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: This will use the `Dispatchers.IO` dispatcher instead of the `lifecycleScope`
    object's default `Dispatchers.Main.immediate` for the coroutine that was launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aside from `launch`, `lifecycleScope` has additional coroutine builders, depending
    on the life cycle’s state:'
  prefs: []
  type: TYPE_NORMAL
- en: '`launchWhenCreated`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`launchWhenStarted`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`launchWhenResumed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the name suggests, `launchWhenCreated` launches the coroutine when the life
    cycle is created, `launchWhenStarted` launches the coroutine when the life cycle
    is started, and `launchWhenResumed` launches the coroutine when the life cycle
    goes back to the **Resumed** state.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at a built-in `CoroutineScope` from `ViewModel`
    called `viewModelScope`.
  prefs: []
  type: TYPE_NORMAL
- en: viewModelScope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`viewModelScope` is the ViewModel’s default `CoroutineScope` for creating coroutines.
    It is ideal to use if you need to do a long-running task from `ViewModel`. This
    scope and all running jobs are automatically canceled when `ViewModel` is cleared
    (that is, when `onCleared` is invoked).'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewModelScope` simplifies the creation of `Scope`, handling the job, and
    canceling within `ViewModel`. A `viewModelScope` uses `Dispatchers.Main.immediate`
    for its dispatcher and uses a `SupervisorJob` for the job. A `SupervisorJob` is
    a special version of `Job` that allows its children to fail independently of each
    other.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `viewModelScope`, you must add the following line to your `app/build.gradle`
    file dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use `viewModelScope` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: This launches a coroutine from `viewModelScope` that will be used to run the
    `fetchMovies()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the dispatcher that the coroutine will use, you can pass in a dispatcher
    when using the `launch` and `async` coroutine builders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: This will use `Dispatchers.IO` for the coroutine, instead of viewModelScope’s
    default of `Dispatchers.Main`.
  prefs: []
  type: TYPE_NORMAL
- en: coroutineScope{} and supervisorScope{}
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `coroutineScope{}` suspending builder allows you to create a `CoroutineScope`
    with the coroutine context from its outer scope. This calls the code block inside
    and does not complete until everything is done.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use a `coroutineScope{}` builder like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: This will create a coroutine scope that will call the `fetchMovies` function,
    set its return value to the `movies` object, and then call the `displayMovies`
    function with `movies`. Another child coroutine will call the `fetchShows` function,
    set its return value to the `shows` object, and then call the `displayShows` function
    with `shows`.
  prefs: []
  type: TYPE_NORMAL
- en: When a child coroutine fails, it will cancel the parent coroutine and the sibling
    coroutines. If you do not want this to happen, you can use `supervisorScope{}`
    instead of `coroutineScope{}`.
  prefs: []
  type: TYPE_NORMAL
- en: The `supervisorScope{}` builder is similar to the `coroutineScope{}` builder
    but the coroutine’s `Scope` has a `SupervisorJob`. This allows the children of
    `supervisorScope` to fail independently of each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of `supervisorScope` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: This will create a supervisor scope (with a `SupervisorJob`) that will call
    the `fetchMovies` function. When a child coroutine fails, the parent and sibling
    coroutines will continue to work and will not be affected.
  prefs: []
  type: TYPE_NORMAL
- en: GlobalScope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`GlobalScope` is a special `CoroutineScope` that is not tied to an object or
    a job. It should only be used in cases when you must run a task or tasks that
    will always be active while the application is alive. As such, if you want to
    use `GlobalScope`, you must annotate the call with `@OptIn(DelicateCoroutinesApi::class)`.'
  prefs: []
  type: TYPE_NORMAL
- en: For all other cases in Android, it is recommended to use `viewModelScope`, `lifecycleScope`,
    or a custom coroutine scope.
  prefs: []
  type: TYPE_NORMAL
- en: Test scopes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kotlin has a `kotlinx-coroutines-test` library for testing coroutines. This
    testing library includes a special coroutine scope that you can use to create
    tests for your coroutines. You will learn more about testing coroutines in [*Chapter
    4*](B17773_04_Epub.xhtml#_idTextAnchor051), *Testing Kotlin Coroutines*.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about `CoroutineScope`, as well as about `MainScope`
    and creating coroutine scopes with the `CoroutineScope` function. You also learned
    about built-in scopes such as `viewModelScope` and `lifecycleScope`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about coroutine dispatchers.
  prefs: []
  type: TYPE_NORMAL
- en: Coroutine dispatchers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Coroutines have a context, which includes the coroutine dispatcher. Dispatchers
    specify what thread the coroutine will use to perform the task. The following
    dispatchers can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Dispatchers.Main`: This is used to run on Android’s main thread, usually for
    updates to the user interface. A special version of `Dispatchers.Main`, called
    `Dispatchers.Main.immediate`, is used to immediately execute the coroutine in
    the main thread. The `viewModelScope` and `lifecycleScope` coroutine scopes use
    `Dispatchers.Main.immediate` by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dispatchers.IO`: This is designed for networking operations, and for reading
    from or writing to files or databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dispatchers.Default`: This is used for CPU-intensive work, such as complicated
    computations or processing text, images, or videos. If you don’t set a dispatcher,
    `Dispatchers.Default` will be chosen by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dispatchers.Unconfined`: This is a special dispatcher that is not confined
    to any specific threads. It executes the coroutine in the current thread and resumes
    it in whatever thread that is used by the suspending function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set the dispatchers when setting the context in `CoroutineScope` or
    when using coroutine builders.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using `MainScope` as the coroutine scope for your coroutine, `Dispatchers.Main`
    is used by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: This coroutine will automatically use `Dispatchers.Main` so that you no longer
    need to specify it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you used a different coroutine scope, you can pass in the dispatcher that
    will be used by the coroutine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code creates a `CoroutineScope` that will be run using `Dispatchers.IO`
    for the dispatcher.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also pass in a dispatcher when using the `launch` and `async` coroutine
    builders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: This will launch a coroutine using the `Dispatchers.Default` dispatcher.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the context of your coroutine, you can use the `withContext` function
    for the code that you want to use a different thread with. For example, in your
    suspending function, `getMovies`, which gets movies from your endpoint, you can
    use `Dispatchers.IO`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `getMovies` function uses `Dispatchers.IO` to fetch
    the list of movies from a network endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned what dispatchers are and what dispatchers you can
    use, depending on your needs. You also learned how to use `withContext` to change
    the specific thread the coroutine runs on.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will explore coroutine contexts and jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding coroutine contexts and jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about coroutine contexts and jobs. Coroutines
    run in a coroutine context. A job is the context of the coroutine that allows
    you to manage the coroutine’s execution.
  prefs: []
  type: TYPE_NORMAL
- en: Coroutine contexts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each coroutine runs in a coroutine context. A coroutine context is a collection
    of elements for the coroutines that specifies how the coroutine should run. A
    coroutine scope has a default coroutine context; if it’s empty, it will have an
    `EmptyCoroutineContext`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create a `CoroutineScope` or use a coroutine builder, you can pass
    in a `CoroutineContext`. In the previous examples, we were passing a dispatcher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example shows how to pass a dispatcher in the `CoroutineScope`
    function or in the coroutine builder.
  prefs: []
  type: TYPE_NORMAL
- en: 'What you’re passing in these functions is a `CoroutineContext`. The following
    are some of the `CoroutineContext` elements you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CoroutineDispatcher`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Job`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CoroutineName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CoroutineExceptionHandler`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main `CoroutineContext` elements are dispatchers and jobs. Dispatchers specify
    the thread where the coroutine runs, while the job of the coroutine allows you
    to manage the coroutine’s task.
  prefs: []
  type: TYPE_NORMAL
- en: Jobs allow you to manage the life cycle of the coroutine, from the creation
    of the coroutine to the completion of the task. You can use this job to cancel
    the coroutine itself. You’ll learn more about coroutine cancelations in [*Chapter
    3*](B17773_03_Epub.xhtml#_idTextAnchor042), *Handling Coroutines Cancelations
    and Exceptions*.
  prefs: []
  type: TYPE_NORMAL
- en: '`CoroutineName` is another `CoroutineContext` you can use to set a string to
    name a coroutine. This name can be useful for debugging purposes. For example,
    you can add a `CoroutineName` using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: This will give the name of `IOCoroutine` to the coroutine that was launched
    using the `Dispatchers.IO` dispatcher.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the coroutine context is a collection of elements for the coroutine, you
    can use operators such as the `+` symbol to combine context elements to create
    a new `CoroutineContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '`MainScope`, `viewModelScope`, and `lifecycleScope`, for example, use something
    like the following for the coroutine scope’s context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Another coroutine context element you can use is `CoroutineExceptionHandler`,
    an element you can use to handle exceptions. You will learn more about `CoroutineExceptionHandler`
    in [*Chapter 3*](B17773_03_Epub.xhtml#_idTextAnchor042), *Handling Coroutines
    Cancelations and Exceptions*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, you used the `withContext` function to change the
    dispatcher to specify a different thread to run your coroutine. As the name implies,
    this changes the coroutine context with the dispatcher, which is a `CoroutineContext`
    element itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: This changes the coroutine context with a new dispatcher, `Dispatchers.IO`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Coroutine jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `ContextCoroutine` element that you can use for the coroutine context. You
    can use jobs to manage the coroutine’s tasks and its life cycle. Jobs can be canceled
    or joined together.
  prefs: []
  type: TYPE_NORMAL
- en: The `launch` coroutine builder creates a new job, while the `async` coroutine
    builder returns a `Deferred<T>` object. `Deferred` is itself a `Job` object –
    that is, a job that has a result.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the job from the coroutine, you can set it to a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'The `launch` coroutine builder creates a coroutine running in the `Dispatchers.IO`
    thread and returns a job. A job can have children jobs, making it a parent job.
    `Job` has a `children` property you can use to get the job’s children:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `job2` becomes a child of `job1`, which is the parent. This
    means that `job2` will inherit the coroutine context of the parent, though you
    can also change it.
  prefs: []
  type: TYPE_NORMAL
- en: If a parent job is canceled or failed, its children are also automatically canceled.
    When a child’s job is canceled or failed, its parent will also be canceled.
  prefs: []
  type: TYPE_NORMAL
- en: A `SupervisorJob` is a special version of a job that allows its children to
    fail independently of each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a job also allows you to create a coroutine that you can later start
    instead of immediately running by default. To do this, you must use `CoroutineStart.LAZY`
    as the value of the `start` parameter in your coroutine builder and assign the
    result to a `Job` variable. Later, you can then use the `start()` function to
    run the coroutine, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: This will create a lazy coroutine. When you are ready to start it, you can simply
    call `lazyJob.start()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `Job` object, you can also use the `join()` suspending function to
    wait for the job to be completed before continuing with another job or task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `job1` will be run first and `job2` won’t be executed until
    the former job (`job1`) has finished.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn more about the states of coroutine jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Coroutine job states
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A job has the following states:'
  prefs: []
  type: TYPE_NORMAL
- en: New
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canceling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canceled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These states of a job and its life cycle are summarized in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Coroutine job life cycle'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.03_B17773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Coroutine job life cycle
  prefs: []
  type: TYPE_NORMAL
- en: When you start a coroutine, a job is created in the `start()` or `join()` function.
    The job is in the **Active** state while the job is running.
  prefs: []
  type: TYPE_NORMAL
- en: Completing a job moves it into the **Completing** state and then into the **Completed**
    state once its children complete their tasks.
  prefs: []
  type: TYPE_NORMAL
- en: If a job is canceled manually or failed because of an exception, it will go
    into the **Canceling** state and then into the **Canceled** state once its children
    complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `Job` object has three properties you can use to check the state of the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '`isActive`: This property is `true` when the job is running or completing,
    and `false` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isComplete`: This property is `true` when the job has finished its task (canceled
    or completed), and `false` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isCancelled`: This property is `true` if the job has been canceled or is being
    canceled, manually or because of an exception, and `false` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will learn more about jobs and how they are used to cancel coroutines in
    [*Chapter 3*](B17773_03_Epub.xhtml#_idTextAnchor042), *Handling Coroutines Cancelations
    and Exceptions*.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about coroutine contexts and jobs. `CoroutineContext`
    is a collection of coroutine context elements for the coroutines that specifies
    how the coroutine should run. Examples of `CoroutineContext` elements are dispatchers
    and jobs. A job is created from a coroutine. You can use it to manage the coroutine’s
    tasks and life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you will use what you have learned so far to add coroutines to an Android
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – using coroutines in an Android app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will be working with an application that displays movies
    that are playing now in cinemas. You will be using The Movie Database API version
    3 to get the list of movies. Go to [https://developers.themoviedb.org/3](https://developers.themoviedb.org/3)
    and register for an API key. Once you’ve done that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Movie App` project in the `Chapter02` directory in this book’s code
    repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `MovieRepository` and update `apiKey` with the value from The Movie Database
    API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app/build.gradle` file and add a dependency for `kotlinx-coroutines-android`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add the `kotlinx-coroutines-core` and `kotlinx-coroutines-android`
    libraries to your project, allowing you to use coroutines in your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, add the dependencies for the `ViewModel` extension library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add the `ViewModel` KTX library to your project. It includes a `viewModelScope`
    for `ViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `MovieViewModel` class, navigate to the `fetchMovies` function, and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a coroutine that will run in `Dispatchers.IO` (on a background
    thread for network operations). The coroutine will be launched using `viewModelScope`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `fetchMovies` coroutine, call the MovieRepository’s `fetchMovies` function
    to fetch the list of movies from The Movie Database API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The coroutine will be launched and will call the `fetchMovies` function from
    `MovieRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application. You will see that the app displays a list of movies (with
    a poster and a title), as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 –The app displaying a list of movies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.04_B17773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 –The app displaying a list of movies
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you created a coroutine using the ViewModel’s `viewModelScope`,
    used the `launch` coroutine builder, and executed a task to fetch the movies from
    the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned more about Kotlin coroutines and how you can use
    them for asynchronous programming in Android.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to create coroutines with coroutine builders such as `launch`,
    `async`, and `runBlocking`. Then, you learned about dispatchers and using them
    to set the thread that the coroutines run on. You also learned about coroutine
    scopes and built-in scopes such as `viewModelScope` and `lifecycleScope`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you learned about coroutine contexts and jobs. `CoroutineContext`
    is the context for the coroutine and includes elements such as dispatchers that
    the coroutine will run on and a job, which you can use to manage the coroutine’s
    task.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you completed an exercise where you added a coroutine to an Android
    project. You used the ViewModel’s `viewModelScope` for the coroutine scope, the
    `launch` coroutine builder, and implemented the coroutine to fetch the list of
    movies using `Dispatchers.IO`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to handle coroutine cancelations, timeouts,
    and exceptions.
  prefs: []
  type: TYPE_NORMAL
