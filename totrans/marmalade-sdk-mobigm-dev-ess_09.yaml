- en: Chapter 9. Adding Social Media and Other Online Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern mobile devices are now amazingly powerful when it comes to graphics and
    sound, but perhaps the biggest differentiator between them and other dedicated
    hand-held videogame systems is that most of them are able to connect to the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: While other gaming systems may be able to go online via WiFi, many modern devices
    can also use a 3G or other such data connections to connect to the Internet wherever
    the user happens to be. For this reason many games now feature the ability to
    connect to social media sites such as Facebook, or to share scores using services
    such as Apple's Game Center.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at how it is possible to use Marmalade
    to add the following online capabilities to our games:'
  prefs: []
  type: TYPE_NORMAL
- en: Launching a web browser to display a web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with Facebook on iOS and Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Familiarizing ourselves with the possibilities for other online functionality,
    including advertising and in-app purchasing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching a web page in the device browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start our foray into the realm of the connected world by looking at the
    simplest way of adding an online feature to our games—launching a web page in
    the device browser.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to direct the user to a website can be extremely useful for things
    such as instruction manuals, hints and tips, or technical support access. It is
    also great for cross promotion of titles by making it really simple to deliver
    a **Get More Games** button that highlights other games you have created.
  prefs: []
  type: TYPE_NORMAL
- en: How do we accomplish this magic? It's really simple! Just include the header
    file `s3eOSExec.h` and then make a call to `s3eOSExecAvailable` to see if the
    functionality is supported by the platform we are running on. Most of the platforms
    supported by Marmalade allow this functionality, but it is always best to check!
  prefs: []
  type: TYPE_NORMAL
- en: If support is available, all we have to do is call the function `s3eOSExecExecute`
    with the URL of the web page and a Boolean value indicating whether or not our
    application will quit. On platforms that don't support multi-tasking this parameter
    will make no difference, so it is usually OK to set this flag to `false` to ensure
    that our application is not closed down.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a code snippet to illustrate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The main disadvantage of this approach is that by launching the application
    in the device's internal web browser, it takes the user away from our game; but
    in the cases mentioned previously, this may be an acceptable trade-off given how
    easy it is to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with social media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social media sites such as Facebook provide a great way of advertising our games
    by getting our players to spread the word for us. There are countless examples
    of games which allow players to post a message to their Facebook wall or Twitter
    feed to show off their latest high score or boast about achieving a certain target
    in the game.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will take a detailed look at how we can implement integration
    with Facebook and we will also talk briefly about Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Using Facebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Marmalade comes with an API called s3eFacebook that wraps up most of the tricky
    stuff involved in communicating with the Facebook servers. Unfortunately this
    ease of use does come at a price, which is that it is only supported on iOS and
    Android.
  prefs: []
  type: TYPE_NORMAL
- en: If Facebook support is required across all platforms, we would need to implement
    everything from scratch using HTTP requests via the IwHTTP API provided with Marmalade.
    This is a challenging task, so we'll be using the s3eFacebook API in this part
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Facebook app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step in Facebook integration to a Marmalade project is to create a
    Facebook App on the Facebook website, which is really little more than a way of
    authenticating the source of any Facebook API requests.
  prefs: []
  type: TYPE_NORMAL
- en: When we create a Facebook App we are provided with two hexadecimal values. One
    is called the **App Id** (also known sometimes as the **API Key**) and the other
    is the **App Secret**. These values will be needed when we send requests to Facebook
    in order to identify our application on the Facebook servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a Facebook App follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Facebook by visiting [www.facebook.com](http://www.facebook.com) and
    entering your username and password. If you do not already have a Facebook account,
    you can also sign up for one at this address.![Creating a Facebook app](img/3363_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are logged in to Facebook, visit the URL [www.facebook.com/developers](http://www.facebook.com/developers).
    If you have never created a Facebook App before, you will see a dialog like the
    one in the preceding screenshot. This screen has a single drop-down box that allows
    you to specify whether everyone or just your friends will be able to see posts
    created by the application. For now leave this set to the default value of **Everyone**
    and click on the **Go to App** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see a screen detailing all the Facebook Apps you have created,
    which will be empty assuming this is the first App you have ever created! Click
    on the **+ Create New App** button to start creating a Facebook App.![Creating
    a Facebook app](img/3363_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous dialog box shown should now appear, minus the pink box containing
    the text about verifying your account (more on this in a moment). For the purpose
    of this chapter all we need to supply is the **App Name** value, which is a string
    that will be shown to the user when our Marmalade project first attempts to access
    Facebook. It therefore makes sense to use the name of the game or perhaps your
    company name for this field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Continue** button to create the Facebook App. Note that the remaining
    fields can be ignored for now. The **App Namespace** value is used to reference
    the application on Facebook as a URL or as part of an HTTP request and is for
    more advanced Facebook integration. The **Locale** and **Web Hosting** controls
    can also be ignored for the purposes of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now be shown one of those annoying Captcha dialogs to prove you are
    a human and not some kind of spamming web bot. Enter the words shown in the image
    to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point it is likely that you will be shown the **Create New App** dialog
    from step 4 again, this time with the text in the little pink box. This is another
    security check put in place by Facebook to stop hundreds of rogue Facebook applications
    from being created. You need to authorize your Facebook account before you can
    create a Facebook App. I would suggest you click the link labeled **mobile phone**
    to verify your account as it is by far the easiest way. You will be asked to enter
    your mobile phone number so a text message can be sent to you containing an authorization
    code that you then enter into a dialog to verify yourself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have verified your account you will return to the **Create New App**
    dialog once again. Ensure the **App Name** value is correct and click on the **Continue**
    button again. The Captcha screen will likely rear its ugly head once more, so
    fill it in.![Creating a Facebook app](img/3363_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point the Facebook App has been created and you should now be looking
    at a screen similar to that shown before, which shows various pieces of information
    about the Facebook App. The most important are the **App Id/App Key** and **App
    Secret** values, which you'll need later; so make a note of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Facebook test user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will obviously want to test the Facebook integration of our application out
    once it has been implemented, but it would be good if we didn't have to spam all
    our friends with test wall posts and the like. It's therefore a good idea to create
    a test user.
  prefs: []
  type: TYPE_NORMAL
- en: 'For understandable reasons Facebook doesn''t really want us to create full
    Facebook accounts for our test users, so instead they allow us to create test
    users using our Facebook App. Follow these steps to create a test user:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Facebook and then visit the [www.facebook.com/developers](http://www.facebook.com/developers)
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the relevant Facebook App in the left-hand pane and then click on the
    link labeled **Edit Roles** on the right-hand side of the **Roles** section of
    the page.![Creating a Facebook test user](img/3363_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Roles** page for the Facebook App will be displayed (see previous screenshot).
    At the bottom there is a section labeled **Test Users**, which has a link labeled
    **Add** that you should click on to create new test users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A small dialog box will appear with three options. The first is labeled **Number
    to Add** and is a drop-down box allowing between one and ten test users to be
    generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Authorize this App** checkbox allows us to determine whether the created
    users have already authorized the Facebook App to use their account. It's worth
    creating users of both types to fully test our application, but ultimately it's
    up to you whether you authorize now or when we first try to log in using this
    user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the **Enable Ticker** checkbox lets you decide whether the user will
    be using the Facebook Ticker interface (which is a real-time timeline of wall
    posts and other events) or the older standard interface. Not all users have access
    to the newer Ticker interface, so it is again worth testing your project using
    both methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button to create the new users. You will return to the screen
    first shown in step 3, but the new users will be shown at the bottom of the page
    now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each test user will have a couple of links next to them. You should first click
    on the **Set Password** link to allow a password to be set for this user. A textbox
    will appear, to allow you to enter a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Switch To** link next to one of the users to log in as
    that user and display their Facebook wall.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top right of the test user's wall, there should be a button labeled **Edit
    Profile**. Click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Edit Profile** screen, click on the **Contact Information** link in
    the left-hand side panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the screen there should be two e-mail addresses associated with
    the profile. One of these should be of the form `<[username@tfbnw.net](mailto:username@tfbnw.net)>`,
    which is the e-mail address we will need to use later to log in as the test user.
    Make a note of this e-mail address and the password you set in step 8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the s3eFacebook API to a Marmalade project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the Facebook App and test users configured, let's get down to adding Facebook
    support to a Marmalade project. The first thing to do is open the project MKB
    file and add `s3eFacebook` to the list of `subprojects`. We can then include the
    `s3eFacebook.h` file whenever we need to make use of the s3eFacebook API functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to add another configuration setting to the MKB file in the `deployments`
    section. The line in question looks like this and is only needed for iOS builds.
    On iOS our application temporarily loses focus when we log in to Facebook and
    this value ensures that we regain control when the login process is completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The hexadecimal value following the initial `fb` should be replaced with the
    16-digit App Id generated by the Facebook App.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for s3eFacebook support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As previously mentioned, the s3eFacebook API is only supported on iOS and Android,
    so it's good to be able to check at runtime whether we can support Facebook or
    not. This is easily done using the `s3eFacebookAvailable` function, which will
    return `S3E_TRUE` if the API is available or `S3E_FALSE` if it isn't.
  prefs: []
  type: TYPE_NORMAL
- en: Initialization and termination
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we can call any of the s3eFacebook APIs, we must first initialize a Facebook
    session. We do this with a call to the function `s3eFBInit` that takes a single
    parameter, a null-terminated string containing the App Id of the Facebook App
    we want to use.
  prefs: []
  type: TYPE_NORMAL
- en: The function will return a pointer to an `s3eFBSession` instance, which we will
    need to use to access the Facebook API and make requests to it.
  prefs: []
  type: TYPE_NORMAL
- en: We can release the Facebook session with a call to `s3eFBTerminate`, which takes
    the session pointer returned from `s3eFBInit` as its only argument.
  prefs: []
  type: TYPE_NORMAL
- en: It is sufficient to call the `s3eFBInit` function the first time we want to
    make any Facebook request and then to use this same session information for the
    execution life of our application. The `s3eFBTerminate` function only needs to
    be called at shutdown time.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in and out of Facebook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we can make any Facebook request, we must first log in to Facebook. This
    is done with the `s3eFBSession_LogIn` function, which takes five parameters. The
    first is the `s3eFBSession` pointer returned from `s3eFBInit`. We can then specify
    a callback function, which will be triggered once successfully logged in. A pointer
    to a block of user data can also be specified, which will be passed into the callback
    function when it is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: The callback function can be specified as `NULL`, in which case we need to check
    for login to be completed by calling the `s3eFBSession_LoggedIn` function. This
    takes the session pointer as an argument and will return `S3E_TRUE` when the session
    is logged in.
  prefs: []
  type: TYPE_NORMAL
- en: The final two parameters of `s3eFBSession_LogIn` are an array of null-terminated
    strings listing the Facebook API permissions we want to make use of and the number
    of permissions in this array. Permissions allow our application to notify the
    user that our application wants to perform certain operations on their account,
    such as posting to their wall or accessing their photo collection. A full list
    of permissions can be found at the web page [http://developers.facebook.com/docs/authentication/permissions/](http://developers.facebook.com/docs/authentication/permissions/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example code shows a sample callback function and how to use
    it with the `s3eFBSession_Login` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This code attempts to log in to Facebook requesting the `publish_stream` permission
    that allows an application to post to a user's wall.
  prefs: []
  type: TYPE_NORMAL
- en: When a Facebook login attempt is made, our application will lose focus and the
    device's Facebook application will be started. If the user doesn't have a Facebook
    application installed, the device's web browser will be launched instead.
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked to provide your Facebook account's login details, so for testing
    purposes enter the details for one of the test user accounts we generated earlier.
    Once logged in, another screen will appear detailing what our application wants
    to do with the user's Facebook account. In the previous example this would just
    be posting to the user's wall. If the Facebook App has not yet been authorized
    for the Facebook account, the screen will also have two buttons labeled **Allow**
    and **Don't Allow**, which the user can use to grant or disallow access respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Facebook login process will first look to see if a user is already logged
    in to Facebook by looking for a browser cookie, and will not ask for username
    and password details if this is the case. If the test device is also your own
    personal device, you will probably want to log out of Facebook before testing
    your application to avoid annoying those on your friends list!
  prefs: []
  type: TYPE_NORMAL
- en: After authorizing (or indeed disallowing) the Facebook App, our application
    will regain focus and the login callback function will be triggered to say whether
    the process was successful or not. If the Facebook app was not authorized or there
    is no Internet connection available, login will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Logging back out of Facebook again is also simple. All we have to do is make
    a call to `s3eFBSession_Logout`, passing the `s3eFBSession` pointer as its only
    argument. In practice we only ever need to log out of Facebook on closing our
    application or if you specifically want to log off to allow different user credentials
    to be used instead. The session will not expire or become invalid as long as our
    application is executing.
  prefs: []
  type: TYPE_NORMAL
- en: Posting a message to a user's wall
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll now take a look at one of the most common things that games use Facebook
    for: posting a message to the user''s wall to alert their friends to a new high
    score or some in-game achievement.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this we'll be making use of the Facebook Graph API. There are
    other ways, but the Graph API is the most up-to-date way of doing so and doesn't
    look likely to be replaced any time soon.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the Facebook Graph API take a look at the web page [http://developers.facebook.com/docs/reference/api/](http://developers.facebook.com/docs/reference/api/),
    and for details about wall posts take a look at [http://developers.facebook.com/docs/reference/api/post/](http://developers.facebook.com/docs/reference/api/post/).
  prefs: []
  type: TYPE_NORMAL
- en: To begin making a Facebook Graph API request, we use the function `s3eFBRequest_WithGraphPath`.
    This function takes as arguments the session pointer, the desired Facebook Graph
    path, and the HTTP method to use (GET or POST). The Graph path and HTTP method
    are both specified as null-terminated strings.
  prefs: []
  type: TYPE_NORMAL
- en: The function will return a pointer to an `s3eFBRequest` structure representing
    the new request if it is successful, or `NULL` if it fails.
  prefs: []
  type: TYPE_NORMAL
- en: With the request structure created, we can now add the various parameters we
    need to it using the functions `s3eFBRequest_AddParamNumber` and `s3eFBRequest_AddParamString`.
    Both functions take the `s3eFBRequest` structure pointer and a null-terminated
    string for the parameter name as their first two parameters. The third parameter
    is a 64-bit integer value (Marmalade defines a type called `int64` for this) for
    the former function call, or a `const char` pointer to a null terminated string
    for the latter function.
  prefs: []
  type: TYPE_NORMAL
- en: Most Graph API values will require you to specify an access token to show that
    your application is authorized to make requests. The access token is provided
    to our application as part of the login process and we can retrieve it using the
    `s3eFBSession_AccessToken` function, which again takes the session pointer as
    its sole input. The access token is returned as a `const char` pointer.
  prefs: []
  type: TYPE_NORMAL
- en: The access token can then be added to a Graph request using the `s3eFBRequest_AddParamString`
    function by specifying `access_token` for the parameter name and using the return
    value from the `s3eFBSession_AccessToken` function as the value for the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Once all parameters have been added to the request, we can send it to the Facebook
    servers using the `s3eFBRequest_Send` function. This function takes the request
    pointer as its first input, followed by a callback function and a pointer to an
    optional block of data that will be passed to the callback function when it is
    triggered.
  prefs: []
  type: TYPE_NORMAL
- en: The function will return immediately with `S3E_RESULT_SUCCESS` if the request
    was sent, or `S3E_RESULT_ERROR` if there was a problem transmitting it. The s3eFacebook
    API will wait for the request from Facebook to arrive and will call the specified
    callback function with the result when it does.
  prefs: []
  type: TYPE_NORMAL
- en: When a request is completed we should make a call to `s3eFBRequest_Delete` to
    free any resources associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example illustrating all of the previous points for posting
    a simple message to the user''s wall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Further s3eFacebook features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous sections really just scratch the surface of the kind of Facebook
    integration that is possible using s3eFacebook. For example, we have made no mention
    of processing any results sent back to our application by the Facebook API. There
    is a whole family of functions with the prefix `s3eFBRequest_Response` that allow
    the return values from a Facebook request to be analyzed.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the entire s3eFacebook API, go to **Marmalade API Reference**
    | **Extensions API Documentation** | **Facebook Extension** | **Facebook API Reference**
    in the Marmalade documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Using Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sadly Marmalade provides no dedicated built-in support for Twitter; so if Twitter
    is important to you, you'll need to provide your own implementation.
  prefs: []
  type: TYPE_NORMAL
- en: One way of doing this would be to use the Twitter API directly by sending HTTP
    requests to Twitter's servers using the IwHTTP API. This would allow a solution
    to be created that should work fine on all operating systems; but this might require
    a lot of code to be implemented to deal with all the possible problems that can
    occur when working online (for example, lack of internet connection, server timeouts,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Another possibility, although it would be limited to iOS and Android, would
    be to use the Marmalade **Extensions Development Kit** (**EDK**) to access existing
    Twitter solutions on these two platforms. This may be simpler to implement since
    the low level Twitter API HTTP requests will have been taken care of; but the
    EDK is currently only supported by iOS and Android. [Chapter 10](ch10.html "Chapter 10. Extending
    Marmalade with the Extensions Development Kit (EDK)"), *Extending Marmalade with
    the Extensions Development Kit (EDK)*, of this book will be looking at the EDK
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in supporting Twitter in Marmalade, the following web
    page may be of use to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.twitter.com/docs/twitter-libraries#cplusplus](https://dev.twitter.com/docs/twitter-libraries#cplusplus)'
  prefs: []
  type: TYPE_NORMAL
- en: It mentions a number of existing C++-based libraries for accessing Twitter that
    may form a good starting point for a Marmalade solution.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to other types of online services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll now take a quick look at some of the other types of online services that
    games on mobile devices typically connect to. While we won't be covering these
    in depth, it's still worth giving them a mention in order to form a better picture
    of what is possible.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting social gaming networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Social gaming networks such as Apple's Game Center or cross-platform solutions
    such as Scoreloop or OpenFeint have become commonplace in many mobile games. In
    the following sections we will look at some of the possibilities we have available
    in Marmalade projects for these types of services.
  prefs: []
  type: TYPE_NORMAL
- en: Using Apple's Game Center
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most well-known social gaming systems in the mobile games world has
    to be Apple's Game Center ([http://www.apple.com/game-center/](http://www.apple.com/game-center/)).
    Unsurprisingly, this system is solely devoted to iOS-based devices, so if you
    are developing a game for iOS this is probably going to be your first choice for
    support.
  prefs: []
  type: TYPE_NORMAL
- en: We cannot access Apple's API directly given that it is an Objective-C library,
    so Marmalade instead comes with a wrapper API for the service, called s3eIOSGameCenter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The s3eIOSGameCenter API is far too big for us to delve into here, but it is
    quite a close wrapping of the standard Apple-supplied API and thus fairly simple
    to understand how to convert any sample code you may come across on the Internet
    to use the Marmalade wrappers. An example project to demonstrate its use is supplied
    in the Marmalade installation folder `examples\s3eIOSGameCenter` and there is
    plenty of information in the Marmalade documentation too, at **Marmalade API Reference**
    | **S3E API Documentation** | **S3E: iOS Only** | **S3E iOS Game Center**.'
  prefs: []
  type: TYPE_NORMAL
- en: Support is provided for all the major features of Game Center, including leaderboards
    and achievements, multiplayer matchmaking, and even voice chat!
  prefs: []
  type: TYPE_NORMAL
- en: Using Scoreloop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Scoreloop system is an extremely popular cross-platform solution that, at
    the time of writing, supports iOS, Android, BlackBerry PlayBook, and Windows Phone
    7\. Given that Marmalade supports the first three of these platforms, combined
    with the fact that the nice people at Scoreloop also supply a version of their
    API that can be used directly in a Marmalade project, this system is a very good
    choice if you want to support social gaming in a cross-platform project.
  prefs: []
  type: TYPE_NORMAL
- en: The Marmalade version of Scoreloop provides support for leaderboards, achievements,
    and Scoreloop's challenge system for offline multiplayer gaming.
  prefs: []
  type: TYPE_NORMAL
- en: More information on Scoreloop can be found at [www.scoreloop.com](http://www.scoreloop.com),
    where you can sign up for a free developer account and download the latest version
    of the SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting in-app purchases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The current popularity of so-called Freemium games has come about because there
    are now other ways of charging for games besides a single up-front purchase cost.
    The advent of **in-app purchases** (**IAP**) has allowed us to literally give
    away our games for free and yet still make a profit by selling additional game
    modes or level packs to users after they have already played and enjoyed our games.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections we will be looking at how Marmalade allows in-app
    purchases to be supported on iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: Adding in-app purchasing for iOS devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with Game Center, the in-app purchase SDK supplied by Apple is written in
    Objective-C, so we can't use it directly in a Marmalade project.
  prefs: []
  type: TYPE_NORMAL
- en: Again Marmalade solves this problem by wrapping up the Apple libraries into
    an API called s3eIOSAppStoreBilling.
  prefs: []
  type: TYPE_NORMAL
- en: This API allows us to obtain a list of in-app products that are available for
    purchase and their costs. We can then make a request to purchase a particular
    product and will be notified of success or failure when Apple's servers have taken
    care of all the behind-the-scenes stuff that needs to be done in order to process
    the payment.
  prefs: []
  type: TYPE_NORMAL
- en: Just like the original Apple implementation, there is no support for allowing
    a user to automatically download extra data when a purchase has been made. Instead
    we have to implement this ourselves on receipt of the purchase confirmation, which
    would involve either shipping all the "unlockable" data with the original application
    download or downloading it from our own server.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on this API, take a look in the Marmalade documentation
    by going to **Marmalade API Reference** | **S3E API Documentation** | **S3E: iOS
    Only** | **S3E iOS App Store Billing**, and the example code that can be found
    in the Marmalade installation at `examples\s3e\s3eIOSAppStoreBilling`.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding in-app purchasing for Android devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Marmalade also provides a wrapper API for implementing in-app purchases on Android
    called s3eAndroidMarketBilling. The naming of this API is still based on the original
    name of the Android store (Android Marketplace), but it works fine with the renamed
    Google Play system.
  prefs: []
  type: TYPE_NORMAL
- en: Sadly Marmalade hasn't been able to provide a single API that can target multiple
    platforms, simply because the iOS and Android systems work so differently. A good
    example of this is that the Google Play system does not allow us to query the
    list of available products for an application. This is a really strange omission
    on Google's part (especially given that you do have to set up a product list on
    the Google Play servers anyway) and it means we either have to hardcode our product
    identifiers into our application or provide our own server to mirror this information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Information on this API can be found in the documentation by going to **Marmalade
    API Reference** | **S3E API Documentation** | **S3E: Android Only** | **S3E Android
    Market Billing**, and there is some sample code at `examples\s3e\s3eAndroidMarketBilling`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using advertising
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've just looked at in-app purchases as being one way of generating an income
    from your games, but another way is to make use of one of the many advertising
    solutions available. Just like those clickable adverts that are a common part
    of most websites, we can give over a little part of our game's screen display
    to adverts that will then provide another potential income stream.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections explore some of the options available to us.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing iAd support for iOS devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you are probably aware, Apple has its own advertising solution purely for
    iOS, called **iAd**. Again this requires use of an Objective-C API, so the Marmalade
    SDK provides a C wrapper for it called **s3eIOSIAD**.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very simple API that allows you to request an advertisement from the
    iAd servers. If an advert is available you have control over when to show it,
    so the advert only needs to be visible at certain points in your game if you so
    wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation on this API can be found at **Marmalade API Reference |S3E API
    Documentation** | **S3E: iOS Only** | **S3E iOS iAd**, and example code exists
    in the Marmalade installation directory at `examples\s3e\s3eIOSIAd`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using other advertising solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since iAd can only be used on iOS platforms, we are forced to consider other
    possible solutions when targeting other platforms (although most of these other
    solutions can still be used on iOS as it happens!).
  prefs: []
  type: TYPE_NORMAL
- en: Marmalade does not provide support for any other advertising systems directly,
    but other developers have taken up the challenge here and have made their own
    solutions available for use on the Marmalade Code Community pages.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing there are a couple of useful projects called *s3eAdWhirl*
    and *s3eAdNinja* that at least provide support for Android. These solutions are
    quite clever in that they actually target multiple sources of mobile advertising
    in order to ensure that an advert is shown in your application as often as possible
    to maximize your revenue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *IwGameAds* module is another open-source community project that shows
    how to integrate with multiple ad services and works across more platforms than
    you can shake a very large stick at. The full source code and documentation for
    it can be found at the following web address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.drmop.com/index.php/iwgameads-sdk/](http://www.drmop.com/index.php/iwgameads-sdk/)'
  prefs: []
  type: TYPE_NORMAL
- en: In the unlikely event that these don't suit your needs and there is a particular
    mobile advertising system you would like to use, another possibility is to implement
    your own support for that system using the Extensions Development Kit that is
    described in more detail in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's take a look at the example code associated with this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Facebook project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Facebook project brings together into one place all the information contained
    in this chapter about posting to a user's Facebook wall so you can easily see
    how to implement the code in a more real-world application.
  prefs: []
  type: TYPE_NORMAL
- en: On running the sample, we are presented with two menu buttons. The first allows
    us to log in and out of Facebook while the second allows us to post a message
    to our wall when we have successfully logged in. A status message will be displayed
    at the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The s3eFacebook API has been further wrapped into a small class called `Facebook`,
    which deals with logging in and out of Facebook and building up Graph API requests.
    This is a good approach as it provides a further layer of abstraction and keeps
    all the s3eFacebook API usage in one place. If the core Facebook API were to change
    for any reason (possible, given that Facebook could potentially change the way
    in which things have to be done at any time), all the code that needs to be updated
    is easy to find.
  prefs: []
  type: TYPE_NORMAL
- en: The message to post to the wall is requested using the `s3eOSReadStringUTF8WithDefault`
    function; so this example also serves as a guide to using this API.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to build and run this sample code, you will need to create your
    own Facebook App and supply the App Id and App Secret values generated for it.
    The `app.icf` file contains two settings allowing these values to be specified
    (though currently only the App Id is actually used in the code!).
  prefs: []
  type: TYPE_NORMAL
- en: It is also necessary to modify the `iphone-bundle-url-schemes` line in the `deployments`
    section of the project's MKB file. If this setting is not changed, the application
    will not regain focus after the Facebook login process on iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned when discussing the s3eFacebook API earlier in this chapter, this
    sample code will only work on iOS and Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: The Skiing project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter sees Facebook support being added to the Skiing project. The `Facebook.cpp`
    and `Facebook.h` files created for the Facebook project have been added to the
    Skiing project unchanged in order to support posting a message to the user's wall.
  prefs: []
  type: TYPE_NORMAL
- en: When the player reaches the "game over" screen, a check is made to see if Facebook
    support is available. If it isn't, the normal "game over" message is displayed
    and after a short delay the user will return to the title screen.
  prefs: []
  type: TYPE_NORMAL
- en: If Facebook functionality is available, a slightly different "game over" screen
    is displayed. This version informs the player of their score and then asks if
    they wish to post a message on their wall to boast about it to their friends.
    Buttons marked **Yes** and **No** are provided to allow the player to choose what
    to do.
  prefs: []
  type: TYPE_NORMAL
- en: If they click on the **Yes** button, the game will attempt to log in to Facebook
    and then post a message detailing the player's score. The request also references
    an image file and a web page link that will also be displayed alongside the wall
    message.
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous Facebook project, it is necessary to create your own Facebook
    App and supply the correct values for the App Id, App Secret, and the `iphone-bundle-url-schemes`
    setting.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we've taken a quick look at how to add various kinds of online
    services to our games. Specifically, we've seen how to add Facebook support to
    our titles and now know where to start looking should we want to include social
    gaming, advertising, or in-app purchases.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these topics could easily fill an entire chapter, but unfortunately
    there just isn't room in this book to go any deeper. Hopefully you now have a
    good idea of the options available though.
  prefs: []
  type: TYPE_NORMAL
- en: At several points in this chapter the Extensions Development Kit (EDK) was mentioned
    as a possible way of implementing online features that are currently not supported
    as part of the base Marmalade SDK. In the next chapter, we will be taking a look
    at the EDK to see how we can access APIs that form part of the iOS and Android
    operating systems.
  prefs: []
  type: TYPE_NORMAL
