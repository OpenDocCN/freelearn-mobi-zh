- en: Chapter 3. Migrating to Swift 3 to Be More Swifty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're a Swift developer like me, you probably have existing code in Swift
    2.2 that you aren't ready to let go of just yet. Thankfully, Xcode 8 and the built
    in *Swift Migrator* will help you convert your Swift 2.2 projects to Swift 3\.
    We will use a sample project to walk through using the Migrator. We will also
    go over some useful strategies you can employ when the Migrator fails to convert
    all of your code properly.
  prefs: []
  type: TYPE_NORMAL
- en: How can you migrate your project…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you open a Swift 2.2 project in Xcode 8 for the first time, you are given
    the option to migrate your project to either Swift 2.3 or Swift 3 in order to
    take advantage of the new SDKs. However, if for some you decide that now is not
    the right time to convert, you can always do so later. The Swift Migrator tool
    is accessible in Xcode 8 under the **Edit **|** Convert **|** To Current Swift
    Syntax…** menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to convert your code if you want to use the new SDK''s available
    for iOS 10, macOS 10.12, watchOS 3, or tvOS 10\. You have two options for migrating
    your project listed below:'
  prefs: []
  type: TYPE_NORMAL
- en: Option1 - Migrating to Swift 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to build against the latest Swift and use all of the new features
    of Xcode 8, then choose the migrate to Swift 3 option. The Migrator will modify
    your source files to adhere to the new Swift 3 syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Option 2 - Migrating to Swift 2.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you just want to use the new SDKs and aren't ready or able to migrate to
    the latest version of Swift, then choose the Swift 2.3 option. Swift 2.3 is Swift
    2.2 plus new SDKs. In this migration scenario, the Migrator will modify build
    settings to use Legacy Swift (Swift 2.2) while making selective source changes
    to allow your project to build against the new SDKs.
  prefs: []
  type: TYPE_NORMAL
- en: Planning ahead
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s face it, Xcode is asking you to bravely use its black box tool to make
    irreversible changes to your project. While I''m a huge Apple fan, I doubt I would
    ever just press the shiny new migrate button without thinking about what could
    go wrong in the process. I''m not in the business of scrapping projects and starting
    from scratch. Honestly, who really is? To avoid a potentially terrible time with
    the Migrator, you really should consider doing everything listed below as pre-work
    before migrating your project:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that your existing codebase is making use of a version control system
    such as Git ([https://git-scm.com](https://git-scm.com)) or Subversion ([https://subversion.apache.org](https://subversion.apache.org)).
    If you run the Migrator and the output doesn't convert things as expected (or
    other unexpected things happen), you will have peace of mind that you can always
    get back to your original version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure your project compiles on the latest version of Xcode (7.3 or 7.3.1).
    You want to make sure everything, including your tests, runs as expected under
    Xcode 7\. If your project does not build and run as a Swift 2.2 project, you are
    just asking for trouble by using the Migrator at this point. Make sure things
    work now before migrating to Swift 2.3 or Swift 3\. Your goal is to have your
    tests pass now and after the migration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that every target you want converted builds with the active scheme.
    The Swift Migrator uses the active scheme in Xcode to determine which source files
    it should examine for migration. You can verify the targets that the Migrator
    will consider by looking at the settings of your scheme using the **Edit Scheme**
    menu. Once there, switch to the build tab of the scheme and make sure that all
    targets you want migrated are checked off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can add a new scheme to your project and include all of the targets. Using
    a separate scheme for migration will ensure that you don't modify settings on
    your main schemes. You can remove the scheme after the migration.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your project uses Carthage or CocoaPods, or another projects that is not
    built along with your main project, then you have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Integrate the outside projects into your main project: **Using this option
    means that you intend to copy the source files of the other projects into your
    existing project. I would be hesitant in doing this unless you really have a good
    handle on how the project is structured and intend to maintain it going forward.
    Once you copy the files in, you will be disconnected from updates and continued
    work happening in the project. Updating in the future would require you to perform
    the same copy, paste, and configure drill each time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do nothing, meaning you won''t convert at this time: **With this option,
    you migrate just your code and continue to link to any 3^(rd) party project without
    migrating. This could be a pretty good option to consider as the owner of the
    outside project might have better insights on how to migrate the project but just
    has not done so yet. If it''s not your project, you might be better off waiting
    for an update from the owner and maintainers of the project. Chances are good
    that you can continue to use the 3^(rd) party project as is. A last trend that
    developers are implementing is to create Swift 2.3 and Swift 3 branches to ease
    later transitions while developing with Xcode 8 betas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating with Xcode's Swift migration tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you''ve done your pre-work, it''s time to migrate your code. For our purposes,
    we are going to use a simple Tic Tac Toe project that you can download from the
    Packt website:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Launch Xcode 8 and open the Tic Tac Toe project**:On first launch, Xcode
    will ask you if you want to migrate your Swift 2.2 project to use the latest SDKs.
    Choose Convert to start the migration.![Migrating with Xcode''s Swift migration
    tool](img/image_03_001.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Choose either Swift 2.3 or Swift 3**:After choosing to convert, you will
    be prompted with another screen that basically lets you know that Xcode is going
    to modify your files. You are also told that, once the migration is over, you
    will be given the option to accept the changes or dismiss them without permanently
    changing your project''s files. The modal dialog also gives you a disclaimer that
    the Swift Migrator isn''t perfect and you might have to make additional changes
    once the migration has completed. Press **Next** and then choose Swift 3.![Migrating
    with Xcode''s Swift migration tool](img/image_03_002.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Choose the targets to convert**:If you have a project with multiple targets,
    you need to make sure that you have selected a scheme that will build all the
    targets you want migrated to the newest Swift (or Swift 2.3). In our case, there
    is only one target to convert and it should already be checked off. Should you
    want to skip a target, you just need to uncheck its corresponding checkbox.![Migrating
    with Xcode''s Swift migration tool](img/image_03_004.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can run the migration multiple times on a project. If you prefer not to
    modify your schemes, you could just run the migration for each scheme that you
    want converted. Just make the selected scheme the active one and start the migration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Review changes on the preview screen: **After selecting the targets and pressing
    **Next**, the Migrator tool will begin its work. Once the process is finished,
    you are prompted with a preview screen containing before and after changes for
    you to review. Every source file that Xcode modified will be available in the
    preview window. It is highly recommended that you examine each of the files to
    make sure you understand the code changes and agree with the recommended changes
    before accepting them.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When reviewing changes, you have options on what you want permanently modified.
    Each modified file has a numbered listing of changes that you can discard or further
    modify. You discard a particular change in a file by expanding the button on an
    individual highlighted change and selecting the dismiss action. At the file level,
    you can discard changes to a file by unchecking the file on the left sidebar view.![Migrating
    with Xcode's Swift migration tool](img/image_03_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Save your changes: **Once you are finished reviewing changes, press the **S**ave****
    button. You will be prompted with a confirmation dialog warning you that the changes
    will be final. You won''t be able to revert using the migration tool once you
    give the Swift Migrator approval to apply all of the changes. Click the ****Continue****
    button to confirm that you do want to accept the changes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Migrating with Xcode''s Swift migration tool](img/image_03_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you save the changes, the migration is complete. Xcode will try to compile
    your project and will let you know if there are any build issues. In our case,
    we have a warning and two build errors. The warning is telling us that we are
    not using all of the recommended project settings. Go ahead and double-click the
    warning to have Xcode change our project settings to the recommended ones. In
    this case, Xcode is recommending that we use Whole Module Optimization.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whole Module Optimization is a build setting that lets the compiler consider
    the entire module when making advanced optimizations of your code. When the compiler
    has module-wide visibility of your code, optimization decisions are made with
    more information about how an affected routine is used throughout the module and
    not just within a single file. Better optimizations result in faster code. You
    can learn more about Whole Module Optimization and options for optimizing Swift
    performance by viewing the Optimizing Swift Performance lecture given at WWDC
    2015 [https://developer.apple.com/videos/play/wwdc2015/409/](https://developer.apple.com/videos/play/wwdc2015/409/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Migrating with Xcode''s Swift migration tool](img/image_03_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The remaining build errors may or may not show up on your machine. In my case
    the errors are due to the fact that I had previously built the project using Xcode
    7.3.1\. Each time you build a project, Xcode caches the intermediate products
    from a compilation to improve future builds. If part of your code hasn't changed,
    Xcode uses the cached byproducts to streamline recompilation. This cached data
    is stored in a folder that Xcode uses for future builds. In my case the derived
    data folder contained code that was no longer relevant for the project given the
    project's migration to Swift 3 and Xcode 8.0\. Clean your project with the Product
    > Clean command. Your project should now compile successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting when things go wrong with the migration
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, not all projects will convert perfectly. The [https://swift.org](https://swift.org)
    website maintains a list of known Migrator issues that you can reference ([https://swift.org/migration-guide/](https://swift.org/migration-guide/)).
    For example, the Migrator might suggest how to fix an issue via a fixit in the
    editor margin without automatically doing it for you. The reason you might see
    a fixit in this example is because your project might have multiple targets that
    share some form of dependence, which can confuse the Migrator. It's a known issue,
    but an easy one to deal with after the migration. You just need to click the fixit
    selecting the recommended action, and Xcode will do the rest. We don't have enough
    time to cover all of the known issues with migrations, but we will cover some
    of more important ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can categorize known Migrator issues into one of three general areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard library issues**:Generally, these issues involve Collection routines
    and types'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**New SDK issues**:These issues deal with the Migrator failing to correlate
    old types and protocols to new ones created in the new SDK. You might also run
    into issues related to the Foundation framework overhaul. We cover the major changes
    to the Foundation framework in [Chapter 8](ch08.html "Chapter 8. Oh Goodness!
    Look Whats New in the Foundation Framework"), *Oh Goodness! Look What''s New in
    the Foundation Framework*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Swift 3 language changes**:These Migrator issues relate to changes to the
    language for Swift 3\. In cases where a function or construct is no longer available
    in Swift 3, the Migrator will not take any action and you will need to manually
    change the code.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to use a combination of the warning/error messages generated along
    with the known issues page listed on the [https://swift.org](https://swift.org)
    website to determine how to fix build errors that surface after a migration. If
    a fixit hint is not provided in the editor margin, you will have to manually correct
    the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Quick strategies for addressing issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Fixit suggestions**:After the migration finishes, examine the warnings/errors
    section for fixit actions. Each of these will give you a recommendation on how
    to fix the code in question. Simply choose the actions and Xcode will apply the
    code change.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Migrator comments**:Even when your project compiles, there is still a possibility
    that the Migrator missed something during the conversion that could not be handled.
    In these cases, the Migrator leaves `/*Migrator FIXME: ...*/` comments in your
    code. You''ll want to search for these and decide if you need to manually make
    a change once you have evaluated the code block.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Use the new Foundation framework value types**:When inspecting your project
    code, you might see that Swift is casting types to "NS" prefixed types. You probably
    don''t want legacy Foundation types when using Swift 3\. Again, the Migrator does
    a pretty good job of finding and correcting these; however, you are still  advised
    to do a manual search for the "NS" prefix. If you find any ''NS'' prefix occurrences,
    you will have the opportunity to determine if each is correct or if you should
    use a new Foundation type without the "NS" prefix. In [Chapter 8](ch08.html "Chapter 8. Oh
    Goodness! Look Whats New in the Foundation Framework"), *Oh Goodness! Look What''s
    New in the Foundation Framework*, we will cover Foundation changes, including
    the new value types.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**User-defined collection types might generate migration issues: **In Swift
    3, collections need to handle moving forward and backward through their collection
    of items. You will need to adopt the new Collection protocol ([https://developer.apple.com/reference/swift/collection](https://developer.apple.com/reference/swift/collection))
    functions that define how you increment the index. If your collection supports
    decrementing, there is a new protocol function for that as well. Last, there is
    a protocol function that allows your collection to support randomly accessing
    an item. If you see errors associated with your custom collections not adhering
    to the Collection protocol, it''s likely that you have not added one or more of
    the new protocol functions below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`func index(after: Index) -> Index`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`func index(before: Index) -> Index`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`func index(_: Index, offsetBy: Int) -> Index`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`func distance(from: Index, to: Index) -> IndexDistance`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removed features in Swift 3**: An example of this would be the C-style for-loop,
    which has been removed from Swift 3\. You will have to manually re-write it as a
    `for…in` statement.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hopefully, at this point, you are getting the idea that the Migrator is going
    to handle most of your everyday use cases. For those issues, you will need to
    use the warning and error messages to decipher what's going on. The first place
    to check should be the known issues section on Swift.org.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Swift Migrator is a great tool that saves you time when you need to migrate
    Swift 2.2 projects to Swift 3 (or Swift 2.3). We learned that we have to migrate
    our existing Swift 2.2 projects to Swift 3 to take advantage of everything Xcode
    8 has to offer. We also learned that we can use the new SDKs without migrating
    to Swift 3 by choosing to migrate to Swift 2.3 (Swift 2.2 plus new SDKs). At any
    point in the future, we can use the ****Edit** |**Conver**t** *| **To Current
    Swift Syntax...*** menu to launch the migration tool. Finally, we learned that
    the Migrator isn't perfect and that it might not convert everything. We might
    have to make some manual changes to get things to work after the migration has
    finished. In the next chapter, we will begin covering Swift 3's core language
    changes.
  prefs: []
  type: TYPE_NORMAL
