- en: Scaling Strategies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展策略
- en: In this chapter, you will learn what determines your app's scalability and what
    you need to do for it to scale well. You will also learn when scaling will become
    important and what elements will influence your scaling strategy. When you just
    get started, the scale is not important at all. In fact, we did tell you earlier
    to do things that do not scale. So, what made us change our mind? Nothing really.
    It is still important to prove your hypotheses and, until that is done, it would
    be a waste of time to make your app scale. However, what is important is that
    you should think about the scalability of your app and what your strategy will
    be in case your app becomes very popular and starts to grow quickly. Now, it is
    perfectly fine that your app backend can handle only one hundred simultaneous
    connections. But your app backend also needs to be capable of handling thousands
    of simultaneous requests, if not more. Not being able to scale things quickly
    leads to downtime, which leads to sad users, which in turn leads to a large churn
    percentage. People walk away and, instead of steady growth, your short moment
    of fame will be gone. This would be even a bigger waste. So, we need a plan and
    this chapter will help you to define this plan.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解什么决定了你的应用程序的可扩展性，以及你需要做什么才能让它良好地扩展。你还将了解何时扩展变得重要，以及哪些因素会影响你的扩展策略。当你刚开始时，规模根本不重要。事实上，我们之前确实告诉过你做一些不可扩展的事情。那么，是什么让我们改变了主意？实际上并没有什么。证明你的假设仍然很重要，而且，直到那件事情完成，让你的应用程序扩展将是浪费时间。然而，重要的是你应该考虑你应用程序的可扩展性，以及如果你的应用程序变得非常流行并开始快速增长，你的策略将是什么。现在，如果你的应用程序后端只能处理一百个同时连接是完全正常的。但你的应用程序后端也需要能够处理数千个甚至更多的同时请求。无法快速扩展会导致停机时间，这会导致用户感到沮丧，进而导致高流失率。人们会离开，而不是稳步增长，你短暂的名声也将消失。这将是更大的浪费。因此，我们需要一个计划，而本章将帮助你定义这个计划。
- en: 'Specifically, in the chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，我们将涵盖以下主题：
- en: Learn why it is important to make your app able to scale
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解为什么让你的应用程序能够扩展很重要
- en: Determine when and how to scale your app and how analytics can help
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定何时以及如何扩展你的应用程序，以及分析如何帮助
- en: Find out what you need to do to have a scalable backend
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解你需要做什么才能拥有一个可扩展的后端
- en: Make it scalable but do not scale it right away
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让它具有可扩展性，但不要立即扩展
- en: In the real world, the definition of scalability may vary from culture to culture,
    but for your app it is important that it is responsive and functional in the most
    common circumstances.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，可扩展性的定义可能因文化而异，但对你来说，重要的是你的应用程序在大多数情况下都是响应的和功能性的。
- en: If you foresee any issues at a given moment in time, it is time to scale up;
    but the key element here is that being able to scale up quickly is more important.
    Make sure that you can do the right things when there is momentum!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你预见在某个特定时刻有任何问题，那么是时候扩展了；但关键要素是能够快速扩展。确保在势头的时候你能做正确的事情！
- en: So, you made an app and it has been shown on a site such as Product Hunt or
    Betalist. You have some enthusiastic early adopters for an audience. As an early-stage
    startup company, you should not care too much about how well your app scales,
    but you should have an idea on how to make it scale if your audience suddenly
    becomes larger than expected.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你已经开发了一个应用程序，并且它已经在像Product Hunt或Betalist这样的网站上展示过。你已经有了一些热情的早期用户。作为一个处于早期阶段的初创公司，你不应该过于关心你的应用程序扩展得有多好，但你应该有一个想法，如果你的受众突然比预期的大，你该如何让它扩展。
- en: Scalability is not just about the backend solution for your app. It is also
    about to what extent it is possible to automate the services for your app and
    how easy it will be to serve any amount of app users. Only when your app services
    can be near 100% automated, will you have a really scalable solution. Anything
    that requires your personal, or other people's attention, prevents your app from
    being fully scalable. The more support your app requires, the less scalable it
    will be.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性不仅仅是关于你应用程序的后端解决方案。它还涉及到到什么程度可以自动化你的应用程序服务，以及为任何数量的应用程序用户提供服务将有多容易。只有当你的应用程序服务几乎可以100%自动化时，你才有一个真正可扩展的解决方案。任何需要你个人或其他人的注意的事情都会阻止你的应用程序完全可扩展。你的应用程序需要的支持越多，它的可扩展性就越低。
- en: 'The scalability of your app could also be limited by the nature of your app
    and its targeted audience. A game app: Flappy Bird, for example, can by definition
    be very scalable. It has no backend and the game is distributed by the App Store
    or Play Store. For things such as leaderboards, you can use the Google or Apple
    services. You can trust that these services are scalable. A social app will be
    harder to scale because it requires that you have a (complex) backend solution.
    Although it is distributed via the stores, your users need to be able to download
    and upload streams of data that not just involve text, but also images and video.
    Your server should be capable of handling that load.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你应用的扩展性也可能受到应用性质和目标受众的限制。例如，一个游戏应用：Flappy Bird，从定义上讲，可以非常容易地扩展。它没有后端，游戏通过App
    Store或Play Store分发。对于像排行榜这样的功能，你可以使用Google或Apple的服务。你可以相信这些服务是可扩展的。一个社交应用将更难扩展，因为它需要你有一个（复杂的）后端解决方案。尽管它通过商店分发，但你的用户需要能够下载和上传包含文本、图像和视频的数据流。你的服务器应该能够处理这种负载。
- en: All of it needs to be stored somewhere and it needs to be delivered quickly.
    Also, moderation, although it can be automated to a large extent, becomes more
    important when user-generated content comes in. Moderation requires manual intervention
    that will have an effect on the scalability of the app. Other apps, such as Uber,
    come with other (non-technical) challenges. They need to deal with all kinds of
    regulations that also require manual interaction. Anything that requires manual
    interaction can threaten the scalability of your solution. Once your hypotheses
    are proven and your app starts to grow, it is important to automate as many components
    of your app as possible.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都需要存储在某处，并且需要快速交付。此外，尽管可以大量自动化，但当用户生成的内容出现时，监管变得更加重要。监管需要人工干预，这将对应用的扩展性产生影响。其他应用，如Uber，会带来其他（非技术性）的挑战。它们需要处理各种法规，这也需要人工交互。任何需要人工交互的事情都可能威胁到你的解决方案的扩展性。一旦你的假设得到证实，你的应用开始增长，那么尽可能自动化你应用中的许多组件就变得非常重要。
- en: If you need more staff, you can hire more people, of course. However, automation
    is better. In this chapter, we will focus in particular on the technical scalability
    of an app. When the distribution of the app itself is taken care of by the Play
    Store or App Store, there is no need to have a strategy. The stores can distribute
    these apps as often as you want without the need to worry about scaling. Well,
    this is why they charge 30% (for paid apps), right? Discussing the scalability
    of your app is relevant if your app will use some kind of backend. For example,
    you might use a backend to share stories, images, videos, or whatever.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多员工，当然可以雇佣更多的人。然而，自动化更好。在本章中，我们将特别关注应用的技術扩展性。当应用的分发由Play Store或App Store负责时，就不需要制定策略。商店可以像你希望的那样频繁地分发这些应用，而不必担心扩展。嗯，这就是为什么他们要收取30%（针对付费应用）的原因，对吧？讨论你应用的扩展性是相关的，如果你的应用将使用某种后端。例如，你可能会使用后端来分享故事、图片、视频或其他内容。
- en: Let's say that you have created a first MVP for your app. The MVP itself is
    not an app yet. It is just there for validation. Imagine that through a website
    or email, you obtain user input that requires some kind of processing. As we have
    seen in previous chapters, it is perfectly fine to have a concierge service. You
    will be doing the process partly or completely manually. True, that does not scale,
    but why would you automate the process if you do not know yet if it is going to
    work out?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经为你的应用创建了一个初步的MVP（最小可行产品）。MVP本身还不是一款应用。它仅仅是为了验证而存在的。想象一下，通过网站或电子邮件，你获得了需要某种处理方式的用户反馈。正如我们在前面的章节中看到的，拥有一个门童服务是完全可行的。你可能需要部分或完全手动处理这个过程。确实，这并不容易扩展，但你为什么要在不知道它是否可行的情况下就自动化这个过程呢？
- en: If your MVP does work as expected, it will result in a few happy customers.
    You have proven your hypotheses and you can start to automate the process. You
    actually built an app and created the backend for it. You stored all data (texts,
    images, and video) on a single server. If this went well, there will be more happy
    customers. And then, your app gets featured in the App Store or a very influential
    early adopter writes a blog about your app and it goes Boom! Suddenly a lot of
    people start using your app and smoke is coming out of your server(s). You quickly
    need to come up with a solution before things start to slow down or before they
    stop working. You need to prevent people from becoming disappointed or your momentum
    will be gone. You can add a couple of extra servers and think of some smart load-balancing
    solution, but, on the other hand, you could save yourself a lot of trouble if
    you start to utilize cloud services, running on, for example, Amazon or Azure
    from the beginning.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的MVP（最小可行产品）按预期工作，它将导致一些满意的客户。你已经验证了你的假设，并可以开始自动化流程。你实际上构建了一个应用并为它创建了后端。你将所有数据（文本、图像和视频）存储在单个服务器上。如果一切顺利，将有更多的满意客户。然后，你的应用被App
    Store收录，或者一个非常有影响力的早期采用者写了一篇关于你的应用的博客，它就火爆了！突然之间，很多人开始使用你的应用，你的服务器（们）冒出了烟。你需要迅速想出解决方案，在事情开始变慢或停止工作之前。你需要防止人们感到失望，否则你的势头就会消失。你可以添加几个额外的服务器并考虑一些智能负载均衡解决方案，但另一方面，如果你从一开始就利用云服务，例如在Amazon或Azure上运行，你可以省去很多麻烦。
- en: 'If you think it won''t go that fast, then consider this: If you do not expect
    your app to go Boom! then why bother building it in the first place? Even pet
    projects can suddenly become very popular!'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为它不会那么快，那么考虑这一点：如果你不期望你的应用会突然火爆，那么为什么一开始要构建它呢？即使是宠物项目也可能突然变得非常受欢迎！
- en: '![](img/1bdaba72-6279-48fc-af4f-6e850718d183.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1bdaba72-6279-48fc-af4f-6e850718d183.png)'
- en: A scalable backend
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展的后端
- en: 'Depending on your particular situation, a mobile backend solution may have
    to deal with these situations:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的具体情况，移动后端解决方案可能需要处理以下情况：
- en: Database and load balancing the database tier
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库和数据库层负载均衡
- en: Web server and load balancing
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络服务器和负载均衡
- en: Reducing the amount of data that goes 'over the line' (low bandwidth support)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少数据传输量（低带宽支持）
- en: Storage of media (images, video, and audio)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体存储（图像、视频和音频）
- en: Content delivery (video streaming)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容分发（视频流）
- en: Cloud storage space is pretty affordable nowadays and, with most solutions,
    you just need to click a few buttons to scale up (and spend a little bit more
    money). So, why not use cloud services right from the start? If you have the skills
    and the time, you can build your own solution and run it on the (scalable) cloud
    using an Infrastructure-as-a-Service (IaaS) solution such as AWS or Azure. If
    you do not have the skills or time, you can also choose to use a Mobile Backend
    as a Service (MBaaS). The latter will be less flexible and it will be more costly,
    but no matter which one you choose, both services will be scalable without too
    much effort on your side.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 云存储空间现在相当实惠，并且，在大多数解决方案中，你只需点击几个按钮就可以扩展（并且花费一点更多的钱）。所以，为什么不从一开始就使用云服务呢？如果你有技能和时间，你可以构建自己的解决方案，并在（可扩展的）云上使用基础设施即服务（IaaS）解决方案，如AWS或Azure运行。如果你没有技能或时间，你也可以选择使用移动后端即服务（MBaaS）。后者将不太灵活，成本也会更高，但无论你选择哪一个，这两种服务都将很容易实现可扩展性。
- en: Cloud-based storage and processing
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于云的存储和处理
- en: 'Run your app backend solution and store your data in the cloud, for example
    at:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中运行你的应用后端解决方案并存储你的数据，例如在：
- en: Amazon (Amazon Web Services and Amazon Storage Service, S3 for example)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊（例如亚马逊云服务（Amazon Web Services）和亚马逊存储服务（Amazon Storage Service，S3））
- en: Google (App Engine, Cloud Storage, Cloud Datastore, and Cloud SQL)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌（App Engine、云存储、云数据存储和云SQL）
- en: Azure (Virtual server, databases, storage, and content delivery)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure（虚拟服务器、数据库、存储和内容分发）
- en: Heroku
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku
- en: 'Most of these solutions offer at least these components:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些解决方案至少提供以下组件：
- en: Virtual servers
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟服务器
- en: Databases
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库
- en: Storage of media (images and video)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体存储（图像和视频）
- en: Content delivery (video)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容分发（视频）
- en: Things that will have an influence on what service to use are pricing, specific
    needs, database support, database type (NoSQL versus SQL), and the programming
    language that is most convenient for you or your team. Also, the ease of use and
    the pricing for push notification services are important to evaluate. The programming
    languages that you can use vary from cloud solution to cloud solution. Google
    App Engine is a better choice for Java developers, and .NET believers better deploy
    their solution in the Azure Cloud.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 影响选择哪种服务的事项包括价格、特定需求、数据库支持、数据库类型（NoSQL与SQL）、以及对你或你的团队来说最方便的编程语言。此外，易用性和推送通知服务的定价也是重要的评估因素。你可以使用的编程语言因云解决方案而异。对于Java开发者来说，Google
    App Engine是一个更好的选择，而.NET的信仰者最好在Azure云中部署他们的解决方案。
- en: 'Most cloud solutions offer multiple programming environments. If you want to
    do Java on Heroku, or Node.js on AWS or Azure, then you can do so. All solutions
    support Java, PHP, Python, and Ruby programming languages. Azure and Amazon both
    support .NET but Azure will probably be the preferred choice here. Go is supported
    by all of them, except Amazon:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云解决方案提供多种编程环境。如果你想在Heroku上使用Java，或者在AWS或Azure上使用Node.js，那么你可以这样做。所有解决方案都支持Java、PHP、Python和Ruby编程语言。Azure和Amazon都支持.NET，但Azure可能在这里是首选。除了Amazon之外，所有云解决方案都支持Go：
- en: '![](img/2616c4c1-3dc4-4522-966b-b127cc110fa6.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2616c4c1-3dc4-4522-966b-b127cc110fa6.png)'
- en: If you prefer to go for a ready-made backend solution, such as Firebase and
    Parse server, please check out [Chapter 8](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml),
    *Cloud Solutions for App Experiments*. An MBaaS is convenient and to a particular
    extent just as scalable, but convenience comes with a price. You start with a
    freemium plan, but when you need to scale up to a premium plan, it is often more
    expensive than developing your own cloud solution. Another pitfall can be that
    it could lead to a vendor lock-in more than would be the case otherwise. However,
    if you need an extra database or an extra server for storage or to process data,
    it is easy to scale things up, but the same applies to IaaS.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你倾向于选择现成的后端解决方案，例如Firebase和Parse服务器，请参阅[第8章](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml)，*应用实验的云解决方案*。MBaaS既方便，在某种程度上也具有可扩展性，但便利性是有代价的。你从免费增值计划开始，但当你需要升级到高级计划时，它通常比开发自己的云解决方案更昂贵。另一个陷阱可能是它可能导致比其他情况下更多的供应商锁定。然而，如果你需要额外的数据库或额外的服务器用于存储或处理数据，扩展事物很容易，但这也适用于IaaS。
- en: Seen from a client perspective
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从客户端视角看
- en: 'Let''s look at an example. From the perspective of a client (here, an Android
    app) the architectural picture could look as shown in the following figure. From
    some endpoint, the API is being consumed. This will result in receiving data that
    will be handled by the Retrofit client (HTTP client for Android) in this example.
    It consumes data in the **JavaScript Object Notation** (**JSON**) format and eventually
    changes this data into objects using a JSON converter, such as Gson library, a
    library capable of doing object mapping on JSON data. Often an SDK is available
    from the party offering the service, which will make it faster and easier to consume
    data from the endpoint or to send data to it. The Parser Server SDKs, for example,
    will take care of object mapping and data synchronization from and to the Parse
    server. As you can see here, it does not really matter to your Android or iOS
    app what the structure of the backend will look like and where it is hosted. For
    the client side, all that matters is the interface, which, in this example, is
    a REST API delivering JSON data on request:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子。从客户端的视角（这里是一个Android应用）来看，架构图可能看起来如下所示。从某个端点，API正在被消费。这将导致接收由Retrofit客户端（Android的HTTP客户端）处理的数据（在这个例子中）。它以**JavaScript对象表示法**（**JSON**）格式消费数据，并最终使用JSON转换器（如Gson库，一个能够对JSON数据进行对象映射的库）将数据转换为对象。通常，提供服务的方会提供SDK，这将使从端点消费数据或向其发送数据更快、更容易。例如，Parser
    Server SDK将负责对象映射和与Parse服务器的数据同步。正如你所看到的，对于Android或iOS应用来说，后端的结构和托管位置并不重要。对于客户端来说，重要的是接口，在这个例子中，是一个在请求时提供JSON数据的REST
    API：
- en: '![](img/084d051c-0c59-4bc1-957c-1eabef8bb6f2.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/084d051c-0c59-4bc1-957c-1eabef8bb6f2.png)'
- en: Things are not always as ideal as in this preceding image. If you are developing
    an app that is getting its data from an endpoint that originally was intended
    to use with a website or another non-mobile solution, you might need to create
    a middleware solution first. Mobile scalability also means that you need to deal
    with low bandwidth circumstances. It is important to limit the amount of data
    in a single transaction as much as possible. Anything that is not instantly needed
    to be displayed in your app should not be in there. Your app should download thumbnails
    instead of downloading images or videos; it should have a paging mechanism (Load
    More options) and the data should be optimized for use on a device that may have
    a low bandwidth connection.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 事情并不总是像前面这张图片中那样理想。如果您正在开发一个从原始目的是与网站或其他非移动解决方案一起使用的端点获取数据的移动应用，您可能需要首先创建一个中间件解决方案。移动可扩展性还意味着您需要处理低带宽情况。尽可能限制单次事务中的数据量非常重要。任何不需要立即在您的应用中显示的内容都不应该包含在内。您的应用应下载缩略图而不是下载图片或视频；它应该有一个分页机制（“加载更多”选项），并且数据应针对可能具有低带宽连接的设备进行优化。
- en: 'The following picture nicely demonstrates the difference between a non-optimized
    and an optimized situation for mobile usage:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片很好地展示了非优化和优化情况之间的差异，适用于移动使用：
- en: '![](img/b4eae3c6-da6b-43b2-b360-e2846f90f54a.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b4eae3c6-da6b-43b2-b360-e2846f90f54a.png)'
- en: Instead of loading the whole dataset in JSON with large and descriptive names,
    you should load the smallest amount of data possible and persist it on the device
    for caching purposes. Even with low-bandwidth conditions, and even if you do not
    have an internet connection, your app will remain responsive and usable. For further
    optimization, your app should retrieve thumbnails first. It makes no sense to
    download hi-res images if your user only sees a small picture of it. Also, your
    (middleware) solution should allow your app to retrieve the app in chunks. Have
    a look at the Facebook app for example. It only loads a part of the stream, and
    when you scroll down (some apps have a Load More button for this at the bottom
    of the list), it loads another section of the data. If you are building things
    from scratch and you go for a mobile-first strategy, then this paging mechanism
    is something you need right away. If the current API is intended for non-mobile
    use, you should consider creating a middleware solution first to optimize the
    data stream.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与其将整个数据集以大而描述性的名称加载到JSON中，您应该只加载尽可能少的数据，并在设备上持久化以用于缓存。即使在低带宽条件下，即使您没有互联网连接，您的应用也将保持响应和可用。为了进一步优化，您的应用应首先检索缩略图。如果用户只看到它的小图片，下载高分辨率图片就没有意义了。此外，您的（中间件）解决方案应允许您的应用分块检索数据。以Facebook应用为例。它只加载流的一部分，当您向下滚动时（一些应用在列表底部有“加载更多”按钮），它会加载数据的另一部分。如果您是从零开始构建，并采用移动优先策略，那么这种分页机制是您立即需要的。如果当前的API旨在用于非移动用途，您应该考虑首先创建一个中间件解决方案来优化数据流。
- en: A well scalable app comes with an improved user experience and better reliability,
    and will be easier to leverage particular events. Think of holidays or particular
    happenings that, depending on the type of app, could all heavily influence the
    amount of traffic involved with your app. A scalable app backend should be easy
    to scale up, allowing you to deliver what is needed during peak hours/day. It
    should also allow you to scale down at other moments to avoid wasting resources
    when they are not utilized.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可扩展性良好的应用会带来改进的用户体验和更好的可靠性，并且将更容易利用特定事件。想想节假日或特定事件，根据应用类型，这些都可能严重影响与您的应用相关的流量量。可扩展的应用后端应该易于扩展，让您在高峰时段/日提供所需的内容。它还应允许您在其他时候缩减规模，以避免在资源未被利用时浪费资源。
- en: You should know when you need to scale up or to scale down
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您应该知道何时需要扩展或缩减
- en: If you are using analytics the right way, you will know when to up or to downscale
    your solution. Seasonality and also the nature of your app can help to make some
    forecasts here. At what time of the day or during what specific events will your
    app be used the most, or when will your users be using the app less? For example,
    if your app is an alarm clock, people will use it less during the holiday season.
    Also, if your app is related to the Olympic Games you can expect a peak usage
    during that event. During holidays, people often spend more money in the App Store,
    resulting in additional downloads and app usage. Finally, campaigns, certainly
    when you are offering your app at a lower price, will have a heavy impact on your
    app's usage rates. Other events are much harder to predict. What if your app gets
    featured and grows 150% a day? You better be prepared for it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正确地使用分析工具，你将知道何时升级或缩减你的解决方案。季节性和你应用的本质可以帮助你做出一些预测。在一天中的什么时候或哪些特定事件期间，你的应用会被最频繁使用，或者用户使用应用较少的时候？例如，如果你的应用是一个闹钟，人们在假日季节会较少使用它。此外，如果你的应用与奥运会有关，你可以预期在该活动期间会有峰值使用。在假日，人们在App
    Store上通常会花费更多的钱，导致额外的下载和应用使用。最后，活动，尤其是当你以较低的价格提供你的应用时，将对应用的使用率产生重大影响。其他事件则难以预测。如果你的应用被推荐并每天增长150%，你最好为此做好准备。
- en: The number of users says something about the number of simultaneous users. That
    last number is what is really important for scaling your app backend. You can
    have ten million users that are using your app regularly or you can have ten million
    users that are using your app every day. One is quite different from the other.
    Metrics can tell you something about the average time spent in the app in a particular
    time frame. If you have an international app, it is important to segment this
    by time zone. Your users may use your app all day long but (maybe) not while they
    are sleeping.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 用户数量说明了同时使用应用的用户数量。这个数字对于扩展你的应用后端来说才是真正重要的。你可以有上千万的用户定期使用你的应用，或者有上千万的用户每天使用你的应用。这两种情况是截然不同的。指标可以告诉你特定时间段内用户在应用中平均花费的时间。如果你的应用是国际化的，那么按时区进行细分就很重要了。用户可能会整天使用你的应用，但（也许）在睡觉时不会使用。
- en: Anyhow, it is important to realize that it is okay if your app does not scale
    yet or if it only supports a small number of (concurrent) users as long as it
    can be scaled up relatively easily. Do not scale because your app needs to be
    scalable. You need to be prepared to do the right things when necessary, but also
    do not put too much effort in it. Perfectionism has killed many great projects.
    Do not let that happen to you.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，重要的是要认识到，如果你的应用目前还没有实现扩展或者只支持少量（并发）用户，只要它相对容易扩展，这是完全可以接受的。不要因为你的应用需要可扩展性而进行扩展。你需要准备好在必要时做正确的事情，但也不要在这方面投入过多的精力。完美主义已经扼杀了众多伟大的项目。不要让这种情况发生在你身上。
- en: A real horror story about an app backend that did not scale
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个关于应用后端没有实现扩展的真实恐怖故事
- en: Low bandwidth can create a poor user experience even with caching and keeping
    data consumption to a minimum, but some things are outside your control. On the
    other hand, a totally overloaded backend is something that you have control over
    to a certain level. Your users judge the total app experience. This is why the
    whole architecture matters.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有缓存并尽量减少数据消耗，低带宽也可能导致用户体验不佳，但有些事情是你无法控制的。另一方面，一个完全过载的后端是你可以控制到一定程度的。你的用户会评判整个应用体验。这就是为什么整个架构都很重要的原因。
- en: Here is an example to illustrate this point. A while ago, I was working on an
    Android SecondScreen app for a well-known international TV show. A **Non Disclosure
    Agreement** (**NDA**) prevents me to tell you which one, but it does not really
    matter to the story. Anyhow, the show was broadcasted on television. The people
    watching the show at home were able to give their votes for the various candidates
    that appeared on the show. Due to this, it was easy to predict that there would
    be a lot of traffic at the time the show was broadcasted. So, when asking the
    third party that was developing the backend of the app about the scalability of
    their solution, they told me that they could guarantee that at least 100K users
    could use the use the app while watching the show. I was naïve not to ask them
    if they did some proper load testing at their end. I just assumed that they were
    a professional company. Unfortunately, they turned out to be not so professional.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子来说明这一点。不久前，我正在为一个知名的国际化电视节目开发Android SecondScreen应用。一份**保密协议**（**NDA**）阻止我告诉你具体是哪个节目，但这对于故事本身并不重要。无论如何，节目在电视上播出。在家观看节目的观众能够为出现在节目中的各种候选人投票。因此，很容易预测，在节目播出时会有大量流量。所以，当询问开发应用后端的第三方关于他们解决方案的可扩展性时，他们告诉我，他们可以保证至少有100K用户可以在观看节目时使用该应用。我没有要求他们是否在他们那里进行了适当的负载测试，这是我的天真。我只是假设他们是一家专业公司。不幸的是，他们并不那么专业。
- en: When the show's new season started and people began to use the app for the first
    time, something went horribly wrong during the first broadcast. The first 30 minutes
    went fine and about 40K users were using the app actively by voting. Then, the
    app stopped working in most cases and it became very hard to vote. The reason
    for this was that the backend could not handle the large traffic load. Although
    it was not the frontend (the app) to blame instead of the backend, from the user's
    perspective it was the app that sucked. The poor performance generated a lot of
    negative reviews. Even though the next broadcast went well, it was hard to recover
    from the bad reviews. The damage was done.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当节目的新季开始，人们开始首次使用该应用时，在第一次直播期间出现了严重的问题。前30分钟一切顺利，大约有40K用户在积极投票使用应用。然后，应用在大多数情况下停止工作，投票变得非常困难。原因是后端无法处理大量流量负载。尽管不是前端（应用）而是后端的问题，但从用户的角度来看，是应用本身出了问题。糟糕的性能产生了大量负面评论。尽管下一场直播进行得很顺利，但很难从负面评论中恢复过来。损害已经造成。
- en: Captain hindsight to the rescue!
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后知后觉的船长来帮忙了！
- en: Here is the retrospective on this issue. If we had a proper load test that proved
    what was promised, then the situation perhaps could have been avoided. Also, if
    we would have been able to upscale quickly, we could have avoided a lot of trouble.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对这个问题的回顾。如果我们有一个证明所承诺内容的适当负载测试，那么这种情况可能可以避免。此外，如果我们能够快速扩展，我们就可以避免很多麻烦。
- en: Predicting the future is pretty hard unless you have a crystal ball that actually
    works. As far as I know, there are none. So instead, always make sure that you
    can respond quickly to new situations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你有一个真正能工作的水晶球，否则预测未来相当困难。据我所知，没有这样的水晶球。因此，始终确保你能快速应对新情况。
- en: You need to be prepared for situations that you can, more or less, foresee.
    Go figure it out for yourself and do some heavy load tests. Break things before
    your users do it for you. If you notice any trouble, then you need to find the
    bottlenecks and see what the best fixes are for them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要为那些你或多或少能预见的情况做好准备。自己去弄清楚，做一些重负载测试。在用户为你做之前，先破坏一些东西。如果你注意到任何问题，那么你需要找到瓶颈，并看看最好的解决方案是什么。
- en: To scale up or to refactor? That is the question
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是要扩展规模还是要重构？这是一个问题。
- en: Just realize that upscaling is not always the correct answer. If your architecture
    is bad you can add another database or another server, but that would just be
    a short-term patch and you would be wasting hardware resources (and money). If
    a better architecture without upscaling results in a better performance, then
    that is what you should preferably do. In addition, you still need to make sure
    that you can scale up quickly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 只要知道，扩展规模并不总是正确的答案。如果你的架构不好，你可以添加另一个数据库或服务器，但这只是短期修补，你会浪费硬件资源（和金钱）。如果更好的架构不进行扩展就能带来更好的性能，那么这就是你应该做的。此外，你仍然需要确保你能快速扩展。
- en: It is a common practice to keep the app as thin as possible (although there
    are some exceptions). Let your servers do all the heavy work instead of a small
    device that otherwise could lead to battery drain and heavy CPU usage. From this
    perspective, scalability often applies to the backend alone.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序保持尽可能瘦是一个常见的做法（尽管有一些例外）。让服务器去做所有重活，而不是一个小设备，否则可能会导致电池耗尽和CPU使用过重。从这个角度来看，可扩展性通常只适用于后端。
- en: 'As your app user base grows from 10 users to a population of 100, to 10K, 100K,
    or 1 million, scalability becomes more and more important. The best practices
    here are as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的应用程序用户基础从10个用户增长到100人，到1万，10万，或100万，可扩展性变得越来越重要。以下是一些最佳实践：
- en: Keep the app as thin as possible
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能保持应用程序尽可能瘦
- en: Keep it simple and do not scale yet, but make it scalable
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持简单，不要立即扩展，但要使其可扩展
- en: Use cloud storage and deployment
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用云存储和部署
- en: Consider building the interface (API) first
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑首先构建接口（API）
- en: It is important to obtain great insights through analytics
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过分析获得深刻的见解非常重要
- en: Follow the market, plan your campaigns carefully
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟随市场，仔细计划您的活动
- en: Keep data traffic as low as possible and don't transfer data that will not be
    utilized
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能降低数据流量，并不要传输将不会被利用的数据
- en: Use autoscale options where possible
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下使用自动扩展选项
- en: 'Things that influence the scalability of your solutions involve the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 影响您解决方案可扩展性的因素包括以下内容：
- en: Database
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库
- en: Storage
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储
- en: Average size of traffic
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量平均大小
- en: Regions of your server and where (most of) your users reside
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器所在区域以及（大多数）用户居住的地方
- en: The choice between using an MBaaS, hosting your solution yourself, and cloud-based
    solutions such as App Engine, Azure, or Amazon
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用MBaaS、自行托管解决方案和基于云的解决方案（如App Engine、Azure或Amazon）之间进行选择
- en: Auto-scaling
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动扩展
- en: 'If you choose to use Azure as a backend for your mobile app, you can use Azure''s
    mobile services. It offers most infrastructure for you, including processing,
    storage, and scaling options. You can pick a pricing tier, such as free, one of
    the basic, or one of the premium plans. An example from the Microsoft document
    that shows how scaling works in Azure is provided in the following picture. The
    picture is taken from the classic environment and it looks a bit different in
    the ''new'' portal; however, the way it is presented here is clearer:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择使用Azure作为移动应用程序的后端，您可以使用Azure的移动服务。它为您提供了大部分基础设施，包括处理、存储和扩展选项。您可以选择定价层，如免费、基本之一或高级计划之一。以下是从Microsoft文档中提供的如何在工作在Azure中扩展的示例图片。图片是从经典环境拍摄的，它在“新”门户中看起来略有不同；然而，这里展示的方式更清晰：
- en: '![](img/66fe4123-b6cd-47bb-8176-d7d3ee333592.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66fe4123-b6cd-47bb-8176-d7d3ee333592.png)'
- en: Most Azure services, including the previously mentioned one, come with autoscaling.
    The solution will automatically scale up or down depending on traffic or by following
    schedules. Think, for example, of a day and night schedule, a weekend versus weekdays
    schedule, or a schedule for a specific period when you are running a campaign.
    It depends on how your app is used as to what will work best for you. If you have
    no clue, you can learn what the best approach will be by keeping an eye on statistics.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 包括之前提到的服务在内的大多数Azure服务都带有自动扩展功能。该解决方案将根据流量或遵循计划自动扩展或缩减。例如，考虑白天和夜晚的日程安排，周末与工作日的日程安排，或者您在运行活动时的特定时间段。这取决于您的应用程序如何使用，什么最适合您。如果您没有头绪，您可以通过关注统计数据来了解最佳方法。
- en: 'On Amazon, you have more or less the same options for autoscaling and AWS Mobile
    Services can help you to build apps faster. It comes with support for push notifications,
    user analytics, data storage, and synchronization options. It can automatically
    increase the number of instances during peak hours (or days) and decrease them
    when less capacity is needed, thus saving you money by reducing costs:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在亚马逊上，您有更多或更少的自动扩展选项，AWS Mobile Services可以帮助您更快地构建应用程序。它包括推送通知、用户分析、数据存储和同步选项。它可以在高峰时段（或日子）自动增加实例数量，并在需要较少容量时减少它们，从而通过降低成本来为您节省金钱：
- en: '![](img/e82cb26e-186f-4179-be21-c06b2d5fc010.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e82cb26e-186f-4179-be21-c06b2d5fc010.png)'
- en: Amazon Cloud Watch enables auto-scaling, which is a monitoring service for AWS
    Cloud resources and applications. You can read more about it at [https://aws.amazon.com/autoscaling/](https://aws.amazon.com/autoscaling/).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Cloud Watch启用自动扩展，这是一项用于AWS云资源和应用程序的监控服务。您可以在[https://aws.amazon.com/autoscaling/](https://aws.amazon.com/autoscaling/)上了解更多信息。
- en: There are some very good books available on the topic that provide you with
    more in-depth knowledge of any of the IaaS here. I suggest that you check them
    out later. In this chapter, we just had a look at what your options are and how
    it affects your strategy.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个主题有一些非常好的书籍，它们可以为你提供关于这里任何IaaS的更深入知识。我建议你稍后查看它们。在本章中，我们只是看了看你的选项以及它们如何影响你的策略。
- en: 'Another interesting read is: [http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html](http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一篇有趣的阅读材料是：[http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html](http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html)。
- en: Scaling an MBaaS, such as Firebase, basically comes down to picking another
    price plan. Unlike Azure, Amazon, and App Engine, it does not come with autoscale
    options and in general, it is less suitable to support a very large number of
    users. This, however, should not prevent you from using Firebase, for example,
    as it is a great solution to get started and more importantly, it allows you to
    validate quickly. Additionally, if you want to migrate from MBaaS to IaaS later,
    you can use the time that you have saved earlier.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展MBaaS（如Firebase）基本上就是选择另一个价格计划。与Azure、Amazon和App Engine不同，它没有自动扩展选项，并且通常来说，它不太适合支持大量用户。然而，这不应该阻止你使用Firebase，例如，因为它是一个很好的入门解决方案，更重要的是，它允许你快速验证。此外，如果你以后想从MBaaS迁移到IaaS，你可以使用之前节省的时间。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned about a scaling strategy for your app and
    how this strategy applies in particular to your app backend. A good architecture
    and the ability to scale, not the scale itself, are key elements here.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解到了你的应用的扩展策略以及这种策略如何特别适用于你的应用后端。良好的架构和可扩展性，而不是规模本身，是这里的关键要素。
- en: By definition, storing data and processing services in the cloud is often very
    scalable but, depending on what you choose, could also be very costly. If you
    want to use data from an API that originally was not intended to be consumed on
    a mobile device, you might need to create a middleware solution first. This way
    you can ensure that your app works well even with low-bandwidth conditions. Minimizing
    the amount of data and paging it can help improve your app's performance.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，将数据存储和处理服务放在云中通常非常可扩展，但具体取决于你的选择，也可能非常昂贵。如果你想使用原本不是为在移动设备上消费而设计的API中的数据，你可能需要首先创建一个中间件解决方案。这样你可以确保即使在低带宽条件下，你的应用也能良好运行。最小化数据量和分页可以帮助提高你的应用性能。
- en: Cloud services offer convenience but at a price. This should not be an issue
    as soon as your app becomes profitable. There are many ways for monetization and
    we are going to look at that in the next chapter. Do you need to create a premium
    app or will in-app purchases lead to more revenue? Let's find out!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供了便利，但代价也不小。一旦你的应用开始盈利，这不应该成为问题。有许多盈利方式，我们将在下一章中探讨。你需要创建一个付费应用，还是应用内购买能带来更多收入？让我们来看看！
