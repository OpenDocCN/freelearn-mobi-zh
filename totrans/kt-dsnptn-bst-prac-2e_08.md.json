["```kt\n for (int t = 0; t < 2; t++) {\n```", "```kt\n    int finalT = t;\n```", "```kt\n    new Thread(() -> {\n```", "```kt\n        for (int i = 0; i < 100; i++) {\n```", "```kt\n            System.out.println(\"Thread \" + finalT + \":               \" + i);\n```", "```kt\n        }\n```", "```kt\n    }).start();\n```", "```kt\n}\n```", "```kt\n> ... \n```", "```kt\n> T0: 12 \n```", "```kt\n> T0: 13 \n```", "```kt\n> T1: 60 \n```", "```kt\n> T0: 14 \n```", "```kt\n> T1: 61 \n```", "```kt\n> T0: 15 \n```", "```kt\n> T1: 16 \n```", "```kt\n> ...\n```", "```kt\nrepeat(2) { t ->\n```", "```kt\n    thread { \n```", "```kt\n        for (i in 1..100) { \n```", "```kt\n            println(\"T$t: $i\") \n```", "```kt\n        } \n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval t = thread(start = false) \n```", "```kt\n... \n```", "```kt\n// Later \n```", "```kt\nt.start()\n```", "```kt\nthread(isDaemon = true) { \n```", "```kt\n    for (i in 1..1_000_000) { \n```", "```kt\n        println(\"daemon thread says: $i\") \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nvar counter = 0\n```", "```kt\nval latch = CountDownLatch(100_000)\n```", "```kt\nrepeat(100) {\n```", "```kt\n    thread {\n```", "```kt\n        repeat(1000) {\n```", "```kt\n            counter++\n```", "```kt\n            latch.countDown()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nlatch.await()\n```", "```kt\nprintln(\"Counter $counter\")\n```", "```kt\nthread {\n```", "```kt\n    repeat(1000) {\n```", "```kt\n        synchronized(latch) {\n```", "```kt\n            counter++\n```", "```kt\n            latch.countDown()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval counter = AtomicInteger() \n```", "```kt\ntry { \n```", "```kt\n    for (i in 0..10_000) { \n```", "```kt\n        thread { \n```", "```kt\n            counter.incrementAndGet() \n```", "```kt\n            Thread.sleep(100) \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n} catch (oome: OutOfMemoryError) { \n```", "```kt\n    println(\"Spawned ${counter.get()} threads before       crashing\") \n```", "```kt\n    System.exit(-42) \n```", "```kt\n}\n```", "```kt\nval pool = Executors.newFixedThreadPool(100)\n```", "```kt\nval counter = AtomicInteger(0) \n```", "```kt\nval start = System.currentTimeMillis() \n```", "```kt\nfor (i in 1..10_000) { \n```", "```kt\n    pool.submit { \n```", "```kt\n        // Do something \n```", "```kt\n        counter.incrementAndGet() \n```", "```kt\n        // Simulate wait on IO \n```", "```kt\n        Thread.sleep(100) \n```", "```kt\n        // Do something again \n```", "```kt\n        counter.incrementAndGet() \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\npool.awaitTermination(20, TimeUnit.SECONDS) \n```", "```kt\npool.shutdown() \n```", "```kt\nprintln(\"Took me ${System.currentTimeMillis() - start}   millis to complete ${counter.get() / 2} tasks\")\n```", "```kt\ndependencies { \n```", "```kt\n    ... \n```", "```kt\n    implementation(\"org.jetbrains.kotlinx:kotlinx-      coroutines-core:1.5.1\") \n```", "```kt\n}\n```", "```kt\nval latch = CountDownLatch(10_000)\n```", "```kt\nval c = AtomicInteger()\n```", "```kt\nval start = System.currentTimeMillis()\n```", "```kt\nfor (i in 1..10_000) {\n```", "```kt\n    GlobalScope.launch {\n```", "```kt\n        c.incrementAndGet()\n```", "```kt\n        delay(100)\n```", "```kt\n        c.incrementAndGet()\n```", "```kt\n        latch.countDown()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nlatch.await(10, TimeUnit.SECONDS)\n```", "```kt\nprintln(\"Executed ${c.get() / 2} coroutines in   ${System.currentTimeMillis() - start}ms\")\n```", "```kt\nfun fastUuidAsync() = GlobalScope.async {\n```", "```kt\n    UUID.randomUUID()\n```", "```kt\n}\n```", "```kt\nprintln(fastUuidAsync())\n```", "```kt\n> DeferredCoroutine{Active}\n```", "```kt\nval job: Job = fastUuidAsync()\n```", "```kt\nprintln(job)\n```", "```kt\nval job: Deferred<UUID> = fastUuidAsync()\n```", "```kt\nval job: Deferred<UUID> = fastUuidAsync()\n```", "```kt\nprintln(job.await())\n```", "```kt\n> Suspend function 'await' should be called only from a coroutine or another suspend function\n```", "```kt\nrunBlocking {\n```", "```kt\n    val job: Deferred<UUID> = fastUuidAsync()\n```", "```kt\n    println(job.await())\n```", "```kt\n}\n```", "```kt\nfun profileBlocking(id: String): Profile { \n```", "```kt\n    // Takes 1s\n```", "```kt\n    val bio = fetchBioOverHttpBlocking(id)  \n```", "```kt\n    // Takes 100ms\n```", "```kt\n    val picture = fetchPictureFromDBBlocking(id)  \n```", "```kt\n    // Takes 500ms\n```", "```kt\n    val friends = fetchFriendsFromDBBlocking(id) \n```", "```kt\n    return Profile(bio, picture, friends) \n```", "```kt\n}\n```", "```kt\nsuspend fun profile(id: String): Profile {\n```", "```kt\n    // Takes 1s    \n```", "```kt\n    val bio = fetchBioOverHttpAsync(id) \n```", "```kt\n    // Takes 100ms\n```", "```kt\n    val picture = fetchPictureFromDBAsync(id) \n```", "```kt\n    // Takes 500ms\n```", "```kt\n    val friends = fetchFriendsFromDBAsync(id) \n```", "```kt\n    return Profile(bio.await(), picture.await(),       friends.await())\n```", "```kt\n}\n```", "```kt\nfun fetchFriendsFromDBAsync(id: String) = GlobalScope.async \n```", "```kt\n{\n```", "```kt\n    delay(500)\n```", "```kt\n    emptyList<String>()\n```", "```kt\n}\n```", "```kt\nrunBlocking {\n```", "```kt\n    val t1 = measureTimeMillis {\n```", "```kt\n        blockingProfile(\"123\")\n```", "```kt\n    }\n```", "```kt\n    val t2 = measureTimeMillis {\n```", "```kt\n        profile(\"123\")\n```", "```kt\n    }\n```", "```kt\n    println(\"Blocking code: $t1\")\n```", "```kt\n    println(\"Async: $t2\")\n```", "```kt\n}\n```", "```kt\n> Blocking code: 1623\n```", "```kt\n> Coroutines: 1021\n```", "```kt\nsuspend fun fetchFriendsFromDB(id: String): List<String> {\n```", "```kt\n    delay(500)\n```", "```kt\n    return emptyList()\n```", "```kt\n}\n```", "```kt\nfun profile(state: Int, id: String, context: ArrayList<Any>): Profile {\n```", "```kt\n    when (state) {\n```", "```kt\n        0 -> {\n```", "```kt\n            context += fetchBioOverHttp(id) \n```", "```kt\n            profile(1, id, context)\n```", "```kt\n        }\n```", "```kt\n        1 -> {\n```", "```kt\n            context += fetchPictureFromDB(id) \n```", "```kt\n            profile(2, id, context)\n```", "```kt\n        }\n```", "```kt\n        2 -> {\n```", "```kt\n            context += fetchFriendsFromDB(id) \n```", "```kt\n            profile(3, id, context)\n```", "```kt\n        }\n```", "```kt\n        3 -> {\n```", "```kt\n            val (bio, picture, friends) = context\n```", "```kt\n            return Profile(bio, picture, friends)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval cancellable = launch {\n```", "```kt\n    try {\n```", "```kt\n        for (i in 1..10_000) {\n```", "```kt\n            println(\"Cancellable: $i\")\n```", "```kt\n            yield()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    catch (e: CancellationException) {\n```", "```kt\n        e.printStackTrace()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval notCancellable = launch {\n```", "```kt\n    for (i in 1..10_000) {\n```", "```kt\n        if (i % 100 == 0) {\n```", "```kt\n            println(\"Not cancellable $i\")\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nprintln(\"Canceling cancellable\") \n```", "```kt\ncancellable.cancel() \n```", "```kt\nprintln(\"Canceling not cancellable\") \n```", "```kt\nnotCancellable.cancel()\n```", "```kt\nrunBlocking { \n```", "```kt\n    cancellable.join() \n```", "```kt\n    notCancellable.join() \n```", "```kt\n}\n```", "```kt\n> Canceling cancellable\n```", "```kt\n> Cancellable: 1\n```", "```kt\n> Not cancellable 100\n```", "```kt\n>...\n```", "```kt\n> Not cancellable 1000\n```", "```kt\n> Canceling not cancellable\n```", "```kt\nval coroutine = async {\n```", "```kt\n    withTimeout(500) {\n```", "```kt\n        try {\n```", "```kt\n            val time = Random.nextLong(1000)\n```", "```kt\n            println(\"It will take me $time to do\")\n```", "```kt\n            delay(time)\n```", "```kt\n            println(\"Returning profile\")\n```", "```kt\n            \"Profile\"\n```", "```kt\n        }\n```", "```kt\n        catch (e: TimeoutCancellationException) {\n```", "```kt\n            e.printStackTrace()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval result = try { \n```", "```kt\n    coroutine.await() \n```", "```kt\n} \n```", "```kt\ncatch (e: TimeoutCancellationException) { \n```", "```kt\n    \"No Profile\" \n```", "```kt\n} \n```", "```kt\nprintln(result)\n```", "```kt\nrunBlocking {\n```", "```kt\n    launch {\n```", "```kt\n        println(Thread.currentThread().name) // Prints \n```", "```kt\n          \"main\"\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nGlobalScope.launch {\n```", "```kt\n    println(\"GlobalScope.launch: \n```", "```kt\n      ${Thread.currentThread().name}\")\n```", "```kt\n}\n```", "```kt\n> DefaultDispatcher-worker-1\n```", "```kt\nrunBlocking {\n```", "```kt\n    launch(Dispatchers.Default) {\n```", "```kt\n        println(Thread.currentThread().name)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n> DefaultDispatcher-worker-1\n```", "```kt\nasync(Dispatchers.IO) { \n```", "```kt\n    // Some long running task here\n```", "```kt\n}\n```", "```kt\nval parent = launch(Dispatchers.Default) {\n```", "```kt\n    val children = List(10) { childId ->\n```", "```kt\n        launch {\n```", "```kt\n            for (i in 1..1_000_000) {\n```", "```kt\n                UUID.randomUUID()\n```", "```kt\n                if (i % 100_000 == 0) {\n```", "```kt\n                    println(\"$childId - $i\")\n```", "```kt\n                    yield()\n```", "```kt\n                }\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n} \n```", "```kt\n...\n```", "```kt\nif (i % 100_000 == 0) {\n```", "```kt\n    println(\"$childId - $i\")\n```", "```kt\n    yield()\n```", "```kt\n}\n```", "```kt\nif (childId == 8 && i == 300_000) {\n```", "```kt\n    throw RuntimeException(\"Something bad happened\")\n```", "```kt\n}\n```", "```kt\n...\n```", "```kt\nval parent = launch(Dispatchers.Default) {\n```", "```kt\n    supervisorScope {\n```", "```kt\n        val children = List(10) { childId ->\n```", "```kt\n            ...\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```"]