- en: Chapter 1. Getting Started with iOS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 开始iOS开发
- en: The mobile industry is the fastest growing domain among other IT domains. iOS
    plays a key role in the mobile industry; nowadays, even the key IT players are
    incorporating mobility in the enterprise way. This title will help you understand
    the basics of iOS development and its implementation from the perspective of enterprises.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他IT领域，移动行业是增长最快的领域。iOS在移动行业中扮演着关键角色；如今，甚至主要的IT玩家也在企业方式中融入了移动性。这个标题将帮助你从企业的角度理解iOS开发及其实现的基础。
- en: 'To get started with iOS development, we will need the following things:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始iOS开发，我们需要以下这些：
- en: A Mac system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Mac系统
- en: Xcode
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode
- en: The iOS SDK
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS SDK
- en: Basically, iOS development is based on the Objective-C language. Objective-C
    is an extension of the C programming language; this includes the **OOP** (**object-oriented
    programming**) concept and adds small-talk style messaging to C. Xcode is built
    to help you build great apps for iPad, iPhone, and Mac. Xcode is an **IDE** (**Integrated
    Development Environment**) for iOS.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，iOS开发基于Objective-C语言。Objective-C是C编程语言的扩展；这包括**OOP**（**面向对象编程**）的概念，并为C添加了Smalltalk风格的通信。Xcode是为了帮助你为iPad、iPhone和Mac构建出色的应用而构建的。Xcode是iOS的**IDE**（**集成开发环境**）。
- en: 'You can download Xcode from the Apple store as shown in the following screenshot:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从苹果商店下载Xcode，如下截图所示：
- en: '![Getting Started with iOS](img/1829OT_01_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![开始iOS开发](img/1829OT_01_01.jpg)'
- en: The Xcode option
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode选项
- en: It is free; after downloading Xcode, it automatically appears in the launch
    pad. Xcode provides different features such as coding, design, a user interface,
    and testing for you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它是免费的；下载Xcode后，它将自动出现在启动板上。Xcode提供了不同的功能，如编码、设计、用户界面和测试。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Interface and implementation classes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口和实现类
- en: Types of methods in iOS
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS中的方法类型
- en: Datatypes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型
- en: Arrays
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Property and synthesize
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性和合成
- en: Delegates
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理
- en: Building a simple app
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的应用
- en: Interface and implementation
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口和实现
- en: 'In Objective-C, there are two types of files that represent a single class:
    one is the `interface` file and the other one is the `implementation` file. In
    the `interface` file, the declaration of a method and variable is done; in the
    `implementation` file, we define this method and use the declared variable.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Objective-C中，表示单个类的文件有两种类型：一个是`interface`文件，另一个是`implementation`文件。在`interface`文件中，方法的声明和变量的声明是完成的；在`implementation`文件中，我们定义这个方法并使用声明的变量。
- en: Code snippets for interface and implementation
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口和实现的代码片段
- en: 'The following is the code snippet for the `interface` class:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为`interface`类提供的代码片段：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `MyClass.h` file is an `interface` class. `NSObject` is a root class of
    all the classes, and it is a must to import the `NSObject` class. The `@end` keyword
    indicates that our interface block is completed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyClass.h`文件是一个`interface`类。`NSObject`是所有类的根类，导入`NSObject`类是必须的。`@end`关键字表示我们的接口块已完成。'
- en: 'The following is our `implementation` class named as `MyClass.m`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们名为`MyClass.m`的`implementation`类：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Types of methods in iOS
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS中的方法类型
- en: 'The methods that we declare in the `interface` file are defined in the `implementation`
    file. Methods are declared in the following way:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`interface`文件中声明的方法在`implementation`文件中定义。方法的声明方式如下：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are two methods in iOS: one is the class method and the other is the
    instance method. In the class method, we do not have to create an object; we can
    directly access these methods using their class names. The class method is indicated
    by the `+` symbol. We can find static methods in languages such as Java and C++,
    and we will find class methods in languages such as Objective-C and Ruby. The
    difference between the static and class methods is that they have different language
    concepts.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: iOS中有两种方法：一种是类方法，另一种是实例方法。在类方法中，我们不需要创建对象；我们可以直接使用它们的类名来访问这些方法。类方法由`+`符号表示。我们可以在Java和C++等语言中找到静态方法，我们将在Objective-C和Ruby等语言中找到类方法。静态方法和类方法之间的区别在于它们有不同的语言概念。
- en: 'The principal differences are:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 主要区别如下：
- en: Static methods are shared between all instances (this doesn't exist in Objective-C).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态方法在所有实例之间共享（在Objective-C中不存在这种情况）。
- en: 'The class method is a method on a class. In languages such as Objective-C and
    Ruby, a class itself is an instance of another class (metaclass). Using + before
    a method declaration means that the method will be defined on the class. Technically,
    it''s just an instance method on a different object. The syntax for the class
    method is as follows:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类方法是在类上的一个方法。在 Objective-C 和 Ruby 等语言中，类本身是另一个类的实例（元类）。在方法声明前使用加号（+）表示该方法将在类上定义。技术上，它只是不同对象上的一个实例方法。类方法的语法如下：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the instance method, we have to create an object. We can''t access the instance
    method without creating an object. Memory is allocated for an object. The `alloc`
    keyword is used to allocate memory. The following syntax is used for the instance
    method:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实例方法中，我们必须创建一个对象。如果没有创建对象，我们无法访问实例方法。为对象分配内存。`alloc` 关键字用于分配内存。实例方法的语法如下：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating objects
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建对象
- en: 'An object is created in the `implementation` file as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `implementation` 文件中创建对象如下：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we used the `alloc` and `init` keywords. The `alloc` keyword is used to
    allocate memory to the object, and the `init` keyword is used to initialize that
    object.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了 `alloc` 和 `init` 关键字。`alloc` 关键字用于为对象分配内存，而 `init` 关键字用于初始化该对象。
- en: Important datatypes
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要数据类型
- en: 'Like any other programming language, iOS also has different datatypes such
    as `int`, `float`, `double`, `char`, and `id`. Datatypes are used to specify the
    kind of data that is being stored in a variable. There are four important datatypes
    in iOS:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他编程语言一样，iOS 也有不同的数据类型，如 `int`、`float`、`double`、`char` 和 `id`。数据类型用于指定变量中存储的数据类型。iOS
    中有四种重要的数据类型：
- en: '`NSString`: This is used to represent a string'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSString`: 这用于表示字符串'
- en: '`NSInteger`: This is used to declare an integer'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSInteger`: 这用于声明整数'
- en: '`CGFloat`: This is used to declare float values'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CGFloat`: 这用于声明浮点值'
- en: '`BOOL`: This is used to declare a Boolean (yes or no) value'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BOOL`: 这用于声明布尔值（是或否）'
- en: Array
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: 'Array is a collection of homogeneous datatypes with contiguous memory allocation.
    In iOS, arrays are of two types:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是具有连续内存分配的同质数据类型的集合。在 iOS 中，数组有两种类型：
- en: '`NSArray`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSArray`'
- en: '`NSMutableArray`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSMutableArray`'
- en: NSArray
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NSArray
- en: '`NSArray` is an immutable array. In Objective-C, by default, arrays are immutable,
    that is, as the name indicates, it''s object can''t be changed or removed after
    the initialization of the array:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSArray` 是一个不可变数组。在 Objective-C 中，默认情况下，数组是不可变的，也就是说，正如其名称所示，它初始化后的对象不能被更改或删除：'
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: NSMutableArray
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`NSMutableArray`'
- en: '`NSMutableArray` is a subclass of `NSArray`. This is a modifiable array, and
    its object can be removed or modified after the initialization of array:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSMutableArray` 是 `NSArray` 的子类。这是一个可修改的数组，其对象在数组初始化后可以被删除或修改：'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The concept of String is the same as in C. String also has two types: `NSMutableString`
    and `NSString`. Consider the following example for the `NSString` type:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的概念与 C 语言中相同。字符串也有两种类型：`NSMutableString` 和 `NSString`。以下是一个 `NSString` 类型的示例：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Property and Synthesize
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性和合成
- en: 'The properties of an object are defined to let other objects use or change
    their state. However, in object-oriented programming, it''s not possible to access
    the internal state of an object directly from outside the class (except public
    accessors). Instead, accessor methods (getters and setters) are used to interact
    with the objects. The goal of the `@property` is to make it easier to create and
    configure properties by automatically generating these accessor methods:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的属性被定义为让其他对象使用或改变它们的状态。然而，在面向对象编程中，无法直接从类外部访问对象的内部状态（除了公共访问器）。相反，使用访问器方法（获取器和设置器）与对象交互。`@property`
    的目标是通过自动生成这些访问器方法来简化属性创建和配置：
- en: '`@property`: This method implements the setter/getter methods in our code automatically;
    we don''t have to write the code manually.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@property`: 此方法自动在我们的代码中实现设置器/获取器方法；我们不必手动编写代码。'
- en: '`@synthesize`: This method synthesizes the properties with the given attributes,
    and the compiler will generate the setter and getter methods for our variables.
    However, now we do not use `synthesize`; instead of `@synthesize`, we use an underscore
    (`_`) or the `self` keyword.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@synthesize`: 此方法使用给定的属性合成属性，编译器将为我们的变量生成设置器和获取器方法。然而，现在我们不使用 `synthesize`；代替
    `@synthesize`，我们使用下划线（`_`）或 `self` 关键字。'
- en: 'Let''s understand these methods with a code snippet. This is the interface
    file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个代码片段来理解这些方法。这是接口文件：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the implementation file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现文件：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In Objective-C, every object holds a reference count. When an object is created,
    its reference count increases by one; when it releases the object, the reference
    count decreases by one. When the reference count reaches zero, it deallocates
    the memory by itself. The attributes of `@property` is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Objective-C 中，每个对象都持有引用计数。当创建一个对象时，其引用计数增加一；当释放对象时，引用计数减少一。当引用计数达到零时，它会自动释放内存。`@property`
    的属性如下：
- en: '`atomic`: By default, every property is atomic. It will ensure that a whole
    value is always returned by the getter method or set by the setter method. Only
    a single thread can access a variable to get or set a value at a time. So, atomic
    is also thread-safe.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`atomic`：默认情况下，每个属性都是原子的。它将确保获取器方法总是返回整个值，或设置器方法总是设置整个值。一次只有一个线程可以访问一个变量以获取或设置值。因此，原子也是线程安全的。'
- en: '`nonatomic`: In `nonatomic`, there is no guarantee that the value returned
    from a variable is the same one that the setter method sets. At the same time,
    more than one single thread can access a variable at a time.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nonatomic`：在 `nonatomic` 中，无法保证从变量返回的值与设置器方法设置的值相同。同时，多个单线程可以同时访问一个变量。'
- en: '`strong`: The `strong` attribute owns the object. The compiler will ensure
    that any object that we assign to this property will not be destroyed as long
    as we (or any other object) point to it with a strong reference.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strong`：`strong` 属性拥有对象。编译器将确保我们分配给此属性的任何对象只要我们（或任何其他对象）用强引用指向它，就不会被销毁。'
- en: '`weak`: In a `weak` reference, we don''t want to have control over the object''s
    lifetime. The object we are referencing weakly only lives on because at least
    one other object holds a strong reference to it.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weak`：在 `weak` 引用中，我们不想控制对象的生存周期。我们弱引用的对象之所以存在，仅仅是因为至少有一个其他对象持有对该对象的强引用。'
- en: '`retain`: This specifies that `retain` should be invoked on the object upon
    assignment. It takes ownership of an object.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retain`：这指定了在赋值时应在对象上调用 `retain`。它获取对象的拥有权。'
- en: '`assign`: This specifies that the setter uses simple assignment. It uses an
    attribute of the scalar type, such as `float` or `int`.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assign`：这指定了设置器使用简单的赋值。它使用标量类型的属性，例如 `float` 或 `int`。'
- en: '`copy`: This copies an object during assignment and increases the retain count
    by one.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy`：在赋值时复制一个对象，并增加引用计数一。'
- en: 'Consider the following simple example using the attributes:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下使用属性的简单示例：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Delegates
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理
- en: A delegate is a tool through which one object can communicate with another;
    in turn, the objects can stay connected to each other. It is a method by which
    one object can act on behalf of another object. The delegating object keeps a
    reference to the other object and, at the appropriate time, sends a message to
    it. The message informs the delegate of an event that the delegating object is
    about to handle or that is to be handled.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 代理是一种工具，通过它可以一个对象与另一个对象进行通信；反过来，对象可以保持相互连接。这是一种方法，其中一个对象可以代表另一个对象行事。委托对象保留对另一个对象的引用，并在适当的时候向它发送消息。消息通知委托对象，委托对象即将处理或将要处理的事件。
- en: Consider the following example of how to use a delegate.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下如何使用代理的示例。
- en: 'Let''s define the `FirstViewController.h` interface file as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义 `FirstViewController.h` 接口文件如下：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let''s define the `FirstViewController.m` implementation file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义 `FirstViewController.m` 实现文件：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we will define the `SecondViewController.h` interface file as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义 `SecondViewController.h` 接口文件如下：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we will define the `SecondViewController.m` implementation file as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将定义 `SecondViewController.m` 实现文件如下：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Building our first iPhone app
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的第一个 iPhone 应用
- en: 'Let''s make our first iPhone app by performing the following steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤制作我们的第一个 iPhone 应用：
- en: Open Xcode; you will see the following screen. In the panel on the right-hand
    side, you can see your existing projects. You can open your project directly by
    selecting from the list of projects; for a new project, on the other hand, select
    **Create a new Xcode project**.![Building our first iPhone app](img/1829OT_01_02.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Xcode；你将看到以下屏幕。在右侧的面板中，你可以看到你的现有项目。你可以直接从项目列表中选择打开项目；另一方面，对于新项目，选择**创建一个新的
    Xcode 项目**。![构建我们的第一个 iPhone 应用](img/1829OT_01_02.jpg)
- en: 'There are eight templates provided by Xcode. In the panel on the left-hand
    side, you can see there are two options: **iOS** and **OS X**. **iOS** is for
    Apple touch devices, and **OS X** is for desktop devices. Initially, choose **Single
    View Application**. Then, click on **NEXT**, as shown in the following screenshot:![Building
    our first iPhone app](img/1829OT_01_03.jpg)'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xcode提供了八个模板。在左侧面板中，您可以看到有两个选项：**iOS** 和 **OS X**。**iOS** 用于苹果触摸设备，而 **OS X**
    用于桌面设备。最初，选择**单视图应用程序**。然后，点击**下一步**，如图所示：![构建我们的第一个iPhone应用](img/1829OT_01_03.jpg)
- en: 'Now, it is time to give a name to your project and choose **iPhone** from the
    **Devices** dropdown. Then, click on **Next**. The following screenshot will appear:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候给你的项目命名，并从**设备**下拉菜单中选择**iPhone**。然后，点击**下一步**。以下截图将出现：
- en: Tip
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 购买的所有Packt书籍的账户中下载示例代码文件。如果您在其他地方购买了这本书，您可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册，以便将文件直接通过电子邮件发送给您。
- en: '![Building our first iPhone app](img/1829OT_01_04.jpg)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![构建我们的第一个iPhone应用](img/1829OT_01_04.jpg)'
- en: Save your project in the directory of your choice:![Building our first iPhone
    app](img/1829OT_01_05.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的项目保存在您选择的目录中：![构建我们的第一个iPhone应用](img/1829OT_01_05.jpg)
- en: Now, your editor will look like the following screenshot. In the left-hand-side
    panel, there is a declaration of classes. Select the storyboard from the left-hand-side
    panel. Storyboard provides the view to your application.![Building our first iPhone
    app](img/1829OT_01_06.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的编辑器将看起来如下截图所示。在左侧面板中，有一个类的声明。从左侧面板中选择故事板。故事板为您的应用程序提供视图。![构建我们的第一个iPhone应用](img/1829OT_01_06.jpg)
- en: 'This is your storyboard. At present, it is an empty view controller. Storyboard
    has many areas, such as the navigation area, editor area, utility area, and debug
    area, that are described as follows:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是您的故事板。目前，它是一个空视图控制器。故事板有许多区域，例如导航区域、编辑区域、工具区域和调试区域，以下将逐一描述：
- en: '**Navigation area**: In this pane, there are various navigators that we can
    switch between using the Navigator selector bar. The three navigators that we
    will use a lot are the Project, Search, and Issue navigators.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航区域**：在这个面板中，我们可以通过导航选择栏在多个导航器之间切换。我们将经常使用的三个导航器是项目导航器、搜索导航器和问题导航器。'
- en: '**Editor area**: The editor area is where we''ll probably be spending most
    of our time! This is where all the coding happens.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑区域**：编辑区域是我们可能花费大部分时间的地方！所有编码都发生在这里。'
- en: '**Utility area**: The Xcode utility area comprises two panes: the Inspector
    pane and the Library pane. The Inspector pane will give us details about the file.
    However, when we are looking at the storyboard, the Inspector pane will show us
    the different attributes that you can modify for a selected element. The Library
    pane won''t be very useful until we look at a storyboard. When we use the Interface
    Builder part of Xcode, we can drag UI elements from the Library pane onto the
    editor area to add them to our user interface.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具区域**：Xcode的工具区域由两个面板组成：检查器面板和库面板。检查器面板将给我们提供关于文件详情。然而，当我们查看故事板时，检查器面板将显示您可以修改的所选元素的各个属性。库面板在我们查看故事板之前不会非常有用。当我们使用Xcode的界面构建部分时，我们可以从库面板拖动UI元素到编辑区域，以将它们添加到用户界面中。'
- en: '**Debug area**: The debug area will show us the console output and the state
    of various variables when you run your application.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试区域**：调试区域将在您运行应用程序时显示控制台输出和各种变量的状态。'
- en: 'In the following screenshot, we can see an arrow before the view; this indicates
    that the view is a starting view of the application. When the application launches,
    this view will launch first:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下截图，我们可以看到一个箭头在视图之前；这表示该视图是应用程序的起始视图。当应用程序启动时，此视图将首先启动：
- en: '![Building our first iPhone app](img/1829OT_01_07.jpg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![构建我们的第一个iPhone应用](img/1829OT_01_07.jpg)'
- en: On the right-hand side, a lot of components, such as button, label, and text
    fields, are present (we will learn about these components in the upcoming chapters).
    Drag-and-drop a button from the right-hand-side panel as shown in the following
    screenshot. Rename it by double-clicking on it; give it any name. For example,
    name it `Hello`.![Building our first iPhone app](img/1829OT_01_08.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧，有许多组件，如按钮、标签和文本字段（我们将在接下来的章节中学习这些组件）。按照以下截图所示，从右侧面板拖放一个按钮；通过双击重命名它；给它任何名字。例如，命名为
    `Hello`。![构建我们的第一个iPhone应用](img/1829OT_01_08.jpg)
- en: This is all our UI part. Now, let's move on to the coding section.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是我们的 UI 部分。现在，让我们继续到编码部分。
- en: 'Go to `ViewController.h` and write the following method in it. The `.h` file
    is an interface file of our project where we declare the property and method.
    If we want to declare variables, then they are declared under the braces of the
    interface; the property and methods are defined outside the braces:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `ViewController.h` 并在其中编写以下方法。`.h` 文件是我们项目的接口文件，其中我们声明属性和方法。如果我们想声明变量，那么它们将在接口的大括号内声明；属性和方法定义在大括号外：
- en: '[PRE16]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Coming back to our program, we have to describe one method, `showMessage`, where
    we describe the `UIAlertview` function; this appears as a pop-up window with a
    message.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回到我们的程序，我们必须描述一个方法，`showMessage`，其中我们描述了 `UIAlertview` 函数；这会显示一个带有消息的弹出窗口。
- en: 'The following screenshot shows the editor area with the preceding code snippet:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了包含前面代码片段的编辑区域：
- en: '![Building our first iPhone app](img/1829OT_01_09.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![构建我们的第一个iPhone应用](img/1829OT_01_09.jpg)'
- en: 'Let''s understand the code line by line:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们逐行理解代码：
- en: '`#import <UIKit/UIKit.h>`: This is a header file that we import in our code.
    `UIKit` is a framework that contains all the inbuilt library files for the UI
    part. The `UIKit` header file imports all the other header files available in
    the `UIKit` framework; after importing this header file, we don''t have to import
    other `UIHeader` files such as `UIViewController.h`, `UIView.h`, or `UIButton.h`
    manually.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#import <UIKit/UIKit.h>`: 这是我们代码中导入的一个头文件。`UIKit` 是一个框架，包含所有 UI 部分的内置库文件。`UIKit`
    头文件导入了 `UIKit` 框架中可用的所有其他头文件；导入此头文件后，我们不需要手动导入其他 `UIHeader` 文件，如 `UIViewController.h`、`UIView.h`
    或 `UIButton.h`。'
- en: '`@interface ViewController: UIViewController`: This is an interface for the
    `ViewController.h` class. It inherits the `UIViewController` class, which is used
    to handle the flow of our screen or view.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@interface ViewController: UIViewController`: 这是对 `ViewController.h` 类的一个接口。它继承自
    `UIViewController` 类，用于处理我们屏幕或视图的流程。'
- en: '`(IBAction)showMessage`: This is a method that we created manually. When we
    want to perform some action on tapping a button, we will use `IBAction`. This
    is a kind of return type in iOS. Here, the name of the method is `showMessage`
    (we can give any name). `IBAction` tells the UI Builder that the method can be
    used as a selector (event receiver).'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(IBAction)showMessage`: 这是一个我们手动创建的方法。当我们想要在按钮点击时执行某些操作时，我们将使用 `IBAction`。这是
    iOS 中的一种返回类型。这里，方法的名称是 `showMessage`（我们可以给出任何名字）。`IBAction` 告诉 UI 构建器该方法可以用作选择器（事件接收器）。'
- en: '`@end`: This code indicates that our interface part is over.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@end`: 这段代码表示我们的接口部分已经结束。'
- en: Now, go to `ViewController.m` and describe the method that is defined in the
    `.h` file. This is also called an `implementation` file. The following screenshot
    illustrates the code used in the implementation file:![Building our first iPhone
    app](img/1829OT_01_10.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往 `ViewController.m` 并描述在 `.h` 文件中定义的方法。这也被称为 `implementation` 文件。以下截图展示了实现文件中使用的代码：![构建我们的第一个iPhone应用](img/1829OT_01_10.jpg)
- en: 'Once again, let''s understand the code line by line:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次逐行理解代码：
- en: '`#import "ViewController.h"`: This imports our `.h` class (interface class).'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#import "ViewController.h"`: 这导入了我们的 `.h` 类（接口类）。'
- en: '`@implementation ViewController`: From this snippet, our implementation of
    the method starts. The method that we declare in the interface file will be implemented
    here. It also contains some inbuilt methods such as `–(void)viewDidLoad`, `-(void)didRecieveMemoryWarning`,
    and so on. We can code inside these methods as needed. If we choose the **Empty
    application** template, then these inbuilt methods won''t be provided.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@implementation ViewController`: 从这个片段开始，我们的方法实现。在接口文件中声明的我们将在这里实现。它还包含一些内置方法，如
    `–(void)viewDidLoad`、`-(void)didRecieveMemoryWarning` 等。我们可以在这些方法中按需编写代码。如果我们选择
    **Empty application** 模板，则不会提供这些内置方法。'
- en: '`UIAlertView`: Alert views are the pop-up views or messages that appear over
    the current view. We can use this by making an object of it. Here, `Alert` is
    an object. `alloc` is a keyword use to allocated memory for an object.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIAlertView`: 弹出视图是出现在当前视图之上的弹出窗口或消息。我们可以通过创建它的对象来使用它。在这里，`Alert`是一个对象。`alloc`是一个关键字，用于为对象分配内存。'
- en: '`[Alert show]`: This snippet is used to display the pop up over the screen.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Alert show]`: 这个片段用于在屏幕上显示弹出窗口。'
- en: Now we have to connect this button to the method that we declare. Without connecting
    the button, it won't work. Use the following steps to connect the button.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们必须将这个按钮连接到我们声明的那个方法。如果不连接按钮，它将不会工作。使用以下步骤来连接按钮。
- en: Right-click on the button. A black pop-up window will appear. Select **Touch
    Up Inside** and connect it to **View Controller**, as shown in the following screenshot.
    After releasing the mouse, select **showMessage** from the pop up.![Building our
    first iPhone app](img/1829OT_01_11.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击按钮。会出现一个黑色弹出窗口。选择**Touch Up Inside**并将其连接到**View Controller**，如图所示。释放鼠标后，从弹出窗口中选择**showMessage**。![构建我们的第一个iPhone应用](img/1829OT_01_11.jpg)
- en: Now, your button is connected to the `Alert` method. This is the time to execute
    your project. Run your project and click on the **Hello** button. Your output
    will look like the following screenshot:![Building our first iPhone app](img/1829OT_01_12.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的按钮已经连接到了`Alert`方法。现在是执行你的项目的时候了。运行你的项目并点击**Hello**按钮。你的输出将类似于以下截图：![构建我们的第一个iPhone应用](img/1829OT_01_12.jpg)
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned the basics of iOS, such as methods, arrays, properties,
    delegates, and so on. After this chapter, we will also be able to use Xcode, and
    we can make simple apps using the UI component. In the next chapter, we will learn
    more about components.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了iOS的基础知识，例如方法、数组、属性、代理等。在本章之后，我们也将能够使用Xcode，我们可以使用UI组件制作简单的应用。在下一章中，我们将学习更多关于组件的内容。
