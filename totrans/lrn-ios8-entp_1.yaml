- en: Chapter 1. Getting Started with iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mobile industry is the fastest growing domain among other IT domains. iOS
    plays a key role in the mobile industry; nowadays, even the key IT players are
    incorporating mobility in the enterprise way. This title will help you understand
    the basics of iOS development and its implementation from the perspective of enterprises.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with iOS development, we will need the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: A Mac system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The iOS SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basically, iOS development is based on the Objective-C language. Objective-C
    is an extension of the C programming language; this includes the **OOP** (**object-oriented
    programming**) concept and adds small-talk style messaging to C. Xcode is built
    to help you build great apps for iPad, iPhone, and Mac. Xcode is an **IDE** (**Integrated
    Development Environment**) for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download Xcode from the Apple store as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with iOS](img/1829OT_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Xcode option
  prefs: []
  type: TYPE_NORMAL
- en: It is free; after downloading Xcode, it automatically appears in the launch
    pad. Xcode provides different features such as coding, design, a user interface,
    and testing for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Interface and implementation classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of methods in iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datatypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Property and synthesize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delegates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interface and implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Objective-C, there are two types of files that represent a single class:
    one is the `interface` file and the other one is the `implementation` file. In
    the `interface` file, the declaration of a method and variable is done; in the
    `implementation` file, we define this method and use the declared variable.'
  prefs: []
  type: TYPE_NORMAL
- en: Code snippets for interface and implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the code snippet for the `interface` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `MyClass.h` file is an `interface` class. `NSObject` is a root class of
    all the classes, and it is a must to import the `NSObject` class. The `@end` keyword
    indicates that our interface block is completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is our `implementation` class named as `MyClass.m`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Types of methods in iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The methods that we declare in the `interface` file are defined in the `implementation`
    file. Methods are declared in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two methods in iOS: one is the class method and the other is the
    instance method. In the class method, we do not have to create an object; we can
    directly access these methods using their class names. The class method is indicated
    by the `+` symbol. We can find static methods in languages such as Java and C++,
    and we will find class methods in languages such as Objective-C and Ruby. The
    difference between the static and class methods is that they have different language
    concepts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The principal differences are:'
  prefs: []
  type: TYPE_NORMAL
- en: Static methods are shared between all instances (this doesn't exist in Objective-C).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The class method is a method on a class. In languages such as Objective-C and
    Ruby, a class itself is an instance of another class (metaclass). Using + before
    a method declaration means that the method will be defined on the class. Technically,
    it''s just an instance method on a different object. The syntax for the class
    method is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the instance method, we have to create an object. We can''t access the instance
    method without creating an object. Memory is allocated for an object. The `alloc`
    keyword is used to allocate memory. The following syntax is used for the instance
    method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An object is created in the `implementation` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used the `alloc` and `init` keywords. The `alloc` keyword is used to
    allocate memory to the object, and the `init` keyword is used to initialize that
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Important datatypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like any other programming language, iOS also has different datatypes such
    as `int`, `float`, `double`, `char`, and `id`. Datatypes are used to specify the
    kind of data that is being stored in a variable. There are four important datatypes
    in iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NSString`: This is used to represent a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSInteger`: This is used to declare an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CGFloat`: This is used to declare float values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BOOL`: This is used to declare a Boolean (yes or no) value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Array is a collection of homogeneous datatypes with contiguous memory allocation.
    In iOS, arrays are of two types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NSArray`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSMutableArray`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSArray
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NSArray` is an immutable array. In Objective-C, by default, arrays are immutable,
    that is, as the name indicates, it''s object can''t be changed or removed after
    the initialization of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: NSMutableArray
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NSMutableArray` is a subclass of `NSArray`. This is a modifiable array, and
    its object can be removed or modified after the initialization of array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The concept of String is the same as in C. String also has two types: `NSMutableString`
    and `NSString`. Consider the following example for the `NSString` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Property and Synthesize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The properties of an object are defined to let other objects use or change
    their state. However, in object-oriented programming, it''s not possible to access
    the internal state of an object directly from outside the class (except public
    accessors). Instead, accessor methods (getters and setters) are used to interact
    with the objects. The goal of the `@property` is to make it easier to create and
    configure properties by automatically generating these accessor methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@property`: This method implements the setter/getter methods in our code automatically;
    we don''t have to write the code manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@synthesize`: This method synthesizes the properties with the given attributes,
    and the compiler will generate the setter and getter methods for our variables.
    However, now we do not use `synthesize`; instead of `@synthesize`, we use an underscore
    (`_`) or the `self` keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s understand these methods with a code snippet. This is the interface
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the implementation file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In Objective-C, every object holds a reference count. When an object is created,
    its reference count increases by one; when it releases the object, the reference
    count decreases by one. When the reference count reaches zero, it deallocates
    the memory by itself. The attributes of `@property` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`atomic`: By default, every property is atomic. It will ensure that a whole
    value is always returned by the getter method or set by the setter method. Only
    a single thread can access a variable to get or set a value at a time. So, atomic
    is also thread-safe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nonatomic`: In `nonatomic`, there is no guarantee that the value returned
    from a variable is the same one that the setter method sets. At the same time,
    more than one single thread can access a variable at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strong`: The `strong` attribute owns the object. The compiler will ensure
    that any object that we assign to this property will not be destroyed as long
    as we (or any other object) point to it with a strong reference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weak`: In a `weak` reference, we don''t want to have control over the object''s
    lifetime. The object we are referencing weakly only lives on because at least
    one other object holds a strong reference to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retain`: This specifies that `retain` should be invoked on the object upon
    assignment. It takes ownership of an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assign`: This specifies that the setter uses simple assignment. It uses an
    attribute of the scalar type, such as `float` or `int`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`copy`: This copies an object during assignment and increases the retain count
    by one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following simple example using the attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Delegates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A delegate is a tool through which one object can communicate with another;
    in turn, the objects can stay connected to each other. It is a method by which
    one object can act on behalf of another object. The delegating object keeps a
    reference to the other object and, at the appropriate time, sends a message to
    it. The message informs the delegate of an event that the delegating object is
    about to handle or that is to be handled.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the following example of how to use a delegate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the `FirstViewController.h` interface file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s define the `FirstViewController.m` implementation file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will define the `SecondViewController.h` interface file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will define the `SecondViewController.m` implementation file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Building our first iPhone app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s make our first iPhone app by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode; you will see the following screen. In the panel on the right-hand
    side, you can see your existing projects. You can open your project directly by
    selecting from the list of projects; for a new project, on the other hand, select
    **Create a new Xcode project**.![Building our first iPhone app](img/1829OT_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are eight templates provided by Xcode. In the panel on the left-hand
    side, you can see there are two options: **iOS** and **OS X**. **iOS** is for
    Apple touch devices, and **OS X** is for desktop devices. Initially, choose **Single
    View Application**. Then, click on **NEXT**, as shown in the following screenshot:![Building
    our first iPhone app](img/1829OT_01_03.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, it is time to give a name to your project and choose **iPhone** from the
    **Devices** dropdown. Then, click on **Next**. The following screenshot will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Building our first iPhone app](img/1829OT_01_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Save your project in the directory of your choice:![Building our first iPhone
    app](img/1829OT_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, your editor will look like the following screenshot. In the left-hand-side
    panel, there is a declaration of classes. Select the storyboard from the left-hand-side
    panel. Storyboard provides the view to your application.![Building our first iPhone
    app](img/1829OT_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is your storyboard. At present, it is an empty view controller. Storyboard
    has many areas, such as the navigation area, editor area, utility area, and debug
    area, that are described as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Navigation area**: In this pane, there are various navigators that we can
    switch between using the Navigator selector bar. The three navigators that we
    will use a lot are the Project, Search, and Issue navigators.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor area**: The editor area is where we''ll probably be spending most
    of our time! This is where all the coding happens.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Utility area**: The Xcode utility area comprises two panes: the Inspector
    pane and the Library pane. The Inspector pane will give us details about the file.
    However, when we are looking at the storyboard, the Inspector pane will show us
    the different attributes that you can modify for a selected element. The Library
    pane won''t be very useful until we look at a storyboard. When we use the Interface
    Builder part of Xcode, we can drag UI elements from the Library pane onto the
    editor area to add them to our user interface.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug area**: The debug area will show us the console output and the state
    of various variables when you run your application.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see an arrow before the view; this indicates
    that the view is a starting view of the application. When the application launches,
    this view will launch first:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Building our first iPhone app](img/1829OT_01_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: On the right-hand side, a lot of components, such as button, label, and text
    fields, are present (we will learn about these components in the upcoming chapters).
    Drag-and-drop a button from the right-hand-side panel as shown in the following
    screenshot. Rename it by double-clicking on it; give it any name. For example,
    name it `Hello`.![Building our first iPhone app](img/1829OT_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is all our UI part. Now, let's move on to the coding section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to `ViewController.h` and write the following method in it. The `.h` file
    is an interface file of our project where we declare the property and method.
    If we want to declare variables, then they are declared under the braces of the
    interface; the property and methods are defined outside the braces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Coming back to our program, we have to describe one method, `showMessage`, where
    we describe the `UIAlertview` function; this appears as a pop-up window with a
    message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows the editor area with the preceding code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Building our first iPhone app](img/1829OT_01_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Let''s understand the code line by line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`#import <UIKit/UIKit.h>`: This is a header file that we import in our code.
    `UIKit` is a framework that contains all the inbuilt library files for the UI
    part. The `UIKit` header file imports all the other header files available in
    the `UIKit` framework; after importing this header file, we don''t have to import
    other `UIHeader` files such as `UIViewController.h`, `UIView.h`, or `UIButton.h`
    manually.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@interface ViewController: UIViewController`: This is an interface for the
    `ViewController.h` class. It inherits the `UIViewController` class, which is used
    to handle the flow of our screen or view.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(IBAction)showMessage`: This is a method that we created manually. When we
    want to perform some action on tapping a button, we will use `IBAction`. This
    is a kind of return type in iOS. Here, the name of the method is `showMessage`
    (we can give any name). `IBAction` tells the UI Builder that the method can be
    used as a selector (event receiver).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@end`: This code indicates that our interface part is over.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, go to `ViewController.m` and describe the method that is defined in the
    `.h` file. This is also called an `implementation` file. The following screenshot
    illustrates the code used in the implementation file:![Building our first iPhone
    app](img/1829OT_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once again, let''s understand the code line by line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`#import "ViewController.h"`: This imports our `.h` class (interface class).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@implementation ViewController`: From this snippet, our implementation of
    the method starts. The method that we declare in the interface file will be implemented
    here. It also contains some inbuilt methods such as `–(void)viewDidLoad`, `-(void)didRecieveMemoryWarning`,
    and so on. We can code inside these methods as needed. If we choose the **Empty
    application** template, then these inbuilt methods won''t be provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIAlertView`: Alert views are the pop-up views or messages that appear over
    the current view. We can use this by making an object of it. Here, `Alert` is
    an object. `alloc` is a keyword use to allocated memory for an object.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[Alert show]`: This snippet is used to display the pop up over the screen.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have to connect this button to the method that we declare. Without connecting
    the button, it won't work. Use the following steps to connect the button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the button. A black pop-up window will appear. Select **Touch
    Up Inside** and connect it to **View Controller**, as shown in the following screenshot.
    After releasing the mouse, select **showMessage** from the pop up.![Building our
    first iPhone app](img/1829OT_01_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, your button is connected to the `Alert` method. This is the time to execute
    your project. Run your project and click on the **Hello** button. Your output
    will look like the following screenshot:![Building our first iPhone app](img/1829OT_01_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the basics of iOS, such as methods, arrays, properties,
    delegates, and so on. After this chapter, we will also be able to use Xcode, and
    we can make simple apps using the UI component. In the next chapter, we will learn
    more about components.
  prefs: []
  type: TYPE_NORMAL
