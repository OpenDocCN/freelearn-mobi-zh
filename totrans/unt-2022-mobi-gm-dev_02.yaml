- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Project Setup for Android and iOS Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a project to start with, but currently, it’s built with playing
    on a PC in mind. However, since this book is about mobile development, it’s very
    important to have the game working on the device itself before we get much further.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go through all of the setups we need to perform to
    deploy the project in its current state to our mobile devices. At the time of
    writing this book, mobile development is typically done either for Android or
    iOS, so we will cover those two platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will be split into a number of topics. The chapter itself will
    be a simple step-by-step process from beginning to end. The following is a list
    of the tasks we will perform:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the **Build** **Settings** menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a project for a PC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting your project to Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the Android APK with an emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting the project on your Android device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity iOS installation and Xcode setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a project for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the project via the iOS simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the *Unity Editor system* *requirements* section.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to deploy to an Android device, you can use macOS, Linux, or Windows,
    and depending on the features you wish to use, it is possible to export your game
    in such a way as to run apps on Android 5.1 Lollipop and above.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the different types of Android versions that are supported,
    check out [https://docs.unity3d.com/ScriptReference/AndroidSdkVersions.html](https://docs.unity3d.com/ScriptReference/AndroidSdkVersions.html).
  prefs: []
  type: TYPE_NORMAL
- en: To develop for an iOS device, in addition to the device itself running iOS 12
    or later, you’ll need to do some work on a Macintosh computer that runs OS X 10.13
    High Sierra or a later version for an Intel-based Macintosh and Big Sur 11.0 for
    a Macintosh using Apple silicon. I’ll be using 12.3.1 macOS Monterey. If you do
    not have one, it is possible to develop your game using Windows and, when you
    want to publish the game, bring your project to a Macintosh to do the final export.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are some other potential ways to build iOS apps using Windows, but they
    are not within the scope of this book. One possible option is to use Unity’s CI/CD
    Cloud Build Automation & Deployment Tools service, which automatically creates
    versions of your game. For more information, check out [https://unity.com/solutions/ci-cd](https://unity.com/solutions/ci-cd).
  prefs: []
  type: TYPE_NORMAL
- en: Another potential option would be to rent a Macintosh via the cloud to do the
    building yourself. For more information on that and other potential options, check
    out [https://mindster.com/how-develop-ios-apps-windows/](https://mindster.com/how-develop-ios-apps-windows/).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Build Settings menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are times during development when you may want to see what your game
    looks like outside of the editor. It can give you a sense of accomplishment. I
    know I felt that way the first time I pushed a build to a console devkit. Whether
    it’s for PC, Macintosh, Linux, web player, mobile, or console, we have to go through
    the same menu – the **Build** **Settings** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start off by opening up the project we created in [*Chapter 1*](B18868_01.xhtml#_idTextAnchor015),
    *Building Your Game*. In addition, open the scene we created (`SampleScene.unity`,
    which is inside the `Scenes` folder):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![\uFEFFFigure 2.1 –The SampleScene file](img/B18868_02_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 –The SampleScene file
  prefs: []
  type: TYPE_NORMAL
- en: Since the scene is our gameplay, let’s rename the file by first opening the
    `Scenes` folder in the `SampleScene` object, and selecting `Gameplay` and then
    press the *Enter* key to submit the change. Unity will ask whether you want to
    reload the scene. Do so by clicking **Reload**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From here, we will open the **Build Settings** menu by selecting **File** |
    **Build Settings**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You may alternatively press *Ctrl* + Shift + *B* or *Command* + Shift + *B*
    to bring the menu up as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The Build Settings menu](img/B18868_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – The Build Settings menu
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, you will notice that the **Build Settings** menu
    came up. This menu contains three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenes In Build** (top): This window contains the scenes in our project that
    we want to include when we build our project. This ensures that things such as
    test levels won’t be included unless specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform** (bottom left): This is a list of all of the platforms to which
    you can export your game. The Unity logo shows up on the current platform you’re
    compiling for. To change your platform, you’ll need to select it from this list
    and then click on the **Switch Platform** button, which appears below the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Options** (bottom right): To the right of the **Platform** section, you’ll
    see some settings that can be tweaked based on how you want the build to work,
    with certain options that change based on the platform you will work with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By default, we have no scenes in our build, so let’s go ahead and change that.
    Click on the `Scenes/Gameplay` level appear in the list at index **0**, which
    means that when your game is played, this level will be the first one to load:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Adding the Gameplay Scene to Scenes In Build](img/B18868_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Adding the Gameplay Scene to Scenes In Build
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how the build settings work, let’s see how to build the project
    for a PC to understand the general case before continuing to build our mobile
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You may also add scenes to the **Scenes In Build** section by dragging and dropping
    them from the **Project** window. You may also drag the scenes to reorder them
    however you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Building a project for a PC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, our platform is set to **Windows, Mac, Linux**. Just to verify
    that everything is working correctly, let’s go ahead and get the game working
    on our own platform before moving to mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started, we will select the **Build** option. In my case, I’ll be exporting
    the project to Windows, but the process is similar for macOS and Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once this is done, a window will pop up asking for a name and a location to
    put the game in. I’m going to create a new `Export` folder located in the same
    folder that contains `Assets` and `Library`, so it won’t show up in the **Project**
    window, but it will be in the same folder as my project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The Export folder](img/B18868_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – The Export folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Select Folder** and wait for it to finish. Once it’s done, a window
    should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figu\uFEFFre 2.5 – Folder created](img/B18868_02_05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Folder created
  prefs: []
  type: TYPE_NORMAL
- en: We have the executable, but we also have a data folder containing all the assets
    for our application (right now, it’s called `MobileDev_Data`). You must include
    the data folder and the other files created with your game, or it will not run.
  prefs: []
  type: TYPE_NORMAL
- en: If you build for Mac, it will bundle the app and data altogether, so once you
    export the game, all you need to provide is the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you double-click on the `.exe` file to run the game, you’ll be taken to
    the proper game screen, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Running the game](img/B18868_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Running the game
  prefs: []
  type: TYPE_NORMAL
- en: With that, we should be able to control and play the game as we would usually
    do. This is great!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You’ll have to use *Alt* + *F4* (*Command* + *Q* on Macintosh) to quit the game,
    and you can switch to windowed mode by pressing *Alt* + *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed the universal ways of building a project, let’s dive
    into the specifics of different platforms. In the next section, we will discuss
    getting our project onto an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a project for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have all of the setup done, we can open Unity with our project and
    export it for Android devices. In this section, we will first check whether we
    have Android Build Support installed, and then we will update the build and player
    settings to export our project. So, let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Android Build Support for Unity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, if you haven’t done so already, you’ll need to select to add
    **Android Build Support** as an option when you install Unity. If you have installed
    it, you can skip this section. If you did not install it when doing the initial
    installation, we will cover the installation in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Close the Unity Editor and open the Unity Hub and select the **Installs** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From there, click on the gear icon to the right of your current version of
    Unity and select the **Add** **modules** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Selecting the Add Modules option](img/B18868_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Selecting the Add Modules option
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the **Android Build Support** option, which should also check the **Android
    SDK and NDK Tools** and **OpenJDK** options. Afterward, click on the **Continue**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 –  Checking the Android Build Support option](img/B18868_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Checking the Android Build Support option
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll be brought to a license terms page. Read it over and if you agree to
    it, check the agreement box and click on the **Install** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2.9 –Android SDK and NDK License Terms from Goo\uFEFFgle](img/B18868_02_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 –Android SDK and NDK License Terms from Google
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait for it to finish installing. Once finished, you should see the Android
    logo at the bottom of your installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – The newly added platform](img/B18868_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – The newly added platform
  prefs: []
  type: TYPE_NORMAL
- en: This means that Android Build Support has now been added to our version of Unity,
    and we can build projects there. Next, we will see how to build the project for
    Android and the required settings.
  prefs: []
  type: TYPE_NORMAL
- en: Updating build and player settings for Android projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have Android support, let’s open up our project again and change
    the platform we are developing for:'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we will dive into Unity and move into our **Build Settings**
    menu once again by going to **File** | **Build Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Android** option from the **Platform** list and then click on
    the **Switch Platform** button to make the change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Location of the Switch Platform button](img/B18868_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Location of the Switch Platform button
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this will make Unity reimport all of the assets in our game, so this
    may be time-consuming when you start to build larger projects. Once this is complete,
    you should notice that the Unity logo is now next to the **Android** option, signifying
    that’s the platform to be built for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Switched to the Android platform](img/B18868_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Switched to the Android platform
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in order to be able to build our project, we must set the bundle identifier
    for our game, which is a string that identifies the app. It’s written like a URL
    in reverse, for example, `com.yourCompanyName.yourGameName`. To modify this, we’ll
    need to open up the **Player Settings** menu, which we can access by clicking
    on the **Player Settings…** button in the bottom-left part of the **Build Settings**
    menu or by going into **Edit** | **Project Settings** | **Player**. You’ll note
    that the menu appears as a new window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2\\. \uFEFF13 – The Player Settings menu](img/B18868_02_13.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2\. 13 – The Player Settings menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’re in the **Android** mode (note the text on the title bar of the
    Unity Editor), we can change these properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – The Android mode](img/B18868_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – The Android mode
  prefs: []
  type: TYPE_NORMAL
- en: We’ll discuss more of these in a later chapter, but for now, change your `JohnPDoran`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then scroll down until you get to the **Other Settings** option. From there,
    you’ll see the **Package Name** property is using whatever we set for **our Company
    Name** and **Product Name** properties, but we can customize it if we’d like by
    checking the **Override Default Package Name** property; we just have to ensure
    that it is different than the default value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There’s also a **Minimum API Level** option; make sure that your option is
    set to the same version as your phone or earlier, depending on what you want to
    support. Note that the earlier you go, the fewer things you’ll have access to,
    but your project will be able to support more phones:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Player settings adjustments](img/B18868_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Player settings adjustments
  prefs: []
  type: TYPE_NORMAL
- en: 'Close the `Export` folder we created earlier. It will ask for the name you’d
    like the file to have. I will use `MobileDev` as we did previously because instead
    of a `.exe` file, it will create a `.``apk` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2.16 –\uFEFF Android APK created](img/B18868_02_16.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Android APK created
  prefs: []
  type: TYPE_NORMAL
- en: Wait a bit, and once it’s finished, you should have a new `.apk` file located
    in the folder. Of course, just having the APK file doesn’t do much if we can’t
    put it on our actual phone, so in the next section, we will enable our phone to
    test the game on our device.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Android APK with an emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the best way to test an Android game is on an actual Android device, it
    is also possible to test the game out on an emulator, which is a medium through
    which we can have our computer run software that was created for Android devices.
    There are several Android emulators available for Windows at the time of writing,
    but the one that I’ve had the most success with is one called *LDPlayer*, a lightweight
    and fast Android emulator; however, it does contain ads due to it being free.
    For those on an Intel-powered Macintosh, you can use *BlueStacks* ([https://www.bluestacks.com/download.html](https://www.bluestacks.com/download.html)),
    but at the time of writing, there are no Android emulators available on Apple
    silicon-powered Macintoshes. This section is completely optional; if you’d rather
    test on an actual device, skip ahead to the *Putting the project on your Android
    device* or the *Unity for iOS setup and Xcode* *installation* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the game on an emulator, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From your web browser, go to [https://www.ldplayer.net/](https://www.ldplayer.net/).
    From there, click on the **Download LDPlayer** **9** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.17 – The LDPlayer website](img/B18868_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – The LDPlayer website
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the program is downloaded, open the installer, go through the standard
    installation process, and click the **Try Now** button once you’ve finished installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.18 – The Welcome to LDPlayer menu](img/B18868_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – The Welcome to LDPlayer menu
  prefs: []
  type: TYPE_NORMAL
- en: From the welcome screen, click on the **X** in the top right of the **Welcome
    to** **LDPlayer** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag and drop the `MobileDev.apk` file from your `Export` folder onto the LDPlayer
    menu. If all goes well, you should see the **MobileDev** icon show up on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Game added to the home screen](img/B18868_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Game added to the home screen
  prefs: []
  type: TYPE_NORMAL
- en: From there, you can click the icon to start the game!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.20 – The game is running on the emulated device](img/B18868_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – The game is running on the emulated device
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the game is running perfectly on the emulated device! We can
    click on the **X** from the **MobileDev** tab whenever we are finished playing.
    Now that we’ve seen how easy it is to run the game on an emulator, let’s see how
    to do it on an actual device!
  prefs: []
  type: TYPE_NORMAL
- en: Putting the project on your Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps may be different for you depending on your Android version
    and your specific phone, but here is a general set of steps to be able to sideload
    our Android app to our device:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Android device, you’ll need to go to your **Settings** app. From there
    select the **Apps** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.21 – The Settings | Apps location](img/B18868_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – The Settings | Apps location
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, scroll down till you get to the **Special app access** section
    or similar, and then tap on it to go into the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.22 – The Special app access option](img/B18868_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – The Special app access option
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside there, you’ll see a section called **Install unknown apps**. Enter this
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.23 – The Install unknown apps option](img/B18868_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – The Install unknown apps option
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be uploading our app to the device’s files, so we will want to enable
    **Install unknown apps** from the **Files** app. Select it and then enable it
    from the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.24 – Enabling the Install unknown apps option](img/B18868_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – Enabling the Install unknown apps option
  prefs: []
  type: TYPE_NORMAL
- en: With this enabled, your device can now install the `.apk` file, but now you
    will need to move your game over to the device to install it. The easiest way
    is to transfer it to your device via USB; we’ll do that now.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For those of you who’d rather not use USB, I would suggest using a cloud storage
    app, such as Dropbox, to upload the `.apk` file and then download it from the
    app and install it that way. There’s also another tool called ADB that can send
    files to your phone via USB or Wi-Fi. For more information on that and the rest
    of the Android build process, check out [https://docs.unity3d.com/Manual/android-BuildProcess.html](https://docs.unity3d.com/Manual/android-BuildProcess.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect your phone to your computer via USB. Upon being connected, your phone
    will show a notification that it’s connected via USB for charging. Click on that
    notification and change the option to **File Transfer**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2\. 25 – USB Preferences](img/B18868_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2\. 25 – USB Preferences
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, go back to your computer and go into **Windows Explorer/Finder**,
    and then go to the **Devices and drives** section; you should see your device
    appear there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.26 – Selecting our Android device](img/B18868_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – Selecting our Android device
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on your device and access the internal shared storage section.
    Then, drag the `.apk` file we made before into this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.27 – Placing the APK file on the Android device](img/B18868_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.27 – Placing the APK file on the Android device
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, back in your phone, open the **Files/File Explorer** app. From there,
    scroll down to the bottom of the menu and select the **Internal** **storage**
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.28 – The Internal storage location](img/B18868_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.28 – The Internal storage location
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, select your `.apk` file from the listed files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2.29 – Selecting the a\uFEFFpplication](img/B18868_02_29.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.29 – Selecting the application
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll be asked to confirm the installation. Hit the **Install** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.30 – Installing the app](img/B18868_02_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.30 – Installing the app
  prefs: []
  type: TYPE_NORMAL
- en: 'You may see a window pop up that mentions that Play Protect doesn’t recognize
    the developer. We will see how to solve this issue later on, in *Chapter14 Submitting
    Games to App Stores*, but for now, click **INSTALL ANYWAY** and wait for the installation
    to finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.31 – INSTALL ANYWAY](img/B18868_02_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.31 – INSTALL ANYWAY
  prefs: []
  type: TYPE_NORMAL
- en: Your phone may also ask if you want to send the app for scanning by Play Protect.
    Since we will be creating several versions of the project while working through
    this book, it’s likely not needed, so I would select **Don’t Send**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Of course, I can’t note the steps for all devices as some have different drivers
    that are required or additional steps that need to be performed in order to open
    files on the device. If these steps do not work and you do not know how to get
    files onto your device and access them and add new ones to them, go ahead and
    search on your internet search engine of choice for **phone name file transfer**,
    replacing the phone name with your phone’s name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it’s finished, go ahead and click on the **Open** button to open our game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.32 – The game running on an Android device](img/B18868_02_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.32 – The game running on an Android device
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the game is on there, and it’s working. Granted, you can’t control
    it yet, and there are many new things that you can’t do, but this lets you know
    that you’ve set up your Android device properly. Of course, now that you have
    your game on an Android device, you now need to get it working on iOS, which we
    will cover in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Unity for iOS setup and Xcode installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Android, there’s a lot of setup effort required, but building and getting
    a game onto your device is less work, whereas, with iOS, there’s less work to
    do on the setup and more involvement with getting the game actually onto the device.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, you had to have a paid Apple Developer license to get your game
    onto an iOS device. Although that’s still required to get the game on the App
    Store, you are no longer required to get it for testing. Note that the free option
    doesn’t have everything available to you, most notably **in-app purchases** (**IAPs**)
    and the Game Center; however, the game should work just fine on your device. We
    will go over how to adjust your project to reflect being in the Apple Developer
    portal in [*Chapter 13*](B18868_13.xhtml#_idTextAnchor369), *Building a Release
    Copy of Our Game*, when we cover putting our project on the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'To develop for an iOS device, in addition to the device itself running iOS
    12 or later, you’ll also need to do some work on a Macintosh computer that runs
    OS X 10.13 High Sierra or a later version for an Intel-based Macintosh and Big
    Sur 11.0 for a Macintosh using Apple silicon. I’ll be using 12.3.1 macOS Monterey.
    Just like working with Android, we’ll also need to do some setup before we can
    actually do the exporting. Let’s get started on that now:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, if you haven’t done so already, you’ll need to add **iOS Build
    Support (*)** as an option when you are installing Unity. If you did not install
    it when doing the initial installation, you can open up the Unity Hub and select
    the **Installs** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From there, click on the three dots to the right of your current version of
    Unity and select the **Add** **modules** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.33 – The Unity Hub Installs screen](img/B18868_02_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.33 – The Unity Hub Installs screen
  prefs: []
  type: TYPE_NORMAL
- en: 'From the menu that pops up, check the **iOS Build** **Support** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.34 – Adding iOS Build Support](img/B18868_02_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.34 – Adding iOS Build Support
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Install** button and wait for the installation to finish. Once
    it''s complete, you should see some text in the platforms list for iOS support
    appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.35 – iOS support added](img/B18868_02_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.35 – iOS support added
  prefs: []
  type: TYPE_NORMAL
- en: This module allows you to be able to export your projects for iOS. Since I’ll
    mainly use my Windows machine, I’m only adding iOS support, but you can export
    both iOS and Android apps from your Macintosh computer.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also need to have `Xcode` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.36 – Searching for “xcode”](img/B18868_02_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.36 – Searching for “xcode”
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, you’ll see the **Xcode** program at the top right of the page.
    Click on it and then on the **Install/Update** button (in my case, a cloud icon)
    and go through the installation process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may need to enter your Apple ID information; go ahead and do so and then
    wait for it to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have an Apple ID, you can get one from [https://appleid.apple.com/](https://appleid.apple.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Once Xcode is installed, open it up. There will be a license agreement for Xcode
    and the iOS SDK; go ahead and click on **Agree**. It’ll then begin installing
    components that are needed for it to work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you open Xcode, you’ll be brought to a welcome screen, but we want to
    do some setup first. From the top menu bar, go ahead and select **Xcode** | **Preferences**
    (or press *Command* + *,*). From there, click on the **Accounts** button. This
    will display all of the Apple IDs that you want to be able to use in Xcode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.37 – The Accounts window](img/B18868_02_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.37 – The Accounts window
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **+** icon at the bottom left of the screen and then select **Apple
    ID** when it asks what kind of account to create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2.38 – Adding an Apple ID a\uFEFFccount](img/B18868_02_38.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.38 – Adding an Apple ID account
  prefs: []
  type: TYPE_NORMAL
- en: From the menu that pops up, add your Apple ID information, and you should see
    it appear on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you select the name, you’ll see additional information on the right side,
    such as what teams you are on. If you are not enrolled in the Apple Developer
    Program, it’ll just be a personal team, but if you are paying for it, you should
    see additional teams there as well.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have completed the setup and installation of iOS and Xcode, let’s
    continue to build our project.
  prefs: []
  type: TYPE_NORMAL
- en: Building a project for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While there are some similarities to working with Android, some differences
    are very important to note, so keep that in mind while reading this section. Let’s
    build our project for the iOS device using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we will dive into Unity (switching **Target** to **MacStandalone**
    if needed) and then move into our **Build Settings** menu once again by going
    to **File** | **Build** **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **iOS** option from the **Platform** list and then click on the
    **Switch Platform** button to make the change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2.39 – Selecting the iOS option \uFEFFfrom the Platform list](img/B18868_02_39.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.39 – Selecting the iOS option from the Platform list
  prefs: []
  type: TYPE_NORMAL
- en: Note that this will make Unity reimport all of the assets in our game, which
    may be time-consuming as you build larger and larger projects. This now also means
    that when we build our project, it will create an Xcode project instead of just
    an app, which we will need to open and work with once it’s built.
  prefs: []
  type: TYPE_NORMAL
- en: If we didn’t do so earlier when building for Android, we must modify the properties
    needed to modify the bundle identifier for our game. To modify this, we’ll need
    to open up the **Player Settings** menu, which we can get to by clicking on the
    **Player Settings...** button in the **Build Settings** menu or by going to **Edit**
    | **Project Settings** | **Player**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top of the menu, change the `JohnPDoran`. Then scroll down until you
    get to the **Other Settings** option, and from there, you’ll see the **Package
    Name** property is using whatever we set for our **Company Name** and **Product
    Name** properties, but we can customize it if we’d like by checking the **Override
    Default Package** name property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you have already changed this property when building for Android, it will
    already be done; there’s no need to do this again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can try to build the project by clicking on the `Export` folder we
    created earlier—in this case, I created a new folder inside of it and named it
    `MobileDev_iOS`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2.40 – Selecting a build location\uFEFF](img/B18868_02_40.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.40 – Selecting a build location
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can press the down arrow button to search for folders in the Finder window
    that pops up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project has been built, we will be taken to a Finder window at the
    location where we created the project. From there, we can double-click on the
    `.xcodeproj` file to open the project inside Xcode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.41 – Location of the build’s Xcode project](img/B18868_02_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.41 – Location of the build’s Xcode project
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, after waiting for everything to load in, you’ll notice a yellow triangle
    with a **!** in the center of it in the top-center console. If you click on it,
    you’ll see some information appear on the left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click on the **Update to recommended settings** option on the left-hand
    side of the screen and then click on the **Perform Changes** button in the window
    that pops up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.42 – Perform Changes](img/B18868_02_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.42 – Perform Changes
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, go to the middle of the window, and under **TARGETS**, select the **Unity-iPhone**
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.43 – Selecting the Unity-iPhone option](img/B18868_02_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.43 – Selecting the Unity-iPhone option
  prefs: []
  type: TYPE_NORMAL
- en: Afterward, in the **Signing & Capabilities** section, check the **Automatically
    manage signing** option and click on **Enable Automatic** when the popup appears.
    Then, assign your team to your profile in the window that pops up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all the preceding steps are done, plug in your phone via USB, and when
    you unlock it, it may ask if you wish to trust this device; hit the **Trust**
    button. After loading all of the symbols it needs (wait until the top-middle section
    says **Ready**), at the top right, instead of **Generic iOS Device**, change it
    to the device you’ve connected. You may need to unplug and replug your phone after
    installing the symbols to have it pick up the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you click the **Play** button, a window will appear, noting the device
    it will be building to. Once you’ve confirmed all the details are correct, click
    the **Run** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.44 – The Play settings window](img/B18868_02_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.44 – The Play settings window
  prefs: []
  type: TYPE_NORMAL
- en: Your phone may be busy, so you may need to wait a bit before you can build to
    the device. You may get a window asking you to access the key access in your keychain.
    Go ahead and click **Allow**, entering your device password if required. You’ll
    also need to unlock your phone at some point so it can make the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If all goes well, you should see your app automatically start playing on your
    device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.45 – Playing our game on an iOS device](img/B18868_02_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.45 – Playing our game on an iOS device
  prefs: []
  type: TYPE_NORMAL
- en: With that, we also have the game running on the iOS side.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to your home screen, you should notice that the app will now be on
    your iOS device, as you can see in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.46 – The location of the iOS app](img/B18868_02_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.46 – The location of the iOS app
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When building in the following manner, apps will only work for a limited time,
    possibly up to a week without the paid license. If your game crashes immediately
    and it worked correctly beforehand, this is most likely the culprit. Redeploy
    the device again to check whether that is the issue before modifying your actual
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Running the project via the iOS simulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Much like how we were able to use an Android emulator on the PC to play a simulated
    version of our game project, it is also possible to do the same exact thing on
    iOS by using the iOS simulator:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the Unity Editor, go to the **Player** settings. From there, go to
    the **Other Settings** section and change the **Target SDK** property from **Device
    SDK** to **Simulator SDK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.47 – Setting Target SDK to Simulator SDK](img/B18868_02_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.47 – Setting Target SDK to Simulator SDK
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild the project. This time I created a new folder to specify that this
    build was meant for the iOS simulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.48 – Select a build folder](img/B18868_02_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.48 – Select a build folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the new project, and from there, in the top section, you’ll now see a
    simulator device selected instead of the **Any iOS device** option given in the
    previous build. You can also click on the option to open a drop-down list where
    you can select a particular device you’d like to build to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.49 – Selecting a simulator device](img/B18868_02_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.49 – Selecting a simulator device
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have your device selected, press the **Play** button and wait until
    it completes building the project. If all goes well, you should be able to see
    the simulator open up, and you can then play your game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.50 – Playing the game on the simulator](img/B18868_02_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.50 – Playing the game on the simulator
  prefs: []
  type: TYPE_NORMAL
- en: And with that, we’ve seen just how easy it is to build our project in a simulator
    if needed; just make sure to switch the **Target SDK** property back to **Device
    SDK** when making a build for actual devices.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have our game running on Android and iOS devices, and we have learned
    the steps we’ll need to take each time we want to deploy our games on these devices.
  prefs: []
  type: TYPE_NORMAL
- en: While I will not be writing about exporting to both kinds of devices again until
    we get to [*Chapter 13*](B18868_13.xhtml#_idTextAnchor369)*, Building a Release
    Copy of Our Game*, it’s a good idea for you to see how the changes that we will
    make will work with both platforms and keep testing on each platform to make sure
    that your project works correctly and at a frame rate that you are okay with.
  prefs: []
  type: TYPE_NORMAL
- en: This is especially important to note, as running the project on your PC via
    the editor or an emulator will not always accurately represent how the game will
    run on a different device. As a result, you may find that certain aspects of your
    game that run fine on your mobile device will cause your computer to be choppy
    instead. The thing is, you won’t know unless you are always checking the games
    on devices, so I highly advise that you do so.
  prefs: []
  type: TYPE_NORMAL
- en: Our game is working on mobile devices now, but it will not react to anything
    we do on the devices due to how we wrote our input code. In the next chapter,
    we will explore how we can add input to our project as well as the design considerations
    we need to make regarding how the different forms of input will change our game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Mobile-Specific Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part of the book will focus on developing mobile-specific features in your
    Unity project. By the end of this part, you will have all the knowledge necessary
    to create a feature-rich mobile game with a polished UI and integrated monetization
    and social media features.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18868_03.xhtml#_idTextAnchor125), *Mobile Input/Touch Controls*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18868_04.xhtml#_idTextAnchor165), *Resolution-Independent UI*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18868_05.xhtml#_idTextAnchor195), *Advanced Mobile UI*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18868_06.xhtml#_idTextAnchor206), *Implementing In-App Purchases*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18868_07.xhtml#_idTextAnchor232), *Advertising Using Unity Ads*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18868_08.xhtml#_idTextAnchor251), *Integrating Social Media
    into Our Project*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
