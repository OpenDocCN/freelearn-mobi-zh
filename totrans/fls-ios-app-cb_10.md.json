["```swift\n    package {\n    import flash.display.BitmapData; \n    import flash.display.MovieClip;\n     import flash.events.Event;\n    import flash.events.MouseEvent;\n    import flash.media.CameraRoll; \n    public class Main extends MovieClip {\n    private var cameraRoll:CameraRoll; \n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n     cameraRoll = new CameraRoll();\n    cameraRoll.addEventListener(Event.COMPLETE, saved);\n    saveBtn.addEventListener(MouseEvent.MOUSE_UP, pressed); \n    }\n\n    ```", "```swift\n    private function pressed(e:MouseEvent):void {\n    saveBtn.visible = false;\n    var bitmapData:BitmapData = new BitmapData(\n    stage.stageWidth, stage.stageHeight, false);\n    bitmapData.draw(stage);\n    if(CameraRoll.supportsAddBitmapData)\n    {\n    cameraRoll.addBitmapData(bitmapData);\n    }\n    }\n\n    ```", "```swift\n    private function saved(e:Event):void {\n    saveBtn.visible = true;\n    }\n\n    ```", "```swift\n    package {\n     import flash.display.Loader; \n    import flash.display.MovieClip;\n     import flash.events.Event;\n    import flash.events.MediaEvent;\n    import flash.events.MouseEvent;\n    import flash.media.CameraRoll;\n    import flash.media.MediaPromise; \n    public class Main extends MovieClip {\n     private var cameraRoll:CameraRoll;\n    private var loader:Loader; \n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n     cameraRoll = new CameraRoll();\n    cameraRoll.addEventListener(MediaEvent.SELECT,\n    photoSelected);\n    cameraRoll.addEventListener(Event.CANCEL, cancelled);\n    browseBtn.addEventListener(MouseEvent.MOUSE_UP,\n    buttonPressed); \n    }\n\n    ```", "```swift\n    private function buttonPressed(e:MouseEvent):void {\n    browseBtn.visible = false;\n    if(CameraRoll.supportsBrowseForImage)\n    {\n    cameraRoll.browseForImage();\n    }\n    }\n\n    ```", "```swift\n    private function cancelled(e:Event):void {\n    browseBtn.visible = true;\n    }\n\n    ```", "```swift\n    private function photoSelected(e:MediaEvent):void {\n    var photoPromise:MediaPromise = e.data;\n    loader = new Loader();\n    loader.contentLoaderInfo.addEventListener(Event.COMPLETE,\n    photoLoaded);\n    loader.loadFilePromise(photoPromise);\n    }\n\n    ```", "```swift\n    private function photoLoaded(e:Event):void {\n    var mc:Loader = e.currentTarget.loader as Loader;\n    var scale:Number;\n    if(mc.width > mc.height)\n    {\n    scale = stage.stageHeight / mc.width;\n    mc.scaleX = scale;\n    mc.scaleY = scale;\n    mc.x = stage.stageWidth;\n    mc.rotation = 90;\n    addChild(mc);\n    }\n    else\n    {\n    scale = stage.stageWidth / mc.width;\n    mc.scaleX = scale;\n    mc.scaleY = scale;\n    addChild(mc);\n    }\n    }\n\n    ```", "```swift\n    package {\n    import flash.display.MovieClip;\n     import flash.events.Event;\n    import flash.events.MediaEvent;\n    import flash.events.MouseEvent;\n    import flash.media.CameraUI;\n    import flash.media.MediaPromise;\n    import flash.media.MediaType; \n    public class Main extends MovieClip {\n    private var camera:CameraUI;\n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n     camera = new CameraUI();\n    camera.addEventListener(MediaEvent.COMPLETE, captured);\n    camera.addEventListener(Event.CANCEL, cancelled);\n    captureBtn.addEventListener(MouseEvent.MOUSE_UP, pressed);\n    } \n\n    ```", "```swift\n    private function pressed(e:MouseEvent):void {\n    if(CameraUI.isSupported)\n    {\n    camera.launch(MediaType.IMAGE);\n    }\n    }\n\n    ```", "```swift\n    private function captured(e:MediaEvent):void {\n    var mediaPromise:MediaPromise = e.data;\n    if(mediaPromise != null)\n    {\n    output.text = \"Photo captured.\";\n    }\n    }\n\n    ```", "```swift\n    private function cancelled(e:Event):void {\n    output.text = \"Cancelled.\";\n    }\n\n    ```", "```swift\ncamera.launch(MediaType.VIDEO);\n\n```", "```swift\nprivate var dataSource:IDataInput;\nprivate var eventSource:IEventDispatcher;\n\n```", "```swift\ndataSource = mediaPromise.open();\neventSource = dataSource as IEventDispatcher;\neventSource.addEventListener(Event.COMPLETE, dataCaptured);\n\n```", "```swift\nprivate function dataCaptured(e:Event):void {\nvar mediaBytes:ByteArray = new ByteArray();\ndataSource.readBytes(mediaBytes);\n}\n\n```", "```swift\nimport flash.events.IEventDispatcher;\nimport flash.utils.ByteArray;\nimport flash.utils.IDataInput;\n\n```", "```swift\n    package {\n    import flash.display.MovieClip;\n     import flash.media.Camera;\n    import flash.media.Video; \n    public class Main extends MovieClip {\n    private var camera:Camera; \n    private var video:Video; \n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n     if(Camera.names.length > 0)\n    {\n    camera = Camera.getCamera();\n    camera.setMode(stage.stageWidth, stage.stageHeight,\n    stage.frameRate);\n    video = new Video(camera.width, camera.height);\n    video.attachCamera(camera);\n    addChild(video);\n    } \n    }\n\n    ```", "```swift\ncamera = Camera.getCamera();\n camera.setMode(stage.stageHeight, stage.stageWidth,\nstage.frameRate); \nvideo = new Video(camera.width, camera.height);\nvideo.attachCamera(camera);\nvideo.rotation = 90;\nvideo.x += stage.stageWidth; \n\n```", "```swift\ncamera = Camera.getCamera(\"1\");\n\n```", "```swift\nvar bd:BitmapData = new BitmapData(video.width, video.height,\nfalse);\nbd.draw(video);\nvar b:Bitmap = new Bitmap(bd);\n\n```", "```swift\n    package {\n    import flash.display.MovieClip;\n     import flash.events.MouseEvent;\n    import flash.events.SampleDataEvent;\n    import flash.media.Microphone;\n    import flash.utils.ByteArray; \n    public class Main extends MovieClip {\n    private var mic:Microphone;\n    private var soundData:ByteArray; \n    public function Main() {\n    // constructor code\n    }\n    }\n    }\n\n    ```", "```swift\n    public function Main() {\n     micStatus.gotoAndStop(1);\n    recordBtn.visible = true;\n    stopBtn.visible = false;\n    recordBtn.addEventListener(MouseEvent.MOUSE_UP,\n    pressedRecordBtn);\n    stopBtn.addEventListener(MouseEvent.MOUSE_UP,\n    pressedStopBtn);\n    mic = Microphone.getMicrophone();\n    if(!Microphone.isSupported || mic == null)\n    {\n    recordBtn.visible = false;\n    } \n    }\n\n    ```", "```swift\n    private function pressedRecordBtn(e:MouseEvent):void {\n    startRecording();\n    }\n    microphone audiorecordingprivate function pressedStopBtn(e:MouseEvent):void {\n    stopRecording();\n    }\n\n    ```", "```swift\n    private function startRecording():void {\n    micStatus.gotoAndStop(2);\n    recordBtn.visible = false;\n    stopBtn.visible = true;\n    soundData = new ByteArray();\n    mic.gain = 100;\n    mic.rate = 44;\n    mic.addEventListener(SampleDataEvent.SAMPLE_DATA,\n    sampleData);\n    }\n\n    ```", "```swift\n    private function sampleData(e:SampleDataEvent):void {\n    while(e.data.bytesAvailable)\n    {\n    var sample:Number = e.data.readFloat();\n    soundData.writeFloat(sample);\n    }\n    if(soundData.length > 2097152)\n    {\n    stopRecording();\n    }\n    }\n\n    ```", "```swift\n    private function stopRecording():void {\n    micStatus.gotoAndStop(1);\n    stopBtn.visible = false;\n    mic.removeEventListener(SampleDataEvent.SAMPLE_DATA,\n    sampleData);\n    output.text = (soundData.length + \" bytes recorded\");\n    }\n\n    ```", "```swift\nmic = Microphone.getMicrophone();\n\n```", "```swift\nmic.gain = 100;\nmic.rate = 44;\nmic.addEventListener(SampleDataEvent.SAMPLE_DATA, sampleData);\n\n```", "```swift\nwhile(e.data.bytesAvailable)\n{\nvar sample:Number = e.data.readFloat();\nsoundData.writeFloat(sample);\n}\n\n```", "```swift\nmic.setSilenceLevel(50, 2000);\nmic.addEventListener(ActivityEvent.ACTIVITY, activityChanged);\n\n```", "```swift\nprivate function activityChanged(e:ActivityEvent):void {\noutput.text = \"activating: \" + e.activating + \", \" +\n\"activity level: \" + mic.activityLevel;\nif(e.activating == false)\n{\nstopRecording();\n}\n}\n\n```", "```swift\nimport flash.events.ActivityEvent;\n\n```", "```swift\n    import flash.display.MovieClip;\n    import flash.events.Event; \n    import flash.events.MouseEvent;\n    import flash.events.SampleDataEvent;\n    import flash.media.Microphone;\n    import flash.media.Sound;\n    import flash.media.SoundChannel; \n    import flash.utils.ByteArray;\n\n    ```", "```swift\n    private var mic:Microphone;\n    private var soundData:ByteArray;\n    private var sound:Sound;\n    private var channel:SoundChannel; \n\n    ```", "```swift\n    private function stopRecording():void {\n    micStatus.gotoAndStop(1);\n    stopBtn.visible = false;\n    mic.removeEventListener(SampleDataEvent.SAMPLE_DATA,\n    sampleData);\n    playRecording(); \n    }\n\n    ```", "```swift\n    private function playRecording():void {\n    soundData.position = 0;\n    sound = new Sound();\n    sound.addEventListener(SampleDataEvent.SAMPLE_DATA,\n    playSampleData);\n    channel = sound.play();\n    channel.addEventListener(Event.SOUND_COMPLETE,\n    playbackComplete);\n\n    ```", "```swift\n    private function playSampleData(e:SampleDataEvent):void {\n    for(var i:int=0; i<8192 && soundData.bytesAvailable>0; i++)\n    {\n    var sample:Number = soundData.readFloat();\n    e.data.writeFloat(sample);\n    e.data.writeFloat(sample);\n    }\n    }\n\n    ```", "```swift\n    private function playbackComplete(e:Event):void {\n    recordBtn.visible = true;\n    stopBtn.visible = false;\n    }\n\n    ```", "```swift\nsound = new Sound();\nsound.addEventListener(SampleDataEvent.SAMPLE_DATA,\nplaySampleData);\n\n```", "```swift\nchannel = sound.play();\nchannel.addEventListener(Event.SOUND_COMPLETE,\nplaybackComplete);\n\n```", "```swift\nfor(var i:int=0; i<8192 && soundData.bytesAvailable>0; i++)\n{\nvar sample:Number = soundData.readFloat();\ne.data.writeFloat(sample);\ne.data.writeFloat(sample);\n}\n\n```", "```swift\ne.data.writeFloat(sample);\ne.data.writeFloat(sample);\n\n```", "```swift\nfor(var i:int=0; i<4096 && soundData.bytesAvailable>0; i++)\n{\nvar sample:Number = soundData.readFloat();\ne.data.writeFloat(sample);\ne.data.writeFloat(sample);\ne.data.writeFloat(sample);\ne.data.writeFloat(sample);\n}\n\n```", "```swift\nvar stream:FileStream = new FileStream();\nvar file:File = File.documentsDirectory.resolvePath(\"audio.dat\");\nstream.open(file, FileMode.WRITE);\nstream.writeBytes(soundData);\nstream.close();\n\n```", "```swift\nsoundData = new ByteArray();\nvar stream:FileStream = new FileStream();\nvar file:File = File.documentsDirectory.resolvePath(\"audio.dat\");\nstream.open(file, FileMode.READ);\nstream.readBytes(soundData);\n\n```"]