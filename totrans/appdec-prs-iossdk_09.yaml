- en: Chapter 9. Error Handling and Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While dealing with the cloud code, it's possible that a user could send invalid
    parameters in his/her queries. To handle such conditions on the cloud code, we
    have to send an error code in response to such queries. Errors can be in several
    forms, such as timeouts, ACL lists, undefined operations, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Error handling in order to enhance your application stability to handle such
    errors and respond accordingly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The measures to enhance the security of the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The way to export your Parse data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While working with Parse, you may come across two types of errors. The first
    is the logical error, which can occur because of the way you are using the SDK.
    This kind of error will usually raise an exception called `NSException`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say in the case of logging in, the ideal login process is to provide
    a username and password before calling `signUp` on the `PFUser` class. So, according
    to the following code, you are bypassing the username and password and calling
    `signUp` directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In such cases, the operation will throw an `NSInternalInconsistencyException`
    because `signUp` was called without username and password properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Errors can also occur while interacting with the Parse Cloud over the network.
    The error can be either because of connection with the Parse Cloud or it can be
    because of any requested operation. Let''s look at another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we are trying to fetch the object which is not available
    on the Parse Cloud. In such cases, Parse will throw an error in the dictionary
    format where the error code is readable through `error.code`, and the message
    is readable through `error.userinfo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code demonstrates the `callback` method for the previous method
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you will notice that we are using `kPFErrorObjectNotFound`
    for checking the error code. Parse provides various predefined constants for the
    errors. You can find all the predefined error codes in the `PFConstants` header
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'There may be several other possible reasons for the query failure, such as
    the device being unable to connect to the Parse Cloud server. In such cases, you
    will receive an error message in response with the description of the error. For
    this the `callback` method will be something like the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have sent `NSNumber` in response to the cloud code, its Boolean value
    is used to check whether the operation was successful or not. For example, you
    have invoked a `cloud` function to fetch the average marks of a student. In this
    case the `callback` method should be similar to the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the previous method, if the Boolean value for the result is `true`, the operation
    succeeds, else it fails with an error. Error handling is the same for all the
    foreground tasks as well.
  prefs: []
  type: TYPE_NORMAL
- en: The request timeout for all the commotions is 10 seconds, so the synchronous
    calls will not hang for long period of time. The connection timeout is the same
    for synchronous and asynchronous tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Parse provides you with the list of Error codes along with their explanations.
    You can check this list at [https://www.parse.com/docs/ios/api/Classes/PFConstants.html](https://www.parse.com/docs/ios/api/Classes/PFConstants.html).
  prefs: []
  type: TYPE_NORMAL
- en: Securing your application data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is considered best practice in the software industry to secure your application
    data as much as possible. For securing your data, you can specify an access control
    list provided by Parse to provide security to your object based on the user. It''s
    recommended to enable an anonymous user automatically when the application is
    launched. It''s also recommended to provide public writability only on the required
    objects. Such settings will protect your application data from unauthorized access.
    Following code will illustrate the usage of security in your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It's recommended to provide ACL to all your objects, as you have already learned
    in [Chapter 6](ch06.html "Chapter 6. Users and Roles"), *Users and Roles*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can secure your application even more by customizing the following settings
    on your **App Settings** page:'
  prefs: []
  type: TYPE_NORMAL
- en: Disable all the login mechanisms if you aren't using them. For example, if your
    app allows the user to log in using Facebook only, then disable all the other
    login methods from the settings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide your Facebook **App Id** and Twitter **Consumer Key** information in
    your Parse application settings page to enable server-side validation for user
    login attempts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Parse also allows you to export your database. For exporting your data, navigate
    to the **Settings** page of the application and click on the **Export Data** button.
    Once you click on the **Export Data** button, Parse will compress all your data
    and export it to your e-mail ID, which is used for login. Exported data is in
    JSON format. The ZIP file will contain all your class objects in a separate file.
    The following is the example data of the `Class` object exported from Parse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the Parse Cloud code and its various implementations
    to simplify the application development on the mobile end.
  prefs: []
  type: TYPE_NORMAL
- en: We started by exploring the types of errors and the ways to handle them in your
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we learned how to enhance the application security.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have seen the way to export our data from Parse.
  prefs: []
  type: TYPE_NORMAL
