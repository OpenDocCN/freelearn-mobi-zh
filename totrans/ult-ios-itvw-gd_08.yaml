- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Managing Your Code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理您的代码
- en: In [*Chapter 5*](B18653_05.xhtml#_idTextAnchor163), we covered the essential
    aspects of the Swift language. In this chapter, we will cover more topics related
    to iOS development, such as UIKit and various frameworks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第五章*](B18653_05.xhtml#_idTextAnchor163)中，我们介绍了 Swift 语言的必要方面。在本章中，我们将探讨更多与
    iOS 开发相关的话题，例如 UIKit 和各种框架。
- en: Preparing for iOS interviews is mostly around Swift, UIKit, and coding. It is
    obvious why – these are the bread and butter of iOS development. But being an
    iOS developer is much more than that.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 准备 iOS 面试主要围绕 Swift、UIKit 和编码。显然，这是因为这些都是 iOS 开发的核心。但成为一名 iOS 开发者远不止于此。
- en: In my experience, developers who know how to plan their tasks, solve/test complex
    bugs, and document their work are true professionals, regardless of their code
    quality. I think that this is what separates a good developer from a true pro-iOS
    developer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，知道如何规划任务、解决/测试复杂错误和记录工作的开发者是真正的专业人士，无论他们的代码质量如何。我认为这就是优秀开发者和真正的专业 iOS
    开发者之间的区别。
- en: In a good and effective hiring process, these skills are tested as part of the
    manager interview or the home assessment stage, and we should be ready for them.
    Unlike most other topics, the *principles* for good quality work are vital to
    remember here.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在良好且有效的招聘过程中，这些技能作为经理面试或家庭评估阶段的一部分进行测试，我们应该为它们做好准备。与其他大多数主题不同，高质量工作的 *原则* 在这里至关重要。
- en: 'This chapter will cover the following four main topics in managing our project:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖管理我们项目以下四个主要主题：
- en: We will ensure that we have the capability to *plan* our projects and features
    and gain knowledge on how to develop a technical document.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将确保我们有能力 *规划* 我们的项目和功能，并了解如何开发技术文档。
- en: We will cover *testing*, not only unit testing but also integration and performance
    tests. We will also learn what it means to write testable code.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将涵盖 *测试*，不仅包括单元测试，还包括集成和性能测试。我们还将了解编写可测试代码的含义。
- en: We will go over *debug* techniques for different types of issues.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将介绍针对不同类型问题的 *调试* 技巧。
- en: We will answer some questions about *documentation* – how to comment correctly
    and handle documentation as part of a bigger team.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将回答一些关于 *文档* 的问题——如何正确注释以及如何作为更大团队的一部分处理文档。
- en: 'Let’s start with the essential part of this chapter, in my opinion: planning.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从本章我认为的必要部分开始：规划。
- en: Planning
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划
- en: Planning and design are both critical aspects of being a developer, certainly
    a senior one. Many think of “planning” as a way to estimate delivery dates, but
    the delivery date is really only a tiny part of the story.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 规划和设计是开发者（尤其是高级开发者）的两个关键方面。许多人认为“规划”是一种估算交付日期的方法，但交付日期实际上只是故事的一小部分。
- en: 'The real story behind planning is going down to the details. In my perspective,
    planning is equal to learning. When we plan, we perform research about our task,
    trying to understand the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 规划背后的真正故事是深入细节。在我看来，规划等同于学习。当我们规划时，我们会研究我们的任务，试图理解以下内容：
- en: Can we *understand the product requirements* and translate them into tasks?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们能否 *理解产品需求* 并将其转化为任务？
- en: What are our *dependencies* with other teams/developers?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们与其他团队/开发者的 *依赖关系* 是什么？
- en: What things do we need to perform *additional research*? Do we need a **Proof
    of** **Concept** (**POC**)?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要执行哪些 *额外研究*？我们需要一个 **概念验证**（**POC**）吗？
- en: What tasks will be complicated, and what tasks will be simple?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些任务会变得复杂，哪些任务会变得简单？
- en: Are we handling *edge cases*? Can we define them?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否处理了 *边缘情况*？我们能否定义它们？
- en: When we plan, we consider different aspects and challenges we may encounter.
    Therefore, “planning” is much more than estimation; it is really a learning session.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们规划时，我们会考虑我们可能遇到的不同方面和挑战。因此，“规划”远不止估算；它实际上是一个学习过程。
- en: Being a professional means learning our task before we start it. From my experience,
    not all interviews emphasize that point. In many hiring processes, planning is
    not even a part of the interview.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 成为专业人士意味着在开始之前就学习我们的任务。根据我的经验，并非所有面试都强调这一点。在许多招聘过程中，规划甚至不是面试的一部分。
- en: I advise bringing it up even if we are not explicitly asked for it. We are interested
    in leading the conversation with our interviewer to the places where we want to
    show our strengths.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有明确要求，我也建议提出这一点。我们希望引导面试官将对话引向我们想要展示我们优势的地方。
- en: “How do you create a project timeline and plan for the iOS app’s development
    process?”
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你如何创建项目时间表并规划 iOS 应用程序的开发过程？”
- en: '*Why is this* *question important?*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要？*'
- en: Similar to many questions we’ll find in this book, this one also doesn’t have
    a clear right or wrong answer. But the interviewer doesn’t care about the answer’s
    details. Their main goal is to assess our experience, organization skills, and
    our development process point of view.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与这本书中我们将找到的许多问题类似，这个问题也没有明确的正确或错误答案。但面试官并不关心答案的细节。他们的主要目标是评估我们的经验、组织技能以及我们对开发过程观点。
- en: In [*Chapter 2*](B18653_02.xhtml#_idTextAnchor041), we talked about “soft skills.”
    Planning and time management are indeed essential soft skills our interviewer
    wants to see. An iOS developer who understands how to plan, challenges and dependencies,
    manage time, and prioritize tasks is a great addition to the team.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第2章*](B18653_02.xhtml#_idTextAnchor041) 中，我们讨论了“软技能”。规划和时间管理确实是面试官希望看到的必要软技能。一个理解如何规划、挑战和依赖关系、管理时间并优先处理任务的iOS开发者是团队的一大补充。
- en: '*What is* *the answer?*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*答案是什么？*'
- en: 'Regardless of the details we are required to provide, there are three points
    we need to ensure to highlight in our answer:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们被要求提供哪些细节，我们都需要确保在回答中突出以下三个要点：
- en: '**Demonstrate our experience**: Providing examples, approaches, and lessons
    learned is a great way to show we understand and have handled challenges in the
    past.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展示我们的经验**：提供例子、方法和经验教训是展示我们理解和过去处理挑战的好方法。'
- en: '**Show we understand the development process**: Task management, estimation,
    resources, and priority are all good examples of tools that can help us to provide
    a good plan.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展示我们理解开发过程**：任务管理、估算、资源和优先级都是可以帮助我们制定良好计划的工具的例子。'
- en: '**Show we can collaborate**: Working on a development project involves heavy
    collaboration. We need to highlight the fact that we are not working alone. Collaboration
    means task ownership, collaborative tech design, reviews, dependencies, and working
    with designers, QA teams, product managers, and backend developers.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展示我们能够协作**：在开发项目中工作涉及大量的协作。我们需要强调我们并非独自工作。协作意味着任务所有权、协作技术设计、审查、依赖关系，以及与设计师、QA团队、产品经理和后端开发者合作。'
- en: Why are these steps crucial to highlight? Because, in most cases, we are joining
    an existing team and project. Understanding what a good and healthy process looks
    like is essential.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这些步骤至关重要？因为在大多数情况下，我们是在加入一个现有的团队和项目。了解良好的和健康的过程是什么样的至关重要。
- en: 'Now let’s dive into a standard framework for a project planning process:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解项目规划流程的标准框架：
- en: Understand the *project’s requirements*, purpose, and audience.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理解项目的需求、目的和受众。
- en: '*Break the project down* into small, manageable tasks: design, coding, and
    testing.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*将项目分解* 为小而可管理的任务：设计、编码和测试。'
- en: 'Provide a development *estimation for each task* and a result: a timeline.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个任务提供开发 *估算* 和结果：时间表。
- en: Assign *resources* between the different team members.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不同的团队成员之间分配 *资源*。
- en: '*Monitor* progress to ensure we are on time.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*监控* 进度以确保我们按时完成。'
- en: '*Testing* and deployment.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*测试* 和部署。'
- en: We need to look at this question as a chance to bring our point of view and
    experience to the table while taking a standard process and breaking it down into
    the three key points I mentioned.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将这个问题视为一个机会，将我们的观点和经验带到桌面上，同时采用标准流程并将其分解为我提到的三个关键点。
- en: “How do you estimate development time for a task?”
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你如何估算任务的开发时间？”
- en: '*Why is this* *question important?*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要？*'
- en: Time estimation is one of the most challenging tasks for developers, and how
    we approach task estimation shows our experience.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 时间估算对于开发者来说是最具挑战性的任务之一，我们如何处理任务估算显示了我们的经验。
- en: Development time estimation is both a soft and hard skill.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 开发时间估算既是软技能也是硬技能。
- en: On the one hand, it requires a broad technical knowledge of the development
    challenges and risks, breaking them into smaller tasks and managing them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，它需要广泛的技术知识，了解开发挑战和风险，将它们分解成更小的任务并管理它们。
- en: On the other hand, we need good communication skills to work with other teammates,
    excellent time management skills, and the ability to analyze dependencies that
    can affect our schedule.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们需要良好的沟通技巧来与其他队友合作，出色的时间管理技巧，以及分析可能影响我们时间表依赖关系的能力。
- en: After all, we chose to develop professional iOS applications, and that’s a complex
    job to do…
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们选择开发专业的iOS应用程序，这是一项复杂的任务……
- en: '*What is* *the answer?*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*答案是什么？*'
- en: The answer is similar to the previous answer about the project timeline. The
    difference is that in task estimation, it is simpler to get into the small details
    and understand the risks.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个答案与关于项目时间线的上一个答案相似。不同之处在于，在任务估计中，更容易进入细节并了解风险。
- en: 'Let’s go over the list of the stages we need to go through:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们需要经历的各个阶段：
- en: Understand the *requirements*.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理解**需求**。
- en: '*Break* them down into small sub-tasks.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**分解**成小任务。
- en: '*Assess the complexity* of each sub-task, and consider any potential risks
    and challenges. If needed, research such risks or even create a POC to understand.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**评估**每个子任务的复杂性，并考虑任何潜在的风险和挑战。如有需要，研究这些风险或甚至创建一个POC来理解。'
- en: '*Consider dependencies* to make sure we are not blocked from moving forward
    with our development process.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**考虑**依赖关系，以确保我们不会被阻止继续我们的开发过程。'
- en: Add more time for *reviewing and refining* the results.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**审查和精炼**结果添加更多时间。
- en: I think that point number three is perhaps the most important. When a development
    task doesn’t meet its estimation goals, it is primarily because of risks we didn’t
    consider. It is hard to go wrong when setting up a standard **user interface**
    (**UI**) screen, but the unknown issues are what make our task overdue.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为第三点可能是最重要的。当一个开发任务没有达到其估计目标时，主要是因为我们没有考虑到的风险。设置标准**用户界面**（**UI**）屏幕时很难出错，但未知问题正是使我们的任务延误的原因。
- en: “How do you create a technical design document for an iOS task?”
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你如何为iOS任务创建一个技术设计文档？”
- en: '*Why is this* *question important?*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么**这个问题重要？'
- en: This is a question that continues from the previous two. We started with project
    planning and task time estimation, and now we are trying to understand how to
    design a single development task.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个从前两个问题延续下来的问题。我们开始于项目规划和任务时间估计，现在我们试图了解如何设计单个开发任务。
- en: Technical document creation encapsulates our expertise in approaching a technical
    task. Even if we don’t usually write technical documents, the process of designing
    a feature from a technical point of view is crucial for developers.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 技术文档的创建封装了我们处理技术任务的专业知识。即使我们通常不编写技术文档，从技术角度设计功能的过程对于开发者来说也是至关重要的。
- en: Put aside the suggested answer – try to go over technical documents you’ve used
    in the past and retrieve what the process that led to this output was. Bringing
    your own experience to the table is the best answer because it will be easier
    to explain.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 把建议的答案放在一边——尝试回顾你过去使用过的技术文档，并检索导致该输出的过程。将你的经验带入讨论是最好的答案，因为它将更容易解释。
- en: '*What is* *the answer?*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**是什么**答案？'
- en: 'A technical document contains the following topics: introduction, requirements,
    architecture, flows, data model, testing, and deployment.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 技术文档包含以下主题：介绍、需求、架构、流程、数据模型、测试和部署。
- en: 'These are the following steps to create it:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建它的以下步骤如下：
- en: '**Plan and research**: Collect information about the project, including requirements
    and constraints.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计划和调研**：收集有关项目的信息，包括需求和约束。'
- en: '**Outline the document**: Write the sections and sub-sections to ensure we
    are not missing any important topic.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**概述**文档：写出章节和子章节，确保我们没有遗漏任何重要主题。'
- en: '**Describe the requirements**: Specify requirements in detail.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**描述**需求：详细说明需求。'
- en: '**Discuss the system architecture**: Describe the system architecture in detail.
    Write down the different layers involved in the feature.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**讨论**系统架构：详细描述系统架构。写下涉及该功能的各个不同层。'
- en: '**Define the data model**: Describe the entities and the different API calls.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义**数据模型：描述实体和不同的API调用。'
- en: '**Specify the user interface**: Include screens, UI components, and navigation
    flows.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**指定用户界面**：包括屏幕、UI组件和导航流程。'
- en: '**Outline the testing strategy**: Include types of testing, tools, and goals.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**概述**测试策略：包括测试类型、工具和目标。'
- en: '**Discuss the deployment process**: Include beta rollout, A/B testing, and
    app versions.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**讨论**部署过程：包括Beta发布、A/B测试和应用程序版本。'
- en: It’s important to say that most, if not all, of the steps I detailed are not
    explicitly related to Swift – this is one of the good things about this question.
    Planning is a language and platform-agnostic task, and you can find plenty of
    people that can help you understand how to approach a technical document design
    even if you haven’t done one before.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要说明，我详细说明的大多数步骤（如果不是所有步骤）与Swift没有直接关系——这是这个问题的优点之一。规划是一种语言和平台无关的任务，你可以找到很多人帮助你理解如何处理技术文档设计，即使你以前没有做过。
- en: Testing
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: Testing is a crucial part of being an iOS developer. It ensures our codebase’s
    quality and reliability and improves levels of confidence in our projects.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是iOS开发者的重要组成部分。它确保我们的代码库的质量和可靠性，并提高我们对项目的信心水平。
- en: Questions about testing in interviews are much more than just technical. Writing
    a unit test is an easy task and can be learned quickly. But experience in testing
    shows a different side of us as iOS developers. It offers our approach to managing
    a reliable and healthy code base.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 面试中关于测试的问题远不止技术层面。编写单元测试是一项简单的任务，可以快速学会。但测试经验展示了iOS开发者不同的一面。它提供了我们管理可靠和健康代码库的方法。
- en: 'Answer the following questions:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: Do we write tests after a bug fix?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在修复错误后是否编写测试？
- en: How simple is it to test our code?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试我们的代码有多简单？
- en: What is the test role in the deployment process?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试在部署过程中的角色是什么？
- en: Being a professional doesn’t mean just writing good code but also maintaining
    it well.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 成为专业人士不仅仅意味着编写好的代码，还要很好地维护它。
- en: Unlike most topics in this book, it is difficult to gain knowledge of testing
    without having some experience. I advise you to take one of your projects and
    write some tests. You need to feel it with your fingers before you approach the
    interview.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中的大多数主题不同，没有一些经验很难获得测试知识。我建议你选择你的一个项目并编写一些测试。在面试之前，你需要亲自感受一下。
- en: “What is the meaning of unit and integration testing in the context of iOS development?”
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “在iOS开发的背景下，单元测试和集成测试的意义是什么？”
- en: '*Why is this* *question important?*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要？*'
- en: The testing world is full of different terms and approaches. Defining unit tests
    and integration tests is essential because they represent different use cases
    and coverage.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 测试领域充满了不同的术语和方法。定义单元测试和集成测试是至关重要的，因为它们代表了不同的用例和覆盖范围。
- en: This question aims to see whether we have enough experience understanding the
    different use cases.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题旨在了解我们是否有足够经验理解不同的用例。
- en: '*What is* *the answer?*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*答案是什么？*'
- en: A **unit test** checks the behavior of an individual component, while an **integration
    test** checks how different components work together.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**单元测试**检查单个组件的行为，而**集成测试**检查不同组件如何协同工作。'
- en: It’s crucial to consider the app’s context when investing more time in unit
    or integration testing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在投入更多时间进行单元或集成测试时，考虑应用上下文是至关重要的。
- en: 'For example – unit tests mainly check logic functions such as the following
    one:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如 - 单元测试主要检查如下逻辑函数：
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can see that the preceding code block tests a specific logic function. It
    doesn’t care about other app components such as the network, core data, or the
    app state, but rather isolates the scope to the function itself.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，前面的代码块测试了一个特定的逻辑函数。它不关心其他应用组件，如网络、核心数据或应用状态，而是将范围隔离到函数本身。
- en: 'On the other hand, an integration test checks a use case that involves multiple
    layers and functions, such as a network request:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，集成测试检查涉及多个层和功能的用例，例如网络请求：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code shows how we can test how two layers of our project work
    together. The network layer can work well, as can the local function of `apiClient`.
    But when working together, we may encounter a problem, and that’s an integration
    test.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码展示了我们如何测试项目中的两层如何协同工作。网络层可以很好地工作，`apiClient`的本地功能也是如此。但当它们协同工作时，我们可能会遇到问题，这就是集成测试。
- en: Most iOS apps need integration tests over unit tests because most functions
    handle user interaction and different app layers versus logic code. This is an
    essential insight into the balance between integration and unit tests.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数iOS应用需要集成测试而不是单元测试，因为大多数功能处理用户交互和不同的应用层与逻辑代码。这是关于集成和单元测试平衡的一个基本见解。
- en: “How do you perform performance testing in iOS applications?”
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “如何在iOS应用中执行性能测试？”
- en: '*Why is this* *question important?*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要？*'
- en: '**Performance testing** is less common in iOS development than unit or integration
    testing and is considered a more advanced topic. This question aims to gauge your
    depth of knowledge and experience in testing. It is a good idea to set up one
    performance test to understand how it works, but there is no need to have significant
    experience with it.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能测试**在iOS开发中不如单元测试或集成测试常见，并且被认为是一个更高级的话题。这个问题旨在评估你在测试方面的知识深度和经验。设置一个性能测试来了解它是如何工作的是个好主意，但不需要有丰富的经验。'
- en: '*What is* *the answer?*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案是什么**？'
- en: Setting up a performance test is much simpler than it sounds. The first thing
    we need to do is to choose the function or code block we want to measure.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 设置性能测试比听起来要简单得多。我们首先需要做的是选择我们想要测量的函数或代码块。
- en: 'Second, we need to write a test function that performs that code block, usually
    multiple times. Why do we need to run it multiple times? Because it is simpler
    for us to measure a test run with big numbers. If one test run takes around 3–4
    milliseconds, it will be hard to measure the change over time. But if we run it
    100 times, it will be much easier to measure any small tweaks we can make in the
    function’s code. Let’s see what a performance test looks like:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们需要编写一个测试函数来执行那个代码块，通常需要多次运行。为什么我们需要多次运行它？因为我们更容易用大数字来衡量测试运行。如果一个测试运行大约需要3-4毫秒，那么衡量随时间的变化将很困难。但如果我们运行它100次，那么衡量函数代码中任何小的调整将容易得多。让我们看看性能测试的样子：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `XCTest` framework uses the average running time as a baseline, and every
    time the test is run, `XCTest` compares the results to that baseline.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`XCTest`框架使用平均运行时间作为基准，每次运行测试时，`XCTest`都会将结果与该基准进行比较。'
- en: One disadvantage of performance tests is that their results depend on the device
    they run on. It is best practice to ensure performance tests run *on the same
    device*, preferably an actual device and not a simulator.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试的一个缺点是它们的取决于运行它们的设备。最佳实践是确保性能测试在**同一设备**上运行，最好是实际设备而不是模拟器。
- en: “Can you explain what it means to write a testable code?”
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你能解释一下什么是可测试的代码吗？”
- en: '*Why is this* *question important?*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这个问题很重要**？'
- en: Sure, we are now talking about tests, but **testable code** is much more than
    preparing our codebase for tests – it is about writing code that we can easily
    maintain and decouple.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们现在正在讨论测试，但**可测试的代码**远不止是为我们的代码库准备测试——它关乎编写我们能够轻松维护和解耦的代码。
- en: In this question, interviewers like to see that we understand what makes code
    testable, ensuring our code can be maintained easily.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题中，面试官喜欢看到我们理解是什么使得代码可测试，确保我们的代码可以轻松维护。
- en: '*What is* *the answer?*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案是什么**？'
- en: Writing testable code means writing code designed to make it easy to write unit,
    integration, and performance tests for it.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 编写可测试的代码意味着编写旨在使其容易编写单元、集成和性能测试的代码。
- en: 'In practice, testable code means the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，可测试的代码意味着以下内容：
- en: '**Keep the principle of separation of concerns**: When each part of our code
    base has a single, clear responsibility, it is easier to test a use case without
    requiring several layers or classes.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持关注点分离的原则**：当我们的代码库的每个部分都有一个单一、明确的职责时，测试一个用例就更容易，无需要求多个层或类。'
- en: '**Ensure loose coupling**: High coupling makes it hard to test one component
    independently.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保松耦合**：高耦合使得独立测试一个组件变得困难。'
- en: '**Design our objects for easy mocking**: A clean, well-defined interface can
    help our objects to be easily mocked. One great example is the usage of **Protocol
    Oriented** **Programming** (**POP**).'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计我们的对象以便于模拟**：干净、明确定义的接口可以帮助我们的对象容易被模拟。一个很好的例子是使用**协议导向编程**（**POP**）。'
- en: '**Use more pure functions**: Pure functions are functions that don’t have a
    shared state or side effects. They are isolated in a way that makes them very
    easy to test.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用更纯的函数**：纯函数是没有共享状态或副作用的功能。它们以一种使它们非常容易测试的方式进行隔离。'
- en: 'Here’s an example of testable versus non-testable code. I’ll start with the
    testable version:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个可测试代码与非可测试代码的例子。我将从可测试版本开始：
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And now the non-testable code version:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是非可测试代码版本：
- en: '[PRE4]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the first example, we can see that the `add()` method takes two parameters
    and use them solely to return a result.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，我们可以看到`add()`方法接受两个参数，并仅使用它们来返回一个结果。
- en: However, in the second example, we see a function dependent on two `UserDefaults`
    keys that may return different results each time we run it. In testable code,
    we should get the same results each time we run the test, so that’s not an excellent
    example of testable code.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在第二个例子中，我们看到一个依赖于两个`UserDefaults`键的函数，每次运行它可能都会返回不同的结果。在可测试的代码中，我们希望每次运行测试都能得到相同的结果，所以这不是一个很好的可测试代码示例。
- en: That’s a great example of testable versus non-testable code snippets.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是一个可测试代码与非可测试代码片段的绝佳例子。
- en: Tests are a crucial part of interviews, much more than they used to be several
    years ago. The reason is that tests are not a topic of their own – they represent
    a whole approach to development, code design, and maintenance. Tests are a clear
    win in terms of our striving for perfection.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是面试的重要组成部分，比几年前更加重要。原因是测试不是一个单独的主题——它们代表了一种整体的开发方法，包括代码设计和维护。测试是我们追求完美的一个明显优势。
- en: Debugging
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: 'A famous quote says:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有句名言说：
- en: “Programming is not about being the best at writing code, it’s about being the
    best at debugging code.”
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: “编程不是关于写代码写得最好，而是关于调试代码最好。”
- en: This quote sounds weird, right? But, when we think about it, we spend many coding
    hours debugging our (or others') code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这句话听起来很奇怪，对吧？但当我们思考时，我们花费了很多时间调试我们的（或他人的）代码。
- en: Our debugging skills can sometimes determine whether a phase lasts a few days
    or weeks.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的调试技能有时可以决定一个阶段是持续几天还是几周。
- en: One of the mistakes developers make when practicing for job interviews is focusing
    only on code writing and forgetting about debugging. But debugging is one of the
    most important tools we have as developers, and we can expect at least one or
    two debug questions in our interview.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者在准备面试时犯的一个错误是只关注代码编写，而忽略了调试。但调试是我们作为开发者拥有的最重要的工具之一，我们可以在面试中期待至少一到两个调试问题。
- en: “Can you explain how to debug memory leaks in iOS applications?”
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你能解释一下如何在iOS应用程序中调试内存泄漏吗？”
- en: '*Why is this* *question important?*'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要？*'
- en: First, let’s be aligned on what a memory leak is. A memory leak doesn’t mean
    an app with high memory usage – that’s a widespread misconception.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们先了解一下什么是内存泄漏。内存泄漏并不意味着应用程序内存使用量高——这是一个普遍的误解。
- en: A memory leak means an app was allocated memory for something and then stopped
    using it, but the memory space wasn’t released.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 内存泄漏意味着应用程序为某物分配了内存，然后停止使用它，但内存空间没有被释放。
- en: The result might be high memory usage, but increased memory usage does not indicate
    a memory leak.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可能是高内存使用，但增加的内存使用并不表示存在内存泄漏。
- en: Memory leaks are hard to debug but point to inefficient resource consumption
    and can lead to app termination. That’s why memory leak debugging is an important
    topic in iOS development.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 内存泄漏很难调试，但它们指向低效的资源消耗，并可能导致应用程序终止。这就是为什么内存泄漏调试是iOS开发中的一个重要主题。
- en: '*What is* *the answer?*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*答案是什么？*'
- en: 'Having said that, memory leaks are hard to debug. Fortunately, there are many
    ways to solve this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，内存泄漏很难调试。幸运的是，有许多方法可以解决这个问题：
- en: '**Instruments**: Instruments is a powerful tool that comes with Xcode that
    can help us profile different aspects of our app, including memory allocations
    and leaks. It’s an advanced tool that can profile a specific object, log its retains/release
    operations, and even direct us to a particular location in our code base.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Instruments**：Instruments是Xcode附带的一个强大工具，可以帮助我们分析应用程序的不同方面，包括内存分配和泄漏。它是一个高级工具，可以分析特定对象，记录其保留/释放操作，甚至指导我们到代码库中的特定位置。'
- en: '**Memory graph debugging**: It’s a relatively new feature, and not many are
    aware of it yet. Using memory graph debugging, it is possible to stop the run
    at any point and look at the live objects list and the relationships between them.
    It can also highlight what it identifies as a memory leak and points to the reason.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存图调试**：这是一个相对较新的功能，目前还没有很多人了解。使用内存图调试，可以在任何一点停止运行并查看活动对象列表及其之间的关系。它还可以突出显示它识别为内存泄漏的部分，并指出原因。'
- en: '**NSZombie**: NSZombie is a tool that lets us detect and track elements before
    they are deallocated.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NSZombie**：NSZombie是一个工具，它允许我们在对象被释放之前检测和跟踪它们。'
- en: 'The **deinit** function: In certain cases, we can put a print statement or
    a breakpoint in the object’s **deinit()** function. The **deinit()** function
    gets called just before the object is deallocated. That’s a nice and simple way
    to see whether an object leaks without launching external and heavy tools.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**deinit** 函数：在某些情况下，我们可以在对象的 **deinit()** 函数中添加打印语句或断点。**deinit()** 函数会在对象被释放之前被调用。这是一种简单且有效的方法来检查对象是否泄漏，而不需要启动外部和复杂的工具。'
- en: '**Memory gauge**: We can use Xcode’s memory gauge regularly to see whether
    memory is being deallocated and doesn’t grow constantly. It’s a great sign we
    should investigate the issue further using the other tools on the list.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存仪表盘**：我们可以定期使用Xcode的内存仪表盘来查看内存是否被释放并且不会持续增长。这是一个很好的迹象，我们应该进一步使用列表中的其他工具来调查问题。'
- en: As we can see, there are plenty of methods and tools to debug memory leaks in
    iOS. Some are there to *monitor our memory* consumption, and some are very advanced
    and *help detect* precisely where and when the leak occurs. The combination of
    the tools provides us with the perfect toolset to track and fix memory leaks.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，iOS中调试内存泄漏的方法和工具有很多。一些是用来 *监控我们的内存* 消耗的，而一些则非常先进，*帮助精确地检测* 泄漏发生的位置和时间。这些工具的组合为我们提供了完美的工具集，以跟踪和修复内存泄漏。
- en: “Can you explain how to debug UI-related issues in iOS applications?”
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你能解释如何在iOS应用程序中调试UI相关的问题吗？”
- en: '*Why is this* *question important?*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要*？'
- en: Up until now, most of the questions dealt with Swift only, without the context
    of the relevant layer of the framework. But moving forward with our book, we’ll
    find there is much more than Swift in iOS development. The UI is another main
    topic for iOS developers, and as part of it, debugging it is considered to be
    a very challenging task. If you have worked with UIKit, you have probably investigated
    issues with the UI throughout your career. The following answer organizes things
    for you.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，大多数问题都只涉及Swift，而没有涉及框架相关层的上下文。但是，随着我们书籍的推进，我们会发现iOS开发中不仅仅有Swift。UI是iOS开发者另一个主要话题，作为其中的一部分，调试被认为是一项极具挑战性的任务。如果你使用过UIKit，你可能在你的职业生涯中调查过UI相关的问题。以下答案为你组织了这些内容。
- en: '*What is* *the answer?*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*答案是什么*？'
- en: “UI-related” is an extensive definition of a problem. Some issues are related
    to the UI life cycle, some to user interaction, and others to layout and animation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: “UI相关”是对问题的一个广泛定义。一些问题与UI生命周期相关，一些与用户交互相关，还有一些与布局和动画相关。
- en: 'So, the answer can be divided into three parts:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，答案可以分为三个部分：
- en: '**Inspect the layout**: We have four primary ways to debug our UI layout:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查布局**：我们有四种主要的方式来调试我们的UI布局：'
- en: '**Debug View Hierarchy**: Debug View Hierarchy is a built-in tool in Xcode
    that lets us debug our layout in runtime with a nice 3D view showing up the different
    layers of the screen, allowing us to inspect each layer for its properties, including
    color and layout. That’s a great way to understand how the UI is organized, how
    the Auto Layout equations mechanism works, and what the hierarchy is.'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试视图层次结构**：调试视图层次结构是Xcode内置的一个工具，它允许我们在运行时以一个漂亮的3D视图来调试我们的布局，显示屏幕的不同层次，使我们能够检查每一层的属性，包括颜色和布局。这是理解UI如何组织、Auto
    Layout方程机制如何工作以及层次结构是什么的一个很好的方法。'
- en: '**Open Accessibility Inspector**: This tool is part of the Xcode development
    suite and can help us debug our views from an accessibility point of view. **Accessibility
    Inspector** is a less widely recognized tool that assists us in examining our
    application’s handling of accessibility issues.'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开辅助功能检查器**：这个工具是Xcode开发套件的一部分，可以帮助我们从辅助功能的角度调试我们的视图。**辅助功能检查器**是一个不太为人所知的工具，它帮助我们检查应用程序处理辅助功能问题的方法。'
- en: '**Color our views**: This is a primitive yet helpful way to debug our UI. We
    can just set our views’ background or border colors in the code and then rerun
    the app to examine the results. Other tools are more advanced, but coloring our
    views can sometimes be a very fast and efficient way to debug, for example, in
    animations and sophisticated layouts.'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为我们的视图着色**：这是一种原始但有用的调试UI的方法。我们只需在代码中设置视图的背景或边框颜色，然后重新运行应用程序来检查结果。其他工具可能更先进，但为视图着色有时可以是一个非常快速和高效的调试方法，例如在动画和复杂的布局中。'
- en: '**Simulator debug tools**: The iOS Simulator has built-in debug tools for our
    UI, including color views and slow animations. These are great for a quick look
    at our layout during runtime.'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟器调试工具**：iOS模拟器内置了用于我们的UI的调试工具，包括颜色视图和慢速动画。这些工具非常适合在运行时快速查看我们的布局。'
- en: '**Life cycle debug**: Life cycle debug means debugging our screen’s various
    stages – when it is created, appears, pushed, and more. The way to do that is
    mainly around breakpoints and print statements. We can set breakpoints in life
    cycle methods such as **viewDidLoad** and **viewDidAppear**. Another great tip
    is to use **logs** to track UI flows. Following those logs can help us debug during
    development and also debug QA issues. We can also inspect life cycle events using
    the **Instruments Time Profiler** to track calls during screen launch.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期调试**：生命周期调试意味着调试我们屏幕的各个阶段——当它被创建、出现、推送以及更多。主要的方法是围绕断点和打印语句。我们可以在生命周期方法（如
    **viewDidLoad** 和 **viewDidAppear**）中设置断点。另一个很好的建议是使用 **日志**来跟踪 UI 流程。跟踪这些日志可以帮助我们在开发期间调试，也可以在
    QA 问题调试期间使用。我们还可以使用 **Instruments 时间分析器**来检查生命周期事件，以跟踪屏幕启动期间的调用。'
- en: '**User interaction debugging**: We can also use the Accessibility Inspector,
    print to console, add breakpoints, and use **View Debugger** to understand the
    different hierarchies and properties.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户交互调试**：我们还可以使用 Accessibility 检查器、打印到控制台、添加断点，并使用 **视图调试器**来理解不同的层次结构和属性。'
- en: There are many ways to debug a UI! And there’s a reason – UI debugging requires
    experience and many “hit and miss” tries, so we will need every possible tool.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 调试 UI 有很多方法！而且有原因——UI 调试需要经验和许多“试错”尝试，因此我们需要每一个可能的工具。
- en: “How do you debug performance issues in iOS applications?”
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你如何在 iOS 应用程序中调试性能问题？”
- en: '*Why is this* *question important?*'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要？*'
- en: In today’s mobile development world, performance is not as big a topic as it
    used to be. We are now handling powerful devices, and most chances are that our
    product requirements are not even close to challenging the least powerful machine
    out there.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的移动开发世界中，性能问题不像以前那样重要了。我们现在处理的是功能强大的设备，而且大多数情况下，我们的产品需求甚至远未接近挑战最弱小的机器。
- en: Bad coding and design can lead to annoying lags and long waited for operations.
    These are the cases where performance debugging can help us nail problems quickly.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 恶劣的编码和设计可能导致令人烦恼的延迟和长时间等待的操作。在这些情况下，性能调试可以帮助我们快速定位问题。
- en: This question tests a crucial skill set for an iOS developer, as users expect
    apps to be fast and responsive. It also checks the understanding of the iOS platform
    and the different debugging tools available.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题测试了 iOS 开发者所需的关键技能集，因为用户期望应用运行快速且响应灵敏。它还检查了对 iOS 平台和不同调试工具的理解。
- en: '*What is* *the answer?*'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '*这个答案是什么？*'
- en: 'There are several ideal steps to take when debugging performance issues:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试性能问题时，有几个理想的步骤可以采取：
- en: '**Reproduce the performance issues**: Rerun the app and ensure we can quickly
    reproduce the problem. It’s not an obvious task at all – because we don’t know
    the issue’s root cause yet, we can’t tell for sure that the problem will be reproduced.'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重现性能问题**：重新运行应用并确保我们可以快速重现问题。这根本不是一个显而易见的任务——因为我们还没有找到问题的根本原因，所以我们不能确定问题一定会被重现。'
- en: '**Profile the app**: Use the Instruments time profile and/or **Core Animation
    Instrument** to inspect the app and collect information about the problem.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分析应用**：使用 Instruments 时间分析器和/或 **Core Animation 工具**来检查应用并收集有关问题的信息。'
- en: '**Analyze the information**: Try to make an assumption about the cause of the
    issue.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分析信息**：尝试对问题的原因做出假设。'
- en: '**Perform a fix or a change**: Implement some sort of solution. It doesn’t
    have to be the final solution; it can be some temporary code modification to isolate
    the issue.'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**执行修复或更改**：实现某种形式的解决方案。这不必是最终解决方案；它可以是某种临时代码修改，以隔离问题。'
- en: '**Test and verify**: Rerun the app to see whether there’s a change. Restart
    the process if needed.'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试和验证**：重新运行应用以查看是否有变化。如果需要，重新启动此过程。'
- en: Notice that these steps are only an outline for a recommended debug procedure,
    and it is great for an interview answer. However, we should note that performance
    issues are more complex and may require additional or different steps.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些步骤仅是一个推荐的调试程序的概要，对于面试回答来说非常好。然而，我们应该注意，性能问题可能更加复杂，可能需要额外的或不同的步骤。
- en: Documentation
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**文档**'
- en: Documentation questions are typically not included in technical job interviews,
    but they may be part of interviews whose purpose is to gain insight into us as
    developers.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 技术面试中通常不包含文档问题，但它们可能是旨在深入了解我们作为开发者的面试的一部分。
- en: However, documentation is an essential part of being an iOS developer, and that
    part gets a special place when we are part of a team.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，文档是iOS开发者不可或缺的一部分，当我们是团队的一员时，这部分会得到特殊的位置。
- en: 'Here are some reasons why documentation is crucial:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些为什么文档至关重要的原因：
- en: '**Better collaboration**: Documentation makes it easier for multiple developers
    to work on the same code base, where they need to explain smaller parts of the
    code.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的协作**：文档使得多个开发者更容易在同一个代码库上工作，他们需要解释代码的较小部分。'
- en: '**Improve code understanding**: Do you know what it’s like to write code and
    one week later look back and not understand why you did what you did? It is a
    common thing among developers. Documentation doesn’t eliminate that but can improve
    it dramatically.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高代码理解**：你知道写代码一周后回过头来看不懂自己当时为什么这样做的感觉吗？这在开发者中是常见的事情。文档不能消除这一点，但它可以极大地改善它。'
- en: '**Onboarding new members**: That’s a critical point. Explaining something to
    an old-timer developer is straightforward, but doing the same for a new team member
    is much more complex. That’s another reason why documentation plays a significant
    role here.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**入职新成员**：这是一个关键点。向经验丰富的开发者解释某事是直接的，但向新团队成员做同样的事情要复杂得多。这也是文档在这里发挥重要作用的原因之一。'
- en: '**Improving code reviews**: A “code review” is an event where someone who didn’t
    write the code tries to read and understand it. It goes without saying why documenting
    it is a crucial thing to do.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进代码审查**：一个“代码审查”是一个事件，其中没有编写代码的人试图阅读和理解它。不言而喻，记录它是至关重要的。'
- en: Looking at the list, we can understand why documentation is a powerful tool,
    especially in teams, and why it is not a part of the technical interview but rather
    part of the “personality” review. But documentation is an integral part of being
    a professional developer, so it is better to be prepared with examples and point-of-view
    statements.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这个列表，我们可以理解为什么文档是一个强大的工具，尤其是在团队中，为什么它不是技术面试的一部分，而是“个性”审查的一部分。但文档是专业开发者不可或缺的一部分，所以最好准备好例子和观点陈述。
- en: “Can you explain how you document your iOS code?”
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你能解释一下你是如何记录你的iOS代码的吗？”
- en: '*Why is this* *question important?*'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要？*'
- en: We already went through why documentation is essential as an iOS developer.
    Now, the interviewer wants to see our techniques and approach to comments and
    documents.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了为什么文档对于iOS开发者来说是必不可少的。现在，面试官想看看我们处理注释和文档的技术和方法。
- en: '*What is* *the answer?*'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*答案是什么？*'
- en: The basis of iOS code documentation is done using comments throughout the code
    base.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: iOS代码文档的基础是通过在整个代码库中使用注释来完成的。
- en: 'There are several types of comments we can use to document our project:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用几种类型的注释来记录我们的项目：
- en: '**A “Why” comment**: This doesn’t need us to explain *what* we did, but rather
    *why* we did it (that’s a typical mistake developers make). These comments should
    be in places where there is a reason for our decision, but it is not reflected
    in the code. This comment can help other developers, but also we can benefit from
    that. Here’s an example of such a comment:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个“为什么”注释**：这不需要我们解释我们做了什么，而是解释我们为什么这样做（这是开发者常见的错误）。这些注释应该放在我们的决策有理由但未反映在代码中的地方。这样的注释可以帮助其他开发者，同时我们也可以从中受益。以下是一个这样的注释示例：'
- en: '[PRE5]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We’re adding a comment that explains why we used `hashValue` and not the fact
    that we used it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个注释，解释了我们为什么使用`hashValue`而不是使用它的实际情况。
- en: '**Code organization**: One good use of comments is to organize code; a common
    practice is using a “pragma mark.” A pragma mark helps us separate our code into
    sections to be more readable and easier to navigate. Let’s see how to organize
    our code with pragma marks:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码组织**：注释的一个很好的用途是组织代码；一个常见的做法是使用“pragma mark”。Pragma mark帮助我们将代码分成几个部分，使其更易于阅读和导航。让我们看看如何使用pragma
    marks来组织我们的代码：'
- en: '[PRE6]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Xcode knows how to read these types of comments and provides an easy way to
    jump between the different sections.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode知道如何读取这些类型的注释，并提供了一种轻松地在不同部分之间跳转的方法。
- en: '**Method documentation**: We can document methods, properties, and classes
    using code-generation comments. These comments can be generated automatically
    by Xcode or other third-party tools and be a part of our project documentation.
    This can be done easily using the **/** **/** marks:'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法文档**：我们可以使用代码生成注释来记录方法、属性和类。这些注释可以由Xcode或其他第三方工具自动生成，并成为我们项目文档的一部分。这可以通过使用
    **/** **/** 标记轻松完成：'
- en: '[PRE7]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The results of adding `@params` and `@return` information to our function declaration
    comment provide Xcode (or other relevant tools) the ability to automatically generate
    documentation similar to what we can find on Xcode Developer Documentation.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 将`@params`和`@return`信息添加到我们的函数声明注释中，为Xcode（或其他相关工具）提供了自动生成类似我们在Xcode开发者文档中找到的文档的能力。
- en: In the end, it is important to understand the different types of comments to
    structure a good answer. A short answer such as “Explain what I do” is not a “pro”
    answer and doesn’t reflect our expertise.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，理解不同类型的注释以构建一个良好的答案是很重要的。像“解释我做什么”这样的简短答案不是一个“专业”的答案，也不反映我们的专业知识。
- en: It is also worth saying that good naming conventions for methods, classes, and
    variables can make our code much more readable and self-explanatory and, by that,
    reduce the need for documentation.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，良好的方法、类和变量命名约定可以使我们的代码更加易于阅读和自我解释，从而减少对文档的需求。
- en: “Can you explain how to document design patterns and best practices in iOS development?”
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “你能解释如何记录iOS开发中的设计模式和最佳实践吗？”
- en: '*Why is this* *question important?*'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要？*'
- en: Technical design documents are not something junior or even mid-level developers
    do, but instead, senior developers and tech leads.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 技术设计文档不是初级或中级开发者做的事情，而是高级开发者和技术负责人做的事情。
- en: So, this question’s relevance depends on our interviewing role.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个问题的重要性取决于我们的面试角色。
- en: Also, our expertise in technical design documents is probably based on our current
    and previous workplaces. Small start-ups are not always strict about technical
    documents, and that’s something we can mention when receiving this question.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们在技术设计文档中的专业知识可能基于我们当前和以前的工作场所。小型初创公司并不总是对技术文档有严格的要求，这是我们可以在回答这个问题时提到的事情。
- en: '*What is* *the answer?*'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*答案是什么？*'
- en: 'A technical design document is not there just to create one. It is there to
    answer the following questions:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 技术设计文档不仅仅是为了创建一个文档。它存在是为了回答以下问题：
- en: What is the *purpose* of the feature?
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能的*目的是什么？*
- en: What were the *alternative* solutions?
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些*替代方案*？
- en: Why did we *choose* the selected solution?
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为什么选择了这个解决方案？
- en: What is the *preferred solution* in detail?
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细说明*首选解决方案*。
- en: Now that we have these questions in mind, we understand that a technical document
    reflects the thinking process behind our solution and not just describes it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这些问题在心中，我们理解技术文档反映了我们解决方案背后的思考过程，而不仅仅是描述它。
- en: 'To document a feature, we need to follow these steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要记录一个功能，我们需要遵循以下步骤：
- en: '**Choose a format**: Choose a suitable format for the document that will be
    consistent across different features.'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择格式**：为文档选择一个适合的格式，使其在不同功能中保持一致。'
- en: '**Include an introduction**: Explain the feature’s goal and what it includes.'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**包含简介**：解释功能的目标和它包含的内容。'
- en: '**Discuss alternatives**: Explain the different ways to solve that feature
    and their tradeoffs.'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**讨论替代方案**：解释解决该功能的不同方法和它们的权衡。'
- en: '**Describe the selected option**: Describe the choice among the alternatives.'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**描述所选选项**：描述在替代方案中的选择。'
- en: '**Describe the selected option in detail**: Provide code examples, diagrams,
    and flow charts to explain what we did.'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**详细描述所选选项**：提供代码示例、图表和流程图来解释我们所做的工作。'
- en: It is important to note that technical document formats and processes differ
    from place to place, but the idea stays the same. As long as we provide a detailed
    answer with confidence and understanding, it will be good enough to pass that
    question.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，技术文档的格式和流程因地方而异，但理念保持不变。只要我们自信且理解地提供详细的答案，就足以通过这个问题。
- en: “How do you handle the documentation of code that multiple team members are
    developing?”
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “如何处理多个团队成员共同开发的代码的文档？”
- en: '*Why is this* *question important?*'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么这个问题很重要？*'
- en: Writing documentation for ourselves is straightforward. Most likely, we can
    communicate with ourselves easily…
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们自己编写文档是直接的。我们很可能很容易与自己沟通…
- en: The real challenge starts when our code documentation needs to serve our teammates.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的代码文档需要服务于我们的队友时，真正的挑战才开始。
- en: This question tests how we see code documentation as part of a team when we
    need to read and write such documentation and maintain it over time.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题测试了当我们需要阅读和编写此类文档并维护它时，我们将代码文档视为团队的一部分的方式。
- en: '*What is* *the answer?*'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '*答案是什么？*'
- en: There isn’t a magic answer for that, as it depends on culture, project, and
    team size.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题没有神奇的答案，因为它取决于文化、项目和团队规模。
- en: 'But some best practices are helpful to follow:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 但一些最佳实践是有帮助的：
- en: '**Establish a documentation standard**: The team must agree on some comments
    and document format guidelines. For example – what methods to comment? What types
    of comments to emphasize? How to explain design decisions? Guidelines are a great
    start to managing documentation in a team.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建立文档标准**：团队必须就一些评论和文档格式指南达成一致。例如——如何进行评论？强调哪些类型的评论？如何解释设计决策？指南是管理团队文档的绝佳开始。'
- en: '**Use a collaboration tool to manage documentation**: Plenty of collaboration
    tools can help us work on the same document with our teammates, including comments
    and discussions. We should take advantage of these tools to ensure the whole team
    participates in the documentation.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用协作工具管理文档**：许多协作工具可以帮助我们与队友共同工作在同一份文档上，包括评论和讨论。我们应该利用这些工具确保整个团队参与文档编写。'
- en: '**Encourage collaboration**: This is not just using a collaboration tool. If
    we want everyone on the team to take part, we should encourage the team to review
    each other’s documentation and comment on their code as part of the code review.
    Remember – reviews are also part of the collaboration.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼓励协作**：这不仅仅是使用协作工具。如果我们希望团队中的每个人都参与进来，我们应该鼓励团队相互审查彼此的文档，并在代码审查中对其代码进行评论。记住——审查也是协作的一部分。'
- en: '**Provide training**: Onboard new team members on how to comment and write
    documents. Training doesn’t have to be overhead – it can be short or as part of
    a weekly meeting. Cross-team alignment is essential to make sure our documentation
    is effective for everyone.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供培训**：对新团队成员进行如何评论和撰写文档的培训。培训不必成为负担——它可以简短，或者作为每周会议的一部分。跨团队协调对于确保我们的文档对每个人都是有效的至关重要。'
- en: Following these guidelines is a great start to ensure the whole team is responsible
    for documentation *together* with high standards and motivation.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这些指南是确保整个团队以高标准和动力共同负责文档的绝佳开始。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed topics that are not directly related to coding,
    but as iOS developers, they are crucial. Remember that most mobile teams are small
    – sometimes, a team includes only one developer, so being a mature and professional
    developer is crucial.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了与编码不直接相关的话题，但对于iOS开发者来说，它们至关重要。记住，大多数移动团队规模较小——有时，一个团队只包括一名开发者，因此成为一名成熟和专业的开发者至关重要。
- en: This chapter is unique – instead of talking about coding, it examined quality
    and communication. These skills are harder to test and even harder to show in
    an interview. But in good workplaces with an effective process, these topics will
    pop up in one way or another.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 本章独特之处在于——它不是在谈论编码，而是考察质量和沟通。这些技能更难测试，甚至在面试中展示也更困难。但在有效流程的良好工作场所，这些话题会以某种方式出现。
- en: 'In the next chapter, we will discuss perhaps the most crucial framework of
    iOS development: UIKit. No iOS interview can conclude without questions being
    asked about that framework.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论iOS开发中可能最重要的框架：UIKit。没有关于该框架的问题，iOS面试就无法结束。
