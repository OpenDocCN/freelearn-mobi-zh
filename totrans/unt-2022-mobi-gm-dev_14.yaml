- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Submitting Games to App Stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the course of this book, we have gone over many aspects of building games
    for mobile devices. The last step in our game development journey is actually
    releasing the game out into the wild and having people actually play it. All of
    those long hours of hard work have now come together into something that the masses
    will be able to enjoy.
  prefs: []
  type: TYPE_NORMAL
- en: When doing this, there are a number of things to keep in mind, and this is exactly
    what we will be discussing next.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go over the process of submitting your game to the
    Google Play Store or iOS App Store, with tips and tricks to help the process go
    smoother. By the end of this chapter, you will know exactly how to create developer
    accounts for both stores, as well as how to submit your game to the respective
    stores.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will be split into a number of topics. It will contain a simple
    step-by-step process from beginning to end. Here is the outline of our tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Putting your game on the Google Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting your game on the Apple iOS App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you want to download
    the exact version used in this book, and there is a new version out, you can visit
    Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the **Unity Editor system requirements** section. To deploy your project, you
    will need an Android or iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter13%20and%2014](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter13%20and%2014).
  prefs: []
  type: TYPE_NORMAL
- en: Putting your game on the Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that your game is built, you will need to actually put it up on Google’s
    Play Store. To put games up on the Google Play Store, you are required to pay
    a one-time $25 dollar fee. This may or may not seem like a large amount of money,
    but it is much cheaper than the iOS App Store and is a one-time fee, so for those
    who are a bit more budget-conscious, you may wish to dive into Google first and
    make some profit before moving on to Apple’s store. We will first look at the
    Google Play Console before filling out all of the details needed in order to submit
    our game to the store. We will also discuss how to mark our game as a beta version
    to get feedback from others before making the final submission.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Google Play Console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to gain access to the Google Play Console. This allows you
    to publish an Android app on Google Play as well as Google Play Game Services
    if want. Implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your web browser and go to [https://play.google.com/console/about/](https://play.google.com/console/about/).
    This is the **Google Play Console** page, which allows you to add apps to the
    Google Play store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.1 –– The Google Play Console Page](img/B18868_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 –– The Google Play Console Page
  prefs: []
  type: TYPE_NORMAL
- en: 'If you aren’t signed in to your Google account, you’ll need to sign in; otherwise,
    you will need to sign up as a developer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![14.2 – Creating a Play Console developer account](img/B18868_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 14.2 – Creating a Play Console developer account
  prefs: []
  type: TYPE_NORMAL
- en: You’ll pick an account type, and then you’ll need to fill out information related
    to your developer account and information related to the apps that you will be
    publishing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.3 – Adding \uFEFFinfo about your \uFEFFapps](img/B18868_14_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – Adding info about your apps
  prefs: []
  type: TYPE_NORMAL
- en: Next will come a page where you’ll have to accept the terms and click on **Create
    account and pay**. Afterwards you’ll put in your credit or debit card info in
    order to complete the purchase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.4 – Completing payment for \uFEFFthe developer registration fe\uFEFF\
    e\uFEFF](img/B18868_14_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Completing payment for the developer registration fee
  prefs: []
  type: TYPE_NORMAL
- en: If all goes well, you’ll be brought to the Google Play Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have an account, you can now start the process of actually publishing
    a game to the Google Play store. To start that process, we will need to add a
    project to our account, which is what we will be doing next.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing an app on Google Play
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process of publishing an app to Google Play involves filling out a number
    of different fields with information about your game, as well as art assets for
    screenshots. To do this, implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **All apps** page, click on the **Create** **app** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.5 – The All apps page](img/B18868_14_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – The All apps page
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be brought to a page where you need to select the app name and default
    language of your game. You’ll then need to select whether it’s an app or a game.
    We’ll choose **Game**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.6 – The Create app menu](img/B18868_14_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – The Create app menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down, and you’ll see three declarations that you’ll need to read through
    and check whether they’re relevant, and then, click on the **Create** **app**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.7 – The app dashboard](img/B18868_14_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – The app dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard page shows details of all of the latest steps that are required
    in order to get your app up and running. The first section includes building a
    test version of your game so that others can give you feedback before the final
    release.
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down to the **Start testing now** section. From there, select the **Select**
    **testers** option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8 – Start testing now](img/B18868_14_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.8 – Start testing now
  prefs: []
  type: TYPE_NORMAL
- en: This will open the Internal testing page, which can also be accessed by going
    to **Testing** | **Internal testing** via the **Release** section of the dashboard.
    From there, scroll down, and under **Testers**, you’ll see an option for you to
    create an e-mail list of testers for your game by clicking the **Create email**
    **list** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.9 – The Internal testing menu](img/B18868_14_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.9 – The Internal testing menu
  prefs: []
  type: TYPE_NORMAL
- en: This will bring up a window, where you can fill out a list name and then add
    the email addresses of those you want to test your game, by typing in the values
    yourself, separated by commas, or by using a CSV file, as we discussed previously.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10 – Creating an email list](img/B18868_14_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.10 – Creating an email list
  prefs: []
  type: TYPE_NORMAL
- en: Once finished, hit the **Save changes** button, and you will be asked to confirm
    the saved changes. Note that this email list will be available to use across all
    apps in your developer account. Hit **Create**, and you should move back to the
    previous section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From there, for **Feedback URL or email address**, fill in your email address
    or website. Afterward, click on the **Save changes** button. Note that the **How
    testers join your test** section currently has the **Copy link** button grayed
    out. This is because we currently do not have the app published; however, that
    will be fixed once we create a release, which is what we will be doing next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top right, hit the `.aab` file into the **drop app bundles here to**
    **upload** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Below that, you’ll be able to provide a release name and release notes about
    this particular version of the game. Once you’ve finished filling out those details,
    go ahead and hit the **Save** **as Draft** button, and then hit **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.11 – Filling out Releas\uFEFFe details](img/B18868_14_11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.11 – Filling out Release details
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see some information and any errors, warnings, and messages about your
    project. Read through them if needed, and assuming there are no errors, you should
    be able to click on the **Save** button to allow others to try out your project!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12 – Reviewing the release](img/B18868_14_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.12 – Reviewing the release
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the dashboard by clicking on the **Dashboard** button. Upon returning
    to the main page, you’ll see that the next section is **Set up** **your app**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.13 – Set up your app](img/B18868_14_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.13 – Set up your app
  prefs: []
  type: TYPE_NORMAL
- en: We will need to go through each of these sections and complete them in order
    to set up the store listing.
  prefs: []
  type: TYPE_NORMAL
- en: First, click on the **Set privacy policy** option and provide a link to a privacy
    policy you want to use. In the past, people have used a link that Unity themselves
    recommended for those using Unity Analytics and Ads ([https://unity3d.com/legal/privacy-policy](https://unity3d.com/legal/privacy-policy)),
    but Google has recently changed their policy, and now your organization or app’s
    name needs to be included in the policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The safest option is to hire a lawyer to draft a privacy policy for your app,
    but if you wish you create your own privacy policy, this site can help you create
    the materials: [https://letsmakeagame.net/game-privacy-policy-generator/](https://letsmakeagame.net/game-privacy-policy-generator/).
    In my case, I checked the **Facebook** and **Unity** options in the included links
    to the privacy policy of the **Third Party Services** section, and then I filled
    in the needed data. Once completed, hit the **Generate** button, and you’ll have
    the boilerplate data needed for your own privacy policy to then host on your own
    web page.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, go to **App access**, then select **All functionality is available without
    special access**, and press **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Ads**, select **Yes, my app contains ads**, and select **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Content ratings**, select **Start new questionnaire**, and answer the
    questions based on your game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.14 – Content ratings](img/B18868_14_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.14 – Content ratings
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll answer questions about your target audience and content. Note that
    if you say your audience contains children aged 13 and under, there are several
    other questions that you will need to answer. Previously, we said the game wasn’t,
    so I checked the other ages above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next sections, you’ll confirm that your game is not a news app or a COVID-19
    contact tracing or status app.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in the **Data Safety** section, you’ll need to go through each of the
    pages and answer the given questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the data safety requirements for the different areas of Unity Gaming Services,
    you can use the following link: [https://docs.unity.com/ugs-overview/GoogleDataSafety.html](https://docs.unity.com/ugs-overview/GoogleDataSafety.html).
    In our project, we use In-App Purchasing, Ads Monetization, Remote Config, and
    Analytics. We will need to go through all three of these options and ensure that
    we pick the correct options for each. Note that just because something is shared
    one way by one product doesn’t mean it is shared another way by another.'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Data Collection and security** section, I answered **Yes**, **Yes**,
    **My app does not allow users to create an account**, and **No**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Data Types**, check the **Approximate** **location** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Personal Info**, check **User IDs**. Analytics can track more, but we
    will not enable them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Financial Info**, check **Purchase History**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, under **Device or other IDs,** check **Device or other IDs**. Then,
    click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each of these values, we will need to click on the arrow to answer questions
    about them. For **User IDs**, mark that the property is **Collected** and **Shared**,
    that it is **not processed ephemerally**, **Data collection is required**, and
    its purpose for collection and sharing is for **App functionality**. Then, hit
    the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Purchase history**, check that is it **Collected** and **Shared**, that
    it is **not processed ephemerally**, **Data collection is required**, and its
    purpose for collection and sharing is for **App functionality**. Then, hit the
    **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Approximate location**, check that is it **Collected** and **Shared**,
    that it is **not processed ephemerally**, **Data collection is required**, and
    its purpose for collection and sharing is for **App functionality**. Then hit
    the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Device or other IDs**, check that it is **Collected**, check the **Yes,
    this collected data is processed ephemerally** and **Data collection is required
    (users can’t turn off this data collection)** options, and then confirm that the
    data is collected for **App functionality**. Afterward, hit the **Save** button.
    Then, you should be able to hit the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.15 – Data safety](img/B18868_14_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.15 – Data safety
  prefs: []
  type: TYPE_NORMAL
- en: If everything looks good, go ahead and hit the **Save** button, and you can
    then return to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the **Government** apps section, answer **No**, and hit **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, in the **Manage how your app is organized and presented** section, click
    on the **Select an app category and provide contact** **details** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From here, you’d select whether the game is an app or a game; `Arcade`). You
    can then use tags to help describe the content of your game. This is a way to
    help people define your app and one way that can help people to discover the project
    through certain keywords, so think about the things that make your game unique
    and ensure to include them here. Under each tag, there is a question mark that
    you can click on to get info about them, helping you if you’re unsure what they
    are. In the end, I settled for `Arcade, Casual, Hyper-casual, Runner`. When you’re
    done, hit **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.16 – Manage tags](img/B18868_14_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.16 – Manage tags
  prefs: []
  type: TYPE_NORMAL
- en: Then, fill out your store listing contact details. Note that the information
    is shown to users on Google Play, so I wouldn’t add your personal phone number.
    Once finished, hit the **Save** button and return to the dashboard **Dashboard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, click on the **Set up your store listing** option. Scrolling down,
    you’ll then be brought to a section where you’ll need to fill in information about
    your game, starting with a short description and then a more detailed full description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.17 – Creating a main store listing](img/B18868_14_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.17 – Creating a main store listing
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll then need to provide graphical assets to be used to display your game.
    You are required to have at least two screenshots and then some additional icons
    and graphics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.18 – Addi\uFEFFng phone screenshots](img/B18868_14_18.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.18 – Adding phone screenshots
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll then need to include some more images for icons and other featured graphics.
    The ones with an asterisk (*****) are required. You can find some pre-created
    ones in the example code with this book, but I suggest that you create your own
    once you’ve customized this game to your liking:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.19 – Finishing t\uFEFFhe main store listing](img/B18868_14_19.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.19 – Finishing the main store listing
  prefs: []
  type: TYPE_NORMAL
- en: When you’re finished, hit the **Save** button and return to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you’ve been through most of the hurdles of the Google Play development
    process. You can now choose to go to the **Release your app** section and jump
    to the **Publish your app on Google Play** section, create a new build and roll
    out the release to the world, or go through an alpha and beta phase of your project
    first to get valuable feedback and iterate on your project to make a better first
    impression. Either way, the process will be the same as what you did in the previous
    steps, aside from selecting what countries and regions you want the project to
    be available in and what you want to charge for the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With these steps finished, we can now start the process of publishing on Apple’s
    iOS App Store, which we will be doing next.
  prefs: []
  type: TYPE_NORMAL
- en: Putting your game on the Apple iOS App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the Google Play store, there is an additional fee to put your game
    on the App Store. Unlike the Google Play store, the fee is $99 plus tax every
    year. However, a lot of people believe that having their titles on iOS devices
    is worth the extra cost. In this section, we will go through the process of getting
    our game on the App Store. We will start by setting up your Apple Developer account
    and creating a provisioning profile. Afterward, we’ll utilize the iTunes Connect
    tool to actually add the app to the store and utilize Xcode to make an archive,
    with which we can upload the project to the App Store so that it can finally be
    reviewed for submission.
  prefs: []
  type: TYPE_NORMAL
- en: Apple Developer setup and creating a provisioning profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to deploy an app onto an iOS device, you are required to use a Mac
    computer, but before we move on to the iTunes store, we first need to have all
    of the certificates and permissions figured out in advance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Mac computer, go to [developer.apple.com](http://developer.apple.com):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.2\uFEFF0 – The Apple Developer site](img/B18868_14_20.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.20 – The Apple Developer site
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, click on the **Account** button at the top right of the screen,
    fill in your Apple ID and password, and then press *Enter* to sign in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.21 – Sign in to Apple Developer](img/B18868_14_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.21 – Sign in to Apple Developer
  prefs: []
  type: TYPE_NORMAL
- en: If you have a two-factor identification method set up, you may need to verify
    that you are indeed yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, click on **Accounts**. Now, at this point, you will need to make
    the payment for the $99 annual fee. This process should be fairly straightforward,
    and once you have finished doing that, you will arrive on a page similar to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.22 – The Apple Developer Account Page](img/B18868_14_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.22 – The Apple Developer Account Page
  prefs: []
  type: TYPE_NORMAL
- en: 4. In the **Certificates, Identifiers & Profiles** section, select the **Certificates**
    section to start the process of creating apps. If you just paid the $99 fee, you
    may see an error stating that **The selected team does not have a program membership
    that is eligible for** **this feature**.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry – that just means that the payment hasn’t been processed at Apple’s
    end yet. Try again in about 30 minutes to an hour, and the screen should work
    okay.
  prefs: []
  type: TYPE_NORMAL
- en: '5. We will need to set up some certificates to allow us to export to the iOS
    App Store. From the **Certificates** page, click on the **+** button on the right
    side of **Certificates**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.23 – The Certificates page](img/B18868_14_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.23 – The Certificates page
  prefs: []
  type: TYPE_NORMAL
- en: '6. When the page asks what kind of certificate we need, select the **Apple
    Distribution** option under the **Software** section, and then click on **Continue**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.24 – Selecting the certificate type](img/B18868_14_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.24 – Selecting the certificate type
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that there’s another type here that also says that there is an
    iOS distribution type as well. You might be wondering why we aren’t picking that
    one. As of Xcode 11, this is the new type of certificate that Apple wants developers
    to use for devices that aim to go on the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, if you are only planning on developing for iOS, you
    can choose **iOS Distribution** instead. However, due to the possibility that
    Apple may discontinue it in the future, I am choosing **Apple** **Distribution**
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 7. Next, we need to create a `Applications\Utilities` folder on our Mac and
    opening the **Keychain** **Access** program.
  prefs: []
  type: TYPE_NORMAL
- en: '8. From there, go to **Keychain Access** | **Certificate Assistant** | **Request
    a Certificate From a** **Certificate Authority...**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.25 – Requesting a certificate](img/B18868_14_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.25 – Requesting a certificate
  prefs: []
  type: TYPE_NORMAL
- en: '9. Once there, fill in the information with your email address in the **User
    Email Address** property. Then, for **Common Name**, put in a name, and leave
    the **CA Email Address** field blank. Then, for the **Request is** option, select
    **Saved** **to disk**:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Fi\uFEFFgure 14.26 – Filling in our certificate information](img/B18868_14_26.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.26 – Filling in our certificate information
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on the **Continue** button and select a spot to save the certificate.
    I personally used my desktop, but you can use any location you please, so long
    as you remember where it is later on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.27 – Saving the certificate](img/B18868_14_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.27 – Saving the certificate
  prefs: []
  type: TYPE_NORMAL
- en: Afterward, the screen will state that the request has been created on the disk.
    Go ahead and click on **Done**, and then return to your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down and then click on the **Continue** button. From there, you’ll be
    brought to the **Generate your certificate** page. Click on the **Choose File**
    button and then select the file we just created. Then, click on the **Continue**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.28 – Uploading the certificate](img/B18868_14_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.28 – Uploading the certificate
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll then be brought to a screen saying that your certificate is ready. Go
    ahead and click on the **Download** button, and save the certificate to your disk.
    If using Safari, you may be asked whether you want to allow downloads; click on
    **Allow**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.29 – Download Your Certificate](img/B18868_14_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.29 – Download Your Certificate
  prefs: []
  type: TYPE_NORMAL
- en: 'Afterward, double-click on the `.cer` file to give the data access to **Keychain**.
    Under **Keychain**, change the value to **login**. You’ll be asked whether you
    want to add the certificates; go ahead and click on **Add**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.30 – Adding certificates to a keychain](img/B18868_14_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.30 – Adding certificates to a keychain
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create an App ID. To do this, go to the left sidebar and
    click on the `Endless Roller` project, which we can customize by clicking on the
    **Edit** button. However, if you didn’t do so earlier and have a different bundle
    ID than the ones listed, let’s go through the details next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.31 – A list of identifiers](img/B18868_14_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.31 – A list of identifiers
  prefs: []
  type: TYPE_NORMAL
- en: We can create a new ID by clicking on the **+** button in the top-right corner
    of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From there, select `Endless Roller`. Then, under `com.JohnPDoran.EndlessRoller`.
    Under **App Services**, you can select the options that want to use, but in this
    case, we don’t need to worry about these, so we can just scroll all the way down
    and then click on the **Continue** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, the bundle I mentioned previously would not work, due to there
    already being an ID with this specific bundle, and you need to have unique ones.
    With that in mind, I just went and renamed the original App ID to Endless Roller
    and then completed this section.
  prefs: []
  type: TYPE_NORMAL
- en: The last aspect we will need to set up here is a provisioning profile. Apple
    defines a provisioning profile as “a collection of digital entities that uniquely
    ties developers and devices to an authorized iPhone Development Team and enables
    a device to be used for testing.” This means that it’s a link between a device
    and the developer account that makes the project.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on provisioning profiles, check out [https://medium.com/@alexi.schreier/wtf-is-a-provisioning-profile-on-ios-a9b65d79221f](https://medium.com/@alexi.schreier/wtf-is-a-provisioning-profile-on-ios-a9b65d79221f).
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, click on the **Profiles** section on the left side of the menu.
    From there, click on the blue **+** icon to the right of **Profiles**. Under **Distribution**,
    select the **App Store**, and then click on **Continue**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.32 – Creating a profile for the App Store](img/B18868_14_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.32 – Creating a profile for the App Store
  prefs: []
  type: TYPE_NORMAL
- en: From there, you’ll need to select your App ID. `Endless Roller` may be selected;
    otherwise, search for it in the drop-down list and select it, and then click on
    **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.33 – S\uFEFFelecting the App ID](img/B18868_14_33.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.33 – Selecting the App ID
  prefs: []
  type: TYPE_NORMAL
- en: Then, select your certificate and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, select what certificate you want to use and hit `Endless Roller` – and
    then click on **Generate**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.34 – Generating a provisioning profile](img/B18868_14_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.34 – Generating a provisioning profile
  prefs: []
  type: TYPE_NORMAL
- en: 'The button will then change to say **Download**. Go ahead and download the
    profile, keeping it safe, as we’ll need to use it later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.35 – T\uFEFF\uFEFF\uFEFFhe provisioning profile is ready](img/B18868_14_35.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.35 – The provisioning profile is ready
  prefs: []
  type: TYPE_NORMAL
- en: With that, our provisioning profile is ready.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an app to App Store Connect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the provisioning profile, we can actually put our app on the
    store. To do that, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your web browser, go to [http://appstoreconnect.apple.com](http://appstoreconnect.apple.com)
    and click on the **My** **Apps** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.36 – App Store Connect](img/B18868_14_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.36 – App Store Connect
  prefs: []
  type: TYPE_NORMAL
- en: If you intend to sell your apps, you will also be required to go to the **Agreements,
    Tax, and Banking** section and enter your banking information.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Apps** page, go to the top-left corner, and click on the **+** icon
    to add a new app to our profile by selecting **New App**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.37 – The Apps page](img/B18868_14_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.37 – The Apps page
  prefs: []
  type: TYPE_NORMAL
- en: 'On this menu, select `Endless Roller` again. Under `EndlessRoller`). Under
    **User Access**, select **Full Access**. Then, click on the **Create** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.38 – Creating a new app](img/B18868_14_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.38 – Creating a new app
  prefs: []
  type: TYPE_NORMAL
- en: You’ll then be brought to the **1.0 Prepare for Submission** screen. Start filling
    in the information for the title. Start off by filling in the **Description**
    textbox with the information that you used earlier for Google Play. Then, under
    **Keywords**, enter possible terms that people could search for in order to find
    your game, and under **Copyright**, go ahead and enter your name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.39 – Filling out Version Information](img/B18868_14_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.39 – Filling out Version Information
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you’ll need to provide some screenshots of your game to use. If you
    click on the **iOS Screenshot Properties** page, you’ll see details on how your
    screenshots should be created (specifically, the size of the images). The one
    used in this chapter is for the iPhone 6.5” display, but you can also choose for
    the optional 6.7” one to support the iPhone 14 Pro:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.40 – Submitting app screenshots](img/B18868_14_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.40 – Submitting app screenshots
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the **Build** section, it states that you need to submit your build
    using one of several tools. We will do that after we finish up the remaining steps
    here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Build** section, go to the **App Information** screen. From there,
    change the category to **Games**, and then, under **Subcategory**, select **Casual**.
    Then, click on **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.41 – Setting up an app category](img/B18868_14_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.41 – Setting up an app category
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Pricing and Availability** section and select a price. In my case,
    I’ll be using **$0.00 (Free)**, but as always, you can pick what you want. Once
    you’ve finished with the options here, click on the **Save** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.42 – Setting up the pricing and availability](img/B18868_14_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.42 – Setting up the pricing and availability
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, go to the **Privacy Policy** section. As discussed in the Google Play
    section, people in the past used a link that Unity themselves recommended for
    those using Unity Analytics and Ads ([https://unity3d.com/legal/privacy-policy](https://unity3d.com/legal/privacy-policy)),
    but the safest option is to hire a lawyer to draft a privacy policy for your app.
    If you wish you create your own privacy policy, this site can help you create
    the materials: [https://letsmakeagame.net/game-privacy-policy-generator/](https://letsmakeagame.net/game-privacy-policy-generator/).
    In my case, I checked the **Facebook** and **Unity** options in the include links
    to the privacy policy of the **Third Party Services** section, and then I filled
    in the necessary data. Once completed, hit the **Generate** button, and you’ll
    have the boilerplate data needed for your own privacy policy to then host.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Privacy Policy URL** section, and then click on the **Get** **Started**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.43 – Setting up app privacy](img/B18868_14_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.43 – Setting up app privacy
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill out the appropriate answers, based on the types of things your app uses.
    In our case, since we are using Unity Ads, Analytics, and IAPs (in-app purchases),
    we will need to go through each of their pages and ensure that we are using all
    of their info. The following includes the information that I used to fill in the
    details at my end: [http://documentation.cloud.unity3d.com/en/collections/2654776-apple-privacy-surveys#engage-nutritional-labels](http://documentation.cloud.unity3d.com/en/collections/2654776-apple-privacy-surveys#engage-nutritional-labels).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing that information, your **Product Page Preview** screen should
    look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.44 – App Privacy completed](img/B18868_14_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.44 – App Privacy completed
  prefs: []
  type: TYPE_NORMAL
- en: Once finished, click on the **Publish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all of the information is filled in, go ahead and open up Xcode again and
    your exported project (follow the same steps from [*Chapter 2*](B18868_02.xhtml#_idTextAnchor087),
    *Project Setup for Android and* *iOS Development*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The addition of the Facebook SDK has added a number of things that we’ll have
    to add to our project in order for it to compile on iOS. Upon switching back to
    the iOS platform, I got an error saying that CocoaPods failed to install correctly.
    With that in mind, I had to make the following changes to the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to a PC, Mac, and Linux standalone build. From your Mac desktop,
    open a terminal window and enter the following code – `sudo gem install cocoapods
    -v 1.10.2`. This will install a stable version of CocoaPods that will work with
    this version of Unity. Afterward, back in Unity, switch the platform back to iOS
    and you should see the error go away.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition, I also updated the Unity JAR resolver by going to [https://github.com/googlesamples/unity-jar-resolver](https://github.com/googlesamples/unity-jar-resolver)
    and downloading the latest release, which, in my case, was the `external-dependency-manager-1.2.175.unitypackage`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.\uFEFF45 – The updated unity-jar-resolver](img/B18868_14_45.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.45 – The updated unity-jar-resolver
  prefs: []
  type: TYPE_NORMAL
- en: Upon opening the file and importing the files, Unity asked whether I wanted
    to replace the obsolete libraries, which I accepted by hitting the **Apply** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.46 – Updating the files](img/B18868_14_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.46 – Updating the files
  prefs: []
  type: TYPE_NORMAL
- en: Once updated, go to **Assets** | **External Dependency Manager** | **iOS Resolver**
    | **Settings**. Under **Cocaopods Integration**, change the value to **Xcode Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.47 – Changing the Cocoapods integration](img/B18868_14_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.47 – Changing the Cocoapods integration
  prefs: []
  type: TYPE_NORMAL
- en: Using the Facebook SDK, we will no longer be able to open our project using
    the base project that Unity provides for us, so we will need to instead use the
    terminal to general a workspace file for us to use.
  prefs: []
  type: TYPE_NORMAL
- en: Then, after building the project, open a terminal window at the location of
    your project. Then, depending on your processor, you may need to enter a different
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your Mac processor uses an ARM processor (such as the M1), enter the following
    command – `sudo arch -x86_64 gem` `install ffi`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.48 – Executing the gem installation](img/B18868_14_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.48 – Executing the gem installation
  prefs: []
  type: TYPE_NORMAL
- en: This command will only need to be used once. Once the task is completed, enter
    the following command – `arch -x86_64 pod install`. This command will only need
    to be executed every time you create a new build of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.49 – The completed gem installation](img/B18868_14_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.49 – The completed gem installation
  prefs: []
  type: TYPE_NORMAL
- en: If your Mac processor uses an x86 processor (such as an Intel), enter the following
    command instead – `pod install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the Pod Install is successful, double-click the newly created `Unity-iPhone.xcworkspace`
    in your project directory to open the workspace in Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.50 – A new workspace file](img/B18868_14_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.50 – A new workspace file
  prefs: []
  type: TYPE_NORMAL
- en: If you try to run the game now, it will give you an error about a cycle in dependencies
    between targets. Thankfully, we can fix that once we enter into Xcode ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: Once in Xcode, on the far-left menu, select **Unity-iPhone project**, and then
    on the section to the right of that, under **TARGETS**, select the **UnityFramework**
    option. From the tabs that show up at the top of the screen, click on **Build
    Phases**. From there, you should see a series of options. Drag the **Headers**
    section above the **Compile Sources** section. If all goes well, it should look
    something like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.51 – Adjusting the Header order](img/B18868_14_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.51 – Adjusting the Header order
  prefs: []
  type: TYPE_NORMAL
- en: Apple also disallows Framework files to be included, so we will need to stop
    them from being embedded as well. To do that, go to **Build Phases**, and under
    **Build Options**, change the **Always Embed Swift Standard Libraries** option
    to **No**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.52 – Build Options](img/B18868_14_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.52 – Build Options
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project has opened in Xcode and exported successfully, go to **Product**
    | **Archive** and wait for it to finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.53 – Creating an archive](img/B18868_14_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.53 – Creating an archive
  prefs: []
  type: TYPE_NORMAL
- en: This generally takes a while, so wait for it to complete. You may be asked to
    use an access key. Go ahead and click on the **Allow** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Upon finishing, you should be brought to the following menu. Go ahead and select
    the **Distribute App** button to upload the project to the App Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.54 – Distributing the app archive](img/B18868_14_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.54 – Distributing the app archive
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll be asked to select some options. In general, use the default options,
    and afterward, it will show you a `.ipa` file uploaded to the store. Before uploading,
    it will give you one last look at the information about each aspect of the project.
    Go ahead and click on the **Upload** button, and wait for it to finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.55 – Reviewing the .ipa content](img/B18868_14_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.55 – Reviewing the .ipa content
  prefs: []
  type: TYPE_NORMAL
- en: 'When your app has been uploaded, you’ll see a screen like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.56 – Archive upload complete](img/B18868_14_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.56 – Archive upload complete
  prefs: []
  type: TYPE_NORMAL
- en: However, this will not show up immediately on **App Store Connect**; you may
    have to wait for a moment (or a couple of hours) before it’s updated. However,
    once it is ready, you’ll see it under the build section we mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Once it’s uploaded, you should be able to click on the **Select a build** button
    before you submit your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From there, select the build we created, and then click on the **Done** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.57 – Add Build](img/B18868_14_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.57 – Add Build
  prefs: []
  type: TYPE_NORMAL
- en: Note that there is a section that says that it is missing compliance info. Click
    on the `https` calls. I used standard encryption algorithms and said I wasn’t
    going to make the app available in France.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information on Unity’s stance on this, you can look at [https://forum.unity.com/threads/unity-iap-and-export-compliance.742898/](https://forum.unity.com/threads/unity-iap-and-export-compliance.742898/)
    and [https://forum.unity.com/threads/how-to-answer-apples-app-store-new-export-compliance-information-dialogue.1363785/](https://forum.unity.com/threads/how-to-answer-apples-app-store-new-export-compliance-information-dialogue.1363785/).
  prefs: []
  type: TYPE_NORMAL
- en: Then, click on the **Save** button. Once you’re finished with everything and
    have double-checked all of your information, you can go ahead and click on the
    **Add for Review** button to wait for feedback from Apple.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generally, it takes up to 3–4 weeks for first-time developers to receive feedback,
    although it can be longer or shorter, depending on seasonal demand. As you release
    more and more titles, it takes less time each time around. If approved, you’ll
    receive an email that lets you know that the app is uploaded, or they may provide
    details of things that need to be modified before approval for placement on the
    store can be given.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to publish your games on both Google Play and
    the Apple iOS App Store. You learned how to put the game on Google Play by setting
    up the Google Play Console and, finally, how to publish your app on the store.
    You then learned how to put a copy of the iOS version of your game on the App
    Store and all of the setup involved therein.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that you’ve enjoyed this exploration of features and that you continue
    to explore the possibilities of this area. In the next chapter, we will discover
    one of the newest additions to mobile game development – augmented reality.
  prefs: []
  type: TYPE_NORMAL
