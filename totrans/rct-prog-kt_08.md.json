["```kt\n    testCompile 'junit:junit:4.12' \n    testCompile \"org.mockito:mockito-core:1.9.5\" \n    testCompile \"org.jetbrains.kotlin:kotlin-test-   \n      junit:$kotlin_version\" \n```", "```kt\n    package com.rivuchk.packtpub.reactivekotlin \n\n    import org.junit.Test \n    import kotlin.test.assertEquals \n\n    class TestClass { \n      @Test//(1) \n      fun `my first test`() {//(2) \n        assertEquals(3,1+2)//(3) \n      } \n    } \n```", "```kt\n    class TestClass { \n      @Test//(1) \n      fun `my first test`() {//(2) \n        assertEquals(3,2+3, \"Actual value is not equal to the expected \n        one.\")//(3) \n      } \n    } \n```", "```kt\n    package com.rivuchk.packtpub.reactivekotlin.chapter8 \n\n    fun add(a:Int, b:Int):Int = a+b \n    fun substract(a:Int, b:Int):Int = a-b \n    fun mult(a:Int, b:Int):Int = a*b \n    fun divide(a:Int, b:Int):Int = a/b \n```", "```kt\n    package com.rivuchk.packtpub.reactivekotlin.chapter8//(1) \n\n    import org.junit.Test \n    import kotlin.test.* \n\n    class TestCalculator { \n      @Test \n      fun `addition test`() {//(2) \n        assertEquals(1 + 2, add(1,2)) \n      } \n      @Test \n      fun `substraction test`() {//(3) \n        assertEquals(8-5, substract(8,5)) \n      } \n      @Test \n      fun `multiplication test`() {//(4) \n        assertEquals(4 * 2, mult(4,2)) \n       } \n      @Test \n      fun `division test`() {//(5) \n        assertEquals(8 / 2, divide(8,2)) \n      } \n    } \n```", "```kt\n    package com.rivuchk.packtpub.reactivekotlin.chapter8 \n\n    import org.junit.Test \n    import java.util.* \n    import kotlin.test.* \n\n    class TestFunctions { \n\n      @Test \n      fun `expected block evaluation`() { \n        expect(10,{ \n          val x=5 \n          val y=2 \n          x*y \n        }) \n      } \n\n      @Test \n      fun `assert illegal value`() { \n        assertNotEquals(-1,Random().nextInt(1)) \n      } \n\n      @Test \n      fun `assert true boolean value`() { \n        assertTrue(true) \n      } \n\n      @Test \n      fun `assert false boolean value`() { \n        assertFalse(false) \n      } \n\n      @Test \n      fun `assert that passed value is null`() { \n        assertNull(null) \n      } \n\n      @Test \n      fun `assert that passed value is not null`() { \n        assertNotNull(null) \n      } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.range(1,10) \n         .subscribeOn(Schedulers.computation()) \n         .subscribe { \n            item -> println(\"Received $item\") \n          } \n      runBlocking { delay(10) } \n    } \n```", "```kt\n    @Test \n    fun `check emissions count` () { \n      val emissionsCount = AtomicInteger()//(1) \n      Observable.range(1,10) \n         .subscribeOn(Schedulers.computation()) \n         .blockingSubscribe {//(2) \n          _ -> emissionsCount.incrementAndGet() \n         } \n\n        assertEquals(10,emissionsCount.get())//(3) \n    } \n```", "```kt\n    @Test \n    fun `test with blockingFirst`() { \n      val observable = listOf(2,10,5,6,9,8,7,1,4,3).toObservable() \n            .sorted() \n\n      val firstItem = observable.blockingFirst() \n      assertEquals(1,firstItem) \n    } \n```", "```kt\n    @Test \n    fun `test Single with blockingGet`() { \n      val observable = listOf(2,10,5,6,9,8,7,1,4,3).toObservable() \n               .sorted() \n\n      val firstElement:Single<Int> = observable.first(0) \n\n      val firstItem = firstElement.blockingGet() \n      assertEquals(1,firstItem) \n    } \n\n    @Test \n    fun `test Maybe with blockingGet`() { \n      val observable = listOf(2,10,5,6,9,8,7,1,4,3).toObservable() \n               .sorted() \n\n      val firstElement:Maybe<Int> = observable.firstElement() \n\n      val firstItem = firstElement.blockingGet() \n      assertEquals(1,firstItem) \n    } \n```", "```kt\n    @Test \n    fun `test with blockingLast`() { \n      val observable = listOf(2,10,5,6,9,8,7,1,4,3).toObservable() \n               .sorted() \n\n      val firstItem = observable.blockingLast() \n      assertEquals(10,firstItem) \n   } \n```", "```kt\n    @Test \n    fun `test with blockingIterable`() { \n      val list = listOf(2,10,5,6,9,8,7,1,4,3) \n\n      val observable = list.toObservable() \n               .sorted() \n\n     val iterable = observable.blockingIterable() \n     assertEquals(list.sorted(),iterable.toList()) \n   } \n```", "```kt\n    @Test \n    fun `test with blockingForEach`() { \n      val list =  \n      listOf(2,10,5,6,9,8,7,1,4,3,12,20,15,16,19,18,17,11,14,13) \n\n      val observable = list.toObservable() \n        .filter { item -> item%2==0 } \n\n      observable.forEach { \n         item-> \n         assertTrue { item%2==0 } \n     } \n   }  \n```", "```kt\n    @Test \n    fun `test with TestObserver`() { \n     val list = \n     listOf(2,10,5,6,9,8,7,1,4,3,12,20,15,16,19,18,17,11,14,13) \n\n     val observable = list.toObservable().sorted() \n\n     val testObserver = TestObserver<Int>() \n\n     observable.subscribe(testObserver)//(1) \n\n     testObserver.assertSubscribed()//(2) \n\n     testObserver.awaitTerminalEvent()//(3) \n\n     testObserver.assertNoErrors()//(4) \n     testObserver.assertComplete()//(5) \n     testObserver.assertValueCount(20)//(6) \n     testObserver.assertValues\n     (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)//(7) \n    } \n\n    @Test \n    fun `test with TestSubscriber`() { \n     val list = \n     listOf(2,10,5,6,9,8,7,1,4,3,12,20,15,16,19,18,17,11,14,13) \n\n     val flowable = list.toFlowable().sorted() \n\n     val testSubscriber = TestSubscriber<Int>() \n\n     flowable.subscribe(testSubscriber)//(1) \n\n     testSubscriber.assertSubscribed()//(2) \n\n     testSubscriber.awaitTerminalEvent()//(3) \n\n     testSubscriber.assertNoErrors()//(4) \n     testSubscriber.assertComplete()//(5) \n     testSubscriber.assertValueCount(20)//(6) \n     testSubscriber.assertValues\n     (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)//(7) \n    } \n```", "```kt\n    @Test \n    fun `test by fast forwarding time`() { \n      val testScheduler = TestScheduler() \n\n      val observable = \n      Observable.interval(5,TimeUnit.MINUTES,testScheduler) \n      val testObserver = TestObserver<Long>() \n\n      observable.subscribe(testObserver) \n      testObserver.assertSubscribed() \n      testObserver.assertValueCount(0)//(1) \n\n      testScheduler.advanceTimeBy(100,TimeUnit.MINUTES)//(2) \n      testObserver.assertValueCount(20)//(3) \n\n      testScheduler.advanceTimeBy(400,TimeUnit.MINUTES)//(4) \n      testObserver.assertValueCount(100)//(5) \n    } \n```"]