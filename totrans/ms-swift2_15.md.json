["```swift\n//Preferred Method\nvar name = \"Jon\"\nprint(name)\n\n//Non-preferred Method\nvar name = \"Jon\";\nprint(name);\n```", "```swift\n//Preferred Method\nif speed == 300000000 {\n    print(\"Speed of light\")\n}\n\n//Non-Preferred Method\nif (speed == 300000000) {\n    print(\"Speed of light\")\n}\n```", "```swift\n// Proper Naming Convention\nBaseballTeam\nLaptopComputer\n//Non-Proper Naming Convention\nbaseballTeam          //Starts with a lowercase letter\nLaptop_Computer       //Uses an underscore\n```", "```swift\n//Proper Naming Convention\ngetCityName\nplaySound\n\n//\n//Non-Proper Naming Convention\nget_city_name         //All lowercase and has an underscore\nPlaySound             //Begins with an upper case letter\n```", "```swift\n//Proper Names\nplayerName\ndriveSize\nPLAYERS_ON_A_TEAM    //Only for globally scoped constants\n\n//Non-Proper Names\nPlayerName           //Starts with uppercase letter\ndrive_size           //Has underscore in name\n```", "```swift\n/**\n* This is a block comment that should be used\n* to explain a class or function\n*/\npublic class EmployeeClass {\n  // This is an inline comment with double slashes\n  var firstName = \"\"\n  var lastName = \"\"\n\n  /**\nUse Block comments for functions\n\n  :parm: paramName  use this tag for parameters\n  :returns:  explain what is returned\n  */\n  func getFullName() -> String {\n    return firstName + \" \" + lastName\n  }\n}\n```", "```swift\npublic class EmployeeClass {\n  var firstName = \"\"\n  var lastName = \"\"\n  func setName(firstName: String, lastName: String) {\n    self.firstName = firstName\n    self.lastName = lastName\n  }\n}\n```", "```swift\npublic class EmployeeClass {\n    var firstName = \"\"\n    var lastName = \"\"\n    func getFullName() -> String {\n        return self.firstName + \" \" + self.lastName\n    }\n}\n```", "```swift\n//Preferred way\nlet amount = 25.34\nlet amountStr = (amount as NSNumber).stringValue\n\n//Non-preferred way\nlet amount: NSNumber = 25.34\nlet amountStr = amount.stringValue\n```", "```swift\n//Preferred Method Optional Binding\nif let value = myOptional {\n  // code if myOptional is not nil\n} else {\n  // code if myOptional is nil\n}\n\n//Non-Preferred Method\nif myOptional != nil {\n  // code if myOptional is not nil\n} else {\n  //  code if myOptional is nil\n}\n```", "```swift\n//Preferred Method Optional Binding\nif let value1 = myOptional1, value2 = myOptional2 {\n  // code if myOptional1 and myOptional2 is not nil\n} else {\n  // code if myOptional1 and myOptional2 is nil\n}\n\n//Non-Preferred Method Optional Binding\nif let value1 = myOptional1 {\n    if let value2 = myOptional2 {\n        // code if myOptional is not nil\n    } else {\n     // code if myOptional2 is nil\n    }   \n} else {\n  // code if myOptional1 is nil\n}\n```", "```swift\n//Preferred Method\nif let color = jon.pet?.collar?.color {\n    print(\"The color of the collar is \\(color)\")\n} else {\n    print(\"Cannot retrieve color\")\n}\n\n//Non-Preferred Method\nif let tmpPet = jon.pet, tmpCollar = tmpPet.collar  {\n    print(\"The color of the collar is \\(tmpCollar.color)\")\n} else {\n    print(\"Cannot retrieve color\")\n}\n```", "```swift\n//Preferred method\nvar myVar = \"String Type\"  //Infers a String type\nvar myNum = 2.25           //Infers a Double type\n\n//Non-Preferred method\nvar myVar: String = \"String Type\"\nvar myNum: Double = 2.25\n```", "```swift\n//Preferred Method\nvar myDictionary: [String: String] = [:]\nvar strArray: [String] = []\nvar strOptional: String?\n\n//\n//Non-Preferred Method\nvar myDictionary: Dictionary<String,String>\nvar strArray: Array<String>\nvar strOptional: Optional<String>\n```", "```swift\n//Preferred Method\nfor str in strArray {\n    print(str)\n}\nfor num in 0...3 {\n    print(num)\n}\n\n//\n//Non-Preferred Method\nfor var i = 0; i < strArray.count; i++ {\n    print(strArray[i])\n}\n\nfor var num = 0; num <= 3; num++ {\n    print(num)\n}\n```", "```swift\n//Preferred Method\nlet speed = 300000000\nswitch speed {\ncase 300000000:\n    print(\"Speed of light\")\ncase 340:\n    print(\"Speed of sound\")\ndefault:\n    print(\"Unknown speed\")\n}\n\n//Non-preferred Method\nlet speed = 300000000\nif speed == 300000000 {\n    print(\"Speed of light\")\n} else if speed == 340 {\n    print(\"Speed of sound\")\n} else {\n    print(\"Unknown speed\")\n}\n```", "```swift\n//Preferred method\nlet queue2 = dispatch_queue_create(\"squeue.hoffman.jon\", DISPATCH_QUEUE_SERIAL)\n\n//Non-Preferred method\nlet queue2 = dispatch_queue_create(\"squeue.hoffman.jon\", nil)\n```", "```swift\n//Preferred method\nlet queue2 = dispatch_queue_create(\"squeue.hoffman.jon\", DISPATCH_QUEUE_SERIAL)\n\nlet queue = dispatch_queue_create(\"cqueue.hoffman.jon\", DISPATCH_QUEUE_CONCURRENT)\n\n//Non-Preferred method\nlet queue2 = dispatch_queue_create(\"Serial_Queue\", DISPATCH_QUEUE_SERIAL)\n\nlet queue = dispatch_queue_create(\"Concurrent_Queue\", DISPATCH_QUEUE_CONCURRENT)\n```", "```swift\n//Preferred Method\nlet queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)\n\n//Non-preferred Method\nlet queue = dispatch_queue_create(\"cqueue.hoffman.jon\", DISPATCH_QUEUE_CONCURRENT)\n```"]