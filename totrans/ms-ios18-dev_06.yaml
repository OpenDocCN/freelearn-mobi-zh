- en: <st c="0">6</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">SwiftUI Animations and SF Symbols</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="35">The previous chapter dealt with a delightful topic – widgets.</st>
    <st c="98">Their aesthetic level is both enjoyable and effective, which makes
    working with them fun and easy.</st> <st c="197">Now, we will take that feeling
    even further with</st> <st c="246">SwiftUI animations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="265">Animation is a crucial topic in iOS development, as it enriches
    the experience and makes our app more intuitive and enjoyable to use.</st> <st
    c="400">If you are used to UIkit animations, you will notice that SwiftUI animations
    take a different approach than UIkit, providing a declarative API to animate</st>
    <st c="554">state changes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="568">With these new challenges also come opportunities that ensure our
    logic state and UI are</st> <st c="658">always aligned.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="673">In this chapter, we will do</st> <st c="702">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="716">Discuss the importance</st> <st c="740">of animations</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="753">Understand the SwiftUI</st> <st c="777">animation concept</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="794">Perform basic animations with the view modifier and the</st> `<st
    c="851">withAnimation</st>` <st c="864">function</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="873">Perform advanced animations such as transitions and</st> <st c="926">keyframe
    animations</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="945">Animate</st> <st c="954">SF symbols</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="964">Explaining why we need animations sounds weird and some may raise
    eyebrows about this topic.</st> <st c="1058">So, our first mission is to take
    this topic off the table before we move one pixel on the screen.</st> <st c="1156">So,
    let’s answer the following question – why do we need to care</st> <st c="1221">about
    animations?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1238">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1261">For this chapter, it’s essential to download Xcode version 16.0
    or higher from the</st> <st c="1345">App Store.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1355">Ensure that you’re operating on the most recent version of macOS
    (Ventura or newer).</st> <st c="1441">Just search for Xcode in the App Store,
    choose the latest version, and proceed with the download.</st> <st c="1539">Open
    Xcode and complete any further setup instructions that appear.</st> <st c="1607">After
    Xcode is completely up and running, you</st> <st c="1653">can begin.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1663">Download the sample code from the following</st> <st c="1708">GitHub
    link:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[<st c="1720">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%206</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%206)'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1806">The importance of animations</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1835">Some of you may think that executing animations is mainly for fun
    and doesn’t really impact an</st> <st c="1931">app’s usability.</st> <st c="1948">But
    the truth is that animations play a crucial role in enhancing user engagement
    and interface design, especially in mobile applications.</st> <st c="2087">Here
    are a few benefits of</st> <st c="2114">using animations:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2131">First, animations provide</st> **<st c="2158">visual feedback</st>**
    <st c="2173">in response to users’ actions – a button that grows when a user taps
    on it helps them know that they touched the</st> <st c="2287">right place</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2298">Animations can also provide</st> **<st c="2327">guidance and navigation</st>**
    <st c="2350">– transitions between pages indicate whether we move “forward” with
    our flow</st> <st c="2428">or backward</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2439">Animations also help in</st> **<st c="2464">error handling</st>**
    <st c="2478">– we can animate error messages and general issues and reduce a</st>
    <st c="2543">user’s frustration</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2561">Most importantly, in many cases, animations are part of the</st>
    **<st c="2622">app branding and uniqueness</st>** <st c="2649">and provide that
    special touch that strengthens the link between a user and</st> <st c="2726">an
    app</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2732">Now that we understand the importance of animation, let’s see how
    SwiftUI’s declarative approach aligns with</st> <st c="2842">that concept.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2855">Understanding the concept of SwiftUI animations</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2903">For a developer</st> <st c="2920">coming from UIkit and taking
    their first steps in SwiftUI, the concept of writing animations in a declarative
    framework could feel a little awkward.</st> <st c="3069">After all, performing
    animations in UIkit was extremely simple – all we had to do was respond to some
    event and change some view properties within an animation closure.</st> <st c="3238">Here’s
    a simple example of how to fade out a view</st> <st c="3288">in UIkit:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="3389">In this example, we modify the alpha level of</st> `<st c="3436">sampleView</st>`
    <st c="3446">inside a</st> `<st c="3456">UIView</st>` <st c="3462">animation closure.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3481">While this</st> <st c="3493">looks pretty simple, it comes with
    a significant drawback – the need to sync the animation action to the screen state.</st>
    <st c="3612">The</st> `<st c="3616">sampleView</st>` <st c="3626">component is
    now hidden – but does that mean that our view model or any other logic we incorporated
    in our screen is updated?</st> <st c="3753">This update is our responsibility.</st>
    <st c="3788">While this is a general</st> *<st c="3812">UIkit</st>* <st c="3817">problem,
    syncing between the view and the state can worsen when working</st> <st c="3890">with
    animations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3906">However, in</st> *<st c="3919">SwiftUI</st>*<st c="3926">, the
    screen state is always synced with the UI, and that’s true for animations as well.</st>
    <st c="4015">The basic concept of SwiftUI animations revolves around the idea
    of animating changes to the view state, including properties such as position,
    size, opacity,</st> <st c="4174">and rotation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4187">There are several ways of implementing animations in SwiftUI; some
    are truly simple, while others let us deliver advanced and</st> <st c="4314">complex
    animations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4333">Let’s warm up and start with some</st> <st c="4368">basic animations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4385">Performing basic animatio</st><st c="4411">ns</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="4414">The fundamental</st> <st c="4431">way to understand how SwiftUI
    animations work is by associating a state value with a particular</st> <st c="4527">animation
    flow.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4542">There are three ways of performing basic animations</st> <st c="4595">in
    SwiftUI:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="4617">animation</st>` **<st c="4626">modifier</st>** <st c="4635">–
    adding an animation to a</st> <st c="4663">specific view</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4687">withAnimation</st>` **<st c="4700">global function</st>** <st
    c="4716">– performing animation by changing</st> <st c="4752">several states</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4773">animation()</st>` **<st c="4784">method</st>** <st c="4791">–
    attaching an animation to a</st> <st c="4822">binding value</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4835">Developers usually get confused and think there’s some duplication
    here – separate ways to perform the same functionality.</st> <st c="4959">But
    the truth is that all three serve different purposes and needs.</st> <st c="5027">It’s
    up to us to decide the suitable way, according to our specific code structure</st>
    <st c="5110">and flow.</st> <st c="5120">Sometimes, you want to perform a particular
    animation to a specific view; occasionally, it is a shared experience with several
    views.</st> <st c="5254">Understanding the different use cases can help us decide
    how to perform an</st> <st c="5329">animation correctly.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5349">Let’s start by adding an animation to a</st> <st c="5390">specific
    view.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5404">Using the animation view modifier</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5438">The animation</st> <st c="5453">view modifier goal is to add</st>
    <st c="5482">animation to a specific view when a certain value changes.</st> <st
    c="5541">Here’s an example of using the animation</st> <st c="5582">view modifier:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="5878">The preceding code changes the circle size by adding</st> `<st
    c="5932">50</st>` <st c="5934">points to its width and height, and it does that
    by using the animation view modifier.</st> <st c="6022">Note that the animation
    view modifier has a value parameter – the value the animation modifier monitors
    for changes.</st> <st c="6139">In this case, we use the</st> `<st c="6164">width</st>`
    <st c="6169">state variable.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6185">The animation</st> <st c="6200">view modifier is great for changing</st>
    <st c="6236">a specific view when a specific value changes.</st> <st c="6283">However,
    there are cases where this approach can be confusing.</st> <st c="6346">In this
    case, we define the animation in a specific place in the code but perform the
    change in another location.</st> <st c="6460">Moreover, using the animation view
    modifie</st><st c="6502">r can be cumbersome if we want to perform</st> <st c="6545">multiple
    animations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6565">If we want to perform multiple changes, we can use the</st> `<st
    c="6621">withAnimation:</st>` <st c="6635">function.</st> <st c="6646">Let’s see
    how to</st> <st c="6663">utilize it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6674">Using the withAnimation function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6707">In its basic form, the</st> `<st c="6731">withAnimation:</st>`
    <st c="6745">function takes a closure as a parameter and animates</st> <st c="6799">any
    changes made within that</st> <st c="6828">closure.</st> <st c="6837">Usually,
    that’s done with a trigger to an event.</st> <st c="6886">Let’s see a simple</st>
    <st c="6905">code example:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="7482">This code example simultaneously animates the positions of two
    circles when a button is tapped.</st> <st c="7579">We can see that, unlike the
    animation view modifier, by using the</st> `<st c="7645">withAnimation:</st>`
    <st c="7659">function, we bind the change to the animation more clearly</st> <st
    c="7719">and simply.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7730">Another</st> <st c="7739">advantage that</st> `<st c="7754">withAnimation:</st>`
    <st c="7768">has is</st> <st c="7776">the ability to execute a</st> **<st c="7801">completion
    code</st>** <st c="7816">once an</st> <st c="7825">animation ends.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7840">Let’s take a look at the following</st> <st c="7876">code example:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8259">The code creates a blue circle and a button saying</st> **<st c="8311">Start</st>**<st
    c="8316">. Once the user taps the button, the circle</st> <st c="8360">animates
    its position, and at the end, the button title changes to</st> **<st c="8427">Reset</st>**<st
    c="8432">. Then, tapping the button brings back the circle, and at</st> <st c="8490">the
    end of the reverse animation, the button title returns</st> <st c="8549">to</st>
    **<st c="8552">Start</st>**<st c="8557">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8558">Completion blocks in animations are essential to sync flow stages.</st>
    <st c="8626">For example, collapsing a side drawer and navigating to a new screen
    at the end is an excellent example of completion</st> <st c="8744">block usage.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8756">Now, it’s time to bring some more life to</st> <st c="8799">our
    animation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8813">Bringing some life to our animations with spring animations</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8873">If you have tried out the code examples you have seen so far, you
    have probably noticed that the</st> <st c="8971">animations ran smoothly but were
    a little bit, well, boring.</st> <st c="9032">That’s because the animations ran
    linearly and were not</st> <st c="9088">that interesting.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9105">Try adding the following parameter to the</st> <st c="9148">previous
    example:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="9292">In this example, we added</st> `<st c="9319">.bouncy(extraBounce:
    0.3)</st>` <st c="9344">to our</st> `<st c="9352">withAnimation</st>` <st c="9365">function.</st>
    <st c="9376">Running the code shows the same animation as before, but now, the
    circle bounces when it reaches the end.</st> <st c="9482">It is a small but significant
    addition – the bounce effect adds a realistic touch to our animation and can improve</st>
    <st c="9597">user engagement.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9613">There are</st> <st c="9624">several interesting visual transitions
    we can add to our animations.</st> <st c="9693">For example, we can make the bouncing
    smoother using the</st> `<st c="9750">.</st>``<st c="9751">smooth</st>` <st c="9758">function:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9809">We can also make the bouncing snappier by making the animation
    faster with a small</st> <st c="9893">bounce amount:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9930">It is recommended to look at Apple’s documentation to discover
    more visual transitions that we can apply easily to our</st> <st c="10050">animations:</st>
    [<st c="10062">https://developer.apple.com/documentation/swiftui/animation</st>](https://developer.apple.com/documentation/swiftui/animation)<st
    c="10121">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10122">So far, we have performed very basic animations.</st> <st c="10172">But
    modern apps require modern experiences.</st> <st c="10216">Let’s move on to some
    more ways to create</st> <st c="10258">advanced animations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10278">Performing advanced animations</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="10309">We mentioned that transitions are great for guidance and navigation,
    and part of that concept is</st> <st c="10407">providing clarity about incoming
    and leaving views from our canvas.</st> <st c="10475">Sliding a view from the
    bottom can provide a sense of a drawer being opened and closed, and scaling a
    view can visually represent the progress of an</st> <st c="10624">ongoing process.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10640">So far, we have discussed how to animate views from one state
    to another.</st> <st c="10715">Now, we will explore transitions – a way to animate
    views when they appear</st> <st c="10790">or disappear.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10803">Performing transitions</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="10826">Implementing</st> <st c="10840">a view transition is easy – we
    have some nice built-in transitions to choose from, and if that’s not enough,
    we can also create a</st> <st c="10970">custom transition.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10988">Let’s start with some basic,</st> <st c="11018">built-in transitions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11039">Implementing built-in transitions</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="11073">To add</st> <st c="11081">a transition, we should use the</st>
    `<st c="11113">transition</st>` <st c="11123">modifier with the specific view
    we want to animate, triggering it using the</st> `<st c="11200">withAnimation</st>`
    <st c="11213">function we learned about in the</st> *<st c="11247">Using the withAnimation</st>*
    *<st c="11271">function</st>* <st c="11279">section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11288">Here’s a simple example of a slide</st> <st c="11324">in transition:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11586">The code example consists of</st> `<st c="11616">VStack</st>`
    <st c="11622">with a button and text.</st> <st c="11647">We also have a state
    determining whether the text is visible</st> <st c="11708">or hidden.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11718">Tapping on the button reveals the text using the</st> `<st c="11768">withAnimation</st>`
    <st c="11781">function.</st> <st c="11792">But the text</st> <st c="11805">also
    has a transition view modifier that</st> <st c="11845">describes how it is supposed
    to appear – in this case, using a</st> <st c="11909">sliding-in transition.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11931">The transition view modifier describes how the view appears and
    how it is supposed</st> <st c="12015">to disappear.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12028">The</st> `<st c="12033">slide</st>` <st c="12038">transition inserts
    the view by moving it from the leading edge and removing it toward the trailing
    edge.</st> <st c="12144">Note that the slide transition directions cannot be changed,
    and they are set by the SwiftUI framework.</st> <st c="12248">However, there are
    several more transitions we can use to achieve our</st> <st c="12318">desired
    behavior:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="12335">move</st>`<st c="12340">: Moves the view in/from a</st> <st
    c="12368">specific edge:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`<st c="12442">scale</st>`<st c="12448">: Scales the view in a specific amount
    and from a</st> <st c="12499">specific anchor:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`<st c="12591">opacity</st>`<st c="12599">: Performs a “fade in/out” effect
    on</st> <st c="12637">the view:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="12696">These types of transitions are well documented in the Apple website
    and SDK, and we can also try them using the chapter’s</st> <st c="12819">GitHub
    repository.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12837">It’s important to note that we can use these transitions to show
    and hide animations.</st> <st c="12924">Yet, in some cases, we might prefer a
    different animation for hiding compared to showing.</st> <st c="13014">Having
    a different animation for hiding and showing is called an</st> **<st c="13079">asymmetric
    transition</st>**<st c="13100">. Let’s</st> <st c="13108">see a code example</st>
    <st c="13127">for that:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Text("Scale and slide") <st c="13545">.transition(.scale.combined(with:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13578">.slide))</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '.transition(.scale.combined(with: .slide.combined(with:'
  prefs: []
  type: TYPE_NORMAL
- en: .opacity)))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'struct ViewRotationModifier: ViewModifier {'
  prefs: []
  type: TYPE_NORMAL
- en: 'let angle: Angle'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let opacity: CGFloat'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let scale: CGFloat'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func body(content: Content) -> some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: content
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .rotationEffect(angle)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .scaleEffect(scale)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .opacity(opacity)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: let rotate = AnyTransition.modifier(
  prefs: []
  type: TYPE_NORMAL
- en: 'active: <st c="15350">ViewRotationModifier</st>(angle: .degrees(360),'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'opacity: 0.0, scale: 0.0),'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'identity: <st c="15431">ViewRotationModifier</st>(angle: .degrees(0),'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'opacity: 1.0, scale: 1.0)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'struct CustomizedTransitionView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: '@State private var showRectangle: Bool = false'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: VStack {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Spacer()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if showRectangle {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Rectangle()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.frame(width: 100, height: 100)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .foregroundColor(.blue) <st c="15907">.transition(rotate)</st> }
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Spacer()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Button("Insert Rectangle") {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: withAnimation {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: showRectangle.toggle()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: struct AnimationProperties {
  prefs: []
  type: TYPE_NORMAL
- en: var scale = 1.0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var opacity = 1.0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'struct KeyFrameAnimations: View {'
  prefs: []
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circle()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .foregroundColor(.red)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .frame(width:100, height:100)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.<st c="18911">keyframeAnimator</st>(initialValue:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'AnimationProperties(), repeating: true) {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content, value in
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .opacity(value.opacity)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .scaleEffect(value.scale)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} <st c="19064">keyframes</st>: { _ in <st c="19083">KeyframeTrack</st>(\.scale)
    { <st c="19109">CubicKeyframe</st>(0.7, duration: 0.8) <st c="19144">CubicKeyframe</st>(1.0,'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'duration: 0.8)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} <st c="19181">KeyframeTrack</st>(\.opacity) { <st c="19209">CubicKeyframe</st>(0.3,
    duration: 0.8) <st c="19244">CubicKeyframe</st>(1.0, duration: 0.8)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'CubicKeyframe(0.5, duration: 0.2, <st c="21871">startVelocity</st>: 0.5, <st
    c="21892">endVelocity</st>: 0.8)'
  prefs: []
  type: TYPE_NORMAL
- en: 'CubicKeyframe(0.7, duration: 0.5)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="23463">let duration: TimeInterval = 1.8</st> var body: some View {'
  prefs: []
  type: TYPE_NORMAL
- en: Circle()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .foregroundColor(.red)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .frame(width:100, height:100)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.keyframeAnimator(initialValue:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'AnimationProperties(), repeating: true) {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content, value in
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .opacity(value.opacity)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .scaleEffect(value.scale)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} keyframes: { _ in'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: KeyframeTrack(\.scale) {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'CubicKeyframe(0.7, <st c="23795">duration: 0.5 *</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23810">duration</st>)
  prefs: []
  type: TYPE_NORMAL
- en: CubicKeyframe(1.0,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'duration: <st c="23851">0.5 * duration</st>)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: KeyframeTrack(\.opacity) {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'CubicKeyframe(0.3, <st c="23916">duration: 0.5 *</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23931">duration</st>)
  prefs: []
  type: TYPE_NORMAL
- en: 'CubicKeyframe(1.0, <st c="23962">duration: 0.5 *</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23977">duration</st>)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'var body: some View {'
  prefs: []
  type: TYPE_NORMAL
- en: HStack { <st c="25519">Image(systemName:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="25536">"alarm.waves.left.and.right.fill")</st> Text("Alarm")
  prefs: []
  type: TYPE_NORMAL
- en: '}.font(.system(size: 30))'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'struct SFSymbolsAnimationView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: '@State private var animate = false'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: HStack {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Image(systemName:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"alarm.waves.left.and.right.fill") <st c="27851">.symbolEffect(.bounce, options:
    .repeating,</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="27894">value: animate)</st> Text("10:30")'
  prefs: []
  type: TYPE_NORMAL
- en: '}.font(.system(size: 40))'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .onTapGesture {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: animate = true
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Image(systemName: "person.2.wave.2")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Image(systemName: "person.2.wave.2")'
  prefs: []
  type: TYPE_NORMAL
- en: .foregroundStyle(.brown, .blue)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Image(systemName: "person.3.sequence.fill")'
  prefs: []
  type: TYPE_NORMAL
- en: .foregroundStyle(.red, .blue, .<st c="29887">brown</st>)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Image(systemName: "arrowshape.turn.up.forward") <st c="31224">.environment(\.layoutDirection,
    .rightToLeft)</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Image(systemName: "character.book.closed") <st c="32137">.environment(\.locale,
    .init(identifier: "he"))</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
