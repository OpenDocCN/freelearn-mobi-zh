["```kt\nroom = \"2.5.2\"\n```", "```kt\nroom-runtime = { module = \"androidx.room:room-runtime\" , version.ref = \"room\" }\nroom-compiler = { module = \"androidx.room:room-compiler\", version.ref = \"room\" }\nroom-ktx = { module = \"androidx.room:room-ktx\", version.ref = \"room\" }\n```", "```kt\nid(\"com.google.devtools.ksp\") version \"1.9.0-1.0.13\" apply false\n```", "```kt\nid(\"com.google.devtools.ksp\")\n```", "```kt\nimplementation(libs.room.runtime)\nimplementation(libs.room.ktx)\nksp(libs.room.compiler)\n```", "```kt\n@Entity(tableName = \"Cat\")\ndata class CatEntity(\n    @PrimaryKey\n    val id: String,\n    val owner: String,\n    val tags: List<String>,\n    val createdAt: String,\n    val updatedAt: String\n)\n```", "```kt\nclass PetsTypeConverters {\n    @TypeConverter\n    fun convertTagsToString(tags: List<String>): String {\n        return Json.encodeToString(tags)\n    }\n    @TypeConverter\n    fun convertStringToTags(tags: String): List<String> {\n        return Json.decodeFromString(tags)\n    }\n}\n```", "```kt\n@Dao\ninterface CatDao {\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(catEntity: CatEntity)\n    @Query(\"SELECT * FROM Cat\")\n    fun getCats(): Flow<List<CatEntity>>\n}\n```", "```kt\n@Database(\n    entities = [CatEntity::class],\n    version = 1\n)\n@TypeConverters(PetsTypeConverters::class)\nabstract class CatDatabase: RoomDatabase() {\n    abstract fun catDao(): CatDao\n}\n```", "```kt\nsingle {\n    Room.databaseBuilder(\n        androidContext(),\n        CatDatabase::class.java,\n        \"cat-database\"\n    ).build()\n}\nsingle { get<CatDatabase>().carDao() }\n```", "```kt\ninterface PetsRepository {\n    suspend fun getPets(): Flow<List<Cat>>\n    suspend fun fetchRemotePets()\n}\n```", "```kt\nclass PetsRepositoryImpl(\n    private  val catsAPI: CatsAPI,\n    private val dispatcher: CoroutineDispatcher,\n    private val catDao: CatDao\n): PetsRepository {\n    override suspend fun getPets(): Flow<List<Cat>> {\n        return withContext(dispatcher) {\n           catDao.getCats()\n               .map { petsCached ->\n                   petsCached.map { catEntity ->\n                       Cat(\n                           id = catEntity.id,\n                           owner = catEntity.owner,\n                           tags = catEntity.tags,\n                           createdAt = catEntity.createdAt,\n                           updatedAt = catEntity.updatedAt\n                       ) }\n               }\n               .onEach {\n                     if (it.isEmpty()) {\n                          fetchRemotePets()\n                     }\n               }\n        }\n    }\n    override suspend fun fetchRemotePets() {\n        withContext(dispatcher) {\n            val response = catsAPI.fetchCats(\"cute\")\n            if (response.isSuccessful) {\n                response.body()!!.map {\n                    catDao.insert(CatEntity(\n                        id = it.id,\n                        owner = it.owner,\n                        tags = it.tags,\n                        createdAt = it.createdAt,\n                        updatedAt = it.updatedAt\n                    ))\n                }\n            }\n        }\n    }\n}\n```", "```kt\nsingle<PetsRepository> { PetsRepositoryImpl(get(), get(), get()) }\n```", "```kt\nprivate fun getPets() {\n    petsUIState.value = PetsUIState(isLoading = true)\n    viewModelScope.launch {\n        petsRepository.getPets().asResult().collect { result ->\n            when (result ) {\n                is NetworkResult.Success -> {\n                    petsUIState.update {\n                        it.copy(isLoading = false, pets = result.data)\n                    }\n                }\n                is NetworkResult.Error -> {\n                    petsUIState.update {\n                        it.copy(isLoading = false, error = result.error)\n                    }\n                }\n            }\n        }\n    }\n}\n```", "```kt\nfun <T> Flow<T>.asResult(): Flow<NetworkResult<T>> {\n    return this\n        .map<T, NetworkResult<T>> {\n            NetworkResult.Success(it)\n        }\n        .catch { emit(NetworkResult.Error(it.message.toString())) }\n}\n```", "```kt\nstartKoin {\n    androidContext(applicationContext)\n    modules(appModules)\n}\n```", "```kt\n    ksp {\n        arg(\"room.schemaLocation\", \"$projectDir/schemas\")\n    }\n    ```", "```kt\n    @ColumnInfo(defaultValue = \"0\")\n    val isFavorite: Boolean = false\n    ```", "```kt\n    @Update\n    suspend fun update(catEntity: CatEntity)\n    @Query(\"SELECT * FROM Cat WHERE isFavorite = 1\")\n    fun getFavoriteCats(): Flow<List<CatEntity>>\n    ```", "```kt\n    @Database(\n        entities = [CatEntity::class],\n        version = 2,\n        autoMigrations = [\n            AutoMigration(from = 1, to = 2)\n        ]\n    )\n    ```", "```kt\n    suspend fun updatePet(cat: Cat)\n    suspend fun getFavoritePets(): Flow<List<Cat>>\n    ```", "```kt\n    override suspend fun updatePet(cat: Cat) {\n        withContext(dispatcher) {\n            catDao.update(CatEntity(\n                id = cat.id,\n                owner = cat.owner,\n                tags = cat.tags,\n                createdAt = cat.createdAt,\n                updatedAt = cat.updatedAt,\n                isFavorite = cat.isFavorite\n            ))\n        }\n    }\n    override suspend fun getFavoritePets(): Flow<List<Cat>> {\n        return withContext(dispatcher) {\n            catDao.getFavoriteCats()\n                .map { petsCached ->\n                    petsCached.map { catEntity ->\n                        Cat(\n                            id = catEntity.id,\n                            owner = catEntity.owner,\n                            tags = catEntity.tags,\n                            createdAt = catEntity.createdAt,\n                            updatedAt = catEntity.updatedAt,\n                            isFavorite = catEntity.isFavorite\n                        )\n                    }\n                }\n        }\n    }\n    ```", "```kt\n    override suspend fun getPets(): Flow<List<Cat>> {\n        return withContext(dispatcher) {\n           catDao.getCats()\n               .map { petsCached ->\n                   petsCached.map { catEntity ->\n                       Cat(\n                           id = catEntity.id,\n                           owner = catEntity.owner,\n                           tags = catEntity.tags,\n                           createdAt = catEntity.createdAt,\n                           updatedAt = catEntity.updatedAt,\n                           isFavorite = catEntity.isFavorite\n                       )\n                   }\n               }\n               .onEach {\n                   if (it.isEmpty()) {\n                       fetchRemotePets()\n                   }\n               }\n        }\n    }\n    override suspend fun fetchRemotePets() {\n        withContext(dispatcher) {\n            val response = catsAPI.fetchCats(\"cute\")\n            if (response.isSuccessful) {\n                response.body()!!.map {\n                    catDao.insert(CatEntity(\n                        id = it.id,\n                        owner = it.owner,\n                        tags = it.tags,\n                        createdAt = it.createdAt,\n                        updatedAt = it.updatedAt,\n                        isFavorite = it.isFavorite\n                    ))\n                }\n            }\n        }\n    }\n    ```", "```kt\n    private val _favoritePets = MutableStateFlow<List<Cat>>(emptyList())\n    val favoritePets: StateFlow<List<Cat>> get() = _favoritePets\n    ```", "```kt\n    fun updatePet(cat: Cat) {\n        viewModelScope.launch {\n            petsRepository.updatePet(cat)\n        }\n    }\n    fun getFavoritePets() {\n        viewModelScope.launch {\n            petsRepository.getFavoritePets().collect {\n                _favoritePets.value = it\n            }\n        }\n    }\n    ```", "```kt\n    @OptIn(ExperimentalLayoutApi::class)\n    @Composable\n    fun PetListItem(\n        cat: Cat,\n        onPetClicked: (Cat) -> Unit,\n        onFavoriteClicked: (Cat) -> Unit\n    ) {\n        ElevatedCard(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(6.dp)\n        ) {\n            Column(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(bottom = 10.dp)\n                    .clickable {\n                        onPetClicked(cat)\n                    }\n            ) {\n                AsyncImage(\n                    model = \"https://cataas.com/cat/${cat.id}\",\n                    contentDescription = \"Cute cat\",\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .height(200.dp),\n                    contentScale = ContentScale.FillWidth\n                )\n                Row(\n                    modifier = Modifier\n                        .padding(start = 6.dp, end = 6.dp)\n                        .fillMaxWidth(),\n                    verticalAlignment = Alignment.CenterVertically,\n                    horizontalArrangement = Arrangement.SpaceBetween\n                ) {\n                    FlowRow(\n                        modifier = Modifier\n                            .padding(start = 6.dp, end = 6.dp)\n                    ) {\n                        repeat(cat.tags.size) {\n                            SuggestionChip(\n                                modifier = Modifier\n                                    .padding(start = 3.dp, end = 3.dp),\n                                onClick = { },\n                                label = {\n                                    Text(text = cat.tags[it])\n                                }\n                            )\n                        }\n                    }\n                    Icon(\n                        modifier = Modifier\n                            .clickable {\n                                onFavoriteClicked(cat.copy(isFavorite = !cat.isFavorite))\n                            },\n                        imageVector = if (cat.isFavorite) {\n                            Icons.Default.Favorite\n                        } else {\n                            Icons.Default.FavoriteBorder\n                        },\n                        contentDescription = \"Favorite\",\n                        tint = if (cat.isFavorite) {\n                            Color.Red\n                        } else {\n                            Color.Gray\n                        },\n                    )\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PetList(\n        onPetClicked: (Cat) -> Unit,\n        pets: List<Cat>,\n        modifier: Modifier,\n        onFavoriteClicked: (Cat) -> Unit\n    ) {\n        LazyColumn(\n            modifier = modifier\n        ) {\n            items(pets) { pet ->\n                PetListItem(\n                    cat = pet,\n                    onPetClicked = onPetClicked,\n                    onFavoriteClicked = onFavoriteClicked\n                )\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PetsScreenContent(\n        modifier: Modifier,\n        onPetClicked: (Cat) -> Unit,\n        contentType: ContentType,\n        petsUIState: PetsUIState,\n        onFavoriteClicked: (Cat) -> Unit\n    ) {\n        // code\n        }\n    ```", "```kt\n    PetList(\n        onPetClicked = onPetClicked,\n        pets = petsUIState.pets,\n        modifier = Modifier\n        .fillMaxWidth(),\n        onFavoriteClicked = onFavoriteClicked\n    )\n    ```", "```kt\n    @Composable\n    fun PetListAndDetails(\n        pets: List<Cat>,\n        onFavoriteClicked: (Cat) -> Unit\n    ) {\n        // code\n        }\n    ```", "```kt\n    PetList(\n        onPetClicked = {\n        currentPet = it\n        },\n        pets = pets,\n        modifier = Modifier\n        .fillMaxWidth()\n        .weight(1f),\n        onFavoriteClicked = onFavoriteClicked\n    )\n    ```", "```kt\n    PetListAndDetails(\n        pets = petsUIState.pets,\n        onFavoriteClicked = onFavoriteClicked\n    )\n    ```", "```kt\n    PetsScreenContent(\n        modifier = Modifier\n            .fillMaxSize(),\n        onPetClicked = onPetClicked,\n        contentType = contentType,\n        petsUIState = petsUIState,\n        onFavoriteClicked = {\n            petsViewModel.updatePet(it)\n        }\n    )\n    ```", "```kt\n    @Composable\n    fun FavoritePetsScreen(\n        onPetClicked: (Cat) -> Unit\n    ) {\n        val petsViewModel: PetsViewModel = koinViewModel()\n        LaunchedEffect(Unit) {\n            petsViewModel.getFavoritePets()\n        }\n        val pets by petsViewModel.favoritePets.collectAsStateWithLifecycle()\n        if (pets.isEmpty()) {\n            Column(\n                modifier = Modifier\n                    .fillMaxSize(),\n                verticalArrangement = Arrangement.Center,\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                Text(text = \"No favorite pets\")\n            }\n        } else {\n            LazyColumn(\n                modifier = Modifier\n                    .fillMaxSize()\n            ) {\n                items(pets) { pet ->\n                    PetListItem(\n                        cat = pet,\n                        onPetClicked = onPetClicked,\n                        onFavoriteClicked = {\n                            petsViewModel.updatePet(it)\n                        }\n                    )\n                }\n            }\n        }\n    }\n    ```", "```kt\n    FavoritePetsScreen(\n        onPetClicked = { cat ->\n            navHostController.navigate(\n                \"${Screens.PetDetailsScreen.route}/${Json.encodeToString(cat)}\"\n            )\n        }\n    )\n    ```", "```kt\n    work = \"2.8.1\"\n    ```", "```kt\n    work-runtime = { module = \"androidx.work:work-runtime-ktx\", version.ref = \"work\" }\n    workmanager-koin = { module = \"io.insert-koin:koin-androidx-workmanager\", version.ref = \"koin\" }\n    ```", "```kt\n    implementation(libs.work.runtime)\n    implementation(libs.workmanager.koin)\n    ```", "```kt\n    class PetsSyncWorker(\n        appContext: Context,\n        workerParams: WorkerParameters,\n        private val  petsRepository: PetsRepository\n    ): CoroutineWorker(appContext, workerParams) {\n        override suspend fun doWork(): Result {\n            return try {\n                petsRepository.fetchRemotePets()\n                Result.success()\n            } catch (e: Exception) {\n                Result.failure()\n            }\n        }\n    }\n    ```", "```kt\n    worker { PetsSyncWorker(get(), get(), get()) }\n    ```", "```kt\n    private fun startPetsSync() {\n        val syncPetsWorkRequest = OneTimeWorkRequestBuilder<PetsSyncWorker>()\n            .setConstraints(\n                Constraints.Builder()\n                    .setRequiredNetworkType(NetworkType.CONNECTED)\n                    .setRequiresBatteryNotLow(true)\n                    .build()\n            )\n            .build()\n        WorkManager.getInstance(applicationContext).enqueueUniqueWork(\n            \"PetsSyncWorker\",\n            ExistingWorkPolicy.KEEP,\n            syncPetsWorkRequest\n        )\n    }\n    ```", "```kt\n            startPetsSync()\n            ```", "```kt\n            <provider\n                android:name=\"androidx.startup.InitializationProvider\"\n                android:authorities=\"${applicationId}.androidx-startup\"\n                android:exported=\"false\"\n                tools:node=\"merge\">\n                <!-- Removing WorkManager Default Initializer-->\n                <meta-data\n                    android:name=\"androidx.work.WorkManagerInitializer\"\n                    android:value=\"androidx.startup\"\n                    tools:node=\"remove\" />\n            </provider>\n            ```", "```kt\n            workManagerFactory()\n            ```", "```kt\n    work-testing = { module = \"androidx.work:work-testing\", version.ref = \"work\" }\n    ```", "```kt\n    androidTestImplementation(libs.work.testing)\n    ```", "```kt\nclass KoinTestRule: TestRule {\n    override fun apply(base: Statement?, description: Description?): Statement {\n        return object : Statement() {\n            override fun evaluate() {\n                stopKoin()\n                startKoin {\n                    androidLogger(Level.ERROR)\n                    androidContext(ApplicationProvider.getApplicationContext())\n                    modules(appModules)\n                }\n            }\n        }\n    }\n}\n```", "```kt\n@RunWith(AndroidJUnit4::class)\nclass PetsSyncWorkerTest {\n    @get:Rule\n    val koinTestRule = KoinTestRule()\n    @Before\n    fun setUp() {\n        val config = Configuration.Builder()\n            .setMinimumLoggingLevel(Log.DEBUG)\n            .setExecutor(SynchronousExecutor())\n            .build()\n        // Initialize WorkManager for instrumentation tests.\n        WorkManagerTestInitHelper.initializeTestWorkManager(\n            ApplicationProvider.getApplicationContext(),\n            config\n        )\n    }\n}\n```", "```kt\n    @Test\n    fun testPetsSyncWorker() {\n    }\n    ```", "```kt\n    val syncPetsWorkRequest = OneTimeWorkRequestBuilder<PetsSyncWorker>()\n        .setConstraints(\n            Constraints.Builder()\n                .setRequiredNetworkType(NetworkType.CONNECTED)\n                .setRequiresBatteryNotLow(true)\n                .build()\n        )\n        .build()\n    ```", "```kt\n    val workManager = WorkManager.getInstance(ApplicationProvider.getApplicationContext())\n    val testDriver =\n        WorkManagerTestInitHelper.getTestDriver(ApplicationProvider.getApplicationContext())!!\n    ```", "```kt\n    workManager.enqueueUniqueWork(\n        \"PetsSyncWorker\",\n        ExistingWorkPolicy.KEEP,\n        syncPetsWorkRequest).result.get()\n    ```", "```kt\n    val workInfo = workManager.getWorkInfoById(syncPetsWorkRequest.id).get()\n    ```", "```kt\n    assertEquals(WorkInfo.State.ENQUEUED, workInfo.state)\n    ```", "```kt\n    testDriver.setAllConstraintsMet(syncPetsWorkRequest.id)\n    ```", "```kt\n    val postRequirementWorkInfo =\n        workManager.getWorkInfoById(syncPetsWorkRequest.id).get()\n    assertEquals(WorkInfo.State.RUNNING, postRequirementWorkInfo.state)\n    ```"]