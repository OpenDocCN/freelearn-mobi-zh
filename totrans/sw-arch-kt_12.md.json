["```kt\nfun sampleOperation() {\n    Thread.sleep(1)\n}\n```", "```kt\nfun measureTotalTimeElapsed(\n    iterations: Int,\n    operation: (Int) -> Unit,\n): Long =\n    measureTimeMillis {\n        repeat(iterations, operation)\n    }\n```", "```kt\nfun main() {\n    val iterations = 1_000\n    val operationTime = measureTotalTimeElapsed(iterations) { sampleOperation() }\n    println(\"Total time elapsed: ${operationTime / 1000.0} second\")\n    println(\"Throughput: ${iterations / (operationTime / 1000.0)} operations per second\")\n    println(\"Latency (average): ${operationTime / iterations} ms\")\n}\n```", "```kt\nTotal time elapsed: 1.264 second\nThroughput: 791.1392405063291 operations per second\nLatency (average): 1 ms\n```", "```kt\nplugins {\n    id(\"org.jetbrains.kotlinx.benchmark\") version \"0.4.11\"\n    kotlin(\"plugin.allopen\") version \"2.0.20\"\n}\n```", "```kt\nrepositories {\n    mavenCentral()\n    gradlePluginPortal()\n}\n```", "```kt\n    implementation(\"org.jetbrains.kotlinx:kotlinx-benchmark-runtime:0.4.11\")\n```", "```kt\nallOpen {\n    annotation(\"org.openjdk.jmh.annotations.State\")\n}\n```", "```kt\nbenchmark {\n    targets {\n        register(\"main\")\n    }\n    configurations {\n        named(\"main\") {\n        }\n    }\n}\n```", "```kt\n@State(Scope.Benchmark)\n@Fork(1)\n@Warmup(iterations = 10)\n@Measurement(iterations = 20, time = 1, timeUnit = TimeUnit.MILLISECONDS)\nclass MicrobenchmarkingTest {\n    private var data = emptyList<UUID>()\n    @Setup\n    fun setUp() {\n        data = (1..2).map { UUID.randomUUID() }\n    }\n    @Benchmark\n    fun combineUUIDBenchmark(): UUID = data.reduce { one, two -> one + two }\n    private operator fun UUID.plus(another: UUID): UUID {\n        val mostSignificant = mostSignificantBits xor another.mostSignificantBits\n        val leastSignficant = leastSignificantBits xor another.leastSignificantBits\n        return UUID(mostSignificant, leastSignficant)\n    }\n}\n```", "```kt\n./gradlew benchmark\n```", "```kt\nSuccess: 109349297.194 ±(99.9%) 15493649.408 ops/s [Average]\n  (min, avg, max) = (55205844.260, 109349297.194, 132224154.121), stdev = 17842509.699\n  CI (99.9%): [93855647.787, 124842946.602] (assumes normal distribution)\n```", "```kt\nfun someExpensiveOp(n: Int): Int = n\n```", "```kt\n    val result = listOf(1, 7, 3, 23, 63).filter {\n        println(\"filter:$it\"); it > 3\n    }.map {\n        println(\"expensive:$it\"); someExpensiveOp(it)\n    }.take(2)\n    println(result)\n```", "```kt\nfilter:1\nfilter:7\nfilter:3\nfilter:23\nfilter:63\nexpensive:7\nexpensive:23\nexpensive:63\n[7, 23]\n```", "```kt\n    val result = listOf(1, 7, 3, 23, 63)\n        .asSequence().filter {\n            println(\"filter:$it\"); it > 3\n        }.map {\n            println(\"expensive:$it\"); someExpensiveOp(it)\n        }.take(2)\n    println(result)\n```", "```kt\nkotlin.sequences.TakeSequence@246b179d\n```", "```kt\n    println(result.toList())\n```", "```kt\nfilter:1\nfilter:7\nexpensive:7\nfilter:3\nfilter:23\nexpensive:23\n[7, 23]\n```", "```kt\nBucket number = (hash number of household name) mod (number of buckets)\n```", "```kt\ninline fun <T> measureTime(block: () -> T): T {\n    val start = System.nanoTime()\n    val result = block()\n    val timeTaken = System.nanoTime() - start\n    return result.also { println(\"taken: $timeTaken\") }\n}\n```", "```kt\nsuspend fun task1(): Int {\n    delay(1000)\n    println(\"Task 1 completed\")\n    return 42\n}\nsuspend fun task2(): Int {\n    delay(1500) // Simulate a 1.5-second delay\n    println(\"Task 2 completed\")\n    return 58\n}\n```", "```kt\nfun main() =\n    runBlocking {\n        val result1 = async { task1() }\n        val result2 = async { task2() }\n        val combinedResult = result1.await() + result2.await()\n        println(\"Combined Result: $combinedResult\")\n    }\n```"]