["```kt\nval deferred = CompletableDeferred<String>()\n```", "```kt\nsuspend fun valueAsync(): Deferred<String> = coroutineScope {\n```", "```kt\n    val deferred = CompletableDeferred<String>()\n```", "```kt\n    launch {\n```", "```kt\n        delay(100)\n```", "```kt\n        if (Random.nextBoolean()) {\n```", "```kt\n            deferred.complete(\"OK\")\n```", "```kt\n        }\n```", "```kt\n        else {\n```", "```kt\n            deferred.completeExceptionally(\n```", "```kt\n              RuntimeException()\n```", "```kt\n            )\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    deferred\n```", "```kt\n}\n```", "```kt\nrunBlocking {\n```", "```kt\n    val value = valueAsync()\n```", "```kt\n    println(value.await())\n```", "```kt\n}\n```", "```kt\ndeferred.cancel()\n```", "```kt\ndata class FavoriteCharacter(\n```", "```kt\n    val name: String,\n```", "```kt\n    val catchphrase: String,\n```", "```kt\n    val picture: ByteArray = Random.nextBytes(42)\n```", "```kt\n)\n```", "```kt\nfun CoroutineScope.getCatchphraseAsync\n```", "```kt\n(\n```", "```kt\n    characterName: String\n```", "```kt\n) = async { … }\n```", "```kt\nfun CoroutineScope.getPicture\n```", "```kt\n(\n```", "```kt\n    characterName: String\n```", "```kt\n) = async { … }\n```", "```kt\nsuspend fun fetchFavoriteCharacter(name: String) = coroutineScope {\n```", "```kt\n    val catchphrase = getCatchphraseAsync(name).await()\n```", "```kt\n    val picture = getPicture(name).await()\n```", "```kt\n    FavoriteCharacter(name, catchphrase, picture)\n```", "```kt\n}\n```", "```kt\nsuspend fun fetchFavoriteCharacter(name: String) = coroutineScope { \n```", "```kt\n    val catchphrase = getCatchphraseAsync(name) \n```", "```kt\n    val picture = getPicture(name) \n```", "```kt\n    FavoriteCharacter(name, catchphrase.await(),       picture.await()) \n```", "```kt\n}\n```", "```kt\nval (name, catchphrase, _) = fetchFavoriteCharacter(\"Inigo Montoya\")\n```", "```kt\nprintln(\"$name says: $catchphrase\")\n```", "```kt\nobject Michael {\n```", "```kt\n    suspend fun getFavoriteCharacter() = coroutineScope {\n```", "```kt\n        async {\n```", "```kt\n            FavoriteCharacter(\"Terminator\", \n```", "```kt\n              \"Hasta la vista, baby\")\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nobject Taylor {\n```", "```kt\n    suspend fun getFavoriteCharacter() = coroutineScope {\n```", "```kt\n        async {\n```", "```kt\n            FavoriteCharacter(\"Don Vito Corleone\", \"I'm \n```", "```kt\n              going to make him an offer he can't refuse\")\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nobject Me {\n```", "```kt\n    suspend fun getFavoriteCharacter() = coroutineScope {\n```", "```kt\n        async {\n```", "```kt\n            // I already prepared the answer!\n```", "```kt\n            FavoriteCharacter(\"Inigo Montoya\",               \"Hello, my name is...\")\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval characters: List<Deferred<FavoriteCharacter>> =    listOf(\n```", "```kt\n        Me.getFavoriteCharacter(),\n```", "```kt\n        Taylor.getFavoriteCharacter(),\n```", "```kt\n        Michael.getFavoriteCharacter(),\n```", "```kt\n    )\n```", "```kt\nprintln(characters.awaitAll())\n```", "```kt\nrunBlocking {\n```", "```kt\n    // This will use the Dispatcher from the parent \n```", "```kt\n    // coroutine\n```", "```kt\n    launch {\n```", "```kt\n        // Prints: main\n```", "```kt\n        println(Thread.currentThread().name) \n```", "```kt\n    }\n```", "```kt\n    launch(Dispatchers.Default) {\n```", "```kt\n        // Prints DefaultDispatcher-worker-1\n```", "```kt\n        println(Thread.currentThread().name) \n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nasync(Dispatchers.IO) {\n```", "```kt\n    for (i in 1..1000) {\n```", "```kt\n        println(Thread.currentThread().name)\n```", "```kt\n        yield()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n> …\n```", "```kt\n> DefaultDispatcher-worker-2\n```", "```kt\n> DefaultDispatcher-worker-1\n```", "```kt\n> DefaultDispatcher-worker-1\n```", "```kt\n> DefaultDispatcher-worker-1\n```", "```kt\n> DefaultDispatcher-worker-3\n```", "```kt\n> DefaultDispatcher-worker-3\n```", "```kt\n> ...\n```", "```kt\nval forkJoinPool = ForkJoinPool(4).asCoroutineDispatcher()\n```", "```kt\nrepeat(1000) {\n```", "```kt\n    launch(forkJoinPool) {\n```", "```kt\n        println(Thread.currentThread().name)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nfun CoroutineScope.producePages() = produce {\n```", "```kt\n    fun getPages(): List<String> {\n```", "```kt\n        // This should actually fetch something\n```", "```kt\n        return listOf(\n```", "```kt\n            \"<html><body><h1>\n```", "```kt\n               Cool stuff</h1></body></html>\",\n```", "```kt\n            \"<html><body><h1>\n```", "```kt\n               Even more stuff</h1></body></html>\"\n```", "```kt\n        )\n```", "```kt\n    }\n```", "```kt\n    val pages = getPages()\n```", "```kt\n    while (this.isActive) {\n```", "```kt\n        for (p in pages) {\n```", "```kt\n            send(p)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nfun CoroutineScope.produceDom(pages: ReceiveChannel<String>) = produce {\n```", "```kt\n    fun parseDom(page: String): Document {\n```", "```kt\n        // In reality this would use a DOM library to parse \n```", "```kt\n        // string to DOM\n```", "```kt\n        return Document(page)\n```", "```kt\n    }\n```", "```kt\n    for (p in pages) {\n```", "```kt\n        send(parseDom(p))\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nfun CoroutineScope.produceTitles(parsedPages: ReceiveChannel<Document>) = produce {\n```", "```kt\n    fun getTitles(dom: Document): List<String> {\n```", "```kt\n        return dom.getElementsByTagName(\"h1\").map {\n```", "```kt\n            it.toString()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    for (page in parsedPages) {\n```", "```kt\n        for (t in getTitles(page)) {\n```", "```kt\n            send(t)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nrunBlocking {\n```", "```kt\n    val pagesProducer = producePages()\n```", "```kt\n    val domProducer = produceDom(pagesProducer)\n```", "```kt\n    val titleProducer = produceTitles(domProducer)\n```", "```kt\n    titleProducer.consumeEach {\n```", "```kt\n        println(it)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nInput=>pagesProducer=>domProducer=>titleProducer=>Output\n```", "```kt\nfun CoroutineScope.generateWork() = produce {\n```", "```kt\n    for (i in 1..10_000) {\n```", "```kt\n        send(\"page$i\")\n```", "```kt\n    }\n```", "```kt\n    close()\n```", "```kt\n}\n```", "```kt\nfun CoroutineScope.doWork(\n```", "```kt\n    id: Int,\n```", "```kt\n    channel: ReceiveChannel<String>\n```", "```kt\n) = launch(Dispatchers.Default) {\n```", "```kt\n    for (p in channel) {\n```", "```kt\n        println(\"Worker $id processed $p\")\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval workChannel = generateWork()\n```", "```kt\nval workers = List(10) { id ->\n```", "```kt\n    doWork(id, workChannel)\n```", "```kt\n}\n```", "```kt\n> ...\n```", "```kt\n> Worker 4 processed page9994\n```", "```kt\n> Worker 8 processed page9993\n```", "```kt\n> Worker 3 processed page9992\n```", "```kt\n> Worker 6 processed page9987\n```", "```kt\nprivate fun CoroutineScope.doWorkAsync(\n```", "```kt\n    channel: ReceiveChannel<String>,\n```", "```kt\n    resultChannel: Channel<String>\n```", "```kt\n) = async(Dispatchers.Default) {\n```", "```kt\n    for (p in channel) {\n```", "```kt\n        resultChannel.send(p.repeat(2))\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nrunBlocking {\n```", "```kt\n    val workChannel = generateWork()\n```", "```kt\n    val resultChannel = Channel<String>()\n```", "```kt\n    val workers = List(10) {\n```", "```kt\n        doWorkAsync(workChannel, resultChannel)\n```", "```kt\n    }\n```", "```kt\n    resultChannel.consumeEach {\n```", "```kt\n        println(it)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n> ...\n```", "```kt\n> page9995page9995\n```", "```kt\n> page9996page9996\n```", "```kt\n> page9997page9997\n```", "```kt\n> page9999page9999\n```", "```kt\n> page9998page9998\n```", "```kt\n> page10000page10000\n```", "```kt\nfun CoroutineScope.preciseWeather() = produce {\n```", "```kt\n    delay(Random.nextLong(100))\n```", "```kt\n    send(\"Precise Weather\" to \"+25c\")\n```", "```kt\n}\n```", "```kt\nfun CoroutineScope.weatherToday() = produce {\n```", "```kt\n    delay(Random.nextLong(100))\n```", "```kt\n    send(\"Weather Today\" to \"+24c\")\n```", "```kt\n}\n```", "```kt\nrunBlocking {\n```", "```kt\n  val winner = select<Pair<String, String>> {\n```", "```kt\n    preciseWeather().onReceive { preciseWeatherResult ->\n```", "```kt\n            preciseWeatherResult\n```", "```kt\n        }\n```", "```kt\n        weatherToday().onReceive { weatherTodayResult ->\n```", "```kt\n            weatherTodayResult\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    println(winner)\n```", "```kt\n}\n```", "```kt\nfun CoroutineScope.fastProducer(\n```", "```kt\n    movieName: String\n```", "```kt\n) = produce(capacity = 1) {\n```", "```kt\n    send(movieName)\n```", "```kt\n}\n```", "```kt\nrunBlocking {\n```", "```kt\n    val firstOption = fastProducer(\"Quick&Angry 7\")\n```", "```kt\n    val secondOption = fastProducer(\n```", "```kt\n      \"Revengers: Penultimatum\")\n```", "```kt\n    delay(10)\n```", "```kt\n    val movieToWatch = select<String> {\n```", "```kt\n        firstOption.onReceive { it }\n```", "```kt\n        secondOption.onReceive { it }\n```", "```kt\n    }\n```", "```kt\n    println(movieToWatch)\n```", "```kt\n}\n```", "```kt\n...\n```", "```kt\nval movieToWatch = selectUnbiased<String> {\n```", "```kt\n    firstOption.onReceive { it }\n```", "```kt\n    secondOption.onReceive { it }\n```", "```kt\n}\n```", "```kt\n...\n```", "```kt\nvar counter = 0\n```", "```kt\nval jobs = List(10) {\n```", "```kt\n    async(Dispatchers.Default) {\n```", "```kt\n        repeat(1000) {\n```", "```kt\n            counter++\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\njobs.awaitAll()\n```", "```kt\nprintln(counter)\n```", "```kt\nvar counter = 0\n```", "```kt\nval mutex = Mutex()\n```", "```kt\nval jobs = List(10) {\n```", "```kt\n    launch {\n```", "```kt\n        repeat(1000) {\n```", "```kt\n            mutex.lock()\n```", "```kt\n            counter++\n```", "```kt\n            mutex.unlock()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ntry { \n```", "```kt\n    mutex.lock() \n```", "```kt\n    counter++                      \n```", "```kt\n} \n```", "```kt\nfinally { \n```", "```kt\n    mutex.unlock()                     \n```", "```kt\n}\n```", "```kt\nmutex.withLock {\n```", "```kt\n    counter++\n```", "```kt\n}\n```", "```kt\nval batman = actor<String> {\n```", "```kt\n    for (c in channel) {\n```", "```kt\n        println(\"Batman is beating some sense into $c\")\n```", "```kt\n        delay(100)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval robin = actor<String> {\n```", "```kt\n    for (c in channel) {\n```", "```kt\n        println(\"Robin is beating some sense into $c\")\n```", "```kt\n        delay(250)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval epicFight = launch {\n```", "```kt\n    for (villain in listOf(\"Jocker\", \"Bane\", \"Penguin\",       \"Riddler\", \"Killer Croc\")) {\n```", "```kt\n        val result = select<Pair<String, String>> {\n```", "```kt\n            batman.onSend(villain) {\n```", "```kt\n                \"Batman\" to villain\n```", "```kt\n            }\n```", "```kt\n            robin.onSend(villain) {\n```", "```kt\n                \"Robin\" to villain\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n        delay(90)\n```", "```kt\n        println(result)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n> Batman is beating some sense into Jocker\n```", "```kt\n> (Batman, Jocker)\n```", "```kt\n> Robin is beating some sense into Bane\n```", "```kt\n> (Robin, Bane)\n```", "```kt\n> Batman is beating some sense into Penguin\n```", "```kt\n> (Batman, Penguin)\n```", "```kt\n> Batman is beating some sense into Riddler\n```", "```kt\n> (Batman, Riddler)\n```", "```kt\n> Robin is beating some sense into Killer Croc\n```", "```kt\n> (Robin, Killer Croc)\n```"]