- en: Menus and Action Mode
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Creating an options menu
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying menus and menu items during runtime
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Contextual Action Mode for a view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Contextual Batch Mode with `RecyclerView`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pop-up menu
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Android OS is an ever-changing environment. The earliest Android devices
    (prior to Android 3.0), were required to have a hardware menu button. Though a
    hardware button is no longer required, menus are no less important. In fact, the
    Menu API has expanded to now support three different types of menus:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**Options menu and action bar**: This is the standard menu, which is used for
    global options of your application. Use this for additional features such as search,
    settings, and so on.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contextual****Mode** (**Contextual Action Mode**): This is generally activated
    by a long press. (Think of this as similar to a right-click on the desktop.) This
    is used to take an action on the pressed item, such as replying to an email or
    deleting a file.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pop-up m****enu**: This provides a pop-up selection (like a spinner) for
    an additional action. The menu options are not meant to affect the item pressed;
    instead, use Contextual Mode as described previously. An example would be hitting
    the share button and getting an additional list of share options.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu resources are similar to other Android UI components; they are generally
    created in XML, but can be created in code as well. Our first recipe, as shown
    in the following section, will show the XML menu format and how to inflate it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Creating an options menu
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we actually create and display a menu, let''s look at a menu to see
    the end result. The following is a screenshot showing the menu section of the
    Chrome app:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04c89fb1-5c84-4baa-80dd-6559f969fbe7.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: The most obvious feature to note is that the menu will look different based
    on the screen size. By default, menu items will be added to the overflow menu—that's
    the menu you see when you press the three dots at the far right edge.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Menus are typically created in resource files using XML (like many other Android
    resources) stored in the `res/menu` directory, though they can also be created
    in code. To create a menu resource, use the `<menu>` element as shown:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `<item>` element defines each individual menu item and is enclosed in the
    `<menu>` element. A basic menu item looks as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The most common `<item>` attributes are the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This is the standard resource identifier'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: This indicates the text to display'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon`: This is a drawable resource'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`showAsAction`: This is explained in the following paragraph'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enabled`: This is enabled by default'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at `showAsAction` in more detail.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The `showAsAction` attribute controls how the menu item is shown. The options
    include
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '`ifRoom`: This menu item should be included in the action bar if there''s enough
    space'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withText`: This indicates that both the title and the icon should be shown'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`never`: This indicates that the menu item should never be included in the
    action bar; it is always shown in the overflow menu'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`always`: This indicates that the menu item should be always included in the
    action bar (use sparingly as space is limited)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple options can be combined using the pipe (`|`) separator, such as `showAsAction="ifRoom|withText"`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: With the fundamentals of the menu resource covered, we are now ready to create
    a standard options menu and inflate it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use Android Studio to create a new project called `OptionsMenu`. Use the default
    Phone & Tablet option and select the Empty Activity option when prompted for the
    Activity Type. The Android Studio wizard does not create the `res/menu` folder
    by default. You can create it manually using File | New | Directory, or create
    it using the Android Resource Directory wizard.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to use the wizard:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'First, right-click on the `res` folder and select New | Android Resource Directory
    as shown here:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2222d1e5-7528-4228-9a49-dfd8f015422d.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: 'On the New Resource Directory dialog, select the Resource type drop-down menu
    and choose the menu option:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ce9f1789-d9d2-43d9-a5a4-7f951d391464.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the new project created as described in the preceding section, you are
    ready to create a menu. First, we will add a string resource to `strings.xml`.
    We will use the new string for the menu title when we create the XML for the menu.
    Here are the steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening the `strings.xml` file and adding the following `<string>`
    element to the `<resources>` element:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a new file in the `res/menu` directory and call it `menu_main.xml`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `menu_main.xml` file and add the following XML to define the menu:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the menu now defined in the XML, we just have to override the `onCreateOptionsMenu()`
    method in `ActivityMain.java` to inflate the menu:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the program on a device or emulator to see the menu in the action bar.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two basic steps here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Define the menu in XML
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inflate the menu when the activity is created
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a good programming habit, we define the string in the `strings.xml` file
    rather than hard coding it in the XML. We then use the standard Android string
    identifier to set the title for the menu in step 3\. Since this is a Settings
    menu item, we used the `showAsAction="never"` option so it wouldn't be shown as
    an individual menu option in the action bar.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: With the menu defined, we will use the menu inflater in step 4 to load the menu
    during the activity creation. Notice the `R.menu.menu_main` menu resource syntax?
    This is why we create the XML in the `res/menu` directory—so the system will know
    this is a menu resource.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 4, we used `app:showAsAction` rather than Android: `android:showAsAction`.
    This is because we are using the `AppCompat` library (also referred to as the
    Android Support Library). By default, the Android Studio new project wizard includes
    the support library in the project.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you ran the program in step 5, then you must have seen the Settings menu
    item when you pressed the menu overflow button. But that was it. Nothing else
    happened. Obviously, menu items aren't very useful if the application doesn't
    respond to them. Responding to the Options menu is done through the `onOptionsItemSelected()`
    callback.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following method to the application to see a Toast when the Settings
    menu is selected:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That's it. You now have a working menu!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding example, return `true` when you've handled the callback;
    otherwise, call the super class as shown in the `else` statement.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Using a menu item to launch an activity
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the above example, we show a Toast in response to the menu click; however,
    we could just as easily launch a new activity if needed. To start an activity, create
    an Intent and call it with `startActivity()` as shown in the *Starting a new activity
    with an Intent object* recipe in [Chapter 1](ef2fe8b4-1320-45f5-b0d5-fb9fd1d35e07.xhtml), *Activities.*
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Creating submenus
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Submenus** are created and accessed in almost exactly the same manner as
    other menu elements. They can be placed in any of the provided menus but not within
    other submenus. To define a submenu, include a `<menu>` element within an `<item>`
    element. Here is the XML for this recipe with two submenu items added:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Grouping menu items
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another menu feature that Android supports is grouping menu items. Android
    provides several methods for groups, including the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`setGroupVisible()`: Show or hide all items'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setGroupEnabled()`: Enable or disable all items'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setGroupCheckable()`: Set the checkable behavior'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android will keep all grouped items with `showAsAction="ifRoom"` together. This
    means all items in the group with `showAsAction="ifRoom"` will be in the action
    bar or all items will be in the overflow.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a group, add the `<item>` menu elements to a `<group>` element. Here
    is an example using the menu XML from this recipe with two additional items in
    a group:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: See also
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For complete details on the menu, visit the Android Developer Menu Resources
    site at [http://developer.android.com/guide/topics/resources/menu-resource.html](http://developer.android.com/guide/topics/resources/menu-resource.html)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying menus and menu items during runtime
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though it's been stated many times it's considered the *best* programming practice
    to create UIs in XML rather than in Java, there are still times when using code
    is the better option. This is especially true if you wanted a menu item to be
    visible (or enabled) based on some external criteria. Menus can also be included
    in resource folders, but there are times when you need code to perform the logic
    of which resource to use. One example might be if you wanted to offer an upload
    menu item only if the user is logged in to your app.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create and modify the menu only through code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `RuntimeMenu` using the default
    Phone & Tablet option. Select the Empty Activity option when prompted to add an
    activity. Since we will create and modify the menu completely in code, we will
    not need to create a
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '`res/menu` directory.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start, we will add string resources for our menu items and a button to toggle
    the menu visibility. Open the `res/strings.xml` file and follow these steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two strings to the existing `<resources>` element:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Delete the existing `TextView` and add a button to `activity_main.xml` with
    `onClick()` set to `toggleMenu` as shown here:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open `ActivityMain.java` and add the following three lines of code just below
    the class declaration:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following method for the button click callback:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When the activity is first created, Android calls `onCreateOptionsMenu()` to
    create the menu. Here is the code to dynamically build the menu:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For best programming practice, don''t use `onCreateOptionsMenu()` to update
    or change your menu; instead, use `onPrepareOptionsMenu()`. Here is the code to
    change the visibility of the Download menu item based on our flag:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Though not technically required for this recipe, this `onOptionsItemSelected()`
    code shows how to respond to each menu item:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run the program on a device or emulator to see the menu changes.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created an override for `onCreateOptionsMenu()`, just like we did in the
    previous recipe, *Creating an options menu*. But instead of inflating an existing
    menu resource, we created the menu using the `Menu.add()` method. Since we want
    to modify the menu items later as well as respond to the menu item events, we
    defined our own menu IDs and passed them to the `add()` method. The `onOptionsItemSelected()` object
    is called for all the menu items, so we get the menu ID and use a `switch` statement
    based on the ID. We return `true` if we are handling the menu event, otherwise
    we pass the event to the super class.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Changing the menu occurs in the `onPrepareOptionsMenu()` method. To simulate
    an external event, we created a button to toggle a Boolean flag. The visibility
    of the Download menu is determined by the flag. This is where you would want to
    create your custom code based on whatever criteria you set. Your flag could be
    set using the current player level or maybe when a new level is ready for release,
    you send a push message to enable the menu item.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What if we wanted the Download option to stand out when it''s available? We
    could tell Android we want the menu in the action bar by adding the following
    code to `onPrepareOptionsMenu()` (before the return statement):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now if you run the code, you will see the Download menu item in the action bar,
    but the behavior isn't correct.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier, when we didn''t have a menu item in the action bar, Android called
    `onPrepareOptionsMenu()` each time we opened the overflow menu so the visibility
    was always updated. To correct this behavior, add the following line of code to
    the `toggleMenu()` method:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `invalidateOptionsMenu()` call tells Android that our option menu is no
    longer valid, which then forces a call to `onPrepareOptionsMenu()`, giving us
    the behavior we expect.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Android considers the menu as always open if a menu item is displayed in the
    action bar.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Contextual Action Mode for a view
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A context menu provides additional options related to a specific view—the same
    concept as a right-click on the desktop. Android currently supports two different
    approaches: the floating context menu and Contextual Mode. Contextual Action Mode
    was introduced in Android 3.0\. The older floating context menu could lead to
    confusion since there was no indication of the currently selected item and it
    didn''t support actions on multiple items—such as selecting multiple emails to
    delete in one action.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Creating a floating context menu
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to use the old-style context menu, for example to support pre-Android
    3.0 devices, it's very similar to the Option Menu API, you just different method
    names. To create the menu, use `onCreateContextMenu()` instead of `onCreateOptionsMenu()`.
    To handle the menu item selection, use `onContextItemSelected()` instead of `onOptionsItemSelected()`.
    Finally, call `registerForContextMenu()` to let the system know you want context
    menu events for the view.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Since Contextual Mode is considered the preferred way to display context options,
    this recipe will focus on the newer API. Contextual Mode offers the same features
    as the floating context menu, but also adds additional functionality by allowing
    multiple item selection when using batch mode.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate the setup of Contextual Mode for a single view.
    Once activated, with a long press in our example, a **contextual action bar**
    (**CAB**) will replace the action bar until Contextual Mode is finished.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: The CAB is not the same as the action bar and your activity does not need to
    include an action bar.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use Android Studio to create a new project and call it `ContextualMode`. Use
    the default Phone & Tablet option and select Empty Activity when prompted to add
    an activity. Create a menu directory (`res/menu`) as we did in the first recipe,
    *Creating an options menu*, to store the XML for the contextual menu.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create `ImageView` to serve as the host view to initialize Contextual
    Mode. Since Contextual Mode is usually triggered with a long press, we will set
    up a long click listener in `onCreate()` for `ImageView`. When called, we will
    start Contextual Mode and pass an `ActionMode` callback to handle the Contextual
    Mode events. Here are the steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by adding two new string resources. Open the `strings.xml` file
    and add the following:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With the strings created, we can now create the menu by creating a new file
    in `res/menu` called `context_menu.xml` using the following XML:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now add `ImageView` to `activity_main.xml` to serve as the source for initiating
    Contextual Mode. Here is the XML for `ImageView`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With the UI now set up, we can add the code for Contextual Mode. First, we
    need a global variable to store the `ActionMode` instance returned when we call
    `startActionMode()`. Add the following line of code to `MainActivity.java` below
    the class constructor:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, create an `ActionMode` callback to pass to `startActionMode().` Add the
    following code to the `MainActivity` class below the code in the previous step:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With the `ActionMode` callback created, we just need to call `startActionMode()`
    to begin Contextual Mode. Add the following code to the `onCreate()` method to
    set up the long click listener:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run the program on a device or emulator to see the CAB in action.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw in step 2, we used the same menu XML to define the contextual menu
    as the other menus.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'The main piece of code to understand is the `ActionMode` callback. This is
    where we handle the Contextual Mode events: initializing the menu, handling menu
    item selections, and cleaning up. We start Contextual Mode in the long press event
    with a call to `startActionMode()` by passing in the `ActionMode` callback created
    in step 5.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: When action mode is triggered, the system calls the `onCreateActionMode()` callback,
    which inflates the menu and displays it in the CAB. The user can dismiss the CAB
    by pressing the back arrow or the back key. The CAB is also dismissed when the
    user makes a menu selection. We show a Toast to give a visual feedback for this
    recipe but this is where you would implement your functionality.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we store `ActionMode` returned from the `startActionMode()`
    call. We use it to prevent a new instance from being created when the Action Mode
    is already active. We could also use this instance to make changes to the CAB
    itself, such as changing the title with the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This is particularly useful when working with multiple item selections as we'll
    see in the next recipe.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See the next recipe, *Using Contextual Batch Mode with RecyclerView*, to work
    with multiple item selection
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Contextual Batch Mode with RecyclerView
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed in the previous recipe, Contextual Mode supports two forms of
    use: single View mode (as demonstrated) and multiple selection (or batch) mode.
    Batch mode is where Contextual Mode outperforms the old-style context menu as
    multiple selections were not supported.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''ve ever used an email app such as Gmail or a file browser, you''ve
    probably seen Contextual Mode when selecting multiple items. Here is a screenshot
    from Solid Explorer, which shows an excellent implementation of Material Theme
    and Contextual Mode:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85d5a22f-ca2c-4c51-903a-3257d12c4c78.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: When we introduced `RecyclerView` in [Chapter 2](0b95f21f-496a-48ca-900c-32d887d3a3fe.xhtml),
    *Layouts*, we discussed how many features from the old `ListView` were not already
    included in the new `RecyclerView`. Multiple item selection is one of the most
    missed features. In this recipe, we will demonstrate multiple item selection with
    the `RecyclerView` using Action Mode.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the `RecyclerView` example created in [Chapter 2](0b95f21f-496a-48ca-900c-32d887d3a3fe.xhtml)*,
    Layouts* as the base for this recipe. If you have not already done so, go back
    to the *RecyclerView replaces ListView *recipe in that chapter*,* then add the
    menu directory (`res/menu`) for the contextual menu as demonstrated previously.
    From this point, you can perform the following steps to add multiple item selection
    to `RecyclerView`. The project will be called `RecyclerViewActionMode`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll be combining several concepts already learned in previous recipes to
    enable multiple item selection with `RecyclerView`. We''ll start by adding the
    menu and related code, then modify the `RecyclerView` item to show the state selection.
    Finally, we''ll modify the `RecyclerView` adapter to support click notification,
    which will start Action Mode. Here are the steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `strings.xml` file and add two new string resources for the menu items
    as follows:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a new file called `contextual_menu.xml` in the `res/menu` folder with
    the following XML:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, add a new file to the `res/drawable` folder called `item_selector.xml`
    with the following XML:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open the `item.xml` file in `res/layout` and add the following line to the
    `LinearLayout`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, create a new Java file called `SelectMode` to server as the click event
    interface. The code is as follows:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now open the `MyAdapter` file and add `implements SelectMode` to the class.
    The final result will be as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the `onSelect` method to the class using the following code:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the following declaration to the class to hold the list of selected items:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We''ll add another method to the adapter to handle the actual `delete` method
    called from the Action Mode:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The final change to make to the `MyAdapter` class is to replace the existing
    `onClick()` . The final code will be as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now that we have the menu created and the adapter updated, we need to hook
    it all up in the `MainActivity` class. To start, modify the `MainActivity` declaration
    to implement the `SelectMode` interface. The final code will be as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Below the class declaration, add the following two variable declarations:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then add the `ActionMode` callback declaration:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We need to store the `MyAdapter` reference so it can be called from `ActionMode`.
    To do this, modify the `myAdapter` instantiation call in the `onCreate()` method
    as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The final code is to implement the `onSelect` method to connect the adapter
    callback to the Action Mode. Add the following method to the `MainActivity` class:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Run the program on a device or emulator to see the CAB in action.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the *Introduction* to this recipe, multiple item selection is
    one of the most missed features of `RecyclerView` and the one that receives the
    most questions. As you can see from this example, even a basic implementation
    requires many steps but the end result can be the exact implementation required
    for your task. You won't be limited to an existing feature set since you'll be
    creating it yourself.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe combines several concepts learned from previous recipes, including
    the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '`RecyclerView`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RecyclerView` adapter
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The contextual menu
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The action mode callback
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To tie everything together, we created a custom interface so the adapter could
    notify when an item was selected. `MainActivity` receives the `onSelect()` event
    to trigger `ActionMode`. The `ActionMode` menu item calls the adapter when the
    user clicks the Delete All menu item and then closes the CAB.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: This is just one-way `ActionMode` could be implemented. We could start `ActionMode`
    with a long press, a checkbox on the item, or maybe a menu item. The choice is
    yours.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you ran the application using the code shown previously, everything works
    as you''d expect. But there''s a problem. Our example only has a few items in
    the list—probably not enough to even allow scrolling. The point of `RecyclerView`
    though is to efficiently handle many items when scrolling. If you add many more
    items to the list, enough to allow scrolling a screen or two, you''ll see the
    problem. `RecyclerView` does exactly what it says: it recycles the views. If you
    select the first item, then scroll down, you''ll see the problem - items you didn''t
    select are selected.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'What''s happening is a common issue and confuses many developers new to `RecyclerView`.
    Because the view is being reused, it''s showing the state from the previous item.
    The solution is simple: just set the state appropriately when binding a new item.
    We can fix the preceding problem just by setting the initial state in the `onBindViewHolder()`
    call. Add the following line of code to the `onBindViewHolder()` method in the
    `MyAdapter` class:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As you can see, we set the initial state by checking our list to see if the
    item was selected.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information on `RecyclerView`, refer to [Chapter 2](0b95f21f-496a-48ca-900c-32d887d3a3fe.xhtml)*,
    Layouts*
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the SparseArray, refer to [https://developer.android.com/reference/android/util/SparseArray](https://developer.android.com/reference/android/util/SparseArray)
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pop-up menu
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A pop-up menu is attached to a view similar to the drop-down menu on a spinner.
    The idea of a pop-up menu is to provide additional options to complete an action.
    A common example might be a Reply button in an email app. When pressed, several
    reply options are shown, such as: Reply, Reply All, and Forward.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the pop-up menu from the following recipe:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08cb6ea0-0eb1-44d4-bbeb-0beab4c9681a.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08cb6ea0-0eb1-44d4-bbeb-0beab4c9681a.png)'
- en: Android will show the menu options below the anchor view if there is room; otherwise,
    the menu will be shown above the view.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有空间，Android将在锚视图下方显示菜单选项；否则，菜单将显示在视图上方。
- en: A pop-up menu is *not* meant to affect the view itself. That is the purpose
    of a Context Menu. Instead refer to the Floating Menu/Context Mode described in
    the *Enabling Contextual Action Mode for a view* recipe.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出菜单**不是**用来影响视图本身的。这是上下文菜单的目的。相反，请参考*启用视图的上下文操作模式*食谱中描述的浮动菜单/上下文模式。
- en: In this recipe, we will create the pop-up menu shown previously, using `ImageButton`
    as the anchor view.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将创建之前显示的弹出菜单，使用`ImageButton`作为锚视图。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `PopupMenu`. Use the default
    Phone & Tablet option and select Empty Activity on the Add an Activity to Mobile
    dialog. As detailed in the first exercise of this chapter, create a menu directory
    (`res/menu`) to store the menu XML.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`PopupMenu`。使用默认的Phone & Tablet选项，并在添加活动到移动对话框中选择Empty
    Activity。如本章第一项练习中详细说明的，创建一个菜单目录（`res/menu`）来存储菜单XML。
- en: How to do it...
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We start by creating the XML menu to inflate on the button press. After inflating
    the pop-up menu, we call `setOnMenuItemClickListener()` by passing in the callback
    to handle the menu item selection. Start by opening the `strings.xml` file located
    in the `res/values` folder, then follow these steps:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个XML菜单，在按钮按下时展开。展开弹出菜单后，我们通过传递回调来调用`setOnMenuItemClickListener()`处理菜单项选择。首先打开位于`res/values`文件夹中的`strings.xml`文件，然后按照以下步骤操作：
- en: 'Add the following strings:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下字符串：
- en: '[PRE40]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a new file in the `res/menu` directory called `menu_popup.xml` using
    the following XML:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/menu`目录下创建一个名为`menu_popup.xml`的新文件，使用以下XML：
- en: '[PRE41]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create `ImageButton` in `activity_main.xml` to provide the anchor view for
    the pop-up menu. Create it as shown in the following XML code:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity_main.xml`中创建`ImageButton`以提供弹出菜单的锚视图。按照以下XML代码创建它：
- en: '[PRE42]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Open `MainActivity.java` and add the following `OnMenuItemClickListener` below
    the class constructor:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`并在类构造函数下方添加以下`OnMenuItemClickListener`：
- en: '[PRE43]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The final code is to handle the button `onClick()` event, as follows:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的代码是处理按钮`onClick()`事件，如下所示：
- en: '[PRE44]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Run the program on a device or emulator to see the pop-up menu.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序以查看弹出菜单。
- en: How it works...
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If you read the previous menu recipes, this will probably look very familiar.
    Basically, we just inflate a pop-up menu when `ImageButton` is pressed. We set
    up a menu item listener to respond to the menu selection.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读了前面的菜单食谱，这可能会看起来非常熟悉。基本上，我们只是在按下`ImageButton`时弹出一个菜单。我们设置了一个菜单项监听器来响应用户的菜单选择。
- en: The key is to understand each of the menu options available in Android so you
    can use the correct menu type for a given scenario. This will help your application
    by providing a consistent user experience and reducing the learning curve for
    the user as they will already be familiar with the *standard* way of doing things.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是要理解Android中可用的每个菜单选项，以便你可以为特定场景选择正确的菜单类型。这将通过提供一致的用户体验并减少用户的学习曲线来帮助你的应用程序，因为用户已经熟悉了*标准*的操作方式。
