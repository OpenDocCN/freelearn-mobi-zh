["```swift\n    pass.pro.passkit.example.generic\n    ```", "```swift\n    openssl pkcs12 -in <Path to exported .p12> -clcerts -nokeys -out certificate.pem\n    openssl pkcs12 -in <Path to exported .p12> -nocerts -out key.pem\n\n    ```", "```swift\n    {\n    \"passTypeIdentifier\" : \"pass.pro.passkit.example.generic\",\n      \"formatVersion\" : 1,\n      \"teamIdentifier\" : \"YAXJZJ267E\",\n      \"organizationName\" : \"Passbook Example Company\",\n      \"serialNumber\" : \"0000001\",\n      \"description\" : \"Staff Pass for Employee Number 001\",\n      \"associatedStoreIdentifiers\" : [\n        375380948\n      ],\n      \"locations\" : [\n        {\n      \"latitude\" : 51.50506, \n      \"longitude\" : -0.01960, \n      \"relevantText\" : \"Company Offices\"\n    }\n      ],\n      \"foregroundColor\" : \"rgb(255, 255, 255)\",\n      \"backgroundColor\" : \"rgb(90, 90, 90)\",\n      \"labelColor\" : \"rgb(255, 255, 255)\",\n      \"logoText\" : \"Company Staff ID\",\n      \"barcode\" : {\n        \"format\" : \"PKBarcodeFormatQR\",\n        \"message\" : \"0000001\",\n        \"messageEncoding\" : \"iso-8859-1\",\n        \"altText\" : \"Staff ID 0000001\"\n       },\n      \"generic\" : {\n        \"headerFields\" : [\n          {\n            \"key\" : \"staffNumber\",\n      \"label\" : \"Staff Number\",\n      \"value\" : \"001\"\n          }\n        ],\n      \"primaryFields\" : [\n        {\n      \"key\" : \"staffName\",\n      \"label\" : \"Name\",\n      \"value\" : \"Peter Brooke\"\n      }\n      ],\n      \"secondaryFields\" : [\n      {\n      \"key\" : \"telephoneExt\",\n      \"label\" : \"Extension\",\n      \"value\" : \"9779\"\n      },\n      {\n      \"key\" : \"jobTitle\",\n      \"label\" : \"Job Title\",\n      \"value\" : \"Chief Pass Creator\"\n      }\n      ],\n      \"backFields\" : [\n      {\n      \"key\" : \"managersName\",\n      \"label\" : \"Manager's Name\",\n      \"value\" : \"Paul Bailey\"\n      },\n      {\n      \"key\" : \"managersExt\",\n      \"label\" : \"Manager's Extension\",\n      \"value\" : \"9673\"\n      },\n      {\n      \"key\" : \"expiryDate\",\n      \"dateStyle\" : \"PKDateStyleShort\",\n      \"label\" : \"Expiry Date\",\n      \"value\" : \"2013-12-31T00:00-23:59\"\n      }\n      ]\n      }\n    }\n    ```", "```swift\n    {\n     \"pass.json\":\"4f5cef0afe8171f736de367b202ca054abfb3663\",\n     \"icon.png\":\"8c58c1fbf11f944c03b5cd5e41dc6d301263c1f7\", \"icon@2x.png\":\"ae3395b5e252610b02d51d52a534c700837ced2d\"\n    }\n\n    ```", "```swift\n    cd [Path to the folder containing the Pass package]\n    opensslsha1 *\n\n    ```", "```swift\n    sudo open sslsmime -binary -sign -certfile ../signing/wwdr.pem -signer ../sgning/certificate.pem -inkey ../signing/key.pem -in manifest.json -out signature -outform DER -passin pass:[Pass phrase provided when creating the key.pem]\n\n    ```", "```swift\n    require 'net/smtp'\n\n    # This script accepts the following arguments: recipients name, recipients email address, path to Pass.\n    # Example usage: \n    # ruby send_pass_by_email.rb \"Peter Brooke\" pbrooke@passkit.pro ../Pass-Example-Generic/Pass-Example-Generic.pkpass\n\n    # Retrieve command line arguments\n    recipientName = ARGV[0]\n    recipientEmail = ARGV[1]\n    passFilePath = ARGV[2]\n\n    # Setup template email values\n    senderName = \"Passbook Example Company\"\n    senderEmail = \"info@passkit.pro\" \n    emailSubjectText = \"New Employee Pass\"\n    emailBodyText = \"Please find attached your new employee Pass\"\n\n    # Setup SMTP settings\n    smtpDomain = \"TO DEFINE. Eg. gmail.com\"\n    smtpLogin = \"TO DEFINE. Eg. ......@gmail.com\"\n    smtpPassword = \"TO DEFINE\" \n\n    # Read file and base64 encode\n    fileContent = File.read(passFilePath)\n    encodedContent = [fileContent].pack(\"m\")\n\n    # The is used to separate the MIME parts, it can be anything\n    # as long as it does not appear elsewhere in the email text\n    boundaryMarker = \"SEPARATINGSTRINGNOTFOUNDELSEWHERE\"\n\n    # Setup the email headers.\n    headers =<<EOF\n    From: #{senderName} <#{senderEmail}>\n    To: #{recipientName} <#{recipientEmail}>\n    Subject: #{emailSubjectText}\n    MIME-Version: 1.0\n    Content-Type: multipart/mixed; boundary=#{boundaryMarker}\n    --#{boundaryMarker}\n    EOF\n\n    # Setup the email body\n    body =<<EOF\n    Content-Type: text/plain\n    Content-Transfer-Encoding:8bit\n\n    #{emailBodyText}\n    --#{boundaryMarker}\n    EOF\n\n    # Setup the Pass attachment with the correct MIME Encoding\n    attachment =<<EOF\n    Content-Type: application/vnd.apple.pkpass; name=\\\"#{passFilePath}\\\"\n    Content-Transfer-Encoding:base64\n    Content-Disposition: attachment; filename=\"#{passFilePath}\"\n\n    #{encodedContent}\n    --#{boundaryMarker}--\n    EOF\n\n    completeEmail = headers + body + attachment\n\n    # Send email using your SMTP settings\n    smtp = Net::SMTP.new 'smtp.gmail.com', 587\n    smtp.enable_starttls\n    smtp.start(smtpDomain, smtpLogin, smtpPassword, :login) do\n      smtp.send_message(completeEmail, senderEmail, recipientEmail)\n    end\n    ```", "```swift\n    ruby <Path to send_pass_by_email.rb> \"Peter Brooke\" pbrooke@passkit.pro <Path to Pass to attach .pkpass>\n    ```", "```swift\nsudoapachectl start\n\n```", "```swift\n    AddType application/vnd.apple.pkpass pkpass\n    ```", "```swift\n    Get your employee pass <a href='Pass-Example-Generic.pkpass'>HERE</a>\n    ```", "```swift\napplication/vnd.apple.pkpass pkpass\n```", "```swift\n    In PKEViewController.h, replace the existing code with the following:\n    #import <UIKit/UIKit.h>\n    #import <PassKit/PassKit.h>\n\n    @interface PKEViewController : UIViewController<PKAddPassesViewControllerDelegate>\n\n    @property (nonatomic, retain) IBOutletUIButton *addPassButton;\n\n    - (IBAction)addPassButtonPressed:(id)sender;\n\n    @end\n    ```", "```swift\n    #import \"PKEViewController.h\"\n\n    @interface PKEViewController ()\n\n    @property (nonatomic, retain) PKPass *genericPass;\n\n    @end\n\n    @implementation PKEViewController\n\n    - (void)viewDidLoad\n    {\n        [super viewDidLoad];\n      // Do any additional setup after loading the view, typically from a nib.\n\n        // Create the PKPass from the bundled file\n        // In a real App this may be retrive from the network.\n\n    NSString *passFilePath = [[NSBundle mainBundle] pathForResource:@\"Pass-Example-Generic\" ofType:@\"pkpass\"];\n    NSData *passData = [[NSDataalloc] initWithContentsOfFile:passFilePath];\n    NSError *passError;\n        _genericPass = [[PKPass alloc] initWithData:passData error:&passError];\n        [passData release];\n\n    }\n\n    - (void)didReceiveMemoryWarning\n    {\n        [super didReceiveMemoryWarning];\n        // Dispose of any resources that can be recreated.\n    }\n\n    - (void)dealloc {\n\n        [_addPassButton release];\n        [_genericPass release];\n\n        [super dealloc];\n    }\n\n    #pragma mark - IBAction Methods\n\n    - (IBAction)addPassButtonPressed:(id)sender {\n\n        if (![PKPassLibrary isPassLibraryAvailable]) {\n\n    NSLog(@\"Passbook not available on this device\");\n            return;\n\n        }\n\n    PKAddPassesViewController *addPassViewController = [[PKAddPassesViewController alloc] initWithPass:self.genericPass];\n    addPassViewController.delegate = self;\n\n        [self presentViewController:addPassViewController animated:YES completion:^{\n\n      NSLog(@\"Add Pass view controller presented\");\n\n        }];\n\n        [addPassViewController release];\n    }\n\n    #pragma mark - PKAddPassesViewControllerDelegate Methods\n\n    - (void)addPassesViewControllerDidFinish:(PKAddPassesViewController *)controller {\n\n        // Check if the Pass is now in the Pass Library\n\n    PKPassLibrary *passLibrary = [[PKPassLibrary alloc] init];\n\n        if ([passLibrary containsPass:self.genericPass]) {\n\n            // If the Pass is now in the Library, we can't re-add it, only view it.\n            [self.addPassButton setTitle:@\"View Pass in Passbook\" forState:UIControlStateNormal];\n\n        } \n\n        [self dismissViewControllerAnimated:YES completion:^{\n\n      NSLog(@\"Add Pass view controller dismissed\");\n\n        }];\n\n    }\n\n    @end\n    ```", "```swift\nNSString *passFilePath = [[NSBundle mainBundle] pathForResource:@\"Pass-Example-Generic\" ofType:@\"pkpass\"];\nNSData *passData = [[NSDataalloc] initWithContentsOfFile:passFilePath];\nNSError *passError;\n_genericPass = [[PKPassalloc] initWithData:passData error:&passError];\n[passData release];\n```", "```swift\nif (![PKPassLibrary isPassLibraryAvailable]) {\n    NSLog(@\"Passbook not available on this device\");\n    return;       \n}\n```", "```swift\n    git clone https://github.com/keefmoon/passbook_rails_example.git\n\n    ```", "```swift\n    cd passbook_rails_example\n    bundle\n\n    ```", "```swift\n    sudo env ARCHFLAGS=\"-arch x86_64\" gem install pg\n\n    ```", "```swift\n    sudo gem installrdoc-data\n    sudo rdoc-data --install\n\n    ```", "```swift\n    pass = Passbook::Pass.create(pass_type_identifier: \"pass.pro.passkit.example.generic\", serial_number: \"0000001\", authentication_token: \"UniqueAuthTokenABCD1234\")\n    pass.data = {\n      staffName: \"Peter Brooke\",\n      telephoneExt: \"9779\",\n      jobTitle: \"CTO\",\n      managersName: \"Paul Bailey\",\n      managersExt: \"9673\",\n      expiryDate: \"2013-12-31T00:00-23:59\"\n    }\n    pass.save\n\n    pass.registrations.create(device_library_identifier: \"123456789\", push_token: \"00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\")\n    ```", "```swift\n    heroku create\n    git push heroku master\n    heroku run rake db:createdb:migratedb:seed\n    ```", "```swift\n    \"authenticationToken\" : \"UniqueAuthTokenABCD1234\",\n    \"webServiceURL\" : \"http://frozen-bayou-9500.herokuapp.com/passbook\",\n    ```", "```swift\nAccept: application/json\n```"]