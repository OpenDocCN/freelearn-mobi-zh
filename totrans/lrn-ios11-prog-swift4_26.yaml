- en: Just a Peek
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2015, when the iPhone 6S and 6S Plus were announced, Apple also introduced
    3D Touch. 3D Touch uses a Taptic Engine with haptic feedback, which allows the
    device to sense the pressure of a touch, thereby triggering specific actions.
    For example, pressing hard on an icon will enable us to quickly open an action
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding 3D Touch quick actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the difference between static and dynamic quick actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding 3D Touch support inside of a Collection View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first thing we will do for our app is to add quick actions for our app icon.
  prefs: []
  type: TYPE_NORMAL
- en: Adding 3D Touch quick actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our app, we are going to add four quick actions (which is the maximum amount
    that you can have). These actions will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launch the locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select Los Angeles as a location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select Las Vegas as a location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two types of quick actions: static and dynamic. Static means that
    they cannot be changed and dynamic means that they can. For example, Apple has
    3D Touch on their *Messages* app. If you press hard on the *Messages* app, you
    will see one static quick action, New Message, and three dynamic quick actions,
    the three most-texted contacts. In our app, we will have two static quick actions,
    launching the Map tab and the locations list, and two dynamic quick actions, launching
    Los Angeles and Las Vegas as locations. Let''s start setting up our quick actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Misc` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top and then Swift File. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file Shortcut and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside of this file, add the following `enum` after the `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This `enum` is used for our quick actions. As we discussed, we will have four
    quick actions for our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open your `AppDelegate.swift` file. After the `window` variable, add the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have a variable for our shortcut item and a constant for our user info
    key. When the application launches, we need to check to see if the app was launched
    using a quick action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a method to handle our shortcuts. Add the following
    after the `checkNotifications()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc59d75b-7c95-4c9f-bc82-fdd458bc47ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s break down our code and have a look at each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part A**: Here is where we check for a shortcut item. If we have a shortcut
    item, then the rest of the code inside of this `if...let` statement will run:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: This is our first dynamic shortcut. This will set our current selected
    location to Los Angeles. We will also set the icon image here to a custom image
    that is in our image assets:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Part C**: This is our second dynamic shortcut. This will set our current
    selected location to Las Vegas. We will also set the icon image here to a custom
    image that is in our image assets:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Part D**: Finally, when we are done, we will return `true` or `false`. `True`
    will be sent if a shortcut icon was not selected, and `false` will be sent if
    one was selected:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our method created, let''s update our return value inside
    of `didFinishLaunchingWithOptions`. Update the return from the current value of
    `true` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to add a few more methods for our application to handle shortcuts.
    Let''s add a method that will handle any shortcut links that are selected. Add
    the following method after the `checkShortCut()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/630ab91e-83cc-49cd-8f18-b9d698d56f6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s break down this code, so that  you can better understand the different
    parts of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part A**: Here, we are ensuring  that we have a shortcut item, shortcut type,
    and a Tab Bar controller. If we do not have any of these things, we will return
    `false` and not  go any further:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: This shortcut will allow us to launch the location list view. We
    are setting the selected index of the Tab Bar controller and then using the `performSegue`
    to enable the modal to appear:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Part C**: This shortcut will allow us to go directly to the Map tab:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Part D**: This shortcut will allow us to launch the explore view with Los
    Angeles already selected:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Part E**: This shortcut will allow us to launch the explore view with Las
    Vegas already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we can have a method for handling any shortcut links, add the following
    method after the `applicationWillTerminate()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This method gets called every time a shortcut action is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to add code to check when the app becomes active. Find the
    `applicationDidBecomeActive()` method and add the following inside of the curly
    braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are handling any shortcut actions. Also, we are checking whether the
    badge icon is set to a number other than `0`, and, if so, we reset it to `0`.
  prefs: []
  type: TYPE_NORMAL
- en: If you are keeping track, you will see that we have only added two items so
    far—our dynamic items. We still need to add our static items; however, these will
    actually be added to your `Info.plist`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Info.plist` in the `Assets` folder of the Navigator panel. Hover
    over Privacy - Camera Usage Description and then click on the + button to add
    the key `UIApplicationShortcutItems`. Make the type an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a3565c3-f1ed-4541-8e5a-6e8080afbe16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, hover over `UIApplicationShortcutItems` and click on the + button to
    add an item to this array. Change the type to Dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae8265db-c7a9-4508-b8a8-632c3256973d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hover over Item 0 and click on the + button three times to add three strings.
    Give the three keys the following names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ec0e6de0-71d4-478a-a0ca-fd5c98567805.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, copy Item 0 (⌘ + *C*) and paste it (⌘ + *V*) into `UIApplicationShortcutItems`.
    You should now have Item 0 and Item 1, each with the same three Strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/789625c6-dd48-488e-91ac-87186790a661.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, set their values to the following for Item 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'UIApplicationShortcutItemIconFile: `shortcut-map`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UIApplicationShortcutItemTitle: `Map`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UIApplicationShortcutItemType: `$(PRODUCTBUNDLEIDENTIFIER).openMap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Item 1, set their values as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'UIApplicationShortcutItemIconFile: `shortcut-location`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UIApplicationShortcutItemTitle: `Locations`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UIApplicationShortcutItemType: `$(PRODUCTBUNDLEIDENTIFIER).openLocations`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you are finished, your file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3facc9ac-fd95-4103-a7ca-fae200f86e0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Save your file, and build and run the project on your device. If you have a
    MacBook or a MacBook Pro with a Force Touch mouse, you can run this in the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: If you are building your phone, you might encounter errors. These errors occur
    because you have not built the framework for your phone. Just switch to the framework,
    then hit ⌘ + *B*, then switch to your *iMessages* app and do the same again. Then,
    build and run the project on your device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your app launches, hit ⌘ + *H* (if you are in a simulator) or the home
    button on your device. 3D Touch  the *Let''s Eat* app icon, and you should now
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93d893a3-784e-4b5a-97f2-27a55b383c81.png)'
  prefs: []
  type: TYPE_IMG
- en: If you select Los Angeles or Las Vegas, you will see that the location is now
    set for you at the top. If you select the Map shortcut, you will be taken to the
    Map tab. If you select the Locations shortcut, you will be taken to the Locations
    list. We have now added 3D Touch quick actions to our app. Let's add 3D Touch
    to one more place.
  prefs: []
  type: TYPE_NORMAL
- en: Adding favorites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A nice feature for our app would be to use 3D Touch to allow users to add favorites
    to our restaurant list view. We already have the heart  in our restaurant detail
    page. Therefore, let''s add 3D Touch to the heart  to add favorites. This is how
    we want it to look when we are finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1783136-e1e6-4b46-81db-61016027e18a.png)'
  prefs: []
  type: TYPE_IMG
- en: The first thing we need to do is add a new model object so that we can save
    our restaurant favorites to Core Data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new model object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to create a new model object:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Navigator panel, open the `LetsEatModel.xcdatamodel` file, which can
    be found in the Core Data folder in the `Common` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that you have the Graph Style selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40ffdddf-2c79-4a27-a430-431dcba585dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the + button for Add Entity and then double-click on Entity, and update
    it to Favorite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c6dca44a-1ac3-463d-94d9-7db7b6c75e05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, ensure that the Favorite entity is selected and click the + button for
    Add Attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/860d240b-e711-4681-b5d8-99795333476d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the box in the center of the screen, under Attributes, you should now see
    the word attribute. Double-click on Attributes and change it to `restaurantID`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f563382-8fa7-41a2-ae93-c8216f1cb426.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, select the favorite entity again and then the Data Model inspector in
    the Utilities panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under Class, update the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: `Favorite`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Codegen: `Class definition`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constraints: `restaurantID` (you add this constraint by hitting the + button
    in Constraints and then replacing the default constraint, which autopopulates,
    with this new constraint)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your entity settings should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08935e84-7685-4e92-9ba4-d68533ab91d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, select the `restaurantID` attribute, and under the Data Model inspector
    in the Utilities panel, select Integer 32 under Attribute Type. The error regarding
    this attribute should now disappear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/445c4f82-1fab-471f-819f-7cf4d9478998.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, build the project using ⌘ + *B*. This will create our `Favorite` class
    that we created in Core Data. You will not see the file anywhere, but it has been
    created.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our Core Data manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our favorite entity created, we need to update our Core Data
    manager to actually save restaurants as favorites. Inside of the `CoreData-Manager.swift`
    file, add the following before the last curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This method creates a `Favorite` object and then calls the `save()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add one more method to this file by adding the following before
    the last curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this method, we are going to fetch a favorite restaurant by passing a `restaurantID`.
    The method will check Core Data, and if we get data back, that restaurant will
    be set as a favorite. Otherwise, if we get back no data, we return `false`. We
    can now save favorite restaurants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the `RestaurantViewController.swift` file and define a new extension
    after the extension we created for our Collection View by adding the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4852306-ec18-48eb-bf34-737566845e1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s discuss what we just added:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part A**: First, we are getting an instance of our `RestaurantDetail.storyboard`.
    Then, we are obtaining a current index path. Once we have an index path, we are
    checking that we have a cell. Finally, we are creating an instance to our `RestaurantDetailViewController`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: Here, we are setting our `selectedRestaurant`, and then, we are
    passing the `selectedRestaurant` over to the detail view. We are then setting
    the height that we want and passing the cell frame to the previewing context:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Part C**: This method is called so that we can prepare the presentation of
    the view controller, which here is the commit view controller. In our case, we
    are preparing the `RestaurantDetailViewController` to be shown (or `popped`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Next, open the `RestaurantDetail.storyboard` and select the `RestaurantDetailViewController`.
    Open the Identity inspector in the Utilities panel and, in storyboard ID under
    Identity, add `RestaurantDetail`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59f150ed-34d7-4aeb-977f-a968185c1339.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, return to the `RestaurantViewController.swift` file and add the following
    code after the `showRestaurantDetail()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, we need to ensure that our `RestaurantViewController` can accept 3D Touch.
    We need to call this inside of the `initialize()` method after our `if` statement.
    We have finished our setup inside of the `RestaurantViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to update our `RestaurantDetailViewController.swift` file.
    Open this file and add the following variable above the `viewDidLoad()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This variable will allow us to have two actions, Favorite and Cancel, when we
    `peek` at a restaurant. If the user taps Favorite, we will get the `restaurantID`
    and save it to Core Data. If the user taps Cancel, we will dismiss the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following code above the `createRating()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This method will now be run whenever we go to a detail view. First, we check
    Core Data to see if the current restaurant is a favorite. If it is a favorite,
    we will show a filled-in heart, and if it is not, we will show a heart with just
    an outline. This method will be called after the `createRating()` method inside
    of the `initialize()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run the project by hitting the Play button (or use ⌘ + *R*). When
    you get to the restaurant list, touch  one of the restaurant items and you will
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5154fe8-5462-42e4-8655-a937625c6aca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you swipe up while touching, you will see that we now have two buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e491c900-fc78-4026-9ba5-7527ab77f0a1.png)'
  prefs: []
  type: TYPE_IMG
- en: If you tap Cancel, it will dismiss the view. If you tap Favorite and select
    the same restaurant, you will now see that the heart will change to a filled-in
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are officially done with the building of our app. In this chapter, we learned
    about the two different types of 3D Touch quick actions that we can add to our
    app. We also added 3D Touch support to our Collection View. Our restaurant list
    now has 3D Touch support so that we can add favorite restaurants from the restaurants
     list.
  prefs: []
  type: TYPE_NORMAL
- en: It is now time to move on to the most exciting part of this app, and that is
     getting our app into the App Store. In the next chapter, we will discuss everything
    you will need to know regarding  how to submit your app to the App Store.
  prefs: []
  type: TYPE_NORMAL
