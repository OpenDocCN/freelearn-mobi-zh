- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with MVC and Table Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you modified the Journal List screen, the Add New Journal
    Entry screen, and the Journal Entry Detail screen to match the app tour shown
    in *Chapter 10*, *Setting Up the User Interface*. You have completed the initial
    UI for the *JRNL* app, and that concluded *Part 2* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter begins *Part 3* of this book, where you will focus on the code
    that makes your app work. In this chapter, you will learn about the **Model-View-Controller**
    (**MVC**) design pattern and how the different parts of an app interact with one
    another. Then, you’ll implement a table view programmatically (which means implementing
    it using code instead of storyboards) using a playground, to understand how table
    views work. Finally, you’ll revisit the table view you implemented on the Journal
    List screen, so you can see the differences between implementing it in a storyboard
    and implementing it programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll understand the MVC design pattern, you’ll
    have learned how to create a table view controller programmatically, and you’ll
    know how to use table view delegate and data source protocols.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the MVC design pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding table views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revisiting the Journal List screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The completed Xcode playground and project for this chapter are in the `Chapter14`
    folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/tvnmgByShF4](https://youtu.be/tvnmgByShF4%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new playground and call it `TableViewBasics`. You can use this playground
    to type in and run all the code in this chapter as you go along. Before you do,
    let’s look at the MVC design pattern, an approach commonly used when writing iOS
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the MVC design pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Model-View-Controller** (**MVC**) design pattern is a common approach
    used when building iOS apps. MVC divides an app into three different parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This handles data storage and representation and data processing
    tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This includes all the things that are on the screen that the user
    can interact with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: This manages the flow of information between the model and
    view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One notable feature of MVC is that the view and model do not interact with one
    another; instead, all communication is managed by the controller.
  prefs: []
  type: TYPE_NORMAL
- en: For example, imagine you’re at a restaurant. You look at a menu and choose something
    you want. Then, a waiter comes, takes your order, and sends it to the cook. The
    cook prepares your order, and, when it is done, the waiter takes the order and
    brings it out to you. In this scenario, the menu is the view, the waiter is the
    controller, and the cook is the model. Also, note that all interactions between
    you and the kitchen are only through the waiter; there is no interaction between
    you and the cook.
  prefs: []
  type: TYPE_NORMAL
- en: To find out more about MVC, visit [https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html](https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html).
  prefs: []
  type: TYPE_NORMAL
- en: To see how MVC works in the context of an iOS app, let’s learn more about view
    controllers. You will see what it takes to implement a view controller that is
    required to manage a table view, which is used on the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring view controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, you have implemented `JournalListViewController`, a view controller
    that manages the table view on the Journal List screen. However, you still haven’t
    learned how the code you added to it works, so let’s look at that now.
  prefs: []
  type: TYPE_NORMAL
- en: You may wish to re-read *Chapter 11*, *Building Your User Interface*, where
    you implemented the `JournalListViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: When an iOS app is launched, the view controller for the first screen to be
    displayed is loaded. The view controller has a `view` property and automatically
    loads the view instance assigned to its `view` property. That view may have subviews,
    which are also loaded.
  prefs: []
  type: TYPE_NORMAL
- en: If one of the subviews is a table view, it will have `dataSource` and `delegate`
    properties. The `dataSource` property is assigned to an object that provides data
    to the table view. The `delegate` property is assigned to an object that handles
    user interaction with the table view. Typically, the view controller for the table
    view will be assigned to the table view’s `dataSource` and `delegate` properties.
  prefs: []
  type: TYPE_NORMAL
- en: The method calls that a table view will send to its view controller are declared
    in the `UITableViewDataSource` and `UITableViewDelegate` protocols. Remember that
    protocols only provide method declarations; the implementation of those method
    calls is in the view controller. The view controller will then get the data from
    the model objects and provide it for the table view. The view controller also
    handles user input and modifies the model objects as required.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at table views and table view protocols in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding table views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *JRNL* app uses a table view on the Journal List screen. A table view presents
    table view cells using rows arranged in a single column.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about table views, visit [https://developer.apple.com/documentation/uikit/uitableview](https://developer.apple.com/documentation/uikit/uitableview).
  prefs: []
  type: TYPE_NORMAL
- en: The data displayed by a table view is usually provided by a view controller.
    A view controller providing data for a table view must conform to the `UITableViewDataSource`
    protocol. This protocol declares a list of methods that tells the table view how
    many cells to display and what to display in each cell.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UITableViewDataSource` protocol, visit [https://developer.apple.com/documentation/uikit/uitableviewdatasource](https://developer.apple.com/documentation/uikit/uitableviewdatasource).
  prefs: []
  type: TYPE_NORMAL
- en: To enable user interaction, a view controller for a table view must also conform
    to the `UITableViewDelegate` protocol, which declares a list of methods that are
    triggered when a user interacts with the table view.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UITableViewDelegate` protocol, visit [https://developer.apple.com/documentation/uikit/uitableviewdelegate](https://developer.apple.com/documentation/uikit/uitableviewdelegate).
  prefs: []
  type: TYPE_NORMAL
- en: To learn how table views work, you’ll implement a view controller subclass that
    controls a table view in your `TableViewBasics` playground. Since there is no
    storyboard in the playground, you can’t add the UI elements using the library,
    as you did in the previous chapters. Instead, you will do everything programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll start by creating the `TableViewExampleController` class, an implementation
    of a view controller that manages a table view. After that, you’ll create an instance
    of `TableViewExampleController` and make it display a table view in the playground’s
    live view. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `TableViewBasics` playground that you have created, remove the `var`
    statement, and add an `import PlaygroundSupport` statement. Your playground should
    now contain the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first `import` statement imports the API for creating iOS apps. The second
    statement enables the playground to display a live view, which you will use to
    display the table view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code after the `import` statements to declare the `TableViewExampleController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This class is a subclass of `UIViewController`, a class that Apple provides
    to manage views on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code inside the curly braces to declare a table view property
    and an array property in the `TableViewExampleController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `tableView` property is an optional property that will be assigned a `UITableView`
    instance. The `journalEntries` array is the model object that will be used to
    provide data to the table view.
  prefs: []
  type: TYPE_NORMAL
- en: You have just declared and defined the initial implementation of the `TableViewExampleController`
    class. Cool! In the next section, you’ll learn how to set the number of cells
    for a table view to display, how to set the contents of each cell, and how to
    remove a row from a table view.
  prefs: []
  type: TYPE_NORMAL
- en: Conforming to the UITableViewDataSource protocol
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A table view presents table view cells using rows arranged in a single column.
    However, before it can do this, it needs to know how many cells to display and
    what to put in each cell. To provide this information to the table view, you will
    make the `TableViewExampleController` class conform to the `UITableViewDataSource`
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'This protocol has two required methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tableview(_:numberOfRowsInSection:)` is called by the table view to determine
    how many table view cells to display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tableView(_:cellForRowAt:)` is called by the table view to determine what
    to display in each table view cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `UITableViewDataSource` protocol also has an optional method, `tableView(_:commit:forRowAt:)`,
    which is called by the table view when the user swipes left on a row. You’ll use
    this method to handle what happens when a user wants to delete a row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add some code to make the `TableViewExampleController` class conform
    to the `UITableViewDataSource` protocol. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the `TableViewExampleController` class adopt the `UITableViewDataSource`
    protocol, type a comma after the superclass name and then type `UITableViewDataSource`.
    Your code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An error will appear because you haven’t implemented the two required methods.
    Click the error icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_14_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: Editor area showing error icon'
  prefs: []
  type: TYPE_NORMAL
- en: The error message states that the `TableViewExampleController` class does not
    conform to the `UITableViewDataSource` protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Fix** button to add the stubs needed for conformance to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_14_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.2: Error explanation and Fix button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that your code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a class definition, convention dictates that properties are declared at
    the top before any method declarations. Rearrange the code so that the property
    declarations are at the top, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make the table view display a row for each element inside the `journalEntries`
    array, click the **code** placeholder inside the `tableView(_:numberOfRowsInSection:)`
    method definition and type in `journalEntries.count`. The completed method should
    look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`journalEntries.count` returns the number of elements inside the `journalEntries`
    array. Since there are three elements in it, this will make the table view display
    three rows.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the table view display journal entry details in each cell, click the
    **code** placeholder inside the `tableView(_:cellForRowAt:)` method definition
    and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This statement creates a new table view cell or reuses an existing table view
    cell and assigns it to `cell`. Imagine you have 1,000 items to display in a table
    view. You don’t need 1,000 rows containing 1,000 table view cells—you only need
    just enough to fill the screen. Table view cells that scroll off the top of the
    screen can be reused to display items that appear at the bottom of the screen,
    and vice versa. As table views can display more than one type of cell, you set
    the cell reuse identifier to `"cell"` to identify this particular table view cell
    type. This identifier will be registered with the table view later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `indexPath` value locates the row in the table view. The first row has an
    `indexPath` containing section `0` and row `0`. `indexPath.row` returns `0` for
    the first row, so this statement assigns the first element in the `journalEntries`
    array to `journalEntry`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: By default, a `UITableViewCell` instance can store an image, a text string,
    and a secondary text string. You set these by using the table view cell’s content
    configuration property. This statement retrieves the default content configuration
    for the table view cell’s style and assigns it to a variable, `content`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These statements update `content` with details from `journalEntry`, which is
    an array that has three elements. The first element is used to specify an image
    that is assigned to the `image` property. The second element is assigned to the
    `text` property. The third element is assigned to the `secondaryText` property.
    The last line assigns `content` to the table view cell’s `contentConfiguration`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This statement returns the table view cell, which is then displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The `tableView(_:cellForRowAt:)` method is executed for each row in the table
    view.
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle table view cell deletion, type the following code after the implementation
    of `tableView(_:cellForRowAt:)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This removes the `journalEntries` element corresponding to the table view cell
    that the user swiped left on and reloads the table view.
  prefs: []
  type: TYPE_NORMAL
- en: The `TableViewExampleController` class now conforms to the `UITableViewDataSource`
    protocol. In the next section, you will make it conform to the `UITableViewDelegate`
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Conforming to the UITableViewDelegate protocol
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A user can tap on a table view cell to select it. To handle user interaction,
    you will make the `TableViewExampleController` class conform to the `UITableViewDelegate`
    protocol. You will implement one optional method from this protocol, `tableView(_:didSelectRowAt:)`,
    which is called by the table view when the user taps a row. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the `TableViewExampleController` class adopt the `UITableViewDelegate`
    protocol, type a comma after `UITableViewDataSource` in the class declaration
    and then type `UITableViewDelegate`. Your code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type the following after the implementation of `tableView(_:commit:forRowAt:)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method will get the `journalEntries` array element corresponding to the
    tapped row and print it to the Debug area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that your `TableViewExampleController` class looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `TableViewExampleController` class now conforms to the `UITableViewDelegate`
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: You have completed the implementation of the `TableViewExampleController` class.
    In the next section, you’ll learn how to create an instance of this class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a TableViewExampleController instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have declared and defined the `TableViewExampleController` class,
    you will write a method to create an instance of it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type in the following code after the `journalEntries` variable declaration
    to declare a new method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This declares a new method, `createTableView()`, which you’ll use to create
    an instance of a table view and assign it to the `tableView` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type in the following code after the opening curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a new table view instance and assigns it to `tableView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next line, type in the following code to set the table view’s `dataSource`
    and `delegate` properties to an instance of `TableViewExampleController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `dataSource` and `delegate` properties of a table view specify the object
    that contains the implementation of the `UITableViewDataSource` and `UITableViewDelegate`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next line, type in the following code to set the table view’s background
    color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the next line, type in the following code to set the identifier for the
    table view cells to `"cell"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This identifier will be used in the `tableView(_:cellForRowAt:)` method to identify
    the type of table view cells to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next line, type in the following code to add the table view as a subview
    of the view of the `TableViewExampleController` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the completed method looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you must determine when to call this method. View controllers have a `view`
    property. The view assigned to the `view` property will be automatically loaded
    when the view controller is loaded. After a view has been loaded successfully,
    the view controller’s `viewDidLoad()` method will be called. You will override
    the `viewDidLoad()` method in your `TableViewControllerExample` class to call
    `createTableView()`. Type in the following code just before the `createTableView()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This sets the size of the live view, creates a table view instance, assigns
    it to `tableView`, and adds it as a subview to the view of the `TableViewExampleController`
    instance. The table view then calls the data source methods to determine how many
    table view cells to display and what to display in each cell. `tableView(_:numberOfRowsInSection:)`
    returns the number of elements in `journalEntries`, so three table view cells
    will be displayed. `tableView(_:cellForRowAt:)` creates the cell, creates a new
    cell configuration, sets the properties of the cell configuration, and assigns
    the updated configuration to the cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that your completed playground looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it’s time to see it in action. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following after all the other code in the playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command creates the instance of `TableViewExampleController` and displays
    its view in the playground’s live view. The `createTableView()` method will create
    a table view and add it as a subview to the `TableViewExampleController` instance’s
    view, and it will appear on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see a representation of the table view on your screen, the playground’s
    live view must be enabled. Click the Adjust Editor Options button and verify that
    **Live View** is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_14_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.3: Adjust Editor Options menu with Live View selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your code and verify that the table view is displaying three table view
    cells in the live view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_14_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.4: Playground live view showing table view with three table view
    cells'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap a row. The journal entry details for that row will be printed in the Debug
    area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_14_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.5: Debug area showing journal entry details'
  prefs: []
  type: TYPE_NORMAL
- en: 'Swipe left on a row. A **Delete** button will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_14_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.6: Table view row showing a Delete button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap the **Delete** button to remove the row from the table view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_14_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.7: Table view with one row removed'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just created a view controller for a table view, created an instance
    of it, and displayed a table view in the playground’s live view. Good job!
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll revisit how view controllers are used on the Journal
    List screen that you implemented in *Chapter 11*, *Building Your User Interface*.
    Using what you have learned in this section as a reference, you should have a
    better understanding of how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting the Journal List screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember the `JournalListViewController` class in *Chapter 11*, *Building Your
    User Interface*? This is an example of a view controller that manages a table
    view. Note that the code for this class is very similar to that in your playground.
    The differences are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You created and assigned the table view to the `tableView` in `TableViewExampleController`
    programmatically, instead of using the assistant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You set the dimensions of the table view programmatically in `UITableView(frame:)`,
    instead of using the Size inspector and constraints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You connected the data source and delegate outlets to the view controller programmatically,
    instead of using the Connections inspector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You set the reuse identifier and UI element color programmatically, instead
    of using the Attributes inspector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You added the table view as a subview of the view for `TableViewExampleController`
    programmatically, instead of dragging in a **Table View** object from the library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may wish to open the *JRNL* project and review *Chapter 11*, *Building Your
    User Interface*, once more, to compare the table view implementation using the
    storyboard and the table view implementation done programmatically as you have
    done in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the MVC design pattern and table view controllers
    in detail. You then revisited the table view used on the Journal List screen and
    learned how table view controllers work.
  prefs: []
  type: TYPE_NORMAL
- en: You should now understand the MVC design pattern, how to create a table view
    controller, and how to use the table view data source and delegate protocols.
    This will enable you to implement table view controllers for your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: Up to this point, you have set up the views and view controllers for the Journal
    List screen, but it just displays a column of cells. In the next chapter, you’re
    going to implement the model objects for the Journal List screen so it can display
    a list of journal entries. To do this, you will create structures to store data
    and provide it to the `JournalListViewController` instance so that it may be displayed
    by the table view on the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
