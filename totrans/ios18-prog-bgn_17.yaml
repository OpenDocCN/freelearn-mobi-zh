- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Getting Started with MVC and Table Views
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用MVC和表格视图
- en: In the previous chapter, you modified the Journal List screen, the Add New Journal
    Entry screen, and the Journal Entry Detail screen to match the app tour shown
    in *Chapter 10*, *Setting Up the User Interface*. You have completed the initial
    UI for the *JRNL* app, and that concluded *Part 2* of this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你修改了“期刊列表”屏幕、“添加新期刊条目”屏幕和“期刊条目详情”屏幕，以匹配第10章中显示的应用程序导游，“设置用户界面”。你已经完成了*JRNL*应用的初始UI，这标志着本书**第二部分**的结束。
- en: This chapter begins *Part 3* of this book, where you will focus on the code
    that makes your app work. In this chapter, you will learn about the **Model-View-Controller**
    (**MVC**) design pattern and how the different parts of an app interact with one
    another. Then, you’ll implement a table view programmatically (which means implementing
    it using code instead of storyboards) using a playground, to understand how table
    views work. Finally, you’ll revisit the table view you implemented on the Journal
    List screen, so you can see the differences between implementing it in a storyboard
    and implementing it programmatically.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始本书的**第三部分**，在这一部分中，你将专注于使你的应用工作的代码。在本章中，你将学习**模型-视图-控制器**（**MVC**）设计模式以及应用的不同部分如何相互交互。然后，你将使用沙盒程序以编程方式实现一个表格视图（这意味着使用代码而不是故事板来实现），以了解表格视图是如何工作的。最后，你将回顾在“期刊列表”屏幕上实现的表格视图，以便你可以看到在故事板中实现它和在编程中实现它的区别。
- en: By the end of this chapter, you’ll understand the MVC design pattern, you’ll
    have learned how to create a table view controller programmatically, and you’ll
    know how to use table view delegate and data source protocols.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将理解**模型-视图-控制器**（**MVC**）设计模式，你将学会如何以编程方式创建表格视图控制器，并且将知道如何使用表格视图代理和数据源协议。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding the MVC design pattern
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解**模型-视图-控制器**（**MVC**）设计模式
- en: Understanding table views
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解表格视图
- en: Revisiting the Journal List screen
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾“期刊列表”屏幕
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The completed Xcode playground and project for this chapter are in the `Chapter14`
    folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完成版Xcode沙盒程序和项目位于本书代码包的“Chapter14”文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际效果：
- en: '[https://youtu.be/tvnmgByShF4](https://youtu.be/tvnmgByShF4%0D)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/tvnmgByShF4](https://youtu.be/tvnmgByShF4%0D)'
- en: Create a new playground and call it `TableViewBasics`. You can use this playground
    to type in and run all the code in this chapter as you go along. Before you do,
    let’s look at the MVC design pattern, an approach commonly used when writing iOS
    apps.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的沙盒程序，并将其命名为“TableViewBasics”。你可以使用这个沙盒程序在阅读本章时输入和运行所有代码。在你这样做之前，让我们看看**模型-视图-控制器**（**MVC**）设计模式，这是一种在编写iOS应用时常用的方法。
- en: Understanding the MVC design pattern
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解**模型-视图-控制器**（**MVC**）设计模式
- en: 'The **Model-View-Controller** (**MVC**) design pattern is a common approach
    used when building iOS apps. MVC divides an app into three different parts:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器**（**MVC**）设计模式是构建iOS应用时常用的一个常见方法。MVC将应用分为三个不同的部分：'
- en: '**Model**: This handles data storage and representation and data processing
    tasks.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这处理数据存储和表示以及数据处理任务。'
- en: '**View**: This includes all the things that are on the screen that the user
    can interact with.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这包括屏幕上用户可以与之交互的所有内容。'
- en: '**Controller**: This manages the flow of information between the model and
    view.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这管理模型和视图之间信息流的流程。'
- en: One notable feature of MVC is that the view and model do not interact with one
    another; instead, all communication is managed by the controller.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: MVC的一个显著特点是视图和模型不会相互交互；相反，所有通信都由控制器管理。
- en: For example, imagine you’re at a restaurant. You look at a menu and choose something
    you want. Then, a waiter comes, takes your order, and sends it to the cook. The
    cook prepares your order, and, when it is done, the waiter takes the order and
    brings it out to you. In this scenario, the menu is the view, the waiter is the
    controller, and the cook is the model. Also, note that all interactions between
    you and the kitchen are only through the waiter; there is no interaction between
    you and the cook.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象您在一家餐厅。您查看菜单并选择您想要的东西。然后，服务员过来，接收您的订单，并将其发送给厨师。厨师准备您的订单，当它完成时，服务员取走订单并将其带给您。在这个场景中，菜单是视图，服务员是控制器，厨师是模型。此外，请注意，您与厨房之间的所有交互都只通过服务员进行；您与厨师之间没有交互。
- en: To find out more about MVC, visit [https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html](https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 MVC 的信息，请访问 [https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html](https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html)。
- en: To see how MVC works in the context of an iOS app, let’s learn more about view
    controllers. You will see what it takes to implement a view controller that is
    required to manage a table view, which is used on the Journal List screen.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 MVC 在 iOS 应用程序中的工作原理，让我们先更多了解一下视图控制器。您将看到实现一个视图控制器所需的内容，这个控制器需要管理用于 Journal
    List 屏幕的表格视图。
- en: Exploring view controllers
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索视图控制器
- en: So far, you have implemented `JournalListViewController`, a view controller
    that manages the table view on the Journal List screen. However, you still haven’t
    learned how the code you added to it works, so let’s look at that now.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经实现了 `JournalListViewController`，这是一个管理 Journal List 屏幕上表格视图的视图控制器。然而，您还没有学习到您添加到其中的代码是如何工作的，所以现在让我们来看看。
- en: You may wish to re-read *Chapter 11*, *Building Your User Interface*, where
    you implemented the `JournalListViewController` class.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望重新阅读 *第 11 章*，*构建您的用户界面*，其中您实现了 `JournalListViewController` 类。
- en: When an iOS app is launched, the view controller for the first screen to be
    displayed is loaded. The view controller has a `view` property and automatically
    loads the view instance assigned to its `view` property. That view may have subviews,
    which are also loaded.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当 iOS 应用程序启动时，将加载要显示的第一个屏幕的视图控制器。视图控制器有一个 `view` 属性，并自动加载分配给其 `view` 属性的视图实例。该视图可能有子视图，这些子视图也会被加载。
- en: If one of the subviews is a table view, it will have `dataSource` and `delegate`
    properties. The `dataSource` property is assigned to an object that provides data
    to the table view. The `delegate` property is assigned to an object that handles
    user interaction with the table view. Typically, the view controller for the table
    view will be assigned to the table view’s `dataSource` and `delegate` properties.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个子视图是表格视图，它将具有 `dataSource` 和 `delegate` 属性。`dataSource` 属性被分配给一个为表格视图提供数据的对象。`delegate`
    属性被分配给一个处理与表格视图用户交互的对象。通常，表格视图的视图控制器将被分配给表格视图的 `dataSource` 和 `delegate` 属性。
- en: The method calls that a table view will send to its view controller are declared
    in the `UITableViewDataSource` and `UITableViewDelegate` protocols. Remember that
    protocols only provide method declarations; the implementation of those method
    calls is in the view controller. The view controller will then get the data from
    the model objects and provide it for the table view. The view controller also
    handles user input and modifies the model objects as required.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表格视图将向其视图控制器发送的方法调用在 `UITableViewDataSource` 和 `UITableViewDelegate` 协议中声明。请记住，协议只提供方法声明；这些方法调用的实现是在视图控制器中。然后，视图控制器将从模型对象中获取数据，并将其提供给表格视图。视图控制器还处理用户输入，并根据需要修改模型对象。
- en: Let’s take a closer look at table views and table view protocols in the next
    section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将更详细地了解表格视图和表格视图协议。
- en: Understanding table views
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解表格视图
- en: The *JRNL* app uses a table view on the Journal List screen. A table view presents
    table view cells using rows arranged in a single column.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*JRNL* 应用在 Journal List 屏幕上使用表格视图。表格视图通过单列排列的行来展示表格视图单元格。'
- en: To learn more about table views, visit [https://developer.apple.com/documentation/uikit/uitableview](https://developer.apple.com/documentation/uikit/uitableview).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于表格视图的信息，请访问 [https://developer.apple.com/documentation/uikit/uitableview](https://developer.apple.com/documentation/uikit/uitableview)。
- en: The data displayed by a table view is usually provided by a view controller.
    A view controller providing data for a table view must conform to the `UITableViewDataSource`
    protocol. This protocol declares a list of methods that tells the table view how
    many cells to display and what to display in each cell.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 表视图显示的数据通常由视图控制器提供。为表视图提供数据的视图控制器必须遵守`UITableViewDataSource`协议。该协议声明了一系列方法，告诉表视图显示多少个单元格以及每个单元格中显示什么内容。
- en: To learn more about the `UITableViewDataSource` protocol, visit [https://developer.apple.com/documentation/uikit/uitableviewdatasource](https://developer.apple.com/documentation/uikit/uitableviewdatasource).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`UITableViewDataSource`协议的信息，请访问[https://developer.apple.com/documentation/uikit/uitableviewdatasource](https://developer.apple.com/documentation/uikit/uitableviewdatasource)。
- en: To enable user interaction, a view controller for a table view must also conform
    to the `UITableViewDelegate` protocol, which declares a list of methods that are
    triggered when a user interacts with the table view.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用用户交互，表视图的视图控制器还必须遵守`UITableViewDelegate`协议，该协议声明了一系列在用户与表视图交互时触发的方法。
- en: To learn more about the `UITableViewDelegate` protocol, visit [https://developer.apple.com/documentation/uikit/uitableviewdelegate](https://developer.apple.com/documentation/uikit/uitableviewdelegate).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`UITableViewDelegate`协议的信息，请访问[https://developer.apple.com/documentation/uikit/uitableviewdelegate](https://developer.apple.com/documentation/uikit/uitableviewdelegate)。
- en: To learn how table views work, you’ll implement a view controller subclass that
    controls a table view in your `TableViewBasics` playground. Since there is no
    storyboard in the playground, you can’t add the UI elements using the library,
    as you did in the previous chapters. Instead, you will do everything programmatically.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解表视图是如何工作的，你将在`TableViewBasics`游乐场中实现一个控制表视图的视图控制器子类。由于游乐场中没有故事板，你不能像前几章那样使用库添加UI元素。相反，你将一切通过编程实现。
- en: 'You’ll start by creating the `TableViewExampleController` class, an implementation
    of a view controller that manages a table view. After that, you’ll create an instance
    of `TableViewExampleController` and make it display a table view in the playground’s
    live view. Follow these steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先创建`TableViewExampleController`类，这是一个管理表视图的视图控制器的实现。之后，你将创建一个`TableViewExampleController`实例，并在游乐场的实时视图中显示一个表视图。按照以下步骤操作：
- en: 'Open the `TableViewBasics` playground that you have created, remove the `var`
    statement, and add an `import PlaygroundSupport` statement. Your playground should
    now contain the following:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你创建的`TableViewBasics`游乐场，删除`var`语句，并添加`import PlaygroundSupport`语句。现在你的游乐场应该包含以下内容：
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first `import` statement imports the API for creating iOS apps. The second
    statement enables the playground to display a live view, which you will use to
    display the table view.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`import`语句导入了创建iOS应用的API。第二个语句使游乐场能够显示实时视图，你将使用它来显示表视图。
- en: 'Add the following code after the `import` statements to declare the `TableViewExampleController`
    class:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`import`语句之后添加以下代码以声明`TableViewExampleController`类：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This class is a subclass of `UIViewController`, a class that Apple provides
    to manage views on the screen.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类是`UIViewController`的子类，`UIViewController`是苹果提供的一个用于管理屏幕上视图的类。
- en: 'Add the following code inside the curly braces to declare a table view property
    and an array property in the `TableViewExampleController` class:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TableViewExampleController`类中，在大括号内添加以下代码以声明一个表视图属性和一个数组属性：
- en: '[PRE2]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `tableView` property is an optional property that will be assigned a `UITableView`
    instance. The `journalEntries` array is the model object that will be used to
    provide data to the table view.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`tableView`属性是一个可选属性，它将被分配一个`UITableView`实例。`journalEntries`数组是用于向表视图提供数据的模型对象。'
- en: You have just declared and defined the initial implementation of the `TableViewExampleController`
    class. Cool! In the next section, you’ll learn how to set the number of cells
    for a table view to display, how to set the contents of each cell, and how to
    remove a row from a table view.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚声明并定义了`TableViewExampleController`类的初始实现。太棒了！在下一节中，你将学习如何设置表视图显示的单元格数量，如何设置每个单元格的内容，以及如何从表视图中删除一行。
- en: Conforming to the UITableViewDataSource protocol
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遵守`UITableViewDataSource`协议
- en: A table view presents table view cells using rows arranged in a single column.
    However, before it can do this, it needs to know how many cells to display and
    what to put in each cell. To provide this information to the table view, you will
    make the `TableViewExampleController` class conform to the `UITableViewDataSource`
    protocol.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 表视图使用单列排列的行来呈现表视图单元格。然而，在它能够这样做之前，它需要知道要显示多少个单元格以及每个单元格中要放置什么内容。为了向表视图提供这些信息，你将使`TableViewExampleController`类遵守`UITableViewDataSource`协议。
- en: 'This protocol has two required methods:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此协议有两个必需的方法：
- en: '`tableview(_:numberOfRowsInSection:)` is called by the table view to determine
    how many table view cells to display.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tableview(_:numberOfRowsInSection:)`由表视图调用，以确定要显示多少个表视图单元格。'
- en: '`tableView(_:cellForRowAt:)` is called by the table view to determine what
    to display in each table view cell.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tableView(_:cellForRowAt:)`由表视图调用，以确定在每个表视图单元格中显示什么。'
- en: The `UITableViewDataSource` protocol also has an optional method, `tableView(_:commit:forRowAt:)`,
    which is called by the table view when the user swipes left on a row. You’ll use
    this method to handle what happens when a user wants to delete a row.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITableViewDataSource`协议还有一个可选方法，`tableView(_:commit:forRowAt:)`，当用户在行上向左滑动时，表视图会调用此方法。你将使用此方法来处理用户想要删除行时发生的情况。'
- en: 'Let’s add some code to make the `TableViewExampleController` class conform
    to the `UITableViewDataSource` protocol. Follow these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些代码来使`TableViewExampleController`类遵守`UITableViewDataSource`协议。按照以下步骤操作：
- en: 'To make the `TableViewExampleController` class adopt the `UITableViewDataSource`
    protocol, type a comma after the superclass name and then type `UITableViewDataSource`.
    Your code should look like this:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使`TableViewExampleController`类采用`UITableViewDataSource`协议，在超类名称后输入一个逗号，然后输入`UITableViewDataSource`。你的代码应该看起来像这样：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An error will appear because you haven’t implemented the two required methods.
    Click the error icon:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于你没有实现两个必需的方法，将出现错误。点击错误图标：
- en: '![](img/B31371_14_01.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_14_01.png)'
- en: 'Figure 14.1: Editor area showing error icon'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1：显示错误图标的编辑区域
- en: The error message states that the `TableViewExampleController` class does not
    conform to the `UITableViewDataSource` protocol.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 错误信息表明`TableViewExampleController`类没有遵守`UITableViewDataSource`协议。
- en: 'Click the **Fix** button to add the stubs needed for conformance to the class:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**修复**按钮以添加使类遵守协议所需的存根：
- en: '![](img/B31371_14_02.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_14_02.png)'
- en: 'Figure 14.2: Error explanation and Fix button'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2：错误解释和修复按钮
- en: 'Verify that your code looks like this:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的代码看起来像这样：
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In a class definition, convention dictates that properties are declared at
    the top before any method declarations. Rearrange the code so that the property
    declarations are at the top, as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类定义中，惯例规定属性应在任何方法声明之前在顶部声明。重新排列代码，使属性声明在顶部，如下所示：
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To make the table view display a row for each element inside the `journalEntries`
    array, click the **code** placeholder inside the `tableView(_:numberOfRowsInSection:)`
    method definition and type in `journalEntries.count`. The completed method should
    look like this:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使表视图为`journalEntries`数组中的每个元素显示一行，请在`tableView(_:numberOfRowsInSection:)`方法定义内的**代码**占位符中单击，并输入`journalEntries.count`。完成的方法应如下所示：
- en: '[PRE6]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`journalEntries.count` returns the number of elements inside the `journalEntries`
    array. Since there are three elements in it, this will make the table view display
    three rows.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`journalEntries.count`返回`journalEntries`数组中的元素数量。由于其中有三个元素，这将使表视图显示三行。'
- en: 'To make the table view display journal entry details in each cell, click the
    **code** placeholder inside the `tableView(_:cellForRowAt:)` method definition
    and type the following:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使表视图在每个单元格中显示日记条目详情，请在`tableView(_:cellForRowAt:)`方法定义内的**代码**占位符中单击，并输入以下内容：
- en: '[PRE7]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s break this down:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This statement creates a new table view cell or reuses an existing table view
    cell and assigns it to `cell`. Imagine you have 1,000 items to display in a table
    view. You don’t need 1,000 rows containing 1,000 table view cells—you only need
    just enough to fill the screen. Table view cells that scroll off the top of the
    screen can be reused to display items that appear at the bottom of the screen,
    and vice versa. As table views can display more than one type of cell, you set
    the cell reuse identifier to `"cell"` to identify this particular table view cell
    type. This identifier will be registered with the table view later.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句创建一个新的表格视图单元格或重用现有的表格视图单元格，并将其分配给`cell`。想象一下，你需要在表格视图中显示1,000个项目。你不需要包含1,000个表格视图单元格的1,000行——你只需要足够多的来填满屏幕。滚动出屏幕顶部的表格视图单元格可以重用来显示屏幕底部的项目，反之亦然。由于表格视图可以显示多种类型的单元格，你将单元格重用标识符设置为`"cell"`以识别这种特定的表格视图单元格类型。此标识符稍后将注册到表格视图中。
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `indexPath` value locates the row in the table view. The first row has an
    `indexPath` containing section `0` and row `0`. `indexPath.row` returns `0` for
    the first row, so this statement assigns the first element in the `journalEntries`
    array to `journalEntry`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`indexPath`值用于定位表格视图中的行。第一行有一个包含分区`0`和行`0`的`indexPath`。`indexPath.row`对第一行返回`0`，因此此语句将`journalEntries`数组中的第一个元素分配给`journalEntry`。'
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By default, a `UITableViewCell` instance can store an image, a text string,
    and a secondary text string. You set these by using the table view cell’s content
    configuration property. This statement retrieves the default content configuration
    for the table view cell’s style and assigns it to a variable, `content`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`UITableViewCell`实例可以存储一个图像、一个文本字符串和一个次要文本字符串。你通过使用表格视图单元格的内容配置属性来设置这些属性。此语句检索表格视图单元格样式的默认内容配置并将其分配给一个变量`content`。
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These statements update `content` with details from `journalEntry`, which is
    an array that has three elements. The first element is used to specify an image
    that is assigned to the `image` property. The second element is assigned to the
    `text` property. The third element is assigned to the `secondaryText` property.
    The last line assigns `content` to the table view cell’s `contentConfiguration`
    property.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句使用`journalEntry`的详细信息更新`content`，`journalEntry`是一个包含三个元素的数组。第一个元素用于指定分配给`image`属性的图像。第二个元素分配给`text`属性。第三个元素分配给`secondaryText`属性。最后一行将`content`分配给表格视图单元格的`contentConfiguration`属性。
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This statement returns the table view cell, which is then displayed on the screen.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句返回表格视图单元格，然后将其显示在屏幕上。
- en: The `tableView(_:cellForRowAt:)` method is executed for each row in the table
    view.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`tableView(_:cellForRowAt:)`方法为表格视图中的每一行执行。'
- en: 'To handle table view cell deletion, type the following code after the implementation
    of `tableView(_:cellForRowAt:)`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要处理表格视图单元格删除，在`tableView(_:cellForRowAt:)`的实现之后输入以下代码：
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This removes the `journalEntries` element corresponding to the table view cell
    that the user swiped left on and reloads the table view.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将移除与用户左滑的表格视图单元格对应的`journalEntries`元素，并重新加载表格视图。
- en: The `TableViewExampleController` class now conforms to the `UITableViewDataSource`
    protocol. In the next section, you will make it conform to the `UITableViewDelegate`
    protocol.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableViewExampleController`类现在遵循`UITableViewDataSource`协议。在下一节中，你将使其遵循`UITableViewDelegate`协议。'
- en: Conforming to the UITableViewDelegate protocol
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遵循`UITableViewDelegate`协议
- en: 'A user can tap on a table view cell to select it. To handle user interaction,
    you will make the `TableViewExampleController` class conform to the `UITableViewDelegate`
    protocol. You will implement one optional method from this protocol, `tableView(_:didSelectRowAt:)`,
    which is called by the table view when the user taps a row. Follow these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以点击表格视图单元格来选择它。为了处理用户交互，你将使`TableViewExampleController`类遵循`UITableViewDelegate`协议。你将实现此协议的一个可选方法，即`tableView(_:didSelectRowAt:)`，当用户点击行时，表格视图会调用此方法。按照以下步骤操作：
- en: 'To make the `TableViewExampleController` class adopt the `UITableViewDelegate`
    protocol, type a comma after `UITableViewDataSource` in the class declaration
    and then type `UITableViewDelegate`. Your code should look like this:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使`TableViewExampleController`类采用`UITableViewDelegate`协议，在类声明中`UITableViewDataSource`之后输入一个逗号，然后输入`UITableViewDelegate`。你的代码应该看起来像这样：
- en: '[PRE14]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Type the following after the implementation of `tableView(_:commit:forRowAt:)`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tableView(_:commit:forRowAt:)`的实现之后输入以下代码：
- en: '[PRE15]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This method will get the `journalEntries` array element corresponding to the
    tapped row and print it to the Debug area.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将获取被点击行的`journalEntries`数组元素并将其打印到调试区域。
- en: 'Verify that your `TableViewExampleController` class looks like this:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的`TableViewExampleController`类看起来如下：
- en: '[PRE16]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `TableViewExampleController` class now conforms to the `UITableViewDelegate`
    protocol.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableViewExampleController`类现在符合`UITableViewDelegate`协议。'
- en: You have completed the implementation of the `TableViewExampleController` class.
    In the next section, you’ll learn how to create an instance of this class.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您已完成了`TableViewExampleController`类的实现。在下一节中，您将学习如何创建此类的实例。
- en: Creating a TableViewExampleController instance
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建`TableViewExampleController`实例
- en: 'Now that you have declared and defined the `TableViewExampleController` class,
    you will write a method to create an instance of it. Follow these steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经声明并定义了`TableViewExampleController`类，您将编写一个方法来创建其实例。按照以下步骤操作：
- en: 'Type in the following code after the `journalEntries` variable declaration
    to declare a new method:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`journalEntries`变量声明之后输入以下代码以声明一个新的方法：
- en: '[PRE17]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This declares a new method, `createTableView()`, which you’ll use to create
    an instance of a table view and assign it to the `tableView` property.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这声明了一个新的方法`createTableView()`，您将使用它来创建表格视图的实例并将其分配给`tableView`属性。
- en: 'Type in the following code after the opening curly brace:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号开头之后输入以下代码：
- en: '[PRE18]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This creates a new table view instance and assigns it to `tableView`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的表格视图实例并将其分配给`tableView`。
- en: 'On the next line, type in the following code to set the table view’s `dataSource`
    and `delegate` properties to an instance of `TableViewExampleController`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行，输入以下代码以将表格视图的`dataSource`和`delegate`属性设置为`TableViewExampleController`实例：
- en: '[PRE19]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `dataSource` and `delegate` properties of a table view specify the object
    that contains the implementation of the `UITableViewDataSource` and `UITableViewDelegate`
    methods.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 表格视图的`dataSource`和`delegate`属性指定包含`UITableViewDataSource`和`UITableViewDelegate`方法实现的对象。
- en: 'On the next line, type in the following code to set the table view’s background
    color:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行，输入以下代码以设置表格视图的背景颜色：
- en: '[PRE20]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'On the next line, type in the following code to set the identifier for the
    table view cells to `"cell"`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行，输入以下代码以设置表格视图单元格的标识符为`"cell"`：
- en: '[PRE21]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This identifier will be used in the `tableView(_:cellForRowAt:)` method to identify
    the type of table view cells to be used.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此标识符将在`tableView(_:cellForRowAt:)`方法中使用，以识别要使用的表格视图单元格的类型。
- en: 'On the next line, type in the following code to add the table view as a subview
    of the view of the `TableViewExampleController` instance:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行，输入以下代码以将表格视图添加为`TableViewExampleController`实例视图的子视图：
- en: '[PRE22]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Verify that the completed method looks like the following:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认完成的方法如下：
- en: '[PRE23]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now you must determine when to call this method. View controllers have a `view`
    property. The view assigned to the `view` property will be automatically loaded
    when the view controller is loaded. After a view has been loaded successfully,
    the view controller’s `viewDidLoad()` method will be called. You will override
    the `viewDidLoad()` method in your `TableViewControllerExample` class to call
    `createTableView()`. Type in the following code just before the `createTableView()`
    method:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您必须确定何时调用此方法。视图控制器有一个`view`属性。分配给`view`属性的视图将在视图控制器加载时自动加载。在视图成功加载后，视图控制器的`viewDidLoad()`方法将被调用。您将在`TableViewControllerExample`类中重写`viewDidLoad()`方法以调用`createTableView()`。在`createTableView()`方法之前输入以下代码：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This sets the size of the live view, creates a table view instance, assigns
    it to `tableView`, and adds it as a subview to the view of the `TableViewExampleController`
    instance. The table view then calls the data source methods to determine how many
    table view cells to display and what to display in each cell. `tableView(_:numberOfRowsInSection:)`
    returns the number of elements in `journalEntries`, so three table view cells
    will be displayed. `tableView(_:cellForRowAt:)` creates the cell, creates a new
    cell configuration, sets the properties of the cell configuration, and assigns
    the updated configuration to the cell.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了实时视图的大小，创建了一个表格视图实例，将其分配给`tableView`，并将其添加为`TableViewExampleController`实例视图的子视图。然后表格视图调用数据源方法以确定要显示多少表格视图单元格以及每个单元格中显示的内容。`tableView(_:numberOfRowsInSection:)`返回`journalEntries`中的元素数量，因此将显示三个表格视图单元格。`tableView(_:cellForRowAt:)`创建单元格，创建一个新的单元格配置，设置单元格配置的属性，并将更新的配置分配给单元格。
- en: 'Verify that your completed playground looks like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 确认你的完成后的游乐场看起来像这样：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now it’s time to see it in action. Follow these steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看到它的实际效果了。按照以下步骤操作：
- en: 'Type the following after all the other code in the playground:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游乐场中所有其他代码之后输入以下内容：
- en: '[PRE26]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This command creates the instance of `TableViewExampleController` and displays
    its view in the playground’s live view. The `createTableView()` method will create
    a table view and add it as a subview to the `TableViewExampleController` instance’s
    view, and it will appear on the screen.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建`TableViewExampleController`的实例并在游乐场的实时视图中显示其视图。`createTableView()`方法将创建一个表格视图并将其添加为`TableViewExampleController`实例视图的子视图，它将显示在屏幕上。
- en: 'To see a representation of the table view on your screen, the playground’s
    live view must be enabled. Click the Adjust Editor Options button and verify that
    **Live View** is selected:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在屏幕上看到表格视图的表示，游乐场的实时视图必须启用。点击调整编辑选项按钮并确认**实时视图**被选中：
- en: '![](img/B31371_14_03.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_14_03.png)'
- en: 'Figure 14.3: Adjust Editor Options menu with Live View selected'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3：调整编辑选项菜单，选择“实时视图”
- en: 'Run your code and verify that the table view is displaying three table view
    cells in the live view:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行你的代码并验证表格视图是否在实时视图中显示三个表格视图单元格：
- en: '![](img/B31371_14_04.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_14_04.png)'
- en: 'Figure 14.4: Playground live view showing table view with three table view
    cells'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4：游乐场实时视图显示包含三个表格视图单元格的表格视图
- en: 'Tap a row. The journal entry details for that row will be printed in the Debug
    area:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击一行。该行的期刊条目详情将在调试区域打印出来：
- en: '![](img/B31371_14_05.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_14_05.png)'
- en: 'Figure 14.5: Debug area showing journal entry details'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5：调试区域显示期刊条目详情
- en: 'Swipe left on a row. A **Delete** button will appear:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一行上向左滑动。将出现一个**删除**按钮：
- en: '![](img/B31371_14_06.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_14_06.png)'
- en: 'Figure 14.6: Table view row showing a Delete button'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：显示删除按钮的表格视图行
- en: 'Tap the **Delete** button to remove the row from the table view:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**删除**按钮从表格视图中移除行：
- en: '![](img/B31371_14_07.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_14_07.png)'
- en: 'Figure 14.7: Table view with one row removed'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7：移除一行后的表格视图
- en: You’ve just created a view controller for a table view, created an instance
    of it, and displayed a table view in the playground’s live view. Good job!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚创建了一个表格视图的视图控制器，创建了一个实例，并在游乐场的实时视图中显示了一个表格视图。做得好！
- en: In the next section, you’ll revisit how view controllers are used on the Journal
    List screen that you implemented in *Chapter 11*, *Building Your User Interface*.
    Using what you have learned in this section as a reference, you should have a
    better understanding of how it works.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将回顾如何在*第11章*，*构建用户界面*中实现的期刊列表屏幕上使用视图控制器。使用本节学到的内容作为参考，你应该能更好地理解它是如何工作的。
- en: Revisiting the Journal List screen
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾期刊列表屏幕
- en: 'Remember the `JournalListViewController` class in *Chapter 11*, *Building Your
    User Interface*? This is an example of a view controller that manages a table
    view. Note that the code for this class is very similar to that in your playground.
    The differences are as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 记住*第11章*，*构建用户界面*中的`JournalListViewController`类？这是一个管理表格视图的视图控制器示例。请注意，这个类的代码与你的游乐场中的代码非常相似。差异如下：
- en: You created and assigned the table view to the `tableView` in `TableViewExampleController`
    programmatically, instead of using the assistant.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你通过编程在`TableViewExampleController`中创建并分配了表格视图到`tableView`，而不是使用辅助工具。
- en: You set the dimensions of the table view programmatically in `UITableView(frame:)`,
    instead of using the Size inspector and constraints.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你通过`UITableView(frame:)`以编程方式设置表格视图的尺寸，而不是使用大小检查器和约束。
- en: You connected the data source and delegate outlets to the view controller programmatically,
    instead of using the Connections inspector.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你通过编程将数据源和代理出口连接到视图控制器，而不是使用连接检查器。
- en: You set the reuse identifier and UI element color programmatically, instead
    of using the Attributes inspector.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你通过编程设置重用标识符和UI元素颜色，而不是使用属性检查器。
- en: You added the table view as a subview of the view for `TableViewExampleController`
    programmatically, instead of dragging in a **Table View** object from the library.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你通过编程将表格视图作为`TableViewExampleController`视图的子视图添加，而不是从库中拖入一个**表格视图**对象。
- en: You may wish to open the *JRNL* project and review *Chapter 11*, *Building Your
    User Interface*, once more, to compare the table view implementation using the
    storyboard and the table view implementation done programmatically as you have
    done in this chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望再次打开 *JRNL* 项目并回顾 *第 11 章*，*构建你的用户界面*，以比较使用故事板实现的表格视图实现和你在本章中按编程方式实现的表格视图实现。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the MVC design pattern and table view controllers
    in detail. You then revisited the table view used on the Journal List screen and
    learned how table view controllers work.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你详细学习了 MVC 设计模式和表格视图控制器。然后你回顾了在“期刊列表”屏幕上使用的表格视图，并学习了表格视图控制器是如何工作的。
- en: You should now understand the MVC design pattern, how to create a table view
    controller, and how to use the table view data source and delegate protocols.
    This will enable you to implement table view controllers for your own apps.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该已经理解了 MVC 设计模式，如何创建一个表格视图控制器，以及如何使用表格视图数据源和代理协议。这将使你能够为你的应用程序实现表格视图控制器。
- en: Up to this point, you have set up the views and view controllers for the Journal
    List screen, but it just displays a column of cells. In the next chapter, you’re
    going to implement the model objects for the Journal List screen so it can display
    a list of journal entries. To do this, you will create structures to store data
    and provide it to the `JournalListViewController` instance so that it may be displayed
    by the table view on the Journal List screen.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经为“期刊列表”屏幕设置了视图和视图控制器，但它只显示一列单元格。在下一章中，你将实现“期刊列表”屏幕的模型对象，以便它可以显示期刊条目列表。为此，你将创建用于存储数据并提供给“JournalListViewController”实例的结构，以便它可以在“期刊列表”屏幕上的表格视图中显示。
- en: Join us on Discord!
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家和作者本人一起阅读这本书。提出问题，为其他读者提供解决方案，通过 Ask Me Anything 会话与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
