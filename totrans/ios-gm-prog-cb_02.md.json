["```swift\n    @interface FSMyScene()\n    @property (nonatomic, strong) SKSpriteNode*     spaceShipSprite;\n    @end\n    ```", "```swift\n    self.spaceShipSprite = [SKSpriteNode spriteNodeWithImageNamed:@\"Spaceship\"];\n    self.spaceShipSprite.position = CGPointMake(self.spaceShipSprite.size.width, size.height/2);        \n    [self addChild:self.spaceShipSprite];\n    ```", "```swift\n    self.backgroundColor = [UIColor colorWithRed:135.0/255.0 green:206.0/255.0 blue:235.0/255.0 alpha:1.0];\n    ```", "```swift\n    // Configure the view.\n    SKView * skView = (SKView *)self.view;\n    skView.showsFPS = YES;\n    skView.showsNodeCount = YES;\n    ```", "```swift\n    // Create and configure the scene.\n    SKScene * scene = [SKScene sceneWithSize:skView.bounds.size];\n    scene.scaleMode = SKSceneScaleModeAspectFill;\n\n    // Present the scene.\n    [skView presentScene:scene];\n    ```", "```swift\n    SKSpriteNode * spriteNode = [SKSpriteNode spriteNodeWithImageNamed:@\"Spaceship.png\"];\n    spriteNode.position = CGPointMake(100,100);\n    [self addChild:spriteNode];\n    ```", "```swift\n    SKView * skView = (SKView *)self.view;\n    ```", "```swift\n        skView.showsFPS = YES;\n        skView.showsNodeCount = YES;\n    ```", "```swift\n        SKScene * scene = [SKScene sceneWithSize:skView.bounds.size];\n        scene.scaleMode = SKSceneScaleModeAspectFill;\n    ```", "```swift\n        // Present the scene.\n        [skView presentScene:scene];\n    ```", "```swift\n        SKSpriteNode * spriteNode = [SKSpriteNode spriteNodeWithImageNamed:@\"Spaceship.png\"];\n    ```", "```swift\n        spriteNode.position = CGPointMake(100,100);\n    Lastly, to make the sprite visible, it is added to SKScene as a child:\n        [self addChild:spriteNode];\n    ```", "```swift\n    @property (nonatomic, assign) NSTimeInterval lastUpdatedTime;\n    @property (nonatomic, assign) NSTimeInterval    diffTime;\n    ```", "```swift\n    self.diffTime = currentTime - self.lastUpdatedTime;    \n    self.lastUpdatedTime = currentTime;\n    ```", "```swift\n    - (void)update:(CFTimeInterval)currentTime\n    {\n        /* Called before each frame is rendered */\n        self.diffTime = currentTime - self.lastUpdatedTime;    \n        self.lastUpdatedTime = currentTime;\n    }\n    ```", "```swift\n    SKAction* moveAction = [SKAction moveTo:CGPointMake(100,100) duration:1.0];\n    [self.spaceShipSprite runAction:moveAction];\n    ```", "```swift\n    CGFloat angleInDegree = 90.0;\n    CGFloat angleInRadian = angleInDegree * M_PI/180.0; \n    SKAction* rotateAction = [SKAction rotateByAngle:angleInRadian duration:2.0];\n    [self.spaceShipSprite runAction:rotateAction];\n    ```", "```swift\n    SKAction* scaleAction = [SKAction scaleBy:2.0 duration:2.0];\n    [self.spaceShipSprite runAction:scaleAction];\n    ```", "```swift\n    SKAction* fadeOutAction = [SKAction fadeOutWithDuration:1.0];\n    [self.spaceShipSprite runAction:fadeOutAction];\n    ```", "```swift\nSKAction* fadeOutAction = [SKAction fadeOutWithDuration:1.0];\nSKAction* fadeInAction = [SKAction fadeInWithDuration:1.0];\nSKAction* sequenceAction = [SKAction sequence:@[fadeOutAction, fadeInAction]];\n[self.spaceShipSprite runAction:sequenceAction];\n```", "```swift\n    SKAction* repeatThreeTimesAction = [SKAction repeatAction:sequenceAction count:3];\n    [self.spaceShipSprite runAction:repeatThreeTimesAction];\n    ```", "```swift\n    SKAction* repeatForeverAction = [SKAction repeatActionForever:sequenceAction];\n    [self.spaceShipSprite runAction:repeatForeverAction];\n    ```", "```swift\nSKAction* moveAction = [SKAction moveTo:CGPointMake(100,100) duration:1.0];\nSKAction* fadeOutAction = [SKAction fadeOutWithDuration:1.0];\nSKAction *groupAction = [SKAction group:@[moveAction, fadeOutAction]];\n[self.spaceShipSprite runAction:groupAction];\n```", "```swift\n    - (void)initalizingScrollingBackground\n    {\n        for (int index = 0; index < 2; index++)\n        {\n            SKSpriteNode *spaceBGNode =\n            [SKSpriteNode spriteNodeWithImageNamed:@\"SpaceBackground.png\"];\n            {\n                spaceBGNode.position =\n                CGPointMake(index * spaceBGNode.size.width, 0);\n                spaceBGNode.anchorPoint = CGPointZero;\n                spaceBGNode.name = @\"SpaceBG\";\n\n                [self addChild:spaceBGNode];\n            }\n        }\n    }\n    ```", "```swift\n    static const float SPACE_BG_VELOCITY = 100.0;\n    static inline CGPoint CGPointAdd(const CGPoint a, const CGPoint b)\n    {\n        return CGPointMake(a.x + b.x, a.y + b.y);\n    }\n    static inline CGPoint CGPointMultiplyScalar(const CGPoint a, const CGFloat b)\n    {\n        return CGPointMake(a.x * b, a.y * b);\n    }\n    ```", "```swift\n    - (void)moveSpaceBackground\n    {\n        [self enumerateChildNodesWithName:@\"SpaceBG\"\n                               usingBlock: ^(SKNode *node, BOOL *stop)\n         {\n             SKSpriteNode * spaceBGNode = (SKSpriteNode *) node;\n\n             CGPoint bgVelocity = CGPointMake(-SPACE_BG_VELOCITY, 0);\n\n             CGPoint amtToMove = CGPointMultiplyScalar(bgVelocity,self.diffTime);\n\n             spaceBGNode.position = CGPointAdd(spaceBGNode.position, amtToMove);\n\n             //Checks if Background node is completely scrolled of the screen, if yes then put it at the end of the other node\n\n             if (spaceBGNode.position.x <= -spaceBGNode.size.width)\n             {\n                 spaceBGNode.position =\n                 CGPointMake(spaceBGNode.position.x + spaceBGNode.size.width*2,\n                             spaceBGNode.position.y);\n             }\n         }];\n    }\n    ```", "```swift\n    [self enumerateChildNodesWithName:@\"SpaceBG\"\n                               usingBlock: ^(SKNode *node, BOOL *stop)\n         {\n\n         }];\n    ```", "```swift\nSKSpriteNode * spaceBGNode = (SKSpriteNode *) node;\n```", "```swift\nCGPoint bgVelocity = CGPointMake(-SPACE_BG_VELOCITY, 0);\nCGPoint amtToMove = CGPointMultiplyScalar(bgVelocity,self.diffTime);\n```", "```swift\nspaceBGNode.position = CGPointAdd(spaceBGNode.position, amtToMove);\n```", "```swift\nif (spaceBGNode.position.x <= -spaceBGNode.size.width)\n{\n  \tspaceBGNode.position =\n             CGPointMake(spaceBGNode.position.x + spaceBGNode.size.width*2,\n                         spaceBGNode.position.y);\n  }\n```", "```swift\n- (void)update:(CFTimeInterval)currentTime\n{\n    /* Called before each frame is rendered */\n    self.diffTime = currentTime - self.lastUpdatedTime;\n\n    self.lastUpdatedTime = currentTime;\n\n    [self moveSpaceBackground];\n}\n```", "```swift\n    @property (nonatomic, strong) SKAction*         moveUpAction;\n    @property (nonatomic, strong) SKAction*         moveDownAction;\n    ```", "```swift\n    static const float SPACE_BG_ONE_TIME_MOVE_DISTANCE = 30.0;\n    static const float SPACE_BG_ONE_TIME_MOVE_TIME = 0.2;\n    ```", "```swift\n        self.moveUpAction = [SKAction moveByX:0\n                            y:SPACE_BG_ONE_TIME_MOVE_DISTANCE\n                            duration:SPACE_BG_ONE_TIME_MOVE_TIME];\n        self.moveDownAction = [SKAction moveByX:0\n                              y:-SPACE_BG_ONE_TIME_MOVE_DISTANCE\n                              duration:SPACE_BG_ONE_TIME_MOVE_TIME];\n    ```", "```swift\n    - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n    {\n        UITouch *touch = [touches anyObject];\n\n        CGPoint touchLocation = [touch locationInNode:self.scene];\n    }\n    ```", "```swift\n- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    UITouch *touch = [touches anyObject];\n\n    CGPoint touchLocation = [touch locationInNode:self.scene];\n\n    CGPoint spaceShipPosition = self.spaceShipSprite.position;\n    CGFloat minYLimitToMove = SPACE_BG_ONE_TIME_MOVE_DISTANCE;\n    CGFloat maxYLimitToMove =\n    self.frame.size.height - SPACE_BG_ONE_TIME_MOVE_DISTANCE;\n    if(touchLocation.y > spaceShipPosition.y)\n    {\n        if (spaceShipPosition.y < maxYLimitToMove)\n        {\n            [self.spaceShipSprite runAction:self.moveUpAction];\n        }\n    }\n    else\n    {\n        if (spaceShipPosition.y > minYLimitToMove)\n        {\n            [self.spaceShipSprite runAction:self.moveDownAction];\n        }\n    }\n}\n```", "```swift\n- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n}\n```"]