- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing the UI with Fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers fragments and the fragment lifecycle. It demonstrates how
    to use them to build efficient and dynamic layouts that respond to different screen
    sizes and configurations and allow you to divide your UI into different sections.
    By the end of this chapter, you will be able to create static and dynamic fragments,
    pass data to and from fragments and activities, and use the Jetpack `Navigation`
    component to detail how fragments fit together.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we explored the Android activity lifecycle and looked
    into how it is used in apps to navigate between screens. We also analyzed various
    types of launch modes, which defined how transitioning between screens happened.
    In this chapter, you’ll explore fragments. A fragment is a section, portion, or,
    as the name implies, fragment of an Android activity.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, you’ll learn how to use fragments, see how they can
    exist in more than one activity, and discover how multiple fragments can be used
    in one activity. You’ll start by adding simple fragments to an activity and then
    progress to learning about the difference between static and dynamic fragments.
  prefs: []
  type: TYPE_NORMAL
- en: Fragments can be used to simplify creating layouts for Android tablets that
    have larger form factors using dual-pane layouts. For example, if you have an
    average-sized phone screen and you want to include a list of news stories, you
    might only have enough space to display the list.
  prefs: []
  type: TYPE_NORMAL
- en: If you viewed the same list of stories on a tablet, you’d have more space available
    so you could display the same list and also a story itself to the right of the
    list. Each of these different areas of the screen can use a fragment. You can
    then use the same fragment on both the phone and the tablet. You benefit from
    reusing and simplifying the layouts and don’t have to repeat creating similar
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve explored how fragments are created and used, you’ll then learn how
    to organize your user journeys with fragments. You’ll apply some established practices
    for using fragments in this way. Finally, you’ll learn how to simplify fragment
    use by creating a navigation graph with the Android Jetpack `Navigation` component,
    which allows you to specify linking fragments together with destinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The fragment lifecycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static fragments and dual-pane layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic fragments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jetpack Navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The complete code for all the exercises and the activity in this chapter is
    available on GitHub at [https://packt.link/KmdBZ](https://packt.link/KmdBZ)
  prefs: []
  type: TYPE_NORMAL
- en: The fragment lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fragment is a component with its own lifecycle. Understanding the fragment
    lifecycle is critical as it provides callbacks at certain stages of fragment creation,
    the running state, and destruction that configure the initialization, display,
    and cleanup. Fragments run in an activity, and a fragment’s lifecycle is bound
    to the activity’s lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In many ways, the fragment lifecycle is very similar to the activity lifecycle,
    and at first glance, it appears that the former replicates the latter. There are
    as many callbacks that are the same or similar in the fragment lifecycle as there
    are in the activity lifecycle, such as `onCreate(savedInstanceState: Bundle?)`.'
  prefs: []
  type: TYPE_NORMAL
- en: The fragment lifecycle is tied to the activity lifecycle, so wherever fragments
    are used, the fragment callbacks are interleaved with the activity callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: The same steps are gone through to initialize the fragment and prepare for it
    to be displayed to the user before being available for the user to interact with.
    The same teardown steps that an activity goes through happen to the fragment as
    well when the app is backgrounded, hidden, and exited. Fragments, like activities,
    have to extend/derive from a parent `Fragment` class, and you can choose which
    callbacks to override depending on your use case. The lifecycle is displayed in
    the following diagram, followed by more detail about each function.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Fragment lifecycle](img/B19411_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Fragment lifecycle
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now explore these callbacks, the order they appear in, and what they do.
  prefs: []
  type: TYPE_NORMAL
- en: onAttach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onAttach(context: Context)`: This is the point where your fragment
    becomes linked to the activity it is used in. It allows you to reference the activity,
    although at this stage neither the fragment nor the activity has been fully created.'
  prefs: []
  type: TYPE_NORMAL
- en: onCreate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onCreate(savedInstanceState: Bundle?)`: This is where you do
    any initialization of your fragment. This is not where you set the layout of your
    fragment, as at this stage, there is no UI available to display and no `setContentView`
    available as there is in an activity. As is the same in the activity’s `onCreate()`
    function, you can use the `savedInstanceState` parameter to restore the state
    of the fragment when it is being re-created.'
  prefs: []
  type: TYPE_NORMAL
- en: onCreateView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
    savedInstanceState: Bundle?): View?`: Now, this is where you get to create the
    layout of your fragment. The most important thing to remember here is that instead
    of setting the layout (as is the case with an activity), the fragment will actually
    return the layout `View?` from this function.'
  prefs: []
  type: TYPE_NORMAL
- en: The views you have in your layout are available to refer to here, but there
    are a few caveats. You need to create the layout before you can reference the
    views contained within it, which is why it’s preferred to do view manipulation
    in `onViewCreated`.
  prefs: []
  type: TYPE_NORMAL
- en: onViewCreated
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onViewCreated(view View, savedInstanceState: Bundle?)`: This
    callback is the one in between your fragment being fully created and being visible
    to the user. It’s where you’ll typically set up your views and add any functionality
    and interactivity to these views. This might be adding an `OnClickListener` to
    a button and then calling a function when it’s clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: onActivityCreated
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onActivityCreated(context: Context)`: This is called immediately
    after the activity’s `onCreate` has been run. Most of the initialization of the
    view state of the fragment will have been done, and this is the place to do the
    final setup if required.'
  prefs: []
  type: TYPE_NORMAL
- en: onStart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onStart()`: This is called when the fragment is about to become
    visible to the user but is not yet available for the user to interact with.'
  prefs: []
  type: TYPE_NORMAL
- en: onResume
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onResume()`: At the end of this call, your fragment is available
    for the user to interact with. Normally, there is minimal setup or functionality
    defined in this callback, as when the app goes into the background and then comes
    back into the foreground, this callback will always be called.'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, you don’t want to have to needlessly repeat the setup of the fragment
    when this could be done with a callback that isn’t run when the fragment becomes
    visible.
  prefs: []
  type: TYPE_NORMAL
- en: onPause
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onPause()`: Like its counterpart, `onPause()` in an activity
    signals that your app is going into the background or has been partially covered
    by something else on the screen. Use this to save any changes to the fragment’s
    state.'
  prefs: []
  type: TYPE_NORMAL
- en: onStop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onStop()`: The fragment is no longer visible at the end of this
    call and goes into the background.'
  prefs: []
  type: TYPE_NORMAL
- en: onDestroyView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onDestroyView()`: This is usually called for doing a final cleanup
    before the fragment is destroyed. You should use this callback if it is necessary
    to clean up any resources. If the fragment is pushed to the back stack and retained,
    then it can also be called without destroying the fragment. On completion of this
    callback, the fragment’s layout view is removed.'
  prefs: []
  type: TYPE_NORMAL
- en: onDestroy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onDestroy()`: The fragment is being destroyed. This can occur
    because the app is being killed or because this fragment is being replaced by
    another fragment.'
  prefs: []
  type: TYPE_NORMAL
- en: onDetach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`override fun onDetach()`: This is called when the fragment has been detached
    from its activity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are more fragment callbacks, but these are the ones you will use for
    the majority of cases. Typically, you’ll only use a subset of these callbacks:
    `onAttach()` to associate an activity with the fragment, `onCreate` to initialize
    the fragment, `onCreateView` to set the layout, and then `onViewCreated`/`onActivityCreated`
    to do further initialization, and perhaps `onPause()` to do some cleanup.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Further details of these callbacks can be found in the official documentation
    at https://developer.android.com/guide/fragments.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve gone through some of the theory of the fragment lifecycle and
    how it is affected by the host activity’s lifecycle, let’s see those callbacks
    being run in action.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.01 – adding a basic fragment and the fragment lifecycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will create and add a basic fragment to an app. The aim
    of this exercise is to gain familiarity with how fragments are added to an activity
    and the layout they display. To do this, you will create a new blank fragment
    with a layout in Android Studio. You will then add the fragment to the activity
    and verify the fragment has been added by the display of the fragment layout.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an application in Android Studio with an empty activity called `Fragment`
    `Lifecycle` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the application has been built, create a new fragment by going to `Fragment
    (Blank)` option. When you’ve selected this option, you will be presented with
    the screen shown in *Figure 3**.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Creating a new fragment](img/B19411_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Creating a new fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'Rename the fragment `MainFragment` and the layout `fragment_main`. Then, press
    `Fragment` class will be created and opened. There are two functions that have
    been added: `onCreate`, which initializes the fragment, and `onCreateView` (displayed
    in the following code snippet), which inflates the layout file used for the fragment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you open up the `fragment_main.xml` layout file, you’ll see the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A simple layout has been added with a `TextView` and some example text using
    `@string/hello_blank_fragment`. This string resource has the text `hello blank
    fragment`. As `layout_width` and `layout_height` are specified as `match_parent`,
    `TextView` will occupy the whole of the screen. The text itself, however, will
    be added at the top left of the view with the default position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `android:gravity="center"` attribute and value to the `TextView` so
    that the text appears in the center of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you run up the UI now, you’ll see the **Hello World!** display in *Figure
    3**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Initial app layout display without a fragment added](img/B19411_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Initial app layout display without a fragment added
  prefs: []
  type: TYPE_NORMAL
- en: Well, you can see some `hello blank fragment` text you might have been expecting.
    The fragment and its layout do not automatically get added to an activity when
    you create it. This is a manual process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `activity_main.xml` file and replace the contents with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just as there are view declarations you can add to layouts in XML, there is
    also a `fragment` element. You’ve added the fragment to `ConstraintLayout` with
    constraints of `match_parent` for `layout_width` and `layout_height` so it will
    occupy the whole of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important `xml` attribute to examine here is `android:name`. It’s
    here where you specify the fully qualified name of the package and the `Fragment`
    class that you are going to add to the layout with `com.example.fragmentlifecycle.MainFragment`.
    Now run the app, and you will see the output shown in *Figure 3**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – App layout display with a fragment added](img/B19411_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – App layout display with a fragment added
  prefs: []
  type: TYPE_NORMAL
- en: This proves that your fragment with the text `Hello blank fragment` has been
    added to the activity and the layout you defined is being displayed. Next, you’ll
    examine the callback methods between the activity and the fragment and how this
    happened.
  prefs: []
  type: TYPE_NORMAL
- en: Open up the `MainFragment` class and add a `TAG` constant to the companion object
    with the value `"MainFragment"` to identify the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, add/update the functions with appropriate log statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to add the imports for the `Log` statement and `context` to the
    imports at the top of the class. The following code snippet is truncated. Follow
    the link shown to see the full code block you need to use:'
  prefs: []
  type: TYPE_NORMAL
- en: MainFragment.kt
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code for this step at [https://packt.link/XcOJ4](https://packt.link/XcOJ4).
  prefs: []
  type: TYPE_NORMAL
- en: You will need to add `Log.d(TAG, "onCreateView")` to the `onCreateView` callback
    and `Log.d(TAG, "onCreate")` to the `onCreate` callback that already exist, and
    then override the `onAttach` function, adding `Log.d(TAG, "onAttach")`, and `onViewCreated`,
    adding `Log.d(TAG, "onViewCreated")`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, open the `MainActivity` class and add a companion object with a `TAG`
    constant with the value `"MainActivity"`. Then add the `Log` import to the top
    of the class and then the common `onStart` and `onResume` callback methods, as
    shown in the following code snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ll see that you also have to add the `onCreate` log statement, `Log.d`(`TAG,`
    `"onCreate"`), as this callback was already there when you added the activity
    to the project.
  prefs: []
  type: TYPE_NORMAL
- en: You learned in [*Chapter 2*](B19411_02.xhtml#_idTextAnchor103), *Building User
    Screen Flows*, how to view log statements, and you are going to open the **Logcat**
    window in Android Studio to examine the logs and the order they are called in
    when you run the app.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B19411_02.xhtml#_idTextAnchor103), *Building User Screen Flows*,
    you viewed logs from a single activity so you could see the order they were called
    in. Now you’ll examine the order in which the `MainActivity` and `MainFragment`
    callbacks happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `MainActivity` and `MainFragment` start with `Main`, you can type
    `tag:Main` in the search box to filter the logs to only show statements with this
    text. Run the app, and you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Logcat statements shown when starting the app](img/B19411_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Logcat statements shown when starting the app
  prefs: []
  type: TYPE_NORMAL
- en: What’s interesting here is that the first few callbacks are from the fragment.
    It is linked to the activity it has been placed in with the `onAttach` callback.
    The fragment is initialized, and its view is displayed in `onCreate` and `onCreateView`,
    before another callback, `onViewCreated`, is called, confirming that the fragment
    UI is ready to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: This is before the activity’s `onCreate` method is called. This makes sense
    as the activity creates its UI based on what it contains. As this is a fragment
    that defines its own layout, the activity needs to know how to measure, lay out,
    and draw the fragment as it does in the `onCreate` method.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the fragment receives confirmation that this has been done with the `onActivityCreated`
    callback before both the fragment and activity start to display the UI in `onStart`,
    before preparing the user to interact with it after their respective `onResume`
    callbacks have finished.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The interaction between the activity and fragment lifecycles detailed previously
    is for cases when static fragments, which are those defined in the layout of an
    activity, are created. For dynamic fragments, which can be added when the activity
    is already running, the interaction can differ.
  prefs: []
  type: TYPE_NORMAL
- en: So, now that the fragment and the containing activity are shown, what happens
    when the app is backgrounded or closed? The callbacks are still interleaved when
    the fragment and activity are paused, stopped, and finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following callbacks to the `MainFragment` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add these callbacks to `MainActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the app, and once it is running, you’ll see the callbacks from before
    starting both the fragment and activity. You can use the dustbin icon at the top
    left of the `Logcat` window to clear the statements. Then, rotate the app and
    review the output log statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Logcat statements shown when closing the app](img/B19411_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Logcat statements shown when closing the app
  prefs: []
  type: TYPE_NORMAL
- en: The `onPause` and `onStop` statements are as you might expect in that the fragment
    gets notified of these callbacks first as it is contained within the activity.
    You can think of this as being inward to outward in that the child elements are
    notified before the containing parent, so the parent knows how to respond.
  prefs: []
  type: TYPE_NORMAL
- en: The fragment is then torn down, removed from the activity, and then destroyed
    with the `onDestroyView`, `onDestroy`, and `onDetach` functions before the activity
    itself is destroyed after any final cleanup is done in `onDestroy`. It doesn’t
    make sense for the activity to finish until all the component parts that make
    up the activity are themselves removed.
  prefs: []
  type: TYPE_NORMAL
- en: The full fragment lifecycle callbacks and how they relate to the activity callbacks
    are complicated in Android because which callbacks are applied in which situation
    can differ quite substantially. To view a more detailed overview, see the official
    documentation at https://developer.android.com/guide/fragments.
  prefs: []
  type: TYPE_NORMAL
- en: For the majority of situations, you will only use the preceding fragment callbacks.
    This example demonstrates both how self-contained fragments are in their creation,
    display, and destruction, and also their interdependence with the containing activity.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve gone through a basic example of adding a fragment to an activity
    and examining the interaction between the fragment and the activity, let’s see
    a more detailed example of how you add two fragments to an activity.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.02 – adding fragments statically to an activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise will demonstrate how to add two fragments to an activity with
    their own UI and separate functionality. You’ll create a simple counter class
    that increments and decrements a number and a color class that changes the color
    applied programmatically to some `Hello World` text. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an application in Android Studio with an empty activity called `Fragment`
    `Intro`. Then, add the following strings required for the exercise in the `res`
    | `values` | `strings.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These strings are used in both the counter fragment as well as the color fragment,
    which you will create next.
  prefs: []
  type: TYPE_NORMAL
- en: Add a new blank fragment by going to `CounterFragment` with the `fragment_counter`
    layout name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, make changes to the `fragment_counter.xml` file. The following code is
    truncated for space. Follow the link shown for the full code you need to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: fragment_counter.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code for this step at [https://packt.link/ca4EK](https://packt.link/ca4EK).
  prefs: []
  type: TYPE_NORMAL
- en: We are using a simple `ConstraintLayout` file that has a `TextView` set up for
    the `@+id/counter_text` header and a `TextView` for the value of the counter,
    `android:id="@+id/counter_value"` (with a default of `@string/zero`), which will
    be changed by the `android:id="@+id/plus"` and `android:id="@+id/minus"` buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For a simple example such as this, you are not going to set individual styles
    on the views with `style="@some_style"` notation, which would be best practice
    to avoid repeating these values on each view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open `CounterFragment` and add a property to be the counter below the class
    header (it is a `var` so it is mutable and can be changed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open and add the following `onViewCreated` function. You will also need
    to add the following imports to the top of the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We’ve added `onViewCreated`, which is the callback run when the layout has been
    applied to your fragment. The `onCreateView` callback, which creates the view,
    was run when the fragment itself was created.
  prefs: []
  type: TYPE_NORMAL
- en: The buttons you’ve specified in the preceding fragment have `OnClickListener`
    set up on them to increment and decrement the value of the `counter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, within the plus button `OnClickListener`, you are incrementing the
    counter and setting this value on the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, within the minus button `OnClickListener`, it decrements the value by
    one but only if the value is greater than one, so no negative numbers are set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You have not added the fragment to the `MainActivity` layout. To do this, go
    into `activity_main.xml` and replace the contents with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You are going to change the layout from `ConstraintLayout` to `LinearLayout`
    for simplicity as you can easily add one fragment above the other when you come
    to the next stage. You specify the fragment to be used within the `fragment` XML
    element with the `name` attribute with the fully qualified package name used for
    the class: `android:name="com.example.fragmentintro.CounterFragment`.'
  prefs: []
  type: TYPE_NORMAL
- en: If you used a different package name when you created the app, then this must
    refer to the `CounterFragment` you created. The important thing to grasp here
    is that you have added a fragment to your main activity layout and the fragment
    also has a layout.
  prefs: []
  type: TYPE_NORMAL
- en: This shows some of the power of using fragments as you can encapsulate the functionality
    of one feature of your app, complete with a layout file and fragment class, and
    add it to multiple activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve done this, run the fragment in the virtual device as in *Figure
    3**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – App displaying the counter fragment](img/B19411_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – App displaying the counter fragment
  prefs: []
  type: TYPE_NORMAL
- en: You have created a simple counter. The basic functionality works as expected,
    incrementing and decrementing a counter value.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, you are going to add another fragment to the bottom half of
    the screen. This demonstrates the versatility of fragments. You can have encapsulated
    pieces of the UI with functionality and features in different areas of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, create a new fragment using the earlier steps for creating the `CounterFragment`
    called `ColorFragment` with the `fragment_color` layout name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open up the `fragment_color.xml` file that has been created and replace
    the contents with the code at the following link. The following snippet is truncated
    – see the link for the full code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can find the complete code for this step at [https://packt.link/GCYDR](https://packt.link/GCYDR).
  prefs: []
  type: TYPE_NORMAL
- en: The layout adds a `TextView` with three buttons. The `TextView` text and the
    text for all the buttons are set as string resources (`@string`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, go into the `activity_main.xml` file and add `ColorFragment` below `CounterFragment`
    inside `LinearLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you run the app, you will see that `ColorFragment` is not visible, as
    in *Figure 3**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – App shown without ColorFragment displayed](img/B19411_03_071.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – App shown without ColorFragment displayed
  prefs: []
  type: TYPE_NORMAL
- en: You’ve included `ColorFragment` in the layout, but because `CounterFragment`
    has its width and height set to match its parent (`android:layout_width="match_parent
    android:layout_height="match_parent"`) and it is the first view in the layout,
    it takes up all the space.
  prefs: []
  type: TYPE_NORMAL
- en: What you need is some way to specify the proportion of the height that each
    fragment should occupy. The `LinearLayout` orientation is set to vertical so the
    fragments will appear one on top of the other when `layout_height` is not set
    to `match_parent`.
  prefs: []
  type: TYPE_NORMAL
- en: In order to define the proportion of this height, you need to add another attribute,
    `layout_weight`, to each fragment in the `activity_main.xml` layout file. When
    you use `layout_weight` to determine the proportional height the fragments should
    occupy, you set the `layout_height` value of the fragments to `0dp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `activity_main.xml` layout with the following changes, setting `layout_height`
    for both fragments to `0dp` and adding the `layout_weight` attributes with the
    following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These changes make `CounterFragment` occupy twice the height of `ColorFragment`,
    as shown in *Figure 3**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – CounterFragment with twice the amount of vertical space allocated](img/B19411_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – CounterFragment with twice the amount of vertical space allocated
  prefs: []
  type: TYPE_NORMAL
- en: You can experiment by changing the weight values to see the differences you
    can make to the display of the layout.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, pressing the **RED**, **GREEN**, and **BLUE** color buttons will
    have no effect on the **Hello World** text. The button actions have not been specified.
    The next step involves adding interactivity to the buttons to make changes to
    the style of the **Hello** **World** text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `onViewCreated` function in `ColorFragment`, which overrides
    its parent to add behavior to the fragment after the layout view has been set
    up. You will also need to add the `TextView`, `Color`, and `Button` imports to
    change the color of the text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you are adding an `OnClickListener` to each button defined in the layout
    and setting the **Hello World** text to the desired color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app and press the **RED**, **GREEN**, and **BLUE** buttons. You should
    see a similar display to the one in *Figure 3**.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.10 – ColorFragment setting text color to red, green, and blue](img/B19411_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – ColorFragment setting text color to red, green, and blue
  prefs: []
  type: TYPE_NORMAL
- en: This exercise, although simple, has demonstrated some fundamental concepts of
    using fragments. The features of your app that the user can interact with can
    be developed independently and not rely on bundling two or more features into
    one layout and activity. This makes fragments reusable and means you can focus
    your attention when developing your app on adding a well-defined UI, logic, and
    features into a single fragment.
  prefs: []
  type: TYPE_NORMAL
- en: Static fragments and dual-pane layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous exercise introduced you to static fragments, those that can be
    defined in the activity XML layout file. You can also create different layouts
    and resources for different screen sizes. This is used for deciding which resources
    to display depending on whether the device is a phone or a tablet.
  prefs: []
  type: TYPE_NORMAL
- en: The space for laying out UI elements can increase substantially with a larger
    size tablet. Android allows specifying different resources depending on many different
    form factors. The qualifier frequently used to define a tablet in the `res` (resources)
    folder is `sw600dp`.
  prefs: []
  type: TYPE_NORMAL
- en: This states that if the shortest width (`sw`) of the device is over 600 dp,
    then use these resources. This qualifier is used for 7” tablets and larger. Tablets
    facilitate what is known as dual-pane layouts. A pane represents a self-contained
    part of the user interface. If the screen is large enough, then two panes (dual-pane
    layouts) can be supported. This also provides the opportunity for one pane to
    interact with another to update content.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.03 – dual-pane layouts with static fragments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you are going to create a simple app that displays a list
    of star signs and specific information about each star sign. It will use different
    displays for phones and tablets.
  prefs: []
  type: TYPE_NORMAL
- en: The phone will display a list and then open the selected list item’s content
    on another screen while the tablet will display the same list in one pane and
    open the list item’s content in another pane on the same screen in a dual-pane
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, you have to create another layout that will only be used
    for 7” tablets and above. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, create a new Android Studio project with an `Empty Activity` called
    `Dual` `Pane Layouts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, making sure the Android view is selected in the project view on the left-hand
    side, go to **File** | **New** | **Android Resource File** and fill in the following
    fields of the dialog (you need to select **Smallest Screen Width** in the dialog’s
    left-hand pane – once you have selected it, the option changes to **Screen Width**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Device Variations View](img/B19411_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Device Variations View
  prefs: []
  type: TYPE_NORMAL
- en: This creates a new folder in the `main` | `res` folder named `'layout-sw600dp'`
    with the `activity_main.xml` layout file added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the moment, it is a duplicate of the `activity_main.xml` file added when
    you created the app, but you will change it to customize the screen display for
    tablets.
  prefs: []
  type: TYPE_NORMAL
- en: In order to demonstrate the use of dual-pane layouts, you are going to create
    a list of star signs so that, when a list item is selected, it will display some
    basic information about the star sign.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the top toolbar and select `ListFragment`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this exercise, you need to update the `strings.xml` and `themes.xml` files,
    adding the following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: strings.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: themes.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `main` | `res` | `layout` | `fragment_list.xml` file and replace the
    default contents with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see that the first `xml` element is a `ScrollView`. A `ScrollView`
    is a `ViewGroup` that allows the contents to scroll, and as you will be adding
    12 star signs into the `LinearLayout` it contains, this is likely to occupy more
    vertical space than is available on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Adding `ScrollView` prevents the contents from being cut off vertically when
    there is no more room to display them and scrolls the layout. A `ScrollView` can
    only contain one child view. Here, it’s a `LinearLayout`, and as the contents
    will be displayed vertically, the orientation is set to vertical (`android:orientation="vertical"`).
    Below the first title `TextView`, you have added a divider `View` and a `TextView`
    for the first star sign, Aquarius.
  prefs: []
  type: TYPE_NORMAL
- en: Add the other 11 star signs with the same format, adding the divider first and
    then the `TextView`. The name of the string resource and the `id` value should
    be the same for each `TextView`. The names of the star signs you will create a
    view from are specified in the `strings.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The technique used to lay out a list is fine for an example, but in a real-world
    app, you would create a `RecyclerView` dedicated to displaying lists that can
    scroll, with the data bound to the list by an adapter. You will cover this in
    a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create `StarSignListener` above the `MainActivity` class header and make
    `MainActivity` implement it by adding the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is how the fragments will communicate back to the activity when a user
    selects a star sign from `ListFragment` and logic will be added depending on whether
    a dual pane is available or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve created the layout file, go into the `ListFragment` class and update
    it with the following contents, keeping `onCreateView()` in place. You can see
    in the fragment in the `onAttach()` callback you are stating that the activity
    implements the `StarSignListener` interface so it can be notified when the user
    clicks an item in the list. Add the import for the `Context` required for `onAttach`
    with the other imports at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The remaining callbacks are similar to what you have seen in the previous exercises.
    You create the fragment view with `onCreateView`. You set up the buttons with
    an `OnClickListener` in `onViewCreated` and then you handle clicks in `onClick`.
  prefs: []
  type: TYPE_NORMAL
- en: The `listOf` syntax in `onViewCreated` is a way of creating a `readonly` list
    with the specified elements, which in this case are your star sign `TextView`
    instances. Then, in the following code, you loop over these `TextViews`, setting
    the `OnClickListener` for each of the individual `TextViews` by iterating over
    the `TextView` list with the `forEach` statement. The `it` syntax here refers
    to the element of the list that is being operated on, which will be one of the
    12 star sign `TextViews`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the `onClick` statement communicates back to the activity through
    `StarSignListener` when one of the star signs in the list has been clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You check whether the view specified as `v` is null with `?` and then only operate
    upon it with the `let` scope function if it isn’t, before passing the `id` value
    of the star sign to `Activity`/`StarSignListener`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Listeners are a common way to react to changes. By specifying a `Listener` interface,
    you are specifying a contract to be fulfilled. The implementing class is then
    notified of the results of the listener operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create `DetailFragment`, which will display the star sign details. Create
    a blank fragment as you have done before and call it `DetailFragment`. Replace
    the `fragment_detail` layout file contents with the following XML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you create a simple `LinearLayout`, which will display the star sign name,
    the symbol of the star sign, and the date range. You’ll set these values in `DetailFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `DetailFragment` and update the contents with the following text and also
    add `TextView` and `Toast` imports to the imports list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onCreateView` inflates the layout as normal. The `setStarSignData()` function
    is what populates the data from the passed-in `starSignId`. The `when` expression
    is used to determine the ID of the star sign and set the appropriate contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `setStarSignData` function here formats text passed with the `getString`
    function – `getString(R.string.symbol,"Water Carrier")`, for example, passes the
    text `Water Carrier` into the `symbol` string, `<string name="symbol">Symbol:
    %s</string>`, and replaces `%s` with the passed-in value. You can see what other
    string formatting options there are in the official docs: https://developer.android.com/guide/topics/resources/string-resource.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the pattern introduced by `aquarius`, add the other 11 star signs
    below the `aquarius` block from the completed file here: [https://packt.link/C9sWZ](https://packt.link/C9sWZ).'
  prefs: []
  type: TYPE_NORMAL
- en: Right now, you have added both `ListFragment` and `DetailFragment`. Currently,
    however, they have not been added to the activity layout and/or synced together,
    so selecting the star sign item in `ListFragment` will not load contents into
    `DetailFragment`. Let’s look at how you can change that.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, you need to change the layout of `activity_main.xml` in both the `layout`
    folder and `layout-sw600dp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up `res` | `layout` | `activity_main.xml` if in the Project view. In the
    default Android view, open up `res` | `layout` | `activity_main.xml` and select
    the top `activity_main.xml` file without (`sw600dp`). Replace the contents with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you run the app and select one of the star signs now, you will get a `NotImplementedError`
    as we need to replace the `TODO` item with this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, open up `res` | `layout-sw600dp` | `activity_main.xml` if in the Project
    view. In the default Android view, open up `res` | `layout` | `activity_main.xml
    (sw600dp)`. Replace the contents with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You are adding `LinearLayout`, which will by default lay out its content horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: You add `ListFragment`, a divider, and then `DetailFragment` and assign the
    fragments appropriate IDs. Notice also that you are using the concept of weights
    to assign the space available for each fragment. When you do this, you specify
    `android:layout_width="0dp"`. `layout_weight` then sets the proportion of the
    width available by the weight measurements as `LinearLayout` is set to lay out
    the fragments horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: '`ListFragment` is specified as `android:layout_weight="1"` and `DetailFragment`
    is specified as `android:layout_weight="2"`, which tells the system to assign
    `DetailFragment` twice the width of `ListFragment`. In this case, where there
    are three views including the divider, which is a fixed dp width, this will result
    roughly in `ListFragment` occupying one-third of the width and `DetailFragment`
    occupying two-thirds.'
  prefs: []
  type: TYPE_NORMAL
- en: To see the app, create a new virtual device as shown in [*Chapter 1*](B19411_01.xhtml#_idTextAnchor025),
    *Creating Your First App*, and select **Category** | **Tablet** | **Nexus 7**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will create a 7” tablet. Then, launch the virtual device and run the app.
    This is the initial view you will see when you launch the tablet in portrait mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Initial star sign app UI display](img/B19411_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Initial star sign app UI display
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the list takes up about a third of the screen and the blank
    space two-thirds of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Click the ![](img/B19411_03_12.png) bottom rotate button on the virtual device
    to turn the virtual device 90 degrees clockwise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you’ve done that, the virtual device will go into landscape mode. It will
    not, however, change the screen orientation to landscape.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to do this, click on the ![3](img/B19411_03_13.png) rotate button in
    the bottom-left corner of the virtual device. You can also select the status bar
    at the top of the virtual device and hold and drag down to display the quick settings
    bar where you can turn on auto-rotation by selecting the rotate button. (You might
    have to swipe left/right within the quick settings bar to show the **Auto-rotate**
    option.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.13 – Quick settings bar wi\uFEFFth Auto-rotate selected](img/B19411_03_14.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Quick settings bar with Auto-rotate selected
  prefs: []
  type: TYPE_NORMAL
- en: 'This will then change the tablet layout to landscape:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Initial star sign app UI display in landscape on a tablet](img/B19411_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Initial star sign app UI display in landscape on a tablet
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing to do is enable selecting a list item to load contents into
    the `Detail` pane of the screen. For that, we need to make changes in `MainActivity`.
    Update `MainActivity` with the following code to retrieve fragments by their ID
    in the pattern of retrieving views by their IDs (there will be some unused imports
    that will be required when the phone implementation is done):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Fragments were introduced in API 11 in 2011 with a `FragmentManager` class to
    manage their interactions with activities. `SupportFragmentManager` was introduced
    to support using fragments in Android versions before API 11 in the Android Support
    Library. `SupportFragmentManager` has been further developed as the base for the
    Jetpack Fragment library, which adds improvements for managing fragments.
  prefs: []
  type: TYPE_NORMAL
- en: This example and those that follow use `supportFragmentManager.findFragmentById`
    to retrieve fragments. You can also, however, retrieve fragments with `Tag` if
    you add a tag to the fragment XML by using `android:tag="MyFragmentTag"`.
  prefs: []
  type: TYPE_NORMAL
- en: You can then retrieve the fragment by using `supportFragmentManager.find``FragmentByTag("MyFragmentTag")`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to retrieve data from the fragment, the activity needs to implement
    `StarSignListener`. This completes the contract set in the fragment to pass back
    details to the implementing class. The `onCreate` function sets the layout and
    then checks whether `DetailFragment` is in the activity’s inflated layout by checking
    whether the `R.id.star_sign_detail` ID exists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Project view, the `res` | `layout` | `activity_main.xml` file only
    contains `ListFragment`, but you’ve added the code in the `res` | `layout-sw600dp`
    | `activity_main.xml` file to contain `DetailFragment` with `android:id="@+id/star_sign_detail"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will be used for the layout of the Nexus 7 tablet. In the default Android
    view, open up `res` | `layout` | `activity_main.xml` and select the top `activity_main.xml`
    file without (`sw600dp`) and then select `activity_main.xml` (`sw600dp`) to see
    these differences.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So now we can retrieve the star sign ID passed from `ListFragment` back to
    `MainActivity` by `StarSignListener` and pass it into `DetailFragment`. This is
    achieved by checking the `isDualPane` Boolean, and if that evaluates to `true`,
    you know you can pass the star sign ID to `DetailFragment` with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You cast the fragment from `id` to `DetailFragment` and call the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you’ve implemented this function in the fragment and are checking by the
    `id` value which contents to display, the UI is updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Star sign app dual-pane display in landscape on a tablet](img/B19411_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Star sign app dual-pane display in landscape on a tablet
  prefs: []
  type: TYPE_NORMAL
- en: Now clicking on a list item works as intended, showing the dual-pane layout
    with the contents set correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the device is not a tablet, however, even when a list item is clicked, nothing
    will happen as there is not an `else` branch condition to do anything if the device
    is not a tablet, which is defined by the `isDualPane` Boolean. The display will
    be as in *Figure 3**.16* and won’t change when items are selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Initial star sign app UI display on a phone](img/B19411_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – Initial star sign app UI display on a phone
  prefs: []
  type: TYPE_NORMAL
- en: 'You are going to display the star sign detail in another activity. Create a
    new `DetailActivity` by going to `activity_detail.xml` with this layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This adds `DetailFragment` as the only fragment in the layout. Now, update
    the `onCreate` function of `DetailActivity` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The star sign `id` is expected to be passed from another activity to this one
    by setting a key in the intent’s extras (also called a bundle). We covered intents
    in [*Chapter 2*](B19411_02.xhtml#_idTextAnchor103), *Building User Screen Flows*,
    but as a reminder, they enable communication between different components and
    also can send data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, the intent that opened this activity has set a star sign ID. It
    will use `id` to set the star sign ID in `DetailFragment`. Next, you need to implement
    the `else` branch of the `isDualPane` check to launch `DetailActivity`, passing
    through the star sign ID in the intent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update `MainActivity` as follows to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you click on one of the star sign names on a phone display, it shows the
    contents in `DetailActivity` occupying the whole of the screen without the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Single-pane star sign detail screen on a phone](img/B19411_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Single-pane star sign detail screen on a phone
  prefs: []
  type: TYPE_NORMAL
- en: This exercise has demonstrated the flexibility of fragments. They can encapsulate
    the logic and display different features of your app, which can be integrated
    in different ways depending on the form factor of the device. They can be arranged
    onscreen in a variety of ways, which are constrained by the layout they are included
    in; therefore, they can feature as a part of dual-pane layouts or all or part
    of a single-pane layout.
  prefs: []
  type: TYPE_NORMAL
- en: This exercise showed fragments being laid out side by side on a tablet, but
    they can also be laid out on top of each other and in a variety of other ways.
    The next topic illustrates how the configuration of fragments used in your app
    doesn’t have to be specified statically in XML but can also be done dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you’ve only seen fragments added in XML at compile time. Although this
    can satisfy many use cases, you might want to add fragments dynamically at runtime
    to respond to the user’s actions. This can be achieved by adding `ViewGroup` as
    a container for fragments and then adding, replacing, and removing fragments from
    `ViewGroup`.
  prefs: []
  type: TYPE_NORMAL
- en: This technique is more flexible as the fragments can be active until they are
    no longer needed and then removed, instead of always being inflated in XML layouts
    as you have seen with static fragments. If three or four more fragments are required
    to fulfill separate user journeys in one activity, then the preferred option is
    to react to the user’s interaction in the UI by adding/replacing fragments dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Using static fragments works better when the user’s interaction with the UI
    is fixed at compile time and you know in advance how many fragments you need.
    For example, this would be the case for selecting items from a list to display
    the contents.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.04 – adding fragments dynamically to an activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will build the same star sign app as before but will demonstrate
    how the list and detail fragments can be added to screen layouts dynamically and
    not directly within an XML layout. You can also pass arguments into a fragment.
    For simplicity, you are going to create the same configuration for both phones
    and tablets. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project with an `Empty Activity` called `Dynamic Fragments`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have done that, add the following dependency – you need to use `FragmentContainerView`,
    an optimized ViewGroup for handling fragment transactions with `app/build.gradle`
    within the `dependences{ }` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the contents of the following XML resource files from *Exercise 3.03*
    – *dual-pane layouts with static fragments*, and add them to the corresponding
    files in this exercise: `strings.xml` (changing the `app_name` string from `Dual
    Pane Layouts` to `Dynamic Fragments`), `fragment_detail.xml`, and `fragment_list.xml`.
    All of these files exist in the project created in the previous exercise and you
    simply add the contents to this new project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, copy `DetailFragment` and `ListFragment` to the new project. You will
    have to change the package name from `package com.example.dualpanelayouts` to
    `package com.example.dynamicfragments` in these two files. Finally, add the styles
    defined below the base application style in `themes.xml` from the last exercise
    to `themes.xml` in this project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You now have the same fragments set up as in the previous exercise. Now, open
    the `activity_main.xml` layout and replace the contents with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the `FragmentContainerView` you will add the fragments to. You’ll notice
    that there are no fragments added in the layout XML as these will be added dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go into `MainActivity` and replace the content with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You are getting a reference to the `FragmentContainerView` specified in `activity_main.xml`,
    creating a new `ListFragment`, and then adding this fragment to the `FragmentContainerView`
    with the ID of the `fragment_container`.
  prefs: []
  type: TYPE_NORMAL
- en: The fragment transaction specified is `add` as you are adding a fragment to
    `FrameLayout` for the first time. You call `commit()` to execute the transaction
    immediately. There is a null check with `savedInstanceState` to only add this
    `ListFragment` if there is no state to restore, which there would be if a fragment
    had been previously added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, make `MainActivity` implement `StarSignListener` by adding the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now if you run the app, you will see the star sign list being displayed on mobile
    and tablet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The problem you now come to is how to pass the star sign ID to `DetailFragment`
    now that it’s not in an XML layout.
  prefs: []
  type: TYPE_NORMAL
- en: One option would be to use the same technique as in the last example by creating
    a new activity and passing the star sign ID in an intent, but you shouldn’t have
    to create a new activity to add a new fragment; otherwise, you might as well dispense
    with fragments and just use activities.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to replace `ListFragment` in `FragmentContainerView` with `DetailFragment`,
    but first, you need to find a way to pass the star sign ID into `DetailFragment`.
    You do this by passing this `id` value as an argument when you create the fragment.
    The standard way to do this is by using a `Factory` method in a fragment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the bottom of `DetailFragment` (a sample `factory`
    method will have been added when you created the fragment using the template/wizard,
    which you can update here):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A `companion` object allows you to add Java’s equivalent of static members into
    your class. Here, you are instantiating a new `DetailFragment` and setting arguments
    passed into the fragment. The arguments of the fragment are stored in a `Bundle()`,
    so in the same way as an activity’s intent extras (which is also a bundle), you
    add the values as key pairs. In this case, you are adding the `STAR_SIGN_ID` key
    with the value `starSignId`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing to do is override one of the `DetailFragment` lifecycle functions
    to use the passed-in argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You do this in `onViewCreated` as at this stage, the layout of the fragment
    has been set up and you can access the view hierarchy (whereas if you accessed
    the arguments in `onCreate`, the fragment layout would not be available as this
    is done in `onCreateView`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This line gets the star sign ID from the passed-in fragment arguments, setting
    a default of `0` if the `STAR_SIGN_ID` key cannot be found. Then, you call `setStarSignData(starSignId)`
    to display the star sign contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you just need to implement the `StarSignListener` interface in `MainActivity`
    to retrieve the star sign ID from `ListFragment`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You create `DetailFragment` as explained earlier with the `factory` method
    passing in the star sign ID: `DetailFragment.newInstance(starSignId)`.'
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, `ListFragment` is still the fragment that has been added to the
    activity `FrameLayout`. You need to replace it with `DetailFragment`, which requires
    another transaction. This time, however, you use the `replace` function to replace
    `ListFragment` with `DetailFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: Before you commit the transaction, you call `.addToBackStack(null)` so the app
    does not exit when the back button is pressed but instead goes back to `ListFragment`
    by popping `DetailFragment` off the fragment stack.
  prefs: []
  type: TYPE_NORMAL
- en: This exercise has introduced adding fragments dynamically to your activity.
    The next topic introduces a more well-defined structure for creating fragments,
    called a navigation graph.
  prefs: []
  type: TYPE_NORMAL
- en: Jetpack Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using dynamic and static fragments, although very flexible, introduces a lot
    of boilerplate code into your app and can become quite complicated when user journeys
    require adding, removing, and replacing multiple fragments while managing the
    back stack.
  prefs: []
  type: TYPE_NORMAL
- en: Google introduced Jetpack components, as you learned in [*Chapter 1*](B19411_01.xhtml#_idTextAnchor025),
    *Creating Your First App*, to use established best practices in your code. The
    `Navigation` component within the suite of Jetpack components enables you to reduce
    boilerplate code and simplify navigation within your app. We are going to use
    it now to update the Star Sign app.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.05 – adding a Jetpack navigation graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we are going to reuse most of the classes and resources from
    the last exercise. We will first create an empty project and copy the resources.
    Next, we will add the dependencies and create a navigation graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a step-by-step approach, we will configure the navigation graph and add
    destinations to navigate between fragments. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project with an `Empty Activity` called `Jetpack Fragments`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `strings.xml`, `fragment_detail.xml`, `fragment_list.xml`, `DetailFragment`,
    and `ListFragment` from the previous exercise, remembering to change the `app_name`
    string in `strings.xml` and the package name for the fragment classes. You will
    need to change the following line for the resources from `import com.example.dynamicfragments.R`
    to `import com.example.jetpacknavigation.R`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, add the styles defined below the base application style in `themes.xml`
    from the last exercise to `themes.xml` in this project. You will also need to
    add the following above the class header in `MainActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you have done that, add the following dependencies – you need to use the
    `Navigation` component in `app/build.gradle` within the `dependences{ }` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It will prompt you to `app` module is selected and go to **File** | **New**
    | **Android Resource**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once this dialog appears, change `nav_graph`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.18 – New Resource File dialog](img/B19411_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – New Resource File dialog
  prefs: []
  type: TYPE_NORMAL
- en: Click `res` folder called `Navigation` with `nav_graph.xml` inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `nav_graph.xml` navigation file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding file is a working navigation graph. Although the syntax is unfamiliar,
    it is quite straightforward to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ListFragment` and `DetailFragment` are present as they would be if you were
    adding static fragments.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is an `id` value to identify the graph at the root `<navigation>` element
    and IDs on the fragments themselves. Navigation graphs introduce the concept of
    destinations, so at the root `navigation` level, there is `app:startDestination`,
    which has the ID of `starSignList`, which is `ListFragment`, then within the `<fragment>`
    tag, there is the `<``action>` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Actions are what link the destinations within the navigation graph together.
    The destination action here has an ID, so you can refer to it in code, and has
    a destination, which, when used, it will direct to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you’ve added the navigation graph, you need to use it to link the activity
    and fragments together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up `activity_main.xml` and replace `TextView` inside `ConstraintLayout`
    with the following `FragmentContainerView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`FragmentContainerView` has been added with the name `android:name="androidx.navigation.fragment.NavHostFragment"`.
    It will host the fragments from the `app:navGraph="@navigation/nav_graph"` that
    you have just created.'
  prefs: []
  type: TYPE_NORMAL
- en: '`app:defaultNavHost` states that it is the app’s default navigation graph.
    It also controls the back navigation when one fragment replaces another. You can
    have more than one `NavHostFragment` in a layout for controlling two or more areas
    of the screen that manage their own fragments, which you might use for dual-pane
    layouts in tablets, but there can only be one default.'
  prefs: []
  type: TYPE_NORMAL
- en: There are a few changes you need to make to make the app work as expected in
    the `ListFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, remove the class file header and references to `StarSignListener`.
    So, the following will be replaced:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And it will be replaced with the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, at the bottom of the class, remove the `onClick` overridden method as
    you are not implementing `View.OnClicklistener`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onViewCreated` method, replace the `forEach` statement that loops over
    the star sign views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace it with the following code and add the `Navigation` import to the imports
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Here, you are creating a bundle to pass `STAR_SIGN_ID` with the view ID of the
    selected star sign to `NavigationClickListener`. It uses the ID of the `R.id.star_sign_id_action`
    action to load `DetailFragment` when clicked as that is the destination for the
    action. `DetailFragment` does not need any changes and uses the passed-in `fragment`
    argument to load the details of the selected star sign ID.
  prefs: []
  type: TYPE_NORMAL
- en: Run up the app, and you’ll see that the app behaves as it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you’ve been able to remove a significant amount of boilerplate code and
    document the navigation within the app in the navigation graph. In addition, you
    have offloaded more of the management of the fragment lifecycle to the Android
    framework, saving more time to work on features.
  prefs: []
  type: TYPE_NORMAL
- en: Jetpack Navigation is a powerful `androidx` component and enables you to map
    your whole app and the relationships between fragments, activities, and so on.
    You can also use it selectively to manage different areas of your app that have
    a defined user flow, such as the startup of your app and guiding the user through
    a series of welcome screens, or some wizard layout user journey, for example.
  prefs: []
  type: TYPE_NORMAL
- en: With this knowledge, let’s try completing an activity using the techniques learned
    from all these exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 3.01 – creating a quiz on the planets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this activity, you will create a quiz where users have to answer one of
    three questions on the planets of the Solar System. The number of fragments you
    choose to use is up to you. However, considering this chapter’s content, which
    is separating the UI and logic into separate fragment components, it is likely
    you will use two fragments or more to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots that follow show one way this could be done, but there are multiple
    ways to create this app. You can use one of the approaches detailed in this chapter,
    such as static fragments, dynamic fragments, or the Jetpack `Navigation` component,
    or something custom that uses a combination of these and other approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of the quiz is as follows. In the UI, you need to ask the user
    these three questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the largest planet?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which planet has the most moons?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which planet spins on its side?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, you need to provide a list of planets so the user can choose the planet
    that they believe is the answer to the question:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MERCURY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VENUS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EARTH`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MARS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JUPITER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SATURN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`URANUS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NEPTUNE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once they have given their answer, you need to show them whether they are correct
    or wrong. The correct answer should be accompanied by some text that gives more
    detail about the question’s answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are some screenshots of how the UI might look to achieve the
    requirements of the app you need to build:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Questions screen**:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.19 – Planet Quiz questi\uFEFFons screen](img/B19411_03_20.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Planet Quiz questions screen
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer** **options screen**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Planet Quiz multiple-choice answer screen](img/B19411_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Planet Quiz multiple-choice answer screen
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer screen**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Planet Quiz answer screen with detailed answer](img/B19411_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – Planet Quiz answer screen with detailed answer
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an Android project with an `Empty Activity`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `strings.xml` file with the entries you need for the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amend the `themes.xml` file with styles for the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `QuestionsFragment`, update the layout with the questions, and add
    interaction with buttons and `OnClickListener`(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, create a multiple-choice fragment and add answer options and button-click
    handling (this can also be done by adding the possible answer options to `QuestionsFragment`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an `AnswersFragment` that displays the relevant question’s answer and
    also displays more details about the answer itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [https://packt.link/By7eE](https://packt.link/By7eE).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has covered fragments in depth, starting with learning about the
    fragment lifecycle and the key functions to override in your own fragments. We
    then moved on to adding simple fragments statically to an app in XML and demonstrating
    how the UI display and logic can be self-contained in individual fragments. Other
    options for how to add fragments to an app using a `FragmentContainerView` and
    dynamically adding and replacing fragments were then covered. We then finished
    with how this can be simplified by using the Jetpack `Navigation` component.
  prefs: []
  type: TYPE_NORMAL
- en: Fragments are one of the fundamental building blocks of Android development.
    The concepts you have learned about here will allow you to build upon them and
    progress to create increasingly more advanced apps. Fragments are at the core
    of building effective navigation into your apps in order to bind features and
    functionality that are simple and easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will explore this area in detail by using established UI patterns
    to build clear and consistent navigation and illustrate how fragments are used
    to enable this.
  prefs: []
  type: TYPE_NORMAL
