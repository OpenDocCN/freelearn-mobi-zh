- en: Chapter 3. Bluetooth Weather Station
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build the first complete application of this book using
    Arduino and Android. We will build a small weather station using Arduino, which
    will be accessed by an Android app via Bluetooth.
  prefs: []
  type: TYPE_NORMAL
- en: On the Arduino side, we will build a simple weather station using a temperature
    and humidity sensor along with an ambient light-level sensor. We will connect
    a **Bluetooth Low Energy** (**BLE**) module to the project so that the Android
    phone can access the measurements wirelessly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will develop a simple Android app with an interface that allows us to:'
  prefs: []
  type: TYPE_NORMAL
- en: Access all the measurements performed by the weather station with the tap of
    a button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display each measurement within an enlarged text view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you will need for this project is an Arduino Uno board.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you need a BLE module. We chose the Adafruit nRF8001 chip because it comes
    with a nice Arduino library, and it already has existing examples of Android apps
    to control the module. This is the same module that we used in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: For the sensors, I chose a DHT11 sensor to measure the temperature and the ambient
    humidity. DHT11 is a digital temperature and humidity sensor that is really easy
    to integrate with Arduino. There are several solutions available for Arduino,
    but this sensor was chosen because it is one of the easiest to interface with
    Arduino. To make the sensor work with Arduino, we will also need a 4.7K Ohm resistor.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use a photocell in series with a 10K Ohm resistor to measure the
    ambient light level. The photocell is basically a resistor that will change its
    resistance depending on the incoming light on the cell. It will be connected to
    the Arduino analog input to measure the ambient light level.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you will need a breadboard and some jumper wires to make the different
    connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of all hardware parts you will need for this project,
    along with links to find these parts on the Web:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Uno board ([http://www.adafruit.com/product/50](http://www.adafruit.com/product/50))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DHT11 sensor and 4.7K Ohm resistor ([https://www.adafruit.com/products/386](https://www.adafruit.com/products/386))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The photocell ([https://www.sparkfun.com/products/9088](https://www.sparkfun.com/products/9088))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 10K Ohm resistor ([https://www.sparkfun.com/products/8374](https://www.sparkfun.com/products/8374))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adafruit nRF8001 breakout board ([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The breadboard ([https://www.adafruit.com/product/64](https://www.adafruit.com/product/64))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires ([https://www.adafruit.com/product/758](https://www.adafruit.com/product/758))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the software side, you will need the Arduino IDE as usual, and the Arduino
    aREST library, which is found at [https://github.com/marcoschwartz/aREST/](https://github.com/marcoschwartz/aREST/).
  prefs: []
  type: TYPE_NORMAL
- en: The photocell make measurements from the DHT11 sensor, you will need the DHT
    library found at [https://github.com/adafruit/DHT-sensor-library](https://github.com/adafruit/DHT-sensor-library).
  prefs: []
  type: TYPE_NORMAL
- en: For the BLE chip, you will also need the nRF8001 Arduino library found at [https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001).
  prefs: []
  type: TYPE_NORMAL
- en: To install a given library, simply extract the folder in your `Arduino /libraries`
    folder (or create this folder if it doesn't exist yet).
  prefs: []
  type: TYPE_NORMAL
- en: Hardware configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now build the hardware for this project. To help you out, here is a
    schematic of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware configuration](img/0389OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to place the Bluetooth module, the DHT11 sensor, and the photocell
    on the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, connect the power supply from the Arduino board to the breadboard: 5V
    of the Arduino board goes to the red power rail, and **GND** goes to the blue
    power rail.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now connect the BLE module. First, connect the power supply of the
    module: **GND** goes to the blue power rail, and **VIN** goes to the red power
    rail.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, you need to connect the different wires responsible for the SPI
    interface: **SCK** to Arduino pin **13**, **MISO** to Arduino pin **12**, and
    **MOSI** to Arduino pin **11**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, connect the **REQ** pin to Arduino pin **10**. Finally, connect the **RDY**
    pin to Arduino pin **2**, and the **RST** pin to Arduino pin **9**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the DHT sensor, this is the function of each pin on the sensor:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Hardware configuration](img/0389OS_03_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'You need to first connect the power supply: the **VCC** pin goes to the red
    power rail on the breadboard, and the **GND** pin goes to the blue power rail.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You also need to connect the **DATA** pin to pin number **7** of the Arduino
    board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, place the 4.7K Ohm resistor between the **VCC** and the **DATA** pin
    of the sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the photocell, connect the 10K Ohm resistor in series with the photocell.
    This means that one pin of the photocell should be in contact (on the same row
    on the breadboard) with one pin of the resistor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, connect the other pin of the resistor to the blue power rail, and the
    other pin of the photocell to the red power rail of the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, connect the common pin between the photocell and resistor to the analog
    pin **A0** of the Arduino board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is an image of the completely assembled project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Hardware configuration](img/0389OS_03_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Testing the sensors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now write a simple Arduino sketch to test all the sensors of the project.
    This will ensure that all the connections were made correctly before writing our
    Android app using Bluetooth. This is the complete sketch for testing the sensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now look at this sketch in more detail. It starts by including the DHT11
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We also declare that the sensor is attached to pin number 7, and that the DHT
    sensor we are using is a DHT11 sensor by declaring constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we can declare an instance of the DHT sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `setup()` function of the sketch, we will start the serial communications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also initialize the DHT sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `loop()` function of the sketch, we will perform the temperature and
    humidity measurements from the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also read out from the photocell, and convert this reading to a percentage
    of illumination. To do so, we must know that the analog input of the Arduino returns
    a value going from 0 to 1,023 (10 bits). Therefore, we need to divide the reading
    from the input by 1,023\. Then, to get a result in percent, we will multiply this
    value by 100:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When the measurements are done, we print out the value of each of them on the
    serial port so that we can visualize the data. This is for example the code that
    prints out the temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also repeat each `loop()` function every 500 ms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all the code for this chapter can be found inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s now time to test this simple Arduino sketch to check if our sensors are
    working. Upload the sketch to the Arduino board, and open the serial monitor (making
    sure the serial speed is set to 9,600). You should get a similar result inside
    the serial monitor, depending on your surroundings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Writing the Arduino sketch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know that our sensors are working correctly, we can write the final
    sketch that allows the Arduino board to be accessed by the Android application
    we will write later on. The following is the complete sketch for this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s look at this sketch in more detail. Some of the parts are similar
    to the sketch we saw earlier to test the sensor; we will not detail these parts
    again. It starts by declaring that we want to use the lightweight mode of the
    aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will define that we want to use the library for the Bluetooth chip,
    the aREST library, and the library for the DHT sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will define the pins on which we connected the BLE module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create an instance of the aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to create an instance of the BLE module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Just before the `setup()` function of the sketch, we will declare the following
    three variables that contain the measurements coming from the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `setup()` function of the sketch, we will initialize the BLE module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we will set an ID and a name for our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have to expose the different measurement variables to the aREST API
    so that they can be accessed by the Android app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `loop()` function of the sketch, we will poll the status of the BLE
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also get the state of the module and store it in a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If this status indicates that the Bluetooth module is connected to another
    device, we will process the incoming request with the aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all the code for this chapter can be found inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to upload the sketch to your Arduino board. When this is done,
    you can move on to the development of the Android app to control the Arduino board
    via the BLE sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframing our Android application and modifying the layout files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start off our BLE weather station project by creating a new project
    in Android Studio with a blank activity.
  prefs: []
  type: TYPE_NORMAL
- en: We will target our project for a minimum SDK of 18 and a maximum SDK of 19.
  prefs: []
  type: TYPE_NORMAL
- en: We will first start off by drawing a paper prototype of how our application
    will work and the basic user flow, as shown in the following image. This will
    help us understand how the application will work as well as facilitating our development
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing our Android application and modifying the layout files](img/0389OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Upon analyzing the preceding image, we can see that this design will require
    two `TextView` objects. The upper `TextView` object will show all the Bluetooth
    callbacks, state changes, and characteristics written to the BLE module, while
    the lower `TextView` object will show the output from the temperature, light,
    and humidity sensor depending on which button was tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TextView` objects will give them the following IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connectionStatusView`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataOutputTextView`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the lower part of the layout, we will have three buttons reflecting the
    three parameters that we will be requesting, that is, temperature, light, and
    humidity. We will name the buttons as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The temperature button will be named as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: `Temperature`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID**: `temperatureButton`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The humidity button will be named as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: `Humidity`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID**: `humidityButton`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The light button will be named as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: `Light`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID**: `lightButton`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Android layouts in the main activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we embark on this project, we will enable the `Auto-Import` function,
    which will enable us to compile our project even more effectively and gives us
    one thing less to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can enable `Auto-Import` by going to the **Preferences** option and selecting
    all the available options. The **Auto-Import** preferences are available on Mac
    and Windows as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On a Mac, navigate to **Android Studio** > **Preferences** > **Editor** > **Auto-Import**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, navigate to **File** > **Settings** > **Editor** > **Auto-Import**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With all the necessary settings in place, we will first start off by creating
    a new project, where we will choose the following within the **New Project** setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `Bluetooth Weather Station`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum SDK**: `18`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project**: `Blank Activity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity Name**: `MainActivity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain**: `arduinoandroid.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will build on our previous project in [Chapter 2](ch02.html "Chapter 2. Controlling
    an Arduino Board via Bluetooth"), *Controlling an Arduino Board via Bluetooth*,
    that is, the Arduino BLE Android project will start off by importing the `arduinoBLE`
    project from the Github repository and clone it to our desktop or download it
    as a ZIP file as explained in [Chapter 2](ch02.html "Chapter 2. Controlling an
    Arduino Board via Bluetooth"), *Controlling an Arduino Board via Bluetooth*.
  prefs: []
  type: TYPE_NORMAL
- en: Once imported, we will open `MainActivity.java`, select all the code below the
    `import` statement and copy it. When all the code has been copied, we will open
    our current project (Android Bluetooth Weather Station), go into `MainActivity.java`,
    delete all the code below the `import` statement, and paste the code.
  prefs: []
  type: TYPE_NORMAL
- en: In case you get stuck at this stage of the project, our code will be available
    in the repository in two stages, the version with all the necessary code that
    needs to be modified and the completed project. These are all available in the
    GitHub repository at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the code is in our project, we will proceed by changing references to
    the UI elements to reflect our latest additions to the Android layout file in
    the `onCreate()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In this project, we will modify `onClickListeners` to connect to the buttons
    that we have included in the Android layout file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also modify the code that deals with writing `remoteCharacteristics`,
    namely, the `writeLine()` method, and in addition, we will add another method
    known as `writeSensorData()`, which will deal with the remote data arriving from
    our different sensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we are able to move ahead with compiling the project, we need to work
    on the `onCharacteristicChanged` method so that the data that is received from
    the sensor data will be set to the `dataOutput` text view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point in time, the project will be unable to function as the necessary
    permissions have not been implemented yet. User permissions are necessary as it
    allows the application to access different capabilities of the device. In this
    case, we will need to add the following two permissions within the `AndroidManifest.xml`
    file, which you will find by navigating to `app` > `src` > `main` > `AndroidManifest.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When we perform all these changes, we should expect the rudimentary user interface
    to look as follows, with the sensor data showing up after tapping on the different
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Android layouts in the main activity](img/0389OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enhancing the user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The current user interface requires further enhancements to make it user friendly.
    One can easily notice that the sensor data output needs to be enlarged and centered
    and the buttons can definitely be more attractive. Also, we want to make sure
    that our Weather Station app stands out from the user's current list of apps,
    so our app would definitely benefit from a change in the icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will work on the following main tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and adding our very own Android app icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centering and enlarging the data output text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the buttons and adding some color to our text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and adding our very own app icon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of our very first steps to enhance the user experience is to have our very
    own icon.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will start off by downloading the image asset. This is available publicly
    at [http://bit.ly/chapter3-iclauncher](http://bit.ly/chapter3-iclauncher).
  prefs: []
  type: TYPE_NORMAL
- en: 'You should navigate using the project tree, followed by a right-click on `app`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and adding our very own app icon](img/0389OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you right-click on `app`, create a new image asset by going to **New**
    > **Image Asset**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and adding our very own app icon](img/0389OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then be shown an **Asset Studio** pop-up window, which will allow
    you to choose your very own image file. For optimization purposes, we recommend
    going for a `.png` file with a resolution of 144 pixels by 144 pixels. Android
    Studio automatically does all the resizing and resource creation to adapt your
    graphic to different screens, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and adding our very own app icon](img/0389OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you choose the `ic_launcher` image file, which we have provided you with,
    you will be shown a screen with the icon in different sizes. Click on **Next**,
    where you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and adding our very own app icon](img/0389OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screen warns you that previous files will be overwritten and
    shows you the image launcher file in a number of different resolutions once again.
    Click on **Finish**, then compile the app, launch it on your physical device,
    and you should see something as pleasant as the following in your app tray and
    in the app''s action bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and adding our very own app icon](img/0389OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the app''s action bar will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and adding our very own app icon](img/0389OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Centering and enlarging the data output text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to edit the layout for the main text output where the sensor data will
    be shown, we will need to open the project tree and navigate towards the layout
    file, which is available at `app` > `src` > `main` > `res` > `layout` > `activity_main_screen.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Once in this view, we recommend that you modify the text using the text view.
    This will allow you finer control and will also get you used to the different
    conventions used when editing Android layout files programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'When opening the `activity_main_screen.xml` file, we will be seeing the different
    XML codes for the buttons and text views. At this point, look out for the code
    that takes care of the `Sensor Data Output` TextView and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The whole block of code responsible for the `Sensor Data Output` TextView will
    now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In this block of code, we have temporarily used the placeholder text `99` so
    that we can approximate how it will look with the Android layout designer. With
    this modification, the sensor data output is now big enough to be seen by the
    user, thus enhancing the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the buttons and adding some color to our text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we will modify our buttons and add some color to the text by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will follow these two steps to create new buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `drawable` folder with a new XML drawable file known as `buttonshape.xml`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We will then connect the drawable resource file to the main Android layout file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `drawable` folder by right-clicking on the `res` folder, which is
    available by navigating to `App` > `src` > `main` > `res`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating the `drawable` folder within the `res` folder, we need to once
    again right-click on the new `drawable` folder and click on **New** and choose
    **Drawable resource file**, as shown in the following screenshot:![Modifying the
    buttons and adding some color to our text](img/0389OS_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `buttonshape` and type down `shape` as the **Root element** followed
    by clicking on **OK**, as shown in the following screenshot:![Modifying the buttons
    and adding some color to our text](img/0389OS_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the `buttonshape.xml` file, we will add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we go towards the `activity_main_screen.xml` file and refer to this drawable
    by including the following line of code within the button modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also add some flavor by adding the following line of code to the button
    and TextView modules within the `activity_main_screen.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, `#4A90E2` refers to the hex code of the main color used
    in the app icon so that we maintain some consistency with the main user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final layout will look as follows on a Nexus 5 smartphone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the buttons and adding some color to our text](img/0389OS_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's important to note that different Android devices have different dimensions.
    So, for your specific Android device, you might need to do further optimizations
    within the Android layout files to improve the interface.
  prefs: []
  type: TYPE_NORMAL
- en: How to go further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A large number of improvements could be done towards improving the user interface
    process within the Android app. Currently, service discovery is refreshed only
    by physically rotating the device, as the `onResume()` method is called upon rotation
    of the device. This could easily be improved by adding a refresh icon in the action
    bar and connecting this icon to the code, so that this method is called when the
    icon is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, further user interface customizations can make it possible to
    personalize the app to your own liking; with regards to this app, you can get
    an idea of the possibilities by looking at the following links from the Android
    developers site:'
  prefs: []
  type: TYPE_NORMAL
- en: Button widget documentation at [http://developer.android.com/reference/android/widget/Button.html](http://developer.android.com/reference/android/widget/Button.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TextView documentation at [http://developer.android.com/reference/android/widget/TextView.html](http://developer.android.com/reference/android/widget/TextView.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can even expand the app further with real-time monitoring, statistics, and
    trends.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a simple weather station using Arduino and Android.
    We attached several sensors to our Arduino board, along with a Bluetooth Low Energy
    module. We also built the corresponding Android app so that we can access all
    the data measured by the Arduino board just by tapping on a button of the phone.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will use a different technology to interact with an
    Arduino board via Android: Wi-Fi. We will build a smart power switch, to control
    an electrical device remotely, and also to measure the device power consumption
    via Wi-Fi.'
  prefs: []
  type: TYPE_NORMAL
