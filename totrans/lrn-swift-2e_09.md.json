["```swift\nstruct FibonacciGenerator: GeneratorType {\n    typealias Element = Int\n\n    var values = (0, 1)\n\n    mutating func next() -> Element? {\n        self.values = (\n            self.values.1,\n            self.values.0 + self.values.1\n        )\n        return self.values.0\n    }\n}\n```", "```swift\nclass ATM {\n    var onCashWithdrawn: ((amount: Double) -> ())?\n\n    func withdrawCash(amount: Double) {\n        // other work\n\n        // Notify observer if any\n        if let callback = self.onCashWithdrawn {\n            callback(amount: amount)\n        }\n    }\n}\n```", "```swift\nclass RecordKeeper {\n    var transactions = [Double]()\n\n    func watchATM(atm: ATM) {\n        atm.onCashWithdrawn = { [weak self] amount in\n            self?.transactions.append(amount)\n        }\n    }\n}\n```", "```swift\nclass ATMWithdrawalNotificationCenter {\n    typealias Callback = (amount: Double) -> ()\n    private var observers: [String:Callback] = [:]\n\n    func trigger(amount: Double) {\n        for (_, callback) in self.observers {\n            callback(amount: amount)\n        }\n    }\n\n    func addObserverForKey(key: String, callback: Callback) {\n        self.observers[key] = callback\n    }\n\n    func removeObserverForKey(key: String) {\n        self.observers[key] = nil\n    }\n}\n```", "```swift\nclass View {\n    var color: (red: Float, green: Float, blue: Float)\n        = (1, 1, 1) // white\n    var position: (x: Float, y: Float) = (0, 0)\n    var size: (width: Float, height: Float)\n    var subviews = [View]()\n\n    init(size: (width: Float, height: Float)) {\n        self.size = size\n    }\n}\n```", "```swift\nlet rootView = View(size: (width: 100, height: 100))\n\nlet leftView = View(size: (width: rootView.size.width / 2, height: rootView.size.height))\nleftView.color = (red: 1, green: 0, blue: 0)\nrootView.subviews.append(leftView)\n\nlet rightView = View(size: (width: rootView.size.width / 2, height: rootView.size.height))\nrightView.color = (red: 0, green: 0, blue: 1)\nrightView.position = (x: rootView.size.width / 2, y: 0)\nrootView.subviews.append(rightView)\n\nlet upperRightView = View(size: (width: rightView.size.width, height: rootView.size.height / 2))\nupperRightView.color = (red: 0, green: 1, blue: 0)\nrightView.subviews.append(upperRightView)\n```", "```swift\nstruct Sentence {\n    var words: [String]\n\n    enum Type: String {\n        case Statement = \".\"\n        case Question = \"?\"\n        case Exclamation = \"!\"\n    }\n\n    var type: Type\n}\n```", "```swift\nstruct Sentence {\n    // ..\n\n    var string: String {\n        return self.words.joinWithSeparator(\" \")\n            + self.type.rawValue\n    }\n}\n\nlet sentence = Sentence(words: [\n    \"This\", \"is\",\n    \"a\", \"sentence\"\n], type: .Statement)\nprint(sentence.string) // \"This is a sentence.\"\n```", "```swift\nclass AddressBook {\n    static let sharedInstance = AddressBook()\n\n    func logContacts() {\n        // ...\n    }\n}\n```", "```swift\nAddressBook.sharedInstance.logContacts()\n```", "```swift\nclass AddressBook {\n    static let singleton = AddressBook()\n\n    private init() {}\n\n    func logContacts() {\n        // ...\n    }\n}\n\nAddressBook.singelton.logContacts()\n```", "```swift\nstruct Ball {\n    let color: String\n    let owningPlayer: Int\n}\n```", "```swift\nstruct BallFactory {\n    let color: String\n    let owningPlayer: Int\n\n    func createNewBall() -> Ball {\n        return Ball(\n            color: self.color,\n            owningPlayer: self.owningPlayer\n        )\n    }\n}\n\nlet player1Factory = BallFactory(\n    color: \"Red\", owningPlayer: 1\n)\nlet player2Factory = BallFactory(\n    color: \"Green\", owningPlayer: 1\n)\n\nlet ball1 = player1Factory.createNewBall()\n```", "```swift\nenum Height {\n    case Imperial(feet: Int, Inches: Double)\n    case Metric(meters: Double)\n    case Other(String)\n}\n```", "```swift\nenum Workout {\n    case ForTime(seconds: Int)\n    case ForReps(movements: [(name: String, reps: Int)])\n}\n```", "```swift\nenum NumberResult {\n    case Success(value: Int)\n    case Failure(reason: String)\n}\n```", "```swift\nfunc divide(first: Int, by second: Int) -> NumberResult {\n    guard second != 0 else {\n        return .Failure(reason: \"Cannot divide by zero\")\n    }\n    return .Success(value: first / second)\n}\n```", "```swift\nenum DownloadState {\n    case Pending\n    case InProgress(percentComplete: Float)\n    case Complete(data: String)\n}\n```", "```swift\nextension Float {\n    var percentString: String {\n        return \"\\(self * 100)%\"\n    }\n}\nlet myPercent: Float = 0.32\nprint(myPercent.percentString) // 32.0%\n```", "```swift\nstruct Percent: CustomStringConvertible {\n    let value: Float\n\n    var description: String {\n        return \"\\(self.value * 100)%\"\n    }\n}\nprint(Percent(value: 0.3))\n```", "```swift\nstruct MyType {\n    lazy var largeString = \"Some String\"\n}\nlet instance = MyType()\n```", "```swift\nclass Directory {\n    lazy var subFolders: [Directory] = {\n        var loaded = [Directory]()\n        // Load subfolders into 'loaded'\n        return loaded\n    }()\n}\n```"]