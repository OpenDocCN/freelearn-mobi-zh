["```swift\n    self.physicsWorld.gravity = CGVectorMake(0.0f, 0.0f);\n    ```", "```swift\n    // 1 Create a physics body that borders the screen\n    SKPhysicsBody* gameBorderBody = [SKPhysicsBody bodyWithEdgeLoopFromRect:self.frame];\n    // 2 Set physicsBody of scene to gameBorderBody\n    self.physicsBody = gameBorderBody;\n    // 3 Set the friction of that physicsBody to 0\n    self.physicsBody.friction = 0.0f;\n    ```", "```swift\n    // 1\n    SKSpriteNode* gameObject = [SKSpriteNode spriteNodeWithImageNamed: @\"object.png\"];\n    gameObject.name = @\"game_object\";\n    gameObject.position = CGPointMake(self.frame.size.width/3, self.frame.size.height/3);\n    [self addChild:gameObject];\n\n    // 2\n    gameObject.physicsBody = [SKPhysicsBody bodyWithCircleOfRadius:gameObject.frame.size.width/2];\n    // 3\n    gameObject.physicsBody.friction = 0.0f;\n    ```", "```swift\n    [gameObject.physicsBody applyForce:CGVectorMake(10.0f, -10.0f)];\n    ```", "```swift\n    [gameObject.physicsBody applyImpulse:CGVectorMake(10.0f, -10.0f)];\n    ```", "```swift\n    SKSpriteNode* box = [[SKSpriteNode alloc] initWithImageNamed: @\"box.png\"];\n    box.name = @\"box_object\";\n    box.position = CGPointMake(CGRectGetMidX(self.frame), box.frame.size.height * 0.6f);\n    [self addChild:box];\n    box.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:box.frame.size];\n    box.physicsBody.friction = 0.4f;\n    // make physicsBody static\n    box.physicsBody.dynamic = NO;\n    ```", "```swift\n    -(id)initWithSize:(CGSize)size {\n        if (self = [super initWithSize:size]) {\n            SKSpriteNode* background = [SKSpriteNode spriteNodeWithImageNamed:@\"bg.png\"];\n            background.position = CGPointMake(self.frame.size.width/2, self.frame.size.height/2);\n            [self addChild:background];\n        }\n    }\n    ```", "```swift\n    -(void)viewWillLayoutSubviews {\n        [super viewWillLayoutSubviews];\n\n        // Configure the view.\n        SKView * skView = (SKView *)self.view;\n        if (!skView.scene) {\n            skView.showsFPS = YES;\n            skView.showsNodeCount = YES;\n\n            // Create and configure the scene.\n            GameScene * scene = [GameScene sceneWithSize:skView.bounds.size];\n            scene.scaleMode = SKSceneScaleModeAspectFill;\n\n            // Present the scene.\n            [skView presentScene:scene];\n        }\n    }\n    ```", "```swift\n    self.physicsWorld.gravity = CGVectorMake(0.0f, 0.0f);\n    ```", "```swift\n    // 1 Create a physics body that borders the screen\n    SKPhysicsBody* gameborderBody = [SKPhysicsBody bodyWithEdgeLoopFromRect:self.frame];\n    // 2 Set physicsBody of scene to borderBody\n    self.physicsBody = gameborderBody;\n    // 3 Set the friction of that physicsBody to 0\n    self.physicsBody.friction = 0.0f;\n    ```", "```swift\n    // 1\n    SKSpriteNode* circlularObject = [SKSpriteNode spriteNodeWithImageNamed: @\"ball.png\"];\n    circlularObject.name = ballCategoryName;\n    circlularObject.position = CGPointMake(self.frame.size.width/3, self.frame.size.height/3);\n    [self addChild:circlularObject];\n\n    // 2\n    circlularObject.physicsBody = [SKPhysicsBody bodyWithCircleOfRadius:circlularObject.frame.size.width/2];\n    // 3\n    circlularObject.physicsBody.friction = 0.0f;\n    // 4\n    circlularObject.physicsBody.restitution = 1.0f;\n    // 5\n    circlularObject.physicsBody.linearDamping = 0.0f;\n    // 6\n    circlularObject.physicsBody.allowsRotation = NO;\n    ```", "```swift\n    [circlularObject.physicsBody applyImpulse:CGVectorMake(10.0f, -10.0f)];\n    ```", "```swift\n    SKSpriteNode* block = [[SKSpriteNode alloc] initWithImageNamed: @\"block.png\"];\n    block.name = paddleCategoryName;\n    block.position = CGPointMake(CGRectGetMidX(self.frame), block.frame.size.height * 0.6f);\n    [self addChild:block];\n    block.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:block.frame.size];\n    block.physicsBody.restitution = 0.1f;\n    block.physicsBody.friction = 0.4f;\n    // make physicsBody static\n    block.physicsBody.dynamic = NO;\n    ```", "```swift\n    -(void)touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event;\n    -(void)touchesMoved:(NSSet*)touches withEvent:(UIEvent*)event;\n    -(void)touchesEnded:(NSSet*)touches withEvent:(UIEvent*)event;\n    ```", "```swift\n    @interface GameScene()\n\n    @property (nonatomic) BOOL isPaddleTapped;\n\n    @end\n    ```", "```swift\n    -(void)touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event {\n\n        UITouch* touch = [touches anyObject];\n        CGPoint touchLocation = [touch locationInNode:self];\n\n        SKPhysicsBody* body = [self.physicsWorld bodyAtPoint:touchLocation];\n        if (body && [body.node.name isEqualToString: paddleCategoryName]) {\n            NSLog(@\"touch began on paddle\");\n            self.isPaddleTapped = YES;\n        }\n    }\n    ```", "```swift\n    -(void)touchesMoved:(NSSet*)touches withEvent:(UIEvent*)event {\n\n        if (self.isPaddleTapped) {\n            // 2 Get touch location\n            UITouch* touch = [touches anyObject];\n            CGPoint touchLocation = [touch locationInNode:self];\n            CGPoint previousLocation = [touch previousLocationInNode:self];\n            // 3 Get node for paddle\n            SKSpriteNode* paddle = (SKSpriteNode*)[self childNodeWithName: paddleCategoryName];\n            // 4 Calculate new position along x for paddle\n            int paddleX = paddle.position.x + (touchLocation.x - previousLocation.x);\n            // 5 Limit x so that the paddle will not leave the screen to left or right\n            paddleX = MAX(paddleX, paddle.size.width/2);\n            paddleX = MIN(paddleX, self.size.width - paddle.size.width/2);\n            // 6 Update position of paddle\n            paddle.position = CGPointMake(paddleX, paddle.position.y);\n        }\n    }\n    ```", "```swift\n    -(void)touchesEnded:(NSSet*)touches withEvent:(UIEvent*)event {\n        self.isPaddleTapped = NO;\n    }\n    ```"]