["```java\n<project name=\"sampleProject\" default=\"makeJar\" basedir=\".\">\n\n<property name=\"src\" location=\"src/main/java\"/>\n<property name=\"build\" location=\"build\"/>\n<property name=\"classes\" location=\"build/classes\"/>\n<property name=\"libs\" location=\"build/libs\"/>\n<property name=\"distributions\" location=\"build/distributions\"/>\n<property name=\"version\" value=\"1.0\"/>\n\n<target name=\"setup\" depends=\"clean\">\n   <mkdir dir=\"${classes}\"/>\n   <mkdir dir=\"${distributions}\"/>\n</target>\n\n<target name=\"compile\" depends=\"setup\" description=\"compile the source\">\n   <javac srcdir=\"${src}\" destdir=\"${build}/classes\"  includeantruntime=\"false\"/>\n</target>\n<target name=\"makeJar\" depends=\"compile\" description=\"generate the distributions\">\n   <jar jarfile=\"${libs}/sampleproject-${version}.jar\" basedir=\"${classes}\"/>\n</target>\n<target name=\"clean\" description=\"clean up\">\n   <delete dir=\"${build}\"/>\n</target>\n\n<target name=\"zip\" description=\"zip the jar and checksum\" depends=\"makeJar,checksum\">\n   <zip destfile=\"${distributions}/sampleproject.zip\" filesonly=\"true\" basedir=\"${libs}\" includes=\"*.checksum,*.jar\"  />\n</target>\n\n<target name=\"checksum\" description=\"generate checksum and store in file\" depends=\"makeJar\">\n   <checksum file=\"${libs}/sampleproject-${version}.jar\" property=\"sampleMD5\"/>\n   <echo file=\"${libs}/sampleproject.checksum\" message=\"checksum=${sampleMD5}\"/>\n</target>\n\n<target name=\"GradleProperties\">\n<echo message=\"Gradle comments are:: ${comments}\"/>\n</target>\n\n</project>\n```", "```java\nSampleProject$ ant makeJar\nBuildfile: <path>/Chapter8/SampleProject/build.xml\n\nclean:\n [delete] Deleting directory <path>/Chapter8/SampleProject/build\n\nsetup:\n [mkdir] Created dir: <path>/Chapter8/SampleProject/build/classes\n [mkdir] Created dir: <path>/Chapter8/SampleProject/build/distributions\n\ncompile:\n [javac] Compiling 2 source files to <path>/Chapter8/SampleProject/build/classes\n\nmakeJar:\n [jar] Building jar: <path>/Chapter8/SampleProject/build/libs/sampleproject-1.0.jar\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\n```", "```java\n$ ant zip\n\n```", "```java\nant.importBuild 'build.xml'\n\n```", "```java\n$ gradle -b build_import.gradle zip\n::clean\n:setup\n:compile\n:makeJar\n:checksum\n:zip\n\nBUILD SUCCESSFUL\n\n```", "```java\nant.importBuild 'build.xml'\n\ndef antVersion = ant.properties['version']\ndef src = ant.properties['src']\n\ntask showAntProperties << {\n      println \"Ant Version is \"+ antVersion\n      println \"Source location is \"+ src\n\n}\n```", "```java\n$ gradle -b build_import.gradle sAP\n\n:showAntProperties\nAnt Version is 1.0\nSource location is D:\\Chapter8\\SampleProject\\src\\main\\java\n\nBUILD SUCCESSFUL\n\n```", "```java\nant.properties['comments'] = \"This comment added in Gradle\"\n\n```", "```java\n<target name=\"GradleProperties\">\n   <echo message=\"Gradle comments are ${comments}\"/>\n</target>\n```", "```java\n$ gradle  -b build_import.gradle GradleProperties\n\nStarting Build\n...\nExecuting task ':GradleProperties' (up-to-date check took 0.015 secs) due to:\n Task has not declared any outputs.\n[ant:echo] Gradle comments are:: This comments added in Gradle\n:GradleProperties (Thread[main,5,main]) completed. Took 0.047 secs.\n\nBUILD SUCCESSFUL\n\n```", "```java\nGradleProperties.doFirst {\n   println \"Adding additional behavior before Ant task operations\"\n}\nGradleProperties.doLast {\n   println \"Adding additional behavior after Ant Task operations\"\n}\n```", "```java\n$ gradle -b build_import.gradle GP\n\nStarting Build\n……\n:GradleProperties (Thread[main,5,main]) started.\n:GradleProperties\nExecuting task ':GradleProperties' (up-to-date check took 0.003 secs) due to:\n Task has not declared any outputs.\nAdding additional behavior before Ant task operations\n[ant:echo] Gradle comments are:: This comments added in Gradle\nAdding additional behavior after Ant Task operations\n:GradleProperties (Thread[main,5,main]) completed. Took 0.158 secs.\n\nBUILD SUCCESSFUL\n\n```", "```java\n    <project \n    name=\"qualitycheck\" default=\"makeJar\" \n    basedir=\".\">\n\n    <property name=\"src\" location=\"src/main/java\"/>\n    <property name=\"build\" location=\"build\"/>\n    <property name=\"lib\" location=\"lib\"/>\n    <property name=\"dist\" location=\"dist\"/>\n    <property name=\"version\" value=\"1.0\"/>\n    ```", "```java\n    defaultTasks \"makeJar\"\n\n    def src = \"src/main/java\"\n    def build = \"build\"\n    def libs = \"build/libs\"\n    def classes = \"build/classes\"\n    def distributions = \"build/distributions\"\n    def version = 1.0\n    ```", "```java\n    <delete dir=\"${build}\"/>\n    ```", "```java\n    ant.delete(dir:\"${build}\")\n    ```", "```java\n    <mkdir dir=\"${classes}\"/>\n    <mkdir dir=\"${distributions}\"/>\n    ```", "```java\n    ant.mkdir(dir:\"${libs}\")\n    ant.mkdir(dir:\"${classes}\")\n    ```", "```java\n    <javac srcdir=\"${src}\"\n    destdir=\"${build}/classes\" \n    includeantruntime=\"false\"/>\n    ```", "```java\n    ant.javac(srcdir:\"${src}\",\n    destdir:\"${classes}\",\n    includeantruntime:\"false\")\n    ```", "```java\n    <jar jarfile \n    =\"${libs}/sampleproject-${version}.jar\" \n    basedir=\"${classes}\"\n    />\n    ```", "```java\n    ant.jar(\n    destfile: \"${libs}/sampleproject-${version}.jar\",\n    basedir:\"${classes}\") \n    ```", "```java\n    <checksum file=\"${libs}/sampleproject-${version}.jar\" \n    property=\"sampleMD5\"/>\n\n    <echo file =\"${libs}/sampleproject.checksum\" message=\"checksum=${sampleMD5}\"\n    />\n    ```", "```java\n    ant.checksum(\n    file:\"${libs}/sampleproject-${version}.jar\",\n    property:\"sampleMD5\"\n    )\n\n    ant.echo(file:\"${libs}/sampleproject.checksum\",\n    message:\"checksum=${ant.sampleMD5}\"\n    )\n    ```", "```java\n    <zip \n    destfile =\"${distributions}/sampleproject.zip\" \n    filesonly=\"true\" basedir=\"${libs}\" includes=\"*.checksum,*.jar\" \n     />\n    ```", "```java\n    ant.zip(destfile: \"${dist}/sampleproject.zip\",\n    basedir:\"dist\") \n    ```", "```java\ndefaultTasks \"makeJar\"\n\ndef src=\"img/java\"\ndef build=\"build\"\ndef libs=\"build/libs\"\ndef classes = \"build/classes\"\ndef distributions=\"build/distributions\"\ndef version=1.0\n\ntask setup(dependsOn:'clean') << {\n   ant.mkdir(dir:\"${libs}\")\n   ant.mkdir(dir:\"${classes}\")\n}\n\ntask clean << {\n   ant.delete(dir:\"${build}\")\n}\n\ntask compileProject(dependsOn:'setup') << {\n   ant.javac(srcdir:\"${src}\",destdir:\"${classes}\",\nincludeantruntime:\"false\")\n}\n\ntask makeJar << {\n   ant.jar(destfile: \"${libs}/sampleproject-${version}.jar\",\nbasedir:\"${classes}\") \n}\n\ntask zip(dependsOn:'checksum') << {\n   ant.zip(destfile: \"${distributions}/sampleproject.zip\",\nbasedir:\"${libs}\")\n}\n\ntask checksum(dependsOn:'makeJar') << {\n   ant.checksum(file:\"${libs}/sampleproject-${version}.jar\",\nproperty:\"sampleMD5\")\n   ant.echo(file:\"${libs}/sampleproject.checksum\",\nmessage:\"checksum=${ant.sampleMD5}\")\n}\n\nmakeJar.dependsOn compileProject\n```", "```java\n$ gradle -b build_ant.gradle zip\n:clean\n:setup\n:compileProject\n:makeJar\n:checksum\n:zip\n\nBUILD SUCCESSFUL\n\n```", "```java\napply plugin :'java'\nversion = 1.0\n```", "```java\n$ gradle build\n\n:clean\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:jar\n:assemble\n:compileTestJava UP-TO-DATE\n:processTestResources UP-TO-DATE\n:testClasses UP-TO-DATE\n:test UP-TO-DATE\n:check UP-TO-DATE\n:build\n\nBUILD SUCCESSFUL\n\n```", "```java\napply plugin:'java'\nversion = 1.0\n\ntask zip(type: Zip) {\n    from \"${libsDir}\"\n    destinationDir project.distsDir\n}\n\ntask checksum << {\n\tant.checksum(file:\"${libsDir}/${project.name}-${version}.jar\",property:\"sampleMD5\")\n\tant.echo(file:\"${libsDir}/${project.name}.checksum\",message:\"checksum=${ant.sampleMD5}\")\n}\n\nzip.dependsOn checksum\nchecksum.dependsOn build\n```", "```java\n$ gradle clean zip\n\n:clean\n:compileJava\n:processResources UP-TO-DATE\n:classes\n....\n:check UP-TO-DATE\n:build\n:checksum\n:zip\n\nBUILD SUCCESSFUL\n\n```", "```java\n    <target \n    name=\"clean\" description=\"clean up\">\n\n       <delete dir =   \"${build}\"/>\n\n        <delete dir = \"${dist}\"/>\n    </target>\n    ```", "```java\n    task cleanDir(type: Delete) {\n      delete \"${build}\"\n    }\n    ```", "```java\n    <target \n    name=\"setup\" depends=\"clean\">\n\n       <mkdir dir =  \"${build}\"/>\n    </target>\n    ```", "```java\n    task setup(dependsOn:'cleanDir') << {\n            def classesDir = file(\"${classes}\")\n            def distDir = file(\"${distributions}\")\n            classesDir.mkdirs()\n            distDir.mkdirs()\n    }\n    ```", "```java\n    <target name=\"compile\" depends=\"setup\" description=\"compile the source\">\n        <javac srcdir=\"${src}\" destdir=\"${build}\" />\n    </target>\n    ```", "```java\n    compileJava {\n            File classesDir = file(\"${classes}\")\n            FileTree srcDir = fileTree(dir: \"${src}\")\n            source srcDir\n            destinationDir classesDir\n    }\n    ```", "```java\n    <target name=\"dist\" depends=\"compile\" description=\"generate the distribution\">\n       <mkdir dir=\"${dist}\"/>\n       <jar jarfile=\"${dist}/sampleproject-${version}.jar\" basedir=\"${build}\"/>\n    </target>\n    ```", "```java\n    task myJar(type: Jar) {\n            manifest {\n            attributes 'Implementation-Title': 'Sample Project',\n                    'Implementation-Version': version,\n                    'Main-Class': 'com.test.SampleTask'\n        }\n        baseName = project.name +\"-\" +version\n        from \"build/classes\"\n        into project.libsDir\n    }\n    ```", "```java\napply plugin:'java'\n\ndef src=\"img/java\"\ndef build=\"$buildDir\"\ndef libs=\"$buildDir/libs\"\ndef classes = \"$buildDir/classes\"\ndef distributions=\"$buildDir/distributions\"\ndef version=1.0\n\ntask setup(dependsOn:'cleanDir') << {\n   def classesDir = file(\"${classes}\")\n   def distDir = file(\"${distributions}\")\n   classesDir.mkdirs()\n   distDir.mkdirs()\n}\n\ntask cleanDir(type: Delete) {\n  delete \"${build}\"\n}\n\ncompileJava {\n   File classesDir = file(\"${classes}\")\n   FileTree srcDir = fileTree(dir: \"${src}\")\n   source srcDir\n   destinationDir classesDir\n}\ntask myJar(type: Jar) {\n   manifest {\n        attributes 'Implementation-Title': 'Sample Project',  \n        \t'Implementation-Version': version,\n        \t'Main-Class': 'com.test.SampleTask'\n    }\n    baseName = project.name +\"-\" +version\n    from \"build/classes\"\n    into project.libsDir\n}\ntask zip(type: Zip) {\n    from \"${libsDir}\"\n    destinationDir project.distsDir\n}\ntask checksum << {\n   ant.checksum(file:\"${libsDir}/${project.name}-${version}.jar\",\n   property:\"sampleMD5\")\n   ant.echo(file:\"${libsDir}/${project.name}.checksum\",\n   message:\"checksum=${ant.sampleMD5}\")\n}\n\nmyJar.dependsOn setup\ncompileJava.dependsOn myJar\nchecksum.dependsOn compileJava\nzip.dependsOn checksum\n```", "```java\n$ gradle -b build_conf.gradle zip\n:cleanDir\n:setup\n:myJar\n:compileJava\n:checksum\n:zip\n\nBUILD SUCCESSFUL\n\n```", "```java\n<properties>\n     <src>src/main/java\n     </src>\n    <build>build</build>\n     <classes>\n       build/classes\n    </classes>\n    <libs>\n        build/libs\n    </libs>\n<distributions>\n     build/distributions\n     </distributions>\n    <version>\n        1.0\n     </version>\n</properties>\n```", "```java\ndef src=\"img/java\"\ndef build=\"build\"\ndef lib=\"lib\"\ndef dist=\"dist\"\ndef version=1.0\n```", "```java\n<dependency>\n<groupId>org.apache.commons</groupId>\n<artifactId>commons-lang3</artifactId>\n<version>3.1</version>\n<scope>compile</scope>\n</dependency>\n```", "```java\ndependencies {\n    compile group:  'org.apache.commons', name: 'commons-lang3', version:'3.1'\n}\n```", "```java\n<dependencies>\n    <dependency>\n      <groupId>\n          commons-httpclient\n      </groupId>\n      <artifactId>\n          commons-httpclient\n       </artifactId>\n      <version>3.1</version>\n      <exclusions>\n        <exclusion>\n          <groupId>\n            commons-codec\n           </groupId>\n          <artifactId>\n             commons-codec\n          </artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    ...\n  </dependencies>\n\n```", "```java\ndependencies{\n\ncompile('commons-httpclient:commons-httpclient:3.1') {\n exclude group:'commons-codec',\nmodule:'commons-codec'\n}\n\n}\n```", "```java\n<build>\n<plugins>\n<plugin>\n<artifactId>maven-compiler-plugin</artifactId>\n<version>2.3.2</version>\n<configuration>\n<source>1.7</source>\n<target>1.7</target>\n</configuration>\n</plugin>\n</plugins>\n</build>\n```", "```java\nbuildscript {\next {\nspringBootVersion = '1.2.2.RELEASE'\n}\nrepositories {\njcenter()\nmaven { url \"http://repo.spring.io/snapshot\" }\nmaven { url \"http://repo.spring.io/milestone\" }\n}\ndependencies {\nclasspath(\"org.springframework.boot:spring-boot-gradle-plugin:1.2.2.RELEASE\")\n}\n}\n```", "```java\n<repositories>\n    <repository>\n      <id>rep1</id>\n      <name>org repo1</name>\n      <url>\n       http://company.repository1\n       </url>\n    </repository>\n</repositories>\n\n```", "```java\nrepositories {\nmaven {\nurl \"http://company.repository1\"\n}\n}\n```", "```java\n<project>\n  <groupId>\n    com.test.multiproject\n   </groupId>\n   <artifactId>\n     rootproject\n  </artifactId>\n  <version>\n     1.0\n  </version>\n  <packaging>\n     Pom\n  </packaging>\n  <modules>\n    <module>subproject1</module>\n    <module>subproject2</module>\n  </modules>\n</project>\n\n```", "```java\ninclude 'subproject1', 'subproject2',\n```", "```java\n<project \n\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n\n   <groupId>ch8.example</groupId>\n   <artifactId>SampleMaven</artifactId>\n   <version>1.0</version>\n   <packaging>jar</packaging>\n   <dependencies>\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n       <version>3.1</version>\n       <scope>compile</scope>\n     </dependency>\n   </dependencies>\n </project>\n```", "```java\n$ gradle init --type pom\n:wrapper\n:init\nMaven to Gradle conversion is an incubating feature.\n\nBUILD SUCCESSFUL\n\n```", "```java\napply plugin: 'java'\napply plugin: 'maven'\n\ngroup = 'ch8.example'\nversion = '1.0'\ndescription = \"\"\"\"\"\"\n\nsourceCompatibility = 1.5\ntargetCompatibility = 1.5\n\nrepositories {\n     maven { url \"http://repo.maven.apache.org/maven2\" }\n}\n\ndependencies {\n    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.1'\n}\n```"]