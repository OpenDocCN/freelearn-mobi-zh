- en: Chapter 2. User Interfaces – Creating the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding and customizing views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using labels to display text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining user input through the use of buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying an image within the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying and editing text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the iOS device keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the progress to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a toolbar object to a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fading a view in and out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom table view controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a table view to a view controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling different iOS devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An application's user interface which is comprised of views and other elements,
    is the first thing the user sees when he/she loads up your application and provides
    him/her with an easy way of communicating with your application.
  prefs: []
  type: TYPE_NORMAL
- en: The user interface consists of a canvas, and acts as a placeholder for your
    controls that the user can communicate with. In most real-world applications,
    views alone are simply not enough. Apple provides you with another class called
    `UIViewController`, which is responsible for managing views.
  prefs: []
  type: TYPE_NORMAL
- en: View controllers can respond to device notifications, such as determining when
    the device rotates, or can provide you with different ways of displaying and dismissing
    multiple views or even other view controllers.
  prefs: []
  type: TYPE_NORMAL
- en: We will also see how to use some of the most common view controllers to create
    our own custom classes. In this chapter, we will look at how we can add and customize
    views, as well as apply transitions to these to have them fade in and out. We
    will also take a look at some of the device specific aspects of the device, to
    determine its current orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and customizing views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how we can add a new `UIView` object to our
    existing view using Interface Builder and take a look at how we can customize
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by creating a new project using Xcode, and then use Interface
    Builder to help us add a new `UIView` object, so let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin with creating a new Xcode project, perform the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Developer/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create a new Xcode project**, or click on **File** | **New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Single View Application** from the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter `ViewObjectsExample` as the name for your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **iPhone** from under the **Devices** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Storyboards** checkbox has not been checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Automatic Reference Counting** checkbox has been checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Include Unit Tests** checkbox has not been checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the location where you would like to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to save your project at the specified location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your project has been created, you will be presented with the Xcode development
    environment along with the project files that the template created for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to start building our user interface, which can be achieved by
    performing the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` file from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Object Library**, drag a **View** object onto the main view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the necessary outlet and property for this view, and name it `subView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the new view that we just added and from the **Size Inspector**
    tab, set the **Y** property to **44** points, the **Width** property to **320**
    Points, and the **Height** property to **480** points.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, save your project by selecting **File** | **Save**, or alternatively by
    pressing *command* + *S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear with your application
    that we just created and displayed showing a view with a white background.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created an application that consists of a subview, which does not provide
    any functionality. In iOS applications, views are one of the important components
    that make up an application's user interface that inherits from the `UIView` class
    hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning what happens when a view is added using Interface Builder
    as opposed to having this dynamically created through code, which we will shortly
    take a look at. Views added using Interface Builder are instantiated at runtime
    and set the `Frame` property using the values that have been set manually in the
    **Size Inspector** window. The `Frame` property is of type `CGRect` and this defines
    the location of the view in the main window, as well as its size in points.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIView` class inherits from the `UIResponder` class that is responsible
    for responding to and handling events. When a view is added to an existing view,
    it becomes part of its responder chain. The `UIView` class exposes the properties
    and the associated methods of the `UIResponder` class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find more information on the `UIResponder` class, you can
    refer to the Apple Developer documentation located at [http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIResponder_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIResponder_Class/Reference/Reference.html)`#//apple_ref/occ/cl/UIResponder`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Views can also be added programmatically through code using the `addSubView`
    method of the `UIView` class. The following line of code shows you how this can
    be achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding line of code snippet, the `addSubview` method
    sets the added view's `Superview` object to point to the caller. A view will not
    be displayed until it has been added to the main parent view using the `addSubview`
    method. Adding the same view to another view will result in the `Superview` object
    to change and point to the new view's parent window. This is because a view can
    only exist in one `Superview` object at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is worth noting that when adding views manually using Interface Builder,
    you don't need to use the `addSubview:` method to display the subview, depending
    on whether you have already added it as a subview of the parent view you want
    it in or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'When adding views programmatically through code, they can also be removed through
    code as well. This can be achieved by calling the `removeFromSuperview` method
    on the view. The following line of code shows you how this can be achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using labels to display text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building the user interface for our application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using labels to display text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at how we use labels to display informative
    text to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UILabel` objects are one of the ways in which we can let users know what
    is happening. These can be if we are requesting the user to enter his/her username
    or password, or to inform him/her if something went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` file from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Object Library**, drag a **Label** object onto the subview.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the `Label` control so that its contents fill the width of the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet and properties for this `Label` control, and name it
    `lblInfo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    setting the label properties with some default values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `updateLabel` method, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following code snippet within `theviewDidLoad` method, as shown
    next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully added a `UILabel` object to our view, and added some code
    to update the contents. We first created the method that will be responsible for
    customizing the label properties and then we assign some text that needs to be
    displayed to the `Label` control's text property.
  prefs: []
  type: TYPE_NORMAL
- en: In our next step, we set the `textColor` property of the `Label` control to
    blue by using the `UIColor` class values and then we set the `textAlignment` property
    so that our label contents will be displayed as left aligned.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we set the `adjustFontSizeToFitWidth` property of the label to `TRUE`
    to instruct the label to automatically change the font size so that it can fit
    inside the width of the label. Next, we add a call to this method into our `viewDidLoad`
    method to update the label contents at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With labels you can set the font that you want your text to be displayed in;
    this is achieved by setting the `font` property using the `UIFontfontWithName`
    method. The `string` parameter represents the name of the font to set and the
    style, while the `size` property parameter determines the font size. If you take
    a look at the following line of code, you can see how to set the font of the label
    to `Arial-Bold` and size of `17` points, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the entered font name is not found, the `fontWithName` method returns nil
    and this will cause an exception if the `font` property of the label is set to
    nil.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on the `UIFont` class, you can
    refer to the Apple Developer documentation located at [http://developer.apple.com/library/IOs/#documentation/UIKit/Reference/UIFont_Class/Reference/Reference.html](http://developer.apple.com/library/IOs/#documentation/UIKit/Reference/UIFont_Class/Reference/Reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Displaying and editing text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Obtaining user input through the use of buttons* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building the user interface for our application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining user input through the use of buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at how we use buttons to change the contents
    of a `UILabel` control that we defined in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will start by creating a `UIButton` object that will be used
    to modify the background color of a label when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` file from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Object Library**, drag a **Round Rect Button** object onto the subview
    and place it underneath the label we added previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, modify the **Title** property to
    read **Tap Here**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet and properties for this **Round Rect Button** object,
    and name it `btnTapHere`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the action method for the **Tap Here** button and name it `btnTapHere`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After adding the button, save the document by selecting **File** | **Save**
    from the menu bar, or alternatively by pressing *command* + *S*. The main view
    should now look like the following screenshot:![How to do it...](img/3349_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to create the code functionality that will be responsible
    for changing the background color of our label:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `btnTapHere` method, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We started by adding a button to our user interface that changed the background
    contents of a label when the button was pressed. We then call the `setBackgroundColor`
    method to apply the background color to our label.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on the `UIButton` class, you
    can refer to the Apple Developer documentation located at [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIButton_Class/UIButton/UIButton.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIButton_Class/UIButton/UIButton.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The functionality provided by the `setBackgroundColor` method can also be accomplished
    by setting the **Background** field in the **Attributes Inspector** tab within
    Interface Builder.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using labels to display text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Displaying an image within the view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building the user interface for our application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying an image within the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at how we can use the `UIImageView` class
    to display images within a view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will start by creating a `UIImageView` object that will be
    used as a container to display our image. For this example, we will be using an
    image file named `Blue-Aqua-Apple.png`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` file from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Object Library**, drag a **UIImageView** object onto the subview and
    place it underneath the `Round Rect Button` object we added previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the `UIImageView` control so that it will be big enough to hold the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet and property for this `UIImageView`, and name it `imgPicture`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select **Files** | **Add Files to "ViewObjectsExample"…**, or alternatively
    press *option* + *command* + *A*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Blue-Aqua-Apple.pngimage** file to add and then click on the **Add**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to create the code functionality that will be responsible
    for displaying the image within our `imageView` control:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `displayImage` method, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following line of code within the `viewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear, displaying the
    image that we just added to our project.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIImageView` class is basically a view that has been customized for the
    purpose of displaying images. We then set the `contentMode` property of the `imageView`
    class to `UIViewContentModeScaleAspectFit`, which scales and fills the image to
    fit the entire contents of `UIImageView`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on the `UIImageView` class, you
    can refer to the Apple Developer documentation located at [http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIImageView_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIImageView_Class/Reference/Reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `contentMode` property accepts an enumeration type named `UIViewContentMode`.
    The following table explains some of these types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Content mode | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ScaleToFill` | This is the default value. It scales the content to fit the
    size of the view, changing the aspect ratio as necessary. |'
  prefs: []
  type: TYPE_TB
- en: '| `ScaleAspectFit` | This scales the content to fit the size of the view, while
    maintaining its aspect ratio. The remaining area of the view becomes transparent.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ScaleAspectFill` | This scales the content to fill the size of the view,
    while maintaining its aspect ratio. |'
  prefs: []
  type: TYPE_TB
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UIImage` class is the object that represents image-related information.
    The following table displays some of these file formats that it currently supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File format | File extension |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Portable Network Graphics | `.png` |'
  prefs: []
  type: TYPE_TB
- en: '| Joint Photographic Experts Group | `.jpg`, `.jpeg` |'
  prefs: []
  type: TYPE_TB
- en: '| Tagged Image File Format | `.tiff`, `.tif` |'
  prefs: []
  type: TYPE_TB
- en: '| Graphics Interchange Format | `.gif` |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Bitmap Format | `.bmp` |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Icon Format | `.ico` |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting images and video from the camera roll* recipe in [Chapter 7](ch07.html
    "Chapter 7. Working with Different Multimedia Resources"), *Multimedia Resources*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Capturing media with the camera* recipe in [Chapter 7](ch07.html "Chapter 7. Working
    with Different Multimedia Resources"), *Multimedia Resources*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying and editing text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use text block methods to determine when
    editing has begun and ended.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will discuss the usage of the `UITextField` object and how
    we can display editable text within it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` file from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Object Library**, drag a **TextField** object onto the subview and place
    it underneath `UIButton` we added previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the `TextField` control width so that it is big enough to hold enough
    text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet and property for this `TextField`, and name it `txtTextInput`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to create the code functionality that will be responsible
    for displaying some text within our `TextField` control:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `populateTextBox` method, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following line of code within the `viewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our next step is to modify our `ViewController.h` interface file so that we
    can access the methods for our textbox. This can be achieved by performing the
    following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, enter the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to modify our `ViewController.m` implementation file to include
    the method events for our textbox. This can be achieved by performing the following
    simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, type in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the compilation completes, the iOS Simulator will appear and display the
    textbox with our populated sample text, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following code snippet, we update the text property of the `textField`
    control and then set the `returnKeyType` property to dismiss the keyboard when
    the **Done** button is clicked and then set the delegate for the control to be
    our view controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, the `UITextField` class provides an object that displays editable text.
    In order for us to respond to the events of our textbox, we need to define a protocol
    class of `UITextBoxDelegate` that will act as the textbox's delegate, so that
    we can determine when text is being modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the following code snippet, we declare the `textFieldShouldReturn:` method
    of our `TextField` control. This method handles the dismissing of the keyboard
    when the **Done** button is pressed which is achieved by calling the `resignFirstReponder`
    method on the `TextField` control, causing the control to lose focus.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Next, we declare the `textFieldDidBeginEditing:` and `textFieldDidEndEditing:`
    methods of our `TextField` control. These methods are responsible for determining
    when text is being updated within the text field and when the editing has been
    completed, which is achieved when the keyboard is dismissed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A delegate in Objective-C is a certain type of object that conform to a specific
    protocol. This means that it is an object that wraps one or more methods (and/or
    other members) that act as event handlers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the iOS device keyboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the iOS device keyboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to set some of the different virtual keyboard
    styles.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will discuss the usage of the `UITextBox` object and how
    we can display editable text within it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `populateTextBox` method, as shown in the highlighted lines
    of the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear and display the
    textbox with our populated sample text. Tap into the `TextField` control to display
    our specified keyboard type.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following code snippet, we update the `keyboardType` property of the
    `TextField` control and then specify `UIKeyboardTypeNumbersAndPunctuation` as
    the keyboard type to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `keyboardType` property accepts an enumeration type named `UIKeyboardType`.
    The following table explains some of these types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Keyboard type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeDefault` | The default keyboard for the current input method
    |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeASCIICapable` | Displays standard ASCII characters |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeNumbersAndPunctuation` | Displays numbers and punctuation
    keyboard |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeURL` | Displays a keyboard optimized for URL entry |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeNumberPad` | Displays a numeric keypad designed for PIN entry
    |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypePhonePad` | Displays a keypad designed for entering telephone
    numbers |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeNamePhonePad` | Displays a keypad designed for entering a
    person''s name or phone number |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeEmailAddress` | Displays a keyboard optimized for specifying
    e-mail addresses |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeDecimalPad` | Displays a keyboard with numbers and a decimal
    point |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeTwitter` | Displays a keyboard optimized for twitter text
    entry, with easy access to the `@` and `#` characters |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKeyboardTypeAlphabet` | This has been depreciated, but uses the keyboard
    that displays standard ASCII characters |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on the `UIKeyboardType` class,
    you can refer to the Apple Developer documentation, located at [http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UITextInputTraits_Protocol/Reference/UITextInputTraits.html](http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UITextInputTraits_Protocol/Reference/UITextInputTraits.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Obtaining user input through the use of buttons* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Displaying and editing text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the progress to the user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how we can display the progress of any given length.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will discuss the usage of the `UIProgressBar` object and
    how we can use the associated properties to display an animated progress bar.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` file from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Object Library**, drag a **ProgressView** object onto the subview and
    place it underneath the `UIImageView` we added previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the `ProgressViewcontrol` so that its width is as wide as the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet and property for this `ProgressView`, and name it `pgbProgress`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to create the code functionality that will be responsible
    for displaying the progress and animating the bar:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the variable declaration highlighted in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `btnPressMe` method, as shown in the highlighted line of the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, type in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the compilation completes, the iOS Simulator will appear. Click on the
    **Tap Here** button to see the progress bar fill gradually, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following line of code, we declare a `float` variable `incrementBy`.
    This variable will be used by our method to gradually increment and fill the progress
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Next, we modify our `btnTapHere:` method to include a call to our method, `fillProgressBarmethod`
    that will be responsible for handling the processing, as well as calling other
    methods to gradually fill the bar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In our next code snippet, the `fillProgressBar` method initializes the `incrementBy`
    variable to `0` to make sure that the bar is not filled at all. We then use the
    `scheduledTimerWithTimeInterval` method, which is one of the class methods of
    the `NSTimer` class, which is used to create timers.
  prefs: []
  type: TYPE_NORMAL
- en: '`NSTimer` is an object that is scheduled to run within the run loop, so that
    it can check time passed periodically. When enough time has passed, it fires.
    If the timer has been set up to be non repeating, it then unschedules itself,
    otherwise it clears its elapsed time and waits to fire again. Next, we specify
    the duration in seconds when to call the `incrementBar:` method, as specified
    by the `selector` property and keep calling this method until the timer is invalidated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In our final code snippet, we start by setting our `incrementBar` variable to
    the number of incremental steps this should take to fill our progress bar value,
    and then update the `progress` property of our `ProgressView`. Next, we check
    to see if we have reached our bar threshold and then update the label accordingly,
    before finally invalidating our `timer` object to prevent the method from being
    called.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if we have not yet reached our threshold, we update the `Label`
    object to show the progress bar's current progress.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on the `NSTimer` class, you can
    refer to the Apple Developer documentation, located at [https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/Reference/NSTimer.html](https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/Reference/NSTimer.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIProgressView` class supports one more style. This can be specified by
    setting the `progressViewStyle` property to `UIProgressViewStyleBar`. With that
    change, the bar will look like the one, as can be seen when using Apple's Mail
    application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using labels to display text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Obtaining user input through the use of buttons* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a toolbar to a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to add and use toolbars within our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will discuss the usage of the `Toolbar` object and how we
    can use the associated properties to display an animated progress bar.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see how this can be achieved, we need to modify our **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` file from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Object Library**, drag a **Toolbar** object into the main view controller,
    and place it at the top of the main view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the button it contains by default and set its **Title** property
    to **Fade In**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add a `Flexible Space Bar Button Item` object to the toolbar to the right
    of the **Fade In** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, from **Object Library**, drag a **UIBarButtonItem** object to the toolbar
    and place this after the `Flexible Space Bar Button Item` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the button and set its **Title** property to **Fade Out**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlets and properties for the **Fade In** and **Fade Out**
    buttons, and name them `btnFadeIn` and `btnFadeOut`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the action methods for the **Fade In** and **Fade Out** buttons,
    and name them `viewFadeIn` and `viewFadeOut`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating the button outlets and properties, save the document by selecting
    **File** | **Save** from the menu bar, or alternatively by pressing *command*
    + *S*. The layout should look like the following screenshot:![How to do it...](img/3349_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to create the code functionality that will be responsible
    for updating the label to display what button was pressed within the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `viewFadeIn` and `viewFadeOut` methods, as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear. Tap on both of
    the toolbar buttons to see the label update based on which button has been clicked.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIToolbar` object is used to hold items relating to the `UIBarButtonItem`
    object type. These types of objects are special kinds of buttons and spacers.
    A `UIBarButtonItem` object can be system defined or custom type, and can use any
    of the predefined types as listed in the **Identifier** attribute within Interface
    Builder and provides a specific icon to the button.
  prefs: []
  type: TYPE_NORMAL
- en: The `UIBarButtonItem` objects can also be customized to contain an image to
    make your application more professional and visually intuitive. This can be achieved
    by using the **Image** attribute within Interface Builder.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIBarButtonItem` class has a style property that determines the button's
    style. It can be used only when the button item's identifier is set to **Custom**.
    You can set the button's style property to any of the `UIBarButtonItemStyle` types.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using labels to display text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fading a view in and out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at how we can perform some fancy animations
    to views. These can be perfect for building and enhancing the user experience
    to produce smooth, animated animations for your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UIView` animations are the perfect building blocks for building the visual
    bridge between a view''s current and changed state. With views, you can visually
    change and create animations that link these together. Some examples include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Moving a view around the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the view's frame and bounds coordinates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stretching the view's content to fill the screen regions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering the view's alpha value to support transparency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding or showing a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering the view's ordering to show which view is in front
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing transformations and rotations to views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see our view fade in and out, we need to modify our **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `viewFadeIn` method, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewFadeOut` method, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the highlighted code lines of the following code snippet to the `viewDidLoad`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear. Tap on both of
    the toolbar buttons to see the subview's start to fade either in our out.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following code snippet, we mark the start of our animation block using
    the `beginAnimations` method and specify the `Fade In` animation type, before
    setting the graphics context to nil. Next, we specify the length of the animation
    in seconds using `setAnimationDuration`, and then set the alpha transparency layer
    by setting `setAlpha` to `1.0`, which makes it become visible.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use the `commitAnimations` method to indicate that all of our properties
    to animate have been set, and animations should begin and then enable/disable
    our toolbar buttons accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Next, we mark the start of our animation block using the `beginAnimations` method
    and specify the `Fade Out` animation type, before setting the graphics context
    to nil. We then specify the length of the animation in seconds using `setAnimationDuration`,
    and then set the alpha transparency layer by setting `setAlpha` of our subview
    to invisible so that it gradually fades.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use the `commitAnimations` method to indicate that all of our properties
    to animate have been set, and animations should begin and enable our **Fade In**
    button within our toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on `UIView` animations, you can
    refer to the Apple Developer documentation, located at [http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/UIView/UIView.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/UIView/UIView.html)`#//apple_ref/doc/uid/TP40006816-CH3-SW131`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a toolbar to a view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom table view controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to create a subclass of the `UITableViewController`
    class, and use it to populate a `UITableView` controller.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UITableViewController` classes are a perfect way of providing you with
    the flexibility to manage a table view, and providing the functionality of adding
    to our base controller the ability of sharing its inheritor classes. For this
    to happen, we will need to incorporate the methods for a `UITableView` class.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, we will need to create a new Xcode project. This can be achieved
    by performing the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new **Single View Application** project and name it `TableViewExample`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the `TableViewExample` folder, select **File** | **New** | **New
    File…** or press *command* + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Objective-C class** template from the list of templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `TableViewController` as the name of the file to create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have selected **UITableViewController** as the type of subclass
    to create from the **Subclass** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Targeted for iPad** checkbox is not checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **With XIB for User Interface** checkbox is not checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button to save the file to the specified folder location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we have done here is add a new `TableViewController` class to our **TableViewExample**
    application that provides us with the necessary table view methods we can use
    to interact with the `TableView` control.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a table view to a view controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a table view to a view controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to add a `UITableView` object to an existing
    view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UITableView` object provides you with an interface for displaying data
    in list form.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to add a table view to our view controller, we need to modify our
    **TableViewExample** application that we created in the previous recipe. Perform
    the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `TableViewExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, change the inheritance of the `ViewController` class, as shown in the
    following highlighted line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, select the `ViewController.xib file` from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, delete the current view within the view controller, by selecting it and
    then pressing the *Delete* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from **Object Library**, drag a **TableView** object onto the drawing
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold down the *control* key and drag from the **File's Owner** object to the
    `UITableView`, as shown in the following screenshot:![How to do it...](img/3349_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **view** from the pop-up panel and release the button. This connects
    the `TableView` we have just added to the view outlet of the **File's Owner**
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to modify the `ViewController` class to use the custom table
    view controller that we created in the previous recipe. This can be achieved by
    performing the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click and select the **File's Owner** controller object within the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the **Identity Inspector** section and change the value of the
    **Custom Class** property to read `CustomTableView`, as shown in the following
    screenshot:![How to do it...](img/3349_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the document by selecting **File** | **Save** from the menu bar, or alternatively
    by pressing *command* + *S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we add a `UITableView` object to an existing view using Interface Builder,
    its view is displayed with some predefined data, which is only visible during
    design time and not at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: We then hooked up the view of our `TableView` object to our `File's Owner` object,
    and finally we modified the view controller's class to use our own `CustomTableView`
    class that we created. The discussion on how to go about populating data in `UITableView`
    will be covered in an upcoming chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom table view controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating an iOS Project with Xcode* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Displaying data within the table view* recipe in [Chapter 8](ch08.html
    "Chapter 8. Working with the CoreData and GameKit Frameworks"), *Data Management*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling different iOS devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to detect whether we are running the application
    on an iPhone or iPad device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIDevice` object provides you with various methods that allow you to gain
    access to certain information relating to a specific device; it can help you work
    out how much battery is remaining on the device, as well as determine what type
    of device it is and its orientation aspects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, we will need to create a new Xcode project. This can be achieved
    by performing the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new **Single View Application** project and name it `UniversalApp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the `ViewController.xib` file from the project navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from **Object Library**, drag a **Label** object onto the main view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the `Label` control so that its contents fill the width of the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet and property for this `Label` control, and name it `lblMessage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to create the code functionality that will be responsible
    for determining what type of iOS device we are using, as well as updating the
    label properties. This can be achieved by performing the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `viewDidLoad` method, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the document by selecting **File** | **Save** from the menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **UniversalApp** from the project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Summary** tab, select **Universal** from under the **Devices** drop-down
    menu, as shown in the following screenshot:![How to do it...](img/3349_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, switch between the different devices by clicking inside the highlighted
    section, as shown in the following screenshot:![How to do it...](img/3349_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and run the application by selecting **Product** | **Run** from the **Product**
    menu, or alternatively by pressing *command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following code snippet, we check to see which device the application
    is running on, by checking the `userInterfaceIdiom` property of the `UIDevicecurrentDevice`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If an iPad has been determined, we resize the view using the `frame` property
    to size it to the iPad screen''s dimensions and then update our label properties
    and then set the background of our view, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if it has been determined that we are running the application
    on an iPhone, we update our label properties and then set the background of our
    view, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on the `UIDevice` class, you
    can refer to the Apple Developer documentation, located at [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using labels to display text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
