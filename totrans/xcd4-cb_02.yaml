- en: Chapter 2. User Interfaces – Creating the UI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 用户界面 – 创建UI
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Adding and customizing views
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加和自定义视图
- en: Using labels to display text
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签显示文本
- en: Obtaining user input through the use of buttons
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过按钮获取用户输入
- en: Displaying an image within the view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中显示图像
- en: Displaying and editing text
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示和编辑文本
- en: Using the iOS device keyboard
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用iOS设备键盘
- en: Displaying the progress to the user
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户显示进度
- en: Adding a toolbar object to a view
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工具栏对象添加到视图中
- en: Fading a view in and out
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图淡入淡出
- en: Creating a custom table view controller
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义表格视图控制器
- en: Adding a table view to a view controller
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将表格视图添加到视图控制器
- en: Handling different iOS devices
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理不同的iOS设备
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: An application's user interface which is comprised of views and other elements,
    is the first thing the user sees when he/she loads up your application and provides
    him/her with an easy way of communicating with your application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的用户界面由视图和其他元素组成，当用户加载您的应用程序时，这是用户首先看到的，并为他们提供了一个与您的应用程序进行通信的简单方式。
- en: The user interface consists of a canvas, and acts as a placeholder for your
    controls that the user can communicate with. In most real-world applications,
    views alone are simply not enough. Apple provides you with another class called
    `UIViewController`, which is responsible for managing views.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面由画布组成，充当用户可以与之通信的控件占位符。在大多数实际应用中，仅视图本身是不够的。Apple为您提供了一个名为`UIViewController`的类，该类负责管理视图。
- en: View controllers can respond to device notifications, such as determining when
    the device rotates, or can provide you with different ways of displaying and dismissing
    multiple views or even other view controllers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 视图控制器可以响应设备通知，例如确定设备何时旋转，或者提供不同的方式来显示和关闭多个视图或甚至其他视图控制器。
- en: We will also see how to use some of the most common view controllers to create
    our own custom classes. In this chapter, we will look at how we can add and customize
    views, as well as apply transitions to these to have them fade in and out. We
    will also take a look at some of the device specific aspects of the device, to
    determine its current orientation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将了解如何使用一些最常用的视图控制器来创建我们自己的自定义类。在本章中，我们将探讨如何添加和自定义视图，以及将这些视图应用于淡入淡出效果。我们还将查看一些设备特定的方面，以确定其当前的方向。
- en: Adding and customizing views
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和自定义视图
- en: In this recipe, we will look at how we can add a new `UIView` object to our
    existing view using Interface Builder and take a look at how we can customize
    this.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何使用Interface Builder将新的`UIView`对象添加到现有视图中，并查看如何自定义它。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will start by creating a new project using Xcode, and then use Interface
    Builder to help us add a new `UIView` object, so let's get started.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用Xcode创建一个新项目，然后使用Interface Builder帮助我们添加一个新的`UIView`对象，让我们开始吧。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin with creating a new Xcode project, perform the following simple steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建新的Xcode项目，请执行以下简单步骤：
- en: Launch Xcode from the `/Developer/Applications` folder.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`/Developer/Applications`文件夹中启动Xcode。
- en: Select **Create a new Xcode project**, or click on **File** | **New Project**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建新的Xcode项目**，或点击**文件** | **新建项目**。
- en: Select **Single View Application** from the list of available templates.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用模板列表中选择**单视图应用程序**。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮以继续向导的下一步。
- en: Next, enter `ViewObjectsExample` as the name for your project.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将项目名称输入为`ViewObjectsExample`。
- en: Select **iPhone** from under the **Devices** drop-down menu.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**设备**下拉菜单中选择**iPhone**。
- en: Ensure that the **Use Storyboards** checkbox has not been checked.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保未勾选**使用故事板**复选框。
- en: Ensure that the **Use Automatic Reference Counting** checkbox has been checked.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已勾选**使用自动引用计数**复选框。
- en: Ensure that the **Include Unit Tests** checkbox has not been checked.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保未勾选**包含单元测试**复选框。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮以继续向导的下一步。
- en: Specify the location where you would like to save your project.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定您希望保存项目的位置。
- en: Then, click on the **Create** button to save your project at the specified location.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**创建**按钮以在指定位置保存您的项目。
- en: Once your project has been created, you will be presented with the Xcode development
    environment along with the project files that the template created for you.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建项目，您将看到Xcode开发环境以及模板为您创建的项目文件。
- en: 'Next, we need to start building our user interface, which can be achieved by
    performing the following simple steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要开始构建我们的用户界面，这可以通过执行以下简单步骤实现：
- en: Select the `ViewController.xib` file from the project navigator window.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航窗口中选择`ViewController.xib`文件。
- en: From **Object Library**, drag a **View** object onto the main view.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中，将一个**视图**对象拖放到主视图中。
- en: Next, create the necessary outlet and property for this view, and name it `subView`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个视图创建必要的出口和属性，并将其命名为`subView`。
- en: Next, select the new view that we just added and from the **Size Inspector**
    tab, set the **Y** property to **44** points, the **Width** property to **320**
    Points, and the **Height** property to **480** points.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择我们刚刚添加的新视图，并从**大小检查器**选项卡中，将**Y**属性设置为**44**点，**宽度**属性设置为**320**点，**高度**属性设置为**480**点。
- en: Next, save your project by selecting **File** | **Save**, or alternatively by
    pressing *command* + *S*.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过选择**文件** | **保存**，或通过按*command* + *S*来保存您的项目。
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单中选择**产品** | **运行**来构建和运行应用程序，或通过按*command* + *R*。
- en: When the compilation completes, the iOS Simulator will appear with your application
    that we just created and displayed showing a view with a white background.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，iOS模拟器将显示我们刚刚创建并显示的应用程序，其中包含一个白色背景的视图。
- en: How it works…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We just created an application that consists of a subview, which does not provide
    any functionality. In iOS applications, views are one of the important components
    that make up an application's user interface that inherits from the `UIView` class
    hierarchy.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个包含子视图的应用程序，它不提供任何功能。在iOS应用程序中，视图是构成应用程序用户界面的重要组件之一，它继承自`UIView`类层次结构。
- en: It is worth mentioning what happens when a view is added using Interface Builder
    as opposed to having this dynamically created through code, which we will shortly
    take a look at. Views added using Interface Builder are instantiated at runtime
    and set the `Frame` property using the values that have been set manually in the
    **Size Inspector** window. The `Frame` property is of type `CGRect` and this defines
    the location of the view in the main window, as well as its size in points.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，使用Interface Builder添加视图与通过代码动态创建视图相比会发生什么，我们很快就会看到。使用Interface Builder添加的视图在运行时实例化，并使用在**大小检查器**窗口中手动设置的值设置`Frame`属性。`Frame`属性的类型是`CGRect`，它定义了视图在主窗口中的位置，以及其大小（以点为单位）。
- en: There's more…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `UIView` class inherits from the `UIResponder` class that is responsible
    for responding to and handling events. When a view is added to an existing view,
    it becomes part of its responder chain. The `UIView` class exposes the properties
    and the associated methods of the `UIResponder` class.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIView`类继承自负责响应和处理事件的`UIResponder`类。当一个视图被添加到现有视图时，它成为其响应链的一部分。`UIView`类公开了`UIResponder`类的属性和相关方法。'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find more information on the `UIResponder` class, you can
    refer to the Apple Developer documentation located at [http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIResponder_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIResponder_Class/Reference/Reference.html)`#//apple_ref/occ/cl/UIResponder`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于`UIResponder`类的信息，可以参考位于[http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIResponder_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIResponder_Class/Reference/Reference.html)`#//apple_ref/occ/cl/UIResponder`的Apple开发者文档。
- en: 'Views can also be added programmatically through code using the `addSubView`
    method of the `UIView` class. The following line of code shows you how this can
    be achieved:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 视图也可以通过使用`UIView`类的`addSubView`方法通过代码程序化地添加。以下代码行显示了如何实现这一点：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see from the preceding line of code snippet, the `addSubview` method
    sets the added view's `Superview` object to point to the caller. A view will not
    be displayed until it has been added to the main parent view using the `addSubview`
    method. Adding the same view to another view will result in the `Superview` object
    to change and point to the new view's parent window. This is because a view can
    only exist in one `Superview` object at any given time.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一行代码片段所示，`addSubview` 方法将添加的视图的 `Superview` 对象设置为指向调用者。视图只有在使用 `addSubview`
    方法添加到主父视图后才会显示。将相同的视图添加到另一个视图会导致 `Superview` 对象更改并指向新的视图的父窗口。这是因为视图在任何给定时间只能存在于一个
    `Superview` 对象中。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is worth noting that when adding views manually using Interface Builder,
    you don't need to use the `addSubview:` method to display the subview, depending
    on whether you have already added it as a subview of the parent view you want
    it in or not.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，当使用 Interface Builder 手动添加视图时，您不需要使用 `addSubview:` 方法来显示子视图，这取决于您是否已经将其添加到您想要放置的父视图的子视图中。
- en: 'When adding views programmatically through code, they can also be removed through
    code as well. This can be achieved by calling the `removeFromSuperview` method
    on the view. The following line of code shows you how this can be achieved:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过代码程序化添加视图时，它们也可以通过代码删除。这可以通过在视图中调用`removeFromSuperview`方法来实现。以下代码行显示了如何实现这一点：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See also
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using labels to display text* recipe
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签显示文本的配方
- en: The *Building the user interface for our application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具")的*构建我们应用程序的用户界面*配方中，[第1章](ch01.html
    "第1章。获取和安装iOS SDK开发工具")，*获取和安装iOS SDK开发工具*
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具")的*创建到Interface Builder对象的出口*配方中，*获取和安装iOS
    SDK开发工具*
- en: Using labels to display text
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标签显示文本
- en: In this recipe, we will take a look at how we use labels to display informative
    text to the user.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将探讨我们如何使用标签向用户显示信息性文本。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `UILabel` objects are one of the ways in which we can let users know what
    is happening. These can be if we are requesting the user to enter his/her username
    or password, or to inform him/her if something went wrong.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`UILabel`对象是我们让用户知道正在发生什么的一种方式。这可以是在我们请求用户输入他的/她的用户名或密码时，或者如果出现问题，通知他/她。'
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这是如何实现的，我们需要修改我们在上一个配方中创建的**ViewObjectsExample**应用程序。执行以下步骤：
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ViewObjectsExample.xcodeproj`项目文件。
- en: Select the `ViewController.xib` file from the project navigator window.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器窗口中选择`ViewController.xib`文件。
- en: From **Object Library**, drag a **Label** object onto the subview.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中，将一个**标签**对象拖放到子视图中。
- en: Resize the `Label` control so that its contents fill the width of the view.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整`Label`控件的大小，使其内容填充视图的宽度。
- en: Next, create the outlet and properties for this `Label` control, and name it
    `lblInfo`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个`Label`控件创建出口和属性，并将其命名为`lblInfo`。
- en: Our next step is to create the code functionality that will be responsible for
    setting the label properties with some default values.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来的步骤是创建负责设置标签属性的代码功能，并使用一些默认值。
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开`ViewController.m`实现文件。
- en: 'Next, create the `updateLabel` method, as shown in the following code snippet:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`updateLabel`方法，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, add the following code snippet within `theviewDidLoad` method, as shown
    next:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`theviewDidLoad`方法中添加以下代码片段，如下所示：
- en: '[PRE3]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单选择**产品** | **运行**，或者通过按*command* + *R*来构建和运行应用程序。
- en: How it works…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: We have successfully added a `UILabel` object to our view, and added some code
    to update the contents. We first created the method that will be responsible for
    customizing the label properties and then we assign some text that needs to be
    displayed to the `Label` control's text property.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地将一个`UILabel`对象添加到我们的视图中，并添加了一些代码来更新内容。我们首先创建了一个负责自定义标签属性的方法，然后我们将需要显示的文本分配给标签控件的文本属性。
- en: In our next step, we set the `textColor` property of the `Label` control to
    blue by using the `UIColor` class values and then we set the `textAlignment` property
    so that our label contents will be displayed as left aligned.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一步中，我们使用`UIColor`类的值将`Label`控件的`textColor`属性设置为蓝色，然后我们设置`textAlignment`属性，以便我们的标签内容将显示为左对齐。
- en: Finally, we set the `adjustFontSizeToFitWidth` property of the label to `TRUE`
    to instruct the label to automatically change the font size so that it can fit
    inside the width of the label. Next, we add a call to this method into our `viewDidLoad`
    method to update the label contents at runtime.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将标签的`adjustFontSizeToFitWidth`属性设置为`TRUE`，以指示标签自动更改字体大小，以便它能够适应标签的宽度。接下来，我们在`viewDidLoad`方法中添加对这个方法的调用，以在运行时更新标签内容。
- en: There's more…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'With labels you can set the font that you want your text to be displayed in;
    this is achieved by setting the `font` property using the `UIFontfontWithName`
    method. The `string` parameter represents the name of the font to set and the
    style, while the `size` property parameter determines the font size. If you take
    a look at the following line of code, you can see how to set the font of the label
    to `Arial-Bold` and size of `17` points, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标签，你可以设置你想要文本显示的字体；这是通过使用`UIFontfontWithName`方法设置`font`属性来实现的。`string`参数表示要设置的字体名称和样式，而`size`属性参数确定字体大小。如果你看看以下代码行，你可以看到如何将标签的字体设置为`Arial-Bold`和大小为`17`点，如下所示：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the entered font name is not found, the `fontWithName` method returns nil
    and this will cause an exception if the `font` property of the label is set to
    nil.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入的字体名称未找到，`fontWithName`方法返回nil，这将导致异常，如果标签的`font`属性设置为nil。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on the `UIFont` class, you can
    refer to the Apple Developer documentation located at [http://developer.apple.com/library/IOs/#documentation/UIKit/Reference/UIFont_Class/Reference/Reference.html](http://developer.apple.com/library/IOs/#documentation/UIKit/Reference/UIFont_Class/Reference/Reference.html).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于`UIFont`类的信息，你可以参考位于[http://developer.apple.com/library/IOs/#documentation/UIKit/Reference/UIFont_Class/Reference/Reference.html](http://developer.apple.com/library/IOs/#documentation/UIKit/Reference/UIFont_Class/Reference/Reference.html)的Apple开发者文档。
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Displaying and editing text* recipe
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示和编辑文本的配方
- en: The *Obtaining user input through the use of buttons* recipe
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用按钮获取用户输入的配方
- en: The *Building the user interface for our application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具")的*构建应用程序的用户界面*配方中，*获取和安装iOS SDK开发工具*
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具")的*创建到Interface Builder对象的出口*配方中，*获取和安装iOS
    SDK开发工具*
- en: Obtaining user input through the use of buttons
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用按钮获取用户输入
- en: In this recipe, we will take a look at how we use buttons to change the contents
    of a `UILabel` control that we defined in the previous recipe.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看看我们如何使用按钮来更改我们在上一个配方中定义的`UILabel`控件的内容。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will start by creating a `UIButton` object that will be used
    to modify the background color of a label when it is tapped.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将首先创建一个`UIButton`对象，该对象将用于在点击时修改标签的背景颜色。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何实现这一点，我们需要修改我们在上一个配方中创建的**ViewObjectsExample**应用程序。执行以下步骤：
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ViewObjectsExample.xcodeproj`项目文件。
- en: Select the `ViewController.xib` file from the project navigator window.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航窗口中选择`ViewController.xib`文件。
- en: From **Object Library**, drag a **Round Rect Button** object onto the subview
    and place it underneath the label we added previously.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **对象库** 中拖动一个 **圆形矩形按钮** 对象到子视图中，并将其放置在我们之前添加的标签下方。
- en: From the **Attributes Inspector** section, modify the **Title** property to
    read **Tap Here**.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **属性检查器** 部分中，将 **标题** 属性修改为 **点击此处**。
- en: Next, create the outlet and properties for this **Round Rect Button** object,
    and name it `btnTapHere`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个 **圆形矩形按钮** 对象创建出口和属性，并将其命名为 `btnTapHere`。
- en: Next, create the action method for the **Tap Here** button and name it `btnTapHere`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为 **点击此处** 按钮创建动作方法，并将其命名为 `btnTapHere`。
- en: After adding the button, save the document by selecting **File** | **Save**
    from the menu bar, or alternatively by pressing *command* + *S*. The main view
    should now look like the following screenshot:![How to do it...](img/3349_02_01.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加按钮后，通过从菜单栏选择 **文件** | **保存** 或通过按 *command* + *S* 来保存文档。此时主视图应类似于以下截图：![如何操作...](img/3349_02_01.jpg)
- en: 'Our next step is to create the code functionality that will be responsible
    for changing the background color of our label:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是创建负责更改标签背景颜色的代码功能：
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开 `ViewController.m` 实现文件。
- en: 'Next, create the `btnTapHere` method, as shown in the following code snippet:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建 `btnTapHere` 方法，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从 **产品** 菜单选择 **产品** | **运行** 或通过按 *command* + *R* 来构建并运行应用程序。
- en: How it works…
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We started by adding a button to our user interface that changed the background
    contents of a label when the button was pressed. We then call the `setBackgroundColor`
    method to apply the background color to our label.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先向用户界面添加了一个按钮，当按钮被按下时，它会改变标签的背景内容。然后我们调用 `setBackgroundColor` 方法将背景颜色应用到标签上。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on the `UIButton` class, you
    can refer to the Apple Developer documentation located at [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIButton_Class/UIButton/UIButton.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIButton_Class/UIButton/UIButton.html).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 `UIButton` 类的信息，可以参考位于 [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIButton_Class/UIButton/UIButton.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIButton_Class/UIButton/UIButton.html)
    的 Apple 开发者文档。
- en: There's more…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The functionality provided by the `setBackgroundColor` method can also be accomplished
    by setting the **Background** field in the **Attributes Inspector** tab within
    Interface Builder.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`setBackgroundColor` 方法提供的功能也可以通过在 Interface Builder 中的 **属性检查器** 选项卡中设置 **背景**
    字段来实现。'
- en: See also
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Adding and customizing views* recipe
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和自定义视图* 的配方'
- en: The *Using labels to display text* recipe
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用标签显示文本* 的配方'
- en: The *Displaying an image within the view* recipe
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在视图中显示图像* 的配方'
- en: The *Building the user interface for our application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具") 中的 *构建应用程序的用户界面* 配方，*获取和安装iOS SDK开发工具*'
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具") 中的 *创建到Interface Builder对象的出口* 配方，*获取和安装iOS
    SDK开发工具*'
- en: Displaying an image within the view
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中显示图像
- en: In this recipe, we will take a look at how we can use the `UIImageView` class
    to display images within a view.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将探讨如何使用 `UIImageView` 类在视图中显示图像。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will start by creating a `UIImageView` object that will be
    used as a container to display our image. For this example, we will be using an
    image file named `Blue-Aqua-Apple.png`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将首先创建一个 `UIImageView` 对象，它将用作显示图像的容器。在这个例子中，我们将使用名为 `Blue-Aqua-Apple.png`
    的图像文件。
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何实现这一点，我们需要修改之前配方中创建的 **ViewObjectsExample** 应用程序。执行以下步骤：
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ViewObjectsExample.xcodeproj` 项目文件。
- en: Select the `ViewController.xib` file from the project navigator window.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器窗口中选择 `ViewController.xib` 文件。
- en: From **Object Library**, drag a **UIImageView** object onto the subview and
    place it underneath the `Round Rect Button` object we added previously.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **对象库** 中，将一个 **UIImageView** 对象拖放到子视图中，并将其放置在我们之前添加的 `Round Rect Button`
    对象下方。
- en: Resize the `UIImageView` control so that it will be big enough to hold the image.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整 `UIImageView` 控件的大小，使其足够大以容纳图片。
- en: Next, create the outlet and property for this `UIImageView`, and name it `imgPicture`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个 `UIImageView` 创建出口和属性，并将其命名为 `imgPicture`。
- en: Then, select **Files** | **Add Files to "ViewObjectsExample"…**, or alternatively
    press *option* + *command* + *A*.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择 **文件** | **将文件添加到 "ViewObjectsExample"…**，或者通过按 *option* + *command* +
    *A* 键。
- en: Select the **Blue-Aqua-Apple.pngimage** file to add and then click on the **Add**
    button.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要添加的 **Blue-Aqua-Apple.png** 图片文件，然后点击 **添加** 按钮。
- en: 'Our next step is to create the code functionality that will be responsible
    for displaying the image within our `imageView` control:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的步骤是创建负责在 `imageView` 控件中显示图片的代码功能：
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开 `ViewController.m` 实现文件。
- en: 'Next, create the `displayImage` method, as shown in the following code snippet:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建 `displayImage` 方法，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, add the following line of code within the `viewDidLoad` method:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 `viewDidLoad` 方法中添加以下代码行：
- en: '[PRE7]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从 **产品** 菜单中选择 **产品** | **运行**，或者通过按 *command* + *R* 键来构建和运行应用程序。
- en: When the compilation completes, the iOS Simulator will appear, displaying the
    image that we just added to our project.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，iOS 模拟器将出现，显示我们刚刚添加到项目中的图片。
- en: How it works…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `UIImageView` class is basically a view that has been customized for the
    purpose of displaying images. We then set the `contentMode` property of the `imageView`
    class to `UIViewContentModeScaleAspectFit`, which scales and fills the image to
    fit the entire contents of `UIImageView`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIImageView` 类基本上是一个针对显示图片而定制的视图。然后，我们将 `imageView` 类的 `contentMode` 属性设置为
    `UIViewContentModeScaleAspectFit`，这将缩放并填充图片以适应整个 `UIImageView` 的内容。'
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on the `UIImageView` class, you
    can refer to the Apple Developer documentation located at [http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIImageView_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIImageView_Class/Reference/Reference.html).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 `UIImageView` 类的信息，可以参考位于 [http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIImageView_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIImageView_Class/Reference/Reference.html)
    的 Apple 开发者文档。
- en: 'The `contentMode` property accepts an enumeration type named `UIViewContentMode`.
    The following table explains some of these types:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentMode` 属性接受一个名为 `UIViewContentMode` 的枚举类型。以下表格解释了这些类型中的一些：'
- en: '| Content mode | Description |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 内容模式 | 描述 |'
- en: '| --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ScaleToFill` | This is the default value. It scales the content to fit the
    size of the view, changing the aspect ratio as necessary. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `ScaleToFill` | 这是默认值。它将内容缩放到适合视图的大小，必要时更改宽高比。 |'
- en: '| `ScaleAspectFit` | This scales the content to fit the size of the view, while
    maintaining its aspect ratio. The remaining area of the view becomes transparent.
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `ScaleAspectFit` | 这会将内容缩放到适合视图的大小，同时保持其宽高比。视图的剩余区域变为透明。 |'
- en: '| `ScaleAspectFill` | This scales the content to fill the size of the view,
    while maintaining its aspect ratio. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `ScaleAspectFill` | 这会将内容缩放到填充视图的大小，同时保持其宽高比。 |'
- en: There's more…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'The `UIImage` class is the object that represents image-related information.
    The following table displays some of these file formats that it currently supports:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIImage` 类是表示图像相关信息的对象。以下表格显示了它目前支持的一些文件格式：'
- en: '| File format | File extension |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 文件格式 | 文件扩展名 |'
- en: '| --- | --- |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Portable Network Graphics | `.png` |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 可移植网络图形 | `.png` |'
- en: '| Joint Photographic Experts Group | `.jpg`, `.jpeg` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 联合图像专家小组 | `.jpg`, `.jpeg` |'
- en: '| Tagged Image File Format | `.tiff`, `.tif` |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 标签图像文件格式 | `.tiff`, `.tif` |'
- en: '| Graphics Interchange Format | `.gif` |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| GIF 图像交换格式 | `.gif` |'
- en: '| Windows Bitmap Format | `.bmp` |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| Windows 位图格式 | `.bmp` |'
- en: '| Windows Icon Format | `.ico` |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 窗口图标格式 | `.ico` |'
- en: See also
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding and customizing views* recipe
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和自定义视图*菜谱'
- en: The *Selecting images and video from the camera roll* recipe in [Chapter 7](ch07.html
    "Chapter 7. Working with Different Multimedia Resources"), *Multimedia Resources*
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章。处理不同的多媒体资源")的*从相册选择图片和视频*菜谱中，*多媒体资源*
- en: The *Capturing media with the camera* recipe in [Chapter 7](ch07.html "Chapter 7. Working
    with Different Multimedia Resources"), *Multimedia Resources*
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章。处理不同的多媒体资源")的*使用相机捕获媒体*菜谱中，*多媒体资源*
- en: Displaying and editing text
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示和编辑文本
- en: In this recipe, we will learn how to use text block methods to determine when
    editing has begun and ended.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何使用文本块方法来确定何时开始和结束编辑。
- en: Getting ready
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will discuss the usage of the `UITextField` object and how
    we can display editable text within it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将讨论`UITextField`对象的用法以及我们如何在其中显示可编辑文本。
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何实现这一点，我们需要修改我们在上一个菜谱中创建的**ViewObjectsExample**应用程序。执行以下步骤：
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ViewObjectsExample.xcodeproj`项目文件。
- en: Select the `ViewController.xib` file from the project navigator window.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器窗口中选择`ViewController.xib`文件。
- en: From **Object Library**, drag a **TextField** object onto the subview and place
    it underneath `UIButton` we added previously.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中拖动一个**TextField**对象到子视图中，并将其放置在我们之前添加的`UIButton`下方。
- en: Resize the `TextField` control width so that it is big enough to hold enough
    text.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整`TextField`控件宽度，使其足够大，可以容纳足够的文本。
- en: Next, create the outlet and property for this `TextField`, and name it `txtTextInput`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个`TextField`创建出口和属性，并将其命名为`txtTextInput`。
- en: 'Our next step is to create the code functionality that will be responsible
    for displaying some text within our `TextField` control:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步是创建代码功能，该功能将负责在我们的`TextField`控件中显示一些文本：
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开`ViewController.m`实现文件。
- en: 'Next, create the `populateTextBox` method, as shown in the following code snippet:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`populateTextBox`方法，如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, add the following line of code within the `viewDidLoad` method:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`viewDidLoad`方法中添加以下行代码：
- en: '[PRE9]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Our next step is to modify our `ViewController.h` interface file so that we
    can access the methods for our textbox. This can be achieved by performing the
    following simple steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步是修改我们的`ViewController.h`接口文件，以便我们可以访问我们的文本框的方法。这可以通过执行以下简单步骤来实现：
- en: Open the `ViewController.h` interface file from the project navigator.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开`ViewController.h`接口文件。
- en: 'Next, enter the following code snippet:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入以下代码片段：
- en: '[PRE10]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we need to modify our `ViewController.m` implementation file to include
    the method events for our textbox. This can be achieved by performing the following
    simple steps:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改我们的`ViewController.m`实现文件，以包括我们的文本框的方法事件。这可以通过执行以下简单步骤来实现：
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开`ViewController.m`实现文件。
- en: 'Next, type in the following code snippet:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入以下代码片段：
- en: '[PRE11]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单选择**运行**或按*command* + *R*键来构建和运行应用程序。
- en: 'When the compilation completes, the iOS Simulator will appear and display the
    textbox with our populated sample text, as shown in the following screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，iOS模拟器将出现并显示带有我们填充的示例文本的文本框，如下面的截图所示：
- en: '![How to do it...](img/3349_02_02.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/3349_02_02.jpg)'
- en: How it works…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In the following code snippet, we update the text property of the `textField`
    control and then set the `returnKeyType` property to dismiss the keyboard when
    the **Done** button is clicked and then set the delegate for the control to be
    our view controller:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，我们更新了`textField`控件的文本属性，然后将`returnKeyType`属性设置为在点击**完成**按钮时关闭键盘，并设置控件的代理为我们的视图控制器：
- en: '[PRE13]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, the `UITextField` class provides an object that displays editable text.
    In order for us to respond to the events of our textbox, we need to define a protocol
    class of `UITextBoxDelegate` that will act as the textbox's delegate, so that
    we can determine when text is being modified.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`UITextField` 类提供了一个显示可编辑文本的对象。为了我们能够响应文本框的事件，我们需要定义一个名为 `UITextBoxDelegate`
    的协议类，它将作为文本框的代理，这样我们就可以确定文本何时被修改。
- en: '[PRE14]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the following code snippet, we declare the `textFieldShouldReturn:` method
    of our `TextField` control. This method handles the dismissing of the keyboard
    when the **Done** button is pressed which is achieved by calling the `resignFirstReponder`
    method on the `TextField` control, causing the control to lose focus.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们声明了我们的 `TextField` 控件的 `textFieldShouldReturn:` 方法。此方法处理在按下 **完成**
    按钮时关闭键盘，这是通过在 `TextField` 控件上调用 `resignFirstResponder` 方法来实现的，导致控件失去焦点。
- en: '[PRE15]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, we declare the `textFieldDidBeginEditing:` and `textFieldDidEndEditing:`
    methods of our `TextField` control. These methods are responsible for determining
    when text is being updated within the text field and when the editing has been
    completed, which is achieved when the keyboard is dismissed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明我们的 `TextField` 控件的 `textFieldDidBeginEditing:` 和 `textFieldDidEndEditing:`
    方法。这些方法负责确定文本何时在文本字段中更新，以及何时编辑完成，这通常是在键盘关闭时完成的。
- en: '[PRE16]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There's more…
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: A delegate in Objective-C is a certain type of object that conform to a specific
    protocol. This means that it is an object that wraps one or more methods (and/or
    other members) that act as event handlers.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Objective-C 中的代理是一个符合特定协议的特定类型的对象。这意味着它是一个封装了一个或多个方法（以及/或其他成员）的对象，这些方法充当事件处理器。
- en: See also
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Using the iOS device keyboard* recipe
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 iOS 设备键盘* 的食谱'
- en: Using the iOS device keyboard
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 iOS 设备键盘
- en: In this recipe, we will learn how to set some of the different virtual keyboard
    styles.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何设置一些不同的虚拟键盘样式。
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will discuss the usage of the `UITextBox` object and how
    we can display editable text within it.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将讨论 `UITextBox` 对象的用法以及我们如何在其中显示可编辑文本。
- en: How to do it...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到如何实现这一点，我们需要修改我们在上一个食谱中创建的 **ViewObjectsExample** 应用程序。执行以下步骤：
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ViewObjectsExample.xcodeproj` 项目文件。
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开 `ViewController.m` 实现文件。
- en: 'Next, modify the `populateTextBox` method, as shown in the highlighted lines
    of the following code snippet:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改 `populateTextBox` 方法，如以下代码片段中突出显示的行所示：
- en: '[PRE17]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从 **产品** 菜单中选择 **产品** | **运行**，或者通过按 *command* + *R* 来构建并运行应用程序。
- en: When the compilation completes, the iOS Simulator will appear and display the
    textbox with our populated sample text. Tap into the `TextField` control to display
    our specified keyboard type.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，iOS 模拟器将出现并显示带有我们填充的示例文本的文本框。点击 `TextField` 控件以显示我们指定的键盘类型。
- en: '![How to do it...](img/3349_02_03.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349_02_03.jpg)'
- en: How it works…
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the following code snippet, we update the `keyboardType` property of the
    `TextField` control and then specify `UIKeyboardTypeNumbersAndPunctuation` as
    the keyboard type to use.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，我们更新了 `TextField` 控件的 `keyboardType` 属性，并指定 `UIKeyboardTypeNumbersAndPunctuation`
    作为要使用的键盘类型。
- en: '[PRE18]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `keyboardType` property accepts an enumeration type named `UIKeyboardType`.
    The following table explains some of these types:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyboardType` 属性接受一个名为 `UIKeyboardType` 的枚举类型。以下表格解释了其中的一些类型：'
- en: '| Keyboard type | Description |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 键盘类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `UIKeyboardTypeDefault` | The default keyboard for the current input method
    |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeDefault` | 当前输入方法的默认键盘 |'
- en: '| `UIKeyboardTypeASCIICapable` | Displays standard ASCII characters |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeASCIICapable` | 显示标准 ASCII 字符 |'
- en: '| `UIKeyboardTypeNumbersAndPunctuation` | Displays numbers and punctuation
    keyboard |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeNumbersAndPunctuation` | 显示数字和标点符号键盘 |'
- en: '| `UIKeyboardTypeURL` | Displays a keyboard optimized for URL entry |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeURL` | 显示针对 URL 输入优化的键盘 |'
- en: '| `UIKeyboardTypeNumberPad` | Displays a numeric keypad designed for PIN entry
    |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeNumberPad` | 显示为 PIN 输入设计的数字键盘 |'
- en: '| `UIKeyboardTypePhonePad` | Displays a keypad designed for entering telephone
    numbers |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypePhonePad` | 显示专为输入电话号码设计的键盘 |'
- en: '| `UIKeyboardTypeNamePhonePad` | Displays a keypad designed for entering a
    person''s name or phone number |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeNamePhonePad` | 显示专为输入人名或电话号码设计的键盘 |'
- en: '| `UIKeyboardTypeEmailAddress` | Displays a keyboard optimized for specifying
    e-mail addresses |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeEmailAddress` | 显示专为指定电子邮件地址优化的键盘 |'
- en: '| `UIKeyboardTypeDecimalPad` | Displays a keyboard with numbers and a decimal
    point |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeDecimalPad` | 显示带有数字和小数点的键盘 |'
- en: '| `UIKeyboardTypeTwitter` | Displays a keyboard optimized for twitter text
    entry, with easy access to the `@` and `#` characters |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeTwitter` | 显示专为twitter文本输入优化的键盘，易于访问`@`和`#`字符 |'
- en: '| `UIKeyboardTypeAlphabet` | This has been depreciated, but uses the keyboard
    that displays standard ASCII characters |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `UIKeyboardTypeAlphabet` | 这已被弃用，但使用显示标准ASCII字符的键盘 |'
- en: Note
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on the `UIKeyboardType` class,
    you can refer to the Apple Developer documentation, located at [http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UITextInputTraits_Protocol/Reference/UITextInputTraits.html](http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UITextInputTraits_Protocol/Reference/UITextInputTraits.html).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于`UIKeyboardType`类的信息，可以参考位于[http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UITextInputTraits_Protocol/Reference/UITextInputTraits.html](http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UITextInputTraits_Protocol/Reference/UITextInputTraits.html)的Apple开发者文档。
- en: See also
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Adding and customizing views* recipe
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和自定义视图*配方'
- en: The *Obtaining user input through the use of buttons* recipe
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过使用按钮获取用户输入*配方'
- en: The *Displaying and editing text* recipe
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*显示和编辑文本*配方'
- en: Displaying the progress to the user
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向用户显示进度
- en: In this recipe, we will learn how we can display the progress of any given length.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何显示任何给定长度的进度。
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will discuss the usage of the `UIProgressBar` object and
    how we can use the associated properties to display an animated progress bar.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将讨论`UIProgressBar`对象的用法以及如何使用相关属性来显示动画进度条。
- en: How to do it...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In order to see how this can be achieved, we need to modify the **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何实现这一点，我们需要修改之前在配方中创建的**ViewObjectsExample**应用程序。执行以下步骤：
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ViewObjectsExample.xcodeproj`项目文件。
- en: Select the `ViewController.xib` file from the project navigator window.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器窗口中选择`ViewController.xib`文件。
- en: From **Object Library**, drag a **ProgressView** object onto the subview and
    place it underneath the `UIImageView` we added previously.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中拖动一个**ProgressView**对象到子视图中，并将其放置在之前添加的`UIImageView`下方。
- en: Resize the `ProgressViewcontrol` so that its width is as wide as the view.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整`ProgressViewcontrol`的大小，使其宽度与视图相同。
- en: Next, create the outlet and property for this `ProgressView`, and name it `pgbProgress`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个`ProgressView`创建出口和属性，并将其命名为`pgbProgress`。
- en: 'Our next step is to create the code functionality that will be responsible
    for displaying the progress and animating the bar:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步是创建负责显示进度和动画条的功能代码：
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开`ViewController.m`实现文件。
- en: 'Type in the variable declaration highlighted in the following code snippet:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码片段中输入变量声明的高亮部分：
- en: '[PRE19]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, modify the `btnPressMe` method, as shown in the highlighted line of the
    following code snippet:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`btnPressMe`方法，如下面的代码片段中高亮显示的行所示：
- en: '[PRE20]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, type in the following code snippet:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入以下代码片段：
- en: '[PRE21]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单选择**产品** | **运行**，或者通过按*command* + *R*来构建并运行应用程序。
- en: 'When the compilation completes, the iOS Simulator will appear. Click on the
    **Tap Here** button to see the progress bar fill gradually, as shown in the following
    code snippet:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，iOS模拟器将出现。点击**点击此处**按钮以查看进度条逐渐填充，如下面的代码片段所示：
- en: '![How to do it...](img/3349_02_04.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/3349_02_04.jpg)'
- en: How it works…
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the following line of code, we declare a `float` variable `incrementBy`.
    This variable will be used by our method to gradually increment and fill the progress
    bar.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码行中，我们声明一个 `float` 变量 `incrementBy`。这个变量将由我们的方法用来逐渐增加并填充进度条。
- en: '[PRE22]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Next, we modify our `btnTapHere:` method to include a call to our method, `fillProgressBarmethod`
    that will be responsible for handling the processing, as well as calling other
    methods to gradually fill the bar.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们修改我们的 `btnTapHere:` 方法，包括对 `fillProgressBarmethod` 方法的调用，该方法将负责处理，并调用其他方法来逐渐填充条。
- en: '[PRE23]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In our next code snippet, the `fillProgressBar` method initializes the `incrementBy`
    variable to `0` to make sure that the bar is not filled at all. We then use the
    `scheduledTimerWithTimeInterval` method, which is one of the class methods of
    the `NSTimer` class, which is used to create timers.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个代码片段中，`fillProgressBar` 方法将 `incrementBy` 变量初始化为 `0`，以确保条不会完全填充。然后我们使用
    `scheduledTimerWithTimeInterval` 方法，这是 `NSTimer` 类的一个类方法，用于创建计时器。
- en: '`NSTimer` is an object that is scheduled to run within the run loop, so that
    it can check time passed periodically. When enough time has passed, it fires.
    If the timer has been set up to be non repeating, it then unschedules itself,
    otherwise it clears its elapsed time and waits to fire again. Next, we specify
    the duration in seconds when to call the `incrementBar:` method, as specified
    by the `selector` property and keep calling this method until the timer is invalidated.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSTimer` 是一个在运行循环中安排运行的对象，以便它可以定期检查经过的时间。当经过足够的时间后，它就会触发。如果计时器被设置为非重复的，那么它会取消安排自己，否则它会清除其经过的时间并等待再次触发。接下来，我们指定以秒为单位的持续时间来调用
    `incrementBar:` 方法，如 `selector` 属性所指定，并持续调用此方法，直到计时器被无效化。'
- en: '[PRE24]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In our final code snippet, we start by setting our `incrementBar` variable to
    the number of incremental steps this should take to fill our progress bar value,
    and then update the `progress` property of our `ProgressView`. Next, we check
    to see if we have reached our bar threshold and then update the label accordingly,
    before finally invalidating our `timer` object to prevent the method from being
    called.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最终代码片段中，我们首先将 `incrementBar` 变量设置为填充进度条值所需的增量步骤数，然后更新 `ProgressView` 的 `progress`
    属性。接下来，我们检查是否达到了条阈值，然后相应地更新标签，最后使 `timer` 对象无效，以防止方法被调用。
- en: Alternatively, if we have not yet reached our threshold, we update the `Label`
    object to show the progress bar's current progress.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们还没有达到我们的阈值，我们更新 `Label` 对象以显示进度条的当前进度。
- en: '[PRE25]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on the `NSTimer` class, you can
    refer to the Apple Developer documentation, located at [https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/Reference/NSTimer.html](https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/Reference/NSTimer.html).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 `NSTimer` 类的信息，你可以参考位于 [https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/Reference/NSTimer.html](https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/Reference/NSTimer.html)
    的苹果开发者文档。
- en: There's more…
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The `UIProgressView` class supports one more style. This can be specified by
    setting the `progressViewStyle` property to `UIProgressViewStyleBar`. With that
    change, the bar will look like the one, as can be seen when using Apple's Mail
    application.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIProgressView` 类支持一种额外的样式。这可以通过将 `progressViewStyle` 属性设置为 `UIProgressViewStyleBar`
    来指定。这样修改后，进度条将看起来像苹果邮件应用中可以看到的那样。'
- en: See also
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Adding and customizing views* recipe
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和自定义视图* 的配方'
- en: The *Using labels to display text* recipe
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用标签显示文本* 的配方'
- en: The *Obtaining user input through the use of buttons* recipe
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过按钮使用来获取用户输入* 的配方'
- en: Adding a toolbar to a view
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将工具栏添加到视图中
- en: In this recipe, we will learn how to add and use toolbars within our application.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何在我们的应用程序中添加和使用工具栏。
- en: Getting ready
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will discuss the usage of the `Toolbar` object and how we
    can use the associated properties to display an animated progress bar.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将讨论 `Toolbar` 对象的使用以及我们如何使用关联的属性来显示动画进度条。
- en: How to do it...
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to see how this can be achieved, we need to modify our **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这是如何实现的，我们需要修改我们在前一个配方中创建的 **ViewObjectsExample** 应用程序。执行以下步骤来完成此操作：
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ViewObjectsExample.xcodeproj`项目文件。
- en: Select the `ViewController.xib` file from the project navigator window.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器窗口中选择`ViewController.xib`文件。
- en: From **Object Library**, drag a **Toolbar** object into the main view controller,
    and place it at the top of the main view.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中拖动一个**Toolbar**对象到主视图控制器中，并将其放置在主视图的顶部。
- en: Next, select the button it contains by default and set its **Title** property
    to **Fade In**.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择默认包含的按钮，并将它的**标题**属性设置为**淡入**。
- en: Next, add a `Flexible Space Bar Button Item` object to the toolbar to the right
    of the **Fade In** button.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**淡入**按钮右侧的工具栏中添加一个`Flexible Space Bar Button Item`对象。
- en: Then, from **Object Library**, drag a **UIBarButtonItem** object to the toolbar
    and place this after the `Flexible Space Bar Button Item` object.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从**对象库**中拖动一个**UIBarButtonItem**对象到工具栏中，并将其放置在`Flexible Space Bar Button
    Item`对象之后。
- en: Next, select the button and set its **Title** property to **Fade Out**.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择按钮，并将它的**标题**属性设置为**淡出**。
- en: Next, create the outlets and properties for the **Fade In** and **Fade Out**
    buttons, and name them `btnFadeIn` and `btnFadeOut`.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为**淡入**和**淡出**按钮创建出口和属性，并将它们命名为`btnFadeIn`和`btnFadeOut`。
- en: Next, create the action methods for the **Fade In** and **Fade Out** buttons,
    and name them `viewFadeIn` and `viewFadeOut`.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为**淡入**和**淡出**按钮创建动作方法，并将它们命名为`viewFadeIn`和`viewFadeOut`。
- en: After creating the button outlets and properties, save the document by selecting
    **File** | **Save** from the menu bar, or alternatively by pressing *command*
    + *S*. The layout should look like the following screenshot:![How to do it...](img/3349_02_05.jpg)
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建按钮出口和属性后，通过从菜单栏中选择**文件** | **保存**来保存文档，或者通过按*command* + *S*键来保存。布局应类似于以下截图：![如何操作...](img/3349_02_05.jpg)
- en: 'Our next step is to create the code functionality that will be responsible
    for updating the label to display what button was pressed within the toolbar:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的步骤是创建代码功能，该功能将负责更新标签以显示在工具栏中按下的按钮：
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器中打开`ViewController.m`实现文件。
- en: 'Modify the `viewFadeIn` and `viewFadeOut` methods, as shown in the following
    code snippet:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`viewFadeIn`和`viewFadeOut`方法，如下面的代码片段所示：
- en: '[PRE26]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单中选择**产品** | **运行**来构建和运行应用程序，或者通过按*command* + *R*键来运行。
- en: When the compilation completes, the iOS Simulator will appear. Tap on both of
    the toolbar buttons to see the label update based on which button has been clicked.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，iOS模拟器将出现。点击工具栏中的两个按钮，以查看标签根据哪个按钮被点击而更新。
- en: How it works…
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `UIToolbar` object is used to hold items relating to the `UIBarButtonItem`
    object type. These types of objects are special kinds of buttons and spacers.
    A `UIBarButtonItem` object can be system defined or custom type, and can use any
    of the predefined types as listed in the **Identifier** attribute within Interface
    Builder and provides a specific icon to the button.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIToolbar`对象用于包含与`UIBarButtonItem`对象类型相关的项。这些类型的对象是特殊的按钮和间隔符。`UIBarButtonItem`对象可以是系统定义的或自定义类型，并且可以使用在Interface
    Builder中**标识符**属性中列出的任何预定义类型，并为按钮提供特定的图标。'
- en: The `UIBarButtonItem` objects can also be customized to contain an image to
    make your application more professional and visually intuitive. This can be achieved
    by using the **Image** attribute within Interface Builder.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIBarButtonItem`对象还可以自定义以包含图像，使您的应用程序更加专业和直观。这可以通过在Interface Builder中使用**Image**属性来实现。'
- en: There's more…
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `UIBarButtonItem` class has a style property that determines the button's
    style. It can be used only when the button item's identifier is set to **Custom**.
    You can set the button's style property to any of the `UIBarButtonItemStyle` types.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIBarButtonItem`类有一个样式属性，用于确定按钮的样式。它只能在按钮项的标识符设置为**自定义**时使用。您可以将按钮的样式属性设置为`UIBarButtonItemStyle`类型中的任何一种。'
- en: See also
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding and customizing views* recipe
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和自定义视图*菜谱'
- en: The *Using labels to display text* recipe
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用标签显示文本*菜谱'
- en: Fading a view in and out
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图淡入和淡出
- en: In this recipe, we will take a look at how we can perform some fancy animations
    to views. These can be perfect for building and enhancing the user experience
    to produce smooth, animated animations for your applications.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将探讨如何对视图执行一些复杂的动画。这些动画非常适合构建和增强用户体验，为您的应用程序产生平滑的动画效果。
- en: Getting ready
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The `UIView` animations are the perfect building blocks for building the visual
    bridge between a view''s current and changed state. With views, you can visually
    change and create animations that link these together. Some examples include the
    following:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIView`动画是构建视图当前状态和更改状态之间视觉桥梁的完美构建块。使用视图，您可以创建连接这些视图的动画。以下是一些示例：'
- en: Moving a view around the screen
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在屏幕上移动视图
- en: Updating the view's frame and bounds coordinates
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新视图的框架和边界坐标
- en: Stretching the view's content to fill the screen regions
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将视图的内容拉伸以填充屏幕区域
- en: Altering the view's alpha value to support transparency
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变视图的alpha值以支持透明度
- en: Hiding or showing a view
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏或显示一个视图
- en: Altering the view's ordering to show which view is in front
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变视图的顺序以显示哪个视图在前
- en: Performing transformations and rotations to views
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对视图执行变换和旋转
- en: How to do it...
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to see our view fade in and out, we need to modify our **ViewObjectsExample**
    application that we created in the previous recipe. Perform the following steps
    to do so:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到我们的视图淡入和淡出，我们需要修改我们在上一个教程中创建的**ViewObjectsExample**应用程序。执行以下步骤来完成此操作：
- en: Open the `ViewObjectsExample.xcodeproj` project file.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ViewObjectsExample.xcodeproj`项目文件。
- en: Select the `ViewController.m` implementation file from the project navigator.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器中选择`ViewController.m`实现文件。
- en: 'Next, modify the `viewFadeIn` method, as shown in the following code snippet:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`viewFadeIn`方法，如下面的代码片段所示：
- en: '[PRE27]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, modify the `viewFadeOut` method, as shown in the following code snippet:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`viewFadeOut`方法，如下面的代码片段所示：
- en: '[PRE28]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, add the highlighted code lines of the following code snippet to the `viewDidLoad`
    method:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下代码片段中高亮的代码行添加到`viewDidLoad`方法中：
- en: '[PRE29]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Then, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单中选择**产品** | **运行**，或者通过按*command* + *R*来构建和运行应用程序。
- en: When the compilation completes, the iOS Simulator will appear. Tap on both of
    the toolbar buttons to see the subview's start to fade either in our out.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，iOS模拟器将出现。点击工具栏上的两个按钮，可以看到子视图开始淡入或淡出。
- en: How it works…
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the following code snippet, we mark the start of our animation block using
    the `beginAnimations` method and specify the `Fade In` animation type, before
    setting the graphics context to nil. Next, we specify the length of the animation
    in seconds using `setAnimationDuration`, and then set the alpha transparency layer
    by setting `setAlpha` to `1.0`, which makes it become visible.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们使用`beginAnimations`方法标记动画块的开始，并指定`Fade In`动画类型，在将图形上下文设置为nil之前。然后，我们使用`setAnimationDuration`指定动画的长度（以秒为单位），并通过将`setAlpha`设置为`1.0`来设置alpha透明度层，使其变得可见。
- en: Finally, we use the `commitAnimations` method to indicate that all of our properties
    to animate have been set, and animations should begin and then enable/disable
    our toolbar buttons accordingly.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`commitAnimations`方法来指示所有要动画化的属性都已设置，并开始动画，然后相应地启用/禁用工具栏按钮。
- en: '[PRE30]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Next, we mark the start of our animation block using the `beginAnimations` method
    and specify the `Fade Out` animation type, before setting the graphics context
    to nil. We then specify the length of the animation in seconds using `setAnimationDuration`,
    and then set the alpha transparency layer by setting `setAlpha` of our subview
    to invisible so that it gradually fades.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`beginAnimations`方法标记动画块的开始，并指定`Fade Out`动画类型，在将图形上下文设置为nil之前。然后，我们使用`setAnimationDuration`指定动画的长度（以秒为单位），并通过将子视图的`setAlpha`设置为不可见来设置alpha透明度层，使其逐渐淡出。
- en: Finally, we use the `commitAnimations` method to indicate that all of our properties
    to animate have been set, and animations should begin and enable our **Fade In**
    button within our toolbar.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`commitAnimations`方法来指示所有要动画化的属性都已设置，并开始动画，并在工具栏中启用我们的**Fade In**按钮。
- en: '[PRE31]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on `UIView` animations, you can
    refer to the Apple Developer documentation, located at [http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/UIView/UIView.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/UIView/UIView.html)`#//apple_ref/doc/uid/TP40006816-CH3-SW131`.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于 `UIView` 动画的信息，可以参考位于 [http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/UIView/UIView.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/UIView/UIView.html)`#//apple_ref/doc/uid/TP40006816-CH3-SW131`
    的 Apple 开发者文档。
- en: See also
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding and customizing views* recipe
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和自定义视图* 菜谱'
- en: The *Adding a toolbar to a view* recipe
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*向视图添加工具栏* 菜谱'
- en: Creating a custom table view controller
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义表格视图控制器
- en: In this recipe we will learn how to create a subclass of the `UITableViewController`
    class, and use it to populate a `UITableView` controller.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何创建 `UITableViewController` 类的子类，并使用它来填充 `UITableView` 控制器。
- en: Getting ready
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `UITableViewController` classes are a perfect way of providing you with
    the flexibility to manage a table view, and providing the functionality of adding
    to our base controller the ability of sharing its inheritor classes. For this
    to happen, we will need to incorporate the methods for a `UITableView` class.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITableViewController` 类提供了一个完美的方法，让您能够灵活地管理表格视图，并为我们的基本控制器添加共享其继承类的能力。为了实现这一点，我们需要将
    `UITableView` 类的方法纳入其中。'
- en: How to do it...
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, we will need to create a new Xcode project. This can be achieved
    by performing the following simple steps:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个新的 Xcode 项目。这可以通过执行以下简单步骤来实现：
- en: Create a new **Single View Application** project and name it `TableViewExample`.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 **单视图应用程序** 项目，并将其命名为 `TableViewExample`。
- en: Next, select the `TableViewExample` folder, select **File** | **New** | **New
    File…** or press *command* + *N*.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择 `TableViewExample` 文件夹，选择 **文件** | **新建** | **新建文件…** 或按 *command* +
    *N*。
- en: Select the **Objective-C class** template from the list of templates.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模板列表中选择 **Objective-C 类** 模板。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下一步** 按钮继续向导的下一步。
- en: Enter `TableViewController` as the name of the file to create.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将要创建的文件命名为 `TableViewController`。
- en: Ensure that you have selected **UITableViewController** as the type of subclass
    to create from the **Subclass** drop-down menu.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已从 **子类** 下拉菜单中选择创建子类的类型为 **UITableViewController**。
- en: Ensure that the **Targeted for iPad** checkbox is not checked.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保未选中 **针对 iPad** 复选框。
- en: Ensure that the **With XIB for User Interface** checkbox is not checked.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保未选中 **使用 XIB 进行用户界面** 复选框。
- en: Click on the **Next** button to proceed to the next step of the wizard.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下一步** 按钮继续向导的下一步。
- en: Click on the **Create** button to save the file to the specified folder location.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** 按钮将文件保存到指定的文件夹位置。
- en: How it works…
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: What we have done here is add a new `TableViewController` class to our **TableViewExample**
    application that provides us with the necessary table view methods we can use
    to interact with the `TableView` control.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是向我们的 **TableViewExample** 应用程序添加一个新的 `TableViewController` 类，它为我们提供了必要的表格视图方法，我们可以使用这些方法与
    `TableView` 控件进行交互。
- en: See also
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding a table view to a view controller* recipe
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*向视图控制器添加表格视图* 菜谱'
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 1 章](ch01.html "第 1 章。获取和安装 iOS SDK 开发工具") 的 *使用 Xcode 创建 iOS 项目* 菜谱中，*获取和安装
    iOS SDK 开发工具*
- en: Adding a table view to a view controller
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向视图控制器添加表格视图
- en: In this recipe we will learn how to add a `UITableView` object to an existing
    view controller.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何向现有的视图控制器添加 `UITableView` 对象。
- en: Getting ready
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `UITableView` object provides you with an interface for displaying data
    in list form.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITableView` 对象为您提供了以列表形式显示数据的接口。'
- en: How to do it...
  id: totrans-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to add a table view to our view controller, we need to modify our
    **TableViewExample** application that we created in the previous recipe. Perform
    the following steps to do so:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向我们的视图控制器添加表格视图，我们需要修改我们在上一个菜谱中创建的 **TableViewExample** 应用程序。执行以下步骤来完成此操作：
- en: Open the `TableViewExample.xcodeproj` project file.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `TableViewExample.xcodeproj` 项目文件。
- en: 'Next, change the inheritance of the `ViewController` class, as shown in the
    following highlighted line of code:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更改`ViewController`类的继承方式，如图中突出显示的代码行所示：
- en: '[PRE32]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Next, select the `ViewController.xib file` from the project navigator window.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从项目导航窗口中选择`ViewController.xib文件`。
- en: Then, delete the current view within the view controller, by selecting it and
    then pressing the *Delete* key.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过选择它并按**删除**键来删除视图控制器中的当前视图。
- en: Next, from **Object Library**, drag a **TableView** object onto the drawing
    area.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**对象库**中拖动一个**TableView**对象到绘图区域。
- en: Hold down the *control* key and drag from the **File's Owner** object to the
    `UITableView`, as shown in the following screenshot:![How to do it...](img/3349_02_06.jpg)
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住**控制**键，从**文件所有者**对象拖动到`UITableView`，如图所示：![如何操作...](img/3349_02_06.jpg)
- en: Select **view** from the pop-up panel and release the button. This connects
    the `TableView` we have just added to the view outlet of the **File's Owner**
    object.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从弹出面板中选择**视图**并释放按钮。这将我们将刚刚添加的`TableView`连接到**文件所有者**对象的视图输出。
- en: 'Our next step is to modify the `ViewController` class to use the custom table
    view controller that we created in the previous recipe. This can be achieved by
    performing the following simple steps:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是修改`ViewController`类，以使用我们在前一个食谱中创建的自定义表格视图控制器。这可以通过执行以下简单步骤实现：
- en: Click and select the **File's Owner** controller object within the view.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并选择视图中的**文件所有者**控制器对象。
- en: Then, select the **Identity Inspector** section and change the value of the
    **Custom Class** property to read `CustomTableView`, as shown in the following
    screenshot:![How to do it...](img/3349_02_07.jpg)
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择**标识检查器**部分，并将**自定义类**属性的值更改为`CustomTableView`，如图所示：![如何操作...](img/3349_02_07.jpg)
- en: Save the document by selecting **File** | **Save** from the menu bar, or alternatively
    by pressing *command* + *S*.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从菜单栏选择**文件** | **保存**或按*command* + *S*来保存文档。
- en: Next, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过从**产品**菜单选择**产品** | **运行**或按*command* + *R*来构建和运行应用程序。
- en: How it works…
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When we add a `UITableView` object to an existing view using Interface Builder,
    its view is displayed with some predefined data, which is only visible during
    design time and not at runtime.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 Interface Builder 将`UITableView`对象添加到现有视图时，其视图会显示一些预定义的数据，这些数据仅在设计时可见，而在运行时不显示。
- en: We then hooked up the view of our `TableView` object to our `File's Owner` object,
    and finally we modified the view controller's class to use our own `CustomTableView`
    class that we created. The discussion on how to go about populating data in `UITableView`
    will be covered in an upcoming chapter.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后将我们的`TableView`对象的视图连接到我们的`File's Owner`对象，最后我们修改了视图控制器的类，以使用我们创建的自己的`CustomTableView`类。关于如何在`UITableView`中填充数据的讨论将在下一章中介绍。
- en: See also
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a custom table view controller* recipe
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Creating a custom table view controller*食谱'
- en: The *Creating an iOS Project with Xcode* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第1章的*Creating an iOS Project with Xcode*食谱中，*获取和安装iOS SDK开发工具*，[第1章](ch01.html
    "第1章。获取和安装iOS SDK开发工具")
- en: The *Displaying data within the table view* recipe in [Chapter 8](ch08.html
    "Chapter 8. Working with the CoreData and GameKit Frameworks"), *Data Management*
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第8章的*Displaying data within the table view*食谱中，*数据管理*，[第8章](ch08.html "第8章。使用CoreData和GameKit框架")
- en: Handling different iOS devices
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理不同的 iOS 设备
- en: In this recipe, we will learn how to detect whether we are running the application
    on an iPhone or iPad device.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何检测我们是否在iPhone或iPad设备上运行应用程序。
- en: Getting ready
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `UIDevice` object provides you with various methods that allow you to gain
    access to certain information relating to a specific device; it can help you work
    out how much battery is remaining on the device, as well as determine what type
    of device it is and its orientation aspects.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIDevice`对象提供了各种方法，允许您获取有关特定设备的信息；它可以帮助您计算出设备剩余的电量，以及确定设备类型及其方向。'
- en: How to do it...
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, we will need to create a new Xcode project. This can be achieved
    by performing the following simple steps:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要创建一个新的Xcode项目。这可以通过执行以下简单步骤实现：
- en: Create a new **Single View Application** project and name it `UniversalApp`.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**单视图应用程序**项目，并将其命名为`UniversalApp`。
- en: Next, select the `ViewController.xib` file from the project navigator window.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从项目导航器窗口中选择`ViewController.xib`文件。
- en: Next, from **Object Library**, drag a **Label** object onto the main view.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**对象库**中将一个**标签**对象拖放到主视图中。
- en: Resize the `Label` control so that its contents fill the width of the view.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整`标签`控件的大小，使其内容填充视图的宽度。
- en: Next, create the outlet and property for this `Label` control, and name it `lblMessage`.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个`标签`控件创建出口和属性，并将其命名为`lblMessage`。
- en: 'Our next step is to create the code functionality that will be responsible
    for determining what type of iOS device we are using, as well as updating the
    label properties. This can be achieved by performing the following simple steps:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的步骤是创建代码功能，该功能将负责确定我们正在使用哪种iOS设备，以及更新标签属性。这可以通过执行以下简单步骤实现：
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开`ViewController.m`实现文件。
- en: 'Next, modify the `viewDidLoad` method, as shown in the following code snippet:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`viewDidLoad`方法，如下代码片段所示：
- en: '[PRE33]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Save the document by selecting **File** | **Save** from the menu bar.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从菜单栏选择**文件** | **保存**来保存文档。
- en: Next, select **UniversalApp** from the project navigator.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从项目导航器中选择**通用应用**。
- en: In the **Summary** tab, select **Universal** from under the **Devices** drop-down
    menu, as shown in the following screenshot:![How to do it...](img/3349_02_08.jpg)
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**摘要**选项卡中，从**设备**下拉菜单中选择**通用**，如下截图所示：![如何操作...](img/3349_02_08.jpg)
- en: Next, switch between the different devices by clicking inside the highlighted
    section, as shown in the following screenshot:![How to do it...](img/3349_02_09.jpg)
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过点击高亮部分在不同设备之间切换，如下截图所示：![如何操作...](img/3349_02_09.jpg)
- en: Build and run the application by selecting **Product** | **Run** from the **Product**
    menu, or alternatively by pressing *command* + *R*.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从**产品**菜单选择**产品** | **运行**来构建和运行应用程序，或者通过按*command* + *R*。
- en: How it works…
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the following code snippet, we check to see which device the application
    is running on, by checking the `userInterfaceIdiom` property of the `UIDevicecurrentDevice`
    property:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，我们通过检查`UIDevicecurrentDevice`属性的`userInterfaceIdiom`属性来查看应用程序正在运行的设备：
- en: '[PRE34]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If an iPad has been determined, we resize the view using the `frame` property
    to size it to the iPad screen''s dimensions and then update our label properties
    and then set the background of our view, as shown in the following code snippet:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经确定是iPad，我们使用`frame`属性调整视图大小以适应iPad屏幕尺寸，然后更新我们的标签属性，并设置视图的背景，如下代码片段所示：
- en: '[PRE35]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Alternatively, if it has been determined that we are running the application
    on an iPhone, we update our label properties and then set the background of our
    view, as shown in the following code snippet:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们确定应用程序正在iPhone上运行，我们更新标签属性，然后设置视图的背景，如下代码片段所示：
- en: '[PRE36]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on the `UIDevice` class, you
    can refer to the Apple Developer documentation, located at [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html).
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于`UIDevice`类的信息，可以参考位于[http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html)的Apple开发者文档。
- en: See also
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding and customizing views* recipe
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和自定义视图* 菜谱'
- en: The *Using labels to display text* recipe
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用标签显示文本* 菜谱'
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具")的*创建到Interface Builder对象的出口*菜谱中，*获取和安装iOS
    SDK开发工具*
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具")的*使用Xcode创建iOS项目*菜谱中，*获取和安装iOS SDK开发工具*
