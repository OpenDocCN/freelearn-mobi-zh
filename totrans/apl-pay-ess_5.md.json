["```swift\n// server_app/lib/inventory_models.js\nvar mongoose= require('mongoose');\nvar Schema=   mongoose.Schema;\n\nvar Product_schema= new Schema({\n   name:             String,\n   description:      String,\n   image_uri:        String,\n   quantity_on_hand: Number,\n   price:            String\n});\n\nvar ShippingMethod_schema= new Schema({\n   name:         String,\n   description:  String,\n   transit_days: Number,\n   price:        String\n});\n\nvar Order_schema= new Schema({\n   date                 : String,\n   description          : String,\n   shipping_contact     : String,\n   shipping_email       : String,\n   shipping_street      : String,\n   shipping_city        : String,\n   shipping_state       : String,\n   shipping_zip         : String,\n   shipping_method_name : String,\n   total_price          : String,\n   stripe_charge_id     : String\n});\n\nexports.Product=\n   mongoose.model('Product',        Product_schema);\nexports.ShippingMethod=\n   mongoose.model('ShippingMethod', ShippingMethod_schema);\nexports.Order=\n   mongoose.model('Order',          Order_schema);\n```", "```swift\n// server_app/red.js\n\n// load required modules\nvar models=    require('./lib/inventory_models.js');\nvar assert=    require('assert');\nvar mongoose=  require('mongoose');\nvar restify=   require('restify');\nvar stripe=    require('stripe')('<my_key>')\nvar server=    restify.createServer();\nserver.use(restify.bodyParser());\n\n// specify the data models\nProduct=         models.Product;\nShippingMethod=  models.ShippingMethod;\nOrder=           models.Order;\n\n// connect to the red MongoDB database\nmongoose.connect('mongodb://localhost/red');\n\nprotocol=  'http://';\nhostname=  'red';\nport=      12345;\nbase_uri=  protocol + hostname + ':' + port;\nconsole.log(base_uri);\n\n// initialize Product collection, if needed\nProduct.find(function(error, _products)\n{\n   if (_products.length == 0)\n   {\n      console.log('initializing product collection');\n      models.Product(\n      {\n         name:             'Clock', \n         description:      'Wooden clock', \n         quantity_on_hand: 10,\n         price:            '50.00',\n         image_uri:        base_uri + '/product_image/clock.jpeg'\n      }).save();\n      ...\n   }\n});\n\n// load Product collection into products\nvar products= new Array();\nProduct.find(function(error, _products)\n{\n   products= _products;\n});\n\n// initialize ShippingMethods collection, if needed\nShippingMethod.find(function(error, _shipping_methods)\n{\n   if (_shipping_methods.length == 0)\n   {\n      console.log('initializing shipping-method collection');\n      models.ShippingMethod({\n         name:         'Free',\n         description:  'Delivers in seven days',\n         transit_days: 7,\n         price:        '0.00'\n      }).save();\n      ...\n   }\n})\n\n// load ShippingMethod collection into shipping_methods\nvar shipping_methods= new Array();\nShippingMethod.find(function(error, _shipping_methods)\n{\n   shipping_methods= _shipping_methods;\n});\n\n// ** start middleware (client API) **\n//   /product_image/<name> API:\n//     provides product image from\n//     <project_dir>/public/product_image/<name>\nserver.get(/\\/product_image\\/?.*/,\n   restify.serveStatic( { directory: '../public' }));\n\n//   /inventory API:\n//     provides current inventory from Product document\nserver.get('/inventory', function(request, response, next)\n{\n   response.send(products);\n   next();\n});\n\n//   /shippng_methods API:\n//     provides shipping methods from ShippingMethod document\nserver.get('/shipping_methods', function(request, response, next)\n{\n   response.send(shipping_methods);\n   next();\n});\n...\n// ** end middleware (client API) **\n\n// listen for HTTP requests\nserver.listen(12345);\n```"]