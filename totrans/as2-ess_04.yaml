- en: Chapter 4. Using the Code Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have created your first project and learned how to navigate through
    the different folders, subfolders, and files, it's time to start programming.
    Have you ever wanted to be able to program more efficiently? How can you speed
    up your development process? Do you want to learn useful shortcuts too? For example,
    how can you comment more than one line at once, find and replace strings, or move
    faster through different parameters in a method call?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use and customize the code editor in
    order to feel more comfortable when programming. It is worth knowing the basic
    features of the code editor in order to increase your productivity. You will learn
    about code completion and code generation. Finally, you will learn some useful
    shortcuts and hotkeys to speed up the development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code generation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding related content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing editor settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To open the editor settings, navigate to **File** | **Settings**. In the **IDE
    Settings** section of the left panel, select **Editor**. The **Editor** settings
    are distributed among several categories: **General**, **Colors & Fonts**, **Code
    Style**, **Inspections**, **File and Code Templates**, **File Encodings**, **Live
    Templates**, **File Types**, **Copyright**, **Emmet**, **Images**, **Intentions**,
    **Language Injections**, **Spelling**, and **TODO**.'
  prefs: []
  type: TYPE_NORMAL
- en: We are explaining some of the most interesting ones in this section and in the
    next sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Select **General** settings under the **Editor** settings. This displays the
    settings in the right-hand side panel. Some of the most interesting options are
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mouse** | **Change font size (Zoom) with Ctrl + Mouse Wheel**: Checking this
    option allows us to change the font size of the editor using the mouse wheel,
    as we do in other programs such as web browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other** | **Show quick documentation on mouse move**: Checking this option
    enables the display of a quick document about the code in a small dialog when
    we move the mouse over a piece of code and wait for 500 milliseconds. You can
    change the default delay value of 500 milliseconds. When we move the mouse again,
    the dialog automatically disappears, but if we move the mouse into the dialog,
    then we can examine the document in detail. This is very useful in order to read
    what a method does and to identify its parameters without navigating to it. The
    following screenshot displays this functionality:![General](img/B05459_04_01.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **General** settings are also distributed among several subcategories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Auto Import**: This category configures how the editor behaves when we paste
    code that uses classes not imported into the current class. By default, when we
    do this, a popup appears, and it tells us to add the `import` command. If we check
    the **Add unambiguous imports on the fly** option, the `import` command is added
    automatically, without our interaction.![General](img/B05459_04_02.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appearance**: This category configures the appearance of the editor. We recommend
    checking the next two options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show line numbers**: This shows the line numbers on the left edge of the
    editor. It can be very useful when we are debugging or examining the log.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show method separators**: This visually separates the methods of a class.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code Completion**: This category configures the code completion options.
    We will examine code completion in detail in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code Folding**: This category collapses or expands code blocks allowing us
    to hide code blocks that we are not editing, simplifying the code view. We can
    collapse or expand the blocks using the icons from the editor, as shown in the
    following screenshot, or using the **Folding** menu from **Code**:![General](img/B05459_04_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Console**: This configures the console. You can modify the commands history
    size or the lines that are folded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor Tabs**: This configures the editor tabs. We advise you to select the
    **Mark modified tabs with asterisk** option to easily detect modified and unsaved
    files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Postfix Completion**: This configures a type of code completion called postfix
    completion. We will examine code completion in detail in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smart Keys**: This category configures actions to be done automatically while
    typing, such as adding closing brackets, quotes, or tags, and indenting the line
    when we press the *Enter* key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Colors & Fonts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This category changes the fonts and colors. There are a lot of options and elements
    to configure (keywords, numbers, warnings, errors, comments, strings, and so on).
    You can save the configurations as schemes from the main screen configuration
    of the **Color & Fonts** settings.
  prefs: []
  type: TYPE_NORMAL
- en: Code Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Code Style** settings affect only the current project. You can save the
    style configuration as schemes from the main panel of this settings category.
    There are several file types that you can configure separately: **C/C++**, **Groovy**,
    **HTML**, **Java**, **JSON**, **Properties**, **XML**, and other file types.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following style features are some of the ones that you can configure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tabs and Indents**: Configure if you want to use tab characters or white
    spaces (we suggest not using tab characters) and some of their properties, such
    as size or indentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spaces**: Configure the insertion of white spaces before parentheses, around
    operators, before left braces, before keywords, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wrapping and Braces**: Configure line breaks, braces placement (for example,
    **End of line** or **Next line**), argument placement, control statements, and
    so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blank Lines**: Configure the insertion of blank lines, for example, before
    or after imports, around method bodies, or around fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An appropriate code styling makes your code easier to understand. Using a common
    code styling is very important if the code is written by several developers or
    if your code is shared with other developers.
  prefs: []
  type: TYPE_NORMAL
- en: File and Code Templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This category allows you to edit and create templates for files, file headers,
    or code. The **File and Code Templates** settings affect only the current project.
    You can save the style configuration as schemes from the main panel of this settings
    category.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the file header template for your project using some predefined
    variables that are explained in the detail panel (`${PACKAGE_NAME}`, `${USER}`,
    `${DATE}`, `${TIME}`, `${PROJECT_NAME}`, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Includes** tab of the **File and Code Templates** settings and
    select the **File Header** template. Every time you create a new file, the following
    header is added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can modify it by adding the file package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also create and modify the templates that are applied when you create
    a new activity, fragment, service, resource file, and so on. For example, this
    is the template for an activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can learn more in the IntelliJ IDEA documentation at [https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html](https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html).
  prefs: []
  type: TYPE_NORMAL
- en: Code Completion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Code Completion** helps us write code quickly by automatically completing
    the code using dynamic suggestion lists that are generated based on what we just
    typed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic code completion is the list of suggestions that appears while we
    are typing, as shown in the following screenshot. If the list is not displayed,
    press *Ctrl* and the *Spacebar* to open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code Completion](img/B05459_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keep typing, select a command from the list, and press *Enter* or double-click
    to add it to your code. If the code you are writing is an expression and you want
    to insert the expression in its negated form, then select the expression from
    the suggestion list, and instead of pressing *Enter* or double-clicking it, press
    the exclamation mark key (*!*). The expression will be added with negation.
  prefs: []
  type: TYPE_NORMAL
- en: Another utility of code completion is the **completion of statements**. Type
    a statement, press *Ctrl* + *Shift* + *Enter* (*Cmd* + *Shift* + *Enter* on OS
    X), and notice how the closing punctuation is automatically added. If you press
    these keys after typing the `if` keyword, the parentheses and brackets are added
    to complete the conditional statement. This shortcut can also be used to complete
    method declarations. Start typing a method, and after typing the opening parenthesis
    or the method parameters, press *Ctrl* + *Shift* + *Enter* (*Cmd* + *Shift* +
    *Enter* on OS X). The closing parenthesis and the brackets are added to complete
    the method specification.
  prefs: []
  type: TYPE_NORMAL
- en: Smart Type Completion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another type of code completion is the **smart type** code completion. If you
    are typing a command to call a method with a `String` parameter, then only the
    `String` objects will be suggested. This smart completion occurs in the right-hand
    side of an assignment statement, parameters of a method call, return statements,
    or variable initializers. To open the smart suggestions list, press *Ctrl* + *Shift*
    along with the Spacebar.
  prefs: []
  type: TYPE_NORMAL
- en: 'To show the difference between these two types of suggestion lists, create
    two objects of different classes, `String` and `int`, in your code. Then call
    a method with a `String` parameter, for example, the `i` method of the `Log` class.
    When typing the `String` parameter, note the difference between opening the basic
    suggestion list (*Ctrl* + Spacebar), which the next screenshot shows, and open
    the smart type suggestion list (*Ctrl* + *Shift* + Spacebar), which the second
    screenshot shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Smart Type Completion](img/B05459_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the first list, which is shown in the previous screenshot, both objects
    are suggested, although the `int` object does not match the parameter class. In
    the second one, which is shown in the following screenshot, only `String` objects
    are suggested:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Smart Type Completion](img/B05459_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Postfix Completion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Postfix Completion** is a type of code completion that transforms an
    already typed expression. The transformation depends on the postfix you write,
    the context and the type of expression. Postfix expressions are suggested in the
    basic code completion suggestion list. One example postfix template is `notnull`,
    which is the one suggested in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Postfix Completion](img/B05459_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you apply the `notnull` template to an expression `expr`, the expression
    is transformed to `if (expr != null)`. The expression from the previous screenshot
    becomes the next code when the `notnull` transformation is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to see only the available postfix templates in the suggestion list,
    press *Ctrl* + *J* (*Cmd* + *J* for OS X). A dialog like the one in the next screenshot
    lists all the available postfix templates that can be applied to the current expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Postfix Completion](img/B05459_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can manage different postfix templates from the **Editor** settings, in
    **General** | **Postfix Completion**. A complete list of all the available templates
    is displayed along with their description on the right-hand side panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next screenshot shows the description and transformation of the `for` postfix
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Postfix Completion](img/B05459_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Code generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To generate blocks of code in a class, navigate to **Code** | **Generate**
    or press the *Alt* + *Insert* shortcut (*Cmd* + *N* on OS X). A dialog like the
    following is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code generation](img/B05459_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the **Generate** menu, you can generate constructors, getters and setters
    methods, super method calls, or `equals` and `toString` methods. We can also override
    or delegate methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way of generating code is surrounding some of our code with statements
    (`if`, `if/else`, `while`, `for`, `try/catch`, and so on). Select a code line
    and navigate to **Code** | **Surround With** or press *Ctrl* + *Alt* + *T* (*Cmd*
    + *Alt* + *T* on OS X). The menu for the **Surround With** option is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code generation](img/B05459_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The third option, which is also shown in the previous screenshot, is inserting
    a **Live Template**. You can surround your code with a **Live Template** using
    the **Surround With** option or you can navigate to **Code** | **Surround with
    Live Templates** or press *Ctrl* + *Alt* + *J* (*Cmd* + *Alt* + *J* on OS X).
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Code** | **Insert Live Templates** or press *Ctrl* + *J* (*Cmd*
    + *J* on OS X) to open a dialog of the available live templates. These templates
    can insert code to iterate collections, arrays, lists, and so on; code to print
    formatted strings; code to throw exceptions; or code to add static and final variables.
    The left edge of the dialog shows the prefix for each template. If you type the
    prefix in the editor and press the *Tab* key, the code template is added automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `inn` at the end of the `onCreate` method of our main activity and press
    *Tab*. A conditional block will appear. In this new block, type `soutv` and press
    *Tab* again. The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Navigating code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most direct way of navigating to declarations or type declarations is pressing
    *Ctrl* (*Cmd* on OS X) and clicking on the method name when it is displayed as
    a link. This option is also accessible from the **Navigate** | **Declaration**
    menu or pressing *Ctrl* + *B* (*Cmd* + *B* on OS X).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can navigate through the hierarchy of methods from the left edge of the
    editor. Next to the method declarations that belong to a hierarchy of methods,
    there is an icon that indicates whether a method is implementing an interface
    method, implementing an abstract class method, overriding a superclass method,
    or getting implemented or overridden by other descendants. Click on these icons
    to navigate to the methods in the hierarchy. This option is also available via
    **Navigate** | **Super Method** or **Navigate** | **Implementation(s)**. You can
    test it in the main activity of our first project (`MainActivity.java`), as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code](img/B05459_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the left edge of the editor, you can find another type of navigation icon.
    Open your main activity class to see the **Go to Related Files** icon, as the
    next screenshot shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code](img/B05459_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the **Go to Related Files** menu, you can navigate to files and classes
    related to the current one. In this example, the related files are the layout
    associated to your activity and the app manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful utility related to code navigation is the use of **custom regions**.
    A custom region is a piece of code that you want to group and name. For example,
    if there is a class with many methods, we can create some custom regions to distribute
    the methods among them. A region has a name or description, and it can be collapsed
    or expanded using code folding.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a custom region, we can use the code generation. Select the fragment
    of code, navigate to **Code** | **Surround With**, and select one of these two
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**<editor-fold…> Comments**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**region…endregion Comments**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both of these options create a region but use different styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we are using custom regions, we can navigate to them using the **Custom
    Folding** menu in **Navigate**. The rest of the navigation options are accessible
    from the **Navigate** menu. Some of these options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class**/**File**/**Symbol**: This finds a class, file, or symbol by its name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line**: This option goes to a line of code by its number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Last Edit Location**: This navigates to the most recent change point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**: This navigates to the test of the current class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Structure**: This opens a dialog that shows the file structure. Open
    the file structure of our main activity and observe how the structure is presented,
    displaying the list of methods and the icons that indicate the type or visibility
    of the element, as shown in the following screenshot:![Navigating code](img/B05459_04_14.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type Hierarchy**: This opens a dialog that shows the type hierarchy of the
    selected object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Method Hierarchy**: This opens a dialog that shows the method hierarchy of
    the selected method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Call Hierarchy**: This opens a dialog that shows the call hierarchy of the
    selected method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Next Highlighted Error**: This navigates to the next error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Previous Highlighted Error**: This navigates to the previous error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Next Method**: This navigates to the next method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Previous Method**: This navigates to the previous method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful shortcuts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find all the available shortcuts and change them through the **Keymap**
    option in the **Settings**. If you double-click on the actions, the **Edit Shortcuts**
    menu is displayed. From this menu, you can remove the shortcut or add a new one,
    which can be a keyboard shortcut, a mouse shortcut, or an abbreviation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some useful shortcuts for Windows and OS X are included in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ctrl* + *W* (*Alt* + Up arrow on OS X): This selects expressions based on
    grammar. Press these keys repeatedly to expand the selection. The opposite command
    is *Ctrl* + *Shift* + *W* (*Alt* + Up arrow on OS X).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + */* (*Cmd* + */* on OS X): This comments each line of the selected
    code. To block comments, use *Ctrl* + *Shift* + */* (*Alt* + *Cmd* + */* on OS
    X).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Alt* + *I*: This indents the selected code. This is useful when cleaning
    up a block of code or method after you finish writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Alt* + *O*: This optimizes the imports, removes the unused imports,
    and reorders the rest of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Shift* + *Ctrl* + Arrows (*Alt* + *Shift* + Arrows on OS X): This moves the
    selected code a line above or below.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Alt* + Arrows (*Ctrl* + Arrows on OS X): This switches between the opened
    tabs of the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *F* (*Cmd* + *F* on OS X): This finds a string in the active tab of
    the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *R* (*Cmd* + *R* on OS X): This replaces a string in the active tab
    of the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* (*Cmd* + *A* on OS X): This selects all of the code of the opened
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *D* (*Cmd* + *D* on OS X): This copies the selected code and pastes
    it at the end of the selection. If no code is selected, then the entire line is
    copied and pasted in a new line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Y* (*Cmd* + *Delete* on OS X): This removes the entire line without
    leaving a blank line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Shift* + *U* (*Cmd* + *Shift* + *U* on OS X): This toggles the case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *O* (*Cmd* + *O* on OS X): This opens a search box to navigate through
    project classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Shift* + *O* (*Cmd* + *Shift* + *O* on OS X): This opens a search
    box to navigate through project files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Shift* + *A* (*Cmd* + *Shift* + *A* on OS X): This opens a search
    box to navigate through available actions on the IDE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Tab*: This moves to the next parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have learned some useful tricks and tips
    to make the most of the code editor. You know now how to use code completion,
    code generation, and some useful shortcuts for speeding up different actions.
    We also customized our code editor and are now ready to start programming.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start creating our first user interface using layouts.
    You will learn how to create a layout using the graphical wizard, as well as by
    editing the XML layout file using the text-based view. We will create our first
    application, a classic *Hello World* example, using the text view component. You
    will also learn how to prepare our application for multiple screen sizes and adapt
    them for different device orientations. Finally, you will learn about UI themes
    and how to handle events.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: Code Detailed steps to download the code bundle are mentioned in the Preface
    of this book. The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Android_Studio_2_Essentials_Second_Edition_Code](https://github.com/PacktPublishing/Android_Studio_2_Essentials_Second_Edition_Code).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
