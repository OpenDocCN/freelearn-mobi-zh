- en: Chapter 4. Using the Code Editor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 使用代码编辑器
- en: Now that you have created your first project and learned how to navigate through
    the different folders, subfolders, and files, it's time to start programming.
    Have you ever wanted to be able to program more efficiently? How can you speed
    up your development process? Do you want to learn useful shortcuts too? For example,
    how can you comment more than one line at once, find and replace strings, or move
    faster through different parameters in a method call?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了你的第一个项目，并且学会了如何在不同文件夹、子文件夹和文件之间导航，现在是时候开始编程了。你有没有想过能够更高效地编程？你该如何加快你的开发过程？你想要学习有用的快捷键吗？例如，你如何一次性注释多行，查找和替换字符串，或者在方法调用中更快地移动到不同的参数？
- en: In this chapter, you will learn how to use and customize the code editor in
    order to feel more comfortable when programming. It is worth knowing the basic
    features of the code editor in order to increase your productivity. You will learn
    about code completion and code generation. Finally, you will learn some useful
    shortcuts and hotkeys to speed up the development process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用和自定义代码编辑器，以便在编程时感到更加舒适。了解代码编辑器的基本功能以增加你的生产力是值得的。你将了解代码补全和代码生成。最后，你将学习一些有用的快捷键和热键来加快开发过程。
- en: 'The following are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Customizing the code editor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义代码编辑器
- en: Code completion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码补全
- en: Code generation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码生成
- en: Finding related content
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找相关内容
- en: Useful shortcuts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的快捷键
- en: Customizing editor settings
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义编辑器设置
- en: 'To open the editor settings, navigate to **File** | **Settings**. In the **IDE
    Settings** section of the left panel, select **Editor**. The **Editor** settings
    are distributed among several categories: **General**, **Colors & Fonts**, **Code
    Style**, **Inspections**, **File and Code Templates**, **File Encodings**, **Live
    Templates**, **File Types**, **Copyright**, **Emmet**, **Images**, **Intentions**,
    **Language Injections**, **Spelling**, and **TODO**.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开编辑器设置，导航到**文件** | **设置**。在左侧面板的**IDE 设置**部分，选择**编辑器**。**编辑器**设置分布在几个类别中：**通用**、**颜色与字体**、**代码样式**、**检查**、**文件和代码模板**、**文件编码**、**实时模板**、**文件类型**、**版权**、**Emmet**、**图像**、**意图**、**语言注入**、**拼写**和**TODO**。
- en: We are explaining some of the most interesting ones in this section and in the
    next sections of this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节以及本章接下来的几节中，我们将解释一些最有趣的内容。
- en: General
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用
- en: 'Select **General** settings under the **Editor** settings. This displays the
    settings in the right-hand side panel. Some of the most interesting options are
    the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在**编辑器**设置下选择**通用**设置。这将在右侧面板中显示设置。其中一些最有趣的选项如下：
- en: '**Mouse** | **Change font size (Zoom) with Ctrl + Mouse Wheel**: Checking this
    option allows us to change the font size of the editor using the mouse wheel,
    as we do in other programs such as web browsers.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼠标** | **使用 Ctrl + 鼠标滚轮更改字体大小（缩放）**：勾选此选项允许我们使用鼠标滚轮更改编辑器的字体大小，就像我们在其他程序（如网页浏览器）中做的那样。'
- en: '**Other** | **Show quick documentation on mouse move**: Checking this option
    enables the display of a quick document about the code in a small dialog when
    we move the mouse over a piece of code and wait for 500 milliseconds. You can
    change the default delay value of 500 milliseconds. When we move the mouse again,
    the dialog automatically disappears, but if we move the mouse into the dialog,
    then we can examine the document in detail. This is very useful in order to read
    what a method does and to identify its parameters without navigating to it. The
    following screenshot displays this functionality:![General](img/B05459_04_01.jpg)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他** | **鼠标移动时显示快速文档**：勾选此选项可以在我们将鼠标移至代码片段并等待500毫秒后，在小型对话框中显示有关代码的快速文档。你可以更改默认的500毫秒延迟值。当我们再次移动鼠标时，对话框会自动消失，但如果我们将鼠标移入对话框，则可以详细查看文档。这对于阅读方法的功能和识别其参数而不需要导航到它非常有用。以下截图显示了此功能：![通用](img/B05459_04_01.jpg)'
- en: 'The **General** settings are also distributed among several subcategories:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用**设置也分布在几个子类别中：'
- en: '**Auto Import**: This category configures how the editor behaves when we paste
    code that uses classes not imported into the current class. By default, when we
    do this, a popup appears, and it tells us to add the `import` command. If we check
    the **Add unambiguous imports on the fly** option, the `import` command is added
    automatically, without our interaction.![General](img/B05459_04_02.jpg)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动导入**: 此类别配置当我们将使用未导入当前类的类的代码粘贴到编辑器时，编辑器的行为方式。默认情况下，当我们这样做时，会弹出一个窗口，提示我们添加`import`命令。如果我们勾选了**自动添加不明确的导入**选项，则`import`命令会自动添加，无需我们的交互。![通用](img/B05459_04_02.jpg)'
- en: '**Appearance**: This category configures the appearance of the editor. We recommend
    checking the next two options:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外观**: 此类别配置编辑器的外观。我们建议检查以下两个选项：'
- en: '**Show line numbers**: This shows the line numbers on the left edge of the
    editor. It can be very useful when we are debugging or examining the log.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示行号**: 这会在编辑器的左侧边缘显示行号。当我们进行调试或检查日志时，这可能非常有用。'
- en: '**Show method separators**: This visually separates the methods of a class.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示方法分隔符**: 这在视觉上分隔类的各个方法。'
- en: '**Code Completion**: This category configures the code completion options.
    We will examine code completion in detail in the next section.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码补全**: 此类别配置代码补全选项。我们将在下一节中详细检查代码补全。'
- en: '**Code Folding**: This category collapses or expands code blocks allowing us
    to hide code blocks that we are not editing, simplifying the code view. We can
    collapse or expand the blocks using the icons from the editor, as shown in the
    following screenshot, or using the **Folding** menu from **Code**:![General](img/B05459_04_03.jpg)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码折叠**: 此类别可以折叠或展开代码块，使我们能够隐藏不编辑的代码块，简化代码视图。我们可以使用编辑器中的图标折叠或展开块，如图中所示，或者使用**代码**中的**折叠**菜单。![通用](img/B05459_04_03.jpg)'
- en: '**Console**: This configures the console. You can modify the commands history
    size or the lines that are folded.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台**: 此配置控制台。您可以修改命令历史大小或折叠的行数。'
- en: '**Editor Tabs**: This configures the editor tabs. We advise you to select the
    **Mark modified tabs with asterisk** option to easily detect modified and unsaved
    files.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器标签**: 此配置编辑器标签。我们建议您选择**用星号标记已修改的标签**选项，以便轻松检测已修改和未保存的文件。'
- en: '**Postfix Completion**: This configures a type of code completion called postfix
    completion. We will examine code completion in detail in the next section.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后缀补全**: 这配置了一种称为后缀补全的代码补全类型。我们将在下一节中详细检查代码补全。'
- en: '**Smart Keys**: This category configures actions to be done automatically while
    typing, such as adding closing brackets, quotes, or tags, and indenting the line
    when we press the *Enter* key.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能键**: 此类别配置在键入时自动执行的操作，例如添加闭合括号、引号或标签，以及在我们按下*Enter*键时缩进行。'
- en: Colors & Fonts
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色与字体
- en: This category changes the fonts and colors. There are a lot of options and elements
    to configure (keywords, numbers, warnings, errors, comments, strings, and so on).
    You can save the configurations as schemes from the main screen configuration
    of the **Color & Fonts** settings.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此类别更改字体和颜色。有许多选项和元素可以配置（关键字、数字、警告、错误、注释、字符串等）。您可以从**颜色与字体**设置的主屏幕配置中保存配置为方案。
- en: Code Style
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码样式
- en: 'The **Code Style** settings affect only the current project. You can save the
    style configuration as schemes from the main panel of this settings category.
    There are several file types that you can configure separately: **C/C++**, **Groovy**,
    **HTML**, **Java**, **JSON**, **Properties**, **XML**, and other file types.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码样式**设置仅影响当前项目。您可以从此设置类别的主面板中保存样式配置为方案。您可以为以下几种文件类型分别配置：**C/C++**、**Groovy**、**HTML**、**Java**、**JSON**、**Properties**、**XML**和其他文件类型。'
- en: 'The following style features are some of the ones that you can configure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些您可以配置的样式功能：
- en: '**Tabs and Indents**: Configure if you want to use tab characters or white
    spaces (we suggest not using tab characters) and some of their properties, such
    as size or indentation.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制表符和缩进**: 配置是否要使用制表符或空格（我们建议不要使用制表符）以及它们的某些属性，例如大小或缩进。'
- en: '**Spaces**: Configure the insertion of white spaces before parentheses, around
    operators, before left braces, before keywords, and so on.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空格**: 配置在括号前、运算符周围、左大括号前、关键字前等插入空格。'
- en: '**Wrapping and Braces**: Configure line breaks, braces placement (for example,
    **End of line** or **Next line**), argument placement, control statements, and
    so on.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**换行和括号**: 配置行断点、括号放置（例如，**行尾**或**下一行**）、参数放置、控制语句等。'
- en: '**Blank Lines**: Configure the insertion of blank lines, for example, before
    or after imports, around method bodies, or around fields.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空白行**: 配置空白行的插入，例如在导入之前或之后、方法体周围或字段周围。'
- en: An appropriate code styling makes your code easier to understand. Using a common
    code styling is very important if the code is written by several developers or
    if your code is shared with other developers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 适当的代码风格可以使你的代码更容易理解。如果代码由多个开发者编写或你的代码与其他开发者共享，使用通用的代码风格非常重要。
- en: File and Code Templates
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件和代码模板
- en: This category allows you to edit and create templates for files, file headers,
    or code. The **File and Code Templates** settings affect only the current project.
    You can save the style configuration as schemes from the main panel of this settings
    category.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '此类别允许你编辑和创建文件、文件头或代码的模板。**文件和代码模板**设置仅影响当前项目。你可以从设置类别的主面板保存样式配置为方案。 '
- en: You can change the file header template for your project using some predefined
    variables that are explained in the detail panel (`${PACKAGE_NAME}`, `${USER}`,
    `${DATE}`, `${TIME}`, `${PROJECT_NAME}`, and so on).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用详细面板中解释的一些预定义变量来更改你项目的文件头模板（`${PACKAGE_NAME}`, `${USER}`, `${DATE}`, `${TIME}`,
    `${PROJECT_NAME}` 等）。
- en: 'Click on the **Includes** tab of the **File and Code Templates** settings and
    select the **File Header** template. Every time you create a new file, the following
    header is added:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**文件和代码模板**设置的**包含**选项卡，并选择**文件头**模板。每次创建新文件时，都会添加以下头部：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can modify it by adding the file package:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过添加文件包来修改它：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also create and modify the templates that are applied when you create
    a new activity, fragment, service, resource file, and so on. For example, this
    is the template for an activity:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以创建和修改在创建新活动、片段、服务、资源文件等时应用的模板。例如，这是活动的模板：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can learn more in the IntelliJ IDEA documentation at [https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html](https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 IntelliJ IDEA 文档中了解更多信息，链接为 [https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html](https://www.jetbrains.com/help/idea/2016.1/file-and-code-templates.html)。
- en: Code Completion
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码补全
- en: '**Code Completion** helps us write code quickly by automatically completing
    the code using dynamic suggestion lists that are generated based on what we just
    typed.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码补全**通过使用基于我们刚刚输入的内容动态生成的建议列表自动完成代码，帮助我们快速编写代码。'
- en: 'The basic code completion is the list of suggestions that appears while we
    are typing, as shown in the following screenshot. If the list is not displayed,
    press *Ctrl* and the *Spacebar* to open it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 基本代码补全是在我们输入时出现的建议列表，如下面的截图所示。如果列表没有显示，按 *Ctrl* 和 *空格键* 打开它：
- en: '![Code Completion](img/B05459_04_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![代码补全](img/B05459_04_04.jpg)'
- en: Keep typing, select a command from the list, and press *Enter* or double-click
    to add it to your code. If the code you are writing is an expression and you want
    to insert the expression in its negated form, then select the expression from
    the suggestion list, and instead of pressing *Enter* or double-clicking it, press
    the exclamation mark key (*!*). The expression will be added with negation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 继续输入，从列表中选择一个命令，然后按 *Enter* 键或双击以将其添加到你的代码中。如果你正在编写的代码是一个表达式，并且想要以否定形式插入该表达式，则从建议列表中选择该表达式，而不是按
    *Enter* 键或双击它，按感叹号键 (*!*)。表达式将以否定形式添加。
- en: Another utility of code completion is the **completion of statements**. Type
    a statement, press *Ctrl* + *Shift* + *Enter* (*Cmd* + *Shift* + *Enter* on OS
    X), and notice how the closing punctuation is automatically added. If you press
    these keys after typing the `if` keyword, the parentheses and brackets are added
    to complete the conditional statement. This shortcut can also be used to complete
    method declarations. Start typing a method, and after typing the opening parenthesis
    or the method parameters, press *Ctrl* + *Shift* + *Enter* (*Cmd* + *Shift* +
    *Enter* on OS X). The closing parenthesis and the brackets are added to complete
    the method specification.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 代码补全的另一个实用功能是**语句补全**。输入一个语句，按*Ctrl* + *Shift* + *Enter*（在OS X上为*Cmd* + *Shift*
    + *Enter*），注意如何自动添加结束标点符号。如果你在输入`if`关键字后按这些键，将添加括号和方括号以完成条件语句。此快捷键也可以用于完成方法声明。开始输入一个方法，在输入开括号或方法参数后，按*Ctrl*
    + *Shift* + *Enter*（在OS X上为*Cmd* + *Shift* + *Enter*）。将添加闭括号和方括号以完成方法规范。
- en: Smart Type Completion
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能类型补全
- en: Another type of code completion is the **smart type** code completion. If you
    are typing a command to call a method with a `String` parameter, then only the
    `String` objects will be suggested. This smart completion occurs in the right-hand
    side of an assignment statement, parameters of a method call, return statements,
    or variable initializers. To open the smart suggestions list, press *Ctrl* + *Shift*
    along with the Spacebar.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种代码补全类型是**智能类型**代码补全。如果你正在输入一个带有`String`参数的方法调用命令，那么只建议`String`对象。这种智能补全发生在赋值语句的右侧、方法调用的参数、返回语句或变量初始化器中。要打开智能建议列表，请按*Ctrl*
    + *Shift*键，然后按空格键。
- en: 'To show the difference between these two types of suggestion lists, create
    two objects of different classes, `String` and `int`, in your code. Then call
    a method with a `String` parameter, for example, the `i` method of the `Log` class.
    When typing the `String` parameter, note the difference between opening the basic
    suggestion list (*Ctrl* + Spacebar), which the next screenshot shows, and open
    the smart type suggestion list (*Ctrl* + *Shift* + Spacebar), which the second
    screenshot shows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示这两种类型建议列表之间的差异，在你的代码中创建两个不同类的对象，`String`和`int`。然后调用一个带有`String`参数的方法，例如`Log`类的`i`方法。在输入`String`参数时，注意打开基本建议列表（*Ctrl*
    + 空格键），如下一个截图所示，以及打开智能类型建议列表（*Ctrl* + *Shift* + 空格键），如第二个截图所示：
- en: '![Smart Type Completion](img/B05459_04_05.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![智能类型补全](img/B05459_04_05.jpg)'
- en: 'In the first list, which is shown in the previous screenshot, both objects
    are suggested, although the `int` object does not match the parameter class. In
    the second one, which is shown in the following screenshot, only `String` objects
    are suggested:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个列表中，如前一个截图所示，建议了两个对象，尽管`int`对象与参数类不匹配。在第二个列表中，如以下截图所示，只建议`String`对象：
- en: '![Smart Type Completion](img/B05459_04_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![智能类型补全](img/B05459_04_06.jpg)'
- en: Postfix Completion
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后缀补全
- en: 'The **Postfix Completion** is a type of code completion that transforms an
    already typed expression. The transformation depends on the postfix you write,
    the context and the type of expression. Postfix expressions are suggested in the
    basic code completion suggestion list. One example postfix template is `notnull`,
    which is the one suggested in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**后缀补全**是一种代码补全类型，它将已输入的表达式进行转换。转换取决于你写的后缀、上下文和表达式的类型。后缀表达式在基本代码补全建议列表中建议。以下是一个后缀模板示例`notnull`，如以下截图所示：'
- en: '![Postfix Completion](img/B05459_04_07.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![后缀补全](img/B05459_04_07.jpg)'
- en: 'When you apply the `notnull` template to an expression `expr`, the expression
    is transformed to `if (expr != null)`. The expression from the previous screenshot
    becomes the next code when the `notnull` transformation is done:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将`notnull`模板应用于表达式`expr`时，表达式将转换为`if (expr != null)`。前一个截图中的表达式在执行`notnull`转换后成为以下代码：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you want to see only the available postfix templates in the suggestion list,
    press *Ctrl* + *J* (*Cmd* + *J* for OS X). A dialog like the one in the next screenshot
    lists all the available postfix templates that can be applied to the current expression:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想在建议列表中看到可用的后缀模板，请按*Ctrl* + *J*（在OS X上为*Cmd* + *J*）。下一个截图中的对话框列出了可以应用于当前表达式的所有可用后缀模板：
- en: '![Postfix Completion](img/B05459_04_08.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![后缀补全](img/B05459_04_08.jpg)'
- en: You can manage different postfix templates from the **Editor** settings, in
    **General** | **Postfix Completion**. A complete list of all the available templates
    is displayed along with their description on the right-hand side panel.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从**编辑器**设置中管理不同的后缀模板，在**常规** | **后缀完成**中。所有可用模板的完整列表及其描述在右侧面板中显示。
- en: 'The next screenshot shows the description and transformation of the `for` postfix
    template:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图显示了`for`后缀模板的描述和转换：
- en: '![Postfix Completion](img/B05459_04_09.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![后缀完成](img/B05459_04_09.jpg)'
- en: Code generation
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码生成
- en: 'To generate blocks of code in a class, navigate to **Code** | **Generate**
    or press the *Alt* + *Insert* shortcut (*Cmd* + *N* on OS X). A dialog like the
    following is displayed:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要在类中生成代码块，请导航到**代码** | **生成**，或者按*Alt* + *Insert*快捷键 (*在OS X上为*Cmd* + *N*)。将显示如下对话框：
- en: '![Code generation](img/B05459_04_10.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![代码生成](img/B05459_04_10.jpg)'
- en: From the **Generate** menu, you can generate constructors, getters and setters
    methods, super method calls, or `equals` and `toString` methods. We can also override
    or delegate methods.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从**生成**菜单中，您可以生成构造函数、获取器和设置器方法、超方法调用，或者`equals`和`toString`方法。我们还可以重写或委派方法。
- en: 'Another way of generating code is surrounding some of our code with statements
    (`if`, `if/else`, `while`, `for`, `try/catch`, and so on). Select a code line
    and navigate to **Code** | **Surround With** or press *Ctrl* + *Alt* + *T* (*Cmd*
    + *Alt* + *T* on OS X). The menu for the **Surround With** option is shown in
    the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 生成代码的另一种方式是将一些代码用语句（`if`、`if/else`、`while`、`for`、`try/catch`等）包围起来。选择一行代码，并导航到**代码**
    | ** Surround With**，或者按*Ctrl* + *Alt* + *T* (*在OS X上为*Cmd* + *Alt* + *T*)。以下截图显示了**
    Surround With**选项的菜单：
- en: '![Code generation](img/B05459_04_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![代码生成](img/B05459_04_11.jpg)'
- en: The third option, which is also shown in the previous screenshot, is inserting
    a **Live Template**. You can surround your code with a **Live Template** using
    the **Surround With** option or you can navigate to **Code** | **Surround with
    Live Templates** or press *Ctrl* + *Alt* + *J* (*Cmd* + *Alt* + *J* on OS X).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种选项，如前一张截图所示，是插入一个**Live Template**。您可以使用** Surround With**选项将代码包围在一个**Live
    Template**中，或者导航到**代码** | ** Surround with Live Templates**，或者按*Ctrl* + *Alt*
    + *J* (*在OS X上为*Cmd* + *Alt* + *J*)。
- en: Navigate to **Code** | **Insert Live Templates** or press *Ctrl* + *J* (*Cmd*
    + *J* on OS X) to open a dialog of the available live templates. These templates
    can insert code to iterate collections, arrays, lists, and so on; code to print
    formatted strings; code to throw exceptions; or code to add static and final variables.
    The left edge of the dialog shows the prefix for each template. If you type the
    prefix in the editor and press the *Tab* key, the code template is added automatically.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到**代码** | **插入Live Templates**，或者按*Ctrl* + *J* (*在OS X上为*Cmd* + *J*)以打开可用Live
    Templates的对话框。这些模板可以插入用于迭代集合、数组、列表等的代码；用于打印格式化字符串的代码；用于抛出异常的代码；或用于添加静态和最终变量的代码。对话框的左侧显示每个模板的前缀。如果您在编辑器中输入前缀并按*Tab*键，代码模板将自动添加。
- en: 'Type `inn` at the end of the `onCreate` method of our main activity and press
    *Tab*. A conditional block will appear. In this new block, type `soutv` and press
    *Tab* again. The result is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们主活动的`onCreate`方法末尾输入`inn`并按*Tab*键。将出现一个条件块。在这个新块中，输入`soutv`并再次按*Tab*键。结果如下：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Navigating code
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航代码
- en: The most direct way of navigating to declarations or type declarations is pressing
    *Ctrl* (*Cmd* on OS X) and clicking on the method name when it is displayed as
    a link. This option is also accessible from the **Navigate** | **Declaration**
    menu or pressing *Ctrl* + *B* (*Cmd* + *B* on OS X).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到声明或类型声明最直接的方式是按下*Ctrl* (*在OS X上为*Cmd*)并点击显示为链接的方法名称。此选项也可以从**导航** | **声明**菜单或按*Ctrl*
    + *B* (*在OS X上为*Cmd* + *B*)访问。
- en: 'We can navigate through the hierarchy of methods from the left edge of the
    editor. Next to the method declarations that belong to a hierarchy of methods,
    there is an icon that indicates whether a method is implementing an interface
    method, implementing an abstract class method, overriding a superclass method,
    or getting implemented or overridden by other descendants. Click on these icons
    to navigate to the methods in the hierarchy. This option is also available via
    **Navigate** | **Super Method** or **Navigate** | **Implementation(s)**. You can
    test it in the main activity of our first project (`MainActivity.java`), as shown
    in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从编辑器的左侧边缘导航到方法层次结构。在属于方法层次结构的方法声明旁边，有一个图标指示方法是否实现接口方法、实现抽象类方法、覆盖超类方法，或者被其他后代实现或覆盖。点击这些图标以导航到层次结构中的方法。此选项也可以通过**导航**
    | **超类方法**或**导航** | **实现**访问。你可以在我们第一个项目的活动主类（`MainActivity.java`）中测试它，如下面的截图所示：
- en: '![Navigating code](img/B05459_04_12.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![导航代码](img/B05459_04_12.jpg)'
- en: 'On the left edge of the editor, you can find another type of navigation icon.
    Open your main activity class to see the **Go to Related Files** icon, as the
    next screenshot shows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器的左侧边缘，你可以找到另一种类型的导航图标。打开你的主活动类，查看下一个截图所示的**转到相关文件**图标：
- en: '![Navigating code](img/B05459_04_13.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![导航代码](img/B05459_04_13.jpg)'
- en: From the **Go to Related Files** menu, you can navigate to files and classes
    related to the current one. In this example, the related files are the layout
    associated to your activity and the app manifest file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从**转到相关文件**菜单，你可以导航到与当前文件和类相关的文件。在这个例子中，相关文件是与你的活动关联的布局文件以及应用清单文件。
- en: Another useful utility related to code navigation is the use of **custom regions**.
    A custom region is a piece of code that you want to group and name. For example,
    if there is a class with many methods, we can create some custom regions to distribute
    the methods among them. A region has a name or description, and it can be collapsed
    or expanded using code folding.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与代码导航相关的另一个有用工具是**自定义区域**的使用。自定义区域是你想要分组并命名的代码片段。例如，如果一个类有多个方法，我们可以创建一些自定义区域来在这些方法之间分配它们。区域有一个名称或描述，并且可以通过代码折叠来折叠或展开。
- en: 'To create a custom region, we can use the code generation. Select the fragment
    of code, navigate to **Code** | **Surround With**, and select one of these two
    options:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个自定义区域，我们可以使用代码生成。选择代码片段，导航到**代码** | **环绕**，并选择以下两个选项之一：
- en: '**<editor-fold…> Comments**'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<editor-fold…> 注释**'
- en: '**region…endregion Comments**'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**region…endregion 注释**'
- en: Both of these options create a region but use different styles.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个选项都创建一个区域，但使用不同的样式。
- en: 'When we are using custom regions, we can navigate to them using the **Custom
    Folding** menu in **Navigate**. The rest of the navigation options are accessible
    from the **Navigate** menu. Some of these options are as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用自定义区域时，我们可以使用**导航**菜单中的**自定义折叠**菜单来导航到它们。其余的导航选项都可以从**导航**菜单中访问。以下是一些选项：
- en: '**Class**/**File**/**Symbol**: This finds a class, file, or symbol by its name.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类**/**文件**/**符号**：通过名称查找类、文件或符号。'
- en: '**Line**: This option goes to a line of code by its number.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行**：此选项通过编号跳转到代码行。'
- en: '**Last Edit Location**: This navigates to the most recent change point.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上次编辑位置**：这会导航到最近的更改点。'
- en: '**Test**: This navigates to the test of the current class.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：这会导航到当前类的测试。'
- en: '**File Structure**: This opens a dialog that shows the file structure. Open
    the file structure of our main activity and observe how the structure is presented,
    displaying the list of methods and the icons that indicate the type or visibility
    of the element, as shown in the following screenshot:![Navigating code](img/B05459_04_14.jpg)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件结构**：这会打开一个对话框，显示文件结构。打开我们主活动的文件结构，观察结构是如何呈现的，显示方法列表以及指示元素类型或可见性的图标，如下面的截图所示：![导航代码](img/B05459_04_14.jpg)'
- en: '**Type Hierarchy**: This opens a dialog that shows the type hierarchy of the
    selected object.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型层次结构**：这会打开一个对话框，显示所选对象的类型层次结构。'
- en: '**Method Hierarchy**: This opens a dialog that shows the method hierarchy of
    the selected method.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法层次结构**：这会打开一个对话框，显示所选方法的方法层次结构。'
- en: '**Call Hierarchy**: This opens a dialog that shows the call hierarchy of the
    selected method.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调用层次结构**：这会打开一个对话框，显示所选方法的调用层次结构。'
- en: '**Next Highlighted Error**: This navigates to the next error.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下一个高亮错误**：这会导航到下一个错误。'
- en: '**Previous Highlighted Error**: This navigates to the previous error.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上一个高亮错误**: 这将导航到上一个错误。'
- en: '**Next Method**: This navigates to the next method.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下一个方法**: 这将导航到下一个方法。'
- en: '**Previous Method**: This navigates to the previous method.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前一种方法**: 这将导航到前一种方法。'
- en: Useful shortcuts
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的快捷键
- en: You can find all the available shortcuts and change them through the **Keymap**
    option in the **Settings**. If you double-click on the actions, the **Edit Shortcuts**
    menu is displayed. From this menu, you can remove the shortcut or add a new one,
    which can be a keyboard shortcut, a mouse shortcut, or an abbreviation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 **设置** 中的 **键映射** 选项找到所有可用的快捷键并更改它们。如果您双击操作，将显示 **编辑快捷键** 菜单。从该菜单中，您可以删除快捷键或添加新的快捷键，这可以是键盘快捷键、鼠标快捷键或缩写。
- en: 'Some useful shortcuts for Windows and OS X are included in the following list:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表中包含了一些 Windows 和 OS X 的有用快捷键：
- en: '*Ctrl* + *W* (*Alt* + Up arrow on OS X): This selects expressions based on
    grammar. Press these keys repeatedly to expand the selection. The opposite command
    is *Ctrl* + *Shift* + *W* (*Alt* + Up arrow on OS X).'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *W* (*Alt* + 向上箭头在 OS X 上): 这将根据语法选择表达式。按这些键重复以扩展选择。相反的命令是 *Ctrl*
    + *Shift* + *W* (*Alt* + 向上箭头在 OS X 上)。'
- en: '*Ctrl* + */* (*Cmd* + */* on OS X): This comments each line of the selected
    code. To block comments, use *Ctrl* + *Shift* + */* (*Alt* + *Cmd* + */* on OS
    X).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + */* (*Cmd* + */* 在 OS X 上): 这将对所选代码的每一行进行注释。要使用块注释，请使用 *Ctrl* + *Shift*
    + */* (*Alt* + *Cmd* + */* 在 OS X 上)。'
- en: '*Ctrl* + *Alt* + *I*: This indents the selected code. This is useful when cleaning
    up a block of code or method after you finish writing.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Alt* + *I*: 这将缩进所选代码。这在清理你完成编写后的代码块或方法时非常有用。'
- en: '*Ctrl* + *Alt* + *O*: This optimizes the imports, removes the unused imports,
    and reorders the rest of them.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Alt* + *O*: 这将优化导入，删除未使用的导入，并重新排序其余的导入。'
- en: '*Shift* + *Ctrl* + Arrows (*Alt* + *Shift* + Arrows on OS X): This moves the
    selected code a line above or below.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Shift* + *Ctrl* + 方向键 (*Alt* + *Shift* + 方向键在 OS X 上): 这将所选代码移动到上一行或下一行。'
- en: '*Alt* + Arrows (*Ctrl* + Arrows on OS X): This switches between the opened
    tabs of the editor.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt* + 方向键 (*Ctrl* + 方向键在 OS X 上): 这将在编辑器的打开标签页之间切换。'
- en: '*Ctrl* + *F* (*Cmd* + *F* on OS X): This finds a string in the active tab of
    the editor.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *F* (*Cmd* + *F* 在 OS X 上): 这将在编辑器的活动标签页中查找字符串。'
- en: '*Ctrl* + *R* (*Cmd* + *R* on OS X): This replaces a string in the active tab
    of the editor.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *R* (*Cmd* + *R* 在 OS X 上): 这将在编辑器的活动标签页中替换字符串。'
- en: '*Ctrl* + *A* (*Cmd* + *A* on OS X): This selects all of the code of the opened
    file.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *A* (*Cmd* + *A* 在 OS X 上): 这将选择打开文件的全部代码。'
- en: '*Ctrl* + *D* (*Cmd* + *D* on OS X): This copies the selected code and pastes
    it at the end of the selection. If no code is selected, then the entire line is
    copied and pasted in a new line.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *D* (*Cmd* + *D* 在 OS X 上): 这将复制所选代码并将其粘贴到选择的末尾。如果没有选择代码，则整个行将被复制并粘贴到新行中。'
- en: '*Ctrl* + *Y* (*Cmd* + *Delete* on OS X): This removes the entire line without
    leaving a blank line.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Y* (*Cmd* + *Delete* 在 OS X 上): 这将删除整行，而不留下空白行。'
- en: '*Ctrl* + *Shift* + *U* (*Cmd* + *Shift* + *U* on OS X): This toggles the case.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Shift* + *U* (*Cmd* + *Shift* + *U* 在 OS X 上): 这将切换大小写。'
- en: '*Ctrl* + *O* (*Cmd* + *O* on OS X): This opens a search box to navigate through
    project classes.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *O* (*Cmd* + *O* 在 OS X 上): 这将打开一个搜索框，以便在项目类中导航。'
- en: '*Ctrl* + *Shift* + *O* (*Cmd* + *Shift* + *O* on OS X): This opens a search
    box to navigate through project files.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Shift* + *O* (*Cmd* + *Shift* + *O* 在 OS X 上): 这将打开一个搜索框，以便在项目文件中导航。'
- en: '*Ctrl* + *Shift* + *A* (*Cmd* + *Shift* + *A* on OS X): This opens a search
    box to navigate through available actions on the IDE.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Shift* + *A* (*Cmd* + *Shift* + *A* 在 OS X 上): 这将打开一个搜索框，以便在 IDE
    中导航到可用的操作。'
- en: '*Tab*: This moves to the next parameter.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Tab*: 这将移动到下一个参数。'
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By the end of this chapter, you should have learned some useful tricks and tips
    to make the most of the code editor. You know now how to use code completion,
    code generation, and some useful shortcuts for speeding up different actions.
    We also customized our code editor and are now ready to start programming.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您应该已经学会了一些有用的技巧和提示，以便充分利用代码编辑器。您现在知道如何使用代码补全、代码生成以及一些有用的快捷键来加快不同的操作。我们还自定义了我们的代码编辑器，现在可以开始编程了。
- en: In the next chapter, we will start creating our first user interface using layouts.
    You will learn how to create a layout using the graphical wizard, as well as by
    editing the XML layout file using the text-based view. We will create our first
    application, a classic *Hello World* example, using the text view component. You
    will also learn how to prepare our application for multiple screen sizes and adapt
    them for different device orientations. Finally, you will learn about UI themes
    and how to handle events.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用布局创建我们的第一个用户界面。你将学习如何使用图形向导创建布局，以及通过使用基于文本的视图编辑XML布局文件。我们将使用文本视图组件创建我们的第一个应用程序，一个经典的*Hello
    World*示例。你还将学习如何为多个屏幕尺寸准备我们的应用程序，并适应不同的设备方向。最后，你将了解UI主题以及如何处理事件。
- en: Tip
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: Code Detailed steps to download the code bundle are mentioned in the Preface
    of this book. The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Android_Studio_2_Essentials_Second_Edition_Code](https://github.com/PacktPublishing/Android_Studio_2_Essentials_Second_Edition_Code).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 代码本书的序言中详细说明了下载代码包的步骤。本书的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/Android_Studio_2_Essentials_Second_Edition_Code](https://github.com/PacktPublishing/Android_Studio_2_Essentials_Second_Edition_Code)。我们还有其他来自我们丰富图书和视频目录的代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)找到。去看看它们吧！
