- en: Chapter 10.  Watch Faces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 手表表盘
- en: '*"If you spend too much time thinking about a thing, you''ll never get it done."
                                                                                 
                                - Bruce Lee*'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"如果你花太多时间去思考一件事情，你永远也完成不了。" - 李小龙*'
- en: We will begin this chapter with an introduction to the concept of watch faces
    and survey the Android Wear APIs available to help us develop them. We will then
    develop a simple interactive watch face that, in addition to showing time, responds
    to a tap action by showing the number of days elapsed in the year and the number
    remaining.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，介绍手表表盘的概念，并概述可用于帮助我们开发它们的Android Wear API。然后，我们将开发一个简单的交互式手表表盘，除了显示时间外，还会通过触摸动作显示年内已过去的天数和剩余的天数。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The code accompanying this chapter is available for reference on GitHub ([https://github.com/siddii/mastering-android-wear/tree/master/Chapter_10](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_10)).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章附带代码可在GitHub上参考（[https://github.com/siddii/mastering-android-wear/tree/master/Chapter_10](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_10)）。
- en: For the sake of brevity, code snippets are only included as needed. The reader
    is encouraged to download the referenced code from GitHub and follow along as
    they progress through the chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，代码片段仅按需包含。鼓励读者从GitHub下载引用的代码，并在阅读章节时跟随。
- en: Telling the time
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示时间
- en: When we speak of wearable devices, we are overwhelmingly referring to smartwatches,
    and a watch that does not tell the time isn't really much of a watch. It's like
    having a luxury yacht that features state of the art GPS technology but has trouble
    staying afloat. To strike a metaphor closer to home, consider a smartphone that
    has trouble functioning as a phone. (Wait! That's actually happened!)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们提到可穿戴设备时，我们主要是指智能手表，一个不能显示时间的手表实际上并不算手表。这就像拥有一艘配备最先进GPS技术的豪华游艇，但难以浮在水面上。为了打一个更贴近生活的比喻，考虑一下一部难以作为电话使用的智能手机。（等等！这实际上发生过！）
- en: What is a watch face?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是手表表盘？
- en: The term *watch face* is used to refer to the digital display of the current
    time on the wearable device so that the user can tell at a glance what the time
    is, in much the same way one does when wearing a watch.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “手表表盘”这个术语用来指代可穿戴设备上当前时间的数字显示，以便用户可以一眼看出时间，这与佩戴手表时的情况非常相似。
- en: Unlike a traditional watch, however, our wearable has a multitude of additional
    functionalities restricted only by its own internal memory and its communication
    with one or more paired handheld companion devices. So, showing the time on a
    wearable speaks to a far more sophisticated piece of software than, say, software
    that is written for a digital watch that may have a specific list of functionalities—time,
    date, dual time, and alarm mode to name a few.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与传统手表不同，我们的可穿戴设备拥有众多额外的功能，这些功能仅受其自身内部内存及其与一个或多个配对的便携式伴侣设备的通信限制。因此，在可穿戴设备上显示时间，涉及到比为可能具有特定功能列表（如时间、日期、双时和闹钟模式等）的数字手表编写的软件更为复杂的软件。
- en: Needless to say, the watch face is itself a replaceable component in a wearable.
    You can change it to one you like, as often as you like. Watch faces sporting
    an array of styles and shapes, some offering relevant contextual data, are available
    through the Android Wear companion app. A user simply selects an available watch
    face, either on the wearable or on the companion app, and the wearable device
    displays a preview of the watch face and allows the user to configure it. And
    if you can't find what you like, you can go ahead and write your own. Hence, this
    chapter. Our journey through implementing a watch face will feel more real when
    we get to build one in the next section. Let's first touch upon what a watch face
    design entails, and which Wear API classes come into play in the development of
    a watch face.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不言而喻，手表表盘本身就是可更换的组件。你可以随心所欲地更换你喜欢的表盘。拥有各种风格和形状的手表表盘，一些提供相关上下文数据，可以通过Android
    Wear伴侣应用获取。用户只需在可穿戴设备或伴侣应用中选择一个可用的表盘，可穿戴设备就会显示表盘的预览，并允许用户进行配置。如果你找不到你喜欢的，你可以继续编写你自己的。因此，有了这一章。当我们进入下一节构建一个表盘时，我们的手表表盘实现之旅将更加真实。让我们首先谈谈手表表盘设计包含的内容，以及哪些Wear
    API类在手表表盘的开发中发挥作用。
- en: Design considerations
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计考虑因素
- en: 'While Android Wear can be a huge help in your design efforts through the provision
    of various capabilities such as attractive colors, dynamic backgrounds, animations,
    and data integrations, there are non-API aspects to your design that must be considered.
    We list a few here that are widely embraced by the Android development community:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Android Wear 可以通过提供各种功能，如吸引人的颜色、动态背景、动画和数据集成等，在您的设计工作中提供巨大的帮助，但您的设计中还有一些非
    API 方面需要考虑。以下是一些在 Android 开发社区中得到广泛认可的要点：
- en: Think about what you want to show the user and how that fits into the context
    of a watch face. Too much information can distract.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑您想向用户展示的内容以及这些内容如何适应表盘的上下文。信息过多可能会分散注意力。
- en: Your watch face should run reliably on square and circular devices.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的表盘应在方形和圆形设备上可靠运行。
- en: Provide a suitable implementation for the ambient mode. Users will thank you
    for not draining their wearable's battery life when it is idle.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为环境模式提供合适的实现。当设备空闲时，用户会感谢您没有耗尽他们的可穿戴设备的电池寿命。
- en: UI indicators (such as notification cards) should still show up without making
    it impossible to read the time.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI 指示器（如通知卡片）仍然应该显示，而不会使读取时间变得不可能。
- en: Enrich your watch face with intelligence to query and display context-sensitive
    information available through the companion handheld device. Remember, the companion
    app does all the heavy lifting, so your wearable app (in this case, your watch
    face) should delegate to the companion app any computation-intensive work or third-party
    data lookup, such as weather information.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过智能查询和显示通过伴侣手持设备可用的上下文相关信息来丰富您的表盘。记住，伴侣应用承担了所有繁重的工作，因此您的可穿戴应用（在这种情况下，您的表盘）应将任何计算密集型工作或第三方数据查找（如天气信息）委托给伴侣应用。
- en: Let the user configure the watch face.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 允许用户配置表盘。
- en: We highly recommend that you read through the *Watch Faces for Android Wear*
    section, which will help as a design guide, available on the Android developers
    site ([https://developer.android.com/design/wear/watchfaces.html](https://developer.android.com/design/wear/watchfaces.html)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您阅读 Android 开发者网站上关于“Android Wear 表盘”的部分，它将作为设计指南帮助您，链接为 [https://developer.android.com/design/wear/watchfaces.html](https://developer.android.com/design/wear/watchfaces.html)。
- en: Implementation considerations
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现考虑
- en: Considering the background images. The background image in interactive mode may
    be different than the one used in ambient mode. Furthermore, background images
    should be scaled down (as a one-time operation) if the device has a lower resolution
    than the image.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑背景图像。在交互模式下，背景图像可能与环境模式中使用的不同。此外，如果设备的分辨率低于图像，背景图像应缩小（作为一次性操作）。
- en: Application code that retrieves context-sensitive data should only run on as-needed
    basis, with results being stored for reuse when the watch face needs to be redrawn.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 获取上下文相关数据的应用程序代码应仅在需要时运行，并将结果存储以供重用时重绘表盘使用。
- en: Updates to the watch face in ambient mode should be as simple as possible through
    the use of a limited set of colors, a fixed black background, and with only outlines
    being drawn to minimize work and conserve battery life.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在环境模式下更新表盘应尽可能简单，通过使用有限的颜色、固定的黑色背景以及仅绘制轮廓来最小化工作并节省电池寿命。
- en: The watch face service
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表盘服务
- en: A watch face is implemented as a service and packaged inside a wearable app.
    You already know that wearable apps are, in turn, packaged inside handheld apps.
    When users install such a handheld app that contains a wearable app with one or
    more watch faces, these watch faces then become selectable in the watch face picker
    on the wearable. They are also available on the handheld device in the Android
    Wear companion app. When one of the watch faces is selected (either on the handheld
    or the wearable's picker), the watch face is shown on the wearable device, which
    invokes the service callback methods as required through the life cycle of the
    watch face.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 表盘是通过服务实现的，并打包在可穿戴应用中。您已经知道，可穿戴应用反过来又打包在手持应用中。当用户安装包含一个或多个表盘的手持应用时，这些表盘在可穿戴设备上的表盘选择器中变为可选。它们也将在手持设备上的
    Android Wear 伴侣应用中可用。当选择其中一个表盘（无论是在手持设备上还是在可穿戴设备的选择器上）时，表盘将在可穿戴设备上显示，这会根据表盘的生命周期调用所需的服务回调方法。
- en: 'To create watch face implementations, we extend the classes provided in the
    Wearable support library (the `android.support.wearable.watchface` package). When
    a watch face becomes active, the system invokes the methods in its service class
    when various events occur, such as a change in time, a switch to ambient mode,
    and a notification alert. The implementations of the corresponding handlers then
    respond by drawing the watch face using the updated time or the notification data
    or whatever other data the event may consume. Key methods that may need to be
    implemented in a watch face service include following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建手表表盘实现，我们扩展了 Wearable 支持库中提供的类（`android.support.wearable.watchface` 包）。当手表表盘变为活跃状态时，系统会在各种事件发生时调用其服务类中的方法，例如时间变化、切换到环境模式以及通知警报。相应的处理程序实现随后通过绘制手表表盘来响应，使用更新后的时间或通知数据或事件可能消耗的其他数据。可能需要在手表表盘服务中实现的关键方法包括以下内容：
- en: The `onCreate` method
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onCreate` 方法'
- en: The `onPropertiesChanged` method
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onPropertiesChanged` 方法'
- en: The `onTimeTick` method
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onTimeTick` 方法'
- en: The `onAmbientModeChanged` method
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onAmbientModeChanged` 方法'
- en: The `onDraw` method
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDraw` 方法'
- en: The `onVisibilityChanged` method
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onVisibilityChanged` 方法'
- en: Check out the Wearable support library at [https://developer.android.com/reference/android/support/wearable/watchface/package-summary.html](https://developer.android.com/reference/android/support/wearable/watchface/package-summary.html)
    for a close look at the object model of the available watch face service classes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Wearable支持库[https://developer.android.com/reference/android/support/wearable/watchface/package-summary.html](https://developer.android.com/reference/android/support/wearable/watchface/package-summary.html)，以详细了解可用的手表表服务类对象模型。
- en: Once implemented, the watch face service must be registered in the manifest
    (`AndroidManifest.xml`) file of the wearable app. This is how the system makes
    the watch face available in both the Android Wear companion app and the watch
    face picker on the wearable device when a user installs the app.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实现，手表表盘服务必须在可穿戴应用的清单文件（`AndroidManifest.xml`）中注册。这样，当用户安装应用时，系统就可以在 Android
    Wear 伴侣应用和可穿戴设备上的手表表盘选择器中提供手表表盘。
- en: Interactive watch faces
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式手表表盘
- en: Watch faces do support limited user interaction. A single tap gesture at a given
    location on the watch face is accepted as long as it does not conflict with another
    UI element also listening for that gesture. In our sample code in the next section,
    we support a tap gesture that shows the number of days elapsed in the current
    year, as well as the number of days remaining.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 手表表盘支持有限的用户交互。只要不与另一个也监听该手势的 UI 元素冲突，手表表盘上特定位置的单一轻点手势就会被接受。在我们下一节的示例代码中，我们支持一个轻点手势，该手势显示当前年份已过去的天数以及剩余的天数。
- en: 'Handling tap events involve implementing the `setWatchFaceStyle` method available
    in all extensions of the `WatchFaceService.Engine` class. The app informs the
    system that the watch face receives tap events, as shown in the following snippet:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 处理轻点事件涉及实现 `WatchFaceService.Engine` 类所有扩展中都可用的 `setWatchFaceStyle` 方法。应用通知系统手表表盘接收到了轻点事件，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Performance considerations
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能考虑
- en: 'Conserving power is quite critical in the context of watch faces because a
    watch face is always active. Here are a few best practices put forward by the
    Wear development community with respect to watch face development:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在手表表盘的上下文中，节省电量非常关键，因为手表表盘始终处于活跃状态。以下是 Wear 开发社区针对手表表盘开发提出的几项最佳实践：
- en: Ensure that the watch face only performs actions when it is active. Use the
    `onVisibilityChanged` and `isVisible` methods of the `WatchFaceService.Engine`
    class to determine that.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保手表表盘仅在活跃时执行操作。使用 `WatchFaceService.Engine` 类的 `onVisibilityChanged` 和 `isVisible`
    方法来确定这一点。
- en: Avoid using the `WearableListenerService` element to listen for events, as it
    is called whether or not a watch face is active. Rather, use listeners registered
    with the `DataApi.addListener` element.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用 `WearableListenerService` 元素来监听事件，因为它无论手表表盘是否活跃都会被调用。相反，使用与 `DataApi.addListener`
    元素注册的监听器。
- en: Keep an eye on the actual power consumed by our wearable app. The Android Wear
    companion app lets us see how much battery different processes on the wearable
    device consume.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关注我们可穿戴应用的实际功耗。Android Wear 伴侣应用让我们可以看到可穿戴设备上不同进程消耗了多少电量。
- en: When using animations, take care to lower the frame rate. 30 frames per second
    are sufficient for a smooth animation experience. We should use animations as
    little as possible, and when we do use them, we should use every opportunity to
    let the CPU sleep between runs of our animation. Every idle cycle contributes
    to a larger effort at conserving battery life.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用动画时，请注意降低帧率。每秒 30 帧足以提供平滑的动画体验。我们应该尽可能少地使用动画，并且当我们使用它们时，我们应该利用每个机会让 CPU 在动画运行之间休眠。每个空闲周期都有助于更大程度地节省电池寿命。
- en: Keep the bitmaps small. Where it makes sense, combine multiple bitmaps into
    one. Reducing the number of graphic assets we draw contributes to power savings.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持位图小。在合理的地方，将多个位图合并成一个。减少我们绘制的图形资源数量有助于节省电力。
- en: Use the `Engine.onDraw` method exclusive to perform drawing operations. Move
    any work that loads resources, resizes images, or performs computations external
    to drawing, out of the `onDraw` method. Consider locating such code in the `onCreate`
    method instead.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅使用 `Engine.onDraw` 方法执行绘图操作。将任何加载资源、调整图像大小或执行绘图外计算的工作移出 `onDraw` 方法。考虑将这些代码放在
    `onCreate` 方法中。
- en: Let's build a watch face
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们构建一个表盘
- en: It's time to see the concepts, introduced previously, in action. We will build
    a simple watch face that shows the time using a fairly standard hour, minutes,
    and seconds display. Tapping the watch face will show the number of days that
    have elapsed in the current year. A second tap will show the number of days remaining
    in the current year.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候看到之前介绍的概念的实际应用了。我们将构建一个简单的表盘，使用相当标准的时、分、秒显示来显示时间。轻触表盘会显示当前年份已过去的天数。第二次轻触会显示当前年份剩余的天数。
- en: In the subsections that follow, we will define a `WatchFaceService` class that
    extends the API `CanvasWatchFaceService` class and overrides the relevant event
    handlers that pertain to our sample application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的小节中，我们将定义一个 `WatchFaceService` 类，它扩展了 API `CanvasWatchFaceService` 类，并重写了与我们的示例应用程序相关的相关事件处理程序。
- en: The Android manifest file
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 的清单文件
- en: 'We begin by declaring the `TodayWatchFaceService` service and the `WatchFaceConfigActivity`
    activity, which helps with selecting a background color for the watch:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先声明 `TodayWatchFaceService` 服务和 `WatchFaceConfigActivity` 活动，这有助于为表盘选择背景颜色：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The TodayWatchFace service
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TodayWatchFace 服务
- en: Before we take a closer look at the implementation of the `TodayWatchFaceService`
    class, let's run our sample code to see how it behaves so that we can observe
    the app from a user standpoint.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们仔细查看 `TodayWatchFaceService` 类的实现之前，让我们运行我们的示例代码，看看它的行为如何，这样我们可以从用户的角度观察应用程序。
- en: 'Note that long pressing on the device screen causes the installed watch faces
    to get displayed:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，长按设备屏幕会导致已安装的表盘显示：
- en: '![The TodayWatchFace service](img/image00216.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![The TodayWatchFace service](img/image00216.jpeg)'
- en: 'Note that a *gear* icon shows up underneath the label, the `TodayWatchFace`
    activity, of our custom watch face because we have a configuration activity defined
    for the `WatchFace` element. Let''s select our custom watch face. Here''s how
    it renders. By default, it shows the day of the week and the full date with the
    *seconds* colon blinking:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在自定义表盘的标签 `TodayWatchFace` 下面出现了一个 *齿轮* 图标，因为我们为 `WatchFace` 元素定义了一个配置活动。让我们选择我们的自定义表盘。以下是它的渲染效果。默认情况下，它显示星期和完整的日期，*秒*
    分针闪烁：
- en: '![The TodayWatchFace service](img/image00217.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![The TodayWatchFace service](img/image00217.jpeg)'
- en: 'Tapping once on the watch face shows the day of the year, as shown in the following
    image:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在表盘上轻触一次会显示年份中的某一天，如下面的图片所示：
- en: '![The TodayWatchFace service](img/image00218.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![The TodayWatchFace service](img/image00218.jpeg)'
- en: Tapping a second time on the watch face shows the number of days left in the
    year.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在表盘上第二次轻触会显示当年剩余的天数。
- en: '![The TodayWatchFace service](img/image00219.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![The TodayWatchFace service](img/image00219.jpeg)'
- en: Tapping again takes us back to the default display.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 再次轻触会返回默认显示。
- en: The TodayWatchFaceService class
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TodayWatchFaceService 类
- en: 'The `TodayWatchFaceService` class does all of the work, including setting the
    layout, reading the configuration values, and painting the UI for every tick of
    the second. It isn''t realistic to discuss over 700 lines of code in this chapter.
    So, we''ll look at important snippets taken from this class definition:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodayWatchFaceService` 类执行所有工作，包括设置布局、读取配置值以及为每秒的每个滴答绘制 UI。在本章中讨论超过 700 行代码是不现实的。因此，我们将查看从这个类定义中提取的重要片段：'
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As always, the sample source code for this chapter, and all others, is available
    at the GitHub link provided at the beginning of each chapter. The source code
    hosted at GitHub is our primary reference for a thorough understanding of how
    this service works.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 总是如此，本章以及所有其他章节的示例源代码，都可以在每章开头提供的 GitHub 链接中找到。GitHub 上托管的是我们深入了解该服务如何工作的主要参考。
- en: The onTimeTick method
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`onTimeTick` 方法'
- en: 'This method is called for every time tick. We invalidate the UI (see the call
    to the `invalidate()` method) to force a call to the `onDraw` method. In effect,
    we re-render the UI every 500 milliseconds in normal mode and every minute in
    ambient or mute mode:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每次时间滴答时都会调用此方法。我们使 UI 无效（请参阅对 `invalidate()` 方法的调用），以强制调用 `onDraw` 方法。实际上，我们在正常模式下每
    500 毫秒重新渲染一次 UI，在环境或静音模式下每分钟重新渲染一次：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Drawing the watch face
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制手表表盘
- en: 'The `onDraw()` method paints the watch face with all necessary information.
    Follow the comments in the code to make complete sense of the following code snippet:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`onDraw()` 方法用所有必要的信息绘制手表表盘。遵循代码中的注释，以便完全理解以下代码片段：'
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ambient mode
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境模式
- en: 'Ambient mode, in contrast with interactive mode, is the energy saver mode.
    Depending on the watch and its configuration, an operation such as a click on
    a dial renders the watch faces in ambient mode:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与交互模式相比，环境模式是节能模式。根据手表及其配置，例如点击表盘的操作，将手表表盘渲染为环境模式：
- en: '![Ambient mode](img/image00220.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![环境模式](img/image00220.jpeg)'
- en: It may not be obvious at a glance because our app is so simple, but if we compare
    the preceding screenshot with the screenshot of the watch face in interactive
    mode, we will see that the seconds don't show up and the colon symbol doesn't
    blink.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序非常简单，这可能一眼看不出来，但如果我们将前面的截图与交互模式下手表表盘的截图进行比较，我们会看到秒针没有显示，冒号符号也没有闪烁。
- en: 'Here''s the listener that gets called when the watch face switches from interactive
    mode to ambient mode:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当手表表盘从交互模式切换到环境模式时被调用的监听器：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Customizing the watch face
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制手表表盘
- en: 'We did not want to take this example too far, so in the interest of simplicity,
    we decided to provide a configurable watch face background color. Clicking on
    the gear icon from the watch face settings lets us pick the background color,
    as shown here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想将这个例子做得太复杂，因此出于简单起见，我们决定提供一个可配置的手表表盘背景色。点击手表表盘设置中的齿轮图标，我们可以选择背景色，如图所示：
- en: '![Customizing the watch face](img/image00221.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![定制手表表盘](img/image00221.jpeg)'
- en: The WatchFaceConfigActivity class
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`WatchFaceConfigActivity` 类'
- en: 'The `WatchFaceConfigActivity` class renders a simple color picker to determine
    the background color:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`WatchFaceConfigActivity` 类渲染了一个简单的颜色选择器，以确定背景色：'
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s a screenshot of the watch face when we select a background color of
    navy blue:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们选择海军蓝背景色时的手表表盘截图：
- en: '![The WatchFaceConfigActivity class](img/image00222.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![`WatchFaceConfigActivity` 类](img/image00222.jpeg)'
- en: We've just scratched the surface of watch face design and development, but hopefully,
    the basic treatment here has given us a taste of the work involved and piqued
    our interest. We could get a lot more creative in displaying relevant contextual
    information for a given day, such as the number of to-do items, weather-related
    information, and so on. As with all knowledge acquisition, we see that as we get
    done, we're really just getting started.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是刚刚触及了手表表盘设计和开发的表面，但希望这里的基本处理已经让我们尝到了这项工作的味道，并激发了我们的兴趣。对于给定的一天，我们可以更加富有创意地展示相关的上下文信息，例如待办事项的数量、与天气相关的信息等等。正如所有知识获取一样，我们看到当我们完成时，我们实际上才刚刚开始。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced the concept of watch faces and looked at their
    design, implementation, and performance considerations. We then surveyed the `WatchFaceService.Engine`
    class before implementing a simple interactive watch face and seeing these concepts
    and API classes in action.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了手表表盘的概念，并探讨了它们的设计、实现和性能考虑。然后我们调查了 `WatchFaceService.Engine` 类，在实现一个简单的交互式手表表盘并看到这些概念和
    API 类的实际应用之前。
