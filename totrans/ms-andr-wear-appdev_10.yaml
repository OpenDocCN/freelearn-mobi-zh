- en: Chapter 10.  Watch Faces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"If you spend too much time thinking about a thing, you''ll never get it done."
                                                                                 
                                - Bruce Lee*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We will begin this chapter with an introduction to the concept of watch faces
    and survey the Android Wear APIs available to help us develop them. We will then
    develop a simple interactive watch face that, in addition to showing time, responds
    to a tap action by showing the number of days elapsed in the year and the number
    remaining.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code accompanying this chapter is available for reference on GitHub ([https://github.com/siddii/mastering-android-wear/tree/master/Chapter_10](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_10)).
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of brevity, code snippets are only included as needed. The reader
    is encouraged to download the referenced code from GitHub and follow along as
    they progress through the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Telling the time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we speak of wearable devices, we are overwhelmingly referring to smartwatches,
    and a watch that does not tell the time isn't really much of a watch. It's like
    having a luxury yacht that features state of the art GPS technology but has trouble
    staying afloat. To strike a metaphor closer to home, consider a smartphone that
    has trouble functioning as a phone. (Wait! That's actually happened!)
  prefs: []
  type: TYPE_NORMAL
- en: What is a watch face?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The term *watch face* is used to refer to the digital display of the current
    time on the wearable device so that the user can tell at a glance what the time
    is, in much the same way one does when wearing a watch.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike a traditional watch, however, our wearable has a multitude of additional
    functionalities restricted only by its own internal memory and its communication
    with one or more paired handheld companion devices. So, showing the time on a
    wearable speaks to a far more sophisticated piece of software than, say, software
    that is written for a digital watch that may have a specific list of functionalities—time,
    date, dual time, and alarm mode to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, the watch face is itself a replaceable component in a wearable.
    You can change it to one you like, as often as you like. Watch faces sporting
    an array of styles and shapes, some offering relevant contextual data, are available
    through the Android Wear companion app. A user simply selects an available watch
    face, either on the wearable or on the companion app, and the wearable device
    displays a preview of the watch face and allows the user to configure it. And
    if you can't find what you like, you can go ahead and write your own. Hence, this
    chapter. Our journey through implementing a watch face will feel more real when
    we get to build one in the next section. Let's first touch upon what a watch face
    design entails, and which Wear API classes come into play in the development of
    a watch face.
  prefs: []
  type: TYPE_NORMAL
- en: Design considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While Android Wear can be a huge help in your design efforts through the provision
    of various capabilities such as attractive colors, dynamic backgrounds, animations,
    and data integrations, there are non-API aspects to your design that must be considered.
    We list a few here that are widely embraced by the Android development community:'
  prefs: []
  type: TYPE_NORMAL
- en: Think about what you want to show the user and how that fits into the context
    of a watch face. Too much information can distract.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your watch face should run reliably on square and circular devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide a suitable implementation for the ambient mode. Users will thank you
    for not draining their wearable's battery life when it is idle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI indicators (such as notification cards) should still show up without making
    it impossible to read the time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enrich your watch face with intelligence to query and display context-sensitive
    information available through the companion handheld device. Remember, the companion
    app does all the heavy lifting, so your wearable app (in this case, your watch
    face) should delegate to the companion app any computation-intensive work or third-party
    data lookup, such as weather information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let the user configure the watch face.
  prefs: []
  type: TYPE_NORMAL
- en: We highly recommend that you read through the *Watch Faces for Android Wear*
    section, which will help as a design guide, available on the Android developers
    site ([https://developer.android.com/design/wear/watchfaces.html](https://developer.android.com/design/wear/watchfaces.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Implementation considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Considering the background images. The background image in interactive mode may
    be different than the one used in ambient mode. Furthermore, background images
    should be scaled down (as a one-time operation) if the device has a lower resolution
    than the image.
  prefs: []
  type: TYPE_NORMAL
- en: Application code that retrieves context-sensitive data should only run on as-needed
    basis, with results being stored for reuse when the watch face needs to be redrawn.
  prefs: []
  type: TYPE_NORMAL
- en: Updates to the watch face in ambient mode should be as simple as possible through
    the use of a limited set of colors, a fixed black background, and with only outlines
    being drawn to minimize work and conserve battery life.
  prefs: []
  type: TYPE_NORMAL
- en: The watch face service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A watch face is implemented as a service and packaged inside a wearable app.
    You already know that wearable apps are, in turn, packaged inside handheld apps.
    When users install such a handheld app that contains a wearable app with one or
    more watch faces, these watch faces then become selectable in the watch face picker
    on the wearable. They are also available on the handheld device in the Android
    Wear companion app. When one of the watch faces is selected (either on the handheld
    or the wearable's picker), the watch face is shown on the wearable device, which
    invokes the service callback methods as required through the life cycle of the
    watch face.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create watch face implementations, we extend the classes provided in the
    Wearable support library (the `android.support.wearable.watchface` package). When
    a watch face becomes active, the system invokes the methods in its service class
    when various events occur, such as a change in time, a switch to ambient mode,
    and a notification alert. The implementations of the corresponding handlers then
    respond by drawing the watch face using the updated time or the notification data
    or whatever other data the event may consume. Key methods that may need to be
    implemented in a watch face service include following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `onCreate` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onPropertiesChanged` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onTimeTick` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onAmbientModeChanged` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onDraw` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onVisibilityChanged` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out the Wearable support library at [https://developer.android.com/reference/android/support/wearable/watchface/package-summary.html](https://developer.android.com/reference/android/support/wearable/watchface/package-summary.html)
    for a close look at the object model of the available watch face service classes.
  prefs: []
  type: TYPE_NORMAL
- en: Once implemented, the watch face service must be registered in the manifest
    (`AndroidManifest.xml`) file of the wearable app. This is how the system makes
    the watch face available in both the Android Wear companion app and the watch
    face picker on the wearable device when a user installs the app.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive watch faces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Watch faces do support limited user interaction. A single tap gesture at a given
    location on the watch face is accepted as long as it does not conflict with another
    UI element also listening for that gesture. In our sample code in the next section,
    we support a tap gesture that shows the number of days elapsed in the current
    year, as well as the number of days remaining.
  prefs: []
  type: TYPE_NORMAL
- en: 'Handling tap events involve implementing the `setWatchFaceStyle` method available
    in all extensions of the `WatchFaceService.Engine` class. The app informs the
    system that the watch face receives tap events, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Performance considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Conserving power is quite critical in the context of watch faces because a
    watch face is always active. Here are a few best practices put forward by the
    Wear development community with respect to watch face development:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the watch face only performs actions when it is active. Use the
    `onVisibilityChanged` and `isVisible` methods of the `WatchFaceService.Engine`
    class to determine that.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid using the `WearableListenerService` element to listen for events, as it
    is called whether or not a watch face is active. Rather, use listeners registered
    with the `DataApi.addListener` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep an eye on the actual power consumed by our wearable app. The Android Wear
    companion app lets us see how much battery different processes on the wearable
    device consume.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using animations, take care to lower the frame rate. 30 frames per second
    are sufficient for a smooth animation experience. We should use animations as
    little as possible, and when we do use them, we should use every opportunity to
    let the CPU sleep between runs of our animation. Every idle cycle contributes
    to a larger effort at conserving battery life.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep the bitmaps small. Where it makes sense, combine multiple bitmaps into
    one. Reducing the number of graphic assets we draw contributes to power savings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `Engine.onDraw` method exclusive to perform drawing operations. Move
    any work that loads resources, resizes images, or performs computations external
    to drawing, out of the `onDraw` method. Consider locating such code in the `onCreate`
    method instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's build a watch face
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to see the concepts, introduced previously, in action. We will build
    a simple watch face that shows the time using a fairly standard hour, minutes,
    and seconds display. Tapping the watch face will show the number of days that
    have elapsed in the current year. A second tap will show the number of days remaining
    in the current year.
  prefs: []
  type: TYPE_NORMAL
- en: In the subsections that follow, we will define a `WatchFaceService` class that
    extends the API `CanvasWatchFaceService` class and overrides the relevant event
    handlers that pertain to our sample application.
  prefs: []
  type: TYPE_NORMAL
- en: The Android manifest file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We begin by declaring the `TodayWatchFaceService` service and the `WatchFaceConfigActivity`
    activity, which helps with selecting a background color for the watch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The TodayWatchFace service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we take a closer look at the implementation of the `TodayWatchFaceService`
    class, let's run our sample code to see how it behaves so that we can observe
    the app from a user standpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that long pressing on the device screen causes the installed watch faces
    to get displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The TodayWatchFace service](img/image00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that a *gear* icon shows up underneath the label, the `TodayWatchFace`
    activity, of our custom watch face because we have a configuration activity defined
    for the `WatchFace` element. Let''s select our custom watch face. Here''s how
    it renders. By default, it shows the day of the week and the full date with the
    *seconds* colon blinking:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The TodayWatchFace service](img/image00217.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Tapping once on the watch face shows the day of the year, as shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The TodayWatchFace service](img/image00218.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tapping a second time on the watch face shows the number of days left in the
    year.
  prefs: []
  type: TYPE_NORMAL
- en: '![The TodayWatchFace service](img/image00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tapping again takes us back to the default display.
  prefs: []
  type: TYPE_NORMAL
- en: The TodayWatchFaceService class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `TodayWatchFaceService` class does all of the work, including setting the
    layout, reading the configuration values, and painting the UI for every tick of
    the second. It isn''t realistic to discuss over 700 lines of code in this chapter.
    So, we''ll look at important snippets taken from this class definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As always, the sample source code for this chapter, and all others, is available
    at the GitHub link provided at the beginning of each chapter. The source code
    hosted at GitHub is our primary reference for a thorough understanding of how
    this service works.
  prefs: []
  type: TYPE_NORMAL
- en: The onTimeTick method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This method is called for every time tick. We invalidate the UI (see the call
    to the `invalidate()` method) to force a call to the `onDraw` method. In effect,
    we re-render the UI every 500 milliseconds in normal mode and every minute in
    ambient or mute mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Drawing the watch face
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `onDraw()` method paints the watch face with all necessary information.
    Follow the comments in the code to make complete sense of the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Ambient mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ambient mode, in contrast with interactive mode, is the energy saver mode.
    Depending on the watch and its configuration, an operation such as a click on
    a dial renders the watch faces in ambient mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ambient mode](img/image00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It may not be obvious at a glance because our app is so simple, but if we compare
    the preceding screenshot with the screenshot of the watch face in interactive
    mode, we will see that the seconds don't show up and the colon symbol doesn't
    blink.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the listener that gets called when the watch face switches from interactive
    mode to ambient mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Customizing the watch face
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We did not want to take this example too far, so in the interest of simplicity,
    we decided to provide a configurable watch face background color. Clicking on
    the gear icon from the watch face settings lets us pick the background color,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the watch face](img/image00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The WatchFaceConfigActivity class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `WatchFaceConfigActivity` class renders a simple color picker to determine
    the background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a screenshot of the watch face when we select a background color of
    navy blue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The WatchFaceConfigActivity class](img/image00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We've just scratched the surface of watch face design and development, but hopefully,
    the basic treatment here has given us a taste of the work involved and piqued
    our interest. We could get a lot more creative in displaying relevant contextual
    information for a given day, such as the number of to-do items, weather-related
    information, and so on. As with all knowledge acquisition, we see that as we get
    done, we're really just getting started.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced the concept of watch faces and looked at their
    design, implementation, and performance considerations. We then surveyed the `WatchFaceService.Engine`
    class before implementing a simple interactive watch face and seeing these concepts
    and API classes in action.
  prefs: []
  type: TYPE_NORMAL
