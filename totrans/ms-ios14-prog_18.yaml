- en: '*Chapter 18*: Creating a macOS app with Catalyst'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 18 章*：使用 Catalyst 创建 macOS 应用程序'
- en: At WWDC 2019, Apple introduced Mac Catalyst to developers worldwide. With Mac
    Catalyst, developers could bring iPad apps into Mac quite easily. Catalyst allows
    iPad apps to be ported to Mac without much effort. This brings a whole new audience
    (Mac users) to iPad apps and expands the possibilities of the macOS ecosystem.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2019 年的 WWDC 上，苹果向全球开发者推出了 Mac Catalyst。有了 Mac Catalyst，开发者可以轻松地将 iPad 应用程序带到
    Mac 上。Catalyst 允许 iPad 应用程序无需太多努力即可移植到 Mac。这为 iPad 应用程序带来了全新的受众（Mac 用户），并扩大了 macOS
    生态系统的可能性。
- en: 'In this chapter, we are going to review the basics of Mac Catalyst. We will
    explore the new features introduced at WWDC 2020, and we will turn an iPad app
    into a Mac app using Catalyst. We will put into practice the two different ways
    to do this using Catalyst: **Scale Interface to Match iPad** and the new **Optimize
    Interface for Mac** option. We will compare the differences between them and the
    pros and cons of both approaches.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾 Mac Catalyst 的基础知识。我们将探索在 WWDC 2020 上引入的新功能，并使用 Catalyst 将 iPad 应用程序转换为
    Mac 应用程序。我们将通过使用 Catalyst 的两种不同方式来实践这一点：**缩放界面以匹配 iPad** 和新的 **优化界面以适应 Mac** 选项。我们将比较它们之间的差异以及两种方法的优缺点。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Discovering Mac Catalyst
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Mac Catalyst
- en: Exploring new Mac Catalyst features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索新的 Mac Catalyst 功能
- en: Building your first Mac Catalyst app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建您的第一个 Mac Catalyst 应用程序
- en: By the end of this chapter, you will be able to migrate your iPad apps to macOS
    and grow the audience and possibilities of your app within the Mac ecosystem.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够将您的 iPad 应用程序迁移到 macOS，并在 Mac 生态系统中扩大您应用程序的受众和可能性。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code bundle for this chapter includes a starter project called `todo_start`
    and its completed version. You can find them in the code bundle repository:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码包包括一个名为 `todo_start` 的入门项目及其完成版本。您可以在代码包仓库中找到它们：
- en: '[https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition](https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition](https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition)'
- en: Discovering Mac Catalyst
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Mac Catalyst
- en: Mac Catalyst helps developers to bring their iPad apps into Mac. Native Mac
    apps can share code with iPad apps, creating a unified ecosystem for users and
    developers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Mac Catalyst 帮助开发者将他们的 iPad 应用程序带到 Mac 上。原生 Mac 应用程序可以与 iPad 应用程序共享代码，为用户和开发者创建一个统一的生态系统。
- en: With Mac Catalyst, developers can adapt touch gestures and controls from the
    iPad to mouse and keyboard controls in the Mac app counterpart.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Mac Catalyst，开发者可以将 iPad 上的触摸手势和控件适配到 Mac 应用程序中的鼠标和键盘控件。
- en: When Apple added support on Mac Catalyst for UIKit on Mac, it took a huge step
    forward in terms of compatibility between the iPad and Mac. Apps that use SwiftUI
    instead had the advantage of becoming Universal apps and therefore they adapt
    even better on both systems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当苹果在 Mac Catalyst 中为 Mac 添加对 UIKit 的支持时，它在 iPad 和 Mac 之间的兼容性方面迈出了巨大的一步。使用 SwiftUI
    的应用程序则具有成为通用应用程序的优势，因此它们在两个系统上适应得更好。
- en: Once an app has made the initial transition from iPad to iPad + Mac with the
    help of Mac Catalyst, the result is very promising. There is one codebase to serve
    both platforms. By having just one codebase, companies can reduce the amount of
    time and effort needed to develop, maintain, and fix features in the app (for
    both systems).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序在 Mac Catalyst 的帮助下从 iPad 切换到 iPad + Mac，结果非常令人期待。有一个代码库可以服务于这两个平台。通过只有一个代码库，公司可以减少开发、维护和修复应用程序功能（针对两个系统）所需的时间和精力。
- en: There are also some drawbacks with Mac Catalyst. Not every iOS framework is
    supported right now. Apple is adding more and more every year. Also, some third-party
    libraries may not be supported, and it is the developer's responsibility to exclude
    them from the Mac system and look for an alternative.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Mac Catalyst 也有一些缺点。目前并非每个 iOS 框架都得到支持。苹果每年都在不断增加。此外，一些第三方库可能不受支持，开发者有责任将它们从
    Mac 系统中排除并寻找替代方案。
- en: Another drawback of Mac Catalyst is that some apps that go from iPad to Mac
    can feel a bit out of context. I refer to some apps that make use of a heavy iOS
    look-and-feel and are ported to Mac as is. Some elements of the UI differ a lot
    in both systems (checkboxes, popups, placement of the buttons, and so on). Some
    apps may require some extra work to adapt the UI from the iPad to the Mac style,
    but not every company or team has the resources, time, or intention to do so.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Mac Catalyst的另一个缺点是，一些从iPad移植到Mac的应用程序可能会感觉有些脱离上下文。我指的是一些利用了重iOS外观和感觉的应用程序，并且直接移植到Mac。UI的某些元素在这两个系统中差异很大（复选框、弹出窗口、按钮的位置等）。一些应用程序可能需要一些额外的工作来将UI从iPad调整为Mac风格，但并非每个公司或团队都有资源、时间或意愿这样做。
- en: In order to help with this issue, Mac Catalyst has a new feature called **Optimize
    Interface for Mac**. Instead of the former **Scale Interface to Match iPad** option,
    Mac Catalyst allows this new feature that transforms some UIKit controls into
    more Mac-styled ones automatically.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助解决这个问题，Mac Catalyst新增了一个名为**优化界面以适应Mac**的功能。与之前的**缩放界面以匹配iPad**选项不同，Mac
    Catalyst允许这个新功能自动将一些UIKit控件转换为更符合Mac风格的控件。
- en: In this section, we have learned about the basics of Mac Catalyst. Let's discuss
    the new improvement showcased during WWDC 2020 for Mac Catalyst in the next section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了Mac Catalyst的基础知识。让我们在下一节中讨论WWDC 2020期间展示的Mac Catalyst的新改进。
- en: Exploring new Mac Catalyst features
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索新的Mac Catalyst功能
- en: 'During WWDC 2020, Apple showcased the new **Optimize Interface for Mac** method.
    When we port an iPad app to Mac using this method, it brings some significant
    differences from the previous method, **Scale Interface to Match iPad**. The differences
    are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在WWDC 2020期间，苹果展示了新的**优化界面以适应Mac**方法。当我们使用这种方法将iPad应用程序移植到Mac时，它带来了与之前方法**缩放界面以匹配iPad**的一些显著差异。差异如下：
- en: Content is rendered 1:1\. With **Scale Interface**, the views are scaled to
    77% of their original sizes on Mac. This could cause problems in some views with
    **AutoLayout** rules that break or that simply change the overall shape of your
    UI. Now, with 1:1 rendering, the iPad app and the Mac app will keep the same dimensions
    and sizes. This increases the text quality a lot by not scaling it down on Mac;
    the text looks better and easier to read on your app.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容以1:1渲染。使用**缩放界面**时，视图在Mac上缩放到原始大小的77%。这可能会在某些具有**AutoLayout**规则的视图中引起问题，这些规则可能会破坏或简单地改变UI的整体形状。现在，使用1:1渲染，iPad应用程序和Mac应用程序将保持相同的尺寸和大小。这通过在Mac上不缩放文本来大大提高了文本质量；文本看起来更好，更容易阅读。
- en: macOS controls for UIKit counterparts. With the new **Optimize Interface for
    Mac** option, Catalyst uses Mac-style controls instead of the UIKit ones from
    your iPad app. By doing so, the UI of the app in Mac looks much more familiar
    to Mac users.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: macOS控件用于UIKit对应项。通过新的**优化界面以适应Mac**选项，Catalyst使用Mac风格的控件而不是iPad应用程序中的UIKit控件。通过这样做，Mac上的应用程序UI对Mac用户来说看起来更加熟悉。
- en: Similar to the previous point, macOS font spacing and standard macOS spacing
    are used in the Mac Catalyst app instead of those defined on the iPad version
    (which is different).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与前一点类似，Mac Catalyst应用程序中使用了macOS字体间距和标准macOS间距，而不是iPad版本中定义的间距（它们是不同的）。
- en: Much more iOS frameworks have been made available to Mac with Catalyst. Examples
    include `AVFoundation`, `NotificationCenter`, `ReplayKit`, `StoreKit`, `MessageUI`,
    and tons more.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Catalyst，许多iOS框架现在可用于Mac。例如，`AVFoundation`、`NotificationCenter`、`ReplayKit`、`StoreKit`、`MessageUI`以及更多。
- en: Added support for physical keyboard events on iOS. Now they are available on
    Mac Catalyst on Mac. Games can benefit from this.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在iOS上增加了对物理键盘事件的支持。现在它们在Mac Catalyst上也可用，游戏可以从中受益。
- en: The focus engine from tvOS is available now.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可用tvOS的焦点引擎。
- en: '`.selectionFollowsFocus` from `tableViews` and `collectionViews` is now available.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tableViews`和`collectionViews`中的`.selectionFollowsFocus`现在可用。'
- en: Now we can hide the cursor on Mac when needed.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以根据需要隐藏Mac上的光标。
- en: There are a new color wheel and color picker.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新增了颜色轮和颜色选择器。
- en: '`UISplitViewController` now supports three columns.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`UISplitViewController`现在支持三列。'
- en: '`SFSymbols` are fully supported.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全支持`SFSymbols`。
- en: Mac Catalyst's new extensions such as the Photo Editing extension are now available.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Mac Catalyst的新扩展，如照片编辑扩展，现在可用。
- en: Widgets from WidgetKit are also available from iPad to Mac thanks to Catalyst.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于Catalyst，WidgetKit的小部件也从iPad扩展到Mac。
- en: Users can enjoy universal purchases (buying items on iPad and using them on
    the Mac app too).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户可以享受通用购买（在iPad上购买项目并在Mac应用程序中使用）。
- en: New toolbar styles.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的工具栏样式。
- en: Later in the chapter, when building an app with both methods, you will be able
    to see these differences, and you will be applying the necessary fixes and steps
    to avoid them in your apps.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，当使用这两种方法构建应用程序时，你将能够看到这些差异，并且你将应用必要的修复和步骤来避免在你的应用程序中出现这些问题。
- en: In this section, we have learned about the new features launched in 2020 for
    Mac Catalyst. Now, let's start building our first Mac Catalyst app in the next
    section!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了2020年为Mac Catalyst推出的新功能。现在，让我们在下一节开始构建我们的第一个Mac Catalyst应用程序！
- en: Building your first Mac Catalyst app
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的第一个Mac Catalyst应用程序
- en: In this section, we are going to start working with a simple iPad to-do app,
    and we will transform it into a macOS app using two different techniques. The
    base app is very basic (you can't even add new to-do elements to it!) but it illustrates
    what kinds of errors, UI modifications, and methods you need to go through when
    going from iPad to Mac.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始使用一个简单的iPad待办事项应用程序，并使用两种不同的技术将其转换为macOS应用程序。基本应用程序非常基础（你甚至无法向其中添加新的待办事项元素！）但它说明了从iPad到Mac转换时需要经历哪些类型的错误、UI修改和方法。
- en: 'We will follow these steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循以下步骤：
- en: First, we will explore the iPad app itself to understand its essential elements
    and components.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将探索iPad应用程序本身，以了解其基本元素和组件。
- en: 'Then, we will use the first method to make it compatible with macOS: **Scale
    Interface to Match iPad**.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将使用第一种方法使其与macOS兼容：**将界面缩放以匹配iPad**。
- en: Finally, we will use the new method, **Optimize Interface for Mac**. We will
    compare the results with the **Scale Interface** method to match the iPad method,
    so you will learn when to use one or another, depending on your app.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将使用新的方法，**优化界面以匹配Mac**。我们将将其与**缩放界面**方法进行比较，以便匹配iPad方法，这样你将了解何时使用一个或另一个，这取决于你的应用程序。
- en: Let's start by exploring our iPad to-do app!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从探索我们的iPad待办事项应用程序开始！
- en: Exploring the iPad app
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索iPad应用程序
- en: In this section, we are going to take a quick look at the base app and its components
    to be able to modify them while understanding what we are doing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将快速查看基本应用程序及其组件，以便在理解我们在做什么的同时对其进行修改。
- en: 'You can find the code in the code bundle of this book. The project name is
    `todo_start`. Go ahead and open the project. Build and run it. You should see
    something like this in the iPad simulator in landscape mode:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书的代码包中找到代码。项目名称是`todo_start`。继续打开项目。构建并运行它。你应该在横幅模式下的iPad模拟器中看到类似这样的内容：
- en: '![Figure 18.1 – To-do app landscape mode'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.1 – 待办事项应用横幅模式'
- en: '](img/Figure_18.01_B14717.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_18.01_B14717.jpg]'
- en: Figure 18.1 – To-do app landscape mode
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.1 – 待办事项应用横幅模式
- en: 'If you are familiar with iPad apps, you will already be able to tell from these
    screenshots that the main component of this iPad app is `SplitViewController`.
    `SplitViewController` typically has two or three columns (`UIViewController` instances)
    inside it. In our case, we have two: a side menu on the left and a detail panel
    on the right (in landscape mode). In portrait mode, the side menu becomes a popover
    menu, and the detail panel is the main view.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉iPad应用程序，你将能够从这些屏幕截图中发现，此iPad应用程序的主要组件是`SplitViewController`。`SplitViewController`通常在其内部有两个或三个列（`UIViewController`实例）。在我们的例子中，我们有两个：左侧的侧边菜单和右侧的详细面板（在横幅模式下）。在纵向模式下，侧边菜单变为弹出菜单，详细面板是主视图。
- en: 'Let''s quickly check out the project structure and highlight the most important
    files in it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速检查项目结构和突出显示其中的最重要文件：
- en: The `MasterViewController.swift` file contains `MasterViewController`, which
    is the side menu of `SplitViewController`. It has a table view with its corresponding
    table view cells (`CategoryTableViewCell`).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MasterViewController.swift`文件包含`MasterViewController`，它是`SplitViewController`的侧边菜单。它有一个表格视图及其相应的表格视图单元格（`CategoryTableViewCell`）。'
- en: The `DetailViewController.swift` file contains `DetailViewController`, which
    is the detail view of `SplitViewController`. It has a table view, with its corresponding
    table view cells (`EntryTableViewCell`).
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DetailViewController.swift`文件包含`DetailViewController`，它是`SplitViewController`的详细视图。它有一个表格视图，以及相应的表格视图单元格（`EntryTableViewCell`）。'
- en: 'The `Datasource.swift` file contains the `Datasource` of the project, which
    will feed the view controllers with the to-do list using the `load() -> [Category]`
    method. It also contains the models of our to-do project. The to-do list is built
    using categories (such as work, grocery, or home), and entries inside those categories
    (such as "call my boss"). The `Datasource.swift` file contains structs representing
    these models: `Category`, `Entry`, and `Priority`. In a real-world app, you would
    separate these models into their own file/directory, but for simplicity, we are
    keeping them within the `Datasource` itself.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Datasource.swift` 文件包含了项目的 `Datasource`，它使用 `load() -> [Category]` 方法为视图控制器提供待办事项列表。它还包含了我们待办项目的模型。待办事项列表是通过类别（如工作、杂货或家庭）以及这些类别内的条目（如“给我的老板打电话”）构建的。`Datasource.swift`
    文件包含代表这些模型的结构体：`Category`、`Entry` 和 `Priority`。在现实世界的应用中，你会将这些模型分别放入自己的文件/目录中，但为了简单起见，我们将它们保留在
    `Datasource` 本身中。'
- en: So, to summarize the components of the app, the side menu (`MasterViewController`)
    displays a list of to-do categories in the form of a table (`Category` and `CategoryTableViewCell`
    instances). When selecting one category, the detail view (`DetailViewController`)
    displays a table with different to-do entries (`Entry` and `EntryTableViewCell`
    instances). All the data is provided by `Datasource`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了总结应用组件，侧边菜单（`MasterViewController`）以表格的形式显示待办事项类别的列表（`Category` 和 `CategoryTableViewCell`
    实例）。当选择一个类别时，详细视图（`DetailViewController`）显示一个包含不同待办事项条目的表格（`Entry` 和 `EntryTableViewCell`
    实例）。所有数据都由 `Datasource` 提供。
- en: 'The entries of the to-do in each category are represented by cells that contain
    different information in each to-do (`EntryTableViewCell`):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类别中待办事项的条目由包含每个待办事项不同信息的单元格表示（`EntryTableViewCell`）：
- en: '![Figure 18.2 – Entry cell'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 18.2 – Entry cell]'
- en: '](img/Figure_18.02_B14717.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_18.02_B14717.jpg]'
- en: Figure 18.2 – Entry cell
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.2 – 条目单元格
- en: 'These table view cells contain the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表格视图单元格包含以下内容：
- en: One `UISwitch` to represent whether the to-do is pending or complete.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `UISwitch` 用于表示待办事项是挂起还是完成。
- en: One `UIPickerView` to represent the priority of the task (**High**, **Medium**,
    or **Low**).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `UIPickerView` 用于表示任务的优先级（**高**、**中**或**低**）。
- en: One `UILabel` to describe the task.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `UILabel` 用于描述任务。
- en: One `UIButton` to set an alarm in the task.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `UIButton` 用于设置任务中的闹钟。
- en: 'There is also an additional button in the top-right corner:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角还有一个额外的按钮：
- en: '![Figure 18.3 – Add to-do button'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 18.3 – Add to-do button]'
- en: '](img/Figure_18.03_B14717.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_18.03_B14717.jpg]'
- en: Figure 18.3 – Add to-do button
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.3 – 添加待办事项按钮
- en: This button represents the action that will allow the user to add a new entry
    to the to-do list.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此按钮表示允许用户向待办事项列表添加新条目的操作。
- en: There is no functionality at all except for displaying the elements themselves
    right now, but you will understand later in the chapter why each of these elements
    is there. An easy and simple app, right? Let's start the transformation process
    from iPad to Mac now!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 目前除了显示这些元素本身之外，没有任何功能，但你在本章后面会理解为什么每个元素都存在。这是一个简单易用的应用，对吧？现在让我们从 iPad 到 Mac
    开始转换过程！
- en: Scaling your iPad app for Mac
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Mac 调整你的 iPad 应用
- en: In this section, we are going to transform the iPad app into a Mac-compatible
    app using the Mac Catalyst **Scale Interface to Match iPad** method. This was
    the first way introduced by Apple to transform iPad apps into Mac apps easily.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Mac Catalyst 的 **Scale Interface to Match iPad** 方法将 iPad 应用转换为 Mac
    兼容的应用。这是苹果首次引入的将 iPad 应用轻松转换为 Mac 应用的方法。
- en: 'Open the project from the current section and go to the project navigator.
    In the **Deployment Info** section, check the **Mac** checkbox and press **Enable**
    in the popup:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从当前部分打开项目并转到项目导航器。在 **Deployment Info** 部分勾选 **Mac** 复选框，并在弹出窗口中按 **Enable**：
- en: '![Figure 18.4 – Enabling Mac support'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 18.4 – Enabling Mac support]'
- en: '](img/Figure_18.04_B14717.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_18.04_B14717.jpg]'
- en: Figure 18.4 – Enabling Mac support
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.4 – 启用 Mac 支持
- en: Make sure that the option is set to **Scale Interface to Match iPad**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 确保选项设置为 **Scale Interface to Match iPad**。
- en: 'Now, build and run the app using Mac as the target device. You should see the
    following UI:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 Mac 作为目标设备构建并运行应用。你应该看到以下 UI：
- en: '![Figure 18.5 – The Mac version of the to-do app'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 18.5 – The Mac version of the to-do app]'
- en: '](img/Figure_18.05_B14717.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_18.05_B14717.jpg]'
- en: Figure 18.5 – The Mac version of the to-do app
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.5 – 待办事项应用的 Mac 版本
- en: 'That was extremely easy! It is true that our example app is very simple and
    straightforward. But with a simple click, it is already compatible and "usable"
    on Mac. We didn''t have any work to do! However, even though the app is usable,
    it doesn''t have the Mac style. Let''s list some elements that differ from a traditional
    Mac app:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单！诚然，我们的示例应用程序非常简单直接。但通过简单的点击，它已经兼容并且“可用”在Mac上。我们没有做任何工作！然而，尽管应用程序可用，但它没有Mac风格。让我们列出一些与传统Mac应用程序不同的元素：
- en: Mac apps don't use toolbars to contain actions such as the **+** symbol. The
    actions are usually located in the bottom-right corner.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac应用程序不使用工具栏来包含诸如**+**符号之类的操作。这些操作通常位于右下角。
- en: Buttons such as **Set Alarm** don't look like Mac buttons.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如**设置闹钟**的按钮看起来不像Mac按钮。
- en: Mac apps don't use this kind of Picker that much.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac应用程序不太使用这种类型的Picker。
- en: Mac apps use checkboxes instead of switches.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac应用程序使用复选框而不是开关。
- en: The views have been scaled to 77% of the original ones. That can break some
    constraints in your code, and you may need to review parts of the UI.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图已缩放到原始尺寸的77%。这可能会破坏您代码中的某些约束，您可能需要审查UI的部分。
- en: The more complex UI your app has on the iPad, the less "Mac" it will feel using
    this method. But we can't complain too much; we just made it compatible with one
    click!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您的iPad应用程序在iPad上具有越复杂的UI，使用这种方法就越感觉不像Mac。但我们不能抱怨太多；我们只是通过一键使其兼容！
- en: 'This first iteration is always recommended as the first step to port your iPad
    app to Mac. Now that we have a Mac app, we are going to work on improving the
    UI to give it a more Mac look-and-feel. To do so, we will use the new method created
    by Apple: **Optimize Interface for Mac**. This method has its pros and cons, and
    we will see them in the next section.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个迭代始终是移植您的iPad应用程序到Mac的第一步。现在我们有了Mac应用程序，我们将致力于改进UI，使其看起来更像Mac。为此，我们将使用苹果公司创建的新方法：**Optimize
    Interface for Mac**。这种方法有其优点和缺点，我们将在下一节中看到它们。
- en: Optimizing your iPad app for Mac
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化iPad应用程序以适应Mac
- en: In this section, we are going to use the **Optimize Interface for Mac** option
    on the iPad app and we will learn how to adapt the result to suit the expected
    Mac-style interface on our app.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用iPad应用程序上的**Optimize Interface for Mac**选项，并学习如何将结果调整以适应我们应用程序上预期的Mac风格界面。
- en: 'In the project navigator, in the **Deployment Info** section, go ahead and
    change the Mac option to **Optimize Interface for Mac**:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目导航器中，在**Deployment Info**部分，将Mac选项更改为**Optimize Interface for Mac**：
- en: '![Figure 18.6 – Using Optimize Interface for Mac'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.6 – 使用Optimize Interface for Mac'
- en: '](img/Figure_18.06_B14717.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_18.06_B14717.jpg)'
- en: Figure 18.6 – Using Optimize Interface for Mac
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.6 – 使用Optimize Interface for Mac
- en: 'After selecting this option, change the target to Mac and launch the app. You
    should get a crash saying the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项后，将目标更改为Mac并启动应用程序。您应该会收到以下崩溃信息：
- en: '[PRE0]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We didn't have any problem when we used the `UIPickerView` instances as displayed
    in this example. One solution could be to use SwiftUI's Picker (which is available
    under `ComboBox`).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用此示例中显示的`UIPickerView`实例时，我们没有遇到任何问题。一个解决方案可能是使用SwiftUI的Picker（在`ComboBox`下可用）。
- en: We are going to learn now how to use or not use specific components in our app,
    depending on the device that is running it. We are going to install this `UIPickerView`
    on iPad, but we will remove it from the Mac version (to make it compile for now).
    We will achieve this by using storyboard variations.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习如何根据运行它的设备来使用或不在我们的应用程序中使用特定的组件。我们将在这个iPad上安装这个`UIPickerView`，但我们将从Mac版本中移除它（为了现在能够编译）。我们将通过使用Storyboard变体来实现这一点。
- en: Storyboard variations can help us to install or uninstall specific components
    in our view controllers based on certain parameters, such as the device, the width
    of the screen, the height, and the gamut.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Storyboard变体可以帮助我们根据某些参数（如设备、屏幕宽度、高度和色域）在视图控制器中安装或卸载特定组件。
- en: 'Let''s uninstall `UIPickerView` from the cell when the app runs on a Mac. Follow
    these steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在应用程序在Mac上运行时从单元格中卸载`UIPickerView`。按照以下步骤操作：
- en: Open the `Main.storyboard` file and go to **Detail View Controller**. Select
    the **entry** cell prototype:![Figure 18.7 – Detail View Controller
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Main.storyboard`文件并转到**Detail View Controller**。选择**entry**单元格原型：![图18.7
    – Detail View Controller
- en: '](img/Figure_18.07_B14717.jpg)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_18.07_B14717.jpg)'
- en: Figure 18.7 – Detail View Controller
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图18.7 – Detail View Controller
- en: Now, select the `UIPickerView` of the cell, and in its **Attributes Inspector**
    window, add a variation on the **Installed** section by clicking on the **+**
    sign:![Figure 18.8 – Adding an Installed variation
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择单元格的`UIPickerView`，并在其**属性检查器**窗口中，通过点击**+**符号在**已安装**部分添加一个变体：![图18.8
    – 添加已安装变体
- en: '](img/Figure_18.08_B14717.jpg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.08_B14717.jpg)'
- en: Figure 18.8 – Adding an Installed variation
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图18.8 – 添加已安装变体
- en: In the popup that shows up, select **Mac** from the **Idiom** selector:![Figure
    18.9 – Adding a Mac idiom variation
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的弹出窗口中，从**方言**选择器中选择**Mac**：![图18.9 – 添加Mac方言变体
- en: '](img/Figure_18.09_B14717.jpg)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.09_B14717.jpg)'
- en: Figure 18.9 – Adding a Mac idiom variation
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图18.9 – 添加Mac方言变体
- en: 'Now, you want to uncheck the new variation so that this component will not
    be installed in the Mac idiom:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您想要取消选中新的变体，这样这个组件就不会在Mac方言中安装：
- en: '![Figure 18.10 – Uninstalling the Mac idiom variation'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.10 – 卸载Mac方言变体'
- en: '](img/Figure_18.10_B14717.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.10_B14717.jpg)'
- en: Figure 18.10 – Uninstalling the Mac idiom variation
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.10 – 卸载Mac方言变体
- en: 'Great! By using variations in the storyboard, you are able to specify when
    to install certain components based on the device that is running it and other
    factors! Now try launching the app again, using Mac as the target. This time,
    the app should not crash and you will get the following screen:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！通过在故事板中使用变体，您可以根据运行它的设备和其它因素来指定安装某些组件的时间！现在尝试再次启动应用，以Mac为目标。这次，应用应该不会崩溃，您将看到以下屏幕：
- en: '![Figure 18.11 – First optimization for the Mac version of the to-do app'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.11 – 为待办事项应用Mac版本的第一次优化'
- en: '](img/Figure_18.11_B14717.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.11_B14717.jpg)'
- en: Figure 18.11 – First optimization for the Mac version of the to-do app
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.11 – 为待办事项应用Mac版本的第一次优化
- en: Great! We managed to use storyboard variations to adapt the Mac version of our
    app. Ideally, you should now find an alternative to this `UIPickerView` that works
    on Mac (SwiftUI's Picker is an example). That will be homework for you!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们成功地使用故事板变体来适配我们应用的Mac版本。理想情况下，您现在应该找到一个适用于Mac的替代`UIPickerView`（SwiftUI的Picker是一个例子）。这将是您的家庭作业！
- en: 'You can see in the preceding screenshot that there are still some issues that
    are common when translating an iPad app to Mac using the **Optimize Interface**
    option:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在前面的屏幕截图中看到，当使用**优化界面**选项将iPad应用转换为Mac时，仍然存在一些常见问题：
- en: In the **Categories** table cells, the word font size is different from the
    number font size. In our iPad app, the font size was the same. Take a closer look
    at the font size of **Work (3)** as an example.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**类别**表格单元格中，字体大小与数字字体大小不同。在我们的iPad应用中，字体大小是相同的。以**工作（3）**的字体大小为例，仔细查看一下。
- en: Mac apps don't use buttons such as **+** in the toolbar. The most common place
    for such actions is the bottom-right corner of the window.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac应用不使用工具栏中的按钮，如**+**。此类操作最常见的地方是窗口的右下角。
- en: 'Let''s work on these two issues next. Open the `Main.storyboard` file and check
    the font used in the labels of the **Root View Controller** table:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们处理这两个问题。打开`Main.storyboard`文件，检查**根视图控制器**表格中标签使用的字体：
- en: '![Figure 18.12 – Root View Controller cell labels'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.12 – 根视图控制器单元格标签'
- en: '](img/Figure_18.12_B14717.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.12_B14717.jpg)'
- en: Figure 18.12 – Root View Controller cell labels
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.12 – 根视图控制器单元格标签
- en: If you take a look at the font size used in these two labels, it is not the
    same. The first label is using the **Body** font. The second label is using the
    **System - 17.0** font. But then why do they look the same in **Scale Interface
    to Match iPad**? The reason is that in that option, the views are scaled down
    to 77% of the original size, and both fonts look the same. But in **Optimize Interface
    for Mac**, views are kept 1:1 in ratio and the predefined text styles adapt to
    the view content size. So, if you are going to use an iPad app in Mac with **Optimize
    Interface**, the best way to tackle fonts is to use these predefined styles all
    around your app. You will not have to tweak them later depending on the device.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看这两个标签中使用的字体大小，它们并不相同。第一个标签使用的是**正文**字体。第二个标签使用的是**系统 - 17.0**字体。但为什么在**缩放界面以匹配iPad**中它们看起来一样呢？原因是，在那个选项中，视图被缩放到原始大小的77%，两种字体看起来都一样。但在**优化界面以匹配Mac**中，视图保持1:1的比例，预定义的文本样式会适应视图内容大小。因此，如果您打算使用带有**优化界面**的iPad应用在Mac上，最好的做法是在您的整个应用中使用这些预定义的样式。您将不必根据设备进行调整。
- en: 'In order to fix the problem, change the **System – 17.0** font to the **Body**
    font in the label attribute inspector:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，请在标签属性检查器中将**系统 – 17.0**字体更改为**正文**字体：
- en: '![Figure 18.13 – Using Text Styles'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.13 – 使用文本样式'
- en: '](img/Figure_18.13_B14717.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.13_B14717.jpg)'
- en: Figure 18.13 – Using Text Styles
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.13 – 使用文本样式
- en: 'Now run the app on the Mac target:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在Mac目标上运行应用：
- en: '![Figure 18.14 – New font style results on the Mac'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.14 – 新字体样式在Mac上的结果'
- en: '](img/Figure_18.14_B14717.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.14_B14717.jpg)'
- en: Figure 18.14 – New font style results on the Mac
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.14 – 在Mac上新的字体样式结果
- en: As displayed in the previous screenshot, the font sizes of both **Work** and
    **(3)** are now the same. If you execute the app on an iPad, they will also be
    the same. We don't have any difference anymore.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，**工作**和**(3**)的字体大小现在相同。如果你在iPad上运行应用，它们也将相同。我们不再有任何差异。
- en: 'With this fix in place, it is time for us to hide the toolbar on `DetailViewController`.
    Mac apps don''t use toolbars to display a single action as we are doing right
    now:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个修复到位后，是我们时候在`DetailViewController`上隐藏工具栏了。Mac应用不使用工具栏来显示单个动作，就像我们现在所做的那样：
- en: '![Figure 18.15 – Toolbar with a right-side action button'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.15 – 带有右侧动作按钮的工具栏'
- en: '](img/Figure_18.15_B14717.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.15_B14717.jpg)'
- en: Figure 18.15 – Toolbar with a right-side action button
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.15 – 带有右侧动作按钮的工具栏
- en: 'We learned how to show/hide elements using storyboard variations, but for this
    toolbar, we are going to do it programmatically. The component will still be installed,
    but we will hide it on Mac. Open the `DetailViewController` file and change the
    `viewWillAppear` method implementation for this one:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用故事板变体来显示/隐藏元素，但对于这个工具栏，我们将以编程方式来做。组件仍然会被安装，但我们将在Mac上隐藏它。打开`DetailViewController`文件，并更改`viewWillAppear`方法实现：
- en: '[PRE1]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Review the highlighted code. We are able to detect in which device we are launching
    the app by using the `userInterfaceIdiom` property of `traitCollection`. When
    it is `.mac`, we hide the toolbar, and only add the right-side **+** button when
    we are on another device (such as an iPad).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 检查高亮的代码。我们能够通过使用`traitCollection`的`userInterfaceIdiom`属性来检测我们正在哪个设备上启动应用。当它是`.mac`时，我们隐藏工具栏，并且当我们处于其他设备（如iPad）上时，仅添加右侧的**+**按钮。
- en: If you build and execute the app on the Mac target, the **+** button is gone.
    Great! But now we cannot create new to-do items! We have lost access to this button
    for Mac. We need to adapt this scenario in a different way.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你构建并执行Mac目标上的应用，**+**按钮消失了。太好了！但现在我们无法创建新的待办事项！我们失去了对Mac上此按钮的访问。我们需要以不同的方式适应这种场景。
- en: 'Traditionally, for a Mac interface, the `Main.storyboard` file. Select the
    table view of **Detail View Controller**:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，对于Mac界面，选择`Main.storyboard`文件。选择**详细视图控制器**的表格视图：
- en: '![Figure 18.16 – Detail View Controller table view'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.16 – 详细视图控制器表格视图'
- en: '](img/Figure_18.16_B14717.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.16_B14717.jpg)'
- en: Figure 18.16 – Detail View Controller table view
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.16 – 详细视图控制器表格视图
- en: 'Now we are going to make space at the bottom of the controller for a new button,
    but only on Mac. Follow these steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在控制器的底部为一个新的按钮腾出空间，但仅限于Mac。请按照以下步骤操作：
- en: Go into the size inspector of **Table View** of **Detail View Controller**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**详细视图控制器**的**表格视图**的大小检查器。
- en: Edit the constraint that attaches the bottom of the table view with the bottom
    of the controller, `-60`:![Figure 18.17 – Editing the table view bottom constraint
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑将表格视图底部与控制器底部连接的约束，`-60`：![图18.17 – 编辑表格视图底部约束
- en: '](img/Figure_18.17_B14717.jpg)'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.17_B14717.jpg)'
- en: Figure 18.17 – Editing the table view bottom constraint
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图18.17 – 编辑表格视图底部约束
- en: Now add a new `UIButton` in the space between the table and the bottom of the
    view controller. Set **Create** as the button title. Add the four constraints
    displayed in the following screenshot:![Figure 18.18 – Adding a new button
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在视图控制器和表格之间添加一个新的`UIButton`。将按钮标题设置为**创建**。添加以下截图显示的四个约束：![图18.18 – 添加新按钮
- en: '](img/Figure_18.18_B14717.jpg)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_18.18_B14717.jpg)'
- en: Figure 18.18 – Adding a new button
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图18.18 – 添加新按钮
- en: Now add a **Vertical Spacing** constraint from the table view to the new **Create**
    button that you just added (you can hold *Ctrl* + drag from the table to the button).
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从表格拖动到新添加的**创建**按钮，添加一个**垂直间距**约束（你可以按住*Ctrl*拖动）。
- en: We want to add a variation to the button. We want the button to be installed
    only for Mac idioms. So, go ahead and add a variation for Mac and uncheck the
    default one (as we did previously in this chapter for `UIPickerView`). By doing
    this, the button will only be visible on Mac devices:![Figure 18.19 – Installing
    the new button only in Mac
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想为按钮添加一个变体。我们希望按钮仅适用于Mac方言。所以，请为Mac添加一个变体，并取消选中默认选项（就像我们在本章之前为`UIPickerView`所做的那样）。通过这样做，按钮将仅在Mac设备上可见：![图18.19
    – 仅在Mac中安装新按钮
- en: '](img/Figure_18.19_B14717.jpg)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图18.19 – Mac应用程序最终版本'
- en: Figure 18.19 – Installing the new button only in Mac
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图18.19 – 仅在Mac中安装新按钮
- en: If you did it properly, the button should disappear in the storyboard if you
    are using an iPad as the preview device. You can change the device to **Mac**
    with **Mac Idiom** (*not Mac with iPad Idiom!*) and it will be shown again (you
    can do this in the bottom options of the storyboard window):![Figure 18.20 – Device
    preview selection
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您操作得当，如果使用iPad作为预览设备，按钮应该会在故事板中消失。您可以将设备更改为**Mac**，使用**Mac方言**（*而不是Mac与iPad方言！*），它将再次显示（您可以在故事板窗口的底部选项中这样做）：![图18.20
    – 设备预览选择
- en: '](img/Figure_18.20_B14717.jpg)'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图18.20 – 设备预览选择'
- en: Figure 18.20 – Device preview selection
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图18.20 – 设备预览选择
- en: Finally, we need to again edit the constraint of item number 2 of this list.
    You added a `-60` constant to it. Now we want to put it back to `0`, as before.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要再次编辑此列表中第2项的约束条件。您已向其中添加了`-60`常数。现在我们想将其恢复到`0`，就像之前一样。
- en: 'Now go ahead and execute the app on an iPad target. You should still see the
    **+** symbol in the top-right corner and not see the new **Create** button at
    the bottom. Execute it now on a Mac target. You should get the following error
    on the console:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请使用iPad目标执行应用程序。您应该仍然在右上角看到**+**符号，并且看不到底部的**创建**按钮。现在在Mac目标上执行它。您应该在控制台上得到以下错误：
- en: '[PRE2]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is because we added two different constraints that are not able to co-exist:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们添加了两个不能共存的不同约束条件：
- en: '`0`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`'
- en: '`9`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`9`'
- en: 'In fact, we need both constants, but one is for iPad devices and the other
    only applies to Mac. Go ahead and change the priority of one of them to `250`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们需要两个常数，一个用于iPad设备，另一个仅适用于Mac。请将其中一个常数的优先级更改为`250`：
- en: '![Figure 18.21 – Changing the constraint priority'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.21 – 更改约束优先级'
- en: '](img/Figure_18.21_B14717.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.21 – Mac的初始缩放版本'
- en: Figure 18.21 – Changing the constraint priority
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.21 – 更改约束优先级
- en: 'With this, we can keep both constraints, but they will not be exclusive to
    each other. When the Mac button is not installed, that constraint will not take
    effect and the other one will apply (attaching the table view bottom to the bottom
    of the safe area). Go ahead and execute the app using a Mac target:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以同时保留两个约束条件，但它们不会相互排斥。当没有安装Mac按钮时，该约束条件将不会生效，另一个约束条件将应用（将表视图底部与安全区域底部对齐）。请使用Mac目标执行应用程序：
- en: '![Figure 18.22 – Mac app final version'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.22 – Mac应用程序最终版本'
- en: '](img/Figure_18.22_B14717.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.22 – Mac应用程序最终版本'
- en: Figure 18.22 – Mac app final version
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.22 – Mac应用程序最终版本
- en: 'That looks great! Now we have two different variations of the UI, one for iPad
    and another one more adapted to Mac standards. Compare it now with the previous
    iPad-looking version for Mac that **Scale Interface to Match iPad** provided us:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很棒！现在我们有了两种不同的UI变体，一个用于iPad，另一个更适合Mac标准。现在将其与**缩放界面以匹配iPad**为我们提供的之前的iPad外观版本进行比较：
- en: '![Figure 18.23 – Initial scaled version for Mac'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.23 – Mac的初始缩放版本'
- en: '](img/Figure_18.23_B14717.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.23 – Mac的初始缩放版本'
- en: Figure 18.23 – Initial scaled version for Mac
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.23 – Mac的初始缩放版本
- en: As you can see, it is quite different! The new version feels more Mac-native.
    The buttons, toolbar, controls placement, and overall scale of the elements feel
    much better for the Mac version. It requires a bit more work, but the results
    are worth the effort. You can always do an initial port of your iPad app to Mac
    with **Scale Interface to Match iPad**, and then work on **Optimize Interface
    for Mac** later on!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这相当不同！新版本感觉更符合Mac原生风格。按钮、工具栏、控件位置以及元素的整体缩放感觉对Mac版本来说要好得多。这需要做更多的工作，但结果是值得的。您始终可以将iPad应用程序的初始端口移植到Mac，使用**缩放界面以匹配iPad**，然后稍后对**优化界面以匹配Mac**进行工作！
- en: In this section, we started with a simple to-do iPad app. We used Mac Catalyst
    to port it to the Mac. First, we used the **Scale Interface to Match iPad** option,
    making the app available on Mac with one click. But then, we wanted to improve
    the UI to feel more aligned with the Mac standards, so we used the new **Optimize
    Interface for Mac** option. This option is not as straightforward as the scaling
    one, and we had to adapt certain sizes, remove some UI controls that are not available
    on the Mac, and create different variations specifically for the Mac. But the
    results are looking great!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们从简单的待办事项iPad应用开始。我们使用Mac Catalyst将其移植到Mac。首先，我们使用了**将界面缩放以匹配iPad**选项，使应用一键即可在Mac上使用。但随后，我们希望改进UI，使其更符合Mac标准，因此我们使用了新的**优化界面以适应Mac**选项。这个选项不像缩放选项那样直接，我们不得不调整某些尺寸，删除一些在Mac上不可用的UI控件，并为Mac创建不同的变体。但结果看起来很棒！
- en: Let's now wrap up the chapter with a summary.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们用总结来结束这一章。
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started the chapter with a brief Mac Catalyst introduction. We explained
    how Apple has provided developers with an easy way to port iPad apps into Mac
    apps with Mac Catalyst, and all the benefits that this new feature provides.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以简短的Mac Catalyst介绍开始了这一章。我们解释了苹果如何通过Mac Catalyst为开发者提供了一种简单的方法，将iPad应用移植到Mac应用，以及这一新特性带来的所有好处。
- en: Then, we discussed the most recent improvements and changes on Mac Catalyst
    presented in 2020\. Among those new features, we mentioned the implications of
    **Optimize Interface for Mac**, and how it can enhance your iPad apps to become
    great Mac apps.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们讨论了2020年Mac Catalyst的最新改进和变化。在这些新特性中，我们提到了**优化界面以适应Mac**的含义，以及它是如何增强iPad应用，使其成为优秀的Mac应用的。
- en: 'Finally, and taking an iPad app as the starting point, we created the Mac version
    using both Mac Catalyst methods: **Scale Interface to Match iPad** and **Optimize
    Interface for Mac**. We showcased their pros and cons, and we applied the most
    common fixes and improvements that you will find yourself using with these two
    methods. By comparing them with the same app, you have got an understanding of
    the main differences between them and when to apply one or the other.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以iPad应用为起点，我们使用Mac Catalyst的两种方法：**将界面缩放以匹配iPad**和**优化界面以适应Mac**，创建了Mac版本。我们展示了它们的优缺点，并应用了你在使用这两种方法时最常遇到的修复和改进。通过将它们与同一应用进行比较，你对它们之间的主要区别以及何时应用哪一个或另一个有了了解。
- en: In the next chapter, we will learn how and when to test your code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何以及何时测试你的代码。
