- en: '*Chapter 18*: Creating a macOS app with Catalyst'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At WWDC 2019, Apple introduced Mac Catalyst to developers worldwide. With Mac
    Catalyst, developers could bring iPad apps into Mac quite easily. Catalyst allows
    iPad apps to be ported to Mac without much effort. This brings a whole new audience
    (Mac users) to iPad apps and expands the possibilities of the macOS ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to review the basics of Mac Catalyst. We will
    explore the new features introduced at WWDC 2020, and we will turn an iPad app
    into a Mac app using Catalyst. We will put into practice the two different ways
    to do this using Catalyst: **Scale Interface to Match iPad** and the new **Optimize
    Interface for Mac** option. We will compare the differences between them and the
    pros and cons of both approaches.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering Mac Catalyst
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring new Mac Catalyst features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your first Mac Catalyst app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to migrate your iPad apps to macOS
    and grow the audience and possibilities of your app within the Mac ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code bundle for this chapter includes a starter project called `todo_start`
    and its completed version. You can find them in the code bundle repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition](https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering Mac Catalyst
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mac Catalyst helps developers to bring their iPad apps into Mac. Native Mac
    apps can share code with iPad apps, creating a unified ecosystem for users and
    developers.
  prefs: []
  type: TYPE_NORMAL
- en: With Mac Catalyst, developers can adapt touch gestures and controls from the
    iPad to mouse and keyboard controls in the Mac app counterpart.
  prefs: []
  type: TYPE_NORMAL
- en: When Apple added support on Mac Catalyst for UIKit on Mac, it took a huge step
    forward in terms of compatibility between the iPad and Mac. Apps that use SwiftUI
    instead had the advantage of becoming Universal apps and therefore they adapt
    even better on both systems.
  prefs: []
  type: TYPE_NORMAL
- en: Once an app has made the initial transition from iPad to iPad + Mac with the
    help of Mac Catalyst, the result is very promising. There is one codebase to serve
    both platforms. By having just one codebase, companies can reduce the amount of
    time and effort needed to develop, maintain, and fix features in the app (for
    both systems).
  prefs: []
  type: TYPE_NORMAL
- en: There are also some drawbacks with Mac Catalyst. Not every iOS framework is
    supported right now. Apple is adding more and more every year. Also, some third-party
    libraries may not be supported, and it is the developer's responsibility to exclude
    them from the Mac system and look for an alternative.
  prefs: []
  type: TYPE_NORMAL
- en: Another drawback of Mac Catalyst is that some apps that go from iPad to Mac
    can feel a bit out of context. I refer to some apps that make use of a heavy iOS
    look-and-feel and are ported to Mac as is. Some elements of the UI differ a lot
    in both systems (checkboxes, popups, placement of the buttons, and so on). Some
    apps may require some extra work to adapt the UI from the iPad to the Mac style,
    but not every company or team has the resources, time, or intention to do so.
  prefs: []
  type: TYPE_NORMAL
- en: In order to help with this issue, Mac Catalyst has a new feature called **Optimize
    Interface for Mac**. Instead of the former **Scale Interface to Match iPad** option,
    Mac Catalyst allows this new feature that transforms some UIKit controls into
    more Mac-styled ones automatically.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned about the basics of Mac Catalyst. Let's discuss
    the new improvement showcased during WWDC 2020 for Mac Catalyst in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring new Mac Catalyst features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During WWDC 2020, Apple showcased the new **Optimize Interface for Mac** method.
    When we port an iPad app to Mac using this method, it brings some significant
    differences from the previous method, **Scale Interface to Match iPad**. The differences
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Content is rendered 1:1\. With **Scale Interface**, the views are scaled to
    77% of their original sizes on Mac. This could cause problems in some views with
    **AutoLayout** rules that break or that simply change the overall shape of your
    UI. Now, with 1:1 rendering, the iPad app and the Mac app will keep the same dimensions
    and sizes. This increases the text quality a lot by not scaling it down on Mac;
    the text looks better and easier to read on your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: macOS controls for UIKit counterparts. With the new **Optimize Interface for
    Mac** option, Catalyst uses Mac-style controls instead of the UIKit ones from
    your iPad app. By doing so, the UI of the app in Mac looks much more familiar
    to Mac users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similar to the previous point, macOS font spacing and standard macOS spacing
    are used in the Mac Catalyst app instead of those defined on the iPad version
    (which is different).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Much more iOS frameworks have been made available to Mac with Catalyst. Examples
    include `AVFoundation`, `NotificationCenter`, `ReplayKit`, `StoreKit`, `MessageUI`,
    and tons more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added support for physical keyboard events on iOS. Now they are available on
    Mac Catalyst on Mac. Games can benefit from this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The focus engine from tvOS is available now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.selectionFollowsFocus` from `tableViews` and `collectionViews` is now available.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we can hide the cursor on Mac when needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are a new color wheel and color picker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`UISplitViewController` now supports three columns.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SFSymbols` are fully supported.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mac Catalyst's new extensions such as the Photo Editing extension are now available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Widgets from WidgetKit are also available from iPad to Mac thanks to Catalyst.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Users can enjoy universal purchases (buying items on iPad and using them on
    the Mac app too).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New toolbar styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Later in the chapter, when building an app with both methods, you will be able
    to see these differences, and you will be applying the necessary fixes and steps
    to avoid them in your apps.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned about the new features launched in 2020 for
    Mac Catalyst. Now, let's start building our first Mac Catalyst app in the next
    section!
  prefs: []
  type: TYPE_NORMAL
- en: Building your first Mac Catalyst app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to start working with a simple iPad to-do app,
    and we will transform it into a macOS app using two different techniques. The
    base app is very basic (you can't even add new to-do elements to it!) but it illustrates
    what kinds of errors, UI modifications, and methods you need to go through when
    going from iPad to Mac.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will explore the iPad app itself to understand its essential elements
    and components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we will use the first method to make it compatible with macOS: **Scale
    Interface to Match iPad**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we will use the new method, **Optimize Interface for Mac**. We will
    compare the results with the **Scale Interface** method to match the iPad method,
    so you will learn when to use one or another, depending on your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's start by exploring our iPad to-do app!
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the iPad app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to take a quick look at the base app and its components
    to be able to modify them while understanding what we are doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code in the code bundle of this book. The project name is
    `todo_start`. Go ahead and open the project. Build and run it. You should see
    something like this in the iPad simulator in landscape mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.1 – To-do app landscape mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.01_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.1 – To-do app landscape mode
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are familiar with iPad apps, you will already be able to tell from these
    screenshots that the main component of this iPad app is `SplitViewController`.
    `SplitViewController` typically has two or three columns (`UIViewController` instances)
    inside it. In our case, we have two: a side menu on the left and a detail panel
    on the right (in landscape mode). In portrait mode, the side menu becomes a popover
    menu, and the detail panel is the main view.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s quickly check out the project structure and highlight the most important
    files in it:'
  prefs: []
  type: TYPE_NORMAL
- en: The `MasterViewController.swift` file contains `MasterViewController`, which
    is the side menu of `SplitViewController`. It has a table view with its corresponding
    table view cells (`CategoryTableViewCell`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DetailViewController.swift` file contains `DetailViewController`, which
    is the detail view of `SplitViewController`. It has a table view, with its corresponding
    table view cells (`EntryTableViewCell`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Datasource.swift` file contains the `Datasource` of the project, which
    will feed the view controllers with the to-do list using the `load() -> [Category]`
    method. It also contains the models of our to-do project. The to-do list is built
    using categories (such as work, grocery, or home), and entries inside those categories
    (such as "call my boss"). The `Datasource.swift` file contains structs representing
    these models: `Category`, `Entry`, and `Priority`. In a real-world app, you would
    separate these models into their own file/directory, but for simplicity, we are
    keeping them within the `Datasource` itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, to summarize the components of the app, the side menu (`MasterViewController`)
    displays a list of to-do categories in the form of a table (`Category` and `CategoryTableViewCell`
    instances). When selecting one category, the detail view (`DetailViewController`)
    displays a table with different to-do entries (`Entry` and `EntryTableViewCell`
    instances). All the data is provided by `Datasource`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The entries of the to-do in each category are represented by cells that contain
    different information in each to-do (`EntryTableViewCell`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.2 – Entry cell'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.02_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.2 – Entry cell
  prefs: []
  type: TYPE_NORMAL
- en: 'These table view cells contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: One `UISwitch` to represent whether the to-do is pending or complete.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `UIPickerView` to represent the priority of the task (**High**, **Medium**,
    or **Low**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `UILabel` to describe the task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `UIButton` to set an alarm in the task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is also an additional button in the top-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.3 – Add to-do button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.03_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.3 – Add to-do button
  prefs: []
  type: TYPE_NORMAL
- en: This button represents the action that will allow the user to add a new entry
    to the to-do list.
  prefs: []
  type: TYPE_NORMAL
- en: There is no functionality at all except for displaying the elements themselves
    right now, but you will understand later in the chapter why each of these elements
    is there. An easy and simple app, right? Let's start the transformation process
    from iPad to Mac now!
  prefs: []
  type: TYPE_NORMAL
- en: Scaling your iPad app for Mac
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to transform the iPad app into a Mac-compatible
    app using the Mac Catalyst **Scale Interface to Match iPad** method. This was
    the first way introduced by Apple to transform iPad apps into Mac apps easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the project from the current section and go to the project navigator.
    In the **Deployment Info** section, check the **Mac** checkbox and press **Enable**
    in the popup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.4 – Enabling Mac support'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.04_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.4 – Enabling Mac support
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the option is set to **Scale Interface to Match iPad**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, build and run the app using Mac as the target device. You should see the
    following UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.5 – The Mac version of the to-do app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.05_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.5 – The Mac version of the to-do app
  prefs: []
  type: TYPE_NORMAL
- en: 'That was extremely easy! It is true that our example app is very simple and
    straightforward. But with a simple click, it is already compatible and "usable"
    on Mac. We didn''t have any work to do! However, even though the app is usable,
    it doesn''t have the Mac style. Let''s list some elements that differ from a traditional
    Mac app:'
  prefs: []
  type: TYPE_NORMAL
- en: Mac apps don't use toolbars to contain actions such as the **+** symbol. The
    actions are usually located in the bottom-right corner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons such as **Set Alarm** don't look like Mac buttons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mac apps don't use this kind of Picker that much.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mac apps use checkboxes instead of switches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The views have been scaled to 77% of the original ones. That can break some
    constraints in your code, and you may need to review parts of the UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The more complex UI your app has on the iPad, the less "Mac" it will feel using
    this method. But we can't complain too much; we just made it compatible with one
    click!
  prefs: []
  type: TYPE_NORMAL
- en: 'This first iteration is always recommended as the first step to port your iPad
    app to Mac. Now that we have a Mac app, we are going to work on improving the
    UI to give it a more Mac look-and-feel. To do so, we will use the new method created
    by Apple: **Optimize Interface for Mac**. This method has its pros and cons, and
    we will see them in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing your iPad app for Mac
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to use the **Optimize Interface for Mac** option
    on the iPad app and we will learn how to adapt the result to suit the expected
    Mac-style interface on our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project navigator, in the **Deployment Info** section, go ahead and
    change the Mac option to **Optimize Interface for Mac**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.6 – Using Optimize Interface for Mac'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.06_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.6 – Using Optimize Interface for Mac
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting this option, change the target to Mac and launch the app. You
    should get a crash saying the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We didn't have any problem when we used the `UIPickerView` instances as displayed
    in this example. One solution could be to use SwiftUI's Picker (which is available
    under `ComboBox`).
  prefs: []
  type: TYPE_NORMAL
- en: We are going to learn now how to use or not use specific components in our app,
    depending on the device that is running it. We are going to install this `UIPickerView`
    on iPad, but we will remove it from the Mac version (to make it compile for now).
    We will achieve this by using storyboard variations.
  prefs: []
  type: TYPE_NORMAL
- en: Storyboard variations can help us to install or uninstall specific components
    in our view controllers based on certain parameters, such as the device, the width
    of the screen, the height, and the gamut.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s uninstall `UIPickerView` from the cell when the app runs on a Mac. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Main.storyboard` file and go to **Detail View Controller**. Select
    the **entry** cell prototype:![Figure 18.7 – Detail View Controller
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.07_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 18.7 – Detail View Controller
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, select the `UIPickerView` of the cell, and in its **Attributes Inspector**
    window, add a variation on the **Installed** section by clicking on the **+**
    sign:![Figure 18.8 – Adding an Installed variation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.08_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 18.8 – Adding an Installed variation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the popup that shows up, select **Mac** from the **Idiom** selector:![Figure
    18.9 – Adding a Mac idiom variation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.09_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 18.9 – Adding a Mac idiom variation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, you want to uncheck the new variation so that this component will not
    be installed in the Mac idiom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.10 – Uninstalling the Mac idiom variation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.10_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.10 – Uninstalling the Mac idiom variation
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! By using variations in the storyboard, you are able to specify when
    to install certain components based on the device that is running it and other
    factors! Now try launching the app again, using Mac as the target. This time,
    the app should not crash and you will get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.11 – First optimization for the Mac version of the to-do app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.11_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.11 – First optimization for the Mac version of the to-do app
  prefs: []
  type: TYPE_NORMAL
- en: Great! We managed to use storyboard variations to adapt the Mac version of our
    app. Ideally, you should now find an alternative to this `UIPickerView` that works
    on Mac (SwiftUI's Picker is an example). That will be homework for you!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see in the preceding screenshot that there are still some issues that
    are common when translating an iPad app to Mac using the **Optimize Interface**
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Categories** table cells, the word font size is different from the
    number font size. In our iPad app, the font size was the same. Take a closer look
    at the font size of **Work (3)** as an example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mac apps don't use buttons such as **+** in the toolbar. The most common place
    for such actions is the bottom-right corner of the window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s work on these two issues next. Open the `Main.storyboard` file and check
    the font used in the labels of the **Root View Controller** table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.12 – Root View Controller cell labels'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.12_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.12 – Root View Controller cell labels
  prefs: []
  type: TYPE_NORMAL
- en: If you take a look at the font size used in these two labels, it is not the
    same. The first label is using the **Body** font. The second label is using the
    **System - 17.0** font. But then why do they look the same in **Scale Interface
    to Match iPad**? The reason is that in that option, the views are scaled down
    to 77% of the original size, and both fonts look the same. But in **Optimize Interface
    for Mac**, views are kept 1:1 in ratio and the predefined text styles adapt to
    the view content size. So, if you are going to use an iPad app in Mac with **Optimize
    Interface**, the best way to tackle fonts is to use these predefined styles all
    around your app. You will not have to tweak them later depending on the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to fix the problem, change the **System – 17.0** font to the **Body**
    font in the label attribute inspector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.13 – Using Text Styles'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.13_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.13 – Using Text Styles
  prefs: []
  type: TYPE_NORMAL
- en: 'Now run the app on the Mac target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.14 – New font style results on the Mac'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.14_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.14 – New font style results on the Mac
  prefs: []
  type: TYPE_NORMAL
- en: As displayed in the previous screenshot, the font sizes of both **Work** and
    **(3)** are now the same. If you execute the app on an iPad, they will also be
    the same. We don't have any difference anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this fix in place, it is time for us to hide the toolbar on `DetailViewController`.
    Mac apps don''t use toolbars to display a single action as we are doing right
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.15 – Toolbar with a right-side action button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.15_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.15 – Toolbar with a right-side action button
  prefs: []
  type: TYPE_NORMAL
- en: 'We learned how to show/hide elements using storyboard variations, but for this
    toolbar, we are going to do it programmatically. The component will still be installed,
    but we will hide it on Mac. Open the `DetailViewController` file and change the
    `viewWillAppear` method implementation for this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Review the highlighted code. We are able to detect in which device we are launching
    the app by using the `userInterfaceIdiom` property of `traitCollection`. When
    it is `.mac`, we hide the toolbar, and only add the right-side **+** button when
    we are on another device (such as an iPad).
  prefs: []
  type: TYPE_NORMAL
- en: If you build and execute the app on the Mac target, the **+** button is gone.
    Great! But now we cannot create new to-do items! We have lost access to this button
    for Mac. We need to adapt this scenario in a different way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditionally, for a Mac interface, the `Main.storyboard` file. Select the
    table view of **Detail View Controller**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.16 – Detail View Controller table view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.16_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.16 – Detail View Controller table view
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to make space at the bottom of the controller for a new button,
    but only on Mac. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go into the size inspector of **Table View** of **Detail View Controller**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the constraint that attaches the bottom of the table view with the bottom
    of the controller, `-60`:![Figure 18.17 – Editing the table view bottom constraint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.17_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 18.17 – Editing the table view bottom constraint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now add a new `UIButton` in the space between the table and the bottom of the
    view controller. Set **Create** as the button title. Add the four constraints
    displayed in the following screenshot:![Figure 18.18 – Adding a new button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.18_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 18.18 – Adding a new button
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now add a **Vertical Spacing** constraint from the table view to the new **Create**
    button that you just added (you can hold *Ctrl* + drag from the table to the button).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want to add a variation to the button. We want the button to be installed
    only for Mac idioms. So, go ahead and add a variation for Mac and uncheck the
    default one (as we did previously in this chapter for `UIPickerView`). By doing
    this, the button will only be visible on Mac devices:![Figure 18.19 – Installing
    the new button only in Mac
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.19_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 18.19 – Installing the new button only in Mac
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you did it properly, the button should disappear in the storyboard if you
    are using an iPad as the preview device. You can change the device to **Mac**
    with **Mac Idiom** (*not Mac with iPad Idiom!*) and it will be shown again (you
    can do this in the bottom options of the storyboard window):![Figure 18.20 – Device
    preview selection
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.20_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 18.20 – Device preview selection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, we need to again edit the constraint of item number 2 of this list.
    You added a `-60` constant to it. Now we want to put it back to `0`, as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now go ahead and execute the app on an iPad target. You should still see the
    **+** symbol in the top-right corner and not see the new **Create** button at
    the bottom. Execute it now on a Mac target. You should get the following error
    on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is because we added two different constraints that are not able to co-exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`9`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In fact, we need both constants, but one is for iPad devices and the other
    only applies to Mac. Go ahead and change the priority of one of them to `250`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.21 – Changing the constraint priority'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.21_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.21 – Changing the constraint priority
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, we can keep both constraints, but they will not be exclusive to
    each other. When the Mac button is not installed, that constraint will not take
    effect and the other one will apply (attaching the table view bottom to the bottom
    of the safe area). Go ahead and execute the app using a Mac target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.22 – Mac app final version'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.22_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.22 – Mac app final version
  prefs: []
  type: TYPE_NORMAL
- en: 'That looks great! Now we have two different variations of the UI, one for iPad
    and another one more adapted to Mac standards. Compare it now with the previous
    iPad-looking version for Mac that **Scale Interface to Match iPad** provided us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.23 – Initial scaled version for Mac'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.23_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.23 – Initial scaled version for Mac
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it is quite different! The new version feels more Mac-native.
    The buttons, toolbar, controls placement, and overall scale of the elements feel
    much better for the Mac version. It requires a bit more work, but the results
    are worth the effort. You can always do an initial port of your iPad app to Mac
    with **Scale Interface to Match iPad**, and then work on **Optimize Interface
    for Mac** later on!
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we started with a simple to-do iPad app. We used Mac Catalyst
    to port it to the Mac. First, we used the **Scale Interface to Match iPad** option,
    making the app available on Mac with one click. But then, we wanted to improve
    the UI to feel more aligned with the Mac standards, so we used the new **Optimize
    Interface for Mac** option. This option is not as straightforward as the scaling
    one, and we had to adapt certain sizes, remove some UI controls that are not available
    on the Mac, and create different variations specifically for the Mac. But the
    results are looking great!
  prefs: []
  type: TYPE_NORMAL
- en: Let's now wrap up the chapter with a summary.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started the chapter with a brief Mac Catalyst introduction. We explained
    how Apple has provided developers with an easy way to port iPad apps into Mac
    apps with Mac Catalyst, and all the benefits that this new feature provides.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we discussed the most recent improvements and changes on Mac Catalyst
    presented in 2020\. Among those new features, we mentioned the implications of
    **Optimize Interface for Mac**, and how it can enhance your iPad apps to become
    great Mac apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, and taking an iPad app as the starting point, we created the Mac version
    using both Mac Catalyst methods: **Scale Interface to Match iPad** and **Optimize
    Interface for Mac**. We showcased their pros and cons, and we applied the most
    common fixes and improvements that you will find yourself using with these two
    methods. By comparing them with the same app, you have got an understanding of
    the main differences between them and when to apply one or the other.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how and when to test your code.
  prefs: []
  type: TYPE_NORMAL
