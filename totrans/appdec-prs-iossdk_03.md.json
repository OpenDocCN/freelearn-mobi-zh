["```swift\n       // Create/Save course data  \nPFObject *myCourse = [PFObject objectWithClassName:@\"Course\"];\n[myCourse setObject:@\"MBA\" forKey:@\"courseName\"];\n[myCourse setObject:@\"2 years\" forKey:@\"courseDuration\"];\n[myCourse saveInBackground];\n```", "```swift\nCourse *courseObject = [Course object];\ncourseObject.courseName = @\"MBA\";\ncourseObject.courseDuration = @\"2 years\";\n[courseObject saveInBackground];\n```", "```swift\n    // Course.h\n    @interface Course : PFObject<PFSubclassing>\n    + (NSString *)parseClassName;\n    @end\n\n    // Course.m\n    // Import this header to let your Course class know that PFObject privately \n    // provides most of the methods for PFSubclassing.\n    #import <Parse/PFObject+Subclass.h>\n\n    @implementation  Course\n    + (NSString *)parseClassName {\n      return @\"Course\";\n    }\n    @end\n\n    // AppDelegate.m \n    #import <Parse/Parse.h>\n    #import \"Course.h\"\n\n    - (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n      [Course registerSubclass];\n      [Parse setApplicationId:parseAppId clientKey:parseClientKey];\n    }\n    ```", "```swift\n// Course.h\n@interface Course : PFObject<PFSubclassing>\n+ (NSString *)parseClassName;\n@property (nonatomic, strong) NSString *courseName;\n@property (nonatomic, strong) NSString *courseDuration;\n@end\n\n// Course.m\n@dynamic courseName;\n@dynamic courseDuration;\n```", "```swift\n@property BOOL isGameOver;\n@property float amount;\n```", "```swift\nPFObject *parseObject = [PFObject objectWithoutDataWithClassName:@\"Course\" objectId:courseObject.objectId];\n```", "```swift\nPFQuery *query = [Course query];\n[query whereKey:@\"courseName\" isEqualTo:PFUser.currentUser.courseName];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n   Course *firstCourse = [objects objectAtIndex:0];\n    // Your code here\n  }\n}];\n```", "```swift\nNSData *data = [@\"Hello world!\" dataUsingEncoding:NSUTF8StringEncoding];\nPFFile *exampleFile = [PFFile fileWithName:@\"brochure.txt\" data:data];\n```", "```swift\n[file saveInBackground];\n```", "```swift\nPFObject *parseObject = [PFObject objectWithClassName:@\"Course\"]\n[parseObject setObject:@\"MBA\" forKey:@\"courseName\"];\n[parseObject setObject:exampleFile forKey:@\"brochure\"];\n[parseObject saveInBackground];\n```", "```swift\nPFFile *fetchObj = [parseObject objectForKey:@\"brochure\"];\nNSData *resumeData = [fetchObj getData];\n```", "```swift\nUIImage *imageObj = [UIImage imageNamed:@\"picture.png\"];\nNSData *imageData = UIImagePNGRepresentation(imageObj);\nPFFile *imageFile = [PFFile fileWithName:@\"picture.png\" data:imageData];\n[imageFile save];\n\nPFObject *userPhoto = [PFObject objectWithClassName:@\"UserPhoto\"];\n[userPhoto setObject:@\"Test Image\" forKey:@\"imageName\"];\n[userPhoto setObject:imageFile forKey:@\"imageFile\"];\n[userPhoto save];\n```", "```swift\n    saveInBackgroundWithBlock:progressBlock\n    ```", "```swift\n    getDataInBackgroundWithBlock:progressBlock\n    ```", "```swift\nNSData *data = [@\"Progress tracking of files is Easy!\" dataUsingEncoding:NSUTF8StringEncoding];\nPFFile *file = [PFFile fileWithName:@\"brochure.txt\" data:data];\n[file saveInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {\n  // Handle success or failure here ...\n} progressBlock:^(int percentDone) {\n  // Update your progress spinner here. percentDone will be between 0 and 100.\n}];\n```"]