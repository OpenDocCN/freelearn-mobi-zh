- en: Chapter 3. Writing your First App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic document class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing screen idle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling multitasking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exiting gracefully from an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking classes to movie-clip symbols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an update loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including an application launch image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the application descriptor file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be comfortable compiling and deploying native iOS apps from Flash
    Professional. In this chapter, we will continue where we left off, building on
    top of our FLA to create our first iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: Although there are differences compared to targeting desktop computers, the
    process for writing iOS applications in Flash will feel familiar to any Flash
    developer. Along the way, a few best practices will be covered and you will have
    a first-hand experience of just how easy it is to write a simple application using
    some basic ActionScript. We will also apply the finishing touches to the app by
    adding a default launch image and icon artwork.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic document class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although you can write ActionScript 3.0 code directly onto the timeline, it
    isn't a recommended practice. Instead you really should apply a more object-oriented
    approach and develop your own custom classes. This is of particular importance
    on large-scale projects.
  prefs: []
  type: TYPE_NORMAL
- en: Most ActionScript developers should already be comfortable creating classes
    but we will cover the steps here for the avoidance of doubt. Specifically, this
    recipe will have you create a basic document class that can be applied to the
    example app you started in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be working from the latest version of `bubbles.fla` from [Chapter 2](ch02.html
    "Chapter 2. Building iOS Apps Using Flash"). Alternatively, you can open `chapter3\recipe1\bubbles.fla`
    from the book's accompanying code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the steps to create a document class:'
  prefs: []
  type: TYPE_NORMAL
- en: First ensure that no instances on your stage are currently selected. Then, from
    the **PUBLISH** section within the **Properties** panel, click on the pencil icon
    next to the **Class** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Create ActionScript 3.0 Class** dialog box will appear.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Within the dialog box you may be asked which application should be used to create
    the ActionScript 3.0 class. If prompted, select the **Flash Professional** radio
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Main** into the **Class name** field and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A skeleton class named Main will be created and shown within a new tab in the
    Flash IDE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the class by selecting **File** | **Save As** *(Ctrl + Shift* + *S* | *Shift*
    + *Cmd* + *S)* from Flash's drop-down menu. When prompted, name the file `Main.as`
    and save it within the same folder as `bubbles.fla`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move back to `bubbles.fla` by clicking on its tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Every class you create or open will be shown as a tab along with any currently
    open FLA files. You can find these tabs directly below Flash Professional's drop-down
    menus.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You now have a document class associated with your FLA.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that there are no compiler errors by testing your FLA using ADL. You
    can do this by selecting **Control** | **Test Movie** | **in AIR Debug Launcher
    (Mobile)** from Flash's drop-down menu. Alternatively, if you have previously
    tested from ADL (Mobile), then simply press *Ctrl* + *Enter* *(Cmd + Enter* on
    Mac).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The document class provides your application with a main entry point. Any code
    you add to the class' constructor will be executed when your app is launched,
    giving you an ideal location to perform initialization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the constructor currently looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the constructor is empty but that will change during the remainder
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are a few more points regarding class creation.
  prefs: []
  type: TYPE_NORMAL
- en: Naming the document class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name of the document class is not significant. You can choose any valid
    name for the class; however, in this book, we will stick with the convention of
    naming the document class `Main` for each new app.
  prefs: []
  type: TYPE_NORMAL
- en: Using packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Given the simplicity of this chapter's example, it will suffice to add all the
    code to the same folder as `bubbles.fla`. Of course, for more complex projects
    you are likely to package your classes into individual sub-folders preventing
    namespace collisions with classes written by third parties.
  prefs: []
  type: TYPE_NORMAL
- en: Editing with Flash Builder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some developers find Flash Professional's code management and editing features
    too limited. Adobe has addressed this by integrating Flash Professional with Flash
    Builder.
  prefs: []
  type: TYPE_NORMAL
- en: '**Flash Builder** is a powerful coding environment that offers features over
    and above those provided by Flash Professional. It is now possible to edit and
    compile your AIR for iOS projects from Flash Builder.'
  prefs: []
  type: TYPE_NORMAL
- en: When you create classes within Flash Professional, you will be given the option
    to select whether to edit that class directly from within Flash Professional,
    or to open and use Flash Builder for your code editing.
  prefs: []
  type: TYPE_NORMAL
- en: This book won't cover Flash Builder but you can purchase it or download a trial
    version from the Adobe site at [www.adobe.com/downloads](http://www.adobe.com/downloads).
  prefs: []
  type: TYPE_NORMAL
- en: While you can use other third-party IDEs, such as Flash Develop and FDT, to
    edit your ActionScript, they can't be launched directly from Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: Creating other ActionScript 3.0 classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other custom ActionScript 3.0 classes can be created from Flash Professional.
    However, these class files are created from Flash Professional's drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: Simply select **File** | **New** *(Ctrl + N* | *Cmd* + *N)* to open the **New
    Document** panel. From here, you can select the **ActionScript 3.0 Class** type
    and provide a name for the class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Linking classes to movie-clip symbols*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing screen idle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To conserve battery life, mobile devices lock the screen a short period after
    they are last touched. However, this can be inconvenient for applications where
    the user might not be expected to interact with the screen that often.
  prefs: []
  type: TYPE_NORMAL
- en: For applications where this is the case, screen locking can be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be adding code to the skeleton document class created in the previous
    recipe. If you haven't already done this, then complete the *Creating a basic
    document class* recipe before proceeding. Alternatively, using the book's accompanying
    code bundle, open `chapter3\recipe2\bubbles.fla` in Flash Professional and work
    from there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us write some ActionScript to disable screen locking:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the FLA's document class by selecting **File** | **Open** *(Ctrl + O* |
    *Cmd* + *O)* from Flash Professional's drop-down menu. From the file browser select
    **Main.as**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following two import statements to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both these classes are required in order to prevent your device from locking
    while the screen is idle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a member variable that will be used to store a `NativeApplication` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, obtain a `NativeApplication` reference and store it
    within your `application` member variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `application` variable, force the device''s screen to stay awake:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your class file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move to your FLA by clicking on its tab and open the AIR for iOS Settings panel
    by selecting **File** | **AIR for iOS Settings** from the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the settings panel, ensure the **General** tab is selected and update the
    **Version** field to **0.2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** and save your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, check your FLA for any compile-time errors by testing your movie using
    ADL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are satisfied that there are no errors, publish your app for iOS by
    selecting **File | Publish** *(Alt + Shift + F12 | Shift + Cmd + F12)* and deploy
    the resultant .ipa file to your device using iTunes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Launch the app. You should notice that the screen doesn't dim or lock during
    the application's lifetime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to increment the app's version number every time you wish to deploy
    a new build to your device. If you don't see any changes after launching your
    app, then it is likely to be a version issue.
  prefs: []
  type: TYPE_NORMAL
- en: For testing purposes, set the auto-lock time on your iOS device to the minimum
    duration. You can do this by selecting **Settings** | **General** | **Auto-Lock**
    on your iOS device. This will reduce the time you need to wait before confirming
    that the auto-lock has been disabled within your app.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `NativeApplication` class provides the `systemIdleMode` property that can
    be set to allow or prevent your device's screen from locking. From `NativeApplication`,
    you can also obtain application information, access application-wide functions,
    and capture application-level events.
  prefs: []
  type: TYPE_NORMAL
- en: In the code example, we set `systemIdleMode` to `SystemIdleMode.KEEP_AWAKE`,
    ensuring that the screen doesn't lock during the application's lifetime. Auto-locking
    can just as easily be re-enabled with `SystemIdleMode.NORMAL`.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent excessive battery usage, it is advisable to use `SystemIdleMode.KEEP_AWAKE`
    sparingly. You may want to consider only disabling auto-lock within your application
    at points where it is absolutely necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you may have noticed that an instance of `NativeApplication` wasn't explicitly
    created within your code. `NativeApplication` is a singleton object that is automatically
    created when your application is launched. Only one instance of it can exist,
    and is accessed using the class' static `nativeApplication` property.
  prefs: []
  type: TYPE_NORMAL
- en: Handling multitasking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multitasking is supported in iOS 4 or above. When the user exits from an app
    by pressing the device's home button, the app is moved into the background rather
    than being fully closed. This can also occur for a variety of other reasons, such
    as the user accepting an incoming call or the app itself launching another application.
  prefs: []
  type: TYPE_NORMAL
- en: When the user, or some other application, launches the app again, it can simply
    continue where it left off rather than being completely re-loaded. This also significantly
    reduces the start-up time when you return to the app.
  prefs: []
  type: TYPE_NORMAL
- en: Events are dispatched when your application is moved to the background, or resumed
    by the operating system. This recipe will explain how to listen for and capture
    these events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will expand the Bubbles app, providing our document class with methods that
    can handle the app being moved to the background and resumed.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe follows on from the work done in the *Preventing screen idle* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The AIR 2.0 SDK does not provide support for iOS multitasking. If you are using
    Flash Professional CS5, then skip this recipe and move to the *Exiting gracefully
    from an app* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make the following changes to your document class:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Main.as` within Flash Professional CS5.5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will require the use of the `Event` class. Add it to your list of import
    statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Within the constructor, listen for `NativeApplication` dispatching `Event.ACTIVATE`
    and `Event.DEACTIVATE:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a handler for each event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move back to your constructor and remove the following highlighted line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This line is no longer required as it is now performed by the `activate()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your class file and check for any compile-time errors by testing `bubbles.fla`
    using ADL *(Ctrl + Enter* | *Cmd* + *Enter)*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever your app is about to be moved to the background, the `NativeApplication`
    class dispatches `Event.DEACTIVATE`. Alternatively, `Event.ACTIVATE` is fired
    when iOS resumes your app or when it is launched. You can listen for and respond
    to these events in order to initialize your app, prepare it for being moved to
    the background, or re-activated again.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe's example, we have simply taken the opportunity to disable auto-lock
    when your app is launched or resumed, and enable auto-lock when your app is suspended.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may find the following additional information regarding iOS multitasking
    of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Background processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The majority of background apps on iOS actually get suspended. They are still
    in system memory but are effectively paused. This saves CPU resources and increases
    the device's battery life.
  prefs: []
  type: TYPE_NORMAL
- en: Certain types of apps, however, can continue to run in the background rather
    than being suspended. These apps are given limited CPU resources to perform a
    few specific tasks, such as playing audio or accessing location-based information.
  prefs: []
  type: TYPE_NORMAL
- en: In either case, AIR's `NativeApplication` class will dispatch `Event.DEACTIVATE`.
  prefs: []
  type: TYPE_NORMAL
- en: App closing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not assume your background app will remain in memory.
  prefs: []
  type: TYPE_NORMAL
- en: A user or the operating system itself may decide to close your application.
    If your app is closed by a user, then you may be given an opportunity to save
    its state and perform any final clean-up code.
  prefs: []
  type: TYPE_NORMAL
- en: Exiting gracefully from an app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pressing the home button on iOS 3 devices closes the current app and removes
    it from memory. Performing the same action on a device running iOS 4 or above
    places the app in a suspended or background state rather than closing it. However,
    a user can close and remove these apps from memory using the fast app switcher.
    Additionally, when system memory is low, iOS itself may decide to close suspended
    or background apps.
  prefs: []
  type: TYPE_NORMAL
- en: If the user decides to close your app then, just before it exits, you will be
    given an opportunity to perform any house keeping, such as saving state or freeing
    memory.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add some more code to the current version of your Bubbles app, allowing
    it to gracefully exit. Alternatively, from the book's accompanying code bundle,
    open `chapter3\recipe4\bubbles.fla` and work from there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us listen for and handle the Bubbles app being closed:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Main.as` within Flash Professional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will make use of the `Event` class. Ensure that it is added to your class''
    list of import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, listen for `Event.EXITING` being dispatched by the
    `NativeApplication` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event handler that will perform any required clean-up before your app
    exits:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are using Flash Professional CS5.5 and have completed the previous recipe—*Handling
    multitasking* —then add the following lines to your `exiting()` event handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your class file and check for any compile-time errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever your app is about to exit, the `NativeApplication` class dispatches
    the `EXITING` event. By responding to this event you can perform any necessary
    clean-up, such as saving state or freeing memory.
  prefs: []
  type: TYPE_NORMAL
- en: You may also notice within the `exiting()` method that we have taken the opportunity
    to re-enable auto-lock. Although iOS should actually enable auto-lock for you
    when your app exits, it is good practice to explicitly do this within your code.
  prefs: []
  type: TYPE_NORMAL
- en: It is also good practice to perform other forms of clean-up such as removing
    event listeners, which we have also done. It is important that event listeners
    are removed from objects as failing to do so is a common source of memory leaks.
    This applies throughout the lifetime of your application and not just when exiting.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally a little more detail regarding the exit sequence.
  prefs: []
  type: TYPE_NORMAL
- en: The app switcher
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On iOS 4 or above, you must explicitly kill an app using the fast app switcher.
    To access the app switcher, double-press on the home button. To kill an app, tap
    and hold its icon until the minus symbol appears at the icon's corner. Tap the
    minus symbol and the app will be removed from the background. This will force
    `Event.EXITING` to be dispatched from the app as it is being closed.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Along with saving the application's state, you should also perform any necessary
    clean-up in response to `Event.EXITING`. It is important that your app cleans
    up itself by completely freeing memory. You should dispose of any objects, remove
    any remaining event listeners you added, stop any timers and timeline animations
    that are still running, stop all sound from playing, cancel any network requests,
    and finally close any sockets, file streams, or database connections.
  prefs: []
  type: TYPE_NORMAL
- en: Script execution time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure that the code within your event handler executes as quickly as possible.
    If it takes more than a handful of seconds, then iOS may terminate your application
    prematurely. This could be particularly harmful, if it happens while you are still
    saving state information to the device.
  prefs: []
  type: TYPE_NORMAL
- en: To limit the chances of a timeout happening, minimize the amount of data you
    save during the exit process. You should also ensure you save data before performing
    any other clean-up tasks. This will increase the chances of your app's state being
    preserved when performing lengthy exit and clean-up operations.
  prefs: []
  type: TYPE_NORMAL
- en: Linking classes to movie-clip symbols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to add additional behavior to a movie-clip symbol by creating
    and linking a custom class to it. Typically the class will listen for, and respond
    to events dispatched by the movie clip. Of those available, `Event.ENTER_FRAME`
    is the most widely used, providing a means to programmatically update the movie-clip's
    appearance on every frame redrawn.
  prefs: []
  type: TYPE_NORMAL
- en: We will write a custom class that makes each of the bubbles from the latest
    version of our example app float upwards.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us write the custom class and link it to each of the bubbles:'
  prefs: []
  type: TYPE_NORMAL
- en: Within Flash Professional select **File** | **New** *(Ctrl + N* | *Cmd* + *N)*.
    From the **New Document** panel, create an **ActionScript 3.0 Class** and name
    it **Bubble**. A skeleton class will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class as `Bubble.as` in the same folder as `Main.as`. Move back to
    your FLA by clicking on its tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can link your `Bubble` class to each of the bubble movie-clip symbols
    within your library. Let us start with **Bubble Huge**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move to the LIBRARY, right-click on Bubble Huge, and select Properties.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check the **Export for ActionScript** checkbox from the **Advanced** section
    within the **Symbol Properties** dialog box. The **Class** field will contain
    the name of your symbol but with the spaces removed. Within the **Base Class**
    field, replace the existing text with **Bubble** as shown in the following screenshot:![How
    to do it...](img/1383_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OK** button near the top-right of the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on your preference settings within Flash Professional, a warning
    panel may appear containing the following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A definition for this class could not be found in the classpath, so one will
    be automatically generated in the SWF file upon export.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is expected. Although you have written code that represents the symbol's
    base class, you will rely on Flash to generate the code for the symbol's actual
    class. Click on the **OK** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Repeat this process linking the `Bubble` class to the following movie-clip
    symbols: **Bubble Large, Bubble Medium**, and **Bubble Small**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your FLA and test using ADL. The bubbles that were previously stationary
    within your app will now drift up the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The class' structure is fairly conventional. At its heart is an event handler
    that gets called every time `Event.ENTER_FRAME` is dispatched by the movie clip.
    Inside the handler is the logic that controls and updates the clip.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the class' `enterFrame()` handler is used to update the bubble's
    position on every frame redraw. If the bubble moves off the top of the screen,
    then it is randomly repositioned at the bottom, where it can start floating upwards
    again.
  prefs: []
  type: TYPE_NORMAL
- en: A private member variable named `_speed` has been used to define the number
    of pixels that the bubble is moved each time `Event.ENTER_FRAME` is dispatched.
    And although it hasn't yet been used, a public setter was also added to the class
    allowing the bubble's vertical speed to be changed using the `speed` property.
  prefs: []
  type: TYPE_NORMAL
- en: Although it won't be noticeable in your demo, excessive usage of the `ENTER_FRAME`
    event can actually degrade the performance of your iOS apps. We will address this
    in the next recipe and also tidy up the movement of the bubbles within the demo.
    At present, the sense of depth is lost due to the fact that the bubbles all travel
    at the same speed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed that your `Bubble` class actually extends `Sprite` rather
    than `MovieClip`. The following is the reason.
  prefs: []
  type: TYPE_NORMAL
- en: Extending sprite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the bubbles within the library are actually movie clips, the `Bubble`
    class inherits from `flash.display.Sprite` rather than `flash.display.MovieClip`.
  prefs: []
  type: TYPE_NORMAL
- en: It is perfectly acceptable to extend `MovieClip`, but considering that the bubble
    library symbols only use a single frame from their timeline, it is actually unnecessary.
    You are only required to extend `MovieClip` if you intend to navigate the clip's
    timeline; otherwise the functionality provided by `Sprite` will do and has less
    overhead.
  prefs: []
  type: TYPE_NORMAL
- en: Using an update loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Listening for events can be expensive. For a handler to receive an event, Flash
    must create an object in memory that represents that event. Repeatedly allocating
    memory can hurt the performance of your app, and this is especially true if you
    are listening for `Event.ENTER_FRAME` from a large number of display objects.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how to minimize the impact of handling multiple `ENTER_FRAME` events
    by making some adjustments to the architecture of your example app. We will also
    add some additional code to individually control the speed of each bubble, making
    the app a little more polished.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will be required to make code changes to both `Main.as` and `Bubble.as:`
  prefs: []
  type: TYPE_NORMAL
- en: First start by opening `Bubble.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the constructor, remove the highlighted line of code that listens for
    `Event.ENTER_FRAME:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `enterFrame()` method''s signature by renaming it to `update()`
    and removing its `Event` parameter. Also make it publicly accessible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the `Event` class import statement as it is no longer required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class and move to `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following two member variables to `Main.as:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the class'' constructor, populate both the `bubbles` and `speeds` arrays.
    The `bubbles` array will contain references to each of the bubble instances sitting
    on your FLA''s stage. The `speeds` array will contain a vertical speed to be used
    for each bubble instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now staying within the constructor, add some code to walk through the `bubbles`
    array, setting the vertical speed of each bubble using a value from the `speeds`
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding code snippet, note the use of the `speed` property that was
    added to the `Bubble` class in the preceding recipe, *Linking classes to movie-clip
    symbols*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Listen for the `ENTER_FRAME` event by placing the following statement at the
    end of the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the `exiting()` handler, add a line of code to remove the `Event.ENTER_FRAME`
    listener:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add to the class an event handler for `Event.ENTER_FRAME`, which calls
    each bubble instance''s `update()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test `bubbles.fla` using ADL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When publishing, you may receive a list of compiler errors similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**1120: Access of undefined property bubble1**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Typically this occurs when Flash has not been instructed to automatically declare
    member variables within your class for each display object instance on the stage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can rectify this from the **Advanced ActionScript 3.0 Settings** panel by
    checking on the **Automatically declare stage instances** checkbox.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The bubbles will now move in a much more convincing manner, with those closest
    travelling faster than those at a distance. More importantly, the application's
    architecture has been changed, removing the need to listen for and handle multiple
    `ENTER_FRAME` events per frame.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1383_03_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Update your app's version number to **0.3** from the **AIR for iOS Settings**
    panel and publish it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the resultant `.ipa` file to your device and test it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than having every bubble instance listen for and handle its own `ENTER_FRAME`
    event, we now have only one listener that makes `update()` calls to each of the
    bubbles.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially the `update()` method within the document class acts as a main loop
    for the application. Every object that needs to be updated has its own `update()`
    method that is called from the document class' main loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the main update loop again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `bubbles` array was used in this example as a convenient mechanism to reference
    each bubble instance that required updating. You can see it being used in the
    main loop.
  prefs: []
  type: TYPE_NORMAL
- en: The advantages of using a centralized update loop within your application cannot
    be over emphasized. The performance benefits may not be obvious in this chapter's
    example app, but for more complex projects, this technique will help when trying
    to achieve consistent and high frame rates, especially on older devices.
  prefs: []
  type: TYPE_NORMAL
- en: Including an application launch image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every iOS app can have a static launch image bundled with it. This will be shown
    to the user while the app loads.
  prefs: []
  type: TYPE_NORMAL
- en: Let us add a launch image to our example app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue from the *Using an update loop* recipe. If you haven't completed
    it, then you can work from `chapter3\recipe7\bubbles.fla` from the book's accompanying
    code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Using Windows Explorer or Finder, copy `chapter3\resources\Default.png` to the
    same folder as your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revisit the AIR for iOS Settings panel by selecting **File** | **AIR for iOS
    Settings** from Flash's drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it isn't already selected, click on the panel's **General** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the panel is the **Included files** list. Click on the **+**
    symbol above the list and select **Default.png** from your FLA's root folder.
    Click on **OK** to select the file. You should now see **Default.png** in the
    **Included files** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the app's **Version** field to **0.4**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on **OK** to close the **AIR for iOS Settings** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1383_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Publish and deploy the latest version of the app to your iOS device. As shown
    in the preceding screenshot, you should see the launch image while the app loads.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Default.png` file is a 24-bit 320x480 PNG image that matches the initial
    visual state of the Bubbles app. Additionally, text has been superimposed onto
    the image to inform the user that the app is loading. Once the app's binary has
    been completely loaded, iOS will remove it from view and run the application.
    The switch between the launch image and the first frame of your app will be seamless.
  prefs: []
  type: TYPE_NORMAL
- en: It is important that your file is named `Default.png`, with an uppercase `D`,
    as iOS will look for this exact filename when loading your app. If your image
    cannot be found or one wasn't included, then a black screen will be shown while
    the app loads.
  prefs: []
  type: TYPE_NORMAL
- en: You should also ensure that `Default.png` is copied to the same folder as your
    FLA.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a launch image to your app isn't difficult but there are additional options
    to consider when supporting multiple iOS devices, screen resolutions, and orientations.
  prefs: []
  type: TYPE_NORMAL
- en: Landscape orientation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For iPhone and iPod touch applications that have been designed for landscape,
    you still embed a 320x480 PNG, but ensure that the image is provided in that orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting the Retina display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For iOS devices with Retina display screens, you can bundle with your IPA an
    additional launch image that takes advantage of the higher resolution. Simply
    create a 640x960 PNG file and name it `Default@2x.png`. When loading on a device
    that supports the Retina display, `Default@2x.png` will be used as the launch
    image rather than `Default.png`.
  prefs: []
  type: TYPE_NORMAL
- en: iPad launch images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike the iPhone and iPod touch, an iOS app running on iPad can select from
    multiple launch images depending on its orientation. This is done by bundling
    a series of PNGs with the app, each with an orientation modifier string in the
    filename.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the user is holding the device in a portrait orientation when
    the app is launched, iOS will look for a PNG named `Default-Portrait.png`. When
    held in landscape, iOS will attempt to display `Default-Landscape.png`. The dimensions
    for `Default-Portrait.png` should be 768x1024, while `Default-Landscape.png` should
    be 1024x768.
  prefs: []
  type: TYPE_NORMAL
- en: It is even possible to specify an upside-down portrait version of the launch
    image by including a PNG named `Default-PortraitUpsideDown.png`. This will take
    precedence over `Default-Portrait.png` if both exist.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, additional control when the device is being held in a landscape orientation
    can be obtained by bundling images named `Default-LandscapeLeft.png` and `Default-LandscapeRight.png`.
    Both will take precedence over `Default-Landscape.png` if it too exists.
  prefs: []
  type: TYPE_NORMAL
- en: If no PNGs with an orientation modifier are found, then `Default.png` will be
    used.
  prefs: []
  type: TYPE_NORMAL
- en: Universal apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible to embed a range of launch images that cover the various screen
    resolutions and aspect ratios across all iOS device types. As an example, consider
    a universal app that can take advantage of the iPhone's standard and Retina screen
    resolutions, as well as both portrait and landscape orientations on iPad. Embedding
    images named `Default.png, Default@2x.png, Default-Portrait.png`, and `Default-Landscape.png`
    would cover this.
  prefs: []
  type: TYPE_NORMAL
- en: Using the status bar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you plan to include the status bar in your app, then there is no need to
    reduce the size of your launch image. The status bar consumes 20 vertical pixels
    (40 pixels on Retina display screens) and will simply be placed over the top of
    your image while your app loads. The status bar also consumes 20 vertical pixels
    on iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling other files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we bundled a launch image with our app by adding it to the AIR
    for iOS Settings panel's **Included files** list. From this panel, you can also
    include other files or folders that will be bundled with your app and can even
    be loaded at runtime using ActionScript. Like the launch image, other files and
    folders to be added must exist within your FLA's root folder.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Targeting a device, [Chapter 8](ch08.html "Chapter 8. Screen Resolution and
    Orientation Changes")*,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our app looks almost complete. The most obvious omission is the icon artwork,
    which we will now add.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Icons are added from the AIR for iOS Settings panel.
  prefs: []
  type: TYPE_NORMAL
- en: Move to the **AIR for iOS Settings** panel and click on the **Icons** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From here you can bundle various icons with your app. The icon types are listed
    at the top of the panel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the list, click on **icon 29x29**. The field directly below the icon list
    will be relabeled **29x29**. To the right of this field is a browse icon. Click
    on it as shown in the following screenshot. Browse to and select `chapter3\resources\icon29.png`.![How
    to do it...](img/1383_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A dialog box will appear containing the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The icon must be copied to a folder relative to the root content folder so
    that it can be published. Do you want to proceed?**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **OK** and a sub-folder named `AppIconsForPublish` will be created
    in the same location as your FLA. The icon you selected will be copied to this
    new location.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now select **icon 57x57** from the list and browse to `chapter3\resources\icon57.png`.
    Again you will be asked if you would like the icon copied to a folder relative
    to the root content folder. Click on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Work your way through the remaining icons on the list, adding the appropriate
    PNG from the `resources` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have added the icons, click on the panel's **General** tab and update
    the **Version** field to **0.5**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to exit the **AIR for iOS Settings** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish and deploy the latest version of the app to your device. Your app should
    now be represented by an icon in iTunes and on the device.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All icon artwork should be created and saved as 24-bit PNGs. Don't add a reflective
    shine, rounded corners, or drop shadow to your artwork as these will be applied
    by iOS. Also, considering the largest icon that you add is 512x512 pixels, it
    makes sense to design your original icon artwork at this size at least; you don't
    want to have to scale up a smaller version for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can actually include six icons with your app. Here is a description of
    each:'
  prefs: []
  type: TYPE_NORMAL
- en: 29x29—Spotlight search results icon for iPhone 3GS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 48x48—Spotlight search results icon for iPad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 57x57—Spotlight search results icon for iPhone 4/4S and home screen icon for
    iPhone 3GS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 72x72—Home screen icon for iPad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 114x114—Home screen icon for iPhone 4/4S
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 512x512—iTunes icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Flash Professional CS5 does not support the Retina display resolution and, therefore,
    does not permit the inclusion of a 114x114 icon for the iPhone 4/4S home screen.
    The 57x57 icon will be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: The iPhone 3GS icons will also work on a third-generation iPod touch, and the
    iPhone 4/4S icons will work on a fourth-generation iPod touch.
  prefs: []
  type: TYPE_NORMAL
- en: Although the Bubbles app only utilizes the standard resolution of 320x480, this
    doesn't prevent you from bundling alternative icons for higher resolution screens
    such as the iPhone 4/4S and iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the iTunes icon is for development purposes only. When submitting your
    final app to the App Store, you submit the 512x512 icon separately as a JPEG file.
    It isn't included in the final `.ipa` file. While you should ensure that the iTunes
    icon is recognizable as your application icon, it is perfectly acceptable to make
    it richer and more detailed in appearance. Additionally, visual effects, such
    as the reflective shine, are not added to this icon.
  prefs: []
  type: TYPE_NORMAL
- en: As for the design of your icon artwork, Apple's **iOS Human Interface Guidelines**
    stresses the importance of strong visual design in order to create an instantly
    recognizable icon. It is important that your icon somehow conveys your application's
    purpose. Also avoid using text and remember that your icon will be viewed at various
    sizes. It is advisable that you use a vector format when designing as this will
    allow the icon to scale without loss of fidelity before outputting each of the
    required bitmap versions.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the application descriptor file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Included with your FLA is the application descriptor file. It is an XML file
    that contains settings used when publishing AIR applications. This file also contains
    properties that describe your iOS application including those set within the AIR
    for iOS Settings panel. The application descriptor file can be edited to make
    changes that can't be directly set from within Flash Professional's various setting
    panels.
  prefs: []
  type: TYPE_NORMAL
- en: Let us alter the application descriptor file to remove the reflective shine
    that iOS applies to the Bubbles app's icons.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, work from your current version of the Bubbles app, or alternatively
    use the FLA provided with the accompanying code bundle at `chapter3\recipe9\bubbles.fla`.
  prefs: []
  type: TYPE_NORMAL
- en: Flash Professional writes to the application descriptor file when you make changes
    from the AIR for iOS Settings panel. If you have the AIR for iOS Settings panel
    open, then close it before attempting to edit the application descriptor file
    from an external text editor.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also open and edit the application descriptor file from within Flash,
    which is what we will do:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **File** | **Open** *(Ctrl + O* | *Cmd* + *O)* and select **bubbles-app.xml**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down the XML file until you find the following XML fragment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `CDATA` node is where you can add additional iOS settings information.
    Go ahead and add the following key-value pair to the XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move to your FLA and from the **AIR for iOS Settings** panel, update its **Version**
    field to **0.6**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the FLA and deploy the new `.ipa` file to your device. Your app's home
    screen icon should no longer have a reflective shine applied to it.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application descriptor file is named using the name of your output SWF and
    takes the following format:`<swf_name>-app.xml`. By default, the output SWF name
    is identical to your FLA's name.
  prefs: []
  type: TYPE_NORMAL
- en: All iOS specific settings can be found within the XML file's`<iPhone>` node.
    Within the`<iPhone>` node is the`<infoAdditions>` node where you can set any custom
    iOS settings by adding key-value pairs. These key-value pairs should be placed
    within a `CDATA` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the recipe, you added the following key-value pair in order to disable
    the icon''s reflective shine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You can just as easily re-enable the shine by changing the value to`<false/>`
    or simply removing the key-value pair completely. Before proceeding, change the
    value back and re-compile your app. Unless you have a very good reason, you really
    should keep the default reflective shine enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Although you apply these iOS specific settings to the application descriptor
    file, it is specific to AIR applications and isn't understood by iOS. Instead,
    when you publish your FLA, Flash generates and includes with your IPA a configuration
    file that can be understood by iOS. This is known as the **Information Property
    List** file, which by convention is named `Info.plist`, and contains many properties
    used to describe your app, including any custom properties you set.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information regarding the Information Property List and the
    properties that can be set by visiting Apple's iOS Developer Library at [http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html](http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have only used the application descriptor file to remove the icon's
    reflective shine, there are many more configuration options. Another option that
    is commonly used, and has been touched upon already within this and the previous
    chapter, is the status bar and its appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Status bar style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On iPhone and iPod touch, the appearance of the status bar can be changed;
    the status bar cannot be changed on iPad and is always black. Although you can
    specify whether or not the status bar should be shown within your app, Flash does
    not provide any options for controlling the appearance. If you decide to use the
    status bar, you can add the `UIStatusBarStyle` key to the application descriptor
    file in order to set one of the following three styles supported by iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UIStatusBarStyleDefault` —The default gray status bar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIStatusBarStyleBlackOpaque` —Opaque black status bar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIStatusBarStyleTranslucent` —Black status bar with 50% transparency'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To opt for the opaque black status bar, add the following key-value pair to
    the application descriptor file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Try both `UIStatusBarStyleBlackOpaque` and `UIStatusBarStyleTranslucent`. Your
    options are a little limited but they can come in handy for certain apps where
    the default status bar doesn't visually sit with the design. If you want to use
    the default status bar, then there is no need to explicitly add a key-value pair
    to the application descriptor file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Specifying a persistent Wi-Fi connection, [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Declaring device capabilities, [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging is a critical aspect of the development process. Flash Professional
    allows you to send debug information from the device directly to the Flash IDE
    for inspection.
  prefs: []
  type: TYPE_NORMAL
- en: With the example Bubbles app now complete, we will finish off this chapter by
    learning how to deploy a debug build and receive trace data from it using Flash
    Professional's remote debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be adding a line of ActionScript to the document class of the Bubbles
    app that you created throughout the course of this and the previous chapter. Alternatively,
    from the book's accompanying code bundle, open `chapter3\recipe10\bubbles.fla`
    within Flash Professional and work from there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The debug process is split into two main steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a debug build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to the Remote Debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us begin by creating a debug build that contains a single trace statement.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a debug build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already done so, open the document class by selecting **File**
    | **Open** *(Ctrl + O* | *Cmd* + *O)* from Flash Professional's drop-down menu.
    From the file browser, select `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a simple `trace()` statement at the beginning of the class'' constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and move back to your FLA by clicking on its tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**
    from the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the settings panel, ensure the **General** tab is selected and update the
    **Version** field to **0.7**. Now move to the **Deployment** tab and select **Quick
    publishing for device debugging** from the **iOS deployment type** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** and save your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now publish your FLA for iOS by selecting **File** | **Publish** (Alt + *Shift*
    + *F12* | *Shift* + *Cmd* + *F12)* and install the IPA on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to the Remote Debugger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before launching the app, you will need to carry out the following actions
    in order to receive debug information from it:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect your device to your Wi-Fi network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtain your development computer's IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Begin a Remote Debug session from the Flash IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let us walk through these steps in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Remote debugging takes place over Wi-Fi. Verify that your device is connected
    to the same network as your development computer by selecting **Settings** | **Wi-Fi**
    from the device's home screen. If it is not, then select the correct network from
    the **Choose a Network** section. This is shown in the screenshot on the following
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will also need to know the IP address of the computer you are running Flash
    Professional from. If you are using Microsoft Windows, then open a command prompt
    window and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Network configuration details will be output to the command window. Your computer''s
    IP address consists of four numbers separated by periods and can be found by looking
    for **IPv4 Address** among the output. The following is an example:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For those using Mac OS X, choose System Preferences from the Apple menu. In
    the System Preferences window, click on the Network icon from the Internet & Wireless
    section. Your IP address will be shown within the Network window, underneath the
    Status heading.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We are now ready to perform remote debugging.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First activate Flash''s remote debugger by selecting **Debug** | **Begin Remote
    Debug Session** | **ActionScript 3.0** from the drop-down menu. This will switch
    the IDE to its **DEBUG** workspace with the following message being sent to the
    **OUTPUT** window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Essentially the Flash IDE is now ready to receive debug information from your
    debug app and will wait for up to two minutes for the app to connect to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If it is not already available from the debug workspace, then open the **OUTPUT**
    window by selecting **Window** | **Output (F2)** from Flash's drop-down menu.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, move back to your device's home screen and launch the app.![Connecting
    to the Remote Debugger](img/1383_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app will attempt to automatically connect to the Flash IDE. However, if
    it fails, a **Flash Debugger** dialog box will appear, similar to the preceding
    screenshot, asking you to enter the IP address of the computer it should connect
    to. If prompted, enter your development computer's IP address and tap on **OK**
    to connect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Upon a successful connection, the name of the app''s `.swf` file will be sent
    to the Flash IDE''s **OUTPUT** window followed by any trace statements that are
    executed. For this recipe, the following will be output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the message from your constructor's `trace()` statement has
    been sent to the output window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, terminate the debug session by selecting **Debug** | **End Debug Session**
    *(Alt + F12)* from Flash Professional's drop-down menu. The Flash IDE will move
    back to the workspace you were using previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remote debugging is invaluable for identifying and fixing bugs and should be
    familiar to experienced Flash developers. Using the `trace()` statement, you can
    send information from your app to the Flash IDE's **OUTPUT** window.
  prefs: []
  type: TYPE_NORMAL
- en: When debugging, remember to select the **Quick publishing for device debugging**
    deployment type from the **AIR for iOS Settings** panel. It is also important
    that both your test device and development computer are connected to the same
    network. Although your device may be connected to your computer through its USB
    cable, remote debugging only works over Wi-Fi for AIR for iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe focused on the `trace()` statement, but remote debugging for iOS
    supports additional features including breakpoint control, stepping through code,
    and the monitoring of variables. These advanced debugging features are unfortunately
    out of the scope of this book. However, a comprehensive introduction to the ActionScript
    3.0 debugger is available from the Adobe Flash Developer Center at [www.adobe.com/devnet/flash/articles/as3_debugger.html](http://www.adobe.com/devnet/flash/articles/as3_debugger.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With any luck, your app will successfully connect to the remote debug session.
    However, if you are experiencing problems connecting then read on.
  prefs: []
  type: TYPE_NORMAL
- en: Remote connection attempts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A debug build of your app will attempt to connect, by default, to your development
    computer's IP address. If the connection attempt fails, then you will be asked
    to manually enter the correct IP address. Unfortunately, apps published using
    older versions of AIR can wait for up to one minute before giving up and prompting
    for an IP address, which is hardly ideal when rapidly deploying and testing new
    debug builds.
  prefs: []
  type: TYPE_NORMAL
- en: During this time, the screen will remain blank and your iOS device may eventually
    auto-lock if left untouched. If locked, you may miss the app's prompt for the
    correct IP address, which will lead to your debug session timing out.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent this from happening, consider increasing the auto-lock time on your
    iOS device by selecting **Settings** | **General** | **Auto-Lock** from the home
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Those using Flash Professional CS5.5 and the latest version of AIR are unlikely
    to experience such lengthy timeout periods.
  prefs: []
  type: TYPE_NORMAL
