- en: Chapter 3. Writing your First App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。编写您的第一个应用程序
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Creating a basic document class
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本文档类
- en: Preventing screen idle
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止屏幕空闲
- en: Handling multitasking
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理多任务
- en: Exiting gracefully from an app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优雅地退出应用程序
- en: Linking classes to movie-clip symbols
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类链接到电影剪辑符号
- en: Using an update loop
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用更新循环
- en: Including an application launch image
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含应用程序启动图像
- en: Including icons
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含图标
- en: Editing the application descriptor file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑应用程序描述文件
- en: Remote debugging
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程调试
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: You should now be comfortable compiling and deploying native iOS apps from Flash
    Professional. In this chapter, we will continue where we left off, building on
    top of our FLA to create our first iOS app.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该能够从 Flash Professional 编译和部署原生 iOS 应用程序。在本章中，我们将继续上一章的内容，基于我们的 FLA 创建我们的第一个
    iOS 应用程序。
- en: Although there are differences compared to targeting desktop computers, the
    process for writing iOS applications in Flash will feel familiar to any Flash
    developer. Along the way, a few best practices will be covered and you will have
    a first-hand experience of just how easy it is to write a simple application using
    some basic ActionScript. We will also apply the finishing touches to the app by
    adding a default launch image and icon artwork.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然与针对桌面计算机相比有一些差异，但使用 Flash 编写 iOS 应用程序的过程对任何 Flash 开发者来说都会感到熟悉。在这个过程中，我们将介绍一些最佳实践，并让您亲身体验使用一些基本的
    ActionScript 编写简单应用程序是多么容易。我们还将通过添加默认启动图像和图标图形来为应用程序添加最终修饰。
- en: Creating a basic document class
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本文档类
- en: Although you can write ActionScript 3.0 code directly onto the timeline, it
    isn't a recommended practice. Instead you really should apply a more object-oriented
    approach and develop your own custom classes. This is of particular importance
    on large-scale projects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以直接在时间轴上编写 ActionScript 3.0 代码，但这并不是推荐的做法。相反，您真的应该采用更面向对象的方法，并开发自己的自定义类。这在大型项目中尤为重要。
- en: Most ActionScript developers should already be comfortable creating classes
    but we will cover the steps here for the avoidance of doubt. Specifically, this
    recipe will have you create a basic document class that can be applied to the
    example app you started in the previous chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 ActionScript 开发者应该已经熟悉创建类，但我们将在这里介绍这些步骤以避免疑问。特别是，这个配方将指导您创建一个基本的文档类，该类可以应用于上一章中开始的示例应用程序。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be working from the latest version of `bubbles.fla` from [Chapter 2](ch02.html
    "Chapter 2. Building iOS Apps Using Flash"). Alternatively, you can open `chapter3\recipe1\bubbles.fla`
    from the book's accompanying code bundle.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `bubbles.fla` 的最新版本进行工作，该版本来自 [第 2 章](ch02.html "第 2 章。使用 Flash 构建 iOS
    应用程序")。或者，您也可以从书籍的配套代码包中打开 `chapter3\recipe1\bubbles.fla`。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow the steps to create a document class:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建文档类：
- en: First ensure that no instances on your stage are currently selected. Then, from
    the **PUBLISH** section within the **Properties** panel, click on the pencil icon
    next to the **Class** field.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，请确保您的舞台上的实例没有被选中。然后，从 **属性** 面板中的 **发布** 部分，点击 **类** 字段旁边的铅笔图标。
- en: The **Create ActionScript 3.0 Class** dialog box will appear.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将会显示 **创建 ActionScript 3.0 类** 对话框。
- en: Within the dialog box you may be asked which application should be used to create
    the ActionScript 3.0 class. If prompted, select the **Flash Professional** radio
    button.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框中，您可能被要求选择哪个应用程序用于创建 ActionScript 3.0 类。如果被提示，请选择 **Flash Professional**
    单选按钮。
- en: Enter **Main** into the **Class name** field and click on **OK**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **类名** 字段中输入 **Main** 并点击 **确定**。
- en: A skeleton class named Main will be created and shown within a new tab in the
    Flash IDE.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将创建一个名为 Main 的骨架类，并在 Flash IDE 的新标签中显示。
- en: Save the class by selecting **File** | **Save As** *(Ctrl + Shift* + *S* | *Shift*
    + *Cmd* + *S)* from Flash's drop-down menu. When prompted, name the file `Main.as`
    and save it within the same folder as `bubbles.fla`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从 Flash 的下拉菜单中选择 **文件** | **另存为** *(Ctrl + Shift* + *S* | *Shift* + *Cmd*
    + *S)* 来保存类。当提示时，将文件命名为 `Main.as` 并将其保存在与 `bubbles.fla` 相同的文件夹中。
- en: Move back to `bubbles.fla` by clicking on its tab.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击其标签返回到 `bubbles.fla`。
- en: Note
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Every class you create or open will be shown as a tab along with any currently
    open FLA files. You can find these tabs directly below Flash Professional's drop-down
    menus.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您创建或打开的每个类都将作为一个标签显示，与任何当前打开的 FLA 文件一起。您可以直接在 Flash Professional 的下拉菜单中找到这些标签。
- en: You now have a document class associated with your FLA.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您现在已经有一个与您的 FLA 相关的文档类。
- en: Ensure that there are no compiler errors by testing your FLA using ADL. You
    can do this by selecting **Control** | **Test Movie** | **in AIR Debug Launcher
    (Mobile)** from Flash's drop-down menu. Alternatively, if you have previously
    tested from ADL (Mobile), then simply press *Ctrl* + *Enter* *(Cmd + Enter* on
    Mac).
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用ADL测试您的FLA来确保没有编译错误。您可以通过从Flash的下拉菜单中选择**控制** | **测试影片** | **在AIR调试启动器（移动）**来完成此操作。或者，如果您之前已从ADL（移动）测试过，只需按*Ctrl*
    + *Enter* *(Mac上的Cmd + Enter)*即可。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The document class provides your application with a main entry point. Any code
    you add to the class' constructor will be executed when your app is launched,
    giving you an ideal location to perform initialization.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 文档类为您的应用程序提供了一个主要入口点。您添加到类构造函数中的任何代码在应用程序启动时都会执行，这为您提供了一个理想的位置来执行初始化。
- en: 'Here is how the constructor currently looks:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是构造函数当前的样子：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the constructor is empty but that will change during the remainder
    of this chapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，构造函数目前是空的，但在本章剩余部分将会发生变化。
- en: There's more...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The following are a few more points regarding class creation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于类创建的几个更多要点。
- en: Naming the document class
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名文档类
- en: The name of the document class is not significant. You can choose any valid
    name for the class; however, in this book, we will stick with the convention of
    naming the document class `Main` for each new app.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 文档类的名称并不重要。您可以为类选择任何有效的名称；然而，在本书中，我们将遵循为每个新应用程序命名文档类为`Main`的惯例。
- en: Using packages
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用包
- en: Given the simplicity of this chapter's example, it will suffice to add all the
    code to the same folder as `bubbles.fla`. Of course, for more complex projects
    you are likely to package your classes into individual sub-folders preventing
    namespace collisions with classes written by third parties.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章示例的简单性，将所有代码添加到与`bubbles.fla`相同的文件夹中就足够了。当然，对于更复杂的项目，您可能会将类打包到单独的子文件夹中，以防止与第三方编写的类发生命名空间冲突。
- en: Editing with Flash Builder
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Flash Builder进行编辑
- en: Some developers find Flash Professional's code management and editing features
    too limited. Adobe has addressed this by integrating Flash Professional with Flash
    Builder.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者认为Flash Professional的代码管理和编辑功能过于有限。Adobe通过将Flash Professional与Flash Builder集成来解决这个问题。
- en: '**Flash Builder** is a powerful coding environment that offers features over
    and above those provided by Flash Professional. It is now possible to edit and
    compile your AIR for iOS projects from Flash Builder.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flash Builder**是一个功能强大的编码环境，它提供的功能超过了Flash Professional所提供的。现在您可以从Flash Builder中编辑和编译您的iOS项目。'
- en: When you create classes within Flash Professional, you will be given the option
    to select whether to edit that class directly from within Flash Professional,
    or to open and use Flash Builder for your code editing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Flash Professional中创建类时，您将可以选择是否直接在Flash Professional中编辑该类，或者打开并使用Flash Builder进行代码编辑。
- en: This book won't cover Flash Builder but you can purchase it or download a trial
    version from the Adobe site at [www.adobe.com/downloads](http://www.adobe.com/downloads).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不会涵盖Flash Builder，但您可以从Adobe网站[www.adobe.com/downloads](http://www.adobe.com/downloads)购买或下载试用版。
- en: While you can use other third-party IDEs, such as Flash Develop and FDT, to
    edit your ActionScript, they can't be launched directly from Flash Professional.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以使用其他第三方IDE，如Flash Develop和FDT，来编辑您的ActionScript，但它们不能直接从Flash Professional启动。
- en: Creating other ActionScript 3.0 classes
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建其他ActionScript 3.0类
- en: Other custom ActionScript 3.0 classes can be created from Flash Professional.
    However, these class files are created from Flash Professional's drop-down menu.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从Flash Professional创建其他自定义ActionScript 3.0类。然而，这些类文件是从Flash Professional的下拉菜单创建的。
- en: Simply select **File** | **New** *(Ctrl + N* | *Cmd* + *N)* to open the **New
    Document** panel. From here, you can select the **ActionScript 3.0 Class** type
    and provide a name for the class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地选择**文件** | **新建** *(Ctrl + N* | *Cmd* + *N)*以打开**新建文档**面板。从这里，您可以选择**ActionScript
    3.0类**类型并为类提供名称。
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Linking classes to movie-clip symbols*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将类链接到电影剪辑符号*'
- en: Preventing screen idle
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止屏幕空闲
- en: To conserve battery life, mobile devices lock the screen a short period after
    they are last touched. However, this can be inconvenient for applications where
    the user might not be expected to interact with the screen that often.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省电池寿命，移动设备在最后一次触摸后不久会锁定屏幕。然而，对于用户可能不会经常与屏幕交互的应用程序来说，这可能是不方便的。
- en: For applications where this is the case, screen locking can be disabled.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况的应用，可以禁用屏幕锁定。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be adding code to the skeleton document class created in the previous
    recipe. If you haven't already done this, then complete the *Creating a basic
    document class* recipe before proceeding. Alternatively, using the book's accompanying
    code bundle, open `chapter3\recipe2\bubbles.fla` in Flash Professional and work
    from there.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在之前菜谱中创建的骨架文档类中添加代码。如果你还没有这样做，那么在继续之前，请完成*创建基本文档类*菜谱。或者，使用本书的配套代码包，在Flash
    Professional中打开`chapter3\recipe2\bubbles.fla`，并从那里开始工作。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let us write some ActionScript to disable screen locking:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些ActionScript来禁用屏幕锁定：
- en: Open the FLA's document class by selecting **File** | **Open** *(Ctrl + O* |
    *Cmd* + *O)* from Flash Professional's drop-down menu. From the file browser select
    **Main.as**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从Flash Professional的下拉菜单中选择**文件** | **打开** *(Ctrl + O* | *Cmd* + *O)* 来打开FLA文档类。从文件浏览器中选择**Main.as**。
- en: 'Add the following two import statements to your class:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下两个导入语句添加到你的类中：
- en: '[PRE1]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Both these classes are required in order to prevent your device from locking
    while the screen is idle.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了防止屏幕空闲时设备锁定，这两个类都是必需的。
- en: 'Create a member variable that will be used to store a `NativeApplication` object:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个成员变量，用于存储一个`NativeApplication`对象：
- en: '[PRE2]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Within the constructor, obtain a `NativeApplication` reference and store it
    within your `application` member variable:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，获取一个`NativeApplication`引用并将其存储在你的`application`成员变量中：
- en: '[PRE3]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using the `application` variable, force the device''s screen to stay awake:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`application`变量强制设备的屏幕保持唤醒状态：
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save your class file.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的类文件。
- en: Move to your FLA by clicking on its tab and open the AIR for iOS Settings panel
    by selecting **File** | **AIR for iOS Settings** from the drop-down menu.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击其选项卡来移动到你的FLA，并通过从下拉菜单中选择**文件** | **AIR for iOS设置**来打开AIR for iOS设置面板。
- en: From the settings panel, ensure the **General** tab is selected and update the
    **Version** field to **0.2**.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从设置面板中，确保已选择**常规**选项卡，并将**版本**字段更新为**0.2**。
- en: Click on **OK** and save your FLA.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**并保存你的FLA。
- en: Now, check your FLA for any compile-time errors by testing your movie using
    ADL.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过使用ADL测试你的电影来检查FLA中是否存在任何编译时错误。
- en: Once you are satisfied that there are no errors, publish your app for iOS by
    selecting **File | Publish** *(Alt + Shift + F12 | Shift + Cmd + F12)* and deploy
    the resultant .ipa file to your device using iTunes.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦你确认没有错误，通过选择**文件** | **发布** *(Alt + Shift + F12 | Shift + Cmd + F12)* 来发布你的iOS应用，并使用iTunes将生成的.ipa文件部署到你的设备上。
- en: Launch the app. You should notice that the screen doesn't dim or lock during
    the application's lifetime.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用。你应该注意到在应用的生命周期内，屏幕不会变暗或锁定。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will need to increment the app's version number every time you wish to deploy
    a new build to your device. If you don't see any changes after launching your
    app, then it is likely to be a version issue.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你想将新构建部署到设备时，都需要增加应用版本号。如果你启动应用后没有看到任何变化，那么很可能是版本问题。
- en: For testing purposes, set the auto-lock time on your iOS device to the minimum
    duration. You can do this by selecting **Settings** | **General** | **Auto-Lock**
    on your iOS device. This will reduce the time you need to wait before confirming
    that the auto-lock has been disabled within your app.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试目的，将你的iOS设备的自动锁定时间设置为最短持续时间。你可以通过在iOS设备上选择**设置** | **通用** | **自动锁定**来完成此操作。这将减少你等待确认在应用中禁用自动锁定所需的时间。
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The `NativeApplication` class provides the `systemIdleMode` property that can
    be set to allow or prevent your device's screen from locking. From `NativeApplication`,
    you can also obtain application information, access application-wide functions,
    and capture application-level events.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`NativeApplication`类提供了一个`systemIdleMode`属性，可以设置为允许或防止你的设备屏幕锁定。从`NativeApplication`，你还可以获取应用信息，访问应用级函数，并捕获应用级事件。'
- en: In the code example, we set `systemIdleMode` to `SystemIdleMode.KEEP_AWAKE`,
    ensuring that the screen doesn't lock during the application's lifetime. Auto-locking
    can just as easily be re-enabled with `SystemIdleMode.NORMAL`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码示例中，我们将`systemIdleMode`设置为`SystemIdleMode.KEEP_AWAKE`，确保在应用的生命周期内屏幕不会锁定。可以通过将`SystemIdleMode.NORMAL`重新启用来自动锁定。
- en: To prevent excessive battery usage, it is advisable to use `SystemIdleMode.KEEP_AWAKE`
    sparingly. You may want to consider only disabling auto-lock within your application
    at points where it is absolutely necessary.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止过度使用电池，建议谨慎使用`SystemIdleMode.KEEP_AWAKE`。你可能只想在绝对必要时禁用应用程序内的自动锁定。
- en: Also, you may have noticed that an instance of `NativeApplication` wasn't explicitly
    created within your code. `NativeApplication` is a singleton object that is automatically
    created when your application is launched. Only one instance of it can exist,
    and is accessed using the class' static `nativeApplication` property.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可能已经注意到你的代码中没有显式创建`NativeApplication`的实例。`NativeApplication`是一个单例对象，当你的应用程序启动时自动创建。只能存在一个实例，并且通过使用类的静态`nativeApplication`属性来访问。
- en: Handling multitasking
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理多任务
- en: Multitasking is supported in iOS 4 or above. When the user exits from an app
    by pressing the device's home button, the app is moved into the background rather
    than being fully closed. This can also occur for a variety of other reasons, such
    as the user accepting an incoming call or the app itself launching another application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 4或更高版本支持多任务处理。当用户通过按设备的主按钮退出应用程序时，应用程序会被移动到后台而不是完全关闭。这也可以由多种其他原因引起，例如用户接受来电或应用程序本身启动另一个应用程序。
- en: When the user, or some other application, launches the app again, it can simply
    continue where it left off rather than being completely re-loaded. This also significantly
    reduces the start-up time when you return to the app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户或其他应用程序再次启动应用程序时，它可以直接从上次离开的地方继续，而不是完全重新加载。这也显著减少了返回应用程序时的启动时间。
- en: Events are dispatched when your application is moved to the background, or resumed
    by the operating system. This recipe will explain how to listen for and capture
    these events.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用程序被移动到后台或由操作系统恢复时，会触发事件。本食谱将解释如何监听和捕获这些事件。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will expand the Bubbles app, providing our document class with methods that
    can handle the app being moved to the background and resumed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展Bubbles应用程序，为我们的文档类提供可以处理应用程序移动到后台和恢复的方法。
- en: This recipe follows on from the work done in the *Preventing screen idle* recipe.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱是在*防止屏幕闲置*食谱的基础上进行的。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The AIR 2.0 SDK does not provide support for iOS multitasking. If you are using
    Flash Professional CS5, then skip this recipe and move to the *Exiting gracefully
    from an app* recipe.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: AIR 2.0 SDK不提供对iOS多任务处理的支持。如果你使用的是Flash Professional CS5，则跳过此食谱，转到*优雅退出应用程序*食谱。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Make the following changes to your document class:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对你的文档类进行以下更改：
- en: Open `Main.as` within Flash Professional CS5.5.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Flash Professional CS5.5中打开`Main.as`。
- en: 'You will require the use of the `Event` class. Add it to your list of import
    statements:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将需要使用`Event`类。将其添加到你的导入语句列表中：
- en: '[PRE5]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Within the constructor, listen for `NativeApplication` dispatching `Event.ACTIVATE`
    and `Event.DEACTIVATE:`
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，监听`NativeApplication`触发`Event.ACTIVATE`和`Event.DEACTIVATE`：
- en: '[PRE6]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add a handler for each event:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个事件添加处理程序：
- en: '[PRE7]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Move back to your constructor and remove the following highlighted line:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到你的构造函数并删除以下突出显示的行：
- en: '[PRE8]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This line is no longer required as it is now performed by the `activate()` method.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这行代码不再需要，因为它现在由`activate()`方法执行。
- en: Save your class file and check for any compile-time errors by testing `bubbles.fla`
    using ADL *(Ctrl + Enter* | *Cmd* + *Enter)*.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的类文件，并通过使用ADL测试`bubbles.fla`来检查任何编译时错误（*Ctrl + Enter* | *Cmd* + *Enter*）。
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Whenever your app is about to be moved to the background, the `NativeApplication`
    class dispatches `Event.DEACTIVATE`. Alternatively, `Event.ACTIVATE` is fired
    when iOS resumes your app or when it is launched. You can listen for and respond
    to these events in order to initialize your app, prepare it for being moved to
    the background, or re-activated again.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用程序即将被移动到后台时，`NativeApplication`类会触发`Event.DEACTIVATE`事件。或者，当iOS恢复你的应用程序或它被启动时，会触发`Event.ACTIVATE`事件。你可以监听并响应这些事件，以便初始化你的应用程序，准备将其移动到后台，或再次激活。
- en: In this recipe's example, we have simply taken the opportunity to disable auto-lock
    when your app is launched or resumed, and enable auto-lock when your app is suspended.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱的示例中，我们只是利用了在应用程序启动或恢复时禁用自动锁定的机会，并在应用程序挂起时启用自动锁定。
- en: There's more...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: You may find the following additional information regarding iOS multitasking
    of interest.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对以下有关iOS多任务处理的信息感兴趣。
- en: Background processing
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后台处理
- en: The majority of background apps on iOS actually get suspended. They are still
    in system memory but are effectively paused. This saves CPU resources and increases
    the device's battery life.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 上的大多数后台应用程序实际上是被挂起的。它们仍然在系统内存中，但实际处于暂停状态。这节省了 CPU 资源并增加了设备的电池寿命。
- en: Certain types of apps, however, can continue to run in the background rather
    than being suspended. These apps are given limited CPU resources to perform a
    few specific tasks, such as playing audio or accessing location-based information.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，某些类型的应用程序可以在后台继续运行而不是被挂起。这些应用程序被分配有限的 CPU 资源来执行一些特定的任务，例如播放音频或访问基于位置的信息。
- en: In either case, AIR's `NativeApplication` class will dispatch `Event.DEACTIVATE`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，AIR 的 `NativeApplication` 类都会触发 `Event.DEACTIVATE` 事件。
- en: App closing
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序关闭
- en: Do not assume your background app will remain in memory.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 不要假设您的后台应用程序将保留在内存中。
- en: A user or the operating system itself may decide to close your application.
    If your app is closed by a user, then you may be given an opportunity to save
    its state and perform any final clean-up code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 用户或操作系统本身可能会决定关闭您的应用程序。如果您的应用程序被用户关闭，那么您可能会获得保存其状态和执行任何最终清理代码的机会。
- en: Exiting gracefully from an app
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从应用程序中优雅地退出
- en: Pressing the home button on iOS 3 devices closes the current app and removes
    it from memory. Performing the same action on a device running iOS 4 or above
    places the app in a suspended or background state rather than closing it. However,
    a user can close and remove these apps from memory using the fast app switcher.
    Additionally, when system memory is low, iOS itself may decide to close suspended
    or background apps.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS 3 设备上按下主页按钮将关闭当前应用程序并将其从内存中移除。在运行 iOS 4 或更高版本的设备上执行相同操作将应用程序置于挂起或后台状态，而不是关闭它。然而，用户可以使用快速应用程序切换器关闭并从内存中移除这些应用程序。此外，当系统内存不足时，iOS
    本身可能会决定关闭挂起或后台应用程序。
- en: If the user decides to close your app then, just before it exits, you will be
    given an opportunity to perform any house keeping, such as saving state or freeing
    memory.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户决定关闭您的应用程序，那么在它退出之前，您将有机会执行任何必要的维护操作，例如保存状态或释放内存。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will add some more code to the current version of your Bubbles app, allowing
    it to gracefully exit. Alternatively, from the book's accompanying code bundle,
    open `chapter3\recipe4\bubbles.fla` and work from there.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在您的 Bubbles 应用程序的当前版本中添加一些代码，使其能够优雅地退出。或者，从本书的配套代码包中打开 `chapter3\recipe4\bubbles.fla`
    并从那里开始工作。
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us listen for and handle the Bubbles app being closed:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们监听并处理 Bubbles 应用程序被关闭：
- en: Open `Main.as` within Flash Professional.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Flash Professional 中打开 `Main.as` 文件。
- en: 'We will make use of the `Event` class. Ensure that it is added to your class''
    list of import statements:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 `Event` 类。确保将其添加到您的类的导入语句列表中：
- en: '[PRE9]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Within the constructor, listen for `Event.EXITING` being dispatched by the
    `NativeApplication` object:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，监听 `NativeApplication` 对象触发的 `Event.EXITING` 事件：
- en: '[PRE10]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add an event handler that will perform any required clean-up before your app
    exits:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件处理器，在您的应用程序退出之前执行任何必要的清理操作：
- en: '[PRE11]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you are using Flash Professional CS5.5 and have completed the previous recipe—*Handling
    multitasking* —then add the following lines to your `exiting()` event handler:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在使用 Flash Professional CS5.5 并已完成之前的配方——*处理多任务*——那么请将以下行添加到您的 `exiting()`
    事件处理器中：
- en: '[PRE12]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save your class file and check for any compile-time errors.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的类文件并检查任何编译时错误。
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Whenever your app is about to exit, the `NativeApplication` class dispatches
    the `EXITING` event. By responding to this event you can perform any necessary
    clean-up, such as saving state or freeing memory.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您的应用程序即将退出时，`NativeApplication` 类会触发 `EXITING` 事件。通过响应此事件，您可以执行任何必要的清理操作，例如保存状态或释放内存。
- en: You may also notice within the `exiting()` method that we have taken the opportunity
    to re-enable auto-lock. Although iOS should actually enable auto-lock for you
    when your app exits, it is good practice to explicitly do this within your code.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可能注意到在 `exiting()` 方法中，我们已经利用机会重新启用自动锁定。尽管 iOS 应该在您的应用程序退出时为您启用自动锁定，但明确在代码中这样做是一种良好的实践。
- en: It is also good practice to perform other forms of clean-up such as removing
    event listeners, which we have also done. It is important that event listeners
    are removed from objects as failing to do so is a common source of memory leaks.
    This applies throughout the lifetime of your application and not just when exiting.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 进行其他形式的清理也是良好的实践，例如移除事件监听器，我们也已经这样做。从对象中移除事件监听器很重要，因为不这样做是内存泄漏的常见原因。这适用于应用程序的整个生命周期，而不仅仅是退出时。
- en: There's more...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Finally a little more detail regarding the exit sequence.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于退出序列的更多细节。
- en: The app switcher
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用切换器
- en: On iOS 4 or above, you must explicitly kill an app using the fast app switcher.
    To access the app switcher, double-press on the home button. To kill an app, tap
    and hold its icon until the minus symbol appears at the icon's corner. Tap the
    minus symbol and the app will be removed from the background. This will force
    `Event.EXITING` to be dispatched from the app as it is being closed.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS 4或更高版本上，你必须使用快速应用切换器显式地关闭一个应用。要访问应用切换器，双击主屏幕按钮。要关闭一个应用，点击并按住其图标，直到图标角落出现减号符号。点击减号符号，应用将从后台移除。这将强制`Event.EXITING`从应用中发出，当它正在关闭时。
- en: Cleaning up
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清理工作
- en: Along with saving the application's state, you should also perform any necessary
    clean-up in response to `Event.EXITING`. It is important that your app cleans
    up itself by completely freeing memory. You should dispose of any objects, remove
    any remaining event listeners you added, stop any timers and timeline animations
    that are still running, stop all sound from playing, cancel any network requests,
    and finally close any sockets, file streams, or database connections.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 除了保存应用程序的状态外，你还应该对`Event.EXITING`事件做出必要的清理响应。你的应用通过完全释放内存来自我清理是很重要的。你应该销毁任何对象，移除你添加的任何剩余的事件监听器，停止任何仍在运行的计时器和时间轴动画，停止所有正在播放的声音，取消任何网络请求，最后关闭任何套接字、文件流或数据库连接。
- en: Script execution time
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本执行时间
- en: Ensure that the code within your event handler executes as quickly as possible.
    If it takes more than a handful of seconds, then iOS may terminate your application
    prematurely. This could be particularly harmful, if it happens while you are still
    saving state information to the device.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的事件处理程序中的代码尽可能快地执行。如果它需要超过几秒钟，iOS可能会提前终止你的应用程序。如果在保存状态信息到设备的过程中发生这种情况，这可能会特别有害。
- en: To limit the chances of a timeout happening, minimize the amount of data you
    save during the exit process. You should also ensure you save data before performing
    any other clean-up tasks. This will increase the chances of your app's state being
    preserved when performing lengthy exit and clean-up operations.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大限度地减少超时的可能性，在退出过程中尽量减少保存的数据量。你还应该确保在执行任何其他清理任务之前保存数据。这将增加在执行长时间退出和清理操作时保存应用程序状态的可能性。
- en: Linking classes to movie-clip symbols
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将类链接到电影剪辑符号
- en: It is possible to add additional behavior to a movie-clip symbol by creating
    and linking a custom class to it. Typically the class will listen for, and respond
    to events dispatched by the movie clip. Of those available, `Event.ENTER_FRAME`
    is the most widely used, providing a means to programmatically update the movie-clip's
    appearance on every frame redrawn.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建和将自定义类链接到电影剪辑符号，可以给电影剪辑符号添加额外的行为。通常，该类会监听并响应由电影剪辑发出的事件。其中，`Event.ENTER_FRAME`是最广泛使用的，它提供了一种在每一帧重绘时程序化更新电影剪辑外观的方法。
- en: We will write a custom class that makes each of the bubbles from the latest
    version of our example app float upwards.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个自定义类，使我们的示例应用最新版本中的每个气泡向上浮动。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let us write the custom class and link it to each of the bubbles:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个自定义类并将其链接到每个气泡：
- en: Within Flash Professional select **File** | **New** *(Ctrl + N* | *Cmd* + *N)*.
    From the **New Document** panel, create an **ActionScript 3.0 Class** and name
    it **Bubble**. A skeleton class will be created.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Flash Professional中选择**文件** | **新建** *(Ctrl + N* | *Cmd* + *N)*。从**新建文档**面板中，创建一个**ActionScript
    3.0 类**并将其命名为**Bubble**。将创建一个骨架类。
- en: 'Add the following code to the class:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到类中：
- en: '[PRE13]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the class as `Bubble.as` in the same folder as `Main.as`. Move back to
    your FLA by clicking on its tab.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将类保存为与`Main.as`相同的文件夹中的`Bubble.as`。通过点击其标签返回到你的FLA。
- en: Now you can link your `Bubble` class to each of the bubble movie-clip symbols
    within your library. Let us start with **Bubble Huge**.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以将你的`Bubble`类链接到库中每个气泡电影剪辑符号。让我们从**Bubble Huge**开始。
- en: Move to the LIBRARY, right-click on Bubble Huge, and select Properties.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移动到 **LIBRARY**，右键单击 **Bubble Huge**，然后选择 **Properties**。
- en: Check the **Export for ActionScript** checkbox from the **Advanced** section
    within the **Symbol Properties** dialog box. The **Class** field will contain
    the name of your symbol but with the spaces removed. Within the **Base Class**
    field, replace the existing text with **Bubble** as shown in the following screenshot:![How
    to do it...](img/1383_03_01.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Symbol Properties** 对话框的 **Advanced** 部分中勾选 **Export for ActionScript**
    复选框。**Class** 字段将包含你的符号名称，但空格将被移除。在 **Base Class** 字段中，将现有文本替换为 **Bubble**，如以下截图所示：![如何操作...](img/1383_03_01.jpg)
- en: Click on the **OK** button near the top-right of the panel.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击面板右上角的 **OK** 按钮。
- en: 'Depending on your preference settings within Flash Professional, a warning
    panel may appear containing the following text:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据你在 Flash Professional 中的偏好设置，可能会出现一个包含以下文本的警告面板：
- en: '**A definition for this class could not be found in the classpath, so one will
    be automatically generated in the SWF file upon export.**'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**在类路径中找不到此类的定义，因此将在导出 SWF 文件时自动生成。**'
- en: This is expected. Although you have written code that represents the symbol's
    base class, you will rely on Flash to generate the code for the symbol's actual
    class. Click on the **OK** button.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是预期的。虽然你已经编写了代表符号基类的代码，但你将依赖 Flash 生成符号实际类的代码。点击 **OK** 按钮。
- en: 'Repeat this process linking the `Bubble` class to the following movie-clip
    symbols: **Bubble Large, Bubble Medium**, and **Bubble Small**.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此过程，将 `Bubble` 类链接到以下电影剪辑符号：**Bubble Large, Bubble Medium**, 和 **Bubble Small**。
- en: Save your FLA and test using ADL. The bubbles that were previously stationary
    within your app will now drift up the screen.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的 FLA 文件，并使用 ADL 进行测试。你应用中之前静止的气泡现在将向上漂浮屏幕。
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The class' structure is fairly conventional. At its heart is an event handler
    that gets called every time `Event.ENTER_FRAME` is dispatched by the movie clip.
    Inside the handler is the logic that controls and updates the clip.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 该类的结构相当传统。其核心是一个事件处理器，每当电影剪辑派发 `Event.ENTER_FRAME` 事件时都会被调用。在处理器内部是控制并更新剪辑的逻辑。
- en: In our case, the class' `enterFrame()` handler is used to update the bubble's
    position on every frame redraw. If the bubble moves off the top of the screen,
    then it is randomly repositioned at the bottom, where it can start floating upwards
    again.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这个例子中，类的 `enterFrame()` 处理器用于在每一帧重绘时更新气泡的位置。如果气泡移出屏幕顶部，那么它将被随机重新定位到屏幕底部，在那里它可以再次开始向上漂浮。
- en: A private member variable named `_speed` has been used to define the number
    of pixels that the bubble is moved each time `Event.ENTER_FRAME` is dispatched.
    And although it hasn't yet been used, a public setter was also added to the class
    allowing the bubble's vertical speed to be changed using the `speed` property.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名为 `_speed` 的私有成员变量来定义气泡每次在 `Event.ENTER_FRAME` 被派发时移动的像素数。尽管它尚未被使用，但类中添加了一个公共设置器，允许使用
    `speed` 属性更改气泡的垂直速度。
- en: Although it won't be noticeable in your demo, excessive usage of the `ENTER_FRAME`
    event can actually degrade the performance of your iOS apps. We will address this
    in the next recipe and also tidy up the movement of the bubbles within the demo.
    At present, the sense of depth is lost due to the fact that the bubbles all travel
    at the same speed.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在你的演示中不会很明显，但过度使用 `ENTER_FRAME` 事件实际上会降低你 iOS 应用的性能。我们将在下一个菜谱中解决这个问题，并整理演示中气泡的移动。目前，由于所有气泡都以相同的速度移动，深度感已经丢失。
- en: There's more...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You may have noticed that your `Bubble` class actually extends `Sprite` rather
    than `MovieClip`. The following is the reason.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，你的 `Bubble` 类实际上扩展了 `Sprite` 而不是 `MovieClip`。以下就是原因。
- en: Extending sprite
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展精灵
- en: Although the bubbles within the library are actually movie clips, the `Bubble`
    class inherits from `flash.display.Sprite` rather than `flash.display.MovieClip`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然库中的气泡实际上是电影剪辑，但 `Bubble` 类是从 `flash.display.Sprite` 继承，而不是从 `flash.display.MovieClip`
    继承。
- en: It is perfectly acceptable to extend `MovieClip`, but considering that the bubble
    library symbols only use a single frame from their timeline, it is actually unnecessary.
    You are only required to extend `MovieClip` if you intend to navigate the clip's
    timeline; otherwise the functionality provided by `Sprite` will do and has less
    overhead.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展 `MovieClip` 是完全可以接受的，但考虑到气泡库符号仅使用其时间轴上的单个帧，实际上是不必要的。只有当你打算导航剪辑的时间轴时，才需要扩展
    `MovieClip`；否则，`Sprite` 提供的功能就足够了，并且开销更小。
- en: Using an update loop
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用更新循环
- en: Listening for events can be expensive. For a handler to receive an event, Flash
    must create an object in memory that represents that event. Repeatedly allocating
    memory can hurt the performance of your app, and this is especially true if you
    are listening for `Event.ENTER_FRAME` from a large number of display objects.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 监听事件可能会很昂贵。为了处理程序能够接收一个事件，Flash 必须在内存中创建一个代表该事件的对象。重复分配内存可能会损害应用程序的性能，尤其是当你从大量显示对象中监听
    `Event.ENTER_FRAME` 时。
- en: Let us see how to minimize the impact of handling multiple `ENTER_FRAME` events
    by making some adjustments to the architecture of your example app. We will also
    add some additional code to individually control the speed of each bubble, making
    the app a little more polished.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过调整示例应用程序的架构来最小化处理多个 `ENTER_FRAME` 事件的影响。我们还将添加一些额外的代码来单独控制每个气泡的速度，使应用程序更加完善。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: You will be required to make code changes to both `Main.as` and `Bubble.as:`
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要修改 `Main.as` 和 `Bubble.as` 中的代码：
- en: First start by opening `Bubble.as`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先打开 `Bubble.as`。
- en: Within the constructor, remove the highlighted line of code that listens for
    `Event.ENTER_FRAME:`
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，删除监听 `Event.ENTER_FRAME:` 的突出显示代码行。
- en: '[PRE14]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Change the `enterFrame()` method''s signature by renaming it to `update()`
    and removing its `Event` parameter. Also make it publicly accessible:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将 `enterFrame()` 方法重命名为 `update()` 并删除其 `Event` 参数来更改 `enterFrame()` 方法的签名。同时使其公开访问：
- en: '[PRE15]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Remove the `Event` class import statement as it is no longer required:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除不再需要的 `Event` 类导入语句：
- en: '[PRE16]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the class and move to `Main.as`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存类并移动到 `Main.as`。
- en: Add the following two member variables to `Main.as:`
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下两个成员变量添加到 `Main.as` 中：
- en: '[PRE17]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Within the class'' constructor, populate both the `bubbles` and `speeds` arrays.
    The `bubbles` array will contain references to each of the bubble instances sitting
    on your FLA''s stage. The `speeds` array will contain a vertical speed to be used
    for each bubble instance:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类的构造函数中，填充 `bubbles` 和 `speeds` 数组。`bubbles` 数组将包含放置在 FLA 阶段上的每个气泡实例的引用。`speeds`
    数组将包含用于每个气泡实例的垂直速度：
- en: '[PRE18]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now staying within the constructor, add some code to walk through the `bubbles`
    array, setting the vertical speed of each bubble using a value from the `speeds`
    array:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在仍然在构造函数中，添加一些代码来遍历 `bubbles` 数组，使用 `speeds` 数组中的值设置每个气泡的垂直速度：
- en: '[PRE19]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the preceding code snippet, note the use of the `speed` property that was
    added to the `Bubble` class in the preceding recipe, *Linking classes to movie-clip
    symbols*.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，注意使用 `speed` 属性，该属性是在前面的配方中添加到 `Bubble` 类中的，*将类链接到电影剪辑符号*。
- en: 'Listen for the `ENTER_FRAME` event by placing the following statement at the
    end of the constructor:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在构造函数末尾放置以下语句来监听 `ENTER_FRAME` 事件：
- en: '[PRE20]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At the end of the `exiting()` handler, add a line of code to remove the `Event.ENTER_FRAME`
    listener:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `exiting()` 处理程序的末尾添加一行代码来删除 `Event.ENTER_FRAME` 监听器：
- en: '[PRE21]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, add to the class an event handler for `Event.ENTER_FRAME`, which calls
    each bubble instance''s `update()` method:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，向类添加一个 `Event.ENTER_FRAME` 事件处理程序，该处理程序调用每个气泡实例的 `update()` 方法：
- en: '[PRE22]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save the class.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存类。
- en: Test `bubbles.fla` using ADL.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 ADL 测试 `bubbles.fla`。
- en: Note
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'When publishing, you may receive a list of compiler errors similar to the following:'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在发布时，您可能会收到类似以下内容的编译错误列表：
- en: '**1120: Access of undefined property bubble1**.'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**1120: 访问未定义属性 bubble1**。'
- en: Typically this occurs when Flash has not been instructed to automatically declare
    member variables within your class for each display object instance on the stage.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常这发生在 Flash 没有被指示为每个显示对象实例在舞台中自动声明成员变量时。
- en: You can rectify this from the **Advanced ActionScript 3.0 Settings** panel by
    checking on the **Automatically declare stage instances** checkbox.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过勾选 **Advanced ActionScript 3.0 Settings** 面板中的 **Automatically declare
    stage instances** 复选框来纠正这一点。
- en: The bubbles will now move in a much more convincing manner, with those closest
    travelling faster than those at a distance. More importantly, the application's
    architecture has been changed, removing the need to listen for and handle multiple
    `ENTER_FRAME` events per frame.
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在气泡将以更令人信服的方式移动，最近的气泡比远处的气泡移动得更快。更重要的是，应用程序的架构已经改变，不再需要每帧都监听和处理多个 `ENTER_FRAME`
    事件。
- en: '![How to do it...](img/1383_03_02.jpg)'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1383_03_02.jpg)'
- en: Update your app's version number to **0.3** from the **AIR for iOS Settings**
    panel and publish it.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **AIR for iOS 设置** 面板更新应用程序的版本号到 **0.3** 并发布它。
- en: Deploy the resultant `.ipa` file to your device and test it.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的 `.ipa` 文件部署到您的设备并测试它。
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Rather than having every bubble instance listen for and handle its own `ENTER_FRAME`
    event, we now have only one listener that makes `update()` calls to each of the
    bubbles.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在只有一个监听器，它会对每个气泡调用 `update()` 调用，而不是让每个气泡实例都监听和处理自己的 `ENTER_FRAME` 事件。
- en: Essentially the `update()` method within the document class acts as a main loop
    for the application. Every object that needs to be updated has its own `update()`
    method that is called from the document class' main loop.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，文档类中的 `update()` 方法充当应用程序的主循环。每个需要更新的对象都有自己的 `update()` 方法，该方法由文档类的主循环调用。
- en: 'The following is the main update loop again:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下又是主要的更新循环：
- en: '[PRE23]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `bubbles` array was used in this example as a convenient mechanism to reference
    each bubble instance that required updating. You can see it being used in the
    main loop.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`bubbles` 数组被用作一个方便的机制来引用需要更新的每个气泡实例。您可以在主循环中看到它的使用。
- en: The advantages of using a centralized update loop within your application cannot
    be over emphasized. The performance benefits may not be obvious in this chapter's
    example app, but for more complex projects, this technique will help when trying
    to achieve consistent and high frame rates, especially on older devices.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序中使用集中式更新循环的优势不容忽视。在本章示例应用程序中，性能优势可能并不明显，但对于更复杂的项目，这项技术有助于在尝试实现一致且高帧率时发挥作用，尤其是在旧设备上。
- en: Including an application launch image
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含应用程序启动图像
- en: Every iOS app can have a static launch image bundled with it. This will be shown
    to the user while the app loads.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 每个iOS应用程序都可以捆绑一个静态启动图像。当应用程序加载时，这将被显示给用户。
- en: Let us add a launch image to our example app.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在示例应用程序中添加一个启动图像。
- en: How to do it...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will continue from the *Using an update loop* recipe. If you haven't completed
    it, then you can work from `chapter3\recipe7\bubbles.fla` from the book's accompanying
    code bundle.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续从 **使用更新循环** 的配方开始。如果您还没有完成它，那么您可以从书籍附带代码包中的 `chapter3\recipe7\bubbles.fla`
    开始工作。
- en: Using Windows Explorer or Finder, copy `chapter3\resources\Default.png` to the
    same folder as your FLA.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Windows 资源管理器或 Finder，将 `chapter3\resources\Default.png` 复制到与您的 FLA 相同的文件夹中。
- en: Revisit the AIR for iOS Settings panel by selecting **File** | **AIR for iOS
    Settings** from Flash's drop-down menu.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从 Flash 的下拉菜单中选择 **文件** | **AIR for iOS 设置** 来重新访问 **AIR for iOS 设置** 面板。
- en: If it isn't already selected, click on the panel's **General** tab.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它还没有被选中，请点击面板的 **常规** 选项卡。
- en: At the bottom of the panel is the **Included files** list. Click on the **+**
    symbol above the list and select **Default.png** from your FLA's root folder.
    Click on **OK** to select the file. You should now see **Default.png** in the
    **Included files** list.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在面板底部是 **包含的文件** 列表。点击列表上方的 **+** 符号，然后从您的 FLA 根目录中选择 **Default.png**。点击 **确定**
    以选择文件。现在您应该在 **包含的文件** 列表中看到 **Default.png**。
- en: Change the app's **Version** field to **0.4**.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序的 **版本** 字段更改为 **0.4**。
- en: Now click on **OK** to close the **AIR for iOS Settings** panel.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **确定** 以关闭 **AIR for iOS 设置** 面板。
- en: Save the FLA.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 FLA。
- en: '![How to do it...](img/1383_03_03.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1383_03_03.jpg)'
- en: Publish and deploy the latest version of the app to your iOS device. As shown
    in the preceding screenshot, you should see the launch image while the app loads.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 发布并部署应用程序的最新版本到您的 iOS 设备。如图所示，当应用程序加载时，您应该看到启动图像。
- en: How it works...
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Default.png` file is a 24-bit 320x480 PNG image that matches the initial
    visual state of the Bubbles app. Additionally, text has been superimposed onto
    the image to inform the user that the app is loading. Once the app's binary has
    been completely loaded, iOS will remove it from view and run the application.
    The switch between the launch image and the first frame of your app will be seamless.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`Default.png` 文件是一个 24 位 320x480 的 PNG 图像，与 Bubbles 应用的初始视觉状态相匹配。此外，图像上还叠加了文本，以通知用户应用正在加载。一旦应用的二进制文件完全加载，iOS
    将将其从视图中移除并运行应用。启动图像与你的应用第一帧之间的切换将是无缝的。'
- en: It is important that your file is named `Default.png`, with an uppercase `D`,
    as iOS will look for this exact filename when loading your app. If your image
    cannot be found or one wasn't included, then a black screen will be shown while
    the app loads.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是你的文件应命名为 `Default.png`，其中 `D` 为大写，因为 iOS 在加载你的应用时会寻找这个确切的文件名。如果你的图像找不到或未包含，则在应用加载期间将显示一个黑色屏幕。
- en: You should also ensure that `Default.png` is copied to the same folder as your
    FLA.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该确保将 `Default.png` 复制到与你的 FLA 相同的文件夹中。
- en: There's more...
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Adding a launch image to your app isn't difficult but there are additional options
    to consider when supporting multiple iOS devices, screen resolutions, and orientations.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 将启动图像添加到你的应用中并不困难，但在支持多个 iOS 设备、屏幕分辨率和方向时，还有其他选项需要考虑。
- en: Landscape orientation
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 横屏方向
- en: For iPhone and iPod touch applications that have been designed for landscape,
    you still embed a 320x480 PNG, but ensure that the image is provided in that orientation.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于为横屏设计的 iPhone 和 iPod touch 应用，你仍然需要嵌入一个 320x480 的 PNG 图像，但确保图像以该方向提供。
- en: Supporting the Retina display
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持视网膜显示屏
- en: For iOS devices with Retina display screens, you can bundle with your IPA an
    additional launch image that takes advantage of the higher resolution. Simply
    create a 640x960 PNG file and name it `Default@2x.png`. When loading on a device
    that supports the Retina display, `Default@2x.png` will be used as the launch
    image rather than `Default.png`.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有视网膜显示屏的 iOS 设备，你可以将一个额外的启动图像捆绑到你的 IPA 中，该图像利用了更高的分辨率。只需创建一个 640x960 的 PNG
    文件，并将其命名为 `Default@2x.png`。当在支持视网膜显示屏的设备上加载时，将使用 `Default@2x.png` 作为启动图像，而不是 `Default.png`。
- en: iPad launch images
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iPad 应用启动图像
- en: Unlike the iPhone and iPod touch, an iOS app running on iPad can select from
    multiple launch images depending on its orientation. This is done by bundling
    a series of PNGs with the app, each with an orientation modifier string in the
    filename.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 与 iPhone 和 iPod touch 不同，在 iPad 上运行的 iOS 应用可以根据其方向选择多个启动图像。这是通过捆绑一系列 PNG 文件并带有方向修饰符字符串的文件名来实现的。
- en: For example, if the user is holding the device in a portrait orientation when
    the app is launched, iOS will look for a PNG named `Default-Portrait.png`. When
    held in landscape, iOS will attempt to display `Default-Landscape.png`. The dimensions
    for `Default-Portrait.png` should be 768x1024, while `Default-Landscape.png` should
    be 1024x768.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果用户在应用启动时手持设备为肖像方向，iOS 将寻找一个名为 `Default-Portrait.png` 的 PNG 文件。当手持设备为横屏时，iOS
    将尝试显示 `Default-Landscape.png`。`Default-Portrait.png` 的尺寸应为 768x1024，而 `Default-Landscape.png`
    应为 1024x768。
- en: It is even possible to specify an upside-down portrait version of the launch
    image by including a PNG named `Default-PortraitUpsideDown.png`. This will take
    precedence over `Default-Portrait.png` if both exist.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包含一个名为 `Default-PortraitUpsideDown.png` 的 PNG 文件，甚至可以指定一个颠倒的肖像版本的应用启动图像。如果同时存在
    `Default-Portrait.png`，则它将优先使用。
- en: Similarly, additional control when the device is being held in a landscape orientation
    can be obtained by bundling images named `Default-LandscapeLeft.png` and `Default-LandscapeRight.png`.
    Both will take precedence over `Default-Landscape.png` if it too exists.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，通过捆绑名为 `Default-LandscapeLeft.png` 和 `Default-LandscapeRight.png` 的图像，可以在设备手持横屏方向时获得额外的控制。如果也存在
    `Default-Landscape.png`，则这两个文件都将优先使用。
- en: If no PNGs with an orientation modifier are found, then `Default.png` will be
    used.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到具有方向修饰符的 PNG 文件，则将使用 `Default.png`。
- en: Universal apps
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用应用
- en: It is possible to embed a range of launch images that cover the various screen
    resolutions and aspect ratios across all iOS device types. As an example, consider
    a universal app that can take advantage of the iPhone's standard and Retina screen
    resolutions, as well as both portrait and landscape orientations on iPad. Embedding
    images named `Default.png, Default@2x.png, Default-Portrait.png`, and `Default-Landscape.png`
    would cover this.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 可以嵌入一系列启动图像，覆盖所有 iOS 设备类型的各种屏幕分辨率和纵横比。例如，考虑一个通用应用程序，它可以利用 iPhone 的标准屏幕分辨率和 Retina
    屏幕分辨率，以及 iPad 的纵向和横向方向。嵌入名为 `Default.png, Default@2x.png, Default-Portrait.png`
    和 `Default-Landscape.png` 的图像将覆盖这些。
- en: Using the status bar
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用状态栏
- en: If you plan to include the status bar in your app, then there is no need to
    reduce the size of your launch image. The status bar consumes 20 vertical pixels
    (40 pixels on Retina display screens) and will simply be placed over the top of
    your image while your app loads. The status bar also consumes 20 vertical pixels
    on iPad.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划在应用程序中包含状态栏，那么就没有必要减小启动图像的大小。状态栏消耗 20 个垂直像素（Retina 显示屏上的 40 个像素）并将简单地放置在图像顶部，当你的应用程序加载时。状态栏在
    iPad 上也消耗 20 个垂直像素。
- en: Bundling other files
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打包其他文件
- en: In this recipe, we bundled a launch image with our app by adding it to the AIR
    for iOS Settings panel's **Included files** list. From this panel, you can also
    include other files or folders that will be bundled with your app and can even
    be loaded at runtime using ActionScript. Like the launch image, other files and
    folders to be added must exist within your FLA's root folder.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们通过将其添加到 AIR for iOS 设置面板的**包含文件**列表中，将启动图像与我们的应用程序捆绑在一起。从这个面板中，你还可以包含其他文件或文件夹，这些文件或文件夹将与你的应用程序捆绑在一起，甚至可以在运行时使用
    ActionScript 加载。像启动图像一样，要添加的其他文件或文件夹必须存在于 FLA 的根文件夹中。
- en: See also
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Targeting a device, [Chapter 8](ch08.html "Chapter 8. Screen Resolution and
    Orientation Changes")*,'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*针对设备，[第 8 章](ch08.html "第 8 章。屏幕分辨率和方向变化")*，'
- en: Including icons
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含图标
- en: Our app looks almost complete. The most obvious omission is the icon artwork,
    which we will now add.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序几乎完成了。最明显的遗漏是图标作品，我们现在将添加。
- en: How to do it...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Icons are added from the AIR for iOS Settings panel.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图标是从 AIR for iOS 设置面板中添加的。
- en: Move to the **AIR for iOS Settings** panel and click on the **Icons** tab.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到**AIR for iOS 设置**面板，并点击**图标**选项卡。
- en: From here you can bundle various icons with your app. The icon types are listed
    at the top of the panel.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这里你可以将各种图标与你的应用程序捆绑在一起。图标类型列在面板顶部。
- en: From the list, click on **icon 29x29**. The field directly below the icon list
    will be relabeled **29x29**. To the right of this field is a browse icon. Click
    on it as shown in the following screenshot. Browse to and select `chapter3\resources\icon29.png`.![How
    to do it...](img/1383_03_04.jpg)
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中点击**图标 29x29**。图标列表下方直接的字段将被重新标记为**29x29**。在此字段右侧有一个浏览图标。点击它，如图下截图所示。浏览到并选择`chapter3\resources\icon29.png`。![如何操作...](img/1383_03_04.jpg)
- en: 'A dialog box will appear containing the following message:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个包含以下信息的对话框：
- en: '**The icon must be copied to a folder relative to the root content folder so
    that it can be published. Do you want to proceed?**'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图标必须复制到根内容文件夹的相对文件夹中，以便可以发布。你想继续吗？**'
- en: Click on **OK** and a sub-folder named `AppIconsForPublish` will be created
    in the same location as your FLA. The icon you selected will be copied to this
    new location.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**确定**，将在与 FLA 相同的位置创建一个名为 `AppIconsForPublish` 的子文件夹。你选择的图标将被复制到这个新位置。
- en: Now select **icon 57x57** from the list and browse to `chapter3\resources\icon57.png`.
    Again you will be asked if you would like the icon copied to a folder relative
    to the root content folder. Click on the **OK** button.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从列表中选择**图标 57x57**，并浏览到`chapter3\resources\icon57.png`。同样，你会被询问是否希望图标被复制到根内容文件夹的相对文件夹中。点击**确定**按钮。
- en: Work your way through the remaining icons on the list, adding the appropriate
    PNG from the `resources` folder.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐个处理列表中的剩余图标，从 `resources` 文件夹添加适当的 PNG 文件。
- en: Once you have added the icons, click on the panel's **General** tab and update
    the **Version** field to **0.5**.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦添加了图标，点击面板的**常规**选项卡，并将**版本**字段更新为**0.5**。
- en: Click on **OK** to exit the **AIR for iOS Settings** panel.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**以退出**AIR for iOS 设置**面板。
- en: Publish and deploy the latest version of the app to your device. Your app should
    now be represented by an icon in iTunes and on the device.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 发布并部署应用程序的最新版本到你的设备。现在你的应用程序应该由 iTunes 和设备上的图标表示。
- en: How it works...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: All icon artwork should be created and saved as 24-bit PNGs. Don't add a reflective
    shine, rounded corners, or drop shadow to your artwork as these will be applied
    by iOS. Also, considering the largest icon that you add is 512x512 pixels, it
    makes sense to design your original icon artwork at this size at least; you don't
    want to have to scale up a smaller version for this.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图标艺术作品都应创建并保存为24位PNG格式。不要在你的艺术作品中添加反射光泽、圆角或阴影，因为这些将由iOS应用。另外，考虑到你添加的最大图标是512x512像素，至少在这个尺寸设计你的原始图标艺术作品是有意义的；你不想需要放大一个较小的版本。
- en: 'You can actually include six icons with your app. Here is a description of
    each:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上可以在你的应用中包含六个图标。以下是每个图标的描述：
- en: 29x29—Spotlight search results icon for iPhone 3GS
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 29x29—iPhone 3GS的Spotlight搜索结果图标
- en: 48x48—Spotlight search results icon for iPad
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 48x48—iPad的Spotlight搜索结果图标
- en: 57x57—Spotlight search results icon for iPhone 4/4S and home screen icon for
    iPhone 3GS
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 57x57—iPhone 4/4S的Spotlight搜索结果图标和iPhone 3GS的主屏幕图标
- en: 72x72—Home screen icon for iPad
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 72x72—iPad的主屏幕图标
- en: 114x114—Home screen icon for iPhone 4/4S
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 114x114—iPhone 4/4S的主屏幕图标
- en: 512x512—iTunes icon
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 512x512—iTunes图标
- en: Note
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Flash Professional CS5 does not support the Retina display resolution and, therefore,
    does not permit the inclusion of a 114x114 icon for the iPhone 4/4S home screen.
    The 57x57 icon will be used instead.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Flash Professional CS5不支持Retina显示屏分辨率，因此不允许包含iPhone 4/4S主屏幕的114x114像素图标。将使用57x57像素的图标代替。
- en: The iPhone 3GS icons will also work on a third-generation iPod touch, and the
    iPhone 4/4S icons will work on a fourth-generation iPod touch.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: iPhone 3GS的图标也适用于第三代iPod touch，而iPhone 4/4S的图标适用于第四代iPod touch。
- en: Although the Bubbles app only utilizes the standard resolution of 320x480, this
    doesn't prevent you from bundling alternative icons for higher resolution screens
    such as the iPhone 4/4S and iPad.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Bubbles应用只使用了标准的320x480分辨率，但这并不会阻止你为更高分辨率的屏幕（如iPhone 4/4S和iPad）捆绑替代图标。
- en: Also, the iTunes icon is for development purposes only. When submitting your
    final app to the App Store, you submit the 512x512 icon separately as a JPEG file.
    It isn't included in the final `.ipa` file. While you should ensure that the iTunes
    icon is recognizable as your application icon, it is perfectly acceptable to make
    it richer and more detailed in appearance. Additionally, visual effects, such
    as the reflective shine, are not added to this icon.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，iTunes图标仅用于开发目的。当将你的最终应用提交到App Store时，你需要单独提交一个512x512像素的图标作为JPEG文件。它不包括在最终的`.ipa`文件中。虽然你应该确保iTunes图标可以被识别为你的应用程序图标，但使其外观更加丰富和详细是完全可接受的。此外，视觉效果，如反射光泽，不会添加到这个图标中。
- en: As for the design of your icon artwork, Apple's **iOS Human Interface Guidelines**
    stresses the importance of strong visual design in order to create an instantly
    recognizable icon. It is important that your icon somehow conveys your application's
    purpose. Also avoid using text and remember that your icon will be viewed at various
    sizes. It is advisable that you use a vector format when designing as this will
    allow the icon to scale without loss of fidelity before outputting each of the
    required bitmap versions.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 至于你的图标艺术作品的设计，苹果的**iOS人类界面指南**强调了在创建一个可以立即识别的图标时，强大视觉设计的重要性。你的图标必须以某种方式传达你的应用程序的目的。还请避免使用文本，并记住你的图标将在各种尺寸下被查看。在设计时使用矢量格式是明智的，因为这将在输出每个所需的位图版本之前允许图标进行缩放而不损失保真度。
- en: Editing the application descriptor file
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑应用程序描述文件
- en: Included with your FLA is the application descriptor file. It is an XML file
    that contains settings used when publishing AIR applications. This file also contains
    properties that describe your iOS application including those set within the AIR
    for iOS Settings panel. The application descriptor file can be edited to make
    changes that can't be directly set from within Flash Professional's various setting
    panels.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 与你的FLA一起提供的还有应用程序描述文件。这是一个XML文件，包含发布AIR应用程序时使用的设置。此文件还包含描述你的iOS应用程序的属性，包括在AIR
    for iOS设置面板中设置的属性。应用程序描述文件可以编辑，以进行无法直接从Flash Professional的各种设置面板中设置的更改。
- en: Let us alter the application descriptor file to remove the reflective shine
    that iOS applies to the Bubbles app's icons.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改应用程序描述文件，以移除iOS应用于Bubbles应用图标的反射光泽。
- en: Getting ready
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: For this recipe, work from your current version of the Bubbles app, or alternatively
    use the FLA provided with the accompanying code bundle at `chapter3\recipe9\bubbles.fla`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，从您当前的 Bubbles 应用版本开始工作，或者使用随附代码包中提供的 FLA，位于 `chapter3\recipe9\bubbles.fla`。
- en: Flash Professional writes to the application descriptor file when you make changes
    from the AIR for iOS Settings panel. If you have the AIR for iOS Settings panel
    open, then close it before attempting to edit the application descriptor file
    from an external text editor.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从 AIR for iOS 设置面板进行更改时，Flash Professional 会写入应用描述符文件。如果您打开了 AIR for iOS 设置面板，请在尝试从外部文本编辑器编辑应用描述符文件之前关闭它。
- en: How to do it...
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'You can also open and edit the application descriptor file from within Flash,
    which is what we will do:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 Flash 中打开并编辑应用描述符文件，这正是我们将要做的：
- en: Select **File** | **Open** *(Ctrl + O* | *Cmd* + *O)* and select **bubbles-app.xml**.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **文件** | **打开** *(Ctrl + O* | *Cmd* + *O)* 并选择 **bubbles-app.xml**。
- en: 'Scroll down the XML file until you find the following XML fragment:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 XML 文件向下滚动，直到找到以下 XML 片段：
- en: '[PRE24]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `CDATA` node is where you can add additional iOS settings information.
    Go ahead and add the following key-value pair to the XML:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CDATA` 节点是您可以添加额外的 iOS 设置信息的地方。请继续在 XML 中添加以下键值对：'
- en: '[PRE25]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Save the file.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Move to your FLA and from the **AIR for iOS Settings** panel, update its **Version**
    field to **0.6**.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到您的 FLA，并从 **AIR for iOS 设置** 面板更新其 **版本** 字段为 **0.6**。
- en: Publish the FLA and deploy the new `.ipa` file to your device. Your app's home
    screen icon should no longer have a reflective shine applied to it.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 发布 FLA 并将新的 `.ipa` 文件部署到您的设备上。您的应用主屏幕图标不再应用反射光泽。
- en: How it works...
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The application descriptor file is named using the name of your output SWF and
    takes the following format:`<swf_name>-app.xml`. By default, the output SWF name
    is identical to your FLA's name.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 应用描述符文件使用输出 SWF 的名称命名，并采用以下格式：`<swf_name>-app.xml`。默认情况下，输出 SWF 名称与 FLA 的名称相同。
- en: All iOS specific settings can be found within the XML file's`<iPhone>` node.
    Within the`<iPhone>` node is the`<infoAdditions>` node where you can set any custom
    iOS settings by adding key-value pairs. These key-value pairs should be placed
    within a `CDATA` tag.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 iOS 特定设置都可以在 XML 文件的 `<iPhone>` 节点中找到。在 `<iPhone>` 节点中是 `<infoAdditions>`
    节，您可以通过添加键值对来设置任何自定义 iOS 设置。这些键值对应放置在 `CDATA` 标签内。
- en: 'During the recipe, you added the following key-value pair in order to disable
    the icon''s reflective shine:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在配方过程中，您添加了以下键值对以禁用图标的反射光泽：
- en: '[PRE26]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can just as easily re-enable the shine by changing the value to`<false/>`
    or simply removing the key-value pair completely. Before proceeding, change the
    value back and re-compile your app. Unless you have a very good reason, you really
    should keep the default reflective shine enabled.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过将值更改为 `<false/>` 或简单地完全删除键值对来重新启用光泽。在继续之前，请将值改回并重新编译您的应用。除非您有很好的理由，否则您真的应该保持默认的反射光泽启用。
- en: Although you apply these iOS specific settings to the application descriptor
    file, it is specific to AIR applications and isn't understood by iOS. Instead,
    when you publish your FLA, Flash generates and includes with your IPA a configuration
    file that can be understood by iOS. This is known as the **Information Property
    List** file, which by convention is named `Info.plist`, and contains many properties
    used to describe your app, including any custom properties you set.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您将这些 iOS 特定设置应用到应用描述符文件中，但它仅针对 AIR 应用程序，并且不被 iOS 所理解。相反，当您发布 FLA 时，Flash 会生成一个配置文件并将其包含在您的
    IPA 中，iOS 可以理解这个配置文件。这被称为 **信息属性列表** 文件，按照惯例命名为 `Info.plist`，其中包含许多用于描述您的应用的属性，包括您设置的任何自定义属性。
- en: You can find more information regarding the Information Property List and the
    properties that can be set by visiting Apple's iOS Developer Library at [http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html](http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问苹果的 iOS 开发者库了解有关信息属性列表和可以设置的属性更多信息：[http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html](http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html)。
- en: There's more...
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Although we have only used the application descriptor file to remove the icon's
    reflective shine, there are many more configuration options. Another option that
    is commonly used, and has been touched upon already within this and the previous
    chapter, is the status bar and its appearance.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们只使用了应用程序描述符文件来移除图标的反光光泽，但还有许多更多的配置选项。另一个常用的选项，已经在本章和上一章中提到过，是状态栏及其外观。
- en: Status bar style
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态栏样式
- en: 'On iPhone and iPod touch, the appearance of the status bar can be changed;
    the status bar cannot be changed on iPad and is always black. Although you can
    specify whether or not the status bar should be shown within your app, Flash does
    not provide any options for controlling the appearance. If you decide to use the
    status bar, you can add the `UIStatusBarStyle` key to the application descriptor
    file in order to set one of the following three styles supported by iOS:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在iPhone和iPod touch上，可以更改状态栏的外观；iPad上无法更改状态栏，它始终为黑色。虽然你可以在应用程序中指定是否显示状态栏，但Flash没有提供任何控制外观的选项。如果你决定使用状态栏，你可以将`UIStatusBarStyle`键添加到应用程序描述符文件中，以设置iOS支持以下三种样式之一：
- en: '`UIStatusBarStyleDefault` —The default gray status bar'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIStatusBarStyleDefault` — 默认灰色状态栏'
- en: '`UIStatusBarStyleBlackOpaque` —Opaque black status bar'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIStatusBarStyleBlackOpaque` — 不透明的黑色状态栏'
- en: '`UIStatusBarStyleTranslucent` —Black status bar with 50% transparency'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIStatusBarStyleTranslucent` — 具有透明度为50%的黑色状态栏'
- en: 'To opt for the opaque black status bar, add the following key-value pair to
    the application descriptor file:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择不透明的黑色状态栏，请将以下键值对添加到应用程序描述符文件中：
- en: '[PRE27]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Try both `UIStatusBarStyleBlackOpaque` and `UIStatusBarStyleTranslucent`. Your
    options are a little limited but they can come in handy for certain apps where
    the default status bar doesn't visually sit with the design. If you want to use
    the default status bar, then there is no need to explicitly add a key-value pair
    to the application descriptor file.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用`UIStatusBarStyleBlackOpaque`和`UIStatusBarStyleTranslucent`。你的选项有限，但它们可以在某些默认状态栏与设计不匹配的应用程序中派上用场。如果你想使用默认状态栏，则无需在应用程序描述符文件中显式添加键值对。
- en: See also
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Specifying a persistent Wi-Fi connection, [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes")*'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*指定持久的Wi-Fi连接，[第13章](ch13.html "第13章。连接性、持久性和URI方案")*'
- en: '*Declaring device capabilities, [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes")*'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*声明设备功能，[第13章](ch13.html "第13章。连接性、持久性和URI方案")*'
- en: Remote debugging
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程调试
- en: Debugging is a critical aspect of the development process. Flash Professional
    allows you to send debug information from the device directly to the Flash IDE
    for inspection.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是开发过程中的一个关键方面。Flash Professional允许你将设备上的调试信息直接发送到Flash IDE进行检查。
- en: With the example Bubbles app now complete, we will finish off this chapter by
    learning how to deploy a debug build and receive trace data from it using Flash
    Professional's remote debugger.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成示例Bubbles应用程序后，我们将通过学习如何使用Flash Professional的远程调试器部署调试构建并从中接收跟踪数据来结束本章。
- en: Getting ready
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be adding a line of ActionScript to the document class of the Bubbles
    app that you created throughout the course of this and the previous chapter. Alternatively,
    from the book's accompanying code bundle, open `chapter3\recipe10\bubbles.fla`
    within Flash Professional and work from there.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本课程和上一章中创建的Bubbles应用程序的文档类中添加一行ActionScript。或者，从本书的配套代码包中，在Flash Professional中打开`chapter3\recipe10\bubbles.fla`，并从那里开始工作。
- en: How to do it...
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The debug process is split into two main steps:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 调试过程分为两个主要步骤：
- en: Creating a debug build
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建调试构建
- en: Connecting to the Remote Debugger
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到远程调试器
- en: Let us begin by creating a debug build that contains a single trace statement.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个包含单个跟踪语句的调试构建。
- en: Creating a debug build
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建调试构建
- en: 'Follow these steps:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: If you haven't already done so, open the document class by selecting **File**
    | **Open** *(Ctrl + O* | *Cmd* + *O)* from Flash Professional's drop-down menu.
    From the file browser, select `Main.as`.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请通过从Flash Professional的下拉菜单中选择**文件** | **打开** *(Ctrl + O* | *Cmd*
    + *O)* 来打开文档类。从文件浏览器中，选择`Main.as`。
- en: 'Add a simple `trace()` statement at the beginning of the class'' constructor:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类的构造函数开头添加一个简单的`trace()`语句：
- en: '[PRE28]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save your changes and move back to your FLA by clicking on its tab.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改，并点击其标签返回到FLA。
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**
    from the drop-down menu.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从下拉菜单中选择**文件** | **AIR for iOS设置**来打开AIR for iOS设置面板。
- en: From the settings panel, ensure the **General** tab is selected and update the
    **Version** field to **0.7**. Now move to the **Deployment** tab and select **Quick
    publishing for device debugging** from the **iOS deployment type** section.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置面板中，确保已选择**常规**选项卡，并将**版本**字段更新为**0.7**。现在转到**部署**选项卡，并在**iOS部署类型**部分选择**设备调试的快速发布**。
- en: Click on **OK** and save your FLA.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**并保存您的FLA。
- en: Now publish your FLA for iOS by selecting **File** | **Publish** (Alt + *Shift*
    + *F12* | *Shift* + *Cmd* + *F12)* and install the IPA on your device.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过选择**文件** | **发布**（Alt + *Shift* + *F12* | *Shift* + *Cmd* + *F12)*来发布您的FLA以供iOS使用，并在您的设备上安装IPA。
- en: Connecting to the Remote Debugger
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到远程调试器
- en: 'Before launching the app, you will need to carry out the following actions
    in order to receive debug information from it:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动应用程序之前，您需要执行以下操作，以便从它接收调试信息：
- en: Connect your device to your Wi-Fi network.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的设备连接到Wi-Fi网络。
- en: Obtain your development computer's IP address.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取您的开发计算机的IP地址。
- en: Begin a Remote Debug session from the Flash IDE.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Flash IDE开始远程调试会话。
- en: 'Let us walk through these steps in detail:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细说明这些步骤：
- en: Remote debugging takes place over Wi-Fi. Verify that your device is connected
    to the same network as your development computer by selecting **Settings** | **Wi-Fi**
    from the device's home screen. If it is not, then select the correct network from
    the **Choose a Network** section. This is shown in the screenshot on the following
    page.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 远程调试通过Wi-Fi进行。通过从设备主屏幕选择**设置** | **Wi-Fi**来验证您的设备是否连接到与您的开发计算机相同的网络。如果不是，请从**选择网络**部分选择正确的网络。这将在下一页的屏幕截图中显示。
- en: 'You will also need to know the IP address of the computer you are running Flash
    Professional from. If you are using Microsoft Windows, then open a command prompt
    window and enter the following:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要知道您从Flash Professional运行的计算机的IP地址。如果您使用Microsoft Windows，请打开命令提示符窗口并输入以下内容：
- en: '[PRE29]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Network configuration details will be output to the command window. Your computer''s
    IP address consists of four numbers separated by periods and can be found by looking
    for **IPv4 Address** among the output. The following is an example:'
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络配置详细信息将输出到命令窗口。您的计算机的IP地址由四个由点分隔的数字组成，您可以通过在输出中查找**IPv4地址**来找到它。以下是一个示例：
- en: '[PRE30]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For those using Mac OS X, choose System Preferences from the Apple menu. In
    the System Preferences window, click on the Network icon from the Internet & Wireless
    section. Your IP address will be shown within the Network window, underneath the
    Status heading.
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用Mac OS X的用户，从苹果菜单中选择系统偏好设置。在系统偏好设置窗口中，点击网络部分中的网络图标。您的IP地址将在网络窗口的**状态**标题下显示。
- en: We are now ready to perform remote debugging.
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已准备好执行远程调试。
- en: 'First activate Flash''s remote debugger by selecting **Debug** | **Begin Remote
    Debug Session** | **ActionScript 3.0** from the drop-down menu. This will switch
    the IDE to its **DEBUG** workspace with the following message being sent to the
    **OUTPUT** window:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过从下拉菜单中选择**调试** | **开始远程调试会话** | **ActionScript 3.0**来激活Flash的远程调试器。这将使IDE切换到其**调试**工作区，并向**输出**窗口发送以下消息：
- en: '[PRE31]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Essentially the Flash IDE is now ready to receive debug information from your
    debug app and will wait for up to two minutes for the app to connect to it.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际上，Flash IDE现在已准备好接收来自调试应用程序的调试信息，并等待最多两分钟以等待应用程序连接到它。
- en: Note
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If it is not already available from the debug workspace, then open the **OUTPUT**
    window by selecting **Window** | **Output (F2)** from Flash's drop-down menu.
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果调试工作区中尚未打开，请通过从Flash的下拉菜单中选择**窗口** | **输出（F2）**来打开**输出**窗口。
- en: Now, move back to your device's home screen and launch the app.![Connecting
    to the Remote Debugger](img/1383_03_05.jpg)
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到您的设备主屏幕并启动应用程序。![连接到远程调试器](img/1383_03_05.jpg)
- en: The app will attempt to automatically connect to the Flash IDE. However, if
    it fails, a **Flash Debugger** dialog box will appear, similar to the preceding
    screenshot, asking you to enter the IP address of the computer it should connect
    to. If prompted, enter your development computer's IP address and tap on **OK**
    to connect.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序将尝试自动连接到Flash IDE。如果失败，将出现一个类似于前面屏幕截图的**Flash调试器**对话框，要求您输入应连接到的计算机的IP地址。如果提示，请输入您的开发计算机的IP地址，然后点击**确定**以连接。
- en: 'Upon a successful connection, the name of the app''s `.swf` file will be sent
    to the Flash IDE''s **OUTPUT** window followed by any trace statements that are
    executed. For this recipe, the following will be output:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接成功后，应用的 `.swf` 文件名将被发送到 Flash IDE 的 **输出** 窗口，随后是执行的所有 `trace()` 语句。对于这个示例，以下内容将被输出：
- en: '[PRE32]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see, the message from your constructor's `trace()` statement has
    been sent to the output window.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，来自构造函数的 `trace()` 语句的消息已经发送到输出窗口。
- en: Now, terminate the debug session by selecting **Debug** | **End Debug Session**
    *(Alt + F12)* from Flash Professional's drop-down menu. The Flash IDE will move
    back to the workspace you were using previously.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过从 Flash Professional 的下拉菜单中选择 **调试** | **结束调试会话** *(Alt + F12)* 来终止调试会话。Flash
    IDE 将返回到你之前使用的工位。
- en: How it works...
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Remote debugging is invaluable for identifying and fixing bugs and should be
    familiar to experienced Flash developers. Using the `trace()` statement, you can
    send information from your app to the Flash IDE's **OUTPUT** window.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 远程调试对于识别和修复错误非常有价值，并且应该为经验丰富的 Flash 开发者所熟悉。使用 `trace()` 语句，你可以将应用的信息发送到 Flash
    IDE 的 **输出** 窗口。
- en: When debugging, remember to select the **Quick publishing for device debugging**
    deployment type from the **AIR for iOS Settings** panel. It is also important
    that both your test device and development computer are connected to the same
    network. Although your device may be connected to your computer through its USB
    cable, remote debugging only works over Wi-Fi for AIR for iOS applications.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试时，请记住从 **AIR for iOS 设置** 面板中选择 **快速发布以进行设备调试** 部署类型。同样重要的是，你的测试设备和开发计算机连接到相同的网络。尽管你的设备可能通过
    USB 线缆连接到你的计算机，但远程调试仅适用于通过 Wi-Fi 的 AIR for iOS 应用程序。
- en: This recipe focused on the `trace()` statement, but remote debugging for iOS
    supports additional features including breakpoint control, stepping through code,
    and the monitoring of variables. These advanced debugging features are unfortunately
    out of the scope of this book. However, a comprehensive introduction to the ActionScript
    3.0 debugger is available from the Adobe Flash Developer Center at [www.adobe.com/devnet/flash/articles/as3_debugger.html](http://www.adobe.com/devnet/flash/articles/as3_debugger.html).
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例专注于 `trace()` 语句，但远程调试 iOS 支持包括断点控制、代码单步执行和变量监控在内的其他功能。不幸的是，这些高级调试功能超出了本书的范围。然而，Adobe
    Flash 开发者中心提供了对 ActionScript 3.0 调试器的全面介绍，网址为 [www.adobe.com/devnet/flash/articles/as3_debugger.html](http://www.adobe.com/devnet/flash/articles/as3_debugger.html)。
- en: There's more...
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: With any luck, your app will successfully connect to the remote debug session.
    However, if you are experiencing problems connecting then read on.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 希望如此，你的应用将成功连接到远程调试会话。然而，如果你在连接时遇到问题，请继续阅读。
- en: Remote connection attempts
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程连接尝试
- en: A debug build of your app will attempt to connect, by default, to your development
    computer's IP address. If the connection attempt fails, then you will be asked
    to manually enter the correct IP address. Unfortunately, apps published using
    older versions of AIR can wait for up to one minute before giving up and prompting
    for an IP address, which is hardly ideal when rapidly deploying and testing new
    debug builds.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用的调试版本默认会尝试连接到你的开发计算机的 IP 地址。如果连接尝试失败，你将被要求手动输入正确的 IP 地址。不幸的是，使用较旧版本的 AIR
    发布的应用可能需要等待长达一分钟才会放弃并提示输入 IP 地址，这在快速部署和测试新的调试版本时几乎是不理想的。
- en: During this time, the screen will remain blank and your iOS device may eventually
    auto-lock if left untouched. If locked, you may miss the app's prompt for the
    correct IP address, which will lead to your debug session timing out.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段时间内，屏幕将保持空白，如果你的 iOS 设备未被操作，最终可能会自动锁定。如果设备锁定，你可能会错过应用对正确 IP 地址的提示，这会导致你的调试会话超时。
- en: To prevent this from happening, consider increasing the auto-lock time on your
    iOS device by selecting **Settings** | **General** | **Auto-Lock** from the home
    screen.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况发生，请考虑通过从主屏幕选择 **设置** | **通用** | **自动锁定** 来增加你的 iOS 设备的自动锁定时间。
- en: Those using Flash Professional CS5.5 and the latest version of AIR are unlikely
    to experience such lengthy timeout periods.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Flash Professional CS5.5 和最新版本的 AIR 的用户不太可能遇到如此长时间的超时。
