- en: Digging Deeper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I first started programming, I was in my mid-twenties. I started a lot
    older than most, but I will say that grasping the basics took me a bit longer
    than most. I remember when I bought my first programming book and I read and reread
    chapters over and over again until the concepts made sense to me. I found that
    a lot of books talked to me like I had majored in computer science. As you progress
    through this book, take your time-and, if you need to go back, it is okay to do
    so. No one is going to care that it took you an extra day to understand a concept.
    It is more important that you fully understand that concept.
  prefs: []
  type: TYPE_NORMAL
- en: One tip I would give you is not to copy and paste code. No matter where you
    find the code and no matter how long it takes, it benefits you to type it out.
    Doing this really helped me as I eventually started to remember the code and it
    became second nature to me.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last chapter, we went over the basics of Swift to get you warmed up.
    Now, we will dig deeper and learn some more programming concepts. These concepts
    will build on what you have already learned. In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Ranges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's begin by creating a new Playground project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Playground project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you learned earlier, launch Xcode and click on **Get started with a playground**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/beb3fd88-173f-45fe-b372-b856ced4f013.png)'
  prefs: []
  type: TYPE_IMG
- en: The Playground template screen will appear. Make sure that you select iOS and
    then choose Blank and hit Next. You will be asked to give your project a name
    and a location to save the file; name your new Playground `iOS11-Programming-for-Beginners-Ch4`.
    You can save the file anywhere you like. Now, with the project saved, we can explore
    Playgrounds a bit.
  prefs: []
  type: TYPE_NORMAL
- en: Next, delete everything inside of your file and toggle on the Debug panel using
    the toggle button (*cmd* + *Shift* + *Y*). You should now have a blank screen
    with the Results panel on the right and the Debug panel on the bottom opened.
  prefs: []
  type: TYPE_NORMAL
- en: We focused on the basics earlier and now we will build upon those skills. Ranges
    are one such data type that we should learn and are very useful and can come in
    handy for a variety of reasons. Let's take a look at what Ranges are and then
    start to understand the difference between a *closed Range*, a *half-closed Range,*
    and a *one-sided Range*.
  prefs: []
  type: TYPE_NORMAL
- en: Ranges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ranges are generic data types that represent a sequence of numbers. Let''s
    look at the following image to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68cf5ed7-5afe-437b-b76d-50d08e0806d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Closed range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Notice that, in the preceding image, we have numbers ranging from **10** to
    **20**. Rather than having to write each value, we can use Ranges to represent
    all of these numbers in shorthand form. In order to do this, let''s remove all
    of the numbers in the image except for **10** and **20**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bd76f58-907a-431d-9b1a-5494fe77b1fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have removed those numbers, we need a way to tell Swift that we
    want to include all of the numbers that we just deleted. This is where the range
    operator (...) comes into play. Therefore, in Playgrounds, let''s create a constant
    called range and set it equal to `10...20`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8e0c51e4-2d6a-483b-9f88-37eb5f3ce8c0.png)'
  prefs: []
  type: TYPE_IMG
- en: The range that we just entered says that we want the numbers between `10` and
    `20` as well as both `10` and `20` themselves. This type of Range is known as
    a closed Range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of Playground, in the result you will see a Show Result icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6611882e-79f0-4f58-b708-d59e9ca41fa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you hover over the result you will also see Quick Look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a99f3956-e41f-4f84-9e81-0df3b3c5d480.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Show Result icon so that you can see the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a594a9c0-209e-49af-ad06-66f9856aedc7.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we also have what is called a half-closed Range.
  prefs: []
  type: TYPE_NORMAL
- en: Half-closed range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s make another constant that is known as a half-closed Range and set it
    equal to `10 < 20`. Add the following into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03d7f2d2-cb7a-428e-b867-a2f5c2870845.png)'
  prefs: []
  type: TYPE_IMG
- en: A half-closed Range is the same as a closed Range, except that the end value
    will not be included. In this example, that means that 10 through 19 will be included
    and 20 will be excluded.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you will notice that your Results panel shows you `CountableClosedRange(10...20)`
    and `CountableRange(10..<20)`. We cannot see all the numbers within the Range.
    In order to see all the numbers, we need to use a loop.
  prefs: []
  type: TYPE_NORMAL
- en: Control flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In programming, control flow is the order in which your code is executed. When
    working with Swift, we can use a variety of control statements. Loops, in particular,
    are useful for when you want to repeat a task multiple times. Let's take a look
    at a few different types of loop.
  prefs: []
  type: TYPE_NORMAL
- en: The for...in loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most common control statements is a `for...in` loop. It allows you
    to iterate over each element in a sequence. Let''s see what a `for...in` loop
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We start the `for...in` loop with for, which is proceeded by `<value>`. This
    is actually a local constant (only the `for...in` loop can access it) and can
    be any name you like. Typically, you will want to give this value an expressive
    name. Next, we have in, which is followed by `<sequence>`. This is where we want
    to give it our sequence of numbers. Let''s write the following into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da8d9242-c296-4e2f-b0ed-d306dffc8ab2.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that, in our Debug panel, we see all of the numbers we wanted in our
    range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do the same for our `halfClosedRange` variable, by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/927410ae-369f-43f7-a372-24a3bb4b1f47.png)'
  prefs: []
  type: TYPE_IMG
- en: In our Debug panel, we see that we get the numbers 10 through 19\. One thing
    to note is that these two `for...in` loops have different variables. In the first
    loop, we used value, and in the second one, we used index. You can make these
    whatever you choose them to be.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, in the two preceding examples, we used constants, but we could
    actually just use the Ranges within the loop. Add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03c9b4e1-542e-44d9-90d6-f3c2292c7eec.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you see 0 to 3 print inside of the Debug panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'What if you wanted the numbers to go in reverse order? Let''s input the following
    `for...in` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f943f934-cd94-4c3d-82fb-44568be56c2a.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have the numbers in descending order in our Debug panel. When we add
    Ranges into a `for...in` loop, we have to wrap our range inside parentheses so
    that Swift recognizes that our period before `reversed()` is not a decimal. Now
    that we are familiar with loops, there is one more range we need to look at.
  prefs: []
  type: TYPE_NORMAL
- en: One-sided range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A one-sided Range operator allows you to use ranges that continue as far as
    possible in one direction. If you wanted to have the range just continue then
    this is what you would use. Let''s look at a one sided range:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a3e787c-b69a-423a-bea0-153b9a0a2a4d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/38582f87-6dcc-4736-85e0-8608c8a75d91.png)'
  prefs: []
  type: TYPE_IMG
- en: Another useful loop is the `while` loop. Let's take a look at how the `while`
    loop is used.
  prefs: []
  type: TYPE_NORMAL
- en: The while loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A `while` loop executes a bool expression at the start of the loop and the
    set of statements run until a condition becomes false. It is important to note
    that `while` loops can be executed zero or more times. Here is the basic syntax
    of a while loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s write a `while` loop in Playgrounds and see how it works. Add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94f70a96-18a6-46aa-bca0-ae5354b91f99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, this `while` loop starts with a variable that begins at zero. Before the
    `while` loop executes, it checks to see if `y` is less than `50`-and, if so, it
    continues into the loop. Using the `+=` operator, which we covered earlier, we
    increment `y` by five each time. Our `while` loop will continue to do this until
    `y` is no longer less than `50`. Now, let''s add the same `while` loop after the
    one we created and see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f6ee09f3-7a86-4f59-b789-d3ddc32bc874.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that the second `while` loop never runs. This may not seem like
    it is important until we look at our next type of loop.
  prefs: []
  type: TYPE_NORMAL
- en: The repeat...while loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `repeat...while` loop is pretty similar to a `while` loop, in that it continues
    to execute the set of statements until a condition becomes false. The main difference
    is that the `repeat...while` loop does not evaluate its bool condition until the
    end of the loop. Here is the basic syntax of a `repeat...while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s write a `repeat...while` loop in Playgrounds and see how it works. Add
    the following into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e5631fc-126c-4b5c-ad76-57e75a519191.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that our `repeat...while` loop executes first and increments
    `x` by `5`, and after (as opposed to checking the condition before, as with a
    `while` loop), it checks to see if `x` is less than `100`. This means that our
    `repeat...while` loop will continue until the condition hits `100`. Here is where
    it gets interesting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add another `repeat...while` loop after the one we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0be44c8-611d-49f7-9685-07b1a39b3091.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can see that our `repeat...while` loop incremented to `105` instead
    of `100`, like the previous `repeat...while` loop. This happens because the bool
    expression does not get evaluated until after it is incremented by `5`. Knowing
    this behavior will help you pick the right loop for your situation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have looked at three loops: the `for...in` loop, the `while` loop,
    and the `repeat-while` loop. We will use the `for...in` loop again, but first
    we need to talk about collections. In the next chapter, we will focus on what
    collections are and how to use them when working with data. Make sure you fully
    understand loops, because we will build on them in the next chapter and throughout
    the book. Therefore, review as much as you need in order to make sure you feel
    that you are proficient in the topics contained in this chapter.'
  prefs: []
  type: TYPE_NORMAL
