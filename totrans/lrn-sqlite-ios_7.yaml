- en: Chapter 7. iOS Development with PhoneGap and HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When PhoneGap was first introduced, Apple refused to accept apps created by
    PhoneGap as genuine, because they were not native, and were interpreted. But this
    has changed, partly because there are so many alternatives, partly because they
    were losing out on hundreds or thousands of apps to competitors, and partly because
    of the sheer ease of development compared to that of the past. These were the
    driving forces behind the change.
  prefs: []
  type: TYPE_NORMAL
- en: When code is written using PhoneGap with HTML5, you can deploy it on a certain
    target or platform, such as iOS or Android, or many versions are created by default,
    for the Apple App Store or the Android store, among others. This is the benefit
    of using a single code base, a newer and easier language such as HTML5, and a
    cross-platform development tool such as PhoneGap.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at how to use Xcode with PhoneGap to integrate
    and compile with source code including HTML5\. We will show you how to write code
    using SQLite and SQL statements and enter code directly into HTML5, which is then
    preprocessed by PhoneGap. We will cover all the aspects of creating a default
    Apple Xcode application from start to finish using the SQLite database for data
    storage, and using PhoneGap and HTML5 as a start.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 and PhoneGap development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because it is easier to develop mobile and tablet apps using HTML5, PhoneGap,
    and generally, cross-development tools, there seems to be software snobbery, where
    some people think that HTML5 development is somewhat not as skilled as native
    development. There have been some very bad native developments built so far, but
    the same could apply to HTML5 or other mobile apps on the app stores.
  prefs: []
  type: TYPE_NORMAL
- en: Using these modern cross-development tools is a good and quick way if you want
    to build prototypes from designs that give and show the look and feel, and show
    some functionality too. Cross-browser technology will not perform as quickly or
    efficiently as a native app and, as mentioned, it has a reputation for not being
    as real as native apps. With the growth of mobile technology, there has been a
    high growth of HTML5 apps available, because they are much faster to design, develop,
    and produce, compared to native apps.
  prefs: []
  type: TYPE_NORMAL
- en: There are pitfalls for those web developers who think that they can just put
    an app together for mobiles to produce something comparable to a desktop. Well,
    they are wrong. Anyone who builds a mobile app for iOS, for example, must read
    their human guidelines document, which will outline how to actually take into
    consideration the user experience, the way to design buttons and journeys, and
    how best to build something that fits in the iOS ecosystem. Google/Android has
    fewer checks, but as their app store grows, I am sure there will be more or different
    types of controls enforced.
  prefs: []
  type: TYPE_NORMAL
- en: Web developers must understand the limitations of their destination devices
    for these apps. Mobiles, including smartphones, actually don't have the processing
    power of a desktop, and web developers must be aware of how programming principles
    can be applied within these types of developments.
  prefs: []
  type: TYPE_NORMAL
- en: It is great to try new software technology; if you have an idea, then try to
    create, test it, and submit your app to the App Store. But if you take some person
    and get them to try to create a native app, they have to learn a whole new language
    and way of doing things. It's going to take a lot longer until they are even able
    to produce a working mobile app, but by that time they will have quite a bit of
    experience. There are applications that have a mixed mode of native code, combined
    with cross-development code such as HTML5\. In practice, although these work,
    there are huge pitfalls in performance and they are limited as well.
  prefs: []
  type: TYPE_NORMAL
- en: There are advantages to building and using native apps and applications for
    specific mobile devices or operating systems, which are usually installed on your
    phone via an app store. These benefits include speed of development, the same
    app across the product range, one set of code, and a change queue for the app.
    Native is the best way to code ideally, but if you have web skills and you don't
    want to learn a new programming language, and you want to create an HTML5 app,
    using PhoneGap delivered on iOS, Android, or Windows may be an alternate way of
    using your skills.
  prefs: []
  type: TYPE_NORMAL
- en: With advances in HTML5 and PhoneGap API options, there are many new functions,
    including those of camera manipulation, for example, which can be done via some
    basic commands. With a good designer, a decent app using HTML5 can be made quite
    quickly and economically.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile developers need to be educated on performance deliverables to build apps,
    which are skills they can use again and again. The benefits will be used on all
    the apps they produce.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of a mobile app surpass the straightforward usage of a mobile
    website. Some advantages are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: A variety of programming languages such as Swift, Objective-C (iOS), Java (Android),
    or C# (Windows Phone) can be used to deliver the end app, for example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the "controls" and the API are native in design and development, and are
    interrogated and approved by the app stores from Apple, Google, or Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other benefit of using native is that there is no reliance on any outside
    technology for it to work, and there is the possibility of working offline if
    required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mobile web application by definition would have less access to the low-level
    functionalities of a device and system calls. Due to enhanced development of the
    APIs and higher-level languages such as HTML5, CSS, or JavaScript, this is changing
    through software updates and upgrades. By using the mobile web/app solutions for
    mobile sites, app store approval is not required, and by ensuring proper code
    design, the same application can work with a variety of devices and device sizes,
    and different mobile or desktop operating systems or browsers. Information is
    served to the app, and there are no offline facilities, unlike native.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 is praised as easy, unlike the native facilities offered by native code.
  prefs: []
  type: TYPE_NORMAL
- en: An HTML5 framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functionality, like memory allocation and usage, animations, and a variety of
    other options, will define what a good HTML5 framework is. This framework does
    offer good access to mobile phone devices, such as the camera, or some other internal
    information that only a native app could previously access. These factors go far
    in deciding the type of framework to use.
  prefs: []
  type: TYPE_NORMAL
- en: Just because some frameworks or JavaScript libraries are popular in one area
    does not necessarily mean they are not required in another. For example, the jQuery
    JavaScript framework is very popular due to many programmers having used it in
    the past for large or small projects.
  prefs: []
  type: TYPE_NORMAL
- en: It will be difficult for an end user to distinguish native and HTML5 development
    when the app is running. However, the way it is installed will determine whether
    it is a web or native app. Not that it matters to the end user, but users expect
    a great look and feel, richness in technology, easy and quick navigation, and
    that the app actually solves their issue, which is the functionality of the application
    in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some misconceptions about the use of hybrid HTML5 apps. Users think
    that hybrid applications cannot store offline data in a database such as SQLite.
    Hybrid apps can work online and offline. They do not need to be connected all
    the time for it to work. PhoneGap with HTML5 gives more facilities, functionalities,
    and options.
  prefs: []
  type: TYPE_NORMAL
- en: The standard storage mechanism for HTML5 apps is the local storage on the device
    itself, that is, the database used is SQLite. If you are not connected online,
    data can be stored locally. Once the database is connected, it will upload data
    from the local database.
  prefs: []
  type: TYPE_NORMAL
- en: A common thought is that HTML5 is out of its league when it comes to native.
    However, today, in-app purchases, Game Centre, executing background tasks, accessing
    the GPS and the camera, and even Bluetooth, can be accessed via HTML5\. PhoneGap
    is used where a native wrapper is required for an HTML5 app. There are some differences
    in the way native and hybrid/cross-development apps work, like PhoneGap compared
    to Objective-C. Hybrid/HTML5 apps are slower, and although the functionality of
    HTML5 has increased, it does not match native yet.
  prefs: []
  type: TYPE_NORMAL
- en: An Xcode project with PhoneGap, HTML5, and Swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start to do anything, you have to start by building the environment
    and the software tools, and making some minor configurations to get everything
    ready. The app itself will be simple, and outline the process of creating an app
    for PhoneGap and HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: You need to download the Xcode software to get the project working.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Apple users, the Xcode command-line tool, and the Apache Cordova product
    can be downloaded from: [https://itunes.apple.com/us/app/xcode/id497799835?mt=12](https://itunes.apple.com/us/app/xcode/id497799835?mt=12).'
  prefs: []
  type: TYPE_NORMAL
- en: To get the command-lines tools for Xcode and other components, download them
    from [https://developer.apple.com/downloads/index.action](https://developer.apple.com/downloads/index.action).
    You need to be a registered as an Apple developer to be able to download any extra
    components. A second and easier method for PhoneGap is to just download the software
    from the site and install it, as opposed to using the older, command-line way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows you Xcode in the iTunes Store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next screenshot shows the software available for a developer when you log
    in through an Apple Developer account. Only the command-line Xcode tools are required.
    It also shows you the command-line tools that can be downloaded and installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next part of the process is to download the Cordova module of the software,
    as shown in the software in the following screenshot. This is the location of
    the latest Apache/Cordova release. PhoneGap was acquired by Adobe in 2011, and
    the project itself was donated to the **Apache Software Foundation** (**ASF**).
    There are two ways of using PhoneGap. One is its cloud-based service to build
    apps and the second is the local/manual version to build and package apps the
    PhoneGap CLI way. We will be using the PhoneGap CLI way in our first setup, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Download the Cordova software to the `Downloads` folder, unpack it, and within
    the `cordova-ios` directory, you''ll find all the necessary components to use
    PhoneGap/Cordova with Xcode to create a simple app. The following screenshot shows
    the directory structure for the Cordova/PhoneGap system. As you can see, PhoneGap
    supports a variety of technologies and cross-platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To proceed, we need to invoke the **Terminal** app. Initially, on your OS X
    machine, click on **Applications** | **Utilities**, and then click on the **Terminal**
    application, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the image, the following window for the **Terminal** app
    can be seen. It will allow you to carry on with the process of setting up the
    environment and required components. This is where you can carry out the necessary
    commands to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Applications** icon on the toolbar at the bottom of the screen,
    then click on the **Utilities** folder, then click on the **Terminal** icon, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the **Applications** icon, click on the **Utilities** folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the **Terminal** window is clicked, the following window is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''re in this directory, perform the following commands: the first one
    is to create a project, and the second one is to create a directory with your
    app name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A package for the `Hello` program has now been created using Cordova. Before
    you start to build any projects, the system needs to know which platforms to target,
    for example, Android, iOS, or Windows. Cordova now has the iOS platform added
    to it, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a platform is added, performing the following command will outline the
    platforms your application can work on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Within the `Hello` application, perform a directory listing with `ls-l` and
    you will see a variety of directories, such as `platforms`. Set the `platforms`
    directory as the default. Then perform an `ls-l` listing to see a variety of directories,
    including the `HelloWorld.xcodeproj` file.
  prefs: []
  type: TYPE_NORMAL
- en: Once you open the `Hello.xcodeproj` file, Xcode will wake up and you will see
    the project name. You can enter a company identifier as well. See the following
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be prompted for a simulator phone to be selected upon execution. Select
    **iOS simulator for iPhone 6.0**. Next, select the simulator and click on the
    **Run** button to compile, link, build, and execute the simple application. You
    will be presented with the Cordova image, as shown in the following screenshot,
    and the `Hello` app will then be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this stage, you have set up an Xcode project with Cordova or PhoneGap and
    some basic code. Now it is time to add some HTML5 code into the mix to show how
    both aspects of PhoneGap/iOS and SQLite work together.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the method used previously to install Cordova, the easiest way
    is to download and install PhoneGap directly, without going through the command-line
    method. Click on the **Download** button on the PhoneGap download page at [http://phonegap.com/download](http://phonegap.com/download).
  prefs: []
  type: TYPE_NORMAL
- en: 'The process may alter for some of its versions, but will usually be the same
    for most of them. Next, the `.zip` file is downloaded, so open it up and extract
    the files to a directory. Then install the PhoneGap program, which will deliver
    the interface, and once this step is complete, create an Xcode project, as shown
    in the following screenshot. Since you have done this before, doing it this way
    is even easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you've performed the preceding task, like with previous installations,
    an extra icon for PhoneGap will appear. Since you have installed the components
    required for Xcode and PhoneGap to work together, you are now ready to start developing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how to select the PhoneGap app type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When creating a Cordova application, you must select the Cordova-based application
    template, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, choose the project name for this project—enter `Hello`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next field is for a company identifier ID. Like before, please add a unique
    identifier, which is usually the reverse of the domain name.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a standard way to install the PhoneGap framework with Xcode. In your
    browser, go to [https://nodejs.org/](https://nodejs.org/) and press the **Install**
    button to download the JavaScript library called `node.js`. Finally, enter the
    admin/username and password details to install the software locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Your successful installation message will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it is installed, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a terminal application and type in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter the password for root as well to perform the actual installation. Once
    this is done, you can use the PhoneGap command and prompt it for some help or
    assistance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following is a screenshot of the PhoneGap program installing the software
    using the preceding command:![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, to actually set up your application, please perform the following commands.
    First position and set the default to the right directory within the terminal
    application program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `$ phonegap create Hello` command. (`Hello` is your app's name.) Next,
    set the default to the application directory in which you just created your PhoneGap
    app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the local directory and the creation of a new
    Cordova project called `Hello`. A new project has been created with all the necessary
    components for this new test app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, at the prompt, perform the following command to run the application in
    iOS. Run the `$ phonegap run ios` command. If you run the iOS project from anywhere,
    the following error will be displayed. But if you set the default to the right
    directory (`Hello`), then it will work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next code, you can see the call to PhoneGap to get the app working. The
    process has been made much smoother, to operate and work for the benefit of creating
    apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will add some HTML5 to the source code:![An Xcode project with PhoneGap,
    HTML5, and Swift](img/4725_07_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the new Hello basic application has been compiled and built, the following
    image will appear, showing the Cordova system. This is very important, and it
    is key to know that PhoneGap and its Cordova components are registered and working
    as intended:![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now develop this app further by adding some SQLite and HTML5 code. It
    is very important to get the base of the product set up, tested, and ready for
    further development:![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Further information about PhoneGap can be found at [docs.phonegap.com](http://docs.phonegap.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the code base using the Xcode project file (`Hello World.xcodeproj`),
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the file in the **Hello Directory** | **Platforms** | **iOS**, which
    will then bring up the Xcode, code, and source files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following is a screenshot of the Xcode source file area for our test application.
    In order to add the SQLite library to your project, click on the **Build Phases**
    tab, then select the **Link Binary with Libraries** menu option and add one of
    the following libraries from `libsqlite3.dylib` or `libsqlite3.0.dylib`:![An Xcode
    project with PhoneGap, HTML5, and Swift](img/4725_07_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open the `Hello` Xcode project file as shown in the following screenshot.
    Within the structure, expand the Xcode project to reveal the HTML file within.
    Then add some of the following HTML5 code into the `.html` file, and compile,
    and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add the following HTML5 code, which will perform some simple SQLite statements.
    It will take a couple of input numbers; check for the existence of a local database/local
    tables, create necessary tables, store the data, and retrieve it. This code will
    be part of Xcode; use Cordova/PhoneGap to compile the source code, and execute
    the results to run the mobile app. Once you enter the code into the `index.html`
    file within the `Hello` app, save the file, and quit Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a simple HTML5 app, which creates a database called `testdb`. It checks
    to see whether the `BLOGS` table is created. If not, then it will create the `BLOGS`
    table, enter two records for blog information, and display the data on the screen.
    You can see the following code and results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Click on the **Terminal** app, and within the **Terminal** app, set the default
    to the `Hello` app directory, as shown in the following code:![An Xcode project
    with PhoneGap, HTML5, and Swift](img/4725_07_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the `phonegap run ios` command, which will bring up the PhoneGap/Cordova
    start screen, as shown in the following screenshot. This shows that the Cordova/PhoneGap
    environment has been set up properly, and the application will start to execute:![An
    Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following is the output from the `Hello` app. It shows two records, which
    are inserted, and then displayed. It is a simple process, but the workflow is
    the same as we discussed:![An Xcode project with PhoneGap, HTML5, and Swift](img/4725_07_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this exercise, you have learned how to install Node.js and Cordova, and
    how to create a simple iOS application, run Xcode, and simulate a simple application
    using an iPhone 6.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use Xcode and PhoneGap with SQLite and HTML5\.
    Hopefully, it has helped you to perform iOS development with these technologies,
    and showed you how using PhoneGap/SQLite can enhance how quickly apps can be delivered
    to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: It is also a cross-development platform, where the source is created once and
    delivered to a variety of platforms in a quick-format generation method. HTML5
    works with Xcode, Swift, and PhoneGap in a cohesive and quick way.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about future advances, further features, and
    SQLite functionality. This will be useful in the development process, to get better
    and more controlled applications. The benefits of using one codebase for multiple
    platforms is very beneficial to both developers and customers. The next chapter
    will also be an aid and guide on how these features can be used in new and updated
    apps in the future.
  prefs: []
  type: TYPE_NORMAL
