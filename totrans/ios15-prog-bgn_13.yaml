- en: '*Chapter 11*: Finishing Up Your User Interface'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you configured the **Explore** screen to display 20
    empty collection view cells in a collection view, added a button to the collection
    view section header to present a view representing the **Locations** screen modally,
    and added a **Cancel** button to dismiss it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will implement the remaining screens that were shown in
    the app tour shown in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*. First, you'll add a blank table view to the **Locations**
    screen. Next, you'll add the **Restaurant List** screen, which will be displayed
    when a cell in the **Explore** screen is tapped. You'll configure this screen
    to display a collection view containing a single collection view cell. After that,
    you'll add the **Restaurant Detail** screen, which will be displayed when the
    cell in the **Restaurant List** screen is tapped. You'll configure this screen
    to display a table view with static table view cells. You'll also add a button
    to one of the cells that displays a view representing the **Review Form** screen
    when tapped. Finally, you'll make the **Map** screen display a map.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to add and configure a table
    view to a storyboard scene, how to add segues between scenes, and how to add a
    map view to a scene. The basic user interface of your app will be complete, and
    you will be able to walk through all the screens in the simulator. None of the
    screens will be displaying data, but you will finish their implementation in *Part
    3* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a table view to the **Locations** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the **Restaurant List** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the **Restaurant Detail** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a map view to the **Map** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you created in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter11` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3EYWb6i](https://bit.ly/3EYWb6i)'
  prefs: []
  type: TYPE_NORMAL
- en: To start, you'll add a table view to the **Locations** screen, which will eventually
    be used to display a list of restaurant locations.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a table view to the Locations screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you tap the button in the collection view section header of the **Explore**
    screen, another view representing the **Locations** screen will be presented modally,
    but it is currently blank. Let''s add a table view to this view. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run the `LetsEat` app to make sure everything still works as it should.
    Click the `Main` storyboard file in the Project navigator. In the document outline,
    select the **View Controller** icon in the **View Controller Scene** presented
    modally by the button in the **Explore View Controller Scene**. Click the Library
    button:![Figure 11.1: Toolbar with the Library button shown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.01_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.1: Toolbar with the Library button shown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The library will appear. Type `table` into the filter field. A **Table View**
    object will appear in the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the **Table View** object to the view in the view controller scene:![Figure
    11.2: Library with Table View object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.02_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.2: Library with Table View object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll add constraints to make the table view fill the whole screen. With
    the table view selected, click the Add New Constraints button:![Figure 11.3: View
    Controller scene with Table View selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.3: View Controller scene with Table View selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type `0` into all the **Spacing to nearest neighbor** fields and make sure
    that all the pale red struts are selected (they will turn bright red). Click the
    **Add 4 Constraints** button:![Figure 11.4: Auto Layout add new constraints pop-up
    dialog box'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.4: Auto Layout add new constraints pop-up dialog box'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the table view''s edges are now flush with the edges of the view
    in the view controller scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5: View controller scene with table view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.05_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.5: View controller scene with table view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app and tap the button in the section header. You''ll see
    an empty table view in the **Locations** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6: iOS Simulator showing Explore and Locations screens'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.06_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.6: iOS Simulator showing Explore and Locations screens'
  prefs: []
  type: TYPE_NORMAL
- en: You'll implement the view controller for the **Locations** screen in [*Chapter
    15*](B17469_15_Final_VK_ePub.xhtml#_idTextAnchor213), *Getting Started with Table
    Views*. Eventually, this table view will display a list of restaurant locations,
    as shown in the app tour. As you can see, this process is similar to adding a
    collection view to the **Explore** screen, which you did in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll add a view controller scene to your storyboard to
    represent the **Restaurant List** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Restaurant List screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As can be seen in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*,
    Setting Up the User Interface*, once you've set a location and tapped a cuisine
    in the **Explore** screen, the **Restaurant List** screen will appear, showing
    a list of restaurants.
  prefs: []
  type: TYPE_NORMAL
- en: To implement the `RestaurantListViewController` class, make it the view controller
    for the view controller scene's view, and connect the outlets of the collection
    view to this class. The steps are very similar to the one you followed in the
    previous chapter for the `ExploreViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding the new view controller scene. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Main` storyboard file, move the navigation controller scene and view
    controller scene that you added in the previous chapter upward to make room for
    the new view controller scene that you will add:![Figure 11.7: Editing area showing
    Main storyboard file contents'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.07_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.7: Editing area showing Main storyboard file contents'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Library button and type `view con` into the filter field. A **View
    Controller** object will be in the results. Drag the **View Controller** object
    into the storyboard to represent the **Restaurant List** screen:![Figure 11.8:
    Library with View Controller object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.08_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.8: Library with View Controller object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Library button and type `collec` into the filter field. A **Collection
    View** object will be in the results. Drag the **Collection View** object to the
    view in the view controller scene:![Figure 11.9: Library with Collection View
    object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.09_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.9: Library with Collection View object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll add constraints to make the collection view fill the whole screen.
    With the collection view selected, click the Add New Constraints button:![Figure
    11.10: View controller scene with collection view selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.10_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.10: View controller scene with collection view selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type `0` into all the **Spacing to nearest neighbor** fields and make sure
    that all the pale red struts are selected (they will turn bright red). Click the
    **Add 4 Constraints** button. Verify that the edges of the collection view are
    now flush with the edges of the view in the view controller scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11: View controller scene with collection view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.11_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.11: View controller scene with collection view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: The view controller scene for the **Restaurant List** screen has been added,
    but it does not have a view controller yet. You'll need one to make it display
    a collection view cell. In the next section, you'll add a new Cocoa Touch Class
    file to your app so that you can declare and define a new view controller class
    for this screen.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring the RestaurantListViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you did in the previous chapter, you''ll add a new Cocoa Touch Class file
    to your project, but this time, you''ll implement the `RestaurantListViewController`
    class. You''ll use an instance of this class as the view controller for the **Restaurant
    List** screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Navigator and Inspector buttons to turn on the Navigator and Inspector
    areas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `LetsEat` group and choose **New Group** from the pop-up
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this new group `Restaurants`. If you make a mistake, click the name and
    press *Return* on your keyboard to make it editable again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Restaurants` group and select **New File...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Select **Cocoa Touch Class** and click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `RestaurantListViewController`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`UIViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next** when you're done.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the next screen, click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `RestaurantListViewController` file has been added to the project, and
    you will see the boilerplate code for the `RestaurantListViewController` class
    in it. The `RestaurantListViewController` class is a subclass of the `UIViewController`
    class and contains a single method, `viewDidLoad()`. Like you did in the previous
    chapter, remove the commented code after the `viewDidLoad()` class in the `RestaurantListViewController`
    class until only the code shown in the following screenshot remains:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12: Editing area showing RestaurantListViewController file''s contents'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.12_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.12: Editing area showing RestaurantListViewController file''s contents'
  prefs: []
  type: TYPE_NORMAL
- en: As you did before for the `RestaurantListViewController` class the view controller
    for the view in the view controller scene and adopt the collection view data source
    and delegate protocols. You'll also add an outlet for the collection view manually
    in the class definition and use the Connections inspector to connect the outlet
    to the collection view in the storyboard. You'll do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adopting the delegate and data source protocols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will modify the `RestaurantListViewController` class to make it conform
    to the `UICollectionViewDataSource` and `UICollectionViewDelegate` protocols and
    add any required protocol methods. You''ll also add an outlet for the collection
    view and make an instance of the `RestaurantListViewController` class the view
    controller for the view. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `RestaurantListViewController` class declaration as shown to make
    it adopt the `UICollectionViewDataSource` and `UICollectionViewDelegate` protocols:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the error icon appears, click it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll see this error because the methods required to conform to the protocols
    you added are not present in the class definition. Click the **Fix** button to
    add stubs for the required methods to your class definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the method stubs have been added to the file. Rearrange everything
    so that the stubs are after the `viewDidLoad()` method:![Figure 11.13: Editing
    area showing UICollectionViewDataSource method stubs'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.13_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.13: Editing area showing UICollectionViewDataSource method stubs'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the method stubs as shown to make the collection view display a single
    collection view cell on the screen when the app is run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your code looks like this:![Figure 11.14: Editing area showing
    code to display a single cell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.14_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.14: Editing area showing code to display a single cell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add an outlet, `collectionView`, just after the class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will link this to the collection view in the storyboard later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that your code looks like this:![Figure 11.15: Editing area showing
    collectionView outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.15_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.15: Editing area showing collectionView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You won't be using the assistant editor to link the outlet to the collection
    view, like you did in the previous chapter. This is a matter of personal preference—you
    are free to choose whichever method suits you best.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file and click the **View Controller** icon of
    the newly added **View Controller Scene** in the document outline. Click the Identity
    inspector button:![Figure 11.16: Identity inspector selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.16: Identity inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To make an instance of the `RestaurantListViewController` class the view controller
    for this scene, select `RestaurantListViewController` in the **Class** field:![Figure
    11.17: Identity inspector with Class set to RestaurantListViewController'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.17_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.17: Identity inspector with Class set to RestaurantListViewController'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that the name of the view controller scene has changed to **Restaurant
    List View Controller Scene**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Connections inspector button. To assign the collection view in the
    `RestaurantListViewController` class definition, drag from the circle next to
    the `collectionView` outlet to the collection view in the **Restaurant List View
    Controller Scene**:![Figure 11.18: Editing area showing collection view to be
    connected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.18_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.18: Editing area showing collection view to be connected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the collection view in the `collectionView` outlet in the `RestaurantListViewController`
    class definition are now connected:![Figure 11.19: Connections inspector showing
    collectionView outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.19_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.19: Connections inspector showing collectionView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `RestaurantListViewController` class the data source and delegate
    object for the collection view, drag from the circles next to the `dataSource`
    and `delegate` outlets to the **Restaurant List View Controller** icon in the
    document outline:![Figure 11.20: Connections inspector selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.20_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.20: Connections inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the `dataSource` and `delegate` outlets are now connected:![Figure
    11.21: Connections inspector with dataSource and delegate outlets set'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.21_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.21: Connections inspector with dataSource and delegate outlets set'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Collection View Cell** in the document outline. Click the Attributes
    inspector button to set the identifier and color of the collection view cell (you''ll
    learn more about identifiers in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194),
    *Getting Started with MVC and Collection Views*):![Figure 11.22: Attributes inspector
    selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.22_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.22: Attributes inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set the `restaurantCell` and set the `Light Gray Color`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.23: Attributes inspector with identifier and background color set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.23_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.23: Attributes inspector with identifier and background color set'
  prefs: []
  type: TYPE_NORMAL
- en: The **Restaurant List View Controller Scene** setup is now complete. Now, you
    need to display this screen when a cell in the **Explore** screen is tapped. To
    do this, you will add a segue between the **Explore** screen and the **Restaurant
    List** screen in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Presenting the Restaurant List screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous chapter, you added a segue to make the **Locations** screen
    appear when a button in the **Explore** screen is tapped. To display the **Restaurant
    List** screen when a cell in the **Explore** screen is tapped, you''ll use a segue
    as well. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `exploreCell` in the document outline to the **Restaurant List View Controller
    Scene** to add a segue between them:![Figure 11.24: Document outline showing exploreCell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.24_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.24: Document outline showing exploreCell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **Segue** menu will appear. Choose **Show** from the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.25: Segue pop-up menu with Show selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.25_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.25: Segue pop-up menu with Show selected'
  prefs: []
  type: TYPE_NORMAL
- en: This makes the **Restaurant List** screen slide in from the right when a cell
    in the **Explore** screen is tapped. A **<Back** button will appear in the navigation
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. In the **Explore** screen, tap a cell. You should see
    the **Restaurant List** screen appear with a collection view containing a single
    cell inside it. Tapping the **<Back** button in the navigation bar will dismiss
    the **Restaurant List** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.26: iOS Simulator showing Explore and Restaurant List screens'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.26_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.26: iOS Simulator showing Explore and Restaurant List screens'
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of the **Restaurant List** screen is now complete, and you
    can navigate from the **Explore** screen to the **Restaurant List** screen and
    back. Eventually, the collection view in this screen will display a list of restaurants
    at a particular location, as shown in the app tour. Great! The next thing you
    will do is add a view controller scene to represent the **Restaurant Detail**
    screen. This screen will be displayed when a cell in the **Restaurant List** screen
    is tapped. You'll do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Restaurant Detail screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As shown in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*,
    Setting Up the User Interface*, when you tap a restaurant in the **Restaurant
    List** screen, a **Restaurant Detail** screen containing the details of that restaurant
    will appear. Tapping the **Add Review** button will display the **Review Form**
    screen where you can add reviews and tapping the **Add Photo** button will display
    the **Photo Filter** screen where you can add photos and apply filters to them.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you'll add a new table view controller scene to your storyboard
    to represent the **Restaurant Detail** screen and add a second view controller
    scene to represent the **Review Form** screen. You'll place a button in one of
    the table view cells to present the **Review Form** screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding the new view controller scene. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Library button, type `table` in the filter field, and drag a **Table
    View Controller** object to the storyboard next to the **Restaurant List View
    Controller Scene**:![Figure 11.27: Library with Table View Controller object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.27_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.27: Library with Table View Controller object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will represent the **Restaurant Detail** screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the **Table View Controller Scene** has been added:![Figure 11.28:
    Editing area showing table view controller scene next to Restaurant List View
    Controller Scene'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.28_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.28: Editing area showing table view controller scene next to Restaurant
    List View Controller Scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that it already has a table view inside it, so you don't need to add a
    table view to the scene, like you did in the previous section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To display the `restaurantCell` (in the document outline under the **Restaurant
    List View Controller Scene**) to the table view to add a segue between them:![Figure
    11.29: Document outline with restaurantCell selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.29_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.29: Document outline with restaurantCell selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Show** from the **Segue** menu. This makes the **Restaurant Detail**
    screen slide in from the right when a cell in the **Restaurant List** screen is
    tapped. A **<Back** button will appear in the navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that a segue has appeared between the two scenes:![Figure 11.30: Editing
    area showing segue between Restaurant List View Controller Scene and the table
    view controller scene'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.30_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.30: Editing area showing segue between Restaurant List View Controller
    Scene and the table view controller scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **Restaurant Detail** screen always displays a fixed number of cells. In
    the document outline, click **Table View** under **Table View Controller Scene**
    and click the Attributes inspector button:![Figure 11.31: Attributes inspector
    selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.31_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.31: Attributes inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set **Content** to **Static Cells** to make the **Restaurant Detail** screen
    display a fixed number of cells:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.32: Attributes inspector with Content set to Static Cells'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.32_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.32: Attributes inspector with Content set to Static Cells'
  prefs: []
  type: TYPE_NORMAL
- en: You're doing this because the **Restaurant Detail** screen always uses the same
    number of cells to display restaurant details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Click on a cell in the **Explore** screen to display
    the **Restaurant List** screen. Then, click on a cell in the **Restaurant List**
    screen to display the **Restaurant Detail** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.33: iOS simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.33_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.33: iOS simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Back** button to go back.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will implement a button inside one of the table view
    cells to display a screen that represents the **Review Form** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Review Form screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will implement a new view controller scene to represent
    the **Review Form** screen and configure a button in the **Restaurant Detail**
    screen to display it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You need a button in the `button` into the filter field. A **Button** object
    appears as one of the results. Drag it to the top static cell in the table view
    controller scene representing the **Restaurant Detail** screen:![Figure 11.34:
    Library with Button object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.34_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.34: Library with Button object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Position it on the right-hand side of the cell:![Figure 11.35: Editing area
    showing table view controller scene with button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.35_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.35: Editing area showing table view controller scene with button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Library button and type `view con` in the filter field. A **View
    Controller** object will appear as one of the results. Drag it next to the table
    view controller scene to represent the **Review Form** screen:![Figure 11.36:
    Library with View Controller object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.36_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.36: Library with View Controller object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the new view controller scene has been added:![Figure 11.37: Editing
    area showing view controller scene next to table view controller scene'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.37_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.37: Editing area showing view controller scene next to table view
    controller scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Library button and type `label` in the filter field. A **Label**
    object appears as one of the results. Drag it to the center of the new view controller
    scene to represent a review:![Figure 11.38: Library with Label object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.38_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.38: Library with Label object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the label text to `Reviews`. Click the Align button to add horizontal
    and vertical constraints to it:![Figure 11.39: Editing area showing view controller
    scene with label'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.39_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.39: Editing area showing view controller scene with label'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Tick the **Horizontally in Container** and **Vertically in Container** checkboxes.
    Click the **Add 2 Constraints** button. Verify the constraints have been added:![Figure
    11.40: Editing area showing label constraints set'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.40_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.40: Editing area showing label constraints set'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These constraints ensure that the **Reviews** label will always be in the middle
    of the screen when the app is run, regardless of orientation or screen size.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Ctrl + Drag* from the button in the table view cell to the newly added view
    controller scene and select **Show** from the pop-up menu. This makes the **Review
    Form** screen appear when the button is tapped:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.41: Segue pop-up menu with Show selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.41_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.41: Segue pop-up menu with Show selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Click on a cell in the **Explore** screen, then click
    on a cell in the **Restaurant List** screen. Click the button in the **Restaurant
    Detail** screen to display the **Review Form** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.42: iOS simulator showing Review Form screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.42_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.42: iOS simulator showing Review Form screen'
  prefs: []
  type: TYPE_NORMAL
- en: Fantastic! All the screens that are accessible from the **Explore** tab, except
    for the **Photo Filter** screen, have now been implemented, with hardly any coding
    required! If you wish, you can repeat the steps in this section to add the **Photo
    Filter** screen.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to do is make the **Map** screen display a map. You'll do this
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Map screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you launch the app, the **Explore** screen is displayed. Tapping the **Map**
    button in the tab bar makes the **Map** screen appear, but it is blank. To make
    the **Map** screen display a map, you''ll add a map view to the view in the view
    controller scene for the **Map** screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the view controller scene for the **Map** screen:![Figure 11.43: Editing
    area showing view controller scene'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.43_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.43: Editing area showing view controller scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To make this scene display a map, click the Library button and type `map` in
    the filter field. A **Map Kit View** object appears as one of the results. Drag
    it to the view in the view controller scene:![Figure 11.44: Library with Map Kit
    View object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.44_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.44: Library with Map Kit View object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The map should fill the whole screen. With the map view selected, click the
    Add New Constraints button:![Figure 11.45: View controller scene with map view
    selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.45_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.45: View controller scene with map view selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type `0` into all the **Spacing to nearest neighbor** fields and make sure
    that the pale red struts are selected (they will turn bright red). Click the **Add
    4 Constraints** button. Verify that the map view fills the entire screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.46: View controller scene with map view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.46_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.46: View controller scene with map view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Click the **Map** button. You should see a map similar
    to the one shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.47: iOS Simulator showing Map screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.47_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.47: iOS Simulator showing Map screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the `Main` storyboard file at this point, you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.48: Editing area showing all the scenes in Main storyboard file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.48_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.48: Editing area showing all the scenes in Main storyboard file'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that you have all the scenes shown in the preceding screenshot, and you
    can also run your app in the simulator to check that all the screens are working
    properly.
  prefs: []
  type: TYPE_NORMAL
- en: Wonderful! You've now completed the basic user interface for your app!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you completed the basic structure of your app. First, you added
    a blank table view to the **Locations** screen. You also added a new view controller
    scene to your storyboard to represent the **Restaurant List** screen, added and
    configured a collection view for this screen, and implemented a segue that displays
    it when a cell in the **Explore** screen is tapped. You added a new table view
    controller scene to represent the **Restaurant Detail** screen, configured a table
    view with static cells for this screen, and implemented a segue that will display
    this screen when a cell in the **Restaurant List** screen is tapped. You also
    added a button to one of the rows in the **Restaurant Detail** screen, added a
    table view controller scene to represent the **Review Form** screen, and configured
    the button you added to display it. Finally, you added a map view to the view
    controller scene for the **Map** screen, and it now displays a map when the **Map**
    button is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully implemented all the screens required for your app, and
    you'll be able to test your app's flow when you run it in the simulator. You should
    also be more proficient with Interface Builder. You now know how to add and configure
    a table view to a storyboard scene, how to add segues between scenes and how to
    add a map view to a scene. This will be useful as you implement your own apps
    that contain table views, use segues to navigate between different screens, and
    display maps. Great!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll modify the cells inside the **Explore** screen,
    the **Restaurant List** screen, and the **Locations** screen so that they match
    the designs that were shown in the app tour.
  prefs: []
  type: TYPE_NORMAL
