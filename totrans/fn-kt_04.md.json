["```kt\nfun appropriateFunctionName(parameter1:DataType1, parameter2:DataType2,...): ReturnType { \n    //do your stuff here \n    return returnTypeObject \n} \n```", "```kt\nfun add(a:int, b:Int):Int { \n   val result = a+b \n   return result \n} \n```", "```kt\nfun getUser():Pair<Int,String> {//(1) \n    return Pair(1,\"Rivu\") \n} \nfun main(args: Array<String>) { \n    val (userID,userName) = getUser()//(2) \n     println(\"User ID: $userID t User Name: $userName\") \n} \n```", "```kt\nfun countWords(text:String):Int { \n    return text.trim() \n            .split(Pattern.compile(\"\\s+\")) \n            .size \n} \n```", "```kt\nfun String.countWords():Int { \n    return trim() \n            .split(Pattern.compile(\"\\s+\")) \n            .size \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val counts = \"This is an example StringnWith multiple words\".countWords() \n    println(\"Count Words: $counts\") \n} \n```", "```kt\nfun Int.isGreaterThan(anotherNumber:Int):Boolean { \n    return this>anotherNumber \n} \n```", "```kt\nfun Int.isGreaterThan(anotherNumber:Int):Boolean { \n    return this>anotherNumber \n} \nfun Int.isGreaterThan():Boolean { \n    return this.isGreaterThan(0) \n} \n```", "```kt\nfun Int.isGreaterThan(anotherNumber:Int=0):Boolean { \n    return this>anotherNumber \n} \n```", "```kt\nfun main(args: Array<String>) { \n    println(\"5>0: ${5.isGreaterThan()}\") \n    println(\"5>6: ${5.isGreaterThan(6)}\") \n} \n```", "```kt\nfun main(args: Array<String>) { \n    fun nested():String { \n        return \"String from nested function\" \n    } \n    println(\"Nested Output: ${nested()}\") \n} \n```", "```kt\npublic class LambdaIntroClass { \n    interface SomeInterface { \n        void doSomeStuff(); \n    } \n    private static void invokeSomeStuff(SomeInterface someInterface) { \n        someInterface.doSomeStuff(); \n    } \n    public static void main(String[] args) { \n        invokeSomeStuff(new SomeInterface() { \n            @Override \n            public void doSomeStuff() { \n                System.out.println(\"doSomeStuff invoked\"); \n            } \n        }); \n    } \n} \n```", "```kt\npublic class LambdaIntroClass { \n    interface SomeInterface { \n        void doSomeStuff(); \n    } \n    private static void invokeSomeStuff(SomeInterface someInterface) { \n        someInterface.doSomeStuff(); \n    }   \n    public static void main(String[] args) { \n        invokeSomeStuff(()->{ \n                System.out.println(\"doSomeStuff called\"); \n        }); \n    } \n} \n```", "```kt\nfun invokeSomeStuff(doSomeStuff:()->Unit) { \n    doSomeStuff() \n} \nfun main(args: Array<String>) { \n    invokeSomeStuff({ \n        println(\"doSomeStuff called\"); \n    }) \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val sum = { x: Int, y: Int -> x + y }  \n    println(\"Sum ${sum(10,13)}\") \n    println(\"Sum ${sum(50,68)}\") \n} \n```", "```kt\nreverse = { \n        var n = it \n        var revNumber = 0 \n        while (n>0) { \n            val digit = n%10 \n            revNumber=revNumber*10+digit \n            n/=10 \n        } \n        revNumber \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val reverse:(Int)->Int//(1) \n    reverse = {number -> \n        var n = number \n        var revNumber = 0 \n        while (n>0) { \n            val digit = n%10 \n            revNumber=revNumber*10+digit \n            n/=10 \n        } \n        revNumber \n    }// (2) \n    println(\"reverse 123 ${reverse(123)}\") \n    println(\"reverse 456 ${reverse(456)}\") \n    println(\"reverse 789 ${reverse(789)}\") \n} \n```", "```kt\nfun performOperationOnEven(number:Int,operation:(Int)->Int):Int { \n    if(number%2==0) { \n        return operation(number) \n    } else { \n        return number \n    } \n} \nfun main(args: Array<String>) { \n    println(\"Called with 4,(it*2): ${performOperationOnEven(4, \n            {it*2})}\") \n    println(\"Called with 5,(it*2): ${performOperationOnEven(5, \n            {it*2})}\") \n} \n```", "```kt\nfun getAnotherFunction(n:Int):(String)->Unit { \n    return { \n        println(\"n:$n it:$it\") \n    } \n} \nfun main(args: Array<String>) { \n    getAnotherFunction(0)(\"abc\") \n    getAnotherFunction(2)(\"def\") \n    getAnotherFunction(3)(\"ghi\") \n} \n```", "```kt\nclass Calc { \n    var a:Int=0 \n    var b:Int=0 \n    fun addNumbers(a:Int = this.a,b:Int = this.b):Int {  \n        this.a = a \n        this.b = b \n        return a+b \n    } \n} \nfun main(args: Array<String>) { \n    val calc = Calc() \n    println(\"Result is ${calc.addNumbers(10,15)}\") \n} \n```", "```kt\nfun addNumbers(a:Int = 0,b:Int = 0):Int { \n    return a+b \n} \n\nfun main(args: Array<String>) { \n    println() \n} \n```"]