- en: Chapter 10. Extending your Apps With Custom Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章。使用自定义模块扩展您的应用
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Integrating an existing module—the PayPal Mobile Payment Library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成现有模块——PayPal 移动支付库
- en: Preparing your iOS module development environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备您的 iOS 模块开发环境
- en: Developing a new iPhone module using XCode
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XCode 开发新的 iPhone 模块
- en: Creating a public API method
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个公共 API 方法
- en: Packaging and testing your module using the test harness
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试工具包打包和测试您的模块
- en: Packaging your module for distribution and sale
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包您的模块以进行分发和销售
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: While Titanium allows you to create apps that are almost cross-platform, it
    is inevitable that some devices will inherently have operating system and hardware
    differences that are specific to them (particularly between Android and iOS).
    For example, anyone who has used both Android and iPhone devices would immediately
    recognize the very different way the notification systems are set up. However,
    there are other platform-specific limitations that are very specific to the Titanium
    API.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Titanium 允许你创建几乎跨平台的 app，但不可避免的是，某些设备将固有地具有特定于它们的操作系统和硬件差异（尤其是在 Android 和
    iOS 之间）。例如，任何使用过 Android 和 iPhone 设备的人都会立即认识到通知系统设置方式非常不同。然而，还有其他特定于平台的限制，这些限制非常具体于
    Titanium API。
- en: In this chapter, we will be discussing both building and integrating modules
    into your Titanium applications, using the iOS platform as an example. The methods
    of developing Android modules using Java are very similar, however, for our purposes,
    we will just be concentrating on developing modules for iOS using Objective-C
    and XCode.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论构建和将模块集成到您的 Titanium 应用程序中，以 iOS 平台为例。使用 Java 开发 Android 模块的方法非常相似，然而，为了我们的目的，我们只会集中开发使用
    Objective-C 和 XCode 为 iOS 开发的模块。
- en: Integrating an existing module—the PayPal Mobile Payment Library
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成现有模块——PayPal 移动支付库
- en: There are already a number of modules written for the Titanium platform, both
    by Appcelerator themselves and by the community at large. There is even a brand
    new Open Mobile Marketplace where you can buy (and sell) modules to extend the
    platform to even newer and greater heights!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有许多模块是为 Titanium 平台编写的，包括 Appcelerator 本身和整个社区。甚至还有一个全新的开放移动市场，您可以在那里购买（和出售）模块，以将平台扩展到更高、更远的新高度！
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will first need to sign up for the Titanium + Commerce program before you
    can download and use the PayPal Mobile Payment Library. You can do this for free
    at [http://www.appcelerator.com/products/titaniumcommerce/](http://www.appcelerator.com/products/titaniumcommerce/).
    Once you have filled in the required form, simply download the ZIP file titled
    Titanium+Commerce MPL for Paypal Module for iOS to your computer's hard drive.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在您能够下载和使用 PayPal 移动支付库之前，您首先需要注册 Titanium + Commerce 计划。您可以在 [http://www.appcelerator.com/products/titaniumcommerce/](http://www.appcelerator.com/products/titaniumcommerce/)
    上免费注册。填写完所需表格后，只需将名为 Titanium+Commerce MPL for Paypal Module for iOS 的 ZIP 文件下载到您的计算机硬盘上即可。
- en: You must also register your application with PayPal, and on doing so you will
    be provided with an Application ID that you must reference inside your Titanium
    project. You can register for an Application ID from [http://www.paypal.com](http://www.paypal.com).
    Note that the registration of an Application ID also requires you to be a PayPal
    member, so you may be required to sign up first if you have not already done so
    in the past.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须将您的应用程序注册到 PayPal，注册后您将获得一个应用程序 ID，您必须在您的 Titanium 项目中引用该 ID。您可以从 [http://www.paypal.com](http://www.paypal.com)
    注册应用程序 ID。请注意，应用程序 ID 的注册还要求您成为 PayPal 会员，因此如果您之前尚未注册，您可能需要先注册。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 10/Recipe
    1` folder.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可以在 `/Chapter 10/Recipe 1` 文件夹中找到。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: First, you'll need to copy the Paypal module files to the `modules` folder under
    your Titanium installation. On OSX, this is normally located at `/Library/Application
    Support/Titanium/modules`. There should already be a subfolder under modules called
    "iphone". If there is not, create one now, then unzip the module file so that
    you end up with a `ti.paypal` folder, located at `/Library/Application Support/Titanium/modules/iphone/ti.paypal`.
    Take a quick look inside that folder. You should immediately notice that the first
    subfolder underneath it is named "1.0" or possibly "1.2". This is the version
    number of the module you just installed. Pay careful attention to note it down
    as this will be important later on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要将 Paypal 模块文件复制到 Titanium 安装下的 `modules` 文件夹中。在 OSX 上，这通常位于 `/Library/Application
    Support/Titanium/modules`。在模块下应该已经有一个名为 "iphone" 的子文件夹。如果没有，现在创建一个，然后解压模块文件，以便最终得到一个位于
    `/Library/Application Support/Titanium/modules/iphone/ti.paypal` 的 `ti.paypal`
    文件夹。快速浏览一下这个文件夹。您应该立即注意到它下面的第一个子文件夹被命名为 "1.0" 或可能是 "1.2"。这是您刚刚安装的模块的版本号。请仔细注意并记下来，因为这将非常重要。
- en: Once that is completed, the `tiapp.xml` file for your project needs to be edited
    so that the modules section includes our `ti.paypal` module. This reference tells
    the Titanium Studio compiler to add in the module when your project is built.
    Extend the `tiapp.xml` file by adding the following lines underneath the "guid"
    element. Make sure the module version number matches the version number of the
    `ti.paypal` library you just installed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，需要编辑您项目的 `tiapp.xml` 文件，以便模块部分包括我们的 `ti.paypal` 模块。此引用告诉 Titanium Studio
    编译器在构建项目时添加模块。通过在 "guid" 元素下添加以下行来扩展 `tiapp.xml` 文件。请确保模块版本号与您刚刚安装的 `ti.paypal`
    库的版本号匹配。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now back in your `app.js` file, we need to include the module reference at
    the top of the JavaScript like so:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到您的 `app.js` 文件中，我们需要在 JavaScript 的顶部包含模块引用，如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can now use this new variable object to create a PayPal payment button object
    and add it to our window. The PayPal library also includes a number of event listeners
    to handle payment success, error, and cancellation events. Here is a sample of
    how you could use the PayPal library to take a payment donation for the American
    Red Cross, taken from the Appcelerator KitchenSink sample:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用这个新的变量对象来创建 PayPal 支付按钮对象并将其添加到窗口中。PayPal 库还包括一些事件监听器来处理支付成功、错误和取消事件。以下是如何使用
    PayPal 库为美国红十字会进行支付捐赠的示例，该示例取自 Appcelerator KitchenSink 示例：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you have installed the module correctly and updated your `tiapp.xml` file
    correctly, you should see a message saying "Detected third-party module: [Module
    Name]/[Module Version]". In our case, this will say that it has detected the `ti.paypal`
    module.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已正确安装模块并正确更新了 `tiapp.xml` 文件，您应该会看到一个消息说“检测到第三方模块：[模块名称]/[模块版本]”。在我们的情况下，这将表明它已检测到
    `ti.paypal` 模块。
- en: The following is an example of the Red Cross app running and using the PayPal
    module for Titanium. This sample code is available as part of this recipe.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，展示了红十字会应用程序运行并使用 Titanium 的 PayPal 模块。此示例代码是本食谱的一部分。
- en: '![How to do it…](img/3868_10_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3868_10_01.jpg)'
- en: How it works…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once your module has been copied to the modules directory and referenced in
    the `tiapp.xml`, you can use it just like any other piece of native Titanium JavaScript.
    All of the modules public methods and properties have been made available to you
    by the module's developer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的模块被复制到模块目录并在 `tiapp.xml` 中引用，您就可以像使用任何其他原生 Titanium JavaScript 一样使用它。所有模块的公共方法和属性都已由模块的开发者提供给您。
- en: 'More specifically to our PayPal module, once the buyer clicks on the "Paypal"
    purchase button in your app, the Payment checkout process is shown. Whenever an
    important event occurs (for example, payment success), these events are thrown
    and caught by Titanium using the event handlers below. Your application needs
    to incorporate these three handlers:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，针对我们的 PayPal 模块，一旦买家点击您应用中的“Paypal”购买按钮，就会显示支付结账流程。每当发生重要事件（例如，支付成功）时，这些事件都会被
    Titanium 通过以下事件处理器抛出和捕获。您的应用程序需要包含这三个处理器：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When a payment has been successfully transmitted, a transaction ID will be returned
    to your "paymentSuccess" event listener. It should be noted that in this example
    we are using the Paypal Sandbox (Testing) environment, and for a live app you
    would need to change the `paypalEnvironment` variable to `Ti.PayPal.PAYPAL_ENV_LIVE`.
    In the sandbox environment, no actual money is transferred.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当支付成功传输后，一个交易 ID 将返回到你的 "paymentSuccess" 事件监听器。需要注意的是，在这个例子中我们使用的是 Paypal 沙盒（测试）环境，对于实际应用，你需要将
    `paypalEnvironment` 变量更改为 `Ti.PayPal.PAYPAL_ENV_LIVE`。在沙盒环境中，不会实际转账。
- en: There's more…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'Try experimenting with the different properties made available to you in the
    PayPal module. Here''s a list of the most useful properties and their constant
    values:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在 PayPal 模块中实验不同的属性。以下是最有用的属性及其常量值列表：
- en: '| `buttonStyle` | Size and appearance of the PayPal button, the available values
    are:Titanium.Paypal.BUTTON_68x24Titanium.Paypal.BUTTON_118x24Titanium.Paypal.BUTTON_152x33Titanium.Paypal.BUTTON_194x37Titanium.Paypal.BUTTON_278x43Titanium.Paypal.BUTTON_294x43
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `buttonStyle` | PayPal 按钮的大小和外观，可用值有：Titanium.Paypal.BUTTON_68x24Titanium.Paypal.BUTTON_118x24Titanium.Paypal.BUTTON_152x33Titanium.Paypal.BUTTON_194x37Titanium.Paypal.BUTTON_278x43Titanium.Paypal.BUTTON_294x43
    |'
- en: '| `paypalEnvironment` | Available values are:Titanium.Paypal.PAYPAL_ENV_LIVETitanium.Paypal.PAYPAL_ENV_SANDBOXTitanium.Paypal.PAYPAL_ENV_NONE
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `paypalEnvironment` | 可用值有：Titanium.Paypal.PAYPAL_ENV_LIVETitanium.Paypal.PAYPAL_ENV_SANDBOXTitanium.Paypal.PAYPAL_ENV_NONE
    |'
- en: '| `feePaidByReceiver` | This will only be applied when the transaction type
    is Personal.Available values are:truefalse |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `feePaidByReceiver` | 这仅在交易类型为 Personal 时适用。可用值有：truefalse |'
- en: '| `transactionType` | The type of payment being made (what the payment is for).Available
    values are:Titanium.Paypal.PAYMENT_TYPE_HARD_GOODSTitanium.Paypal.PAYMENT_TYPE_DONATIONTitanium.Paypal.PAYMENT_TYPE_PERSONALTitanium.Paypal.PAYMENT_TYPE_SERVICE
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `transactionType` | 正在进行的付款类型（付款是为了什么）。可用值有：Titanium.Paypal.PAYMENT_TYPE_HARD_GOODSTitanium.Paypal.PAYMENT_TYPE_DONATIONTitanium.Paypal.PAYMENT_TYPE_PERSONALTitanium.Paypal.PAYMENT_TYPE_SERVICE
    |'
- en: '| `enableShipping` | Whether or not to select/send shipping information.Available
    values are:truefalse |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `enableShipping` | 是否选择/发送运输信息。可用值有：truefalse |'
- en: Preparing your iOS module development environment
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备你的 iOS 模块开发环境
- en: Before you can start to develop your own custom iOS modules, you will first
    need to set up your environment correctly. This involves setting up an alias to
    the `titanium.py` script in your Titanium SDK path.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始开发自己的自定义 iOS 模块之前，你首先需要正确设置你的环境。这包括在你的 Titanium SDK 路径中设置对 `titanium.py`
    脚本的别名。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The following instructions are for Mac OSX only. It is possible to develop Android
    modules on Linux and Windows, as well as OSX. However, for this recipe, we will
    be concentrating on iOS module development, which requires an Apple Mac, running
    OSX 10.5, or above.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明仅适用于 Mac OSX。你可以在 Linux、Windows 以及 OSX 上开发 Android 模块。然而，在这个菜谱中，我们将专注于 iOS
    模块开发，这需要一个运行 OSX 10.5 或更高版本的 Apple Mac。
- en: How to do it…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Open the **Terminal** application, which you will find under **Applications**
    | **Utilities** | **Terminal**.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **终端** 应用程序，你可以在 **应用程序** | **实用工具** | **终端** 下找到它。
- en: Type in `cd $HOME` and press *Enter*.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `cd $HOME` 并按 *Enter* 键。
- en: Type in `vi .bash_profile` and press *Enter*. If you have not created a `bash_profile`
    before, then you will be creating a new file now, otherwise it will load your
    existing `bash_profile` script.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `vi .bash_profile` 并按 *Enter* 键。如果你之前没有创建过 `bash_profile`，那么现在你会创建一个新文件，否则它将加载你的现有
    `bash_profile` 脚本。
- en: 'Add the following line to your script: "`alias titanium=''/Library/Application\
    Support/Titanium/mobilesdk/osx/1.7.2/titanium.py''`"—where 1.7.2 is the latest
    version of the Titanium SDK you currently have installed. Pay careful attention
    and ensure your Titanium SDK path is correct and the path location is surrounded
    by single quotation characters.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的脚本中添加以下行："`alias titanium='/Library/Application\ Support/Titanium/mobilesdk/osx/1.7.2/titanium.py'`"—其中
    1.7.2 是你目前安装的 Titanium SDK 的最新版本。请仔细注意并确保你的 Titanium SDK 路径正确，并且路径位置被单引号包围。
- en: Save the file by pressing the *Esc* key, and then type "`:wq`". This will save
    your file and then exit the editor.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Esc* 键保存文件，然后输入 "`:wq`"。这将保存你的文件并退出编辑器。
- en: Back in Terminal, type "`source ~/.bash_profile`" and press *Enter*.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到终端，输入 "`source ~/.bash_profile`" 并按 *Enter* 键。
- en: Now type in "`titanium`" and press *Enter*. If you have set up the script correctly,
    you will see an output from Appcelerator in your Terminal window like the one
    seen in the following screenshot.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入 "`titanium`" 并按 *Enter*。如果你已经正确设置了脚本，你将在终端窗口中看到 Appcelerator 的输出，就像以下截图所示。
- en: 'Leave the Terminal window open since it will be required in the next recipes:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持终端窗口打开，因为它将在下一个菜谱中需要：
- en: '![How to do it…](img/3968_10_02.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3968_10_02.jpg)'
- en: 'To test that your environment is now set up correctly, type the following into
    the Terminal window:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试你的环境是否已经正确设置，请在终端窗口中输入以下内容：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If everything has worked, you will see the following output in the Terminal
    window. You can verify the files this script created by navigating to the `/tmp/test`
    directory under finder (note that the `tmp` directory will be under your user
    accounts `Home` folder).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你将在终端窗口中看到以下输出。你可以通过在 finder 中导航到 `/tmp/test` 目录来验证此脚本创建的文件（注意，`tmp`
    目录将在你的用户账户的 `Home` 文件夹下）。
- en: '![How to do it…](img/3968_10_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3968_10_03.jpg)'
- en: How it works…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Essentially, all we are doing here is setting a way to execute Titanium scripts
    from the console using an alias. This means we can use simple commands such as
    "titanium create" instead of attempting to do the same thing manually by executing
    long-winded commands in the Terminal.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们在这里所做的只是设置一种从控制台使用别名执行 Titanium 脚本的方式。这意味着我们可以使用像 "titanium create" 这样的简单命令，而不是尝试通过在终端中执行冗长的命令来手动完成相同的事情。
- en: Developing a new iPhone module using XCode
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 XCode 开发新的 iPhone 模块
- en: Developing our own custom modules for Titanium allows us to leverage native
    code and make Titanium do things that it otherwise couldn't, or at least doesn't
    currently do. For this recipe, we are going to develop a small module that uses
    `Bit.ly` to shorten a long URL. You can use this module in any of your iOS apps
    whenever you need to create a short URL (such as when posting a link to Twitter!).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Titanium 开发我们自己的自定义模块使我们能够利用本地代码，并让 Titanium 执行它原本无法执行或至少目前无法执行的事情。在这个菜谱中，我们将开发一个小模块，该模块使用
    `Bit.ly` 来缩短长 URL。你可以在任何 iOS 应用程序中需要创建短 URL 时使用此模块（例如，在 Twitter 上发布链接时）。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will first need to have set up your Mac using the steps described in the
    previous recipe. Make sure you follow the steps and that your system is set up
    correctly, as this recipe relies heavily on those scripts working. You will also
    need some working knowledge of Objective-C for this recipe. This book doesn't
    try to teach Objective-C in any way as, there are plenty of weighty tomes for
    that already. However, you should, be able to follow along with the code in this
    recipe to get our sample module working.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先需要按照前一个菜谱中描述的步骤设置你的 Mac。确保你遵循这些步骤并且系统设置正确，因为这个菜谱在很大程度上依赖于这些脚本的正常工作。你还需要对这个菜谱有一定的
    Objective-C 知识。这本书不会以任何方式教授 Objective-C，因为已经有足够多的重量级书籍了。然而，你应该能够跟随这个菜谱中的代码，以便让我们的示例模块正常工作。
- en: How to do it…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To begin, let''s create the basic module using the same script we used in the
    previous recipe. In the Terminal window, type the following (substituting the
    `/Projects` directory for whichever directory you wish to create your module in):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用之前菜谱中使用的相同脚本创建基本模块。在终端窗口中，输入以下内容（将 `/Projects` 目录替换为你希望创建模块的目录）：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now open the `/Projects/BitlyModule` directory in Finder, and what you will
    see is a list of mostly standard looking XCode project files. Double click the
    `BitlyModule.xcodeproj` file to open it up in XCode for editing.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 Finder 中打开 `/Projects/BitlyModule` 目录，你将看到主要是标准外观的 XCode 项目文件列表。双击 `BitlyModule.xcodeproj`
    文件以在 XCode 中打开它进行编辑。
- en: How it works…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The following information comes straight from the Appcelerator guide (available
    at [http://wiki.appcelerator.org/display/guides/Module+Developer+Guide+for+iOS)](http://wiki.appcelerator.org/display/guides/Module+Developer+Guide+for+iOS))
    and is a good introduction to understanding the architecture of a Titanium module.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信息直接来自 Appcelerator 指南（可在 [http://wiki.appcelerator.org/display/guides/Module+Developer+Guide+for+iOS](http://wiki.appcelerator.org/display/guides/Module+Developer+Guide+for+iOS)
    查找）并且是了解 Titanium 模块架构的良好入门。
- en: 'The Module architecture contains the following key interface components:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 模块架构包含以下关键接口组件：
- en: '**Proxy:** A base class that represents the native binding between your JavaScript
    code and native code.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代理**：一个基类，代表你的 JavaScript 代码和本地代码之间的原生绑定。'
- en: '**ViewProxy:** A specialized Proxy that knows how to render Views.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**ViewProxy**：一种专门化的代理，知道如何渲染视图。'
- en: '**View:** The visual representation of a UI component that Titanium can render.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**View**：Titanium可以渲染的UI组件的视觉表示。'
- en: '**Module:** A special type of Proxy that describes a specific API set, or namespace.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Module**：描述特定API集或命名空间的特殊类型的代理。'
- en: When building a Module, you can only have one Module class but you can have
    zero or more Proxies, Views, and `ViewProxies`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建一个模块时，你只能有一个模块类，但你可以有零个或多个代理（Proxies）、视图（Views）和`ViewProxies`。
- en: For each `View`, you will need a `ViewProxy`. The `ViewProxy` represents the
    model data (which is kept inside the proxy itself in case the View needs to be
    released) and is responsible for exposing the APIs and events that the View supports.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个`View`，你需要一个`ViewProxy`。`ViewProxy`代表模型数据（如果视图需要释放，则数据保存在代理内部），并负责公开视图支持的API和事件。
- en: You create a Proxy when you want to return non-visual data between JavaScript
    and native. The Proxy knows how to handle any method and property dispatching
    and event firing.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想在JavaScript和本地之间返回非视觉数据时，你会创建一个代理。代理知道如何处理任何方法、属性分配和事件触发。
- en: Creating a public API method
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建公共API方法
- en: The sample module code that Titanium creates as part of its module create process
    already provides us with a sample of a public method. We are going to create our
    own though which accepts a single string input value (the "long" URL) and then
    processes the short URL via the `Bit.ly` API before returning it to our Titanium
    app.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium在模块创建过程中创建的示例模块代码已经为我们提供了一个公共方法的示例。我们虽然会创建自己的，但这个方法接受一个单个的字符串输入值（即“长”URL），然后通过`Bit.ly`
    API处理短URL，最后将其返回到我们的Titanium应用程序中。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before you can use the module, you''ll need to sign up for a Bitly API Key,
    which you can do for free at: [https://bitly.com/a/sign_up?rd=/a/your_api_key](http://https://bitly.com/a/sign_up?rd=/a/your_api_key).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以使用模块之前，您需要注册一个Bitly API密钥，您可以在[https://bitly.com/a/sign_up?rd=/a/your_api_key](http://https://bitly.com/a/sign_up?rd=/a/your_api_key)免费注册。
- en: Additionally, we're going to need the open source SBJSON framework for Objective-C,
    which is capable of natively reading and writing JSON formatted data streams.
    You can download the SBJSON framework from [https://github.com/stig/json-framework/](http://https://github.com/stig/json-framework/).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要Objective-C的开放源代码SBJSON框架，它能够原生地读取和写入JSON格式的数据流。您可以从[https://github.com/stig/json-framework/](http://https://github.com/stig/json-framework/)下载SBJSON框架。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 10/Recipe
    4` folder.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可以在`/Chapter 10/Recipe 4`文件夹中找到。
- en: How to do it…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: First, unzip the SBJSON framework, and drag all of the files from the `Classes`
    folder in Finder to the `Classes` folder in your module's XCode project.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，解压SBJSON框架，并将Finder中的`Classes`文件夹中的所有文件拖到您的模块XCode项目的`Classes`文件夹中。
- en: 'Open up `ComPacktpubBitlyModuleModule.h` and ensure it looks like the following
    (ignoring the header comments at the top of the file):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`ComPacktpubBitlyModuleModule.h`文件，确保它看起来如下（忽略文件顶部的头注释）：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now open the `ComPacktpubBitlyModuleModule.m` file and ensure it looks like
    the following source code (ignoring the header comments at the top of the file).
    Remember to replace the `login` and `key` values in the `QueryString` section
    of the URL with those you were assigned by the `Bit.ly` API:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开`ComPacktpubBitlyModuleModule.m`文件，确保它看起来如下源代码（忽略文件顶部的头注释）。请记住，将URL的`QueryString`部分的`login`和`key`值替换为`Bit.ly`
    API分配给你的值：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The main function here is the one we created, called `getShortUrl`. All other
    methods and properties for the module have been auto-generated for us by the Titanium
    module creation scripts. This method, in short, executes a request against the
    `Bit.ly` API using our key and username, and when a response is received, it is
    parsed using the SBJSON parser. The resulting `shortURL` variable (of type `NSString)`
    is then pulled out of the shortURL element of the JSON result, and returned back
    to Titanium.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主函数是我们创建的，称为`getShortUrl`。模块的所有其他方法和属性都由Titanium模块创建脚本为我们自动生成。简而言之，此方法执行对`Bit.ly`
    API的请求，使用我们的密钥和用户名，当收到响应时，使用SBJSON解析器进行解析。然后从JSON结果的`shortURL`元素中提取出`shortURL`变量（`NSString`类型），并将其返回到Titanium。
- en: What we want to concentrate on here is the integration of the Titanium public
    method, and how the "value" argument is translated. Here we're using the `(id)`
    declaration, which allows us to easily typecast the incoming value to a parameter
    type that Objective-C understands. In this case, we are typecasting the "value"
    parameter to a type of `NSString`, as we know the incoming parameter is going
    to be a string value in the format of a web address. This conversion process is
    thanks to **TiUtils**, which we've imported at the top of our file using the `#import
    "TiUtils.h"` command.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里想要关注的是Titanium公共方法的集成以及“value”参数的转换。在这里，我们使用`(id)`声明，这使得我们可以轻松地将传入的值转换为Objective-C理解的参数类型。在这种情况下，我们将“value”参数转换为`NSString`类型，因为我们知道传入的参数将是一个格式为网址的字符串值。这个转换过程要归功于**TiUtils**，我们在文件顶部使用`#import
    "TiUtils.h"`命令导入。
- en: 'Some of the most common conversion examples are:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最常见的转换示例包括：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We are also returning a string value which is either an error message (if the
    `Bit.Ly` conversion process failed) or, hopefully, the new short URL that `Bit.Ly`
    has kindly provided us. As we are returning a string, we don't need to perform
    a conversion before returning the parameter.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还返回一个字符串值，它要么是错误消息（如果`Bit.Ly`转换过程失败），要么是希望中的新短网址，这是`Bit.Ly`友好地提供的。由于我们返回的是字符串，我们不需要在返回参数之前执行转换。
- en: 'The following types can be returned without the need for typecasting:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类型可以在不进行类型转换的情况下返回：
- en: '`NSString`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSString`'
- en: '`NSDictionary`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSDictionary`'
- en: '`NSArray`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSArray`'
- en: '`NSNumber`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSNumber`'
- en: '`NSDate`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSDate`'
- en: '`NSNull`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSNull`'
- en: Packaging and testing your module using the test harness
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用测试工具包打包和测试你的模块
- en: Now it's time to build, package, and test our new module! Before you go ahead
    with this recipe, make sure you've built the XCode project and it has been successful.
    If not, you will need to fix any errors before continuing.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候构建、打包和测试我们的新模块了！在你继续这个菜谱之前，确保你已经构建了XCode项目并且它已经成功。如果没有，你需要在继续之前修复任何错误。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 10/Recipe
    5` folder.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱的完整源代码可以在`/Chapter 10/Recipe 5`文件夹中找到。
- en: How to do it…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Open up the `app.js` example file for our module, you''ll find it within the
    `example` directory of your module project. Replace the existing sample contents
    with the following source code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的模块的`app.js`示例文件，你可以在模块项目的`example`目录中找到它。用以下源代码替换现有的示例内容：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, back in the Terminal, change directory so that you are in your `BitLyModule`
    directory (assuming you still have the Terminal window open from a previous recipe,
    you should already be there).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到终端，更改目录，确保你位于你的`BitLyModule`目录中（假设你仍然从之前的菜谱中打开了终端窗口，你应该已经在那里了）。
- en: 'Type `./build.py` into the Terminal, and press *Enter* to execute the command.
    When it completes, type `titanium run` and press *Enter*. If all has gone well,
    you should see the iPhone simulator launch after 20 or 30 seconds, with our example
    Titanium application visible, which consists of two `TextFields` and the `BitLy`
    conversion button. Type a long URL into the first `TextField` and press **Shorten
    it with Bit.ly!** as seen in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输入`./build.py`，然后按*Enter*键执行命令。当它完成后，输入`titanium run`并按*Enter*键。如果一切顺利，你应该在20或30秒后看到iPhone模拟器启动，我们的示例Titanium应用程序可见，它由两个`TextFields`和`BitLy`转换按钮组成。在第一个`TextField`中输入一个长网址，然后按**使用Bit.ly缩短它！**，如以下截图所示：
- en: '![How to do it…](img/3968_10_04.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/3968_10_04.jpg)'
- en: How it works…
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Let''s concentrate on the Titanium code used to build and launch our module
    via the example project. As you can see, one of the very first lines in our sample
    JavaScript is the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们集中精力研究用于通过示例项目构建和启动我们的模块的Titanium代码。正如你所看到的，我们样本JavaScript中的第一行非常关键：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code instantiates our module, and defines it as a new variable called
    `bitlymodule`. We can then use our module just like any other regular Titanium
    control, by calling our own custom method, and returning the result before displaying
    it in the `shortURL` text field:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码实例化我们的模块，并将其定义为名为`bitlymodule`的新变量。然后我们可以像使用任何其他常规Titanium控件一样使用我们的模块，通过调用我们自己的自定义方法，并在将其显示在`shortURL`文本字段之前返回结果：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Packaging your module for distribution and sale
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包你的模块以进行分发和销售
- en: Titanium modules are created in a way that allows for easy distribution and
    re-use, both in your own apps or the Titanium+Plus Marketplace. In this recipe,
    we will go through the steps required to package your module and then distribute
    it to the marketplace.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium模块是以便于分发和重用的方式创建的，无论是在您自己的应用程序中还是在Titanium+Plus市场中。在本食谱中，我们将介绍打包您的模块并将其分发给市场的步骤。
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this chapter can be found in the `/Chapter 10`
    folder, along with the compiled version of the `Bit.Ly` module.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整源代码可以在`/Chapter 10`文件夹中找到，包括`Bit.Ly`模块的编译版本。
- en: How to do it…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The first requirement is to edit the manifest file that is automatically generated
    when you created your module. Below is an example taken from our `BitlyModule:`
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项要求是编辑在创建模块时自动生成的清单文件。以下是一个从我们的`BitlyModule:`中摘取的示例：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Anything below the `# these should not be edited` line should be left alone,
    but go ahead and replace all of the other key/value pairs with your own name,
    description, license, version, and copyright text. Once you have completed editing
    the manifest file, rebuild your module using by typing `./build.py` into the Terminal,
    and press *Enter* to execute the command.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在`# these should not be edited`行以下的内容不应被编辑，但请将所有其他键值对替换为您自己的姓名、描述、许可、版本和版权文本。一旦您完成编辑清单文件，请通过在终端中输入`./build.py`来重新构建您的模块，并按*Enter*键执行命令。
- en: Your module is now ready for use in your own projects or for manual distribution.
    Simply copy the contents of the ZIP file to your copied into the `/Library/Application/
    Support/Titanium` directory for it to be installed. You will of course still need
    to include your module using the `require` method call in your `app.js` file,
    and you'll need to reference it in your `tiapp.xml` file as you did in the first
    recipe of this chapter for the mobile PayPal library.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您的模块现在已准备好用于您自己的项目或手动分发。只需将ZIP文件的内容复制到`/Library/Application/ Support/Titanium`目录中即可安装。当然，您仍然需要在`app.js`文件中使用`require`方法调用包含您的模块，并且您需要在`tiapp.xml`文件中引用它，就像在本章的第一个食谱中为移动PayPal库所做的那样。
- en: 'You can distribute your module to the Open Mobile Marketplace using the same
    ZIP file package that was created in the build process. However, there are several
    prerequisites you''ll need to fulfill before you can distribute:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用在构建过程中创建的相同ZIP文件包将您的模块分发到Open Mobile市场。然而，在您能够分发之前，您需要满足以下几个先决条件：
- en: You must have a valid Titanium developer account.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须拥有有效的Titanium开发者账户。
- en: You must have fully completed filling our your manifest values.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须完全填写您的清单值。
- en: You must have a valid license text in the LICENSE file in your project.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的项目中`LICENSE`文件必须包含有效的许可文本。
- en: You must have a valid documentation file in the `index.md` file in your documentation
    directory of your project.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的项目文档目录中的`index.md`文件必须包含有效的文档文件。
- en: You must specify some additional metadata upon upload such as the price (which
    can be free).
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上传时，您必须指定一些额外的元数据，例如价格（可以是免费的）。
- en: If you are charging for your module, you must establish a payment setup with
    Appcelerator so that you can be paid.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您对模块收费，您必须与Appcelerator建立支付设置，以便您能收到付款。
- en: You must accept the Titanium+Plus Marketplace terms of service agreement.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须接受Titanium+Plus市场服务条款协议。
- en: Once you have uploaded your module and completed the necessary submission steps,
    your module will be made available to the marketplace directory. Note that the
    first time you submit a module Appcelerator will review your module for the basic
    requirements above.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您上传了模块并完成了必要的提交步骤，您的模块将可供市场目录使用。请注意，第一次提交模块时，Appcelerator将对上述基本要求进行审核。
- en: How it works…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The new Appcelerator marketplace makes it easy for developers to build, sell,
    and distribute their own custom Titanium modules, for both iOS and Android. All
    you need to do is set up a profile for your product and provide your PayPal account
    details in order to be paid for each sale you make.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Appcelerator市场使开发者能够轻松地构建、销售和分发他们自己的自定义Titanium模块，适用于iOS和Android。您需要做的只是为您的产品设置一个配置文件，并提供您的PayPal账户详细信息，以便为每次销售获得付款。
- en: Developers make 70 percent of all products they sell through the Open Mobile
    Marketplace, and there are a number of tools available to keep track of your customers,
    invoices, and feedback. You can sign up today at [https://marketplace.appcelerator.com/cms/landing](http://https://marketplace.appcelerator.com/cms/landing).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者通过开放移动市场销售了他们70%的产品，并且有众多工具可供追踪您的客户、发票和反馈。您今天就可以在[https://marketplace.appcelerator.com/cms/landing](http://https://marketplace.appcelerator.com/cms/landing)注册。
