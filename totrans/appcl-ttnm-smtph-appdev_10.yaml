- en: Chapter 10. Extending your Apps With Custom Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating an existing module—the PayPal Mobile Payment Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your iOS module development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a new iPhone module using XCode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a public API method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging and testing your module using the test harness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging your module for distribution and sale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Titanium allows you to create apps that are almost cross-platform, it
    is inevitable that some devices will inherently have operating system and hardware
    differences that are specific to them (particularly between Android and iOS).
    For example, anyone who has used both Android and iPhone devices would immediately
    recognize the very different way the notification systems are set up. However,
    there are other platform-specific limitations that are very specific to the Titanium
    API.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be discussing both building and integrating modules
    into your Titanium applications, using the iOS platform as an example. The methods
    of developing Android modules using Java are very similar, however, for our purposes,
    we will just be concentrating on developing modules for iOS using Objective-C
    and XCode.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating an existing module—the PayPal Mobile Payment Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are already a number of modules written for the Titanium platform, both
    by Appcelerator themselves and by the community at large. There is even a brand
    new Open Mobile Marketplace where you can buy (and sell) modules to extend the
    platform to even newer and greater heights!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will first need to sign up for the Titanium + Commerce program before you
    can download and use the PayPal Mobile Payment Library. You can do this for free
    at [http://www.appcelerator.com/products/titaniumcommerce/](http://www.appcelerator.com/products/titaniumcommerce/).
    Once you have filled in the required form, simply download the ZIP file titled
    Titanium+Commerce MPL for Paypal Module for iOS to your computer's hard drive.
  prefs: []
  type: TYPE_NORMAL
- en: You must also register your application with PayPal, and on doing so you will
    be provided with an Application ID that you must reference inside your Titanium
    project. You can register for an Application ID from [http://www.paypal.com](http://www.paypal.com).
    Note that the registration of an Application ID also requires you to be a PayPal
    member, so you may be required to sign up first if you have not already done so
    in the past.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 10/Recipe
    1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you'll need to copy the Paypal module files to the `modules` folder under
    your Titanium installation. On OSX, this is normally located at `/Library/Application
    Support/Titanium/modules`. There should already be a subfolder under modules called
    "iphone". If there is not, create one now, then unzip the module file so that
    you end up with a `ti.paypal` folder, located at `/Library/Application Support/Titanium/modules/iphone/ti.paypal`.
    Take a quick look inside that folder. You should immediately notice that the first
    subfolder underneath it is named "1.0" or possibly "1.2". This is the version
    number of the module you just installed. Pay careful attention to note it down
    as this will be important later on.
  prefs: []
  type: TYPE_NORMAL
- en: Once that is completed, the `tiapp.xml` file for your project needs to be edited
    so that the modules section includes our `ti.paypal` module. This reference tells
    the Titanium Studio compiler to add in the module when your project is built.
    Extend the `tiapp.xml` file by adding the following lines underneath the "guid"
    element. Make sure the module version number matches the version number of the
    `ti.paypal` library you just installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now back in your `app.js` file, we need to include the module reference at
    the top of the JavaScript like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use this new variable object to create a PayPal payment button object
    and add it to our window. The PayPal library also includes a number of event listeners
    to handle payment success, error, and cancellation events. Here is a sample of
    how you could use the PayPal library to take a payment donation for the American
    Red Cross, taken from the Appcelerator KitchenSink sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have installed the module correctly and updated your `tiapp.xml` file
    correctly, you should see a message saying "Detected third-party module: [Module
    Name]/[Module Version]". In our case, this will say that it has detected the `ti.paypal`
    module.'
  prefs: []
  type: TYPE_NORMAL
- en: The following is an example of the Red Cross app running and using the PayPal
    module for Titanium. This sample code is available as part of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3868_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once your module has been copied to the modules directory and referenced in
    the `tiapp.xml`, you can use it just like any other piece of native Titanium JavaScript.
    All of the modules public methods and properties have been made available to you
    by the module's developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically to our PayPal module, once the buyer clicks on the "Paypal"
    purchase button in your app, the Payment checkout process is shown. Whenever an
    important event occurs (for example, payment success), these events are thrown
    and caught by Titanium using the event handlers below. Your application needs
    to incorporate these three handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When a payment has been successfully transmitted, a transaction ID will be returned
    to your "paymentSuccess" event listener. It should be noted that in this example
    we are using the Paypal Sandbox (Testing) environment, and for a live app you
    would need to change the `paypalEnvironment` variable to `Ti.PayPal.PAYPAL_ENV_LIVE`.
    In the sandbox environment, no actual money is transferred.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try experimenting with the different properties made available to you in the
    PayPal module. Here''s a list of the most useful properties and their constant
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `buttonStyle` | Size and appearance of the PayPal button, the available values
    are:Titanium.Paypal.BUTTON_68x24Titanium.Paypal.BUTTON_118x24Titanium.Paypal.BUTTON_152x33Titanium.Paypal.BUTTON_194x37Titanium.Paypal.BUTTON_278x43Titanium.Paypal.BUTTON_294x43
    |'
  prefs: []
  type: TYPE_TB
- en: '| `paypalEnvironment` | Available values are:Titanium.Paypal.PAYPAL_ENV_LIVETitanium.Paypal.PAYPAL_ENV_SANDBOXTitanium.Paypal.PAYPAL_ENV_NONE
    |'
  prefs: []
  type: TYPE_TB
- en: '| `feePaidByReceiver` | This will only be applied when the transaction type
    is Personal.Available values are:truefalse |'
  prefs: []
  type: TYPE_TB
- en: '| `transactionType` | The type of payment being made (what the payment is for).Available
    values are:Titanium.Paypal.PAYMENT_TYPE_HARD_GOODSTitanium.Paypal.PAYMENT_TYPE_DONATIONTitanium.Paypal.PAYMENT_TYPE_PERSONALTitanium.Paypal.PAYMENT_TYPE_SERVICE
    |'
  prefs: []
  type: TYPE_TB
- en: '| `enableShipping` | Whether or not to select/send shipping information.Available
    values are:truefalse |'
  prefs: []
  type: TYPE_TB
- en: Preparing your iOS module development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you can start to develop your own custom iOS modules, you will first
    need to set up your environment correctly. This involves setting up an alias to
    the `titanium.py` script in your Titanium SDK path.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following instructions are for Mac OSX only. It is possible to develop Android
    modules on Linux and Windows, as well as OSX. However, for this recipe, we will
    be concentrating on iOS module development, which requires an Apple Mac, running
    OSX 10.5, or above.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the **Terminal** application, which you will find under **Applications**
    | **Utilities** | **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `cd $HOME` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `vi .bash_profile` and press *Enter*. If you have not created a `bash_profile`
    before, then you will be creating a new file now, otherwise it will load your
    existing `bash_profile` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line to your script: "`alias titanium=''/Library/Application\
    Support/Titanium/mobilesdk/osx/1.7.2/titanium.py''`"—where 1.7.2 is the latest
    version of the Titanium SDK you currently have installed. Pay careful attention
    and ensure your Titanium SDK path is correct and the path location is surrounded
    by single quotation characters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file by pressing the *Esc* key, and then type "`:wq`". This will save
    your file and then exit the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in Terminal, type "`source ~/.bash_profile`" and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now type in "`titanium`" and press *Enter*. If you have set up the script correctly,
    you will see an output from Appcelerator in your Terminal window like the one
    seen in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Leave the Terminal window open since it will be required in the next recipes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To test that your environment is now set up correctly, type the following into
    the Terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If everything has worked, you will see the following output in the Terminal
    window. You can verify the files this script created by navigating to the `/tmp/test`
    directory under finder (note that the `tmp` directory will be under your user
    accounts `Home` folder).
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Essentially, all we are doing here is setting a way to execute Titanium scripts
    from the console using an alias. This means we can use simple commands such as
    "titanium create" instead of attempting to do the same thing manually by executing
    long-winded commands in the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a new iPhone module using XCode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing our own custom modules for Titanium allows us to leverage native
    code and make Titanium do things that it otherwise couldn't, or at least doesn't
    currently do. For this recipe, we are going to develop a small module that uses
    `Bit.ly` to shorten a long URL. You can use this module in any of your iOS apps
    whenever you need to create a short URL (such as when posting a link to Twitter!).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will first need to have set up your Mac using the steps described in the
    previous recipe. Make sure you follow the steps and that your system is set up
    correctly, as this recipe relies heavily on those scripts working. You will also
    need some working knowledge of Objective-C for this recipe. This book doesn't
    try to teach Objective-C in any way as, there are plenty of weighty tomes for
    that already. However, you should, be able to follow along with the code in this
    recipe to get our sample module working.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, let''s create the basic module using the same script we used in the
    previous recipe. In the Terminal window, type the following (substituting the
    `/Projects` directory for whichever directory you wish to create your module in):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now open the `/Projects/BitlyModule` directory in Finder, and what you will
    see is a list of mostly standard looking XCode project files. Double click the
    `BitlyModule.xcodeproj` file to open it up in XCode for editing.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following information comes straight from the Appcelerator guide (available
    at [http://wiki.appcelerator.org/display/guides/Module+Developer+Guide+for+iOS)](http://wiki.appcelerator.org/display/guides/Module+Developer+Guide+for+iOS))
    and is a good introduction to understanding the architecture of a Titanium module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Module architecture contains the following key interface components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Proxy:** A base class that represents the native binding between your JavaScript
    code and native code.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ViewProxy:** A specialized Proxy that knows how to render Views.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**View:** The visual representation of a UI component that Titanium can render.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Module:** A special type of Proxy that describes a specific API set, or namespace.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When building a Module, you can only have one Module class but you can have
    zero or more Proxies, Views, and `ViewProxies`.
  prefs: []
  type: TYPE_NORMAL
- en: For each `View`, you will need a `ViewProxy`. The `ViewProxy` represents the
    model data (which is kept inside the proxy itself in case the View needs to be
    released) and is responsible for exposing the APIs and events that the View supports.
  prefs: []
  type: TYPE_NORMAL
- en: You create a Proxy when you want to return non-visual data between JavaScript
    and native. The Proxy knows how to handle any method and property dispatching
    and event firing.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a public API method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The sample module code that Titanium creates as part of its module create process
    already provides us with a sample of a public method. We are going to create our
    own though which accepts a single string input value (the "long" URL) and then
    processes the short URL via the `Bit.ly` API before returning it to our Titanium
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you can use the module, you''ll need to sign up for a Bitly API Key,
    which you can do for free at: [https://bitly.com/a/sign_up?rd=/a/your_api_key](http://https://bitly.com/a/sign_up?rd=/a/your_api_key).'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we're going to need the open source SBJSON framework for Objective-C,
    which is capable of natively reading and writing JSON formatted data streams.
    You can download the SBJSON framework from [https://github.com/stig/json-framework/](http://https://github.com/stig/json-framework/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 10/Recipe
    4` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, unzip the SBJSON framework, and drag all of the files from the `Classes`
    folder in Finder to the `Classes` folder in your module's XCode project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up `ComPacktpubBitlyModuleModule.h` and ensure it looks like the following
    (ignoring the header comments at the top of the file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the `ComPacktpubBitlyModuleModule.m` file and ensure it looks like
    the following source code (ignoring the header comments at the top of the file).
    Remember to replace the `login` and `key` values in the `QueryString` section
    of the URL with those you were assigned by the `Bit.ly` API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main function here is the one we created, called `getShortUrl`. All other
    methods and properties for the module have been auto-generated for us by the Titanium
    module creation scripts. This method, in short, executes a request against the
    `Bit.ly` API using our key and username, and when a response is received, it is
    parsed using the SBJSON parser. The resulting `shortURL` variable (of type `NSString)`
    is then pulled out of the shortURL element of the JSON result, and returned back
    to Titanium.
  prefs: []
  type: TYPE_NORMAL
- en: What we want to concentrate on here is the integration of the Titanium public
    method, and how the "value" argument is translated. Here we're using the `(id)`
    declaration, which allows us to easily typecast the incoming value to a parameter
    type that Objective-C understands. In this case, we are typecasting the "value"
    parameter to a type of `NSString`, as we know the incoming parameter is going
    to be a string value in the format of a web address. This conversion process is
    thanks to **TiUtils**, which we've imported at the top of our file using the `#import
    "TiUtils.h"` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most common conversion examples are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We are also returning a string value which is either an error message (if the
    `Bit.Ly` conversion process failed) or, hopefully, the new short URL that `Bit.Ly`
    has kindly provided us. As we are returning a string, we don't need to perform
    a conversion before returning the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following types can be returned without the need for typecasting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NSString`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSDictionary`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSArray`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSNumber`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSDate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSNull`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging and testing your module using the test harness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it's time to build, package, and test our new module! Before you go ahead
    with this recipe, make sure you've built the XCode project and it has been successful.
    If not, you will need to fix any errors before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 10/Recipe
    5` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open up the `app.js` example file for our module, you''ll find it within the
    `example` directory of your module project. Replace the existing sample contents
    with the following source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, back in the Terminal, change directory so that you are in your `BitLyModule`
    directory (assuming you still have the Terminal window open from a previous recipe,
    you should already be there).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `./build.py` into the Terminal, and press *Enter* to execute the command.
    When it completes, type `titanium run` and press *Enter*. If all has gone well,
    you should see the iPhone simulator launch after 20 or 30 seconds, with our example
    Titanium application visible, which consists of two `TextFields` and the `BitLy`
    conversion button. Type a long URL into the first `TextField` and press **Shorten
    it with Bit.ly!** as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s concentrate on the Titanium code used to build and launch our module
    via the example project. As you can see, one of the very first lines in our sample
    JavaScript is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This code instantiates our module, and defines it as a new variable called
    `bitlymodule`. We can then use our module just like any other regular Titanium
    control, by calling our own custom method, and returning the result before displaying
    it in the `shortURL` text field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Packaging your module for distribution and sale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Titanium modules are created in a way that allows for easy distribution and
    re-use, both in your own apps or the Titanium+Plus Marketplace. In this recipe,
    we will go through the steps required to package your module and then distribute
    it to the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this chapter can be found in the `/Chapter 10`
    folder, along with the compiled version of the `Bit.Ly` module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first requirement is to edit the manifest file that is automatically generated
    when you created your module. Below is an example taken from our `BitlyModule:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Anything below the `# these should not be edited` line should be left alone,
    but go ahead and replace all of the other key/value pairs with your own name,
    description, license, version, and copyright text. Once you have completed editing
    the manifest file, rebuild your module using by typing `./build.py` into the Terminal,
    and press *Enter* to execute the command.
  prefs: []
  type: TYPE_NORMAL
- en: Your module is now ready for use in your own projects or for manual distribution.
    Simply copy the contents of the ZIP file to your copied into the `/Library/Application/
    Support/Titanium` directory for it to be installed. You will of course still need
    to include your module using the `require` method call in your `app.js` file,
    and you'll need to reference it in your `tiapp.xml` file as you did in the first
    recipe of this chapter for the mobile PayPal library.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can distribute your module to the Open Mobile Marketplace using the same
    ZIP file package that was created in the build process. However, there are several
    prerequisites you''ll need to fulfill before you can distribute:'
  prefs: []
  type: TYPE_NORMAL
- en: You must have a valid Titanium developer account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must have fully completed filling our your manifest values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must have a valid license text in the LICENSE file in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must have a valid documentation file in the `index.md` file in your documentation
    directory of your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must specify some additional metadata upon upload such as the price (which
    can be free).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are charging for your module, you must establish a payment setup with
    Appcelerator so that you can be paid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must accept the Titanium+Plus Marketplace terms of service agreement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have uploaded your module and completed the necessary submission steps,
    your module will be made available to the marketplace directory. Note that the
    first time you submit a module Appcelerator will review your module for the basic
    requirements above.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new Appcelerator marketplace makes it easy for developers to build, sell,
    and distribute their own custom Titanium modules, for both iOS and Android. All
    you need to do is set up a profile for your product and provide your PayPal account
    details in order to be paid for each sale you make.
  prefs: []
  type: TYPE_NORMAL
- en: Developers make 70 percent of all products they sell through the Open Mobile
    Marketplace, and there are a number of tools available to keep track of your customers,
    invoices, and feedback. You can sign up today at [https://marketplace.appcelerator.com/cms/landing](http://https://marketplace.appcelerator.com/cms/landing).
  prefs: []
  type: TYPE_NORMAL
