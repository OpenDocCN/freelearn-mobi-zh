["```kt\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        […]\n    }\n}\n```", "```kt\nclass Presenter() {\n    // observe data and pass it to the UI\n    fun cancelOngoingNetworkRequests() {\n        // stop observing data\n    }\n}\n```", "```kt\nclass MainActivity : ComponentActivity() {\n    val presenter = Presenter()\n    override fun onStart() {\n        super.onStart()\n        //consume data from presenter\n    }\n    override fun onDestroy() {\n        super.onDestroy()\n        presenter.cancelOngoingNetworkRequests()\n    }\n}\n```", "```kt\nclass MyViewModel(): ViewModel() {\n    override fun onCleared() {\n        super.onCleared()\n        // Cancel work\n    }\n}\n```", "```kt\nclass MyActivity: ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val vm = \n          ViewModelProvider(this)[MyViewModel::class.java]\n         // Perform operations\n    }\n}\n```", "```kt\nclass MyViewModel(): ViewModel() {\n    val numberLiveData: MutableLiveData<Int> = \n        MutableLiveData(0)\n    init {\n        viewModelScope.launch {\n            delay(5000)\n            numberLiveData.value = 100\n        }\n    }\n}\n```", "```kt\nclass MyActivity: ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val vm = \n          ViewModelProvider(this)[MyViewModel::class.java]\n        vm.numberLiveData.observe(this, object: Observer<Int> {\n            override fun onChanged(t: Int?) {\n                // Consume values\n            }\n        })\n    }\n}\n```", "```kt\n    class CustomCountdown(\n        private val onTick: ((currentValue: Int) -> Unit),\n        private val onFinish: (() -> Unit),\n    ) {\n    }\n    ```", "```kt\n    class CustomCountdown(\n        private val onTick: ((currentValue: Int) -> Unit),\n        private val onFinish: (() -> Unit),\n    ) {\n        class InternalTimer(\n            private val onTick: ((currentValue: Int) -> Unit),\n            private val onFinish: (() -> Unit),\n            millisInFuture: Long,\n            countDownInterval: Long\n    ) : CountDownTimer(millisInFuture, \n                           countDownInterval){\n        }\n    }\n    ```", "```kt\n    class CustomCountdown(\n        private val onTick: ((currentValue: Int) -> Unit),\n        private val onFinish: (() -> Unit),\n    ) {\n        class InternalTimer(\n            private val onTick: ((currentValue: Int) -> Unit),\n            private val onFinish: (() -> Unit),\n            millisInFuture: Long,\n            countDownInterval: Long\n        ) : CountDownTimer(millisInFuture, \n            countDownInterval) {\n            init {\n                this.start()\n            }\n            override fun onFinish() {\n                onFinish.invoke()\n            }\n            override fun onTick(millisUntilFinished: Long) {\n                onTick(millisUntilFinished.toInt())\n            }\n        }\n    }\n    ```", "```kt\nclass CustomCountdown(\n    private val onTick: ((currentValue: Int) -> Unit),\n    private val onFinish: (() -> Unit),\n) {\n    var timer: InternalTimer = InternalTimer(\n        onTick = onTick,\n        onFinish = onFinish,\n        millisInFuture = 60000,\n        countDownInterval = 1000)\n    class InternalTimer(\n        private val onTick: ((currentValue: Int) -> Unit),\n        private val onFinish: (() -> Unit),\n        millisInFuture: Long,\n        countDownInterval: Long\n    ): CountDownTimer(millisInFuture, countDownInterval)\n    { … }\n}\n```", "```kt\n    class CustomCountdown(…) {\n        var timer: InternalTimer = InternalTimer(…)\n        fun stop() {\n            timer.cancel()\n        }\n        class InternalTimer(\n            […]\n        ): CountDownTimer(millisInFuture, countDownInterval)\n        { … }\n    }\n    ```", "```kt\n    class RepositoriesViewModel(…) : ViewModel() {\n        val repositories: Flow<PagingData<Repository>> = […]\n        val timerState = mutableStateOf(\"\")\n        var timer: CustomCountdown = CustomCountdown(\n            onTick = { msLeft ->\n                timerState.value =\n    (msLeft / 1000).toString() + \n                       \" seconds left\"\n            },\n            onFinish = {\n                timerState.value = \"You won a prize!\"\n            })\n    }\n    ```", "```kt\n    class RepositoriesViewModel(…) : ViewModel() {\n        val repositories: Flow<PagingData<Repository>> = […]\n        val timerState = mutableStateOf(\"\")\n        var timer: CustomCountdown = CustomCountdown(…)\n        override fun onCleared() {\n            super.onCleared()\n            timer.stop()\n        }\n    }\n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                RepositoriesAppTheme {\n                    val viewModel: RepositoriesViewModel = …\n                    val reposFlow = viewModel.repositories\n    val timerText = \n                        viewModel.timerState.value\n                    val lazyRepoItems: […] = […]\n                    RepositoriesScreen(\n                        lazyRepoItems,\n                        timerText\n                    )\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    private fun CountdownItem(timerText: String) {\n        Text(timerText)\n    }\n    ```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>,\n        timerText: String\n    ) {\n        LazyColumn(…) {\n            item {\n                CountdownItem(timerText)\n            }\n            itemsIndexed(repos) { index, repo -> […] }\n            […]\n        }\n    }\n    ```", "```kt\n    class CustomCountdown(\n        […]\n    ): DefaultLifecycleObserver {\n        var timer: InternalTimer = InternalTimer(\n            onTick = onTick,\n            onFinish = onFinish,\n            millisInFuture = 60000,\n            countDownInterval = 1000)\n        override fun onResume(owner: LifecycleOwner) {\n            super.onResume(owner)\n        }\n        override fun onPause(owner: LifecycleOwner) {\n            super.onPause(owner)\n        }\n        fun stop() { timer.cancel() }\n        class InternalTimer(…) {…}\n    }\n    ```", "```kt\nclass CustomCountdown(\n    […]\n): DefaultLifecycleObserver {\n    var timer: InternalTimer = InternalTimer(…)\n    override fun onResume(owner: LifecycleOwner) {\n        super.onResume(owner)\n    }\n    override fun onPause(owner: LifecycleOwner) {\n        super.onPause(owner)\n        timer.cancel()\n    }\n    fun stop() { timer.cancel() }\n    class InternalTimer(…) : CountDownTimer(…) {…}\n}\n```", "```kt\nclass CustomCountdown(\n    […]\n): DefaultLifecycleObserver {\n    var timer: InternalTimer = InternalTimer(\n        […]\n        millisInFuture = 60000,\n        countDownInterval = 1000)\n    override fun onResume(owner: LifecycleOwner) { … }\n    override fun onPause(owner: LifecycleOwner) { … }\n    fun stop() { timer.cancel() }\n    class InternalTimer(…) : CountDownTimer(…) {\n        var lastKnownTime: Long = millisInFuture\n        init { this.start() }\n        override fun onFinish() {\n            lastKnownTime = 0\n            onFinish.invoke()\n        }\n        override fun onTick(millisUntilFinished: Long) {\n            lastKnownTime = millisUntilFinished\n            onTick(millisUntilFinished.toInt())\n        }\n    }\n}\n```", "```kt\n    class CustomCountdown(\n        […]\n    ): DefaultLifecycleObserver {\n        var timer: InternalTimer = InternalTimer(\n            onTick = onTick,\n            onFinish = onFinish,\n            millisInFuture = 60000,\n            countDownInterval = 1000)\n        override fun onResume(owner: LifecycleOwner) {\n            super.onResume(owner)\n            if (timer.lastKnownTime > 0) {\n                timer.cancel()\n                timer = InternalTimer(\n                    onTick = onTick,\n                    onFinish = onFinish,\n                    millisInFuture = timer.lastKnownTime,\n                    countDownInterval = 1000)\n            }\n        }\n        override fun onPause(owner: LifecycleOwner) { […] }\n        fun stop() { timer.cancel() }\n        class InternalTimer(…) : CountDownTimer(…) {…}\n    }\n    ```", "```kt\n    @Composable\n    private fun CountdownItem (timerText: String) {\n    val lifecycleOwner: LifecycleOwner  = \n            LocalLifecycleOwner.current\n        Text(timerText)\n    }\n    ```", "```kt\n@Composable\nprivate fun CountdownItem (timerText: String) {\n    val lifecycleOwner: LifecycleOwner = \n        LocalLifecycleOwner.current\n    DisposableEffect(key1 = lifecycleOwner) {\n        onDispose {\n\n        }\n    }\n    Text(timerText)\n}\n```", "```kt\n    @Composable\n    private fun CountdownItem(timerText: String) {\n        val lifecycleOwner: LifecycleOwner = \n            LocalLifecycleOwner.current\n        val lifecycle = lifecycleOwner.lifecycle\n        DisposableEffect(key1 = lifecycleOwner) {\n            onDispose {\n\n            }\n        }\n        Text(timerText)\n    }\n    ```", "```kt\n    @Composable\n    private fun CountdownItem(timerText: String) {\n        val lifecycleOwner: LifecycleOwner \n            = LocalLifecycleOwner.current\n        val lifecycle = lifecycleOwner.lifecycle\n        DisposableEffect(key1 = lifecycleOwner) {\n            lifecycle.addObserver()\n            onDispose {\n                lifecycle.removeObserver()\n            }\n        }\n        Text(timerText)\n    }\n    ```", "```kt\n    @Composable\n    private fun CountdownItem(timerText: String, \n        getTimer: () -> CustomCountdown) {\n        val lifecycleOwner: LifecycleOwner \n            = LocalLifecycleOwner.current\n        val lifecycle = lifecycleOwner.lifecycle\n        DisposableEffect(key1 = lifecycleOwner) {\n            lifecycle.addObserver(getTimer())\n            onDispose {\n                lifecycle.removeObserver(getTimer())\n            }\n        }\n        Text(timerText)\n    }\n    ```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>,\n        timerText: String,\n        getTimer: () -> CustomCountdown\n    ) {\n        LazyColumn(…) {\n            item {\n                CountdownItem(timerText, getTimer)\n            }\n            itemsIndexed(repos) { … }\n            […]\n        }\n    }\n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                RepositoriesAppTheme {\n                    […]\n                    RepositoriesScreen(\n                        lazyRepoItems, \n                        timerText,\n                        getTimer = {viewModel.timer}\n                    )\n                }\n            }\n        }\n    }\n    ```", "```kt\n@Composable\nprivate fun CountdownItem(…) {\n    val lifecycleOwner: […] = LocalLifecycleOwner.current\n    val lifecycle = lifecycleOwner.lifecycle\n    DisposableEffect(key1 = lifecycleOwner) {\n        lifecycle.addObserver(getTimer())\n        onDispose {\n            lifecycle.removeObserver(getTimer())\n        }\n    }\n    Text(timerText)\n}\n```", "```kt\n    @Composable\n    private fun CountdownItem(timerText: String,\n        getTimer: () -> CustomCountdown,\n        onPauseTimer: () -> Unit) {\n        val lifecycleOwner: […] = LocalLifecycleOwner.current\n        val lifecycle = lifecycleOwner.lifecycle\n        DisposableEffect(key1 = lifecycleOwner) {\n            lifecycle.addObserver(getTimer())\n            onDispose {\n                onPauseTimer()\n                lifecycle.removeObserver(getTimer())\n            }\n        }\n        Text(timerText)\n    }\n    ```", "```kt\n    @Composable\n    fun RepositoriesScreen(\n        repos: LazyPagingItems<Repository>,\n        timerText: String,\n        getTimer: () -> CustomCountdown,\n        onPauseTimer: () -> Unit\n    ) {\n        LazyColumn(…) {\n            item {\n                CountdownItem(\n                    timerText, \n                    getTimer,\n                    onPauseTimer\n                )\n            }\n            itemsIndexed(repos) { … }\n            […]\n        }\n    }\n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                RepositoriesAppTheme {\n                    […]\n                    RepositoriesScreen(lazyRepoItems, \n                        timerText,\n                        getTimer = { viewModel.timer },\n    onPauseTimer = \n                            { viewModel.timer.stop() }\n                    )\n                }\n            }\n        }\n    }\n    ```", "```kt\n@Composable\nprivate fun CountdownItem(timerText: String,\n    getTimer: () -> CustomCountdown,\n    onPauseTimer: () -> Unit) {\n    val lifecycleOwner: LifecycleOwner\n                = LocalLifecycleOwner.current\n    val lifecycle = lifecycleOwner.lifecycle\n    DisposableEffect(key1 = lifecycleOwner) {\n        lifecycle.addObserver(getTimer())\n        onDispose {\n            onPauseTimer()\n            lifecycle.removeObserver(getTimer())\n        }\n    }\n    Text(timerText)\n}\n```", "```kt\nclass CustomCountdown([…]): DefaultLifecycleObserver {\n    var timer: InternalTimer = InternalTimer(…)\n    override fun onResume(owner: LifecycleOwner) {\n        super.onResume(owner)\n        if (timer.lastKnownTime > 0) {\n            timer.cancel()\n            timer = InternalTimer(\n                onTick = onTick,\n                onFinish = onFinish,\n                millisInFuture = timer.lastKnownTime,\n                countDownInterval = 1000)\n        }\n    }\n    override fun onPause(owner: LifecycleOwner) { […] }\n    fun stop() { timer.cancel() }\n    class InternalTimer(…) : CountDownTimer(…) {…}\n}\n```"]