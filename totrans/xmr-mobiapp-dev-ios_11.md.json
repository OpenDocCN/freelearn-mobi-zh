["```swift\nusing SQLite;\n```", "```swift\nusing SQLite;\npublic class demoRow\n{\n    public demoRow ()\n    {}\n    [PrimaryKey, AutoIncrement]\n    public int ID\n    {get; set;}\n    public string Name\n    {get;set;}\n    public double Value\n    {get;set;}\n    public override string ToString()\n    {\n        return string.Format(\"[demoRow : ID={0}, Name={1},Value={2}]\", ID, Name, Value);\n    }\n}\n```", "```swift\nDataManager dm = new DataManager(\"path_to_database\");\ndm.Setup(); // calls the creation of the database code\n```", "```swift\nprivate static DataManager dm{ get; set; }\n```", "```swift\npublic DataManager(string path)\n{\n    dataLock = new object();\n    dataBasePath = path;\n}\n\nprivate string dataBasePath;\nprivate object dataLock;\n\npublic string DataPath{\n    get\n    {\n        return dataBasePath;\n    }\n}\n```", "```swift\npublic bool Setup()\n{\n    lock(dbLock)\n    {\n        try\n        {\n            using (SQLiteConnection sqlCon = newSQLiteConnection(DBPath))\n            {\n                 sqlCon.CreateTable<demoRow>();\n            }\n            return true;\n        }\n        catch (SQLiteException ex)\n        {\n            throw ex;\n        }\n        catch (Exception ex)\n        {\n            throw ex;\n        }\n    }\n}\n```", "```swift\npublic const string DBClauseSyncOff = \"PRAGMA SYNCHRONOUS=OFF;\";\npublic const string DBClauseVacuum = \"VACUUM;\";\n```", "```swift\nPublic List<demoRow> getAllListOfRows()\n{\n    lock (dbLock)\n    {\n        using (SQLiteConnection sqlCon = newSQLiteConnection(this.DBPath))\n        {\n            sqlCon.Execute(Constants.DBClauseSyncOff);\n            sqlCon.BeginTransaction();\n            List<demoRow> toReturn = new List<demoRow>();\n            toReturn = sqlCon.Query<demoRow>(\"SELECT * FROMdemoRow\");\n                return toReturn.Count != 0 ? toReturn : newList<demoRow>();\n        }\n    }\n}\n\npublic string getNameForID(int id)\n{\n    lock (dbLock)\n    {\n        using (SQLiteConnection sqlCon = newSQLiteConnection(DBPath))\n        {\n            sqlCon.Execute(Constants.DBClauseSyncOff);sqlCon.BeginTransaction();string toReturn = string.Empty;toReturn = sqlCon.ExecuteScalar<string>(\"SELECT NameFROM demoRow WHERE ID=?\", id);\n                return !string.IsNullOrEmpty(toReturn) ?toReturn : \"No name found\";\n        }\n    }\n}\n```", "```swift\nstring name = dm.getNameForID(3);\n```", "```swift\nList<demoRow> dT = dm.getListOfTables();\n```", "```swift\npublic void AddOrUpdateTable(demoRow dTRow){\n    lock (dataLock)\n    {\n        using (SQLiteConnection sqlCon = new SQLiteConnection( DBPath))\n        {\n            sqlCon.Execute(Constants.DBClauseSyncOff);\n            sqlCon.BeginTransaction();\n            try\n            {\n                if (sqlCon.Execute(\"UPDATE dataRow SET \" +\"ID=?, \" + \"Name=?, \" +\"Value=? WHERE \" +\"ID=?\",dRow.ID,dRow.Name,dRow.Value,dRow.ID) == 0)\n                {\n                    sqlCon.Insert(dRow, typeof(demoRow));}\n                sqlCon.Commit();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"Error in AddOrUpdateTable :{0}-{1}\", ex.Message, ex.StackTrace);sqlCon.Rollback();\n             }\n        }\n    }\n}\n```", "```swift\npublic void AddOrUpdateTables(List<demoRow>rows)\n{\n    foreach(demoReow row in rows)\n        AddOrUpdateTable(row);\n}\n```", "```swift\nList<string> data = new List<string>();\n```", "```swift\nList<demoRow> myRow = dm.getListOfRows();\n```", "```swift\nvar demo = myRow.SingleOrDefault(t=>t.Name == \"Fred Moriarty\");\n```", "```swift\nvar bloggs = myTRow.Where(t=>t.Name == \"Fred Bloggs\").ToList();\n```", "```swift\nList<demoRow> bloggs = new List<demoRow>();\nforeach(demoRow blog in bloggs)\n{\n    if (blog.Name == \"Fred Bloggs\")\n        bloggs.Add(blog);\n}\n```", "```swift\nvar res = from inviter in ContactListfrom tester in inviteswhere inviter.UserID == tester.UserIdselect tester;\n```", "```swift\nvar retString = testClass.Where(t=>t.Value == \"fred\").ToList();\n```", "```swift\nvar retString = inString.Select(t=>t.ToUpper()).ToList();\n```", "```swift\nvar retString = inString.Select(t=>t.Value, Func<inString,outString>).ToList();\n```", "```swift\nstring[] teams = {\"Liverpool\", \"Everton\", \"Oldham\", \"Leeds\"};\nvar result = teams.Select(t=>t.ToUpper());\nforeach (string team in result)\n{\n    Console.WriteLine(team);\n}\n```", "```swift\nLIVERPOOL\nEVERTON\nOLDHAM\nLEEDS.\n```", "```swift\nstring[] teams = {\"Liverpool\", \"Everton\", \"Oldham\", \"Leeds\"};\nvar trans = teams.Select(teams, index) =>new {index, str = teams.Substring(0, index)});\n```"]