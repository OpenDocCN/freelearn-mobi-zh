- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Advertising Using Unity Ads
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Unity Ads进行广告
- en: When working on mobile titles, you need to think about how you are going to
    sell your game. Deciding on how to best sell a game can be difficult. Of course,
    you can sell your game for a price, and there is a possibility that it will be
    successful, but you’ll be limiting your audience numbers to a much lower amount.
    This could work well for a niche game, but if you’re trying to make a game with
    a broad appeal where you want to get as many players as possible to play your
    title, you may have some issues.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在制作移动游戏时，您需要考虑您将如何销售您的游戏。决定如何最好地销售游戏可能很困难。当然，您可以以价格出售您的游戏，并且有可能成功，但您将限制您的受众数量到一个非常低的水平。这可能对细分市场游戏很有用，但如果您试图制作一款具有广泛吸引力的游戏，您希望尽可能多的玩家玩您的游戏，您可能会遇到一些问题。
- en: Having a price on the game can be a major hurdle in getting initial customers
    who will share the game via word of mouth and contribute to having more people
    play your game. To solve this potential issue, you do have the option of making
    your game free.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏定价可能成为吸引初始顾客的主要障碍，这些顾客将通过口碑分享游戏并帮助更多人玩您的游戏。为了解决这个潜在问题，您确实有选择将您的游戏免费化的选项。
- en: Afterward, you can give players the opportunity to purchase things or show advertisements
    when playing the game.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以在玩家玩游戏时给他们提供购买物品或展示广告的机会。
- en: That’s not to say that having a bunch of advertisements in a free game is the
    best option either. Having too many ads, or even the wrong kind of ads, can drive
    users away, which can be even worse. Many developers have their own opinions on
    whether it’s a good idea to use ads or not, but that’s not the purpose of this
    chapter. In this chapter, we will look into the different options available to
    us in terms of advertising over the course of our game and show how to implement
    them, should you choose to add this content to your game.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说在免费游戏中放很多广告就是最好的选择。广告过多，甚至是不合适的广告，可能会驱使用户离开，这可能会更糟。许多开发者都有自己的观点，关于是否使用广告是个好主意，但这不是本章的目的。在本章中，我们将探讨我们在游戏过程中可用的不同广告选项，并展示如何实现它们，如果您选择将此内容添加到您的游戏中。
- en: 'This chapter is split into a number of topics. It contains a simple step-by-step
    process, from beginning to end. The following is the outline of our tasks:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为几个主题。它包含一个从开始到结束的简单分步过程。以下是我们任务的概述：
- en: Setting up Unity Ads
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Unity Ads
- en: Creating a simple ad
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的广告
- en: Adding in-ad callback methods
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加内联回调方法
- en: Opt-in advertisements with rewards
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有奖励的选择加入广告
- en: Integrating a cooldown timer
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成冷却计时器
- en: In this chapter, we will integrate the Unity Ads framework into our project
    and learn how to create both simple and complex versions of advertisements. This
    is done by first setting up Unity’s Ads system, then creating a simple ad before
    adding additional callback options. We will then see how we can give additional
    incentives to view ads by utilizing opt-in rewards and adding a cooldown timer
    to prevent players from watching too many ads.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将Unity Ads框架集成到我们的项目中，并学习如何创建简单和复杂的广告版本。这是通过首先设置Unity的Ads系统，然后创建一个简单的广告，在添加额外的回调选项之前完成。然后我们将看到如何通过利用选择加入奖励和添加冷却计时器来防止玩家观看过多的广告，从而为观看广告提供额外的激励。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the **Unity Editor system** **requirements** section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用Unity 2022.1.0b16和Unity Hub 3.3.1，但步骤应该在未来编辑器版本中只需做最小改动即可。如果您想下载本书中使用的确切版本，并且有新版本发布，您可以访问Unity的下载存档[https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive)。您也可以在**Unity编辑器系统**
    **要求**部分找到Unity的系统要求[https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)。
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章中存在的代码文件，地址为[https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007)。
- en: Setting up Unity Ads
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Unity广告
- en: 'Unity Ads is a video ad network for iOS and Android that can monetize your
    existing player base by showing ads. Unity Ads offers video ads that can be shown
    as either rewarded or non-rewarded placements. As the name suggests, rewarded
    ads will give the users a reward or incentive that will help them while playing
    the game. Before we can enable Unity Ads, we must first enable Unity’s Services
    suite. To activate Unity Services, you have to link your project to a Unity Services
    Project ID, which is how Unity can tell the difference between the different projects
    you are creating. So let’s see how to do that:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Ads是一个针对iOS和Android的视频广告网络，可以通过展示广告来货币化您现有的玩家基础。Unity Ads提供可以以奖励或非奖励形式展示的视频广告。正如其名所示，奖励广告将给用户带来奖励或激励，这有助于他们在玩游戏时。在我们能够启用Unity
    Ads之前，我们必须首先启用Unity的服务套件。要激活Unity服务，您必须将项目链接到Unity服务项目ID，这是Unity区分您创建的不同项目的方式。那么，让我们看看如何操作：
- en: 'Open the **Services** window by going to **Window | General | Services** or
    by pressing *Ctrl* + *0*. This will open up the Unity Package Manager and will
    automatically select the **Advertisement** option:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问**窗口 | 通用 | 服务**或按*Ctrl* + *0*打开**服务**窗口。这将打开Unity包管理器，并自动选择**广告**选项：
- en: '![Figure 7.1 – The Advertisement option in the Unity Package Manager](img/B18868_07_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – Unity包管理器中的广告选项](img/B18868_07_01.jpg)'
- en: Figure 7.1 – The Advertisement option in the Unity Package Manager
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – Unity包管理器中的广告选项
- en: 'Click on the **Install** button and wait for it to finish installing. Upon
    finishing the installation, you should see a window that looks like the following:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮并等待其完成安装。安装完成后，您应该看到一个看起来像以下窗口的窗口：
- en: '![Figure 7.2 – Service Activation window](img/B18868_07_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 服务激活窗口](img/B18868_07_02.jpg)'
- en: Figure 7.2 – Service Activation window
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 服务激活窗口
- en: You can also access this menu by going to **Services | Ads | Configure** after
    the package has been installed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在安装包后通过访问**服务 | 广告 | 配置**来访问此菜单。
- en: Assuming that you haven’t worked with Unity Services before, you will need to
    create **Organization** and **Project** **Name details**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您之前没有使用过Unity服务，您将需要创建**组织**和**项目名称**详情。
- en: Click on the dropdown and select your username and then click on the **Create
    project ID** button. The project name is automatically created according to the
    name of your project when you first created it, but you can change this in the
    **Settings** section of the **Services** window.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下拉菜单，选择您的用户名，然后点击**创建项目ID**按钮。项目名称在您首次创建项目时自动根据项目名称创建，但您可以在**服务**窗口的**设置**部分更改此名称。
- en: Important note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Unity automatically creates an organization using your account username; however,
    if you need to create another one, you can do so at [https://id.unity.com/organizations](https://id.unity.com/organizations).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Unity会自动使用您的账户用户名创建一个组织；然而，如果您需要创建另一个组织，您可以在[https://id.unity.com/organizations](https://id.unity.com/organizations)进行操作。
- en: You’ll then be asked questions about your game. If your game is not directed
    toward children, go ahead and select **No** from the drop-down menu and then click
    on the **Save** button. Otherwise, select **Yes** and then click on **Save**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被问到关于您游戏的问题。如果您的游戏不是针对儿童的，请从下拉菜单中选择**否**，然后点击**保存**按钮。否则，选择**是**，然后点击**保存**。
- en: Important note
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When you indicate that your game is designed for children under the age of 13
    years, ads will not be behaviorally targeted to users in your game. Behavioral
    targeting can yield a higher **effective cost per thousand impressions** (**eCPM**)
    by showing ads that are more relevant to your users, but its use is prohibited
    with users under the age of 13 due to **Children’s Online Privacy Protection Rule
    Act (COPPA)** regulations. For more info on this, check out [https://forum.unity.com/threads/age-designation.326930/](https://forum.unity.com/threads/age-designation.326930/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你表明你的游戏是为13岁以下的儿童设计的，广告将不会对你的游戏中的用户进行行为定位。行为定位可以通过展示与用户更相关的广告来提高**每千次展示的有效成本**（**eCPM**），但由于**儿童在线隐私保护规则法案（COPPA）**的规定，其使用在13岁以下的用户中是被禁止的。有关更多信息，请查看[https://forum.unity.com/threads/age-designation.326930/](https://forum.unity.com/threads/age-designation.326930/)。
- en: "![Figure 7.3 – Answering the COPPA compliance question\uFEFF](img/B18868_07_03.jpg)"
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 回答COPPA合规性问题](img/B18868_07_03.jpg)'
- en: Figure 7.3 – Answering the COPPA compliance question
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 回答COPPA合规性问题
- en: Then, when brought to the **Ads** menu, click on the toggle at the top right
    to turn it on. Ads should be toggled on at this point.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，当切换到**广告**菜单时，点击右上角的切换按钮来开启它。此时应该已经开启了广告。
- en: If you scroll down, you’ll see a property called **Game Id**; note down those
    values as we will need them in order to initialize Unity Ads at the start of the
    game.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你向下滚动，你会看到一个名为**游戏ID**的属性；记下这些值，因为我们将在游戏开始时初始化Unity Ads时需要它们。
- en: To get started, it would be a good idea for us to have all of the ad-related
    behavior to share a script, so we will create a new class called `UnityAd Controller`
    by going to the `Assets/Scripts` folder, and selecting **Create** | **C# Script**.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了开始，一个好的做法是将所有与广告相关的行为共享到一个脚本中，因此我们将通过访问`Assets/Scripts`文件夹，并选择**创建** | **C#
    脚本**来创建一个新的类，名为`UnityAd Controller`。
- en: 'Open up the file in the IDE of your choice, and use the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你选择的IDE中的文件，并使用以下代码：
- en: '[PRE0]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code does a number of things. We first state that we are using
    the `UnityEngine.Advertisments` namespace to get access to the `Advertisement`
    class. If you only intend to implement video, interstitial, and banner ads for
    your monetization strategy, this is the API that Unity suggests to use. In addition
    to this, in order to use Unity Ads, you must call the `Advertisement.Initialize`
    function, which I do inside of the `Start` function of this object.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码执行了多项操作。我们首先声明我们正在使用`UnityEngine.Advertisments`命名空间来获取对`Advertisement`类的访问权限。如果你只想实现视频、横幅和插屏广告来作为你的盈利策略，这是Unity建议使用的API。除此之外，为了使用Unity
    Ads，你必须调用`Advertisement.Initialize`函数，我在这个对象的`Start`函数中进行了调用。
- en: 'From the `GameObject` (`Unity Ad Controller`. Once created, attach the **Unity
    Ad Controller** script to it:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`GameObject`（`Unity Ad Controller`）。一旦创建，将**Unity Ad Controller**脚本附加到它上：
- en: '![Figure 7.4 – Creating the Unity Ad Controller object](img/B18868_07_04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – 创建Unity Ad Controller对象](img/B18868_07_04.jpg)'
- en: Figure 7.4 – Creating the Unity Ad Controller object
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 创建Unity Ad Controller对象
- en: Because this object is spawned at the **MainMenu** level, it is loaded at the
    beginning of the game, which is perfect for what we will use it for.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于此对象是在**主菜单**级别生成的，它会在游戏开始时加载，这对于我们打算使用的功能来说非常合适。
- en: At this point, we have finished the setup process required to utilize Unity
    Ads by enabling Unity Analytics and then turning the **Ads** menu on. With the
    setup process complete, we can now proceed to actually adding a simple ad to our
    project.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经完成了利用Unity Ads所需的设置过程，通过启用Unity Analytics然后开启**广告**菜单。设置完成后，我们现在可以继续向我们的项目中添加一个简单的广告。
- en: Displaying a simple ad
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示一个简单的广告
- en: 'Advertisements are a possible way to generate revenue from players playing
    your game. As mentioned previously, Unity Ads has two different types of ads that
    we can display: simple and rewarded. Simple ads are easy to use, hence the name,
    and allow users to have simple full-screen interstitial ads. This can be really
    useful when moving between levels or perhaps when the player wants to restart
    the game. Let’s see how we can implement that feature now. Implement the following
    steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 广告是玩家玩游戏时可能产生收入的一种方式。如前所述，Unity Ads有两种不同的广告类型我们可以展示：简单广告和奖励广告。简单广告易于使用，因此得名，并允许用户拥有简单的全屏插屏广告。这在玩家在关卡之间移动或玩家想要重新开始游戏时非常有用。现在让我们看看我们如何实现这个功能。执行以下步骤：
- en: 'To get started, we will need to add a new function to the `UnityAdController`
    class:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，我们需要向`UnityAdController`类中添加一个新函数：
- en: '[PRE1]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we created a static method called `ShowAd`. We made this static so that
    we can access the function without actually having to create an instance of this
    class in order to call it. The function will load an advertisement into memory
    and then, when it is ready, we will call the `Show()` function to display it on
    the screen. We also created a helper function called `GetAdID` in order to give
    us the correct ad type to use depending on the platform we are deploying to.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个名为`ShowAd`的静态方法。我们将其设置为静态，这样我们就可以在不实际创建这个类的实例的情况下调用该函数。该函数将广告加载到内存中，然后，当它准备好时，我们将调用`Show()`函数来在屏幕上显示它。我们还创建了一个名为`GetAdID`的辅助函数，以便根据我们部署的平台提供正确的广告类型。
- en: 'Save your script and then open up the `MainMenuBehaviour` file and add the
    following highlighted code:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本，然后打开`MainMenuBehaviour`文件，并添加以下高亮代码：
- en: '[PRE2]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will have an advertisement play each time we call the `LoadLevel` function
    if it is supported. We also added a new parameter with a default value. The nice
    thing about this is that we can optionally decide when we want to show an ad.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果支持，每次我们调用`LoadLevel`函数时，都会播放一条广告。我们还添加了一个具有默认值的新参数。这个功能的好处是我们可以选择性地决定何时显示广告。
- en: For instance, we may want to make it so that when we restart the game, we don’t
    play an ad.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能希望当游戏重新启动时，不要播放广告。
- en: 'Now let’s see this in action. Play the game and then click on the **Play**
    button:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来看看实际操作。玩完游戏后，点击**播放**按钮：
- en: '![Figure 7.5 – An example ad being shown](img/B18868_07_05.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5 – 显示的广告示例](img/B18868_07_05.jpg)'
- en: Figure 7.5 – An example ad being shown
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 显示的广告示例
- en: As you can see in the preceding screenshot, the ad works correctly. This screen
    is what is shown when playing the game in the editor. It has buttons to allow
    us to test whether a player skips or watches a video in full. When we disable
    test mode, we will then see live video ads.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，广告工作正常。这是在编辑器中玩游戏时显示的屏幕。它有按钮，允许我们测试玩家是否跳过或完整观看视频。当我们禁用测试模式时，我们将看到实时的视频广告。
- en: You’ll also see this happen if, once in the game, you open the pause menu and
    click on the **Main** **Menu** button.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进入游戏后打开暂停菜单并点击**主菜单**按钮，你也会看到这种情况发生。
- en: Important note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If this does not work and/or show up, check the **Player Settings** menu you
    learned about previously and ensure that your current platform is set to Android
    or iOS.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这不起作用或没有显示，请检查你之前学到的**玩家设置**菜单，并确保你的当前平台设置为Android或iOS。
- en: This provides us with the easiest way of getting an ad to show up in our game,
    but there are still a number of things we need to do to ensure our ads work properly,
    which we will look at next.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了在游戏中显示广告的最简单方法，但为了确保我们的广告能够正常工作，我们还需要做很多事情，我们将在下一部分讨论。
- en: Important note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Another type of ad that can be used is banner ads. These work similarly to default
    ads but you’d use `Banner` instead of `Interstitial` when calling `GetAdID`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用的另一种广告类型是横幅广告。这些广告与默认广告类似，但在调用`GetAdID`时，你会使用`Banner`而不是`Interstitial`。
- en: For more information on this, check out [https://docs.unity.com/monetization-dashboard/AdUnits.html](https://docs.unity.com/monetization-dashboard/AdUnits.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅[https://docs.unity.com/monetization-dashboard/AdUnits.html](https://docs.unity.com/monetization-dashboard/AdUnits.html)。
- en: Utilizing ad callback methods
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用广告回调方法
- en: The code we wrote for the `LoadLevel` function works perfectly fine when we
    go to the main menu of the game; however, if we dive into the game itself from
    the main menu, the game will still be going on in the background with the ad blocking
    the player from playing the game.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`LoadLevel`函数编写的代码在进入游戏主菜单时运行得很好；然而，如果我们从主菜单直接进入游戏本身，游戏仍然会在后台运行，广告会阻止玩家玩游戏。
- en: When running your app on an actual mobile device, the Unity project will pause
    while Unity Ads are shown. However, if you are testing in the Unity Editor, the
    game is not paused while the placeholder ads are shown. However, we can simulate
    that behavior ourselves using the `Advertisement.ShowOptions` class.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在实际移动设备上运行你的应用时，Unity项目会在显示Unity Ads时暂停。然而，如果你在Unity编辑器中进行测试，游戏在显示占位符广告时不会暂停。但是，我们可以使用`Advertisement.ShowOptions`类来模拟这种行为。
- en: 'We will pause the game when an ad is shown and then resume the game once the
    ad is finished. To do so, perform the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当广告显示时，我们将暂停游戏，一旦广告结束，我们将恢复游戏。为此，请执行以下步骤：
- en: 'Let’s first open up the `UnityAdController` class and add the following variable
    and update the `Start` function to the following:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先打开`UnityAdController`类，并添加以下变量，然后将`Start`函数更新为以下内容：
- en: '[PRE3]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `instance` variable is going to be used to give the `Advertisement.Show`
    function a second parameter to reference the object to run code on.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`instance`变量将被用来给`Advertisement.Show`函数提供一个第二个参数来引用运行代码的对象。'
- en: 'Update the `ShowAd` function to have the second parameter added to our function:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`ShowAd`函数以添加第二个参数到我们的函数中：
- en: '[PRE4]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For the second parameter, the `Advertisement.Show` function takes in an `IUnityAdsShowListener`
    object. `I` at the start of the name here indicates that this type is an interface.
    This is a keyword in C#, designating something like a contract, promising that
    whatever you provide to this function contains the functionalities required by
    the interface.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个参数，`Advertisement.Show`函数接受一个`IUnityAdsShowListener`对象。名称开头的`I`表示这是一个接口。这是C#中的一个关键字，表示一种合同，承诺提供给此函数的内容包含接口所需的功能。
- en: 'Now update the class definition to the following:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在更新类定义如下：
- en: '[PRE5]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By adding the comma and then `IUnityAdsShowListener`, we are stating that we
    will implement the methods provided by the `IUnityAdsShowListener` interface.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加逗号然后`IUnityAdsShowListener`，我们声明我们将实现`IUnityAdsShowListener`接口提供的方法。
- en: In C#, whenever we add an interface to our class definition, we are making a
    promise that we will include an implementation for all of the methods that were
    declared inside of that interface, and if we don’t, our code won’t compile. This
    is needed because later on we are going to pass in an object of type `IUnityAdsShowListener`
    to Unity’s code and it will use those methods at the appropriate times.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，每当我们在类定义中添加一个接口时，我们都在承诺将包含接口内部声明的所有方法的实现，如果我们不这样做，我们的代码将无法编译。这是必要的，因为稍后我们将传递一个类型为`IUnityAdsShowListener`的对象给Unity的代码，它将在适当的时候使用这些方法。
- en: 'To see what those methods are, from your IDE, you may be able to right-click
    on the `IUnityAdsShowListener` option and select **Go to Definition**. From there,
    you may see something like the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些方法，从您的IDE中，您可能可以右键单击`IUnityAdsShowListener`选项并选择**转到定义**。从那里，您可能看到以下内容：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will need to create four methods inside our own class with the exact same
    names, parameters, and return types.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的类中创建四个方法，具有完全相同的名称、参数和返回类型。
- en: Important note
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: For more information on interfaces and how they work in C#, check out [https://www.tutorialsteacher.com/csharp/csharp-interface](https://www.tutorialsteacher.com/csharp/csharp-interface).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 关于接口及其在C#中的工作方式，请查看[https://www.tutorialsteacher.com/csharp/csharp-interface](https://www.tutorialsteacher.com/csharp/csharp-interface)。
- en: 'After doing this, we need to implement the functions used by the interface:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，我们需要实现接口中使用的函数：
- en: '[PRE7]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Each of these four functions does something when we are creating ads. Of note
    is the `OnUnityAdsShowStart` method, where we pause the game, and then the `OnUnityAdsShowComplete`
    method where we unpause. We utilize a region here in order to make it easier to
    compartmentalize our code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建广告时，这四个函数中的每一个都会执行一些操作。值得注意的是`OnUnityAdsShowStart`方法，其中我们暂停游戏，然后是`OnUnityAdsShowComplete`方法，其中我们取消暂停。我们在这里使用区域是为了使代码的模块化更容易。
- en: Important note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: For more information on the `#region` block, check out [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-region](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-region).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`#region`块的更多信息，请查看[https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-region](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-region)。
- en: 'Next, we will make it so that `PauseScreenBehaviour` doesn’t override this
    new change. So, we will replace the `Start()` function with the following:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将确保`PauseScreenBehaviour`不会覆盖这个新的更改。因此，我们将用以下内容替换`Start()`函数：
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding snippet is important because otherwise the game will immediately
    be turned off when the level loads in the `Start` function, after we tell the
    game to pause, which is called after the level loads. This is needed for the PC
    version of the game, as there is nothing else to unpause the static value.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段很重要，否则当我们在`Start`函数中告诉游戏暂停后，游戏将在关卡加载时立即关闭。这是游戏PC版本所需要的，因为没有其他方法可以取消暂停静态值。
- en: 'Save our scripts and start the game up again:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存我们的脚本并重新启动游戏：
- en: '![Figure 7.6 – The game is paused until the player ends the ad](img/B18868_07_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 游戏暂停，直到玩家结束广告](img/B18868_07_06.jpg)'
- en: Figure 7.6 – The game is paused until the player ends the ad
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 游戏暂停，直到玩家结束广告
- en: With that, when we transition from the main menu to the game, we will pause
    the game until we are ready to jump in. Now that we can see how to work with basic
    advertisements that aren’t optional, let’s give players the opportunity to see
    an ad for some kind of benefit.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当我们从主菜单过渡到游戏时，我们将暂停游戏，直到我们准备好加入。现在我们已经了解了如何处理基本且非可选的广告，让我们给玩家提供观看广告以获得某种利益的机会。
- en: Opt-in advertisements with rewards
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奖励式广告
- en: According to AdColony, the most recommended form of mobile game ad according
    to 58% of mobile developers is the rewarded video ad. By that, we’re referring
    to making ads an opt-in experience where players choose to see an ad and receive
    some kind of bonus in return. That way, users feel it’s a choice for them whether
    or not to watch the ad, and they feel more compelled to watch it because they
    will get something out of it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 根据AdColony的数据，58%的移动开发者推荐的最合适的移动游戏广告形式是奖励视频广告。也就是说，我们将广告设置为一种可选体验，玩家可以选择观看广告并为此获得某种形式的奖励。这样，用户会感觉到是否观看广告是他们自己的选择，而且他们会更有动力观看，因为他们会从中获得一些东西。
- en: Rewarded ad placements typically yield higher **effective Cost Per 1000 Impressions
    (eCPMs)** since they offer more engagement from users by allowing them to opt
    in before watching an ad in exchange for some in-game reward.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 奖励广告的位置通常会产生更高的**每千次展示有效成本（eCPM）**，因为它们通过允许用户在观看广告之前选择加入以换取一些游戏内奖励，从而提供了更多用户参与度。
- en: Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re interested in learning more about why reward ads are recommended,
    check out [https://www-staging.adcolony.com/blog/2016/04/26/the-top-ads-recommended-by-mobile-game-developers/](https://www-staging.adcolony.com/blog/2016/04/26/the-top-ads-recommended-by-mobile-game-developers/).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于为什么推荐奖励广告的原因，请查看[https://www-staging.adcolony.com/blog/2016/04/26/the-top-ads-recommended-by-mobile-game-developers/](https://www-staging.adcolony.com/blog/2016/04/26/the-top-ads-recommended-by-mobile-game-developers/)。
- en: 'In our game, we could add the choice of restarting the game or seeing an ad
    to continue the game. This means that we will need to create some kind of menu
    in order for the player to select whether or not to see the ad, so let’s add that
    next:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的游戏中，我们可以添加重新开始游戏或观看广告以继续游戏的选项。这意味着我们需要创建某种类型的菜单，以便玩家可以选择是否观看广告，所以让我们添加它：
- en: Stop the game if you haven’t done so already, and then open up the **Gameplay**
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有停止游戏，请先停止游戏，然后打开**游戏玩法**
- en: scene. Afterward, let’s create a `Game Over` and then turn off the **Pause Menu**
    so that we can see the **Game Over** object clearly. To make it easier to see,
    feel free to toggle to the 2D mode we used previously when creating the UI elements
    of our game.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 场景。之后，让我们创建一个`Game Over`菜单，然后关闭**暂停菜单**，以便我们可以清楚地看到**游戏结束**对象。为了更容易看到，您可以自由切换到我们之前在创建游戏UI元素时使用的2D模式。
- en: Next, expand the `Game Over Contents` and change the child `Game` `Over` instead.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，展开`Game Over Contents`并更改子`Game` `Over`。
- en: 'Now, change the `Continue (Play Ad)` and change the button object’s name to
    `Continue Button`:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`Continue (Play Ad)`改为`Continue Button`并更改按钮对象的名称：
- en: '![Figure 7.7 – Game Over menu setup](img/B18868_07_07.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 游戏结束菜单设置](img/B18868_07_07.jpg)'
- en: Figure 7.7 – Game Over menu setup
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 游戏结束菜单设置
- en: 'We’ll first need to update the `ObstacleBehaviour` script to handle it; add
    the following highlighted code:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要更新`ObstacleBehaviour`脚本以处理它；添加以下高亮代码：
- en: '[PRE9]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'First, add the following variable and update the `OnCollisionEnter` function
    to the following:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加以下变量并更新`OnCollisionEnter`函数如下：
- en: '[PRE10]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this instance, we remove the code that was destroying the `player` object
    and hide it instead. The reason we do this is so that, if the player decides to
    play the ad, we can then unhide it and resume the game as normal.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们移除了摧毁`player`对象的代码，并将其隐藏起来。我们这样做的原因是，如果玩家决定播放广告，我们就可以将其取消隐藏并正常继续游戏。
- en: 'We will use the `Button` class next, so we want to add the following to the
    top of the `ObstacleBehaviour` script:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`Button`类，所以我们需要在`ObstacleBehaviour`脚本的顶部添加以下内容：
- en: '[PRE11]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With that done, we will then update the `ResetGame` function to the following:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成这些后，我们将更新`ResetGame`函数如下：
- en: '[PRE12]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We also destroy what the player hit. So, if we do restart the game, then the
    player will be able to start from right where they initially began.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会摧毁玩家所击中的物体。因此，如果我们重新启动游戏，那么玩家将能够从他们最初开始的地方重新开始。
- en: 'Next, add the following two helper functions:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加以下两个辅助函数：
- en: '[PRE13]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With that in mind, we also created a `Continue` function, which will set up
    the game to be continued if we need to do so.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们还创建了一个`Continue`函数，这样我们就可以在需要时设置游戏继续。
- en: 'Open up the `UnityAdController` script and add the following variable declaration
    at the top of the file:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`UnityAdController`脚本，并在文件顶部添加以下变量声明：
- en: '[PRE14]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Afterward, staying in the `UnityAdController` script, update the `OnUnityAdsShowComplete`
    function to the following:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，继续在`UnityAdController`脚本中，更新`OnUnityAdsShowComplete`函数如下：
- en: '[PRE15]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Our additions first check whether there is an obstacle that our player has hit.
    If there is, we then check the value of the `showCompletionState` variable that
    is provided by the function. We utilize the `UnityAdsShowCompletionState` enum
    to verify that the player actually completed the ad and did not click on the **Skip**
    button.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查是否有玩家撞击的障碍物。如果有，我们接着检查由函数提供的`showCompletionState`变量的值。我们使用`UnityAdsShowCompletionState`枚举来验证玩家实际上完成了广告，并且没有点击**跳过**按钮。
- en: 'We want to make sure that Unity’s Advertisement system works in both scenes,
    so we can copy-paste the `GameManager` script and add the following highlighted
    code to the `Start` function:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要确保Unity的广告系统在两个场景中都能正常工作，因此我们可以复制粘贴`GameManager`脚本，并将以下高亮代码添加到`Start`函数中：
- en: '[PRE16]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save your scripts and return to the Unity Editor.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本并返回到Unity编辑器。
- en: Click on the **Game Over** object and disable it, save our scene, and then open
    the **Main Menu** scene and dive into the game.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**游戏结束**对象并禁用它，保存我们的场景，然后打开**主菜单**场景并进入游戏。
- en: Tip
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you do not see the ads there, it may be due to the fact that Unity Ads was
    not initialized. This is done in the **Main Menu** scene, so you’ll need to go
    there first before you see the ads.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有在那里看到广告，可能是因为Unity Ads没有被初始化。这是在**主菜单**场景中完成的，所以你需要在看到广告之前先去那里。
- en: 'At this point, when we die in the game, we’ll be shown a **Game** **Over**
    screen:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，当我们游戏中死亡时，我们会看到一个**游戏结束**屏幕：
- en: '![Figure 7.8 – Game Over screen](img/B18868_07_08.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8 – 游戏结束屏幕](img/B18868_07_08.jpg)'
- en: Figure 7.8 – Game Over screen
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 游戏结束屏幕
- en: 'If we click on **Continue (Play Ad)**, we will have an ad play. If the player
    skips it, nothing will happen, but if they watch all the way through, it should
    take them back into the game as if nothing happened:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击**继续（播放广告）**，将播放一个广告。如果玩家跳过它，则不会发生任何事情，但如果他们看完整个广告，应该会像什么都没发生一样带他们回到游戏中：
- en: '![Figure 7.9 – Continuing the game](img/B18868_07_09.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9 – 继续游戏](img/B18868_07_09.jpg)'
- en: Figure 7.9 – Continuing the game
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 继续游戏
- en: With that, our ad system is working correctly. We have now seen how we can integrate
    the use of ads into our gameplay and provide a reason for players to actually
    want to see this content.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的广告系统就正常工作了。我们现在已经看到了如何将广告的使用集成到我们的游戏玩法中，并为玩家提供观看此内容的原因。
- en: Adding in a cooldown timer
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加冷却计时器
- en: Ads are great for developers; however, according to Unity’s Monetization FAQs,
    each user is only able to view 25 ads per day. With that in mind, we will likely
    want to make it so that players can only trigger ads every once in a while. This
    also has the benefit of making players want to come back to our game after a period
    of time.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 广告对开发者来说很棒；然而，根据Unity的货币化常见问题解答，每个用户每天只能观看25个广告。考虑到这一点，我们可能希望让玩家只能偶尔触发广告。这也具有让玩家在一段时间后想回到我们游戏中的好处。
- en: Important note
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For more information on Unity’s Monetization FAQs, check out [https://docs.unity.com/ads/FAQ.html](https://docs.unity.com/ads/FAQ.html).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Unity的货币化常见问题解答，请查看[https://docs.unity.com/ads/FAQ.html](https://docs.unity.com/ads/FAQ.html)。
- en: 'We will now implement a feature where our **Continue** option will only work
    once in a while with a short delay that we can easily customize if we like:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将实现一个功能，我们的**继续**选项将偶尔工作一次，并带有我们可以轻松定制的短延迟：
- en: 'To get started, go back to the `UnityAdController` script and add the following
    new variable to it, shown in the highlighted code:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，回到`UnityAdController`脚本，并向其中添加以下新的变量，如高亮代码所示：
- en: '[PRE17]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `nextRewardTime` variable is of the `DateTime` type, which we haven’t talked
    about previously. Basically, it’s a structure that represents a point in time
    that we can compare to other points in time and is built into .NET Framework.
    We’ll use this to store the time that needs to pass before the player is able
    to play another ad if needed. Note that `DateTime` is part of the `System` namespace.
    That is why we added the `using System;` line in the preceding code as well.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`nextRewardTime`变量是`DateTime`类型，我们之前没有讨论过。基本上，它是一个表示时间点的结构，我们可以将其与其他时间点进行比较，并且是.NET
    Framework内置的。我们将使用它来存储玩家在需要的情况下能够再次播放广告之前需要过去的时间。请注意，`DateTime`是`System`命名空间的一部分。这就是为什么我们在前面的代码中也添加了`using
    System;`行。'
- en: Important note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For more information on the `DateTime` class, check out [https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`DateTime`类的更多信息，请查看[https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx)。
- en: You may notice the `?` symbol next to the type of this variable. When we do
    this, we create what’s called a nullable type. The advantage of using them is
    that they can be `null` in addition to having normal values. We do this so that
    we don’t have to fill in a default value just for the sake of having one.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到这个变量的类型旁边有一个`?`符号。当我们这样做时，我们创建了一个被称为可空类型的结构。使用它们的优点是它们可以除了具有正常值之外还可以是`null`。我们这样做是为了我们不必仅仅为了有一个默认值而填写一个默认值。
- en: Important note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For more information on nullable types, check out [https://www.tutorialspoint.com/csharp/csharp_nullables.htm](https://www.tutorialspoint.com/csharp/csharp_nullables.htm).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 关于可空类型的更多信息，请查看[https://www.tutorialspoint.com/csharp/csharp_nullables.htm](https://www.tutorialspoint.com/csharp/csharp_nullables.htm)。
- en: 'To add a time delay between ads showing, we will create a new function for
    this purpose:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在广告之间添加时间延迟，我们将为此创建一个新的函数：
- en: '[PRE18]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now when we show a reward ad, we set `nextRewardTime` to 15 seconds from when
    the function is called. Of course, we can just as easily set this to minutes or
    hours using the `AddMinutes` and `AddHours` function.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们展示奖励广告时，将`nextRewardTime`设置为从函数调用时的15秒。当然，我们也可以使用`AddMinutes`和`AddHours`函数将其设置为分钟或小时。
- en: 'Save your script and then open up the `ObstacleBehaviour` script. At the top
    of the script, add the following new `using` statements:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的脚本，然后打开`ObstacleBehaviour`脚本。在脚本顶部，添加以下新的`using`语句：
- en: '[PRE19]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Afterward, we will need to modify the bottom part of the `ResetGame()` function
    to have the following code:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要修改`ResetGame()`函数的底部部分，以包含以下代码：
- en: '[PRE20]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, instead of just adding a listener to this button, we have replaced it with
    a call to the `StartCoroutine` function, which takes in a function that we haven’t
    written yet. I think it’s probably a good idea to talk a little bit about coroutines
    before we actually write one.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不再只是为这个按钮添加一个监听器，而是用对`StartCoroutine`函数的调用替换了它，该函数接受我们尚未编写的函数。我认为在我们实际编写一个之前，先简单谈谈协程可能是个好主意。
- en: A coroutine is like a function that has the ability to pause execution and continue
    where it left off after a period of time. By default, a coroutine is resumed on
    the frame after we start to use `yield`, but it is also possible to introduce
    a time delay using the `WaitForSeconds` function to specify how long you want
    to wait before it’s called again.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 协程就像一个具有暂停执行并在一段时间后继续执行的能力的函数。默认情况下，协程在开始使用`yield`之后的帧上恢复，但也可以使用`WaitForSeconds`函数引入时间延迟，以指定在再次调用之前需要等待多长时间。
- en: 'Next, use the following script for the `ShowContinue` function:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下脚本为`ShowContinue`函数：
- en: '[PRE21]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This coroutine will do a number of things, starting off by entering a `while
    (true)` loop. Now, usually, this is a very bad thing, as it would cause an infinite
    loop, but we break out of the loop if we have no reward time set or if we’ve passed
    the time set in the `nextRewardTime` variable. If not, we will figure out how
    much time is left before that time has passed and will change the button’s text
    to display it. We then use the `WaitForSeconds` function to pause execution and
    come back after 1 second has passed.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个协程将执行多项操作，首先是通过进入一个 `while (true)` 循环。现在，这通常是一个非常糟糕的事情，因为它会导致无限循环，但如果没有设置奖励时间或者已经超过了
    `nextRewardTime` 变量中设置的时间，我们会跳出循环。如果没有，我们将计算出在时间到达之前还有多少时间，并将按钮的文本更改为显示它。然后我们使用
    `WaitForSeconds` 函数暂停执行，并在 1 秒后返回。
- en: Important note
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you’re interested in learning more about the behind-the-scenes aspects of
    how coroutines work, Oliver Booth wrote a neat article on it at [https://blog.oliverbooth.dev/2021/04/27/how-do-unitys-coroutines-actually-work/](https://blog.oliverbooth.dev/2021/04/27/how-do-unitys-coroutines-actually-work/).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣，想了解更多关于协程幕后工作原理的细节，Oliver Booth 在 [https://blog.oliverbooth.dev/2021/04/27/how-do-unitys-coroutines-actually-work/](https://blog.oliverbooth.dev/2021/04/27/how-do-unitys-coroutines-actually-work/)
    上写了一篇不错的文章。
- en: 'Save all of our scripts and dive back into Unity and play the game:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有脚本并返回 Unity 中玩游戏：
- en: '![Figure 7.10 – Delay screen working correctly](img/B18868_07_10.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 延迟屏幕正常工作](img/B18868_07_10.jpg)'
- en: Figure 7.10 – Delay screen working correctly
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 延迟屏幕正常工作
- en: Upon restarting the game once, you’ll see that if we try to do so again, we
    are brought to a delay screen. After the time gets down to 0, the player will
    then be able to continue once again.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动游戏一次后，你会看到如果我们再次尝试这样做，我们会被带到延迟屏幕。当时间降到 0 时，玩家将再次能够继续。
- en: Important note
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For additional information on the best practices for rewarded ads such as this,
    check out [https://docs.unity.com/ads/MonetizationStrategy.html](https://docs.unity.com/ads/MonetizationStrategy.html).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此类奖励广告的最佳实践等信息，请参阅 [https://docs.unity.com/ads/MonetizationStrategy.html](https://docs.unity.com/ads/MonetizationStrategy.html)。
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With that, we’ve got a good foundation of how to add ads to our game. Hopefully,
    you can see how easy it is to implement and can think of new ways to engage players
    to have the best experience possible. Over the course of this chapter, we discovered
    how to set up Unity Ads. We then saw how we could create simple ads and learned
    how to react to the player’s actions by implementing the `IUnityAdsShowListener`
    interface. Afterward, we saw how we can add rewards for players using opt-in advertisements
    in the game, and we added a cooldown to the system to make the game less annoying
    for players. With these newly acquired skills, you should be able to add advertisements
    and gain additional revenue from your own games that you create in the future.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，我们已经建立了如何在游戏中添加广告的良好基础。希望你能看到实现起来有多简单，并能想到新的方法来吸引玩家，以获得最佳体验。在本章的整个过程中，我们发现了如何设置
    Unity Ads。然后我们看到我们可以创建简单的广告，并学习了如何通过实现 `IUnityAdsShowListener` 接口来响应玩家的操作。之后，我们看到我们可以通过在游戏中使用可选广告为玩家添加奖励，并为系统添加了冷却时间，以使游戏对玩家来说不那么令人烦恼。凭借这些新获得的能力，你应该能够添加广告，并从你未来创建的游戏中获得额外的收入。
- en: Important note
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: By default, ads should be in test mode. It is against Unity Ads’ terms of service
    to distribute live ads to beta testers. If they were to click on or install any
    of the advertised games, their activity would be monetized and the automated fraud
    system would flag the game for fraud and disable it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，广告应处于测试模式。向测试者分发实时广告违反了 Unity Ads 的服务条款。如果他们点击或安装任何广告中的游戏，他们的活动将被货币化，自动欺诈系统将标记该游戏为欺诈并禁用它。
- en: To disable test mode, you can go to the Analytics Monetization Dashboard by
    going to **Services | Ads | Configure** and then clicking on **Go to Dashboard**.
    (If you need to, select **Set Meditation Partner** and **I only plan to use**
    **Unity ads**.)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用测试模式，你可以通过访问 **服务 | 广告 | 配置** 并点击 **转到仪表板** 来进入分析货币化仪表板。（如果你需要，请选择 **设置冥想伙伴**
    和 **我只计划使用** **Unity 广告**。）
- en: From your project, select **Settings**. Scroll down to the **Test mode** section
    and modify the **Apple App Store** or **Google Play Store** properties as you
    wish.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的项目中选择 **设置**。向下滚动到 **测试模式** 部分，并根据需要修改 **Apple App Store** 或 **Google Play
    Store** 属性。
- en: 'While this is a valid way to monetize our games, we will dive into another
    more popular form of in-game monetization in the next chapter: in-app purchases.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是我们游戏盈利的有效方式，但我们将在下一章深入探讨另一种更受欢迎的游戏内盈利形式：应用内购买。
