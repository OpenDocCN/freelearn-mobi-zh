- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advertising Using Unity Ads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working on mobile titles, you need to think about how you are going to
    sell your game. Deciding on how to best sell a game can be difficult. Of course,
    you can sell your game for a price, and there is a possibility that it will be
    successful, but you’ll be limiting your audience numbers to a much lower amount.
    This could work well for a niche game, but if you’re trying to make a game with
    a broad appeal where you want to get as many players as possible to play your
    title, you may have some issues.
  prefs: []
  type: TYPE_NORMAL
- en: Having a price on the game can be a major hurdle in getting initial customers
    who will share the game via word of mouth and contribute to having more people
    play your game. To solve this potential issue, you do have the option of making
    your game free.
  prefs: []
  type: TYPE_NORMAL
- en: Afterward, you can give players the opportunity to purchase things or show advertisements
    when playing the game.
  prefs: []
  type: TYPE_NORMAL
- en: That’s not to say that having a bunch of advertisements in a free game is the
    best option either. Having too many ads, or even the wrong kind of ads, can drive
    users away, which can be even worse. Many developers have their own opinions on
    whether it’s a good idea to use ads or not, but that’s not the purpose of this
    chapter. In this chapter, we will look into the different options available to
    us in terms of advertising over the course of our game and show how to implement
    them, should you choose to add this content to your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is split into a number of topics. It contains a simple step-by-step
    process, from beginning to end. The following is the outline of our tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Unity Ads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple ad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding in-ad callback methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opt-in advertisements with rewards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating a cooldown timer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will integrate the Unity Ads framework into our project
    and learn how to create both simple and complex versions of advertisements. This
    is done by first setting up Unity’s Ads system, then creating a simple ad before
    adding additional callback options. We will then see how we can give additional
    incentives to view ads by utilizing opt-in rewards and adding a cooldown timer
    to prevent players from watching too many ads.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the **Unity Editor system** **requirements** section.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter06%20and%2007).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Unity Ads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity Ads is a video ad network for iOS and Android that can monetize your
    existing player base by showing ads. Unity Ads offers video ads that can be shown
    as either rewarded or non-rewarded placements. As the name suggests, rewarded
    ads will give the users a reward or incentive that will help them while playing
    the game. Before we can enable Unity Ads, we must first enable Unity’s Services
    suite. To activate Unity Services, you have to link your project to a Unity Services
    Project ID, which is how Unity can tell the difference between the different projects
    you are creating. So let’s see how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Services** window by going to **Window | General | Services** or
    by pressing *Ctrl* + *0*. This will open up the Unity Package Manager and will
    automatically select the **Advertisement** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – The Advertisement option in the Unity Package Manager](img/B18868_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – The Advertisement option in the Unity Package Manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Install** button and wait for it to finish installing. Upon
    finishing the installation, you should see a window that looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Service Activation window](img/B18868_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Service Activation window
  prefs: []
  type: TYPE_NORMAL
- en: You can also access this menu by going to **Services | Ads | Configure** after
    the package has been installed.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that you haven’t worked with Unity Services before, you will need to
    create **Organization** and **Project** **Name details**.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the dropdown and select your username and then click on the **Create
    project ID** button. The project name is automatically created according to the
    name of your project when you first created it, but you can change this in the
    **Settings** section of the **Services** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Unity automatically creates an organization using your account username; however,
    if you need to create another one, you can do so at [https://id.unity.com/organizations](https://id.unity.com/organizations).
  prefs: []
  type: TYPE_NORMAL
- en: You’ll then be asked questions about your game. If your game is not directed
    toward children, go ahead and select **No** from the drop-down menu and then click
    on the **Save** button. Otherwise, select **Yes** and then click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When you indicate that your game is designed for children under the age of 13
    years, ads will not be behaviorally targeted to users in your game. Behavioral
    targeting can yield a higher **effective cost per thousand impressions** (**eCPM**)
    by showing ads that are more relevant to your users, but its use is prohibited
    with users under the age of 13 due to **Children’s Online Privacy Protection Rule
    Act (COPPA)** regulations. For more info on this, check out [https://forum.unity.com/threads/age-designation.326930/](https://forum.unity.com/threads/age-designation.326930/).
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.3 – Answering the COPPA compliance question\uFEFF](img/B18868_07_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Answering the COPPA compliance question
  prefs: []
  type: TYPE_NORMAL
- en: Then, when brought to the **Ads** menu, click on the toggle at the top right
    to turn it on. Ads should be toggled on at this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you scroll down, you’ll see a property called **Game Id**; note down those
    values as we will need them in order to initialize Unity Ads at the start of the
    game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get started, it would be a good idea for us to have all of the ad-related
    behavior to share a script, so we will create a new class called `UnityAd Controller`
    by going to the `Assets/Scripts` folder, and selecting **Create** | **C# Script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up the file in the IDE of your choice, and use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code does a number of things. We first state that we are using
    the `UnityEngine.Advertisments` namespace to get access to the `Advertisement`
    class. If you only intend to implement video, interstitial, and banner ads for
    your monetization strategy, this is the API that Unity suggests to use. In addition
    to this, in order to use Unity Ads, you must call the `Advertisement.Initialize`
    function, which I do inside of the `Start` function of this object.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the `GameObject` (`Unity Ad Controller`. Once created, attach the **Unity
    Ad Controller** script to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Creating the Unity Ad Controller object](img/B18868_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Creating the Unity Ad Controller object
  prefs: []
  type: TYPE_NORMAL
- en: Because this object is spawned at the **MainMenu** level, it is loaded at the
    beginning of the game, which is perfect for what we will use it for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we have finished the setup process required to utilize Unity
    Ads by enabling Unity Analytics and then turning the **Ads** menu on. With the
    setup process complete, we can now proceed to actually adding a simple ad to our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a simple ad
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Advertisements are a possible way to generate revenue from players playing
    your game. As mentioned previously, Unity Ads has two different types of ads that
    we can display: simple and rewarded. Simple ads are easy to use, hence the name,
    and allow users to have simple full-screen interstitial ads. This can be really
    useful when moving between levels or perhaps when the player wants to restart
    the game. Let’s see how we can implement that feature now. Implement the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we will need to add a new function to the `UnityAdController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we created a static method called `ShowAd`. We made this static so that
    we can access the function without actually having to create an instance of this
    class in order to call it. The function will load an advertisement into memory
    and then, when it is ready, we will call the `Show()` function to display it on
    the screen. We also created a helper function called `GetAdID` in order to give
    us the correct ad type to use depending on the platform we are deploying to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your script and then open up the `MainMenuBehaviour` file and add the
    following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will have an advertisement play each time we call the `LoadLevel` function
    if it is supported. We also added a new parameter with a default value. The nice
    thing about this is that we can optionally decide when we want to show an ad.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, we may want to make it so that when we restart the game, we don’t
    play an ad.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s see this in action. Play the game and then click on the **Play**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – An example ad being shown](img/B18868_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – An example ad being shown
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, the ad works correctly. This screen
    is what is shown when playing the game in the editor. It has buttons to allow
    us to test whether a player skips or watches a video in full. When we disable
    test mode, we will then see live video ads.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also see this happen if, once in the game, you open the pause menu and
    click on the **Main** **Menu** button.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If this does not work and/or show up, check the **Player Settings** menu you
    learned about previously and ensure that your current platform is set to Android
    or iOS.
  prefs: []
  type: TYPE_NORMAL
- en: This provides us with the easiest way of getting an ad to show up in our game,
    but there are still a number of things we need to do to ensure our ads work properly,
    which we will look at next.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Another type of ad that can be used is banner ads. These work similarly to default
    ads but you’d use `Banner` instead of `Interstitial` when calling `GetAdID`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on this, check out [https://docs.unity.com/monetization-dashboard/AdUnits.html](https://docs.unity.com/monetization-dashboard/AdUnits.html).
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing ad callback methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code we wrote for the `LoadLevel` function works perfectly fine when we
    go to the main menu of the game; however, if we dive into the game itself from
    the main menu, the game will still be going on in the background with the ad blocking
    the player from playing the game.
  prefs: []
  type: TYPE_NORMAL
- en: When running your app on an actual mobile device, the Unity project will pause
    while Unity Ads are shown. However, if you are testing in the Unity Editor, the
    game is not paused while the placeholder ads are shown. However, we can simulate
    that behavior ourselves using the `Advertisement.ShowOptions` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will pause the game when an ad is shown and then resume the game once the
    ad is finished. To do so, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first open up the `UnityAdController` class and add the following variable
    and update the `Start` function to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `instance` variable is going to be used to give the `Advertisement.Show`
    function a second parameter to reference the object to run code on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `ShowAd` function to have the second parameter added to our function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the second parameter, the `Advertisement.Show` function takes in an `IUnityAdsShowListener`
    object. `I` at the start of the name here indicates that this type is an interface.
    This is a keyword in C#, designating something like a contract, promising that
    whatever you provide to this function contains the functionalities required by
    the interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now update the class definition to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By adding the comma and then `IUnityAdsShowListener`, we are stating that we
    will implement the methods provided by the `IUnityAdsShowListener` interface.
  prefs: []
  type: TYPE_NORMAL
- en: In C#, whenever we add an interface to our class definition, we are making a
    promise that we will include an implementation for all of the methods that were
    declared inside of that interface, and if we don’t, our code won’t compile. This
    is needed because later on we are going to pass in an object of type `IUnityAdsShowListener`
    to Unity’s code and it will use those methods at the appropriate times.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see what those methods are, from your IDE, you may be able to right-click
    on the `IUnityAdsShowListener` option and select **Go to Definition**. From there,
    you may see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We will need to create four methods inside our own class with the exact same
    names, parameters, and return types.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on interfaces and how they work in C#, check out [https://www.tutorialsteacher.com/csharp/csharp-interface](https://www.tutorialsteacher.com/csharp/csharp-interface).
  prefs: []
  type: TYPE_NORMAL
- en: 'After doing this, we need to implement the functions used by the interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each of these four functions does something when we are creating ads. Of note
    is the `OnUnityAdsShowStart` method, where we pause the game, and then the `OnUnityAdsShowComplete`
    method where we unpause. We utilize a region here in order to make it easier to
    compartmentalize our code.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `#region` block, check out [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-region](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-region).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will make it so that `PauseScreenBehaviour` doesn’t override this
    new change. So, we will replace the `Start()` function with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding snippet is important because otherwise the game will immediately
    be turned off when the level loads in the `Start` function, after we tell the
    game to pause, which is called after the level loads. This is needed for the PC
    version of the game, as there is nothing else to unpause the static value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save our scripts and start the game up again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – The game is paused until the player ends the ad](img/B18868_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – The game is paused until the player ends the ad
  prefs: []
  type: TYPE_NORMAL
- en: With that, when we transition from the main menu to the game, we will pause
    the game until we are ready to jump in. Now that we can see how to work with basic
    advertisements that aren’t optional, let’s give players the opportunity to see
    an ad for some kind of benefit.
  prefs: []
  type: TYPE_NORMAL
- en: Opt-in advertisements with rewards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to AdColony, the most recommended form of mobile game ad according
    to 58% of mobile developers is the rewarded video ad. By that, we’re referring
    to making ads an opt-in experience where players choose to see an ad and receive
    some kind of bonus in return. That way, users feel it’s a choice for them whether
    or not to watch the ad, and they feel more compelled to watch it because they
    will get something out of it.
  prefs: []
  type: TYPE_NORMAL
- en: Rewarded ad placements typically yield higher **effective Cost Per 1000 Impressions
    (eCPMs)** since they offer more engagement from users by allowing them to opt
    in before watching an ad in exchange for some in-game reward.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in learning more about why reward ads are recommended,
    check out [https://www-staging.adcolony.com/blog/2016/04/26/the-top-ads-recommended-by-mobile-game-developers/](https://www-staging.adcolony.com/blog/2016/04/26/the-top-ads-recommended-by-mobile-game-developers/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our game, we could add the choice of restarting the game or seeing an ad
    to continue the game. This means that we will need to create some kind of menu
    in order for the player to select whether or not to see the ad, so let’s add that
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: Stop the game if you haven’t done so already, and then open up the **Gameplay**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: scene. Afterward, let’s create a `Game Over` and then turn off the **Pause Menu**
    so that we can see the **Game Over** object clearly. To make it easier to see,
    feel free to toggle to the 2D mode we used previously when creating the UI elements
    of our game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, expand the `Game Over Contents` and change the child `Game` `Over` instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, change the `Continue (Play Ad)` and change the button object’s name to
    `Continue Button`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Game Over menu setup](img/B18868_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Game Over menu setup
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll first need to update the `ObstacleBehaviour` script to handle it; add
    the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, add the following variable and update the `OnCollisionEnter` function
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this instance, we remove the code that was destroying the `player` object
    and hide it instead. The reason we do this is so that, if the player decides to
    play the ad, we can then unhide it and resume the game as normal.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `Button` class next, so we want to add the following to the
    top of the `ObstacleBehaviour` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With that done, we will then update the `ResetGame` function to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We also destroy what the player hit. So, if we do restart the game, then the
    player will be able to start from right where they initially began.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following two helper functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that in mind, we also created a `Continue` function, which will set up
    the game to be continued if we need to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `UnityAdController` script and add the following variable declaration
    at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Afterward, staying in the `UnityAdController` script, update the `OnUnityAdsShowComplete`
    function to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our additions first check whether there is an obstacle that our player has hit.
    If there is, we then check the value of the `showCompletionState` variable that
    is provided by the function. We utilize the `UnityAdsShowCompletionState` enum
    to verify that the player actually completed the ad and did not click on the **Skip**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to make sure that Unity’s Advertisement system works in both scenes,
    so we can copy-paste the `GameManager` script and add the following highlighted
    code to the `Start` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your scripts and return to the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Game Over** object and disable it, save our scene, and then open
    the **Main Menu** scene and dive into the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you do not see the ads there, it may be due to the fact that Unity Ads was
    not initialized. This is done in the **Main Menu** scene, so you’ll need to go
    there first before you see the ads.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, when we die in the game, we’ll be shown a **Game** **Over**
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Game Over screen](img/B18868_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Game Over screen
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on **Continue (Play Ad)**, we will have an ad play. If the player
    skips it, nothing will happen, but if they watch all the way through, it should
    take them back into the game as if nothing happened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Continuing the game](img/B18868_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Continuing the game
  prefs: []
  type: TYPE_NORMAL
- en: With that, our ad system is working correctly. We have now seen how we can integrate
    the use of ads into our gameplay and provide a reason for players to actually
    want to see this content.
  prefs: []
  type: TYPE_NORMAL
- en: Adding in a cooldown timer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ads are great for developers; however, according to Unity’s Monetization FAQs,
    each user is only able to view 25 ads per day. With that in mind, we will likely
    want to make it so that players can only trigger ads every once in a while. This
    also has the benefit of making players want to come back to our game after a period
    of time.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Unity’s Monetization FAQs, check out [https://docs.unity.com/ads/FAQ.html](https://docs.unity.com/ads/FAQ.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now implement a feature where our **Continue** option will only work
    once in a while with a short delay that we can easily customize if we like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, go back to the `UnityAdController` script and add the following
    new variable to it, shown in the highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `nextRewardTime` variable is of the `DateTime` type, which we haven’t talked
    about previously. Basically, it’s a structure that represents a point in time
    that we can compare to other points in time and is built into .NET Framework.
    We’ll use this to store the time that needs to pass before the player is able
    to play another ad if needed. Note that `DateTime` is part of the `System` namespace.
    That is why we added the `using System;` line in the preceding code as well.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `DateTime` class, check out [https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx).
  prefs: []
  type: TYPE_NORMAL
- en: You may notice the `?` symbol next to the type of this variable. When we do
    this, we create what’s called a nullable type. The advantage of using them is
    that they can be `null` in addition to having normal values. We do this so that
    we don’t have to fill in a default value just for the sake of having one.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on nullable types, check out [https://www.tutorialspoint.com/csharp/csharp_nullables.htm](https://www.tutorialspoint.com/csharp/csharp_nullables.htm).
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a time delay between ads showing, we will create a new function for
    this purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now when we show a reward ad, we set `nextRewardTime` to 15 seconds from when
    the function is called. Of course, we can just as easily set this to minutes or
    hours using the `AddMinutes` and `AddHours` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your script and then open up the `ObstacleBehaviour` script. At the top
    of the script, add the following new `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Afterward, we will need to modify the bottom part of the `ResetGame()` function
    to have the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, instead of just adding a listener to this button, we have replaced it with
    a call to the `StartCoroutine` function, which takes in a function that we haven’t
    written yet. I think it’s probably a good idea to talk a little bit about coroutines
    before we actually write one.
  prefs: []
  type: TYPE_NORMAL
- en: A coroutine is like a function that has the ability to pause execution and continue
    where it left off after a period of time. By default, a coroutine is resumed on
    the frame after we start to use `yield`, but it is also possible to introduce
    a time delay using the `WaitForSeconds` function to specify how long you want
    to wait before it’s called again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, use the following script for the `ShowContinue` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This coroutine will do a number of things, starting off by entering a `while
    (true)` loop. Now, usually, this is a very bad thing, as it would cause an infinite
    loop, but we break out of the loop if we have no reward time set or if we’ve passed
    the time set in the `nextRewardTime` variable. If not, we will figure out how
    much time is left before that time has passed and will change the button’s text
    to display it. We then use the `WaitForSeconds` function to pause execution and
    come back after 1 second has passed.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in learning more about the behind-the-scenes aspects of
    how coroutines work, Oliver Booth wrote a neat article on it at [https://blog.oliverbooth.dev/2021/04/27/how-do-unitys-coroutines-actually-work/](https://blog.oliverbooth.dev/2021/04/27/how-do-unitys-coroutines-actually-work/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Save all of our scripts and dive back into Unity and play the game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Delay screen working correctly](img/B18868_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Delay screen working correctly
  prefs: []
  type: TYPE_NORMAL
- en: Upon restarting the game once, you’ll see that if we try to do so again, we
    are brought to a delay screen. After the time gets down to 0, the player will
    then be able to continue once again.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For additional information on the best practices for rewarded ads such as this,
    check out [https://docs.unity.com/ads/MonetizationStrategy.html](https://docs.unity.com/ads/MonetizationStrategy.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With that, we’ve got a good foundation of how to add ads to our game. Hopefully,
    you can see how easy it is to implement and can think of new ways to engage players
    to have the best experience possible. Over the course of this chapter, we discovered
    how to set up Unity Ads. We then saw how we could create simple ads and learned
    how to react to the player’s actions by implementing the `IUnityAdsShowListener`
    interface. Afterward, we saw how we can add rewards for players using opt-in advertisements
    in the game, and we added a cooldown to the system to make the game less annoying
    for players. With these newly acquired skills, you should be able to add advertisements
    and gain additional revenue from your own games that you create in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: By default, ads should be in test mode. It is against Unity Ads’ terms of service
    to distribute live ads to beta testers. If they were to click on or install any
    of the advertised games, their activity would be monetized and the automated fraud
    system would flag the game for fraud and disable it.
  prefs: []
  type: TYPE_NORMAL
- en: To disable test mode, you can go to the Analytics Monetization Dashboard by
    going to **Services | Ads | Configure** and then clicking on **Go to Dashboard**.
    (If you need to, select **Set Meditation Partner** and **I only plan to use**
    **Unity ads**.)
  prefs: []
  type: TYPE_NORMAL
- en: From your project, select **Settings**. Scroll down to the **Test mode** section
    and modify the **Apple App Store** or **Google Play Store** properties as you
    wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this is a valid way to monetize our games, we will dive into another
    more popular form of in-game monetization in the next chapter: in-app purchases.'
  prefs: []
  type: TYPE_NORMAL
