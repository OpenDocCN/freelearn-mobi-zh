["```swift\n$ git clone -b 2nd/chapter06 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition.git PassXYZ.Vault2 \n```", "```swift\n// Registration\nvar services = new ServiceCollection();                           //(1)\nservices.AddSingleton <IDataStore<Item>, MockDataStore>();        //(2)\n// Resolution\nServiceProvider provider =\n    services.BuildServiceProvider(validateScopes: true);            //(3)\nIDataStore<Item> dataStore =\n    provider.GetRequiredService<IDataStore<Item>>();                //(4) \n```", "```swift\nIServiceScope scope = provider.CreateScope();\nIDataStore<Item> dataStore = scope.ServiceProvider\n    .GetRequiredService<IDataStore<Item>>(); \n```", "```swift\nFigure 6.4:\n```", "```swift\nvar services = new ServiceCollection();\nservices.AddSingleton< IUserService<User>, UserService>();         //(1)\nservices.AddScoped<IDataStore<Item>, DataStore>();                 //(1)\nservices.AddTransient<ItemsViewModel>();                           //(1)\nServiceProvider rootContainer =\n    services.BuildServiceProvider(validateScopes: true);           //(2)\nvar userService =\n    rootContainer.GetRequiredService<IUserService<User>>();\nIServiceScope scope1 = rootContainer.CreateScope();                //(3)\nIDataStore<Item> dataStore1 =\n  scope1.ServiceProvider.GetRequiredService<IDataStore<Item>>();\nIServiceScope scope2 = rootContainer.CreateScope();                //(3)\nIDataStore<Item> dataStore2 = Scope2.ServiceProvider.  GetRequiredService<IDataStore<Item>>(); \n```", "```swift\nbool isDebug = false;\nvar services = new ServiceCollection();\nservices.AddSingleton<DataStore, DataStore>();\nservices.AddSingleton<MockDataStore, MockDataStore>();\nservices.AddSingleton<IDataStore<Item>>(c => {\n    if (isDebug)\n    {\n        return c.GetRequiredService<MockDataStore>();\n    }\n    else\n    {\n        return c.GetRequiredService<DataStore>();\n    }\n}); \nDataStore and MockDataStore, and the interface IDataStore for distinct build configurations. When configuring IDataStore, a delegate can be employed to resolve the object. The isDebug variable may be adjusted using build configurations, enabling it to be set as true or false, depending on whether the build is for debugging or release purposes.\n```", "```swift\n    public interface IPlatformApplication\n    {\n        static IPlatformApplication? Current { get; set; }\n        IServiceProvider Services { get; }\n        IApplication Application { get; }\n    } \n    ```", "```swift\n    protected override MauiApp\n        CreateMauiApp() => MauiProgram.CreateMauiApp(); \n    ```", "```swift\npublic static class MauiProgram {                                 //(1)\n  public static MauiApp CreateMauiApp() {                         //(2)\n    var builder = MauiApp.CreateBuilder();                        //(3)\n    builder\n      .UseMauiApp<App>()\n      .ConfigureFonts(fonts => {\n        fonts.AddFont(\"fa-regular-400.ttf\",\n            \"FontAwesomeRegular\");\n        fonts.AddFont(\"fa-solid-900.ttf\",\n            \"FontAwesomeSolid\");\n        fonts.AddFont(\"fa-brands-400.ttf\",\n            \"FontAwesomeBrands\");\n        fonts.AddFont(\"OpenSans-Regular.ttf\",\n            \"OpenSansRegular\");\n        fonts.AddFont(\"OpenSans-SemiBold.ttf\",\n            \"OpenSansSemiBold\");\n      });\n#if DEBUG\n    builder.Logging.AddDebug();\n    builder.Logging.SetMinimumLevel(LogLevel.Debug);\n#endif\n    builder.Services.AddSingleton<IDataStore<Item>, DataStore>();\n    builder.Services.AddSingleton<IUserService<User>, UserService>();\n    builder.Services.AddSingleton<LoginService>();\n    builder.Services.AddSingleton<LoginViewModel>();\n    builder.Services.AddSingleton<LoginPage>();\n    builder.Services.AddSingleton<SignUpPage>();\n    builder.Services.AddSingleton<ItemDetailViewModel>();\n    builder.Services.AddSingleton<ItemDetailPage>();\n    builder.Services.AddSingleton<NewItemViewModel>();\n    builder.Services.AddSingleton<NewItemPage>();\n    builder.Services.AddSingleton<AboutViewModel>();\n    builder.Services.AddSingleton<AboutPage>();\n    builder.Services.AddTransient<ItemsViewModel>();\n    builder.Services.AddTransient<ItemsPage>();\n    return builder.Build();  }\n} \n```", "```swift\npublic partial class ItemsPage : ContentPage {\n  ItemsViewModel viewModel;\n  public ItemsPage(ItemsViewModel viewModel) {\n    InitializeComponent();\n    BindingContext = this.viewModel = viewModel;\n  }\n  protected override void OnAppearing() {\n    base.OnAppearing();\n    viewModel.OnAppearing();\n  }\n} \n```", "```swift\nnamespace PassXYZ.Vault.ViewModels {\n  [QueryProperty(nameof(ItemId), nameof(ItemId))]\n  public partial class ItemsViewModel : BaseViewModel {\n    readonly IDataStore<Item> dataStore;\n    ILogger<ItemsViewModel> logger;\n    public ObservableCollection<Item> Items { get; }\n    public ItemsViewModel(ILogger<ItemsViewModel> logger) {\n        this.logger = logger;\n        Items = new ObservableCollection<Item>();\n    }\n\n    public SetDataStore(IDataStore<Item> store) {\n      this.dataStore = store;\n    }\n\n...\n    public async Task AddItem(Item item) {\n      if (item == null) {\n        logger.LogDebug(\"Item cannot be null\");\n        return;\n      }\n      await dataStore.AddItemAsync(item);\n   }\n\n    ...\n  }\n} \n```", "```swift\nnamespace PassXYZ.Vault.Services;\npublic static class ServiceHelper\n{\n    public static TService GetService<TService>()\n        => Current.GetService<TService>();                        //(2)\n    public static IServiceProvider Current =>                     //(1)\n#if WINDOWS10_0_17763_0_OR_GREATER\n        MauiWinUIApplication.Current.Services;\n#elif ANDROID\n        MauiApplication.Current.Services;\n#elif IOS || MACCATALYST\n        MauiUIApplicationDelegate.Current.Services;\n#else\n        null;\n#endif\n} \n```", "```swift\npublic static IDataStore<Item> DataStore =>\n           ServiceHelper.GetService<IDataStore<Item>>(); \n```", "```swift\n[Inject]\npublic IDataStore<Item> DataStore { get; set; } = default!; \n```", "```swift\nbuilder.Services.AddSingleton<IDataStore<Item>, MockDataStore>();\nbuilder.Services.AddSingleton<IUserService<User>, UserService>(); \nMockDataStore for the IDataStore interface. This is a mock implementation to simplify the initial development. Now, itâ€™s time to substitute this with the actual implementation. We will replace the above code with the following:\n```", "```swift\nbuilder.Services.AddSingleton<IDataStore<Item>, DataStore>();\nbuilder.Services.AddSingleton<IUserService<User>, UserService>(); \n```", "```swift\nTask<bool> LoginAsync(T user); \n```", "```swift\npublic async Task<bool> LoginAsync(User user)\n{\n  if (user == null) { \n    throw new ArgumentNullException(\n      nameof(user), \"User cannot be null\"); }\n  _user = user;\n  return await dataStore.ConnectAsync(user);\n} \n```", "```swift\npublic async Task<bool> ConnectAsync(User user)\n{\n  return await Task.Run(() =>                                     //(1)\n  {\n    if (string.IsNullOrEmpty(user.Username) || \n      string.IsNullOrEmpty(user.Password)) {\n        throw new ArgumentNullException(nameof(user), \n        \"Username or password cannot be null\");\n    }\n    _db.Open(user);                                               //(2)\n    if (_db.IsOpen)\n    {\n        _db.CurrentGroup = _db.RootGroup;\n    }\n    return _db.IsOpen;\n  });\n} \n```", "```swift\n root group provides the first list. We use the SetCurrentGroup method (1) to establish the current navigation location. \n```", "```swift\npublic interface IDataStore<T>\n{\n  Task<bool> AddItemAsync(T item);\n  Task<bool> UpdateItemAsync(T item);\n  Task<bool> DeleteItemAsync(string id);\n  T? GetItem(string id);\n  Task<IEnumerable<T>> GetItemsAsync(\n    bool forceRefresh = false);\n  string SetCurrentGroup(T? group = default);                    //(1)\n  Task<bool> ConnectAsync(User user);\n  Task SignUpAsync(User user);\n  void Close();\n  T? CreateNewItem(ItemSubType type);\n} \n```", "```swift\n<ContentPage.ToolbarItems>\n  <ToolbarItem Text=\"Add\" Command=\"{Binding AddItemCommand}\" \n    IconImageSource=\"{FontImage FontFamily=FontAwesomeSolid, \n    Color=White, \n    Glyph={x:Static style:FontAwesomeSolid.PlusCircle}}\"/>\n</ContentPage.ToolbarItems> \n```", "```swift\n[RelayCommand]\nprivate async Task AddItem(object obj)\n{\n  string[] templates = {\n      Properties.Resources.item_subtype_group,\n      Properties.Resources.item_subtype_entry,\n      Properties.Resources.item_subtype_notes,\n      Properties.Resources.item_subtype_pxentry\n  };\n  var template = await Shell.Current.DisplayActionSheet(\n    Properties.Resources.pt_id_choosetemplate, \n    Properties.Resources.action_id_cancel, null, templates);       //(1)\n  ItemSubType type;\n  if (template == \n    Properties.Resources.item_subtype_entry) {\n    type = ItemSubType.Entry;\n  }\n  else if (template == \n    Properties.Resources.item_subtype_pxentry) {\n    type = ItemSubType.PxEntry;\n  }\n  else if (template == \n    Properties.Resources.item_subtype_group) {\n    type = ItemSubType.Group;\n  }\n  else if (template == \n    Properties.Resources.item_subtype_notes) {\n    type = ItemSubType.Notes;\n  }\n  else if (template == \n    Properties.Resources.action_id_cancel) {\n    type = ItemSubType.None;\n  }\n  else {\n    type = ItemSubType.None;\n  }\n  if (type != ItemSubType.None) {\n    var itemType = new Dictionary<string, object> {               //(2)\n        { \"Type\", type }\n    };\n    await Shell.Current.GoToAsync(                                //(3)\n      nameof(NewItemPage), itemType);\n  }\n} \n```", "```swift\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing Microsoft.Extensions.Logging;\nusing KPCLib;\nusing PassXYZLib;\nusing PassXYZ.Vault.Services;\nusing static System.Net.Mime.MediaTypeNames;\nnamespace PassXYZ.Vault.ViewModels;\n[QueryProperty(nameof(Type), nameof(Type))]                       //(1)\npublic partial class NewItemViewModel : ObservableObject\n{\n  readonly IDataStore<Item>? _dataStore;\n  ILogger<NewItemViewModel> _logger;\n  private ItemSubType _type = ItemSubType.Group;\n  public NewItemViewModel(IDataStore<Item> dataStore, \n    ILogger<NewItemViewModel> logger) {\n    this._dataStore = dataStore ?? \n      throw new ArgumentNullException(nameof(dataStore));\n    this._logger = logger;\n  }\n  private void SetPlaceholder(ItemSubType type) {\n    if (type == ItemSubType.Group) {\n      Placeholder = Properties.Resources.action_id_add +\n        \" \" + Properties.Resources.item_subtype_group;\n    }\n    else\n    {\n      Placeholder = Properties.Resources.action_id_add + \n        \" \" + Properties.Resources.item_subtype_entry;\n    }\n  }\n  public ItemSubType Type {                                       //(2)\n    get => _type;\n    set {\n      _ = SetProperty(ref _type, value);\n      SetPlaceholder(_type);\n    }\n  }\n  [ObservableProperty]\n  [NotifyCanExecuteChangedFor(nameof(SaveCommand))]\n  private string? name;\n  [ObservableProperty]\n  [NotifyCanExecuteChangedFor(nameof(SaveCommand))]\n  private string? description;\n  [ObservableProperty]\n  private string? placeholder;\n  [RelayCommand]\n  private async Task Cancel() {\n      await Shell.Current.GoToAsync(\"..\");\n  }\n  [RelayCommand(CanExecute = nameof(ValidateSave))]\n  private async Task Save() {\n    if(_dataStore == null) { \n      throw new ArgumentNullException(\n      \"dataStore cannot be null\"); }\n    Item? newItem = _dataStore.CreateNewItem(_type);             //(3)\n    if (newItem != null) {\n      newItem.Name = Name;\n      newItem.Notes = Description;\n      await _dataStore.AddItemAsync(newItem);                    //(4)\n    }\n    await Shell.Current.GoToAsync(\"..\");\n  }\n  private bool ValidateSave() {\n    var canExecute = !String.IsNullOrWhiteSpace(Name)\n        && !String.IsNullOrWhiteSpace(Description);\n    _logger.LogDebug(\"ValidateSave: {canExecute}\", canExecute);\n    return canExecute;\n  }\n} \n```", "```swift\n<ListView.ItemTemplate>\n  <DataTemplate x:DataType=\"model:Item\">\n    <template:ItemViewCell Key=\"{Binding Name}\" \n      Value=\"{Binding Description}\" Source=\"{Binding ImgSource}\"\n      ParentPage=\"{x:Reference itemsPage}\"/>\n  </DataTemplate>\n</ListView.ItemTemplate> \n```", "```swift\nusing System.Diagnostics;\nusing KPCLib;\nusing PassXYZ.Vault.ViewModels;\nnamespace PassXYZ.Vault.Views.Templates;\npublic class ItemViewCell : KeyValueView {\n  public ItemViewCell() {\n    SetContextAction(GetEditMenu(), OnEditAction);\n    SetContextAction(GetDeleteMenu(), OnDeleteAction);\n  }\n  private void OnEditAction(object? sender,                        //(1)\n    System.EventArgs e) {\n    if(sender is MenuItem menuItem)\n    {\n      if(menuItem.CommandParameter is Item item && \n          ParentPage.BindingContext is ItemsViewModel vm)\n      {\n        vm.Update(item);\n      }\n    }\n  }\n  private async void OnDeleteAction(object? sender,                //(2)\n    System.EventArgs e) {\n    if (sender is MenuItem menuItem) {\n      if (menuItem.CommandParameter is Item item &&\n          ParentPage.BindingContext is ItemsViewModel vm)\n      {\n        await vm.Delete(item);\n      }\n    }\n  }\n} \n```", "```swift\npublic async void Update(Item item) {\n  if (item == null) {\n    return;\n  }\n  await Shell.Current.Navigation.PushAsync(\n    new FieldEditPage(async (string k, string v,                  //(1)\n                      bool isProtected) => {\n    item.Name = k;\n    item.Notes = v;\n    await dataStore.UpdateItemAsync(item);                        //(2)\n  }, item.Name, item.Notes, true));\n}\npublic async Task Delete(Item item) {\n  if (item == null) {\n      return;\n  }\n  if (Items.Remove(item)) {\n      _ = await dataStore.DeleteItemAsync(item.Id);               //(3)\n  }\n  else {\n      throw new NullReferenceException(\"Delete item error\");\n  }\n} \n```"]