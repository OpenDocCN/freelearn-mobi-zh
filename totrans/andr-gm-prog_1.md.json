["```java\npackage com.packtpub.mathgamechapter2;\n```", "```java\nimport android.support.v7.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem; \n```", "```java\npublic class MainActivity extends ActionBarActivity {\n```", "```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n```", "```java\nsuper.onCreate(savedInstanceState);\n```", "```java\nsetContentView(R.layout.activity_main);\n```", "```java\n    @Override\n        public boolean onCreateOptionsMenu(Menu menu) {\n\n            // Inflate the menu; this adds items to the action bar if it is present.\n            getMenuInflater().inflate(R.menu.main, menu);\n            return true;\n        }\n\n        @Override\n        public boolean onOptionsItemSelected(MenuItem item) {\n            // Handle action bar item clicks here. The action bar will\n            // automatically handle clicks on the Home/Up button, so long\n            // as you specify a parent activity in AndroidManifest.xml.\n            int id = item.getItemId();\n            if (id == R.id.action_settings) {\n                return true;\n            }\n            return super.onOptionsItemSelected(item);\n        }\n    ```", "```java\n    import android.view.Menu;\n    import android.view.MenuItem;\n    ```", "```java\npackage com.packtpub.mathgamechapter2.mathgamechapter2; \nimport android.app.Activity; \nimport android.os.Bundle; \npublic class MainActivity extends Activity { \n\n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        setContentView(R.layout.activity_main); \n    } \n}\n```", "```java\n//this is a comment explaining what is going on\n```", "```java\n//I can write anything I like here\nbut this line will cause an error\n```", "```java\n//Below is an important note\n//I am an important note\n//We can have as many single line comments like this as we like\n```", "```java\n//setContentView(R.layout.activity_main);\n```", "```java\n/*\nThis program was written by a Java expert\nYou can tell I am good at this because my\ncode has so many helpful comments in it.\n*/\n```", "```java\n/*\nThe winning lottery numbers for next Saturday are\n9,7,12,34,29,22\nBut you still want to learn Java? Right?\n*/\n```", "```java\nint score;\n```", "```java\nlong millisecondsElapsed;\nfloat gravity;\ndouble accurateGravity;\nboolean isAlive;\nchar playerInitial;\nString playerName;\n```", "```java\nscore = 0;\nmillisecondsElapsed = 1406879842000;//1st Aug 2014 08:57:22\ngravity = 1.256;\naccurateGravity =1.256098;\nisAlive = true;\nplayerInitial = 'C';\nplayerName = \"Charles Babbage\";\n```", "```java\nint score = 0;\nlong millisecondsElapsed = 1406879842000;//1st Aug 2014 08:57:22\nfloat gravity = 1.256;\ndouble accurateGravity =1.256098;\nboolean isAlive = true;\nchar playerInitial = 'C';\nString playerName = \"Charles Babbage\";\n```", "```java\nint a;\n//The line below attempts to output a to the console\nLog.i(\"info\", \"int a = \" + a);\n```", "```java\nCompiler Error: Variable a might not have been initialized\n\n```", "```java\n    //first we declare and initialize a few variables\n    int a = 10;\n    String b = \"Alan Turing\";\n    boolean c = true;\n    ```", "```java\n    //Let's look at how Android 'sees' these variables\n    //by outputting them, one at a time to the console\n    Log.i(\"info\", \"a = \" + a);\n    Log.i(\"info\", \"b = \" + b);\n    Log.i(\"info\", \"c = \" + c);\n    ```", "```java\n    //Now let's make some changes\n    a++;\n    a = a + 10;\n    b = b + \" was smarter than the average bear Booboo\";\n    b = b + a;\n    c = (1 + 1 == 3);//1 + 1 is definitely 2! So false.\n    ```", "```java\n    //Now to output them all again\n    Log.i(\"info\", \"a = \" + a);\n    Log.i(\"info\", \"b = \" + b);\n    Log.i(\"info\", \"c = \" + c);\n    ```", "```java\ninfo﹕ a = 10\ninfo﹕ b = Alan Turing\ninfo﹕ c = true\ninfo﹕ a = 21\ninfo﹕ b = Alan Turing was smarter than the average bear Booboo21\ninfo﹕ c = false\n\n```", "```java\ninfo﹕ a = 10\ninfo﹕ b = Alan Turing\ninfo﹕ c = true\n\n```", "```java\ninfo﹕ a = 21\n\n```", "```java\ninfo﹕ b = Alan Turing was smarter than the average bear Booboo21\n\n```", "```java\npackage com.packtpub.mathgamechapter3a.mathgamechapter3a;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n```", "```java\npublic class GameActivity extends Activity {\n```", "```java\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_game);\n```", "```java\nint partA = 2;\nint partB = 2;\n```", "```java\nint correctAnswer = partA * partB;\nint wrongAnswer1 = correctAnswer - 1;\nint wrongAnswer2 = correctAnswer + 1; \n```", "```java\n    @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            //The next line loads our UI design to the screen\n            setContentView(R.layout.activity_game);\n\n     //Here we initialize all our variables\n     int partA = 9;\n     int partB = 9;\n     int correctAnswer = partA * partB;\n     int wrongAnswer1 = correctAnswer - 1;\n     int wrongAnswer2 = correctAnswer + 1;\n\n        }//onCreate ends here\n    ```", "```java\n    /*Here we get a working object based on either the button\n    or TextView class and base as well as link our new objects directly to the appropriate UI elements that we created previously*/\n\n    TextView textObjectPartA = (TextView)findViewById(R.id.textPartA);\n\n    TextView textObjectPartB = (TextView)findViewById(R.id.textPartB);\n\n    Button buttonObjectChoice1 = (Button)findViewById(R.id.buttonChoice1);\n\n    Button buttonObjectChoice2 = (Button)findViewById(R.id.buttonChoice2);\n\n    Button buttonObjectChoice3 = (Button)findViewById(R.id.buttonChoice3);\n    ```", "```java\n    //Now we use the setText method of the class on our objects\n    //to show our variable values on the UI elements.\n    //Just like when we output to the console in the exercise -\n    //Expressions in Java, only now we use setText method\n    //to put the values in our variables onto the actual UI.\n    textObjectPartA.setText(\"\" + partA);\n    textObjectPartB.setText(\"\" + partB);\n\n    //which button receives which answer, at this stage is arbitrary.\n\n    buttonObjectChoice1.setText(\"\" + correctAnswer);\n    buttonObjectChoice2.setText(\"\" + wrongAnswer1);\n    buttonObjectChoice3.setText(\"\" + wrongAnswer2);\n    ```", "```java\n//Here we initialize all our variables\nint partA = 9;\nint partB = 9;\nint correctAnswer = partA * partB;\nint wrongAnswer1 = correctAnswer - 1;\nint wrongAnswer2 = correctAnswer + 1;\n```", "```java\nTextView textObjectPartA = (TextView)findViewById(R.id.textPartA);\n```", "```java\nButton buttonObjectChoice1 = \n    (Button)findViewById(R.id.buttonChoice1);\n```", "```java\nbuttonObjectChoice1.setText(\"\" + correctAnswer);\n```", "```java\nbuttonObjectChoice1.\n```", "```java\nbuttonObjectChoice1.\n```", "```java\nsetText(\"\" + correctAnswer);\n```", "```java\n    setContentView(R.layout.activity_main);\n    Button buttonPlay = (Button)findViewById(R.id.buttonPlay);\n\n    ```", "```java\n    buttonPlay.setOnClickListener(this);\n    ```", "```java\n    public class MainActivity extends Activity {\n    ```", "```java\n    public class MainActivity extends Activity implements View.OnClickListener{\n    ```", "```java\n    @Override\n        public void onClick(View view) {\n\n        }\n    ```", "```java\n    @Override\n        public void onClick(View view) {\n            Intent i;\n     i = new Intent(this, GameActivity.class);\n     startActivity(i);\n        }\n    ```", "```java\npackage com.packtpub.mathgamechapter3a.mathgamechapter3a;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\n\npublic class MainActivity extends Activity implements View.OnClickListener{\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        final Button buttonPlay = (Button)findViewById(R.id.buttonPlay);\n        buttonPlay.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        Intent i;\n        i = new Intent(this, GameActivity.class);\n        startActivity(i);\n    }\n\n}\n```", "```java\npackage com.packtpub.mathgamechapter3a.mathgamechapter3a;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\n```", "```java\npublic class MainActivity extends Activity implements View.OnClickListener{\n```", "```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main); \n```", "```java\nButton buttonPlay = (Button)findViewById(R.id.buttonPlay);\nbuttonPlay.setOnClickListener(this);\n```", "```java\n    @Override\n    public void onClick(View view) {\n        Intent i;\n        i = new Intent(this, GameActivity.class);\n        startActivity(i);\n    }\n```", "```java\nif(isComingOverBridge){\n  //Shoot them\n}\n```", "```java\nif(isComingOverBridge){\n  //Shoot them\n}else{\n  //Hold position\n}\n```", "```java\nboolean isComingOverTheBridge;\nint enemyTroops;\nint friendlyTroops;\n//Code that initializes the above variables one way or another\n\n//Now the if\nif(isComingOverTheBridge && friendlyTroops > enemyTroops){\n  //shoot them\n}else if(isComingOverTheBridge && friendlyTroops < enemyTroops) {\n  //blow the bridge\n}else{\n  //Hold position\n}\n```", "```java\nif (wavingWhiteFlag){\n  //Take prisoners\n}\n```", "```java\nif (!wavingWhiteFlag){//not surrendering so check everything else\n  if(isComingOverTheBridge && friendlyTroops > enemyTroops){\n    //shoot them\n  }else if(isComingOverTheBridge && friendlyTroops < enemyTroops) {\n    //blow the bridge\n  }\n}else{//this is the else for our first if\n  //Take prisoners\n{\n//Holding position\n```", "```java\nswitch(argument){\n\n}\n```", "```java\ncase x:\n  //code to for x\n  break;\n\ncase y:\n  //code for y\n  break;\n```", "```java\ndefault://Look no value\n  //Do something here if no other case statements are true\nbreak;\n```", "```java\n//get input from user in a String variable called command\nswitch(command){\n\n  case \"Go East\":\n  //code to go east\n  break;\n\n  case \"Go West\":\n  //code to go west\n  break;\n  case \"Take sword\":\n  //code to take the sword\n  break;\n\n  //more possible cases\n\n  default:\n  //Sorry I don't understand your command\n  break;\n\n}\n```", "```java\n    buttonObjectChoice1.setOnClickListener(this);\n    buttonObjectChoice2.setOnClickListener(this);\n    buttonObjectChoice3.setOnClickListener(this);\n    ```", "```java\n    public class GameActivity extends Activity {\n    ```", "```java\n    public class GameActivity extends Activity implements View.OnClickListener{\n    ```", "```java\n    @Override\n        public void onClick(View view) {\n\n        }\n    ```", "```java\n    switch (view.getId()) {\n\n                case R.id.buttonChoice1:\n                //button 1 stuff goes here\n                    break;\n\n                case R.id.buttonChoice2:\n                //button 2 stuff goes here\n                    break;\n\n                case R.id.buttonChoice3:\n               //button 3 stuff goes here\n                    break;\n\n            }\n    ```", "```java\n    int correctAnswer;\n    Button buttonObjectChoice1;\n    Button buttonObjectChoice2;\n    Button buttonObjectChoice3;\n    ```", "```java\n    //Here we initialize all our variables\n    int partA = 9;\n    int partB = 9;\n    correctAnswer = partA * partB;\n    int wrongAnswer1 = correctAnswer - 1;\n    int wrongAnswer2 = correctAnswer + 1;\n    ```", "```java\n    TextView textObjectPartA = (TextView)findViewById(R.id.textPartA);\n\n    TextView textObjectPartB = (TextView)findViewById(R.id.textPartB);\n\n    buttonObjectChoice1 = (Button)findViewById(R.id.buttonChoice1);\n\n    buttonObjectChoice2 = (Button)findViewById(R.id.buttonChoice2);\n\n    buttonObjectChoice3 = (Button)findViewById(R.id.buttonChoice3);\n\n    ```", "```java\n    @Override\n        public void onClick(View view) {\n            //declare a new int to be used in all the cases\n            int answerGiven=0;\n            switch (view.getId()) {\n\n                case R.id.buttonChoice1:\n                //initialize a new int with the value contained in buttonObjectChoice1\n                //Remember we put it there ourselves previously\n                    answerGiven = Integer.parseInt(\"\" + buttonObjectChoice1.getText());\n\n                    //is it the right answer?\n                    if(answerGiven==correctAnswer) {//yay it's the right answer\n                        Toast.makeText(getApplicationContext(), \"Well done!\", Toast.LENGTH_LONG).show();\n                    }else{//uh oh!\n                        Toast.makeText(getApplicationContext(),\"Sorry that's wrong\", Toast.LENGTH_LONG).show();\n                    }\n                    break;\n    ```", "```java\n                case R.id.buttonChoice2:\n                    //same as previous case but using the next button\n                    answerGiven = Integer.parseInt(\"\" + buttonObjectChoice2.getText());\n                    if(answerGiven==correctAnswer) {\n                        Toast.makeText(getApplicationContext(), \"Well done!\", Toast.LENGTH_LONG).show();\n                    }else{\n                        Toast.makeText(getApplicationContext(),\"Sorry that's wrong\", Toast.LENGTH_LONG).show();\n                    }\n                    break;\n\n                case R.id.buttonChoice3:\n                    //same as previous case but using the next button\n                    answerGiven = Integer.parseInt(\"\" + buttonObjectChoice3.getText());\n                    if(answerGiven==correctAnswer) {\n                        Toast.makeText(getApplicationContext(), \"Well done!\", Toast.LENGTH_LONG).show();\n                    }else{\n                        Toast.makeText(getApplicationContext(),\"Sorry that's wrong\", Toast.LENGTH_LONG).show();\n                    }\n                    break;\n\n            }\n    ```", "```java\ncase R.id.buttonChoice1:\n```", "```java\nanswerGiven = Integer.parseInt(\"\"+ buttonObjectChoice1.getText());\n```", "```java\nif(answerGiven==correctAnswer) {//yay it's the right answer\n  Toast.makeText(getApplicationContext(), \"Well done!\", Toast.LENGTH_LONG).show();\n}else{//uh oh!\n    Toast.makeText(getApplicationContext(),\"Sorry that's wrong\", Toast.LENGTH_LONG).show();\n                }\n```", "```java\nbreak;\n```", "```java\n// setContentView(R.layout.activity_main);\n```", "```java\nString a = \"Hello\";\nString b = \" Vinton Cerf\";\nint c = 55;\na = a + b\nc = c + c + 10;\na = a + c;\nc = c + a;\n```", "```java\nint x = 10;\nint y = 9;\nboolean isTrueOrFalse = false;\nisTrueOrFalse = (((x <=y)||(x == 10))&&((!isTrueOrFalse) || (isTrueOrFalse)));\n```", "```java\nint x = 10;\n\nwhile(x > 0){\n  x--;\n  //x decreases by one each pass through the loop\n}\n```", "```java\nint x = 10;\n\nwhile(x > 10){\n  //more code here.\n  //but it will never run unless x is greater than 10.\n}\n```", "```java\nint playerLives = 3;\nint alienShips = 10;\n\nwhile(playerLives >0 && alienShips >0){\n  //Entire game code here.\n  //...\n  //...\n  //etc.\n}\n//continue here when either playerLives or alienShips = 0\n```", "```java\nint x = 1;\n\nwhile(x > 0){\n  x--;\n  //x is now 0 so the condition is false\n  //But this line still runs\n  //and this one\n  //and me!\n\n}\n```", "```java\nint x = 0;\n\nwhile(true){\n  x++; //I am going to get mighty big!\n}\n```", "```java\nint x = 0;\n\nwhile(true){\n  x++; //I am going to get mighty big!\n  break; //No you're not haha.\n  //code doesn't reach here\n}\n```", "```java\nint x = 0;\nint tooBig = 10;\n\nwhile(true){\n  x++; //I am going to get mighty big!\n  if(x == tooBig){\n    break;\n  } //No you're not haha.\n\n  //code reaches here only until x = 10\n}\n```", "```java\nint x = 0;\nint tooBig = 10;\nint tooBigToPrint = 5;\n\nwhile(true){\n  x++; //I am going to get mighty big!\n  if(x == tooBig){\n    break;\n  } //No your not haha.\n\n  //code reaches here only until x = 10\n\n  if(x >= tooBigToPrint){\n    //No more printing but keep looping\n    continue;\n  }\n  //code reaches here only until x = 5\n\n  //Print out x \n\n}\n```", "```java\nint x= 0;\ndo{\n  x++;\n}while(x < 10);\n//x now = 10 \n```", "```java\nfor(int i = 0; i < 10; i++){\n  //Something that needs to happen 10 times goes here\n}\n```", "```java\nfor(declaration and initialization; condition; change after each pass through loop)\n```", "```java\n    for(int i = 10; i > 0; i--){\n      //countdown\n    }\n    //blast off i = 0\n    ```", "```java\nRandom randInt = new Random();\n```", "```java\nint ourRandomNumber = randInt.nextInt(10);\n```", "```java\nourRandomNumber++;\n```", "```java\npublic boolean shootLazers(int number, string type)\n```", "```java\nprivate void setCoordinates(int x, int y){\n  //code to set coordinates goes here\n}\n```", "```java\n//I like it here\n\nsetCoordinates(4,6);//now I am going off to setCoordinates method\n\n//Phew, I'm back again - code continues here\n```", "```java\nint addAToB(int a, int b){\n  int answer = a + b;\n  return answer;\n}\n```", "```java\nint myAnswer = addAToB(2,4); \n```", "```java\n//Most code can see me\npublic int a;\n\n//Code in other classes can't see me\nprivate string secret = \"Shhh, I am private\";\n```", "```java\nint addAToB(int a, int b){\n  int answer = a + b;\n  return answer;\n}\n```", "```java\nvoid doSomething(){\n  //our code\n\n  //I'm done going back to calling code here\n  //no return is necessary\n}\n```", "```java\nvoid doSomethingElse(){\n  //our code\n\n  //I can do this as long as I don't try and add a value\n  return;\n}\n```", "```java\nvoid doYetAnotherThing(){\n  //some code\n  if(someCondition){\n    //if someCondition is true returning to calling code \n    //before the end of the method body\n    return;\n  }\n  //More code that might or might not get executed\n\n  return;\n  //As I'm at the bottom of the method body \n  //and the return type is void, I'm \n  //really not necessary but I suppose I make it \n  //clear that the method is over.\n}\n\nString joinTogether(String firstName, String lastName){\n  return firstName + lastName;\n}\n```", "```java\n//OK time to call some methods\ndoSomething();\ndoSomethingElse();\ndoYetAnotherThing();\nString fullName = joinTogether(\"Jeff \",\"Minter\")\n//fullName now = Jeff Minter\n//continue with code from here\n```", "```java\nXGHHY78802c(){\n  //code here\n}\n```", "```java\ndoSomeVerySpecificTask(){\n  //code here\n}\n\ngetMySpaceShipHealth(){\n  //code here\n}\n\nstartNewGame(){\n  //code here\n}\n```", "```java\nint addAToB(int a, int b){\n  int answer = a + b;\n  return answer;\n}\n```", "```java\nint returnedAnswer = addAToB(10,5);\n```", "```java\nvoid addToAddressBook(char firstInitial, String lastName, String city, int age){\n  //all the parameters are now living breathing,\n  //declared and initialized variables\n\n  //code to add details to address book goes here\n}\n```", "```java\n//code here\n    //some code\n```", "```java\n      boolean guessANumber(int try1, int try2, int try3){\n      //all the Log.i lines print to the Android console\n      Log.i(\"info\", \"Hi there, I am in the method body\");\n      //prove our parameters have arrived in the method\n      //By printing them in the console\n      Log.i(\"info\", \"try1 = \" + try1);\n      Log.i(\"info\", \"try2 = \" + try2);\n      Log.i(\"info\", \"try3 = \" + try3);\n    ```", "```java\n      //we use the found variable to store our true or false\n      //setting it to false to begin with\n      boolean found = false;\n\n      //Create an object of the Random class so we can use it\n      Random randInt = new Random();\n      //Generate a random number between 0 and 5\n      int randNum = randInt.nextInt(6);\n      //show our random number in the console\n      Log.i(\"info\", \"Our random number = \" + randNum);\n    ```", "```java\n      //Check if any of our guesses are the same as randNum\n      if(try1 == randNum || try2 == randNum || try3 == randNum){\n        found = true;\n        Log.i(\"info\", \"aha!\");\n       }else{\n         Log.i(\"info\", \"hmmm\");\n       }\n\n      return found;\n     }\n    ```", "```java\n    //all the Log.i lines print to the Android console\n    Log.i(\"info\", \"I am in the onCreate method\");\n\n    //Call guessANumber with three values\n    //and if true is returned output - Found it!\n    if(guessANumber( 1,2,3 )) {\n      Log.i(\"info\", \"Found It!\");\n    }else{//guessANumber returned false -didn't find it\n      Log.i (\"info\", \"Can't find it\");\n    }\n\n    //continuing with the rest of the program now\n    Log.i(\"info\", \"Back in onCreate\");\n    ```", "```java\ninfo: I am in the onCreate method\ninfo﹕Hi there, I am in the method body\ninfo﹕try1 = 1\ninfo﹕try2 = 2\ninfo﹕try3 = 3\ninfo﹕Our random number = 0\ninfo﹕hmmm\ninfo﹕Can't find it\ninfo﹕Back in onCreate\n\n```", "```java\nboolean guessANumber(int try1, int try2, int try3){\n  //all the Log.i lines print to the Android console\n  Log.i(\"info\", \"Hi there, I am in the method body\");\n  //prove our parameters have arrived in the method\n  //By printing them in the console\n  Log.i(\"info\", \"try1 = \" + try1);\n  Log.i(\"info\", \"try2 = \" + try2);\n  Log.i(\"info\", \"try3 = \" + try3);\n```", "```java\n//we use the found variable to store our true or false\n//setting it to false to begin with\nboolean found = false;\n```", "```java\n//Create an object of the Random class so we can use it\nRandom randInt = new Random();\n//Generate a random number between 0 and 5\nint randNum = randInt.nextInt(6);\n//show our random number in the console\nLog.i(\"info\", \"Our random number = \" + randNum);\n```", "```java\n//Check if any of our guesses are the same as randNum\nif(try1 == randNum || try2 == randNum || try3 == randNum){\n```", "```java\nfound = true;\nLog.i(\"info\", \"aha!\");\n```", "```java\n}else{\n  Log.i(\"info\", \"hmmm\");\n}\n```", "```java\n  return found;\n }\n```", "```java\n//all the Log.i lines print to the Android console\nLog.i(\"info\", \"I am in the onCreate method\");\n```", "```java\n//Call guessANumber with three values\n//and if true is returned output - Found it!\nif(guessANumber(1,2,3)){\n  Log.i(\"info\", \"Found It!\");\n  }\n```", "```java\nelse{//guessANumber returned false -didn't find it\n  Log.i (\"info\", \"Can't find it\");\n}\n\n//continuing with the rest of the program now\nLog.i(\"info\", \"Back in onCreate\");\n```", "```java\n    void printStuff(int myInt){\n      Log.i(\"info\", \"This is the int only version\");\n      Log.i(\"info\", \"myInt = \"+ myInt);\n    }\n    ```", "```java\n    void printStuff(String myString){\n      Log.i(\"info\", \"This is the String only version\");\n      Log.i(\"info\", \"myString = \"+ myString);\n    }\n    ```", "```java\n    void printStuff(int myInt, String myString){\n      Log.i(\"info\", \"This is the combined int and String version\");\n      Log.i(\"info\", \"myInt = \"+ myInt);\n      Log.i(\"info\", \"myString = \"+ myString);\n    }\n    ```", "```java\n    //declare and initialize a String and an int\n    int anInt = 10;\n    String aString = \"I am a string\";\n\n    //Now call the different versions of printStuff\n    //The name stays the same, only the parameters vary\n    printStuff(anInt);\n    printStuff(aString);\n    printStuff(anInt, aString);\n    ```", "```java\ninfo﹕ This is the int only version\ninfo﹕ myInt = 10\ninfo﹕ This is the String only version\ninfo﹕ myString = I am a string\ninfo﹕ This is the combined int and String version\ninfo﹕ myInt = 10\ninfo﹕ myString = I am a string\n\n```", "```java\nvoid printStuff(int myInt){\n...\n}\n\nvoid printStuff(String myString){\n...\n}\n\nvoid printStuff(int myInt, String myString){\n...\n}\n```", "```java\nprintStuff(anInt);\nprintStuff(aString);\nprintStuff(anInt, aString);\n```", "```java\n    public class GameActivity extends Activity implements View.OnClickListener{\n\n        int correctAnswer;\n        Button buttonObjectChoice1;\n        Button buttonObjectChoice2;\n        Button buttonObjectChoice3;\n        TextView textObjectPartA;\n     TextView textObjectPartB;\n     TextView textObjectScore;\n     TextView textObjectLevel;\n\n     int currentScore = 0;\n     int currentLevel = 1;\n\n    ```", "```java\n    //Here we initialize all our variables\n    int partA = 9;\n    int partB = 9;\n    correctAnswer = partA * partB;\n    int wrongAnswer1 = correctAnswer - 1;\n    int wrongAnswer2 = correctAnswer + 1;\n    ```", "```java\n    //Now we use the setText method of the class on our objects\n    //to show our variable values on the UI elements.\n    textObjectPartA.setText(\"\" + partA);\n    textObjectPartB.setText(\"\" + partA);\n\n    //which button receives which answer, at this stage is arbitrary.\n    buttonObjectChoice1.setText(\"\" + correctAnswer);\n    buttonObjectChoice2.setText(\"\" + wrongAnswer1);\n    buttonObjectChoice3.setText(\"\" + wrongAnswer2);\n    ```", "```java\n    protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            //The next line loads our UI design to the screen\n            setContentView(R.layout.activity_game);\n\n            /*Here we get a working object based on either the button\n              or TextView class and base as well as link our new objects\n              directly to the appropriate UI elements that we created previously*/\n            textObjectPartA = (TextView)findViewById(R.id.textPartA);\n\n            textObjectPartB = (TextView)findViewById(R.id.textPartB);\n\n     textObjectScore = (TextView)findViewById(R.id.textScore);\n\n     textObjectLevel = (TextView)findViewById(R.id.textLevel);\n\n            buttonObjectChoice1 = (Button)findViewById(R.id.buttonChoice1);\n\n            buttonObjectChoice2 = (Button)findViewById(R.id.buttonChoice2);\n\n            buttonObjectChoice3 = (Button)findViewById(R.id.buttonChoice3);\n\n            buttonObjectChoice1.setOnClickListener(this);\n            buttonObjectChoice2.setOnClickListener(this);\n            buttonObjectChoice3.setOnClickListener(this);\n\n    }//onCreate ends here\n    ```", "```java\n    @Override\n        public void onClick(View view) {\n            //declare a new int to be used in all the cases\n            int answerGiven=0;\n            switch (view.getId()) {\n\n                case R.id.buttonChoice1:\n                    //initialize a new int with the value contained in buttonObjectChoice1\n                    //Remember we put it there ourselves previously\n                    answerGiven = Integer.parseInt(\"\" + buttonObjectChoice1.getText());\n\n                    break;\n\n                case R.id.buttonChoice2:\n                    //same as previous case but using the next button\n                    answerGiven = Integer.parseInt(\"\" + buttonObjectChoice2.getText());\n\n                    break;\n\n                case R.id.buttonChoice3:\n                    //same as previous case but using the next button\n                    answerGiven = Integer.parseInt(\"\" + buttonObjectChoice3.getText());\n\n                    break;\n\n            }\n\n        }\n    ```", "```java\n    void setQuestion(){\n    ```", "```java\n    //generate the parts of the question\n    int numberRange = currentLevel * 3;\n    Random randInt = new Random();\n\n    int partA = randInt.nextInt(numberRange);\n    partA++;//don't want a zero value\n\n    int partB = randInt.nextInt(numberRange);\n    partB++;//don't want a zero value\n    ```", "```java\n    correctAnswer = partA * partB;\n    int wrongAnswer1 = correctAnswer-2;\n    int wrongAnswer2 = correctAnswer+2;\n\n    textObjectPartA.setText(\"\"+partA);\n    textObjectPartB.setText(\"\"+partB);\n    ```", "```java\n    //set the multi choice buttons\n    //A number between 0 and 2\n    int buttonLayout = randInt.nextInt(3);\n    switch (buttonLayout){\n\n    case 0:\n    buttonObjectChoice1.setText(\"\"+correctAnswer);\n    buttonObjectChoice2.setText(\"\"+wrongAnswer1);\n    buttonObjectChoice3.setText(\"\"+wrongAnswer2);\n       break;\n\n    case 1:\n\n    buttonObjectChoice2.setText(\"\"+correctAnswer);\n    buttonObjectChoice3.setText(\"\"+wrongAnswer1);\n    buttonObjectChoice1.setText(\"\"+wrongAnswer2);\n       break;\n\n    case 2:\n    buttonObjectChoice3.setText(\"\"+correctAnswer);\n    buttonObjectChoice1.setText(\"\"+wrongAnswer1);\n    buttonObjectChoice2.setText(\"\"+wrongAnswer2);\n       break;\n     }\n\n    }\n    ```", "```java\nint numberRange = currentLevel * 3;\n```", "```java\nint partA = randInt.nextInt(numberRange);\n```", "```java\npartA++;//don't want a zero value\n```", "```java\n    void updateScoreAndLevel(int answerGiven){\n    ```", "```java\n    if(isCorrect(answerGiven)){\n      for(int i = 1; i <= currentLevel; i++){\n        currentScore = currentScore + i;\n       }\n\n       currentLevel++;\n    }\n    ```", "```java\n    else{\n      currentScore = 0;\n      currentLevel = 1;\n    }\n    ```", "```java\n      //Actually update the two TextViews\n      textObjectScore.setText(\"Score: \" + currentScore);\n      textObjectLevel.setText(\"Level: \" + currentLevel);\n    }\n    ```", "```java\nif(isCorrect(answerGiven)){\n```", "```java\nfor(int i = 1; i <= currentLevel; i++){\n  currentScore = currentScore + i;\n}\n\ncurrentLevel++;\n```", "```java\n    boolean isCorrect(int answerGiven){\n    ```", "```java\n    boolean correctTrueOrFalse;\n    if(answerGiven == correctAnswer){//YAY!\n      Toast.makeText(getApplicationContext(), \"Well done!\", Toast.LENGTH_LONG).show();\n       correctTrueOrFalse=true;\n    }else{//Uh-oh!\n        Toast.makeText(getApplicationContext(), \"Sorry\", Toast.LENGTH_LONG).show();\n        correctTrueOrFalse=false;\n    }\n    ```", "```java\n      return correctTrueOrFalse;\n    }\n    ```", "```java\n      setQuestion();\n\n    }//onCreate ends here\n    ```", "```java\n    updateScoreAndLevel(answerGiven);\n    ```", "```java\n    setQuestion();\n    ```", "```java\nint correctAnswer;\nButton buttonObjectChoice1;\nButton buttonObjectChoice2;\nButton buttonObjectChoice3;\nTextView textObjectPartA;\nTextView textObjectPartB;\nTextView textObjectScore;\nTextView textObjectLevel;\n\nint currentScore = 0;\nint currentLevel = 1;\n```", "```java\n    android:screenOrientation=\"portrait\"\n    ```", "```java\n    <activity\n    android:name=\"com.packtpub.mathgamechapter4.app.MainActivity\"\n    android:label=\"@string/app_name\"\n    android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\">\n\n    </activity>\n\n    ```", "```java\n    <activity\n    android:name=\"com.packtpub.mathgamechapter4.app.GameActivity\"\n    android:label=\"@string/title_activity_game\"\n    android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\">\n    </activity>\n\n    ```", "```java\nvoid doSomething(){\n  return 4;\n}\n```", "```java\nint x=19;\ndo{\n  x=11;\n  x++;\n}while(x<20)\n```", "```java\nint topScore1;\nint topScore2;\nint topScore3;\n//96 more lines like the above\nint topScore100;\n```", "```java\ntopScore100 = topScore99;\ntopScore99 = topScore98;\ntopScore98 = topScore97;\n//96 more lines like the above\ntopScore1 = score;\n```", "```java\nint [] intArray;\n```", "```java\nString [] classNames;\nboolean [] bankOfSwitches;\nfloat [] closingBalancesInMarch;\n```", "```java\nintArray = new int [100];\n```", "```java\nintArray[0] = 5;\nintArray[1] = 6;\nintArray[2] = 7;\n```", "```java\nintArray[3]= \"John Carmack\";//Won't compile\n```", "```java\nintArray[3] = 123;\n```", "```java\nintArray[10] = intArray[9] - intArray[4];\n```", "```java\nint myNamedInt = intArray [3];\n```", "```java\nint lengthOfSomeArray = someArray.length;\n```", "```java\nString[][] countriesAndCities;\n```", "```java\nsomeArray[someLocation];\n```", "```java\n    //Declaring an array\n    int[] ourArray;\n\n    //Allocate memory for a maximum size of 5 elements\n    ourArray = new int[5];\n\n    //Initialize ourArray with values\n    //The values are arbitrary as long as they are int\n    //The indexes are not arbitrary 0 through 4 or crash!\n\n    ourArray[0] = 25;\n    ourArray[1] = 50;\n    ourArray[2] = 125;\n    ourArray[3] = 68;\n    ourArray[4] = 47;\n    ```", "```java\n    //Output all the stored values\n    Log.i(\"info\", \"Here is ourArray:\");\n    Log.i(\"info\", \"[0] = \"+ourArray[0]);\n    Log.i(\"info\", \"[1] = \"+ourArray[1]);\n    Log.i(\"info\", \"[2] = \"+ourArray[2]);\n    Log.i(\"info\", \"[3] = \"+ourArray[3]);\n    Log.i(\"info\", \"[4] = \"+ourArray[4]);\n\n    //We can do any calculation with an array element\n    //As long as it is appropriate to the contained type\n    //Like this:\n    int answer = ourArray[0] +\n        ourArray[1] +\n        ourArray[2] +\n        ourArray[3] +\n        ourArray[4];\n\n    Log.i(\"info\", \"Answer = \"+ answer);\n    ```", "```java\ninfo﹕ Here is ourArray:\ninfo﹕ [0] = 25\ninfo﹕\n [1] = 50\ninfo﹕ [2] = 125\ninfo﹕ [3] = 68\ninfo﹕ [4] = 47\ninfo﹕ Answer = 315 \n\n```", "```java\n    //Declaring and allocating in one step\n    int[] ourArray = new int[1000];\n\n    //Let's initialize ourArray using a for loop\n    //Because more than a few variables is allot of typing!\n    for(int i = 0; i < 1000; i++){\n       //Put the value of ourValue into our array\n       //At the position determined by i.\n       ourArray[i] = i*5;\n\n                //Output what is going on\n                Log.i(\"info\", \"i = \" + i);\n                Log.i(\"info\", \"ourArray[i] = \" + ourArray[i]);\n    }\n    ```", "```java\n    info﹕ i = 0\n    info﹕ ourArray[i] = 0\n    info﹕ i = 1\n    info﹕ ourArray[i] = 5\n    info﹕ i = 2\n    info﹕\n     ourArray[i] = 10\n\n    ```", "```java\n    info﹕ ourArray[i] = 4985\n    info﹕ i = 998\n    info﹕ ourArray[i] = 4990\n    info﹕ i = 999\n    info﹕ ourArray[i] = 4995\n\n    ```", "```java\nint[] ourArray = new int[1000];\n```", "```java\n(int i = 0; i < 1000; i++){\n```", "```java\nourArray[i] = i*5;\n```", "```java\nLog.i(\"info\", \"i = \" + i);\nLog.i(\"info\", \"ourArray[i] = \" + ourArray[i]);\n```", "```java\n    //A Random object for generating question numbers later\n    Random randInt = new Random();\n    //And a variable to hold the random value generated\n    int questionNumber;\n\n    //We declare and allocate in separate stages for clarity\n    //but we don't have to\n    String[][] countriesAndCities;\n    //Here we have a 2 dimensional array\n\n    //Specifically 5 arrays with 2 elements each\n    //Perfect for 5 \"What's the capital city\" questions\n    countriesAndCities = new String[5][2];\n\n    //Now we load the questions and answers into our arrays\n    //You could do this with less questions to save typing\n    //But don't do more or you will get an exception\n    countriesAndCities [0][0] = \"United Kingdom\";\n    countriesAndCities [0][1] = \"London\";\n\n    countriesAndCities [1][0] = \"USA\";\n    countriesAndCities [1][1] = \"Washington\";\n\n    countriesAndCities [2][0] = \"India\";\n    countriesAndCities [2][1] = \"New Delhi\";\n\n    countriesAndCities [3][0] = \"Brazil\";\n    countriesAndCities [3][1] = \"Brasilia\";\n\n    countriesAndCities [4][0] = \"Kenya\";\n    countriesAndCities [4][1] = \"Nairobi\";\n    ```", "```java\n    //Now we know that the country is stored at element 0\n    //The matching capital at element 1\n    //Here are two variables that reflect this\n    int country = 0;\n    int capital = 1;\n\n    //A quick for loop to ask 3 questions\n    for(int i = 0; i < 3; i++){\n       //get a random question number between 0 and 4\n       questionNumber = randInt.nextInt(5);\n\n       //and ask the question and in this case just\n       //give the answer for the sake of brevity\n      Log.i(\"info\", \"The capital of \" +countriesAndCities[questionNumber][country]);\n\n      Log.i(\"info\", \"is \" +countriesAndCities[questionNumber][capital]);\n\n    }//end of for loop\n    ```", "```java\ninfo﹕ The capital of USA\ninfo﹕ is Washington\ninfo﹕ The capital of India\ninfo﹕ is New Delhi\ninfo﹕ The capital of United Kingdom\ninfo﹕ is London\n\n```", "```java\nRandom randInt = new Random();\n```", "```java\nint questionNumber;\n```", "```java\nString[][] countriesAndCities;\n```", "```java\ncountriesAndCities = new String[5][2];\n```", "```java\ncountriesAndCities [0][0] = \"United Kingdom\";\ncountriesAndCities [0][1] = \"London\";\n\ncountriesAndCities [1][0] = \"USA\";\ncountriesAndCities [1][1] = \"Washington\";\n\ncountriesAndCities [2][0] = \"India\";\ncountriesAndCities [2][1] = \"New Delhi\";\n\ncountriesAndCities [3][0] = \"Brazil\";\ncountriesAndCities [3][1] = \"Brasilia\";\n\ncountriesAndCities [4][0] = \"Kenya\";\ncountriesAndCities [4][1] = \"Nairobi\";\n```", "```java\nint country = 0;\nint capital = 1;\n```", "```java\nfor(int i = 0; i < 3; i++){\n```", "```java\nquestionNumber = randInt.nextInt(5);\n```", "```java\n  Log.i(\"info\", \"The capital of \" +countriesAndCities[questionNumber][country]);\n\n  Log.i(\"info\", \"is \" +countriesAndCities[questionNumber][capital]);\n\n}//end of for loop\n```", "```java\nint[] ourArray = new int[1000];\nint someValue = 1;//Arbitrary value\nourArray[1000] = someValue;//Won't compile as compiler knows this won't work.\n//Only locations 0 through 999 are valid\n```", "```java\nint[] ourArray = new int[1000];\nint someValue = 1;//Arbitrary value\nint x = 999;\nif(userDoesSomething){x++;//x now equals 1000\n}\nourArray[x] = someValue;\n//Array out of bounds exception if userDoesSomething evaluates to true! This is because we end up referencing position 1000 when the array only has positions 0 through 999\n//Compiler can't spot it and game will crash on player - yuck!\n```", "```java\n    public class MainActivity extends Activity {\n\n        private Handler myHandler;\n     boolean gameOn;\n     long startTime;\n\n    ```", "```java\n    //How many milliseconds is it since the UNIX epoch\n            startTime = System.currentTimeMillis();\n\n            myHandler = new Handler() {\n                public void handleMessage(Message msg) {\n                    super.handleMessage(msg);\n\n                    if (gameOn) {\n                        long seconds = ((System.currentTimeMillis() - startTime)) / 1000;\n                        Log.i(\"info\", \"seconds = \" + seconds);\n                    }\n\n                    myHandler.sendEmptyMessageDelayed(0, 1000);\n                }\n\n            };\n\n            gameOn = true;\n            myHandler.sendEmptyMessage(0);\n        }\n    ```", "```java\ninfo﹕ seconds = 1\ninfo﹕ seconds = 2\ninfo﹕ seconds = 3\ninfo﹕ seconds = 4\ninfo﹕ seconds = 5\ninfo﹕ seconds = 6\n\n```", "```java\nprivate Handler myHandler;\nboolean gameOn;\nlong startTime;\n```", "```java\nstartTime = System.currentTimeMillis();\n```", "```java\nmyHandler = new Handler() {\n     public void handleMessage(Message msg) {\n       super.handleMessage(msg);\n\n       if (gameOn) {\n         long seconds = ((System.currentTimeMillis() - startTime)) / 1000;\n             Log.i(\"info\", \"seconds = \" + seconds);\n         }\n\n       myHandler.sendEmptyMessageDelayed(0, 1000);\n      }\n\n };\n```", "```java\nlong seconds = ((System.currentTimeMillis() - startTime)) / 1000;\n```", "```java\nLog.i(\"info\", \"seconds = \" + seconds);\n```", "```java\nmyHandler.sendEmptyMessageDelayed(0, 1000);\n```", "```java\ngameOn = true;\n```", "```java\nmyHandler.sendEmptyMessage(0);\n```", "```java\n    public class MainActivity extends Activity implements View.\n        OnClickListener {\n    ```", "```java\n    private SoundPool soundPool;\n    int sample1 = -1;\n    int sample2 = -1;\n    int sample3 = -1;\n    ```", "```java\n    soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC,0);\n      try{\n        //Create objects of the 2 required classes\n              AssetManager assetManager = getAssets();\n              AssetFileDescriptor descriptor;\n\n              //create our three fx in memory ready for use\n              descriptor = assetManager.openFd(\"sample1.ogg\");\n              sample1 = soundPool.load(descriptor, 0);\n\n              descriptor = assetManager.openFd(\"sample2.ogg\");\n              sample2 = soundPool.load(descriptor, 0);\n\n              descriptor = assetManager.openFd(\"sample3.ogg\");\n              sample3 = soundPool.load(descriptor, 0);\n\n            }catch(IOException e){\n                //catch exceptions here\n            }\n    ```", "```java\n      //Make a button from each of the buttons in our layout\n         Button button1 =(Button) findViewById(R.id.button);\n         Button button2 =(Button) findViewById(R.id.button2);\n         Button button3 =(Button) findViewById(R.id.button3);\n\n         //Make each of them listen for clicks\n         button1.setOnClickListener(this);\n         button2.setOnClickListener(this);\n         button3.setOnClickListener(this);\n    ```", "```java\n    switch (view.getId()) {\n\n      case R.id.button://when the first button is pressed\n        //Play sample 1\n              soundPool.play(sample1, 1, 1, 0, 0, 1);\n              break;\n\n              //Now the other buttons\n              case R.id.button2:\n              soundPool.play(sample2, 1, 1, 0, 0, 1);\n              break;\n\n              case R.id.button3:\n              soundPool.play(sample3, 1, 1, 0, 0, 1);\n              break;\n            }\n    ```", "```java\nprivate SoundPool soundPool;\n```", "```java\nint sample1 = -1;\nint sample2 = -1;\nint sample3 = -1;\n```", "```java\nsoundPool = new SoundPool(10, AudioManager.STREAM_MUSIC,0);\n```", "```java\n  try{\n    //Create objects of the 2 required classes\n          AssetManager assetManager = getAssets();\n          AssetFileDescriptor descriptor;\n\n          //create our three fx in memory ready for use\n          descriptor = assetManager.openFd(\"sample1.ogg\");\n          sample1 = soundPool.load(descriptor, 0);\n\n          descriptor = assetManager.openFd(\"sample2.ogg\");\n          sample2 = soundPool.load(descriptor, 0);\n\n          descriptor = assetManager.openFd(\"sample3.ogg\");\n          sample3 = soundPool.load(descriptor, 0);\n\n        }catch(IOException e){\n            //catch exceptions here\n        }\n```", "```java\n          descriptor = assetManager.openFd(\"sample1.ogg\");\n          sample1 = soundPool.load(descriptor, 0);\n```", "```java\nsoundPool.play(sample1, 1, 1, 0, 0, 1);\n```", "```java\n    SharedPreferences prefs;\n    SharedPreferences.Editor editor;\n    String dataName = \"MyData\";\n    String stringName = \"MyString\";\n    String defaultString = \":-(\";\n    String currentString = \"\";//empty\n    Button button1;\n    ```", "```java\n    //initialize our two SharedPreferences objects\n    prefs = getSharedPreferences(dataName,MODE_PRIVATE);\n    editor = prefs.edit();\n\n    //Either load our string or\n    //if not available our default string\n    currentString = prefs.getString(stringName, defaultString);\n\n     //Make a button from the button in our layout\n     button1 =(Button) findViewById(R.id.button);\n\n     //Make each it listen for clicks\n     button1.setOnClickListener(this);\n\n     //load currentString to the button\n     button1.setText(currentString);\n    ```", "```java\n    //we don't need to switch here!\n    //There is only one button\n    //so only the code that actually does stuff\n\n    //Get a random number between 0 and 9\n    Random randInt = new Random();\n    int ourRandom = randInt.nextInt(10);\n\n    //Add the random number to the end of currentString\n    currentString = currentString + ourRandom;\n\n    //Save currentString to a file in case the user \n    //suddenly quits or gets a phone call\n    editor.putString(stringName, currentString);\n    editor.commit();\n\n     //update the button text\n     button1.setText(currentString);\n    ```", "```java\nSharedPreferences prefs;\nSharedPreferences.Editor editor;\n```", "```java\nString dataName = \"MyData\";\nString stringName = \"MyString\";\nString defaultString = \":-(\";\nString currentString = \"\";//empty\nButton button1;\n```", "```java\nprefs = getSharedPreferences(dataName,MODE_PRIVATE);\neditor = prefs.edit();\n\ncurrentString = prefs.getString(stringName, defaultString);\n```", "```java\nRandom randInt = new Random();\nint ourRandom = randInt.nextInt(10);\ncurrentString = currentString + ourRandom;\n```", "```java\neditor.putString(stringName, currentString);\neditor.commit();\n```", "```java\nbutton1.setText(currentString);\n```", "```java\n      public class MainActivity extends Activity implements View.OnClickListener {\n    ```", "```java\n      //Make a button from the button in our layout\n       Button button =(Button) findViewById(R.id.button);\n\n       //Make each it listen for clicks\n       button.setOnClickListener(this);\n    ```", "```java\n      Intent i;\n       i = new Intent(this, GameActivity.class);\n       startActivity(i);\n    ```", "```java\n      public class GameActivity extends Activity implements View.OnClickListener {\n    ```", "```java\n    public class GameActivity extends Activity implements View.OnClickListener {\n\n    //Prepare objects and sound references\n\n        //initialize sound variables\n        private SoundPool soundPool;\n        int sample1 = -1;\n        int sample2 = -1;\n        int sample3 = -1;\n        int sample4 = -1;\n\n        //for our UI\n        TextView textScore;\n        TextView textDifficulty;\n        TextView textWatchGo;\n\n        Button button1;\n        Button button2;\n        Button button3;\n        Button button4;\n        Button buttonReplay;\n    ```", "```java\n    //Some variables for our thread\n    int difficultyLevel = 3;\n    //An array to hold the randomly generated sequence\n    int[] sequenceToCopy = new int[100];\n\n    private Handler myHandler;\n    //Are we playing a sequence at the moment?\n    boolean playSequence = false;\n    //And which element of the sequence are we on\n    int elementToPlay = 0;\n\n    //For checking the players answer\n    int playerResponses;\n    int playerScore;\n    boolean isResponding;\n    ```", "```java\n    soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC,0);\n    try{\n      //Create objects of the 2 required classes\n      AssetManager assetManager = getAssets();\n      AssetFileDescriptor descriptor;\n\n      //create our three fx in memory ready for use\n      descriptor = assetManager.openFd(\"sample1.ogg\");\n      sample1 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample2.ogg\");\n            sample2 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample3.ogg\");\n            sample3 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample4.ogg\");\n            sample4 = soundPool.load(descriptor, 0);\n\n            }catch(IOException e){\n                //catch exceptions here\n            }\n    ```", "```java\n    //Reference all the elements of our UI \n    //First the TextViews\n    textScore = (TextView)findViewById(R.id.textScore);\n    textScore.setText(\"Score: \" + playerScore);\n    textDifficulty = (TextView)findViewById(R.id.textDifficulty);\n\n    textDifficulty.setText(\"Level: \" + difficultyLevel);\n    textWatchGo = (TextView)findViewById(R.id.textWatchGo);\n\n    //Now the buttons\n    button1 = (Button)findViewById(R.id.button);\n    button2 = (Button)findViewById(R.id.button2);\n    button3 = (Button)findViewById(R.id.button3);\n    button4 = (Button)findViewById(R.id.button4);\n    buttonReplay = (Button)findViewById(R.id.buttonReplay);\n\n    //Now set all the buttons to listen for clicks\n    button1.setOnClickListener(this);\n    button2.setOnClickListener(this);\n    button3.setOnClickListener(this);\n    button4.setOnClickListener(this);\n    buttonReplay.setOnClickListener(this);\n    ```", "```java\n    //This is the code which will define our thread\n    myHandler = new Handler() {\n      public void handleMessage(Message msg) {\n        super.handleMessage(msg);\n\n              if (playSequence) {\n              //All the thread action will go here\n\n              }\n\n              myHandler.sendEmptyMessageDelayed(0, 900);\n      }\n    };//end of thread\n\n    myHandler.sendEmptyMessage(0);\n    ```", "```java\n    public void createSequence(){\n      //For choosing a random button\n       Random randInt = new Random();\n       int ourRandom;\n       for(int i = 0; i < difficultyLevel; i++){\n       //get a random number between 1 and 4\n             ourRandom = randInt.nextInt(4);\n             ourRandom ++;//make sure it is not zero\n             //Save that number to our array\n             sequenceToCopy[i] = ourRandom;\n       }\n\n    }\n    ```", "```java\n    public void playASequence(){\n        createSequence();\n        isResponding = false;\n        elementToPlay = 0;\n        playerResponses = 0;\n        textWatchGo.setText(\"WATCH!\");\n        playSequence = true;\n    }\n    ```", "```java\n    public void sequenceFinished(){\n            playSequence = false;\n            //make sure all the buttons are made visible\n            button1.setVisibility(View.VISIBLE);\n            button2.setVisibility(View.VISIBLE);\n            button3.setVisibility(View.VISIBLE);\n            button4.setVisibility(View.VISIBLE);\n            textWatchGo.setText(\"GO!\");\n            isResponding = true;\n        }\n    ```", "```java\n    if (playSequence) {\n      //All the thread action will go here\n      //make sure all the buttons are made visible\n      button1.setVisibility(View.VISIBLE);\n      button2.setVisibility(View.VISIBLE);\n      button3.setVisibility(View.VISIBLE);\n      button4.setVisibility(View.VISIBLE);\n\n      switch (sequenceToCopy[elementToPlay]){\n        case 1:\n          //hide a button \n    button1.setVisibility(View.INVISIBLE);\n           //play a sound\n           soundPool.play(sample1, 1, 1, 0, 0, 1);\n           break;\n\n        case 2:\n          //hide a button \n    button2.setVisibility(View.INVISIBLE)\n          //play a sound\n          soundPool.play(sample2, 1, 1, 0, 0, 1);\n          break;\n\n        case 3:\n          //hide a button button3.setVisibility(View.INVISIBLE);\n          //play a sound\n          soundPool.play(sample3, 1, 1, 0, 0, 1);\n          break;\n\n      case 4:\n          //hide a button \n    button4.setVisibility(View.INVISIBLE);\n          //play a sound\n          soundPool.play(sample4, 1, 1, 0, 0, 1);\n             break;\n       }\n\n       elementToPlay++;\n       if(elementToPlay == difficultyLevel){\n       sequenceFinished();\n       }\n    }\n\n        myHandler.sendEmptyMessageDelayed(0, 900);\n    }\n\n    };\n    ```", "```java\nplayASequence();\n```", "```java\npublic void createSequence(){\n        //For choosing a random button\n        Random randInt = new Random();\n        int ourRandom;\n        for(int i = 0; i < difficultyLevel; i++){\n            //get a random number between 1 and 4\n            ourRandom = randInt.nextInt(4);\n            ourRandom ++;//make sure it is not zero\n            //Save that number to our array\n            sequenceToCopy[i] = ourRandom;\n        }\n\n    }\n```", "```java\npublic void playASequence(){\n        createSequence();\n        isResponding = false;\n        elementToPlay = 0;\n        playerResponses = 0;\n        textWatchGo.setText(\"WATCH!\");\n        playSequence = true;\n\n    }\n```", "```java\npublic void sequenceFinished(){\n        playSequence = false;\n        //make sure all the buttons are made visible\n        button1.setVisibility(View.VISIBLE);\n        button2.setVisibility(View.VISIBLE);\n        button3.setVisibility(View.VISIBLE);\n        button4.setVisibility(View.VISIBLE);\n        textWatchGo.setText(\"GO!\");\n        isResponding = true;\n    }\n```", "```java\nif (playSequence) {\n  //All the thread action will go here\n  //make sure all the buttons are made visible\n  button1.setVisibility(View.VISIBLE);\n  button2.setVisibility(View.VISIBLE);\n  button3.setVisibility(View.VISIBLE);\n  button4.setVisibility(View.VISIBLE);\n```", "```java\nswitch (sequenceToCopy[elementToPlay]){\n  case 1:\n    //hide a buttonbutton1.setVisibility(View.INVISIBLE);\n         //play a sound\n         soundPool.play(sample1, 1, 1, 0, 0, 1);\n         break;\n\n    //case 2, 3 and 4 go here\n```", "```java\n   elementToPlay++;\n```", "```java\n   if(elementToPlay == difficultyLevel){\n   sequenceFinished();\n   }\n}\n```", "```java\n    myHandler.sendEmptyMessageDelayed(0, 900);\n}\n\n};\n```", "```java\n    if(!playSequence) {//only accept input if sequence not playing\n                switch (view.getId()) {\n                    //case statements here...\n                }\n    }\n    ```", "```java\n    case R.id.button:\n      //play a sound\n       soundPool.play(sample1, 1, 1, 0, 0, 1);\n       checkElement(1);\n       break;\n    ```", "```java\n    case R.id.button2:\n      //play a sound\n       soundPool.play(sample2, 1, 1, 0, 0, 1);\n       checkElement(2);\n       break;\n\n    case R.id.button3:\n       //play a sound\n       soundPool.play(sample3, 1, 1, 0, 0, 1);\n       checkElement(3);\n       break;\n\n    case R.id.button4:\n       //play a sound\n       soundPool.play(sample4, 1, 1, 0, 0, 1);\n       checkElement(4);\n       break;\n    ```", "```java\n    case R.id.buttonReplay:\n       difficultyLevel = 3;\n       playerScore = 0;\n       textScore.setText(\"Score: \" + playerScore);\n       playASequence();\n       break;\n    ```", "```java\n    public void checkElement(int thisElement){\n\n    if(isResponding) {\n      playerResponses++;\n       if (sequenceToCopy[playerResponses-1] == thisElement) { //Correct\n       playerScore = playerScore + ((thisElement + 1) * 2);\n       textScore.setText(\"Score: \" + playerScore);\n       if (playerResponses == difficultyLevel) {//got the whole sequence\n       //don't checkElement anymore\n       isResponding = false;\n       //now raise the difficulty\n       difficultyLevel++;\n       //and play another sequence\n       playASequence();\n        }\n\n    } else {//wrong answer\n      textWatchGo.setText(\"FAILED!\");\n        //don't checkElement anymore\n        isResponding = false;\n    }\n    }\n    ```", "```java\npublic void checkElement(int thisElement){\n```", "```java\nif(isResponding) {\n```", "```java\nplayerResponses++;\n```", "```java\n   if (sequenceToCopy[playerResponses-1] == thisElement) {  //Correct\n      playerScore = playerScore + ((thisElement + 1) * 2);\n      textScore.setText(\"Score: \" + playerScore);\n\n```", "```java\n      if (playerResponses == difficultyLevel) {\n```", "```java\n//got the whole sequence\n         //don't checkElement anymore\n         isResponding = false;\n         //now raise the difficulty\n         difficultyLevel++;\n         //and play another sequence\n         playASequence();\n   }\n```", "```java\n} else {\n  //wrong answer\n  textWatchGo.setText(\"FAILED!\");\n  //don't checkElement anymore\n  isResponding = false;\n  }\n}\n```", "```java\n    public class MainActivity extends Activity implements View.OnClickListener{\n\n        //for our hiscore (phase 4)\n     SharedPreferences prefs;\n     String dataName = \"MyData\";\n     String intName = \"MyInt\";\n     int defaultInt = 0;\n     //both activities can see this\n     public static int hiScore;\n\n    ```", "```java\n    //for our high score (phase 4)\n    //initialize our two SharedPreferences objects\n    prefs = getSharedPreferences(dataName,MODE_PRIVATE);\n\n    //Either load our High score or\n    //if not available our default of 0\n    hiScore = prefs.getInt(intName, defaultInt);\n\n    //Make a reference to the Hiscore textview in our layout\n    TextView textHiScore =(TextView) findViewById(R.id.textHiScore);\n    //Display the hi score\n    textHiScore.setText(\"Hi: \"+ hiScore);\n    ```", "```java\n    //for our hiscore (phase 4)\n    SharedPreferences prefs;\n    SharedPreferences.Editor editor;\n    String dataName = \"MyData\";\n    String intName = \"MyInt\";\n    int defaultInt = 0;\n    int hiScore;\n    ```", "```java\n    //phase 4\n    //initialize our two SharedPreferences objects\n    prefs = getSharedPreferences(dataName,MODE_PRIVATE);\n    editor = prefs.edit();\n    hiScore = prefs.getInt(intName, defaultInt);\n    ```", "```java\n    } else {//wrong answer\n\n      textWatchGo.setText(\"FAILED!\");\n        //don't checkElement anymore\n        isResponding = false;\n\n     //for our high score (phase 4)\n     if(playerScore > hiScore) {\n     hiScore = playerScore;\n     editor.putInt(intName, hiScore);\n     editor.commit();\n     Toast.makeText(getApplicationContext(), \"New Hi-score\", Toast.LENGTH_LONG).show();\n     }\n\n    }\n    ```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rotate \n    android:duration=\"100\"\n    android:fromDegrees=\"-5\"\n    android:pivotX=\"50%\"\n    android:pivotY=\"50%\"\n    android:repeatCount=\"8\"\n    android:repeatMode=\"reverse\"\n    android:toDegrees=\"5\" />\n```", "```java\nAnimation wobble = AnimationUtils.loadAnimation(this, R.anim.wobble);\n```", "```java\nbutton1.startAnimation(wobble);\n```", "```java\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <rotate \n     android:duration=\"100\"\n     android:fromDegrees=\"-5\"\n     android:pivotX=\"50%\"\n     android:pivotY=\"50%\"\n     android:repeatCount=\"8\"\n     android:repeatMode=\"reverse\"\n     android:toDegrees=\"5\" />\n\n    ```", "```java\n    //phase 5 - our animation object\n    Animation wobble;\n    ```", "```java\n    //phase5 - animation\n    wobble = AnimationUtils.loadAnimation(this, R.anim.wobble);\n    ```", "```java\n    //code not needed as using animations\n    //make sure all the buttons are made visible\n    //button1.setVisibility(View.VISIBLE);\n    //button2.setVisibility(View.VISIBLE);\n    //button3.setVisibility(View.VISIBLE);\n    //button4.setVisibility(View.VISIBLE);\n    ```", "```java\n    switch (sequenceToCopy[elementToPlay]){\n      case 1:\n        //hide a button - not any more\n        //button1.setVisibility(View.INVISIBLE);\n     button1.startAnimation(wobble);\n       ...\n       ...\n      case 2:\n        //hide a button - not any more\n        //button2.setVisibility(View.INVISIBLE);\n     button2.startAnimation(wobble);\n       ...\n       ...\n      case 3:\n        //hide a button - not any more\n        //button3.setVisibility(View.INVISIBLE);\n     button3.startAnimation(wobble);\n       ...\n       ...\n      case 4:\n        //hide a button - not any more\n        //button4.setVisibility(View.INVISIBLE);\n     button4.startAnimation(wobble);\n\n    ```", "```java\n    //button1.setVisibility(View.VISIBLE);\n    //button2.setVisibility(View.VISIBLE);\n    //button3.setVisibility(View.VISIBLE);\n    //button4.setVisibility(View.VISIBLE);\n    ```", "```java\npublic class Soldier {\n  int health;\n  String soldierType;\n\n  void shootEnemy(){\n    //bang bang\n  }\n\n}\n```", "```java\nSoldier mySoldier = new Soldier();\n```", "```java\nSoldier mySoldier;\nmySoldier = new Soldier();\n```", "```java\nmySoldier.health = 100;\nmySoldier.soldierType = \"sniper\";\n//Notice that we use the object name mySoldier.\n//Not the class name Soldier.\n//We didn't do this:\n// Soldier.health = 100; ERROR!\n```", "```java\nmySoldier.shootEnemy();\n```", "```java\nSoldier mySoldier2 = new Soldier();\nmySoldier2.health = 150;\nmySoldier2.soldierType = \"special forces\";\nmySoldier2.shootEnemy();\n```", "```java\n    public class Soldier {\n        int health;\n        String soldierType;\n\n        void shootEnemy(){\n            //lets print which type of soldier is shooting\n            Log.i(soldierType, \" is shooting\");\n        }\n    }\n    ```", "```java\n    //first we make an object of type soldier\n       Soldier rambo = new Soldier();\n       rambo.soldierType = \"Green Beret\";\n       rambo.health = 150;// It takes a lot to kill Rambo\n\n       //Now we make another Soldier object\n       Soldier vassily = new Soldier();\n       vassily.soldierType = \"Sniper\";\n       vassily.health = 50;//Snipers have less armor\n\n       //And one more Soldier object\n       Soldier wellington = new Soldier();\n       wellington.soldierType = \"Sailor\";\n       wellington.health = 100;//He's tough but no green beret\n    ```", "```java\n    Log.i(\"Rambo's health = \", \"\" + rambo.health);\n    Log.i(\"Vassily's health = \", \"\" + vassily.health);\n    Log.i(\"Wellington's health = \", \"\" + wellington.health);\n\n    rambo.shootEnemy();\n    vassily.shootEnemy();\n    wellington.shootEnemy();\n    ```", "```java\nvoid shootEnemy(){\n        //lets print which type of soldier is shooting\n        Log.i(soldierType, \" is shooting\");\n    }\n```", "```java\nRambo's health =﹕ 150\nVassily's health =﹕ 50\nWellington's health =﹕ 100\nGreen Beret﹕ is shooting\nSniper﹕ is shooting\nSailor﹕ is shooting\n\n```", "```java\n//Declare an array called myArmy to hold 10 Soldier objects\nSoldier [] myArmy = new Soldier[10];\n\n//Then we can add the Soldier objects\n//We use the familiar array notation on the left\n//And the newly learnt new Soldier() syntax on the right\nmyArmy[0] = new Soldier();\nmyArmy[1] = new Soldier();\nmyArmy[2] = new Soldier();\nmyArmy[3] = new Soldier();\n//Initialize more here\n//..\n```", "```java\nmyArmy[0].health = 125;\nmyArmy[0].soldierType = \"Pilot\";\nmyArmy[0].shootEnemy();\n// Pilot﹕ is shooting\n```", "```java\nhealSoldier(rambo);\n//Perhaps healSoldier could add to the health instance variable\n```", "```java\nsomeHospitalObjectPerhaps.healSoldier(rambo);\n```", "```java\nSoldier healSoldier(Soldier soldierToBeHealed){\n  soldierToBeHealed.health++;\n\n  return soldierToBeHealed;\n}\n```", "```java\nrambo.soldierType = \"ballerina\";\n```", "```java\nweighlifter.legstrength = 100;\nweighlifter.armstrength = -100;\nweightlifter.liftHeavyWeight();\n//one typo and weightlifter rips own arms off\n```", "```java\npublic class Soldier{\n  //Implementation goes here\n}\n```", "```java\nprivate int myInt;\n```", "```java\npublic Soldier mySoldier = new Soldier(); \n```", "```java\npublic useMeEverybody(){\n  //do something everyone needs to do here\n}\n```", "```java\nprivate secretInternalTask(){\n  //do something that helps the class function internally\n  //Perhaps, if it is part of the same class,\n  //useMeEverybody could use this method...\n  //On behalf of the classes outside of this class.\n  //Neat!\n}\n```", "```java\nfairlySecretTask(){\n  //allow just the classes in the package\n  //Not for external use\n}\n```", "```java\nprotected familyTask(){\n  //allow just the classes in the package\n  //And you can use me if you extend me too\n}\n```", "```java\nclass Hospital{\n  private void healSoldier(Soldier soldierToHeal){\n    int health = soldierToHeal.getHealth();\n    health = health + 10;\n    soldierToHeal.setHealth(health);\n  }\n}\n```", "```java\npublic class Soldier{\n  private int health;\n  public int getHealth(){\n    return health;\n  }\n\n  public void setHealth(int newHealth){\n    health = newHealth;\n  }\n}\n```", "```java\nSoldier mySoldier = new Soldier();\n//mySoldier.health = 100;//Doesn't work private\n//we can use the public setter setHealth()\nmySoldier.setHealth(100);//That's better\n\nHospital militaryHospital = new Hospital();\n\n//Oh no mySoldier has been wounded\nmySoldier.setHealth(10);\n\n//Take him to the hospital\n//But my health variable is private\n//And Hospital won't be able to access it\n//I'm doomed - tell Laura I love her\n\n//No wait- what about my public getters and setters?\n//We can use the public getters and setters from another class\n\nmilitaryHospital.healSoldier(mySoldier);\n\n//mySoldiers private variable health has been increased by 10\n//I'm feeling much better thanks!\n```", "```java\nmySoldier.name\nmysoldier.type\nmySoldier.weapon\nmySoldier.regiment\n...\n```", "```java\nSoldier mySoldier = new Soldier();\n```", "```java\n...Soldier();\n```", "```java\npublic Soldier(){\n  health = 200;\n  //more setup here\n}\n```", "```java\n    public class AlienShip {\n    private static int numShips;\n    private int shieldStrength;\n    public String shipName;\n    ```", "```java\n    public AlienShip(){\n      numShips++;\n\n      //Can call private methods from here because I am part\n      //of the class\n      //If didn't have \"this\" then this call might be less clear\n      //But this \"this\" isn't strictly necessary\n      this.setShieldStrength(100);\n      //Because of \"this\" I am sure I am setting \n      //the correct shieldStrength\n    }\n    ```", "```java\n        public static int getNumShips(){\n            return numShips;\n\n        }\n    ```", "```java\n    private void setShieldStrength(int shieldStrength){\n        //\"this\" distinguishes between the \n        //member variable shieldStrength\n        //And the local variable/parameter of the same name\n        this.shieldStrength = shieldStrength;\n\n    }\n    ```", "```java\n    public int getShieldStrength(){\n        return this.shieldStrength;\n    }\n    ```", "```java\n    public void hitDetected(){\n\n        shieldStrength -=25;\n        Log.i(\"Incoming: \",\"Bam!!\");\n        if (shieldStrength == 0){\n            destroyShip();\n        }\n\n    }\n    ```", "```java\n    private void destroyShip(){\n        numShips--;\n        Log.i(\"Explosion: \", \"\"+this.shipName + \" destroyed\");\n        }\n    }\n    ```", "```java\n    //every time we do this the constructor runs\n    AlienShip girlShip = new AlienShip();\n    AlienShip boyShip = new AlienShip();\n    ```", "```java\n    //Look no objects but using the static method\n    Log.i(\"numShips: \", \"\" + AlienShip.getNumShips());\n    ```", "```java\n    //This works because shipName is public\n    girlShip.shipName = \"Corrine Yu\";\n    boyShip.shipName = \"Andre LaMothe\";\n    ```", "```java\n    //This won't work because shieldStrength is private\n    //girlship.shieldStrength = 999;\n\n    //But we have a public getter\n    Log.i(\"girlShip shieldStrngth: \", \"\" + girlShip.getShieldStrength());\n\n    Log.i(\"boyShip shieldStrngth: \", \"\" + boyShip.getShieldStrength());\n\n    //And we can't do this because it's private\n    //boyship.setShieldStrength(1000000);\n    ```", "```java\n    //let's shoot some ships\n    girlShip.hitDetected();\n    Log.i(\"girlShip shieldStrngth: \", \"\" + girlShip.getShieldStrength());\n\n    Log.i(\"boyShip shieldStrngth: \", \"\" + boyShip.getShieldStrength());\n\n    boyShip.hitDetected();\n    boyShip.hitDetected();\n    boyShip.hitDetected();\n\n    Log.i(\"girlShip shieldStrngth: \", \"\" + girlShip.getShieldStrength());\n\n    Log.i(\"boyShip shieldStrngth: \", \"\" + boyShip.getShieldStrength());\n\n    boyShip.hitDetected();//ahhh\n\n    Log.i(\"girlShip shieldStrngth: \", \"\" + girlShip.getShieldStrength());\n\n    Log.i(\"boyShip shieldStrngth: \", \"\" + boyShip.getShieldStrength());\n    ```", "```java\n\n    Log.i(\"numShips: \", \"\" + AlienShip.getNumShips());\n    ```", "```java\nnumShips:﹕ 2\ngirlShip shieldStrngth:﹕ 100\nboyShip shieldStrngth:﹕ 100\nIncomiming:﹕ Bam!!\ngirlShip shieldStrngth:﹕ 75\nboyShip shieldStrngth:﹕ 100\nIncomiming:﹕ Bam!!\nIncomiming:﹕ Bam!!\nIncomiming:﹕ Bam!!\ngirlShip shieldStrngth:﹕ 75\nboyShip shieldStrngth:﹕ 25\nIncomiming:﹕ Bam!!\nExplosion:﹕ Andre LaMothe destroyed\ngirlShip shieldStrngth:﹕ 75\nboyShip shieldStrngth:﹕ 0\nnumShips:﹕ 1\nboyShip shieldStrngth:﹕ 0\nnumShips:﹕ 1\n\n```", "```java\npublic class MainActivity extends Activity ...\n```", "```java\nsuper.onCreate(... \n```", "```java\n    public abstract class AlienShip {\n        private static int numShips;\n        private int shieldStrength;\n        public String shipName;\n\n        public AlienShip(int shieldStrength){\n            Log.i(\"Location: \", \"AlienShip constructor\");\n            numShips++;\n            setShieldStrength(shieldStrength);\n        }\n\n        public abstract void fireWeapon();//Ahh my body\n\n        public static int getNumShips(){\n            return numShips;\n        }\n\n        private void setShieldStrength(int shieldStrength){\n            this.shieldStrength = shieldStrength;\n        }\n\n        public int getShieldStrength(){\n            return this.shieldStrength;\n        }\n\n        public void hitDetected(){\n            shieldStrength -=25;\n            Log.i(\"Incomiming: \", \"Bam!!\");\n            if (shieldStrength == 0){\n                destroyShip();\n            }\n\n        }\n\n        private void destroyShip(){\n            numShips--;\n            Log.i(\"Explosion: \", \"\" + this.shipName + \" destroyed\");\n        }\n\n    }\n    ```", "```java\n    public class Bomber extends AlienShip {\n\n        public Bomber(){\n            super(100);\n            //Weak shields for a bomber\n            Log.i(\"Location: \", \"Bomber constructor\");\n        }\n\n        public void fireWeapon(){\n            Log.i(\"Firing weapon: \", \"bombs away\");\n        }\n    }\n    ```", "```java\n    public class Fighter extends AlienShip{\n\n        public Fighter(){\n            super(400);\n            //Strong shields for a fighter\n            Log.i(\"Location: \", \"Fighter constructor\");\n        }\n\n        public void fireWeapon(){\n            Log.i(\"Firing weapon: \", \"lasers firing\");\n        }\n\n    }\n    ```", "```java\n    Fighter aFighter = new Fighter();\n    Bomber aBomber = new Bomber();\n\n    //Can't do this AlienShip is abstract -\n    //Literally speaking as well as in code\n    //AlienShip alienShip = new AlienShip(500);\n\n    //But our objects of the subclasses can still do\n    //everything the AlienShip is meant to do\n    aBomber.shipName = \"Newell Bomber\";\n    aFighter.shipName = \"Meier Fighter\";\n\n    //And because of the overridden constructor\n    //That still calls the super constructor\n    //They have unique properties\n    Log.i(\"aFighter Shield:\", \"\"+ aFighter.getShieldStrength());\n    Log.i(\"aBomber Shield:\", \"\"+ aBomber.getShieldStrength());\n\n        //As well as certain things in certain ways\n        //That are unique to the subclass\n        aBomber.fireWeapon();\n        aFighter.fireWeapon();\n\n        //Take down those alien ships\n        //Focus on the bomber it has a weaker shield\n        aBomber.hitDetected();\n        aBomber.hitDetected();\n        aBomber.hitDetected();\n        aBomber.hitDetected();\n    ```", "```java\nLocation:﹕ AlienShip constructor\nLocation:﹕ Fighter constructor\nLocation:﹕ AlienShip constructor\nLocation:﹕ Bomber constructor\naFighter Shield:﹕ 400\naBomber Shield:﹕ 100\nFiring weapon:﹕ bombs away\nFiring weapon:﹕ lasers firing\nIncomiming:﹕ Bam!!\nIncomiming:﹕ Bam!!\nIncomiming:﹕ Bam!!\nIncomiming:﹕ Bam!!\nExplosion:﹕ Newell Bomber destroyed\n\n```", "```java\n//This code assumes we have an Animal class\n//And we have a Cat and Dog class that extends Animal\nAnimal myAnimal = new Animal();\nDog myDog = new Dog();\nCat myCat = new Cat();\nAnimal [] myAnimals = new Animal[10];\nmyAnimals[0] = myAnimal;//As expected\nmyAnimals[1] = myDog;//This is OK too\nmyAnimals[2] = myCat;//And this is fine as well\n```", "```java\n//6 months later we need elephants\n//with its own unique aspects\n//As long as it extends Animal we can still do this\nElephant myElephant = new Elephant();\nmyAnimals[3] = myElephant;//And this is fine as well\n```", "```java\nAnimal feedAnimal(Animal animalToFeed){\n  //Feed any animal here\n  return animalToFeed;\n}\n```", "```java\npublic abstract class AlienShip{...\n```", "```java\nabstract class someClass{\n  //All methods and variables here as usual\n  //Just don't try and make an object out of me!\n}\n```", "```java\npublic interface myInterface{\n  void someAbstractMethod();//omg I've got no body\n  int anotherAbstractMethod();//Ahh! Me too\n\n//Interface methods are always abstract and public implicitly \n//but we could make it explicit if we prefer\n\n  public abstract explicitlyAbstractAndPublicMethod();//still no body though\n\n}\n```", "```java\npublic class someClass implements someInterface{\n\n//class stuff here\n\n//better implement the methods of the interface or the red error lines will not go away\n  public void someAbstractMethod(){\n    //code here if you like but just an empty implementation will do\n  }\n\n  public int anotherAbstractMethod(){\n    //code here if you like but just an empty implementation will do\n\n    //Must have a return type though as that is part of the contract\n    return 1;}\n}\n```", "```java\n  private class someClass{\n    //class implementation goes here\n  }\n```", "```java\ndrawPoint(0, 0); //Not actual syntax (but very close)\n```", "```java\ndrawPoint(1920, 1080); //Not actual syntax (but very close)\n```", "```java\ndrawLine(0,0,1920, 1080); //Not actual syntax (but very close)\n```", "```java\nImageView ourView = (ImageView) findViewById(R.id.imageView);\n```", "```java\nBitmap ourBitmap = Bitmap.createBitmap(300,600, Bitmap.Config.ARGB_8888);\n```", "```java\nCanvas ourCanvas = new Canvas(ourBitmap);\n```", "```java\nPaint paint = new Paint();\n```", "```java\nourCanvas.drawPoint(0, 0, paint);//How simple is that?\n```", "```java\n    //Get a reference to our ImageView in the layout\n    ImageView ourFrame = (ImageView) findViewById(R.id.imageView);\n\n    //Create a bitmap object to use as our canvas\n    Bitmap ourBitmap = Bitmap.createBitmap(300,600, Bitmap.Config.ARGB_8888);\n    Canvas ourCanvas = new Canvas(ourBitmap);\n\n    //A paint object that does our drawing, on our canvas\n    Paint paint = new Paint();\n    ```", "```java\n    //Set the background color\n    ourCanvas.drawColor(Color.BLACK);\n\n    //Change the color of the virtual paint brush\n    paint.setColor(Color.argb(255, 255, 255, 255));\n\n    //Now draw a load of stuff on our canvas\n    ourCanvas.drawText(\"Score: 42 Lives: 3 Hi: 97\", 10, 10, paint);\n    ourCanvas.drawLine(10, 50, 200, 50, paint);\n    ourCanvas.drawCircle(110, 160, 100, paint);\n    ourCanvas.drawPoint(10, 260, paint);\n\n    //Now put the canvas in the frame\n      ourFrame.setImageBitmap(ourBitmap);\n    ```", "```java\nImageView ourFrame = (ImageView) findViewById(R.id.imageView);\n```", "```java\nBitmap ourBitmap = Bitmap.createBitmap(300,600, Bitmap.Config.ARGB_8888);\nCanvas ourCanvas = new Canvas(ourBitmap);\n```", "```java\nPaint paint = new Paint();\n```", "```java\nourCanvas.drawColor(Color.BLACK);\n```", "```java\npaint.setColor(Color.argb(255, 255, 255, 255));\n```", "```java\nourCanvas.drawText(\"Score: 42 Lives: 3 Hi: 97\", 10, 10, paint);\n```", "```java\nourCanvas.drawLine(10, 50, 200, 50, paint);\n```", "```java\nourCanvas.drawCircle(110, 160, 100, paint);\n```", "```java\nourCanvas.drawPoint(10, 260, paint);\n```", "```java\nourFrame.setImageBitmap(ourBitmap);\n```", "```java\npublic class MainActivity extends Activity implements View.OnTouchListener{\n```", "```java\n@Override\npublic boolean onTouchEvent(MotionEvent motionEvent) {\n  float x = motionEvent.getX();\n  float y = motionEvent.getY();\n  //do something with the x and y values\n  return false;\n}\n```", "```java\nPackage name and various import statements\nMainActivity class starts{\n    Declare some member variables\n    OnCreate method{\n      Initialization and setup\n    }\n    SquashCourtView class{\n      Constructor\n      Multiple methods of SquashCourtView\n    }\n    Some Android lifecycle method overrides\n}\n```", "```java\n    android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\">\n    ```", "```java\n    package com.packtpub.retrosquash.app;\n\n    import android.app.Activity;\n    import android.content.Context;\n    import android.content.res.AssetFileDescriptor;\n    import android.content.res.AssetManager;\n    import android.graphics.Canvas;\n    import android.graphics.Color;\n    import android.graphics.Paint;\n    import android.graphics.Point;\n    import android.media.AudioManager;\n    import android.media.SoundPool;\n    import android.os.Bundle;\n    import android.view.Display;\n    import android.view.KeyEvent;\n    import android.view.MotionEvent;\n    import android.view.SurfaceHolder;\n    import android.view.SurfaceView;\n    import java.io.IOException;\n    import java.util.Random;\n    ```", "```java\n    public class MainActivity extends Activity {\n\n        Canvas canvas;\n        SquashCourtView squashCourtView;\n\n        //Sound\n        //initialize sound variables\n        private SoundPool soundPool;\n        int sample1 = -1;\n        int sample2 = -1;\n        int sample3 = -1;\n        int sample4 = -1;\n\n        //For getting display details like the number of pixels\n        Display display;\n        Point size;\n        int screenWidth;\n        int screenHeight;\n\n        //Game objects\n        int racketWidth;\n        int racketHeight;\n        Point racketPosition;\n\n        Point ballPosition;\n        int ballWidth;\n\n        //for ball movement\n        boolean ballIsMovingLeft;\n        boolean ballIsMovingRight;\n        boolean ballIsMovingUp;\n        boolean ballIsMovingDown;\n\n        //for racket movement\n        boolean racketIsMovingLeft;\n        boolean racketIsMovingRight;\n\n        //stats\n        long lastFrameTime;\n        int fps;\n        int score;\n        int lives;\n    ```", "```java\n    protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            squashCourtView = new SquashCourtView(this);\n            setContentView(squashCourtView);\n\n            //Sound code\n            soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);\n            try {\n                //Create objects of the 2 required classes\n                AssetManager assetManager = getAssets();\n                AssetFileDescriptor descriptor;\n\n                //create our three fx in memory ready for use\n                descriptor = assetManager.openFd(\"sample1.ogg\");\n                sample1 = soundPool.load(descriptor, 0);\n\n                descriptor = assetManager.openFd(\"sample2.ogg\");\n                sample2 = soundPool.load(descriptor, 0);\n\n                descriptor = assetManager.openFd(\"sample3.ogg\");\n                sample3 = soundPool.load(descriptor, 0);\n\n                descriptor = assetManager.openFd(\"sample4.ogg\");\n                sample4 = soundPool.load(descriptor, 0);\n\n            } catch (IOException e) {\n                //catch exceptions here\n            }\n    ```", "```java\n            //Could this be an object with getters and setters\n            //Don't want just anyone changing screen size.\n            //Get the screen size in pixels\n            display = getWindowManager().getDefaultDisplay();\n            size = new Point();\n            display.getSize(size);\n            screenWidth = size.x;\n            screenHeight = size.y;\n\n            //The game objects\n            racketPosition = new Point();\n            racketPosition.x = screenWidth / 2;\n            racketPosition.y = screenHeight - 20;\n            racketWidth = screenWidth / 8;\n            racketHeight = 10;\n\n            ballWidth = screenWidth / 35;\n            ballPosition = new Point();\n            ballPosition.x = screenWidth / 2;\n            ballPosition.y = 1 + ballWidth;\n\n            lives = 3;\n\n        }\n    ```", "```java\n//For getting display details like the number of pixels\nDisplay display;\nPoint size;\nint screenWidth;\nint screenHeight;\n```", "```java\n//Game objects\nint racketWidth;\nint racketHeight;\nPoint racketPosition;\n\nPoint ballPosition;\nint ballWidth;\n```", "```java\n//for ball movement\nboolean ballIsMovingLeft;\nboolean ballIsMovingRight;\nboolean ballIsMovingUp;\nboolean ballIsMovingDown;\n\n//for racket movement\n boolean racketIsMovingLeft;\n boolean racketIsMovingRight;\n```", "```java\nsquashCourtView = new SquashCourtView(this);\nsetContentView(squashCourtView);\n\n```", "```java\ndisplay = getWindowManager().getDefaultDisplay();\nsize = new Point();\ndisplay.getSize(size);\nscreenWidth = size.x;\nscreenHeight = size.y;\n```", "```java\nracketPosition = new Point();\n```", "```java\nracketPosition.x = screenWidth / 2;\n```", "```java\nracketPosition.y = screenHeight - 20;\n```", "```java\nracketWidth = screenWidth / 8;\n```", "```java\nracketHeight = 10;\n```", "```java\nballWidth = screenWidth / 35;\n```", "```java\nballPosition = new Point();\n```", "```java\nballPosition.x = screenWidth / 2;\n```", "```java\nballPosition.y = 1 + ballWidth;\n```", "```java\nlives = 3;\n```", "```java\n    class SquashCourtView extends SurfaceView implements Runnable {\n            Thread ourThread = null;\n            SurfaceHolder ourHolder;\n            volatile boolean playingSquash;\n            Paint paint;\n\n            public SquashCourtView(Context context) {\n                super(context);\n                ourHolder = getHolder();\n                paint = new Paint();\n                ballIsMovingDown = true;\n\n                //Send the ball in random direction\n                Random randomNumber = new Random();\n                int ballDirection = randomNumber.nextInt(3);\n                switch (ballDirection) {\n                    case 0:\n                        ballIsMovingLeft = true;\n                        ballIsMovingRight = false;\n                        break;\n\n                    case 1:\n                        ballIsMovingRight = true;\n                        ballIsMovingLeft = false;\n                        break;\n\n                    case 2:\n                        ballIsMovingLeft = false;\n                        ballIsMovingRight = false;\n                        break;\n                }\n\n            }\n    ```", "```java\n    @Override\n            public void run() {\n                while (playingSquash) {\n                    updateCourt();\n                    drawCourt();\n                    controlFPS();\n\n                }\n\n            }\n    ```", "```java\n    public void updateCourt() {\n                if (racketIsMovingRight) {\n                    racketPosition.x = racketPosition.x + 10;\n                }\n\n                if (racketIsMovingLeft) {\n                    racketPosition.x = racketPosition.x - 10;\n                }\n\n                //detect collisions\n\n                //hit right of screen\n                if (ballPosition.x + ballWidth > screenWidth) {\n                    ballIsMovingLeft = true;\n                    ballIsMovingRight = false;\n                    soundPool.play(sample1, 1, 1, 0, 0, 1);\n                }\n\n                //hit left of screen\n                if (ballPosition.x < 0) {\n                    ballIsMovingLeft = false;\n                    ballIsMovingRight = true;\n                    soundPool.play(sample1, 1, 1, 0, 0, 1);\n                }\n    ```", "```java\n    //Edge of ball has hit bottom of screen\n                if (ballPosition.y > screenHeight - ballWidth) {\n                    lives = lives - 1;\n                    if (lives == 0) {\n                        lives = 3;\n                        score = 0;\n                        soundPool.play(sample4, 1, 1, 0, 0, 1);\n                    }\n                    ballPosition.y = 1 + ballWidth;//back to top of screen\n\n                    //what horizontal direction should we use\n                    //for the next falling ball\n                    Random randomNumber = new Random();\n                    int startX = randomNumber.nextInt(screenWidth - ballWidth) + 1;\n                    ballPosition.x = startX + ballWidth;\n\n                    int ballDirection = randomNumber.nextInt(3);\n                    switch (ballDirection) {\n                        case 0:\n                            ballIsMovingLeft = true;\n                            ballIsMovingRight = false;\n                            break;\n\n                        case 1:\n                            ballIsMovingRight = true;\n                            ballIsMovingLeft = false;\n                            break;\n\n                        case 2:\n                            ballIsMovingLeft = false;\n                            ballIsMovingRight = false;\n                            break;\n                    }\n                }\n    ```", "```java\n    //we hit the top of the screen\n                if (ballPosition.y <= 0) {\n                    ballIsMovingDown = true;\n                    ballIsMovingUp = false;\n                    ballPosition.y = 1;\n                    soundPool.play(sample2, 1, 1, 0, 0, 1);\n                }\n\n                //depending upon the two directions we should\n                //be moving in adjust our x any positions\n                if (ballIsMovingDown) {\n                    ballPosition.y += 6;\n                }\n\n                if (ballIsMovingUp) {\n                    ballPosition.y -= 10;\n                }\n\n                if (ballIsMovingLeft) {\n                    ballPosition.x -= 12;\n                }\n\n                if (ballIsMovingRight) {\n                    ballPosition.x += 12;\n                }\n    ```", "```java\n    //Has ball hit racket\n                if (ballPosition.y + ballWidth >= (racketPosition.y - racketHeight / 2)) {\n                    int halfRacket = racketWidth / 2;\n                    if (ballPosition.x + ballWidth > (racketPosition.x - halfRacket)\n                        && ballPosition.x - ballWidth < (racketPosition.x + halfRacket)) {\n                        //rebound the ball vertically and play a sound\n                        soundPool.play(sample3, 1, 1, 0, 0, 1);\n                        score++;\n                        ballIsMovingUp = true;\n                        ballIsMovingDown = false;\n                        //now decide how to rebound the ball horizontally\n                        if (ballPosition.x > racketPosition.x) {\n                            ballIsMovingRight = true;\n                            ballIsMovingLeft = false;\n\n                        } else {\n                            ballIsMovingRight = false;\n                            ballIsMovingLeft = true;\n                        }\n\n                    }\n                }\n            }\n    }\n    ```", "```java\nclass SquashCourtView extends SurfaceView implements Runnable {\n        Thread ourThread = null;\n        SurfaceHolder ourHolder;\n        volatile boolean playingSquash;\n        Paint paint;\n```", "```java\n        public SquashCourtView(Context context) {\n            super(context);\n            ourHolder = getHolder();\n            paint = new Paint();\n```", "```java\n            ballIsMovingDown = true;\n\n            //Send the ball in random direction\n            Random randomNumber = new Random();\n            int ballDirection = randomNumber.nextInt(3);\n            switch (ballDirection) {\n                case 0:\n                    ballIsMovingLeft = true;\n                    ballIsMovingRight = false;\n                    break;\n\n                case 1:\n                    ballIsMovingRight = true;\n                    ballIsMovingLeft = false;\n                    break;\n\n                case 2:\n                    ballIsMovingLeft = false;\n                    ballIsMovingRight = false;\n                    break;\n            }\n\n        }\n```", "```java\n@Override\n        public void run() {\n            while (playingSquash) {\n                updateCourt();\n                drawCourt();\n                controlFPS();\n\n            }\n\n        }\n```", "```java\npublic void updateCourt() {\n            if (racketIsMovingRight) {\n                racketPosition.x = racketPosition.x + 10;\n            }\n\n            if (racketIsMovingLeft) {\n                racketPosition.x = racketPosition.x - 10;\n            }\n```", "```java\n            //detect collisions\n\n            //hit right of screen\n            if (ballPosition.x + ballWidth > screenWidth) {\n                ballIsMovingLeft = true;\n                ballIsMovingRight = false;\n                soundPool.play(sample1, 1, 1, 0, 0, 1);\n            }\n\n            //hit left of screen\n            if (ballPosition.x < 0) {\n                ballIsMovingLeft = false;\n                ballIsMovingRight = true;\n                soundPool.play(sample1, 1, 1, 0, 0, 1);\n            }\n```", "```java\n//Edge of ball has hit bottom of screen\nif (ballPosition.y > screenHeight - ballWidth) {\n```", "```java\n   lives = lives - 1;\n   if (lives == 0) {\n```", "```java\n          lives = 3;\n          score = 0;\n          soundPool.play(sample4, 1, 1, 0, 0, 1);\n       }\n```", "```java\nballPosition.y = 1 + ballWidth;//back to top of screen\n//what horizontal direction should we use\n//for the next falling ball\nRandom randomNumber = new Random();\nint startX = randomNumber.nextInt(screenWidth - ballWidth) + 1;\n                ballPosition.x = startX + ballWidth;\n\n                int ballDirection = randomNumber.nextInt(3);\n                switch (ballDirection) {\n                    case 0:\n                        ballIsMovingLeft = true;\n                        ballIsMovingRight = false;\n                        break;\n\n                    case 1:\n                        ballIsMovingRight = true;\n                        ballIsMovingLeft = false;\n                        break;\n\n                    case 2:\n                        ballIsMovingLeft = false;\n                        ballIsMovingRight = false;\n                        break;\n                }\n            }\n```", "```java\n//we hit the top of the screen\n            if (ballPosition.y <= 0) {\n                ballIsMovingDown = true;\n                ballIsMovingUp = false;\n                ballPosition.y = 1;\n                soundPool.play(sample2, 1, 1, 0, 0, 1);\n            }\n```", "```java\n            //depending upon the two directions we should be\n            //moving in adjust our x any positions\n            if (ballIsMovingDown) {\n                ballPosition.y += 6;\n            }\n\n            if (ballIsMovingUp) {\n                ballPosition.y -= 10;\n            }\n\n            if (ballIsMovingLeft) {\n                ballPosition.x -= 12;\n            }\n\n            if (ballIsMovingRight) {\n                ballPosition.x += 12;\n            }\n```", "```java\nif (ballPosition.y + ballWidth >= (racketPosition.y - racketHeight / 2)) {\n```", "```java\nint halfRacket = racketWidth / 2;\n```", "```java\nif (ballPosition.x + ballWidth > (racketPosition.x - halfRacket)\n  && ballPosition.x - ballWidth < (racketPosition.x + halfRacket)) {\n```", "```java\n//rebound the ball vertically and play a sound\n                    soundPool.play(sample3, 1, 1, 0, 0, 1);\n                    score++;\n                    ballIsMovingUp = true;\n                    ballIsMovingDown = false;\n```", "```java\n                    //now decide how to rebound the ball horizontally\n                    if (ballPosition.x > racketPosition.x) {\n                        ballIsMovingRight = true;\n                        ballIsMovingLeft = false;\n\n                    } else {\n                        ballIsMovingRight = false;\n                        ballIsMovingLeft = true;\n                    }\n\n                }\n            }\n        }\n```", "```java\n    public void drawCourt() {\n\n                if (ourHolder.getSurface().isValid()) {\n                    canvas = ourHolder.lockCanvas();\n                    //Paint paint = new Paint();\n                    canvas.drawColor(Color.BLACK);//the background\n                    paint.setColor(Color.argb(255, 255, 255, 255));\n                    paint.setTextSize(45);\n                    canvas.drawText(\"Score:\" + score + \" Lives:\" + lives + \" fps:\" + fps, 20, 40, paint);\n\n                    //Draw the squash racket\n                    canvas.drawRect(racketPosition.x - (racketWidth / 2),\n                      racketPosition.y - (racketHeight / 2), racketPosition.x + (racketWidth / 2),\n                          racketPosition.y + racketHeight, paint);\n\n                    //Draw the ball\n                    canvas.drawRect(ballPosition.x, ballPosition.y,\n                            ballPosition.x + ballWidth, ballPosition.y + ballWidth, paint);\n\n                    ourHolder.unlockCanvasAndPost(canvas);\n                }\n\n            }\n    ```", "```java\n    public void controlFPS() {\n                long timeThisFrame = (System.currentTimeMillis() - lastFrameTime);\n                long timeToSleep = 15 - timeThisFrame;\n                if (timeThisFrame > 0) {\n                    fps = (int) (1000 / timeThisFrame);\n                }\n                if (timeToSleep > 0) {\n\n                    try {\n                        ourThread.sleep(timeToSleep);\n                    } catch (InterruptedException e) {\n                    }\n\n                }\n\n                lastFrameTime = System.currentTimeMillis();\n            }\n    ```", "```java\n    public void pause() {\n                playingSquash = false;\n                try {\n                    ourThread.join();\n                } catch (InterruptedException e) {\n                }\n\n            }\n\n            public void resume() {\n                playingSquash = true;\n                ourThread = new Thread(this);\n                ourThread.start();\n            }\n    ```", "```java\n    @Override\n            public boolean onTouchEvent(MotionEvent motionEvent) {\n\n                switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {\n                    case MotionEvent.ACTION_DOWN:\n\n                        if (motionEvent.getX() >= screenWidth / 2) {\n                            racketIsMovingRight = true;\n                            racketIsMovingLeft = false;\n                        } else {\n                            racketIsMovingLeft = true;\n                            racketIsMovingRight = false;\n                        }\n\n                        break;\n\n                    case MotionEvent.ACTION_UP:\n                        racketIsMovingRight = false;\n                        racketIsMovingLeft = false;\n                        break;\n                }\n                return true;\n            }\n\n        }\n    ```", "```java\npublic void drawCourt() {\n\n            if (ourHolder.getSurface().isValid()) {\n                canvas = ourHolder.lockCanvas();\n                //Paint paint = new Paint();\n```", "```java\n       canvas.drawColor(Color.BLACK);//the background\n```", "```java\n        paint.setColor(Color.argb(255, 255, 255, 255));\n```", "```java\n                paint.setTextSize(45);\n```", "```java\n  canvas.drawText(\"Score:\" + score + \" Lives:\" + lives + \" fps:\" +fps, 20, 40, paint);\n```", "```java\n//Draw the squash racket\n  canvas.drawRect(racketPosition.x - (racketWidth / 2),\n                  racketPosition.y - (racketHeight / 2), \n                  racketPosition.x + (racketWidth / 2),\n                  racketPosition.y + racketHeight, paint);\n```", "```java\n                //Draw the ball\n                canvas.drawRect(ballPosition.x, ballPosition.y,\n                  ballPosition.x + ballWidth, ballPosition.y + ballWidth, paint);\n```", "```java\n                ourHolder.unlockCanvasAndPost(canvas);\n            }\n\n        }\n```", "```java\npublic void controlFPS() {\nlong timeThisFrame = (System.currentTimeMillis() - lastFrameTime);\n```", "```java\nlong timeToSleep = 15 - timeThisFrame; \n```", "```java\n            if (timeThisFrame > 0) {\n                fps = (int) (1000 / timeThisFrame);\n            }\n```", "```java\n            if (timeToSleep > 0) {\n\n                try {\n                    ourThread.sleep(timeToSleep);\n                } catch (InterruptedException e) {\n                }\n\n            }\n```", "```java\n            lastFrameTime = System.currentTimeMillis();\n        }\n```", "```java\npublic void pause() {\n            playingSquash = false;\n            try {\n                ourThread.join();\n            } catch (InterruptedException e) {\n            }\n\n        }\n\n        public void resume() {\n            playingSquash = true;\n            ourThread = new Thread(this);\n            ourThread.start();\n        }\n```", "```java\n@Override\n    public boolean onTouchEvent(MotionEvent motionEvent) {\n\n    switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {\n```", "```java\n    case MotionEvent.ACTION_DOWN:\n```", "```java\n    if (motionEvent.getX() >= screenWidth / 2) {\n        racketIsMovingRight = true;\n        racketIsMovingLeft = false;\n```", "```java\n                } else {\n                    racketIsMovingLeft = true;\n                    racketIsMovingRight = false;\n                }\n\n                    break;\n```", "```java\n                case MotionEvent.ACTION_UP:\n                    racketIsMovingRight = false;\n                    racketIsMovingLeft = false;\n                    break;\n            }\n            return true;\n        }\n\n    }\n```", "```java\n    @Override\n        protected void onStop() {\n            super.onStop();\n\n            while (true) {\n                squashCourtView.pause();\n                break;\n            }\n\n            finish();\n        }\n    ```", "```java\n    @Override\n        protected void onPause() {\n            super.onPause();\n            squashCourtView.pause();\n        }\n    ```", "```java\n    @Override\n        protected void onResume() {\n            super.onResume();\n            squashCourtView.resume();\n        }\n    ```", "```java\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\n                squashCourtView.pause();\n                finish();\n                return true;\n            }\n            return false;\n        }\n    ```", "```java\n//Determine the size of each block/place on the game board\n blockSize = screenWidth/40;\n```", "```java\nnumBlocksWide = 40;\n```", "```java\nnumBlocksHigh = ((screenHeight - topGap ))/blockSize;\n```", "```java\n//An array for our snake\nsnakeX = new int[200];\nsnakeY = new int[200];\n```", "```java\n//move the body starting at the back\nfor(int i = snakeLength; i >0 ; i--){\n  snakeX[i] = snakeX[i-1];\n  snakeY[i] = snakeY[i-1];\n}\n```", "```java\nif(snakeX[0] >= numBlocksWide)dead=true;\n```", "```java\n//Have we eaten ourselves?\nfor (int i = snakeLength-1; i > 0; i--) {\n  if ((i > 4) && (snakeX[0] == snakeX[i]) && (snakeY[0] == snakeY[i])) {\n    dead = true;\n    }\n}\n```", "```java\n//loop through every section of the snake and draw it\n//a block at a time.\ncanvas.drawBitmap(bodyBitmap, snakeX[i]*blockSize, (snakeY[i]*blockSize)+topGap, paint);\n```", "```java\nMainActivity.java file\n    Imports\n    MainActivity class\n        Declare some variables and objects\n        onCreate\n        SnakeAnimView class\n            Constructor\n            Run method\n            Update method\n            Draw method\n            controlFPS method\n            pause method\n            resume method\n            onTouchEvent method\n        onStop method\n        onResume method\n        onPause method\n        onKeyDown method\n```", "```java\nMainActivity.java file\n    Imports\n    GameActivity class\n        Declare some variables and objects\n        onCreate\n        SnakeView class\n            Constructor\n            getSnake method\n            getApple method\n            Run method\n            updateGame method\n            drawGame method\n            controlFPS method\n            pause method\n            resume method\n            onTouchEvent method\n        onStop method\n        onResume method\n        onPause method\n        onKeyDown method\n        loadSOund method\n        configureDisplay method\n```", "```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        loadSound();\n        configureDisplay();\n        snakeView = new SnakeView(this);\n        setContentView(snakeView);\n\n    }\n```", "```java\nRect rectToBeDrawn = new Rect(0, 0, 63, 63);\n```", "```java\ncanvas.drawBitmap(headAnimBitmap, rectToBeDrawn, destRect, paint);\n```", "```java\n    public class MainActivity extends Activity {\n\n        Canvas canvas;\n        SnakeAnimView snakeAnimView;\n\n        //The snake head sprite sheet\n        Bitmap headAnimBitmap;\n        //The portion of the bitmap to be drawn in the current frame\n        Rect rectToBeDrawn;\n        //The dimensions of a single frame\n        int frameHeight = 64;\n        int frameWidth = 64;\n        int numFrames = 6;\n        int frameNumber;\n\n        int screenWidth;\n        int screenHeight;\n\n        //stats\n        long lastFrameTime;\n        int fps;\n        int hi;\n\n        //To start the game from onTouchEvent\n        Intent i;\n    ```", "```java\n    @Override\n        protected void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n\n            //find out the width and height of the screen\n            Display display = getWindowManager().getDefaultDisplay();\n            Point size = new Point();\n            display.getSize(size);\n            screenWidth = size.x;\n            screenHeight = size.y;\n\n            headAnimBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head_sprite_sheet);\n\n            snakeAnimView = new SnakeAnimView(this);\n            setContentView(snakeAnimView);\n\n            i = new Intent(this, GameActivity.class);\n\n        }\n    ```", "```java\n    class SnakeAnimView extends SurfaceView implements Runnable {\n            Thread ourThread = null;\n            SurfaceHolder ourHolder;\n            volatile boolean playingSnake;\n            Paint paint;\n    ```", "```java\n    public SnakeAnimView(Context context) {\n        super(context);\n        ourHolder = getHolder();\n        paint = new Paint();\n        frameWidth = headAnimBitmap.getWidth()/numFrames;\n        frameHeight = headAnimBitmap.getHeight();\n    }\n    ```", "```java\n    @Override\n            public void run() {\n                while (playingSnake) {\n                    update();\n                    draw();\n                    controlFPS();\n\n                }\n\n            }\n    ```", "```java\n    public void update() {\n\n      //which frame should we draw\n      rectToBeDrawn = new Rect((frameNumber * frameWidth)-1, 0,(frameNumber * frameWidth +frameWidth)-1, frameHeight);\n\n      //now the next frame\n      frameNumber++;\n\n      //don't try and draw frames that don't exist\n      if(frameNumber == numFrames){\n        frameNumber = 0;//back to the first frame\n      }\n    }\n    ```", "```java\n    public void draw() {\n\n                if (ourHolder.getSurface().isValid()) {\n                    canvas = ourHolder.lockCanvas();\n                    //Paint paint = new Paint();\n                    canvas.drawColor(Color.BLACK);//the background\n                    paint.setColor(Color.argb(255, 255, 255, 255));\n                    paint.setTextSize(150);\n                    canvas.drawText(\"Snake\", 10, 150, paint);\n                    paint.setTextSize(25);\n                    canvas.drawText(\"  Hi Score:\" + hi, 10, screenHeight-50, paint);\n\n                    //Draw the snake head\n                    //make this Rect whatever size and location you like\n                    //(startX, startY, endX, endY)\n                    Rect destRect = new Rect(screenWidth/2-100, screenHeight/2-100, screenWidth/2+100, screenHeight/2+100);\n\n                    canvas.drawBitmap(headAnimBitmap, rectToBeDrawn, destRect, paint);\n\n                    ourHolder.unlockCanvasAndPost(canvas);\n                }\n\n            }\n    ```", "```java\n    public void controlFPS() {\n                long timeThisFrame = (System.currentTimeMillis() - lastFrameTime);\n                long timeToSleep = 500 - timeThisFrame;\n                if (timeThisFrame > 0) {\n                    fps = (int) (1000 / timeThisFrame);\n                }\n                if (timeToSleep > 0) {\n\n                    try {\n                        ourThread.sleep(timeToSleep);\n                    } catch (InterruptedException e) {\n                    }\n\n                }\n\n                lastFrameTime = System.currentTimeMillis();\n            }\n    ```", "```java\n    public void pause() {\n                playingSnake = false;\n                try {\n                    ourThread.join();\n                } catch (InterruptedException e) {\n                }\n\n            }\n\n            public void resume() {\n                playingSnake = true;\n                ourThread = new Thread(this);\n                ourThread.start();\n            }\n    ```", "```java\n    @Override\n            public boolean onTouchEvent(MotionEvent motionEvent) {\n\n                startActivity(i);\n                return true;\n            }\n    }\n    ```", "```java\n    @Override\n        protected void onStop() {\n            super.onStop();\n\n            while (true) {\n                snakeAnimView.pause();\n                break;\n            }\n\n            finish();\n        }\n\n        @Override\n        protected void onResume() {\n            super.onResume();\n            snakeAnimView.resume();\n        }\n\n        @Override\n        protected void onPause() {\n            super.onPause();\n            snakeAnimView.pause();\n        }\n\n        public boolean onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\n                snakeAnimView.pause();\n                finish();\n                return true;\n            }\n            return false;\n        }\n    ```", "```java\n    //i = new Intent(this, GameActivity.class);\n    ```", "```java\n    public class GameActivity extends Activity {\n\n        Canvas canvas;\n        SnakeView snakeView;\n\n        Bitmap headBitmap;\n        Bitmap bodyBitmap;\n        Bitmap tailBitmap;\n        Bitmap appleBitmap;\n\n        //Sound\n        //initialize sound variables\n        private SoundPool soundPool;\n        int sample1 = -1;\n        int sample2 = -1;\n        int sample3 = -1;\n        int sample4 = -1;\n\n        //for snake movement\n        int directionOfTravel=0;\n        //0 = up, 1 = right, 2 = down, 3= left\n\n        int screenWidth;\n        int screenHeight;\n        int topGap;\n\n        //stats\n        long lastFrameTime;\n        int fps;\n        int score;\n        int hi;\n\n        //Game objects\n        int [] snakeX;\n        int [] snakeY;\n        int snakeLength;\n        int appleX;\n        int appleY;\n\n        //The size in pixels of a place on the game board\n        int blockSize;\n        int numBlocksWide;\n        int numBlocksHigh;\n    ```", "```java\n    @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n\n            loadSound();\n            configureDisplay();\n            snakeView = new SnakeView(this);\n            setContentView(snakeView);\n\n        }\n    ```", "```java\n      class SnakeView extends SurfaceView implements Runnable {\n          Thread ourThread = null;\n          SurfaceHolder ourHolder;\n          volatile boolean playingSnake;\n          Paint paint;\n\n          public SnakeView(Context context) {\n              super(context);\n              ourHolder = getHolder();\n              paint = new Paint();\n\n                //Even my 9 year old play tester couldn't\n                //get a snake this long\n                snakeX = new int[200];\n                snakeY = new int[200];\n\n                //our starting snake\n                getSnake();\n                //get an apple to munch\n                getApple();\n            }\n    ```", "```java\n    public void getSnake(){\n                snakeLength = 3;\n                //start snake head in the middle of screen\n                snakeX[0] = numBlocksWide / 2;\n                snakeY[0] = numBlocksHigh / 2;\n\n                //Then the body\n                snakeX[1] = snakeX[0]-1;\n                snakeY[1] = snakeY[0];\n\n                //And the tail\n                snakeX[1] = snakeX[1]-1;\n                snakeY[1] = snakeY[0];\n            }\n\n            public void getApple(){\n                Random random = new Random();\n                appleX = random.nextInt(numBlocksWide-1)+1;\n                appleY = random.nextInt(numBlocksHigh-1)+1;\n            }\n    ```", "```java\n    @Override\n            public void run() {\n                while (playingSnake) {\n                    updateGame();\n                    drawGame();\n                    controlFPS();\n\n                }\n\n            }\n    ```", "```java\n    public void updateGame() {\n\n        //Did the player get the apple\n        if(snakeX[0] == appleX && snakeY[0] == appleY){\n            //grow the snake\n            snakeLength++;\n            //replace the apple\n            getApple();\n            //add to the score\n            score = score + snakeLength;\n            soundPool.play(sample1, 1, 1, 0, 0, 1);\n        }\n\n        //move the body - starting at the back\n        for(int i=snakeLength; i >0 ; i--){\n            snakeX[i] = snakeX[i-1];\n            snakeY[i] = snakeY[i-1];\n        }\n\n        //Move the head in the appropriate direction\n        switch (directionOfTravel){\n            case 0://up\n            snakeY[0]  --;\n            break;\n\n            case 1://right\n            snakeX[0] ++;\n            break;\n\n            case 2://down\n            snakeY[0] ++;\n            break;\n\n            case 3://left\n            snakeX[0] --;\n            break;\n            }\n\n            //Have we had an accident\n            boolean dead = false;\n            //with a wall\n            if(snakeX[0] == -1)dead=true;\n            if(snakeX[0] >= numBlocksWide) dead = true;\n            if(snakeY[0] == -1)dead=true;\n            if(snakeY[0] == numBlocksHigh) dead = true;\n            //or eaten ourselves?\n            for (int i = snakeLength-1; i > 0; i--) {\n                if ((i > 4) && (snakeX[0] == snakeX[i]) && (snakeY[0] == snakeY[i])) {\n                dead = true;\n            }\n        }\n\n            if(dead){\n            //start again\n            soundPool.play(sample4, 1, 1, 0, 0, 1);\n            score = 0;\n            getSnake();\n\n            }\n\n            }\n    ```", "```java\n    public void drawGame() {\n\n        if (ourHolder.getSurface().isValid()) {\n            canvas = ourHolder.lockCanvas();\n            //Paint paint = new Paint();\n            canvas.drawColor(Color.BLACK);//the background\n            paint.setColor(Color.argb(255, 255, 255, 255));\n            paint.setTextSize(topGap/2);\n            canvas.drawText(\"Score:\" + score + \"  Hi:\" + hi, 10, topGap-6, paint);\n\n            //draw a border - 4 lines, top right, bottom , left\n            paint.setStrokeWidth(3);//3 pixel border\n            canvas.drawLine(1,topGap,screenWidth-1,topGap,paint);\n            canvas.drawLine(screenWidth-1,topGap,screenWidth-1,topGap+(numBlocksHigh*blockSize),paint);\n            canvas.drawLine(screenWidth-1,topGap+(numBlocksHigh*blockSize),1,topGap+(numBlocksHigh*blockSize),paint);\n            canvas.drawLine(1,topGap, 1,topGap+(numBlocksHigh*blockSize), paint);\n\n            //Draw the snake\n            canvas.drawBitmap(headBitmap, snakeX[0]*blockSize, (snakeY[0]*blockSize)+topGap, paint);\n            //Draw the body\n            for(int i = 1; i < snakeLength-1;i++){\n                canvas.drawBitmap(bodyBitmap, snakeX[i]*blockSize, (snakeY[i]*blockSize)+topGap, paint);\n            }\n            //draw the tail\n            canvas.drawBitmap(tailBitmap, snakeX[snakeLength-1]*blockSize, (snakeY[snakeLength-1]*blockSize)+topGap, paint);\n\n            //draw the apple\n            canvas.drawBitmap(appleBitmap, appleX*blockSize, (appleY*blockSize)+topGap, paint);\n\n            ourHolder.unlockCanvasAndPost(canvas);\n        }\n\n            }\n    ```", "```java\n    public void controlFPS() {\n        long timeThisFrame = (System.currentTimeMillis() - lastFrameTime);\n        long timeToSleep = 100 - timeThisFrame;\n        if (timeThisFrame > 0) {\n            fps = (int) (1000 / timeThisFrame);\n        }\n        if (timeToSleep > 0) {\n\n            try {\n                ourThread.sleep(timeToSleep);\n            } catch (InterruptedException e) {\n            }\n\n            }\n\n            lastFrameTime = System.currentTimeMillis();\n            }\n    ```", "```java\n    public void pause() {\n                playingSnake = false;\n                try {\n                    ourThread.join();\n                } catch (InterruptedException e) {\n                }\n\n            }\n\n            public void resume() {\n                playingSnake = true;\n                ourThread = new Thread(this);\n                ourThread.start();\n            }\n    ```", "```java\n    @Override\n        public boolean onTouchEvent(MotionEvent motionEvent) {\n\n            switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {\n                case MotionEvent.ACTION_UP:\n                if (motionEvent.getX() >= screenWidth / 2) {\n                    //turn right\n                    directionOfTravel ++;\n                    //no such direction\n\n                    if(directionOfTravel == 4)\n                    //loop back to 0(up)\n                    directionOfTravel = 0;\n                }\n            else {\n                //turn left\n                directionOfTravel--;\n                if(directionOfTravel == -1) {//no such direction\n                //loop back to 0(up)\n                directionOfTravel = 3;\n                            }\n                        }\n                }\n                return true;\n            }\n    ```", "```java\n    @Override\n        protected void onStop() {\n            super.onStop();\n\n            while (true) {\n                snakeView.pause();\n                break;\n            }\n\n            finish();\n        }\n\n        @Override\n        protected void onResume() {\n            super.onResume();\n            snakeView.resume();\n        }\n\n        @Override\n        protected void onPause() {\n            super.onPause();\n            snakeView.pause();\n        }\n\n        public boolean onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\n\n               snakeView.pause();\n\n                Intent i = new Intent(this, MainActivity.class);\n                startActivity(i);\n                finish();\n                return true;\n            }\n            return false;\n        }\n    ```", "```java\n    public void loadSound(){\n        soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);\n        try {\n            //Create objects of the 2 required classes\n            AssetManager assetManager = getAssets();\n            AssetFileDescriptor descriptor;\n\n            //create our three fx in memory ready for use\n            descriptor = assetManager.openFd(\"sample1.ogg\");\n            sample1 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample2.ogg\");\n            sample2 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample3.ogg\");\n            sample3 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample4.ogg\");\n            sample4 = soundPool.load(descriptor, 0);\n\n            } catch (IOException e) {\n            //Print an error message to the console\n            Log.e(\"error\", \"failed to load sound files);\n            }\n        }\n    ```", "```java\n    public void configureDisplay(){\n            //find out the width and height of the screen\n            Display display = getWindowManager().getDefaultDisplay();\n            Point size = new Point();\n            display.getSize(size);\n            screenWidth = size.x;\n            screenHeight = size.y;\n            topGap = screenHeight/14;\n            //Determine the size of each block/place on the game board\n            blockSize = screenWidth/40;\n\n            //Determine how many game blocks will fit into the \n            //height and width\n            //Leave one block for the score at the top\n            numBlocksWide = 40;\n            numBlocksHigh = ((screenHeight - topGap ))/blockSize;\n\n            //Load and scale bitmaps\n            headBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head);\n            bodyBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.body);\n            tailBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.tail);\n            appleBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.apple);\n\n            //scale the bitmaps to match the block size\n            headBitmap = Bitmap.createScaledBitmap(headBitmap, blockSize, blockSize, false);\n            bodyBitmap = Bitmap.createScaledBitmap(bodyBitmap, blockSize, blockSize, false);\n            tailBitmap = Bitmap.createScaledBitmap(tailBitmap, blockSize, blockSize, false);\n            appleBitmap = Bitmap.createScaledBitmap(appleBitmap, blockSize, blockSize, false);\n\n        }\n    ```", "```java\npublic void updateGame() {\n\n            //Did the player get the apple\n            if(snakeX[0] == appleX && snakeY[0] == appleY){\n                //grow the snake\n                snakeLength++;\n                //replace the apple\n                getApple();\n                //add to the score\n                score = score + snakeLength;\n                soundPool.play(sample1, 1, 1, 0, 0, 1);\n            }\n```", "```java\n            //move the body - starting at the back\n            for(int i = snakeLength; i >0 ; i--){\n                snakeX[i] = snakeX[i-1];\n                snakeY[i] = snakeY[i-1];\n            }\n```", "```java\n            //Move the head in the appropriate direction\n            switch (directionOfTravel){\n                case 0://up\n                    snakeY[0]  --;\n                    break;\n\n                case 1://right\n                    snakeX[0] ++;\n                    break;\n\n                case 2://down\n                    snakeY[0] ++;\n                    break;\n\n                case 3://left\n                    snakeX[0] --;\n                    break;\n            }\n```", "```java\n            //Have we had an accident\n            boolean dead = false;\n            //with a wall\n            if(snakeX[0] == -1)dead=true;\n            if(snakeX[0] >= numBlocksWide)dead=true;\n            if(snakeY[0] == -1)dead=true;\n            if(snakeY[0] == numBlocksHigh)dead=true;\n```", "```java\n           //or eaten ourselves?\n            for (int i = snakeLength-1; i > 0; i--) {\n                if ((i > 4) && (snakeX[0] == snakeX[i]) && (snakeY[0] == snakeY[i])) {\n                    dead = true;\n                }\n            }\n```", "```java\n            if(dead){\n                //start again\n                soundPool.play(sample4, 1, 1, 0, 0, 1);\n                score = 0;\n                getSnake();\n\n            }\n\n        }\n```", "```java\npublic void drawGame() {\n\n            if (ourHolder.getSurface().isValid()) {\n                canvas = ourHolder.lockCanvas();\n                //Paint paint = new Paint();\n                canvas.drawColor(Color.BLACK);//the background\n                paint.setColor(Color.argb(255, 255, 255, 255));\n                paint.setTextSize(topGap/2);\n```", "```java\n    canvas.drawText(\"Score:\" + score + \"  Hi:\" + hi, 10, topGap-6, paint);\n```", "```java\n //draw a border - 4 lines, top right, bottom, left\n                paint.setStrokeWidth(3);//4 pixel border\n                canvas.drawLine(1,topGap,screenWidth-1,topGap,paint);\n                canvas.drawLine(screenWidth-1,topGap,screenWidth-1,topGap+(numBlocksHigh*blockSize),paint);\n                canvas.drawLine(screenWidth-1,topGap+(numBlocksHigh*blockSize),1,topGap+(numBlocksHigh*blockSize),paint);\n                canvas.drawLine(1,topGap, 1,topGap+(numBlocksHigh*blockSize), paint);\n```", "```java\n//Draw the snake\ncanvas.drawBitmap(headBitmap, snakeX[0]*blockSize, (snakeY[0]*blockSize)+topGap, paint);\n```", "```java\n//Draw the body\nfor(int i = 1; i < snakeLength-1; i++){\n    canvas.drawBitmap(bodyBitmap, snakeX[i]*blockSize, (snakeY[i]*blockSize)+topGap, paint);\n}\n```", "```java\n//draw the tail\ncanvas.drawBitmap(tailBitmap, snakeX[snakeLength-\n    1]*blockSize, (snakeY[snakeLength-1]*blockSize)+topGap, paint);\n```", "```java\n                //draw the apple\n                canvas.drawBitmap(appleBitmap, appleX*blockSize, \n                    (appleY*blockSize)+topGap, paint);\n\n                ourHolder.unlockCanvasAndPost(canvas);\n            }\n\n        }\n```", "```java\npublic void configureDisplay(){\n        //find out the width and height of the screen\n        Display display = getWindowManager().getDefaultDisplay();\n        Point size = new Point();\n        display.getSize(size);\n        screenWidth = size.x;\n        screenHeight = size.y;\n```", "```java\n        topGap = screenHeight/14;\n        //Determine the size of each block/place on the game board\n        blockSize = screenWidth/40;\n\n        //Determine how many game blocks will fit into the height and width\n        //Leave one block for the score at the top\n        numBlocksWide = 40;\n        numBlocksHigh = (screenHeight - topGap )/blockSize;\n```", "```java\n//Load and scale bitmaps\n        headBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head);\n        bodyBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.body);\n        tailBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.tail);\n        appleBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.apple);\n```", "```java\n        //scale the bitmaps to match the block size\n        headBitmap = Bitmap.createScaledBitmap(headBitmap, blockSize, \n            blockSize, false);\n        bodyBitmap = Bitmap.createScaledBitmap(bodyBitmap, blockSize, \n            blockSize, false);\ntailBitmap = Bitmap.createScaledBitmap(tailBitmap, blockSize, \n    blockSize, false);\nappleBitmap = Bitmap.createScaledBitmap(appleBitmap, \n    blockSize, blockSize, false);\n\n    }\n```", "```java\n    <application\n            android:debuggable=\"false\"\n            android:allowBackup=\"true\"\n    ```", "```java\n    <meta-data android:name=\"com.google.android.gms.games.APP_ID\"\n     android:value=\"@string/app_id\" />\n    <meta-data android:name=\"com.google.android.gms.version\"\n     android:value=\"@integer/google_play_services_version\"/>\n\n    </application>\n    ```", "```java\n    public class MainActivity extends Activity {\n    ```", "```java\n    public class MainActivity extends BaseGameActivity {\n    ```", "```java\n    public class GameActivity extends Activity {\n    ```", "```java\n    public class GameActivity extends BaseGameActivity {\n    ```", "```java\n    dependencies {\n        compile 'com.google.android.gms:play-services:+'\n        compile 'com.android.support:appcompat-v7:+'\n        compile fileTree(dir: 'libs', include: ['*.jar'])\n    }\n    ```", "```java\n    <RelativeLayout \n\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n        android:paddingRight=\"@dimen/activity_horizontal_margin\"\n        android:paddingTop=\"@dimen/activity_vertical_margin\"\n        android:paddingBottom=\"@dimen/activity_vertical_margin\"\n        tools:context=\"com.packtpub.enhancedsnakegame.enhancedsnakegame.MainActivity\">\n\n        <Button\n\n            android:id=\"@+id/llPlay\"\n            android:layout_width=\"140dp\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Leaderboards\"\n            android:layout_alignParentBottom=\"true\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_alignParentEnd=\"true\"\n            android:visibility=\"gone\"/>\n\n        <Button\n            android:id=\"@+id/awardsLink\"\n            android:layout_width=\"140dp\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Achievements\"\n            android:layout_gravity=\"center_vertical\"\n            android:layout_alignTop=\"@+id/llPlay\"\n            android:layout_toLeftOf=\"@+id/llPlay\"\n            android:visibility=\"gone\"/>\n\n        <!-- sign-in button -->\n        <com.google.android.gms.common.SignInButton\n            android:id=\"@+id/sign_in_button\"\n            android:layout_width=\"140dp\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentTop=\"true\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_alignParentEnd=\"true\"\n             />\n\n        <!-- sign-out button -->\n        <Button\n            android:id=\"@+id/sign_out_button\"\n            android:layout_width=\"140dp\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Sign Out\"\n            android:layout_alignParentTop=\"true\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_alignParentEnd=\"true\"\n            android:layout_gravity=\"center_horizontal\"\n            android:visibility=\"gone\"\n            />\n\n    </RelativeLayout>\n    ```", "```java\n    public class MainActivity extends BaseGameActivity implements View.OnClickListener{\n    ```", "```java\n    //Our google play buttons\n        Button llPlay;\n        Button awardsLink;\n        com.google.android.gms.common.SignInButton sign_in_button;\n        Button sign_out_button;\n    ```", "```java\n    setContentView(snakeAnimView);\n\n     //Load our UI on top of our SnakeAnimView\n     LayoutInflater mInflater = LayoutInflater.from(this);\n     View overView = mInflater.inflate(R.layout.activity_main, null);\n     this.addContentView(overView, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n\n    ```", "```java\n    //game services buttons\n            sign_in_button = (com.google.android.gms.common.SignInButton)findViewById(R.id.sign_in_button);\n            sign_in_button.setOnClickListener(this);\n            sign_out_button = (Button)findViewById(R.id.sign_out_button);\n            sign_out_button.setOnClickListener(this);\n            awardsLink = (Button) findViewById(R.id.awardsLink);\n            awardsLink.setOnClickListener(this);\n            llPlay = (Button)findViewById(R.id.llPlay);\n            llPlay.setOnClickListener(this);\n    ```", "```java\n    @Override\n        public void onSignInFailed() {\n            // Sign in failed. So show the sign-in button.\n     sign_in_button.setVisibility(View.VISIBLE);\n     sign_out_button.setVisibility(View.GONE);\n        }\n\n        @Override\n        public void onSignInSucceeded() {\n            // show sign-out button, hide the sign-in button\n     sign_in_button.setVisibility(View.GONE);\n     sign_out_button.setVisibility(View.VISIBLE);\n     llPlay.setVisibility(View.VISIBLE);\n     awardsLink.setVisibility(View.VISIBLE);\n        }\n    ```", "```java\n    switch (v.getId()) {\n\n    }\n    ```", "```java\n        case R.id.sign_in_button:\n                    // start the sign\n                    beginUserInitiatedSignIn();\n                    break;\n    ```", "```java\n    case R.id.sign_out_button:\n                    // sign out.\n                    signOut();\n\n                    // show sign-in button, hide the sign-out button\n                    sign_in_button.setVisibility(View.VISIBLE);\n                    sign_out_button.setVisibility(View.GONE);\n                    llPlay.setVisibility(View.GONE);\n                    awardsLink.setVisibility(View.GONE);\n                    break;\n    ```", "```java\n    case R.id.awardsLink:\n\n                    startActivityForResult(Games.Achievements.getAchievementsIntent(getApiClient()), 0);\n\n                    break;\n    ```", "```java\n    case R.id.llPlay:\n                            startActivityForResult(Games.Leaderboards.getLeaderboardIntent(getApiClient(), getResources().getString(R.string.leaderboard_snake)),0);\n                            break;\n    ```", "```java\n    if(dead){\n     if (isSignedIn()) {\n     Games.Leaderboards.submitScore(getApiClient(),\n     getResources().getString(R.string.leaderboard_snake), \n     score);\n     }\n\n    ```", "```java\n    public class GameActivity extends BaseGameActivity {\n\n        int applesMunchedThisTurn;\n    ```", "```java\n    //Did the player get the apple\n                if(snakeX[0] == appleX && snakeY[0] == appleY){\n                    applesMunchedThisTurn++;\n                    //grow the snake\n                    snakeLength++;\n                    //replace the apple\n                    getApple();\n                    //add to the score\n                    score = score + snakeLength;\n                    soundPool.play(sample1, 1, 1, 0, 0, 1);\n                }\n    ```", "```java\n    if(dead){\n    //start again\n    if (isSignedIn())\n    if(applesMunchedTisTurn > 0){//can't increment zero\n        Games.Achievements.increment(getApiClient(), getResources().getString(R.string.achievement_apple_muncher_1), applesMunchedThisTurn);\n     Games.Achievements.increment(getApiClient(), getResources().getString(R.string.achievement_apple_muncher_2), applesMunchedThisTurn);\n     Games.Achievements.increment(getApiClient(), getResources().getString(R.string.achievement_apple_muncher_3), applesMunchedThisTurn);\n     Games.Achievements.increment(getApiClient(), getResources().getString(R.string.achievement_apple_muncher_4), applesMunchedThisTurn);\n     Games.Achievements.increment(getApiClient(), getResources().getString(R.string.achievement_apple_muncher_5), applesMunchedThisTurn);\n     applesMunchedThisTurn = 0;\n    }//end if(applesMunchedThisTurn > 0)\n\n        Games.Leaderboards.submitScore(getApiClient(), getResources().getString(R.string.leaderboard_snake),score);\n\n    }//end if(isSignedIn)\n                   soundPool.play(sample4, 1, 1, 0, 0, 1);\n                    score = 0;\n                    getSnake();\n\n                }\n\n            }\n    ```", "```java\n    //grow the snake\n    snakeLength++;\n    if (isSignedIn()){\n    if(applesMunchedThisTurn > 0) {//can't increment by zero\n     //Are we long enough for a new SuperSnake achievement?\n     if(snakeLength == 5){\n     Games.Achievements.unlock(getApiClient(), getResources().getString(R.string.achievement_super_snake_1));\n     }\n     if(snakeLength == 10){\n     Games.Achievements.unlock(getApiClient(), getResources().getString(R.string.achievement_super_snake_2));\n     }\n     if(snakeLength == 25){\n     Games.Achievements.unlock(getApiClient(), getResources().getString(R.string.achievement_super_snake_3));\n     }\n     if(snakeLength == 35){\n     Games.Achievements.unlock(getApiClient(), getResources().getString(R.string.achievement_super_snake_4));\n     }\n     if(snakeLength == 50){\n     Games.Achievements.unlock(getApiClient(), getResources().getString(R.string.achievement_super_snake_5));\n     }\n    }\n\n    ```", "```java\n    versionCode 1\n            versionName \"1.0\"\n    Change them to the following:\n    versionCode 2\n            versionName \"1.1\"\n    ```", "```java\n// setContentView(R.layout.activity_main);\n```", "```java\nString a = \"Hello\";\nString b = \" Vinton Cerf\";\nint c = 55;\na = a + b\nc = c + c + 10;\na = a + c;\nc = c + a;\n```", "```java\nint x = 10;\nint y = 9;\nboolean isTrueOrFalse = false;\nisTrueOrFalse = (((x <=y)||(x == 10))&&((!isTrueOrFalse) || (isTrueOrFalse)));\n```", "```java\n((x <=y)||(x == 10))\n```", "```java\n((!isTrueOrFalse) || (isTrueOrFalse)))\n```", "```java\nvoid doSomething(){\n  return 4;\n}\n```", "```java\nint x=19;\ndo{\n  x=11;\n  x++;\n}while(x<20)\n```", "```java\nString[][] countriesCitiesAndPresidents;\n//now allocate like this\ncountriesAndCities = new String[5][3];\n//and initialize like this\ncountriesCitiesAndPresidents [0][0] = \"United Kingdom\";\ncountriesCitiesAndPresidents [0][1] = \"London\";\ncountriesCitiesAndPresidents [0][3] = \"Cameron\";//at time of writing\n```", "```java\n@Override\n    protected void onPause() {\n        editor.putString(stringName, currentString);\n        editor.commit();\n    }\n```", "```java\nmyHandler.sendEmptyMessageDelayed(0, 450);\n//This halves the players thinking time\n```", "```java\nint pixelsPerFrameX;\nint pixelsPerFrameY;\n```", "```java\npixelsPerFrameX = screenWidth/50;\npixelsPerFrameY = screenHeight/50;\n```", "```java\n//moving in adjust our x any positions\n            if (ballIsMovingDown) {\n                ballPosition.y += pixelsPerFrameX;\n            }\n\n            //etc...\n```", "```java\ncanvas.drawColor(Color.BLACK);//the background\n```", "```java\ncanvas.drawColor(Color.argb(255,186,230,177));//the background\n```", "```java\nMatrix matrix90 = new Matrix();\nmatrix90.postRotate(90);\n```", "```java\nrotatedBitmap = Bitmap.createBitmap(regularBitmap , 0, 0, regularBitmap .getWidth(), regularBitmap .getHeight(), matrix90, true);\n```"]