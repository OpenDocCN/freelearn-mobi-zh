["```java\n    public float horizRotateSpeed = 7f;\n    public float vertRotateSpeed = 3f;\n\n    public float horizMax = 60f;\n    public float vertMax = 45f;\n    ```", "```java\n    public void Update() {\n      Vector3 rotation = transform.eulerAngles;\n\n      if(rotation.y > 180f) rotation.y -= 360f;\n      if(rotation.x > 180f) rotation.x -= 360f;\n    ```", "```java\n    rotation.y += Input.acceleration.x * horizRotateSpeed;\n    rotation.x += -Input.acceleration.z * vertRotateSpeed;\n    ```", "```java\n    rotation.y = Mathf.Clamp(rotation.y, -horizMax, horizMax);\n    rotation.x = Mathf.Clamp(rotation.x, -vertMax, vertMax);\n    ```", "```java\n      transform.eulerAngles = rotation;\n    }\n    ```", "```java\n    public float speed = 10f;\n    public TiltSteering tilt;\n\n    private static PlayerShip use;\n    ```", "```java\n    public void Awake() {\n      use = this;\n    }\n    ```", "```java\n    public static Quaternion GetRotation() {\n      if(use == null) return Quaternion.identity;\n\n      return use.transform.rotation;\n    }\n    ```", "```java\n    public static void Rotate(Transform other) {\n      if(use == null) return;\n    ```", "```java\n    Vector3 euler = use.transform.eulerAngles;\n    if(euler.x > 180f) euler.x -= 360f;\n    if(euler.y > 180f) euler.y -= 360f;\n    euler.Scale(new Vector3(use.tilt.vertRotateSpeed, use.tilt.horizRotateSpeed, 0));\n    euler *= Time.deltaTime;\n    ```", "```java\n    Quaternion mirror = Quaternion.Euler(-euler);\n    ```", "```java\n    other.position = mirror * other.position;\n    other.position -= playerRotation * Vector3.forward * use.speed * Time.deltaTime;\n    other.rotation *= mirror;\n    ```", "```java\n    public float minSpeed = 5f;\n    public float maxSpeed = 10f;\n\n    private float speed = 1f;\n    private Vector3 direction = Vector3.forward;\n    ```", "```java\n    public void Awake() {\n      direction = Random.onUnitSphere;\n      speed = Random.Range(minSpeed, maxSpeed);\n    }\n    ```", "```java\n    public void LateUpdate() {\n      Quaternion playerRotation = PlayerShip.GetRotation();\n    ```", "```java\n    PlayerShip.Rotate(transform);\n    ```", "```java\n    direction = playerRotation * direction;\n    transform.position += direction * speed * Time.deltaTime;\n    ```", "```java\n      if(transform.position.sqrMagnitude > 1e5) Destroy(gameObject);\n    }\n    ```", "```java\n    public void OnTriggerEnter(Collider other) {\n      Destroy(gameObject);\n    }\n    ```", "```java\n    public float moveSpeed = 8f;\n    public float turnSpeed = 0.5f;\n    ```", "```java\n    public float fireRate = 1.5f;\n    public float fireRange = 60f;\n    private float fireTime = 0;\n    ```", "```java\n    public GameObject bullet;\n    public Transform muzzlePoint;\n    ```", "```java\n    public void Update() {\n      fireTime += Time.deltaTime;\n      if(fireTime < fireRate) return;\n\n      if(transform.position.sqrMagnitude > fireRange * fireRange) return;\n\n      if(Vector3.Angle(transform.forward, -transform.position) > 10) return;\n\n      Instantiate(bullet, muzzlePoint.position, muzzlePoint.rotation);\n      fireTime = 0;\n    }\n    ```", "```java\n    public void LateUpdate() {\n      PlayerShip.Rotate(transform);\n    ```", "```java\n    float step = turnSpeed * Time.deltaTime;\n    Quaternion toPlayer = Quaternion.LookRotation(-transform.position);\n    transform.rotation = Quaternion.Slerp(transform.rotation, toPlayer, step);\n    transform.position += transform.forward * moveSpeed * Time.deltaTime;\n    ```", "```java\n      if(transform.position.sqrMagnitude > 1e5) Destroy(gameObject);\n    }\n    ```", "```java\n    public float speed = 20f;\n    ```", "```java\n    public void LateUpdate() {\n      PlayerShip.Rotate(transform);\n\n      transform.position += transform.forward * speed * Time.deltaTime;\n      if(transform.position.sqrMagnitude > 1e5) Destroy(gameObject);\n    }\n    ```", "```java\n    public void OnTriggerEnter(Collider other) {\n      Destroy(gameObject);\n    }\n    ```", "```java\n    public LayerMask touchMask = -1;\n    ```", "```java\n    public void Update() {\n      for(int i=0;i<Input.touchCount;i++) {\n    ```", "```java\n    if(Input.GetTouch(i).phase == TouchPhase.Began) {\n    ```", "```java\n    Ray ray = Camera.main.ScreenPointToRay(Input.GetTouch(i).position);\n    RaycastHit hit;\n    ```", "```java\n          if(Physics.Raycast(ray, out hit, Mathf.Infinity, touchMask)) {\n            Destroy(hit.transform.gameObject);\n          }\n        }\n      }\n    }\n    ```", "```java\n    public float minRange = 200f;\n    public float maxRange = 300f;\n    ```", "```java\n    public float frequency = 0.3f;\n    private float spawnTime = 0;\n    ```", "```java\n    public GameObject[] spawnList = new GameObject[0];\n    ```", "```java\n    public void Update() {\n      if(spawnList.Length <= 0) return;\n    ```", "```java\n    spawnTime += Time.deltaTime;\n    if(spawnTime < frequency) return;\n    ```", "```java\n    Vector3 direction = Random.onUnitSphere;\n    float distance = Random.Range(minRange, maxRange);\n    Vector3 position = direction * distance;\n    ```", "```java\n    int index = Random.Range(0, spawnList.Length);\n    if(spawnList[index] == null) return;\n    ```", "```java\n    Instantiate(spawnList[index], position, Random.rotation);\n    ```", "```java\n      spawnTime -= frequency;\n    }\n    ```"]