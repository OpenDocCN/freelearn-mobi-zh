["```swift\n    this.btnCall.TouchUpInside += (s, e) => {\n      NSUrlurl = new NSUrl(\"tel:+123456789012\");\n      if (UIApplication.SharedApplication.CanOpenUrl(url))\n      {\n        UIApplication.SharedApplication.OpenUrl(url);\n      }  else\n      {\n        Console.WriteLine(\"Cannot open url: {0}\", url.AbsoluteString);\n      }\n    } ;\n    ```", "```swift\nUIApplication.SharedApplication.OpenUrl(url);\n```", "```swift\nif (UIApplication.SharedApplication.CanOpenUrl(url))\n```", "```swift\nCTCallCenter callCenter = new CTCallCenter();\ncallCenter.CallEventHandler = delegate(CTCall call) {\n  Console.WriteLine(call.CallState);\n} ;\n```", "```swift\nNSUrl url = new NSUrl(\"http://www.packtpub.com\");\n```", "```swift\n    this.btnSendText.TouchUpInside += (s, e) => {\n      NSUrl textUrl = new NSUrl(\"sms:+123456789\");\n      if (UIApplication.SharedApplication.CanOpenUrl(textUrl))\n      {\n        UIApplication.SharedApplication.OpenUrl(textUrl);\n      }  else\n      {\n        Console.WriteLine(\"Cannot send text message!\");\n      }\n    } ;\n    this.btnSendEmail.TouchUpInside += (s, e) => {\n      NSUrl emailUrl = new NSUrl(\"mailto:mail@example.com\");\n      if (UIApplication.SharedApplication.CanOpenUrl(emailUrl))\n      {\n        UIApplication.SharedApplication.OpenUrl(emailUrl);\n      }  else\n      {\n        Console.WriteLine(\"Cannot send email message!\");\n      }\n    } ;\n    ```", "```swift\nUIApplication.SharedApplication.OpenUrl(new NSUrl(\"sms:+123456789012\"));\n```", "```swift\nUIApplication.SharedApplication.OpenUrl(new NSUrl(\"mailto:mail@example.com\"));\n```", "```swift\nUIApplication.SharedApplication.OpenUrl(\"mailto:recipient@example.com?subject=Email%20with%20Xamarin.iOS!&body=This%20is%20the%20message%20body!\");\n```", "```swift\n    using MonoTouch.MessageUI;\n    ```", "```swift\n    private MFMessageComposeViewController messageController;\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      this.btnSendMessage.TouchUpInside += async (s, e) => {\n     if (MFMessageComposeViewController.CanSendText)\n        {\n          this.messageController = new MFMessageComposeViewController();\n          this.messageController.Recipients = new string[] { \"+123456789012\" };\n          this.messageController.Body = \"Text from Xamarin.iOS\";\n          this.messageController.Finished += MessageController_Finished;\n          await this.PresentViewControllerAsync(this.messageController, true);\n        }  else\n        {\n          Console.WriteLine(\"Cannot send text message!\");\n        }\n      } ;\n    }\n    ```", "```swift\n    private async void MessageController_Finished(object sender, MFMessageComposeResultEventArgs e) {\n      switch (e.Result) {\n      case MessageComposeResult.Sent:\n        Console.WriteLine(\"Message sent!\");\n        break;\n      case MessageComposeResult.Cancelled:\n        Console.WriteLine(\"Message cancelled!\");\n        break;\n      default:\n        Console.WriteLine(\"Message failed!\");\n        break;\n      }\n      e.Controller.Finished -= MessageController_Finished;\n      await e.Controller.DismissViewControllerAsync(true);\n    }\n    ```", "```swift\nthis.messageController.Finished += MessageController_Finished;\n```", "```swift\ne.Controller.Finished -= MessageController_Finished;\nawait e.controller.DismissViewControllerAsync(true);\n```", "```swift\nthis.messageController.Recipients = new string[] { \"+123456789012\" };\nthis.messageController.Body = \"Text from Xamarin.iOS\";\n```", "```swift\nthis.messageController.AddAttachment(new NSUrl(\"path/to/file\"), \"A wonderful image\");\n```", "```swift\n    this.btnSendEmail.TouchUpInside += async (s, e) => {\n      if (MFMailComposeViewController.CanSendMail)\n      {\n      this.mailController = new MFMailComposeViewController();\n      this.mailController.SetToRecipients(new string[] { \"recipient@example.com\" });\n      this.mailController.SetSubject(\"Email from Xamarin.iOS!\");\n      this.mailController.SetMessageBody(\"This is the message body!\", false);\n      this.mailController.Finished += this.MailController_Finished;\n        await this.PresentViewControllerAsync(this.mailController, true);\n      }  else\n      {\n        Console.WriteLine(\"Cannot send email!\");\n      }\n    } ;\n    ```", "```swift\n    private async void MailController_Finished (object sender, MFComposeResultEventArgs e)\n    {\n      switch (e.Result)\n      {\n      case MFMailComposeResult.Sent:\n        Console.WriteLine(\"Email sent!\");\n      break;\n      case MFMailComposeResult.Saved:\n        Console.WriteLine(\"Email saved!\");\n      break;\n      case MFMailComposeResult.Cancelled:\n        Console.WriteLine(\"Email sending cancelled!\");\n      break;\n      case MFMailComposeResult.Failed:\n        Console.WriteLine(\"Email sending failed!\");\n        if (null != e.Error)\n        {\n          Console.WriteLine(\"Error message: {0}\", e.Error.LocalizedDescription);\n        }\n      break;\n      }\n      e.Controller.Finished -= MailController_Finished;\n      await e.Controller.DismissViewControllerAsync(true);\n    }\n    ```", "```swift\nif (MFMailComposeViewController.CanSendMail)\n```", "```swift\nthis.mailController.SetToRecipients(new string[] { \"recipient@example.com\" });\nthis.mailController.SetSubject(\"Email from MonoTouch!\");\nthis.mailController.SetMessageBody(\"This is the message body!\", false);\n```", "```swift\nthis.mailController.AddAttachmentData(UIImage.FromFile(\"image.jpg\").AsJPEG(), \"image/jpg\", \"image.jpg\");\n```", "```swift\n    using MonoTouch.AddressBook;\n    ```", "```swift\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      this.btnReadContacts.TouchUpInside += (s, e) => {\n      ABAuthorizationStatus abStatus = ABAddressBook.GetAuthorizationStatus();\n      NSError error;\n      ABAddressBook addressBook = ABAddressBook.Create(out error);\n      if (abStatus == ABAuthorizationStatus.NotDetermined)\n      {\n        addressBook.RequestAccess((g, err) => {\n          if (!g)\n          {\n            Console.WriteLine(\"User denied address book access!\");\n          } else\n          {\n            this.InvokeOnMainThread(() =>this.ReadContacts(addressBook));\n          }\n        });\n      } else if (abStatus == ABAuthorizationStatus.Authorized)\n      {\n        this.ReadContacts(addressBook);\n      } else\n      {\n        Console.WriteLine(\"App does not have access to the address book!\");\n      }\n      };\n    }\n    ```", "```swift\n    private void ReadContacts(ABAddressBook addressBook)\n    {\n      ABPerson[] contacts = addressBook.GetPeople();\n      foreach (ABPerson eachPerson in contacts)\n      {\n        Console.WriteLine(\"{0} {1}\", eachPerson.LastName, eachPerson.FirstName);\n      }\n    }\n    ```", "```swift\nABAuthorizationStatus abStatus = ABAddressBook.GetAuthorizationStatus();\nNSError error;\nABAddressBook addressBook = ABAddressBook.Create(out error);\n```", "```swift\naddressBook.RequestAccess((g, err) => {\n      if (!g)\n      {\n        Console.WriteLine(\"User denied address book access!\");\n      } else\n      {\n this.InvokeOnMainThread(() =>this.ReadContacts(addressBook));\n      }\n    });\n```", "```swift\nABPerson[] contacts = addressBook.GetPeople();\nforeach (ABPerson eachPerson in contacts)\n{\n  Console.WriteLine(\"{0} {1}\", eachPerson.LastName, eachPerson.FirstName);\n}\n```", "```swift\nABMultiValue<string> phones = eachPerson.GetPhones();\nConsole.WriteLine(phones[0].Value);\n```", "```swift\nABMutableMultiValue<string> newPhones = phones.ToMutableMultiValue();\n```", "```swift\nnewPhones.Add(\"+120987654321\", ABPersonPhoneLabel.iPhone);\neachPerson.SetPhones(newPhones);\naddressBook.Save();\n```", "```swift\n    window.RootViewController = new UINavigationController(viewController);\n    ```", "```swift\n    using MonoTouch.AddressBook;\n    using MonoTouch.AddressBookUI;\n    ```", "```swift\n    this.btnDisplayContact.TouchUpInside += (sender, e) => {\n      ABAuthorizationStatus status = ABAddressBook.GetAuthorizationStatus();\n      NSError error;\n      ABAddressBook addressBook = ABAddressBook.Create(out error);\n      if (status == ABAuthorizationStatus.NotDetermined)\n      {\n        addressBook.RequestAccess((g, err) => {\n          if (g)\n          {\n            this.InvokeOnMainThread(() =>this.DisplayContactCard(addressBook));\n          } else\n          {\n            Console.WriteLine(\"User denied access to the address book!\");\n          }\n        });\n      } else if (status == ABAuthorizationStatus.Authorized)\n      {\n        this.DisplayContactCard(addressBook);\n      } else\n      {\n        Console.WriteLine(\"App does not have access to the address book!\");\n      }\n    };\n    ```", "```swift\n    private void DisplayContactCard(ABAddressBookaddressBook)\n    {\n      ABPerson[] contacts = addressBook.GetPeople();\n      ABPersonViewController personController = new ABPersonViewController();\n      personController.DisplayedPerson = contacts[0];\n      this.NavigationController.PushViewController(personController, true);\n    }\n    ```", "```swift\nABPersonViewController personController = new ABPersonViewController();\npersonController.DisplayedPerson = contacts[0];\n```", "```swift\nthis.NavigationController.PushViewController(personController, true);\n```", "```swift\npersonController.AllowsEditing = true;\n```", "```swift\n    this.btnDisplayEvents.TouchUpInside += async (sender, e) => {\n      EKAuthorizationStatus status = EKEventStore.GetAuthorizationStatus(EKEntityType.Event);\n      EKEventStore evStore = new EKEventStore();\n      if (status == EKAuthorizationStatus.NotDetermined)\n      {\n        if (await evStore.RequestAccessAsync(EKEntityType.Event))\n        {\n          this.DisplayEvents(evStore);\n        } else\n        {\n          Console.WriteLine(\"User denied access to the calendar!\");\n        }\n      } else if (status == EKAuthorizationStatus.Authorized)\n      {\n        this.DisplayEvents(evStore);\n      } else\n      {\n        Console.WriteLine(\"App does not have access to the calendar!\");\n      }\n    };\n    ```", "```swift\n    private void DisplayEvents (EKEventStoreevStore)\n    {\n      NSPredicate evPredicate = \n        evStore.PredicateForEvents(DateTime.Now, DateTime.Now.AddDays(30), evStore.GetCalendars(EKEntityType.Event));\n      evStore.EnumerateEvents(evPredicate, delegate(EKEventcalEvent, ref bool stop) {\n        if (null != calEvent) {\n          stop = false;\n          Console.WriteLine(\"Event title: {0}\\nEvent start date: {1}\", calEvent.Title, calEvent.StartDate);\n        }\n      });\n    }\n    ```", "```swift\nEKAuthorizationStatus status = EKEventStore.GetAuthorizationStatus(EKEntityType.Event);\n  EKEventStore evStore = new EKEventStore();\n```", "```swift\nif (await evStore.RequestAccessAsync(EKEntityType.Event))\n```", "```swift\nNSPredicate evPredicate = \n    evStore.PredicateForEvents(DateTime.Now, DateTime.Now.AddDays(30), evStore.GetCalendars(EKEntityType.Event));\n```", "```swift\nevStore.EnumerateEvents(evPredicate, delegate(EKEventcalEvent, ref bool stop) {\n//...\n```", "```swift\nEKEvent newEvent = EKEvent.FromStore(evStore);\nnewEvent.StartDate = DateTime.Now.AddDays(1);\nnewEvent.EndDate = DateTime.Now.AddDays(1.1);\nnewEvent.Title = \"Xamarin event!\";\nnewEvent.Calendar = evStore.DefaultCalendarForNewEvents;\nNSError error = null;\nevStore.SaveEvent(newEvent, EKSpan.ThisEvent, out error);\n```"]