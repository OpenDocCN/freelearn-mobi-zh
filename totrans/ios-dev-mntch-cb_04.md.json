["```swift\npublic override void ViewDidLoad(){\nstring filePath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal), \"MyFile.txt\");\nusing (StreamWriter sw = new StreamWriter (filePath)){\nsw.WriteLine (\"Some text in file!\");\n}\nthis.btnShow.TouchUpInside += delegate {\nusing (StreamReader sr = new StreamReader (filePath)){\nthis.labelMessage.Text = sr.ReadToEnd ();\n}\n}\n};\n\n```", "```swift\nstring filePath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal), \"MyFile.txt\");\n\n```", "```swift\nusing (StreamWriter sw = new StreamWriter (filePath)){\nsw.WriteLine (\"Some text in file!\");\n}\n\n```", "```swift\nusing (StreamReader sr = new StreamReader (filePath)){\nthis.labelMessage.Text = sr.ReadToEnd ();\n}\n\n```", "```swift\n    using Mono.Data.Sqlite;\n\n    ```", "```swift\n    private void CreateSQLiteDatabase (string databaseFile){\n    try{\n    if (!File.Exists (databaseFile)){\n    SqliteConnection.CreateFile (databaseFile);\n    using (SqliteConnection sqlCon = new SqliteConnection (String.Format (\"Data Source = {0};\", databaseFile))){\n    sqlCon.Open ();\n    using (SqliteCommand sqlCom = new SqliteCommand (sqlCon)){\n    sqlCom.CommandText = \"CREATE TABLE Customers (ID INTEGER PRIMARY KEY, FirstName VARCHAR(20), LastName VARCHAR(20))\";\n    sqlCom.ExecuteNonQuery ();\n    }\n    sqlCon.Close ();\n    }\n    this.lblMessage.Text = \"Database created!\";\n    } else {\n    this.lblMessage.Text = \"Database already exists!\";\n    }\n    } catch (Exception ex) {\n    this.lblMessage.Text = String.Format (\"Sqlite error: {0}\", ex.Message);\n    }\n    }\n\n    ```", "```swift\n    string sqlitePath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal), \"MyDB.db3\");\n    this.btnCreate.TouchUpInside += delegate {\n    this.CreateSQLiteDatabase (sqlitePath);\n    };\n\n    ```", "```swift\n    using Mono.Data.Sqlite;\n\n    ```", "```swift\n    if (!File.Exists (databaseFile))\n\n    ```", "```swift\n    SqliteConnection.CreateFile (databaseFile);\n\n    ```", "```swift\n    using (SqliteConnection sqlCon = new SqliteConnection (String.Format (\"Data Source = {0};\", databaseFile)))\n    sqlCon.Open();\n\n    ```", "```swift\n    sqlCom.CommandText = \"CREATE TABLE Customers (ID INTEGER PRIMARY KEY, FirstName VARCHAR(20), LastName VARCHAR(20))\";\n    sqlCom.ExecuteNonQuery ();\n\n    ```", "```swift\n    using (SqliteCommand sqlCom = new SqliteCommand (sqlCon)){\n    // INSERT statement\n    sqlCom.CommandText = \"INSERT INTO Customers (FirstName, LastName) VALUES (@firstName, @lastName)\";\n\n    sqlCom.Parameters.Add (new SqliteParameter (\"@firstName\", \"John\"));\n    sqlCom.Parameters.Add (new SqliteParameter (\"@lastName\", \"Smith\"));\n    //UPDATE statement\n    //sqlCom.CommandText = \"UPDATE Customers SET FirstName = 'James' WHERE LastName = @lastName\";\n\n    //sqlCom.Parameters.Add (new SqliteParameter (\"@lastName\", \"Smith\"));\n    sqlCom.ExecuteNonQuery ();\n    }\n\n    ```", "```swift\nConsole.WriteLine(sqlCom.ExecuteNonQuery());\n\n```", "```swift\nif (!File.Exists (databaseFile)) {\nthis.lblMessage.Text = \"Database file does not exist. Tap the appropriate button to create it.\";\nreturn;\n}\n\n```", "```swift\n    using (SqliteCommand sqlCom = new SqliteCommand (sqlCon)){\n    sqlCom.CommandText = \"SELECT * FROM Customers WHERE LastName = @lastName\";\n    sqlCom.Parameters.Add (new SqliteParameter (\"@lastName\", \"Smith\"));\n    using (SqliteDataReader dbReader = sqlCom.ExecuteReader ()){\n    if (dbReader.HasRows){\n    while (dbReader.Read ()){\n    this.lblMessage.Text += String.Format (\"ID: {0}\\n\", Convert.ToString (dbReader[\"ID\"]));\n    this.lblMessage.Text += String.Format (\"First name: {0}\\n\", Convert.ToString (dbReader[\"FirstName\"]));\n    this.lblMessage.Text += String.Format (\"Last name: {0}\\n\", Convert.ToString (dbReader[\"LastName\"]));\n    }\n    }\n    }\n    }\n\n    ```", "```swift\nsqlCom.CommandText = \"SELECT * FROM Customers WHERE LastName = @lastName\";\n\n```", "```swift\nusing (SqliteDataReader dbReader = sqlCom.ExecuteReader ())\n\n```", "```swift\nif (dbReader.HasRows)\n\n```", "```swift\nwhile (dbReader.Read ())\n\n```", "```swift\nthis.lblMessage.Text += String.Format (\"ID: {0}\\n\", Convert.ToString (dbReader[\"ID\"]));\n//...\n\n```", "```swift\n    private string CopyDatabase (){\n    string docPath = Environment.GetFolderPath (Environment.SpecialFolder.Personal);\n    string databaseFile = \"CustomersDB.db3\";\n    string databasePath = Path.Combine (docPath, databaseFile);\n    if (!File.Exists (databasePath)){\n    File.Copy (databaseFile, databasePath);\n    }\n    return databasePath;\n    }\n    private void QueryData (object sender, EventArgs e)\n    { //... }\n\n    ```", "```swift\n    private string database;\n\n    ```", "```swift\n    this.database = this.CopyDatabase ();\n    this.buttonQuery.TouchUpInside += this.QueryData;\n\n    ```", "```swift\nif (!File.Exists (databasePath)){\nFile.Copy (databaseFile, databasePath);\n}\n\n```", "```swift\n    using System.IO;\n    using System.Runtime.Serialization.Formatters.Binary;\n\n    ```", "```swift\n    private void Serialize (){\n\n    CustomerData custData = new CustomerData ();\n    custData.ID = 1;\n    custData.FirstName = \"John\";custData.LastName = \"Smith\";\n    using (MemoryStream ms = new MemoryStream ()){\n    BinaryFormatter bf = new BinaryFormatter ();\n    bf.Serialize (ms, custData);\n    ms.Seek (0, SeekOrigin.Begin);\n    this.objBuffer = new byte[ms.Length];\n    ms.Read (this.objBuffer, 0, this.objBuffer.Length);\n    }\n    this.labelOutput.Text = \"Customer data serialized.\\n\";\n    }\n    private void DeserializeAndDisplay (){\n    if (null != this.objBuffer){\n    CustomerData custData = null;\n    using (MemoryStream ms = new MemoryStream (this.objBuffer)){\n    ms.Seek (0, SeekOrigin.Begin);\n    BinaryFormatter bf = new BinaryFormatter ();\n    custData = (CustomerData)bf.Deserialize (ms);\n    }\n    this.labelOutput.Text += String.Format (\"ID: {0}\\n \\tFirst name: {1}\\n\\tLast name: {2}\", custData.ID, custData.FirstName, custData.LastName);\n    } else {\n    this.labelOutput.Text = \"Buffer is null!\";\n    }\n    }\n\n    ```", "```swift\n    using (MemoryStream ms = new MemoryStream ())\n\n    ```", "```swift\n    BinaryFormatter bf = new BinaryFormatter ();\n    bf.Serialize (ms, custData);\n\n    ```", "```swift\n    ms.Seek (0, SeekOrigin.Begin);\n    this.objBuffer = new byte[ms.Length];\n    ms.Read (this.objBuffer, 0, this.objBuffer.Length);\n\n    ```", "```swift\n    ms.Seek (0, SeekOrigin.Begin);\n    BinaryFormatter bf = new BinaryFormatter ();\n    custData = (CustomerData)bf.Deserialize (ms);\n\n    ```", "```swift\n[Preserve()]\n[Serializable()]\npublic class CustomerData\n\n```", "```swift\n    using System.Xml.Serialization;\n    using System.Xml;\n    using System.Text;\n\n    ```", "```swift\n    private void CreateXML (){\n    CustomerData custData = new CustomerData ();\n    custData.ID = 1;\n    custData.FirstName = \"John\";\n    custData.LastName = \"Smith\";\n    this.sb = new StringBuilder ();\n    XmlSerializer xmlSer = new XmlSerializer (typeof(CustomerData));\n    xmlSer.Serialize (XmlWriter.Create (sb), custData);\n    this.labelOutput.Text = sb.ToString ();\n    }\n\n    ```", "```swift\nthis.sb = new StringBuilder ();\nXmlSerializer xmlSer = new XmlSerializer (typeof(CustomerData));\n\n```", "```swift\nxmlSer.Serialize (XmlWriter.Create (sb), custData);\n\n```", "```swift\ncustData = (CustomerData)xmlSer.Deserialize (new StringReader (sb.ToString ()));\n\n```", "```swift\n    using System.Linq.Xml;\n\n    ```", "```swift\n    private void ReadXML (){\n    if (null != sb){\n    XDocument xDoc = XDocument.Parse (this.sb.ToString ());\n    var query = from s in xDoc.Descendants()\n    select new CustomerData() {\n    ID = Convert.ToInt32(s.Element(\"ID\").Value),\n    FirstName = s.Element(\"FirstName\").Value,\n    LastName = s.Element(\"LastName\").Value\n    };\n    CustomerData custData = query.FirstOrDefault();\n    if (null != custData){\n    this.labelOutput.Text = String.Format(\"ID: {0}\\n\\t FirstName: {1}\\n\\tLastName: {2}\", custData.ID, custData.FirstName, custData.LastName);\n    }\n    }\n    }\n\n    ```", "```swift\n    XDocument xDoc = XDocument.Parse (this.sb.ToString ());\n\n    ```", "```swift\n    var query = from s in xDoc.Descendants()\n    select new CustomerData() {\n    ID = Convert.ToInt32(s.Element(\"ID\").Value),\n    FirstName = s.Element(\"FirstName\").Value,\n    LastName = s.Element(\"LastName\").Value\n    };\n\n    ```", "```swift\n    CustomerData custData = query.FirstOrDefault();\n\n    ```", "```swift\nvar query = from s in xDoc.Descendants() where s.Element(\"FirstName\").Value == \"John\" select new CustomerData() {\nID = Convert.ToInt32(s.Element(\"ID\").Value),\nFirstName = s.Element(\"FirstName\").Value,\nLastName = s.Element(\"LastName\").Value\n};\n\n```"]