- en: Chapter 10. Getting Ready for the App Store
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。为App Store做准备
- en: '*"There are two kinds of people, those who finish what they start and so on."*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*"有两种人，那些完成他们开始的事情的人，等等。"*'
- en: '*Robert Byrne*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*罗伯特·拜恩*'
- en: We have come a long way in learning RubyMotion to create iOS applications. Hopefully,
    we are now proficient in developing applications with RubyMotion. So far, we have
    gone from creating a simple iOS application to including the amazing device capabilities
    of iPhone and iPad with our RubyMotion project and then creating games. In the
    previous chapter, we learned how to write test cases and test our application
    automatically. We have now covered all the parts of a software life cycle, except
    our app is not in production yet. Apple has a specific way to share your finished
    app with the world. In this chapter, we will cover setting up your Mac to create
    your application bundle, to share it, and to distribute your application over
    the Apple App Store.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在学习和使用RubyMotion创建iOS应用程序方面已经走了很长的路。希望我们现在已经熟练地使用RubyMotion开发应用程序。到目前为止，我们已经从创建一个简单的iOS应用程序发展到在我们的RubyMotion项目中包含iPhone和iPad的惊人设备功能，然后创建游戏。在前一章中，我们学习了如何编写测试用例并自动测试我们的应用程序。我们现在已经涵盖了软件生命周期的所有部分，除了我们的应用程序尚未投入生产。Apple有特定的方式将您的完成的应用程序与世界分享。在本章中，我们将介绍如何设置您的Mac以创建您的应用程序包，分享它，并通过Apple
    App Store分发您的应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Generating certificates
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成证书
- en: Provisioning portals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件门户
- en: Setting up a RubyMotion project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置RubyMotion项目
- en: Testing on a device
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设备上测试
- en: iTunes Connect
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iTunes Connect
- en: Bundles for submission
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交包
- en: Before you begin setting up your Mac for app distribution, you are required
    to enroll into the Apple Developer Program for iOS development ([https://developer.apple.com](https://developer.apple.com)).
    It is compulsory to enroll into this program, otherwise you will not be able to
    submit your application build to the App Store. Apple reviews each and every application
    before it is released to the App Store. You should also have a look at the Apple
    review guidelines, available at the iOS Dev Center, once you have your membership.
    These guidelines are important to understand for the smooth approval of your app;
    we will cover most of them as we proceed, but do go through them yourself too.
    These guidelines also contain **Human Interface Guidelines** (**HIG**); many consider
    these guidelines as Apple's way of having a controlled environment for developers,
    but the prime purpose of these instructions is to create applications of a set
    standard and make them a class apart from other smartphones. So far, Apple has
    been successful in maintaining their good standard.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始设置Mac以进行应用分发之前，您需要注册到iOS开发者的Apple开发者计划([https://developer.apple.com](https://developer.apple.com))。注册此计划是强制性的，否则您将无法将您的应用程序构建提交到App
    Store。在应用程序发布到App Store之前，Apple会审查每一个应用程序。一旦您拥有会员资格，您还应该查看iOS开发者中心的Apple审查指南。这些指南对于您应用程序顺利批准非常重要；我们将随着内容的推进覆盖大多数内容，但您也应该自己阅读它们。这些指南还包含**人类界面指南**（**HIG**）；许多人认为这些指南是Apple为开发者提供一个受控环境的方式，但这些说明的主要目的是创建符合标准的应用程序，并使它们区别于其他智能手机。到目前为止，Apple在保持其高标准方面一直很成功。
- en: You should also set up your profile for your apps at [https://itunesconnect.apple.com/](https://itunesconnect.apple.com/);
    we will discuss more about this later in the chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该在[https://itunesconnect.apple.com/](https://itunesconnect.apple.com/)上设置您的应用个人资料；我们将在本章后面更详细地讨论这一点。
- en: Generating certificates
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成证书
- en: To submit your application to the App Store, you require a developer certificate,
    a distribution certificate, a developer provisioning profile, and a distribution
    provisioning profile. In this section, we will bind your Mac with your iOS provisioning
    portal by generating certificates.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您的应用程序提交到App Store，您需要一个开发者证书、一个分发证书、一个开发者配置文件和一个分发配置文件。在本节中，我们将通过生成证书将您的Mac与iOS配置文件门户绑定。
- en: 'Once you log in to [https://developer.apple.com](https://developer.apple.com),
    choose the iOS provisioning portal. Select the **Certificates** tab from the options
    provided in the left-hand side column as shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您登录到[https://developer.apple.com](https://developer.apple.com)，请选择iOS配置文件门户。从左侧列提供的选项中选择**证书**标签，如图下截图所示：
- en: '![Generating certificates](img/5220OT_10_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![生成证书](img/5220OT_10_01.jpg)'
- en: If you are a first-time user, you need to first install the **Worldwide Developer
    Relations** (**WWDR**) intermediate certificate; this certificate binds your developer
    and distribution certificate to the Apple Certificate Authority. Download this
    and it will be installed in your keychain.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是首次使用，您需要首先安装**全球开发者关系**（**WWDR**）中间证书；此证书将您的开发者和分发证书绑定到Apple证书颁发机构。下载它，它将被安装到您的钥匙串中。
- en: Next, let's create our developer certificate. To generate this, let's go back
    to our keychain application and navigate to **KeyChain Access Menu** | **Certificate
    Assistant** | **Request a certificate from certificate authority**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建我们的开发者证书。为了生成这个证书，让我们回到我们的钥匙串应用，并导航到**钥匙串访问菜单** | **证书助手** | **从证书颁发机构请求证书**。
- en: '![Generating certificates](img/5220OT_10_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Generating certificates](img/5220OT_10_02.jpg)'
- en: Here, you have to use the same e-mail address with which you had registered
    for your developer account. We must add a unique name for this certificate and
    save it to the disk.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您必须使用您注册开发者账户时使用的相同电子邮件地址。我们必须为这个证书添加一个独特的名称，并将其保存到磁盘上。
- en: Now, let's go back to our developer account in our browser. Inside the **Development**
    tab, we have a **Request Certificate** option that shows all of the instructions
    that we have already completed and that are ready for our certificate.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到浏览器中的我们的开发者账户。在**开发**标签页中，我们有一个**请求证书**选项，它显示了我们已经完成并准备好申请证书的所有说明。
- en: Once uploaded, you will see **Pending Issuance**. Not a problem; refresh your
    browser, and your certificate will be uploaded. Download this and run; it will
    get stored in your keychain. Similarly, follow the same procedure for the distribution
    certificate.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上传，您将看到**待处理发行**。没问题；刷新您的浏览器，您的证书将被上传。下载它并运行；它将被存储在您的钥匙串中。同样，按照相同的程序为分发证书执行操作。
- en: 'Inside your keychain, in the certificate section you will see all of the installed
    certificates. Every certificate is a combination of two things: a certificate
    and a private key. It''s good practice to make a copy of it and keep it in a safe
    place. In this way, if you change your machine, you will easily be able to download
    the certificate; but it will not work without the private key.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的钥匙串中，在证书部分，您将看到所有已安装的证书。每个证书都是两件事的组合：一个证书和一个私钥。将其复制并保存在安全的地方是一个好习惯。这样，如果您更换机器，您将能够轻松地下载证书；但没有私钥，它将无法工作。
- en: Do it yourself
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自己动手做
- en: Just like the developer profile for developing and testing in a development
    environment, we have a distribution profile that is used for distributing our
    application on the App Store.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 就像用于在开发环境中开发和测试的开发者配置文件一样，我们还有一个用于在App Store上分发应用的分发配置文件。
- en: 'Now that you know how to generate, upload, and install the Apple certificate
    on your Mac machine for your developer profile, why not try it yourself and distribute
    the profile. All you have to do is just follow these steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道了如何在Mac机器上为您的开发者配置文件生成、上传和安装Apple证书，为什么不自己尝试并分发配置文件呢？您只需遵循以下步骤：
- en: Generate the certificate using Certificate Assistant.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用证书助手生成证书。
- en: Upload it on the **Distribution certificate** tab.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**分发证书**标签页上上传它。
- en: Install it on your machine.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的机器上安装它。
- en: Provisioning profile
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: 'A provisioning profile binds numerous digital objects, such as our applications,
    certificates, and devices, together. A provisioning profile has two parts: one
    is our development provisioning profile and the other is the distribution profile.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件将许多数字对象，如我们的应用、证书和设备，绑定在一起。配置文件有两个部分：一个是我们的开发配置文件，另一个是分发配置文件。
- en: App ID
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: App ID
- en: Before we create a new provisioning profile, let's first create an app ID for
    our application. Inside the provisioning portal, we have a section for creating
    the app ID. It is necessary to create a new app ID for every application. This
    app ID is then used while generating a new provisioning profile.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建新的配置文件之前，让我们首先为我们的应用创建一个App ID。在配置文件门户中，我们有一个创建App ID的部分。为每个应用创建一个新的App
    ID是必要的。然后，在生成新的配置文件时使用此App ID。
- en: '![App ID](img/5220OT_10_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![App ID](img/5220OT_10_03.jpg)'
- en: First, we add the description; this is how we will recognize our app ID in our
    provisioning portal. Next, we add a seed ID. (For first-time users, you will get
    an option to generate a new one.) Lastly, we add a bundle identifier. We are going
    to use this bundle identifier in the `Rakefile` of our RubyMotion project later
    on. The general nomenclature of naming a bundle identifier is the reverse domain
    notation, where **com** is followed by the domain name. In our case I have used
    **packtpub**, but you should add your domain name here. In the last part of the
    bundle identifier, add your application's name; in this case, we will use **Restroapp**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加描述；这是我们将在配置文件门户中识别我们的应用程序ID的方式。接下来，我们添加一个种子ID。（对于首次用户，您将获得生成一个新的选项。）最后，我们添加一个捆绑标识符。我们将在稍后的RubyMotion项目的`Rakefile`中使用这个捆绑标识符。捆绑标识符的命名规范是反向域名表示法，其中**com**后面跟着域名。在我们的例子中，我使用了**packtpub**，但你应该在这里添加你的域名。在捆绑标识符的最后部分，添加你的应用程序名称；在这种情况下，我们将使用**Restroapp**。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A bundle identifier is used to distinguish between various applications. We
    can use `com.domainname.*` for this purpose. An asterisk (`*`) symbol lets us
    use the same identifier for multiple apps. But we recommend naming your application
    for every identifier.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用捆绑标识符来区分不同的应用程序。我们可以用 `com.domainname.*` 来实现这个目的。一个星号 (`*`) 符号允许我们为多个应用程序使用相同的标识符。但我们建议为每个标识符命名你的应用程序。
- en: Adding devices
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加设备
- en: 'For development and testing purposes, we need to add our iOS devices in the
    **Devices** section of the application. Inside the **Devices** section, click
    on **Add Devices** as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发和测试目的，我们需要在应用程序的**设备**部分添加我们的iOS设备。在**设备**部分内，点击**添加设备**，如图所示：
- en: '![Adding devices](img/5220OT_10_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![添加设备](img/5220OT_10_04.jpg)'
- en: 'To test your application on your iPhone or iPad, simply add the UDID number
    of your device and a device name of your choice. The UDID number can be seen in
    iTunes. When you click on the iPhone name, it will show you a 40-digit sequence:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的iPhone或iPad上测试您的应用程序，只需添加您设备的UDID编号和您选择的设备名称。UDID编号可以在iTunes中看到。当您点击iPhone名称时，它将显示一个40位的序列：
- en: '![Adding devices](img/5220OT_10_05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![添加设备](img/5220OT_10_05.jpg)'
- en: You must add all of the devices you want to test on, which we will be using
    during development. If the devices you want to test on are not present, the application
    won't be installed on that device.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须添加所有您想要在开发过程中使用的测试设备。如果想要测试的设备不存在，应用程序将不会安装在该设备上。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Apple allows you to add up to 100 iOS devices; this is strictly for development
    and testing purposes only.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果允许您添加最多100个iOS设备；这仅限于开发和测试目的。
- en: Developer Provisioning Profile
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发者配置文件
- en: 'Now that we have everything in place to create a new provisioning profile,
    let''s do it by choosing the **Provisioning** option. The **Create new developer
    profile** form is divided into the following four sections:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好创建新的配置文件，让我们通过选择**配置**选项来完成它。**创建新的开发者配置文件**表单分为以下四个部分：
- en: '**Profile Name**: This is a label to recognize the profile.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置文件名称**: 这是一个用于识别配置文件的标签。'
- en: '**Certificates**: Choose the developer certificate you have installed on your
    system. If it is a one-man workshop like mine, you will see only one option.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书**: 选择您已在系统上安装的开发者证书。如果像我一样是一个人的工作室，您将只看到一个选项。'
- en: '**App ID**: Select the one we had created from the previous section for this
    application.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**App ID**: 选择我们从上一节为该应用程序创建的一个。'
- en: '**Devices**: These are the devices you want to test on.![Developer Provisioning
    Profile](img/5220OT_10_06.jpg)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备**: 这些是你想要测试的设备。![开发者配置文件](img/5220OT_10_06.jpg)'
- en: Once you submit this, you will see a pending status. Refresh your browser, and
    your provisioning profile will be ready. Download it and click on the file, and
    it will get installed in your Xcode. You can access all of the information related
    to this provisioning profile by navigating to **Xcode** | **Organiser** | **Provisioning
    Profiles** | **Devices**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 提交后，您将看到待处理状态。刷新您的浏览器，您的配置文件将准备好。下载它并点击文件，它将在Xcode中安装。您可以通过导航到**Xcode** | **组织者**
    | **配置文件** | **设备**来访问与此配置文件相关的所有信息。
- en: Do it yourself
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自己动手做
- en: 'Now that you know how to create a developer provisioning profile, why don''t
    you try creating the distribution profile for yourself by performing the following
    steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道了如何创建开发者配置文件，为什么不尝试通过执行以下步骤为自己创建分发配置文件呢：
- en: Open the **Distribution** tab in the **Provisioning** section.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **配置** 部分的 **分发** 选项卡中打开。
- en: Create a new profile.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的配置文件。
- en: Download and install the profile.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装配置文件。
- en: Setting up the RubyMotion project
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 RubyMotion 项目
- en: Next, let's set up our RubyMotion project; it will include the information we
    have collected previously.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们设置我们的 RubyMotion 项目；它将包括我们之前收集的信息。
- en: Entitlements
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限
- en: 'Entitlements are used during the code-signing part of the build process. Many
    applications require access to device features; Apple requires you to specify
    the entitlements if you want to access a specific device feature. This can be
    added in the `Rakefile`. The entitlement method in the `Rakefile` lets you specify
    the appropriate keys and values in the following way:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 权限在构建过程的代码签名部分中使用。许多应用程序需要访问设备功能；苹果要求您指定权限，如果您想访问特定的设备功能。这可以在 `Rakefile` 中添加。`Rakefile`
    中的权限方法允许您以下方式指定适当的键和值：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, if your application requires access to a keychain to store
    user credentials, you must send a request for `keychain-access-groups` by passing
    the application provisioning identifier and application identifier along with
    `seed_id` and the app identifier.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，如果您的应用程序需要访问密钥链来存储用户凭据，您必须通过传递应用程序配置文件标识符、应用程序标识符以及 `seed_id` 和应用程序标识符来发送
    `keychain-access-groups` 请求。
- en: Info.plist settings
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Info.plist 设置
- en: To provide the best experience to the users, iOS expects the presence of meta
    information in each application. This information is then used in various ways.
    Some of it is displayed to users and some may be used internally by the system
    to identify the application. These configuration settings are defined in `Info.plist`,
    which resides in the application's bundle.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为用户提供最佳体验，iOS 预期每个应用程序都存在元信息。这些信息随后以各种方式使用。其中一些信息会显示给用户，而另一些可能被系统内部使用以识别应用程序。这些配置设置在
    `Info.plist` 中定义，该文件位于应用程序的包中。
- en: 'In a RubyMotion project, the `Info.plist` file is defined in the `Rakefile`
    in a hash-like structure where you have a key-value pair. For example, we define
    `CFBundleURLTypes` in the following example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 RubyMotion 项目中，`Info.plist` 文件在 `Rakefile` 中以类似哈希的结构定义，其中您有一个键值对。例如，我们在以下示例中定义
    `CFBundleURLTypes`：
- en: '[PRE1]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Rakefile` does not cover all the possible settings, but it reveals the
    internal `Info.plist` data structure that one can modify, if at all needed. For
    more information and to check a list of other `Info.plist` properties, you can
    visit the Apple developer reference at [http://developer.apple.com/library/ios/#documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html](http://developer.apple.com/library/ios/#documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rakefile` 并未涵盖所有可能的设置，但它揭示了内部 `Info.plist` 数据结构，如果需要，可以对其进行修改。有关更多信息以及查看其他
    `Info.plist` 属性列表，您可以访问苹果开发者参考文档：[http://developer.apple.com/library/ios/#documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html](http://developer.apple.com/library/ios/#documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html)。'
- en: Building icons
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建图标
- en: Now that our machine is set up for the App Store, let's set up our RubyMotion
    project too. The first thing to do here is to set build icons. Since iOS devices,
    such as the iPhone, iPad, iPad mini, and retina displays come in a variety of
    screen sizes and display resolutions, Apple provides specific guidelines for creating
    icons to cater to each of them.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为 App Store 设置了机器，让我们也设置我们的 RubyMotion 项目。这里要做的第一件事是设置构建图标。由于 iOS 设备，如
    iPhone、iPad、iPad mini 和视网膜显示屏具有各种屏幕尺寸和显示分辨率，苹果提供了针对每个设备的特定图标创建指南。
- en: For our application icons, simply add these icons in the `resources` folder.
    They can have any random name, but it is a good idea to name them descriptively
    according to what they represent, such as `icon_name-114` or `icon-1024`. Here,
    `114` and `1024` represent the size 114 x 114 for a standard app icon and 1024
    x 1024 for an App Store icon, respectively.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序图标，只需将这些图标添加到 `resources` 文件夹中。它们可以有任何随机的名称，但根据它们所代表的内容命名是一个好主意，例如
    `icon_name-114` 或 `icon-1024`。在这里，`114` 和 `1024` 分别代表标准应用程序图标的大小 114 x 114 和 App
    Store 图标的大小 1024 x 1024。
- en: 'Next, add the `icon` attribute in your `Rakefile` in the following way:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下方式在您的 `Rakefile` 中添加 `icon` 属性：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By default, these icons have a glossy effect on the upper half of the image,
    which is the traditional iPhone style. But you can change this by adding the following
    lines in your `Rakefile`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这些图标在图像的上半部分具有光泽效果，这是传统的iPhone风格。但你可以通过在`Rakefile`中添加以下行来更改此设置：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'That''s it. Our RubyMotion application is now ready with icons. Some tips for
    designing great icons are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。我们的RubyMotion应用程序现在已准备好带有图标。以下是一些设计优秀图标的小贴士：
- en: For best results, enlist the help of a professional graphic designer
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了获得最佳效果，请寻求专业图形设计师的帮助
- en: Use universal imagery that people will easily recognize
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用人们容易识别的通用图像
- en: Embrace simplicity
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欣然接受简单性
- en: The richer the icons are in texture, the better they are to look at
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图标纹理越丰富，看起来越好
- en: Make the icons more detailed and more realistic
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使图标更加详细和逼真
- en: Add detail and depth
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加细节和深度
- en: As icons provide the first impression of your application, you must work extensively
    to ensure they look good. You can find more information related to icons and designs
    on the Apple developer reference at [http://developer.apple.com/library/ios/#documentation/userexperience/conceptual/mobilehig/IconsImages/IconsImages.html](http://developer.apple.com/library/ios/#documentation/userexperience/conceptual/mobilehig/IconsImages/IconsImages.html).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于图标提供了您应用程序的第一印象，您必须投入大量精力确保它们看起来很好。您可以在Apple开发者参考中找到有关图标和设计的更多信息，请参阅[http://developer.apple.com/library/ios/#documentation/userexperience/conceptual/mobilehig/IconsImages/IconsImages.html](http://developer.apple.com/library/ios/#documentation/userexperience/conceptual/mobilehig/IconsImages/IconsImages.html)。
- en: Besides icons, we can have other resources, such as images and sound files.
    These can be included in the `resources` folder, and instances of these can be
    used throughout our application. For example, we can create the instance of the
    `hello.png` image with `UIImage.imageNamed("hello")`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了图标之外，我们还可以拥有其他资源，例如图像和声音文件。这些可以包含在`resources`文件夹中，并且可以在我们的应用程序中使用这些实例。例如，我们可以使用`UIImage.imageNamed("hello")`创建`hello.png`图像的实例。
- en: Configuring your application
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置您的应用程序
- en: Before we create the package that will be uploaded to the App Store review,
    we need to add some configuration settings so that Apple can recognize that the
    application is from a registered source. Here we will use the information from
    our provisioning profile, plus some general information related to our application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建将上传到App Store审查的包之前，我们需要添加一些配置设置，以便Apple可以识别该应用程序来自已注册的来源。在这里，我们将使用我们的配置文件中的信息，以及与我们应用程序相关的某些一般信息。
- en: 'All these settings, once again, go into our `Rakefile`. Some of the required
    settings that need to be fed are our iOS SDK version that we are using and our
    application version, such as 1.0, 1.3, and 2.0, which is always incremented for
    future releases. The deployment target is a minimal iOS version on which we want
    to run our application or anything that will work fine with our application. We
    also need to specify our identifier and provisioning profile details. This will
    be clear with the following example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些设置，再次强调，都包含在我们的`Rakefile`中。需要输入的一些必需设置包括我们正在使用的iOS SDK版本和我们的应用程序版本，例如1.0、1.3和2.0，这些版本总是为未来的发布而递增。部署目标是我们要运行我们的应用程序或与之兼容的最小iOS版本。我们还需要指定我们的标识符和配置文件详情。以下示例将使这一切变得清晰：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The provisioning profile details are different for development and distribution.
    Distribution profile details are used only when we want to submit or test apps
    on many devices.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件详情在开发和分发时不同。分发配置文件详情仅在我们要提交或测试多个设备上的应用程序时使用。
- en: Installing on a device
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在设备上安装
- en: 'It''s a good idea to test your application before you submit it to the App
    Store. Now that all our settings are in place, we just need to run the `rake device`
    command from the console. Before doing so, make sure your registered device in
    the provisioning portal is connected via USB to your Mac machine. The process
    may fail for any of the following reasons:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在您将应用程序提交到App Store之前测试您的应用程序是个好主意。现在，所有我们的设置都已就绪，我们只需从控制台运行`rake device`命令。在这样做之前，请确保您在配置门户中注册的设备通过USB连接到您的Mac机器。以下任何原因都可能导致过程失败：
- en: The registered device is not connected to your machine via a USB
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册的设备未通过USB连接到您的计算机
- en: An incorrect identifier or provisioning profile's details have been added
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已添加错误的标识符或配置文件详情
- en: The project uses an incorrect iOS version that is running on the device
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目使用的是设备上运行的错误iOS版本
- en: iTunes Connect
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iTunes Connect
- en: 'Now we are done; but just before we create our application bundle and upload
    it, we need to set up our application on a separate portal ([https://itunesconnect.apple.com](https://itunesconnect.apple.com)).
    **iTunes Connect** has many options related to your application, such as **Sales
    and Trends**, **Catalog Reports**, **Developer Forums**, **Payments**, **Manage
    Your Application**, **Manage Users**, and many more. But, for now, we are just
    interested in the **Manage Your Application** option:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了；但在创建我们的应用程序包并上传之前，我们需要在单独的门户上设置我们的应用程序([https://itunesconnect.apple.com](https://itunesconnect.apple.com))。**iTunes
    Connect**提供了许多与您的应用程序相关的选项，例如**销售和趋势**、**目录报告**、**开发者论坛**、**支付**、**管理您的应用程序**、**管理用户**等等。但，目前我们只对**管理您的应用程序**选项感兴趣：
- en: '![iTunes Connect](img/5220OT_10_07.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![iTunes Connect](img/5220OT_10_07.jpg)'
- en: 'Once you have chosen **Manage Your Applications**, click on the button to add
    a new application to your catalog. This will show you the following form:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您选择了**管理您的应用程序**，点击按钮添加一个新应用程序到您的目录。这将显示以下表单：
- en: '![iTunes Connect](img/5220OT_10_08.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![iTunes Connect](img/5220OT_10_08.jpg)'
- en: Enter your application's name in the **App Name** textbox. The SKU number is
    a desired, unique alphanumeric sequence that you have to enter. Select a **Bundle
    ID** option from the drop-down menu; since your iTunes Connect profile is coupled
    with your provisioning portal, you will get the right options in the dropdown
    automatically.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在**应用名称**文本框中输入您的应用程序名称。SKU号码是一个期望的、唯一的字母数字序列，您必须输入。从下拉菜单中选择一个**包标识符**选项；由于您的iTunes
    Connect配置文件与您的配置门户相关联，您将自动在下拉菜单中获得正确的选项。
- en: Once submitted, you will get the option of when to release the application,
    choosing the price tier (free or paid), and choosing which App Store will sell
    the application based on various countries. Following this window, another form
    will appear where you will have to fill in the description of your application,
    upload snapshots of various devices, add icons for the App Store, and fill in
    other logistic details, such as who to contact for support in case there are some
    issues related to the application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 提交后，您将获得选择何时发布应用程序、选择价格层（免费或付费）以及根据不同国家选择哪个App Store将销售应用程序的选项。在此窗口之后，将出现另一个表单，您需要在其中填写您应用程序的描述、上传各种设备的快照、为App
    Store添加图标，并填写其他物流细节，例如在应用程序出现问题时联系谁以获得支持。
- en: Now that our application has been set up on iTunes Connect, we will next learn
    how to push our app for the App Store review.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在iTunes Connect上设置了我们的应用程序，接下来我们将学习如何将我们的应用程序推送到App Store进行审查。
- en: Creating bundles for submission
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建提交包
- en: The `rake archive` command generates a `.ipa` archive. This package is used
    for submitting our application to the App Store. The archive package can also
    be used for ad-hoc distribution to test the application on distributed devices.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`rake archive`命令生成一个`.ipa`存档。此包用于将我们的应用程序提交到App Store。存档包也可以用于对分发设备进行测试的ad-hoc分发。'
- en: Once we run the `rake archive` command, we will get the binary along with their
    appropriate distribution certificates. This is then uploaded on iTunes Connect
    with a special Apple utility named **Application Loader**.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行`rake archive`命令，我们将获得二进制文件及其相应的分发证书。然后，使用名为**应用程序加载器**的特别Apple实用程序将其上传到iTunes
    Connect。
- en: 'With the Xcode installation, we automatically get the **Application Loaded**
    utility that we can access from our application''s folder or access by simply
    making a spotlight search:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xcode安装过程中，我们自动获得**应用程序加载**实用程序，我们可以从应用程序文件夹中访问它或通过简单的spotlight搜索来访问：
- en: '![Creating bundles for submission](img/5220OT_10_09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![创建提交包](img/5220OT_10_09.jpg)'
- en: Choose the **Deliver Your App** option; this will indicate the name of the application
    iTunes Connect is waiting to upload. Choose your `.ipa` package from `./build/iPhoneOs_sdk_verson/Release/your_application.ipa`.
    Once this is done, you will see that the status of iTunes Connect has changed
    to **Received Binary**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**交付您的应用程序**选项；这将指示iTunes Connect等待上传的应用程序名称。从`./build/iPhoneOs_sdk_verson/Release/your_application.ipa`中选择您的`.ipa`包。一旦完成，您将看到iTunes
    Connect的状态已更改为**已接收二进制文件**。
- en: Great! Finally, we have submitted our application to the App Store. The Apple
    App Store takes a few days to review your application; you will see the status
    of your application change from **Waiting for Review** to **In Review** after
    a few days. In case there are any issues related to your application, the Apple
    team will first contact you using the details provided in iTunes Connect; and
    if the problem is not resolved, the application will get rejected. If this happens,
    you can resolve the issues faced by the review team and resubmit the app.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！终于，我们已经将我们的应用程序提交到了App Store。苹果App Store需要几天时间来审查您的应用程序；几天后，您将看到您应用程序的状态从**等待审查**变为**正在审查**。如果您的应用程序有任何问题，苹果团队将首先使用您在iTunes
    Connect中提供的详细信息与您联系；如果问题未解决，应用程序将被拒绝。如果发生这种情况，您可以解决审查团队遇到的问题，并重新提交应用程序。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter has covered the last step of an iOS application''s life cycle.
    Let''s recap what we have learned:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已经涵盖了iOS应用程序生命周期中的最后一步。让我们回顾一下我们学到了什么：
- en: How to generate certificates
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何生成证书
- en: How to use the provisioning portal
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用配置文件门户
- en: How to set up a RubyMotion project
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置RubyMotion项目
- en: How to test on a device
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在设备上进行测试
- en: How to use iTunes Connect
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用iTunes Connect
- en: How to create bundles for submission
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建用于提交的捆绑包
- en: With this chapter, we have almost come to the end of our journey of learning
    how to use and craft iOS applications with RubyMotion. But this is just the tip
    of the iceberg. We still have to explore so many iOS SDK APIs to make the applications
    we have dreamt of. RubyMotion makes even this part stress-free with the use of
    gems. In the final chapter, we will learn how to use some of the most popular
    RubyMotion gems, and how to contribute back to the RubyMotion community by creating
    our own gems.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们几乎结束了学习如何使用RubyMotion制作iOS应用程序的旅程。但这只是冰山一角。我们仍需探索许多iOS SDK API，以实现我们梦想中的应用程序。RubyMotion通过使用gem使这一部分变得无压力。在最后一章中，我们将学习如何使用一些最受欢迎的RubyMotion
    gem，以及如何通过创建我们自己的gem来为RubyMotion社区做出贡献。
