- en: Chapter 10. Getting Ready for the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"There are two kinds of people, those who finish what they start and so on."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Robert Byrne*'
  prefs: []
  type: TYPE_NORMAL
- en: We have come a long way in learning RubyMotion to create iOS applications. Hopefully,
    we are now proficient in developing applications with RubyMotion. So far, we have
    gone from creating a simple iOS application to including the amazing device capabilities
    of iPhone and iPad with our RubyMotion project and then creating games. In the
    previous chapter, we learned how to write test cases and test our application
    automatically. We have now covered all the parts of a software life cycle, except
    our app is not in production yet. Apple has a specific way to share your finished
    app with the world. In this chapter, we will cover setting up your Mac to create
    your application bundle, to share it, and to distribute your application over
    the Apple App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning portals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a RubyMotion project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing on a device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bundles for submission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before you begin setting up your Mac for app distribution, you are required
    to enroll into the Apple Developer Program for iOS development ([https://developer.apple.com](https://developer.apple.com)).
    It is compulsory to enroll into this program, otherwise you will not be able to
    submit your application build to the App Store. Apple reviews each and every application
    before it is released to the App Store. You should also have a look at the Apple
    review guidelines, available at the iOS Dev Center, once you have your membership.
    These guidelines are important to understand for the smooth approval of your app;
    we will cover most of them as we proceed, but do go through them yourself too.
    These guidelines also contain **Human Interface Guidelines** (**HIG**); many consider
    these guidelines as Apple's way of having a controlled environment for developers,
    but the prime purpose of these instructions is to create applications of a set
    standard and make them a class apart from other smartphones. So far, Apple has
    been successful in maintaining their good standard.
  prefs: []
  type: TYPE_NORMAL
- en: You should also set up your profile for your apps at [https://itunesconnect.apple.com/](https://itunesconnect.apple.com/);
    we will discuss more about this later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Generating certificates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To submit your application to the App Store, you require a developer certificate,
    a distribution certificate, a developer provisioning profile, and a distribution
    provisioning profile. In this section, we will bind your Mac with your iOS provisioning
    portal by generating certificates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you log in to [https://developer.apple.com](https://developer.apple.com),
    choose the iOS provisioning portal. Select the **Certificates** tab from the options
    provided in the left-hand side column as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating certificates](img/5220OT_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are a first-time user, you need to first install the **Worldwide Developer
    Relations** (**WWDR**) intermediate certificate; this certificate binds your developer
    and distribution certificate to the Apple Certificate Authority. Download this
    and it will be installed in your keychain.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's create our developer certificate. To generate this, let's go back
    to our keychain application and navigate to **KeyChain Access Menu** | **Certificate
    Assistant** | **Request a certificate from certificate authority**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating certificates](img/5220OT_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you have to use the same e-mail address with which you had registered
    for your developer account. We must add a unique name for this certificate and
    save it to the disk.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go back to our developer account in our browser. Inside the **Development**
    tab, we have a **Request Certificate** option that shows all of the instructions
    that we have already completed and that are ready for our certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Once uploaded, you will see **Pending Issuance**. Not a problem; refresh your
    browser, and your certificate will be uploaded. Download this and run; it will
    get stored in your keychain. Similarly, follow the same procedure for the distribution
    certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside your keychain, in the certificate section you will see all of the installed
    certificates. Every certificate is a combination of two things: a certificate
    and a private key. It''s good practice to make a copy of it and keep it in a safe
    place. In this way, if you change your machine, you will easily be able to download
    the certificate; but it will not work without the private key.'
  prefs: []
  type: TYPE_NORMAL
- en: Do it yourself
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like the developer profile for developing and testing in a development
    environment, we have a distribution profile that is used for distributing our
    application on the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you know how to generate, upload, and install the Apple certificate
    on your Mac machine for your developer profile, why not try it yourself and distribute
    the profile. All you have to do is just follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate the certificate using Certificate Assistant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload it on the **Distribution certificate** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install it on your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provisioning profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A provisioning profile binds numerous digital objects, such as our applications,
    certificates, and devices, together. A provisioning profile has two parts: one
    is our development provisioning profile and the other is the distribution profile.'
  prefs: []
  type: TYPE_NORMAL
- en: App ID
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we create a new provisioning profile, let's first create an app ID for
    our application. Inside the provisioning portal, we have a section for creating
    the app ID. It is necessary to create a new app ID for every application. This
    app ID is then used while generating a new provisioning profile.
  prefs: []
  type: TYPE_NORMAL
- en: '![App ID](img/5220OT_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, we add the description; this is how we will recognize our app ID in our
    provisioning portal. Next, we add a seed ID. (For first-time users, you will get
    an option to generate a new one.) Lastly, we add a bundle identifier. We are going
    to use this bundle identifier in the `Rakefile` of our RubyMotion project later
    on. The general nomenclature of naming a bundle identifier is the reverse domain
    notation, where **com** is followed by the domain name. In our case I have used
    **packtpub**, but you should add your domain name here. In the last part of the
    bundle identifier, add your application's name; in this case, we will use **Restroapp**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A bundle identifier is used to distinguish between various applications. We
    can use `com.domainname.*` for this purpose. An asterisk (`*`) symbol lets us
    use the same identifier for multiple apps. But we recommend naming your application
    for every identifier.
  prefs: []
  type: TYPE_NORMAL
- en: Adding devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For development and testing purposes, we need to add our iOS devices in the
    **Devices** section of the application. Inside the **Devices** section, click
    on **Add Devices** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding devices](img/5220OT_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To test your application on your iPhone or iPad, simply add the UDID number
    of your device and a device name of your choice. The UDID number can be seen in
    iTunes. When you click on the iPhone name, it will show you a 40-digit sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding devices](img/5220OT_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You must add all of the devices you want to test on, which we will be using
    during development. If the devices you want to test on are not present, the application
    won't be installed on that device.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple allows you to add up to 100 iOS devices; this is strictly for development
    and testing purposes only.
  prefs: []
  type: TYPE_NORMAL
- en: Developer Provisioning Profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have everything in place to create a new provisioning profile,
    let''s do it by choosing the **Provisioning** option. The **Create new developer
    profile** form is divided into the following four sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Profile Name**: This is a label to recognize the profile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificates**: Choose the developer certificate you have installed on your
    system. If it is a one-man workshop like mine, you will see only one option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App ID**: Select the one we had created from the previous section for this
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Devices**: These are the devices you want to test on.![Developer Provisioning
    Profile](img/5220OT_10_06.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you submit this, you will see a pending status. Refresh your browser, and
    your provisioning profile will be ready. Download it and click on the file, and
    it will get installed in your Xcode. You can access all of the information related
    to this provisioning profile by navigating to **Xcode** | **Organiser** | **Provisioning
    Profiles** | **Devices**.
  prefs: []
  type: TYPE_NORMAL
- en: Do it yourself
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you know how to create a developer provisioning profile, why don''t
    you try creating the distribution profile for yourself by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Distribution** tab in the **Provisioning** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install the profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the RubyMotion project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, let's set up our RubyMotion project; it will include the information we
    have collected previously.
  prefs: []
  type: TYPE_NORMAL
- en: Entitlements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Entitlements are used during the code-signing part of the build process. Many
    applications require access to device features; Apple requires you to specify
    the entitlements if you want to access a specific device feature. This can be
    added in the `Rakefile`. The entitlement method in the `Rakefile` lets you specify
    the appropriate keys and values in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, if your application requires access to a keychain to store
    user credentials, you must send a request for `keychain-access-groups` by passing
    the application provisioning identifier and application identifier along with
    `seed_id` and the app identifier.
  prefs: []
  type: TYPE_NORMAL
- en: Info.plist settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To provide the best experience to the users, iOS expects the presence of meta
    information in each application. This information is then used in various ways.
    Some of it is displayed to users and some may be used internally by the system
    to identify the application. These configuration settings are defined in `Info.plist`,
    which resides in the application's bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a RubyMotion project, the `Info.plist` file is defined in the `Rakefile`
    in a hash-like structure where you have a key-value pair. For example, we define
    `CFBundleURLTypes` in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `Rakefile` does not cover all the possible settings, but it reveals the
    internal `Info.plist` data structure that one can modify, if at all needed. For
    more information and to check a list of other `Info.plist` properties, you can
    visit the Apple developer reference at [http://developer.apple.com/library/ios/#documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html](http://developer.apple.com/library/ios/#documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: Building icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our machine is set up for the App Store, let's set up our RubyMotion
    project too. The first thing to do here is to set build icons. Since iOS devices,
    such as the iPhone, iPad, iPad mini, and retina displays come in a variety of
    screen sizes and display resolutions, Apple provides specific guidelines for creating
    icons to cater to each of them.
  prefs: []
  type: TYPE_NORMAL
- en: For our application icons, simply add these icons in the `resources` folder.
    They can have any random name, but it is a good idea to name them descriptively
    according to what they represent, such as `icon_name-114` or `icon-1024`. Here,
    `114` and `1024` represent the size 114 x 114 for a standard app icon and 1024
    x 1024 for an App Store icon, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the `icon` attribute in your `Rakefile` in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, these icons have a glossy effect on the upper half of the image,
    which is the traditional iPhone style. But you can change this by adding the following
    lines in your `Rakefile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it. Our RubyMotion application is now ready with icons. Some tips for
    designing great icons are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: For best results, enlist the help of a professional graphic designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use universal imagery that people will easily recognize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embrace simplicity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The richer the icons are in texture, the better they are to look at
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the icons more detailed and more realistic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add detail and depth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As icons provide the first impression of your application, you must work extensively
    to ensure they look good. You can find more information related to icons and designs
    on the Apple developer reference at [http://developer.apple.com/library/ios/#documentation/userexperience/conceptual/mobilehig/IconsImages/IconsImages.html](http://developer.apple.com/library/ios/#documentation/userexperience/conceptual/mobilehig/IconsImages/IconsImages.html).
  prefs: []
  type: TYPE_NORMAL
- en: Besides icons, we can have other resources, such as images and sound files.
    These can be included in the `resources` folder, and instances of these can be
    used throughout our application. For example, we can create the instance of the
    `hello.png` image with `UIImage.imageNamed("hello")`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we create the package that will be uploaded to the App Store review,
    we need to add some configuration settings so that Apple can recognize that the
    application is from a registered source. Here we will use the information from
    our provisioning profile, plus some general information related to our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'All these settings, once again, go into our `Rakefile`. Some of the required
    settings that need to be fed are our iOS SDK version that we are using and our
    application version, such as 1.0, 1.3, and 2.0, which is always incremented for
    future releases. The deployment target is a minimal iOS version on which we want
    to run our application or anything that will work fine with our application. We
    also need to specify our identifier and provisioning profile details. This will
    be clear with the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The provisioning profile details are different for development and distribution.
    Distribution profile details are used only when we want to submit or test apps
    on many devices.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on a device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s a good idea to test your application before you submit it to the App
    Store. Now that all our settings are in place, we just need to run the `rake device`
    command from the console. Before doing so, make sure your registered device in
    the provisioning portal is connected via USB to your Mac machine. The process
    may fail for any of the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: The registered device is not connected to your machine via a USB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An incorrect identifier or provisioning profile's details have been added
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project uses an incorrect iOS version that is running on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iTunes Connect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we are done; but just before we create our application bundle and upload
    it, we need to set up our application on a separate portal ([https://itunesconnect.apple.com](https://itunesconnect.apple.com)).
    **iTunes Connect** has many options related to your application, such as **Sales
    and Trends**, **Catalog Reports**, **Developer Forums**, **Payments**, **Manage
    Your Application**, **Manage Users**, and many more. But, for now, we are just
    interested in the **Manage Your Application** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iTunes Connect](img/5220OT_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have chosen **Manage Your Applications**, click on the button to add
    a new application to your catalog. This will show you the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iTunes Connect](img/5220OT_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enter your application's name in the **App Name** textbox. The SKU number is
    a desired, unique alphanumeric sequence that you have to enter. Select a **Bundle
    ID** option from the drop-down menu; since your iTunes Connect profile is coupled
    with your provisioning portal, you will get the right options in the dropdown
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Once submitted, you will get the option of when to release the application,
    choosing the price tier (free or paid), and choosing which App Store will sell
    the application based on various countries. Following this window, another form
    will appear where you will have to fill in the description of your application,
    upload snapshots of various devices, add icons for the App Store, and fill in
    other logistic details, such as who to contact for support in case there are some
    issues related to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our application has been set up on iTunes Connect, we will next learn
    how to push our app for the App Store review.
  prefs: []
  type: TYPE_NORMAL
- en: Creating bundles for submission
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `rake archive` command generates a `.ipa` archive. This package is used
    for submitting our application to the App Store. The archive package can also
    be used for ad-hoc distribution to test the application on distributed devices.
  prefs: []
  type: TYPE_NORMAL
- en: Once we run the `rake archive` command, we will get the binary along with their
    appropriate distribution certificates. This is then uploaded on iTunes Connect
    with a special Apple utility named **Application Loader**.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the Xcode installation, we automatically get the **Application Loaded**
    utility that we can access from our application''s folder or access by simply
    making a spotlight search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating bundles for submission](img/5220OT_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Choose the **Deliver Your App** option; this will indicate the name of the application
    iTunes Connect is waiting to upload. Choose your `.ipa` package from `./build/iPhoneOs_sdk_verson/Release/your_application.ipa`.
    Once this is done, you will see that the status of iTunes Connect has changed
    to **Received Binary**.
  prefs: []
  type: TYPE_NORMAL
- en: Great! Finally, we have submitted our application to the App Store. The Apple
    App Store takes a few days to review your application; you will see the status
    of your application change from **Waiting for Review** to **In Review** after
    a few days. In case there are any issues related to your application, the Apple
    team will first contact you using the details provided in iTunes Connect; and
    if the problem is not resolved, the application will get rejected. If this happens,
    you can resolve the issues faced by the review team and resubmit the app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter has covered the last step of an iOS application''s life cycle.
    Let''s recap what we have learned:'
  prefs: []
  type: TYPE_NORMAL
- en: How to generate certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the provisioning portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up a RubyMotion project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to test on a device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create bundles for submission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this chapter, we have almost come to the end of our journey of learning
    how to use and craft iOS applications with RubyMotion. But this is just the tip
    of the iceberg. We still have to explore so many iOS SDK APIs to make the applications
    we have dreamt of. RubyMotion makes even this part stress-free with the use of
    gems. In the final chapter, we will learn how to use some of the most popular
    RubyMotion gems, and how to contribute back to the RubyMotion community by creating
    our own gems.
  prefs: []
  type: TYPE_NORMAL
