["```kt\nmaven { url 'https://repo.spring.io/libs-milestone' }\n```", "```kt\nimplementation \"io.projectreactor:reactor-core:3.2.2.RELEASE\"\n```", "```kt\ncompileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n}\n```", "```kt\nimplementation \"io.reactivex.rxjava2:rxjava:2.2.3\"\n```", "```kt\nimplementation 'io.reactivex.rxjava2:rxandroid:2.1.0'\n```", "```kt\nimplementation 'com.jakewharton.rxbinding3:rxbinding:3.0.0-alpha1'\n```", "```kt\nclass ObserverActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_observer)\n        findViewById<Button>(R.id.button).setOnClickListener {\n            Toast.makeText(this, \"Clicked!\", Toast.LENGTH_LONG).show()\n        }\n    }\n}\n```", "```kt\npublic void setOnClickListener(@Nullable OnClickListener l) {\n    if (!isClickable()) {\n        setClickable(true);\n    }\n    getListenerInfo().mOnClickListener = l;\n}\n```", "```kt\npublic boolean performClick() {\n    ////......\n    final boolean result;\n    final ObserverInfo li = mObserverInfo;\n if (li != null && li.mOnClickObserver != null) {\n playSoundEffect(SoundEffectConstants.CLICK);\n li.mOnClickObserver.onClick(this);\n result = true;\n } else {\n result = false;\n }\n ///........\n return result;\n}\n```", "```kt\nfun fluxTest() {\n    Flux.fromArray(arrayOf(1, 2, 3))\n            .map { it * it }\n            .subscribe { println(it) }\n}\n```", "```kt\n 1\n 4\n 9\n```", "```kt\nFlux.fromArray(arrayOf(1, 2, 3))\n        .filter { it % 2 == 1 }\n        .map { it * it }\n        .reduce { sum, item -> sum + item }\n        .subscribe { println(it) }\n```", "```kt\n1\n9\n```", "```kt\nFlux.fromArray(arrayOf(1, 2, 3))\n        .flatMap { Mono.just(it).delayElement(Duration.ofSeconds(1)) }\n        .subscribe { println(it) }\n```", "```kt\n 1\n 2\n 3\n```", "```kt\nFlux.from<Unit> { subscriber ->\n    findViewById<Button>(R.id.button).setOnClickListener {\n        subscriber.onNext(Unit)\n    }\n}.subscribe {\n    Toast.makeText(this, \"Clicked!\", Toast.LENGTH_LONG).show()\n}\n```", "```kt\npublic final Disposable subscribe(Consumer<? super T> consumer) {\n   Objects.requireNonNull(consumer, \"consumer\");\n   return subscribe(consumer, null, null);\n}\n```", "```kt\nclass ObserverActivity : AppCompatActivity() {\n\n    private var disposable: Disposable? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_observer)\n        disposable = Flux.from<Unit> { subscriber ->\n            findViewById<Button>(R.id.button).setOnClickListener {\n                subscriber.onNext(Unit)\n            }\n        }.subscribe {\n            Toast.makeText(this, \"Clicked!\", Toast.LENGTH_LONG).show()\n        }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        disposable?.dispose()\n    }\n}\n\n```", "```kt\nMono.fromDirect<Comic> { subscriber -> subscriber.onNext(loadComic()) }\n        .map { comic -> comic.img }\n        .flatMap { path -> Mono.fromDirect<Bitmap> { subscriber -> subscriber.onNext(loadBitmap(path)) } }\n        .subscribeOn(Schedulers.single())\n        .subscribe { bitmap ->\n            Handler(Looper.getMainLooper()).post {\n                findViewById<ImageView>(R.id.imageView).setImageBitmap(bitmap)\n            }\n        }\n```", "```kt\nval UIScheduler = Schedulers.fromExecutor { runnable ->     Handler(Looper.getMainLooper()).post(runnable) \n}\n```", "```kt\nMono.fromDirect<Comic> { subscriber -> subscriber.onNext(loadComic()) }\n        .map { comic -> comic.img }\n        .flatMap { path -> Mono.fromDirect<Bitmap> { subscriber -> subscriber.onNext(loadBitmap(path)) } }\n        .subscribeOn(Schedulers.single())\n        .publishOn(UIScheduler)\n        .subscribe { bitmap -> findViewById<ImageView>(R.id.imageView).setImageBitmap(bitmap) }\n```", "```kt\nFlowable.fromIterable(listOf(1, 2, 3))\n        .subscribe { println(it) }\n\n```", "```kt\nObservable.fromIterable(listOf(1, 2, 3))\n        .subscribe { println(it) }\n```", "```kt\nSingle.just(1).subscribe(Consumer<Int> { println(it) })\n```", "```kt\nMaybe.just(1)\n        .map { item -> item + 1 }\n        .filter { item -> item == 1 }\n        .defaultIfEmpty(4)\n        .test()\n        .assertResult(4)\n```", "```kt\nCompletable.fromAction { Database.delete() }\n        .test()\n        .assertComplete()\n```", "```kt\nFlowable.fromIterable(listOf(1, 2, 3))\n        .subscribeOn(Schedulers.computation())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe { println(it) }\n```", "```kt\nfun TextView.textChanges(): InitialValueObservable<CharSequence> {\n    return TextViewTextChangesObservable(this)\n}\n```", "```kt\nclass RxActivity : AppCompatActivity() {\n\n    private val editText by lazy(LazyThreadSafetyMode.NONE) {\n        findViewById<EditText>(R.id.editText)\n    }\n\n    private val textView by lazy(LazyThreadSafetyMode.NONE) {\n        findViewById<TextView>(R.id.textView)\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_rx)\n        editText\n                .textChanges()\n                .subscribe { textView.text = it }\n\n    }\n}\n```", "```kt\nfun View.clicks(): Observable<Unit> {\n    return ViewClickObservable(this)\n}\n```", "```kt\nprivate class ViewClickObservable(\n        private val view: View\n) : Observable<Unit>() {\n\n    override fun subscribeActual(observer: Observer<in Unit>) {\n        if (!checkMainThread(observer)) {\n            return\n        }\n        val observer = Observer(view, observer)\n        observer.onSubscribe(observer)\n        view.setOnClickListener(observer)\n    }\n  }\n```", "```kt\n private class Observer(\n            private val view: View,\n            private val observer: Observer<in Unit>\n    ) : MainThreadDisposable(), OnClickObserver {\n\n       override fun onClick(v: View) {\n           if (!isDisposed) {\n               observer.onNext(Unit)\n           }\n       }\n\n       override fun onDispose() {\n           view.setOnClickListerner(null)\n       }\n}\n```"]