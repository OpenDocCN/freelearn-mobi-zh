["```swift\n     $ xcrun --toolchain swift \n           $ xcodebuild --toolchain swift\n\n    ```", "```swift\n    $ sudo apt-get install clang libicu-dev\n\n    ```", "```swift\n     $ wget https://swift.org/builds/swift-3.0-preview-2/ubuntu1404/\n          swift-3.0-PREVIEW-2/swift-3.0-PREVIEW-2-ubuntu14.04.tar.gz\n\n    ```", "```swift\n     $ wget https://swift.org/builds/swift-3.0-preview-2/ubuntu1404\n          /swift-3.0- PREVIEW-2/swift-3.0-PREVIEW-2-ubuntu14.04.tar.gz.sig \n\n    ```", "```swift\n     $ wget -q -O - https://swift.org/keys/all-keys.asc | gpg --import -\n\n    ```", "```swift\n     $ gpg --keyserver hkp://pool.sks-keyservers.net --refresh-keys Swift\n\n    ```", "```swift\n     $gpg--verify swift-3.0-PREVIEW-2-ubuntu14.04.tar.gz.sig \n          gpg: Signature made Thu 07 Jul 2016 11:12:12 PM UTC using\n          RSA key ID 91D306C6 \n          gpg: Good signature from \"Swift 3.x Release Signing Key <swift-\n          infrastructure@swift.org>\" \n          gpg: WARNING: This key is not certified with a trusted signature! \n          gpg: There is no indication that the signature belongs to the owner. \n          Primary key fingerprint: A3BA FD35 56A5 9079 C068 94BD 63BC\n          1CFE 91D3 06C6\n\n    ```", "```swift\n     $ tar xzf swift-3.0-PREVIEW-2-ubuntu14.04.tar.gz\n\n    ```", "```swift\n     $ export PATH=/home/vagrant/swift-3.0-PREVIEW-2-\n          ubuntu14.04/usr/bin:\"${PATH}\"\n\n    ```", "```swift\n$ swift\n\n```", "```swift\n1> let oneMillion = 1_000_000 \noneMillion: Int = 1000000 \n2> let twoMillion: Int = 2_000_000 \ntwoMillion: Int = 2000000 \n3> oneMillion + twoMillion \n$R0: Int = 3000000 \n4> $R0 / 1_000_000 \n$R1: Int = 3\n\n```", "```swift\n5> oneMillion = \"one million\" \nerror: repl.swift:11:12: error: cannot assign to value: 'oneMillion' is a 'let' constant \noneMillion = \"one million\" \n~~~~~~~~~~~^ \nrepl.swift:2:1: note: change 'let' to 'var' to make it mutable` \nlet oneMillion = 1\\_000\\_000` \n^~~~ \nvar \n\n```", "```swift\n$ mkdir guesswho \n$ cd guess who\n\n```", "```swift\n$ swift package init --type executable \nCreating executable package: guesswho \nCreating Package.swift \nCreating .gitignore \nCreating Sources/ \nCreating Sources/main.swift \nCreating Tests/\n\n```", "```swift\n func breakWord(combine result:String, input:String, done:(String?)->Void){ \n      let characterArray = input.characters \n      let breakoutCharacter = characterArray.first \n      let remainingCharacters = characterArray.dropFirst() \n     if characterArray.count > 0{ \n          let line = \"\\n\\(breakoutCharacter!): \\(String(remainingCharacters)) \" \n\n          let newResult = \"\\(result) \\(line)\" \n          breakWord(combine: newResult, input:    String(remainingCharacters),\n          done: done) \n         return \n     } \n     done(result) \n  } \n\n```", "```swift\n  let arguments = Process.arguments \n  if arguments.count > 1{ \n    for n in 1..<arguments.count{ \n       breakWord(combine: \"\", input: arguments[n]){ (result) in \n           print(result!) \n       } \n    } \n  } \n  else{ \n     print(\"no arguments passed\") \n }\n```", "```swift\n$ .build/debug/guesswho Swift 3 New Features \nS: wift \nw: ift \ni: ft \nf: t \nt: \n\n3: \n\nN: ew \ne: w \nw: \n\nF: eatures \ne: atures \na: tures \nt: ures \nu: res \nr: es \ne: s \ns: \n\n```"]