["```swift\nfunc addLevelLabel()\n   {\n       self.levelLabel.text = \"Level: 1\"\n       self.levelLabel.fontSize = 30\n       self.levelLabel.zPosition = 3\n       self.levelLabel.position = CGPointMake(CGRectGetMidX(self.frame) + scoreText.frame.width , CGRectGetMidY(self.frame) + levelLabel.frame.height * 4.2)\n       self.addChild(self.levelLabel)\n   }\n\n// ADDING LEVELS\n   let levelLabel = SKLabelNode(fontNamed: \"Chalkduster\")\n   var level = 1\naddLevelLabel()\n```", "```swift\nfunc blockRunner()\n   {\n       // LOOP FOR THE DICTIONARY TO GET BLOCKS\n       for(block, blockStatus) in self.blockStatuses\n       {\n           var thisBlock = self.childNodeWithName(block)!\n           if blockStatus.shouldRunBlock()\n           {\n               blockStatus.timeGapForNextRun = random()\n               blockStatus.currentInterval = 0\n               blockStatus.isRunning = true\n           }\n\n           if blockStatus.isRunning\n           {\n\n               if thisBlock.position.x > blockMaxX      // IF IT IS POSITIVE (KEEP MOVING BLOCKS FROM RIGHT TO LEFT)\n               {\n                   thisBlock.position.x -= CGFloat(self.groundSpeed)\n\n               }\n               else                                 // #1\n               {\n                   thisBlock.position.x = self.origBlockPositionX\n                   blockStatus.isRunning = false\n                   self.numberOfBlocksCrosssed += 1\n                    self.levelLabel.text = \"Level: \\(String(self.level))\"\n                   if self.numberOfBlocksCrosssed == 5\n                   {\n                       self.level = level + 1\n                       self.groundSpeed = self.groundSpeed + 7\n                   }\n                   else if self.numberOfBlocksCrosssed == 10\n                   {\n                       self.level = level + 1\n                       self.groundSpeed = self.groundSpeed + 9\n                   }\n                   else if self.numberOfBlocksCrosssed == 20\n                   {\n                       self.level = level + 1\n                       self.groundSpeed = self.groundSpeed + 12\n                   }\n                   else if self.numberOfBlocksCrosssed > 20\n                   {\n                       println(\"Final Level\")\n                   }\n               }\n                      }\n           else\n           {\n               blockStatus.currentInterval++\n           }\n\n       }\n\n   }\n```", "```swift\n    var pauseBtn:SKSpriteNode = SKSpriteNode(imageNamed: \"PLAY-PAUSE\")\n    ```", "```swift\n    func addPlayPauseButton()\n       {\n           //self.runAction(sound)\n           self.pauseBtn.name = \"PAUSE\"\n           self.pauseBtn.zPosition = 3\n           self.pauseBtn.position = CGPointMake(CGRectGetMaxX(self.frame) - pauseBtn.frame.width/2 , CGRectGetMaxY(self.frame) - pauseBtn.frame.height/2)\n           self.addChild(pauseBtn)\n\n       }\n    ```", "```swift\n    if self.pauseBtn.containsPoint(location)\n               {\n                   if(self.view?.paused == false)\n                   {\n                       println(\"Game Scene is Paused\")\n                       self.view?.paused = true\n\n                   }\n                   else\n                   {\n                       println(\"Game Scene is Resumed\")\n                       self.view?.paused = false\n                   }\n               }\n    ```", "```swift\n    var nodeMenuSceneInstance : NodeMenuScene?\n    ```", "```swift\n    func addNodeMenuSceneBtn()\n       {\n           var backbutton = SKLabelNode(fontNamed: \"Chalkduster\")\n           backbutton.fontColor = UIColor.cyanColor()\n           backbutton.name = \"NODEMENU\"\n           backbutton.text = \"NODE MENU\"\n           backbutton.position = CGPointMake(CGRectGetMaxX(self.frame) - backbutton.frame.width/2 , CGRectGetMaxY(self.frame) - backbutton.frame.width/8)\n           backbutton.zPosition = 3\n           self.addChild(backbutton)\n       }\n    ```", "```swift\n    else if node.name == \"NODEMENU\"\n               {\n                   goToNodeMenuScene()\n\n               }\n    ```", "```swift\n    func goToNodeMenuScene()\n       {\n           let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n           nodeMenuSceneInstance = NodeMenuScene(size: self.size)\n           nodeMenuSceneInstance!.anchorPoint = CGPoint(x: 0.5, y: 0.5)\n           self.view?.presentScene(nodeMenuSceneInstance , transition:transitionEffect)\n       }\n    ```"]