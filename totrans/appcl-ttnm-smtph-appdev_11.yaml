- en: Chapter 11. Platform Differences, Device Information, and Quirks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 平台差异、设备信息和怪癖
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Gathering information about your device
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集有关设备的信息
- en: Obtaining the device's screen dimensions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取设备的屏幕尺寸
- en: Understanding device orientation modes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解设备方向模式
- en: Coding around differences between the iOS and Android APIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在iOS和Android API之间的差异中进行编码
- en: Ensuring your device can make phone calls
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的设备可以打电话
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we are going to go through a number of platform differences
    between iOS and Android, as well as show you how to code around these differences.
    We'll also highlight how to gather information about the device your application
    is running on, including its screen dimensions and capabilities, such as the ability
    to make a phone call.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨iOS和Android之间的许多平台差异，并展示如何围绕这些差异进行编码。我们还将突出显示如何收集有关应用程序运行设备的详细信息，包括其屏幕尺寸和能力，例如打电话的能力。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this entire chapter can be found in the `/Chapter
    11/PlatformDiffs` folder.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整源代码可以在`/Chapter 11/PlatformDiffs`文件夹中找到。
- en: Gathering information about your device
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集有关设备的信息
- en: The majority of information about the current device is available through the
    `Titanium.Platform` namespace. It is here that we can determine a host of device-specific
    data, including the battery level, device OS and version, current device language,
    the screen resolution, and more. Knowing this information is important, as it
    will give you a series of clues as to what is happening on the physical device.
    One example is that you may wish to back up a user's application data if the battery
    dips below a certain percentage, in case the device was to shut down and data
    was lost. More commonly, you will use device properties such as `Titanium.Platform.osname`
    to determine what operating system your app is currently running under, such as
    iPhone, iPad, or Android.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当前设备的大部分信息都可以通过`Titanium.Platform`命名空间获取。在这里，我们可以确定一系列与设备相关的数据，包括电池电量、设备操作系统和版本、当前设备语言、屏幕分辨率等等。了解这些信息非常重要，因为它会给你一系列关于物理设备上发生情况的线索。例如，如果电池电量下降到一定百分比以下，你可能希望备份用户的应用数据，以防设备关闭导致数据丢失。更常见的是，你会使用像`Titanium.Platform.osname`这样的设备属性来确定你的应用程序当前运行在什么操作系统上，比如iPhone、iPad或Android。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To prepare for this recipe, open up Titanium Studio and log in if you have
    not already done so. If you need to register a new account, you can do so for
    free directly from within the application. Once you are logged in, click on **New
    Project**, and the details window for creating a new project will appear. Enter
    in **PlatformDiffs** as the name of the app, and fill in the rest of the details
    with your own information. Open the `app.js` file and remove everything apart
    from the instantiation of the root window and the `win1` object''s open method,
    so that it looks like the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个菜谱，打开Titanium Studio并登录，如果你还没有这样做的话。如果你需要注册新账户，你可以在应用程序内部免费注册。登录后，点击**新建项目**，创建新项目的详细信息窗口将出现。将应用程序名称输入为**PlatformDiffs**，并填写其他详细信息。打开`app.js`文件，删除除了根窗口实例化和`win1`对象的open方法之外的所有内容，使其看起来如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    1` folder.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的完整源代码可以在`/Chapter 11/Recipe 1`文件夹中找到。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Now, back in the `app.js` file, we are going to simply create a number of labels
    and request the values for each from the properties available to us in the `Titanium.Platform`
    namespace. These values will then be displayed as text on-screen:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到`app.js`文件，我们将简单地创建一些标签，并从`Titanium.Platform`命名空间中可用的属性请求每个标签的值。然后，这些值将作为屏幕上的文本显示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Each of the labels in this code sample represents a different piece of information
    about your device and its capabilities. There is nothing particularly complicated
    about the code here but it's the methods themselves that are important.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例中的每个标签都代表有关你的设备及其功能的不同信息。这里的代码并没有什么特别复杂的地方，但重要的是这些方法本身。
- en: Most of these are pretty self-explanatory. The methods for Battery, Memory,
    Architecture, and Model all provide you with information about the device and
    its specific capabilities. You may use these at certain times during your application's
    lifecycle, for instance, auto-saving data on a form when the battery reaches a
    certain critical level.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些都是相当直观的。电池、内存、架构和型号的方法都为你提供了有关设备和其特定功能的信息。你可以在应用程序的生命周期中的某些时刻使用这些信息，例如，当电池达到某个临界水平时自动保存表单数据。
- en: The most useful of all of these methods is `Titanium.Platform.osname`. It is
    this method that you will use constantly throughout the development of a Titanium
    cross-platform app as you will use it to check whether you're on iPhone or the
    Android platform, as seen in the following screenshot, and run certain code depending
    on that result.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法中最有用的是`Titanium.Platform.osname`。这是你在开发Titanium跨平台应用程序过程中会不断使用的方法，因为你将使用它来检查你是否在iPhone或Android平台上，如以下截图所示，并运行相应的代码。
- en: '![How it works…](img/3968_11_06.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3968_11_06.jpg)'
- en: Obtaining the device's screen dimensions
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取设备的屏幕尺寸
- en: While we developers are currently very lucky with the iPhone platform and its
    single resolution of 320x480 pixels, the same can't be said for Android. It is
    the Android platform in particular that, due to the way it's distributed among
    many manufacturers, has a number of differing screen ratios and resolutions. It
    is inevitable that there will be times where you may need to calculate the position
    of an object depending on the size of the current screen, without constantly resorting
    to a series of `Titanium.Platform.osname` checks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们开发者目前对iPhone平台及其单一的320x480像素分辨率感到非常幸运，但对于Android平台来说，情况并非如此。特别是Android平台，由于它在众多制造商之间的分布方式，拥有多种不同的屏幕比例和分辨率。不可避免的是，你可能会遇到需要根据当前屏幕大小计算对象位置的情况，而不必不断依赖一系列`Titanium.Platform.osname`检查。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since the introduction of the iPhone 4, all new iOS devices have a retina display.
    Essentially, the screen resolution is still at 320x480 but the DPI is doubled,
    meaning the effective resolution is actually 640x960\. Implementing for both these
    resolutions is very easy. Simply name all of your image files as normal, and then
    all of the double resolution files are named in the same way with the addition
    of an `@2x` flag. So if you had an image called `header.png`, which is designed
    for 320x480, you can create an image of double the size and name it `header@2x.png`
    and this will automatically be picked up by all iOS retina displays.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 自从iPhone 4的推出以来，所有新的iOS设备都配备了视网膜显示屏。本质上，屏幕分辨率仍然是320x480，但DPI翻倍，这意味着有效分辨率实际上是640x960。针对这两种分辨率进行实现非常简单。只需将所有图像文件命名为正常，然后所有双倍分辨率的文件都使用相同的方式命名，并添加一个`@2x`标志。所以如果你有一个名为`header.png`的图像，它是为320x480设计的，你可以创建一个大小加倍且命名为`header@2x.png`的图像，这将自动被所有iOS视网膜显示屏识别。
- en: In this recipe, we will generate three views, one that takes up the bottom half
    of the screen, and another two that take up only the top. We'll do this using
    the `Titanium.Platform.displayCaps` functions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将生成三个视图，一个占据屏幕下半部分，另外两个只占据顶部。我们将使用`Titanium.Platform.displayCaps`函数来实现这一点。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    2` folder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的完整源代码可以在`/Chapter 11/Recipe 2`文件夹中找到。
- en: How to do it…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'In your `app.js` file, we are going to create three different views, each taking
    up a separate portion of the screen. Remove any existing code and type in the
    following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`app.js`文件中，我们将创建三个不同的视图，每个视图占据屏幕的一部分。删除任何现有的代码，并输入以下内容：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: The code here is pretty straightforward. Put simply, we are assigning the width
    and height values of the device to the two variables called `windowWidth` and
    `windowHeight`. To do this, we are using two of the properties available to us
    in the `Titanium.Platform.displayCaps` namespace; namely `platformWidth` and `platformHeight`.
    Once we have these values it's easy to then create our views and lay them out
    using some very simple calculations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的代码相当简单。简单来说，我们正在将设备的宽度和高度值分配给两个名为`windowWidth`和`windowHeight`的变量。为此，我们正在使用`Titanium.Platform.displayCaps`命名空间中可用的两个属性；即`platformWidth`和`platformHeight`。一旦我们有了这些值，就很容易创建我们的视图并使用一些非常简单的计算来布局它们。
- en: 'The following is an example of the same screen being rendered in two very different
    resolutions on both the iPhone and Android:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在iPhone和Android上以两种非常不同的分辨率渲染相同屏幕的示例：
- en: '![How it works…](img/3968_11_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/3968_11_01.jpg)'
- en: Understanding device orientation modes
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解设备方向模式
- en: One of the great benefits to users with current smartphones is the ability to
    hold the device in any way possible and have the screen rotate to suit its orientation.
    Titanium allows you to fire event handlers based on orientation changes in your
    application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于当前智能手机用户来说，一个巨大的好处是能够以任何可能的方式握持设备，并且屏幕会旋转以适应其方向。Titanium允许你根据应用中的方向变化来触发事件处理程序。
- en: In this recipe, we will create an event handler that fires whenever the orientation
    on the device is changed, and we will re-arrange some UI components on our screen
    accordingly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个事件处理程序，每当设备上的方向发生变化时，它都会触发，并且我们将相应地重新排列屏幕上的某些UI组件。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    3` folder.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的完整源代码可以在`/Chapter 11/Recipe 3`文件夹中找到。
- en: How to do it…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Open your `app.js` file, remove any existing code, and type in the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的`app.js`文件，删除任何现有代码，并输入以下内容：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![How to do it…](img/3968_11_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现…](img/3968_11_02.jpg)'
- en: Try running your app now in the emulator or on your device, and orientating
    the screen between landscape and potrait modes. You should see changes like those
    in the previous screenshot!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试在模拟器或设备上运行你的应用，并在横屏和竖屏模式之间调整屏幕方向。你应该会看到与之前截图中的变化类似的变化！
- en: How it works…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We are attaching an event listener into the `Ti.Gesture` and once the orientation
    of the device changes this event handler is fired and we can re-arrange the components
    on the screen as we see fit. Technically, we can really do anything we want within
    this handler. A great example might be having a `TableView` whilst in portrait
    mode and opening a new window containing a `MapView` when the user orientates
    the screen into landscape mode. Here we are simply changing both the colour of
    our main view object and the text property of the label contained within it in
    order to highlight the changes in the device orientation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个事件监听器添加到`Ti.Gesture`中，一旦设备方向发生变化，这个事件处理程序就会被触发，我们可以根据需要重新排列屏幕上的组件。技术上，我们可以在这个处理程序中真正做任何我们想做的事情。一个很好的例子是在纵向模式下有一个`TableView`，当用户将屏幕旋转到横向模式时，打开一个包含`MapView`的新窗口。在这里，我们只是改变我们主要视图对象的颜色和其中标签的文本属性，以突出显示设备方向的变化。
- en: Coding around differences between the iOS and Android APIs
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS和Android API之间的差异中进行编码
- en: Although Appcelerator Titanium makes much of the hard work of integrating with
    numerous operating systems and devices invisible to you, the developer, there
    are going to be times when you simply have to write some code that is platform
    specific. The most common way to do this is by checking the `osname` property
    from the `Titanium.Platform` namespace.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Appcelerator Titanium使开发者对集成多个操作系统和设备的繁琐工作变得不可见，但仍然会有一些时候，你不得不编写一些特定平台的代码。最常见的方法是通过检查`Titanium.Platform`命名空间中的`osname`属性来实现。
- en: In this recipe we will create a simple screen the shows a custom activity indicator
    when the device is an iPhone, and a standard indicator when the user is on an
    Android device.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个简单的屏幕，当设备是iPhone时显示自定义活动指示器，当用户在Android设备上时显示标准指示器。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    4` folder.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的完整源代码可以在`/Chapter 11/Recipe 4`文件夹中找到。
- en: How to do it…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Open your `app.js` file, remove any existing code, and type in the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的`app.js`文件，删除任何现有代码，并输入以下内容：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now run your application in both the Android and iPhone simulators. You should
    be able to tell that the code we wrote has recognized which platform you're running
    and is displaying an activity indicator differently on each.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在Android和iPhone模拟器中运行你的应用程序。你应该能够看出我们编写的代码已经识别出你正在运行的平台，并且在每个平台上以不同的方式显示活动指示器。
- en: How it works…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: This simple recipe shows you how to code around differences in the two platforms
    using the simplest of "if" statements, namely by checking the `osname` of the
    current device using the `Titanium.Platform.osname` property. We have put this
    check to good use by only displaying our custom activity indicator view when we're
    on an iPhone. On the Android platform, this is unnecessary as the activity indicator
    will appear as a modal view on screen above all others simply by using its`".show()"`
    method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的菜谱展示了如何使用最简单的“if”语句来处理两个平台之间的差异，即通过使用`Titanium.Platform.osname`属性检查当前设备的`osname`。我们通过仅在iPhone上显示我们的自定义活动指示器视图来充分利用这个检查。在Android平台上，这是不必要的，因为活动指示器只需使用其`".show()"`方法就会作为模态视图出现在屏幕上所有其他视图之上。
- en: 'You can use this property to check the platform whenever you need to display
    a separate UI component or integrate with a platform independent API. An example
    of this recipe running on each device is shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此属性在需要显示单独的UI组件或与平台无关的API集成时检查平台。以下截图显示了此菜谱在每种设备上的运行示例：
- en: '![How it works…](img/3968_11_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/3968_11_05.jpg)'
- en: Ensuring your device can make phone calls
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保您的设备可以拨打电话
- en: With all of the technical wizardry and touch-screen goodness that are now packed
    into modern day smartphones, it's easy to forget that their primary function is
    still that of a telephone which is capable of making and receiving voice calls.
    However, there may be times when the user's device is not capable of performing
    a call for whatever reason (poor network service, lack of call functionality that
    is iPod touch user, and so on).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然现代智能手机集成了所有技术魔法和触摸屏的便利性，但很容易忘记它们的主要功能仍然是电话，能够进行和接收语音通话。然而，可能会有时候，由于某种原因（网络服务差、iPod
    touch用户缺少电话功能等），用户的设备无法进行通话。
- en: In this recipe, we will attempt to make a phone call by first checking on the
    device's capabilities and throwing an error message when this is not possible.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将尝试通过首先检查设备的性能，并在无法实现时抛出一个错误信息来拨打一个电话。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    5` folder.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的完整源代码可以在 `/第11章/菜谱5` 文件夹中找到。
- en: How to do it…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open your `app.js` file, remove any existing code, and type in the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的`app.js`文件，删除任何现有代码，并输入以下内容：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run your application now either in the simulator or on a device not capable
    of making calls, such as an iPod Touch. You should see an alert appear stating
    that the device can not action the requested phone call.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行您的应用程序，无论是在模拟器中还是在无法拨打电话的设备上，例如iPod Touch。您应该会看到一个弹窗出现，表明该设备无法执行所请求的电话呼叫。
- en: How it works…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Here we are simply using the Titanium Platform namespace to determine what
    kind of device the user is currently using, and providing an error message when
    that device is of the type iPod, iPad, or the emulator, as seen in the following
    screenshot. If the device in question is capable of making phone calls, such as
    the iPhone or an Android smartphone, then the device''s phone API is called via
    means of a special URL request:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是使用Titanium平台命名空间来确定用户当前正在使用哪种设备，并在设备为iPod、iPad或模拟器时提供错误信息，如以下截图所示。如果所讨论的设备能够进行电话呼叫，例如iPhone或Android智能手机，那么将通过特殊URL请求的方式调用设备的电话API：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As long as the phone number being passed is valid, the device will launch the
    calling screen and attempt to place the call on the user's behalf.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 只要传入的电话号码有效，设备将启动拨号界面，并尝试代表用户进行通话。
- en: '![How it works…](img/3968_11_03.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/3968_11_03.jpg)'
