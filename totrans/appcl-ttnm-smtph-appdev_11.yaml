- en: Chapter 11. Platform Differences, Device Information, and Quirks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Gathering information about your device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining the device's screen dimensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding device orientation modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding around differences between the iOS and Android APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring your device can make phone calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to go through a number of platform differences
    between iOS and Android, as well as show you how to code around these differences.
    We'll also highlight how to gather information about the device your application
    is running on, including its screen dimensions and capabilities, such as the ability
    to make a phone call.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this entire chapter can be found in the `/Chapter
    11/PlatformDiffs` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering information about your device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The majority of information about the current device is available through the
    `Titanium.Platform` namespace. It is here that we can determine a host of device-specific
    data, including the battery level, device OS and version, current device language,
    the screen resolution, and more. Knowing this information is important, as it
    will give you a series of clues as to what is happening on the physical device.
    One example is that you may wish to back up a user's application data if the battery
    dips below a certain percentage, in case the device was to shut down and data
    was lost. More commonly, you will use device properties such as `Titanium.Platform.osname`
    to determine what operating system your app is currently running under, such as
    iPhone, iPad, or Android.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To prepare for this recipe, open up Titanium Studio and log in if you have
    not already done so. If you need to register a new account, you can do so for
    free directly from within the application. Once you are logged in, click on **New
    Project**, and the details window for creating a new project will appear. Enter
    in **PlatformDiffs** as the name of the app, and fill in the rest of the details
    with your own information. Open the `app.js` file and remove everything apart
    from the instantiation of the root window and the `win1` object''s open method,
    so that it looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, back in the `app.js` file, we are going to simply create a number of labels
    and request the values for each from the properties available to us in the `Titanium.Platform`
    namespace. These values will then be displayed as text on-screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each of the labels in this code sample represents a different piece of information
    about your device and its capabilities. There is nothing particularly complicated
    about the code here but it's the methods themselves that are important.
  prefs: []
  type: TYPE_NORMAL
- en: Most of these are pretty self-explanatory. The methods for Battery, Memory,
    Architecture, and Model all provide you with information about the device and
    its specific capabilities. You may use these at certain times during your application's
    lifecycle, for instance, auto-saving data on a form when the battery reaches a
    certain critical level.
  prefs: []
  type: TYPE_NORMAL
- en: The most useful of all of these methods is `Titanium.Platform.osname`. It is
    this method that you will use constantly throughout the development of a Titanium
    cross-platform app as you will use it to check whether you're on iPhone or the
    Android platform, as seen in the following screenshot, and run certain code depending
    on that result.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3968_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Obtaining the device's screen dimensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we developers are currently very lucky with the iPhone platform and its
    single resolution of 320x480 pixels, the same can't be said for Android. It is
    the Android platform in particular that, due to the way it's distributed among
    many manufacturers, has a number of differing screen ratios and resolutions. It
    is inevitable that there will be times where you may need to calculate the position
    of an object depending on the size of the current screen, without constantly resorting
    to a series of `Titanium.Platform.osname` checks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the introduction of the iPhone 4, all new iOS devices have a retina display.
    Essentially, the screen resolution is still at 320x480 but the DPI is doubled,
    meaning the effective resolution is actually 640x960\. Implementing for both these
    resolutions is very easy. Simply name all of your image files as normal, and then
    all of the double resolution files are named in the same way with the addition
    of an `@2x` flag. So if you had an image called `header.png`, which is designed
    for 320x480, you can create an image of double the size and name it `header@2x.png`
    and this will automatically be picked up by all iOS retina displays.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will generate three views, one that takes up the bottom half
    of the screen, and another two that take up only the top. We'll do this using
    the `Titanium.Platform.displayCaps` functions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your `app.js` file, we are going to create three different views, each taking
    up a separate portion of the screen. Remove any existing code and type in the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code here is pretty straightforward. Put simply, we are assigning the width
    and height values of the device to the two variables called `windowWidth` and
    `windowHeight`. To do this, we are using two of the properties available to us
    in the `Titanium.Platform.displayCaps` namespace; namely `platformWidth` and `platformHeight`.
    Once we have these values it's easy to then create our views and lay them out
    using some very simple calculations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the same screen being rendered in two very different
    resolutions on both the iPhone and Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3968_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Understanding device orientation modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great benefits to users with current smartphones is the ability to
    hold the device in any way possible and have the screen rotate to suit its orientation.
    Titanium allows you to fire event handlers based on orientation changes in your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create an event handler that fires whenever the orientation
    on the device is changed, and we will re-arrange some UI components on our screen
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your `app.js` file, remove any existing code, and type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/3968_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Try running your app now in the emulator or on your device, and orientating
    the screen between landscape and potrait modes. You should see changes like those
    in the previous screenshot!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are attaching an event listener into the `Ti.Gesture` and once the orientation
    of the device changes this event handler is fired and we can re-arrange the components
    on the screen as we see fit. Technically, we can really do anything we want within
    this handler. A great example might be having a `TableView` whilst in portrait
    mode and opening a new window containing a `MapView` when the user orientates
    the screen into landscape mode. Here we are simply changing both the colour of
    our main view object and the text property of the label contained within it in
    order to highlight the changes in the device orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Coding around differences between the iOS and Android APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Appcelerator Titanium makes much of the hard work of integrating with
    numerous operating systems and devices invisible to you, the developer, there
    are going to be times when you simply have to write some code that is platform
    specific. The most common way to do this is by checking the `osname` property
    from the `Titanium.Platform` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe we will create a simple screen the shows a custom activity indicator
    when the device is an iPhone, and a standard indicator when the user is on an
    Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    4` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your `app.js` file, remove any existing code, and type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now run your application in both the Android and iPhone simulators. You should
    be able to tell that the code we wrote has recognized which platform you're running
    and is displaying an activity indicator differently on each.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This simple recipe shows you how to code around differences in the two platforms
    using the simplest of "if" statements, namely by checking the `osname` of the
    current device using the `Titanium.Platform.osname` property. We have put this
    check to good use by only displaying our custom activity indicator view when we're
    on an iPhone. On the Android platform, this is unnecessary as the activity indicator
    will appear as a modal view on screen above all others simply by using its`".show()"`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use this property to check the platform whenever you need to display
    a separate UI component or integrate with a platform independent API. An example
    of this recipe running on each device is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3968_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ensuring your device can make phone calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With all of the technical wizardry and touch-screen goodness that are now packed
    into modern day smartphones, it's easy to forget that their primary function is
    still that of a telephone which is capable of making and receiving voice calls.
    However, there may be times when the user's device is not capable of performing
    a call for whatever reason (poor network service, lack of call functionality that
    is iPod touch user, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will attempt to make a phone call by first checking on the
    device's capabilities and throwing an error message when this is not possible.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code for this recipe can be found in the `/Chapter 11/Recipe
    5` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your `app.js` file, remove any existing code, and type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Run your application now either in the simulator or on a device not capable
    of making calls, such as an iPod Touch. You should see an alert appear stating
    that the device can not action the requested phone call.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we are simply using the Titanium Platform namespace to determine what
    kind of device the user is currently using, and providing an error message when
    that device is of the type iPod, iPad, or the emulator, as seen in the following
    screenshot. If the device in question is capable of making phone calls, such as
    the iPhone or an Android smartphone, then the device''s phone API is called via
    means of a special URL request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As long as the phone number being passed is valid, the device will launch the
    calling screen and attempt to place the call on the user's behalf.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3968_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
