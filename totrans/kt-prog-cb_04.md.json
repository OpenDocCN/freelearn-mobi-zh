["```kt\npublic void foo(int a, int b=10){\n}\n```", "```kt\npublic void foo(int a){\n}\n\npublic void foo(int a, int b){\n}\n```", "```kt\npublic void foo (int a,double b, String c){\n}\n```", "```kt\npublic void foo (int a,double b, String c),\npublic void foo (int a,double b) ,\npublic void foo (double b, String c),\npublic void foo (int a, String c),\npublic void foo (int a),\npublic void foo (double b),\npublic void foo (String c)\n```", "```kt\nfun main(args: Array<String>) {\n    foo()    \n    foo(1)\n    foo(1,0.1)\n    foo(1,0.1,\"custom string\")\n}\nfun foo(a:Int=0, b: Double =0.0, c:String=\"some default value\"){\n    println(\"a=$a , b=$b ,c = $c\")\n}\n```", "```kt\nOutput:\na=0 , b=0.0 ,c = some default value\na=1 , b=0.0 ,c = some default value\na=1 , b=0.1 ,c = some default value\na=1 , b=0.1 ,c = custom string\n```", "```kt\ndata class Event(var eventName: String? = \"\", var eventSchedule: Date? = Date(), var isPrivate: Boolean = false)\n```", "```kt\nEvent(\"Celebration\")\nEvent(\"Ceberation\",Date())\nEvent(\"Ceberation\",Date(),true)\n```", "```kt\nnew Event(\"Celebration\")\nnew Event(\"Celebration\",Date())\nnew Event(\"Celebration\",Date(),true)\n```", "```kt\ndata class Event @JvmOverloads constructor (var eventName: String? = \"\", var date: Date? = Date(), var isPrivate: Boolean = false)\n```", "```kt\n@JvmOverloads fun foo(a:Int=0, b: Double =0.0, c:String=\"some default value\"){\n println(\"a=$a , b=$b ,c = $c\")\n }\n```", "```kt\nfun main(args: Array<String>) {\n     foo(b=0.9)\n     foo(a=1,c=\"Custom string\")\n}\n fun foo(a:Int=0, b: Double =0.0, c:String=\"some default value\"){\n     println(\"a=$a , b=$b ,c = $c\")\n}\n```", "```kt\nOutput:\na=0 , b=0.9 ,c = some default value\na=1 , b=0.0 ,c = Custom string\n```", "```kt\nfoo(1, 0.0, \"Custom string\")\n```", "```kt\ndata class AndroidFlavours (var name:String, val image:Int)\n```", "```kt\nval flavorList= listOf<AndroidFlavours>(\n        AndroidFlavours(\"Cupcake\",R.drawable.cupcake),\n        AndroidFlavours(\"Donut\",R.drawable.donut),\n        AndroidFlavours(\"Eclair\",R.drawable.eclair),\n        AndroidFlavours(\"Froyo\",R.drawable.froyo),\n        AndroidFlavours(\"Gingerbread\",R.drawable.gingerbread),\n        AndroidFlavours(\"HoneyComb\",R.drawable.honeycomb),\n        AndroidFlavours(\"Icecream Sandwich\",R.drawable.icecream),\n        AndroidFlavours(\"Jellybean\",R.drawable.jellybean),\n        AndroidFlavours(\"KitKat\",R.drawable.kitkat),\n        AndroidFlavours(\"Lollipop\",R.drawable.lollipop))\n```", "```kt\nclass AndroidFlavourAdapter:RecyclerView.Adapter<AndroidFlavourAdapter.FlavourViewHolder>() {\n    var flavourItems:List<AndroidFlavours> by Delegates.observable(emptyList()){\n        property, oldValue, newValue ->\n        notifyChanges(oldValue,newValue)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FlavourViewHolder {\n        return FlavourViewHolder(parent.inflate(R.layout.flavour_item))\n    }\n\n    override fun getItemCount(): Int =flavourItems.size\n\n    override fun onBindViewHolder(holder: FlavourViewHolder, position: Int) {\n        holder.name.text=flavourItems.get(holder.adapterPosition).name\n        holder.image.loadImage(flavourItems.get(holder.adapterPosition).image)\n    }\n\n    inner class FlavourViewHolder(var view: View):RecyclerView.ViewHolder(view){\n        var name:TextView = view.findViewById(R.id.textView)\n        var image:ImageView = view.findViewById(R.id.imageView)\n    }\n}\n```", "```kt\nfun ImageView.loadImage(image: Int) {\n    Glide.with(context).load(image).into(this)\n}\n```", "```kt\nvar flavourItems:List<AndroidFlavours> by Delegates.observable(emptyList()){\n    property, oldValue, newValue ->\n    notifyChanges(oldValue,newValue)\n}\n\n```", "```kt\nprivate fun notifyChanges(oldValue: List<AndroidFlavours>, newValue: List<AndroidFlavours>) {\n    val diff = DiffUtil.calculateDiff(object : DiffUtil.Callback() {\n        override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any? {\n            val oldFlavor=oldValue.get(oldItemPosition)\n            val newFlavor=newValue.get(newItemPosition)\n            val bundle=Bundle()\n            if(!oldFlavor.name.equals(newFlavor.name)){\n                bundle.putString(\"name\",newFlavor.name)\n            }\n            if(!oldFlavor.image.equals(newFlavor.image)){\n                bundle.putInt(\"image\",newFlavor.image)\n            }\n            if(bundle.size()==0) return null\n            return bundle\n        }\n\n        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {\n            return oldValue.get(oldItemPosition)==newValue.get(newItemPosition)\n        }\n\n        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {\n            return oldValue.get(oldItemPosition).name.equals(newValue.get(newItemPosition).name)&&oldValue.get(oldItemPosition).image.equals(newValue.get(newItemPosition).image)\n        }\n\n        override fun getOldListSize() = oldValue.size\n\n        override fun getNewListSize() = newValue.size\n\n    })\n\n    diff.dispatchUpdatesTo(this)\n}\n```", "```kt\nmAdapter= AndroidFlavourAdapter()\nflavour_list.layoutManager=LinearLayoutManager(this)\nflavour_list.adapter=mAdapter\nmAdapter.flavourItems=flavorList\nshuffle.setOnClickListener {\n    mAdapter.flavourItems=flavorList.shuffle()\n}\n```", "```kt\nfun <E> List<E>.shuffle(): MutableList<E> {\n    val list = this.toMutableList()\n    Collections.shuffle(list)\n    return list\n}\n```", "```kt\noverride fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any? {\n    val oldFlavor=oldValue.get(oldItemPosition)\n    val newFlavor=newValue.get(newItemPosition)\n    val bundle=Bundle()\n    if(!oldFlavor.name.equals(newFlavor.name)){\n        bundle.putString(\"name\",newFlavor.name)\n    }\n    if(!oldFlavor.image.equals(newFlavor.image)){\n        bundle.putInt(\"image\",newFlavor.image)\n    }\n    if(bundle.size()==0) return null\n    return bundle\n}\n```", "```kt\ndiff.dispatchUpdatesTo(this)\n```", "```kt\noverride fun onBindViewHolder(holder: FlavourViewHolder, position: Int, payloads: MutableList<Any>?) {\n    if (payloads != null) {\n        if (payloads.isEmpty())\n            return onBindViewHolder(holder,position)\n        else {\n            val o = payloads.get(0) as Bundle\n            for (key in o.keySet()) {\n                if (key == \"name\") {\n                    holder.name.text=o.getString(\"name\")\n                } else if (key == \"image\") {\n                    holder.image.loadImage(o.getInt(\"image\"))\n                }\n            }\n        }\n    }\n}\n```", "```kt\nvar <propertyName>[: <PropertyType>] [= <property_initializer>]  [<getter>]  [<setter>]\n```", "```kt\nfun main(args: Array<String>) {\n    val sample=Sample()\n    println(sample.isListBig)\n}\nclass Sample{\n    val array= mutableListOf<Int>(1,2,3)\n    val isListBig:Boolean\n        get()=array.size>2\n}\n```", "```kt\nval isListBig get()=array.size>2\n```", "```kt\npublic setIsListBig(boolean isListBig){\n    this.isListBig=isListBig\n}\n```", "```kt\nvar isListBig :Boolean = false\n    set(value) {\n        field= array.size>2\n    }\n```", "```kt\nvar isListBig :Boolean = false\n    private set(value) {\n        field= array.size>2\n    }\n```", "```kt\nvar mPresenter:MainActivityMvpPresenter?=null\n    @Inject set\n```", "```kt\nclass SameClass {\n    var name=\"aanand\"\n    get() = field.toUpperCase()\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var s=SameClass()\n    println(s.name)\n}\n```", "```kt\nclass Student(val name: String, age: Int) {\n  var age: Int = age\n      set(value) {\n        println(\"Setting age to $value\")\n        field = value\n  }\n}\n```", "```kt\nprotected var name=\"aanand\"\nprotected get() = field.toUpperCase()\n```", "```kt\nprotected var name=\"aanand\"\n    private set\n```", "```kt\nprotected var name=\"aanand\"\n    public set\n```", "```kt\nfun main(args: Array<String>) {\n    someMethod(\"as\",\"you\",\"know\",\"this\",\"works\")\n}\nfun someMethod(vararg a: String) {\n    for (a_ in a) {\n        println(a_)\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val list = arrayOf(\"as\",\"you\",\"know\",\"this\",\"works\")\n    someMethod(*list)\n}\nfun someMethod(vararg a: String) {\n    for (a_ in a) {\n        println(a_)\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val list = arrayOf(\"as\",\"you\",\"know\",\"this\",\"works\")\n    someMethod(3, *list)\n}\nfun someMethod(b: Int, vararg a: String) {\n    for (a_ in a) {\n        println(a_)\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    someMethod(\"3\", \"as\",\"you\",\"know\",\"this\",\"works\")\n}\nfun someMethod(b: String, vararg a: String) {\n    println(\"b: \" + b)\n    for (a_ in a) {\n        println(a_)\n    }\n}\n```", "```kt\nb: 3\nas\nyou\nknow\nthis\nworks\n```", "```kt\n// does not compile\nfun main(args: Array<String>) {\n    someMethod(\"3\", \"as\",\"you\",\"know\",\"this\",\"works\", \"what\")\n}\nfun someMethod(b: String, vararg a: String, c: String) {\n    println(\"b: \" + b)\n    for (a_ in a) {\n        println(a_)\n    }\n    println(\"c: \" + c)\n}\n```", "```kt\nfun main(args: Array<String>) {\n    someMethod(\"3\", \"as\",\"you\",\"know\",\"this\",\"works\", c = \"what\")\n}\nfun someMethod(b: String, vararg a: String, c: String) {\n    println(\"b: \" + b)\n    for (a_ in a) {\n        println(a_)\n    }\n    println(\"c: \" + c)\n}\n```", "```kt\nb: 3\nas\nyou\nknow\nthis\nworks\nc: what\n```", "```kt\nfun main(args: Array<String>) {\n    someMethod(\"3\", \"as\",\"you\",\"know\",\"this\",\"works\")\n}\nfun someMethod(b: String = \"x\", vararg a: String) {\n    println(\"b: \" + b)\n    for (a_ in a) {\n        println(a_)\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    someMethod(a = *arrayOf(\"3\", \"as\",\"you\",\"know\",\"this\",\"works\"))\n}\nfun someMethod(b: String = \"x\", vararg a: String) {\n    println(\"b: \" + b)\n    for (a_ in a) {\n        println(a_)\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val funcMultiply = {a:Int, b:Int -> a*b}\n    println(funcMultiply(4,3))\n    val funcSayHi = {name: String -> println(\"Hi $name\")} \n    funcSayHi(\"John\")\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val funcMultiply : (Int, Int)->Int = {a:Int, b:Int -> a*b}\n    println(funcMultiply(4,3))\n    val funcSayHi : (String)->Unit = {name: String -> println(\"Hi $name\")} \n    funcSayHi(\"John\")\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val funcMultiply : (Int, Int)->Int = {a:Int, b:Int -> a*b}\n    val funcSum : (Int, Int)->Int = {a:Int, b:Int -> a+b}\n    performMath(3,4,funcMultiply)\n    performMath(3,4,funcSum)\n}\nfun performMath(a:Int, b:Int, mathFunc : (Int, Int) -> Int) : Unit {\n    println(\"Value of calculation: ${mathFunc(a,b)}\")\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val productPrice1 = 600; // free delivery of order above 499\n    val productPrice2 = 300; // not eligible for free deliver\n    val totalCost1 = totalCost(productPrice1)\n    val totalCost2 = totalCost(productPrice2)\n\n    println(\"Total cost for item 1 is ${totalCost1(productPrice1)}\")\n    println(\"Total cost for item 2 is ${totalCost2(productPrice2)}\")\n}\nfun totalCost(productCost:Int) : (Int) -> Int{\n    if(productCost > 499){\n        return { x -> x }\n    }\n    else {\n        return { x -> x + 50 }\n    }\n}\n```", "```kt\npackage packageA\nfun foo(){\n    println(\"calling from boo method\")\n}\n```", "```kt\nimport packageA.*\nfun main(args: Array<String>) {\n    foo()\n}\n```", "```kt\npackage packageA\nobject Foo{\n    fun callFoo() = println(\"Foo\")\n    var foo=\"foo\"\n}\n```", "```kt\nFoo.callFoo()\n```", "```kt\nfun main(args: Array<String>) {\n    SampleClass.foo()\n}\nclass SampleClass{\n    companion object {\n        fun foo()= print(\"In foo method\")\n    }\n}\n```", "```kt\nSampleClass.Companion.foo();\n```", "```kt\ncompanion object {\n    @JvmStatic\n    fun foo()= print(\"In foo method\")\n}\n```", "```kt\nprivate static void printFile() throws IOException {\n    InputStream input = null;\n\n    try {\n        input = new FileInputStream(\"sampleFile.txt\");\n        // Some operation using input object\n    } finally {\n        if(input != null){\n            input.close();\n        // closing the resource\n        }\n    }\n}\n```", "```kt\ntry(FileInputStream input = new FileInputStream(\"file.txt\")) {\n        int data = input.read();\n        // operations on input object\n    }\n```", "```kt\nFileInputStream(\"file.txt\").use {\n    input ->\n    var data = input.read()\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var sum=0\n    var listOfInteger= arrayOf(0,1,2,3,4,5,6,7)\n    listOfInteger.forEach {\n        sum+=it\n    }\n    println(sum)\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var str1 = \"The start of a \"\n    val addStr = fun String.(successor: String): String {\n        return this + successor \n    }\n    str1 = str1.addStr(\"beautiful day.\")\n    println(str1)\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var str1 = \"The start of a \"\n    val addStr = fun String.(successor: String): Int {\n        return this.length + successor.length\n    }\n    var x = str1.addStr(\"beautiful day.\")\n    println(x)\n    fun testIfEqual(op: (String, String) -> Int, a: String, b: String, c: Int) =\n    assert(op(a, b) == c)\n\n    testIfEqual(addStr, \"The start of a \", \"beautiful day.\", str1.length + \"beautiful    day.\".length) // OK\n}\n```", "```kt\nreceiver.functionLliteral(arguments) -> ReturnType\n```", "```kt\nfun main(args: Array<String>) {\n    val funcMultiply = {a:Int, b:Int -> a*b}\n    println(funcMultiply(4,3))\n    val funcSayHi = {name: String -> println(\"Hi $name\")} \n    funcSayHi(\"John\")\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var funcMultiply = fun (a: Int, b: Int): Int {return a*b}\n    println(funcMultiply(4,3))\n    fun(name: String): Unit = println(\"Hi $name\")\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var funcMultiply = fun(a: Int, b: Int): Int { return a*b }\n    var funcSum = fun(a: Int, b: Int): Int { return a+b }\n    performMath(3,4,funcMultiply)\n    performMath(3,4,funcSum)\n}\nfun performMath(a:Int, b:Int, mathFunc : (Int, Int) -> Int) : Unit {\n    println(\"Value of calculation: ${mathFunc(a,b)}\")\n}\n```", "```kt\nfun main(args: Array<String>) {\n    performMath(3,4,fun(a: Int, b: Int): Int = a*b )\n    performMath(3,4,fun(a: Int, b: Int): Int = a+b )\n}\nfun performMath(a:Int, b:Int, mathFunc : (Int, Int) -> Int) : Unit {\n    println(\"Value of calculation: ${mathFunc(a,b)}\")\n}\n```"]