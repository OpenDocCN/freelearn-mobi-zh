- en: Building a Foundation with Swift
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Swift构建基础
- en: Now that we have had a short tour of Xcode, it is time to start learning about
    Swift. Remember, if you are new to programming, things will be very different
    for you, so take your time. The important skills that you will learn here will
    set you up with a solid foundation in iOS development. If you have previous programming
    experience, you should still review this chapter, as it can only enhance your
    programming skills and act as a refresher for you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Xcode进行了简要的游览，是时候开始学习Swift了。记住，如果你是编程新手，对你来说，事情将会非常不同，所以请慢慢来。在这里你将学习的重要技能将为你打下iOS开发的坚实基础。如果你有之前的编程经验，你仍然应该复习这一章，因为它可以增强你的编程技能，并作为你的复习材料。
- en: On June 2, 2014, Apple changed the game for iOS development, because this was
    the day Swift was announced to the world. With this announcement, everybody was
    put on an even playing field, because they had to learn a new programming language.
    Swift has brought a more modern approach to developing apps and has seen a huge
    influx of new developers of all ages wanting to build iOS apps. But enough about
    history! Let's dig in and see what you are going to learn.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年6月2日，苹果公司改变了iOS开发的格局，因为这是Swift被宣布于世的那一天。随着这一宣布，每个人都站在了同一起跑线上，因为他们必须学习一门新的编程语言。Swift为开发应用程序带来了一种更现代的方法，并吸引了大量不同年龄段的开发者想要构建iOS应用程序。但关于历史的讨论就到这里！让我们深入探讨，看看你将要学习什么。
- en: 'The following will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Playgrounds
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 儿童游乐场
- en: Data types
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型
- en: Variables and constants
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量和常量
- en: Debug and print()
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试和print()
- en: Comments
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释
- en: Playgrounds – an interactive coding environment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Playgrounds – 一个交互式编码环境
- en: 'Before we jump into building the app that we will be creating in later chapters,
    called *Let''s Eat*, we need to understand the basics of Swift. An easy way to
    experiment with Swift is to use **Playgrounds**. It is an interactive coding environment
    that evaluates your code and displays the results. Using Playgrounds gives us
    the ability to work with Swift without needing to create a project. It is great
    for prototyping a particular part of your app. So, whether you are learning or
    experimenting, Playgrounds are an invaluable tool. In order to create a Playground,
    we need to launch Xcode and click on Get started with a playground:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建后面章节中将要创建的应用程序之前，名为*Let's Eat*的应用程序，我们需要了解Swift的基础知识。实验Swift的一个简单方法就是使用**Playgrounds**。它是一个交互式编码环境，可以评估你的代码并显示结果。使用Playgrounds使我们能够在不创建项目的情况下使用Swift。这对于原型设计应用程序的特定部分非常出色。所以，无论你是学习还是实验，Playgrounds都是一个无价的工具。为了创建一个Playground，我们需要启动Xcode并点击“使用Playground开始”：
- en: '![](img/65b9d922-884d-4677-b854-1ad838c5d5a6.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65b9d922-884d-4677-b854-1ad838c5d5a6.png)'
- en: 'The Playground template screen will appear. Make sure that you select iOS,
    then choose Blank and hit Next:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将会显示Playground模板屏幕。确保你选择iOS，然后选择空白并点击下一步：
- en: '![](img/433abbf3-0b74-4b50-9c3b-82eaa0b508be.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/433abbf3-0b74-4b50-9c3b-82eaa0b508be.png)'
- en: You will be asked to give your project a name and a location to save the file;
    name your new `Playground iOS11-Programming-for-Beginners-Ch2`. You can save the
    file anywhere that you like. Now, with the project saved, we can explore Playgrounds
    a bit.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被要求给你的项目命名并指定保存文件的位置；将你的新`Playground iOS11-Programming-for-Beginners-Ch2`命名为你喜欢的任何位置。现在，随着项目的保存，我们可以探索Playgrounds了。
- en: 'When you launch the app, you will see five distinct areas:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动应用程序时，你会看到五个不同的区域：
- en: '![](img/19b461bc-b021-4f0d-a56b-6d7da497c1d8.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19b461bc-b021-4f0d-a56b-6d7da497c1d8.png)'
- en: 'Let''s break down each area in Playgrounds:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一分析儿童游乐场的各个区域：
- en: '**Playground editor**: This area is where you will write all of your code.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Playground编辑器**：这个区域是你将编写所有代码的地方。'
- en: '**Results panel**: The **Results panel** is a feature only found in Playgrounds
    and provides immediate feedback.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结果面板**：**结果面板**是Playgrounds中独有的功能，提供即时反馈。'
- en: '**Window Pane Controls**: The **Window Pane Controls** have two groups of icons:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**窗口面板控件**：**窗口面板控件**有两个图标组：'
- en: '![](img/bcad7c34-233b-4a9e-9bb7-74565719d58a.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcad7c34-233b-4a9e-9bb7-74565719d58a.png)'
- en: As we discussed earlier, the first group is called the **Editor Mode** and the
    second group is called the **View**. Refer to the detailed description of these
    icons in the previous chapter for information about what each does.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，第一组被称为**编辑模式**，第二组被称为**视图**。请参考前一章中这些图标的详细描述，以了解每个图标的用途。
- en: '**Debug toggle**: This button allows you to hide and show the Debug panel and
    toggle on the Debug panel.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试切换**：此按钮允许您隐藏和显示调试面板，并在调试面板上切换。'
- en: '**Play/Stop**: This button is used in order to make Playgrounds executes code
    or to stop Playgrounds from running. Typically, Playgrounds runs on its own, but
    sometimes you need to manually toggle this feature on when Playgrounds does not
    execute your code for you.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**播放/停止**：此按钮用于使Playgrounds执行代码或停止Playgrounds运行。通常，Playgrounds会自动运行，但有时当你无法通过Playgrounds为你执行代码时，你需要手动切换此功能。'
- en: 'Now that we have our setup finished, delete everything in this file. Your Playground
    should have three open panels: your Playground editor, the Results panel, and
    the Debug panel. Let''s start digging into some code.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了设置，删除这个文件中的所有内容。你的Playgrounds应该有三个打开的面板：你的Playgrounds编辑器、结果面板和调试面板。让我们开始深入研究一些代码。
- en: Data types – where it all starts
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型 – 一切开始的地方
- en: Swift offers a collection of built-in data types. Its data types are string,
    integer, floating-point numbers, and Booleans. These data types can be found in
    most programming languages. Therefore, if you are not new to programming, you
    can skip this section and start at the variables and constants—where data is held
    section later.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Swift提供了一系列内置的数据类型。其数据类型包括字符串、整数、浮点数和布尔值。这些数据类型在大多数编程语言中都可以找到。因此，如果你不是编程新手，你可以跳过这一部分，并从变量和常量——数据存储的地方部分开始。
- en: Let's walk-through each data type for those of you who are new to programming
    or would like a refresher.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一介绍每种数据类型，对于那些刚开始编程或者想要复习的人来说。
- en: String
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: The first data type we will discuss is string. A string is represented by a
    series of characters. Strings are used to display text in an app. When a string
    is wrapped in quotes, it is known as a string literal. In programming, we cannot
    just add text into Playgrounds. So, in order to write a string, we must wrap our
    string inside quotes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的第一个数据类型是字符串。字符串由一系列字符表示。字符串用于在应用程序中显示文本。当一个字符串被引号括起来时，它被称为字符串字面量。在编程中，我们不能直接将文本添加到Playgrounds中。因此，为了编写一个字符串，我们必须将我们的字符串放在引号内。
- en: 'Let''s now add our name into Playgrounds wrapped in quotes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将我们的名字用引号括起来添加到Playgrounds中：
- en: '![](img/89055737-bc66-4b78-8871-fe1ed1171502.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/89055737-bc66-4b78-8871-fe1ed1171502.png)'
- en: In Playgrounds, your values also will appear inside of your Results panel. So,
    we now know that, in order to create a String, we need to use quotes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Playgrounds中，你的值也会出现在你的结果面板中。所以，我们现在知道，为了创建一个字符串，我们需要使用引号。
- en: Integer data type
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整数数据类型
- en: '**Integers** (**Ints**) are whole numbers, such as 32 and −100\. Integers are
    useful for when you need to do calculations (that is, adding, subtracting, multiplication,
    and so on). Let''s add some numbers into Playgrounds. On the next line, under
    your name, type 32 and then, on the following line, −100:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**整数**（**Ints**）是整数，例如32和`−100`。整数在需要进行计算（即加法、减法、乘法等）时很有用。让我们在Playgrounds中添加一些数字。在下一行，在你的名字下面输入32，然后在下一行输入`−100`：'
- en: '![](img/9929077d-62dd-499e-8ca4-6f4fb0bdd629.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9929077d-62dd-499e-8ca4-6f4fb0bdd629.png)'
- en: Again, you will see both `32` and `−100` in the Results panel under your name.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，你会在自己的名字下看到结果面板中的`32`和`−100`。
- en: Floating-point numbers
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮点数
- en: 'Floating-point numbers are numbers with a fractional component, such as `4.993`,
    `0.5`, and `−234.99`. Let''s add these values into Playgrounds as well:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数是带有小数部分的数字，例如`4.993`、`0.5`和`−234.99`。让我们也将这些值添加到Playgrounds中：
- en: '![](img/da8117fe-e328-4cd4-afa4-feac4b294784.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/da8117fe-e328-4cd4-afa4-feac4b294784.png)'
- en: Booleans
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔值
- en: '**Booleans** (**bools** for short), are referred to as logical, because they
    either can be true or false. Booleans are used when you need to determine whether
    some logic is true or false. For example, did the user log in? This statement
    would either be true, yes, they did or false, no, they did not. So, in Playgrounds,
    add `true` and `false`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**布尔值**（**bools**，简称布尔值），被称为逻辑值，因为它们可以是真或假。布尔值用于确定某些逻辑是真还是假。例如，用户是否登录？这个陈述要么是真的，是的，他们登录了，要么是假的，没有，他们没有登录。所以，在Playgrounds中，添加`true`和`false`：'
- en: '![](img/19f5f763-02ff-4784-a9b3-1b1588476ca1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/19f5f763-02ff-4784-a9b3-1b1588476ca1.png)'
- en: So, now we covered all of the basic data types in Swift. Right now, we have
    no way to use these data types. This is where variables and constants come into
    play.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在已经涵盖了Swift中的所有基本数据类型。目前，我们无法使用这些数据类型。这就是变量和常数发挥作用的地方。
- en: Variables and constants – where data is held
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和常量 – 数据存储的地方
- en: Variables and constants are like a container that holds some kind of data. When
    you want to declare a variable, you have to use the var keyword. Let's declare
    each of the data types we did earlier, but, this time, using variables and constants
    instead.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 变量和常量就像是一个容器，用来存放某种数据。当你想要声明一个变量时，你必须使用 `var` 关键字。让我们声明我们之前做过的每个数据类型，但这次使用变量和常量。
- en: Creating a variable with a string
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用字符串创建变量
- en: 'First, delete what you have entered into Playgrounds already, and now let''s
    declare our first variable, named `fullName`, and set it to your name:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除你在 Playgrounds 中已经输入的内容，现在让我们声明第一个变量，命名为 `fullName`，并将其设置为你的名字：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code says that we have a variable named `fullName` and that it
    is holding a string value of `Craig Clayton`. Your Results panel will have your
    actual name as its data:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码表明我们有一个名为 `fullName` 的变量，并且它包含了一个字符串值 `Craig Clayton`。你的结果面板将显示你的实际名字作为其数据：
- en: '![](img/16fd8a53-0c58-45e7-98b0-3f854449e2c4.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/16fd8a53-0c58-45e7-98b0-3f854449e2c4.png)'
- en: Creating a variable with an integer (Int)
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用整数（Int）创建变量
- en: 'Now, let''s create a variable with an Int called `age` and set it to our age
    (or whatever you want your age to be) by adding the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个名为 `age` 的整型变量，并将其设置为你的年龄（或你想要的任何年龄）通过添加以下内容：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our program now knows that age is an Int. You should see both your name and
    age in the Results panel, just like you did previously:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道 `age` 是一个整型。你应该在结果面板中看到你的名字和年龄，就像你之前做的那样：
- en: '![](img/f3c5140e-6af4-4055-a493-7a7a2b674ae3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f3c5140e-6af4-4055-a493-7a7a2b674ae3.png)'
- en: Debug and print() – detecting your bugs
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和 print() – 检测你的错误
- en: 'We can use the Debug panel (at the bottom of the following screenshot) using `print()`.
    So, let''s see how `print()` works by printing both our name and age. We can do
    this by adding the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用调试面板（以下截图的底部）使用 `print()`。所以，让我们通过打印我们的名字和年龄来看看 `print()` 是如何工作的。我们可以通过添加以下内容来实现：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It should appear on your screen as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该显示在你的屏幕上如下：
- en: '![](img/82e985a4-e794-41f8-a484-6f489146e00c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/82e985a4-e794-41f8-a484-6f489146e00c.png)'
- en: You should now see the output in both the Results and Debug panels. Using `print()`
    allows us to see things in our Debug panel and therefore verify expected results.
    This is a very useful debugging tool.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该在结果和调试面板中看到输出。使用 `print()` 允许我们在调试面板中看到内容，从而验证预期的结果。这是一个非常有用的调试工具。
- en: Adding floating-point numbers
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加浮点数
- en: 'Let''s now add floating-point numbers, using the `let` constant in the Playground:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Playgrounds 中的 `let` 常量来添加浮点数：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/dcad6425-1a30-41cd-8edd-a1ec36c67b2c.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dcad6425-1a30-41cd-8edd-a1ec36c67b2c.png)'
- en: You will notice that a couple of things are different. First, we are using the
    `let` keyword. Using `let` tells our program that this is a constant. Constants
    are variables that cannot be changed once they are set (as opposed to a non-constant
    variable, which can be changed after being set).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到几件事情有所不同。首先，我们使用了 `let` 关键字。使用 `let` 告诉我们的程序这是一个常量。常量是一旦设置后就不能更改的变量（与设置后可以更改的非常量变量相对）。
- en: 'The other thing you might have noticed is that we explicitly set our `version`
    to `Float`. When dealing with a floating-point number, it can be a `Double` or
    a `Float`. Without getting too technical, a `Double` is much more precise than
    a `Float`. The best way to explain this is to use pi as an example. Pi is a number
    in which the digits go on forever. Well, we cannot use a number that goes on forever;
    however, a `Double` and `Float` will handle how precise that number will be. Let''s
    look at the following diagram to see what I mean by precise:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还注意到，我们明确地将 `version` 设置为 `Float`。当处理浮点数时，它可以是 `Double` 或 `Float`。不深入技术细节的话，`Double`
    比起 `Float` 来说更加精确。最好的解释方式是使用 π 作为例子。π 是一个数字，其数字会无限延续。好吧，我们无法使用一个无限延续的数字；然而，`Double`
    和 `Float` 会处理这个数字的精确度。让我们看一下下面的图表，看看我所说的精确度是什么意思：
- en: '![](img/e668a654-f4bb-42b6-98c1-502828d4778b.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e668a654-f4bb-42b6-98c1-502828d4778b.png)'
- en: So, in the preceding example, you can see that `Float` will only display `3.14`,
    whereas `Double` will give you a much more accurate number. In Swift, a `Double`
    is preferred. Therefore, if you do not explicitly set the floating-point number
    to a `Float`, Swift will default it to a `Double`. To set `version` to a `Float`,
    you must purposely set it that way.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在先前的例子中，你可以看到 `Float` 只会显示 `3.14`，而 `Double` 会给出一个更精确的数字。在 Swift 中，`Double`
    是首选的。因此，如果你没有明确地将浮点数设置为 `Float`，Swift 会默认将其设置为 `Double`。要将 `version` 设置为 `Float`，你必须故意这样设置。
- en: Creating a Boolean
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建布尔值
- en: 'Now it is time to create a `Bool`, and we will make it a constant. Enter the
    following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建一个`Bool`并将其设置为常量了。输入以下代码：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/8fd05ea6-16c7-43f9-9c42-72e57ec3a733.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fd05ea6-16c7-43f9-9c42-72e57ec3a733.png)'
- en: 'Since `isConstant` is set, let''s make it `false` by adding this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`isConstant`被设置，让我们通过添加以下内容将其设置为`false`：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On the same line as what you just entered, you now will see a red circle with
    a white dot. The red circle means that there is an error. The white circle inside
    of it means that Xcode can fix the error for you (most of the time):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在你刚刚输入的同一行，你现在将看到一个红色的圆圈，里面有一个白色的点。红色的圆圈表示存在错误。里面的白色圆点表示Xcode可以为你修复错误（大多数时候）：
- en: '![](img/aa5ab7ca-0c35-4b10-8e89-f31bfc208323.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa5ab7ca-0c35-4b10-8e89-f31bfc208323.png)'
- en: You also will notice an error in your Debug panel, which is just a more detailed
    version of the error. This error is telling us that we are trying to change the
    value of a constant when we cannot do so.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你也会在调试面板中注意到一个错误，这只是一个更详细的错误版本。这个错误告诉我们，当我们不能这样做时，我们正在尝试更改常量的值。
- en: 'If you tap on the circle, you will see that Playgrounds suggests that you change
    the `var` to a `let`, since you cannot assign a value to a constant:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击这个圆圈，你会看到Playgrounds建议你将`var`更改为`let`，因为你不能给常量赋值：
- en: '![](img/67884f47-c0fd-49d8-bb25-5ab969ac9a03.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67884f47-c0fd-49d8-bb25-5ab969ac9a03.png)'
- en: Since we want it to remain a constant, let's delete the line `isConstant = false`.
    We have covered basic data types, but there are some other programming basics
    we should discuss as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望它保持为常量，让我们删除`isConstant = false`这一行。我们已经介绍了基本数据类型，但还有一些其他编程基础知识我们也应该讨论。
- en: Hungarian notation
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匈牙利命名法
- en: Typically, I like to use Hungarian notation when writing variables, because
    it acts as an identifier for the data type of the variable. For example, earlier
    we wrote `fullName` and `gradeAvg`. Throughout this book, you will see that I
    use Hungarian notation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我在编写变量时喜欢使用匈牙利命名法，因为它可以作为变量数据类型的标识符。例如，我们之前写了`fullName`和`gradeAvg`。在这本书的整个过程中，你会发现我使用了匈牙利命名法。
- en: Why constants versus variables?
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用常量而不是变量？
- en: You might be asking yourself "*Why would you ever want to make something constant?"*
    Since constants cannot change after you run your app, they keep you from accidentally
    changing a value that should not be changed. Another really good use for constants
    is for base URLs, as you would not want these to change. When you are getting
    data, you do not want to accidentally change the value midway through your app.
    Apple recommends that you use `let` whenever possible. Typically, I will use a
    `let` until Xcode warns me that a `var` is preferable. If I change the value from
    `let` to `var`, then I am verifying that this is the behavior I want.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问自己“*你为什么想要将某个东西设置为常量呢？”* 由于常量在运行你的应用后不能改变，它们可以防止你意外地更改不应该更改的值。常量的另一个非常好的用途是用于基本URL，因为你不希望这些URL发生变化。当你获取数据时，你不想在应用运行过程中意外更改值。苹果建议你尽可能使用`let`。通常，我会使用`let`直到Xcode警告我`var`更可取。如果我从`let`更改为`var`，那么我正在验证这是否是我想要的行为。
- en: Comments – leaving yourself notes or reminders
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释 - 为自己留下笔记或提醒
- en: Comments are a great way to create notes or reminders to yourself. When you
    comment code, it means that it will not be executed when your code runs. There
    are two types of comment used: `//` or `/* */`. `//` is typically used for a one-line
    comment and `/**/` is used for a block of text.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注释是为自己创建笔记或提醒的好方法。当你注释代码时，这意味着它将在你的代码运行时不会被执行。有两种类型的注释被使用：`//` 或 `/* */`。`//`
    通常用于单行注释，而 `/**/` 用于文本块。
- en: You can add comments to your code, such as a To-Do item or just a brief explanation
    of what something is doing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的代码中添加注释，比如一个待办事项或对某个操作简要的解释。
- en: 'Let''s see what both of these look like:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这两个是什么样的：
- en: '![](img/d8366a99-e7b9-482e-82aa-6b88622a0a89.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8366a99-e7b9-482e-82aa-6b88622a0a89.png)'
- en: Type safety and type inference
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型安全和类型推断
- en: Swift is a type-safe language, which means that you are encouraged to be clear
    about the value types with which your code will work. Type inference means that,
    before your code runs, it will be able to quickly check to ensure that you did
    not set anything to a different type. If you do, Xcode will give you an error.
    Why is this good? Let's say that you have an app in the store and that you set
    one of your variables as a `String` in one part of your code, but then accidentally
    set the same variable as an `Int` in another part of your code. This error may
    cause some bad behavior in your app that could cause it to crash. Finding these
    kinds of error is like finding a needle in a haystack. Therefore, type checking
    helps you write safer code by helping you avoid errors when working with different
    types.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 是一种类型安全的语言，这意味着你被鼓励清楚地说明你的代码将与之一起工作的值类型。类型推断意味着，在代码运行之前，它将能够快速检查以确保你没有将任何内容设置为不同的类型。如果你这样做，Xcode
    将会给你一个错误。这有什么好处呢？假设你有一个在商店中的应用程序，你在一部分代码中将一个变量设置为 `String` 类型，但后来不小心在代码的另一部分中将同一个变量设置为
    `Int` 类型。这个错误可能会导致你的应用程序出现一些不良行为，甚至可能导致它崩溃。找到这类错误就像在 haystack 中找针一样。因此，类型检查通过帮助你避免在处理不同类型时出错，从而帮助你编写更安全的代码。
- en: We have now looked at data types and know that strings are for textual data,
    `Int` for integer, `Bool` for boolean, and `Double` and `Float` for floating-point
    numbers. Let's look a bit deeper into data types and see how we can do more than
    just assign them to variables.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了数据类型，知道字符串用于文本数据，`Int` 用于整数，`Bool` 用于布尔值，`Double` 和 `Float` 用于浮点数。让我们更深入地了解数据类型，看看我们如何不仅仅将它们赋值给变量。
- en: Concatenating strings
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串连接
- en: 'String concatenation is the result of combining multiple string literals together
    to form an expression. So, let''s create one by first entering two String literals:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串连接是将多个字符串字面量组合在一起形成一个表达式的结果。所以，让我们先输入两个字符串字面量来创建一个：
- en: '![](img/b5d2aeaf-9c6b-4858-8b28-5d08d6878a33.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5d2aeaf-9c6b-4858-8b28-5d08d6878a33.png)'
- en: 'Combining these two gives us a String concatenation. We can combine Strings
    by using the `+` operator. Add the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 结合这两者，我们得到了字符串连接。我们可以通过使用 `+` 运算符来组合字符串。添加以下内容：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you look in the Results panel, you will notice that there is no space between
    our first and last names.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在结果面板中查看时，你会注意到我们的名字和姓氏之间没有空格。
- en: In addition, if we just put the variables in quotes, they will revert to simple
    string literals and will no longer be variables.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们只是将变量放在引号中，它们将回退为简单的字符串字面量，并且将不再是变量。
- en: String interpolation
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串插值
- en: 'In order to correct that, we can put these variables inside of quotes, which
    is known as string interpolation, using a backslash and parentheses around each
    of our variables inside of the string interpolation. Let''s update our name variable
    to be the following, and you will see the space in the name in the Results panel:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了纠正这一点，我们可以将这些变量放在引号中，这被称为字符串插值，使用反斜杠和括号将字符串插值中的每个变量括起来。让我们更新我们的 `name` 变量，如下所示，你将在结果面板中看到名字中的空格：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After adding the line our code should look something like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这一行后，我们的代码应该看起来像这样：
- en: '![](img/2f50d91b-9c5d-4d89-9fdc-2b208fda901f.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f50d91b-9c5d-4d89-9fdc-2b208fda901f.png)'
- en: 'Now that we know about using variables inside of quotes, we can do the same
    inside of `print()`. Let''s put the `firstName` and `lastName` inside of `print()`,
    as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何在引号中使用变量，我们也可以在 `print()` 中这样做。让我们将 `firstName` 和 `lastName` 放在 `print()`
    中，如下所示：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `print` statements are great for checking to see you are getting the value
    you want:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`print` 语句非常适合检查你是否得到了想要的价值：'
- en: '![](img/47d7a10c-f3f6-4814-8588-c5ca378b45f5.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47d7a10c-f3f6-4814-8588-c5ca378b45f5.png)'
- en: Bam! Now, we have a way to see multiple variables inside of `print()` and to
    create string interpolation by combining multiple strings together. We can do
    much more with `Strings`, and we will cover them later in the book.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Bam! 现在，我们有了在 `print()` 中查看多个变量的方法，并且可以通过将多个字符串组合在一起来创建字符串插值。我们可以用 `Strings`
    做更多的事情，我们将在本书的后面部分介绍它们。
- en: Operations with our integers
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对我们的整数进行操作
- en: 'In our Playground, we know that age is an Int, but with `Int`, we also can
    write arithmetic expressions using numbers, variables/constants, operators, and
    parentheses. Let''s start with addition, subtraction, multiplication, and division.
    Add the following into Xcode:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的沙盒中，我们知道年龄是 `Int` 类型，但使用 `Int`，我们还可以使用数字、变量/常量、运算符和括号来编写算术表达式。让我们从加法、减法、乘法和除法开始。将以下内容添加到
    Xcode 中：
- en: '![](img/57153a96-0333-41a6-bd47-9b93c6c85049.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/57153a96-0333-41a6-bd47-9b93c6c85049.png)'
- en: 'So, sum added two integers (`+` operator) together, totaling `43` in our preceding
    example. Then, we subtracted (`-` operator) sum from `32` to create result (`−11`
    in our example). After that, we took result and multiplied (`*` operator) it by
    `5` (see `-55` in the Results panel). All of this is pretty basic math; however,
    you may have noticed something different with our division equation (`/` operator).
    When you divide two integers, the result will be a third integer. So, instead
    of `-55` divided by `10` equaling `-5.5`, our result was `-5`. In order to get
    the correct floating-point value of `-5.5`, we need to make our division value
    a `Double`. Therefore, let''s add the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在先前的例子中，我们将两个整数（`+` 操作符）相加，总数为 `43`。然后，我们从 `32` 中减去（`-` 操作符）总和以创建结果（在我们的例子中是
    `-11`）。之后，我们将结果乘以（`*` 操作符）`5`（见结果面板中的 `-55`）。所有这些都是相当基本的数学；然而，你可能已经注意到了我们的除法方程（`/`
    操作符）中的不同之处。当你除以两个整数时，结果将是一个整数。所以，`-55` 除以 `10` 等于 `-5.5`，我们的结果是 `-5`。为了得到正确的浮点值
    `-5.5`，我们需要将除法值改为 `Double`。因此，让我们添加以下内容：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After adding the preceding line of code, your code should look something like
    this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加上述代码行之后，你的代码应该看起来像这样：
- en: '![](img/91f50dd7-30e7-4337-b5bd-63d3b83a7f34.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/91f50dd7-30e7-4337-b5bd-63d3b83a7f34.png)'
- en: All of these operations will look familiar to you, but there is one with which
    you might not be familiar and that is the remainder operator. The remainder operator
    returns the remainder when one number is divided by another.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些操作对你来说都很熟悉，但其中有一个你可能不太熟悉，那就是取余操作符。取余操作符返回一个数除以另一个数后的余数。
- en: 'So, for example, `7` divided by `3` equals `2.33`. When we apply the remainder
    operator, we get back `1`. Add the following to Playgrounds:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`7` 除以 `3` 等于 `2.33`。当我们应用取余操作符时，我们得到 `1`。将以下内容添加到 Playgrounds 中：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, your code should look something like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码应该看起来像这样：
- en: '![](img/e930997d-b3b2-45a1-a7e4-356de45d163e.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e930997d-b3b2-45a1-a7e4-356de45d163e.png)'
- en: Increment and decrement
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增量和减量
- en: 'There will be times when you need to increment (increase) or decrement (decrease)
    a value. There are two ways you can accomplish this. Add the following into Playgrounds:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会需要增加（增加）或减少（减少）一个值。你可以通过两种方式实现这一点。将以下内容添加到 Playgrounds 中：
- en: '![](img/8a74a967-a8e3-4dc4-884a-6319a5ca9ddd.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8a74a967-a8e3-4dc4-884a-6319a5ca9ddd.png)'
- en: Both of these options do the same thing, but option `#2` is just written in
    shorthand. The preferred way is to use option `#2`, the `+=` (addition assignment
    operator) and `−=` (subtraction assignment operator), but it really is your preference.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种选项做的是同一件事，但选项 `#2` 只是简写形式。首选的方式是使用选项 `#2`，即 `+=`（加法赋值操作符）和 `−=`（减法赋值操作符），但这完全取决于你的个人喜好。
- en: Comparison operators
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较操作符
- en: 'We also can compare different numerical variables. These might be familiar
    to you from math class. Let''s enter these into Playgrounds:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以比较不同的数值变量。这些可能来自你的数学课程。让我们将这些输入到 Playgrounds 中：
- en: '![](img/507e7085-52cf-4021-ac8b-c44286691fe9.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/507e7085-52cf-4021-ac8b-c44286691fe9.png)'
- en: As you can see in the Results panel, these comparison entries result in true
    or false based on the values that you enter (here, `1` and `2`).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在结果面板中所见，这些比较条目根据你输入的值（这里为 `1` 和 `2`）返回真或假。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have hit the basics and, from this point, if you are new to programming it
    is a good idea to make sure that you understand each topic we covered. As the
    chapters progress, we will cover more and more so take your time and really make
    sure that you are comfortable with all of the topics in this chapter.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经触及了基础，从这一点开始，如果你是编程新手，确保你理解我们涵盖的每个主题是个好主意。随着章节的推进，我们将涵盖更多内容，所以请慢慢来，确保你对本章的所有主题都感到舒适。
