- en: Building a Foundation with Swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have had a short tour of Xcode, it is time to start learning about
    Swift. Remember, if you are new to programming, things will be very different
    for you, so take your time. The important skills that you will learn here will
    set you up with a solid foundation in iOS development. If you have previous programming
    experience, you should still review this chapter, as it can only enhance your
    programming skills and act as a refresher for you.
  prefs: []
  type: TYPE_NORMAL
- en: On June 2, 2014, Apple changed the game for iOS development, because this was
    the day Swift was announced to the world. With this announcement, everybody was
    put on an even playing field, because they had to learn a new programming language.
    Swift has brought a more modern approach to developing apps and has seen a huge
    influx of new developers of all ages wanting to build iOS apps. But enough about
    history! Let's dig in and see what you are going to learn.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Playgrounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables and constants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug and print()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playgrounds – an interactive coding environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we jump into building the app that we will be creating in later chapters,
    called *Let''s Eat*, we need to understand the basics of Swift. An easy way to
    experiment with Swift is to use **Playgrounds**. It is an interactive coding environment
    that evaluates your code and displays the results. Using Playgrounds gives us
    the ability to work with Swift without needing to create a project. It is great
    for prototyping a particular part of your app. So, whether you are learning or
    experimenting, Playgrounds are an invaluable tool. In order to create a Playground,
    we need to launch Xcode and click on Get started with a playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65b9d922-884d-4677-b854-1ad838c5d5a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Playground template screen will appear. Make sure that you select iOS,
    then choose Blank and hit Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/433abbf3-0b74-4b50-9c3b-82eaa0b508be.png)'
  prefs: []
  type: TYPE_IMG
- en: You will be asked to give your project a name and a location to save the file;
    name your new `Playground iOS11-Programming-for-Beginners-Ch2`. You can save the
    file anywhere that you like. Now, with the project saved, we can explore Playgrounds
    a bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you launch the app, you will see five distinct areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19b461bc-b021-4f0d-a56b-6d7da497c1d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s break down each area in Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Playground editor**: This area is where you will write all of your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Results panel**: The **Results panel** is a feature only found in Playgrounds
    and provides immediate feedback.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Window Pane Controls**: The **Window Pane Controls** have two groups of icons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/bcad7c34-233b-4a9e-9bb7-74565719d58a.png)'
  prefs: []
  type: TYPE_IMG
- en: As we discussed earlier, the first group is called the **Editor Mode** and the
    second group is called the **View**. Refer to the detailed description of these
    icons in the previous chapter for information about what each does.
  prefs: []
  type: TYPE_NORMAL
- en: '**Debug toggle**: This button allows you to hide and show the Debug panel and
    toggle on the Debug panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Play/Stop**: This button is used in order to make Playgrounds executes code
    or to stop Playgrounds from running. Typically, Playgrounds runs on its own, but
    sometimes you need to manually toggle this feature on when Playgrounds does not
    execute your code for you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have our setup finished, delete everything in this file. Your Playground
    should have three open panels: your Playground editor, the Results panel, and
    the Debug panel. Let''s start digging into some code.'
  prefs: []
  type: TYPE_NORMAL
- en: Data types – where it all starts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Swift offers a collection of built-in data types. Its data types are string,
    integer, floating-point numbers, and Booleans. These data types can be found in
    most programming languages. Therefore, if you are not new to programming, you
    can skip this section and start at the variables and constants—where data is held
    section later.
  prefs: []
  type: TYPE_NORMAL
- en: Let's walk-through each data type for those of you who are new to programming
    or would like a refresher.
  prefs: []
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first data type we will discuss is string. A string is represented by a
    series of characters. Strings are used to display text in an app. When a string
    is wrapped in quotes, it is known as a string literal. In programming, we cannot
    just add text into Playgrounds. So, in order to write a string, we must wrap our
    string inside quotes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now add our name into Playgrounds wrapped in quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89055737-bc66-4b78-8871-fe1ed1171502.png)'
  prefs: []
  type: TYPE_IMG
- en: In Playgrounds, your values also will appear inside of your Results panel. So,
    we now know that, in order to create a String, we need to use quotes.
  prefs: []
  type: TYPE_NORMAL
- en: Integer data type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Integers** (**Ints**) are whole numbers, such as 32 and −100\. Integers are
    useful for when you need to do calculations (that is, adding, subtracting, multiplication,
    and so on). Let''s add some numbers into Playgrounds. On the next line, under
    your name, type 32 and then, on the following line, −100:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9929077d-62dd-499e-8ca4-6f4fb0bdd629.png)'
  prefs: []
  type: TYPE_IMG
- en: Again, you will see both `32` and `−100` in the Results panel under your name.
  prefs: []
  type: TYPE_NORMAL
- en: Floating-point numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Floating-point numbers are numbers with a fractional component, such as `4.993`,
    `0.5`, and `−234.99`. Let''s add these values into Playgrounds as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da8117fe-e328-4cd4-afa4-feac4b294784.png)'
  prefs: []
  type: TYPE_IMG
- en: Booleans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Booleans** (**bools** for short), are referred to as logical, because they
    either can be true or false. Booleans are used when you need to determine whether
    some logic is true or false. For example, did the user log in? This statement
    would either be true, yes, they did or false, no, they did not. So, in Playgrounds,
    add `true` and `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19f5f763-02ff-4784-a9b3-1b1588476ca1.png)'
  prefs: []
  type: TYPE_IMG
- en: So, now we covered all of the basic data types in Swift. Right now, we have
    no way to use these data types. This is where variables and constants come into
    play.
  prefs: []
  type: TYPE_NORMAL
- en: Variables and constants – where data is held
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables and constants are like a container that holds some kind of data. When
    you want to declare a variable, you have to use the var keyword. Let's declare
    each of the data types we did earlier, but, this time, using variables and constants
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a variable with a string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, delete what you have entered into Playgrounds already, and now let''s
    declare our first variable, named `fullName`, and set it to your name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code says that we have a variable named `fullName` and that it
    is holding a string value of `Craig Clayton`. Your Results panel will have your
    actual name as its data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16fd8a53-0c58-45e7-98b0-3f854449e2c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a variable with an integer (Int)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create a variable with an Int called `age` and set it to our age
    (or whatever you want your age to be) by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Our program now knows that age is an Int. You should see both your name and
    age in the Results panel, just like you did previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3c5140e-6af4-4055-a493-7a7a2b674ae3.png)'
  prefs: []
  type: TYPE_IMG
- en: Debug and print() – detecting your bugs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the Debug panel (at the bottom of the following screenshot) using `print()`.
    So, let''s see how `print()` works by printing both our name and age. We can do
    this by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It should appear on your screen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82e985a4-e794-41f8-a484-6f489146e00c.png)'
  prefs: []
  type: TYPE_IMG
- en: You should now see the output in both the Results and Debug panels. Using `print()`
    allows us to see things in our Debug panel and therefore verify expected results.
    This is a very useful debugging tool.
  prefs: []
  type: TYPE_NORMAL
- en: Adding floating-point numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now add floating-point numbers, using the `let` constant in the Playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/dcad6425-1a30-41cd-8edd-a1ec36c67b2c.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that a couple of things are different. First, we are using the
    `let` keyword. Using `let` tells our program that this is a constant. Constants
    are variables that cannot be changed once they are set (as opposed to a non-constant
    variable, which can be changed after being set).
  prefs: []
  type: TYPE_NORMAL
- en: 'The other thing you might have noticed is that we explicitly set our `version`
    to `Float`. When dealing with a floating-point number, it can be a `Double` or
    a `Float`. Without getting too technical, a `Double` is much more precise than
    a `Float`. The best way to explain this is to use pi as an example. Pi is a number
    in which the digits go on forever. Well, we cannot use a number that goes on forever;
    however, a `Double` and `Float` will handle how precise that number will be. Let''s
    look at the following diagram to see what I mean by precise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e668a654-f4bb-42b6-98c1-502828d4778b.png)'
  prefs: []
  type: TYPE_IMG
- en: So, in the preceding example, you can see that `Float` will only display `3.14`,
    whereas `Double` will give you a much more accurate number. In Swift, a `Double`
    is preferred. Therefore, if you do not explicitly set the floating-point number
    to a `Float`, Swift will default it to a `Double`. To set `version` to a `Float`,
    you must purposely set it that way.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Boolean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it is time to create a `Bool`, and we will make it a constant. Enter the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8fd05ea6-16c7-43f9-9c42-72e57ec3a733.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since `isConstant` is set, let''s make it `false` by adding this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'On the same line as what you just entered, you now will see a red circle with
    a white dot. The red circle means that there is an error. The white circle inside
    of it means that Xcode can fix the error for you (most of the time):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa5ab7ca-0c35-4b10-8e89-f31bfc208323.png)'
  prefs: []
  type: TYPE_IMG
- en: You also will notice an error in your Debug panel, which is just a more detailed
    version of the error. This error is telling us that we are trying to change the
    value of a constant when we cannot do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you tap on the circle, you will see that Playgrounds suggests that you change
    the `var` to a `let`, since you cannot assign a value to a constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67884f47-c0fd-49d8-bb25-5ab969ac9a03.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we want it to remain a constant, let's delete the line `isConstant = false`.
    We have covered basic data types, but there are some other programming basics
    we should discuss as well.
  prefs: []
  type: TYPE_NORMAL
- en: Hungarian notation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typically, I like to use Hungarian notation when writing variables, because
    it acts as an identifier for the data type of the variable. For example, earlier
    we wrote `fullName` and `gradeAvg`. Throughout this book, you will see that I
    use Hungarian notation.
  prefs: []
  type: TYPE_NORMAL
- en: Why constants versus variables?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might be asking yourself "*Why would you ever want to make something constant?"*
    Since constants cannot change after you run your app, they keep you from accidentally
    changing a value that should not be changed. Another really good use for constants
    is for base URLs, as you would not want these to change. When you are getting
    data, you do not want to accidentally change the value midway through your app.
    Apple recommends that you use `let` whenever possible. Typically, I will use a
    `let` until Xcode warns me that a `var` is preferable. If I change the value from
    `let` to `var`, then I am verifying that this is the behavior I want.
  prefs: []
  type: TYPE_NORMAL
- en: Comments – leaving yourself notes or reminders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Comments are a great way to create notes or reminders to yourself. When you
    comment code, it means that it will not be executed when your code runs. There
    are two types of comment used: `//` or `/* */`. `//` is typically used for a one-line
    comment and `/**/` is used for a block of text.
  prefs: []
  type: TYPE_NORMAL
- en: You can add comments to your code, such as a To-Do item or just a brief explanation
    of what something is doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what both of these look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8366a99-e7b9-482e-82aa-6b88622a0a89.png)'
  prefs: []
  type: TYPE_IMG
- en: Type safety and type inference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Swift is a type-safe language, which means that you are encouraged to be clear
    about the value types with which your code will work. Type inference means that,
    before your code runs, it will be able to quickly check to ensure that you did
    not set anything to a different type. If you do, Xcode will give you an error.
    Why is this good? Let's say that you have an app in the store and that you set
    one of your variables as a `String` in one part of your code, but then accidentally
    set the same variable as an `Int` in another part of your code. This error may
    cause some bad behavior in your app that could cause it to crash. Finding these
    kinds of error is like finding a needle in a haystack. Therefore, type checking
    helps you write safer code by helping you avoid errors when working with different
    types.
  prefs: []
  type: TYPE_NORMAL
- en: We have now looked at data types and know that strings are for textual data,
    `Int` for integer, `Bool` for boolean, and `Double` and `Float` for floating-point
    numbers. Let's look a bit deeper into data types and see how we can do more than
    just assign them to variables.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenating strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'String concatenation is the result of combining multiple string literals together
    to form an expression. So, let''s create one by first entering two String literals:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5d2aeaf-9c6b-4858-8b28-5d08d6878a33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Combining these two gives us a String concatenation. We can combine Strings
    by using the `+` operator. Add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When you look in the Results panel, you will notice that there is no space between
    our first and last names.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, if we just put the variables in quotes, they will revert to simple
    string literals and will no longer be variables.
  prefs: []
  type: TYPE_NORMAL
- en: String interpolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to correct that, we can put these variables inside of quotes, which
    is known as string interpolation, using a backslash and parentheses around each
    of our variables inside of the string interpolation. Let''s update our name variable
    to be the following, and you will see the space in the name in the Results panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the line our code should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f50d91b-9c5d-4d89-9fdc-2b208fda901f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we know about using variables inside of quotes, we can do the same
    inside of `print()`. Let''s put the `firstName` and `lastName` inside of `print()`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `print` statements are great for checking to see you are getting the value
    you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47d7a10c-f3f6-4814-8588-c5ca378b45f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Bam! Now, we have a way to see multiple variables inside of `print()` and to
    create string interpolation by combining multiple strings together. We can do
    much more with `Strings`, and we will cover them later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Operations with our integers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our Playground, we know that age is an Int, but with `Int`, we also can
    write arithmetic expressions using numbers, variables/constants, operators, and
    parentheses. Let''s start with addition, subtraction, multiplication, and division.
    Add the following into Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57153a96-0333-41a6-bd47-9b93c6c85049.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, sum added two integers (`+` operator) together, totaling `43` in our preceding
    example. Then, we subtracted (`-` operator) sum from `32` to create result (`−11`
    in our example). After that, we took result and multiplied (`*` operator) it by
    `5` (see `-55` in the Results panel). All of this is pretty basic math; however,
    you may have noticed something different with our division equation (`/` operator).
    When you divide two integers, the result will be a third integer. So, instead
    of `-55` divided by `10` equaling `-5.5`, our result was `-5`. In order to get
    the correct floating-point value of `-5.5`, we need to make our division value
    a `Double`. Therefore, let''s add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the preceding line of code, your code should look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91f50dd7-30e7-4337-b5bd-63d3b83a7f34.png)'
  prefs: []
  type: TYPE_IMG
- en: All of these operations will look familiar to you, but there is one with which
    you might not be familiar and that is the remainder operator. The remainder operator
    returns the remainder when one number is divided by another.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for example, `7` divided by `3` equals `2.33`. When we apply the remainder
    operator, we get back `1`. Add the following to Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your code should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e930997d-b3b2-45a1-a7e4-356de45d163e.png)'
  prefs: []
  type: TYPE_IMG
- en: Increment and decrement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There will be times when you need to increment (increase) or decrement (decrease)
    a value. There are two ways you can accomplish this. Add the following into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a74a967-a8e3-4dc4-884a-6319a5ca9ddd.png)'
  prefs: []
  type: TYPE_IMG
- en: Both of these options do the same thing, but option `#2` is just written in
    shorthand. The preferred way is to use option `#2`, the `+=` (addition assignment
    operator) and `−=` (subtraction assignment operator), but it really is your preference.
  prefs: []
  type: TYPE_NORMAL
- en: Comparison operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also can compare different numerical variables. These might be familiar
    to you from math class. Let''s enter these into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/507e7085-52cf-4021-ac8b-c44286691fe9.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the Results panel, these comparison entries result in true
    or false based on the values that you enter (here, `1` and `2`).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have hit the basics and, from this point, if you are new to programming it
    is a good idea to make sure that you understand each topic we covered. As the
    chapters progress, we will cover more and more so take your time and really make
    sure that you are comfortable with all of the topics in this chapter.
  prefs: []
  type: TYPE_NORMAL
