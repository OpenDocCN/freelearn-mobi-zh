- en: Chapter 11. Let the Right Music In!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sound and music are always left for the final stages. It's so embarrassing that
    the same has happened with this book. If you're serious about the gaming experience
    you're creating, take music and sound into account from the beginning. Even if
    your game is not audio-centric, you should think of music and audio as feedback
    systems and treat them with the same importance as graphics.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we'll learn how to play audio files inside your game using the
    built-in Untz sound system. We'll add background music and sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: Audio manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to add some music and effects to our game we'll create a module called
    `AudioManager` that will take care of loading sounds and playing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to create a file called `audio_manager.lua`. This file
    will be in charge of managing all our sound needs. In this case we will use Untz,
    but you could easily modify it to use FMOD as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same way we defined the assets for our game, we will define all the
    sounds using the resource definition for the audio files. We saw this earlier
    in the [Chapter 6](ch06.html "Chapter 6. Resource Manager"), *Resource Manager*.
    If you don''t understand what we''re doing here, I suggest you go back and read
    about sound definitions in [Chapter 6](ch06.html "Chapter 6. Resource Manager").
    The `sounds` table will act as a cache for our sounds. It will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the initialization method, the first thing we do is load all the definitions
    we added. We do this by calling the `setDefinitions` method from `ResourceDefinitions`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, since we''re using Untz, we need to initialize it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can call `MOAIUntzSystem.initialize` with two optional parameters: the
    sampling rate (which can be changed to match your audio files) and the number
    of frames per buffer.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to play our sounds, we''ll define a method that loads them in the
    local `sounds` table as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method checks if the audio has been previously loaded; if it was not loaded,
    it loads and returns it. We split this from the `play` method that we'll write
    now because we may want to preload the sounds before playing them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to create the `play` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we get the actual audio. If it was preloaded, it can be played without
    any loading delays.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Here we can use the `loop` parameter to override the default `loop` attribute.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: And finally, we play it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It's worth mentioning that playing a sound multiple times will cause the previous
    play to cut off.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ll now write a function to stop the audio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We need to append this file in `main.lua` just above the required `game.lua`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Background music
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s play some background music by following the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of `Game:initialize` you should add the following method calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We initialize the audio using `AudioManager:initialize` (the method we created
    earlier in this chapter):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And then we play the background music. Remember that we defined it in the `audio_definitions`
    table inside `audio_manager.lua`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That should be it. Run the game and you should be listening to an amazing song
    by Milhouse Palacios.
  prefs: []
  type: TYPE_NORMAL
- en: Sound effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add a sound that will be played when the character jumps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up `character.lua` and add a call to `AudioManager:play` inside `Character:jump`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: That's it. Run it and listen to your jump.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we created a new module that takes care of the sound. We added
    some background music and a jump sound effect.
  prefs: []
  type: TYPE_NORMAL
- en: We've covered a lot already, and you're ready to create a complete game with
    what we saw. The next chapter will guide you through deploying our *Concentration*
    game to iOS.
  prefs: []
  type: TYPE_NORMAL
