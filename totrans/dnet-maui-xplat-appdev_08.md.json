["```swift\n$ git clone -b 2nd/chapter07 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition.git PassXYZ.Vault2 \n```", "```swift\npublic void DisplayMarkdown(string markdown) \n{\n#if !ANDROID\n  string markDownTxt = HttpUtility.JavaScriptStringEncode(markdown);\n#else\n  string markDownTxt = markdown;\n#endif\n  MainThread.BeginInvokeOnMainThread(async () =>\n  {\n    await InvokeJsMethodAsync(\"MarkdownToHtml\", markDownTxt);\n  });\n} \n```", "```swift\ndotnet add package Plugin.Fingerprint \n```", "```swift\nusing System.Threading;\nusing System.Threading.Tasks;\nnamespace Plugin.Fingerprint.Abstractions\n{\n  public interface IFingerprint\n  {\nTask<FingerprintAvailability> GetAvailabilityAsync(\n  bool allowAlternativeAuthentication = false);\n    Task<bool> IsAvailableAsync(bool allowAlternativeAuthentication = false);\n    Task<FingerprintAuthenticationResult> AuthenticateAsync(         AuthenticationRequestConfiguration authRequestConfig,         CancellationToken cancellationToken = default);\n    Task<AuthenticationType> GetAuthenticationTypeAsync();\n  }\n} \n```", "```swift\npublic abstract class FingerprintImplementationBase : IFingerprint\n{\n  public async Task<FingerprintAuthenticationResult> \n    **AuthenticateAsync**(\n    AuthenticationRequestConfiguration authRequestConfig, \n    CancellationToken cancellationToken = default) {\n    if (authRequestConfig is null)\n        throw new ArgumentNullException(nameof(authRequestConfig));\n    var availability = await GetAvailabilityAsync(\n        authRequestConfig.AllowAlternativeAuthentication);\n    if (availability != FingerprintAvailability.Available) {\n      var status = availability == FingerprintAvailability.Denied ?\n        FingerprintAuthenticationResultStatus.Denied :\n        FingerprintAuthenticationResultStatus.NotAvailable;\n        return new FingerprintAuthenticationResult { \n          Status = status, \n          ErrorMessage = availability.ToString() };\n    }\nreturn await NativeAuthenticateAsync(\n  authRequestConfig, cancellationToken);\n  }\n  public async Task<bool> **IsAvailableAsync**(\n    bool allowAlternativeAuthentication = false) {\n      return await GetAvailabilityAsync\n        (allowAlternativeAuthentication) \n        == FingerprintAvailability.Available;\n  }\n  public abstract Task<FingerprintAvailability> \n    **GetAvailabilityAsync**(\n      bool allowAlternativeAuthentication = false);\n  public abstract Task<AuthenticationType> \n    **GetAuthenticationTypeAsync**();\n  protected abstract Task<FingerprintAuthenticationResult> \n**NativeAuthenticateAsync**(\n  AuthenticationRequestConfiguration authRequestConfig, \n  CancellationToken cancellationToken);\n} \n```", "```swift\npublic partial class CrossFingerprint {\n  private static Lazy<IFingerprint> _implementation =             //(1)\nnew Lazy<IFingerprint>(CreateFingerprint, \n  LazyThreadSafetyMode.PublicationOnly);\n  public static IFingerprint Current {                            //(2)\n    get => _implementation.Value;\n    set {\n      _implementation = new Lazy<IFingerprint>(() => value);\n    }\n  }\n  static IFingerprint CreateFingerprint() {                       //(3)\n#if NETSTANDARD2_0\n    throw NotImplementedInReferenceAssembly();\n#else\n    return new FingerprintImplementation();\n#endif\n  }\n  public static void Dispose() {\n    if (_implementation != null && _implementation.IsValueCreated)\n    {\n      _implementation = new Lazy<IFingerprint>(CreateFingerprint, \n        LazyThreadSafetyMode.PublicationOnly);\n    }\n  }\n  private static Exception NotImplementedInReferenceAssembly() {\n      return new NotImplementedException(\"This functionality is not implemented in the portable version of this assembly. You should reference the NuGet package from your main application project in order to reference the platform-specific implementation.\");\n  }\n} \n```", "```swift\n<ItemGroup>\n<PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.2.1\" />\n<PackageReference Include=\"EJL.MauiHybridWebView\" Version=\"1.0.0-preview3\" />\n<PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"7.0.0\" />\n**<****PackageReference****Include****=****\"Plugin.Fingerprint\"****Version****=****\"3.0.0-beta.1\"** **/>**\n<PackageReference Include=\"PassXYZLib\" Version=\"2.1.2\" />\n</ItemGroup> \n```", "```swift\n<uses-permission android:name=\"android.permission.USE_BIOMETRIC\" />\n<!-- only if you target android below level 28 -->\n<uses-permission android:name=\"android.permission.USE_FINGERPRINT\" /> \n```", "```swift\n<key>NSFaceIDUsageDescription</key>\n<string>Need your face to unlock secrets!</string> \n```", "```swift\nbuilder.Services.AddSingleton(typeof(IFingerprint), CrossFingerprint.Current); \n```", "```swift\npublic partial class LoginViewModel : ObservableObject {\n  private LoginService _currentUser;\n  ILogger<LoginViewModel> _logger;\n  private readonly IFingerprint _fingerprint;\n  public LoginViewModel(LoginService user, \n    ILogger<LoginViewModel> logger, IFingerprint fingerprint) {   //(1)\n    _currentUser = user;\n    _logger = logger;\n    _fingerprint = fingerprint;\n  }\n  ...\n  [RelayCommand(CanExecute = nameof(ValidateFingerprintLogin))]\n  private async Task FingerprintLogin() {                         //(2)\n    var cancel = new CancellationTokenSource();\nvar dialogConfig = new AuthenticationRequestConfiguration(\n  Username,\n      Properties.Resources.fingerprint_login_message) {\n      CancelTitle = \"Cancel fingerprint login\",\n      FallbackTitle = \"Use Password\",\n      AllowAlternativeAuthentication = true,\n    };\nvar result = await _fingerprint.AuthenticateAsync(\n  dialogConfig, cancel.Token);\n    if (result.Authenticated) {\n      Password = await _currentUser.GetSecurityAsync();\n      if (!string.IsNullOrWhiteSpace(Password)) {\n          await Login();\n      }\n      else {\n          _logger.LogWarning(\"GetSecurityAsync() error.\");\n      }\n    }\n    else {\n        _logger.LogWarning(\"Failed to login with fingerprint.\");\n    }\n  }\n  ...\n  public async void CheckFingerprintStatus() {                  //(3)\n    _currentUser.Username = Username;\n    var password = await _currentUser.GetSecurityAsync();\nIsFingerprintIsAvailable = \n  await _fingerprint.IsAvailableAsync();\nIsFingerprintEnabled = IsFingerprintIsAvailable &&\n  !string.IsNullOrWhiteSpace(password);\n  }\n  [ObservableProperty]\n  private bool isFingerprintEnabled = false;                      //(4)\n  [ObservableProperty]\n  private bool isFingerprintAvailable = false;                    //(5)\n  ...\n  public async Task<bool> AuthenticateAsync(string reason,        //(6)\nstring? cancel = null, string? fallback = null, \nstring? tooFast = null) {\n    CancellationTokenSource cancelToken;\n    cancelToken = new CancellationTokenSource();\nvar dialogConfig = new AuthenticationRequestConfiguration(\n  \"Verify your fingerprint\", reason) { \n      CancelTitle = cancel,\n      FallbackTitle = fallback,\n      AllowAlternativeAuthentication = false\n    };\n    dialogConfig.HelpTexts.MovedTooFast = tooFast;\nvar result = await _fingerprint.AuthenticateAsync(\n  dialogConfig, cancelToken.Token);\n    return result.Authenticated;\n  }\n} \n```", "```swift\npublic partial class SettingsPage : ContentPage {\n  private LoginService _currentUser;\n  ILogger<LoginViewModel> _logger;\n  private readonly LoginViewModel _viewModel;\n  public SettingsPage(LoginViewModel viewModel,                    //(1)\n    LoginService user, ILogger<LoginViewModel> logger) {\n    InitializeComponent();\n    BindingContext = _viewModel = viewModel;\n    _currentUser = user;\n    _logger = logger;\n    Title = Properties.Resources.menu_id_settings;\n  }\n  private void SetFingerprintSwitcher() {\n    FingerprintSwitcher.IsEnabled = \n      _viewModel.IsFingerprintAvailable;\n    FingerprintSwitcher.On = _viewModel.IsFingerprintEnabled;\n    if (_viewModel.IsFingerprintAvailable) {\n      FingerprintSwitcher.Text = \n        Properties.Resources.settings_fingerprint_remark;\n    }\n    else {\n      FingerprintSwitcher.Text = \n        Properties.Resources.settings_fingerprint_disabled;\n    }\n  }\n  protected override void OnAppearing() {                         //(2)\n    base.OnAppearing();\n    â€¦\n    try {\n      _viewModel.CheckFingerprintStatus();                        //(3)\n    }\n    catch (Exception ex) {_logger.LogError($\"{ex}\");}\n    SetFingerprintSwitcher();                                      //(4)\n  } \n  private async void OnTimerTappedAsync(object sender, \n    System.EventArgs e) ...\n  private async void SetResultAsync(bool result) {\n    if (result) {\n      try {\n        await _currentUser.SetSecurityAsync(_currentUser.Password);\n        _viewModel.IsFingerprintEnabled = true;\n      }\n      catch (Exception ex) {\n        _logger.LogError(\n          \"SettingsPage: in SetResultAsync, {ex}\", ex);\n      }\n    }\n    else {\n      FingerprintSwitcher.Text = \"Turn on fingerprint error.\";\n    }\n    SetFingerprintSwitcher();\n  }\n  private async void OnSwitcherToggledAsync(object sender,         //(5)\n    ToggledEventArgs e) {\n    if (!_viewModel.IsFingerprintAvailable) { return; }\n    if (e.Value) {\n      try {\n        string data = await _currentUser.GetSecurityAsync();\n        if (data == null) {\n            var status = await _viewModel.AuthenticateAsync(       //(6)\n              Properties.Resources.fingerprint_login_message);\n            SetResultAsync(status);\n        }\n      }\n      catch (Exception ex) {_logger.LogError(\"{ex}\", ex); }\n    }\n    else {\n      _ = await _currentUser.DisableSecurityAsync();\n    }\n  }\n} \n```", "```swift\n<ImageButton x:Name=\"fpButton\" Grid.Row=\"1\" Grid.Column=\"2\" \n    VerticalOptions=\"End\" IsVisible=\"{Binding IsFingerprintEnabled}\"\n    Command=\"{Binding **FingerprintLoginCommand**}\" \n    BackgroundColor=\"White\" BorderColor=\"White\"\n    HeightRequest=\"32\"  WidthRequest=\"32\" BorderWidth=\"0\">\n  <ImageButton.Source>\n    <FontImageSource FontFamily=\"FontAwesomeSolid\"\n          Glyph=\"{x:Static styles:FontAwesomeSolid.Fingerprint}\"\n          Color=\"{DynamicResource Primary}\" />\n  </ImageButton.Source>\n</ImageButton> \n```", "```swift\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\"/>\n  <title>Marked in the browser</title>\n</head>\n<body>\n  <div id=\"content\"></div>\n  <script src=\"img/marked.min.js\">\n  </script>\n  <script>\n    document.getElementById('content').innerHTML =\n      marked.parse('This is rendered by **marked**.');\n  </script>\n</body>\n</html> \n```", "```swift\npublic class MarkdownView : HybridWebView.HybridWebView\n{\n  public MarkdownView() {\n    HybridAssetRoot = \"hybrid_root\";                               //(1)\n    MainFile = \"hybrid_app.xhtml\";                                  //(2)\n  }\n    public void DisplayMarkdown(string markdown) {\n#if !ANDROID\n      string markDownTxt =\n        HttpUtility.JavaScriptStringEncode(markdown);              //(3)\n#else\n      string markDownTxt = markdown;\n#endif\n      MainThread.BeginInvokeOnMainThread(async () => {             //(4)\n        await InvokeJsMethodAsync(\"MarkdownToHtml\", markDownTxt);\n      });\n    }\n} \n```", "```swift\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage \n  xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n  xmlns:vw=\"clr-namespace:PassXYZ.Vault.Views\"\n  x:Class=\"PassXYZ.Vault.Views.NotesPage\"\n  Title=\"{Binding Title}\">\n  <vw:MarkdownView x:Name=\"markdownview\" \n    RawMessageReceived=\"OnHybridWebViewRawMessageReceived\"\n    VerticalOptions=\"FillAndExpand\"/>\n</ContentPage> \n```", "```swift\nusing PassXYZ.Vault.ViewModels;\nnamespace PassXYZ.Vault.Views;\npublic partial class NotesPage : ContentPage {\n  ItemDetailViewModel _viewModel;\n  public NotesPage(ItemDetailViewModel viewModel) {\n    InitializeComponent();\n    BindingContext = _viewModel = viewModel;\n#if DEBUG\n    markdownview.EnableWebDevTools = true;\n#endif\n  }\n  protected override void OnAppearing() {                         //(1)\n    base.OnAppearing();\n    markdownview.Reload(); \n  }\n  private void OnHybridWebViewRawMessageReceived(object sender, \n    HybridWebView.HybridWebViewRawMessageReceivedEventArgs e) {\n    markdownview.DisplayMarkdown(_viewModel.MarkdownText);        //(2)\n  }\n} \n```"]