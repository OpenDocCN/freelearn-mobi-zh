- en: '*Chapter 14*: Creating an App Clip for Your App'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main features that iOS 14 brings to the table is App Clips. App Clips
    provide users with a fast new way to discover and make use of what your app has
    to offer. By triggering an App Clip from a QR code, a link, an NFC tag, or other
    mechanism, it can pop into the user's device (even without your app installed)
    and bring some of your app's functionality to life in a matter of seconds.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn what an App Clip is, what they are used
    for, and what the user's journey will be like while using them. We will review
    the different options that users have to trigger them. We will then develop an
    App Clip and learn how to configure it with App Store Connect's new features.
    Finally, we will learn how to test them using Local Experiences. By the end of
    this chapter, you will be able to develop your own App Clips and bring your apps
    to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s summarize the topics of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing App Clips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing your first App Clip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your App Clip experiences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code bundle for this chapter includes three starter projects called `AppClipExample_start`,
    `AppClipExample_configure_start`, and `AppClipExample_test`. You can find them
    in the code bundle repository for this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition](https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing App Clips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**App Clips** allow users to discover an app in a fast and lightweight manner.
    With App Clips, a user can quickly use a feature of your app without having the
    app installed on their phone. An App Clip is a small set of features from your
    app that can be discovered and used without the user having your app installed.
    Users can open your App Clip by using different triggers, such as QR codes, NFC
    tags, links in Messages, places in Maps, and Smart Banners in websites. The App
    Clip will pop up on the user''s home screen as an overlay called an App Clip Card.
    The App Clip Card describes what your App Clip does so that the user can choose
    to either open and use the App Clip or dismiss it. Let''s look at an example of
    what an App Clip Card looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – App Clip Card'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.01_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – App Clip Card
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, an App Clip Card is an overlay on the
    user''s home screen that displays the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A header image, describing your app or the App Clip''s main feature**: In
    this example, the header image is of someone preparing a coffee.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A title, describing what the App Clip does**: "Mamine Café".'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A subtitle, describing what feature the App Clip offers**: "Order coffee
    in 3 taps".'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A button, describing the action to be performed (such as open/view the App
    Clip)**: "View".'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extra info footer**: The App Clip''s main app. A link is provided to the
    App Store so that the user can download it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'App Clips should be lightweight, brief, and complete a user''s task in seconds.
    Let''s take a look at some use cases of App Clips:'
  prefs: []
  type: TYPE_NORMAL
- en: An App Clip for ordering coffee when you pass by a coffee shop's door and tap
    on an NFC tag, such as the one shown in the preceding screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An App Clip for renting an electric bike parked in the street, just by scanning
    its QR code. You can also use **Sign in with Apple and Apple Pay** to avoid forms
    and interface complexities, allowing you to rent the bike in seconds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An App Clip for pre-ordering from the menu of a restaurant, saving you time
    while you're waiting to be seated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An App Clip that triggers when you tap around NFC spots in an art gallery or
    a museum so that Augmented Reality scenes are displayed on your iPhone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, the possibilities for App Clips are endless. Now that we have
    covered what an App Clip is, we are going to explain the user's journey of using
    an App Clip (from its invocation to when it's finally used). We will cover various
    invocation methods (how to make an App Clip appear) before describing the recommended
    guidelines for building an App Clip.
  prefs: []
  type: TYPE_NORMAL
- en: App Clip User Journey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's explore the whole App Clip process and steps in more detail, starting
    from when the user discovers your App Clip to when the user finishes their App
    Clip journey.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s imagine that we have an app for renting electric bikes. There are several
    stages involved in the App Clip process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – App Clip process and steps'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.02_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.2 – App Clip process and steps
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding image explains the different stages of an App Clip:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Invocation method**: The App Clip invocation method is how the user can trigger
    and open an App Clip. For our example, a user scans a QR code that''s been placed
    on the bike with their device''s camera, and the App Clip opens on their home
    screen. In this case, the invocation method is the QR code. We will explore these
    in more detail later in this chapter.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**User journey**: After invocation, the App Clip presents some options for
    the user to choose from (for example, 1-hour rental for $2 and 24-hour rental
    for $5). The user makes their desired selection inside the App Clip.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Accounts and payment**: In our bike rental example, our App Clip needs to
    identify which user is renting the bike, and the user needs to pay for the service.
    Some App Clips will not require a registered user account nor payment to work;
    this step is optional.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Full app recommendation**: When the rental decision for the bike has been
    made and the user is ready to proceed, your App Clip can recommend that the user
    downloads your complete app so that they can use it instead of the App Clip the
    next time they wish to use your service. Suggesting the entire app is an optional
    step, but it is recommended.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have provided an overview of the high-level steps an App Clip follows,
    we will take a closer look at what invocation methods are available.
  prefs: []
  type: TYPE_NORMAL
- en: App Clips Invocation Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen that in order to display an App Clip, the user needs to invoke
    or discover it. Previously, we discussed that this can be done via a QR code,
    an NFC tag, a link in Messages, and so on. Here is a summary of the options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App Clip codes**: Each App Clip code includes a QR code and an NFC tag so
    that a user can scan it with their camera or tap on it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NFC tags**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**QR codes**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari App Banner**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Links in Messages**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Place cards in Maps**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Recently Used App Clips category on the new App Library on iOS 14**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we learned what an App Clip is, what the user's journey is
    when they're using it, and the different invocation methods that can be used to
    trigger it. In the next section, we are going to build and configure an App Clip
    for a coffee shop.
  prefs: []
  type: TYPE_NORMAL
- en: Developing your first App Clip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to start with an existing app, and we will add
    an App Clip to it step by step. Open the `AppClipExample_start` project in this
    book''s code bundle. If you launch the app, you will see that we have a coffee
    shop app in which we can order three different types of drinks, review the order,
    and pay by Apple Pay or by entering our credit card details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Our app''s main screens – Menu, Payment, and Credit Card controllers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.03_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.3 – Our app's main screens – Menu, Payment, and Credit Card controllers
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the purpose of this example app is to help us build the interesting
    part: the App Clip. Some functionalities, such as the credit card and Apple Pay
    payments, are not fully implemented; they just simulate this feature.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we jump into the App Clip process, let''s take a moment to review the
    project''s structure and its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Initial project structure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.04_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.4 – Initial project structure
  prefs: []
  type: TYPE_NORMAL
- en: The app contains a single target named `AppClipExample`. Inside that target,
    we have three `ViewControllers` (`MenuViewController`, `PaymentViewController`,
    and `CreditCardViewController`) and some extra views (`MenuView` and `MenuItemButton`).
    It only contains a single model file named `Item`, which helps us with the menu
    products. We also have other common files, such as `AppDelegate` and `Assets`
    – short and simple. However, it is important to have a snapshot of this in mind
    because when we start adding our App Clip, this architecture will evolve.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we continue, ensure that you''re using your own Apple Developer account
    settings in the project. In the `AppClipExample` target, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your own Development Team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the App ID to `{yourDomain}.AppClipExample`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we'll create the App Clip for our coffee shop app. We will
    start by creating a new Target for the App Clip. Then, we will learn how to share
    code and images between our app and its App Clip (as well as how to create exceptions
    for when we don't want to share the exact same code). Finally, we will learn how
    to configure the App Clip's experiences in App Store Connect before testing it
    out.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the App Clip's Target
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create an App Clip, an Xcode project needs to have a target for
    it. Currently, our project has a single target: `AppClipExample`. Let''s proceed
    and create a new target for the App Clip. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, click on **File | New | Target**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the modal that appears, select **iOS | Application | App Clip**, as shown
    in the following screenshot:![Figure 14.5 – Adding an App Clip target
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.05_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.5 – Adding an App Clip target
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press **Next**. Now, you can configure some of the initial values of the App
    Clip target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name `MyAppClip`, as follows:![Figure 14.6 – App Clip target options
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.06_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.6 – App Clip target options
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you click **Finish**, you will see a new popup:![Figure 14.7 – Activating
    the new scheme
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.07_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.7 – Activating the new scheme
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Press **Activate** so that the scheme can used for building and debugging.
    Now, take a look at the project structure; you''ll see that a new target has been
    added for the App Clip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.8 – New target for the App Clip'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.08_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.8 – New target for the App Clip
  prefs: []
  type: TYPE_NORMAL
- en: 'But this is not the only change that''s been made to the project. Xcode did
    several things under the hood when it added the new App Clip target:'
  prefs: []
  type: TYPE_NORMAL
- en: It created a new scheme for building and running the App Clip and its tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It added a new capability called **On Demand Install Capable** in the **App
    Clip Target settings | Signing & Capabilities** tab. This capability identifies
    the bundle as an App Clip.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the same tab, you can also check how the Bundle identifier for the App Clip
    contains the same root as the full app's bundle identifier. So, if your app bundle
    identifier is `{yourDomain}.AppClipExample`, the App Clip will have `{yourDomain}.AppClipExample.Clip`.
    This is because an App Clip only corresponds to one parent app, so they share
    part of the bundle identifier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It also added `_XCAppClipURL`. If you edit the scheme of the App Clip, you
    will see an environment variable with that name. The default value is `https://example.com`.
    But in order to activate it, you need to activate the checkbox near the name of
    the variable. When activated, the App Clip will receive this URL as part of `scene(_
    scene: UIScene, continue userActivity: NSUserActivity)` on launch so that you
    can test the flows that you want to trigger, depending on the URLs that are received.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apart from this, Xcode also created a new build phase for your main app target
    that embeds the App Clip inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9 – Embed App Clip build phase'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.09_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.9 – Embed App Clip build phase
  prefs: []
  type: TYPE_NORMAL
- en: So, as you can see, even though creating the App Clip's target is relatively
    straightforward, there is a lot going on under the hood. Now you know all the
    bits. Let's launch the App Clip on the iOS simulator (remember to select the `MyAppClip`
    App Clip target when launching it). You will see a blank screen. This is fine
    – we still need to add some code and prepare our App Clip! We'll do this in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing resources and code with the App Clip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: App Clips usually need to reuse code and resources from your main app. They
    typically consist of some of the features that conform to the entire app. In our
    case, we are going to create an App Clip that shows everything in our main app,
    but not the credit card screen. In order to provide a fast and easy App Clip experience,
    we will only allow our users to view the menu, review their order, and pay with
    Apple Pay; we don't want them to input any credit card details inside the App
    Clip.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider every file and resource that we need from the main app and
    add them to the target of the App Clip. Let''s start with the assets. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the project navigator, click on the `Assets.xcassets` file, and in the
    `Assets` file for both the app and the App Clip, you can delete the `Assets` file
    inside the `MyAppClip` folder. Otherwise, you will have two `AppIcon` references
    (one inside each asset file), and you will get a compile error:![Figure 14.11
    – Deleting the second Assets file inside MyAppClip
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.11_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.11 – Deleting the second Assets file inside MyAppClip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It is also a good practice to move the main app''s `Assets` file to the top
    of the project and rename it `SharedAssets`. This lets other developers know that
    the file applies to both targets:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.12 – SharedAssets on top of the project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_14.12_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.12 – SharedAssets on top of the project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you've made these changes, make sure you can build and compile both targets;
    that is, the app and the App Clip.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let's include the App Clip target, as well as the code that we need. Previously,
    we mentioned that we want to have the same functionalities that can be found in
    the main app, except for the credit card screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the project navigator, select the following files and add them to the App
    Clip target:![Figure 14.13 – Sharing code files with the App Clip target
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.13_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.13 – Sharing code files with the App Clip target
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice how we shared all the files inside the `ViewController`, `Views`, and
    `Model` folders, except for `CreditCardViewController`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You have now shared all the images and code that your App Clip will need. However,
    you still need to reuse some content: the storyboard flow.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go ahead and open the `Main.storyboard` file in your `AppClipExample` target.
    Zoom out a bit and select everything except for `CreditCardViewController` (we
    don't want that one in our App Clip):![Figure 14.14 – Copying the contents of
    the Main.storyboard file of your App
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.14_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.14 – Copying the contents of the Main.storyboard file of your App
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you've copied the elements highlighted in the previous screenshot, go ahead
    and paste them into the `Main.storyboard` file of your **MyAppClip** target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the **Navigation Controller** option and in the **Options** panel
    on the right, check the **Is Initial View Controller** option:![Figure 14.15 –
    Assigning the entry point for your App Clip
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.15_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.15 – Assigning the entry point for your App Clip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you have enough code, resources, and flow in your App Clip to try it out.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **MyAppClip** target and launch it. It should compile and run without
    any issues at this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, there is a problem. If you launch the App Clip and order an item, you
    will notice that we are still showing the **Pay with Credit Card** button. Previously,
    we mentioned that we want our App Clip to just use Apple Pay in order to streamline
    the service, as per Apple's recommendations. In the next section, we will achieve
    this by learning how to conditionally use parts of our code, depending on which
    target is executing it, using Active Compilation Conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Using Active Compilation Conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we learned how to share code and assets between our
    app and App Clip. This time, we need to "remove" some pieces of code when the
    App Clip is executing specific files. Specifically, we want to hide the `PaymentViewController`
    when the App Clip executes it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to work with Active Compilation Conditions. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `APPCLIP` to the list, as shown in the following screenshot:![Figure
    14.16 – Adding Active Compilation Conditions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.16_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.16 – Adding Active Compilation Conditions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With the `APPCLIP` flag set, go ahead and open the `PaymentViewController`
    file. Add the following code at the end of the `viewDidLoad()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this piece of code, we are telling the compiler to only add this line when
    we are executing the App Clip target.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s try this out. Execute the app and the App Clip and compare both screens.
    When the App Clip launches, you should not see the **Pay with Credit Card** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.17 – App Clip (left) versus app (right)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.17_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.17 – App Clip (left) versus app (right)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have achieved our goal of showing different parts of the
    UI by using Active Compilation Conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is great! We have a perfectly configured App Clip that runs and shows
    the user what we wanted them to see. In the next section, we are going to jump
    into a critical part of this process: invoking the App Clip.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring, linking, and triggering your App Clip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, and with the App Clip ready to roll, we are going to learn
    how to configure, link, and trigger the App Clip.
  prefs: []
  type: TYPE_NORMAL
- en: 'Users can trigger an App Clip by using various invocations, some of which are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning an NFC tag or visual code at a physical location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tapping a location-based suggestion from Siri Suggestions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tapping a link in the Maps app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tapping a Smart App Banner on a website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tapping a link that someone shared in the Messages app (as a text message only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To ensure these invocations work, you must configure your App Clip for link
    handling and also configure the App Store's Connect App Clip Experiences. We will
    go through this now.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: When users install an App Clip's corresponding app, the full app replaces the
    App Clip. Every invocation from that moment on launches the full app instead of
    the App Clip. As a result, your full app must handle all possible invocations
    and offer the App Clip's functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'An App Clip needs an entry point for users to be able to discover and launch
    it. We are going to review three topics in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring link handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring App Clip experiences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Smart App Banner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this section, our project will have a fully configured App Clip
    ready to go. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Configuring link handling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our first step is to configure our web server and App Clip for link handling.
    You can use the project in the code bundle for this chapter named `AppClipExample_configure_start`
    to help with this.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to be able to display your App Clip on your website, you need to
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the `apple-app-site-association` file on your web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add associated domains entitlement to your App Clip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handle `NSUserActivity` in your App Clip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, let''s configure the `apple-app-site-association` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file should be located in the root folder of your server. If you have set
    up universal links, you should have this file already. You need to add the highlighted
    code to it so that you can reference your App Clip. Remember to use your own Application
    Identifier Prefix and bundle identifier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, let's add the associated domains entitlement. In the **Project Navigator**
    window, select the project and the App Clip target and go to **Signing & Capabilities**:![Figure
    14.18 – Signing & Capabilities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.18_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.18 – Signing & Capabilities
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, add a new associated domain, as shown in the following screenshot:![Figure
    14.19 – Adding an associated domain
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.19_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.19 – Adding an associated domain
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that your server and App Clip have been configured, let's handle `NSUserActivity`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go ahead and edit the App Clip scheme. Under `_XCAppClipURL` variable and assign
    it the following value: `https://myappclip.com/test?param=value`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this value set, let's learn how to process it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inside the `SceneDelegate.swift` file. Add the following implementations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These two methods are handling the `NSUserActivity` information that your App
    Clip will receive when it is triggered by an URL-type element. See how, in the
    `scene(…)` method, we are checking that the activity is of the `NSUserActivityTypeBrowsingWeb`
    type and that we then examine the `URL`, `path`, and `components` elements. Here,
    you can navigate your App Clip to the correct element. If you launch the App Clip
    and check the console''s output, you will see this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, we are handling the test URL that has been defined in the `_XCAppClipURL`
    target environment variable and extracting the required path and components from
    it. When you want to handle different flows in your App Clip based on the incoming
    URL, you can test it like this.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your app has been built with SwiftUI, then you can handle it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: By defining `onContinueUserActivity(NSUserActivityTypeBrowsingWeb)` via `ContentView`,
    you can use the `activity` object that is passed and extract the incoming URL
    from there. By analyzing the URL, you can link to the proper part of your App
    Clip.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have configured our server and App Clip so that they handle links,
    let's continue by configuring our App Clip experiences.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring our App Clip experiences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the App Clip and your server ready to handle links, we can start configuring
    our App Clip experiences. App Clip experiences are defined in App Store Connect
    and define the App Clip Card and the links for different scenarios that you want
    to handle. An App Clip Card looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.20 – App Clip Card'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.20_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.20 – App Clip Card
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, the App Clip Card contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A header image, describing your app or the App Clip''s main feature: In this
    example we display someone preparing a coffee.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A title, describing the App Clip name: **Mamine Cafe.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A subtitle, describing what feature does the App Clip offer: **Order coffee
    in 3 taps.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A button, describing the action to perform (like open-view the App Clip): **View.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extra info footer: The App Clip''s main app and a link to the App Store to
    download it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This App Clip Card is what the device will display to the user so that they
    can launch your App Clip. We will configure it in App Store Connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created the corresponding app via the App Store Connect website
    and uploaded a build with the App Clip included, you will be able to configure
    your App Clip Experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.21 – App Clip Experience configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.21_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.21 – App Clip Experience configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are three main things to configure in the default App
    Clip Experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.png`/`.jpg`. No transparency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A copy of the subtitle**: 43 characters maximum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The call to action**: Here, you can choose from Open, View, and Play.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also click on **Edit Advanced Experiences** to configure different
    triggers and flows. If you want to launch your App Clip from NFC tags or visual
    codes, associate your App Clip with a physical location, or create an App Clip
    for multiple businesses to use, then you need Advanced Experiences. First, you
    will need to specify the URL that will trigger the App Clip Experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.22 – URL configuration to invoke an App Clip Experience'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.22_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.22 – URL configuration to invoke an App Clip Experience
  prefs: []
  type: TYPE_NORMAL
- en: 'After pressing **Next**, you can configure the App Clip Card:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.23 – Configuring the advanced App Clip card'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.23_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.23 – Configuring the advanced App Clip card
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you can configure the language of the card, and even specify
    whether the experience is triggered at a specific location.
  prefs: []
  type: TYPE_NORMAL
- en: Adding advanced App Clip Experiences allows your App to show different App Clips
    for different URLs. For example, is you have a coffee shop app, you can have an
    App Clip for showing the menu, an App Clip for ordering a coffee straight away,
    an App Clip for displaying your clients' points cards, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to configure an App Clip and its experiences
    in App Store Connect. Now, let's learn how to configure the Smart App Banner so
    that you can trigger a banner on your website so that users can display your app
    and App Clip.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a Smart App Banner
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By adding a Smart App Banner to your website, you''re offering your users a
    fast and native way to discover and launch your app. You need to add the following
    meta tag to your website HTML files (where you want the banner to be displayed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You need to replace the highlighted values with your own. Also, note that `app-argument`
    is not available when you're launching an App Clip. Remember that you should add
    the domain of any page that displays this banner to the app and your App Clip's
    Associated Domains Entitlements.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to configure link handling, App Clip Experiences,
    and Smart App Banners. In the next section, we'll how to test our App Clip while
    in development.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your App Clip Experiences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have finished developing and configuring your App Clip, it is time
    to test everything to double-check that your App Clip Experiences work as expected.
    There are three ways to test your App Clip Experiences:'
  prefs: []
  type: TYPE_NORMAL
- en: By debugging the invocation URL in Xcode (we have seen this throughout this
    chapter, when using `_XCAppClipURL`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By creating an App Clip Experience for testers in TestFlight (so that your App
    is ready for launch and is complete).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By creating a local experience on a device and testing invocations from NFC
    or visual codes during development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dig deeper into this last point. Let's use the `AppClipExample_test` project
    in this book's code bundle so that we can test our App Clip Experiences on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'One advantage of testing your App Clip Experiences while in development with
    Local Experiences is that you don''t need to configure your associated domains,
    make changes to your server, or deal with TestFlight. We can do everything locally.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: First, build and run your app and App Clip on any device. Then, on the device,
    open **Settings | Developer | Local Experiences** and select **Register Local
    Experience...**:![Figure 14.24 – Local Experiences setup
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.24_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.24 – Local Experiences setup
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, you can configure the Local Experience, as shown in the following screenshot.
    Remember to use your own values for the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.25 – Local Experience data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.25_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.25 – Local Experience data
  prefs: []
  type: TYPE_NORMAL
- en: To launch the App Clip Card, you can use any tool that allows you to generate
    a QR code or NFC tag with the same URL you specified in the preceding screen (under
    **URL PREFIX**). Upon doing this, your App Clip Card should appear when you scan
    it with your device.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The bundle ID that's defined in Local Experience must match the bundle ID of
    your App Clip.
  prefs: []
  type: TYPE_NORMAL
- en: The App Clip must be installed on the device.
  prefs: []
  type: TYPE_NORMAL
- en: If the camera app doesn't open the App Clip, try using the QR Code Scanner from
    the Control Center of iOS (if you don't have it, you can add it by going to **Settings
    | Control Center**).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to configure Local Experiences in order to test
    our App Clip Cards while they're in development. Now, let's wrap up this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we reviewed one of the best new features of iOS 14: App Clips.
    We explained what an App Clip is, what the user journey is, which features we
    should focus on when developing an App Clip, and which options are available for
    invoking them.'
  prefs: []
  type: TYPE_NORMAL
- en: After learning the basics, we developed and configured our first App Clip for
    a coffee shop app. We refactored the project so that we could share code and resources
    between the app and the App Clip. We then learned how to use **Active Compilation
    Conditions** to trigger pieces of our code base, but only for the App Clip or
    the app itself, as well as how to configure our app and server for link handling.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to configure the App Clip Experiences in App Store Connect
    and how to test them while in development.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the Vision Framework.
  prefs: []
  type: TYPE_NORMAL
