["```swift\nclass MyClass {\n    // MyClass definition\n}\nstruct MyStruct {\n    // MyStruct definition\n} \n```", "```swift\nstruct MyStruct\n{ \n    let c = 5\n    var v = \"\"\n}\nclass MyClass \n{ \n    let c = 5 \n    var v = \"\"\n} \n```", "```swift\nvar myStruct = MyStruct(v: \"Hello\") \n```", "```swift\nstruct MyStruct { \n    let c: Int\n    var v = \"\"\n} \n```", "```swift\nvar myStruct = MyStruct(c: 10, v: \"Hello\") \n```", "```swift\nstruct MyStruct {\n    var a: Int\n    var b = \"Hello\"\n    var c = \"Jon\"\n} \n```", "```swift\nlet myStruct1 = MyStruct(a: 2)\nlet myString2 = MyStruct(a: 3, b: \"Bonjour\")\nlet myString3 = MyStruct(a: 4, b: \"Bonjour\", c: \"Kara\") \n```", "```swift\nlet myString3 = MyStruct(b: \"Hello\", c: \"Kara\") \n```", "```swift\nvar x = myClass.c\nmyClass.v = \"Howdy\" \n```", "```swift\nstruct EmployeeStruct { \n    var firstName = \"\" \n    var lastName = \"\" \n     var salaryYear = 0.0\n}\nclass EmployeeClass { \n    var firstName = \"\" \n    var lastName = \"\" \n    var salaryYear = 0.0\n} \n```", "```swift\nself.firstName = \"Jon\" self.lastName = \"Hoffman\" \n```", "```swift\nvar salaryWeek: Double { \n    get{\n        self.salaryYear/52\n    }\n} \n```", "```swift\nvar salaryWeek: Double { \n    self.salaryYear/52\n} \n```", "```swift\nvar salaryWeek: Double { \n    get {\n        self.salaryYear/52\n    }\n    set(newSalaryWeek){\n        self.salaryYear = newSalaryWeek*52\n    }\n} \n```", "```swift\nvar salaryWeek: Double { \n    get {\n        self.salaryYear/52\n    }\n    set{\n        self.salaryYear = newValue*52\n    } \n```", "```swift\nclass EmployeeClass { \n    var firstName = \"\" \n    var lastName = \"\" \n    var salaryYear = 0.0\n    var salaryWeek: Double { \n        get {\n            self.salaryYear/52\n        }\n        set(newSalaryWeek) {\n            self.salaryYear = newSalaryWeek*52\n        }\n    }\n} \n```", "```swift\nstruct EmployeeStruct { \n    var firstName = \"\" \n    var lastName = \"\" \n     var salaryYear = 0.0\n    var salaryWeek: Double { \n        get {\n            self.salaryYear/52\n        }\n        set(newSalaryWeek) {\n            self.salaryYear = newSalaryWeek*52\n        }\n    }\n} \n```", "```swift\nvar f = EmployeeStruct(firstName: \"Jon\", lastName: \"Hoffman\", salaryYear: 39_000)\nprint(f.salaryWeek) //prints 750.00 to the console f.salaryWeek = 1000\nprint(f.salaryWeek) //prints 1000.00 to the console\nprint(f.salaryYear) //prints 52000.00 to the console \n```", "```swift\nvar salaryYear: Double = 0.0 { \n    willSet(newSalary) {\n        print(\"About to set salaryYear to \\(newSalary)\")\n    }\n    didSet {\n        if salaryWeek > oldValue { \n            print(\"\\(firstName) got a raise.\")\n        } else {\n            print(\"\\(firstName) did not get a raise.\")\n        }\n    }\n} \n```", "```swift\nwillSet {\n    print(\"About to set salaryYear to \\(newValue)\")\n} \n```", "```swift\nfunc fullName() -> String { \n    firstName + \" \" + lastName\n} \n```", "```swift\nvar e = EmployeeClass()\nvar f = EmployeeStruct(firstName: \"Jon\", lastName: \"Hoffman\", salaryYear: 50000)\ne.firstName = \"Jon\"\ne.lastName = \"Hoffman\"\ne.salaryYear = 50000.00\nprint(e.fullName()) //Jon Hoffman is printed to the console\nprint(f.fullName()) //Jon Hoffman is printed to the console \n```", "```swift\nfunc giveRaise(amount: Double) { \n    salaryYear += amount\n} \n```", "```swift\nmutating func giveRase(amount: Double) { \n    self.salaryYear += amount\n} \n```", "```swift\nfunc isEqualFirstName(firstName: String) -> Bool { \n    self.firstName == firstName\n} \n```", "```swift\ninit() {\n    //Perform initialization here\n} \n```", "```swift\ninit() {\n    firstName =\"\" \n    lastName = \"\" \n    salaryYear = 0.0\n}\ninit(firstName: String, lastName: String) { \n    self.firstName = firstName\n    self.lastName = lastName \n    salaryYear = 0.0\n}\ninit(firstName: String, lastName: String, salaryYear: Double) { \n    self.firstName = firstName\n    self.lastName = lastName\n    self.salaryYear = salaryYear\n} \n```", "```swift\nvar g = EmployeeClass()\nvar h = EmployeeStruct(firstName: \"Me\", lastName: \"Moe\")\nvar i = EmployeeClass(firstName: \"Me\", lastName: \"Moe\", salaryYear: 45_000) \n```", "```swift\ninit(employeeWithFirstName firstName: String, lastName lastName: String, andSalary salaryYear: Double) {\n    self.firstName = firstName\n    self.lastName = lastName\n    self.salaryYear = salaryYear\n} \n```", "```swift\nvar i = EmployeeClass(withFirstName: \"Me\", lastName: \"Moe\", andSalary: 45000) \n```", "```swift\ninit?(firstName: String, lastName: String, salaryYear: Double) { \n    self.firstName = firstName\n    self.lastName = lastName\n    self.salaryYear = salaryYear\n    if self.salaryYear < 20_000 {\n        return nil\n    }\n} \n```", "```swift\nif let f = EmployeeClass(firstName: \"Jon\", lastName: \"Hoffman\", salaryYear: 29_000) {\n    print(f.fullName())\n} else { \n    print(\"Failed to initialize\")\n} \n```", "```swift\nif let f = EmployeeClass(firstName: \"Jon\", lastName: \"Hoffman\", salaryYear: 19_000) {\n    print(f.fullName())\n} else {\n    print(\"Failed to initialize\")\n} \n```", "```swift\nprivate struct EmployeeStruct {}\npublic class EmployeeClass {} \ninternal class EmployeeClass2 {} \npublic var firstName = \"Jon\" \ninternal var lastName = \"Hoffman\" \nprivate var salaryYear = 0.0\npublic func fullName() -> String {} \nprivate func giveRaise(amount: Double) {} \n```", "```swift\nlet employee1 = EmployeeStruct(firstName: \"Jon\", lastName: \"Hoffman\", salaryYear: 90000)\nlet employee2 = EmployeeStruct(firstName: \"Kailey\", lastName: \"Hoffman\", salaryYear: 32000)\nlet employee3 = EmployeeStruct(firstName: \"Kara\", lastName: \"Hoffman\", salaryYear: 28000)\nlet employeeCollection = [employee1, employee2, employee3] \n```", "```swift\nlet firstNames = employeeCollection.map(\\.firstName) \n```", "```swift\nstruct Dice {\n    var highValue: Int\n    var lowValue: Int\n\n    func callAsFunction() -> Int {\n        Int.random(in: lowValue...highValue)\n    }\n} \n```", "```swift\nlet d6 = Dice(highValue: 6, lowValue: 1)\nlet roll = d6() \n```", "```swift\nclass Plant {\n    var height = 0.0 \n    var age = 0\n    func growHeight(inches: Double) { \n        height += inches;\n    }\n} \n```", "```swift\nclass Tree: Plant { \n    var limbs = 0 \n    func limbGrow() {\n        self.limbs += 1\n    }\n    func limbFall() {\n        self.limbs -= 1\n    }\n} \n```", "```swift\nvar tree = Tree() \ntree.age = 5\ntree.height = 4 \ntree.limbGrow() \ntree.limbGrow() \n```", "```swift\nclass PineTree: Tree { \n    var needles = 0\n}\nclass OakTree: Tree{ \n    var leaves = 0\n} \n```", "```swift\nclass Plant {\n    var height = 0.0 \n    var age = 0\n    func growHeight(inches: Double) { \n        self.height += inches;\n}\n    func getDetails() -> String { \n        return \"Plant Details\"\n    }\n} \n```", "```swift\nclass Tree: Plant { \n    private var limbs = 0 \n    func limbGrow() {\n        self.limbs += 1\n    }\n    func limbFall() {\n        self.limbs -= 1\n    }\n    override func getDetails() -> String { \n        return \"Tree Details\"\n    }\n} \n```", "```swift\nvar plant = Plant() \nvar tree = Tree()\nprint(\"Plant: \\(plant.getDetails())\") \nprint(\"Tree: \\(tree.getDetails())\") \n```", "```swift\nPlant: Plant Details\nTree: Tree Details \n```", "```swift\nfunc getDetails() -> String {\n    return \"Height:\\(height) age:\\(age)\"\n} \n```", "```swift\noverride func getDetails() -> String { \n    let details = super.getDetails() \n    return \"\\(details) limbs:\\(limbs)\"\n} \n```", "```swift\nvar tree = Tree()\ntree.age = 5\ntree.height = 4\ntree.limbGrow()\ntree.limbGrow()\nprint(tree.getDetails()) \n```", "```swift\nHeight: 4.0\nage: 5\nlimbs: 2 \n```", "```swift\nvar description: String {\n    return \"Base class is Plant.\"\n} \n```", "```swift\noverride var description: String {\n    return \"\\(super.description) I am a Tree class.\"\n} \n```", "```swift\nprotocol MyProtocol {\n    //protocol definition here\n} \n```", "```swift\nstruct MyStruct: MyProtocol {\n    // Structure implementation here\n} \n```", "```swift\nstruct MyStruct: MyProtocol, AnotherProtocol, ThirdProtocol {\n    // Structure implementation here\n} \n```", "```swift\nclass MyClass: MySuperClass, MyProtocol, MyProtocol2 {\n    // Class implementation here\n} \n```", "```swift\nprotocol FullName {\n    var firstName: String { get set } \n    var lastName: String { get set }\n} \n```", "```swift\nvar readOnly: String { get } \n```", "```swift\nclass Scientist: FullName { \n    var firstName = \"\"\n    var lastName = \"\"\n} \n```", "```swift\nprotocol FullName {\n    var firstName: String { get set } \n    var lastName: String { get set } \n    func fullName() -> String\n} \n```", "```swift\nclass Scientist: FullName { \n    var firstName = \"\"\n    var lastName = \"\" \n    var field = \"\"\n    func fullName() -> String {\n        return \"\\(firstName) \\(lastName) studies \\(field)\"\n    }\n} \n```", "```swift\nstruct FootballPlayer: FullName { \n    var firstName = \"\"\n    var lastName = \"\" \n    var number = 0\n    func fullName() -> String {\n        return \"\\(firstName) \\(lastName) has the number \\(number)\"\n    }\n} \n```", "```swift\nvar scientist = Scientist() \nscientist.firstName = \"Kara\" \nscientist.lastName = \"Hoffman\" \nscientist.field = \"Physics\"\nvar player = FootballPlayer()\nplayer.firstName = \"Dan\"\nplayer.lastName = \"Marino\"\nplayer.number = 13\nvar person: FullName\nperson = scientist\nprint(person.fullName()) \nperson = player \nprint(person.fullName()) \n```", "```swift\nextension String {\n    //add new functionality here\n} \n```", "```swift\nextension String {\n    var firstLetter: Character? { \n        get {\n            return self.first\n        }\n    }\n    func reverse() -> String {\n        var reverse = \"\"\n        for letter in self {\n            reverse = \"\\(letter)\" + reverse\n        }\n        return reverse\n    }\n} \n```", "```swift\nvar myString = \"Learning Swift is fun\" \nprint(myString.reverse()) \nprint(myString.firstLetter!) \n```", "```swift\n@propertyWrapper\nstruct Trimmed {\n    private var str: String = \"\"\n    var wrappedValue: String {\n        get { str }\n        set { str = newValue.trimmingCharacters(in: .whitespacesAndNewlines) }\n    }\n    init(wrappedValue: String) {\n        self.wrappedValue = wrappedValue\n    }\n} \n```", "```swift\nvar firstName = \"\"\nvar lastName = \"\" \n```", "```swift\n@Trimmed var firstName = \"\"\n@Trimmed var lastName = \"\" \n```", "```swift\nlet employee1 = EmployeeStruct(firstName: \" Jon \", lastName: \" Hoffman \") \n```", "```swift\nclass Collar {\n    var color: String\n    init(color: String) {\n        self.color = color\n    }\n}\nclass Pet {\n    var name: String\n    var collar: Collar?\n    init(name: String) {\n        self.name = name\n    }\n}\nclass Person {\n    var name: String\n    var pet: Pet?\n    init(name: String) {\n        self.name = name\n    }\n} \n```", "```swift\nvar jon = Person(name: \"Jon\")\nvar buddy = Pet(name: \"Buddy\")\njon.pet = buddy\nvar collar = Collar(color: \"red\")\nbuddy.collar = collar \n```", "```swift\nif let tmpPet = jon.pet, let tmpCollar = tmpPet.collar { \n    print(\"The color of the collar is \\(tmpCollar.color)\")\n} else {\n    print(\"Cannot retrieve color\")\n} \n```", "```swift\nif let color = jon.pet?.collar?.color { \n    print(\"The color of the collar is \\(color)\")\n} else {\n    print(\"Cannot retrieve color\")\n} \n```"]