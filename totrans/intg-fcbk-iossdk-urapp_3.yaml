- en: Chapter 3. Connecting to a Facebook User Account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we created our first project with a single view where
    users could provide book information. In this chapter we will be working on extending
    the previous application prototype.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we are going to build our first Facebook user interaction experience,
    such as login and logout flows. We are going to build a new view controller to
    handle the logic and user interface in our social application. This controller's
    name will be `LBFacebookViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to handle the Facebook authentication flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FBLoginView`: By using the user interface component that also contains logic
    to handle the authentication flow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FBSession`: By building our custom interface to let the user interact with
    their social life on Facebook Platform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn how to use the `FBLoginView` component in order to authenticate
    the user against Facebook Platform.
  prefs: []
  type: TYPE_NORMAL
- en: We will only need to provide the `LBFacebookViewController` of the `FBLoginView`delegates
    to allow users to log in and log out using the Platform. As part of our UI view,
    we are going to display some Facebook user account information, such as the username
    and profile picture.
  prefs: []
  type: TYPE_NORMAL
- en: We will use `FBSession` later in the book to retrieve more information about
    a user's social life.
  prefs: []
  type: TYPE_NORMAL
- en: Login flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before the new Facebook SDK 3, handling Facebook sessions was tedious and could
    take a lot of our time in code maintenance and debugging.
  prefs: []
  type: TYPE_NORMAL
- en: The `FBSession` component ([https://developers.facebook.com/docs/reference/ios/3.2/class/FBSession/](https://developers.facebook.com/docs/reference/ios/3.2/class/FBSession/))
    was introduced with Version 3 of the Facebook SDK. It is a component that keeps
    track and ensures that the Facebook session information is up-to-date. The **authentication
    token** is the most important property of the `FBSession` information. All communication
    security with the Platform is based on the authentication token. In fact, it will
    be part of every single request we perform on the Facebook Platform. The previous
    SDK version onwards, developers hold responsibility for extending the token after
    it has expired.
  prefs: []
  type: TYPE_NORMAL
- en: '`FBLoginView` is a UI component provided by the Facebook SDK and will enable
    any iOS application to authenticate users against Facebook Platform without having
    to write the code to handle requests/responses to/from the Platform.'
  prefs: []
  type: TYPE_NORMAL
- en: '`FBLoginView` handles user interactions and also keeps the `FBSession` state
    constantly updated. As previously mentioned, Apple has been providing Facebook
    integration since iOS 6\. `FBLoginView` is able to use the native UI component
    to let users accept that the application they are currently using can have access
    to their Facebook profiles. This can only happen when the current iOS device has
    a Facebook account associated with it. When no Facebook account is set, `FBLoginView`
    will authenticate users using Safari.'
  prefs: []
  type: TYPE_NORMAL
- en: '`FBLoginView` provides four callbacks to handle Facebook Platform''s response
    after authentication using `FBLoginViewDelegate`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`loginView:handleError:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loginViewFetchedUserInfo:user:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loginViewShowingLoggedInUser:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loginViewShowingLoggedOutUser:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our social application, we are going to use the `FBLoginView` component.
    We are going to talk about these methods later, during the login/logout flow implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '`FBLoginView` handles the login flow, and we will only need to set our application
    state after a successful login process.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Login interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we are going to create a new view controller that will enable
    the application to authenticate users against the Facebook Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Facebook view controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starting from our previous project, we are going to add a new view controller
    that will contain UI elements and logic to handle the authentication flow.
  prefs: []
  type: TYPE_NORMAL
- en: Select the `LBViewController` of the application, add a new button on the right-bottom
    position, and set the label as `Go Social,` as displayed in the following screenshot.
    This button will prompt the Facebook view controller and will enable users to
    use the Platform.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/IVyBxDdh.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Go Social button
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a new view controller. From the **Object Library** list view, drag-and-drop
    a view controller into a Storyboard as shown in the following screenshot. The
    Storyboard now has a new a scene that we will refer to as Facebook Scene.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/IDd4U54r.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The new Storyboard view controller
  prefs: []
  type: TYPE_NORMAL
- en: The new scene will contain the `FBLoginView` component. We will need to segue
    between the first scene and the Facebook Scene. Select the **Go Social** button,
    hold the *Ctrl* button, and select the **Go Social** button again to create a
    connection between the two scenes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how to create the new segue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ttVPTGu0.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Go Social segue
  prefs: []
  type: TYPE_NORMAL
- en: Select **push** under **Action Segue**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/KQFyrRT9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Push selected as Action Segue
  prefs: []
  type: TYPE_NORMAL
- en: For those of you who are already familiar with Storyboard, you will notice that
    defining a Push segue within a view controller that does not belong to the Navigation
    Controller will throw an exception because, without the Navigation Controller,
    the application is not able to keep track of the user's path through our views.
    In order to avoid the exception, we need to create a Navigation Controller that
    will wrap the two scenes.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows how to create a Navigation Controller to define
    the user's interaction. Select the first scene and go to Editor | Embed In | Navigation
    Controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/VQV8g55a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the Navigation Controller
  prefs: []
  type: TYPE_NORMAL
- en: The Navigation View Controller will now enable Push segues inside the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/jyg0gkar.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Navigation Controller
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the result after creating the Navigation Controller.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the navigation fixed, we need to create a class that will bind
    the Facebook view scene with the logic that we will implement. To create a new
    `ViewController` class, right-click on the `iLikeBook` folder and go to **New
    File** | **Object-C Class**. Provide a class name, `LBFacebookVIewController`,
    and as a subclass define `UIVIewController`. Deselect the **With XIB for user
    interface** option.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/GdfyvWcz.jpg)'
  prefs: []
  type: TYPE_IMG
- en: LBFacebookViewController
  prefs: []
  type: TYPE_NORMAL
- en: The new class will appear under the `iLikeBook` folder. We need to bind the
    Facebook Scene in the Storyboard with the `LBFacebookVIewController`. Select Storyboard
    and the Facebook Scene. Open the **Utilities** dashboard and, on the **View**
    pane at the top-right position on XCode, select the last button to the right.
    Open **Identity Inspector** under **Custom Class** and set the **Class** field
    to `LBFacebookVIewController`. The application will load the code from the `LBFacebookVIewController`
    class when users access the Facebook Scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `LBFacebookVIewController.m` and add the @interface statement to the code
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: While the Facebook Scene is still selected, drag-and-drop it into a new `UIView`.
    The background color for the new view is white and it could be difficult to identify
    the view when it is not selected. Change the background color of the view to light
    gray by going to **Attributes Inspector** | **Background**. Set the new size view
    component to `100 x 50` and the position to `(70, 45)` using the Size Inspector.
    Set **Custom Class** for the new `UIView` as `FBLoginView`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ElbfbtnE.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FBLoginView
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to create a reference to `FBLoginView` within `LBFacebookViewController`.
    After selecting the Facebook Scene, open up the Assistant Editor and use the **Show
    the Assistant Editor** button on the top-right spot of XCode.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3BnK90I.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FBLoginView versus LBFacebookViewController
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that `LBFacebookViewController.m` is accessible on the left side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select `FBLoginView`, hold the *Ctrl* button, and drag the view into the class
    file within the @interface statement. XCode will ask for the reference name, as
    displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/UcZUqAfh.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The FBLoginView reference creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave the **Storage** field with the `Weak` value. The resulting code statement
    should look something like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/DrCjVTzh.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The FBLoginView reference
  prefs: []
  type: TYPE_NORMAL
- en: The Facebook Scene now contains `FBLoginView`, but we would like to give users
    some feedback after they have performed the login correctly. Drag-and-drop a new
    `UIView` within Facebook Scene. Resize it to 200 x 200 px and place it on the
    center of the scene. Set **Custom Class** for `UIView` as `FBProfilePictureView`.
    The `FBProfilePictureView` will allow the application to display the user's Facebook
    profile information after a successful login.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QysCXufk.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FBProfilePictureView
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the result after adding `FBProfilePictureView`.
  prefs: []
  type: TYPE_NORMAL
- en: '`FBProfilePictureView` needs to be updated for all logins and logouts; therefore,
    the application needs to have a reference of the UI object within the `LBFacebookViewController`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we did for `FBLoginView`, we need to create a reference of `FBProfilePictureView`
    within the `LBFacebookViewController` class. The result should look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QCGqUPcj.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FBProfilePictureView Reference
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on with `FBLoginView` delegates, we need to set the way the application
    is going to handle external URLs within the `AppDelegate` class. We want the Facebook
    SDK to handle the communication between our app and the Social platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the Facebook SDK within the `AppDelegate` file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the **Live Blogger** (**LB**) `AppDelegate` file and append the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will handle each single request toward the Facebook Platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to a bug in `FBProfilePictureView`, the application could throw an exception
    at runtime if the `FBProfilePictureView` class was not previously loaded. To resolve
    this, we need to change the following highlighted `AppDelegate` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to set `FBLoginView`. Open `LBFacebookViewController` and
    customize the (void) `viewDidLoad` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The self.fbLoginViewsetDelegate:self method sets the current class as the delegate
    for `FBLoginView`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Ta8QNnVi.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The login UI
  prefs: []
  type: TYPE_NORMAL
- en: Login delegates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the `FBLoginView` component is in place, we need to focus on its delegates
    to handle responses and/or errors.
  prefs: []
  type: TYPE_NORMAL
- en: Open `LBFacebookViewController.m`. As we did in the previous section, we need
    to import the Facebook SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to extend `LBFacebookViewController` with `FBLoginViewDelegate`
    using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using the preceding code, we will allow the setting of the current class as
    the delegate of `FBLoginView` to catch callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first delegate that we should implement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet shows the delegate code that will be called in case
    `FBLoginView` will throw any errors and will print the errors in the debug window.
  prefs: []
  type: TYPE_NORMAL
- en: The following code block shows instructions to handle the callbacks after the
    user has logged in; the application still has no information about the user's
    Facebook account. In the upcoming chapters, the following method will be used
    to enable buttons to provide more functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following method is the one that will provide us with information about
    the user''s Facebook account. The following code is the callback method to handle
    user-fetched information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `user` object contains the Facebook account information. `FBGraphUser` provides
    an easy interface to access the account data. The method `setProfileId` sets the
    `FBProfilePictureView` ID and will automatically retrieve the account picture
    through an API call to Facebook Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with Facebook sessions is really easy now due to the new updates to
    the Framework SDK.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/t4OKFV1M.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Successful user login
  prefs: []
  type: TYPE_NORMAL
- en: Logout flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The logout flow is nothing but using a new delegate method for `FBLoginView`.
    Again, in `LBFacebookViewController`, create the new delegate method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method will be called after users are successfully logged out.
    Since the UI so far is still a work-in-progress, we only need to update `FBProfilePictureView`
    with a null value for the profile ID as no user is logged in.
  prefs: []
  type: TYPE_NORMAL
- en: This is everything we need to do to handle the logout flow.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers all the points required for implementing the Facebook login
    and logout flows. We initially created a view controller to use as the interface
    for the users.
  prefs: []
  type: TYPE_NORMAL
- en: In order to handle authentication logic and communication with the Social Platform,
    we are relying on `FBLoginView`. In order to provide some feedback to users, we
    have used the `FBProfilePictureView` to display a user's picture profile by setting
    one of the object properties.
  prefs: []
  type: TYPE_NORMAL
