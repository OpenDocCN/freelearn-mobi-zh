- en: Chapter 3. Connecting to a Facebook User Account
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：连接到Facebook用户账户
- en: In the previous chapter we created our first project with a single view where
    users could provide book information. In this chapter we will be working on extending
    the previous application prototype.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了一个只有一个视图的项目，用户可以在其中提供书籍信息。在本章中，我们将扩展之前的应用程序原型。
- en: In this chapter we are going to build our first Facebook user interaction experience,
    such as login and logout flows. We are going to build a new view controller to
    handle the logic and user interface in our social application. This controller's
    name will be `LBFacebookViewController`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建我们的第一个Facebook用户交互体验，例如登录和登出流程。我们将构建一个新的视图控制器来处理社交应用程序中的逻辑和用户界面。这个控制器的名字将是`LBFacebookViewController`。
- en: 'There are two ways to handle the Facebook authentication flow:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 处理Facebook身份验证流程有两种方式：
- en: '`FBLoginView`: By using the user interface component that also contains logic
    to handle the authentication flow'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FBLoginView`: 通过使用包含处理身份验证流程逻辑的用户界面组件'
- en: '`FBSession`: By building our custom interface to let the user interact with
    their social life on Facebook Platform'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FBSession`: 通过构建我们的自定义界面，让用户能够与他们在Facebook平台上的社交生活进行交互'
- en: We will learn how to use the `FBLoginView` component in order to authenticate
    the user against Facebook Platform.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何使用`FBLoginView`组件来对Facebook平台进行用户身份验证。
- en: We will only need to provide the `LBFacebookViewController` of the `FBLoginView`delegates
    to allow users to log in and log out using the Platform. As part of our UI view,
    we are going to display some Facebook user account information, such as the username
    and profile picture.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要提供`FBLoginView`的`FBLoginView`代理的`LBFacebookViewController`，以便用户可以使用平台登录和登出。作为我们UI视图的一部分，我们将显示一些Facebook用户账户信息，例如用户名和头像。
- en: We will use `FBSession` later in the book to retrieve more information about
    a user's social life.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书后面使用`FBSession`来检索有关用户社交生活的更多信息。
- en: Login flow
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录流程
- en: Before the new Facebook SDK 3, handling Facebook sessions was tedious and could
    take a lot of our time in code maintenance and debugging.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的Facebook SDK 3之前，处理Facebook会话很繁琐，可能会花费我们大量的时间在代码维护和调试上。
- en: The `FBSession` component ([https://developers.facebook.com/docs/reference/ios/3.2/class/FBSession/](https://developers.facebook.com/docs/reference/ios/3.2/class/FBSession/))
    was introduced with Version 3 of the Facebook SDK. It is a component that keeps
    track and ensures that the Facebook session information is up-to-date. The **authentication
    token** is the most important property of the `FBSession` information. All communication
    security with the Platform is based on the authentication token. In fact, it will
    be part of every single request we perform on the Facebook Platform. The previous
    SDK version onwards, developers hold responsibility for extending the token after
    it has expired.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBSession`组件（[https://developers.facebook.com/docs/reference/ios/3.2/class/FBSession/](https://developers.facebook.com/docs/reference/ios/3.2/class/FBSession/））是在Facebook
    SDK的版本3中引入的。它是一个跟踪并确保Facebook会话信息保持最新的组件。**身份验证令牌**是`FBSession`信息中最重要的属性。所有与平台的安全通信都基于身份验证令牌。实际上，它将是我们在Facebook平台上执行的每个请求的一部分。从之前的SDK版本开始，开发者有责任在令牌过期后对其进行扩展。'
- en: '`FBLoginView` is a UI component provided by the Facebook SDK and will enable
    any iOS application to authenticate users against Facebook Platform without having
    to write the code to handle requests/responses to/from the Platform.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBLoginView`是由Facebook SDK提供的UI组件，它将使任何iOS应用程序能够在不编写处理平台请求/响应的代码的情况下，对Facebook平台进行用户身份验证。'
- en: '`FBLoginView` handles user interactions and also keeps the `FBSession` state
    constantly updated. As previously mentioned, Apple has been providing Facebook
    integration since iOS 6\. `FBLoginView` is able to use the native UI component
    to let users accept that the application they are currently using can have access
    to their Facebook profiles. This can only happen when the current iOS device has
    a Facebook account associated with it. When no Facebook account is set, `FBLoginView`
    will authenticate users using Safari.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBLoginView`处理用户交互并持续更新`FBSession`状态。如前所述，自iOS 6以来，苹果一直在提供Facebook集成。`FBLoginView`能够使用原生UI组件让用户接受他们当前使用的应用程序可以访问他们的Facebook资料。这只能在当前iOS设备与Facebook账户相关联时发生。如果没有设置Facebook账户，`FBLoginView`将使用Safari对用户进行身份验证。'
- en: '`FBLoginView` provides four callbacks to handle Facebook Platform''s response
    after authentication using `FBLoginViewDelegate`, as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBLoginView`通过`FBLoginViewDelegate`提供了四个回调来处理使用`FBLoginView`进行身份验证后Facebook平台的响应，如下所示：'
- en: '`loginView:handleError:`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loginView:handleError:`'
- en: '`loginViewFetchedUserInfo:user:`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loginViewFetchedUserInfo:user:`'
- en: '`loginViewShowingLoggedInUser:`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loginViewShowingLoggedInUser:`'
- en: '`loginViewShowingLoggedOutUser:`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loginViewShowingLoggedOutUser:`'
- en: For our social application, we are going to use the `FBLoginView` component.
    We are going to talk about these methods later, during the login/logout flow implementation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的社交应用程序，我们将使用`FBLoginView`组件。我们将在登录/注销流程实现期间讨论这些方法。
- en: '`FBLoginView` handles the login flow, and we will only need to set our application
    state after a successful login process.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBLoginView`处理登录流程，我们只需要在登录过程成功后设置我们的应用程序状态。'
- en: Creating the Login interface
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建登录界面
- en: In this section we are going to create a new view controller that will enable
    the application to authenticate users against the Facebook Platform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个新的视图控制器，使应用程序能够对Facebook平台进行用户身份验证。
- en: Creating the Facebook view controller
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Facebook视图控制器
- en: Starting from our previous project, we are going to add a new view controller
    that will contain UI elements and logic to handle the authentication flow.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们之前的工程开始，我们将添加一个新的视图控制器，该控制器将包含UI元素和逻辑来处理身份验证流程。
- en: Select the `LBViewController` of the application, add a new button on the right-bottom
    position, and set the label as `Go Social,` as displayed in the following screenshot.
    This button will prompt the Facebook view controller and will enable users to
    use the Platform.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 选择应用程序的`LBViewController`，在右下角位置添加一个新按钮，并将其标签设置为`Go Social`，如以下截图所示。此按钮将提示Facebook视图控制器，并使用户能够使用该平台。
- en: '![](img/IVyBxDdh.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/IVyBxDdh.jpg)'
- en: The Go Social button
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Go Social按钮
- en: Now, create a new view controller. From the **Object Library** list view, drag-and-drop
    a view controller into a Storyboard as shown in the following screenshot. The
    Storyboard now has a new a scene that we will refer to as Facebook Scene.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个新的视图控制器。从**对象库**列表中，将视图控制器拖放到Storyboard中，如以下截图所示。Storyboard现在有一个新的场景，我们将称之为Facebook场景。
- en: '![](img/IDd4U54r.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/IDd4U54r.jpg)'
- en: The new Storyboard view controller
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 新的故事板视图控制器
- en: The new scene will contain the `FBLoginView` component. We will need to segue
    between the first scene and the Facebook Scene. Select the **Go Social** button,
    hold the *Ctrl* button, and select the **Go Social** button again to create a
    connection between the two scenes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 新场景将包含`FBLoginView`组件。我们需要在第一个场景和Facebook场景之间进行转场。选择**Go Social**按钮，按住*Ctrl*按钮，然后再次选择**Go
    Social**按钮以在两个场景之间创建连接。
- en: 'The following screenshot shows how to create the new segue:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了如何创建新的转场：
- en: '![](img/ttVPTGu0.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ttVPTGu0.jpg)'
- en: The Go Social segue
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Go Social转场
- en: Select **push** under **Action Segue**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在**动作转场**下选择**推送**。
- en: '![](img/KQFyrRT9.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/KQFyrRT9.jpg)'
- en: Push selected as Action Segue
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将选择作为动作转场
- en: For those of you who are already familiar with Storyboard, you will notice that
    defining a Push segue within a view controller that does not belong to the Navigation
    Controller will throw an exception because, without the Navigation Controller,
    the application is not able to keep track of the user's path through our views.
    In order to avoid the exception, we need to create a Navigation Controller that
    will wrap the two scenes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些已经熟悉Storyboard的你们来说，你们会注意到，在不属于导航控制器的视图控制器中定义推送转场会抛出异常，因为没有导航控制器，应用程序无法跟踪用户通过我们的视图的路径。为了避免异常，我们需要创建一个将两个场景包裹在内的导航控制器。
- en: The following screenshot shows how to create a Navigation Controller to define
    the user's interaction. Select the first scene and go to Editor | Embed In | Navigation
    Controller.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了如何创建导航控制器以定义用户的交互。选择第一个场景，然后转到编辑器 | 嵌入 | 导航控制器。
- en: '![](img/VQV8g55a.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/VQV8g55a.jpg)'
- en: Creating the Navigation Controller
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建导航控制器
- en: The Navigation View Controller will now enable Push segues inside the application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 导航视图控制器现在将使应用程序内的推送转场成为可能。
- en: '![](img/jyg0gkar.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/jyg0gkar.jpg)'
- en: Navigation Controller
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 导航控制器
- en: The preceding screenshot shows the result after creating the Navigation Controller.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了创建导航控制器后的结果。
- en: Now that we have the navigation fixed, we need to create a class that will bind
    the Facebook view scene with the logic that we will implement. To create a new
    `ViewController` class, right-click on the `iLikeBook` folder and go to **New
    File** | **Object-C Class**. Provide a class name, `LBFacebookVIewController`,
    and as a subclass define `UIVIewController`. Deselect the **With XIB for user
    interface** option.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/GdfyvWcz.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: LBFacebookViewController
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: The new class will appear under the `iLikeBook` folder. We need to bind the
    Facebook Scene in the Storyboard with the `LBFacebookVIewController`. Select Storyboard
    and the Facebook Scene. Open the **Utilities** dashboard and, on the **View**
    pane at the top-right position on XCode, select the last button to the right.
    Open **Identity Inspector** under **Custom Class** and set the **Class** field
    to `LBFacebookVIewController`. The application will load the code from the `LBFacebookVIewController`
    class when users access the Facebook Scene.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `LBFacebookVIewController.m` and add the @interface statement to the code
    as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While the Facebook Scene is still selected, drag-and-drop it into a new `UIView`.
    The background color for the new view is white and it could be difficult to identify
    the view when it is not selected. Change the background color of the view to light
    gray by going to **Attributes Inspector** | **Background**. Set the new size view
    component to `100 x 50` and the position to `(70, 45)` using the Size Inspector.
    Set **Custom Class** for the new `UIView` as `FBLoginView`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ElbfbtnE.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: FBLoginView
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to create a reference to `FBLoginView` within `LBFacebookViewController`.
    After selecting the Facebook Scene, open up the Assistant Editor and use the **Show
    the Assistant Editor** button on the top-right spot of XCode.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3BnK90I.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: FBLoginView versus LBFacebookViewController
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that `LBFacebookViewController.m` is accessible on the left side.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Select `FBLoginView`, hold the *Ctrl* button, and drag the view into the class
    file within the @interface statement. XCode will ask for the reference name, as
    displayed in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/UcZUqAfh.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: The FBLoginView reference creation
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave the **Storage** field with the `Weak` value. The resulting code statement
    should look something like the one shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/DrCjVTzh.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: The FBLoginView reference
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: The Facebook Scene now contains `FBLoginView`, but we would like to give users
    some feedback after they have performed the login correctly. Drag-and-drop a new
    `UIView` within Facebook Scene. Resize it to 200 x 200 px and place it on the
    center of the scene. Set **Custom Class** for `UIView` as `FBProfilePictureView`.
    The `FBProfilePictureView` will allow the application to display the user's Facebook
    profile information after a successful login.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QysCXufk.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: FBProfilePictureView
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the result after adding `FBProfilePictureView`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '`FBProfilePictureView` needs to be updated for all logins and logouts; therefore,
    the application needs to have a reference of the UI object within the `LBFacebookViewController`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBProfilePictureView` 需要更新所有登录和登出操作；因此，应用程序需要在 `LBFacebookViewController`
    中有一个 UI 对象的引用。'
- en: 'As we did for `FBLoginView`, we need to create a reference of `FBProfilePictureView`
    within the `LBFacebookViewController` class. The result should look like the following
    screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 `FBLoginView` 中所做的那样，我们需要在 `LBFacebookViewController` 类中创建 `FBProfilePictureView`
    的引用。结果应类似于以下截图：
- en: '![](img/QCGqUPcj.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/QCGqUPcj.jpg)'
- en: FBProfilePictureView Reference
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBProfilePictureView` 参考信息'
- en: Before moving on with `FBLoginView` delegates, we need to set the way the application
    is going to handle external URLs within the `AppDelegate` class. We want the Facebook
    SDK to handle the communication between our app and the Social platform.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续使用 `FBLoginView` 代理之前，我们需要在 `AppDelegate` 类中设置应用程序处理外部 URL 的方式。我们希望 Facebook
    SDK 处理我们应用程序和社交平台之间的通信。
- en: 'Import the Facebook SDK within the `AppDelegate` file using the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在 `AppDelegate` 文件中导入 Facebook SDK：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open the **Live Blogger** (**LB**) `AppDelegate` file and append the following
    code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 **Live Blogger** (`LB`) 的 `AppDelegate` 文件并添加以下代码：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code will handle each single request toward the Facebook Platform.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将处理针对 Facebook 平台的每个单独请求。
- en: 'Due to a bug in `FBProfilePictureView`, the application could throw an exception
    at runtime if the `FBProfilePictureView` class was not previously loaded. To resolve
    this, we need to change the following highlighted `AppDelegate` method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `FBProfilePictureView` 中存在一个错误，如果该类之前未加载，应用程序在运行时可能会抛出异常。为了解决这个问题，我们需要更改以下突出显示的
    `AppDelegate` 方法：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next step is to set `FBLoginView`. Open `LBFacebookViewController` and
    customize the (void) `viewDidLoad` method as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置 `FBLoginView`。打开 `LBFacebookViewController` 并自定义 (void) `viewDidLoad`
    方法如下：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The self.fbLoginViewsetDelegate:self method sets the current class as the delegate
    for `FBLoginView`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.fbLoginViewsetDelegate:self` 方法将当前类设置为 `FBLoginView` 的代理。'
- en: '![](img/Ta8QNnVi.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Ta8QNnVi.jpg)'
- en: The login UI
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 登录用户界面
- en: Login delegates
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录代理
- en: Now that the `FBLoginView` component is in place, we need to focus on its delegates
    to handle responses and/or errors.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `FBLoginView` 组件已经就位，我们需要关注其代理以处理响应和/或错误。
- en: Open `LBFacebookViewController.m`. As we did in the previous section, we need
    to import the Facebook SDK.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `LBFacebookViewController.m`。正如我们在上一节中所做的那样，我们需要导入 Facebook SDK。
- en: 'We also need to extend `LBFacebookViewController` with `FBLoginViewDelegate`
    using the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要使用以下代码将 `FBLoginViewDelegate` 扩展到 `LBFacebookViewController`：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the preceding code, we will allow the setting of the current class as
    the delegate of `FBLoginView` to catch callbacks.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述代码，我们将允许将当前类设置为 `FBLoginView` 的代理以捕获回调。
- en: 'The first delegate that we should implement is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该实现的第一代理如下：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code snippet shows the delegate code that will be called in case
    `FBLoginView` will throw any errors and will print the errors in the debug window.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段显示了在 `FBLoginView` 抛出任何错误时将被调用的代理代码，并将错误打印到调试窗口中。
- en: The following code block shows instructions to handle the callbacks after the
    user has logged in; the application still has no information about the user's
    Facebook account. In the upcoming chapters, the following method will be used
    to enable buttons to provide more functionalities.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块显示了在用户登录后处理回调的说明；应用程序仍然没有关于用户 Facebook 账户的信息。在即将到来的章节中，将使用此方法来启用按钮以提供更多功能。
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following method is the one that will provide us with information about
    the user''s Facebook account. The following code is the callback method to handle
    user-fetched information:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法将为我们提供有关用户 Facebook 账户的信息。以下代码是处理用户获取信息的回调方法：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `user` object contains the Facebook account information. `FBGraphUser` provides
    an easy interface to access the account data. The method `setProfileId` sets the
    `FBProfilePictureView` ID and will automatically retrieve the account picture
    through an API call to Facebook Platform.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`user` 对象包含 Facebook 账户信息。`FBGraphUser` 提供了一个简单的接口来访问账户数据。`setProfileId` 方法设置
    `FBProfilePictureView` ID，并通过调用 Facebook 平台的 API 获取账户图片。'
- en: Dealing with Facebook sessions is really easy now due to the new updates to
    the Framework SDK.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Framework SDK 的新更新，处理 Facebook 会话现在变得非常简单。
- en: '![](img/t4OKFV1M.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/t4OKFV1M.jpg)'
- en: Successful user login
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 用户登录成功
- en: Logout flow
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登出流程
- en: 'The logout flow is nothing but using a new delegate method for `FBLoginView`.
    Again, in `LBFacebookViewController`, create the new delegate method as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 登出流程不过是使用`FBLoginView`的新委托方法。再次强调，在`LBFacebookViewController`中，创建新的委托方法如下：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding method will be called after users are successfully logged out.
    Since the UI so far is still a work-in-progress, we only need to update `FBProfilePictureView`
    with a null value for the profile ID as no user is logged in.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户成功登出后，将调用前面的方法。由于到目前为止UI仍在开发中，我们只需要将`FBProfilePictureView`的profile ID更新为null值，因为没有用户登录。
- en: This is everything we need to do to handle the logout flow.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们处理登出流程所需做的所有事情。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covers all the points required for implementing the Facebook login
    and logout flows. We initially created a view controller to use as the interface
    for the users.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了实现Facebook登录和登出流程所需的所有要点。我们最初创建了一个视图控制器，用作用户界面的接口。
- en: In order to handle authentication logic and communication with the Social Platform,
    we are relying on `FBLoginView`. In order to provide some feedback to users, we
    have used the `FBProfilePictureView` to display a user's picture profile by setting
    one of the object properties.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理身份验证逻辑和与社交平台的通信，我们依赖于`FBLoginView`。为了向用户提供一些反馈，我们使用了`FBProfilePictureView`通过设置对象的一个属性来显示用户的图片资料。
