- en: Enemy Characters with AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how to import 3D geometry and textures into
    the project, set up the character and add animation to the character. In this
    chapter, we will put that knowledge to use and start making a fighting game with
    basic control scheme.
  prefs: []
  type: TYPE_NORMAL
- en: We will import the player character first and set the different animation frames
    required for the different animations for the fighting like idle, punch, block,
    and get hit. We will also be creating the different states using the Animation
    Controller. Animation Controller let us decide the animation flow based on the
    behavior of the character.
  prefs: []
  type: TYPE_NORMAL
- en: We will also be looking at game balancing and how to be fair to the player.
    If the game is unfair, the player will get frustrated and quit the game and will
    not recommend the game to anyone.
  prefs: []
  type: TYPE_NORMAL
- en: We will be implementing controls using mouse and keyboard but, in a later chapter,
    we will see how to implement touch controls for handheld devices.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the chapter we will have a basic fighting system in which we get
    to hit the enemy and the enemy will take hits or block our attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter includes the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing player model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating player using Animation Controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting player controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding enemy character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enemy behavior and AI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finalizing the fight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing the player model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, make sure you create a new Unity 3D project. This is not like the first
    project we created as this is going to be a 3D project, not a 2D project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve created the project, you will find the `Dude.FBX` file in the
    assets for this chapter, so drag and drop the file into the Unity project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In your case the model will be gray, not red as shown here. To make it red,
    double-click on the `Materials` folder. You will see the `01- Default` file. When
    you select it, you''ll will get an option to change the color of the object. Click
    on the gray box next to the Albedo option in the Inspector panel and select a
    red color to change the color of the character:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next thing that needs to be done by us is to create animation clips for
    all the animations that we have in the game. Click on the Dude character in the
    `Assets` folder of the project. Now look at the Inspector pane. In the Inspector
    pane you will see three tabs called Model, Rig, and Animations, as shown in the
    following screenshot. Click on the Animations tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_003.png)'
  prefs: []
  type: TYPE_IMG
- en: This shows all the animation clips that currently exist. As of now, there is
    only one animation clip, called `Take 001`, that starts at 0 and ends at 80 frames.
    You can even preview the animation by clicking on the play button at the bottom
    of the panel.
  prefs: []
  type: TYPE_NORMAL
- en: You will see that `Take 001` has all the animations that were imported, along
    with the FBX file, and it has the idle, guard, punch and get hit animations. Since
    all the animations are in a single clip, we have to break up the animations into
    individual clips.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, first we extract the idle clip which runs from frame 0 to frame
    29\. So, we change the name to idle and set the end frame to 29 for the animation
    clip as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_004.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to click on the Apply button at the bottom for the changes to take
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: Also, observe that the Loop Time checkbox is ticked. This is because the animation
    has to be looped so if we don't check this box, then the animation will just play
    once and stop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s extract the second animation clip which is the `guard`/`defend`
    animation. For this click on the + icon in the Clips menu. This will create a
    default animation called `Take 001` as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, once again, select the Take 001 clip, rename it to defend, and change
    the start and end time to 32 and 49\. Click Loop Time and click on the Apply button
    at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_006.png)'
  prefs: []
  type: TYPE_IMG
- en: Now add the animation clip for **punch** and **getHit** animations as well.
    The punch animation starts from 51 and ends at 60 and the getHit animation starts
    at 71 and ends at 75.
  prefs: []
  type: TYPE_NORMAL
- en: 'For these animations, the Loop Time option doesn''t need to be checked as they
    don''t need to loop. Once you have all the required animations, the Clips window
    should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_007.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we have finished extracting the animations, we can create the Animation
    Controller for the player character.
  prefs: []
  type: TYPE_NORMAL
- en: Player Animation Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new Animation Controller right-click on the `Assets` folder in
    the project, select the Create option, and then select Animation Controller from
    the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Rename the file to dudeAC and double-click on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you double-click on it, a new panel will open up called Animation, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Animation Controller basically controls the flow of the animation. There
    are three states that are added in by default; these are Entry, Any State, and
    Exit:'
  prefs: []
  type: TYPE_NORMAL
- en: The Entry state specifies which animation will be played at the start of the
    scene. So, in most cases the first animation that gets played is the idle animation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Any State specifies which animation needs to be executed irrespective of
    the previous animation that is being played.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Exit state is the animation that is played at the exit of the scene.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's set up the states for the player, which will be the same setup for the
    enemy as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create the default animation so that, when the scene starts,
    the idle animation gets played. In the Animator panel, right-click anywhere, select
    Create State option from the list, and then select the Empty option, as depicted
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_011.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the New State created and open the Inspector panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a transition from the Entry state. Right-click on it,
    a Make transition option will open, so click on this option. An arrow will start
    from the clicked state. Now click on the state that we need to transition. This
    will create a transition to that new state as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, rename the new state to idle. Click on the new state and rename the state
    to Idle and change the Motion field to idle by selecting the small circle next
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To test if the controller works, drag and drop `theDude` character on to the
    hierarchy and place him perpendicular to the camera as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_014.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Dude character in the scene and in the Inspector panel, then drag
    and drop the Animation Controller on the Controller field in the Animator component
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_015.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the play button up top and you should see the character with the idle
    animation playing. Now that we are sure that it is working properly, we can go
    into the Animation Controller and add states that are required for the game.
  prefs: []
  type: TYPE_NORMAL
- en: In Any State state, we should be able to have the defend, Punch and also GetHit
    animations. If the player is not in any of these states then he should revert
    to idle state.
  prefs: []
  type: TYPE_NORMAL
- en: So, in the Animation Controller, add the three states, attach the respective
    animations in the motion, and change the name of each state accordingly. After
    creating the three states, we also need to transition between the Any State state
    and each of these states, and when each of the states has finished, it needs to
    transition back to the idle state.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a transition from a given state, right-click on it: a Make Transition
    option will open. Click on it, and an arrow will start from the clicked state.
    Next, click on the state that we want to transition to. This will create a transition
    to that state. The transitions are shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_016.png)'
  prefs: []
  type: TYPE_IMG
- en: Each of these transitions will be controlled through a script. To trigger each
    of the states, we will use either Booleans or triggers to enable these state changes.
  prefs: []
  type: TYPE_NORMAL
- en: To create these parameters, click on the Parameters tab at the side of the Animator
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: To create a new parameter, click on the + sign next to the search bar. You can
    either create a float, integer, Boolean, or a trigger parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purpose, we created a Boolean parameter, called bIsDefending, and two
    trigger parameters, called tGotHit and tIsPunching, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_017.png)'
  prefs: []
  type: TYPE_IMG
- en: The difference between a Boolean and a trigger is that a trigger will set itself
    to false once it has been activated where as a Boolean has to have `true` and
    `false` set programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how it is implemented in the current game. First, we'll set the transitions
    for Punch and GetHit animations; we will then look at defend after. Select the
    transition arrow from Any State to Punch.
  prefs: []
  type: TYPE_NORMAL
- en: 'You know the transition has been selected when the arrow turns blue. The screenshot
    shows how the default state looks. We are going to make some changes here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_018.png)'
  prefs: []
  type: TYPE_IMG
- en: First of all, we want this transition to occur only when the player is punching.
    So in the Conditions tab, press the + sign and add the tInPunching condition.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, uncheck the Has Exit Time option. If this is checked then the transition
    will only occur once the previous animation has completed playing. We don't want
    that. We want the player to start playing the punching animation as soon as we
    click the Punch button.
  prefs: []
  type: TYPE_NORMAL
- en: Thirdly, and most importantly, the animation preview window shows the animation
    played during the transition. Initially it shows that the animation will start
    from zero, play the idle animation, and then transition to the punch animation.
    We actually only want the punch animation to start immediately, and we just want
    one frame of transition between idle and punch animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we bring the Punch back to the start and also make the start and stop really
    small as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_019.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s look at the Punch to Idle animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_020.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we keep the Has Exit Time option checked as we want the animation to finish
    and then play the idle animation. Also, the idle animation is pulled back to the
    start and the animation play time is also reduced to one frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same is done for the transition from Any State to GetHit as shown in the
    following screenshot. But here the condition is changed to tGotHit instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, from GetHit to idle state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at how to create transitions from Any State to the defend state,
    and then from defend to the idle state. The transition from Any State to the defend
    state should be changed to as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_023.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, once again, we move the defend animation back and change the play to
    one frame. The Has Exit Time option is checked and now the condition is changed
    to bIsDefending, which is set to true. For the transition from defend to idle
    animation, we set the bIsDefending to false and change the animation width as
    usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_024.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the transition from idle to defend, we do it similarly to how we did for
    Any State to defend, except we uncheck the Has Exit Time checkbox, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_025.png)'
  prefs: []
  type: TYPE_IMG
- en: With that we are through the Animation Controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting player controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To control the states we need to attach a script to the player. We will be using
    the left and right mouse clicks to control the player. The left mouse click will
    be for attacking, and the right mouse click will be for defending. If neither
    are clicked, then the idle animation will be played.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controls can be changed under Unity''s Projects Settings option in the
    Edit menu. Select the Input option from the list, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_026.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Keep the name in mind, as, while referring in the code, we will be using the
    name of the button. So, for left-click, we will be referring to the name Fire1\.
    You can check the names of the different buttons in the Inspector panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_027.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's create a new script by right-clicking in the Assets folder option | Create
    | C# Script and name it `playerScript`. Double-click on it and it should open
    in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: At the top, we create a `private` variable to get the Animator component and
    store it in the variable.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in the start function, we get the Animator component and assign it to
    `anim,` as otherwise we would have to do this for every frame which would get
    very taxing.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Update` function, we first check for defending. If the `Fire 2` button,
    which is the right-click on the mouse, is pressed then we set the `bIsDefending`
    to `true`. The `bIsDefending` variable is the same as that we defined as a parameter
    in the Animation Controller option.
  prefs: []
  type: TYPE_NORMAL
- en: If the button is up, then we set the `bIsDefending` variable to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set the attacking state. If the `Fire1` button is pressed, then we
    first set defending to `false`, and then set `tIsPunching` to `true`. We also
    debug logout so that, we can see the specific code of hit.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see if this really works, we have to attach it to the player character in
    the scene and add it as a component: drag the code and add it as a component to
    `theDude` character. Now, if you look in the Inspector, you can see that the script
    has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_028.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, if you right-click on the mouse, the player should block, and if you left-click
    with the mouse, the player should punch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_029.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's give the player an enemy to punch at.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an enemy character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as we dragged the player into the scene, drag theDude character from `Assets`
    into the `Hierarchy`. Rename this character to Enemy in the `Hierarchy`. This
    dude will also be red, which we don't want, so we'll create a new material.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the Material folder and then select Create | Material. Name the
    material enemy as `Material`. Change the color next to Albedo color control from
    the default to blue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now drag and drop the material to the enemy character. Also place and rotate
    the character so that it is standing opposite to the player character, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_030.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also drag the dudeAC Animation Controller to the Controller component in the
    Animator component for the enemy as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_031.png)'
  prefs: []
  type: TYPE_IMG
- en: Enemy behavior and AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The enemy will start with the idle animation as you play the game. Let's add
    some behavior to the enemy character.
  prefs: []
  type: TYPE_NORMAL
- en: The AI is implemented by creating a pattern, which will determine when the next
    state change for the enemy will take place, and the period of time that the enemy
    will either be idle, defend, or attack.
  prefs: []
  type: TYPE_NORMAL
- en: The pattern is an array and has 20 elements in it. After all the elements are
    exhausted the patterns is randomized and the counter is set to 0 again.
  prefs: []
  type: TYPE_NORMAL
- en: Some intervals last for 10 frames, while others last for up to 120 frames or
    two seconds. The player has to judge and make sure that he doesn't get hit, and
    he has to defeat the `enemy` before they kill him. This will make more sense once
    we go through the code.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new C# script and name it `enemy`. Add the following script to the
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we initialize our variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Start` function, we get the `Animator` component and set the pattern,
    which we will randomizing later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Update` function we update the values that we set initially:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Shuffle` function randomizes the initial pattern that we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As in the case of the player at the top of the code, we create a `private` variable
    to store the enemy animator variable.
  prefs: []
  type: TYPE_NORMAL
- en: We also create a bunch of integer variables called `myTick`, `currentTick`,
    `prevTick`, `nextTick`, `patternLength` and `patternCount`.
  prefs: []
  type: TYPE_NORMAL
- en: The `myTick` variable is just a counter, which keeps incrementing. The `CurrentTick`
    and `prevTick` variables keep track of the current frame tick and `prevTick` keeps
    track of the tick when an action last occurred.
  prefs: []
  type: TYPE_NORMAL
- en: The `patternLength` variable keeps track of the number of the items in the pattern
    array and `patternCount` keeps track of the current pattern number in use.
  prefs: []
  type: TYPE_NORMAL
- en: Pattern is an array containing the intervals for the actions.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Start` function, we get the Animator component and set the `isDenfendingbool`
    variable to `true` so that the enemy starts off defending. We shuffle the pattern
    and assign the `patternLength` and `nextTick` to the first element of the pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Next in the `Update` function, we first increment the tick and assign `myTick`
    to the `currentTick`.
  prefs: []
  type: TYPE_NORMAL
- en: We then check whether it is time for the next action to perform by checking
    if the `currentTick` is equal to the sum of the previous tick and `nextTick`.
  prefs: []
  type: TYPE_NORMAL
- en: If it is equal, then we create a random number from one to three. Depending
    upon whether the returned value is 1, 2, or 3, there is a `switch` statement and
    the enemy will punch, defend, or be idle.
  prefs: []
  type: TYPE_NORMAL
- en: At the end, we assign the `currentTick` to `previousTick`, and `nextTick` to
    next `patternCount`.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to increment the `patternCount` and to check if the `patternCount`
    variable's value has exceeded the length. If it is has exceeded it, then we need
    to reset it.
  prefs: []
  type: TYPE_NORMAL
- en: So, if the value of `patternCount++` is greater than or equal to the value of
    `patternLegth`, then we reset the pattern to zero and shuffle the pattern, otherwise
    we just increment the `patterCount`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we also have a function which shuffles the pattern so that it doesn''t
    get repeated. Add this script component to the enemy object in the scene and watch
    him be idle, block, and punch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_032.png)'
  prefs: []
  type: TYPE_IMG
- en: Finalizing the fight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us make the player react to the enemy''s attacks by changing the behavior
    of the player. In the `playerScript`, add the following line of code. At the top
    of the class, create a new `public` variable of type `GameObject` and call it
    `enemy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, at the start of the `Update` function, get the `Animator` component of
    the enemy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, after the attacking function in the update, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we check if the enemy is punching. If the enemy is punching and the player
    is not defending, then we set the `gotHit` trigger to be `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag `theDude` character to the enemy script component as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_033.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, in the enemy script add a public GameObject variable called player.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Just before the end of the `Update` function, add the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Drag and drop the player in the `GameObject` in the enemy script take a hit
    when he is not defending:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_034.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now play the game and you will see that the enemy will take a hit when he is
    not defending:'
  prefs: []
  type: TYPE_NORMAL
- en: Also, as of now the player can keep left-clicking and the hero character can
    keep punching. To limit the number of punches the player can do, add the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'At the start of the `Update` function, increment the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The attack code needs to be changed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to import an FBX model, import the animations, and
    set names for the individual animations. We created an Animation Controller and
    transitions between animations. Once the animations controller had been created,
    we then controlled the animation using the code.
  prefs: []
  type: TYPE_NORMAL
- en: We also created player controls, created a very basic AI, and controlled the
    AI behavior with a pattern which we randomized to avoid pattern repetition.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a basic skeleton to work with, we will improve this and add
    a proper game loop in the next chapter.
  prefs: []
  type: TYPE_NORMAL
