- en: Chapter 8. Screen Resolution and Orientation Changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Targeting a device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeting the Retina display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting multiple resolutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the default aspect ratio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling auto-orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening for orientation changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to orientation changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The inclusion of an accelerometer allowed the original iPhone to detect changes
    in its physical orientation; reflowing its on-screen content to suit the user's
    preference for either portrait or landscape viewing. Offering this, however, meant
    that an application had to be designed and coded for two screen aspect ratios—one
    for the portrait and another for landscape.
  prefs: []
  type: TYPE_NORMAL
- en: As the iOS family has grown, so too has the number of screen resolutions that
    must be supported. With the launch of the iPad and the introduction of Retina
    display devices, there are now three separate resolutions. If you also take into
    consideration the two aspect ratios, then screen layout management for your application
    can become daunting.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides recipes that will help you render content properly on
    any iOS device, regardless of its screen resolution and physical orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Targeting a device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The iOS family consists of three devices: iPhone, iPod touch, and iPad. When
    developing for iOS, you must state the devices that you are specifically targeting.
    Your choice will dictate how your app is run by each of the three.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will take you through the necessary steps required to create an
    app that targets the entire family.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An FLA has been provided as a starting point for this recipe. Open `chapter8\recipe1\recipe.fla`
    from the book's accompanying code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Sitting on the stage is a dynamic text field with an instance name of `output`.
    We will use this text field to report which device your app is currently being
    run on.
  prefs: []
  type: TYPE_NORMAL
- en: For the avoidance of doubt, this recipe will not take advantage of the Retina
    display resolution of the iPhone 4/4S and fourth-generation iPod touch. If you
    would like to provide Retina support, then refer to this chapter's *Targeting
    the Retina display* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will specify the target devices from the AIR for iOS Settings panel and then
    write some ActionScript to report which device the app is currently running on.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the target devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us start by setting the target devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**
    from Flash Professional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **General** tab is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **iPhone and iPad** from the **Device** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Flash Professional CS5.5, then also set the **Resolution**
    field to **Standard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detecting the current device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let us move onto the ActionScript required for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class; name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following three import statements to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, set a scale mode and alignment for the stage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `Capabilities` class, determine which device the app is running on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the document class within the same folder as your FLA and name it `Main.as`.
    Also save the FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish and test the app on your device. Install it on multiple devices if you
    have access to more than one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you run it on an iPhone or iPod touch, the following text will be output
    to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iPhone / iPod touch**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Those testing on an iPad will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You specify the devices you wish to target by setting the **Device** field
    within the AIR for iOS Settings panel. The following three options are available
    to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iPhone**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iPad**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iPhone and iPad**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The iPod touch is not listed because it is treated as an iPhone—both devices
    share the same aspect ratio and resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting **iPhone** restricts your screen size to that of the iPhone and the
    iPod touch. Your app will still run on the iPad but it won't attempt to take advantage
    of the iPad's increased resolution. Instead, the iPad will run the app using the
    iPhone's standard 320x480 resolution. Users can either run the app at its normal
    size or use pixel-doubling to cover almost the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting **iPad** does take advantage of the iPad's entire 768x1024 resolution
    but restricts your app to that device.
  prefs: []
  type: TYPE_NORMAL
- en: If you are writing an app that can run across all three devices by adapting
    to the different screen sizes then select **iPhone and iPad**. This is more commonly
    known as a universal app and is the type of application we have opted for in this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apple acknowledges the difficulty of writing for multiple devices and screen
    resolutions. To ease development, they provide the following two options when
    targeting the entire iOS family:'
  prefs: []
  type: TYPE_NORMAL
- en: Write two separate apps—one for iPad and another for iPhone/iPod touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a universal app that adapts to each device's screen size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course it is not mandatory that you support all three devices. For example,
    it is perfectly acceptable to write an app that only targets the iPad.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to determine the device your app is running on by querying the
    device's screen resolution. Both the iPhone and iPod touch have a horizontal resolution
    of 320 pixels, while the iPad's is 768 pixels wide. Therefore, we only need to
    query the static `Capabilities.screenResolutionX` property to determine the device
    type rather than also examining the vertical resolution with `Capabilities.screenResolutionY`.
  prefs: []
  type: TYPE_NORMAL
- en: You may be tempted to use `Stage.stageWidth` instead, but remember that with
    the stage dimensions fixed, the same width will be returned across all device
    types for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: You can obtain more information regarding `flash.system.Capabilities, flash.display.StageScaleMode`
    and `flash.display.StageAlign` from Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is also worth considering the following information when targeting multiple
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Application launch image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When targeting multiple device types, remember to include a launch image for
    each supported resolution. Alternative launch images can also be provided for
    different orientations if you choose to support them. For more detail, refer to
    the *Including an application launch image* recipe from [Chapter 3](ch03.html
    "Chapter 3. Writing your First App").
  prefs: []
  type: TYPE_NORMAL
- en: Including icons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to include the appropriate icon artwork required by each device type
    you wish to support. Refer to the *Including icons* recipe from [Chapter 3](ch03.html
    "Chapter 3. Writing your First App") for more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Landscape aspect ratio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `screenResolutionX` and `screenResolutionY` properties are always returned
    as if the device is being held in its portrait orientation. For example, an iPad
    app that has a default landscape orientation will still return a horizontal resolution
    of 768 pixels and a vertical resolution of 1024 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*AIR for iOS general settings, [Chapter 2](ch02.html "Chapter 2. Building iOS
    Apps Using Flash")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Targeting the Retina display*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Setting the default aspect ratio*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeting the Retina display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The iPhone 4 introduced the world to the Retina display. It packs four times
    the number of pixels into the same screen found on earlier models, providing the
    sharpest images yet seen on a mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: Those using Flash Professional CS5.5 and at least AIR 2.6 can use the full 640x960
    resolution provided by Retina display iPhones and iPod touches.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the book's accompanying code samples, open `chapter8\recipe2\recipe.fla`
    into Flash Professional CS5.5.
  prefs: []
  type: TYPE_NORMAL
- en: This FLA has been provided as a starting point and has a dynamic text field
    named `output` sitting on the stage. We will use this text field to report whether
    or not the app is being run on a Retina display device.
  prefs: []
  type: TYPE_NORMAL
- en: While this recipe's example app will run on an iPad, it won't target its 768x1024
    screen resolution. Instead, it will simulate a standard resolution iPhone/iPod
    touch.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Retina display support is specified from the AIR for iOS Settings panel. We
    will also write a basic document class to determine whether the app is actually
    running on a Retina device or not.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Retina display support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us start by enabling support for the Retina display''s screen resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the **General** tab is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Resolution** field to **High**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, for this recipe, ensure that the **Device** field is set to **iPhone**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OK** button to close the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detecting a Retina display device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the AIR for iOS settings taken care of, we can turn our attention to the
    ActionScript required to determine if the app is being run on a Retina display
    device:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following three import statements to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the stage''s scale mode and alignment properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Query the device''s screen resolution to determine whether or not it has a
    Retina display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file as `Main.as` within the same folder as the FLA. Also save
    the FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish and deploy the IPA to your device. If you have a Retina and a standard
    display device available, then install the app on both.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you run the app on a Retina display iPhone or iPod touch, the following
    text will be output to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Retina Resolution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For standard display devices, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard Resolution**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although the aspect ratio has been maintained, there are now two screen resolutions
    that you can target when developing for iPhone and iPod touch:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standard: 320x480'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Retina: 640x960'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Retina display resolution is found in post third-generation iPhone and iPod
    touches. All previous models use the standard display resolution.
  prefs: []
  type: TYPE_NORMAL
- en: If you choose to support the Retina display, then your app must also provide
    support for the standard display. Apple does not permit you to submit separate
    IPAs for each supported resolution. You can, however, opt to support just the
    standard display and the app will be pixel-doubled by iOS to fit Retina display
    screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify the resolutions your app will support, set the **Resolution** field
    within the AIR for iOS Settings panel. The following two options are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **High** if you are providing support for both the Retina and standard
    displays. Otherwise select **Standard**.
  prefs: []
  type: TYPE_NORMAL
- en: When targeting multiple screen resolutions, it is important you set the stage's
    scale mode and alignment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the scale mode to `NO_SCALE` prevents the stage's content from being
    scaled to fit the Retina screen's resolution. Instead, your content will maintain
    its defined size. Setting the stage alignment to `TOP_LEFT` forces all content
    to be positioned relative to the top left-hand corner.
  prefs: []
  type: TYPE_NORMAL
- en: While scaling may sound desirable, it really isn't advisable for applications
    that use bitmap images, which become pixelated when scaled. Instead, you should
    write logic within your app to swap between standard and Retina resolution versions
    of any bitmaps and also handle the layout and positioning of content yourself.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, your FLA's stage size should match that of the standard resolution
    display—320x480 pixels. When running on a Retina display device and with the stage's
    scale mode set to `NO_SCALE`, the stage's dimensions will be reported as being
    twice what you set within Flash Professional. This will allow you to take advantage
    of the higher resolution.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to determine the screen resolution your app is using by querying
    the static `screenResolutionX` and `screenResolutionY` properties that belong
    to the `Capabilities` class. For this recipe, we simply checked `screenResolutionX`
    as this was enough to determine whether the standard or Retina screen resolution
    was being used.
  prefs: []
  type: TYPE_NORMAL
- en: You can obtain more information regarding `flash.system.Capabilities, flash.display.StageScaleMode`,
    and `flash.display.StageAlign` from Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several other considerations when utilizing the Retina display.
  prefs: []
  type: TYPE_NORMAL
- en: Retina home screen icon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When supporting the Retina display, you must provide a home screen icon of size
    114x114\. Detailed instructions are available from the *Including icons* recipe
    in [Chapter 3](ch03.html "Chapter 3. Writing your First App").
  prefs: []
  type: TYPE_NORMAL
- en: Retina application launch image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can include with your IPA an additional launch image that takes advantage
    of the Retina display's higher resolution. For more details, refer to the *Including
    an application launch image* recipe from [Chapter 3](ch03.html "Chapter 3. Writing
    your First App").
  prefs: []
  type: TYPE_NORMAL
- en: Vector-only apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your application uses only vector content, then you can simply let AIR take
    care of scaling for you. This will allow you to write an app targeting the standard
    320x480 pixel display, which will also take advantage of the higher resolution
    Retina display.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this, set the stage''s scale mode and alignment to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Also, remember to set the **Resolution** field from the AIR for iOS Settings
    panel to **High**.
  prefs: []
  type: TYPE_NORMAL
- en: Don't confuse this with pixel doubling that's employed by iOS. Your app's vector
    content will actually be scaled, rather than each pixel being doubled in size.
    Essentially there will be a noticeable improvement in image fidelity on Retina
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can still use bitmaps but unlike the vector content, pixelation
    will be obvious when they are scaled up.
  prefs: []
  type: TYPE_NORMAL
- en: iPad display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both the iPad 1 and 2 support a single screen resolution of 768x1024\. When
    targeting the iPad or the non-Retina display iPhone and iPod touch, set the **Resolution**
    field to **Standard**.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*AIR for iOS general settings, [Chapter 2](ch02.html "Chapter 2. Building iOS
    Apps Using Flash")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Targeting a device*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Supporting multiple resolutions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting multiple resolutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The launch of the iPad led to developers having to support two different physical
    screen sizes and resolutions. This was exacerbated by the introduction of the
    Retina display for iPhone and iPod touch, where screen resolutions were no longer
    guaranteed to be identical across the same device type.
  prefs: []
  type: TYPE_NORMAL
- en: When targeting multiple device types and models, it is important that your app
    can adapt its layout to different screen resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: Let us walk through a simple example that creates a universal app that supports
    the various portrait resolutions used by the iPhone, iPod touch, and iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An FLA containing graphics has been provided in the book's accompanying code
    bundle for you to work from.
  prefs: []
  type: TYPE_NORMAL
- en: Open `chapter8\recipe3\recipe.fla` into Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the FLA''s library, you will find three PNGs—one for each screen resolution
    we intend to support. Each has also been linked for ActionScript usage allowing
    it to be easily added to the screen at runtime. The following table summarizes
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Bitmap name | AS linkage |'
  prefs: []
  type: TYPE_TB
- en: '| Standard display 320x480 | rocket-standard.png | RocketStandardBitmapData
    |'
  prefs: []
  type: TYPE_TB
- en: '| Retina display 640x960 | rocket-retina.png | RocketRetinaBitmapData |'
  prefs: []
  type: TYPE_TB
- en: '| iPad display 768x1024 | rocket-ipad.png | RocketIPadBitmapData |'
  prefs: []
  type: TYPE_TB
- en: When running on a standard display iPhone or iPod touch, **rocket-standard.png**
    will be shown on screen. For Retina display screens, the app will use **rocket-retina.png**.
    Finally, **rocket-ipad.png** will be shown if an iPad's screen resolution is detected.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Flash Professional CS5 for this recipe, then your app will
    be unable to take advantage of the higher resolution provided by Retina display
    devices. Retina display support is only available from AIR 2.6 onwards.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will split this recipe into two parts. First, from the AIR for iOS Settings
    panel, we will declare support for all device resolutions. Secondly, we will write
    the code required to display the correct bitmap for each supported resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Setting supported devices and resolutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us start by targeting all available device resolutions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the **General** tab is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Device** field to **iPhone and iPad**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Flash Professional CS5.5, then also set the **Resolution**
    field to **High**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These settings are required if you wish a single app to support all devices
    in the iOS family and take advantage of the higher resolution provided by Retina
    display devices.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **OK** button to close the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying the correct bitmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we will write some ActionScript to adapt to each of the expected screen
    resolutions:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add import statements for the required classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, set the stage''s scale mode and alignment properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Staying within the constructor, call a method to create the correct bitmap
    for the current device''s screen resolution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, write the method which instantiates and returns the bitmap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file as `Main.as`. Also move back to your FLA and save it too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the FLA and test your app on a range of iOS devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe's example determines the screen resolution being used and displays
    a bitmap image that has been prepared for that resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following portrait resolutions are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: iPad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 768x1024
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: iPhone and iPod touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '320x480: Standard'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '640x960: Retina'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the AIR for iOS Settings panel, you must explicitly state that you intend
    to create a universal app that supports all three devices and their screen resolutions.
    This is done by setting the **Device** field to **iPhone and iPad** and the **Resolution**
    field to **High**.
  prefs: []
  type: TYPE_NORMAL
- en: When targeting multiple screen resolutions, it is important that you set the
    stage's scale mode and alignment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the stage's scale mode to `NO_SCALE` ensures that your content maintains
    its defined size across multiple screen resolutions. This leaves you in full control
    of the sizing and layout of your content. It also ensures that any bitmaps being
    used aren't scaled at runtime, which will prevent them from becoming pixelated.
    Setting the stage alignment to `TOP_LEFT` forces all content to be positioned
    relative to the top left-hand corner, making positioning easier to work with.
  prefs: []
  type: TYPE_NORMAL
- en: The actual code that creates the correct bitmap simply examines the static `Capabilities.screenResolutionX`
    property to determine which of the three expected screen resolutions the app currently
    has to cater for. Once a decision is made, the correct bitmap from the library
    is instantiated and added to the display list at its default position of (0,0).
  prefs: []
  type: TYPE_NORMAL
- en: While the stage and timeline are still an option for the layout of content,
    you may find yourself relying more heavily on ActionScript for more complex projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can obtain more information from Adobe Community Help. Perform a search
    for the following classes: `flash.system.Capabilities, flash.display.StageScaleMode`,
    and `flash.display.StageAlign`.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our example was somewhat trivial. Unfortunately, adapting a real-world application
    to multiple screen resolutions can be difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Default stage size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When its scale mode is set to `NO_SCALE`, the stage's default size is of little
    importance to a universal app. For example, this recipe's FLA uses a stage size
    of 320x480, which obviously falls far short of the iPad's 768x1024 resolution.
    This, however, does not restrict the app's display list to the stage's default
    dimensions—the app is still able to target the full screen resolution of the device
    it is running on.
  prefs: []
  type: TYPE_NORMAL
- en: Try not to rely on the default stage size when performing layout management
    across multiple resolutions. The same is also true when determining what device
    your app is currently running on. Instead use `Capabilities.screenResolutionX`
    and `Capabilities.screenResolutionY`.
  prefs: []
  type: TYPE_NORMAL
- en: Model-View-Controller architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although outside the scope of this book, you should consider using the Model-View-Controller
    (MVC) design pattern to manage layout across each supported screen resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'MVC consists of three elements: a single Model that contains the application''s
    data and state management logic; at least one View, which presents the application''s
    on-screen state; and at least one Controller, which handles user interaction.'
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a View is paired with a Controller, and you will write a View-Controller
    pair for each screen resolution you wish to support. The Controller acts as an
    intermediary between its own View and the Model.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ActionScript MVC frameworks available, such as PureMVC and Robotlegs.
    You can visit the PureMVC home page at [http://puremvc.org](http://puremvc.org),
    while Robotlegs can be downloaded from [www.robotlegs.org](http://www.robotlegs.org).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple encourages the use of MVC when writing apps for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic sizing and layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When working with multiple screen resolutions and pixel densities, you may consider
    developing your app to dynamically re-size and lay out its content. Although this
    can be a complex approach, it will future-proof your app, allowing it to fit additional
    screens that may one day become available. However, for a limited number of screens,
    you may find MVC more feasible.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more detail, take a look at the "Writing multi-screen AIR apps" article
    on the Adobe AIR Developer Center: [www.adobe.com/devnet/air/flex/articles/writing_multiscreen_air_apps.html](http://www.adobe.com/devnet/air/flex/articles/writing_multiscreen_air_apps.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Supporting iPad separately
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The aspect ratio of the iPad's screen differs from that of the iPhone and the
    iPod touch. This can make the development of a single app that works across all
    three devices awkward as the app will need to tailor its UI at runtime for three
    different resolutions. In addition, for bitmap-heavy applications, storing three
    sets of graphics will consume a significant portion of memory.
  prefs: []
  type: TYPE_NORMAL
- en: To alleviate the complexities of supporting three devices within a single app,
    you can write your iPad version separately. The App Store will accept an iPad-specific
    version of your app and another that supports both the iPhone and iPod touch.
    Simply specify your target device from the AIR for iOS Settings panel.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*AIR for iOS general settings, [Chapter 2](ch02.html "Chapter 2. Building iOS
    Apps Using Flash")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Accessing bitmaps with ActionScript, [Chapter 6](ch06.html "Chapter 6. Graphics
    and Hardware Acceleration")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Resizing bitmaps, [Chapter 4](ch04.html "Chapter 4. Porting Flash Projects
    to iOS")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the default aspect ratio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Devices, such as the iPhone, can be freely rotated in real space. This is convenient
    as it provides two aspect ratios that can be worked with—portrait and landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how to select a default aspect ratio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Flash Professional, open `chapter8\recipe4\recipe.fla` from the book's
    accompanying code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: The library contains a bitmap image of a fire truck that has been designed for
    a landscape resolution of 480x320 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will begin by locking the FLA to a landscape aspect ratio:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the **Selection Tool (V)** , click anywhere on the stage. From the **Properties**
    panel, change the stage's aspect ratio from **portrait** to **landscape**. To
    do this, simply set its width to **480** and the height to **320**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although the stage size implies it, the AIR for iOS settings also need to be
    changed to reflect our choice of aspect ratio. Select **File** | **AIR for iOS
    Settings** from the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the **General** tab is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Landscape** from the **Aspect ratio** drop-down box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, drag the bitmap image from the library onto the stage and position
    it at the top-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your FLA and publish it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the app on your device and launch it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to correctly view the fire truck image, you will be forced to turn
    your device on its side, matching the device's physical orientation with that
    of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can have your application start in one of two aspect ratios: Portrait or
    Landscape. This is done from the **General** tab within the AIR for iOS Settings
    panel. Simply make a selection from the **Aspect ratio** drop-down box.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you will need to set the stage to match that of your chosen aspect
    ratio. This will allow you to properly lay out any content when designing your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you create a new AIR for iOS document, a portrait aspect ratio is set by
    default.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is an additional option available when setting the default aspect ratio
    from Flash Professional CS5.5.
  prefs: []
  type: TYPE_NORMAL
- en: Auto aspect ratio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From AIR 2.6 onwards, your app can be instructed to select, when launched, the
    aspect ratio that matches the device's current orientation. To accommodate this,
    a third option named **Auto** is provided from the **Aspect Ratio** drop-down
    box.
  prefs: []
  type: TYPE_NORMAL
- en: This feature can only be enabled in conjunction with auto-orientation, which
    is covered in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*AIR for iOS general settings, [Chapter 2](ch02.html "Chapter 2. Building iOS
    Apps Using Flash")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Enabling auto-orientation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling auto-orientation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user can change the device's orientation in real space at any moment and
    will likely expect the on-screen content to reflect this. AIR for iOS can detect
    these changes and automatically rotate the stage to match the device's new physical
    orientation.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to enable auto-orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have completed the *Setting the default aspect ratio* recipe, then you
    can continue to work from its FLA. Alternatively, from the book's accompanying
    source code, open `chapter8\recipe5\recipe.fla` into Flash Professional and work
    from there.
  prefs: []
  type: TYPE_NORMAL
- en: In either case, you will find a bitmap image of a fire truck sitting on the
    stage. The stage itself is sized to fit a landscape aspect ratio and the FLA's
    AIR for iOS settings reflect this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enable auto-orientation by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the **General** tab is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Aspect ratio** drop-down box to **Portrait**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check on the **Auto orientation** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OK** button to close the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your FLA and publish it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the app to your device and launch it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the device's physical orientation changes, the stage will be automatically
    rotated to match the change.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When auto-orientation is enabled, the stage will attempt to match the device''s
    current orientation each time it is rotated. Four orientations are supported on
    iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Default: The default portrait orientation for iOS devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rotated left: Rotated 90 degrees clockwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rotated right: Rotated 90 degrees counter-clockwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upside down: Rotated 180 degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto-orientation is convenient as it prevents you from having to manually rotate
    objects on the display list yourself. Instead, this task will be performed on
    your behalf.
  prefs: []
  type: TYPE_NORMAL
- en: During auto-orientation, the stage's scale mode and its current alignment setting
    will be adhered to.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you decide to support both portrait and landscape aspect ratios, then
    Apple recommends that your app be launched in portrait mode.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is likely that you will want some control over how the content on the stage
    is handled during auto-orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for orientation support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although Flash provides support for device orientation changes across all iOS
    devices, when writing cross-platform code, you may want to confirm support by
    checking that the stage's `supportsOrientationChange` property returns `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Programmatically setting auto-orientation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to using the AIR for iOS Settings panel, you can activate and deactivate
    auto-orientation programmatically by setting the `Stage.autoOrients` property.
    The property's initial value is derived from the value of the **Auto Orientation**
    field from the AIR for iOS Settings panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following ActionScript activates auto-orientation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Stage scale mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can specify how the stage is scaled when the device's physical orientation
    changes. This is achieved by setting the `Stage.scaleMode` property to one of
    four constants provided by the `flash.display.StageScaleMode` class.
  prefs: []
  type: TYPE_NORMAL
- en: The default mode is `StageScaleMode.SHOW_ALL` and ensures that the entire stage
    is made visible within the screen while maintaining its aspect ratio. If you don't
    want resizing of the stage's content to take place during changes in orientation,
    then set the scale mode to `NO_SCALE`. This specifies that the size of the content
    on the stage is to be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: More information regarding scale modes can be obtained from Adobe Community
    Help.
  prefs: []
  type: TYPE_NORMAL
- en: Stage alignment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How the stage content is aligned when the device's physical orientation changes
    can also be specified. Simply set the `Stage.align` property to one of the constants
    defined by `flash.display.StageAlign`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The stage''s content will align to the center of the screen by default, however,
    there are eight constants that can be used to align the stage''s content around
    the edges of the screen. For example, the following ActionScript will align the
    stage to the top left:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: More information regarding stage alignment can be found on Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*AIR for iOS general settings, [Chapter 2](ch02.html "Chapter 2. Building iOS
    Apps Using Flash")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Listening for orientation changes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening for orientation changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The accelerometer present in iOS devices can detect changes in physical orientation.
    AIR provides APIs for detecting these changes and determining the device's actual
    orientation in real space.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start by opening `chapter8\recipe6\recipe.fla` from the book's accompanying
    code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: A dynamic text field named `output` can be found on the stage. We will use this
    text field to report any orientation changes experienced by the device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to listen for changes in orientation:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **File** | **AIR for iOS Settings** from Flash Professional's drop-down
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **General** tab, check on the **Auto orientation** checkbox; then click
    on the panel's **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, set up the stage, and listen for the `ORIENTATION_CHANGING`
    and `ORIENTATION_CHANGE` events being dispatched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a handler for the `ORIENTATION_CHANGING` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add a handler for the `ORIENTATION_CHANGE` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class and name it `Main.as` when prompted. Also, save your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the app and test it on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Experiment by rotating the device. As changes in orientation are detected they
    will be reported on-screen.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Changes in orientation can be detected by listening for the following two events
    from the stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '`StageOrientationEvent.ORIENTATION_CHANGING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StageOrientationEvent.ORIENTATION_CHANGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ORIENTATION_CHANGING` event is dispatched as the device's accelerometer
    detects that an orientation change is taking place and before auto-orientation's
    default behavior occurs. The `ORIENTATION_CHANGE` event is dispatched after any
    default behavior has taken place.
  prefs: []
  type: TYPE_NORMAL
- en: Your app receives the `ORIENTATION_CHANGING` and `ORIENTATION_CHANGE` events
    only if auto-orientation is enabled from the AIR for iOS Settings panel or through
    ActionScript.
  prefs: []
  type: TYPE_NORMAL
- en: You can retrieve information regarding the change in orientation by querying
    the event's `beforeOrientation` and `afterOrientation` properties. Both properties
    are read-only and will be set to one of the following constants from `flash.display.StageOrientation:`
  prefs: []
  type: TYPE_NORMAL
- en: '`DEFAULT:` The default portrait orientation for iOS devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ROTATED_LEFT:` Rotated 90 degrees clockwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ROTATED_RIGHT:` Rotated 90 degrees counter-clockwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UPSIDE_DOWN:` Rotated 180 degrees.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When handling an `ORIENTATION_CHANGING` event, `beforeOrientation` will hold
    the device's current orientation while `afterOrientation` will specify the target
    orientation that the device is being rotated towards.
  prefs: []
  type: TYPE_NORMAL
- en: For the `ORIENTATION_CHANGE` event, use `beforeOrientation` to find out the
    device's previous orientation and `afterOrientation` to determine the current
    orientation.
  prefs: []
  type: TYPE_NORMAL
- en: You can see both these properties being used within our document class' `orientationChanging()`
    and `orientationChanged()` event handlers. Their values are obtained and written
    to the `output` text field.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is also possible to determine the device's orientation without using event
    listeners.
  prefs: []
  type: TYPE_NORMAL
- en: Determining device orientation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also determine the device's physical orientation by accessing the `deviceOrientation`
    property of the `Stage` class. This property is read-only and will return one
    of the constants defined in the `StageOrientation` class.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the four constants that we have already covered, `deviceOrientation`
    can also return `StageOrientation.UNKNOWN`. The `deviceOrientation` property does
    not contain the starting orientation of the device and is, therefore, set to `UNKNOWN`
    until the first change in physical orientation takes place.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*AIR for iOS general settings, [Chapter 2](ch02.html "Chapter 2. Building iOS
    Apps Using Flash")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Responding to orientation changes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Enabling auto-orientation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to orientation changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is likely that you will want to update your app's on-screen content to reflect
    a change in the device's physical orientation. While auto-orientation in conjunction
    with the stage's default alignment and scale mode will attempt this on your behalf,
    you may want to handle the layout yourself.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An FLA has been provided as a starting point. From the book's accompanying code
    bundle, open `chapter8\recipe7\recipe.fla` within Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: You will find two movie clips sitting on the stage. The first movie clip is
    an image of an arrow pointing upwards and has been created to fit the screen's
    dimensions using a portrait orientation. The second shows the same arrow but this
    time the image's dimensions fit the screen's landscape orientations.
  prefs: []
  type: TYPE_NORMAL
- en: Both movie clips are positioned at the top-left corner of the stage and have
    instance names of `portrait` and `landscape` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: We will write some code to ensure that the user sees an arrow pointing upwards
    no matter which of the four possible physical orientations they rotate the device
    to. We will do this by showing the appropriate movie clip for the current device
    orientation.
  prefs: []
  type: TYPE_NORMAL
- en: The stage dimensions are set for an initial portrait aspect ratio and this is
    already reflected in the AIR for iOS settings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will make a quick change to the AIR for iOS settings before moving onto
    the ActionScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **File** | **AIR for iOS Settings** from Flash Professional's drop-down
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **General** tab, check the **Auto orientation** checkbox; then click
    on the panel's **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, set up the stage and listen for the `ORIENTATION_CHANGING`
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add a handler for the `ORIENTATION_CHANGING` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file as `Main.as`. Also move to your FLA and save it too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the FLA and deploy the IPA to your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the app by rotating your device. The screen will update to reflect any
    change in orientation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than letting the stage's current on-screen content automatically resize
    when the device's orientation changes, we instead opted to display a different
    view.
  prefs: []
  type: TYPE_NORMAL
- en: The first step towards accomplishing this is to set the stage's scale mode and
    alignment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the scale mode to `NO_SCALE` prevents your content from being scaled
    to fit any changes in stage size. This ensures that the `portrait` and `landscape`
    movie clips maintain their defined sizes during orientation changes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the alignment to `TOP_LEFT` forces all content to be positioned relative
    to the top-left corner of the screen. Essentially both our movie clips, which
    are positioned at (0,0) on the stage will always start from the screen's top-left
    corner no matter what orientation the device is in.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to make the appropriate movie clip visible in response to a
    change in orientation. This is done by handling the `ORIENTATION_CHANGING` event
    and selecting a movie clip depending on the value of the `afterOrientation` property.
  prefs: []
  type: TYPE_NORMAL
- en: If the device is being rotated to one of the two portrait orientations `(DEFAULT`
    or `UPSIDE_DOWN)`, then the `portrait` movie clip is made visible and `landscape`
    is hidden. For either of the two landscape orientations `(ROTATED_LEFT` or `ROTATED_RIGHT)`
    the `landscape` movie clip is shown and `portrait` is hidden from view.
  prefs: []
  type: TYPE_NORMAL
- en: You may be wondering why we only have two movie clips for four possible orientations.
    Won't `portrait` and `landscape` appear upside-down for the `UPSIDE_DOWN` and
    `ROTATED_LEFT` orientations? Well they are for a brief moment, but remember that
    one of the benefits of auto-orientation is that it rotates your on-screen content
    ensuring that it is shown the right way up. Without auto-orientation, you would
    have to rotate all the items on the display list manually.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some more details to help complete your knowledge of screen orientation.
  prefs: []
  type: TYPE_NORMAL
- en: The stage color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your choice of stage color is important as areas outside the stage's dimensions
    will be visible while auto-orientation is taking place. Select a stage color that
    will compliment your content. For example, this recipe used black as it matched
    the background color of both movie clips.
  prefs: []
  type: TYPE_NORMAL
- en: Change the stage color to white and re-deploy the app to your device. During
    orientation changes, you will now be able to see just how much area is actually
    visible.
  prefs: []
  type: TYPE_NORMAL
- en: Stage orientation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although they often match, the actual orientation of the device in real space
    is independent of the content viewed on screen. For example, the user could be
    holding the device in landscape orientation while the app's content is still being
    rendered in portrait.
  prefs: []
  type: TYPE_NORMAL
- en: While the `Stage.deviceOrientation` property is available to determine the device's
    physical orientation, you can use the `Stage.orientation` property to retrieve
    the current orientation of the stage in relation to the device.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to change the stage's orientation independently of the device's.
    This is achieved by calling `Stage.setOrientation()` and passing to it one of
    the constants defined in the `flash.display.StageOrientation` class. You can respond
    to this orientation change by listening for and responding to the `ORIENTATION_CHANGING`
    and `ORIENTATION_CHANGE` events.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing auto-orientation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Auto-orientation takes place immediately after the `ORIENTATION_CHANGING` event
    but before `ORIENTATION_CHANGE` is dispatched. It is, therefore, possible to prevent
    auto-orientation for a particular orientation (or all of them) by calling `preventDefault()`
    on the `ORIENTATION_CHANGING` event's object.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following modification to our `orientationChanging()` handler
    will prevent the stage being orientated when the device is rotated to either of
    the two landscape orientations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can also use `preventDefault()` to block auto-orientation in order to completely
    manage the rotation and positioning of the stage's content yourself.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*AIR for iOS general settings, [Chapter 2](ch02.html "Chapter 2. Building iOS
    Apps Using Flash")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Listening for orientation changes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Enabling auto-orientation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
