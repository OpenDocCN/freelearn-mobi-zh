["```swift\n    #import\"GLKit/GLKit.h\"\n    @interface ViewController : GLKViewController\n    ```", "```swift\n    GLKView* view = (GLKView*)self.view;\n\n        view.context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];\n    ```", "```swift\n    (void)glkView:(GLKView *)view drawInRect:(CGRect)rect{\n    glClearColor(0.0, 0.5, 0.0, 1.0); glClear(GL_COLOR_BUFFER_BIT);\n    }\n    ```", "```swift\n        typedef struct {\n        GLKVector3 position;\n        } Vertex;\n        const Vertex SquareVertices[] = {\n        {-1, -1 , 0},// vertex 0: bottom left \n        {1, -1 , 0}, // vertex 1: bottom right\n        {1, 1 , 0}, // vertex 2: top right\n        {-1, 1 , 0}, // vertex 4: top left\n        };\n    ```", "```swift\n       const GLubyte SquareTriangles[] = {\n       0, 1, 2, // BL->BR->TR\n       2, 3, 0 // TR->TL->BL\n       };\n    ```", "```swift\n       @interface ViewController () {\n       GLuint _vertexBuffer;\n       GLuint _indexBuffer;\n       GLKBaseEffect* _squareEffect;\n       }\n       @end\n    ```", "```swift\n       GLKView* view = (GLKView*)self.view;\n       view.context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];\n       [EAGLContext setCurrentContext:view.context];\n    ```", "```swift\n       glGenBuffers(1, &_vertexBuffer);\n       glBindBuffer(GL_ARRAY_BUFFER, _vertexBuffer);\n    ```", "```swift\n         glBufferData(GL_ARRAY_BUFFER, sizeof(SquareVertices),\n         SquareVertices, GL_STATIC_DRAW);\n    ```", "```swift\n       glGenBuffers(1, &_indexBuffer);\n       glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, _indexBuffer);\n       glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(SquareTriangles), SquareTriangles, GL_STATIC_DRAW);\n    ```", "```swift\n    _squareEffect = [[GLKBaseEffect alloc] init];\n    float aspectRatio = self.view.bounds.size.width/self.view.bounds.size.height;\n    float fieldOfViewDegrees = 60.0;\n\n    GLKMatrix4 projectionMatrix = GLKMatrix4MakePerspective(GLKMathDegreesToRadians(fieldOfViewDegrees),aspectRatio, 0.1, 10.0);\n    _squareEffect.transform.projectionMatrix = projectionMatrix;\n    ```", "```swift\n      GLKMatrix4 modelViewMatrix = GLKMatrix4MakeTranslation(0.0f,   0.0f, -6.0f);\n      _squareEffect.transform.modelviewMatrix = modelViewMatrix;\n    //Set the constant color red for the effects.\n      _squareEffect.useConstantColor = YES;\n      _squareEffect.constantColor = GLKVector4Make(1.0, 0.0, 0.0, 1.0);\n    ```", "```swift\n      - (void)glkView:(GLKView *)view drawInRect:(CGRect)rect {\n       }\n    ```", "```swift\n       glClearColor(0.0, 0.0, 0.0, 1.0);\n       glClear(GL_COLOR_BUFFER_BIT);\n    ```", "```swift\n       [_squareEffect prepareToDraw];\n    ```", "```swift\n       glEnableVertexAttribArray(GLKVertexAttribPosition);\n       glVertexAttribPointer(GLKVertexAttribPosition, 3, GL_FLOAT, GL_FALSE, 0, 0);\n    ```", "```swift\n      int numberOfTriangles = sizeof(SquareTriangles)/sizeof(SquareTriangles[0]);\n      glDrawElements(GL_TRIANGLES, numberOfTriangles, GL_UNSIGNED_BYTE, 0);\n    ```", "```swift\n#import \"ViewController.h\"\ntypedef struct {\nGLKVector3 position;\n} Vertex;\nconst Vertex SquareVertices[] = {\n{-1, -1 , 0}, {1, -1 , 0}, {1, 1 , 0}, {-1, 1 , 0}\n};\nconst GLubyte SquareTriangles[] = {\n0, 1, 2, \n2, 3, 0 \n};\n@interface ViewController () {\nGLuint _vertexBuffer;\nGLuint _indexBuffer;\nGLKBaseEffect* _squareEffect;\n}\n@end\n@implementation ViewController\n- (void)viewDidLoad\n{\n[super viewDidLoad];\nGLKView* view = (GLKView*)self.view;\nview.context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];\n[EAGLContext setCurrentContext:view.context];\n\nglGenBuffers(1, &_vertexBuffer);\nglBindBuffer(GL_ARRAY_BUFFER, _vertexBuffer);\nglBufferData(GL_ARRAY_BUFFER, sizeof(SquareVertices), SquareVertices,\nGL_STATIC_DRAW);\nglGenBuffers(1, &_indexBuffer);\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, _indexBuffer);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(SquareTriangles),\nSquareTriangles, GL_STATIC_DRAW);\n_squareEffect = [[GLKBaseEffect alloc] init];\nfloat aspectRatio = self.view.bounds.size.width/self.view.bounds.size.height;\nfloat fieldOfViewDegrees = 60.0;\nGLKMatrix4 projectionMatrix = GLKMatrix4MakePerspective(GLKMathDegreesToRadians(fieldOfViewDegrees),aspectRatio, 0.1, 10.0);\n_squareEffect.transform.projectionMatrix = projectionMatrix;\n\nGLKMatrix4 modelViewMatrix = GLKMatrix4MakeTranslation(0.0f, 0.0f, -6.0f);\n_squareEffect.transform.modelviewMatrix = modelViewMatrix;\n\n_squareEffect.useConstantColor = YES;\n_squareEffect.constantColor = GLKVector4Make(1.0, 0.0, 0.0, 1.0);\n}\n- (void)glkView:(GLKView *)view drawInRect:(CGRect)rect {\nglClearColor(0.0, 0.0, 0.0, 1.0);\nglClear(GL_COLOR_BUFFER_BIT);\n\n[_squareEffect prepareToDraw];\nglEnableVertexAttribArray(GLKVertexAttribPosition);\nglVertexAttribPointer(GLKVertexAttribPosition, 3, GL_FLOAT, GL_FALSE, 0, 0);\nint numberOfVertices = sizeof(SquareTriangles)/sizeof(SquareTriangles[0]);\nglDrawElements(GL_TRIANGLES, numberOfVertices, GL_UNSIGNED_BYTE, 0);\n}\n@end\n```", "```swift\n    typedef struct {\n    GLKVector3 position; // the location of each vertex in space\n    GLKVector2 textureCoordinates; // the texture coordinates for each vertex\n    } Vertex;\n    const Vertex SquareVertices[] = {\n    {{-1, -1 , 0}, {0,0}}, // bottom left\n    {{1, -1 , 0}, {1,0}}, // bottom right\n    {{1, 1 , 0}, {1,1}}, // top right\n    {{-1, 1 , 0}, {0,1}}, // top left\n    };\n    ```", "```swift\n    NSString* imagePath = [[NSBundle mainBundle]\n    pathForResource:@\"Texture\" ofType:@\"png\"];\n    NSError* error = nil;\n    GLKTextureInfo* texture = [GLKTextureLoader textureWithContentsOfFile:imagePath options:nil error:&error];\n    if (error != nil) {\n    NSLog(@\"Problem loading texture: %@\", error);\n    }\n    _squareEffect.texture2d0.name = texture.name;\n    ```", "```swift\n    _squareEffect.useConstantColor = YES;\n    _squareEffect.constantColor = GLKVector4Make(1.0, 0.0, 0.0, 1.0);\n    ```", "```swift\n    glEnableVertexAttribArray(GLKVertexAttribTexCoord0);\n    glVertexAttribPointer(GLKVertexAttribTexCoord0, 2, GL_FLOAT, GL_FALSE,\n    sizeof(Vertex), (void*)offsetof(Vertex, textureCoordinates));\n    ```", "```swift\n    const Vertex CubeVertices[] = {\n    {{-1, -1, 1}, {0,0}}, // bottom left front\n    {{1, -1, 1}, {1,0}}, // bottom right front\n    {{1, 1, 1}, {1,1}}, // top right front\n    {{-1, 1, 1}, {0,1}}, // top left front\n    {{-1, -1, -1}, {1,0}}, // bottom left back\n    {{1, -1, -1}, {0,0}}, // bottom right back\n    {{1, 1, -1}, {0,1}}, // top right back\n    {{-1, 1, -1}, {1,1}}, // top left back\n    };\n\n    const GLubyte CubeTriangles[] = {\n    0, 1, 2, // front face 1\n    2, 3, 0, // front face 2\n    4, 5, 6, // back face 1\n    6, 7, 4, // back face 2\n    7, 4, 0, // left face 1\n    0, 3, 7, // left face 2\n    2, 1, 5, // right face 1\n    5, 6, 2, // right face 2\n    7, 3, 6, // top face 1\n    6, 2, 3, // top face 2\n    4, 0, 5, // bottom face 1\n    5, 1, 0, // bottom face 2\n    };\n    ```", "```swift\n    GLKMatrix4 modelViewMatrix = GLKMatrix4MakeTranslation(0.0f, 0.0f, -6.0f);\n    _squareEffect.transform.modelviewMatrix = modelViewMatrix;\n    ```", "```swift\n    GLKMatrix4 modelViewMatrix = GLKMatrix4MakeTranslation(0.0f, 0.0f, -6.0f);\n    modelViewMatrix = GLKMatrix4RotateX(modelViewMatrix,GLKMathDegreesToRadians(45));\n    modelViewMatrix = GLKMatrix4RotateY(modelViewMatrix,GLKMathDegreesToRadians(45));\n    _squareEffect.transform.modelviewMatrix = modelViewMatrix;\n    ```", "```swift\n    view.drawableDepthFormat = GLKViewDrawableDepthFormat24;\n    glEnable(GL_DEPTH_TEST);\n    ```", "```swift\n       float rotation;\n    ```", "```swift\n    - (void) update {\n    NSTimeInterval timeInterval = self.timeSinceLastUpdate;\n    float rotationSpeed = 15 * timeInterval;\n    rotation += rotationSpeed;\n    GLKMatrix4 modelViewMatrix = GLKMatrix4MakeTranslation(0.0f, 0.0f, -6.0f);\n    modelViewMatrix = GLKMatrix4RotateX(modelViewMatrix,\n    GLKMathDegreesToRadians(45));\n    modelViewMatrix = GLKMatrix4RotateY(modelViewMatrix,\n    GLKMathDegreesToRadians(rotation));\n    _squareEffect.transform.modelviewMatrix = modelViewMatrix;\n    }\n    ```"]