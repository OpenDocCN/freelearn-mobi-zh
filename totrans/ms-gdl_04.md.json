["```java\napply from: <Path of otherfile.gradle>\n```", "```java\n* What went wrong:\nA problem occurred evaluating script.\n> Cannot add task ':<TASK_NAME>' as a task with that name already exists.\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\n```", "```java\ntask scriptPluginTask1 << {\n  println \"this is scplugin1\"\n}\n```", "```java\napply from: 'scriptplugin.gradle'\n\ntask mainTask << {\n  println \"This is main task\"\n}\n```", "```java\n$ gradle mainTask scriptPluginTask1\n:mainTask\nThis is main task\n:scriptPluginTask1\nthis is scplugin1\n\nBUILD SUCCESSFUL\n\n```", "```java\napply plugin: '<pluginid>'\n\n```", "```java\napply plugin: 'java'\n\n```", "```java\napply plugin: DisplayPlugin\n\n```", "```java\napply plugin: 'java'\n```", "```java\n$ gradle tasks --all\n...\n\nBuild tasks\n-----------\nassemble - Assembles the outputs of this project. [jar]\nbuild - Assembles and tests this project. [assemble, check]\nbuildDependents - Assembles and tests this project and all projects that depend on it. [build]\nbuildNeeded - Assembles and tests this project and all projects it depends on. [build]\nclasses - Assembles classes 'main'.\n compileJava - Compiles Java source 'main:java'.\n processResources - Processes JVM resources 'main:resources'.\nclean - Deletes the build directory.\njar - Assembles a jar archive containing the main classes. [classes]\ntestClasses - Assembles classes 'test'. [classes]\n compileTestJava - Compiles Java source 'test:java'.\n processTestResources - Processes JVM resources 'test:resources'.\n\n...\n\nDocumentation tasks\n-------------------\njavadoc - Generates Javadoc API documentation for the main source code.[classes]\n\n...\n\nVerification tasks\n------------------\ncheck - Runs all checks.\ntest - Runs the unit tests.\n\nRules\n-----\nPattern: clean<TaskName>: Cleans the output files of a task.\nPattern: build<ConfigurationName>: Assembles the artifacts of a configuration.\nPattern: upload<ConfigurationName>: Assembles and uploads the artifacts belonging to a configuration.\n\nTo see all tasks and more detail, run with --all.\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle classes\n:compileJava\n:processResources UP-TO-DATE\n:classes\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle testClasses\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle test\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:compileTestJava UP-TO-DATE\n:processTestResources UP-TO-DATE\n:testClasses UP-TO-DATE\n:test\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle assemble\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:jar\n:assemble\n\nBUILD SUCCESSFUL\n\n```", "```java\ntask displayJavaPluginConvention << {\n\n  println \"Lib Directory: $libsDir\"\n  println \"Lib Directory Name: $libsDirName\"\n  println \"Reports Directory: $reportsDir\"\n  println \"Test Result Directory: $testResultsDir\"\n\n  println \"Source Code in two sourcesets: $sourceSets\"\n  println \"Production Code: ${sourceSets.main.java.srcDirs}\"\n  println \"Test Code: ${sourceSets.test.java.srcDirs}\"\nprintln \"Production code output: ${sourceSets.main.output.classesDir} & ${sourceSets.main.output.resourcesDir}\"\nprintln \"Test code output: ${sourceSets.test.output.classesDir} & ${sourceSets.test.output.resourcesDir}\"\n}\n```", "```java\n$ gradle displayJavaPluginConvention\n:displayJavaPluginConvention\nLib Directory: <path>/build/libs\nLib Directory Name: libs\nReports Directory: <path>/build/reports\nTest Result Directory: <path>/build/test-results\nSource Code in two sourcesets: [source set 'main', source set 'test']\nProduction Code: [<path>/src/main/java]\nTest Code: [<path>/src/test/java]\nProduction code output: <path>/build/classes/main & <path>/build/resources/main\nTest code output: <path>/build/classes/test & <path>/build/resources/test\n\nBUILD SUCCESSFUL\n\n```", "```java\nbuildDir = 'buildfolder'\nlibsDirName = 'libfolder'\n\nsourceSets {\n  main {\n    java {\n      srcDir 'src/productioncode/java'\n    }\n    resources {\n      srcDir 'src/productioncode/resources'\n    }\n  }\n  test{\n\n    java {\n      srcDir 'src/testcode/java'\n    }\n    resources {\n      srcDir 'src/testcode/resources'\n    }\n  }\n}\n\ntestResultsDirName = \"$buildDir/new-test-result\"\nsourceSets.main.output.classesDir \"${buildDir}/classes/productioncode/java\"\nsourceSets.main.output.resourcesDir \"${buildDir}/classes/productioncode/resources\"\nsourceSets.test.output.classesDir \"${buildDir}/classes/testcode/java\"\nsourceSets.test.output.resourcesDir \"${buildDir}/classes/testcode/resources\"\n```", "```java\n$ gradle displayJavaPluginConvention\n:displayJavaPluginConvention\nLib Directory: <path>/buildfolder/libfolder\nLib Directory Name: libfolder\nReports Directory: <path>/buildfolder/reports\nTest Result Directory: %path%/buildfolder/new-test-result\nSource Code in two sourcesets: [source set 'main', source set 'test']\nProduction Code: [<path>/src/main/java, <path>/src/productioncode/java]\nTest Code: [<path>/src/test/java, <path>/src/testcode/java]\nProduction code output: <path>/buildfolder/classes/productioncode/java & <path>/buildfolder/classes/productioncode/resources\nTest code output: <path>/buildfolder/classes/testcode/java & <path>/buildfolder/classes/testcode/resources\n\nBUILD SUCCESSFUL\n\n```", "```java\napply plugin: FilePlugin\n\nclass FilePlugin implements Plugin<Project> {\n  void apply(Project project) {\n    project.task('copy') << {\n      println \"Task copy is running\"\n        //....\n      }\n    project.task('move') << {\n      println \"Task move is running\"\n      //...\n    }\n  }\n}\ncopy.doLast { println \"Copy Task ending ..\" }\n```", "```java\n$ gradle copy\n:copy\nTask copy is running\nCopy Task ending ..\nBUILD SUCCESSFUL\n\n```", "```java\nimport ch4.FilePlugin\napply plugin: FilePlugin\n\ncopy.doLast {   \nprintln \"This is main project copy dolast\"\n}\n```", "```java\nimport ch4.FilePlugin\napply plugin: FilePlugin\n\ncopy.doLast {\n  println \"Additional doLast for project1\"\n}\n```", "```java\ninclude 'project1', 'project2'\n```", "```java\n$ gradle copy\n:buildSrc:compileJava UP-TO-DATE\n:buildSrc:compileGroovy\n:buildSrc:processResources UP-TO-DATE\n:buildSrc:classes\n:buildSrc:jar\n:buildSrc:assemble\n:buildSrc:compileTestJava UP-TO-DATE\n:buildSrc:compileTestGroovy UP-TO-DATE\n:buildSrc:processTestResources UP-TO-DATE\n:buildSrc:testClasses UP-TO-DATE\n:buildSrc:test UP-TO-DATE\n:buildSrc:check UP-TO-DATE\n:buildSrc:build\n:copy\nTask copy is running\nThis is main project copy dolast\n:project1:copy\nTask copy is running\nAdditional doLast for project1\n:project2:copy\nTask copy is running\nAdditional doLast for project2\n\nBUILD SUCCESSFUL\n\n```", "```java\npackage ch4.custom.plugin\n\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport ch4.custom.tasks.CopyTask\nimport ch4.custom.tasks.MoveTask\n\nclass FilePlugin implements Plugin<Project> {\n\n  @Override\n  public void apply(Project project) {\n\n    def extension = project.extensions.create(\"simpleExt\", FilePluginRootExtension)\n\n    project.tasks.create(\"copy\", CopyTask.class)\n    project.tasks.create(\"move\", MoveTask.class)\n    project.task('customTask') << {\n    println \"Source file is \"+project.filePluginExtension.sourceFile\n    }\n  }\n}\n```", "```java\npackage ch4.custom.tasks\n\nimport org.gradle.api.DefaultTask\nimport org.gradle.api.tasks.TaskAction\n\nclass AbstractTask extends DefaultTask {\n\n}\n```", "```java\npackage ch4.custom.tasks\n\nimport org.gradle.api.tasks.TaskAction\n\nclass CopyTask extends AbstractTask {\n\n  @TaskAction\n  def action1() {\n    println \"Copy Task Running\"\n  }\n}\n```", "```java\npackage ch4.custom.tasks\n\nimport org.gradle.api.tasks.TaskAction\n\nclass MoveTask extends AbstractTask {\n\n  @TaskAction\n  def action1() {\n    println \"Move Task Running\"\n  }\n\n}\n```", "```java\npackage ch4.custom.plugin\n\nclass FilePluginRootExtension {\n\n  def sourceFile = \"/home/tmp\"\n  def destinationFile\n\n}\n```", "```java\napply plugin: 'fileplugin'\n```", "```java\nimplementation-class=ch4.custom.plugin.FilePlugin\n```", "```java\nbuildscript {\n  repositories {\n    flatDir {dirs \"../Ch04_CustomPlugin3/build/libs/\"}\n  }\ndependencies {\n  classpath group: 'ch4.custom.plugin', name: 'Ch04_CustomPlugin3',version: '1.0'\n}\n}\napply plugin: 'fileplugin'\n\ncopy.doLast {\n  println \"This is from project $project.name\"\n}\n```", "```java\n$ gradle copy cT\n:copy\nCopy Task Running\nThis is from project UsingPlugin\n:customTask\nSource file is /home/tmp\n\nBUILD SUCCESSFUL\n\nTotal time: 3.59 secs\n\n```", "```java\nfilePluginExtension {\n  sourceFile = \"/home/user1\"\n}\n```", "```java\n$ gradle cT\n:customTask\nSource file is /home/user1\n\nBUILD SUCCESSFUL\n\nTotal time: 3.437 secs\n\n```"]