["```java\n    public static Vector3 position = Vector3.zero;\n    ```", "```java\n    public void Start() {\n      position = transform.position;\n    }\n    ```", "```java\n    public void LateUpdate() {\n      position = transform.position;\n    }\n    ```", "```java\n    public NavMeshAgent agent;\n    ```", "```java\n    public void FixedUpdate() {\n      if(agent == null) return;\n\n      agent.SetDestination(PlayerPosition.position);\n    }\n    ```", "```java\n    private Vector3 lastPosition = Vector3.zero;\n    public float maxSpeed = 1f;\n    ```", "```java\n    public float readyLength = 2f;\n    private float readyTime = -1;\n    ```", "```java\n    public float turretSpeed = 45f;\n    ```", "```java\n    public Transform turretPivot;\n    public Transform muzzlePoint;\n    ```", "```java\n    public void Update() {\n      if(CheckCanFire()) {\n        if(readyTime < 0) {\n          PrepareFire();\n        }\n        else if(readyTime <= Time.time) {\n          Fire();\n        }\n      }\n      else {\n        ClearFire();\n        RotateTurret();\n      }\n    }\n    ```", "```java\n    public bool CheckCanFire() {\n      float move = Vector3.Distance(lastPosition, transform.position);\n      float speed = move / Time.deltaTime;\n\n      lastPosition = transform.position;\n\n      if(speed > maxSpeed) return false;\n    ```", "```java\n      Vector3 targetDir = PlayerPosition.position – turretPivot.position;\n      targetDir.y = 0;\n\n      float angle = Vector3.Angle(targetDir, turretPivot.forward);\n\n      return angle < 0.1f;\n    }\n    ```", "```java\n    public void PrepareFire() {\n      readyTime = Time.time + readyLength;\n    }\n    ```", "```java\n    public void Fire() {\n      if(muzzlePoint == null) return;\n    ```", "```java\n    RaycastHit hit;\n    if(Physics.Raycast(muzzlePoint.position, muzzlePoint.forward, out hit)) {\n      hit.transform.gameObject.SendMessage(\"RemovePoints\", 3, SendMessageOptions.DontRequireReceiver);\n    }\n    ```", "```java\n      ClearFire();\n    }\n    ```", "```java\n    public void ClearFire() {\n      readyTime = -1;\n    }\n    ```", "```java\n    public void RotateTurret() {\n      if(turretPivot == null) return;\n\n      Vector3 targetDir = PlayerPosition.position – turretPivot.position;\n      targetDir.y = 0;\n\n      float step = turretSpeed * Time.deltaTime;\n\n      Vector3 rotateDir = Vector3.RotateTowards(turretPivot.forward, targetDir, step, 0);\n      turretPivot.rotation = Quaternion.LookRotation(rotateDir);\n    }\n    ```", "```java\n    public void RemovePoints(int amount) {\n      score -= amount;\n    }\n    ```", "```java\n    public int health = 3;\n    ```", "```java\n    public void Hit() {\n      health--;\n      if(health <= 0) {\n        Destroy(gameObject);\n        ScoreCounter.score += 5;\n      }\n    }\n    ```", "```java\n    public GameObject tankPrefab;\n    ```", "```java\n    private GameObject currentTank;\n    ```", "```java\n    public float minPlayerDistance = 10;\n    ```", "```java\n    public void FixedUpdate() {\n      if(CanSpawn())\n        SpawnTank();\n    }\n    ```", "```java\n    public bool CanSpawn() {\n      if(current != null) return false;\n\n      float currentDistance = Vector3.Distance(PlayerPosition.position, transform.position);\n      return currentDistance > minPlayerDistance;\n    }\n    ```", "```java\n    public void SpawnTank() {\n      if(tankPrefab == null) return;\n\n      currentTank = Instantiate(tankPrefab) as GameObject;\n      currentTank.transform.position = transform.position;\n    }\n    ```"]