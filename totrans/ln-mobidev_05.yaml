- en: A Pragmatic Approach
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实用主义方法
- en: You have made some awesome moves already! You know what you are passionate about
    and perhaps you have already created a very first **Minimum Viable Product** (**MVP**).
    This could be a website, a survey, or maybe even a very simple app. It does not
    really matter how it manifests itself. The only thing that is important here is
    that it is something that could prove your hypothesis and it is something that
    requires only minimal effort. Learn from the feedback that you get, and figure
    out if your earliest assumptions are correct. If so, it is time for the next step.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经做出了一些惊人的举动！你知道你热爱什么，也许你已经创建了一个非常初级的**最小可行产品**（**MVP**）。这可能是一个网站、一个调查，甚至可能是一个非常简单的应用。它实际上是如何表现出来的并不重要。这里唯一重要的是，它应该是可以证明你的假设并且只需要最小努力的东西。从你得到的反馈中学习，并找出你最早的假设是否正确。如果是这样，那么是时候进行下一步了。
- en: In this chapter, we will see how to move on and how to deal with one of the
    biggest challenges of a startup. Time and timing are essential. This is particularly
    true for a bootstrapped startup. We will look at how to get things done when nothing
    is there yet and when the most important resources (time and money) are very limited.
    What you need is the right mindset and a very pragmatic approach.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何继续前进以及如何应对创业公司面临的最大挑战之一。时间和时机至关重要。这对自筹资金创业公司尤其如此。我们将探讨在没有任何东西的情况下以及当最重要的资源（时间和金钱）非常有限时如何完成任务。你需要的是正确的思维方式和非常实用主义的方法。
- en: You do not need a huge office and all kinds of fancy stuff. Also, you do not
    need many rules, but most of the time things do not happen automatically. Anyhow,
    we need a few rules, no matter how cool your startup may be. A pragmatic approach
    is a nice balance between total chaos and bureaucracy. You will keep a clear focus
    on what you want to accomplish, and developing new features is not going to take
    you longer than strictly needed. Such an approach will result in developing exactly
    the required functionality during a particular stage of your app.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要一个巨大的办公室和所有那些花哨的东西。同样，你不需要很多规则，但大多数时候事情不会自动发生。无论如何，我们需要一些规则，无论你的创业公司多么酷。实用主义方法是在完全混乱和官僚主义之间的良好平衡。你将保持对想要达成的目标的清晰关注，开发新功能不会比你严格需要的更长。这种方法将导致在应用特定阶段开发所需的功能。
- en: There are no shortcuts in startup land when searching for a product-solution
    or a product-market fit, but as a developer you often do not need to reinvent
    the wheel. Readymade solutions are widely available for most situations. For example,
    in [Chapter 8](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml), *Cloud Solutions for
    App Experiments*, we will investigate which parties are offering a **Mobile Backend
    as a Service** (**MBaaS**), and in [Chapter 10](b81516a3-47fe-4318-a8e6-2bc8f2f34a04.xhtml),
    *There Is an API for That!*, we will look at various mash-up ideas. Such solutions
    are real-time savers irrespective of whether you are just using them to build
    an MVP or using them during the whole lifetime of your app.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找产品解决方案或产品市场匹配时，创业领域没有捷径可走，但作为开发者，你通常不需要重新发明轮子。大多数情况下，现成的解决方案都广泛可用。例如，在[第8章](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml)，*云解决方案用于应用实验*中，我们将调查哪些方提供**移动后端即服务**（**MBaaS**），而在[第10章](b81516a3-47fe-4318-a8e6-2bc8f2f34a04.xhtml)，*有API就能做到！*中，我们将探讨各种混合创意。这些解决方案无论你是用来构建最小可行产品（MVP）还是在整个应用生命周期中使用，都能节省大量时间。
- en: 'Specifically, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将涵盖以下主题：
- en: Learn about the benefits of timeboxed programming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解时间boxed编程的好处
- en: See what options are available to get started with nothing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看从无到有开始有哪些选项
- en: Demonstrate how to keep things well structured
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示如何保持事物结构良好
- en: Investigate whether there are any shortcuts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查是否存在任何捷径
- en: Timeboxed programming
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间boxed编程
- en: For each iteration, you need to decide how long it will take and what features
    will come with it. As you have seen in [Chapter 4](0455b0c7-1234-4a39-a89c-b35deb8f92ed.xhtml),
    *An Agile Workflow in a Nutshell*, a typical sprint takes 2 to 3 weeks. Although
    this may be difficult at first, you will learn soon enough what you and your team
    members can accomplish during such a sprint. Sometimes you will have no clue how
    long the development of a feature will take. In that case, a timeboxed approach
    can help you as well. Before you start working on that feature, you allocate a
    particular amount of time. Afterwards, you can determine what you have accomplished
    and you can decide whether the feature can be released as it is. Even if it is
    not completely functional, as long as it contains no (severe) bugs, it can help
    you to get early feedback.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个迭代，你需要决定它将花费多长时间以及将包含哪些特性。正如你在[第4章](0455b0c7-1234-4a39-a89c-b35deb8f92ed.xhtml)，“敏捷工作流程概述”中看到的，典型的冲刺需要2到3周。虽然一开始可能很难，但很快你就会学会在这样一次冲刺中你能和你的团队成员完成什么。有时你甚至不知道一个特性的开发需要多长时间。在这种情况下，时间盒方法也能帮助你。在你开始工作之前，你分配一个特定的时间。之后，你可以确定你完成了什么，并决定是否可以以当前状态发布该特性。即使它不完全功能，只要它不包含（严重的）错误，它也能帮助你获得早期反馈。
- en: Keep things simple and develop only the features that you actually need for
    that particular iteration. You should ask yourself what it is that you want to
    prove and what feedback you need in order to proceed. Again, it is important to
    realize how relevant that feedback is when you look at your app's current phase.
    For example, you should not be focusing too much on the development of In-App
    Purchase functionality if the base functionality of your app has not been completed
    yet.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 保持简单，只为特定迭代开发你真正需要的特性。你应该问自己你想要证明什么，以及你需要什么样的反馈来继续前进。同样，当你审视你的应用当前阶段时，了解这些反馈的相关性很重要。例如，如果你的应用的基本功能尚未完成，你不应该过多关注In-App
    Purchase功能的开发。
- en: '"You Aren''t Gonna Need It", also known as the YAGNI acronym, is one of the
    ideas behind Agile development and extreme programming (XP), but it does apply
    here as well.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “你不会需要它”，也称为YAGNI缩写，是敏捷开发和极限编程（XP）背后的理念之一，但这也同样适用。
- en: The goal should always be to achieve maximum learning with the least amount
    of effort. Also, keep it simple and solve one problem at a time for one product
    and for one type of customer. As a developer, you will often foresee scenarios
    that need to be supported, the so-called unhappy flows, but who cares about them
    if the happy flow is not ready yet?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目标始终应该是以最少的努力实现最大的学习。此外，保持简单，一次只解决一个产品和一种类型客户的一个问题。作为一名开发者，你经常会预见需要支持的场景，所谓的“不愉快流程”，但如果“愉快流程”还没有准备好，谁会在意它们呢？
- en: Consider the scenario where the idea of timeboxing involves the focus more on
    the time spent instead of the tasks done. So, instead of thinking of features
    that should be done in a particular amount of time, think of a particular amount
    of time and what features you can implement given that amount of time. To maximize
    learning, the changes that come with each new release of your app should be as
    small as possible while still delivering relevant business value. Timeboxed programming
    is essential to make sure resources are delivered in a particular amount of time.
    Determine deliverables and a deadline for each timeboxed iteration. Using this
    methodology, your productivity will be improved and you can keep the promises
    to your customers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到时间盒的概念更多地关注于花费的时间而不是完成的任务。因此，与其思考应该在特定时间内完成的特性，不如思考在特定时间内可以实施哪些特性。为了最大化学习，你应用的新版本带来的变化应该尽可能小，同时仍然提供相关的商业价值。时间盒编程对于确保资源在特定时间内交付至关重要。为每个时间盒迭代确定可交付成果和截止日期。使用这种方法，你的生产力将得到提高，你也能对你的客户做出承诺。
- en: In general, get to know your (potential) customers. Learn more about their problem.
    It is the problem your app needs to solve. This may sound like a job for your
    more business-oriented cofounder, but a better understanding of this also makes
    you a better developer. Ask questions and find out what the common problems are
    for all of your customers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，了解你的（潜在）客户。更多地了解他们的问题。这是你的应用需要解决的问题。这可能听起来像是你的更商业化的联合创始人的工作，但更好地理解这一点也会使你成为一个更好的开发者。提出问题，找出所有客户的共同问题。
- en: Concierge service
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户服务
- en: It is important to realize that some parts of the solution you are creating
    are essential, but may not necessarily be good candidates for automating processes
    right away. These parts can be offered manually as well. Such a solution is known
    as a **Concierge Service**, or as the **Concierge Minimum Viable Product** (**CMVP**).
    At first glance, that does not really seem to make much sense to a developer.
    You might be thinking that the lean startup methodology is about minimizing waste,
    and wonder why we should do things manually?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要意识到，你创建的解决方案中的一些部分可能是必不可少的，但可能并不一定是立即自动化的好候选者。这些部分也可以手动提供。这样的解决方案被称为**礼宾服务**，或称为**礼宾最小可行产品**（**CMVP**）。乍一看，这并不真正对开发者有太多意义。你可能认为精益创业方法论是关于最小化浪费的，所以
    wonder 为什么我们应该手动处理事情？
- en: The truth is that doing things manually is indeed not very efficient, but that
    is fine for now. It is a short-term solution that can help you gain new insights
    and learn how to solve the user's or customer's problem. Once you fully understand
    the problem and know what the solution should be, it is time for automation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，手动处理事情确实不太高效，但就目前而言，这还是可以接受的。这是一个短期解决方案，可以帮助你获得新的见解，并学习如何解决用户或客户的问题。一旦你完全理解了问题，并知道解决方案应该是什么，那么自动化就到时间了。
- en: What would happen if you worked on an awesome feature for 3 months and afterwards
    learned that your app does not seem to know your user's problem? It will probably
    be a huge disappointment for all stakeholders and you will wonder why this happened.
    You should always ask yourself whether you have all the required information to
    solve the issue and whether you understand your customer's needs. If that is not
    the case, your effort may lead to delivering a product that nobody wants. You
    might need to refactor a lot, or start all over again. Such activity would be
    a waste of your time (and if you are having bad luck, your credibility).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花上3个月时间开发一个令人惊叹的功能，然后发现你的应用似乎并不了解用户的问题，会发生什么？这可能会对所有利益相关者造成巨大的失望，你也会 wonder
    为什么会发生这种情况。你应该始终问自己是否拥有解决该问题的所有必要信息，以及你是否理解了客户的需求。如果不是这样，你的努力可能会导致交付一个没有人想要的产品。你可能需要大量重构，或者从头开始。这样的活动将是浪费时间（而且如果你运气不好，你的信誉也会受损）。
- en: Is it crappy or perfect?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是糟糕的还是完美的？
- en: The fact that you focus on the features that are most important is because they
    contribute to the hypotheses that you want to prove. However, this does not mean
    that your product has to be crappy. Using a timeboxed approach will help you deliver
    often (daily or weekly) and on time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你之所以关注最重要的功能，是因为它们有助于你想要证明的假设。然而，这并不意味着你的产品必须是糟糕的。采用时间盒方法可以帮助你经常（每天或每周）按时交付。
- en: The features that you will make available are unlikely to be perfect, but with
    each new iteration you can improve them. Of course, you will never have a second
    chance for a first impression, but aiming for perfection is not going to help
    you prove your hypotheses. Instead, it will prevent you from getting feedback
    early. Still, it is important that you choose your first users carefully. Early
    adopters are very different from mainstream users, having different expectations.
    Managing expectations is therefore very important when asking early adopters to
    test your solution. Be honest about the phase your startup is in and tell them
    that the solution has been built to maximize learning and that you would love
    to get their feedback. It may sound a bit harsh, but ultimate perfection does
    not exist anyway. The opinion of your early adopters is important and your opinion
    does not really matter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你将提供的功能可能不会完美，但每次新的迭代都可以改进它们。当然，你将不会有第二次机会来留下第一印象，但追求完美并不能帮助你证明你的假设。相反，它将阻止你尽早获得反馈。然而，选择你的第一批用户非常重要。早期采用者与主流用户非常不同，他们有不同的期望。因此，在要求早期采用者测试你的解决方案时，管理期望非常重要。诚实地告诉他们你的初创公司处于哪个阶段，告诉他们解决方案是为了最大化学习而构建的，你非常希望得到他们的反馈。这可能听起来有点严厉，但最终完美是不存在的。早期采用者的意见很重要，你的意见并不真正重要。
- en: Release early and often
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 早期快速发布
- en: Releasing early and often—for example, once a week or every 2 weeks—will maximize
    your learning. Timeboxed programming could help you deliver the features that
    matter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 早期快速发布——例如，每周一次或每两周一次——将最大化你的学习。时间盒编程可以帮助你交付重要的功能。
- en: 'The loop shown in the following figure is known as the **Build-Measure-Learn
    Feedback** cycle. It is easy to get feedback if you know your early adopters.
    That is not always possible if you are developing an app. There are great tools
    available to obtain analytical data. In [Chapter 13](a62b3753-12c5-4170-808a-e0e1446e6b97.xhtml),
    *Play Store and App Store Hacks* we will learn more about these tools and how
    to gather feedback through metrics:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下图中所示的循环被称为**构建-度量-学习反馈**循环。如果你知道你的早期采用者，获取反馈很容易。但是，如果你正在开发一个应用程序，这并不总是可能的。有许多工具可以帮助你获取分析数据。在[第13章](a62b3753-12c5-4170-808a-e0e1446e6b97.xhtml)，*应用商店和应用程序商店技巧*中，我们将了解更多关于这些工具以及如何通过指标收集反馈：
- en: '![](img/d479a1a0-63d6-402b-9511-d2e9b782452e.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d479a1a0-63d6-402b-9511-d2e9b782452e.png)'
- en: How do you get started with nothing?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你如何从无开始？
- en: A blank page, a basic idea, and an early MVP. That is how it starts, and it
    is not exactly nothing. But that does not make it a company, or an app, and it
    certainly does not come with customers, unless you have a really convincing MVP
    or a great production-solution fit.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一张空白页，一个基本想法，以及一个早期的最小可行产品（MVP）。这就是开始的方式，但这并不完全是一无所有。但这并不意味着它是一家公司，或者一个应用程序，当然，它也不一定伴随着客户，除非你有一个真正令人信服的MVP或一个出色的生产解决方案。
- en: The chicken and egg problem
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鸡生蛋问题
- en: Depending on the type of app you are developing, sooner or later you will face
    the famous chicken and egg problem. Simply put, an app that depends on user-generated
    content will have no content without users, but also no users without content.
    So, where do you start?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你正在开发的应用程序类型，迟早你会面临著名的“先有鸡还是先有蛋”问题。简单来说，一个依赖于用户生成内容的应用程序在没有用户的情况下将没有内容，而没有内容的情况下也将没有用户。那么，你从哪里开始呢？
- en: Any marketplace-based app has to deal with this challenge, whether it is an
    app for dating, job finding, or bringing companies together. But it does apply
    to other types of apps as well. There are many apps available in the App Store.
    They all are doing more or less the same thing, so why should your users (and
    later, your customers) use your app and not any of the other apps? Sooner or later
    you need to find an answer to the question, "What makes your app better?" Is your
    app better because it is cheaper, does it provide better services, or does your
    app appear to be more convincing simply because your app has a large user base?
    In short, you do not yet have a platform with many users or testimonials because
    you just got started. Oh, yes, you do have a chicken and egg challenge!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何基于市场的应用程序都必须应对这个挑战，无论是约会应用程序、求职应用程序还是将公司联系在一起的应用程序。但这同样适用于其他类型的应用程序。应用商店中有许多应用程序。它们都在做更多或更少相同的事情，那么为什么你的用户（以及后来，你的客户）要使用你的应用程序而不是其他应用程序呢？迟早你需要找到答案，即“是什么让你的应用程序更好？”你的应用程序是否因为更便宜而更好，它是否提供了更好的服务，或者你的应用程序是否因为拥有庞大的用户群而显得更有说服力？简而言之，因为你刚刚开始，所以你还没有一个拥有许多用户或评价的平台。哦，是的，你确实有一个“先有鸡还是先有蛋”的挑战！
- en: '![](img/db14acba-cf0c-4de3-b674-2345e2fc0730.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/db14acba-cf0c-4de3-b674-2345e2fc0730.png)'
- en: Fake it until you make it
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假装直到你做到
- en: 'To solve the chicken and egg challenge and to get your app started, there are
    some simple solutions. One of them is: Fake it until you make it. It sounds like
    cheating, or at least it sounds like something that is bad, while in fact it is
    not. It''s a workaround for the chicken and egg problem. No, we are not going
    to lie, at most we will just pretend. If you are developing a dating app, ask
    all your relatives and friends to sign up with a nice profile photo. You can use
    this approach not only for user data, but for all types of content. If you are
    working on a B2B app, you could purchase some company data, enrich it, and present
    as if it is your own. Refer to [Chapter 10](b81516a3-47fe-4318-a8e6-2bc8f2f34a04.xhtml),
    *There is an API For That!*, about mash-ups to read more information about that
    topic. Another option that would work well (for example, think of an app displaying
    job information) is to get data from various other sources and start as an app
    offering aggregated data. There are many ways to get started and they all are
    aimed at growing your app by developing content and your user base.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决“先有鸡还是先有蛋”的挑战并启动你的应用，有一些简单的解决方案。其中之一是：假装直到你做到。这听起来像是作弊，或者至少听起来像是不好的事情，而实际上并非如此。这是对“先有鸡还是先有蛋”问题的权宜之计。不，我们不会撒谎，最多只是假装。如果你正在开发一个约会应用，让你的所有亲戚和朋友都注册一个有吸引力的个人资料照片。你可以使用这种方法不仅限于用户数据，还可以用于所有类型的内容。如果你正在开发一个面向企业的应用，你可以购买一些公司数据，丰富它，并假装这是你自己的。参考[第10章](b81516a3-47fe-4318-a8e6-2bc8f2f34a04.xhtml)，*有一个API可以做到！*，关于混合应用，了解更多相关信息。另一个可行的选项（例如，想想一个显示工作信息的应用）是从各种其他来源获取数据，并作为一个提供聚合数据的应用开始。有许多方法可以开始，它们都旨在通过开发内容和用户基础来增长你的应用。
- en: Become an expert
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为专家
- en: You too can become an expert, just by doing it. You can start to become a more
    significant player for some niche. Just be that expert while learning on the go.
    For example, when we began with our new startup built around a concept of narrow
    casting combined with social media, we really had no clue about what narrow casting
    was other than the television screens that you often see in stores or at train
    stations. By writing a blog about the topic of narrow casting, we have learned
    a lot and gradually we have become experts. And, even more important, it has helped
    us to shape our vision on the problem that we were trying to solve. In our case,
    this was about finding an answer to the question, how we could make narrow casting
    a more interactive process? Pretending will help you to set your targets, and
    once you have reached them, it is no longer fake, but real. You can build your
    reputation this way. How cool is that? Obviously, you have to keep things real.
    Do not fake things if you never can fulfil the expectations that come with them,
    but do it to buy more time, to get the job done, or to become an expert along
    the way. If you keep it real, your startup will become what you envision.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过实践成为专家。你可以开始成为某个利基领域的更重要的一员。只需在学习的过程中成为那个专家即可。例如，当我们开始围绕窄播和社交媒体结合的概念建立我们的新创业公司时，我们对窄播一无所知，除了在商店或火车站经常看到的电视屏幕。通过撰写关于窄播主题的博客，我们学到了很多，并逐渐成为专家。更重要的是，它帮助我们塑造了我们试图解决的问题的愿景。在我们的案例中，这是关于找到答案的问题，我们如何使窄播成为一个更互动的过程？假装可以帮助你设定目标，一旦你达到了它们，就不再是假装，而是真实的。你可以通过这种方式建立你的声誉。这有多酷？显然，你必须保持真实。如果你永远无法满足随之而来的期望，就不要假装，而应该为了争取更多时间、完成工作或成为专家而这样做。如果你保持真实，你的初创公司将成为你所期望的样子。
- en: Grab and adapt
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抓住并适应
- en: Almost all startup ideas derive from existing concepts. A little enhancement,
    different pricing, service, UX, or particular approach can be the **Unique Selling
    Points** (**USP**) that will lead to a unique product. The same service, but promoted
    with a different marketing approach, can result in a totally different product.
    It is a trend that you often see. For example, I have been working on a project
    for an enabler of **Mobile Virtual Network Operators** (**MVNO**). Their customers
    were all mobile service providers who did not own the infrastructure themselves.
    The biggest difference between all the virtual providers was just marketing strategy.
    Anyone can start their own network from scratch with little investment. All you
    need to do is grab and adapt. You have to be careful, though. You need to be aware
    of patents and copyright issues, but there are many (open source) projects that
    you can use as the foundation for your app, or just for a first MVP.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的初创想法都源于现有的概念。一点增强、不同的定价、服务、UX或特定的方法可以是**独特卖点**（**USP**），这将导致一个独特的产品。同样的服务，但采用不同的营销方法，可以产生完全不同的产品。这是一个你经常看到的趋势。例如，我一直在为一个**移动虚拟网络运营商**（**MVNO**）的促进者工作。他们的客户都是不拥有自己基础设施的移动服务提供商。所有虚拟提供商之间最大的区别只是营销策略。任何人都可以用很少的投资从头开始建立自己的网络。你只需要抓取并适应。不过，你必须小心。你需要意识到专利和版权问题，但有许多（开源）项目你可以用作你应用的基座，或者只是一个初期的MVP。
- en: For very little money, you can also buy a concept, or even a complete app, that
    comes close to your startup idea. In that case, all you need to do is to enhance
    it and see if you can make a difference. To start something new, most apps just
    need a little twist. For example, have a look at [http://codecanyon.net](http://codecanyon.net).
    You will find some great starting points here. There are apps for Android, iOS,
    web-based apps, and many more. You can find Flappy Bird clone apps, restaurant
    apps, and everything in between.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用很少的钱，你也可以购买一个接近你的初创想法的概念，甚至是一个完整的应用。在这种情况下，你所需要做的就是增强它，看看你是否能有所区别。为了开始新事物，大多数应用只需要一点变化。例如，看看[http://codecanyon.net](http://codecanyon.net)。你在这里会发现一些很好的起点。这里有Android、iOS、基于Web的应用程序等等。你可以找到Flappy
    Bird克隆应用、餐厅应用以及介于两者之间的所有应用。
- en: 'Let''s say your startup is developing a travel app. You can search for these
    kinds of apps and buy one of them. You can quickly prove your hypothesis just
    by making some modifications to the app:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的初创公司正在开发一款旅行应用。你可以搜索这类应用并购买其中之一。你只需对应用进行一些修改，就能快速验证你的假设：
- en: '![](img/768a176f-52a9-4fa3-a620-669cbf91d3c6.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/768a176f-52a9-4fa3-a620-669cbf91d3c6.png)'
- en: That is a real time-saver and it is worth the little investment. What you learn
    will help you define what the app should do and what it should look like at the
    early stage. Perhaps later you still want to develop your app more or less from
    scratch. However, if you think that a readymade base app will help you collect
    useful insights quickly, then it will not be a hard decision to follow this approach.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将节省大量时间，而且值得小小的投资。你所学到的知识将帮助你定义应用在早期阶段应该做什么以及应该看起来像什么。也许后来你仍然想从零开始或多或少的重新开发你的应用。然而，如果你认为现成的基座应用能帮助你快速收集有价值的见解，那么遵循这种方法将不会是一个艰难的决定。
- en: Offer an app or a service that does not yet exist
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供一个尚不存在的应用或服务
- en: How can you offer or describe your app when it does not yet exist? A nonexisting
    app is pretty hard to demonstrate, so how will customers be made aware of it,
    and how will they know why they should get the app? They somehow have to find
    out that there is an (concept) app that solves the problems they are experiencing.
    Here, the funny thing is that your app itself is not really that important. Sorry,
    your app alone is not the product. It is just a vehicle for your users to get
    something done. Show a slideshow or a video that explains what your app does and
    why it can help solve their problem. This can be just as convincing. You will
    get their attention and if you are doing really well, you will get their pre-orders
    right away.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用尚不存在时，你该如何提供或描述它？一个不存在的应用很难展示，那么顾客如何得知它的存在，以及他们如何知道为什么应该获取这个应用？他们必须以某种方式了解到有一个（概念）应用可以解决他们遇到的问题。这里有趣的是，你的应用本身并不是那么重要。抱歉，你的应用本身并不是产品。它只是用户完成某事的工具。展示一个幻灯片或视频来解释你的应用做什么以及为什么它能帮助他们解决问题。这同样可以具有说服力。你会吸引他们的注意，如果你做得很好，你将立即获得他们的预订单。
- en: If you do not have the skills to create a great video, or if you are in need
    of a logo or any other design, then have a look at [https://www.fiverr.com/](https://www.fiverr.com/).
    They have many freelance designers who can help you. Another website that you
    can look at is [https://99designs.com/](https://99designs.com/).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有制作出色视频的技能，或者你需要一个标志或任何其他设计，那么请看看[https://www.fiverr.com/](https://www.fiverr.com/)。那里有许多自由职业设计师可以帮助你。另一个你可以查看的网站是[https://99designs.com/](https://99designs.com/).
- en: A video or presentation is not really that different from an MVP, right? Well,
    it is one, although in this example we are testing the product-market fit-related
    hypotheses, instead of the product-solution fit-related hypotheses. Every startup
    owner, regardless of his or her role, has to do sales and be able to sell stuff
    before it even exists. That is not lying and it is not even faking. It is a creative
    way of promising a solution for known problems.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个视频或演示与最小可行产品（MVP）实际上并没有太大的区别，对吧？好吧，它确实是，尽管在这个例子中我们正在测试与产品-市场匹配相关的假设，而不是与产品-解决方案匹配相关的假设。每个初创企业的所有者，无论其角色如何，都必须进行销售，并且能够在产品存在之前就销售产品。这并不是谎言，甚至也不是假装。这是一种创造性的方式，承诺为已知问题提供解决方案。
- en: However, don't ever fake testimonials or lie about the number of customers or
    make things ten times bigger than they are. Keep things real. Instead, work on
    a great reputation, become an expert, create a very convincing website and include
    a feature list, even when it has not been completed yet. To show that people can
    trust your company, also add a company policy link with terms and conditions.
    Add pricing tables to your website, even when you are not yet ready to sell. It
    is never too early to measure (revenue) traction. In [Chapter 15](d9145149-0f4e-47b6-bc9d-ff46e5e63304.xhtml),
    *Growing Traction and Improving Retention*, we will learn how we can measure traction
    and in [Chapter 17](0efea3a6-95f2-42d3-9a36-a34bdbef1014.xhtml), *Monetization
    and Pricing Strategy*, you will be able to read more about pricing strategies.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，永远不要伪造推荐信或谎报客户数量，或者把事情夸大十倍。保持真实。相反，努力建立良好的声誉，成为专家，创建一个非常有说服力的网站，并包括功能列表，即使它还没有完成。为了表明人们可以信任你的公司，还可以添加一个包含条款和条件的公司政策链接。即使你还没有准备好销售，也要在网站上添加定价表。衡量（收入）牵引力永远不会太早。在[第15章](d9145149-0f4e-47b6-bc9d-ff46e5e63304.xhtml)“增长牵引力和提高留存率”中，我们将学习如何衡量牵引力，而在[第17章](0efea3a6-95f2-42d3-9a36-a34bdbef1014.xhtml)“货币化和定价策略”中，你将能够了解更多关于定价策略的内容。
- en: How to keep things well structured
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何保持事物结构良好
- en: If you start learning from the feedback you obtain through interviews or metrics,
    it is very likely that the flow or structure of your app will change. As business
    requirements change often, ad hoc changes need to be made. This requires you to
    refactor the code of your app. That is something that most developers consider
    to be important, but in reality it can be easily forgotten or it is never done,
    simply because there is not enough time for it. Sometimes, refactoring is considered
    to make the app unstable. However, do not let your technical debt become too large.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从面试或指标中获得的反馈开始学习，那么你应用程序的流程或结构很可能发生变化。由于业务需求经常变化，需要做出临时调整。这要求你重构应用程序的代码。这是大多数开发者认为很重要的事情，但在现实中，它很容易被遗忘，或者根本就没有完成，仅仅是因为没有足够的时间。有时，重构被认为会使应用程序不稳定。然而，不要让你的技术债务变得过大。
- en: Technical debt or even spaghetti code can be the result if you understand underlying
    process insufficiently, or when you do not allocate enough time for development.
    In case a startup company has only business-oriented skills, it may have outsourced
    the development or it may have hired some third party to do the job. If that is
    the case, there is little to no insight into the technical structure of an app.
    I strongly recommend you to do most of the development yourself. If you do own
    a startup with no technical cofounder on-board, then stop reading and find one
    first! There are many meetups and websites where you can meet somebody (for a
    cofounder or another role) with the skills that you are looking for. Take a look
    at these websites: [https://angel.co/](https://angel.co/) and [https://cofounderslab.com/](https://cofounderslab.com/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对底层过程理解不足，或者没有为开发分配足够的时间，可能会导致技术债务或甚至面条代码。如果一个初创公司只有面向业务的技术技能，它可能已经外包了开发，或者雇佣了一些第三方来完成这项工作。如果是这种情况，对应用程序的技术结构了解很少或没有。我强烈建议你尽可能自己做大部分的开发。如果你拥有一个没有技术合伙人的初创公司，那么请停止阅读，首先找到一位！有许多聚会和网站，你可以在那里遇到拥有你所需技能的人（作为合伙人或其他角色）。看看这些网站：[https://angel.co/](https://angel.co/)
    和 [https://cofounderslab.com/](https://cofounderslab.com/)。
- en: It is important to keep things, and your code in particular, well structured.
    Design patterns and a number of disciplines could help you to achieve building
    apps for Android and for iOS. It is true that Android Studio is offering much
    more functionality for refactoring purposes, and that using Xcode refactoring
    requires some extra effort. Nevertheless, refactoring is equally important for
    both platforms.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 保持事物，尤其是你的代码，结构良好是非常重要的。设计模式和许多学科可以帮助你为Android和iOS构建应用程序。确实，Android Studio为重构提供了更多的功能，而使用Xcode重构则需要额外的努力。然而，重构对于这两个平台同样重要。
- en: Design patterns
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模式
- en: There is no need to reinvent the wheel and there is no need for us to repeat
    ourselves. This is exactly what the **Don't Repeat Yourself** (**DRY**) software
    development principle dictates. A design pattern is a solution for a common problem,
    and such a pattern can be used in many places across your app. It is the methodology
    that we can trust, which will help us to speed up the development process. Patterns
    could help us develop high-quality software with minimal effort. They also can
    help us deal with the separation of concerns. Some well-known patterns are the
    **Model View Controller** (**MVC**) pattern, the somewhat similar **Model View
    Presenter** (**MVP**), and the **Model-View-ViewModel** (**MVVM**) approach.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要重新发明轮子，我们也不需要重复自己。这正是“不要重复自己”（DRY）软件开发原则所规定的。设计模式是针对常见问题的解决方案，这样的模式可以在应用程序的许多地方使用。这是我们能够信赖的方法论，它将帮助我们加快开发过程。模式可以帮助我们以最小的努力开发高质量的软件。它们还可以帮助我们处理关注点的分离。一些著名的模式包括**模型-视图-控制器**（MVC）模式、某种程度上相似的**模型-视图-表示者**（MVP）模式，以及**模型-视图-视图模型**（MVVM）方法。
- en: 'There are some great books about design patterns and it is beyond the scope
    of this book to have a detailed look at all of them, but the MVC/MVP is of particular
    interest because it is used the most for mobile development. The idea behind the
    pattern is to separate the UI from the business logic and data from the logic.
    When you have a closer look on the structure of most Android or iOS apps in Android
    Studio or in Xcode, you will notice some parts of this pattern already. A controller
    gets data from another layer. This layer can be a client or a repository class.
    For example, it will get its data from an API or from a local source. The controller
    communicates the obtained data through a model (or view model) to the user interface:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 关于设计模式有很多优秀的书籍，本书的范围不涉及对所有这些书籍的详细探讨，但MVC/MVP模式特别引人关注，因为它在移动开发中应用最为广泛。该模式背后的理念是将用户界面与业务逻辑以及数据与逻辑分离。当你仔细观察Android
    Studio或Xcode中大多数Android或iOS应用程序的结构时，你会注意到其中已经包含了一些这种模式的元素。控制器从另一个层获取数据。这个层可以是一个客户端或仓库类。例如，它将从API或本地源获取数据。控制器通过模型（或视图模型）将获取到的数据传达给用户界面：
- en: '![](img/636b08b9-7ce7-4b28-8171-7bf195a15168.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/636b08b9-7ce7-4b28-8171-7bf195a15168.png)'
- en: Become independent
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立自主
- en: Ideally, it should not matter whether your app is getting its data from a local
    stub, a **Mobile Backend as a Service** (**MBaaS**), a third party API, or your
    own API. This is very easy to accomplish. You just need to realize that it is
    important to separate the different concerns and that implementing contracts matter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你的应用程序是从本地存根、**移动后端作为服务**（MBaaS）、第三方API还是你自己的API获取数据，这应该无关紧要。这很容易实现。你只需要意识到分离不同的关注点以及实现合同的重要性。
- en: Another lesson learned is that you cannot always trust third party services.
    You must have heard about Parse. It used to be of the most promising MBaaS and
    a lot of app developers were depending on it to store their app data in the cloud.
    Recently, they announced that they will shut down their business, which frustrated
    a lot of developers. Fortunately, Parse has created an open source version of
    Parse Server. Anyhow, it nicely illustrates what I am trying to say here. Make
    sure you do not go out of business even if one of your key partners does.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个学到的教训是，你并不总是可以信任第三方服务。你可能听说过Parse。它曾经是最有前途的MBaaS之一，许多应用程序开发人员都依赖它来在云端存储他们的应用程序数据。最近，他们宣布将关闭业务，这让许多开发人员感到沮丧。幸运的是，Parse已经创建了一个开源版本的Parse
    Server。无论如何，它很好地说明了我想在这里表达的观点。确保即使你的一个关键合作伙伴关闭业务，你的业务也不会受到影响。
- en: Data layer
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据层
- en: Switching from one service provider to another (key partner) is easy if your
    app is well structured. Use a separate layer for accessing data and define contracts
    for the communication between your data layers and your controllers. Contracts
    are known as an **interface** (for Android) or as a **protocol** (for iOS). They
    contain no implementation and are nothing but appointments between one class and
    another. They define what methods are available, what parameters are required,
    and what the result type will be.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序结构良好，从一家服务提供商切换到另一家（关键合作伙伴）很容易。使用单独的数据访问层，并为你的数据层和控制器之间的通信定义合同。合同被称为**接口**（对于Android）或**协议**（对于iOS）。它们不包含实现，只是类与类之间的约定。它们定义了可用的方法、所需的参数以及结果类型。
- en: For example, let's say we are getting data from some kind of source. In the
    interface `IRepository`, we will define the names, results, and parameters for
    all methods that represent some operation. To be more precise, let's say we want
    to retrieve company news that we have stored somewhere in the cloud. It could
    be at Parse server (at Back4App or elsewhere), Amazon, Azure, or Firebase, it
    does not really matter where and how exactly we will get this data. Since it is
    an interface, we do not have to care about the actual implementation yet.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们假设我们正在从某种数据源获取数据。在接口`IRepository`中，我们将定义表示某些操作的所有方法的名称、结果和参数。更精确地说，让我们假设我们想要检索我们存储在云中的公司新闻。它可能位于Parse服务器（在Back4App或其他地方）、Amazon、Azure或Firebase，具体在哪里以及如何获取这些数据并不重要。由于它是一个接口，我们目前不需要关心实际的实现。
- en: 'For Android, it could look like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android，它可能看起来像这样：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For IOS, it looks like this (in Swift 2.x):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于iOS，它看起来像这样（在Swift 2.x）：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The data layer classes that implement this interface or protocol will perform
    the actual job. They will retrieve the data from a remote data source.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此接口或协议的数据层类将执行实际工作。它们将从远程数据源检索数据。
- en: 'For example, the Android implementation begins like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Android实现开始如下：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'While the IOS implementation begins like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 而iOS实现开始如下：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In [Chapter 8](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml), *Cloud Solutions
    for App Experiments*, we will see what an implementation with Firebase will look
    like.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml)，“应用程序实验的云解决方案”中，我们将看到使用Firebase的实现将是什么样的。
- en: The data layer could also obtain the data from locally mocked or stubbed data.
    You can easily switch between the different sources. This makes it a great solution
    for testing purposes too.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 数据层也可以从本地模拟或存根数据中获取数据。你可以轻松地在不同的数据源之间切换。这使得它对于测试目的也是一个很好的解决方案。
- en: Are there any shortcuts?
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有任何捷径吗？
- en: 'No there are not! Just kidding. There are some services and methodologies that
    are worthwhile to investigate. They could save you a lot of time and money. Think
    of an app that needs to communicate with a backend because it needs to support
    chat functionality, or to support the sharing of texts, pictures, audio, or video
    with other users. Such an app will have a lot of requirements, such as:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不，没有！开个玩笑。有一些服务和方法是值得调查的。它们可以为你节省大量的时间和金钱。想象一下，一个需要与后端通信的应用，因为它需要支持聊天功能，或者支持与其他用户共享文本、图片、音频或视频。这样的应用将有许多要求，例如：
- en: Synchronizing data from the app to the backend
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从应用同步数据到后端
- en: Getting data from the backend to the app
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从后端获取数据到应用
- en: Data storage
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据存储
- en: Data streaming
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据流
- en: Offline support
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离线支持
- en: Registration and login through email
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过电子邮件进行注册和登录
- en: Registration and login with Facebook or Twitter
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Facebook或Twitter进行注册和登录
- en: 'You probably can build the backend that supports all this yourself, but that
    is a lot of work and there is no need for that. There are many services available
    that will take care of all (or some) of the earlier mentioned requirements:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能可以自己构建支持所有这些的后端，但这需要大量的工作，而且没有必要。有许多服务可以处理（或部分处理）之前提到的所有要求：
- en: '![](img/719ea868-7696-435b-b0ac-fb20a26b29c5.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/719ea868-7696-435b-b0ac-fb20a26b29c5.png)'
- en: In [Chapter 8](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml), *Cloud Solutions
    for App Experiments*, we will have a closer look on Parse server. Later, we will
    also have a look at Windows Azure.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml)“应用实验的云解决方案”中，我们将更详细地探讨Parse服务器。稍后，我们还将探讨Windows
    Azure。
- en: Mash-up
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合解决方案
- en: A mash-up can be seen as a composite app that is combining reusable data, presentation,
    and new logic. It is often seen as web solution, but this approach can be used
    for native app development as well. Data is everywhere. The government and various
    organizations have made their data publicly available through APIs. Mash-up solutions
    do not need to worry about the content in particular, but more about the presentation.
    They may occur as enterprise, data-oriented, or consumer mash-ups.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 混合解决方案可以被视为一个组合应用，它结合了可重用数据、展示和新的逻辑。它通常被视为网络解决方案，但这种方法也可以用于原生应用开发。数据无处不在。政府和各种组织已经通过API将他们的数据公开。混合解决方案不需要担心具体内容，而更多地关注展示。它们可能出现在企业、数据导向或消费者混合解决方案中。
- en: The app may gather data from multiple sources, combine and enrich them, and
    then present them in an app. An example of that could be as simple as producing
    infographics from the provided data. Another example is getting photos from Flickr
    and presenting them on a Google map. There are plenty of other and more sophisticated
    solutions that you can think of. A mash-up can be a great contribution to the
    development of an MVP or a **Proof of Concept** (**PoC**). Often, when it turns
    out that a mash-up is a profitable solution, it mostly has the function of aggregator.
    An example is a website comparing insurance companies.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 应用可能从多个来源收集数据，将它们合并并丰富，然后在应用中展示。一个例子可能就是简单地从提供的数据中生成信息图表。另一个例子是从Flickr获取照片并在谷歌地图上展示。还有许多其他更复杂的方法，你可以考虑。混合解决方案可以极大地促进最小可行产品（MVP）或**概念验证**（**PoC**）的开发。通常，当混合解决方案被证明是一个有利可图的解决方案时，它主要具有聚合器的功能。例如，一个比较保险公司的网站。
- en: Keep in mind that you can develop a mash-up solution relatively fast, but the
    monetization of it could be more difficult. Again, the biggest downside of a mash-up
    is the dependency on third parties. If things start to become more serious, then
    do not just consume their data. You need to do more than that. Avoid a potential
    shutdown of your business in case the company, that is delivering the data, decides
    to discontinue its services. You can reduce that risk if you make that company
    a real key partner. Although there still is a dependency, it is no longer a problem
    because it has become a manageable one.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你可以相对快速地开发一个混合解决方案，但其货币化可能更困难。再次强调，混合解决方案的最大缺点是依赖于第三方。如果事情开始变得严肃，那么不要仅仅消费他们的数据。你需要做更多的事情。避免你的业务因提供数据的公司决定停止服务而可能出现的关闭。如果你让这家公司成为真正的关键合作伙伴，你可以降低这种风险。尽管仍然存在依赖，但它已经不再是一个问题，因为它已经变成了一个可管理的问题。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen a few things that you could do to get started
    and keep going. We had a look at the chicken and egg problem and how to deal with
    it. We also had a look at patterns, and how they could help us to keep things
    well structured.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了一些可以帮助你开始并持续进行的事情。我们探讨了鸡生蛋还是蛋生鸡的问题以及如何处理它。我们还研究了模式，以及它们如何帮助我们保持事物结构良好。
- en: Finally, we had a short introduction to **Mobile Backend as a Service** (**MBaaS**)
    solutions and mash-ups. In [Chapter 8](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml),
    *Cloud Solutions for App Experiments*, and [Chapter 11](774e65d5-5ac0-4ade-9f9e-cffb2a911441.xhtml),
    *Onboarding and Registration*, respectively we will look at a hands-on implementation
    for both of them. But first, we will figure out how minimal an MVP actually should
    be.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们简要介绍了**移动后端即服务**（**MBaaS**）解决方案和混合应用。在[第8章](f05cc1f7-9372-486a-b2ea-4fe6f4a5d69f.xhtml)《应用实验的云解决方案》和[第11章](774e65d5-5ac0-4ade-9f9e-cffb2a911441.xhtml)《用户注册和入门》中，我们将分别探讨这两个方面的实际操作实现。但首先，我们将弄清楚一个最小可行产品（MVP）实际上应该是多么的精简。
