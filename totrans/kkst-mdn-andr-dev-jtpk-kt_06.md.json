["```kt\nhttps://restaurants-db-default-rtdb.firebaseio.com/restaurants.json?orderBy=\"r_id\"&equalTo=2\n```", "```kt\n{ \"error\" : \"Index not defined, add \\\".indexOn\\\": \\\"r_id\\\", for path \\\"/restaurants\\\", to the rules\" }\n```", "```kt\n    {\n        \"rules\": {\n            \".read\": \"true\",\n            \".write\": \"true\",\n            \"restaurants\": {\n              \".indexOn\": [\"r_id\"]\n             }\n        }\n    }\n    ```", "```kt\n    interface RestaurantsApiService {\n        […]\n        @GET(\"restaurants.json?orderBy=\\\"r_id\\\"\")\n        suspend fun getRestaurant(\n          @Query(\"equalTo\") id: Int): Unit\n    }\n    ```", "```kt\n    interface RestaurantsApiService {\n        …\n        @GET(\"restaurants.json?orderBy=\\\"r_id\\\"\")\n        suspend fun getRestaurant(@Query(\"equalTo\") id: Int)\n          : Map<String, Restaurant>\n    }\n    ```", "```kt\n    class RestaurantDetailsViewModel(): ViewModel() {\n        private var restInterface: RestaurantsApiService\n        init {\n            val retrofit: Retrofit = Retrofit.Builder()\n                .addConverterFactory(GsonConverterFactory\n                    .create())\n                .baseUrl(\"your-firebase-base-url\")\n                .build()\n            restInterface = retrofit.create(\n                RestaurantsApiService::class.java)\n        }\n    }\n    ```", "```kt\n    class RestaurantDetailsViewModel() : ViewModel() {\n        private var restInterface: RestaurantsApiService\n         init { […] }\n        private suspend fun getRemoteRestaurant(id: Int):\n                Restaurant {\n            return withContext(Dispatchers.IO) {\n                val responseMap = restInterface\n                    .getRestaurant(id)\n                return@withContext responseMap.values.first()\n            }\n        }\n    }\n    ```", "```kt\n    class RestaurantDetailsViewModel(): ViewModel() {\n        private var restInterface: RestaurantsApiService\n        val state = mutableStateOf<Restaurant?>(null)\n         […]\n    }\n    ```", "```kt\n    init {\n        […]\n    restInterface = retrofit.create(…)\n        viewModelScope.launch {\n            val restaurant = getRemoteRestaurant(2)\n            state.value = restaurant\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantDetailsScreen() {\n        val viewModel: RestaurantDetailsViewModel =         viewModel()\n        val item = viewModel.state.value\n        if (item != null) {\n            // composables\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantDetails(\n        … ,\n        modifier: Modifier,\n        horizontalAlignment: Alignment.Horizontal\n                                        = Alignment.Start\n    ) {\n        Column(\n            modifier = modifier,\n            horizontalAlignment = horizontalAlignment\n        ) { ... }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantDetailsScreen() {\n        val viewModel: RestaurantDetailsViewModel = \n            viewModel()\n        val item = viewModel.state.value\n        if (item != null) {\n            Column(\n    horizontalAlignment = \n                    Alignment.CenterHorizontally,\n    modifier = \n                    Modifier.fillMaxSize().padding(16.dp)\n            ) {\n                RestaurantIcon(\n                    Icons.Filled.Place,\n                    Modifier.padding(\n    top = 32.dp, \n                        bottom = 32.dp\n                    )\n                )\n                RestaurantDetails(\n                    item.title,\n                    item.description,\n                    Modifier.padding(bottom = 32.dp),\n                    Alignment.CenterHorizontally)\n                Text(\"More info coming soon!\")\n            }\n        }\n    }\n    ```", "```kt\n    setContent {\n    RestaurantsAppTheme {\n            //RestaurantsScreen()\n            RestaurantDetailsScreen()\n        }\n    }\n    ```", "```kt\n    implementation \"androidx.navigation:navigation-compose:2.4.2\"\n    ```", "```kt\n    @Composable\n    private fun RestaurantsApp() {\n    }\n    ```", "```kt\n    setContent {\n        RestaurantsAppTheme {\n            RestaurantsApp()\n        }\n    }\n    ```", "```kt\n    @Composable\n    private fun RestaurantsApp() {\n        val navController = rememberNavController()\n    }\n    ```", "```kt\nimport androidx.navigation.compose.NavHost\n[…]\n@Composable\nprivate fun RestaurantsApp() {\n    val navController = rememberNavController()\n    NavHost(navController, startDestination = \"\") {\n    }\n}\n```", "```kt\n@Composable\nprivate fun RestaurantsApp() {\n    val navController = rememberNavController()\n    NavHost(\n        navController,\n        startDestination = \"restaurants\"\n ) {\n        composable(route = \"restaurants\") {\n            RestaurantsScreen()\n        }\n    }\n}\n```", "```kt\n    NavHost(navController, startDestination = \"...\") {\n    composable(route = \"restaurants\") { … }\n    composable(route = \"restaurants/{restaurant_id}\") { \n            RestaurantDetailsScreen()\n        }\n    }\n    ```", "```kt\n@Composable\nfun RestaurantItem(item: Restaurant,\n                   onClick: (id: Int) -> Unit, \n                   onItemClick: (id: Int) -> Unit) {\n    val icon = …\n    Card(elevation = 4.dp,\n         modifier = Modifier\n            .padding(8.dp)\n            .clickable { onItemClick(item.id) }) { … }\n}\n```", "```kt\n    @Composable\n    fun RestaurantItem(item: Restaurant,\n                       onFavoriteClick: (id: Int) -> Unit, \n                       onItemClick: (id: Int) -> Unit) {\n        val icon = …\n        Card(…) {\n            Row(…) {\n                …\n                RestaurantIcon(icon, Modifier.weight(0.15f)) \n                {\n                    onFavoriteClick(item.id)\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit = { }) {\n        val viewModel: RestaurantsViewModel = viewModel()\n        LazyColumn(...) {\n            items(viewModel.state.value) { restaurant ->\n                RestaurantItem(\n                    restaurant,\n                    onFavoriteClick =\n                      { id -> viewModel.toggleFavorite(id) },\n                    onItemClick = { id -> onItemClick(id) })\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    private fun RestaurantsApp() {\n        val navController = rememberNavController()\n        NavHost(navController, startDestination = \"...\") {\n            composable(route = \"restaurants\") {\n                RestaurantsScreen { id ->\n                    navController.navigate(\"restaurants/$id\")\n                }\n            }\n            composable(\n                route = \"restaurants/{restaurant_id}\"\n            ) {\n                RestaurantDetailsScreen()\n            }\n        }\n    }\n    ```", "```kt\n    NavHost(navController, startDestination = \"...\"){\n        composable(route = \"restaurants\") { … }\n        composable(\n            route = \"restaurants/{restaurant_id}\",\n            arguments =\n                listOf(navArgument(\"restaurant_id\") {\n                    type = NavType.IntType\n                })\n        ) { RestaurantDetailsScreen() }\n    }\n    ```", "```kt\ncomposable(…) { navStackEntry ->\n    val id =\n        navStackEntry.arguments?.getInt(\"restaurant_id\")\n    RestaurantDetailsScreen() \n}\n```", "```kt\nclass RestaurantDetailsViewModel(\n    private val stateHandle: SavedStateHandle\n) : ViewModel() {\n    […]\n    init { […]  }\n    private suspend fun getRemoteRestaurant(id: Int) {\n        […]\n    }\n}\n```", "```kt\n    class RestaurantDetailsViewModel(private val stateHandle: SavedStateHandle): ViewModel() {\n        …\n        init {\n            val retrofit: Retrofit = Retrofit[…].build()\n            restInterface = […]\n            val id = stateHandle.get<Int>(\"restaurant_id\") \n                ?: 0\n            viewModelScope.launch {\n                val restaurant = getRemoteRestaurant(id)\n                state.value = restaurant\n            }\n        }\n        …\n    }\n    ```", "```kt\n    NavHost(navController, startDestination = \"restaurants\")\n    {\n      composable(route = \"restaurants\") {…}\n      composable(\n        route = \"restaurants/{restaurant_id}\",\n        arguments = listOf(\n          navArgument(\"restaurant_id\") {…}\n        ),\n        deepLinks = listOf(navDeepLink {\n          uriPattern =\n        \"www.restaurantsapp.details.com/{restaurant_id}\"\n          })\n         ) { RestaurantDetailsScreen() }\n    }\n    ```", "```kt\n    <application … >\n        <activity\n            android:name=\".MainActivity\"\n            […] >\n            <intent-filter>\n                <action android:name=\"[…].action.MAIN\" />\n                <category android:name=\"[…].LAUNCHER\" />\n            </intent-filter>\n            <intent-filter>\n              <data\n                    android:host=\"www.restaurantsapp.\n                        details.com\"\n                    android:scheme=\"https\" />\n              <action android:name=\"android.intent.\n                  action.VIEW\" />\n              <category android:name=\"android.intent.\n                  category.DEFAULT\" />\n              <category android:name=\"android.intent.\n                  category.BROWSABLE\" />\n            </intent-filter>\n        </activity>\n    </application>\n    ```", "```kt\n    $ adb shell am start -W -a android.intent.action.VIEW -d \"https://www.restaurantsapp.details.com/2\"\n    ```"]