- en: Introduction to Android Game Development with Unity3D
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Unity3D 进行 Android 游戏开发简介
- en: In today's era of smartphones, which once was the era of computers, almost everyone
    on the planet is holding a smartphone in their hands. About 1 billion Android
    phones have been sold in 2014, which is a huge audience for developers who work
    on Android. These developers put their effort into creating high utility apps,
    which solves the problems of their users or addicting and fun games and allows
    players to pass the time having fun and enjoying good interactive experiences.
    This book is mainly focused on covering the latter part, creating addictive fun
    games, by using a very famous game engine called Unity3D.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今智能手机时代，这曾经是电脑时代，几乎地球上每个人都在手中拿着一部智能手机。2014 年售出了约 10 亿部 Android 手机，这对在 Android
    上工作的开发者来说是一个庞大的受众。这些开发者投入努力创建高实用性应用，解决用户的问题或制作吸引人且有趣的游戏，让玩家在享受乐趣的同时消磨时间，并获得良好的互动体验。本书主要关注后者，即通过一个非常著名的游戏引擎
    Unity3D 创建吸引人的有趣游戏。
- en: This chapter includes the following topics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下主题。
- en: Introduction to Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 简介
- en: Unity3D and Game Engines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity3D 和游戏引擎
- en: Basics of Unity Game Development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 游戏开发基础
- en: Configuration of Empty Game Projects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空游戏项目的配置
- en: Starting the Perky Penguin Game
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始启动活泼的企鹅游戏
- en: Adding the Penguin to the Game
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将企鹅添加到游戏中
- en: Introduction to Android
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 简介
- en: Android is a Linux-based operating system, which makes it open source software
    distributed under the Apache License Agreement by Google Inc. Due to its open
    source nature, other phone vendors have started porting the Android operating
    system on their newly created phones, which contributed to a very varied smartphone
    market for consumers. Starting from the first version of Android, this operating
    system has gained a good level of maturity, making it more reliable, secure, and
    stable operating system for smartphones. Let's have a look on some popular versions
    of Android in the next section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android 是一个基于 Linux 的操作系统，由谷歌公司根据 Apache 许可协议分发的开源软件。由于其开源性质，其他手机厂商开始在其新创建的手机上移植
    Android 操作系统，这为消费者提供了一个非常多样化的智能手机市场。从 Android 的第一个版本开始，这个操作系统就达到了一个很好的成熟度水平，使其成为更可靠、更安全、更稳定的智能手机操作系统。接下来，让我们看看下一节中一些流行的
    Android 版本。
- en: Android versions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 版本
- en: Year by year, Android has increased its maturity level with each new version.
    Every version introduced new set of features from the user interface to customizations
    to flexibility to security. In terms of names, these versions are based on names
    of candy, chocolates, and other sweet stuff, such as Kitkat, Lollipop, and Marshmallow,
    but that's what makes Android a little more understandable to consumers and developers
    as well.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每年，随着每个新版本的推出，Android 的成熟度都在不断提高。每个版本都引入了从用户界面到定制、灵活性到安全性的新功能集合。在命名方面，这些版本基于糖果、巧克力和其他甜食的名称，如
    Kitkat、Lollipop 和 Marshmallow，但这也使得 Android 对消费者和开发者来说更加易于理解。
- en: It is an interesting fact that the versions of Android are in alphabetical order.
    Starting off from *Apple Pie 1.0* and then *Banana Bread 1.1*, it made its way
    towards *Nougat* with a completely coherent of alphabetical sequence maintaining
    the legacy.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的事实是，Android 版本按字母顺序排列。从 *Apple Pie 1.0* 和 *Banana Bread 1.1* 开始，它通过完全一致的字母顺序一直发展到
    *Nougat*，保持了传统的延续性。
- en: 'The following table highlights the main features of the different Android versions
    with their API levels as well:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下表突出了不同 Android 版本的主要功能及其 API 级别：
- en: '| **Android version** | **Version name** | **Main features** | **API level**
    | **Release month** |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **Android 版本** | **版本名称** | **主要功能** | **API 级别** | **发布月份** |'
- en: '| 1.0 G1 | Banana Bread | GPS, Bluetooth, Multitasking, Google Services, Android Play
    Store | 2 | February 2008 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 1.0 G1 | Banana Bread | GPS、蓝牙、多任务处理、谷歌服务、Android 应用商店 | 2 | 2008 年 2 月 |'
- en: '| 1.5 | Cupcake | Search Box, Revamped Android Play Store, Camera, Gestures
    | 3 | April 2009 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 1.5 | Cupcake | 搜索框，改进的 Android 应用商店，相机，手势 | 3 | 2009 年 4 月 |'
- en: '| 1.6 | Donut | Onscreen Keyboard, Home Screen Widgets, Folders | 4 | September
    2009 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 1.6 | Donut | 虚拟键盘，主屏幕小部件，文件夹 | 4 | 2009 年 9 月 |'
- en: '| 2.0.x | Éclair | Multiple User Accounts, Flash Support, Zoom Feature, Bluetooth
    2.1 | 5, 6, and 7 | October 2009 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 2.0.x | Éclair | 多用户账户，Flash 支持，缩放功能，蓝牙 2.1 | 5、6 和 7 | 2009 年 10 月 |'
- en: '| 2.2.x | Froyo | USB tethering, Hotspot support, Adobe Flash, Voice Dialling
    | 8 | May 2010 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 2.2.x | Froyo | USB 热插拔，热点支持，Adobe Flash，语音拨号 | 8 | 2010 年 5 月 |'
- en: '| 2.3.x | Gingerbread | New Copy/Paste, WebM, NFC, Front Camera | 9, 10 | December
    2010 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 2.3.x | Gingerbread | 新的复制/粘贴、WebM、NFC、前置摄像头 | 9、10 | 2010年12月 |'
- en: '| 3.x | Honeycomb | 3D Graphics, Redesigned UI, Video Chatting, Bluetooth tethering,
    3G, 4G | 11, 12, and 13 | February 2011 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 3.x | Honeycomb | 3D 图形、重新设计的用户界面、视频通话、蓝牙共享、3G、4G | 11、12 和 13 | 2011年2月
    |'
- en: '| 4.0.x | Ice Cream Sandwich | Virtual buttons, Face Unlock, Native Camera
    Features, Face Detection, Android Beam, Wi-Fi Direct | 14 and 15 | October 2011
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 4.0.x | Ice Cream Sandwich | 虚拟按钮、面部解锁、原生相机功能、面部识别、Android Beam、Wi-Fi Direct
    | 14 和 15 | 2011年10月 |'
- en: '| 4.1 - 4.3 | Jelly Bean | Expandable Notifications, Google Now | 16, 17, and
    18 | July 2012 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 4.1 - 4.3 | Jelly Bean | 可扩展的通知、Google Now | 16、17 和 18 | 2012年7月 |'
- en: '| 4.4 | Kit Kat | Major Design Interface Update, Translucent Status bar, Immersive
    Mode, Wireless Printing | 19 and 20 | October 2013 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 4.4 | KitKat | 主要设计界面更新、半透明状态栏、沉浸模式、无线打印 | 19 和 20 | 2013年10月 |'
- en: '| 5.0 | Lollipop | Redesigned UI with Material, Lock Screen Notifications,
    Guest mode, Battery Saver mode | 21 | October 2014 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 5.0 | Lollipop | 使用 Material 重新设计的用户界面、锁屏通知、访客模式、省电模式 | 21 | 2014年10月 |'
- en: '| 6.0 | Marshmellow | Fingerprint security support, Doze mode for battery saving,
    App standby mode, Enhanced App permission | 23 | October 5, 2015 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 6.0 | Marshmallow | 指纹安全支持、省电的 Doze 模式、应用待机模式、增强的应用权限 | 23 | 2015年10月5日 |'
- en: '| 7.0 | Nougat | Multi window view, VR support | 24, and 25 | August 22, 2016
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 7.0 | Nougat | 多窗口视图、VR 支持 | 24 和 25 | 2016年8月22日 |'
- en: 'Table 1.1: Era of operating systems from Android Cupcake to Lollipop'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1：从安卓 Cupcake 到 Lollipop 的操作系统时代
- en: The table only shows the changes made by Android operating system's developer,
    Google Inc. But due to Android's open source nature, other mobile manufacturing
    companies have also changed and introduced new features and modifications into
    Android. For example, Samsung has made a custom touch interface called TouchWiz,
    and HTC has made a custom user interface called HTC Sense. Similarly, Sony has
    introduced a custom user interface called **TimeScape**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该表仅显示了安卓操作系统开发商 Google Inc. 所做的更改。但由于安卓的开源特性，其他移动制造公司也对安卓进行了更改并引入了新的功能和修改。例如，三星开发了名为
    TouchWiz 的定制触摸界面，而 HTC 开发了名为 HTC Sense 的定制用户界面。同样，索尼引入了名为 **TimeScape** 的定制用户界面。
- en: '![](img/image_01_001.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_001.jpg)'
- en: Figure 1.1 Latest Android phones launched in year 2014
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 2014年发布的最新安卓手机
- en: Google Play - the market store for Android
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Play - 安卓的市场商店
- en: After the introduction of smart phones, the concept of market store came to
    existence in software technology, which revolutionized the mobile development
    industry. A significant role was played by Google Play in that revolution of mobile
    apps and games. Google Play is the largest market store in smartphones, with more
    than 2.2 million Android apps, games, books, music, shows, and more. These apps
    and games have been downloaded more than 50 billion times up to this point, and
    that marks a huge milestone achieved by Google in just 8 years of Android. You
    can check out Google Play at [http://play.google.com](http://play.google.com).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机的出现使得市场商店的概念在软件技术中得以实现，这彻底改变了移动开发行业。在这一变革中，Google Play 在移动应用和游戏方面发挥了重要作用。Google
    Play 是智能手机上最大的市场商店，拥有超过 220 万个安卓应用、游戏、书籍、音乐、节目等。到目前为止，这些应用和游戏已被下载超过 500 亿次，这标志着
    Google 在安卓仅 8 年的时间里取得的巨大里程碑。您可以在 [http://play.google.com](http://play.google.com)
    查看Google Play。
- en: Google Music, Google Movies & TV, Google Books, and Google Magazines are available
    in only limited countries.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Google 音乐、Google 电影与电视、Google 书籍和 Google 杂志仅在少数国家提供。
- en: '![](img/image_01_002.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_002.png)'
- en: Figure 1.2 Google Play on an Android device
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 安卓设备上的 Google Play
- en: Unity3D and game engines
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity3D 和游戏引擎
- en: A **game engine** is a software framework designed for the creation and development
    of video games. Many tools and frameworks are available for game designers and
    developers to code a game quickly and easily without building from the ground
    up. As time passed by, game engines have become more mature and easy for developers,
    with feature-rich environments. Starting from native code frameworks for Android
    such as Unity, Unreal, Cocos2D-x, LibGDX , and so on, the game engines started
    providing clean user interfaces and drag-drop functionalities to make game development
    easier for developers. These engines include lots of the tools which are different
    in user interface, features, porting, and many more things but all have one thing
    in common; that is they create video games at the end.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏引擎**是一个为视频游戏创建和开发而设计的软件框架。许多工具和框架可供游戏设计师和开发者使用，以便快速、轻松地编写游戏代码，而无需从头开始构建。随着时间的推移，游戏引擎变得更加成熟，对开发者来说更加容易使用，拥有功能丰富的环境。从Android的原生代码框架如Unity、Unreal、Cocos2D-x、LibGDX等开始，游戏引擎开始提供干净的用户界面和拖放功能，使游戏开发对开发者来说更加容易。这些引擎包括许多不同的工具，这些工具在用户界面、功能、移植等方面有所不同，但它们都有一个共同点；那就是它们最终都用于创建视频游戏。'
- en: 'We will discuss some of the most popular game engines in this section by comparing
    those on the basis of:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中通过比较以下方面来讨论一些最受欢迎的游戏引擎：
- en: User Interface and environment like how easy it is to learn and develop games.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面和环境，比如学习和发展游戏有多容易。
- en: Features and functionality like what game engine can achieve and do and on what
    level of quality.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特性和功能，比如游戏引擎能实现什么，能做什么，以及达到什么质量水平。
- en: Pricing like is it free or paid.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定价，比如是免费还是付费。
- en: Let's get into more details with this comparison.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨这个比较。
- en: Unreal Engine
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unreal Engine
- en: Unreal Engine ([http://www.unrealengine.com](http://www.unrealengine.com)) is
    a game engine developed by Epic Games. It was an in-house game engine of Epic
    Games and was first showcased in 1998 first person shooter game Unreal. Unreal
    Engine is mostly used for creating first-person or third-person shooter games
    but it has also shown quite good quality in other genres such as stealth, MMORPGs
    etc. Unreal Engine includes high degree of portability and easy interface features
    with more logic and behaviors written in C++ language.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine ([http://www.unrealengine.com](http://www.unrealengine.com)) 是由Epic
    Games开发的游戏引擎。它曾是Epic Games的内部游戏引擎，并于1998年在第一人称射击游戏Unreal中首次展示。Unreal Engine主要用于创建第一人称或第三人称射击游戏，但在其他类型如潜行、MMORPGs等方面也表现出相当高的质量。Unreal
    Engine具有高度的可移植性和易于使用的界面特性，其中大部分逻辑和行为是用C++语言编写的。
- en: The latest release called as Unreal Engine 4 supports almost all platforms supported
    by Unity including Windows, Xbox One, Windows RT, OS X, Linux, PlayStation 4,
    iOS, Android, Ouya, and browsers using WebGL.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最新发布的Unreal Engine 4支持Unity支持的所有平台，包括Windows、Xbox One、Windows RT、OS X、Linux、PlayStation
    4、iOS、Android、Ouya以及使用WebGL的浏览器。
- en: Unreal Engine 4 was released in March 2014 for the public use. Unreal Engine
    has nice user interface and navigation controls are very polished and easy to
    use. Unreal Engine provides very easy flow and interface to create first person
    shooter games and contains features to produce AAA quality game including real-time
    global illumination using voxel cone tracing, eliminating pre-computed lighting.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 4于2014年3月发布，供公众使用。Unreal Engine拥有良好的用户界面，导航控制非常精致且易于使用。Unreal
    Engine提供了非常容易的流程和界面来创建第一人称射击游戏，并包含产生AAA质量游戏的功能，包括使用体素锥体追踪进行实时全局照明，消除预计算照明。
- en: 'You can download the engine and use it for everything from game development,
    education, architecture, and visualization to VR, film and animation. When you
    ship a game or application, you pay a 5% royalty on gross revenue after the first
    $3,000 per product, per quarter Unreal Engine''s learning curve is a little high
    so it''s not best suited for new aspiring game developers:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以下载该引擎，并用于从游戏开发、教育、建筑和可视化到VR、电影和动画的各个方面。当您发布游戏或应用程序时，您需要在每个产品每个季度收入超过3,000美元后支付5%的版税。由于Unreal
    Engine的学习曲线略高，因此它并不最适合新晋的游戏开发者：
- en: '![](img/image_01_003.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_003.jpg)'
- en: Figure 1.3 Unreal Engine 4 Interface
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 Unreal Engine 4 界面
- en: Adobe Flash professional
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Adobe Flash professional
- en: Adobe Flash (formerly called as Macromedia Flash) ([http://www.adobe.com](http://www.adobe.com))
    is a multimedia and software platform used for creating vector graphics, animations,
    games, and rich internet applications (RIAs) that can be viewed, played, and executed
    in Adobe Flash Player. The Flash is widely used for creating animations and mostly
    advertisements for web browsers but its use of creating games is declined very
    heavily in recent years by HTML5 framework.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Adobe Flash（以前称为 Macromedia Flash）([http://www.adobe.com](http://www.adobe.com))
    是一个用于创建矢量图形、动画、游戏和富互联网应用（RIAs）的多媒体和软件平台，这些应用可以在 Adobe Flash Player 中查看、播放和执行。Flash
    广泛用于创建动画和网页浏览器中的广告，但近年来，由于 HTML5 框架的使用，其创建游戏的应用大幅减少。
- en: There was a time when Adobe Flash was most popular game engine for online browser
    games and made a quite big wave of independent game developers creating games
    for online portals such as Kongregate and Miniclip.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有一段时间，Adobe Flash 是最受欢迎的在线浏览器游戏引擎，并引发了一波独立游戏开发者为在线门户（如 Kongregate 和 Miniclip）制作游戏的浪潮。
- en: The Adobe Flash includes very easy interface to create amazing and robust animations
    allowing artists to create vector art directly in the editor. It also supports
    Adobe Illustrator and Adobe Photoshop layers as well to make it easy integrated
    with vector art and animations. Adobe Flash allowed developers to port their games
    and animations from browsers to Desktops (Mac and Windows), Android, and iOS using
    Adobe AIR framework but couldn't grasp the much attention of game developers and
    artists due to low performance on end devices.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Adobe Flash 包含非常易于使用的界面，可以创建令人惊叹且强大的动画，允许艺术家在编辑器中直接创建矢量艺术。它还支持 Adobe Illustrator
    和 Adobe Photoshop 层，以便轻松集成矢量艺术和动画。Adobe Flash 允许开发者使用 Adobe AIR 框架将他们的游戏和动画从浏览器移植到桌面（Mac
    和 Windows）、Android 和 iOS，但由于在终端设备上的性能较低，因此无法吸引到游戏开发者和艺术家的广泛关注。
- en: Adobe Flash has a Free 30-day trial but once the trial is finished you must
    buy a license unlike other engines discussed in this section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Adobe Flash 提供了 30 天的免费试用，但一旦试用结束，你必须购买许可证，这与本节中讨论的其他引擎不同。
- en: '![](img/image_01_004.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_004.png)'
- en: Figure 1.4 Adobe Flash CC Interface
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 Adobe Flash CC 界面
- en: Game Maker Studio
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏制作工作室
- en: Game Maker Studio (originally names Animo and later Game Maker) is an event-driven
    game creation system created by Mark Overmars in Delphi programming language in
    1999\. Originally created for 2D animations, it quickly moved up high on to being
    a very robust and easy-to-use drag-drop tool for creating 2D games.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏制作工作室（最初命名为 Animo，后来更名为 Game Maker）是由 Mark Overmars 在 1999 年使用 Delphi 编程语言创建的一个事件驱动游戏创作系统。最初是为
    2D 动画而创建的，它很快成为了一个非常强大且易于使用的拖放工具，用于创建 2D 游戏。
- en: Game Maker Studio uses pre-defined events to create actions in the game, which
    makes it very easy for developers to create games without needing prior knowledge
    of programming and coding stuff. The tool comes with a sandboxed language called
    **Game Maker Language** (**GML**), which allows developers to define custom and
    more complex behaviors for their games.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏制作工作室使用预定义的事件来创建游戏中的动作，这使得开发者可以非常容易地创建游戏，而无需具备编程和编码知识。该工具包含一个名为 **Game Maker
    语言**（**GML**）的沙盒语言，允许开发者为其游戏定义自定义和更复杂的操作。
- en: The Game Maker Studio comes with a clean and slick user interface that lets
    developers build and deploy their games on Windows, macOS X, Ubuntu, HTML5, Android,
    iOS, Windows Phone 8, and Tizen. The latest version also introduced Xbox One and
    PlayStation deployment.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏制作工作室提供了一个干净且流畅的用户界面，让开发者可以在 Windows、macOS X、Ubuntu、HTML5、Android、iOS、Windows
    Phone 8 和 Tizen 上构建和部署他们的游戏。最新版本还引入了 Xbox One 和 PlayStation 部署。
- en: Tizen is the open source operating system (OS) of everything, including mobiles,
    wearables, in-vehicle infotainment, and TV.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen 是一个开源操作系统（OS），适用于所有设备，包括手机、可穿戴设备、车载娱乐系统和电视。
- en: '![](img/image_01_005.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_005.png)'
- en: Figure 1.5 Game Maker Studio Interface
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 游戏制作工作室界面
- en: Unity3D
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity3D
- en: Unity ([http://unity3d.com](http://unity3d.com)) is cross-platform game engine
    developed by Unity Technologies. It made its first public announcement at Apple's
    Worldwide Developers Conference in 2005 and supported only game development for
    Mac OS, but since then it has been extended to target more than 15 platforms for
    desktop, mobile, and consoles. It is notable for its one-click ability to port
    games on multiple platforms, including BlackBerry 10, Windows Phone 10, Windows
    10, OS X, Linux, Android, iOS, Unity Web Player (including Facebook), Adobe Flash,
    PlayStation 3, PlayStation 4, PlayStation Vita, Xbox 360, Xbox One, Wii U, and
    Wii.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Unity（[http://unity3d.com](http://unity3d.com)）是由Unity Technologies开发的跨平台游戏引擎。它在2005年苹果全球开发者大会上首次公开宣布，最初仅支持Mac
    OS的游戏开发，但自那时起已扩展到支持超过15个平台，包括桌面、移动和游戏机。它因其一键式跨多个平台（包括BlackBerry 10、Windows Phone
    10、Windows 10、OS X、Linux、Android、iOS、Unity Web Player（包括Facebook）、Adobe Flash、PlayStation
    3、PlayStation 4、PlayStation Vita、Xbox 360、Xbox One、Wii U和Wii）移植游戏的能力而闻名。
- en: Unity has a fantastic interface that lets the developers manage the project
    really efficiently from the get-go. It has nice drag-drop functionality with connecting
    behavior scripts written in C# and Boo (a dialect of JavaScript) to define the
    custom logic and functionality with visual objects quite easily. Unity has been
    proven quite easy to learn for the new developers who are just starting out with
    game development and now more large studios have also started it using, and that
    is also for good reasons.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Unity拥有一个出色的界面，让开发者从一开始就能非常高效地管理项目。它具有不错的拖放功能，以及用C#和Boo（JavaScript的一种方言）编写的连接行为脚本，可以轻松地用视觉对象定义自定义逻辑和功能。Unity已被证明对新开始游戏开发的开发者来说非常容易学习，现在越来越多的大型工作室也开始使用它，这也是有充分理由的。
- en: Unity is one of those engines that provides support for both 2D and 3D games
    without putting developers in trouble and confusion. It has vast collection of
    online tutorials, great documentation, and a very helpful community of developers.
    Also, Unity has the Asset Store, where developers sell reusable components of
    Unity to reduce the development time and efforts for other developers. You can
    check Unity Asset Store at [http://assetstore.unity3d.com](http://assetstore.unity3d.com).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Unity是那些为2D和3D游戏提供支持而不让开发者感到麻烦和困惑的引擎之一。它拥有大量的在线教程、优秀的文档和一个非常有帮助的开发者社区。此外，Unity还有资产商店，开发者可以在其中出售Unity的可重用组件，以减少其他开发者的开发时间和努力。您可以在[http://assetstore.unity3d.com](http://assetstore.unity3d.com)检查Unity资产商店。
- en: 'Unity Plus and Pro are available for a fee, and Unity Personal has no fee;
    it is available any use to individuals or companies with less than US $100,000
    of annual gross revenue. For more information, visit the Unity store at [https://store.unity.com/](https://store.unity.com/):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Plus和Pro需要付费，而Unity Personal免费；它适用于年收入低于10万美元的个人或公司。更多信息，请访问Unity商店[https://store.unity.com/](https://store.unity.com/)：
- en: '![](img/image_01_006.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_006.png)'
- en: Figure 1.6 Unity3D Engine Interface
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 Unity3D引擎界面
- en: Features of Unity3D
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity3D的特点
- en: 'Unity is a game development ecosystem of powerful rendering engine, intuitive
    tools, rapid workflows for 2D and 3D games, all-in-one deployment support, and
    thousands of already created free and paid assets with a helpful developers community.
    The feature list includes the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Unity是一个强大的渲染引擎、直观的工具、2D和3D游戏快速工作流程、一站式部署支持以及数千个免费和付费资产的游戏开发生态系统。其功能列表包括以下内容：
- en: Easy workflow, allowing developers to rapidly assemble scenes in an intuitive
    editor workspace
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简便的工作流程，允许开发者在一个直观的编辑器工作空间中快速组装场景
- en: Quality game creation, such as AAA visuals, high-definition audio, and full-throttle
    action, without any glitches on screen
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量上乘的游戏制作，例如AAA级视觉效果、高清音频和全速动作，屏幕上无任何故障
- en: Dedicated tools for both 2D and 3D game creation with shared conventions to
    make it easy for developers
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专为2D和3D游戏制作提供专用工具，并采用共享约定，使开发者易于使用
- en: A very unique and flexible animation system to create natural animations in
    very less time
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个非常独特且灵活的动画系统，可以在极短的时间内创建自然动画
- en: Smooth frame rate with reliable performance on all the platforms developers
    publish their games
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有开发者发布游戏的平台上，实现流畅的帧率和可靠的性能
- en: One-click ability to deploy to all platforms from desktops to browsers to mobiles
    to consoles, within minutes
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一键式部署到所有平台，从桌面到浏览器到移动设备再到游戏机，只需几分钟
- en: Reduce the time of development by using already created reusable assets available
    on the huge Asset Store
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用在庞大的资源库中可用的已创建的可重用资产，可以缩短开发时间
- en: In summary, compared to other game engines Unity is developer-friendly, easy
    to use, free for independent developers, and feature-rich game engine. In next
    section, we will see some amazing features of Unity3D.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，与其他游戏引擎相比，Unity对开发者友好，易于使用，对独立开发者免费，并且功能丰富的游戏引擎。在下一节中，我们将看到Unity3D的一些令人惊叹的功能。
- en: Basics of Unity game development
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity游戏开发基础
- en: Before delving into the details of Unity3D and game development concepts, let's
    have a look at some of the basics of Unity 5.6 We will go through the unity interface,
    menu items, using assets, creating scenes, and publishing builds.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究Unity3D和游戏开发概念之前，让我们先看看Unity 5.6的一些基础知识。我们将了解Unity界面、菜单项、使用资产、创建场景和发布构建。
- en: This section is required for all new developers who have very little or no knowledge
    of Unity and want to learn basics of game development using Unity. If you are
    already familiar with Unity basics, you can skip this section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本节是所有对Unity几乎一无所知或完全没有知识的新开发者必须阅读的，他们希望通过Unity学习游戏开发的基础知识。如果你已经熟悉Unity的基础知识，你可以跳过这一节。
- en: Unity editor interface
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity编辑器界面
- en: 'When you first time launch Unity 5.6, you will be presented with an editor
    containing a few panels on left, right, and bottom of the screen. There''s nothing
    to worry from these panels. The following image shows the editor interface when
    it''s first launched:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次启动Unity 5.6时，你将看到一个包含屏幕左侧、右侧和底部的几个面板的编辑器。这些面板无需担心。以下图片显示了首次启动时的编辑器界面：
- en: '![](img/image_01_007.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片 1.7 Unity 5首次启动时的编辑器界面](img/image_01_007.png)'
- en: Figure 1.7 Unity 5 Editor Interface at first launch
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 Unity 5首次启动时的编辑器界面
- en: 'First of all, take the time to look over the editor and become a little familiar
    with it. The Unity editor is divided into different small panels and views that can
    be dragged around, resulting in a workspace that can be customized, according
    to the developer/designer''s needs. Unity 5 comes with some pre-built workspace
    layout templates that can be selected from **Layout** drop-down menu in the top-right
    corner of the screen, as shown the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，花点时间熟悉编辑器，并对其有一个基本的了解。Unity编辑器被划分为不同的小型面板和视图，可以拖动它们，从而根据开发者/设计师的需求定制工作区。Unity
    5提供了一些预构建的工作区布局模板，可以从屏幕右上角的**布局**下拉菜单中选择，如下截图所示：
- en: '![](img/image_01_008.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片 1.8 Unity 5编辑器布局](img/image_01_008.png)'
- en: Figure 1.8 Unity 5 editor layouts
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 Unity 5编辑器布局
- en: The layout currently displayed in the editor is the Default layout. You can
    select these layouts and see how the editor's interface changes and how different
    panels are placed in different positions in each layout. This book uses the 2
    by 3 workspace layout for the game.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当前编辑器中显示的布局是默认布局。你可以选择这些布局，看看编辑器界面如何变化，以及不同的面板如何在每个布局中放置在不同的位置。本书使用2x3工作区布局进行游戏开发。
- en: 'The following screenshot shows the 2 by 3 workspace with the names of the views
    and panels highlighted:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有视图和面板名称高亮的2x3工作区：
- en: '![](img/image_01_009.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片 1.9 Unity 5 2x3布局与视图和面板名称](img/image_01_009.png)'
- en: Figure 1.9 Unity 5 2 by 3 layout with views and panel names
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 Unity 5 2x3布局与视图和面板名称
- en: As you can see in the preceding screenshot, Unity editor contains different
    views and panels. Every panel and view has a specific purpose, which is described
    in the following section.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，Unity编辑器包含不同的视图和面板。每个面板和视图都有特定的用途，将在以下部分进行描述。
- en: Scene View
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景视图
- en: Scene View is the whole stage for the game development, and it contains every
    asset in the game from a tiny point to any heavy 3D model. Scene View is used
    to select and position environments, characters, enemies, the player, camera,
    and all other objects that can be placed on the stage for the game. All those
    objects, which can be placed and shown in the game, are called as **GameObjects**.
    The scene view allows developers to manipulate game objects such as selecting,
    scaling, rotating, deleting, and moving. In simple words, Scene View is the interactive
    sandbox for the developers and designers. The Scene View provides some controls,
    such as navigation and transformation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 场景视图是游戏开发的整个舞台，它包含了从微小的点到任何重型3D模型的游戏中所有资产。场景视图用于选择和定位环境、角色、敌人、玩家、摄像机以及所有可以放置在舞台上的其他对象。所有可以放置并在游戏中显示的对象统称为**GameObject**。场景视图允许开发者操纵游戏对象，例如选择、缩放、旋转、删除和移动。简单来说，场景视图是开发者和设计师的交互式沙盒。场景视图提供了一些控制，例如导航和变换。
- en: Transform tools
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换工具
- en: 'While developing games in Unity, you will place lots of game objects in the
    scene and their position, scale, and rotations, collectively called as transforms,
    are managed by transform tools. The following screenshot shows the transform tools:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中开发游戏时，您将在场景中放置许多游戏对象，它们的定位、缩放和旋转，统称为变换，由变换工具管理。以下截图显示了变换工具：
- en: '![](img/image_01_010.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_010.png)'
- en: Figure 1.10 Transform Tools
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 变换工具
- en: 'You can select any selected transform action from this toolbar and change the
    game object accordingly. The following figure shows the gizmo on the selected
    game object when a transform tool is selected:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从这个工具栏中选择任何选定的变换操作，并相应地更改游戏对象。以下图显示了在选择了变换工具时所选游戏对象上的Gizmo：
- en: '![](img/image_01_011.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_011.png)'
- en: Figure 1.11 Gizmos on game objects of transform Tools
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 变换工具的游戏对象上的Gizmos
- en: These tools do exactly the same job as their names suggest; move for translation,
    rotate for rotation, and scale for scaling. The Rect tool on other side was introduced
    in Unity 4.3 when Unity got native 2D support and tools. This tool is only for
    2D sprite objects for their position, scale, and rotations. You can also select
    these tools with keyboard shortcuts.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具确实像它们的名称所暗示的那样执行相同的任务；移动用于平移，旋转用于旋转，缩放用于缩放。另一方面，矩形工具是在Unity 4.3中引入的，当时Unity获得了本地的2D支持和工具。这个工具仅用于2D精灵对象的位置、缩放和旋转。您也可以使用键盘快捷键选择这些工具。
- en: Scene View navigation
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景视图导航
- en: 'In the last section, we discussed how GameObjects can be transformed and navigated
    in the scene. But Unity being a 3D environment, it has an easy interface to view
    the scene from different angles, sides, and perspectives using mouse and keyboard
    shortcuts. You can observe the Scene Gizmo in the top-right corner of the Scene
    view. This gizmo is used to rotate the view according to the developer''s needs.
    The following screenshot shows the gizmo of the scene:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了GameObject如何在场景中进行变换和导航。但Unity作为一个3D环境，它提供了一个简单的界面，使用鼠标和键盘快捷键从不同的角度、侧面和视角查看场景。您可以在场景视图的右上角观察到场景Gizmo。这个Gizmo用于根据开发者的需求旋转视图。以下截图显示了场景的Gizmo：
- en: '![](img/image_01_012.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_012.png)'
- en: Figure 1.12 Scene Gizmo for Scene View Navigation
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12 场景视图导航的Scene Gizmo
- en: Every view of the scene is shown in either perspective or isometric. There is
    also another view for the scene which we will discuss in the next section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 场景的每个视图都是以透视或等距的形式显示的。在下一节中，我们还将讨论场景的另一种视图。
- en: Scene View control bar
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景视图控制栏
- en: 'The control bar is shown at the top of the Scene View and it gives the developer
    more control to navigate through their scenes and create games easily. This bar
    includes options such as enabling/disabling gizmos, sounds, and selecting view
    modes. The important part of this bar is the 2D mode button, as shown in the following
    screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 控制栏位于场景视图的顶部，它为开发者提供了更多的控制，以便轻松导航场景和创建游戏。此栏包括启用/禁用Gizmos、声音和选择视图模式等选项。此栏的重要部分是2D模式按钮，如下面的截图所示：
- en: '![](img/image_01_013.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_013.png)'
- en: Figure 1.13 control bar of Scene View
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13 场景视图控制栏
- en: The 2D mode button is a toggle button; when turned on; it disables the z-axis
    of the view and show the game from 2D perspective. It is highly used option while
    creating 2D games in Unity. On the right side of the bar, there is a text box
    for search. This lets developers search the game objects from the current scene
    and allows them to quickly work.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 2D模式按钮是一个切换按钮；当开启时，它会禁用视图的z轴，并从2D视角显示游戏。在Unity中创建2D游戏时，这是一个高度使用的选项。在栏的右侧有一个用于搜索的文本框。这允许开发者从当前场景中搜索游戏对象，并使他们能够快速工作。
- en: Game View
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏视图
- en: 'The Game View is the final representation of how your game will look when published
    and deployed on the target devices, and it is rendered from the cameras of the
    scene. This view is connected to the Play Mode navigation bar at the top of the
    whole Unity workspace, as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏视图是游戏在发布和部署到目标设备时的最终表现形式，它是从场景的相机渲染的。此视图与整个Unity工作区顶部的“播放模式”导航栏相连，如下截图所示：
- en: '![](img/image_01_014.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_014.png)'
- en: Figure 1.14 Play mode bar
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14 播放模式栏
- en: When the game is played in the editor, this control bar gets changed into blue.
    A very interesting feature of Unity is that it allows developers to pause the
    game and code while running and developers can see and change the properties,
    transforms etc at runtime without recompiling whole game for quick workflow.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当在编辑器中玩游戏时，这个控制栏会变成蓝色。Unity的一个非常有趣的功能是它允许开发者暂停正在运行的游戏和代码，开发者可以在运行时查看和更改属性、变换等，而无需重新编译整个游戏，以便快速工作流程。
- en: Game View control bar
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏视图控制栏
- en: 'Like scene view, game view also includes a control bar on top side of the view
    as shown in the following figure:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与场景视图一样，游戏视图也在视图的顶部包括一个控制栏，如下图所示：
- en: '![](img/image_01_015.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_015.png)'
- en: Figure 1.15 Game View Control Bar
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15 游戏视图控制栏
- en: The options perform the actions as their names suggest. The Free Aspect drop-down
    on the left side of the bar lets developers choose any specific resolution to
    test their games. These resolutions and drop down options vary on the selected
    platform. Developers can also add their own custom resolutions and screen sizes
    for their targeted devices. Unity also allows developers to specify aspect ratios
    as well to have an idea of how the game will run on various devices with the same
    aspect ratio. Unity is quite powerful and easily gives cross-platform support
    to make their games run better on most types of devices writing code only once.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 选项执行的动作正如其名称所暗示的那样。控制栏左侧的“自由纵横比”下拉菜单允许开发者选择任何特定的分辨率来测试他们的游戏。这些分辨率和下拉选项取决于所选平台。开发者还可以为他们的目标设备添加自定义分辨率和屏幕尺寸。Unity还允许开发者指定纵横比，以便了解游戏将在具有相同纵横比的各种设备上如何运行。Unity功能强大，可以轻松提供跨平台支持，使得开发者只需编写一次代码就能让他们的游戏在大多数类型的设备上运行得更好。
- en: Hierarchy View
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 层级视图
- en: 'The Hierarchy View is the first point to select or handle any GameObject in
    the scene. This contains every game object in the current scene. This is tree-type
    structure allowing developers to utilize parent and child concepts on the game
    objects easily. The following screenshot shows a simple Hierarchy View:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 层级视图是选择或处理场景中任何GameObject的第一个点。这包含当前场景中的所有游戏对象。这是一个树形结构，允许开发者轻松地在游戏对象上利用父级和子级概念。以下截图显示了一个简单的层级视图：
- en: '![](img/image_01_016.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_016.png)'
- en: Figure 1.16 Hierarchy View
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.16 层级视图
- en: Project browser panel
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目浏览器面板
- en: This looks like a view, but it is called the Project browser panel. This panel
    is an embedded files directory in Unity and contains all the files and folders
    included in the game project.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是一个视图，但它被称为项目浏览器面板。这个面板是Unity中的一个嵌入式文件目录，包含游戏项目中包含的所有文件和文件夹。
- en: 'Following screenshot shows a simple Project browser panel:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了一个简单的项目浏览器面板：
- en: '![](img/image_01_017.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_017.png)'
- en: Figure 1.17 Project browser panel
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.17 项目浏览器面板
- en: The left side of the panel shows a hierarchical directory, while rest of the
    panel is the files or as these are called assets in Unity. Unity represents these
    files with different icons to differentiate these according to their file types.
    These files can be sprite images, textures, model files, sounds and so on. You
    can search any specific file by typing in the search text box. On the right side
    of search box, there are button controls for further filters such as animation
    files, audio clip files, and so on.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 面板左侧显示了一个层次目录，而面板的其余部分则是文件，或者如Unity中所称，这些被称为资源。Unity使用不同的图标来区分这些文件类型。这些文件可以是精灵图像、纹理、模型文件、声音等等。您可以通过在搜索文本框中输入来搜索任何特定文件。在搜索框的右侧，有一些按钮控件，用于进一步筛选，例如动画文件、音频剪辑文件等。
- en: An interesting thing about Project browser panel is that if any file is not
    available in the assets, then Unity starts looking for it on Unity Asset Store
    and presents you with available free and paid assets.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 项目浏览器面板的一个有趣之处在于，如果资源中不存在任何文件，Unity会开始在Unity Asset Store中寻找它，并向您展示可用的免费和付费资源。
- en: Inspector panel
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查器面板
- en: This is a most important panel for development in Unity. Unity structures the game
    in the form of game objects and assets. These game objects further contain components
    such as transforms, colliders, scripts, and meshes, and so on. Unity lets developers
    manage these components of each game object through the inspector panel.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Unity开发中最重要的面板。Unity以游戏对象和资源的形式构建游戏。这些游戏对象进一步包含变换、碰撞体、脚本和网格等组件。Unity允许开发者通过检查器面板管理每个游戏对象的这些组件。
- en: 'The following screenshot shows a simple inspector panel of a game object:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个游戏对象的简单检查器面板：
- en: '![](img/image_01_018.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_018.png)'
- en: Figure 1.18 Inspector Panel
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18 检查器面板
- en: 'These components vary in type including physics, mesh, effects, audio, and
    user interface. These components can be added to any object by selecting it from
    the component menu. The following screenshot shows the Component menu:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件的类型各不相同，包括物理、网格、效果、音频和用户界面。这些组件可以通过从组件菜单中选择来添加到任何对象。以下截图显示了组件菜单：
- en: '![](img/image_01_019.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_019.png)'
- en: Figure 1.19 Components Menu
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.19 组件菜单
- en: After covering some of the basics of the Unity, let's move on to the very first
    task developers do when creating a game; and that is creating an empty project.
    Let's discuss the configuration of empty projects in Unity for 2D games in the
    next section.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了Unity的一些基础知识之后，让我们继续进行开发者创建游戏时做的第一个任务；那就是创建一个空项目。接下来的一节中，我们将讨论Unity中空项目的配置。
- en: Configuration of empty game projects
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空游戏项目的配置
- en: When you start a new game, the first step is to configure an empty game project.
    For 2D games, creating empty games and setting up the initial environment and
    camera management can sometimes become a painful process. In this section, we
    will discuss on how to configure empty game projects for 2D games.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始一个新的游戏时，第一步是配置一个空游戏项目。对于2D游戏，创建空游戏并设置初始环境和相机管理有时可能是一个痛苦的过程。在本节中，我们将讨论如何为2D游戏配置空游戏项目。
- en: If you have already worked on 2D games in Unity, then you can skip this section
    and use the starter project of Perky Penguin from the code in the next section.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在Unity中制作过2D游戏，那么您可以跳过这一节，并使用下一节代码中的Perky Penguin的起始项目。
- en: 'When you launch Unity 5.6, it shows a project wizard as shown in the following
    figure:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动Unity 5.6时，它会显示一个项目向导，如下所示：
- en: '![](img/fing_1.2.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fing_1.2.png)'
- en: Figure 1.20  Project Creation Wizard
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.20 项目创建向导
- en: Unity has a nice and smooth user interface in its latest release, Unity 5.6\.
    The project wizard shows a list of all the recent projects, along with their names.
    The most recent project is highlighted for quick opening. In the top-right side
    of the wizard, there are controls to create a new project from scratch and open
    any specific project from any directory. To guide new developers through basic
    concepts, the Get started tab offers a basic video tutorial.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Unity在其最新版本Unity 5.6中拥有一个良好且流畅的用户界面。项目向导显示了所有最近的项目列表，包括它们的名称。最近的项目被突出显示，以便快速打开。在向导的右上角，有一些控件，用于从头创建新项目以及从任何目录打开任何特定项目。为了指导新开发者了解基本概念，"开始"选项卡提供了一个基本的视频教程。
- en: 'Let''s create new project by clicking on the New project button on top-right,
    and you will be presented with the following dialog box:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 点击右上角的“新建项目”按钮，创建新项目，您将看到一个如下对话框：
- en: '![](img/fing_1.21.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fing_1.21.png)'
- en: Figure 1.21 Project creation wizard
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.21 项目创建向导
- en: 'There are two text inputs, Project name and Location. Their names are self-explanatory.
    You will also notice 3D and 2D in the wizard, as shown in following figure:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个文本输入框，项目名称和位置。它们的名称是自解释的。您也会在向导中注意到3D和2D，如下面的图所示：
- en: '![](img/fing_1.22.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fing_1.22.png)'
- en: Figure 1.22 Project type selection toggle
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.22 项目类型选择切换
- en: This toggle lets you tell Unity whether your project is 2D or 3D. Although this
    doesn't affect the project in any way while working on it, this affects default
    project setting for easier workflow. For example, in 3D mode, when you import
    any image asset into project, Unity will take it as a texture and in 2D mode,
    Unity will take it as a Sprite type. You can also change the mode later from the
    project anytime, it is not necessary to select at project creation time. By default,
    Unity will create project in 3D mode.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此切换允许您告诉Unity您的项目是2D还是3D。虽然这不会在您工作期间以任何方式影响项目，但它会影响默认项目设置，以便更容易地工作流程。例如，在3D模式下，当您将任何图像资产导入项目时，Unity将其视为纹理；而在2D模式下，Unity将其视为Sprite类型。您也可以在项目创建后随时更改模式，不需要在项目创建时选择。默认情况下，Unity将在3D模式下创建项目。
- en: 'Along with 2D/3D mode, you will also notice the Asset packages... button at
    bottom on the project creation wizard. One of the best features of the Unity is
    the Assets support. Unity lets developers to create, distribute, and sell reusable
    plugins and add-ons called Unity Assets through Unity Asset Store available at
    [http://assetstore.unity3d.com](http://assetstore.unity3d.com). Unity comes with
    a big collection of free assets to help you get some things done within the minutes.
    This button lets you choose which assets to import in the new project, shown as
    following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 除了2D/3D模式外，您还会在项目创建向导的底部注意到“资产包...”按钮。Unity的最好特性之一是资产支持。Unity允许开发者通过Unity Asset
    Store创建、分发和销售可重用的插件和附加组件，这些插件和附加组件被称为Unity Assets，Unity Asset Store可在[http://assetstore.unity3d.com](http://assetstore.unity3d.com)找到。Unity附带大量免费资产，帮助您在几分钟内完成一些事情。此按钮允许您选择要导入新项目的哪些资产，如下所示：
- en: '![](img/image_01_023.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_023.png)'
- en: Figure 1.23 Asset Packages Dialogue
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.23 资产包对话框
- en: You can select any package or multiple packages, and the new project will be
    created with those that have been already imported in it. For now, you don't need
    to import any packages. You can also import these later as you need it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择任何包或多个包，新项目将包含已导入的这些包。目前，您不需要导入任何包。您也可以在需要时再导入这些包。
- en: So, for the project creation wizard, we have named our project Perky Penguin
    and we have selected 2D mode. Click on the Create project button, and you will
    see the Unity interface with an empty scene and project.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于项目创建向导，我们已将我们的项目命名为“Perky Penguin”，并选择了2D模式。点击“创建项目”按钮，您将看到Unity界面，其中包含一个空场景和项目。
- en: 'The first step to follow is to make sure that you are in 2D or 3D mode. If
    you have selected 2D mode, then you will see 2D toggle active on the control bar
    in the Scene View, as shown in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 首步是确保您处于2D或3D模式。如果您选择了2D模式，那么您将在场景视图的控制栏上看到2D切换处于激活状态，如下面的截图所示：
- en: '![](img/image_01_024.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_024.png)'
- en: Figure 1.24 Control bar in Scene View
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.24 场景视图中的控制栏
- en: 'Also, you need to check in Editor Settings to make sure that the project is
    in 2D mode. You can do it by going to Editor Settings by selecting Editor option
    from Project Settings in the Edit menu as shown in the following figure:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还需要检查编辑器设置，以确保项目处于2D模式。您可以通过从编辑菜单中选择项目设置中的“编辑器”选项来进入编辑器设置，如下面的图所示：
- en: '![](img/image_01_025.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_025.png)'
- en: Figure 1.25 Editor Settings Menu
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.25 编辑器设置菜单
- en: 'On selecting the Editor option, you will see settings in the Inspector panel.
    Make sure that Mode in Default Behavior Mode is set to 2D, as shown in the following
    screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“编辑器”选项后，您将在检查器面板中看到设置。请确保默认行为模式中的模式设置为2D，如下面的截图所示：
- en: '![](img/image_01_026.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_026.png)'
- en: Figure 1.26 Editor Settings in Inspector Panel
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.26 检查器面板中的编辑器设置
- en: You can also change it to 3D if you want Unity to interpret images as textures
    and enable other 3D settings by default. The last thing to make sure that the
    scene is in 2D mode, you need to check the camera properties. You may have already
    have noticed a Camera game object placed in the empty scene when creating a new
    project.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让Unity将图像解释为纹理并默认启用其他3D设置，你也可以将其更改为3D模式。最后，确保场景处于2D模式，你需要检查相机属性。你可能已经注意到了，在创建新项目时，在空场景中放置了一个相机游戏对象。
- en: 'Select the Camera object and you will see its properties in inspector panel
    as shown in the following screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 选择相机对象，你将在检查器面板中看到其属性，如下面的截图所示：
- en: '![](img/image_01_027.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_027.png)'
- en: Figure 1.27 Main Camera Settings
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.27 主相机设置
- en: You will notice that its Position will be set at (0, 0, -10) and its Projection
    setting will be as Orthographic.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到它的位置将被设置为（0，0，-10），其投影设置将作为正交。
- en: It is a good practice to use orthographic projection mode for 2D in unity.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，使用正交投影模式进行2D操作是一种良好的实践。
- en: Orthographic projection is a means of representing 3D objects in 2D. Orthographic
    views are commonly used in engineering as a means of producing object specifications
    that communicate dimensions unambiguously. For example, if you are looking at
    a larger scene with buildings then orthographic rendering gives a clear measure
    of distance between buildings and their relative sizes.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 正交投影是将3D对象表示为2D的一种方法。正交视图在工程中常用作产生明确传达尺寸的对象规范的手段。例如，如果你正在查看一个包含建筑的较大场景，那么正交渲染可以清楚地测量建筑之间的距离及其相对大小。
- en: 'So, after making sure that the project is in 2D mode, let''s save the scene.
    Unity project comes with a root directory of Assets, where all the assets used
    in project are placed. These assets can be scenes, scripts, textures, sprites,
    models, prefabs, or materials. There is no traditional or standard method of managing
    assets in Unity, and every developer has different methods. In this book, we will
    follow a simple method of managing assets. Our method of managing assets is to
    create different folders in the `Assets` directory for each type of resources.
    The following figure shows the directory structure in the `Assets` folder:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在确认项目处于2D模式后，让我们保存场景。Unity项目包含一个根目录为Assets，其中放置了项目中使用的所有资源。这些资源可以是场景、脚本、纹理、精灵、模型、预制件或材质。在Unity中没有传统或标准的方法来管理资源，每个开发者都有不同的方法。在这本书中，我们将遵循一种简单的资源管理方法。我们管理资源的方法是在`Assets`目录中为每种资源类型创建不同的文件夹。以下图显示了`Assets`文件夹中的目录结构：
- en: '![](img/image_01_028.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_028.png)'
- en: Figure 1.28 The Assets directory in Unity
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.28 Unity中的资源目录
- en: After creating folders in Assets, let's save the empty scene with the configured
    camera in the Scenes directory with the name `PerkyPenguin_GameplayScene.unity`.
    Scene files have the `.unity` extension, and these files contain different game
    objects for camera, player, enemies, obstacles, environment, controls, and so
    on. Scenes are like different levels in the game. Any game can have one or more
    than one scenes and it is not necessary to create different scenes for each level.
    It is very important to note that all the scenes in the game should be added in
    Build settings in order to deploy them in the final package. We will discuss about
    deployment in more detail in the later chapters.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在Assets中创建文件夹后，让我们将配置好的相机保存为名为`PerkyPenguin_GameplayScene.unity`的空场景到Scenes目录中。场景文件具有`.unity`扩展名，这些文件包含用于相机、玩家、敌人、障碍物、环境、控制等的不同游戏对象。场景就像游戏中的不同关卡。任何游戏都可以有一个或多个场景，并且没有必要为每个关卡创建不同的场景。非常重要的一点是，游戏中所有的场景都应该添加到构建设置中，以便在最终包中部署。我们将在后面的章节中更详细地讨论部署问题。
- en: 'After saving the scene, we have only one thing left to fully configure an empty
    game project. That is configuring the game view so we can test our game. As this
    book is about Android game development, we have to set our project targeted to
    Android devices. Initially, the default target platform will be set to PC, iMac,
    and Linux standalone. You can see it in the Build Settings from the File menu
    as shown in the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 保存场景后，我们只剩下最后一件事要完全配置一个空的游戏项目。那就是配置游戏视图，以便我们可以测试我们的游戏。由于这本书是关于Android游戏开发的，我们必须将我们的项目目标设置为Android设备。最初，默认的目标平台将被设置为PC、iMac和Linux独立。你可以在文件菜单中的构建设置中看到它，如下面的截图所示：
- en: '![](img/image_01_029.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_029.png)'
- en: Figure 1.29 Assets Directory in Unity
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.29 Unity中的资源目录
- en: 'You will be presented with a dialog containing all the possible platforms to
    build game to and all the scenes included in the game, as shown in the following
    screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个包含所有可能的构建游戏平台和游戏中的所有场景的对话框，如图所示：
- en: '![](img/image_01_030.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_030.png)'
- en: Figure 1.30 Build Settings
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.30 构建设置
- en: 'Select Android from the Platform list, and click on Switch Platform button
    and the project will be changed for Android devices. You might not notice anything
    after changing the target platform to Android but an easy way to check it is to
    see the resolutions list in the game view. You can do it by clicking on Free Aspect
    from the control bar in Game View as shown in the following figure:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 从平台列表中选择安卓，然后点击切换平台按钮，项目将更改为安卓设备。在更改目标平台为安卓后，您可能不会注意到任何变化，但一个简单的方法是查看游戏视图中的分辨率列表。您可以通过在游戏视图的控制栏中点击自由宽高比来实现，如图所示：
- en: '![](img/image_01_031.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_031.png)'
- en: Figure 1.31 Resolution List of Android Platform
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.31 安卓平台分辨率列表
- en: In order to create a game, that runs on all Android devices, we have to select
    a primary target size for viewport implementation. We have chosen 1280x800 as
    our target device in landscape mode. We will discuss the cross-resolution approach
    in details in the later chapters.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个能在所有安卓设备上运行的游戏，我们必须为视口实现选择一个主要的目标尺寸。我们选择了1280x800作为我们的目标设备在横屏模式下的尺寸。我们将在后面的章节中详细讨论跨分辨率的方法。
- en: 'You can also add your own custom resolutions by selecting the small plus button
    in resolution list. It will show you a dialog to put the size of resolution either
    in pixels or as an aspect ratio with its name. The window is shown in the following
    figure:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过在分辨率列表中选择小加号按钮来添加自己的自定义分辨率。它将显示一个对话框，让您输入分辨率的尺寸，可以是像素或以名称表示的宽高比。窗口如图所示：
- en: '![](img/image_01_032.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_032.png)'
- en: Figure 1.32 Add Custom Resolution in Game View
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.32 在游戏视图中添加自定义分辨率
- en: 'Finally, after setting the project in 2D mode and changing the platform to
    Android with our required resolution, we have only one little job remaining that
    is to configure camera according to our target resolution. Select the Main Camera
    from Hierarchy panel, and change the Size in Camera component to 3.2 as shown
    in the following figure:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在将项目设置为2D模式并更改平台为安卓以及所需分辨率后，我们只剩下一个小任务，那就是根据我们的目标分辨率配置相机。从层级面板中选择主相机，并将相机组件中的尺寸更改为3.2，如图所示：
- en: '![](img/image_01_033.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_033.png)'
- en: Figure 1.33 Camera Size
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.33 相机尺寸
- en: So far, a 2D Unity game project has been created with an initial directory structure
    and an empty scene which include a 2D configured camera in it. In the next section,
    we will discuss on what game will be created in this chapter and how to create
    any game from scratch.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，已经创建了一个2D Unity游戏项目，其中包括一个初始目录结构和包含2D配置相机的空场景。在下一节中，我们将讨论本章将创建的游戏以及如何从头开始创建任何游戏。
- en: Perky Penguin game
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Perky Penguin游戏
- en: 'This section is all about the game which we will create throughout this chapter and
    [Chapter 2](36ed5299-901b-4888-9b37-b21738cc051a.xhtml), *Finishing the Perky
    Penguin 2D Game*. Our game name is **Perky Penguin** and it is a Jetpack Joyride-based
    game. Final game of this chapter is shown as following:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍我们将在本章和[第2章](36ed5299-901b-4888-9b37-b21738cc051a.xhtml)“完成Perky Penguin
    2D游戏”中创建的游戏。我们的游戏名称是**Perky Penguin**，它是一款基于Jetpack Joyride的游戏。本章的最终游戏如下所示：
- en: '![](img/image_01_034.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_034.png)'
- en: Figure 1.34 Perky Penguin Gameplay
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.34 Perky Penguin游戏玩法
- en: Perky Penguin is inspired from Jetpack Joyride game. Jetpack Joyride is a 2011
    side-scrolling endless runner and action video game created by Halfbrick Studios.
    It was originally released in 2011 for iOS devices on App Store but it has been
    ported to many systems including Facebook, Android, Flash, PlayStation, Blackberry,
    and Windows Phone.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Perky Penguin游戏灵感来源于Jetpack Joyride游戏。Jetpack Joyride是由Halfbrick Studios开发的一款2011年的侧滚动无尽跑酷和动作视频游戏。它最初于2011年在App
    Store上为iOS设备发布，但后来被移植到包括Facebook、安卓、Flash、PlayStation、BlackBerry和Windows Phone在内的许多系统。
- en: Jetpack Joyride game was titled **Machine Gun Jetpack** during development.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发期间，Jetpack Joyride游戏被命名为**Machine Gun Jetpack**。
- en: The reason to create a Jetpack Joyride type game for this book is to teach the
    developers the perspective and methods of how 2D games are created in Unity from
    scratch. As Jetpack Joyride game includes all the basic functionalities which
    are implemented almost in all types of 2D games such as side scrolling, parallax
    scrolling, sprite sheets, jumping, random obstacle generation, enemy generation,
    enemy Artificial Intelligence, particle systems, and animations.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个类似Jetpack Joyride的游戏的原因是为了教开发者如何从零开始创建Unity中的2D游戏的角度和方法。因为Jetpack Joyride游戏包含了几乎所有2D游戏都实现的基本功能，如侧滚动、视差滚动、精灵表、跳跃、随机障碍生成、敌人生成、敌人人工智能、粒子系统和动画。
- en: Perky Penguin gameplay
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活泼的企鹅游戏玩法
- en: The game features a penguin that is on ice in very cool (pun intended) and that's
    why she is called penguin. In order to navigate through an ice field in the time
    of global warming, she gets a hold of a jetpack, which is tied on her back. The
    game uses a simple, one-touch system to control the penguin; when the player presses
    anywhere on the touchscreen, the penguin's jetpack is fired and penguin rises
    above the ground making a feel like she is flying for a moment. When the player
    lets go, the jetpack turns off and penguin falls. The game is continuously running
    in side view, so player is not required to control the speed of penguin. The player
    is only able to control the vertical movement of penguin by turning the jetpack
    on and off.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏特色是一只站在冰上的企鹅，非常酷（有意为之），因此被称为企鹅。为了在全球化石时代穿越冰原，她得到了一个绑在背上的喷气背包。游戏使用简单的单触控制系统来控制企鹅；当玩家在触摸屏上按下任何地方时，企鹅的喷气背包就会发射，企鹅升空，给人一种她正在飞行的感觉。当玩家松开手时，喷气背包关闭，企鹅落下。游戏以侧面视角持续进行，因此玩家不需要控制企鹅的速度。玩家只能通过打开和关闭喷气背包来控制企鹅的垂直移动。
- en: The objective of the game is to travel as far as possible, collect fish coins,
    and avoid obstacles such as zappers, missiles, and high-intensity laser beams.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的目标是尽可能远地旅行，收集鱼币，并避开障碍物，如电击器、导弹和高强度激光束。
- en: In the next section, we will start the development of the Perky Penguin game.
    We will learn how to add the player, which in our case is a penguin with jetpack
    tied to her back, to the game.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始开发活泼的企鹅游戏。我们将学习如何添加玩家，在我们的案例中，玩家是一只背部绑有喷气背包的企鹅。
- en: Adding the penguin
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加企鹅
- en: In this section, we will learn how to add our penguin player to the game and
    how we can make her alive by writing scripts, applying physics, and adding colliders
    in it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何将我们的企鹅玩家添加到游戏中，以及我们如何通过编写脚本、应用物理和添加碰撞器来使她变得生动。
- en: Importing the penguin Sprite
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入企鹅精灵
- en: 'Before we do anything, we need a player Sprite or image. For our Perky Penguin
    game, we have designed a penguin sprite. The following figure shows the penguin
    that is included as the player sprite of the game:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们做任何事情之前，我们需要一个玩家精灵或图像。对于我们的活泼的企鹅游戏，我们设计了一个企鹅精灵。以下图显示了包含在游戏玩家精灵中的企鹅：
- en: '![](img/image_01_035.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_035.png)'
- en: Figure 1.35 Penguin Sprite
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.35 企鹅精灵
- en: 'To import an image in to Unity, right-click on the Graphics folder in the Project
    Browser panel and click on Import New Asset..., as shown in the following screenshot:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 要将图像导入Unity，请在项目浏览器面板中的图形文件夹上右键单击，然后单击导入新资产...，如图以下截图所示：
- en: '![](img/image_01_036.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_036.png)'
- en: Figure 1.36 Import New Asset in Unity
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.36 在Unity中导入新资产
- en: These assets can be anything that is supported by Unity, such as images, audio
    files, 3D models, textures, materials, and scripts.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这些资产可以是Unity支持的所有内容，例如图像、音频文件、3D模型、纹理、材质和脚本。
- en: Assets can also be imported by dragging image files from Explorer to Unity's
    project browser panel.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过将图像文件从资源管理器拖动到Unity的项目浏览器面板来导入资产。
- en: 'Unity shows all the images with nice previews. It must be noted here that if
    Unity is in 2D mode, then unity will show images as sprites and if mode is set
    to 3D mode it shows the images as textures. *Figure 1.36* shows both scenarios.
    The following screenshot shows the image imported as sprite and the screenshot
    besides it shows image imported as texture:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Unity以精美的预览显示了所有图像。在此必须指出，如果Unity处于2D模式，则Unity将图像显示为精灵；如果模式设置为3D模式，则显示为纹理。*图1.36*显示了这两种情况。以下截图显示了作为精灵导入的图像，旁边的截图显示了作为纹理导入的图像：
- en: '![](img/image_01_037.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_037.png)'
- en: Figure 1.37 Images as Sprites (left) and Images as Textures (right)
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.37 作为精灵的图像（左）和作为纹理的图像（右）
- en: 'If the penguin image is imported as texture, then there is nothing to worry
    about. Select the image from Project Browser panel, and in the inspector change
    the Texture Type to Sprite and click Apply. It is shown in the following figure:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果企鹅图像被导入为纹理，那么就不用担心了。从项目浏览器面板中选择图像，并在检查器中将纹理类型更改为精灵，然后点击应用。如下面的图所示：
- en: '![](img/image_01_038.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_038.png)'
- en: Figure 1.38 Change Texture Type of Image in Inspector Panel
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.38 在检查器面板中更改图像纹理类型
- en: Creating penguin game object
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建企鹅游戏对象
- en: 'After the assets are imported, which in our case is a single penguin image,
    we have to create a game object of player. Usually game objects are created by
    right-clicking in Hierarchy and selecting Create Empty as shows in the following
    figure:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在资产导入之后，在我们的例子中是一个企鹅图片，我们必须创建一个玩家游戏对象。通常，游戏对象是通过在层级中右键单击并选择创建空对象来创建的，如下面的图所示：
- en: '![](img/image_01_039.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_039.png)'
- en: Figure 1.39 Creating Empty Game Object
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.39 创建空游戏对象
- en: 'But, in order to create sprites as game objects, simply drag sprites from the
    Project Browser panel to Hierarchy or Scene View panels and a game object will
    be created with the name of image file which is `penguin_fly.png` here. This is
    shown in the following figure:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为了创建作为游戏对象的精灵，只需从项目浏览器面板将精灵拖动到层级或场景视图面板，就会创建一个名为图像文件的游戏对象，这里为 `penguin_fly.png`。如下面的图所示：
- en: '![](img/image_01_040.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_040.png)'
- en: Figure 1.40 Creating Sprite Game Object
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.40 创建精灵游戏对象
- en: Now it's time to configure the penguin_fly game object of Hierarchy to get used
    in the game. Now select the penguin_fly object and make following changes in the Inspector
    panel.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候配置层级中的 penguin_fly 游戏对象以用于游戏了。现在选择 penguin_fly 对象，并在检查器面板中进行以下更改。
- en: Change the game object's name to `penguin`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将游戏对象的名字更改为 `penguin`。
- en: Set the position values to (0, 0, 0).
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将位置值设置为 (0, 0, 0)。
- en: '![](img/image_01_041.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_041.png)'
- en: 'To add a collider in the penguin, click Add Component in the inspector and
    select Circle Collider 2D from Physics2D menu as shown in the following figure.
    More about Colliders can be read here [https://docs.unity3d.com/ScriptReference/Collider.html](https://docs.unity3d.com/ScriptReference/Collider.html):'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在企鹅中添加碰撞器，请在检查器中点击添加组件，并从物理2D菜单中选择圆形碰撞器2D，如下面的图所示。更多关于碰撞器的信息可以在这里阅读 [https://docs.unity3d.com/ScriptReference/Collider.html](https://docs.unity3d.com/ScriptReference/Collider.html)：
- en: '![](img/image_01_042.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_042.png)'
- en: Figure 1.41 Adding Circle Collider 2D
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.41 添加圆形碰撞器2D
- en: Set the value of Radius of Circle Collider 2D to 0.6.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将圆形碰撞器2D的半径值设置为 0.6。
- en: 'To make the penguin behave as a physical object, we have to add Rigid Body
    component. To add it, click Add Component in the Inspector panel and select Rigid
    Body 2D from Physics2D as shown in the following figure:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使企鹅表现得像一个物理对象，我们必须添加刚体组件。要添加它，请在检查器面板中点击添加组件，并从物理2D中选择刚体2D，如下面的图所示：
- en: '![](img/image_01_043.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_043.png)'
- en: Figure 1.42 Adding Rigid Body 2D
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.42 添加刚体2D
- en: Set Fixed Angle checkbox state as checked on to avoid penguin to be rotated
    while falling or jumping due to physics dynamics.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将固定角度复选框的状态设置为选中，以避免企鹅在下降或跳跃时因物理动力学而旋转。
- en: 'The following figure below shows all the steps performed on the penguin game
    object:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图显示了在企鹅游戏对象上执行的所有步骤：
- en: '![](img/image_01_044.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_044.png)'
- en: Figure 1.43 Penguin Inspector Settings
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.43 企鹅检查器设置
- en: 'Starting from position, we have set the position to zero just for testing purposes.
    We will change it later when we put penguin at its initial position. The Sprite
    Renderer component is already added in the penguin game object because penguin
    game object was created from sprite by dragging it from Project Browser panel.
    The Sprite Renderer allows any game object to show an image on the screen from
    any sprite. In order to make any game object to react to physics collisions and
    get collided with each other, game object requires collider component in it. We
    have added Circle Collider 2D on the penguin object. You can choose any type of
    collider from the list. But it is recommended to choose the collider which is
    very light and fills the whole colliding area. The following figure shows the
    penguin with different colliders applied to it:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 从位置开始，我们为了测试目的将位置设置为0。当我们把企鹅放在初始位置时，我们会稍后更改它。Sprite Renderer组件已经添加到企鹅游戏对象中，因为企鹅游戏对象是通过从项目浏览器面板拖动精灵创建的。Sprite
    Renderer允许任何游戏对象从任何精灵上显示图像。为了使任何游戏对象能够对物理碰撞做出反应并相互碰撞，游戏对象需要具有碰撞组件。我们在企鹅对象上添加了Circle
    Collider 2D。你可以从列表中选择任何类型的碰撞体。但建议选择非常轻且填充整个碰撞区域的碰撞体。以下图显示了应用了不同碰撞体的企鹅：
- en: '![](img/image_01_045.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_045.png)'
- en: Figure 1.44 Penguins with Different Colliders
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.44 带有不同碰撞体的企鹅
- en: Using complex colliders like Polygon Collider 2D makes it harder to detect collision
    for the physics engine to detect collision, which in turn, creates a performance
    penalty. Finally, in order to apply gravity on the penguin, we have added Rigid
    Body 2D component. Rigid Body 2D allows any game objects to behave to the gravity,
    friction, physics kinematics and so on. We have check Fixed Angle to on state
    of the Rigid Body 2D. If this is set to off, then penguin will also rotate due
    to wind, friction, gravity, or any other force applied on it. So in order to avoid
    her to rotate while jumping, we have set Fixed Angle as checked.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 使用复杂的碰撞体，如Polygon Collider 2D，会使物理引擎检测碰撞变得更加困难，这反过来又会导致性能损失。最后，为了在企鹅上应用重力，我们添加了Rigid
    Body 2D组件。Rigid Body 2D允许任何游戏对象对重力、摩擦、物理运动学等做出反应。我们已经将Rigid Body 2D的Fixed Angle设置为开启状态。如果设置为关闭，那么企鹅也会因为风、摩擦、重力或任何其他作用在其上的力而旋转。因此，为了避免它在跳跃时旋转，我们将Fixed
    Angle设置为勾选状态。
- en: There are Physics components and Physics2D components. These both are very different
    in functionality and are used for very different purposes. You must be very careful
    when apply physics components on the game objects.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 有物理组件和Physics2D组件。这两个组件在功能上非常不同，用于非常不同的目的。在将物理组件应用于游戏对象时，你必须非常小心。
- en: When you run the project, you will notice that penguin will fall down on the
    screen. It is because of the gravity is pulling penguin downwards and it goes
    off the screen. The Gravity Scale value, which is 1 by default, decides the gravity
    of the penguin. If we remove or disable Rigid Body 2D component, then penguin
    will never move. So, it must be noted that without rigid body no force and collision
    will be applied on the game object.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行项目时，你会注意到企鹅会从屏幕上掉下来。这是因为重力将企鹅向下拉，使其离开屏幕。默认情况下为1的重力比例值决定了企鹅的重力。如果我们移除或禁用Rigid
    Body 2D组件，那么企鹅将永远不会移动。因此，必须注意，没有刚体，就不会对游戏对象应用任何力和碰撞。
- en: Adding script behavior on penguin object
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在企鹅对象上添加脚本行为
- en: After setting physics components and position on penguin object, it's time to
    define some logic behavior of the penguin. The game's requirements are to let
    penguin fly through its jetpack when screen is touched by player and penguin will
    fall when touch is stopped. These kinds of logic are defined in Unity through
    scripts. Unity supports 2 kinds of scripts; C# and JavaScript. You can use any
    of these scripts. Even you can also use few files in C# and few other files in
    JavaScript in the same project. Throughout this book, we will do all the scripting
    through C#.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好企鹅对象上的物理组件和位置后，是时候定义一些企鹅的逻辑行为。游戏的要求是当玩家触摸屏幕时，让企鹅通过喷射背包飞行，当触摸停止时，企鹅将落下。这类逻辑是通过Unity中的脚本定义的。Unity支持两种脚本：C#和JavaScript。你可以使用任何这些脚本。甚至你可以在同一个项目中使用一些C#文件和一些JavaScript文件。在这本书中，我们将通过C#来完成所有的脚本编写。
- en: 'We will start by creating a C# script file in Scripts folder in Assets by right-clicking
    on Scripts folder and choose C# Script from Create menu as shown in the following
    figure:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先在Assets文件夹中的Scripts文件夹上右键单击，并在创建菜单中选择C# Script，如图所示来创建一个C#脚本文件：
- en: '![](img/image_01_046.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_046.png)'
- en: Figure 1.45 Adding a C# Script
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.45 添加 C# 脚本
- en: Let's call this script as `PenguinController.cs` and when you open it, the Unity's
    default Code Editor **Visual Studio** will start and open the newly created script
    file it as shown in the following figure.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将这个脚本命名为 `PenguinController.cs`，当你打开它时，Unity 的默认代码编辑器 **Visual Studio** 将启动并打开新创建的脚本文件，如图所示。
- en: '![](img/image_01_047.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_047.png)'
- en: Figure 1.46 A C# Script File in MonoDevelop
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.46 MonoDevelop 中的 C# 脚本文件
- en: 'You might notice some code already written in this file. We will discuss about
    it in a while. Now a script has been created, but this script is not linked or
    connected to our penguin object or even the game. In order to apply it on the
    penguin object, select penguin game object, click on Add Component in the Inspector
    panel, and choose PenguinController.cs from Scripts menu as shown in the following
    figure:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会注意到这个文件中已经有一些代码。我们稍后会讨论这个问题。现在脚本已经创建，但这个脚本还没有链接或连接到我们的企鹅对象，甚至没有连接到游戏。为了将其应用于企鹅对象，选择企鹅游戏对象，在检查器面板中点击“添加组件”，然后从脚本菜单中选择
    PenguinController.cs，如图所示：
- en: '![](img/image_01_048.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_048.png)'
- en: Figure 1.47 Adding C# Script on Penguin GameObject
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.47 在企鹅游戏对象上添加 C# 脚本
- en: You can also apply script on the game object by directly dragging script file
    on the game object in hierarchy view.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过直接将脚本文件拖放到层次视图中的游戏对象上来将脚本应用于游戏对象。
- en: 'Now, as the script is applied on the penguin game object, let''s write some
    logic and code to make the penguin fly. Open `PenguinController.cs` file from
    project browser panel by double-clicking it in MonoDevelop. The code which is
    already written looks like the following screenshot:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于脚本已应用于企鹅游戏对象，让我们编写一些逻辑和代码来使企鹅飞翔。通过在 MonoDevelop 中双击它从项目浏览器面板打开 `PenguinController.cs`
    文件。已经编写的代码看起来如下截图所示：
- en: '![](img/image_01_049.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_049.png)'
- en: The `PenguinController` class is inherited from `MonoBehaviour` class. Any script
    to be applied on any game object placed in the scene should be a `MonoBehaviour`
    class and this is done by inheriting the class from it. `MonoBehaviour` class
    provides some basic functionality for game objects such as its life cycle like
    when object is created, when it is active, when it is destroyed etc. Also it provides
    some functionality like interactions such as mouse down or mouse up etc. For now,
    we have only two methods `Start()` and `Update()`. The `Start()` method is called
    when the game object becomes first time active on the scene at runtime and `Update()`
    method is called on each frame if the game object is enabled or active.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PenguinController` 类是从 `MonoBehaviour` 类继承而来的。任何要应用于场景中任何游戏对象的脚本都应该是一个 `MonoBehaviour`
    类，这是通过从它继承类来实现的。`MonoBehaviour` 类为游戏对象提供了一些基本功能，例如其生命周期，如对象创建时、对象激活时、对象销毁时等。它还提供了一些功能，如交互，例如鼠标按下或鼠标抬起等。目前，我们只有两个方法
    `Start()` 和 `Update()`。`Start()` 方法在游戏对象在运行时第一次在场景中激活时被调用，如果游戏对象被启用或激活，则 `Update()`
    方法在每个帧上被调用。'
- en: You can also use Visual Studio 2012 with Unity for C# scripts by installing
    Visual Studio Unity Tools and importing UnityVS packaging in the project.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过安装 Visual Studio Unity Tools 并在项目中导入 UnityVS 打包来使用 Visual Studio 2012
    与 Unity 进行 C# 脚本开发。
- en: 'Now, let''s start our logic for penguin. We will start from creating a variable
    `jetpackForce` in the class like this:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始编写企鹅的逻辑。我们将从在类中创建一个变量 `jetpackForce` 开始，如下所示：
- en: '[PRE0]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We have set its initial float value to 75 and f letter is to make it float
    literal. There is an interesting thing about Unity that all the public fields
    in any class will be shown in game object''s inspector component and can be altered
    or modified directly from the editor without opening the code file. The following shows
    the `jetpackForce` variable''s field in the inspector panel:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将其初始浮点值设置为 75，f 字符是为了使其成为浮点字面量。关于 Unity 的一个有趣之处在于，任何类中的所有公共字段都会显示在游戏对象的检查器组件中，并且可以直接从编辑器中修改或更改，而无需打开代码文件。以下展示了检查器面板中的
    `jetpackForce` 变量字段：
- en: '![](img/image_01_051.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_051.png)'
- en: Figure 1.48 The jetpackForce Field in the Inspector Panel
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.48 检查器面板中的 jetpackForce 字段
- en: 'Next is to use this `jetpackForce`''s value as the force to apply on penguin
    when touch is pressed. In order to detect touches, we have to use `Input.GetButton()`
    method. But this method is better used in either `Update()` or `FixedUpdate()`
    methods of `MonoBehaviour` class. The `FixedUpdate()` method is called every fixed
    frame instead of every frame. Meaning that in FixedUpdate() if the FPS of the
    game is 60 then the FixedUpdate function will be called 60 times in a second.
    Irrespective if there are any changes to the scene. In comparison the `Regular
    Update ()` function gets doesn''t stick to the 60 fps rule and will update when
    there is a change in the scene. This should be used when dealing with RigidBody.
    As our penguin is a RigidBody2D, so it''s better to use `FixedUpdate()` method
    than `Update().` The `PenguinController.cs` script doesn''t contain `FixedUpdate()`
    method, so let''s add the following code in the class now:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是将这个`jetpackForce`的值用作在触摸按下时施加在企鹅上的力。为了检测触摸，我们必须使用`Input.GetButton()`方法。但是，这个方法最好用在`MonoBehaviour`类的`Update()`或`FixedUpdate()`方法中。`FixedUpdate()`方法在每个固定帧被调用，而不是每个帧。这意味着如果游戏的FPS是60，那么在FixedUpdate中，每秒这个函数将被调用60次。无论场景是否有变化。相比之下，`Regular
    Update ()`函数不会遵循60fps规则，并且会在场景有变化时更新。这应该用于处理RigidBody。由于我们的企鹅是RigidBody2D，所以使用`FixedUpdate()`方法比`Update()`方法更好。`PenguinController.cs`脚本不包含`FixedUpdate()`方法，所以现在让我们在这个类中添加以下代码：
- en: '[PRE1]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There is nothing difficult here. We are polling for the input of Fire1 button
    which is a left-click in case of any PC, Linux, or MAC build and it changes to
    touch on Android, iPhone or other touch device. If the screen is touched, then
    `GetButton()` will return true value, which in turn lets script add force by calling
    `AddForce()` method of the RigidBody2D component and passing the `jetpackForce`
    value in the y-direction.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里没有什么困难。我们正在轮询Fire1按钮的输入，在PC、Linux或MAC构建中，这是一个左键点击，在Android、iPhone或其他触摸设备上则变为触摸操作。如果屏幕被触摸，那么`GetButton()`将返回true值，这反过来又允许脚本通过调用RigidBody2D组件的`AddForce()`方法，并传递`jetpackForce`值在y方向上施加力。
- en: 'Following is the whole `PenguinController.cs` file''s code:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是整个`PenguinController.cs`文件的代码：
- en: '![](img/image_01_053.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_053.png)'
- en: Now, when you run the game the penguin will start falling. On clicking on screen,
    the penguin will rise up a little and will start falling again. The more frequently
    clicks are performed, the higher penguin will go up and it will easily be out
    of the screen within 2 or 3 clicks. Also it is falling very fast. In order to
    adjust its speed, either we decrease Gravity Scale from RigidBody2D of the penguin
    object as shown in the following figure on left side or we decrease the Gravity
    in the Physics2D settings shown in the figure on right side.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你运行游戏时，企鹅将开始下落。在点击屏幕后，企鹅会稍微上升然后再开始下落。点击越频繁，企鹅上升得越高，它很容易在2或3次点击后离开屏幕。而且它下落得非常快。为了调整其速度，我们可以通过以下两种方式之一：要么从企鹅对象的RigidBody2D中减少重力比例，如图中左侧所示，要么在图中右侧的Physics2D设置中减少重力。
- en: '![](img/image_01_054.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_054.png)'
- en: Figure 1.49 Gravity Scale of Penguin (left) and Gravity of Physics2D (right)
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.49 企鹅的重力比例（左侧）和Physics2D的重力（右侧）
- en: We will change the Gravity value of Physics2D settings to -15\. You can open
    Physics2D settings from Edit - Project Settings - Physics2D menu.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把Physics2D设置的重力值改为-15。你可以从Edit - Project Settings - Physics2D菜单中打开Physics2D设置。
- en: Now run the game, and you will notice the penguin will fall slower than before.
    On clicking many times, you might notice that penguin gets out of the screen.
    This kind of behavior in the games should be avoided. So, in order to limit the
    penguin within the screen bounds, we will add floor and ceiling in the game. Let's
    see how it's done in the next section.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行游戏，你会注意到企鹅的下落速度比之前慢。在多次点击后，你可能会注意到企鹅离开了屏幕。在游戏中应该避免这种行为。因此，为了限制企鹅在屏幕边界内，我们将在游戏中添加地板和天花板。让我们看看在下一节中是如何实现的。
- en: Limiting the penguin between screen bounds
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制企鹅在屏幕边界内
- en: Adding floor and ceiling is quite simpler job. We will create an empty object
    first. It should be noted that we are not importing any images or sprite assets
    in the scene, because we only need boundaries not the visuals of those about how
    these will look. Here is how we create our floor object.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 添加地板和天花板是一个相对简单的工作。我们首先创建一个空对象。需要注意的是，我们在这个场景中并没有导入任何图像或精灵资源，因为我们只需要边界而不是这些资源的视觉表现。以下是创建我们的地板对象的方法。
- en: Create empty game object by choosing GameObject - Create Empty menu.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过选择GameObject - 创建空对象菜单来创建一个空游戏对象。
- en: Select newly created empty game object in the Hierarchy panel.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在层次面板中选择新创建的空游戏对象。
- en: Rename it to `floor`.
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其重命名为`floor`。
- en: Set its Position to (0, -3.25, 0).
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其位置设置为(0, -3.25, 0)。
- en: Set its Scale to (14.4, 1, 1).
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其缩放设置为(14.4, 1, 1)。
- en: Add Box Collider 2D component by clicking on Add Component, and selecting Physics2D
    - Box Collider 2D option.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击添加组件，并选择Physics2D - Box Collider 2D选项来添加Box Collider 2D组件。
- en: Now you should be seeing a green rectangle on bottom of screen. This is the
    box collider of the floor and when you run the game, the penguin will never fall
    off the screen and it will stop when collided with the floor.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该在屏幕底部看到一个绿色的矩形。这是地板的盒子碰撞体，当你运行游戏时，企鹅永远不会掉出屏幕，并且当与地板碰撞时会停止。
- en: We haven't added Rigid Body 2D on floor object because we don't want to apply
    gravity on the floor object due to its static nature.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有在地板对象上添加Rigid Body 2D，因为我们不希望由于地板对象的静态特性而对其应用重力。
- en: Similarly, now add ceiling game object with the name `ceiling` and its position
    of (0, 3.25, 0) and its scale of (14.4, 1, 1). Apply Rigid Body 2D component on
    the ceiling object, and now run the project. You will observe that penguin now
    never leaves the screen and it is limited between the upper and lower parts of
    the screen.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，现在添加一个名为`ceiling`的顶棚游戏对象，其位置为(0, 3.25, 0)，其缩放为(14.4, 1, 1)。将Rigid Body 2D组件应用到顶棚对象上，现在运行项目。你会观察到企鹅现在永远不会离开屏幕，并且它被限制在屏幕的上下部分之间。
- en: Summary
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learnt about what is Android and about its different versions.
    We also learnt about different game engines such as Unity3D, Unreal Engine, Game
    Maker Studio, or Adobe Flash used to create games for Android devices. We also
    learnt about important features of Unity along with its basics of its development
    environment. After learning basics of unity game development, we learnt about
    configuration of any empty game projects for 2D games. Then we got introduced
    to the Perky Penguin game which started getting developed in this chapter. A penguin
    was added and its basic flying and falling functionality was created in this chapter
    then.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了什么是Android以及它的不同版本。我们还学习了用于为Android设备创建游戏的多种游戏引擎，例如Unity3D、Unreal
    Engine、Game Maker Studio或Adobe Flash。我们还学习了Unity的重要特性及其开发环境的基本知识。在学习了Unity游戏开发的基础之后，我们学习了为2D游戏配置任何空游戏项目的方法。然后，我们介绍了Perky
    Penguin游戏，该游戏在本章开始开发。在这一章中，添加了一只企鹅，并创建了其基本的飞行和下落功能。
- en: In the next chapter, we will finish the Perky Penguin game and see how particle
    systems, animations, enemies, and so on, are all developed in Unity.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将完成Perky Penguin游戏，并了解如何在Unity中开发粒子系统、动画、敌人等等。
