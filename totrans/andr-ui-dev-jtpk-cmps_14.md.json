["```kt\n@ExperimentalMaterialApi\n@Composable\nfun ExposedDropdownMenuBoxDemo() {\n  val titles = List(3) { i ->\n    stringResource(id = R.string.item, i + 1)\n  }\n  var expanded by remember { mutableStateOf(false) }\n  var selectedTxt by remember { mutableStateOf(titles[0]) }\n  Box(\n    modifier = Modifier\n      .fillMaxSize()\n      .padding(16.dp),\n    contentAlignment = Alignment.TopCenter\n  ) {\n    ...\n  }\n}\n```", "```kt\nExposedDropdownMenuBox(expanded = expanded,\n  onExpandedChange = {\n    expanded = !expanded\n  }) {\n  TextField(value = selectedTxt,\n    onValueChange = { },\n    readOnly = true,\n    label = {\n      Text(text = stringResource(id = R.string.label))\n    },\n    trailingIcon = {\n      ExposedDropdownMenuDefaults.TrailingIcon(\n        expanded = expanded\n      )\n    }\n  )\n  ExposedDropdownMenu(expanded = expanded,\n    onDismissRequest = {\n      expanded = false\n    }) {\n    for (title in titles) {\n      DropdownMenuItem(onClick = {\n        expanded = false\n        selectedTxt = title\n      }) {\n        Text(text = title)\n      }\n    }\n  }\n}\n```", "```kt\n@Composable\nfun NavigationRailDemo() {\n  val showNavigationRail =\n          LocalConfiguration.current.screenWidthDp >= 600\n  val index = rememberSaveable { mutableStateOf(0) }\n  Scaffold(topBar = {\n    TopAppBar(title = {\n      Text(text = stringResource(id = R.string.app_name))\n    })\n  },\n    bottomBar = {\n      if (!showNavigationRail)\n        BottomBar(index)\n    }) {\n    Content(showNavigationRail, index)\n  }\n}\n```", "```kt\n@Composable\nfun BottomBar(index: MutableState<Int>) {\n  BottomNavigation {\n    for (i in 0..2)\n      BottomNavigationItem(selected = i == index.value,\n        onClick = { index.value = i },\n        icon = {\n          Icon(\n            painter = painterResource(id =\n                R.drawable.ic_baseline_android_24),\n            contentDescription = null\n          )\n        },\n        label = {\n          MyText(index = i)\n        }\n      )\n  }\n}\n```", "```kt\n@Composable\nfun Content(showNavigationRail: Boolean, index:\n   MutableState<Int>) {\n  Row(\n    modifier = Modifier.fillMaxSize()\n  ) {\n    if (showNavigationRail) {\n      NavigationRail {\n        for (i in 0..2)\n          NavigationRailItem(selected = i == index.value,\n            onClick = {\n              index.value = i\n            },\n            icon = {\n              Icon(\n                painter = painterResource(id =\n                    R.drawable.ic_baseline_android_24),\n                contentDescription = null\n              )\n            },\n            label = {\n              MyText(index = i)\n            })\n      }\n    }\n    Box(\n      modifier = Modifier\n        .fillMaxSize()\n        .background(color = MaterialTheme.colors.surface),\n      contentAlignment = Alignment.Center\n    ) {\n      MyText(\n        index = index.value,\n        style = MaterialTheme.typography.h3\n      )\n    }\n  }\n}\n```", "```kt\n@Composable\n@Preview\nfun App() {\n  var toggled by remember {\n    mutableStateOf(false)\n  }\n  val color = if (toggled)\n    Color.White\n  else\n    Color.Red\n  Column(\n    modifier = Modifier\n      .fillMaxSize()\n      .padding(16.dp),\n    horizontalAlignment = Alignment.CenterHorizontally\n  ) {\n    Button(onClick = {\n      toggled = !toggled\n    }) {\n      Text(text = \"Toggle\")\n    }\n    Box(\n      modifier = Modifier\n        .padding(top = 32.dp)\n        .background(color = color)\n        .size(128.dp)\n    )\n  }\n}\n```"]