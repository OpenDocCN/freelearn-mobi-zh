- en: Adding Player Character for an Action Fighting Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为动作格斗游戏添加玩家角色
- en: The previous chapter covered many different things and concepts regarding 2D
    game development in Unity and it followed a practical approach to finish a simple
    2D game called Perky Penguin. The chapter continued the practice example of the
    game from [Chapter 1](ca00129d-f14f-4f32-9ceb-9d05d828b98b.xhtml), *Introduction
    to Android Game Development with Unity3D*, and finished by covering important
    topics on 2D games. It started by adding particle effects in Unity and then it
    explained in detail about the concept of Particle Systems, the basics of Particle
    Systems, and how these are added in Unity. Then we continued the discussion to
    apply the concepts in a practical example by adding a rocket fire particle system
    for the penguin in the game, and discussed such properties as emission, shape,
    and color.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章涵盖了Unity中2D游戏开发的多项不同内容和概念，并遵循实用方法完成了一个名为活泼企鹅的简单2D游戏。章节继续了从[第1章](ca00129d-f14f-4f32-9ceb-9d05d828b98b.xhtml)，《使用Unity3D开发Android游戏入门》开始的实践示例，并通过涵盖2D游戏的重要主题来完成。它从在Unity中添加粒子效果开始，然后详细解释了粒子系统的概念、粒子系统的基础以及如何在Unity中添加它们。然后我们继续讨论通过为游戏中的企鹅添加火箭火焰粒子系统来应用这些概念，并讨论了如发射、形状和颜色等属性。
- en: After Particle Systems, the chapter focused on creating an environment and adding
    backgrounds in the game. It explained how to import these backgrounds, and how
    to make them repeatable in the game. The concept of sorting layers and tags was
    also covered and the chapter moved on to camera management and how a penguin would
    never go out of the screen if the camera always focused on it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在粒子系统之后，章节专注于创建游戏环境并添加背景。它解释了如何导入这些背景，以及如何在游戏中使它们可重复。还涵盖了排序层和标签的概念，章节接着讨论了相机管理以及如果相机始终聚焦于企鹅，企鹅将永远不会离开屏幕。
- en: After these regular topics, a very interesting and useful topic of Prefabs was
    discussed in the chapter. After some basic discussion of Prefabs, the game was
    enlightened with Level Prefabs, which allowed the game to repeat the background
    and generate obstacles at runtime. This discussion also included the generator
    concept and its code implementation as well.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些常规主题之后，章节中讨论了一个非常有趣且实用的Prefab主题。在讨论Prefab的一些基本概念之后，游戏通过使用Level Prefabs得到了启发，这使得游戏能够在运行时重复背景并生成障碍物。这次讨论还包含了生成器概念及其代码实现。
- en: 'Finally, the chapter finished with adding obstacles in the game and the basic
    collision detection with the penguin. This led to the concept of triggers as well,
    which becomes very useful in creating invisible colliders to detect some object''s
    presence at some place in the game. The following is a screenshot of the game
    after completion of the previous chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，章节通过在游戏中添加障碍物和企鹅的基本碰撞检测来完成，这也引出了触发器概念，这在创建不可见碰撞体以检测游戏中某个位置的对象存在时非常有用。以下是在完成上一章后的游戏截图：
- en: '![](img/image_03_001.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_001.png)'
- en: Figure 3.1 A snapshot of Penguin Perky game
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 鹦鹉螺活泼游戏的一张快照
- en: If you are interested in creating any 2D game in Unity, then this is covered
    in more detail in [Chapter 1](ca00129d-f14f-4f32-9ceb-9d05d828b98b.xhtml), *Introduction
    to Android Game Development with Unity3D* and [Chapter 2](36ed5299-901b-4888-9b37-b21738cc051a.xhtml),
    *Finishing the Perky Penguin 2D Game*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣想要在Unity中创建任何2D游戏，那么这些内容在[第1章](ca00129d-f14f-4f32-9ceb-9d05d828b98b.xhtml)，《使用Unity3D开发Android游戏入门》和[第2章](36ed5299-901b-4888-9b37-b21738cc051a.xhtml)，《完成活泼企鹅2D游戏》中有更详细的介绍。
- en: This chapter is a totally new level compared to previous chapters. In this chapter,
    we will extend our knowledge about Unity to 3D game development, which can often
    become very confusing and tricky for new game developers. Up until 2D game development,
    the focus of developers and programmers revolved around the concept of images,
    sprites, and two dimensions, ignoring the camera's depth. The new developers who
    have worked on graphics tools such as Adobe Photoshop or Gimp prove to be very
    good in 2D game development and grasp the concepts very quickly, but 3D becomes
    very tough because it needs expertise in highly-used advanced commercial tools
    such as Autodesk Maya, 3D Studio Max, and so on. These tools require many years
    of practice and experience and that makes 3D game development very hard to learn
    for new programmers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章相比，本章是一个全新的层次。在本章中，我们将扩展我们对Unity的知识，将其应用于3D游戏开发，这对于新游戏开发者来说常常会变得非常复杂和棘手。直到2D游戏开发，开发者和程序员的关注点围绕图像、精灵和二维概念，忽略了摄像机的深度。那些在Adobe
    Photoshop或Gimp等图形工具上工作的新开发者证明在2D游戏开发方面非常出色，并能快速掌握概念，但3D变得非常困难，因为它需要掌握Autodesk
    Maya、3D Studio Max等高度使用的先进商业工具的专业知识。这些工具需要多年的实践和经验，这使得3D游戏开发对于新程序员来说非常难以学习。
- en: It is out of the scope of this book to cover all the topics, but we will learn
    about basic concepts and their usage through creating a 3D action fighting game
    from scratch. This chapter will teach from the very start about the configuration
    of 3D game projects, importing 3D models, and how textures and materials are applied
    on these models. Moving on, this chapter will introduce the concept of rigging
    and what interfaces Unity has to offer to make rigging easier, such as humanoid
    rigging, generic rigging, and so on. This concept of rigging will be implemented
    in practice by importing and rigging the player character model of the action
    fighting game in Unity. We will further apply animations to allow for basic character
    movement.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的范围不包括涵盖所有主题，但我们将通过从头开始创建3D动作格斗游戏来学习基本概念及其用法。本章将从配置3D游戏项目、导入3D模型以及如何将这些模型上应用纹理和材质开始讲解。接下来，本章将介绍骨架的概念以及Unity提供哪些接口来简化骨架配置，例如人形骨架、通用骨架等。这个骨架概念将通过在Unity中导入和配置动作格斗游戏的玩家角色模型来在实践中得到实现。我们还将应用动画以允许基本角色移动。
- en: Now, let's put our words into action and start learning about 3D game development,
    focusing on the configuration of 3D game projects in Unity in the following section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将我们的话语付诸实践，开始学习3D游戏开发，以下部分将重点关注Unity中3D游戏项目的配置。
- en: 'This chapter includes the following topics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下主题：
- en: Configuring a project for 3D games
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Unity中为3D游戏配置项目
- en: Importing 3D models
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入3D模型
- en: Applying textures and materials
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用纹理和材质
- en: Generic and humanoid rigs
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用和人形骨架
- en: Configuring humanoid avatars
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置人形角色
- en: Legacy and Mecanim animation systems
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧版和Mecanim动画系统
- en: State machines with Animation controllers
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有动画控制器的状态机
- en: Configuring Project for 3D Games in Unity
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Unity中配置3D游戏项目
- en: In previous chapters, we were learned about 2D games and we also learned about
    how 2D game projects are created and configured in Unity. For 3D projects, the
    procedure is almost identical, except some changes need to be done. Let's start
    by launching Unity 5 and creating an empty project with it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们学习了2D游戏，也学习了如何在Unity中创建和配置2D游戏项目。对于3D项目，流程几乎相同，只是需要做一些更改。让我们先启动Unity
    5，并使用它创建一个空项目。
- en: 'If you are already aware of 3D game projects configuration or have worked on
    any 3D game before, you can safely skip this section. When you launch Unity 5,
    it shows a project wizard, as shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经熟悉3D游戏项目的配置或者之前参与过任何3D游戏开发，你可以安全地跳过这一部分。当你启动Unity 5时，它会显示一个项目向导，如下面的截图所示：
- en: '![](img/image_03_002.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_002.png)'
- en: Figure 3.2 Unity 5 new project wizard
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 Unity 5新项目向导
- en: 'The project wizard shows a list of all the recent projects along with their
    names. The most recent project is highlighted for quick opening. On the top-right
    side of the wizard, there are controls to create a new project from scratch and
    open any specific project from any directory. Let''s start by creating a new project
    by clicking on the New project button on the top right. You will be presented
    with the dialog, shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 项目向导显示了一个包含所有最近项目及其名称的列表。最近的项目被突出显示以快速打开。在向导的右上角，有一些控制按钮，可以用来从头创建新项目或从任何目录打开任何特定的项目。让我们通过点击右上角的“新建项目”按钮开始创建一个新项目。您将看到一个对话框，如下面的屏幕截图所示：
- en: '![](img/image_03_003.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_003.png)'
- en: Figure 3.3 New project details wizard
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 新建项目详情向导
- en: 'Write the project name and select its path location. Below these text inputs,
    you will observe a simple selection from two options: 2D and 3D. We will choose
    3D as we are creating a 3D game. This is shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 输入项目名称并选择其路径位置。在这些文本输入下方，您将观察到两个选项的简单选择：2D和3D。由于我们正在创建一个3D游戏，我们将选择3D。这在上面的屏幕截图中显示：
- en: '![](img/image_03_004.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_004.png)'
- en: Figure 3.4 Project type selector for 2D and 3D
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 2D和3D项目类型选择器
- en: This toggle lets you tell Unity whether your project is 2D or 3D. Although this
    doesn't affect or change the project in any way while working on it, it affects
    the default project setting for an easier workflow. For example, in 3D mode when
    you import any image asset into the project, Unity will take it as a texture and
    in 2D mode, Unity will take it as a sprite. You can also change the mode later
    from the project anytime; it is not necessary to select at project creation time.
    By default, Unity will create the project in 3D mode.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此切换选项允许您告诉Unity您的项目是2D还是3D。尽管在处理项目时这不会以任何方式影响或改变项目，但它会影响默认的项目设置，以便更容易地工作流程。例如，在3D模式下，当您将任何图像资产导入到项目中时，Unity会将其视为纹理；而在2D模式下，Unity会将其视为精灵。您也可以稍后从项目设置中更改模式；在项目创建时选择不是必需的。默认情况下，Unity会以3D模式创建项目。
- en: 'Now, let''s name the project as Free Fighter and press Create Project. This
    will import some pre-defined assets and launch the Unity interface editor. You
    can observe that an empty new scene will be created as well containing two game
    objects in the hierarchy panel: Main Camera and Directional Light. We won''t discuss
    these objects at the moment, but these will be covered in upcoming chapters as
    we manage the cameras and lights for the games.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将项目命名为Free Fighter并点击创建项目。这将导入一些预定义的资产并启动Unity界面编辑器。您可以看到，将创建一个包含两个游戏对象的空新场景，这两个对象位于层次面板中：主摄像机和方向光。我们现在不会讨论这些对象，但它们将在后续章节中涵盖，当我们管理游戏中的摄像机和灯光时。
- en: In this blank unsaved empty scene, the first thing we need is the model of the
    player character. Let's discuss the model or models in general in the next section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个空白未保存的场景中，我们首先需要的是玩家角色的模型。让我们在下一节中一般性地讨论模型或模型。
- en: Importing 3D models
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入3D模型
- en: Before we go into the nifty details of 3D modeling and Unity3D, let's discuss
    first what 3D models are. In computer graphics, 3D modeling is the process of
    constructing and developing a mathematical and visual representation of any three-dimensional
    (3D) surface of an object via any 3D modeling software. The end product of that
    process is called a **3D model**, or simply model, in the context of this book.
    The interesting thing about 3D models is that they are in 3D and any computer
    or laptop screen is a 2D surface, so it becomes a tricky task to display the 3D
    model in the horizons and bounds of 2D screens. So a process of displaying 3D
    models in the form of 2D images is used and this is called **3D rendering**. It
    comes with 3D software tools including our very own Unity3D. This rendering process
    uses lights and cameras to render the 3D model as it's something real and it presents
    the image of it in the viewer's mind. We can get into more and more details of
    this never-ending topic and discussion of 3D models but it is far outside the
    scope of this book. So, we will talk only about the important details that can
    help in building a 3D game in Unity, namely models and modeling tools.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨3D建模和Unity3D的精彩细节之前，让我们首先讨论一下什么是3D模型。在计算机图形学中，3D建模是通过任何3D建模软件构建和开发任何物体三维（3D）表面的数学和视觉表示的过程。该过程的最终产品被称为**3D模型**，或在本书的上下文中简称为模型。3D模型有趣的地方在于它们是三维的，而任何计算机或笔记本电脑屏幕都是二维表面，因此将3D模型显示在二维屏幕的视野和边界内变成了一项棘手的工作。因此，使用2D图像的形式显示3D模型的过程被使用，这被称为**3D渲染**。它包括3D软件工具，包括我们自己的Unity3D。这个渲染过程使用灯光和相机将3D模型渲染成真实的样子，并在观众心中呈现它的图像。我们可以进一步探讨这个永无止境的主题和3D模型的讨论，但这远远超出了本书的范围。因此，我们将只讨论有助于在Unity中构建3D游戏的重要细节，即模型和建模工具。
- en: 3D modelling is the process of developing a mathematical representation of any
    three-dimensional surface of an object. Remember, a 3D model is the main asset
    of any game. A model file may contain a 3D model, such as any character, building,
    furniture, and so on. A model file may also contain animation data which can be
    used to animate this model or other models. The animation data is imported as
    one or more animation clips. We can't create 3D models in Unity because Unity
    is the gaming engine for developing games, not for creating 3D models. We just
    can just import them and use them in the game. There are many 3D modeling software
    packages available on the market, and they are improving day by day as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 3D建模是开发任何物体三维表面的数学表示的过程。记住，3D模型是任何游戏的主要资产。模型文件可能包含3D模型，例如任何角色、建筑、家具等。模型文件也可能包含可用于动画此模型或其他模型的动画数据。动画数据以一个或多个动画剪辑的形式导入。我们无法在Unity中创建3D模型，因为Unity是用于开发游戏的引擎，而不是用于创建3D模型。我们只能导入它们并在游戏中使用它们。市场上有很多3D建模软件包，而且它们每天都在不断改进。
- en: 'In Unity, importing meshes can be achieved from two main types of files: **exported
    3D** file formats and **proprietary 3D application** files. Let''s further describe
    exported 3D file formats. Unity can read `.fbx`, `.dae`, `.3DS`, `.dxf`, and `.obj`.
    The advantages and disadvantages of exported 3D file formats are described in
    the following text:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，导入网格可以通过两种主要类型的文件实现：**导出的3D**文件格式和**专有3D应用程序**文件。让我们进一步描述导出的3D文件格式。Unity可以读取`.fbx`、`.dae`、`.3DS`、`.dxf`和`.obj`。以下文本中描述了导出的3D文件格式的优缺点：
- en: '**Advantages**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点**'
- en: Only export the data you need
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只导出你需要的数据
- en: Verifiable data (re-import into the 3D package before Unity)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可验证的数据（在Unity之前重新导入到3D包中）
- en: Generally smaller files
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常文件较小
- en: Encourages modular approach; for example, different components for collision
    types or interactivity
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励模块化方法；例如，用于碰撞类型或交互的不同组件
- en: Supports other 3D packages whose proprietary formats we don't have direct support
    for
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持我们没有直接支持的专有格式的其他3D包
- en: '**Disadvantages**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点**'
- en: Can be a slower pipeline for prototyping and iterations
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能是原型设计和迭代过程中的较慢流程
- en: Easier to lose track of versions between source (working file) and game data
    (for example, exported FBX)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易在源（工作文件）和游戏数据（例如，导出的FBX）之间丢失版本跟踪
- en: 'The second type of files are the proprietary 3D application files such as `.Max`
    and `.Blend` file formats from 3D Studio Max or Blender. Unity also can import
    Max, Maya, Blender, Cinema4D, Modo, Lightwave, and Cheetah3D files. For example,
    MAX, MB, MA, and so on. The advantages and disadvantages of proprietary 3D application
    files are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型的文件是专有3D应用程序文件，例如来自3D Studio Max或Blender的`.Max`和`.Blend`文件格式。Unity也可以导入Max、Maya、Blender、Cinema4D、Modo、Lightwave和Cheetah3D文件。例如，MAX、MB、MA等。专有3D应用程序文件的优缺点如下：
- en: '**Advantages:**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点：**'
- en: Quick iteration process (save the source file and Unity reimports)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速迭代过程（保存源文件，Unity重新导入）
- en: Simple initially
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单易用
- en: '**Disadvantages:**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点：**'
- en: A licensed copy of that software must be installed on all machines using the
    Unity project
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须在所有使用Unity项目的机器上安装该软件的授权副本
- en: Files can become bloated with unnecessary data
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件可能会因为不必要的数据而变得臃肿
- en: Big files can slow Unity updates
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大文件可能会减慢Unity更新
- en: Less validation, so it is harder to troubleshoot problems
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证较少，因此更难解决问题
- en: 3D models
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D模型
- en: '3D models are the representation of any physical object constructed using a
    collection of geometric primitives such as triangles, lines, curved surfaces,
    and so on. The following figure shows some basic primitives used for the creation
    of 3D models:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 3D模型是使用几何原语（如三角形、线条、曲面等）集合构建的任何物理对象的表示。以下图显示了用于创建3D模型的一些基本原语：
- en: '![](img/image_03_005.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_005.png)'
- en: Figure 3.5 Some basic primitives for 3D modeling
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 一些基本的3D建模原语
- en: 'All the 3D models and objects are created by assembling, modifying, nudging,
    and so on, these primitive shapes and objects. To understand it better, take a
    look at the following figure which shows some 2D primitives used behind the scenes
    of 2D graphics tools such as Photoshop or Gimp:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的3D模型和对象都是通过组装、修改、微调等操作这些基本形状和对象来创建的。为了更好地理解，请看以下图，它显示了在像Photoshop或Gimp这样的2D图形工具背后的场景中使用的2D原语：
- en: '![](img/image_03_006.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_006.png)'
- en: Figure 3.6 Some 2D primitives
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 一些2D原语
- en: Modelling tools
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建模工具
- en: Now that you have a good understanding of 3D models, let's move ahead in our
    discussion with the modeling tools. These 3D models are created in very advanced
    and mostly commercial tools such as Autodesk Maya, Autodesk 3D Studio Max, Blender,
    and so on. These tools offer modelers a variety of choices and features to create
    and animate the 3D models and render them in the form of images or video movies,
    or directly export them into model files.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对3D模型有了很好的理解，让我们继续讨论建模工具。这些3D模型是在非常先进且主要商业的工具中创建的，例如Autodesk Maya、Autodesk
    3D Studio Max、Blender等。这些工具为建模者提供了各种选择和功能，以创建和动画3D模型，并以图像或视频电影的形式渲染它们，或者直接将它们导出为模型文件。
- en: 'The following table shows some 3D modelling tools along with their license
    types of usage:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了某些3D建模工具及其使用许可类型：
- en: '| **Tool name** | **License type** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **工具名称** | **许可类型** |'
- en: '| Autodesk Maya | Commercial |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| Autodesk Maya | 商业 |'
- en: '| Autodesk 3D Studio Max | Commercial |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| Autodesk 3D Studio Max | 商业 |'
- en: '| Cinema 4D | Commercial |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| Cinema 4D | 商业 |'
- en: '| Cheetah 3D | Commercial |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| Cheetah 3D | 商业 |'
- en: '| Blender | General public |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| Blender | 公众 |'
- en: Table 3.1 Some 3D modeling tools
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 表3.1 一些3D建模工具
- en: 'Unity3D is not an advanced modeling tool but it offers some basic primitives
    and allows some basic modeling features as well. But, in order to create any 3D
    game or movie in Unity3D, you need more detailed 3D models in it. So, Unity3D
    allows developers and modelers to import most kinds of 3D model files to customize,
    animate, and use them in games or movies with programming as well. This feature
    makes Unity3D quite powerful indeed compared to other 2D or 3D game engines. Unity3D
    supports two types of files when it comes to import models:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Unity3D不是一个高级建模工具，但它提供了一些基本原语和一些基本的建模功能。但是，为了在Unity3D中创建任何3D游戏或电影，你需要更详细的3D模型。因此，Unity3D允许开发者和建模者导入大多数类型的3D模型文件，以便自定义、动画并在游戏中或电影中使用它们，同时也可以通过编程来实现。这个功能使Unity3D与其他2D或3D游戏引擎相比确实非常强大。在导入模型时，Unity3D支持两种类型的文件：
- en: Exported 3D file formats such as `.fbx`, `.dae`, `.obj`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出的3D文件格式，如`.fbx`、`.dae`、`.obj`。
- en: Proprietary 3D application/tool files or native files of modeling tools such
    as `.max`, or `.mb`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 专有3D应用程序/工具文件或建模工具的原生文件，例如`.max`或`.mb`。
- en: The exported files tend to be lighter in size and these files allow you to select
    the data you want to use in Unity3D at the time of exporting it. Unity3D recommends
    these types of models to use in the game or movie in order to optimize it for
    the sake of real-time rendering and high performance.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 导出的文件通常体积较小，这些文件允许你在导出时选择你想要在 Unity3D 中使用的数据。Unity3D 推荐这些类型的模型用于游戏或电影，以便优化实时渲染和高性能。
- en: The later proprietary files are the native source files of the models of tools
    such as Maya and 3D Studio Max. The biggest advantage of these files is that they
    allow for a quick iteration process of testing games/movies by seemingly re-importing
    models at the time of editing as well. But you need the licensed copy of the modeling
    tool on every computer in which you use Unity3D and the model files. These files
    are often very large and not recommended for releasing games or movies in Unity3D.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 后续的专有文件是 Maya 和 3D Studio Max 等工具的模型的原生源文件。这些文件的最大优势是它们允许在编辑时通过看似重新导入模型的方式快速迭代测试游戏/电影。但是，你需要在每个使用
    Unity3D 和模型文件的计算机上拥有建模工具的授权副本。这些文件通常非常大，不建议在 Unity3D 中发布游戏或电影。
- en: It is highly recommended to use FBX files in Unity3D as it allows for embedding
    animations and textures directly in the model itself.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议在 Unity3D 中使用 FBX 文件，因为它允许直接在模型中嵌入动画和纹理。
- en: Importing 3D models in Unity3D
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity3D 中导入 3D 模型
- en: So, after a little detailed discussion on 3D models and modeling tools, let's
    get into the real details of how to import 3D models in Unity3D. If we say this
    in terms of importing sprites, images, and sounds, it sounds similar to putting
    any 3D model file in the `Assets` folder of the project, but it actually gets
    complicated due to lots of concepts and settings involved in the process of importing
    in Unity3D.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在详细讨论了 3D 模型和建模工具之后，让我们深入了解如何在 Unity3D 中导入 3D 模型。如果我们用导入精灵、图像和声音的说法来说，它听起来与将任何
    3D 模型文件放入项目的 `Assets` 文件夹相似，但实际上由于 Unity3D 导入过程中涉及到的许多概念和设置，它实际上变得复杂。
- en: 'In this section, we will discuss how to import any 3D model in Unity. We will
    import a simple house model of FBX type in Unity now. The FBX type is short for
    Filmbox files and is used mostly in AutoCAD for CAD/CAM designing for houses,
    architectures, cars, and engineering modeling. Major 3D modeling tools also give
    the option of exporting models into `.fbx` format as well. The main advantage
    of using FBX files is that it allows developers to select which type of data should
    be exported in the file. This data can include meshes, mesh animations, rigs,
    or bone animations. We have used a simple house model as shown in the following
    figure, downloaded from The **Free 3D Models** (**t3fm**) website available for
    general public use:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何在 Unity 中导入任何 3D 模型。现在，我们将导入一个简单的 FBX 类型的房屋模型到 Unity 中。FBX 类型代表
    Filmbox 文件，主要用于 AutoCAD 的房屋、建筑、汽车和工程建模的 CAD/CAM 设计。主要的 3D 建模工具也提供了将模型导出为 `.fbx`
    格式的选项。使用 FBX 文件的主要优势是它允许开发者选择在文件中导出哪种类型的数据。这些数据可以包括网格、网格动画、骨架或骨骼动画。我们使用了一个简单的房屋模型，如图所示，从可供公众使用的
    **Free 3D Models** (**t3fm**) 网站下载：
- en: '![](img/image_03_007.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_007.jpg)'
- en: Figure 3.7 A house model
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 一座房屋模型
- en: Now, first open our 3D Free Fighter project in Unity, and you will see the Assets
    folder in the Project panel. Right-click on the Assets folder and create a new
    folder called `Models`. There are many methods of importing models into Unity3D.
    Click on the Assets menu and choose the Import New Asset... option and select
    the Farmhouse.fbx file and finally click on the Import button.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，首先在 Unity 中打开我们的 3D 自由战斗机项目，你将在项目面板中看到 Assets 文件夹。在 Assets 文件夹上右键单击，创建一个名为
    `Models` 的新文件夹。将模型导入 Unity3D 的方法有很多。点击 Assets 菜单，选择 Import New Asset... 选项，然后选择
    Farmhouse.fbx 文件，最后点击 Import 按钮。
- en: 'This whole process is as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 整个过程如图所示：
- en: '![](img/image_03_008.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_008.png)'
- en: Figure 3.8 Importing 3D model in Unity3D
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 Unity3D 中导入 3D 模型
- en: 'After importing, you will see that the file will be placed in the Models folder.
    But you will also notice that another folder with the name Materials will automatically
    be created with the model file in the Project panel, as shown in the following
    screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 导入后，你会看到文件将被放置在 Models 文件夹中。但你也注意到了，在项目面板中，与模型文件一起自动创建了一个名为 Materials 的文件夹，如图所示：
- en: '![](img/image_03_009.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_009.png)'
- en: Figure 3.9 House model in project panel
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 项目面板中的房屋模型
- en: 'Now the model is imported into Unity and it can be used in the game. You can
    drag it in the scene in a similar way as you did to add images and sprites in
    Unity3D. After dragging it into the scene, you will notice that the model is not
    colored. It''s just a single color white and gray model as shown in the following
    screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，模型已导入Unity，可以在游戏中使用。你可以以与在Unity3D中添加图像和精灵类似的方式将其拖入场景。将其拖入场景后，你会注意到模型没有着色。它只是一个单色的白灰色模型，如下面的截图所示：
- en: '![](img/image_03_010.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_010.png)'
- en: Figure 3.10 The house model in scene
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 场景中的房屋模型
- en: The reason for the disappearance of the colors, called textures and materials
    in Unity3D, is that the .FBX file of this model only contains the mesh of the
    model that is shown in the scene. The textures and materials also come separate
    from the models and can also be embedded into the model file itself. It is good
    practice to separate these files into Unity3D.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色消失的原因，在Unity3D中称为纹理和材质，是因为这个模型的.FBX文件只包含场景中显示的模型网格。纹理和材质也独立于模型存在，也可以嵌入到模型文件本身中。将文件分开到Unity3D中是一种良好的实践。
- en: The model files placed in the `Assets` folder manually are automatically imported
    into Unity3D.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将手动放置在`Assets`文件夹中的模型文件自动导入到Unity3D中。
- en: 'A model file can contain any 3D model such as any character, building, or any
    geometric shape. We have a farmhouse model imported in Unity3D. In the Scene view
    or Hierarchy panel, the imported model is placed as a game object of the model
    prefab, which is automatically created by Unity3D at the time of importing the
    models. This game object will contain all the model data such as mesh, lights,
    and so on, as the children objects of it. The following figure shows the farmhouse
    model''s game object in the Hierarchy panel:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 模型文件可以包含任何3D模型，如任何角色、建筑或任何几何形状。我们已经在Unity3D中导入了一个农舍模型。在场景视图或层次结构面板中，导入的模型被放置为模型预制件的游戏对象，这是Unity3D在导入模型时自动创建的。这个游戏对象将包含所有模型数据，如网格、灯光等，作为其子对象。以下图显示了层次结构面板中的农舍模型游戏对象：
- en: '![](img/image_03_011.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_011.png)'
- en: Figure 3.11 The Farmhouse model prefab object hierarchy
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11 农舍模型预制对象层次结构
- en: Developers often get confused after importing models with the different issues
    involved in the process. Some models become too much small in size after importing,
    or some models come rotated reversely in Unity3D. This is all about the settings
    of the model. Since these models are created in other tools such as Maya3D, the
    difference in scaling and scene settings can cause such issues.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者在导入模型后经常会对涉及的不同问题感到困惑。一些模型在导入后变得非常小，或者一些模型在Unity3D中旋转方向相反。这都是关于模型设置的问题。由于这些模型是在其他工具（如Maya3D）中创建的，缩放和场景设置的不同可能导致这些问题。
- en: 'So, in order to customize these settings more, Unity provides the properties
    of the model in the Inspector panel, which can help in setting the properties
    of the model before using it in the scene. When you select the imported model
    in the `Assets` directory, you will see some other settings in the Inspector panel,
    as shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了更详细地自定义这些设置，Unity提供了检查器面板中的模型属性，这有助于在使用场景中的模型之前设置模型的属性。当你选择`Assets`目录中的导入模型时，你将在检查器面板中看到一些其他设置，如下面的截图所示：
- en: '![](img/image_03_012.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_012.png)'
- en: Figure 3.12 Farmhouse model settings
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12 农舍模型设置
- en: 'As you can see in the preceding screenshot, a model file contain three kinds
    of data presented in tabs form in the settings: Model, Rig, and Animations. The
    Model tab includes all the data related to the mesh, materials, and the model
    itself. The Rig tab and Animations tab allow developers to set the animation behavior
    of the model, either with the embedded animations in the model file itself or
    from other animation clips in Unity3D. We will discuss these details later in
    this chapter. Although there are lots of settings in the Model tab itself, we
    will discuss only some of the important settings which are used generally when
    importing FBX models in Unity3D:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，模型文件包含三种在设置中以标签形式呈现的数据：模型、绑定和动画。模型标签包括与网格、材质和模型本身相关的所有数据。绑定标签和动画标签允许开发者设置模型的动画行为，无论是使用模型文件本身嵌入的动画，还是从Unity3D中的其他动画剪辑中设置。我们将在本章后面讨论这些细节。尽管模型标签本身有很多设置，但我们只讨论一些在Unity3D中导入FBX模型时通常使用的设置：
- en: '**Scale**: This scale factor is used for removing the gap between the units
    system in Unity3D and the units system in the modeling tool in which the model
    has been created. Unity3D generally refers to one unit of the scale factor as
    one meter. So, developers should set the scale factor accordingly. Normally, this
    is set to 1.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**缩放**：此缩放因子用于消除Unity3D中的单位系统与创建模型时所使用的建模工具中的单位系统之间的间隙。Unity3D通常将缩放因子的一个单位视为一米。因此，开发人员应相应地设置缩放因子。通常，这设置为1。'
- en: '**Generate colliders**: This check allows developers to automatically generate
    colliders for the mesh and model for the collision detection. Keep in mind that
    with this check enabled, Unity3D will create mesh colliders, which can sometimes
    result in very heavy processing, depending on the mesh itself. So, if you want
    the customized colliders, you can customize, or create your mesh collider in Unity
    as well.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生成碰撞体**：此复选框允许开发者为网格和模型自动生成碰撞检测的碰撞体。请注意，启用此复选框时，Unity3D将创建网格碰撞体，这有时会导致非常重的处理，具体取决于网格本身。因此，如果您想自定义碰撞体，您可以在Unity中自定义，或者创建自己的网格碰撞体。'
- en: These two settings will set the model to a good condition. We should be reminded
    that our model is still in a single color and we haven't yet imported textures
    and materials to it. So in the next section, we will discuss about applying textures
    and materials on the model objects.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个设置将使模型处于良好状态。我们应该提醒自己，我们的模型仍然是单色的，我们还没有将其导入纹理和材质。因此，在下一节中，我们将讨论在模型对象上应用纹理和材质。
- en: 'The default scale factor for different 3D models is as follows: `.fbx`, `.max,`
    `.jas`, `.c4d` = 0.01, `.mb`, `.ma`, `.lxo`, `.dxf`, `.blend`, `.dae` = 1, `.3ds`
    = 0.1.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 不同3D模型的默认缩放因子如下：`.fbx`, `.max,` `.jas`, `.c4d` = 0.01, `.mb`, `.ma`, `.lxo`,
    `.dxf`, `.blend`, `.dae` = 1, `.3ds` = 0.1。
- en: Importing FBX Model
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入FBX模型
- en: 'FBX is the abbreviation of Filmbox. Unity supports FBX files which can be generated
    from many popular 3D applications. Be aware of export scope, for example, meshes,
    cameras, lights, animation rigs, and so on:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: FBX是Filmbox的缩写。Unity支持可以由许多流行的3D应用程序生成的FBX文件。请注意导出范围，例如网格、相机、灯光、动画装置等：
- en: Applications often let you export selected objects or a whole scene
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序通常允许您导出选定的对象或整个场景
- en: Make sure you are exporting only the objects you want to use from your scene
    by either exporting selected data, or removing unwanted data from your scene.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您只导出场景中需要使用的对象，可以通过导出选择的数据或从场景中移除不需要的数据来实现。
- en: Good working practice often means keeping a working file with all lights, guides,
    control rigs etc. but only exporting the data you need with export selected, an
    export preset, or even a custom scene exporter.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 良好的工作习惯通常意味着保留一个包含所有灯光、引导、控制装置等的工作文件，但只通过选择导出数据、使用导出预设或甚至自定义场景导出器来导出所需的数据。
- en: 'See the following figure to determine the difference between OBJ and FBX:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下图以确定OBJ和FBX之间的差异：
- en: '![](img/image_03_047.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_047.jpg)'
- en: In Unity asset store, many 3d models are available free or paid, that can be
    easily used in any game. Also you can find on internet many website are available
    where user sell or royalty-free 3D models ([http://tf3dm.com](http://tf3dm.com/))
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity资产商店中，许多3D模型免费或付费提供，可以轻松地用于任何游戏。您还可以在互联网上找到许多网站，用户在那里出售或提供免版税3D模型（[http://tf3dm.com](http://tf3dm.com/)）
- en: 'So, we have modelled a house in 3D Max, and exported it into FBX format; remember
    in that model we have only mash, do right click in the Project panel then click
    Import New Asset..., then browse you FBX model path and click import button. Unity
    provides us also with a drag and drop feature so we can drop an fbx model into
    the Project panel. The following figure shows how to import a model into the scene
    by clicking the Import New Asset... button:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在3D Max中建模了一个房子，并将其导出为FBX格式；记住，在那个模型中我们只有网格，然后在项目面板中右键单击，然后点击“导入新资产...”，然后浏览您的FBX模型路径并点击导入按钮。Unity还提供了一个拖放功能，我们可以将fbx模型拖放到项目面板中。以下图显示了如何通过点击“导入新资产...”按钮将模型导入场景：
- en: '![](img/image_03_048.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_048.jpg)'
- en: 'You can see the FBX model in the Project panel the better way to go forward
    your project in managed way so create empty folder name as Model in root, then
    drop your fbx file and material folder of it into the Model folder. The following
    figure depicts the drop FBX model into the Model folder:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在项目面板中看到FBX模型，这是以管理方式推进项目的更好方式，因此创建一个名为“模型”的空文件夹，然后在根目录中将其拖放到模型文件夹中。以下图显示了将FBX模型拖放到模型文件夹中的情况：
- en: '![](img/image_03_049.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_049.jpg)'
- en: Now go to the Model folder and drag Farmhouse FBX.fbx file and drop it into
    the Hierarchy panel; if the models showing are small, that means the scale of
    models are small, to increase the scale size of model select Farmhouse FBX.fbx
    from the Project panel, you will see 3 tabs in Inspector panel named Model, Rig
    and Animations, we focus on model for now model are selected by default. In the
    first textbox, Scale Factor, do change value 1 to whatever you need let suppose
    10, then click on Apply button end of Model panel.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到模型文件夹，将 Farmhouse FBX.fbx 文件拖动到层次面板中；如果显示的模型很小，这意味着模型的缩放比例很小，要增加模型缩放大小，请从项目面板中选择
    Farmhouse FBX.fbx，你将在检查器面板中看到 3 个标签页，分别命名为模型、绑定和动画，我们现在专注于模型，模型默认被选中。在第一个文本框中，缩放因子，将值
    1 改为你需要的任何值，比如 10，然后点击模型面板末尾的“应用”按钮。
- en: 'Consider the following figure for illustrating the increase in the scale size
    of the model:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下图示来说明模型缩放大小的增加：
- en: '![](img/image_03_050.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_050.jpg)'
- en: Applying textures and materials
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用纹理和材质
- en: 'When it comes to 3D modeling, textures and materials become tricky as they
    give life to models. The 3D modeling tools give quite a lot of flexibility to
    modelers and designers to work together and create amazing textures and convert
    them from simple images to 3D working models. Looking from a graphics and designing
    perspective, there are three components to materialize the model: textures, shaders,
    and materials. Unity3D gives lot of options to customize these three parts and
    lets developers create exactly what they want that model to look like. These three
    components are connected in such a way that developers can easily change and alter
    each component individually and see its results on the model in real-time. The
    following figure shows the connection of these three components:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到 3D 建模时，纹理和材质变得复杂，因为它们赋予了模型生命。3D 建模工具为建模者和设计师提供了相当多的灵活性，以便他们可以一起工作并创建令人惊叹的纹理，并将它们从简单的图像转换为
    3D 工作模型。从图形和设计角度来看，有三种组件可以实体化模型：纹理、着色器和材质。Unity3D 提供了许多选项来自定义这三个部分，并允许开发者创建他们想要的模型外观。这三个组件以这种方式连接，使得开发者可以轻松地单独更改和修改每个组件，并实时看到它们对模型的影响。以下图示展示了这三个组件的连接：
- en: '![](img/image_03_013.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_013.jpg)'
- en: Figure 3.13 Connection between textures, shades, and materials
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 纹理、阴影和材质之间的连接
- en: You can see in the preceding figure that textures are not directly applied on
    the model. Instead, they are applied on the materials and the materials are then
    applied on the model. Materials also add some materializing properties in order
    to behave with the lights present in the scene to make the model look 3D in the
    2D world of the computer screen. Let's give a little detail to each component
    in the following sub-sections.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在前面的图中看到纹理不是直接应用于模型。相反，它们应用于材质，然后材质再应用于模型。材质还添加了一些材质化属性，以便与场景中的灯光相互作用，使模型在计算机屏幕的二维世界中看起来像
    3D。以下小节中我们将对每个组件进行详细说明。
- en: Textures
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纹理
- en: Generally, the mesh object gives a rough approximation of the shape of the model
    and how it will look like, but it's the textures that define the shape itself
    and present it in a real form from the perspective of the viewer. Textures are
    the flat bitmap images that are wrapped on the model mesh surface. The easiest
    example would be to think of them as the image that is printed on any 3D model,
    such as any cylinder or cube or any complex model such as our farmhouse.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，网格对象给出了模型形状的大致近似以及它将看起来如何，但定义形状本身并将其以观众视角的真实形式呈现的是纹理。纹理是包裹在模型网格表面的平面位图图像。最简单的例子就是想象它们是打印在任意
    3D 模型上的图像，比如任何圆柱体、立方体或任何复杂模型，比如我们的农舍。
- en: 'The following figure shows this scenario:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了这一场景：
- en: '![](img/image_03_014.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_014.png)'
- en: Figure 3.14 Texture on 3D model
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 3D 模型上的纹理
- en: Texture Importer
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纹理导入器
- en: 'All the texture exist in the `Project` folder in the image form. Unity gives
    to change the type of texture--after importing a texture you just select texture
    from the project panel and modify from the topmost item in the inspector. That
    allows you to select the type of texture you want to create from the source image
    file. All the types of texture are shown in the following figure:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 所有纹理都以图像形式存在于项目文件夹中。Unity 允许你更改纹理类型--在导入纹理后，你只需从项目面板中选择纹理，并在检查器中的最顶部进行修改。这允许你从源图像文件中选择你想要创建的纹理类型。以下图示显示了所有纹理类型：
- en: '![](img/image_03_051.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_051.jpg)'
- en: Applying texture in shaders
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在着色器中应用纹理
- en: The shaders you use for your objects put specific requirements on which textures
    you need, but the basic principle is that you can put any image file inside your
    project. If it meets the size requirements (specified in the following text),
    it will get imported and optimized.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你为对象使用的着色器对所需的纹理有特定的要求，但基本原理是你可以将任何图像文件放入你的项目中。如果它满足以下文本中指定的尺寸要求，它将被导入并优化。
- en: 'There are certain steps to put texture in shaders:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将纹理放入着色器中有一系列步骤：
- en: After selecting Model, shaders will be visible in the Inspector panel.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择模型后，着色器将在检查器面板中可见。
- en: Texture button is present in it, click on it for applying texture.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 材质中包含纹理按钮，点击它以应用纹理。
- en: Select Texture, so that our 3D model will be wrapped in our selected texture.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择纹理，这样我们的3D模型就会被我们选择的纹理包裹。
- en: 'This is represented in the following figure:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下图中表示：
- en: '![](img/image_03_052.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_052.jpg)'
- en: Unity can read the following file formats for texture PSD, TIFF, JPG, TGA, PNG,
    GIF, BMP, IFF, and PICT. It should be noted that Unity can import multi-layer
    PSD and TIFF files.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Unity可以读取以下文件格式作为纹理：PSD、TIFF、JPG、TGA、PNG、GIF、BMP、IFF和PICT。应注意的是，Unity可以导入多层的PSD和TIFF文件。
- en: Shaders
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 着色器
- en: In computer graphics, shaders are a little hard to understand for newbies. A
    texture tells the viewer of what is drawn on the surface and mesh of the 3D model
    object, but it is the shader that tells how that texture is drawn. As we saw earlier
    in *Figure 3.13*, a material is a mixture of textures and shaders. A material
    contains the properties and textures, and a shader tells us which properties and
    shaders a material can have. Let's take an example to understand this concept
    better. Imagine you have a piece of wood. The shape of the piece is the mesh object
    of the 3D model. And the color, wooden pattern, and other visible elements on
    the shape are the textures of the 3D model. Now if you drop that wooden piece
    in the water, then it will look a little different than the original wooden piece.
    Note that it is still the same mesh with the same textures, but it will look different
    when it is dropped in the water. That difference in the visibility is defined
    by the shader in Unity3D. The water is the shader in this example. We will discuss
    about how these are made and applied in Unity3D later in this book.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机图形学中，着色器对于新手来说有点难以理解。纹理告诉观众3D模型对象表面和网格上绘制了什么，但着色器告诉如何绘制该纹理。正如我们之前在*图3.13*中看到的，材质是纹理和着色器的混合物。材质包含属性和纹理，着色器告诉我们材质可以具有哪些属性和着色器。让我们通过一个例子来更好地理解这个概念。想象你有一块木头。这块木头的形状是3D模型的网格对象。颜色、木纹和其他可见元素是3D模型的纹理。现在，如果你把这块木头放入水中，它看起来会比原来的木头略有所不同。请注意，它仍然是相同的网格和相同的纹理，但放入水中时看起来会不同。这种可见性的差异是由Unity3D中的着色器定义的。在这个例子中，水就是着色器。我们将在本书的后面部分讨论如何在Unity3D中制作和应用这些着色器。
- en: Materials
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材质
- en: 'In simple terms, materials define how a surface should be rendered in computer
    graphics. It is not just a container of textures and shaders. Rather it comes
    with many different properties which vary on the shader itself and gets the reference
    of the textures to further define the final visibility of the model itself. The
    following figure shows the difference in two materials with different shaders:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，材质定义了在计算机图形中表面应该如何渲染。它不仅仅是一个纹理和着色器的容器。相反，它带有许多不同的属性，这些属性根据着色器本身而变化，并获取纹理的引用以进一步定义模型的最终可见性。以下图显示了两种不同着色器的材质差异：
- en: '![](img/image_03_015.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_015.jpg)'
- en: Figure 3.15 Materials with different shaders in Unity
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15 Unity中不同着色器的材质
- en: Note the little shine in the left-side material. The reason for this is the
    specular shader and the right-side material is using the diffuse shader. Both
    have common properties such as color, base texture, and so on. Unity comes with
    a lot of built-in shaders, and you can also write your own custom shaders to further
    polish and define the look of the model.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意左侧材质中的微光。这是因为高光着色器，而右侧材质使用的是漫反射着色器。两者都有共同的属性，如颜色、基础纹理等。Unity自带了许多内置的着色器，你也可以编写自己的自定义着色器来进一步润色和定义模型的视觉效果。
- en: Applying textures on a farmhouse model
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在农场模型上应用纹理
- en: So far, we have given an overview of textures, shaders, and materials, and how
    they are all connected with each other. But, don't forget that we have an imported
    model of the farmhouse in our scene which appears in the shade of a white and
    gray color. Now, we have to apply texture on it and create a material for the
    model. Unity provides a very easy and convenient way of applying textures on the
    models.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经概述了纹理、着色器和材质，以及它们如何相互关联。但不要忘记，在我们的场景中有一个导入的农舍模型，它以白色和灰色阴影的形式出现。现在，我们必须在它上面应用纹理并为模型创建材质。Unity提供了一个非常简单且方便的方法来在模型上应用纹理。
- en: 'Create a new folder called `Textures` in the `Assets` folder, and load the
    image shown in the following figure in that folder by using the normal file explorer
    or dragging the image into the folder in Unity3D:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Assets`文件夹中创建一个名为`Textures`的新文件夹，并使用常规文件浏览器或通过将图像拖动到文件夹中在Unity3D中加载以下图示中的图像：
- en: '![](img/image_03_016.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_016.jpg)'
- en: Figure 3.16 Farmhouse model texture
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16 农舍模型纹理
- en: 'Once it is imported in the `Assets` folder, you have to apply it on the model
    placed in the Scene view. Drag the texture from the `Assets` folder and drop it
    on the model in the Scene view and Unity will automatically create a material
    and do the rendering stuff for you. You can then further customize it according
    to your requirements. The following figure shows the process of applying textures
    on the material:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它被导入到`Assets`文件夹中，你必须将其应用到场景视图中放置的模型上。从`Assets`文件夹中拖动纹理并将其放置在场景视图中的模型上，Unity将自动创建材质并为你完成渲染工作。然后你可以根据你的需求进一步自定义它。以下图示展示了在材质上应用纹理的过程：
- en: '![](img/image_03_017.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_017.png)'
- en: Figure 3.17 Farmhouse model texture
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17 农舍模型纹理
- en: 'After applying the texture, you will observe that the farmhouse will be in
    the color form and will look much more realistic now. The following figure shows
    the simple comparison between before texture and after texture of the farmhouse
    model and its properties in the Inspector panel:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用纹理后，你会观察到农舍将呈现为彩色形式，现在看起来更加逼真。以下图示展示了农舍模型在纹理前后以及其在检查器面板中的属性之间的简单比较：
- en: '![](img/image_03_018.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_018.png)'
- en: Figure 3.18 Comparison between before texture and after texture
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18 纹理前后对比
- en: Note that before texture, Unity3D has applied a default texture of the farmhouse
    texture with the standard shader on the model, which makes it look like a white
    color. While after texture is applied, Unity puts a numbered name of the texture
    (called **Farmhouse Texture 6** in the image). Refer to the label number 1 in
    the preceding figure for the shader. You can also note that the Albedo property
    (labelled as number 2 in the figure) was empty before but now it is filled with
    our texture image. You can also apply texture by clicking on the little square
    shape on the side of Albedo. It will open a popup of the `Assets` explorer panel,
    through which you can select your required texture from Assets and it will be
    applied on the model.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在应用纹理之前，Unity3D已经为模型应用了一个默认的农舍纹理，并使用了标准着色器，这使得它看起来是白色的。而纹理应用之后，Unity会在纹理上放置一个编号的名称（在图中称为**Farmhouse
    Texture 6**）。参考前图中标签编号1处的着色器。你还可以注意到，Albedo属性（如图中标签编号2所示）在之前是空的，但现在它被我们的纹理图像填充了。你还可以通过点击Albedo旁边的方形图标来应用纹理。这将打开一个`Assets`资源管理器面板的弹出窗口，通过该窗口你可以从资源中选择所需的纹理，并将其应用到模型上。
- en: Generic and humanoid rigs
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用和人类机器人
- en: Although we have discussed the models and how to import these models in Unity3D,
    we have not talked about what those models should be or which types of models
    are preferred by the game engine. A model can include anything from a simple cube
    with texture to furniture and homes to life characters and aliens to space orbits
    and planets. In most cases, games are more about the interactive storyline, which
    involves lots of characters (mostly humans) with many kinds of emotions and expressions.
    Unity3D, being a very easy to learn and use platform for game development, took
    this task of providing characters and humans support and offers a highly flexible
    and fully featured set of tools to handle, animate, and manage character models
    in a very easy way.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经讨论了模型以及如何在Unity3D中导入这些模型，但我们还没有谈到这些模型应该是什么，或者游戏引擎更倾向于哪种类型的模型。一个模型可以包括从简单的带纹理的立方体到家具和住宅，再到生命角色和外星人，以及太空轨道和行星。在大多数情况下，游戏更注重交互式剧情，这涉及到许多角色（主要是人类），他们有着各种各样的情感和表情。Unity3D作为一个非常容易学习和使用的游戏开发平台，承担了提供角色和人类支持的任务，并提供了一套高度灵活且功能齐全的工具，可以非常容易地处理、动画化和管理角色模型。
- en: What are humanoid characters?
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人形角色是什么？
- en: As it is clear in the word *humanoid* itself, humanoid characters are the characters
    based on humans. It is not necessary to be a human, but it should be based on
    the physical shape of humans. The monkey model is a great example of a humanoid
    model. It could be a two-legged alien and so on. Since most games contain humanoid
    models, to make things easier, Unity3D provides good feature set for working with
    humanoid models.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如“人形”这个词本身所清楚的那样，人形角色是基于人类的角色。不一定是人类，但应该基于人类的物理形状。猴子模型是人形模型的一个很好的例子。它可以是两足外星人等等。由于大多数游戏都包含人形模型，为了简化问题，Unity3D为人形模型提供了良好的功能集。
- en: There are a lot of free and paid resources to get humanoid models from the Internet.
    Or you can create your own humanoid models using tools such as Poser, MakeHuman,
    or Mixamo. Some of these tools also provide features for rigging and adding skin
    on the model as well.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 从互联网上可以获取大量免费和付费的人形模型资源。或者，您可以使用Poser、MakeHuman或Mixamo等工具创建自己的人形模型。其中一些工具还提供了绑定和为模型添加皮肤的功能。
- en: Rigging, in simple words, is the process of adding a skeleton and joining bones
    in any 3D model.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，绑定是指为任何3D模型添加骨骼并连接骨骼的过程。
- en: 'You can also get many free and paid humanoid models of various varieties such
    as males, females, old characters, warriors, fighters, force characters, and so
    on, from the Asset Store. Humanoid characters mostly possess bone structure, skin
    muscles, and textures for costumes or clothing. The bone structure or skeleton,
    as it is called in real life, is the important thing in any humanoid character.
    It allows us to repose and animate other humanoid characters with the same skeleton
    or, as it''s called **rigging**. The following figure shows a simple human character
    with its skin, rigging, and muscles:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从Asset Store获取许多免费和付费的各种各样的人形模型，如男性、女性、老角色、战士、格斗家、力量角色等。人形角色通常具有骨骼结构、皮肤肌肉和用于服装或衣物的纹理。骨骼结构或骨骼，在现实生活中被称为骨骼，是人形角色的关键部分。它允许我们使用相同的骨骼或称为**绑定**来重新定位和动画化其他人形角色。以下图示显示了一个简单的人形角色及其皮肤、绑定和肌肉：
- en: '![](img/image_03_019.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_019.png)'
- en: Figure 3.18 A simple humanoid character with skin mesh (left), rigging (middle),
    and muscles (right)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18 一个简单的人形角色，带有皮肤网格（左）、绑定（中）和肌肉（右）
- en: It should be noted that any humanoid character will have the rigging structure
    as shown in the previous figure. We will discuss about rigging in the later sections
    in more detail. Now, we will discuss about what kind of tools are offered by Unity3D
    for humanoid character models and how they are used. We will learn this by importing
    a freely available character model from the Unity Asset store.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，任何人形角色都将具有如图所示的结构。我们将在后面的章节中更详细地讨论绑定。现在，我们将讨论Unity3D为人类角色模型提供的工具类型以及它们的使用方法。我们将通过从Unity
    Asset Store导入一个免费的角色模型来学习这一点。
- en: The Unity Asset store ([http://assetstore.unity3d.com](http://assetstore.unity3d.com))
    is an online marketplace from Unity3D for the assets and ready-made toolkits,
    add-ons, extensions, and code for usage in Unity games, and is available in free
    and paid versions.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Asset Store ([http://assetstore.unity3d.com](http://assetstore.unity3d.com))
    是Unity3D的一个在线市场，提供用于Unity游戏的资产和现成工具包、插件、扩展和代码，有免费和付费版本。
- en: Importing humanoid models
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入人形模型
- en: Let's start learning how to import humanoid models into Unity. We will start
    from creating an empty project called Humanoid Character. As the project is built
    and compiled successfully, we have an empty project with an empty scene opened
    as always.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习如何将人形模型导入Unity开始。我们将从创建一个名为Humanoid Character的空项目开始。随着项目的成功构建和编译，我们就像往常一样打开一个空场景，得到了一个空项目。
- en: 'Now, there is nothing different about humanoid models when it comes to modeling
    formats. A humanoid model is a simple model of file types we discussed in previous
    sections, such as FBX, MB, 3DS, and so on. We can import those by dragging and
    dropping the file from the File Explorer into Unity or by manually importing it
    with the menu option of Import New Asset... as well. In this example, we will
    use a freely available model from the Unity Asset Store. The asset name is Raw
    Mocap Data for Mecanim and it includes a character developed by Unity3D and a
    huge collection of animations such as moving forward, backward, jump, crawl, and
    so on. This can be found at: [https://www.assetstore.unity3d.com/en/#!/content/5330](https://www.assetstore.unity3d.com/en/#!/content/5330).
    Paste this URL into your browser, and click on the Open in Unity button, and it
    will open Unity3D and show the Asset Store panel with the asset on it, as shown
    in the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当涉及到建模格式时，人形模型并没有什么不同。人形模型是我们之前章节中讨论的简单模型文件类型，例如FBX、MB、3DS等。我们可以通过从文件资源管理器拖放文件到Unity中，或者通过使用菜单选项导入新资产...手动导入。在这个例子中，我们将使用Unity
    Asset Store中免费提供的模型。资产名称为Raw Mocap Data for Mecanim，它包括由Unity3D开发的角色以及大量动画，如向前移动、向后移动、跳跃、匍匐前进等。可以在以下位置找到：[https://www.assetstore.unity3d.com/en/#!/content/5330](https://www.assetstore.unity3d.com/en/#!/content/5330)。将此URL粘贴到你的浏览器中，然后点击Open
    in Unity按钮，它将打开Unity3D并显示带有资产的Asset Store面板，如下截图所示：
- en: '![](img/image_03_020.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_020.png)'
- en: Figure 3.19 Unity Asset Store panel in Unity3D
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19 Unity3D中的Unity Asset Store面板
- en: 'Now, if you have already downloaded this asset into your local computer, then
    it will show you the Import button; otherwise, it will show you the Download button.
    Download and then import this asset into your Unity project and it will show you
    a dialog panel with the list of all the files to be imported. This is to let developers
    know which files are new and which files will get replaced with this asset package.
    This is shown in the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你已经将此资产下载到你的本地计算机上，那么它将显示导入按钮；否则，它将显示下载按钮。下载并将此资产导入到你的Unity项目中，它将显示一个包含所有要导入的文件列表的对话框面板。这是为了让开发者知道哪些文件是新的，哪些文件将被此资产包替换。如下截图所示：
- en: '![](img/image_03_021.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_021.png)'
- en: Figure 3.20 Raw Mocap data files before importing
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.20 导入前的原始Mocap数据文件
- en: 'We have an empty project, so it is showing the NEW tab in front of all the
    files. For now, click on the All button on the bottom left section of the panel
    and then click on the Import button. This will take a little time to import, decompress,
    and import all the assets into the project. Once it is done, you will notice a
    new directory called Raw Mocap Data in your `Assets` folder. This is where all
    the files and asset data have been placed. This is shown in the following figure:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个空项目，因此它显示了所有文件前面的NEW标签。现在，点击面板左下角的All按钮，然后点击Import按钮。这将花费一些时间来导入、解压缩并将所有资产导入到项目中。一旦完成，你会在`Assets`文件夹中注意到一个新的目录叫做Raw
    Mocap Data。这就是所有文件和资产数据被放置的地方。如下图所示：
- en: '![](img/image_03_022.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_022.png)'
- en: Figure 3.21 Raw Mocap data files into Assets after importing
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21 导入后原始Mocap数据文件放入Assets中
- en: 'Since this section is all about the model and its settings, we will ignore
    the Animations directory for now. In the Raw Mocap Data directory, you will observe
    a model called the DefaultAvatar file. This is technically an FBX file, if you
    see it in File Explorer and FBX files are the most preferred model files in Unity3D.
    When you select it, you will see the Rig tab of settings selected in the Inspector panel
    along with some predefined import options as shown in the following figure:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本节全部关于模型及其设置，我们现在暂时忽略动画目录。在原始Mocap数据目录中，你会看到一个名为DefaultAvatar的模型文件。从技术上讲，这是一个FBX文件，如果你在文件资源管理器中看到它，并且FBX文件是Unity3D中最受欢迎的模型文件。当你选择它时，你会在检查器面板中看到选中的设置标签页，以及一些预定义的导入选项，如下图所示：
- en: '![](img/image_03_023.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_023.png)'
- en: Figure 3.22 Default avatar model import settings in the Inspector
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22 检查器中默认头像模型的导入设置
- en: This model comes with many materials placed in the Materials directory, which
    are assigned on the character and show its skin and clothing, as we can see in
    the small preview section in the preceding figure. There is also the Animations
    directory with a text file containing the animations list. We will talk about
    those animations in later sections.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型包含许多材料，它们放置在“材料”目录中，并分配到角色上，显示其皮肤和服装，正如我们可以在前一个图中的小预览部分中看到的那样。还有一个包含动画列表文本文件的“动画”目录。我们将在后面的章节中讨论这些动画。
- en: So, let's select the Rig tab, if it is not already selected from the Inspector
    panel, and discuss the different options there. You will notice that Animation
    Type is already selected as the Humanoid option. When any model file is imported
    in Unity, it automatically tries to detect the type of the model by comparing
    its rigging structure with a predefined humanoid structure and create an automatic
    avatar for it. We will discuss this predefined humanoid skeleton structure in
    the later sections. If it is matched successfully, Unity associates the Animation
    Type to Humanoid; otherwise it sets it to Generic. There are also two more options,
    namely None and Legacy. The None option allows Unity to ignore the whole rigging
    and let the humanoid be without any bones and animations. The Legacy option is
    the older method for handling humanoid characters and it is now deprecated and
    not recommended to use. You can also manually change the Animation Type option
    of the model. The Generic type option is used to tell Unity that a character is
    not humanoid. For example, it can be some six-legged alien or any horse model,
    or any strange kind of spider, or any static tree, and so on.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们选择“骨架”选项卡，如果它还没有从检查器面板中选择，然后讨论那里的不同选项。你会注意到“动画类型”已经选为“人类”选项。当任何模型文件被导入Unity时，它会自动尝试通过将其骨架结构与预定义的人类结构进行比较来检测模型类型，并为它创建一个自动的化身。我们将在后面的章节中讨论这个预定义的人类骨骼结构。如果匹配成功，Unity会将动画类型关联到人类；否则，它将其设置为通用。还有两个其他选项，即“无”和“旧版”。“无”选项允许Unity忽略整个骨架，让人类没有骨骼和动画。而“旧版”选项是处理人类角色的较老方法，现在已弃用，不推荐使用。你还可以手动更改模型的动画类型选项。通用类型选项用于告诉Unity该角色不是人类。例如，它可以是某种六足外星生物或任何马模型，或者任何奇怪的蜘蛛，或者任何静态的树，等等。
- en: Below the Animation Type, you will see the Avatar Definition option. Basically,
    when any humanoid model is imported in Unity, it starts looking for the avatar
    of the model. An avatar in Unity is a simple skeleton that provides a way to control
    the mesh, skin, and materials of the model to animate, move, and so on. If the
    model is already rigged properly and is humanoid, Unity will automatically create
    an avatar from this model file. We can also copy an avatar from any other model
    file as well using the Copy From Other Avatar option. The copying option will
    ask for the source avatar, and put the new skeleton in the current model. It is
    like putting one character's rigging into another's body mesh. It is a very powerful
    feature of Unity3D and makes character handling a lot easier.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在“动画类型”下方，你会看到“化身定义”选项。基本上，当任何人类模型被导入Unity时，它会开始寻找该模型的化身。在Unity中，化身是一个简单的骨骼，它提供了一种控制模型网格、皮肤和材料以进行动画、移动等方法。如果模型已经正确设置骨架并且是人类，Unity将自动从这个模型文件创建化身。我们还可以使用“从其他化身复制”选项从任何其他模型文件复制化身。复制选项将要求源化身，并将新的骨骼放入当前模型中。这就像将一个角色的骨架放入另一个角色的身体网格中。这是Unity3D的一个非常强大的功能，使得角色处理变得容易得多。
- en: The next option is the Configure button with a small tick icon. This icon informs
    us whether our model is okay to use or not. In simple words, Unity tries to create
    an avatar automatically from the model and this icon shows whether Unity has been
    able to do it or not. Select the None option from the Animation Type and then
    again select the Humanoid option. Now you will see the three dots symbol before
    the Configure button. This tells that the model is not configured yet and the
    avatar is not created yet. That means Unity hasn't yet acknowledged whether the
    model file is humanoid or not. You can click on Apply, and Unity will try to automatically
    detect its humanoid characteristics and create an automatic avatar. If the model
    is humanoid, then the icon will be changed to a tick icon; otherwise, it will
    be changed into a cross icon, indicating that the model is not properly configured
    and is not humanoid.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个选项是带有小勾选图标的“配置”按钮。这个图标告诉我们我们的模型是否可以使用。简单来说，Unity试图从模型中自动创建一个虚拟形象，这个图标显示Unity是否能够完成这项任务。从动画类型中选择“无”选项，然后再次选择“人类”选项。现在你会在“配置”按钮前看到三个点符号。这表示模型尚未配置，虚拟形象也尚未创建。这意味着Unity尚未确认模型文件是否为人类。您可以点击“应用”，Unity将尝试自动检测其人类特征并创建自动虚拟形象。如果模型是人类，则图标将更改为勾选图标；否则，它将变为叉号图标，表示模型配置不正确，不是人类。
- en: 'The following figure shows all the different states of configuration of the
    humanoid model:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图显示了人类模型配置的所有不同状态：
- en: '![](img/image_03_024.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_024.png)'
- en: Figure 3.23 Different states of configuration of the humanoid model
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.23 人类模型配置的不同状态
- en: We have learned that Unity automatically tries to detect whether the model is
    humanoid or not and tries to configure it properly by creating an automatic avatar
    with its pre-defined humanoid rigging. But, we still don't know how Unity does
    that and what kind of benefits and customizations can be made in the process of
    Unity to achieve the requirements of our own characters of the game. In the next
    section, we will discuss about how any character is configured to be a humanoid
    in Unity and how automatic avatar creation works.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解到Unity会自动尝试检测模型是否为人类，并尝试通过创建具有预定义人类绑定的自动虚拟形象来正确配置它。但是，我们仍然不知道Unity是如何做到这一点的，以及在进行Unity配置过程中可以做出哪些改进和定制。在下一节中，我们将讨论任何角色如何在Unity中配置为人类，以及自动虚拟形象创建是如何工作的。
- en: Configuring the avatar of humanoid models
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置人类模型虚拟形象
- en: Since the avatar defines the whole rigging and skeleton structure of humanoid
    models in Unity, it is very important that it is configured properly for the model.
    We shouldn't depend on the results of automatic avatar creation of Unity. Whether
    it is configured properly with the tick icon or not configured with a cross icon,
    you need to go into the Configure Avatar mode to personally ensure that the avatar
    is properly set up and is valid for use in the game. This is a very important
    requirement for the whole character animation called the **MecAnim System**, which
    we will discuss in the next section.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 由于虚拟形象定义了Unity中人类模型的整体绑定和骨骼结构，因此确保其正确配置对于模型来说非常重要。我们不应该依赖于Unity自动创建虚拟形象的结果。无论是否带有勾选图标配置正确，还是带有叉号图标未配置，您都需要进入“配置虚拟形象”模式，亲自确保虚拟形象设置正确且适用于游戏。这是整个角色动画系统**MecAnim系统**的一个重要要求，我们将在下一节中讨论。
- en: 'Now, as shown in the preceding figure, click on the Configure... button. It
    will ask you to save the current scene if it''s not already saved, and will open
    a new scene as shown in the following screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如图所示，点击“配置...”按钮。如果当前场景尚未保存，它将要求您保存当前场景，并打开一个新场景，如图下截图所示：
- en: '![](img/image_03_025.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_025.png)'
- en: Figure 3.24 Avatar configuration scene
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24 虚拟形象配置场景
- en: 'You can observe that a new scene is opened with our character model placed
    at the center of the Scene View. In the Inspector panel, a 2D human character
    is shown with a lot of green circles within the body of it, as shown in the following
    figure:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以观察到，打开了一个新场景，我们的角色模型位于场景视图的中心。在检查器面板中，显示了一个2D人类角色，其体内有许多绿色圆圈，如图下所示：
- en: '![](img/image_03_026.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_026.png)'
- en: Figure 3.25 View of avatar of humanoid character
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25 人类角色虚拟形象视图
- en: This area consists of two tabs, Mapping and Muscles & Settings, with the first
    one already selected. In the Mapping tab, there is a human body with green circles
    of solid strokes and dashed strokes placed inside it. These circles map the bones'
    game objects with the joints of the human body so that it can behave that way.
    The circles with solid strokes are required to associate with any bone game object.
    Even if a single required circle is not mapped correctly, then the avatar will
    not be configured and show a red circle, as shown in Figure 3.25 on the right
    side.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此区域由两个标签页组成，映射和肌肉与设置，其中第一个已选中。在映射标签页中，有一个带有绿色实线和虚线圆圈的人体，圆圈映射了骨骼的游戏对象与人体关节，以便它能够那样表现。实线圆圈需要与任何骨骼游戏对象关联。即使单个必需的圆圈没有正确映射，角色配置也不会设置，并显示一个红色圆圈，如图3.25右侧所示。
- en: To improve your chances of finding a match to an avatar, name your bones in
    a way that reflects the body parts they represent such as LeftArm, RightForearm,
    and so on.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高找到匹配角色的机会，请以反映它们所代表的身体部位的方式命名你的骨骼，例如LeftArm（左臂）、RightForearm（右前臂）等。
- en: 'In the Inspector view, you can also observe other buttons aligned vertically:
    Body, Head, Left Hand, and Right Hand. As a body is shown in the Inspector, other
    buttons show other parts of the human body to map more bones to give the character
    tiny details for use in animations. These are shown in the following figure:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器视图中，你还可以观察到垂直对齐的其他按钮：Body（身体）、Head（头部）、Left Hand（左手）和Right Hand（右手）。正如在检查器中显示的那样，其他按钮显示人体其他部分以映射更多骨骼，为角色提供动画中使用的微小细节。这些在以下图中显示：
- en: '![](img/image_03_027.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_027.png)'
- en: Figure 3.26 Avatar mapping of all parts
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26 所有部分的角色映射
- en: You can see that, except the body section, all other sections have only optional
    bones. And in general, every bone of the human body is covered in Unity. The optional
    bones are automatically mapped and animated in Unity, but the required bones are
    to be mapped from the model. And if any one bone is missed while rigging the character,
    whether it is in Autodesk Maya, or 3D Studio Max, or any other 3D modelling tool,
    Unity will show a red circle there and it is the developer's job to provide that
    missing bone by selecting the game object from the Hierarchy panel and placing
    it below the list of bones in Inspector panel.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，除了身体部分外，所有其他部分都只有可选骨骼。一般来说，Unity覆盖了人体的所有骨骼。可选骨骼在Unity中自动映射和动画，但必需骨骼需要从模型中映射。如果在Autodesk
    Maya、3D Studio Max或任何其他3D建模工具中绑定角色时遗漏了任何骨骼，Unity将在那里显示一个红色圆圈，这是开发者的责任，通过从层次结构面板中选择游戏对象并将其放置在检查器面板中骨骼列表下方来提供缺失的骨骼。
- en: 'Now, you might also have observed that our character is in the pose of a T
    shape if you look in the Scene View. If your model is not in the T-Pose, Unity
    will print the message in the Scene View to enforce the model in the T-Pose. The
    T-Pose is the origin point of the model for Unity to map the right bones with
    the right game objects. You can manually rotate bones'' game objects to form a
    T-Pose, or you can automatically do it by selecting Enforce T-Pose from the Pose
    dropdown in the bottom section of the Inspector panel as shown in the following
    figure:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在场景视图中查看，可能会注意到我们的角色处于T形姿态。如果你的模型不是T形姿态，Unity将在场景视图中打印消息来强制模型采用T形姿态。T形姿态是Unity将正确骨骼与正确游戏对象映射的模型原点。你可以手动旋转骨骼的游戏对象以形成T形姿态，或者你可以通过在检查器面板底部选择“强制T形姿态”从姿态下拉菜单中自动完成，如图所示：
- en: '![](img/image_03_028.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_028.png)'
- en: Figure 3.27 Enforce T-Pose option in the Inspector panel
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27 检查器面板中的强制T形姿态选项
- en: Once the option is selected, the model object will be automatically positioned
    to the T-Pose if all its bones are correctly rigged and assigned. The other options
    in this dropdown include Reset, which will reset all the bones and sets the avatar
    configuration to the initial one, and Sample Bind-Pose, which will enforce the
    model to set to the same pose it was at the time of importing the model.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了该选项，如果所有骨骼都正确绑定并分配，模型对象将自动定位到T形姿态。此下拉菜单中的其他选项包括重置，它将重置所有骨骼并将角色配置设置为初始状态，以及采样绑定姿态，它将强制模型设置为导入模型时的相同姿态。
- en: You can reset the whole mapping and use Unity's automatic avatar configuration
    by selecting the Automap option from the Mappings dropdown beside the Pose dropdown
    in the Inspector panel.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在检查器面板中姿态下拉菜单旁边的映射下拉菜单中选择自动映射选项来重置整个映射并使用Unity的自动角色配置。
- en: After any changes you make, you can click on Apply or Revert to apply or cancel
    the changes. Once you are ready with the configuration and avatar, you can click
    on the Done button to close the avatar scene and navigate back to your original
    working scene.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在您所做的任何更改之后，您可以点击“应用”或“还原”来应用或取消更改。一旦您完成了配置和角色，您可以点击“完成”按钮来关闭角色场景并导航回您原来的工作场景。
- en: The other tab, Muscles & Settings, is beyond the scope of the book, but you
    can go ahead and experiment a little. It allows you to verify all the bones with
    the muscles and you can also put restrictions on the movement of bones, such as
    the head can't rotate fully, by defining ranges in it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项卡“肌肉与设置”超出了本书的范围，但您可以继续尝试一下。它允许您验证所有骨骼与肌肉的关系，并且您还可以通过在其中定义范围来限制骨骼的运动，例如头部不能完全旋转。
- en: Now, our model is imported and is properly configured to the humanoid avatar.
    It's time to bring it to life and add some locomotion animations such as walking,
    running, jumping, and so on. In the section, we will discuss how Unity allows
    us to manage animations and apply them on the humanoid model objects.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的模型已经导入，并且已经正确配置到人形角色上。是时候让它栩栩如生了，并添加一些行走、跑步、跳跃等动作动画。在本节中，我们将讨论Unity如何让我们管理动画并将它们应用到人形模型对象上。
- en: Humanoid animation using Unity
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Unity进行人形动画
- en: Animations are the core component of any game. Without them, a game is just
    a sequence of pictures and the user will have no idea of what's going on in the
    game. We learned about animations in [Chapter 2](36ed5299-901b-4888-9b37-b21738cc051a.xhtml),
    *Finishing the Perky Penguin 2D Game*, for our 2D game, Perky Penguin, to control
    the animations of a penguin and lasers using state machines and controllers. But,
    when it comes to 3D, things get a lot more complicated to manage and handle. The
    reasons for this complexity varies depending on what kind of animations we want
    to create and manage in Unity, but generally creating character animations such
    as walk cycle or running cycle takes a lot of effort and cannot be made in Unity.
    These animations need more details and are developed in advanced tools such as
    Autodesk Maya, 3D Studio Max, and so on. In this section, we will not discuss
    how these animations are created, as it is beyond the scope of this book, but
    we will discuss how these animations are imported in Unity and managed further
    with programming and state machine controllers to achieve our game requirements
    of animating a player character for the fighting game.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 动画是任何游戏的核心组件。没有它们，游戏只是一系列图片，用户将无法了解游戏中正在发生什么。我们已经在[第2章](36ed5299-901b-4888-9b37-b21738cc051a.xhtml)“完成活泼企鹅2D游戏”中学习了动画，为了我们的2D游戏“活泼企鹅”，我们使用状态机和控制器来控制企鹅和激光的动画。但是，当涉及到3D时，管理和处理的事情会变得更加复杂。这种复杂性的原因取决于我们想在Unity中创建和管理的动画类型，但通常创建如行走循环或跑步循环这样的角色动画需要大量的努力，并且不能在Unity中完成。这些动画需要更多的细节，并且是在高级工具（如Autodesk
    Maya、3D Studio Max等）中开发的。在本节中，我们不会讨论这些动画是如何创建的，因为这超出了本书的范围，但我们将讨论如何将这些动画导入Unity，并通过编程和状态机控制器进一步管理，以实现我们的游戏需求，为格斗游戏中的玩家角色进行动画处理。
- en: Unity's animation system allows you to create amazingly animated characters
    by the support of animation blending, mixing, additive animations, loop animations,
    time synchronization such as walk cycle, layered animations, animation control
    playback on factors like speed, time, and so on, and the support of physically-based
    rag dolls. Unity provides extended graphical user interfaces to make things much
    easier as compared to previous animation tools such as Adobe Flash.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的动画系统通过支持动画混合、混合、加法动画、循环动画、时间同步（如行走循环）、分层动画、基于速度、时间等因素的动画控制回放，以及基于物理的布娃娃支持，让您能够创建令人惊叹的动画角色。与之前的动画工具（如Adobe
    Flash）相比，Unity提供了扩展的图形用户界面，使事情变得更加简单。
- en: Legacy Animation System
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Legacy Animation System
- en: Before the release of Unity 4.x versions, Unity provided a simpler animation
    system, now called the **Legacy Animation System**. For backwards compatibility,
    this system is still available. You can use the legacy system in older projects
    without updating it to the new system. But, it is not recommended to use the legacy
    system in any new projects.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity 4.x版本发布之前，Unity提供了一种更简单的动画系统，现在称为**Legacy Animation System**。为了保持向后兼容性，这个系统仍然可用。您可以在旧项目中使用遗留系统，而无需将其更新到新系统。但是，不建议在任何新项目中使用遗留系统。
- en: 'We will not go into the details of how the legacy animation system works as
    it is not a good choice in games in Unity, but we will discuss a basic overview
    of how it is used in Unity. The Legacy Animation System is based on the following
    steps to create and manage animations in Unity:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨旧版动画系统的工作原理，因为它在Unity游戏中不是一个好的选择，但我们将讨论在Unity中使用旧版动画系统的基本概述。旧版动画系统基于以下步骤在Unity中创建和管理动画：
- en: You prepare the game object that you want to animate. For example, let's take
    a fighter character. Now, in order to animate this in Unity, you have to create
    a model, rig it, texture it, and then import it in Unity. This step is done by
    artists or 3D modelers and animators.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您准备要动画化的游戏对象。例如，让我们以一个战斗角色为例。现在，为了在Unity中对其进行动画处理，您必须创建一个模型，对其进行绑定，添加纹理，然后将其导入Unity。这一步骤由艺术家、3D模型师和动画师完成。
- en: 'After importing the model, you have to set its Animation Type field to Legacy
    manually, as Unity doesn''t do it automatically, from the Rig tab in the Inspector
    settings of the model. This is shown in the following figure:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入模型后，您必须手动将其动画类型字段设置为Legacy，因为Unity不会自动执行此操作，您需要在模型的检查器设置中的Rig选项卡中完成此操作。这如图所示：
- en: '![](img/image_03_029.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_029.png)'
- en: Figure 3.28 Setting Animation Type field to Legacy
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.28 设置动画类型字段为Legacy
- en: Now, you set all the animation clips such as walk forward, walk backward, run,
    jump, and so on, and set the times and speeds of those clips in the Animations
    tab. You can customize and edit clips here with features such as cropping and
    cutting frames from animation clips, modifying speed, creating loop or Ping-Pong
    sequences, and so on.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以在动画选项卡中设置所有动画剪辑，如向前走、向后走、跑步、跳跃等，并设置这些剪辑的时间和速度。您可以通过裁剪和剪切动画剪辑中的帧、修改速度、创建循环或Ping-Pong序列等功能在这里自定义和编辑剪辑。
- en: Animation clips can also be embedded in the model file with tools such as Autodesk
    Maya or 3D Studio Max. Also, animations can be separate files from the model file
    itself. Unity3D shows embedded animations in the Animations tab of the model file
    settings here.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 动画剪辑也可以使用Autodesk Maya或3D Studio Max等工具嵌入到模型文件中。此外，动画也可以是模型文件本身的独立文件。Unity3D在这里显示模型文件设置中的动画选项卡中的嵌入动画。
- en: Once all animation clips are set and ready, it's time to create a controller.
    The legacy animation system allows you to create a controller in C# or JavaScript,
    which will tell Unity about which clip to play at what time and for how long,
    and so on. This controller is basically managed by the game input, for example,
    on pressing the space key, the character should jump.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有动画剪辑都设置好并准备就绪，就到了创建控制器的时候了。旧版动画系统允许您使用C#或JavaScript创建控制器，这将告诉Unity在何时播放哪个剪辑以及播放多长时间等。这个控制器基本上由游戏输入管理，例如，按空格键时，角色应该跳跃。
- en: Although these four steps don't explain the whole process in detail as to use
    the legacy animation system, it's enough to get an idea of how the legacy system
    is used in Unity. The legacy system relies heavily on the scripting part to manage
    animations and its controller is fully programmed and coded by the developer himself.
    This makes the legacy system more complex when compared to the new Mecanim animation
    system, which we will discuss in the next section.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这四个步骤没有详细解释如何使用旧版动画系统，但它足以让您了解在Unity中如何使用旧版系统。旧版系统在很大程度上依赖于脚本部分来管理动画，其控制器完全由开发者自己编程和编码。这使得与下一节将要讨论的新Mecanim动画系统相比，旧版系统更加复杂。
- en: Mecanim animation system
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mecanim动画系统
- en: 'Although Unity had an animation system in place and developers were utilizing
    it, Unity3D released a whole new system created from scratch for creating and
    managing more complex animations with a lot more ease. That system became known
    as the Mecanim animation system. Here are some features of the Mecanim animation
    system:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Unity已经有一个现成的动画系统，并且开发者正在使用它，但Unity3D发布了一个全新的系统，从头开始创建和管理更复杂的动画，而且更加容易。该系统被称为Mecanim动画系统。以下是Mecanim动画系统的几个特点：
- en: Easy workflow and set up of animations
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画工作流程和设置的简便性
- en: Supports animation clips created within Unity or imported externally
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持在Unity内部创建或外部导入的动画剪辑
- en: Retargets humanoid animations from one character model to another
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以将一个角色模型的动画重定向到另一个角色模型
- en: A visual programming tool for managing and previewing animation clips
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于管理和预览动画剪辑的可视化编程工具
- en: Layering and masking features
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层叠和遮罩功能
- en: It is possible that you might not have clearly understood some of these features
    . However, it's nothing to worry about, as we will discuss these features and
    the system in a lot of detail in this section.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能您可能没有完全理解这些功能的一些内容。然而，无需担心，因为在本节中我们将详细讨论这些功能和系统。
- en: We will start by discussing the Mecanim in our humanoid character project from
    the previous section.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先从上一节中的人形角色项目开始讨论Mecanim。
- en: In the previous section, we imported a free character alongside a lots of animation
    clips. We discussed the model file and its materials folder, and then we also
    configured a humanoid avatar for it. Now, we will continue from that humanoid
    avoid setting and use the Mecanim animation system to animate the character. To
    do this, first we have to see what kind of animations we have got from the Raw
    Mocap Animation Data asset. Expand the Animations folder in the Project Explorer
    panel, then expand the Walking folder again to view some of the walk animations.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们导入了一个免费的角色以及许多动画剪辑。我们讨论了模型文件及其材质文件夹，然后我们还为它配置了一个人形头像。现在，我们将从那个人形头像设置继续，并使用Mecanim动画系统来为角色动画化。为此，首先我们必须查看我们从原始Mocap动画数据资产中获得了哪些类型的动画。在项目资源管理器面板中展开动画文件夹，然后再次展开“行走”文件夹以查看一些行走动画。
- en: 'Now, select any random animation clip from that folder, and in the Inspector panel
    you will see a small preview window with a little Play button which will pause/play
    the animation clip. This whole process is shown in the following figure:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从该文件夹中选择任何随机的动画剪辑，然后在检查器面板中您将看到一个带有小播放按钮的小预览窗口，该按钮可以暂停/播放动画剪辑。整个过程如下面的图所示：
- en: '![](img/image_03_030.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_030.png)'
- en: Figure 3.29 Preview any animation clip from the Walking folder
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.29 预览“行走”文件夹中的任何动画剪辑
- en: This preview window shows you the animation clip to give you better idea as
    to which animation is more suitable for your game requirements. You can play more
    animations from other folders as well.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这个预览窗口显示了动画剪辑，以便您更好地了解哪个动画更适合您的游戏需求。您还可以从其他文件夹播放更多动画。
- en: This preview system of the animations was only available in Mecanim after Unity
    4.0 was introduced.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这个动画预览系统仅在Unity 4.0版本引入后，Mecanim中才可用。
- en: 'The Unity''s Mecanim animation system is based on the concept of **animation
    clips**, which contain information about how different objects should be moved,
    rotated, or transformed over time. Each clip can be a different, separate recording
    of the same object. These animation clips are mostly created by 3D animation artists
    using third-party tools such as Autodesk Maya, 3D Studio Max, or any other source.
    Then these clips can be exported using those tools as separate clips or can also
    be embedded into the model file itself. To understand this better, select the
    DefaultAvatar.fbx from the Raw Mocap Data directory in the Project panel, and
    select the Animations tab in the Inspector panel. You will observe that the Import
    Animations check is already selected, and below that there is an information box
    telling you that the model file doesn''t contain any animation data. That means
    there is not a single animation clip embedded in the model file itself. This whole
    process is shown in the following screenshot:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的Mecanim动画系统基于**动画剪辑**的概念，它包含有关不同对象如何随时间移动、旋转或变换的信息。每个剪辑可以是对同一对象的独立、单独的录制。这些动画剪辑大多由3D动画师使用第三方工具（如Autodesk
    Maya、3D Studio Max或其他来源）创建。然后，可以使用这些工具将这些剪辑导出为单独的剪辑，或者也可以将它们嵌入到模型文件本身中。为了更好地理解这一点，请在项目面板中选择“原始Mocap数据”目录中的DefaultAvatar.fbx，然后在检查器面板中选择动画选项卡。您将观察到导入动画的复选框已经被选中，下面有一个信息框告诉您模型文件不包含任何动画数据。这意味着模型文件本身没有嵌入任何动画剪辑。整个过程如下面的截图所示：
- en: '![](img/image_03_031.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_031.png)'
- en: Figure 3.30 Viewing embedded animation data in the model
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.30 在模型中查看嵌入的动画数据
- en: Whether you get embedded animation clips in the model, or you import animation
    clips separately (as in this case), these animation clips are then organized into
    a structure flowchart-like system called the **Animation Controller**. This animation
    controller plays the role of a state-machine which keeps track of which animation
    clip should be playing, when the animation clip should stop, and so on. This is
    one of the most important features of the Mecanim system, which differentiates
    it from the legacy animation system and provides a lot of ease and control to
    the developers. In the legacy systems, the developers used to write the whole
    animation controller using C# or JavaScript programming, but in Mecanim, Unity3D
    offers a visual interface to create a whole controller without a single line of
    code with lots of built-in functionality.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是在模型中嵌入动画剪辑，还是单独导入动画剪辑（如本例所示），这些动画剪辑随后将被组织成一个类似于结构流程图的系统，称为**动画控制器**。这个动画控制器扮演着状态机的角色，负责跟踪哪个动画剪辑应该播放，何时停止播放动画剪辑等等。这是
    Mecanim 系统最重要的功能之一，它将 Mecanim 系统与传统的动画系统区分开来，并为开发者提供了许多便利和控制。在传统的系统中，开发者通常使用 C#
    或 JavaScript 编程语言编写整个动画控制器，但在 Mecanim 中，Unity3D 提供了一个可视化界面，可以创建整个控制器，无需一行代码，并具有许多内置功能。
- en: Any simple animation controller must contain at least one or two animation clips.
    These animation clips can be as simple as opening and closing animations of any
    door or walking forward and backward animations of any humanoid character. A more
    advanced animation controller can contain dozens of humanoid animations for all
    the character's main actions such as walking, running, jumping, fighting, and
    so on. Our game project contains the characters with the abilities to walk, run,
    jump, fight with hands, legs, and super moves. So, our animation controller for
    a single character is quite detailed and advanced. In the next section, we will
    discuss about how an animation controller is created and we will create a simple
    controller for our player character for the fighting game.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 任何简单的动画控制器都必须至少包含一个或两个动画剪辑。这些动画剪辑可以像任何门的开关动画或任何类人角色的前后走动动画那样简单。更高级的动画控制器可以包含数十个类人动画，用于角色的所有主要动作，如行走、跑步、跳跃、战斗等等。我们的游戏项目包含具有行走、跑步、跳跃、用手、腿和超级技能的角色。因此，我们单个角色的动画控制器非常详细且高级。在下一节中，我们将讨论如何创建动画控制器，并为我们的格斗游戏玩家角色创建一个简单的控制器。
- en: Creating layer character for the fighting game
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为格斗游戏创建分层角色
- en: In the previous section, we discussed the animation systems of Unity; legacy,
    and Mecanim. In this section, we will not only discuss, but also practically create,
    the animation controller for our player character of the fighting game. We will
    use the free character provided by Unity contained in the Raw Mocap Data asset
    project.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了 Unity 的动画系统；传统和 Mecanim。在本节中，我们不仅将讨论，还将实际创建格斗游戏玩家角色的动画控制器。我们将使用
    Unity 提供的免费角色，该角色包含在原始 mocap 数据资产项目中。
- en: 'First of all, we need a humanoid character in the Scene view. Drag the DefaultAvatar.fbx
    prefab from the Raw Mocap Data directory in the Project panel to the Hierarchy
    panel, and it will show a T-Posed character with a black suit on it as shown in
    the following screenshot:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在场景视图中，我们需要一个类人角色。从项目面板中的原始 mocap 数据目录拖动 DefaultAvatar.fbx 预制体到层次结构面板，它将显示一个穿着黑色西装的
    T-Posed 角色如图以下截图所示：
- en: '![](img/image_03_032.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图片 3.32](img/image_03_032.png)'
- en: Figure 3.31 The T-Posed character in the Scene View
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.31 场景视图中的 T-Posed 角色
- en: 'Now, select the DefaultAvatar in the Hierarchy panel, and look at its Inspector
    settings. There will be a new component added below the Transform component called
    the Animator component, as shown in the following screenshot:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在层次结构面板中选择 DefaultAvatar，并查看其检查器设置。在变换组件下方将添加一个新的组件，称为动画组件，如图以下截图所示：
- en: '![](img/image_03_033.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图片 3.33](img/image_03_033.png)'
- en: Figure 3.32 Animator component of the character model
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.32 角色模型的动画组件
- en: 'You can observe that an information note is given in the component stating
    that the controller is not initialized. When any humanoid character is placed
    for the first time in the scene, Unity creates a default runtime animation controller
    and assigns it to the character. We can also change or modify its controller anytime
    with our customized controllers as well. There are multiple properties in the
    Animator component as shown in the preceding figure. Let''s discuss some minor
    details of these properties before moving further ahead:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观察到在组件中有一个信息提示，指出控制器尚未初始化。当任何类人角色首次放置到场景中时，Unity会创建一个默认的运行时动画控制器并将其分配给该角色。我们也可以随时使用我们的自定义控制器来更改或修改其控制器。Animator组件中包含多个属性，如前图所示。在继续前进之前，让我们讨论一下这些属性的细节：
- en: '**The Controller** property is used to set the animation controller of the
    Animator component. This is the most important property, and through this controller
    the whole character''s animations are managed and handled in Unity.'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**控制器**属性用于设置Animator组件的动画控制器。这是最重要的属性，通过这个控制器，整个角色的动画在Unity中得以管理和处理。'
- en: '**The Avatar** property tells Unity3D about the rigging and avatar configuration
    to use for the character. This is the same avatar configuration which we set in
    the previous section of the humanoid character. We can also use some other character''s
    avatar for some other character''s animator. That''s why Mecanim animation is
    so powerful and allows developers to retarget their avatar''s definitions on other
    characters without any more efforts.'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Avatar**属性告诉Unity3D用于角色的绑定和Avatar配置。这与我们在之前章节中为类人角色设置的相同的Avatar配置相同。我们也可以为其他角色的Animator使用其他角色的Avatar。这就是Mecanim动画之所以如此强大的原因，它允许开发者无需额外努力即可将他们的Avatar定义重新定位到其他角色上。'
- en: 'Now, with the avatar property already set with our configured avatar; let''s
    create our first animation controller. Right-click on the Assets folder, and select
    Create | AnimationController and name it PlayerAnimController, as shown in the
    following screenshot:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着Avatar属性已经设置为我们配置的Avatar；让我们创建我们的第一个动画控制器。在Assets文件夹上右键单击，然后选择创建 | 动画控制器，并将其命名为PlayerAnimController，如下面的截图所示：
- en: '![](img/image_03_034.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_034.png)'
- en: Figure 3.33 Creating an animation controller for the player
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.33 为玩家创建动画控制器
- en: 'You will notice that a different file will be added in the Project panel in
    the Assets directory. Double-click on it, and you will be presented with an Animator
    window showing a state-machine-like user interface, as shown in the following
    screenshot:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在Assets目录的项目面板中会添加一个不同的文件。双击它，你将看到一个Animator窗口，显示一个类似于状态机的用户界面，如下面的截图所示：
- en: '![](img/image_03_035.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_035.png)'
- en: Figure 3.34 The Animator panel in Unity3D
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.34 Unity3D中的Animator面板
- en: As you can see in this panel, there are three already added states called as
    Any State, Entry, and Exit respectively. The primary objective of this panel is
    to organize all the animation clips, here called **States**, and connect these
    with each other using sequential, parallel, or more complex relationships using
    a flowchart-like approach. In order to create a simple state-machine, we need
    at least one animation state in the Animator panel. We already have lots of animations
    in the project assets imported; we have to just choose a few of those animations
    for our simple animation controller.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在此面板中所见，已添加了三个状态，分别称为任何状态、进入和退出。此面板的主要目的是组织所有动画剪辑，在这里称为**状态**，并使用类似于流程图的顺序、并行或更复杂的关系将它们连接起来。为了创建一个简单的状态机，我们至少需要在Animator面板中有一个动画状态。我们已经在项目资产中导入了很多动画；我们只需从那些动画中选择一些用于我们的简单动画控制器。
- en: 'Now, create a new directory in Assets with the name of Player Animations. I
    have selected four animation clips from our Raw Mocap Data folder and placed those
    in our new folder:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在Assets中创建一个新的名为Player Animations的目录。我从我们的Raw Mocap Data文件夹中选择了四个动画剪辑，并将它们放置在我们的新文件夹中：
- en: '![](img/image_03_036.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_036.png)'
- en: Figure 3.35 Animation states in the Player Animations directory
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.35 Player Animations目录中的动画状态
- en: 'Once your animation clips are all set in a single directory, let''s explore
    these animations in a little more depth. Click on the Idle_Neutral_2 animation
    clip in the Project panel, and select the Rig tab in the Inspector. You will notice
    that the Animation Type is set to Humanoid and the Avatar definition is set to
    get copied from another avatar. You must be wondering where the other avatar is.
    You can select this other avatar in the Source property and click Apply to save
    the changes. The Source property is set to our configured avatar definition called
    DefaultAvatarAvatar for our character model. Through this property, you can select
    any other avatar''s definition and retarget the same animation clip on multiple
    characters very easily. These properties are shown in the following screenshot:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的动画片段都设置在单个目录中，让我们更深入地探索这些动画。在项目面板中单击Idle_Neutral_2动画片段，然后在检查器中选择“Rig”选项卡。您会注意到动画类型设置为“Humanoid”，而头像定义设置为从另一个头像复制。您可能想知道另一个头像在哪里。您可以在“源”属性中选择这个其他头像，然后点击“应用”以保存更改。源属性设置为我们的配置头像定义，称为DefaultAvatarAvatar，用于我们的角色模型。通过此属性，您可以选择任何其他头像的定义，并非常容易地将相同的动画片段重定向到多个角色上。这些属性如图所示：
- en: '![](img/image_03_037.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_037.png)'
- en: Figure 3.36 Rig tab of an animation clip
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.36 动画片段的“Rig”选项卡
- en: 'The Rig tab settings are almost identical for all the animation clips we have
    got in our project. Now, select the Animations tab to customize the animation
    according to our own project requirements. The partial Animations tab is shown
    in the following screenshot:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们项目中所有动画片段的“Rig”选项卡设置几乎完全相同。现在，选择“动画”选项卡以根据我们自己的项目需求自定义动画。部分“动画”选项卡如图所示：
- en: '![](img/image_03_038.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_038.png)'
- en: Figure 3.37 Partial Animations tab
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.37 部分动画选项卡
- en: If you don't want to import any animation, just toggle off the Import Animation
    check and Unity will ignore the animation from that clip. The rest of the settings
    are not important at this moment and we will discuss them later in the book. For
    now, the most important setting is the Clips property. This is where the whole
    animation timeline is created. You can observe the Start and End values for the
    frames of the animation. You can click on the plus (+) sign to add a new sub-animation
    by defining the start and end frames and Unity will crop that part of the animation
    in a separate clip. You can experiment with this panel on your own and see what
    happens on what properties. Also, you can observe a small preview window which
    allows you to play and stop the customized animation.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想导入任何动画，只需关闭“导入动画”复选框，Unity将忽略该片段的动画。其余的设置在此刻并不重要，我们将在本书的后面讨论它们。现在，最重要的设置是“片段”属性。这是创建整个动画时间线的位置。您可以观察动画帧的起始和结束值。您可以单击加号（+）来添加一个新的子动画，通过定义起始和结束帧，Unity将把动画的这部分裁剪到单独的片段中。您可以在自己的面板上尝试这个功能，看看会发生什么。此外，您还可以观察到一个小的预览窗口，允许您播放和停止自定义动画。
- en: 'Currently, we have only one clip in the Clips list and that is selected by
    default. Below the Clips property, Unity is showing you more details of this particular
    clip, as shown in the following screenshot:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们在“片段”列表中只有一个片段，并且默认选中。在“片段”属性下方，Unity显示了此特定片段的更多详细信息，如图所示：
- en: '![](img/image_03_039.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_039.png)'
- en: Figure 3.38 More properties of any selected sub-animation clip
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.38 任何选定的子动画片段的更多属性
- en: You can observe a lot of options here. We won't discuss all of these in much
    detail, but we will get an overview of this panel here. There are various sections
    such as Loop Time, Root Transform Rotation , and so on. These sections define
    that specific part of the animation. For example, Loop Time defines whether the
    animation as a whole is a loop animation or not. Before every section, there is
    a color circle with red, yellow, or green fill. This circle tells us about the
    loop match state of the animation. Red means it's not a loop, yellow means it's
    somewhat a loop but is not perfectly synced, and green means that it is a perfect
    loop. These properties allow developers to define the animations in a very detailed
    way to manage the `Y` axis position of the character when animating and so on.
    You can alter the Start and End values to see where exactly the animation is a
    perfect loop with all of the green circles and customize it accordingly.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多选项。我们不会详细讨论所有这些，但我们将概述这个面板。有各种部分，如Loop Time、Root Transform Rotation等。这些部分定义了动画的特定部分。例如，Loop
    Time定义了整个动画是否为循环动画。在每个部分之前，都有一个带有红色、黄色或绿色填充的颜色圆圈。这个圆圈告诉我们动画的循环匹配状态。红色表示它不是循环，黄色表示它有些循环但不是完美同步，绿色表示它是完美循环。这些属性允许开发者以非常详细的方式定义动画，以管理动画时角色的`Y`轴位置等。你可以改变开始和结束值，以查看动画在哪里是完美循环，所有绿色圆圈都相应地定制。
- en: 'Finally, after discussing many details and properties about animation clips,
    let''s move on to create our simple animation controller. Double-click on the
    PlayerAnimController file from Assets directory. It will show the Animator view
    with three states as we discussed earlier. Now, follow these steps to create a
    walk cycle animation state-machine:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在讨论了许多关于动画片段的细节和属性之后，让我们继续创建我们的简单动画控制器。从Assets目录中双击PlayerAnimController文件。它将显示Animator视图，其中包含我们之前讨论的三个状态。现在，按照以下步骤创建一个行走循环动画状态机：
- en: 'Drag the Idle_Neutral_2 animation clip from the Player Animations directory
    to the Animator view. You will see a new orange rectangle added with the animation
    clip name. This rectangle shows this animation clip state. This is shown in the
    following figure:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Idle_Neutral_2动画片段从Player Animations目录拖动到Animator视图中。你会看到一个新添加的橙色矩形，其中包含动画片段的名称。这个矩形显示了该动画片段的状态。如下图所示：
- en: '![](img/image_03_040.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_040.png)'
- en: Figure 3.39 New animation added in the Animator view
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.39 在Animator视图中添加的新动画
- en: Any animation can be set as the default animation by right-clicking on it and
    selecting Set as Default Layer State from the menu. Unity will change its color
    to orange. There can be only one default state in any single layer.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过右键单击动画并从菜单中选择设置为默认层状态来将任何动画设置为默认动画。Unity将改变其颜色为橙色。任何单个层中只能有一个默认状态。
- en: 'Now, if you play the game, you will see that character in the scene is not
    animating. Although we have set its default animation state to the idle animation,
    still the character is not moving. It is because we have only created Animation
    Controller, but still we have to link the controller with our character:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你玩游戏，你会看到场景中的角色没有进行动画。尽管我们已经将其默认动画状态设置为空闲动画，但角色仍然没有移动。这是因为我们只创建了Animation
    Controller，但我们仍然需要将控制器与我们的角色关联：
- en: 'To link our character with the newly created animation controller, select the
    character from the Hierarchy panel. Now, drag our PlayerAnimController from Assets
    to the Controller property of the Animator component in the Inspector, as shown
    in the following figure:'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将我们的角色与新建的动画控制器关联，从Hierarchy面板中选择角色。现在，将我们的PlayerAnimController从Assets拖动到Inspector中Animator组件的Controller属性，如下图所示：
- en: '![](img/image_03_041.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_041.png)'
- en: Figure 3.40 Linking character with animation controller
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.40 将动画控制器与角色关联
- en: Now, play the game and you will see that character is following the idle animation.
    But, once the animation is finished, it will stop there. We want to loop the animation
    infinitely in our case.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，玩游戏，你会看到角色正在跟随空闲动画。但是，一旦动画结束，它就会停止。我们希望在我们的情况下无限循环动画。
- en: 'To set the animation loop, select the Idle_Neutral_2 from the Player Animations
    directory, and go to the Animations tab in the Inspector settings. Below Clips,
    we have to first set the animation as a perfect loop and make all the circles
    green. So, set the value of Start to 265, and it will turn into green. Also, toggle
    the Loop Time check to on and click Apply. Now, play the game and your character
    will be continuously repeating the animation once it ends. Also, you won''t be
    able to observe the end of the animation, because a perfect loop is created in
    the animation. This is shown in the following figure:'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要设置动画循环，从玩家动画目录中选择Idle_Neutral_2，然后在检查器设置中的动画标签页中。在剪辑下面，我们首先需要将动画设置为完美循环，并使所有圆圈变为绿色。所以，将起始值设置为265，它将变为绿色。然后，切换Loop
    Time选项为开启，并点击应用。现在，播放游戏，你的角色将在动画结束后持续重复动画。此外，你将无法观察到动画的结束，因为在动画中创建了一个完美循环。这在上面的图中有所展示：
- en: '![](img/image_03_042.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_042.png)'
- en: Figure 3.41 Setting animation to loop
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.41 设置动画循环
- en: 'Now let''s add another animation state of walk into it. As we did earlier,
    drag WalkFWD from Assets to the Animator view. It will create another rectangle
    state, this time with a gray color. This animation state is added in the controller,
    but it is not linked with the animator. To link this state with our default Idle
    state, right click on the Idle_Neutral_2 state, and select Make Transition. It
    will allow you to create a white line from the Idle state to another state. Now,
    click on the WalkFWD state and a line will be drawn between Idle and the WalkFWD
    state with an arrow towards the WalkFWD state. This is shown in the following
    figure:'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在让我们再添加一个名为walk的动画状态。就像我们之前做的那样，从资产拖动WalkFWD到动画器视图中。它将创建另一个矩形状态，这次是灰色。这个动画状态已经添加到控制器中，但还没有与动画器链接。要将此状态与我们的默认Idle状态链接，右键单击Idle_Neutral_2状态，并选择创建过渡。这将允许您从Idle状态创建一条到另一个状态的白色线条。现在，点击WalkFWD状态，将在Idle和WalkFWD状态之间绘制一条带有指向WalkFWD状态的箭头的线条。这在上面的图中有所展示：
- en: '![](img/image_03_043.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_043.png)'
- en: Figure 3.42 Creating transition between two states
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.42 在两个状态之间创建过渡
- en: Now, play the game and you will observe that once the idle animation is finished,
    it will start the WalkFWD animation. After the walk animation, it will be stopped.
    We can also create another transition from WalkFWD to the Idle_Nuetral_2 state
    and this will make the character continuously animate. Once the idle animation
    is finished, it will start walking, and once the walking is finished it will go
    back to the idle animation and this will be running continuously resulting in
    a looped animation.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，播放游戏，你会观察到一旦空闲动画完成，它将开始WalkFWD动画。在走动动画之后，它将停止。我们还可以从WalkFWD到Idle_Nuetral_2状态创建另一个过渡，这将使角色持续动画。一旦空闲动画完成，它将开始行走，一旦行走完成，它将回到空闲动画，这将持续运行，形成一个循环动画。
- en: 'Now, it''s time to add some control in the animator. In the Animator panel,
    on the left side, there are two tabs: Layers and Parameters. Click on the Parameters
    tab, and click the on Plus (+) button to add a new parameter. It will show you
    a dropdown of which type of parameter we want to add. Select Bool from it and
    name it to ShouldWalk. This is shown in the following screenshot:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在动画器中添加一些控制了。在动画器面板的左侧，有两个标签页：图层和参数。点击参数标签页，然后点击加号（+）按钮来添加一个新的参数。它会显示一个下拉菜单，从中选择我们想要添加的参数类型。选择布尔值（Bool）并命名为ShouldWalk。这在上面的截图中有展示：
- en: '![](img/image_03_044.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_044.png)'
- en: Figure 3.43 Adding a new parameter in Animator
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.43 在动画器中添加新参数
- en: 'Now, you will see a new parameter is added in the Parameters list. The parameters
    allow developers to control the animation and states flow based on their values.
    At this moment, the walk animation is automatically started after completion of
    the idle animation. Now, we will integrate this ShouldWalk parameter with the
    animator so that the walking animation will start if the ShouldWalk parameter
    is true; otherwise, it will go back to the idle state:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将看到在参数列表中添加了一个新的参数。参数允许开发者根据它们的值来控制动画和状态流。此时，空闲动画完成后，走动动画会自动开始。现在，我们将这个ShouldWalk参数与动画器集成，以便如果ShouldWalk参数为真，则开始行走动画；否则，它将回到空闲状态：
- en: 'To do this, click on the transition arrow of Idle to Walk and check the Inspector
    panel. You will see various settings there. At the end, you will see a small view
    of Conditions. Click on the Plus(+) icon from there, and set ShouldWalk to true.
    This is shown in the following figure:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，点击从空闲到行走的过渡箭头，并检查检查器面板。你会在那里看到各种设置。最后，你将看到一个条件的小视图。点击那里的加号(+)图标，并将ShouldWalk设置为true。这如图所示：
- en: '![](img/image_03_045.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_045.png)'
- en: Figure 3.44 Adding a condition on transition
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.44 添加过渡条件
- en: Similarly, now repeat the same process for other reverse transitions as well
    but this time set the ShouldWalk value to false. Now play the game, and you will
    observe that the character is not going to the walk animation and it is continuously
    repeating the same idle animation over and over again. It will play the walk animation
    if the ShouldWalk parameter is set to `true`. This can be done from the code very
    easily.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，现在为其他反向过渡重复相同的步骤，但这次将ShouldWalk值设置为false。现在播放游戏，你会观察到角色不会进入行走动画，它将不断地重复相同的空闲动画。如果将ShouldWalk参数设置为`true`，它将播放行走动画。这可以通过代码非常容易地完成。
- en: Summary
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was an introduction to the basic concepts of 3D games. We discussed
    how any Unity project is configured for 3D games and how 3D model files are imported
    in Unity. We also discussed the materials and textures for the 3D models. In order
    to focus on our fighting action game, we discussed humanoid models or character
    models and how they are imported. We then discussed the configuration of an avatar
    for the humanoid models to use in the animation system. Unity offers two kinds
    of animation systems; legacy and Mecanim. We discussed brief details about legacy
    as it has been deprecated in Unity now followed by a more detailed discussion
    on the Mecanim animation system. We imported a few animations and worked to create
    a simple animation controller alongside a simple parameter to control the flow
    of the animations.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了3D游戏的基本概念。我们讨论了任何Unity项目如何配置为3D游戏，以及如何在Unity中导入3D模型文件。我们还讨论了3D模型的材料和纹理。为了专注于我们的战斗动作游戏，我们讨论了人形模型或角色模型以及它们的导入方式。然后我们讨论了用于动画系统的人形模型的化身配置。Unity提供两种类型的动画系统；旧的和Mecanim。我们简要讨论了旧系统，因为它现在已经在Unity中弃用，随后对Mecanim动画系统进行了更详细的讨论。我们导入了一些动画，并努力创建了一个简单的动画控制器，以及一个简单的参数来控制动画的流程。
- en: In the next chapter, we will continue from the controller and create a detailed
    animation controller with lots of animations and parameters, which will be used
    for both player and enemy characters. We will then control the player movement
    and animations using virtual joystick controls and discuss a little about artificial
    intelligence behind enemy characters.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从控制器开始，创建一个包含许多动画和参数的详细动画控制器，该控制器将用于玩家和敌人角色。然后我们将使用虚拟摇杆控制来控制玩家移动和动画，并简要讨论敌人角色背后的人工智能。
