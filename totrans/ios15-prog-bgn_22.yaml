- en: '*Chapter 19*: Getting Started with Custom UIControls'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第19章*：开始使用自定义 UIControls'
- en: At this point, your app has data in all of its screens, but the **Restaurant
    Detail** screen is incomplete. You can't set a star rating for a restaurant, and
    you can't add photos or reviews.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您的应用程序在其所有屏幕中都有数据，但 **餐厅详情** 屏幕是不完整的。您无法为餐厅设置星级评分，也无法添加照片或评论。
- en: You have been using Apple's standard UI elements so far. In this chapter, you'll
    create a custom subclass of the `UIControl` class that displays restaurant ratings
    in the form of stars. You'll modify this subclass so users can set a rating for
    a restaurant by tapping it. After that, you'll implement a review form that allows
    users to submit restaurant reviews.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您一直在使用苹果的标准 UI 元素。在本章中，您将创建一个自定义的 `UIControl` 类的子类，用于以星级形式显示餐厅评分。您将修改这个子类，以便用户可以通过点击来为餐厅设置评分。之后，您将实现一个允许用户提交餐厅评论的评论表单。
- en: By the end of this chapter, you'll have learned how to create custom `UIControl`
    classes, handle touch events, and implement review forms for your own apps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将学会如何创建自定义的 `UIControl` 类，处理触摸事件，并为您的应用程序实现评论表单。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a custom `UIControl` subclass
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义 `UIControl` 子类
- en: Displaying stars in your custom `UIControl` subclass
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的自定义 `UIControl` 子类中显示星级
- en: Adding support for touch events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加触摸事件支持
- en: Implementing an unwind method for the **Cancel** button
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现取消按钮的撤销方法
- en: Creating the `ReviewFormViewController` class
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `ReviewFormViewController` 类
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您将继续在上一章中修改的 `LetsEat` 项目上工作。
- en: 'The completed Xcode project for this chapter is in the `Chapter19` folder of
    the code bundle for this book, which can be downloaded here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成的 Xcode 项目位于本书代码包的 `Chapter19` 文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际应用：
- en: '[https://bit.ly/3cRFcXa](https://bit.ly/3cRFcXa)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3cRFcXa](https://bit.ly/3cRFcXa)'
- en: Let's start by learning how to create a custom `UIControl` subclass that will
    display a star rating on the screen.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习如何创建一个将在屏幕上显示星级评分的自定义 `UIControl` 子类开始。
- en: Creating a custom UIControl subclass
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义 UIControl 子类
- en: 'You''ve only used Apple''s predefined UI elements so far, such as labels and
    buttons. All you had to do was click the Library button, search for the object
    you want, and drag it into the storyboard. However, there will be cases where
    the objects provided by Apple are either unsuitable or don''t exist. In such cases,
    you will need to build your own. Let''s review the **Restaurant Detail** screen
    that you saw in the app tour:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您只使用了苹果预定义的 UI 元素，例如标签和按钮。您只需点击库按钮，搜索您想要的元素，并将其拖入故事板即可。然而，在某些情况下，苹果提供的对象可能不合适或不存在。在这种情况下，您将需要自己构建。让我们回顾一下在应用程序浏览中看到的
    **餐厅详情** 屏幕：
- en: '![Figure 19.1: Restaurant Detail screen showing the star rating'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 19.1: Restaurant Detail screen showing the star rating'
- en: '](img/Figure_19.01_B17469.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.01_B17469.jpg)'
- en: 'Figure 19.1: Restaurant Detail screen showing the star rating'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.1：显示星级评级的餐厅详情屏幕
- en: You can see a group of five stars just above the `RestaurantDetail` storyboard
    file and the `ReviewForm` storyboard file have blank view objects where the stars
    should be. You will create the `RatingsView` class, a custom subclass of the `UIControl`
    class, that you will use in both scenes. The `UIControl` class is a subclass of
    the `UIView` class, and it is used as the superclass for the `RatingsView` class
    because `RatingsView` instances have to respond when the user taps on them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到一组五个星级位于 `RestaurantDetail` 故事板文件和 `ReviewForm` 故事板文件上方，其中应该放置星级的空白视图对象。您将创建一个名为
    `RatingsView` 的类，这是一个 `UIControl` 类的自定义子类，您将在两个场景中使用它。`UIControl` 类是 `UIView`
    类的子类，它被用作 `RatingsView` 类的超类，因为 `RatingsView` 实例必须在用户点击时做出响应。
- en: Important Information
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: You can learn more about `UIControl` at [https://developer.apple.com/documentation/uikit/uicontrol](https://developer.apple.com/documentation/uikit/uicontrol).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.apple.com/documentation/uikit/uicontrol](https://developer.apple.com/documentation/uikit/uicontrol)
    上了解更多关于 `UIControl` 的信息。
- en: 'A `RatingsView` instance will display ratings as stars. The user will also
    be able to select half-stars. Let''s begin by creating a subclass of the `UIControl`
    class. Follow these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`RatingsView` 实例将显示评分，用户还可以选择半星星。让我们首先创建 `UIControl` 类的子类。按照以下步骤操作：'
- en: Right-click the `Review Form` folder and select **New File**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Review Form` 文件夹并选择 **New File**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应该已经选中。选择 **Cocoa Touch Class** 然后点击 **Next**。'
- en: 'Configure the file as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下配置文件：
- en: '`RatingsView`'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RatingsView`'
- en: '`UIControl`'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UIControl`'
- en: '`Swift`'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击 **Next**。
- en: Click `RatingsView` file will appear in the Project navigator.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `RatingsView` 文件将出现在项目导航器中。
- en: 'Now you need to set the identity of the view object next to the `RatingsView`.
    Follow these steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您需要设置 `RatingsView` 旁边视图对象的身份。按照以下步骤操作：
- en: 'Expand the `RestaurantDetail` folder in the Project navigator. Click the `RestaurantDetail`
    storyboard file and select the **View** object next to the **0.0** **Label** as
    shown:![Figure 19.2: Editor area showing View object next to the 0.0 Label'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中展开 `RestaurantDetail` 文件夹。点击 `RestaurantDetail` 故事板文件，并选择与 **0.0** **标签**
    并排的 **View** 对象，如图所示：![图19.2：编辑区域显示与0.0标签并排的视图对象
- en: '](img/Figure_19.02_B17469.jpg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_19.02_B17469.jpg)'
- en: 'Figure 19.2: Editor area showing View object next to the 0.0 Label'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图19.2：编辑区域显示与0.0标签并排的视图对象
- en: 'Click the Identity inspector button. Under `RatingsView`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“身份检查器”按钮。在 `RatingsView` 下：
- en: '![Figure 19.3: Identity inspector with Class set to RatingsView'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图19.3：将类设置为 RatingsView 的身份检查器'
- en: '](img/Figure_19.03_B17469.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.03_B17469.jpg)'
- en: 'Figure 19.3: Identity inspector with Class set to RatingsView'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.3：将类设置为 RatingsView 的身份检查器
- en: Now let's modify the `RatingsView` class to make it display stars. You'll use
    the graphic assets inside the `Assets.xcassets` file to do this in the next section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们修改 `RatingsView` 类以使其显示星星。你将在下一节中使用 `Assets.xcassets` 文件内的图形资源来完成此操作。
- en: Displaying stars in your custom UIControl subclass
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在自定义 UIControl 子类中显示星星
- en: 'So far, you have created a new `UIControl` subclass named `RatingsView` in
    your project. You have also assigned the class of the view object next to the
    `Restaurant` `Detail` screen to the `RatingsView` class. For the rest of this
    chapter, an instance of the `RatingsView` class will be referred to as a ratings
    view (the same way an instance of the `UIButton` class is referred to as a button).
    In this section, you will add some code to the `RatingsView` class to make a ratings
    view display stars. Follow these steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经在项目中创建了一个名为 `RatingsView` 的新 `UIControl` 子类。你还将 `Restaurant` `Detail`
    屏幕旁边的视图对象的类分配给了 `RatingsView` 类。在本章的剩余部分，`RatingsView` 类的一个实例将被称为评分视图（与 `UIButton`
    类的实例被称为按钮的方式相同）。在本节中，你将向 `RatingsView` 类添加一些代码，以便评分视图显示星星。按照以下步骤操作：
- en: Click the `RatingsView` file in the Project navigator and remove all the commented
    code.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `RatingsView` 文件并删除所有注释代码。
- en: 'Type the following after the `RatingsView` class declaration to declare the
    properties for the class:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `RatingsView` 类声明之后输入以下内容以声明类的属性：
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first three properties, `filledStarImage`, `halfStarImage`, and `emptyStarImage`,
    are assigned the star images stored in the `Assets.xcassets` file.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前三个属性 `filledStarImage`、`halfStarImage` 和 `emptyStarImage` 被分配了存储在 `Assets.xcassets`
    文件中的星星图像。
- en: The `totalStars` property determines the total number of stars to be drawn.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`totalStars` 属性决定了要绘制的星星总数。'
- en: The `rating` property is used to store a restaurant rating. The types of stars
    drawn will be determined by the value of `rating`. For instance, if `rating` is
    `3.5`, the ratings view will display three filled stars, one half-filled star,
    and one empty star.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`rating` 属性用于存储餐厅评分。绘制的星星类型将由 `rating` 的值决定。例如，如果 `rating` 是 `3.5`，评分视图将显示三个实心星星，一个半实心星星和一个空星星。'
- en: 'Next, let''s create the method that will draw the ratings view on the screen.
    All `UIView` subclasses have a `draw(_:)` method, which is responsible for drawing
    their views on the screen. You''ll override the superclass implementation of this
    method for the `RatingsView` class. Follow these steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个将在屏幕上绘制评分视图的方法。所有 `UIView` 子类都有一个 `draw(_:)` 方法，它负责在屏幕上绘制它们的视图。你将覆盖
    `RatingsView` 类的父类实现此方法。按照以下步骤操作：
- en: 'Add the following code in the class declaration after the property declarations:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性声明之后在类声明中添加以下代码：
- en: '[PRE1]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s break this down:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE2]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creates an instance of `UIGraphicsGetCurrentContext` and assigns it to `context`.
    You can think of it as a sketchpad, where you will compose UI elements together.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个`UIGraphicsGetCurrentContext`的实例并将其分配给`context`。你可以将其视为一个画板，你将在上面组合UI元素。
- en: '[PRE3]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Sets the fill color of `context` to the default system background color.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`context`的填充颜色设置为默认系统背景颜色。
- en: '[PRE4]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Fills the rectangular area specified by `rect` with the fill color.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用填充颜色填充由`rect`指定的矩形区域。
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These statements determine how big each star should be. The first statement
    gets the width of the ratings view and assigns it to `ratingsViewWidth`. The next
    statement gets the width available for each star by dividing the width of the
    ratings view by the number of stars that need to be drawn. This value is assigned
    to `availableWidthForStar`. For the third statement, imagine that each star is
    enclosed in a rectangle. This statement calculates how long each side of this
    rectangle should be in order to fit within the ratings view. If `availableWidthForStar`
    is less than or equal to the ratings view's height, `starSideLength` is set to
    `availableWidthForStar`; otherwise, it's set to be the same as the ratings view's
    height.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些语句确定每颗星星的大小。第一条语句获取评分视图的宽度并将其分配给`ratingsViewWidth`。下一条语句通过将评分视图的宽度除以需要绘制的星星数量来获取每个星星可用的宽度。这个值被分配给`availableWidthForStar`。对于第三条语句，想象每颗星星都被一个矩形包围。这条语句计算这个矩形的每一边应该有多长才能适应评分视图。如果`availableWidthForStar`小于或等于评分视图的高度，`starSideLength`被设置为`availableWidthForStar`；否则，它被设置为与评分视图的高度相同。
- en: Important Information
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'The third statement makes use of a **ternary operator**. More information can
    be found at this link: [https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html).'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第三条语句使用了**三元运算符**。更多信息可以在以下链接中找到：[https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html)。
- en: For example, let's assume the ratings view is 200 points wide and 50 points
    high. `availableWidthForStar` would be 200/5 = 40\. Since 40 <= 50 evaluates to
    `true`, `starSideLength` will be set to `40`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设评分视图的宽度为200点，高度为50点。`availableWidthForStar`将是200/5 = 40。由于40 <= 50评估为`true`，`starSideLength`将被设置为`40`。
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since `totalStars` is set to `5`, this `for` loop repeats five times.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`totalStars`设置为`5`，这个`for`循环将重复五次。
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These statements calculate the origin and size of the rectangle where each star
    should be drawn within the ratings view. This is then assigned to `frame`. The
    origin values are offset from the top-left corner of the ratings view, and the
    width and height are set to `starSidelength`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句计算了在评分视图中绘制每个星星的矩形的位置和大小。然后将其分配给`frame`。原点值是从评分视图的左上角偏移的，宽度和高度设置为`starSidelength`。
- en: For example, for the first star, `starOriginX` is (40*0.0) + (40-40)/2 = `0`.
    `starOriginY` is (50 – 40)/2 = `5`. `frame` would thus be a `CGRect` where `x`
    is `0`, `y` is `5`, `width` is `40`, and `height` is `40`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于第一颗星星，`starOriginX`是(40*0.0) + (40-40)/2 = `0`。`starOriginY`是(50 – 40)/2
    = `5`。因此，`frame`将是一个`CGRect`，其中`x`是`0`，`y`是`5`，`width`是`40`，`height`是`40`。
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Depending on the value of the ratings view's `rating` property, these statements
    determine whether the star to be drawn is filled, half-filled, or empty.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 根据评分视图的`rating`属性的值，这些语句确定要绘制的星星是填充的、半填充的还是空的。
- en: For example, let's assume `rating` is `3.5`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设`rating`是`3.5`。
- en: The first star has an index of `0`. This means `Double`(0 + 1) <= 3.5 will be
    1.0 <= 3.5, which evaluates to `true`. This means the first star that's drawn
    will be a filled star. The same is true for the second and third stars.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一颗星星的索引为`0`。这意味着`Double`(0 + 1) <= 3.5将等于1.0 <= 3.5，这评估为`true`。这意味着绘制的第一颗星星将是一个填充的星星。第二颗和第三颗星星也是如此。
- en: The fourth star has an index of `3`. This means `Double`(3 + 1) <= 3.5 will
    be 4.0 <= 3.5, which evaluates to `false`. The `else` clause evaluates `Double`(3
    + 1) <= 4.0, which evaluates to `true`, so the fourth star drawn will be a half-filled
    star.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 第四颗星星的索引为`3`。这意味着`Double`(3 + 1) <= 3.5将等于4.0 <= 3.5，这评估为`false`。`else`子句评估`Double`(3
    + 1) <= 4.0，这评估为`true`，所以绘制的第四颗星星将是一个半填充的星星。
- en: The fifth star has an index of `4`. This means `Double`(4 + 1) <= 3.5 will be
    5.0 <= 3.5, which evaluates to `false`. The `else` clause evaluates `Double`(4
    + 1) <= 4.0, which also evaluates to `false`, so the fifth star drawn will be
    an empty star.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第五颗星星的索引为`4`。这意味着`Double`(4 + 1) <= 3.5将等于5.0 <= 3.5，这评估为`false`。`else`子句评估`Double`(4
    + 1) <= 4.0，这也评估为`false`，所以绘制的第五颗星星将是一个空的星星。
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This statement draws the star in the specified `frame`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句在指定的`frame`中绘制星星。
- en: 'That''s all the code that''s needed for the `RatingsView` class. Now, let''s
    add an outlet to the `RestaurantDetailViewController` class so that it can manage
    what the ratings view displays. Follow these steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`RatingsView`类所需的全部代码。现在，让我们向`RestaurantDetailViewController`类添加一个出口，以便它可以管理评分视图显示的内容。按照以下步骤操作：
- en: Click the `RestaurantDetailViewController` file in the Project navigator.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`RestaurantDetailViewController`文件。
- en: 'Type in the following code after the `overallRatingLabel` outlet:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`overallRatingLabel`出口之后输入以下代码：
- en: '[PRE10]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This creates an outlet in the `RestaurantDetailViewController` class for the
    ratings view. You now have an outlet named `ratingsView` of type `RatingsView`
    that you will connect to the ratings view in the storyboard later.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这在`RestaurantDetailViewController`类中创建了一个用于评分视图的出口。你现在有一个名为`ratingsView`的`RatingsView`类型的出口，稍后你将在故事板中将它连接到评分视图。
- en: 'Add a method to assign `3.5` to a `ratingsView` instance''s `rating` property.
    Type the following in your `private` extension after the `initialize()` method:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`ratingsView`实例的`rating`属性分配`3.5`的方法。在`initialize()`方法之后，在你的`private`扩展中输入以下内容：
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Modify the `initalize()` method to call the `createRating()` method:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`initalize()`方法以调用`createRating()`方法：
- en: '[PRE12]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open the `RestaurantDetail` storyboard file and select `ratingsView` outlet
    to the ratings view:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`RestaurantDetail`故事板文件，选择`ratingsView`出口到评分视图：
- en: '![Figure 19.4: Connections inspector showing the ratingsView outlet'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图19.4：连接检查器显示ratingsView出口'
- en: '](img/Figure_19.04_B17469.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.04_B17469.jpg)'
- en: 'Figure 19.4: Connections inspector showing the ratingsView outlet'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.4：连接检查器显示ratingsView出口
- en: 'Build and run your project and go to the **Restaurant Detail** screen for any
    restaurant. The ratings view should display three and a half stars:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的项目，并转到任何餐厅的**餐厅详情**屏幕。评分视图应该显示三颗半星：
- en: '![Figure 19.5: iOS Simulator showing ratings view displaying 3.5 stars'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图19.5：iOS模拟器显示显示3.5颗星的评分视图'
- en: '](img/Figure_19.05_B17469.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.05_B17469.jpg)'
- en: 'Figure 19.5: iOS Simulator showing ratings view displaying 3.5 stars'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.5：iOS模拟器显示显示3.5颗星的评分视图
- en: You have created and implemented the ratings view for the **Restaurant Detail**
    screen. It looks great, but at the moment, the ratings view does not respond when
    you tap on it. You will make it respond to touch events in the next section so
    the user can select a rating.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为**餐厅详情**屏幕创建并实现了评分视图。它看起来很棒，但到目前为止，评分视图在被点击时没有响应。你将在下一节中使其对触摸事件做出响应，以便用户可以选择评分。
- en: Adding support for touch events
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加对触摸事件的支持
- en: At present, the `RestaurantDetailViewController` class has an outlet, `ratingsView`,
    connected to a ratings view in the **Restaurant Detail** screen. It displays a
    rating of three and a half stars, but you can't change the rating. You will need
    to support touch events to make the ratings view respond to taps.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`RestaurantDetailViewController`类有一个出口`ratingsView`连接到**餐厅详情**屏幕中的评分视图。它显示三颗半星的评分，但你无法更改评分。你需要支持触摸事件，使评分视图能够对点击做出响应。
- en: Important Information
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: You can learn more about handling touches at [https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/handling_touches_in_your_view](https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/handling_touches_in_your_view).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/handling_touches_in_your_view](https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/handling_touches_in_your_view)了解更多关于处理触摸事件的信息。
- en: 'To support touch events, you''ll modify the `RatingsView` class to track the
    user''s touches on the screen and use them to determine the rating. Follow these
    steps:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要支持触摸事件，你需要修改`RatingsView`类以跟踪用户在屏幕上的触摸，并使用它们来确定评分。按照以下步骤操作：
- en: 'Click the `RatingsView` file in the Project navigator and add the following
    property after the `draw(_:)` method:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`RatingsView`文件，并在`draw(_:)`方法之后添加以下属性：
- en: '[PRE13]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`canBecomeFirstResponder` is a `UIControl` property that determines whether
    an object can become the first responder. The ratings view needs to become the
    first responder to respond to touch events. This method returns `false` by default,
    as not all user interface elements need to respond to touches. You override this
    method to make it return `true` so the ratings view can become the first responder.'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`canBecomeFirstResponder` 是一个 `UIControl` 属性，它确定一个对象是否可以成为第一个响应者。评分视图需要成为第一个响应者以响应用户的触摸事件。此方法默认返回
    `false`，因为并非所有用户界面元素都需要响应用户的触摸。您重写此方法，使其返回 `true`，以便评分视图可以成为第一个响应者。'
- en: 'To track the user''s touches on the screen, add the following code after the
    `canBecomeFirstResponder` property you just added:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要跟踪用户在屏幕上的触摸，请在您刚刚添加的 `canBecomeFirstResponder` 属性之后添加以下代码：
- en: '[PRE14]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s break this down:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE15]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This method is one of the methods declared in the `UIControl` class. It is called
    when the user's touch is within the bounds of a `UIControl` instance. The location,
    size, movement, and force of a touch on the screen are stored in a `UITouch` instance.
    This method needs to return `true` if you want to track the user's touches. You
    override this method so you can define custom behavior when the user touches the
    ratings view.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 `UIControl` 类中声明的方法之一。当用户的触摸在 `UIControl` 实例的范围内时被调用。屏幕上触摸的位置、大小、移动和力量都存储在一个
    `UITouch` 实例中。如果您想跟踪用户的触摸，则需要此方法返回 `true`。您重写此方法，以便在用户触摸评分视图时定义自定义行为。
- en: '[PRE16]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `isEnabled` property is checked in this `guard` statement to see if the
    ratings view is enabled. If the ratings view is not enabled, the user's touches
    will not be tracked.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个 `guard` 语句中检查 `isEnabled` 属性，以查看评分视图是否启用。如果评分视图未启用，则不会跟踪用户的触摸。
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Calls the superclass implementation of this method. This will take care of any
    initialization required by the parent class.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用此方法的超类实现。这将处理父类所需的任何初始化。
- en: '[PRE18]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You'll pass the `UITouch` instance to this method, which will be executed for
    every touch. You'll declare and define this method in the next step.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将传递 `UITouch` 实例到这个方法，它将为每个触摸执行。您将在下一步声明和定义此方法。
- en: '[PRE19]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tracks the user's touches when the ratings view is enabled.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当评分视图启用时跟踪用户的触摸。
- en: 'You''ll see an error because you haven''t implemented `handle(with:)` yet,
    so create a `private` extension for `RatingsView` after all other code in the
    file and type the following code into it:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个错误，因为您还没有实现 `handle(with:)`，所以请在文件中的所有其他代码之后为 `RatingsView` 创建一个 `private`
    扩展，并在其中输入以下代码：
- en: '[PRE20]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`handle(with:)` will calculate the rating value based on the location of the
    user''s touch. It takes a `UITouch` instance as a parameter. First, `starRectWidth`
    is assigned the ratings view''s `width`, divided by `5`. Next, the `UITouch` instance''s
    location within the ratings view is assigned to `location`. Then, `value` is assigned
    the `x` position of `location` divided by `starRectWidth`. This means `value`
    will contain a range of values between 0 and 5\. Next, the `if` statement calculates
    the rating corresponding to the position of the touch and calls `updateRating(with:)`,
    passing `value` to it. You''ll implement `updateRating(with:)` in the next step.'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`handle(with:)` 将根据用户触摸的位置计算评分值。它接受一个 `UITouch` 实例作为参数。首先，`starRectWidth` 被分配为评分视图的
    `width`，除以 `5`。接下来，将 `UITouch` 实例在评分视图内的位置分配给 `location`。然后，将 `value` 分配给 `location`
    的 `x` 位置除以 `starRectWidth`。这意味着 `value` 将包含介于 0 和 5 之间的值范围。接下来，`if` 语句计算与触摸位置相对应的评分，并调用
    `updateRating(with:)`，将 `value` 传递给它。您将在下一步实现 `updateRating(with:)`。'
- en: To understand how the if statement works, let's say the ratings view's `width`
    is `200`. `starRectWidth` would be set to 200/5 = `40`. Let's assume the user
    touched the screen at position `x` = `130`, `y` = `17`, which corresponds to a
    point between the third and fourth stars. `value` would be assigned 130/40 = `3.25`.
    So, the `if` statement would evaluate `(3.25 + 0.5 < 3.25.rounded(.up)`, which
    becomes (3.75 < 4.0), which returns `true`, thus `value` would be set to `floor(3.25)`
    + 0.5, which becomes 3.0 + 0.5, which is `3.5`. So, `updateRating(with:)` would
    be passed a value of `3.5`.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了理解 `if` 语句的工作原理，假设评分视图的 `width` 是 `200`。`starRectWidth` 将设置为 200/5 = `40`。假设用户在位置
    `x` = `130`，`y` = `17` 处触摸屏幕，这对应于第三颗星和第四颗星之间的一个点。`value` 将被分配为 130/40 = `3.25`。所以，`if`
    语句将评估 `(3.25 + 0.5 < 3.25.rounded(.up)`，这变成 (3.75 < 4.0)，返回 `true`，因此 `value`
    将被设置为 `floor(3.25)` + 0.5，这变成 3.0 + 0.5，即 `3.5`。所以，`updateRating(with:)` 将传递一个值为
    `3.5`。
- en: 'You''ll see an error because you haven''t implemented `updateRating(with:)`
    yet, so type the following code into the `private` extension after the `handle(with:)`
    method:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到一个错误，因为你还没有实现`updateRating(with:)`，所以请在`handle(with:)`方法之后的`private`扩展中输入以下代码：
- en: '[PRE21]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`updateRating(with:)` checks to see if `value` is not equal to the current
    rating and between 0 and 5\. If it is, `value` is assigned to `rating`.'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`updateRating(with:)`检查`value`是否不等于当前评分且在0到5之间。如果是，则将`value`分配给`rating`。'
- en: Following on from the preceding example, since `3.5` is between 0 and 5, it
    will be assigned to `rating` if it's not equal to the current value of `rating`.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的示例基础上，由于`3.5`位于0和5之间，如果它不等于当前`rating`的值，它将被分配给`rating`。
- en: 'The ratings view will have to be redrawn once the rating has changed to display
    the correct state of the stars. Modify the `rating` property declaration as follows:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评分视图在评分改变后需要重新绘制，以显示星星的正确状态。将`rating`属性声明修改如下：
- en: '[PRE22]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, you have defined a `rating` property's value. Every time `rating` changes,
    `setNeedsDisplay()` is called and the ratings view is redrawn. Since the screen
    is redrawn only if the rating changes, there is a small performance benefit.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你已定义了`rating`属性的值。每次`rating`发生变化时，都会调用`setNeedsDisplay()`并重新绘制评分视图。由于屏幕只有在评分发生变化时才会重新绘制，因此可以带来一点性能上的好处。
- en: 'You''ve added all the code that''s necessary for the ratings view to respond
    to touches. Now, you''ll need to update the `RestaurantDetailViewController` class
    to set the `isEnabled` property for the ratings view. Click the `RestaurantDetailViewController`
    file in the Project navigator and modify the `createRating()` method, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经添加了所有必要的代码，使评分视图能够响应触摸。现在，你需要更新`RestaurantDetailViewController`类来设置评分视图的`isEnabled`属性。在项目导航器中点击`RestaurantDetailViewController`文件，并修改`createRating()`方法，如下所示：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Setting the `isEnabled` property to `true` allows the ratings view to become
    the first responder and begin tracking touches, which will trigger `handle(with:)`
    to calculate the rating based on the position of the touch, which in turn calls
    `updateRating(with:)` to update the ratings view.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将`isEnabled`属性设置为`true`允许评分视图成为第一响应者并开始跟踪触摸，这将触发`handle(with:)`根据触摸位置计算评分，进而调用`updateRating(with:)`来更新评分视图。
- en: 'Build and run your project. Tapping on the ratings view now changes the rating,
    depending on where you tapped. Tap between the first and second stars, as shown:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的项目。现在点击评分视图会根据点击的位置改变评分，如下所示：
- en: '![Figure 19.6: iOS Simulator showing ratings view tap location'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 19.6：iOS模拟器显示评分视图的触摸位置'
- en: '](img/Figure_19.06_B17469.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_19.06_B17469.jpg]'
- en: 'Figure 19.6: iOS Simulator showing ratings view tap location'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.6：iOS模拟器显示评分视图的触摸位置
- en: The rating will change to one and a half stars.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 评分将变为一个半星。
- en: Eventually, you'll calculate the overall rating by aggregating all the ratings
    submitted by users in the **Review Form** screen. If you tap the **Add Review**
    button, the **Review Form** screen is displayed but you can't dismiss it or set
    a rating. In the next section, you'll configure the **Cancel** button to dismiss
    the **Review Form** screen when tapped.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你将通过汇总用户在**审查表**屏幕上提交的所有评分来计算总体评分。如果你点击**添加评论**按钮，**审查表**屏幕会显示，但你无法将其关闭或设置评分。在下一节中，你将配置**取消**按钮，以便在点击时关闭**审查表**屏幕。
- en: Implementing an unwind method for the Cancel button
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现取消按钮的unwind方法
- en: 'Let''s take a look at the **Review Form** screen. The segue between the **Add
    Review** button and the **Review Form** screen has already been made for you.
    Build and run your project, go to the **Restaurant Detail** screen, and tap the
    **Add Review** button:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看**审查表**屏幕。**添加评论**按钮和**审查表**屏幕之间的转场已经为你准备好了。构建并运行你的项目，转到**餐厅详情**屏幕，并点击**添加评论**按钮：
- en: '![Figure 19.7: iOS Simulator showing Add Review button'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 19.7：iOS模拟器显示添加评论按钮'
- en: '](img/Figure_19.07_B17469.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_19.07_B17469.jpg]'
- en: 'Figure 19.7: iOS Simulator showing Add Review button'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.7：iOS模拟器显示添加评论按钮
- en: 'The **Review Form** screen is displayed (note that the top table view cell
    has a blank space where a ratings view should be, which you will add later):'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**审查表**屏幕被显示（注意顶部表格视图单元格中有一个空白区域，那里应该是一个评分视图，你将在稍后添加）：'
- en: '![Figure 19.8: iOS Simulator showing Review Form screen'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 19.8：iOS模拟器显示审查表屏幕'
- en: '](img/Figure_19.08_B17469.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_19.08_B17469.jpg]'
- en: 'Figure 19.8: iOS Simulator showing Review Form screen'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.8：iOS模拟器显示的“审查表”屏幕
- en: 'Once the **Review Form** screen appears on the screen, you can''t dismiss it,
    as the button actions for the **Save** and **Cancel** buttons have not been configured.
    Just as you did with the **Locations** screen, you need to implement an unwind
    method to dismiss the **Review Form** screen. Follow these steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦**审查表单**屏幕出现在屏幕上，您就不能关闭它，因为**保存**和**取消**按钮的动作尚未配置。就像您对**位置**屏幕所做的那样，您需要实现一个unwind方法来关闭**审查表单**屏幕。按照以下步骤操作：
- en: Click the `RestaurantDetailViewController` file in the Project navigator.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`RestaurantDetailViewController`文件。
- en: 'Implement the unwind method as follows in the `private` extension, before the
    `createRating()` method:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`private`扩展中，在`createRating()`方法之前，按照以下方式实现unwind方法：
- en: '[PRE24]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This method will be called when the **Review Form** screen transitions to the
    **Restaurant Detail** screen.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当**审查表单**屏幕过渡到**餐厅详情**屏幕时，将调用此方法。
- en: 'Open the `ReviewForm` storyboard file and *Ctrl + Drag* from the **Cancel**
    button to the Exit icon in the Scene Dock, as shown:![Figure 19.9: Table View
    Controller Scene showing Cancel button action being set'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ReviewForm`故事板文件，并按*Ctrl + Drag*从**取消**按钮拖动到场景工具栏中的退出图标，如图所示：![图19.9：显示设置取消按钮动作的表视图控制器场景
- en: '](img/Figure_19.09_B17469.jpg)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_19.09_B17469.jpg)'
- en: 'Figure 19.9: Table View Controller Scene showing Cancel button action being
    set'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图19.9：显示设置取消按钮动作的表视图控制器场景
- en: 'Choose `unwindReviewCancelWithSegue` in the popup menu:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出菜单中选择`unwindReviewCancelWithSegue`：
- en: '![Figure 19.10: Pop-up menu with unwindReviewCancelWithSegue: selected'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图19.10：弹出菜单，其中选择了unwindReviewCancelWithSegue:'
- en: '](img/Figure_19.10_B17469.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.10_B17469.jpg)'
- en: 'Figure 19.10: Pop-up menu with unwindReviewCancelWithSegue: selected'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '图19.10：弹出菜单，其中选择了unwindReviewCancelWithSegue:'
- en: Build and run your project. You can now dismiss the **Review Form** screen by
    tapping the **Cancel** button.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的项目。现在，您可以通过点击**取消**按钮来关闭**审查表单**屏幕。
- en: Next, let's look at the **Save** button. You'll create a view controller for
    the **Review Form** screen to process the data inside the **Review Form** screen's
    fields when the **Save** button is tapped. You'll do this in the next section.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看**保存**按钮。您将为**审查表单**屏幕创建一个视图控制器，以便在点击**保存**按钮时处理**审查表单**屏幕字段内的数据。您将在下一节中这样做。
- en: Creating the ReviewFormViewController class
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ReviewFormViewController类
- en: 'To process user input, you''ll create the `ReviewFormViewController` class
    to be the view controller for the **Review Form** screen. For the time being,
    you''ll configure this class to grab all the values from the **Review Form** screen''s
    fields and print them in the Debug area. You will learn how to store reviews later
    in [*Chapter 21*](B17469_21_Final_VK_ePub.xhtml#_idTextAnchor362)*, Understanding
    Core Data*. Follow these steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理用户输入，您将创建`ReviewFormViewController`类，使其成为**审查表单**屏幕的视图控制器。目前，您将配置此类以从**审查表单**屏幕的字段中获取所有值并在调试区域打印它们。您将在稍后的[*第21章*](B17469_21_Final_VK_ePub.xhtml#_idTextAnchor362)*，理解核心数据*中学习如何存储评论。按照以下步骤操作：
- en: Right-click the `ReviewForm` folder and select **New File**.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`ReviewForm`文件夹并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch Class**然后点击**下一步**。'
- en: 'Configure the file as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置文件：
- en: '`ReviewFormViewController`'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ReviewFormViewController`'
- en: '`UITableViewController`'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UITableViewController`'
- en: '`Swift`'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: Click `ReviewFormViewController` file will appear in the Project navigator.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`ReviewFormViewController`文件将在项目导航器中显示。
- en: 'Delete everything after the `viewDidLoad()` method and all the commented code.
    Add the following outlets after the class declaration. They correspond to the
    fields inside the **Review Form** screen:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`viewDidLoad()`方法之后以及所有注释掉的代码。在类声明之后添加以下输出。它们对应于**审查表单**屏幕内的字段：
- en: '[PRE25]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You also need to configure the action for the `viewDidLoad()` method:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要配置`viewDidLoad()`方法的动作：
- en: '[PRE26]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This method prints the contents of the **Review Form** screen's fields to the
    Debug area and dismisses it.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法将**审查表单**屏幕的字段内容打印到调试区域并关闭它。
- en: 'Now let''s connect the outlets in the `ReviewForm` storyboard file, as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照以下方式连接`ReviewForm`故事板文件中的输出：
- en: 'Click the `ReviewForm` storyboard file in the Project navigator and click the
    `ReviewFormViewController`:![Figure 19.11: Identity inspector with Class set to
    ReviewFormViewController'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`ReviewForm`故事板文件并点击`ReviewFormViewController`：![图19.11：身份检查器，将类设置为ReviewFormViewController
- en: '](img/Figure_19.11_B17469.jpg)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_19.11_B17469.jpg)'
- en: 'Figure 19.11: Identity inspector with Class set to ReviewFormViewController'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 19.11：身份检查器，类设置为 ReviewFormViewController
- en: Note that the name **Table View Controller Scene** will change to **Review Form
    View Controller Scene**.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，名称 **Table View Controller Scene** 将更改为 **Review Form View Controller Scene**。
- en: 'Click the `RatingsView`. The view''s name will change to **Ratings View**:![Figure
    19.12: Identity inspector with Class set to RatingsView'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `RatingsView`。视图的名称将更改为 **Ratings View**：![图 19.12：身份检查器，类设置为 RatingsView
- en: '](img/Figure_19.12_B17469.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_19.12_B17469.jpg)'
- en: 'Figure 19.12: Identity inspector with Class set to RatingsView'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 19.12：身份检查器，类设置为 RatingsView
- en: 'Next, you will connect the outlets. Click the **Review Form View Controller**
    icon in the document outline and click the Connections inspector button:![Figure
    19.13: Connections Inspector button'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将连接输出口。在文档大纲中点击 **审查表单视图控制器** 图标，然后点击连接检查器按钮：![图 19.13：连接检查器按钮
- en: '](img/Figure_19.13_B17469.jpg)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_19.13_B17469.jpg)'
- en: 'Figure 19.13: Connections Inspector button'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 19.13：连接检查器按钮
- en: 'Connect the `ratingsView` outlet to the **Ratings View**:![Figure 19.14: Connections
    inspector showing ratingsView outlet'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `ratingsView` 输出口连接到 **Ratings View**：![图 19.14：连接检查器显示 ratingsView 输出口
- en: '](img/Figure_19.14_B17469.jpg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_19.14_B17469.jpg)'
- en: 'Figure 19.14: Connections inspector showing ratingsView outlet'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 19.14：连接检查器显示 ratingsView 输出口
- en: 'Connect the `titleTextField` outlet to the first **Text Field**:![Figure 19.15:
    Connections inspector showing titleTextField outlet'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `titleTextField` 输出口连接到第一个 **文本字段**：![图 19.15：连接检查器显示 titleTextField 输出口
- en: '](img/Figure_19.15_B17469.jpg)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_19.15_B17469.jpg)'
- en: 'Figure 19.15: Connections inspector showing titleTextField outlet'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 19.15：连接检查器显示 titleTextField 输出口
- en: 'Connect the `nameTextField` outlet to the second **Text Field**:![Figure 19.16:
    Connections inspector showing nameTextField outlet'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `nameTextField` 输出口连接到第二个 **文本字段**：![图 19.16：连接检查器显示 nameTextField 输出口
- en: '](img/Figure_19.16_B17469.jpg)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_19.16_B17469.jpg)'
- en: 'Figure 19.16: Connections inspector showing nameTextField outlet'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 19.16：连接检查器显示 nameTextField 输出口
- en: 'Connect the `reviewTextView` outlet to the **Text View**:![Figure 19.17: Connections
    inspector showing reviewTextView outlet'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `reviewTextView` 输出口连接到 **文本视图**：![图 19.17：连接检查器显示 reviewTextView 输出口
- en: '](img/Figure_19.17_B17469.jpg)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_19.17_B17469.jpg)'
- en: 'Figure 19.17: Connections inspector showing reviewTextView outlet'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 19.17：连接检查器显示 reviewTextView 输出口
- en: 'Finally, connect the `onSaveTapped:` action to the **Save** button:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将 `onSaveTapped:` 动作连接到 **保存** 按钮：
- en: '![Figure 19.18: Connections inspector showing Save button action being set'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 19.18：连接检查器显示设置 Save 按钮动作'
- en: '](img/Figure_19.18_B17469.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_19.18_B17469.jpg)'
- en: 'Figure 19.18: Connections inspector showing Save button action being set'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.18：连接检查器显示设置 Save 按钮动作
- en: 'Build and run your app. Go to the **Review Form** screen, set a rating, add
    some sample text to the fields, and tap the **Save** button:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用。转到 **审查表单** 屏幕，设置一个评分，向字段添加一些示例文本，然后点击 **保存** 按钮：
- en: '![Figure 19.19: iOS Simulator showing Review Form screen'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 19.19：iOS 模拟器显示审查表单屏幕'
- en: '](img/Figure_19.19_B17469.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_19.19_B17469.jpg)'
- en: 'Figure 19.19: iOS Simulator showing Review Form screen'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.19：iOS 模拟器显示审查表单屏幕
- en: 'You''ll see the data you entered appear in the Debug area:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到您输入的数据出现在调试区域：
- en: '![Figure 19.20: Debug area showing contents of Review Form screen text fields'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 19.20：调试区域显示审查表单屏幕文本字段的内容'
- en: '](img/Figure_19.20_B17469.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_19.20_B17469.jpg)'
- en: 'Figure 19.20: Debug area showing contents of Review Form screen text fields'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.20：调试区域显示审查表单屏幕文本字段的内容
- en: Congratulations! The **Review Form** screen is now able to accept user input.
    You'll learn how to save and present the review data in [*Chapter 21*](B17469_21_Final_VK_ePub.xhtml#_idTextAnchor362)*,
    Understanding Core Data*.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！**审查表单**屏幕现在能够接受用户输入。您将在 [*第 21 章*](B17469_21_Final_VK_ePub.xhtml#_idTextAnchor362)*，理解核心数据*
    中学习如何保存和展示评论数据。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you created a new custom `UIControl` subclass, `RatingsView`,
    from scratch and added it to the `ReviewFormViewController` class, a view controller
    for the **Review Form** screen, and configured the **Cancel** and **Save** button
    actions so that the user can dismiss the Review Form screen or submit a review.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您从头开始创建了一个新的自定义 `UIControl` 子类 `RatingsView` 并将其添加到 `ReviewFormViewController`
    类中，这是一个用于 **审查表单** 屏幕的视图控制器，并配置了 **取消** 和 **保存** 按钮动作，以便用户可以关闭审查表单屏幕或提交评论。
- en: You now have a good grasp of how to create custom `UIControl` classes, how to
    make them respond to user interaction, and how to implement a review form that
    can accept user input. This will be useful when you write your own apps.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经很好地掌握了如何创建自定义的 `UIControl` 类，如何使它们响应用户交互，以及如何实现一个可以接受用户输入的审查表单。这在你编写自己的应用程序时将非常有用。
- en: In the next chapter, you'll learn how to work with photos from the camera or
    Photo Library, as well as how to apply photo filters to the photos that you have.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何处理来自相机或照片库的照片，以及如何应用照片滤镜到你所拥有的照片上。
