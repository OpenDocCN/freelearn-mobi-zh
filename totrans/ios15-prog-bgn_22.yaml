- en: '*Chapter 19*: Getting Started with Custom UIControls'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, your app has data in all of its screens, but the **Restaurant
    Detail** screen is incomplete. You can't set a star rating for a restaurant, and
    you can't add photos or reviews.
  prefs: []
  type: TYPE_NORMAL
- en: You have been using Apple's standard UI elements so far. In this chapter, you'll
    create a custom subclass of the `UIControl` class that displays restaurant ratings
    in the form of stars. You'll modify this subclass so users can set a rating for
    a restaurant by tapping it. After that, you'll implement a review form that allows
    users to submit restaurant reviews.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to create custom `UIControl`
    classes, handle touch events, and implement review forms for your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom `UIControl` subclass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying stars in your custom `UIControl` subclass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding support for touch events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing an unwind method for the **Cancel** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the `ReviewFormViewController` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter19` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3cRFcXa](https://bit.ly/3cRFcXa)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by learning how to create a custom `UIControl` subclass that will
    display a star rating on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom UIControl subclass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ve only used Apple''s predefined UI elements so far, such as labels and
    buttons. All you had to do was click the Library button, search for the object
    you want, and drag it into the storyboard. However, there will be cases where
    the objects provided by Apple are either unsuitable or don''t exist. In such cases,
    you will need to build your own. Let''s review the **Restaurant Detail** screen
    that you saw in the app tour:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.1: Restaurant Detail screen showing the star rating'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.01_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.1: Restaurant Detail screen showing the star rating'
  prefs: []
  type: TYPE_NORMAL
- en: You can see a group of five stars just above the `RestaurantDetail` storyboard
    file and the `ReviewForm` storyboard file have blank view objects where the stars
    should be. You will create the `RatingsView` class, a custom subclass of the `UIControl`
    class, that you will use in both scenes. The `UIControl` class is a subclass of
    the `UIView` class, and it is used as the superclass for the `RatingsView` class
    because `RatingsView` instances have to respond when the user taps on them.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about `UIControl` at [https://developer.apple.com/documentation/uikit/uicontrol](https://developer.apple.com/documentation/uikit/uicontrol).
  prefs: []
  type: TYPE_NORMAL
- en: 'A `RatingsView` instance will display ratings as stars. The user will also
    be able to select half-stars. Let''s begin by creating a subclass of the `UIControl`
    class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Review Form` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`RatingsView`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UIControl`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `RatingsView` file will appear in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you need to set the identity of the view object next to the `RatingsView`.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Expand the `RestaurantDetail` folder in the Project navigator. Click the `RestaurantDetail`
    storyboard file and select the **View** object next to the **0.0** **Label** as
    shown:![Figure 19.2: Editor area showing View object next to the 0.0 Label'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.02_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.2: Editor area showing View object next to the 0.0 Label'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Identity inspector button. Under `RatingsView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.3: Identity inspector with Class set to RatingsView'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.03_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.3: Identity inspector with Class set to RatingsView'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's modify the `RatingsView` class to make it display stars. You'll use
    the graphic assets inside the `Assets.xcassets` file to do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying stars in your custom UIControl subclass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, you have created a new `UIControl` subclass named `RatingsView` in
    your project. You have also assigned the class of the view object next to the
    `Restaurant` `Detail` screen to the `RatingsView` class. For the rest of this
    chapter, an instance of the `RatingsView` class will be referred to as a ratings
    view (the same way an instance of the `UIButton` class is referred to as a button).
    In this section, you will add some code to the `RatingsView` class to make a ratings
    view display stars. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `RatingsView` file in the Project navigator and remove all the commented
    code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following after the `RatingsView` class declaration to declare the
    properties for the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first three properties, `filledStarImage`, `halfStarImage`, and `emptyStarImage`,
    are assigned the star images stored in the `Assets.xcassets` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `totalStars` property determines the total number of stars to be drawn.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `rating` property is used to store a restaurant rating. The types of stars
    drawn will be determined by the value of `rating`. For instance, if `rating` is
    `3.5`, the ratings view will display three filled stars, one half-filled star,
    and one empty star.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, let''s create the method that will draw the ratings view on the screen.
    All `UIView` subclasses have a `draw(_:)` method, which is responsible for drawing
    their views on the screen. You''ll override the superclass implementation of this
    method for the `RatingsView` class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code in the class declaration after the property declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creates an instance of `UIGraphicsGetCurrentContext` and assigns it to `context`.
    You can think of it as a sketchpad, where you will compose UI elements together.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Sets the fill color of `context` to the default system background color.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Fills the rectangular area specified by `rect` with the fill color.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These statements determine how big each star should be. The first statement
    gets the width of the ratings view and assigns it to `ratingsViewWidth`. The next
    statement gets the width available for each star by dividing the width of the
    ratings view by the number of stars that need to be drawn. This value is assigned
    to `availableWidthForStar`. For the third statement, imagine that each star is
    enclosed in a rectangle. This statement calculates how long each side of this
    rectangle should be in order to fit within the ratings view. If `availableWidthForStar`
    is less than or equal to the ratings view's height, `starSideLength` is set to
    `availableWidthForStar`; otherwise, it's set to be the same as the ratings view's
    height.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The third statement makes use of a **ternary operator**. More information can
    be found at this link: [https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, let's assume the ratings view is 200 points wide and 50 points
    high. `availableWidthForStar` would be 200/5 = 40\. Since 40 <= 50 evaluates to
    `true`, `starSideLength` will be set to `40`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Since `totalStars` is set to `5`, this `for` loop repeats five times.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These statements calculate the origin and size of the rectangle where each star
    should be drawn within the ratings view. This is then assigned to `frame`. The
    origin values are offset from the top-left corner of the ratings view, and the
    width and height are set to `starSidelength`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, for the first star, `starOriginX` is (40*0.0) + (40-40)/2 = `0`.
    `starOriginY` is (50 – 40)/2 = `5`. `frame` would thus be a `CGRect` where `x`
    is `0`, `y` is `5`, `width` is `40`, and `height` is `40`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the value of the ratings view's `rating` property, these statements
    determine whether the star to be drawn is filled, half-filled, or empty.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's assume `rating` is `3.5`.
  prefs: []
  type: TYPE_NORMAL
- en: The first star has an index of `0`. This means `Double`(0 + 1) <= 3.5 will be
    1.0 <= 3.5, which evaluates to `true`. This means the first star that's drawn
    will be a filled star. The same is true for the second and third stars.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth star has an index of `3`. This means `Double`(3 + 1) <= 3.5 will
    be 4.0 <= 3.5, which evaluates to `false`. The `else` clause evaluates `Double`(3
    + 1) <= 4.0, which evaluates to `true`, so the fourth star drawn will be a half-filled
    star.
  prefs: []
  type: TYPE_NORMAL
- en: The fifth star has an index of `4`. This means `Double`(4 + 1) <= 3.5 will be
    5.0 <= 3.5, which evaluates to `false`. The `else` clause evaluates `Double`(4
    + 1) <= 4.0, which also evaluates to `false`, so the fifth star drawn will be
    an empty star.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This statement draws the star in the specified `frame`.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s all the code that''s needed for the `RatingsView` class. Now, let''s
    add an outlet to the `RestaurantDetailViewController` class so that it can manage
    what the ratings view displays. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `RestaurantDetailViewController` file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following code after the `overallRatingLabel` outlet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates an outlet in the `RestaurantDetailViewController` class for the
    ratings view. You now have an outlet named `ratingsView` of type `RatingsView`
    that you will connect to the ratings view in the storyboard later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a method to assign `3.5` to a `ratingsView` instance''s `rating` property.
    Type the following in your `private` extension after the `initialize()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `initalize()` method to call the `createRating()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `RestaurantDetail` storyboard file and select `ratingsView` outlet
    to the ratings view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.4: Connections inspector showing the ratingsView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.04_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.4: Connections inspector showing the ratingsView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your project and go to the **Restaurant Detail** screen for any
    restaurant. The ratings view should display three and a half stars:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.5: iOS Simulator showing ratings view displaying 3.5 stars'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.05_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.5: iOS Simulator showing ratings view displaying 3.5 stars'
  prefs: []
  type: TYPE_NORMAL
- en: You have created and implemented the ratings view for the **Restaurant Detail**
    screen. It looks great, but at the moment, the ratings view does not respond when
    you tap on it. You will make it respond to touch events in the next section so
    the user can select a rating.
  prefs: []
  type: TYPE_NORMAL
- en: Adding support for touch events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At present, the `RestaurantDetailViewController` class has an outlet, `ratingsView`,
    connected to a ratings view in the **Restaurant Detail** screen. It displays a
    rating of three and a half stars, but you can't change the rating. You will need
    to support touch events to make the ratings view respond to taps.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about handling touches at [https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/handling_touches_in_your_view](https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/handling_touches_in_your_view).
  prefs: []
  type: TYPE_NORMAL
- en: 'To support touch events, you''ll modify the `RatingsView` class to track the
    user''s touches on the screen and use them to determine the rating. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `RatingsView` file in the Project navigator and add the following
    property after the `draw(_:)` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`canBecomeFirstResponder` is a `UIControl` property that determines whether
    an object can become the first responder. The ratings view needs to become the
    first responder to respond to touch events. This method returns `false` by default,
    as not all user interface elements need to respond to touches. You override this
    method to make it return `true` so the ratings view can become the first responder.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To track the user''s touches on the screen, add the following code after the
    `canBecomeFirstResponder` property you just added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method is one of the methods declared in the `UIControl` class. It is called
    when the user's touch is within the bounds of a `UIControl` instance. The location,
    size, movement, and force of a touch on the screen are stored in a `UITouch` instance.
    This method needs to return `true` if you want to track the user's touches. You
    override this method so you can define custom behavior when the user touches the
    ratings view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `isEnabled` property is checked in this `guard` statement to see if the
    ratings view is enabled. If the ratings view is not enabled, the user's touches
    will not be tracked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Calls the superclass implementation of this method. This will take care of any
    initialization required by the parent class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll pass the `UITouch` instance to this method, which will be executed for
    every touch. You'll declare and define this method in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tracks the user's touches when the ratings view is enabled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll see an error because you haven''t implemented `handle(with:)` yet,
    so create a `private` extension for `RatingsView` after all other code in the
    file and type the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`handle(with:)` will calculate the rating value based on the location of the
    user''s touch. It takes a `UITouch` instance as a parameter. First, `starRectWidth`
    is assigned the ratings view''s `width`, divided by `5`. Next, the `UITouch` instance''s
    location within the ratings view is assigned to `location`. Then, `value` is assigned
    the `x` position of `location` divided by `starRectWidth`. This means `value`
    will contain a range of values between 0 and 5\. Next, the `if` statement calculates
    the rating corresponding to the position of the touch and calls `updateRating(with:)`,
    passing `value` to it. You''ll implement `updateRating(with:)` in the next step.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To understand how the if statement works, let's say the ratings view's `width`
    is `200`. `starRectWidth` would be set to 200/5 = `40`. Let's assume the user
    touched the screen at position `x` = `130`, `y` = `17`, which corresponds to a
    point between the third and fourth stars. `value` would be assigned 130/40 = `3.25`.
    So, the `if` statement would evaluate `(3.25 + 0.5 < 3.25.rounded(.up)`, which
    becomes (3.75 < 4.0), which returns `true`, thus `value` would be set to `floor(3.25)`
    + 0.5, which becomes 3.0 + 0.5, which is `3.5`. So, `updateRating(with:)` would
    be passed a value of `3.5`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll see an error because you haven''t implemented `updateRating(with:)`
    yet, so type the following code into the `private` extension after the `handle(with:)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`updateRating(with:)` checks to see if `value` is not equal to the current
    rating and between 0 and 5\. If it is, `value` is assigned to `rating`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Following on from the preceding example, since `3.5` is between 0 and 5, it
    will be assigned to `rating` if it's not equal to the current value of `rating`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The ratings view will have to be redrawn once the rating has changed to display
    the correct state of the stars. Modify the `rating` property declaration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you have defined a `rating` property's value. Every time `rating` changes,
    `setNeedsDisplay()` is called and the ratings view is redrawn. Since the screen
    is redrawn only if the rating changes, there is a small performance benefit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ve added all the code that''s necessary for the ratings view to respond
    to touches. Now, you''ll need to update the `RestaurantDetailViewController` class
    to set the `isEnabled` property for the ratings view. Click the `RestaurantDetailViewController`
    file in the Project navigator and modify the `createRating()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Setting the `isEnabled` property to `true` allows the ratings view to become
    the first responder and begin tracking touches, which will trigger `handle(with:)`
    to calculate the rating based on the position of the touch, which in turn calls
    `updateRating(with:)` to update the ratings view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your project. Tapping on the ratings view now changes the rating,
    depending on where you tapped. Tap between the first and second stars, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.6: iOS Simulator showing ratings view tap location'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.06_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.6: iOS Simulator showing ratings view tap location'
  prefs: []
  type: TYPE_NORMAL
- en: The rating will change to one and a half stars.
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, you'll calculate the overall rating by aggregating all the ratings
    submitted by users in the **Review Form** screen. If you tap the **Add Review**
    button, the **Review Form** screen is displayed but you can't dismiss it or set
    a rating. In the next section, you'll configure the **Cancel** button to dismiss
    the **Review Form** screen when tapped.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an unwind method for the Cancel button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the **Review Form** screen. The segue between the **Add
    Review** button and the **Review Form** screen has already been made for you.
    Build and run your project, go to the **Restaurant Detail** screen, and tap the
    **Add Review** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.7: iOS Simulator showing Add Review button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.07_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.7: iOS Simulator showing Add Review button'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Review Form** screen is displayed (note that the top table view cell
    has a blank space where a ratings view should be, which you will add later):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.8: iOS Simulator showing Review Form screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.08_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.8: iOS Simulator showing Review Form screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the **Review Form** screen appears on the screen, you can''t dismiss it,
    as the button actions for the **Save** and **Cancel** buttons have not been configured.
    Just as you did with the **Locations** screen, you need to implement an unwind
    method to dismiss the **Review Form** screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `RestaurantDetailViewController` file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement the unwind method as follows in the `private` extension, before the
    `createRating()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method will be called when the **Review Form** screen transitions to the
    **Restaurant Detail** screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `ReviewForm` storyboard file and *Ctrl + Drag* from the **Cancel**
    button to the Exit icon in the Scene Dock, as shown:![Figure 19.9: Table View
    Controller Scene showing Cancel button action being set'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.09_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.9: Table View Controller Scene showing Cancel button action being
    set'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose `unwindReviewCancelWithSegue` in the popup menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.10: Pop-up menu with unwindReviewCancelWithSegue: selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.10_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.10: Pop-up menu with unwindReviewCancelWithSegue: selected'
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your project. You can now dismiss the **Review Form** screen by
    tapping the **Cancel** button.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at the **Save** button. You'll create a view controller for
    the **Review Form** screen to process the data inside the **Review Form** screen's
    fields when the **Save** button is tapped. You'll do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ReviewFormViewController class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To process user input, you''ll create the `ReviewFormViewController` class
    to be the view controller for the **Review Form** screen. For the time being,
    you''ll configure this class to grab all the values from the **Review Form** screen''s
    fields and print them in the Debug area. You will learn how to store reviews later
    in [*Chapter 21*](B17469_21_Final_VK_ePub.xhtml#_idTextAnchor362)*, Understanding
    Core Data*. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ReviewForm` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ReviewFormViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UITableViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `ReviewFormViewController` file will appear in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delete everything after the `viewDidLoad()` method and all the commented code.
    Add the following outlets after the class declaration. They correspond to the
    fields inside the **Review Form** screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You also need to configure the action for the `viewDidLoad()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method prints the contents of the **Review Form** screen's fields to the
    Debug area and dismisses it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s connect the outlets in the `ReviewForm` storyboard file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `ReviewForm` storyboard file in the Project navigator and click the
    `ReviewFormViewController`:![Figure 19.11: Identity inspector with Class set to
    ReviewFormViewController'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.11_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.11: Identity inspector with Class set to ReviewFormViewController'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that the name **Table View Controller Scene** will change to **Review Form
    View Controller Scene**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `RatingsView`. The view''s name will change to **Ratings View**:![Figure
    19.12: Identity inspector with Class set to RatingsView'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.12_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.12: Identity inspector with Class set to RatingsView'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, you will connect the outlets. Click the **Review Form View Controller**
    icon in the document outline and click the Connections inspector button:![Figure
    19.13: Connections Inspector button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.13_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.13: Connections Inspector button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Connect the `ratingsView` outlet to the **Ratings View**:![Figure 19.14: Connections
    inspector showing ratingsView outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.14_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.14: Connections inspector showing ratingsView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Connect the `titleTextField` outlet to the first **Text Field**:![Figure 19.15:
    Connections inspector showing titleTextField outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.15_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.15: Connections inspector showing titleTextField outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Connect the `nameTextField` outlet to the second **Text Field**:![Figure 19.16:
    Connections inspector showing nameTextField outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.16: Connections inspector showing nameTextField outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Connect the `reviewTextView` outlet to the **Text View**:![Figure 19.17: Connections
    inspector showing reviewTextView outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.17_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.17: Connections inspector showing reviewTextView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, connect the `onSaveTapped:` action to the **Save** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.18: Connections inspector showing Save button action being set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.18_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.18: Connections inspector showing Save button action being set'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Go to the **Review Form** screen, set a rating, add
    some sample text to the fields, and tap the **Save** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.19: iOS Simulator showing Review Form screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.19_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.19: iOS Simulator showing Review Form screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see the data you entered appear in the Debug area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.20: Debug area showing contents of Review Form screen text fields'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.20_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 19.20: Debug area showing contents of Review Form screen text fields'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! The **Review Form** screen is now able to accept user input.
    You'll learn how to save and present the review data in [*Chapter 21*](B17469_21_Final_VK_ePub.xhtml#_idTextAnchor362)*,
    Understanding Core Data*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created a new custom `UIControl` subclass, `RatingsView`,
    from scratch and added it to the `ReviewFormViewController` class, a view controller
    for the **Review Form** screen, and configured the **Cancel** and **Save** button
    actions so that the user can dismiss the Review Form screen or submit a review.
  prefs: []
  type: TYPE_NORMAL
- en: You now have a good grasp of how to create custom `UIControl` classes, how to
    make them respond to user interaction, and how to implement a review form that
    can accept user input. This will be useful when you write your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn how to work with photos from the camera or
    Photo Library, as well as how to apply photo filters to the photos that you have.
  prefs: []
  type: TYPE_NORMAL
