- en: Chapter 5. Animating our Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。为我们的游戏添加动画
- en: We're off to a great start in our mobile game development journey. We have already
    gone through a great deal of programming, from displaying objects on screen to
    writing game logic that is displayed to the user. One of the most powerful things
    about the Corona SDK is that any display object can be animated. This is a testament
    to the flexible graphics model that Corona offers.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在我们的移动游戏开发之旅中，我们取得了良好的开端。我们已经经历了大量的编程，从在屏幕上显示对象到编写用户可以看到的游戏逻辑。Corona SDK最强大的功能之一是任何显示对象都可以被动画化。这是对Corona提供的灵活图形模型的证明。
- en: Animation adds a lot of character to the user experience in a game. This is
    accomplished by generating a sequence of frames that evolve smoothly from frame
    to frame. We'll be learning this first hand and applying it to the new game that
    we're going to create.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 动画为游戏中的用户体验增添了众多特色。这是通过生成一系列帧来实现的，这些帧从一帧平滑地过渡到另一帧。我们将亲身体验并应用这些知识到我们将要创建的新游戏中。
- en: 'In this chapter we will:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Work with motion and transitions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用运动和过渡工作
- en: Animate with movieclips
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用电影剪辑动画
- en: Animate with sprite sheets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用精灵表动画
- en: Create a game loop for display objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为显示对象创建游戏循环
- en: Build our next game framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建我们的下一个游戏框架
- en: Let's animate!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始动画吧！
- en: Panda star catcher
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熊猫星捕手
- en: This section involves creating our second game called Panda Star Catcher. The
    main premise is a panda named Ling Ling who needs to launch toward the skies and
    catch as many stars as possible before the timer runs out. The panda will be animated
    and have separate movements for every course of action that is applied such as
    the set up before launch and while it's in the air. The slingshot mechanics will
    also be applied to launch Ling Ling into the air. You may have seen similar features
    in games such as Angry Birds and Crush the Castle.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涉及创建我们的第二个游戏，名为《熊猫星捕手》。主要前提是一只名叫玲玲的熊猫，它需要在计时器耗尽之前向天空发射，尽可能多地捕捉星星。熊猫将被动画化，并且对于每个应用的动作（如发射前的设置和它在空中时）都会有不同的动作。弹射机制也将被应用于将玲玲发射到空中。您可能在《愤怒的小鸟》和《城堡粉碎》等游戏中见过类似的功能。
- en: Let's get everything moving
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始让一切动起来
- en: 'We have introduced transitions in [Chapter 3](ch03.html "Chapter 3. Building
    our First Game: Breakout"), *Building our First Game: Breakout* and briefly touched
    base with it. Let''s go into more detail with them.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章。构建我们的第一个游戏：Breakout")中介绍了过渡，*构建我们的第一个游戏：Breakout*，并对它进行了简要的介绍。让我们更深入地探讨它们。
- en: Transitions
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡
- en: 'The transition library allows you to create animations with only a single line
    of code by allowing you to tween one or more properties of a display object. We
    discussed the basics of transitions back in [Chapter 3](ch03.html "Chapter 3. Building
    our First Game: Breakout"),'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡库允许您通过允许您对显示对象的一个或多个属性进行缓动，仅用一行代码创建动画。我们之前在[第3章](ch03.html "第3章。构建我们的第一个游戏：Breakout")讨论了过渡的基础，
- en: This can be done through the `transition.to` method, which takes a display object
    and a table containing the control parameters. The control parameters specify
    the duration of the animation and the final values of properties for the display
    object. The intermediate values for a property are determined by an easing function
    that is also specified as a control parameter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过`transition.to`方法完成，该方法接受一个显示对象和一个包含控制参数的表。控制参数指定动画的持续时间和显示对象属性的最终值。属性的中间值由一个也作为控制参数指定的缓动函数确定。
- en: '`transition.to():` Animates a display object''s properties over time using
    the `easing` transitions.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition.to():` 使用`easing`过渡在一段时间内动画化显示对象的属性。'
- en: 'Syntax: `handle = transition.to( target, params )`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`handle = transition.to( target, params )`
- en: 'Parameters used are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的参数如下：
- en: '`target:` A display object that will be the target of the transition.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target:` 将成为过渡目标的一个显示对象。'
- en: '`params:` A table that specifies the properties of the display object, which
    will be animated, and one or more of the following optional non-animated properties:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params:` 一个指定将被动画化的显示对象属性以及一个或多个以下可选的非动画属性（非动画属性）的表：'
- en: '`params.time:` It specifies the duration of the transition in milliseconds.
    By default, the duration is 500 ms (0.5 seconds).'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.time:` 指定过渡的持续时间（以毫秒为单位）。默认情况下，持续时间为500毫秒（0.5秒）。'
- en: '`params.transition:` It is by default `easing.linear`.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.transition:` 默认为`easing.linear`。'
- en: '`params.delay:` Specifies the delay, in milliseconds, (none by default) before
    the tween begins.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.delay:` 指定补间开始前的延迟时间，以毫秒为单位（默认无延迟）。'
- en: '`params.delta:` It is a boolean specifying whether non-control parameters are
    interpreted as final ending values or as changes in values. The default is `nil`
    meaning false.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.delta:` 它是一个布尔值，指定是否将非控制参数解释为最终结束值或为值的改变。默认为 `nil`，表示 false。'
- en: '`params.onStart:` It is a function or table listener called before the tween
    begins.'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.onStart:` 在补间开始之前调用的函数或表监听器。'
- en: '`params.onComplete:` It is a function or table listener called after the tween
    completes.'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.onComplete:` 在补间完成后调用的函数或表监听器。'
- en: Easing
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓动
- en: 'The `easing` library is a collection of interpolation functions used by the
    transition library:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing` 库是过渡库使用的插值函数集合：'
- en: '`easing.linear( t, tMax, start, delta ):` This function defines a constant
    motion with no acceleration.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing.linear( t, tMax, start, delta ):` 这个函数定义了一个没有加速度的恒定运动。'
- en: '`easing.inQuad( t, tMax, start, delta ):` This function performs a quadratic
    interpolation of animated property values in a transition.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing.inQuad( t, tMax, start, delta ):` 这个函数在过渡中执行动画属性值的二次插值。'
- en: '`easing.outQuad( t, tMax, start, delta ):` This function starts motion fast
    and then decelerates motion to a zero velocity as it executes.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing.outQuad( t, tMax, start, delta ):` 这个函数开始时运动速度快，然后随着执行减速到零速度。'
- en: '`easing.inOutQuad( t, tMax, start, delta ):` This function starts animation
    from a zero velocity, accelerates, then decelerate to a zero velocity.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing.inOutQuad( t, tMax, start, delta ):` 这个函数从零速度开始动画，加速，然后减速到零速度。'
- en: '`easing.inExpo( t, tMax, start, delta ):` This function starts motion from
    a zero velocity and then accelerates motion as it executes.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing.inExpo( t, tMax, start, delta ):` 这个函数从零速度开始运动，然后在执行过程中加速运动。'
- en: '`easing.outExpo( t, tMax, start, delta ):` This function starts motion fast
    and then decelerates motion to a zero velocity as it executes.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing.outExpo( t, tMax, start, delta ):` 这个函数开始时运动速度快，然后随着执行减速到零速度。'
- en: '`easing.inOutExpo( t, tMax, start, delta ):` This function starts motion from
    a zero velocity, accelerates, then decelerates to a zero velocity using an exponential
    easing equation.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing.inOutExpo( t, tMax, start, delta ):` 这个函数从零速度开始运动，加速，然后使用指数缓动方程减速到零速度。'
- en: 'You can create your own easing function to interpolate between a start and
    a final value. The arguments of the function are defined as:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建自己的缓动函数，在起始值和最终值之间进行插值。函数的参数定义如下：
- en: '`t:` Is the time in milliseconds since the transition started'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`t:` 是从过渡开始以来的时间，以毫秒为单位'
- en: '`tMax:` Is the duration of the transition'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tMax:` 是过渡的持续时间'
- en: '`start:` Is the starting value'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start:` 是起始值'
- en: '`delta:` Is the change in value (final value = start + delta)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delta:` 是值的改变（最终值 = 起始值 + delta）'
- en: 'For example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The value of timed functions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计时函数的值
- en: Using a function that can be called at a later time can be helpful when organizing
    the timing of the appearance of your game objects in an application. The timer
    library will allow us to handle our functions in a timely manner.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用可以在以后调用的函数，在组织应用程序中游戏对象出现的时间时可能很有帮助。计时器库将使我们能够及时处理我们的函数。
- en: Timers
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计时器
- en: The `timer` function enables you to trigger events at a specific delay (in milliseconds)
    of your choosing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`timer` 函数使您能够触发在您选择的特定延迟（以毫秒为单位）的事件。'
- en: '`timer.performWithDelay( delay, listener [, iterations] )`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timer.performWithDelay( delay, listener [, iterations] )`'
- en: Invokes the listener after a delay in milliseconds and returns a handle you
    can pass to `timer.cancel()` to cancel the timer before it invokes the listener.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在延迟毫秒后调用监听器，并返回一个可以传递给 `timer.cancel()` 以在调用监听器之前取消计时器的句柄。
- en: 'Example:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE1]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`timer.cancel( timerId )`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timer.cancel( timerId )`'
- en: Cancels a timer operation initiated with `timer.performWithDelay().`
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 取消使用 `timer.performWithDelay()` 启动的计时器操作。
- en: 'Parameters:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timerId:` Handle returned by the call to `timer.performWithDelay()`.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timerId:` `timer.performWithDelay()` 调用返回的处理句柄。'
- en: 'Example:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE2]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`timer.pause( timerId )`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timer.pause( timerId )`'
- en: Pauses a timer started with `timer.performWithDelay().`
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 暂停使用 `timer.performWithDelay()` 启动的计时器。
- en: 'Parameters:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timerId:` The Timer ID from `timer.performWithDelay()`.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timerId:` 来自 `timer.performWithDelay()` 的计时器ID。'
- en: 'Example:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE3]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`timer.resume( timerId )`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timer.resume( timerId )`'
- en: Resumes a timer that was paused with `timer.pause( timerId ).`
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `timer.pause( timerId )` 暂停已暂停的计时器。
- en: 'Parameters:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timerID:` The Timer ID from `timer.performWithDelay()`.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timerID:` 来自 `timer.performWithDelay()` 的计时器ID。'
- en: 'Example:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE4]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Movieclips or sprite sheets. What's the difference?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电影剪辑或精灵图。有什么区别？
- en: 'Corona SDK includes a *sprite sheet* feature for constructing animated sprites.
    Refer to the following link for more information on sprite sheets at: [http://developer.anscamobile.com/reference/sprite-sheets](http://developer.anscamobile.com/reference/sprite-sheets).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Corona SDK 包含一个用于构建动画精灵的 *精灵图* 功能。有关精灵图的更多信息，请参阅以下链接：[http://developer.anscamobile.com/reference/sprite-sheets](http://developer.anscamobile.com/reference/sprite-sheets)。
- en: '**Sprite sheets** are an efficient way to save texture memory. They are recommended
    for complex character animation or when numerous types of animations are involved.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**精灵图** 是节省纹理内存的有效方式。它们在涉及复杂角色动画或多种动画类型时推荐使用。'
- en: Sprite sheets will require more coding and have more of an advanced setup. They
    require the construction of a large sheet of animation frames. The movieclip library
    is easier to get started with, and can be more rapidly used to port Flash content,
    since movieclip frames can be exported from Flash as PNG sequences.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵图需要更多的编码和更高级的设置。它们需要构建一个大的动画帧图。电影剪辑库更容易上手，并且可以更快地将 Flash 内容移植过来，因为电影剪辑帧可以作为
    PNG 序列从 Flash 中导出。
- en: Movieclips
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电影剪辑
- en: The external movieclip library allows you to create animated sprites from sequences
    of images, which can be moved around the screen using the same techniques as any
    other Corona display object.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 外部电影剪辑库允许你从一系列图片中创建动画精灵，可以使用与其他 Corona 显示对象相同的技巧在屏幕上移动它们。
- en: The movieclip library is an external module, `movieclip.lua`, that can be included
    with your projects and loaded using the `require` command.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 电影剪辑库是一个外部模块，`movieclip.lua`，可以与你的项目一起包含，并使用 `require` 命令加载。
- en: The movieclip library can be found in the `Movieclip` sample project in the
    `SampleCode/Graphics` folder inside of the Corona SDK.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 电影剪辑库可以在 Corona SDK 内的 `SampleCode/Graphics` 文件夹中的 `Movieclip` 示例项目中找到。
- en: Movieclip functions
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电影剪辑函数
- en: An animation object is returned using a list of images. You can use methods
    of the returned animation object to control its playback such as `play(), stop()`,
    and `reverse()`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一系列图片返回一个动画对象。你可以使用返回的动画对象的方法来控制其播放，例如 `play()`, `stop()` 和 `reverse()`。
- en: '`movieclip.newAnim( frames ):` Creates an animated sprite using an array of
    image filenames provided in the frames table:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`movieclip.newAnim( frames ):` 使用在帧表中提供的图像文件名数组创建一个动画精灵：'
- en: '[PRE5]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`object:play():` Starts the animated sprite playing in the forward direction.
    When the end of the sequence is reached, it repeats from the beginning.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:play():` 以正向方向开始播放动画精灵。当达到序列的末尾时，它将从开始处重复播放。'
- en: '`object:play{ startFrame=a, endFrame=b, loop=c, remove=shouldRemove }:` Starts
    the animated sprite in forward motion. When the frame number given by `endFrame`
    is reached, it will cycle back to the frame number given by `startFrame` and continue
    playing:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:play{ startFrame=a, endFrame=b, loop=c, remove=shouldRemove }:` 以正向运动开始动画精灵。当达到由
    `endFrame` 给出的帧号时，它将循环回到由 `startFrame` 给出的帧号并继续播放：'
- en: '[PRE6]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: An animation can loop as many times based on the number you indicate. Using
    `0` will loop the animation forever.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动画可以根据你指定的次数循环播放。使用 `0` 将使动画无限循环。
- en: The remove parameter is a boolean flag, and if set to true, the movieclip will
    automatically delete itself when the given sequence is completed. The default
    value is `false`.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除参数是一个布尔标志，如果设置为 true，当给定序列完成后，电影剪辑将自动删除自己。默认值是 `false`。
- en: '`object:reverse():` Plays the animated sprite in reverse direction. When the
    beginning of the image set is reached, it will cycle back to the last image and
    continue playing backwards.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:reverse():` 以反向方向播放动画精灵。当达到图像集的开始时，它将循环回到最后一张图像并继续反向播放。'
- en: '`object:reverse{ startFrame=a, endFrame=b, loop=c, remove=shouldRemove }:`
    Starts the animated sprite in reverse order. When the frame number given by `endFrame`
    is reached, it will cycle back to the frame number given by `startFrame` and continue
    playing.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:reverse{ startFrame=a, endFrame=b, loop=c, remove=shouldRemove }:`
    以反向顺序开始动画精灵。当达到由 `endFrame` 给出的帧号时，它将循环回到由 `startFrame` 给出的帧号并继续播放。'
- en: An animation can loop as many times based on the number you indicate. Using
    `0` will loop the animation forever.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动画可以根据你指定的次数循环播放。使用 `0` 将使动画无限循环。
- en: The remove parameter is a boolean flag, and if set to true, the movieclip will
    automatically delete itself when the given sequence is completed. The default
    value is `false`.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除参数是一个布尔标志，如果设置为true，当给定序列完成后，电影剪辑将自动删除自己。默认值是`false`。
- en: '`object:nextFrame():` Resets any animation sequence in progress, moves the
    animation to the next image in the total sequence, and stops.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:nextFrame():` 重置任何正在进行的动画序列，将动画移动到总序列中的下一张图像，并停止。'
- en: '`object:previousFrame():` Resets any animation sequence in progress, moves
    the animation to the previous image in the total sequence, and stops.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:previousFrame():` 重置任何正在进行的动画序列，将动画移动到总序列中的上一张图像，并停止。'
- en: '`object:setLabels( labels ):` Adds optional labels to an object previously
    created, using a table to assign label names to selected frame numbers:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:setLabels( labels ):` 向先前创建的对象添加可选标签，使用表将标签名称分配给选定的帧号：'
- en: 'Syntax: `object:setLabels{ frameLabel1=num1, frameLabel2=num2, ..., frameLabelN
    = numN }`'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语法：`object:setLabels{ frameLabel1=num1, frameLabel2=num2, ..., frameLabelN =
    numN }`
- en: 'Example:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE7]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`object:stop():` Stops the animation of the sprite at its current frame.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:stop():` 在当前帧停止精灵的动画。'
- en: '`object:stopAtFrame( frame ):` Jumps the animation to the specified frame,
    given either as a frame number or by an optional frame label.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:stopAtFrame( frame ):` 将动画跳转到指定的帧，可以是帧号或可选的帧标签。'
- en: '[PRE8]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`object:setDrag:` Turns any movieclip into a draggable object when drag is
    set as true. `limitX` and `limitY` parameters limit the dragging to either the
    x or y axis, and the bounds parameter can be used to specify drag boundaries for
    the object as `{left, top, width, height}`.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:setDrag:` 当将拖动设置为true时，将任何电影剪辑转换为可拖动的对象。`limitX` 和 `limitY` 参数限制拖动到x或y轴，并且可以使用边界参数指定对象的拖动边界，格式为
    `{left, top, width, height}`。'
- en: The `onPress, onDrag`, and `onRelease` parameters take the names of functions
    to be called when those events occur. All parameters are optional.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`onPress, onDrag` 和 `onRelease` 参数接受在发生这些事件时要调用的函数名称。所有参数都是可选的。'
- en: '[PRE9]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To turn off the draggable property again, set drag to false:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要再次关闭可拖动属性，将拖动设置为false：
- en: '[PRE10]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It's sprite mania!
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这是精灵狂热！
- en: Sprite sheets are 2D animations compiled to multiple frames into a single texture
    image. This is an efficient way to save on texture memory. It is beneficial for
    mobile devices and minimizes loading time.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵图是2D动画，编译成多个帧，合并成一个纹理图像。这是一种节省纹理内存的有效方法。对移动设备有益，并最小化了加载时间。
- en: Sprite API
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精灵API
- en: 'The following line makes the sprite features available under the sprite namespace:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行使精灵功能在精灵命名空间下可用：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`sprite.newSpriteSheet:` The function creates a new sprite sheet.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sprite.newSpriteSheet:` 该函数创建一个新的精灵图。'
- en: '[PRE12]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For example, the number of frames in the sprite sheet is assumed to be `floor(imageWidth/frameWidth)
    * floor(imageHeight/frameHeight)`. The first frame is placed at the top-left position
    and reads left to right and follows the next row if applicable. The following
    sprite sheet has 5 frames that are 128 x 128 pixels each. The sprite sheet image
    altogether is 384 x 256 pixels. If it were to be integrated in Corona, a sample
    method would be displayed as follows:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，假设精灵图中的帧数是 `floor(imageWidth/frameWidth) * floor(imageHeight/frameHeight)`。第一帧放置在左上角，从左到右读取，如果适用，则继续下一行。以下精灵图有5帧，每帧128
    x 128像素。整个精灵图图像是384 x 256像素。如果要在Corona中集成，一个示例方法如下所示：
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Sprite API](img/1888_05_01.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Sprite API](img/1888_05_01.jpg)'
- en: '`spriteSet = sprite.newSpriteSet(spriteSheet, startFrame, frameCount):` Creates
    a new sprite set from a sprite sheet. A sprite set defines the collection of frames
    that belong to the same character or another moving asset, which may then be subdivided
    into different animation sequences for playback. A sprite set is a Lua table containing
    keys to one or more animation sequences for a given character.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spriteSet = sprite.newSpriteSet(spriteSheet, startFrame, frameCount):` 从精灵图中创建一个新的精灵集。精灵集定义了属于同一角色或另一个移动资源的帧集合，这些帧可以进一步细分为不同的播放动画序列。精灵集是一个Lua表，包含一个或多个动画序列的键，用于特定角色。'
- en: '`sprite.add( spriteSet, "sequenceName", startFrame, frameCount, time, [loopCount]):`
    Adds a sequence named "sequenceName" to the sprite set with the specified frames.
    The sequence has `frameCount` frames, and it will play for the time specified
    in milliseconds. The frame rate of each sequence can be controlled individually
    by altering the `time` parameter.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sprite.add( spriteSet, "sequenceName", startFrame, frameCount, time, [loopCount]):`
    将名为 "sequenceName" 的序列添加到指定的精灵集中。该序列有 `frameCount` 帧，并且它将播放指定毫秒数的时间。每个序列的帧率可以通过修改
    `time` 参数单独控制。'
- en: '`spriteSheet:dispose():` Disposes of a sprite sheet and releases its texture
    memory. It also calls `removeSelf()` on all sprite instances using the sheet,
    removing them from the stage. All sprites, sequences, and sets that belong to
    the removed sprite sheet are no longer accessible.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spriteSheet:dispose():` 释放精灵图集及其纹理内存。它还会对使用该图集的所有精灵实例调用 `removeSelf()`，将它们从舞台中移除。所有属于已移除精灵图集的精灵、序列和集合都不可访问。'
- en: '[PRE14]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`si = sprite.newSprite( spriteSet ):` Creates a new instance of a sprite.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`si = sprite.newSprite( spriteSet ):` 创建一个新的精灵实例。'
- en: '`si:prepare([sequence]):` Stops playing the current animation sequence, sets
    the new current sequence, and also moves to the first frame of that sequence.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`si:prepare([sequence]):` 停止播放当前动画序列，设置新的当前序列，并移动到该序列的第一帧。'
- en: '`si:play():` Plays animation sequence, starting at the current frame.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`si:play():` 播放动画序列，从当前帧开始。'
- en: '`si:pause():` Stops the animation, but the frame remains on the last displayed
    frame. Playback can resume later with `play()`.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`si:pause():` 停止动画，但帧保持在最后显示的帧上。稍后可以通过 `play()` 继续播放。'
- en: '`si:addEventListener("sprite", listener):` notifies the listener as to when
    the sprite instance animation has an event. The event, passed to the listener,
    has the following fields:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`si:addEventListener("sprite", listener):` 当精灵实例动画有事件时通知监听器。传递给监听器的事件具有以下字段：'
- en: '`event.sprite`: The sprite that fired the event; its current properties may
    also be accessed via the event.'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`event.sprite`: 触发事件的精灵；其当前属性也可以通过事件访问。'
- en: '`event.phase`: The phase is one of:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`event.phase`: 阶段可以是以下之一：'
- en: '`"end":` the sprite stops playing'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"end":` 精灵停止播放'
- en: '`"loop":` the sprite loops (from last to first, or reverses direction)'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"loop":` 精灵循环（从最后一帧到第一帧，或反向方向）'
- en: '`"next":` the sprite''s next frame is played'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"next":` 播放精灵的下一帧'
- en: Game time!
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏时间！
- en: 'Now that we have learned how to set up object movement, movieclips, and sprite
    sheets, let''s try to incorporate them into Panda Star Catcher! You can download
    the project files accompanying this book from the Packt website. There is a project
    folder called `Panda Star Catcher` in the Chapter 5 file folder. It already has
    the `config.lua` and `build.settings` files set up for you. The art assets are
    included in the folder as well. You will notice that the build and runtime configuration
    has a similar setup from [Chapter 3](ch03.html "Chapter 3. Building our First
    Game: Breakout"), *Building our First Game: Breakout* and [Chapter 4](ch04.html
    "Chapter 4. Game Controls"), *Game Controls*. This tutorial is compatible with
    both iOS and Android devices.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何设置对象移动、电影剪辑和精灵图集，让我们尝试将它们整合到 `Panda Star Catcher` 中！您可以从 Packt 网站下载本书附带的配套项目文件。在第五章文件文件夹中有一个名为
    `Panda Star Catcher` 的项目文件夹。它已经为您设置了 `config.lua` 和 `build.settings` 文件。艺术资源也包含在该文件夹中。您会注意到构建和运行时配置与
    [第三章](ch03.html "第三章。构建我们的第一个游戏：Breakout")，*构建我们的第一个游戏：Breakout* 和 [第四章](ch04.html
    "第四章。游戏控制")，*游戏控制* 中的设置相似。本教程与 iOS 和 Android 设备兼容。
- en: The graphics included in the project folder have been designed to display properly
    on both platforms.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 项目文件夹中包含的图形已设计为在两个平台上正确显示。
- en: '![Game time!](img/1888_05_02.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![游戏时间！](img/1888_05_02.jpg)'
- en: Time for action—setting up the variables
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——设置变量
- en: Let's start off with introducing all the variables needed to run the game.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从介绍运行游戏所需的所有变量开始。
- en: Create a brand new `main.lua` file and add it in the `Panda Star Catcher` project
    folder.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Panda Star Catcher` 项目文件夹中创建一个新的 `main.lua` 文件并将其添加进去。
- en: 'Let''s hide the status bar from the devices and set all the variables needed
    in game:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从隐藏设备上的状态栏并设置游戏所需的所有变量开始：
- en: '[PRE15]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What just happened?
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We hid the status bar at the start of the application. This is only applicable
    for iOS devices. There are four different groups set up and they all play an important
    role in the game.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用程序开始时隐藏了状态栏。这仅适用于 iOS 设备。已设置了四个不同的组，它们在游戏中都扮演着重要的角色。
- en: You will notice `gameIsActive = false`. This enables us to activate properties
    of the application to affect the round when the display objects need to stop animating,
    appear on screen, and become affected by touch events.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到`gameIsActive = false`。这使我们能够在显示对象需要停止动画、出现在屏幕上并受到触摸事件影响时激活应用程序的属性来影响回合。
- en: Elements for the timer have been set in the beginning of the code as well. `numSeconds
    = 30`. This is how long the round will count down from in seconds. `starWidth`
    and `starHeight` depicts the dimensions of the object altogether.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的开头已经设置了计时器的元素。`numSeconds = 30`。这是回合从秒开始倒计时的时长。`starWidth`和`starHeight`描述了对象的总体尺寸。
- en: Let's start the round
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始这一轮
- en: We'll need to load the panda to the game screen before it can launch. The panda
    will transition from the bottom of the screen and move upward on the screen before
    any touch event can occur.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在熊猫可以发射之前，我们需要将其加载到游戏屏幕上。熊猫将从屏幕底部过渡并向上移动，在发生任何触摸事件之前。
- en: Time for action—starting the game
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——开始游戏
- en: Right now we need to set the off screen position for the panda and have it transition
    to its starting launch location so the user can interact with it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们需要设置熊猫的离屏位置，并让它过渡到起始发射位置，以便用户与之交互。
- en: After adding the variables, create a new local function called `startNewRound()`
    and add an `if` statement to initiate the `panda` object into the scene.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加变量后，创建一个新的局部函数`startNewRound()`，并添加一个`if`语句以将`panda`对象初始化到场景中。
- en: '[PRE16]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Add a new local function called `activateRound()` within `startNewRound()`.
    Set the starting position of the `panda` display object on screen and add `ground:toFront()`
    so that ground appears in front of the panda character.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`startNewRound()`内部添加一个新的局部函数`activateRound()`。设置屏幕上`panda`显示对象的起始位置，并添加`ground:toFront()`以确保地面出现在熊猫角色之前。
- en: '[PRE17]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create another local function called `pandaLoaded()`. Set `gameIsActive = true`
    and set the `panda` object's air and hit properties to `false`. Add `panda:toFront()`
    so that it appears in front of all the other game objects on screen and set the
    body type to`"static"`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`pandaLoaded()`的局部函数。将`gameIsActive`设置为`true`，并将`panda`对象的空气和碰撞属性设置为`false`。添加`panda:toFront()`以确保它出现在屏幕上所有其他游戏对象的前面，并将身体类型设置为`"static"`。
- en: '[PRE18]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Transition the panda to `y=225` in 1000 milliseconds. When the tween is completed,
    call the `pandaLoaded()` function using the `onComplete` command. Close the `activateRound()`
    function with `end` and call out to it. Close the `if` statement for `panda` and
    the `startNewRound()` function with `end`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在1000毫秒内将熊猫过渡到`y=225`的位置。当补间动画完成后，使用`onComplete`命令调用`pandaLoaded()`函数。使用`end`关闭`activateRound()`函数并调用它。关闭`panda`的`if`语句和`startNewRound()`函数的`end`。
- en: '[PRE19]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Time for action—starting the game](img/1888_05_03.jpg)'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——开始游戏](img/1888_05_03.jpg)'
- en: What just happened?
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: When the level is activated, the panda is placed below the ground before it
    is visible to the player. For `pandaLoaded()`, the game is activated by `gameIsActive
    = true` and the panda is ready for launch by the player. The panda transitions
    from the ground level to an area on the screen where it can be accessed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当关卡激活时，熊猫在玩家可见之前被放置在地面下方。对于`pandaLoaded()`，通过`gameIsActive = true`激活游戏，熊猫准备好由玩家发射。熊猫从地面水平过渡到屏幕上可以访问的区域。
- en: Poof begone!
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 呼啸而去！
- en: The panda needs to disappear from the stage after a turn has been made. Instead
    of having it disappear into thin air, we'll be adding a poof effect when it collides
    with any object on screen.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫在完成转身后需要从舞台上消失。我们不会让它消失得无影无踪，而是当它与屏幕上的任何物体碰撞时，会添加一个呼啸效果。
- en: Time for action—reloading the panda on the stage
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在舞台上重新加载熊猫
- en: When the panda has been in the air for a certain amount of time or has hit any
    out of bounds area off the screen, it will turn into a cloud of smoke. The panda
    will be replaced with a *poof* image when a collision event occurs with the edge
    of the screen or the ground. The visible properties of the panda have to be turned
    off for the *poof* effect to work. When the collision has been made, the panda
    needs to be reloaded back on to the screen while the game is still activated.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当熊猫在空中停留一定时间或撞击屏幕外的区域时，它将变成一团烟雾。当熊猫与屏幕边缘或地面发生碰撞事件时，它将被一个*呼啸*图像所取代。为了使*呼啸*效果生效，熊猫的可见属性必须关闭。当碰撞发生后，熊猫需要在游戏仍然激活的情况下重新加载到屏幕上。
- en: Create a local function called `callNewRound()`. Include a local variable called
    `isGameOver` and set it to `false`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callNewRound()`的局部函数。包括一个名为`isGameOver`的局部变量，并将其设置为`false`。
- en: '[PRE20]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Within the current function, create a new local function called `pandaGone()`.
    Add in new properties for the panda so it no longer displays on the game stage.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在当前函数中，创建一个名为`pandaGone()`的新局部函数。为熊猫添加新属性，使其不再显示在游戏舞台上。
- en: '[PRE21]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Add in a new function for the `poof` object called `fadePoof()`. With the `onComplete`
    command, transition with `time=50` and `alpha=1`. Have the `poof` object fade
    out with `time=100` and `alpha=0`. Close the `pandaGone()` function and call out
    to it using `timer.peformWithDelay`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`poof`对象添加一个名为`fadePoof()`的新函数。使用`onComplete`命令，过渡`time=50`和`alpha=1`。使`poof`对象在`time=100`和`alpha=0`时淡出。关闭`pandaGone()`函数，并使用`timer.peformWithDelay`调用它。
- en: '[PRE22]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When `isGameOver` is still `false`, add in a `timer.peformWithDelay` for `startNewRound()`.
    Close the `callNewRound()` function.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`isGameOver`仍然为`false`时，为`startNewRound()`添加一个`timer.peformWithDelay`。关闭`callNewRound()`函数。
- en: '[PRE23]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: What just happened?
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: A new round is called when the panda is no longer displayed on screen and the
    clock is still counting down. When `isGameOver` is still `false`, then the panda
    reloads by calling `startNewRound()`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当熊猫不再显示在屏幕上，时钟仍在倒计时，会开始新一轮。当`isGameOver`仍然为`false`时，熊猫通过调用`startNewRound()`重新加载。
- en: The panda collision occurs through `pandaGone()`. All physical properties become
    inactive by applying `panda.isVisible = false` and `pandaisBodyActive = false`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫碰撞通过`pandaGone()`发生。所有物理属性通过应用`panda.isVisible = false`和`pandaisBodyActive
    = false`变为不活跃。
- en: The exact placement the panda disappears, the smoke will appear. This happens
    when `poof.x = panda.x; poof.y = panda.y. poof` will become visible for a short
    while through `fadePoof()`. Once it has faded, a new round awaits, which makes
    `waitingForNewRound = true`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫消失的确切位置，烟雾会出现。当`poof.x = panda.x; poof.y = panda.y. poof`通过`fadePoof()`变得可见一段时间时，这就会发生。一旦它消失，新一轮等待，这使得`waitingForNewRound
    = true`。
- en: Earn some points
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 赢得一些分数
- en: Points are earned when the panda catches any stars in the sky. The game is run
    on a timer, so it is the player's job to catch as many stars as he/she can before
    the time runs out. Let's rack up some points!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当熊猫捕捉到天空中的任何星星时，就会获得分数。游戏由计时器运行，因此玩家的任务是尽可能多地捕捉星星，直到时间用完。让我们积累一些分数吧！
- en: Time for action—tracking the score
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示游戏分数的时间到了
- en: The score updates through a parameter called `scoreNum` and displays it during
    gameplay. The score number is received through `gameScore`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 分数通过名为`scoreNum`的参数更新，并在游戏过程中显示。分数数字通过`gameScore`接收。
- en: The next function that will be created is called `setScore()` with a parameter
    called `scoreNum`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个要创建的函数是名为`setScore()`的函数，带有名为`scoreNum`的参数。
- en: '[PRE24]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Use a local variable called `newScore` and set it equal to `scoreNum`. Set the
    `gameScore = newScore`. Provide an `if` statement for `gameScore` so that the
    score during gameplay is set at `0`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个名为`newScore`的局部变量，并将其设置为`scoreNum`。设置`gameScore = newScore`。为`gameScore`提供一个`if`语句，以便在游戏过程中设置分数为`0`。
- en: '[PRE25]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Add in the `scoreText` display object and have it equal to `gameScore`. Close
    the function.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`scoreText`显示对象中添加并使其等于`gameScore`。关闭函数。
- en: '[PRE26]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: What just happened?
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: For `setScore = function(scoreNum)`, we set a parameter called `scoreNum. scoreNum`
    will update the game score continuously through `local newScore. newScore` will
    update through `gameScore`, which provides the base of the score keeping. At the
    same time, `scoreText` will display the value of `gameScore` during the game.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`setScore = function(scoreNum)`，我们设置一个名为`scoreNum`的参数。`scoreNum`将通过`local
    newScore`不断更新游戏分数，`newScore`将通过`gameScore`更新，它为分数记录提供基础。同时，`scoreText`将在游戏过程中显示`gameScore`的值。
- en: When the game ends
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当游戏结束时
- en: There are no losers in this game. Everyone wins! You'll still keep your adrenaline
    pumping by trying to catch as many stars as you can before the timer runs out.
    When it's all over we still need to be notified when the time is up.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这款游戏中没有失败者。每个人都赢了！你仍然可以通过在计时器用完之前尽可能多地捕捉星星来保持你的肾上腺素激增。当一切结束时，我们仍然需要在时间用完时得到通知。
- en: Time for action—displaying the game over screen
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示游戏结束屏幕的时间到了
- en: We need to set up the game over screen and have it display the final score the
    player has achieved at the end of the round.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置游戏结束屏幕，并在回合结束时显示玩家所达到的最终分数。
- en: Create a new local function called `callGameOver()`.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callGameOver()`的新局部函数。
- en: '[PRE27]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Set `gameIsActive = false` and pause the physics engine. Remove the `panda`
    and `stars` objects from the stage.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`gameIsActive`设置为`false`并暂停物理引擎。从舞台中移除`panda`和`stars`对象。
- en: '[PRE28]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Display the game over objects and insert them into the `hudGroup` group. Use
    the `transition.to` method to display the game over objects on screen.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示游戏结束对象并将它们插入到`hudGroup`组中。使用`transition.to`方法在屏幕上显示游戏结束对象。
- en: '[PRE29]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Update the final score with a local variable called `newScore`. Set `isVisible
    = false` for the `counter` and `scoreText`. Introduce the `scoreText` again to
    display the final score in a different location on the device screen. Close the
    function.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名为`newScore`的局部变量更新最终得分。将`counter`和`scoreText`的`isVisible`设置为`false`。再次引入`scoreText`以在设备屏幕上的不同位置显示最终得分。关闭函数。
- en: '[PRE30]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![Time for action—displaying the game over screen](img/1888_05_04.jpg)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![开始行动——显示游戏结束屏幕](img/1888_05_04.jpg)'
- en: What just happened?
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: '`callGameOver()` displays the game over screen when time runs out or if all
    the stars are collected. We set `gameIsActive = false` and paused all the physics
    so the panda cannot be moved with any other screen touches. The panda and stars
    are then removed from the scene.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`callGameOver()`在时间耗尽或所有星星收集完毕时显示游戏结束屏幕。我们将`gameIsActive`设置为`false`并暂停所有物理，这样熊猫就不能通过任何其他屏幕触摸来移动。然后从场景中移除熊猫和星星。'
- en: '`shade` and `gameOverDisplay` are visible through `transition.to` so it notifies
    the player that the round is over. The final score will display at the end of
    the round in front of the `gameOverDisplay` object.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`shade`和`gameOverDisplay`通过`transition.to`变得可见，因此通知玩家回合已结束。最终得分将在回合结束时在`gameOverDisplay`对象前显示。'
- en: Background display
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景显示
- en: The panda needs a general setting of where it's located in the game. Let's set
    the background and ground objects.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫需要在游戏中有一个通用的位置设置。让我们设置背景和地面对象。
- en: Time for action—adding the background elements
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动——添加背景元素
- en: Add in the `background` and `ground` display objects to the `drawBackground()`
    function. Insert the objects in the group called `gameGroup`.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`background`和`ground`显示对象添加到`drawBackground()`函数中。将这些对象插入名为`gameGroup`的组中。
- en: '[PRE31]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: What just happened?
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The `background` and `ground` display objects are placed in the function called
    `drawBackground(). ground` has a customized physical shape that is not the same
    size as the original display object. If the panda happens to hit the ground, it
    will be able to collide with it and not fall through.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`background`和`ground`显示对象放置在名为`drawBackground()`的函数中。`ground`有一个定制的物理形状，其大小与原始显示对象不同。如果熊猫不小心碰到地面，它将能够与之碰撞而不会掉下去。'
- en: Heads up!
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 头上显示！
- en: Before the game can be played, we need a general idea of how to operate the
    controls of the game. Luckily, we'll only be adding a help screen that explains
    how to play. The **HUD (Heads Up Display)** needs to be displayed as well so the
    player can be updated on the time left on the clock and how many points have been
    accumulated.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏可以开始之前，我们需要一个关于如何操作游戏控制的一般想法。幸运的是，我们只需添加一个解释如何玩的游戏帮助屏幕。**HUD（抬头显示**）也需要显示，以便玩家可以了解剩余时间以及累积了多少分数。
- en: Time for action—displaying the timer and score
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动——显示计时器和得分
- en: Let's set up the help screen and HUD elements that need to be displayed during
    the game.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置需要显示的游戏中的帮助屏幕和HUD元素。
- en: Create a new local function called `hud()`.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的局部函数`hud()`。
- en: '[PRE32]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Display `helpText` at the start of the game for 10 seconds. Have it transition
    by sliding it to the left and turning visibility to `false`. Add the `helpText`
    to the `hudGroup` group.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游戏开始时显示`helpText`10秒。通过将其滑动到左侧并设置可见性为`false`来实现过渡。将`helpText`添加到`hudGroup`组中。
- en: '[PRE33]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Display `counter` and `scoreText` near the top of the screen. Add `scoreText`
    to the `hudGroup` group as well. Close the function with `end`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕顶部附近显示`counter`和`scoreText`。也将`scoreText`添加到`hudGroup`组中。使用`end`关闭函数。
- en: '[PRE34]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: What just happened?
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: '`helpText` appears before the game starts and stays on the main device display
    for 9 seconds and transitions to -320 in the x-direction in 1 second. This happens
    through `transition.to( helpText, { delay=9000, time=1000, x=-320, transition=easing.inOutExpo
    })`.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`helpText`在游戏开始前出现，并在主设备显示上停留9秒，然后在1秒内过渡到x方向的-320。这是通过`transition.to( helpText,
    { delay=9000, time=1000, x=-320, transition=easing.inOutExpo })`实现的。'
- en: '`counter` displays`"Time: " .. tostring( numSeconds ). numSeconds` being the
    seconds that are counted down, starting from 30\. It is located near the top-left
    corner of the screen.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`counter` 显示 `"Time: " .. tostring( numSeconds )`，其中 `numSeconds` 是倒计时的秒数，从30秒开始。它位于屏幕的右上角。'
- en: '`scoreText` displays `gameScore` and is updated for every star collision made.
    This will be placed on the top right corner of the screen. All the objects in
    `local hud = function()` are inserted in `hudGroup`.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`scoreText` 显示 `gameScore` 并在每次星星碰撞时更新。这将放置在屏幕的右上角。`local hud = function()`
    中的所有对象都插入到 `hudGroup` 中。'
- en: Time after time
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一次又一次
- en: This game has a timer that the player has to work against in order to catch
    as many stars as possible before it runs out. We're going to start the countdown
    as soon as the help text leaves the stage.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这款游戏有一个计时器，玩家必须与之竞争，以便在计时器耗尽之前尽可能多地捕捉星星。我们将一帮助文本离开舞台后立即开始倒计时。
- en: Time for action—setting up the timer
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——设置计时器
- en: We'll need to create a couple of functions that activate the countdown and also
    stops the countdown at 0 seconds when the game is over.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建几个函数来激活倒计时，并在游戏结束时在0秒时停止倒计时。
- en: Set up the timer countdown for the game with a local function called `myTimer()`.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个名为 `myTimer()` 的局部函数设置游戏计时器的倒计时。
- en: '[PRE35]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Have the seconds for the timer countdown by an increment of 1\. With the `counter`
    text object, display the time using `numSeconds`. Print out `numSeconds` to see
    the countdown in the **Terminal** window.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计时器的秒数以1的增量增加。使用 `counter` 文本对象，使用 `numSeconds` 显示时间。打印出 `numSeconds` 以在 **终端**
    窗口中查看倒计时。
- en: '[PRE36]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create an `if` statement for when the timer runs out or if all the stars are
    gone. Within the block, cancel the timer and call `callGameOver()` to end the
    round. Close the `myTimer()` function with `end`.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `if` 语句，当计时器耗尽或所有星星都消失时。在块中，取消计时器并调用 `callGameOver()` 以结束回合。使用 `end` 关闭
    `myTimer()` 函数。
- en: '[PRE37]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Initiate the `myTimer()` function with a new local function called `startTimer()`.
    This will start the countdown at the beginning of gameplay.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个名为 `startTimer()` 的新局部函数启动 `myTimer()` 函数。这将从游戏开始时的开始倒计时。
- en: '[PRE38]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: What just happened?
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The main timer function is within `myTimer()`. We countdown the seconds using
    `numSeconds = numSeconds -1`. The seconds will update in the `counter` display
    object. `print(numSeconds)` will be updated in the terminal window to see how
    fast the countdown runs inside the code.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 主要计时器函数在 `myTimer()` 中。我们使用 `numSeconds = numSeconds -1` 来倒计时秒数。秒数将在 `counter`
    显示对象中更新。`print(numSeconds)` 将在终端窗口中更新，以查看代码中倒计时的速度。
- en: When time runs out or all stars have been collected, an `if` statement is created
    to check if any of the arguments are `true`. When any statement evaluates to `true`,
    the timer stops counting down, the panda animation pauses, and the `callGameOver()`
    function is called. This will call the function to display the game over screen.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当时间耗尽或所有星星都被收集时，创建一个 `if` 语句来检查是否有任何参数为 `true`。当任何语句评估为 `true` 时，计时器停止倒计时，熊猫动画暂停，并调用
    `callGameOver()` 函数。这将调用显示游戏结束界面的函数。
- en: The timer initiates the countdown through `local startTimer = function()` at
    a rate of 1000 milliseconds, which is equivalent to 1 second.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器通过 `local startTimer = function()` 以每1000毫秒（相当于1秒）的速率启动倒计时。
- en: It's so glowy
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它如此发光
- en: The panda needs another element that will display how much force is added before
    it launches into the sky. We're going to add a subtle glow-like display object
    that will represent that.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫需要另一个元素来显示发射到天空之前添加了多少力量。我们将添加一个微妙的类似发光的显示对象来表示这一点。
- en: Time for action—making the power shot
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——制作强力射击
- en: We need to create a separate function for the `powerShot` so it can be called
    when the panda is set for launch.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为 `powerShot` 创建一个单独的函数，以便在熊猫准备发射时调用。
- en: Display the `powerShot` object through a new local function called `createPowerShot()`.
    Insert it into the `gameGroup` group.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过一个名为 `createPowerShot()` 的新局部函数显示 `powerShot` 对象。将其插入到 `gameGroup` 组中。
- en: '[PRE39]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: What just happened?
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The `powerShot` object is created through the `createPowerShot()` function and
    is called when the panda is setting up for launch.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `createPowerShot()` 函数创建 `powerShot` 对象，并在熊猫设置发射时调用。
- en: Pandas!
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熊猫！
- en: It will be exciting to see something animated on screen for once. Our main character
    will have designated animations for every action applied during gameplay.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦屏幕上出现一些动画，将会非常激动人心。我们的主要角色将在游戏过程中应用每个动作时都有指定的动画。
- en: Time for action—creating the panda character
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动了——创建熊猫角色
- en: We need to set up the panda collision event and animate it with the sprite sheet
    accordingly.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置熊猫的碰撞事件，并使用精灵表相应地动画化它。
- en: We need to create a local function that will introduce the collision and touch
    events for the panda. We shall call it `createPanda()`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个本地函数，用于引入熊猫的碰撞和触摸事件。我们将称之为 `createPanda()`。
- en: '[PRE40]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: When the panda collides with the stars, use `onPandaCollision()` with the parameters
    `self` and `event`. Reload `panda` every time a collision occurs with the stars
    or the edge of the screen by using `callNewRound()`.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当熊猫与星星碰撞时，使用 `onPandaCollision()` 函数，参数为 `self` 和 `event`。每次与星星或屏幕边缘发生碰撞时，通过
    `callNewRound()` 重新加载 `panda`。
- en: '[PRE41]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Create a directional arrow to allow the user to aim for an area to launch the
    panda. Insert it into the `gameGroup` group.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个方向箭头，允许用户瞄准发射熊猫的区域。将其插入到 `gameGroup` 组中。
- en: '[PRE42]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Create the sprite sheet for the `panda` display object that has three different
    animation sequences called`"set", "crouch"`, and`"air"`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `panda` 显示对象创建精灵表，该对象有三个不同的动画序列，分别称为 `"set"`、`"crouch"` 和 `"air"`。
- en: '[PRE43]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Add properties to `panda` before it launches into the air.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在熊猫起飞前添加 `panda` 的属性。
- en: '[PRE44]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Set up collisions for `panda` using`"collision"` and apply an event listener.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `"collision"` 为 `panda` 设置碰撞，并应用事件监听器。
- en: '[PRE45]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Create the `poof` object.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `poof` 对象。
- en: '[PRE46]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Insert the `panda` and `poof` into the `gameGroup` group. Close the function.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `panda` 和 `poof` 插入到 `gameGroup` 组中。结束函数。
- en: '[PRE47]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We'll need to scroll up to the `activateRound()` function and add the`"set"`
    animation sequence for the panda.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要滚动到 `activateRound()` 函数，并添加熊猫的 `"set"` 动画序列。
- en: '[PRE48]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: What just happened?
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: The collision events that occur for the panda start with `if event.phase ==
    "began"`. The panda reloads on screen through several cases of `if` statements.
    `event.other.myName == "star"` will call a new round as well as when the panda
    launches off screen towards the right, left, or top sides of the stage.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫发生的碰撞事件从 `if event.phase == "began"` 开始。熊猫通过多个 `if` 语句在屏幕上重新加载。`event.other.myName
    == "star"` 将调用新的一轮，以及当熊猫向舞台的右侧、左侧或顶部边缘飞出时。
- en: The sprite sheet for the panda has three sets of animations. They are called`"set",
    "air"`, and`"crouch"`. There are a total of five frames in the sprite sheet.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫的精灵表有三组动画。它们被称为 `"set"`、`"air"` 和 `"crouch"`。精灵表中总共有五帧。
- en: The physical properties of the panda are set before launch. The body type is
    set to`"static"` and will change when it's in the air.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在起飞前设置熊猫的物理属性。身体类型设置为 `"static"`，在空中时将改变。
- en: The collision event for the panda is called by `panda:addEventListener( "collision",
    panda )`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫的碰撞事件通过 `panda:addEventListener( "collision", panda )` 调用。
- en: Now that the sprite sheet is set up, the`"set"` animation needs to be added
    in the `activateRound()` function to initiate movement.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在精灵表已设置，需要在 `activateRound()` 函数中添加 `"set"` 动画以启动移动。
- en: Starry skies
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 星空
- en: The stars play a big part in the game. It is the main obstacle that the panda
    has to get past to achieve points before the clock runs out.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 星星在游戏中扮演着重要角色。它是熊猫必须越过以在时钟用完前获得分数的主要障碍。
- en: Time for action—creating star collisions
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动了——创建星星碰撞
- en: Star collisions need to be made and removed from the stage so points can be
    accumulated for the player.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 星星碰撞需要被创建并从舞台移除，以便为玩家累积分数。
- en: Create a function for the star collision called `onStarCollision()` and have
    a `self` and `event` parameter.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为星星碰撞创建一个名为 `onStarCollision()` 的函数，并具有 `self` 和 `event` 参数。
- en: '[PRE49]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Add in `if` statements that removes the `stars` children from the game screen
    when a collision is made. Increment the score by 500 for each star removed on
    screen. Close the function with `end.`
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发生碰撞时，添加 `if` 语句从游戏屏幕中移除 `stars` 子对象。每次屏幕上移除一个星星时，分数增加 500。使用 `end.` 结束函数。
- en: '[PRE50]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '![Time for action—creating star collisions](img/1888_05_05.jpg)'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![是时候行动了——创建星星碰撞](img/1888_05_05.jpg)'
- en: What just happened?
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: The star collision occurs on first contact with `if event.phase == "began"`
    and `self.isHit == false` assuming the star has not been touched by the panda.
    The stars are removed from the screen by `self.parent:remove( self )` and `self
    = nil`. The score is incremented by 500 through `gameScore` and updated to `setScore
    = (scoreNum)`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 星星碰撞发生在第一次接触时，假设星星尚未被熊猫触摸，`if event.phase == "began"` 和 `self.isHit == false`。星星通过
    `self.parent:remove( self )` 和 `self = nil` 从屏幕上移除。通过 `gameScore` 增加分数，并更新到 `setScore
    = (scoreNum)`。
- en: Have a go hero—tracking the star count
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄尝试——跟踪星星计数
- en: Try tracking how many stars the panda has caught during gameplay. The logic
    is similar to how the game score was created. Each star caught will have to increment
    by 1 as the count for every collision made. The star count is placed within the
    `onStarCollision()` function. A new function and method will have to be created
    to display the text of the star count and will have to be updated every time the
    count changes.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试跟踪熊猫在游戏过程中捕获了多少星星。逻辑与创建游戏分数的方式相似。每个捕获的星星都需要增加1，作为每次碰撞的计数。星星计数放置在`onStarCollision()`函数中。需要创建一个新的函数和方法来显示星星计数文本，并且每次计数变化时都需要更新。
- en: Screen touches
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕触摸
- en: The way the panda will get across the playing field to reach the stars is by
    creating a launch mechanic similar to a slingshot. Force will play a big role
    to push the panda in an upward motion.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫将通过创建类似于弹弓的发射机制来跨越比赛场地以到达星星。力量将在推动熊猫向上运动中扮演重要角色。
- en: Time for action—launching the panda
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——发射熊猫
- en: Let's add a touch event for the panda so that it flings towards the stars. The
    `powerShot` object will play a role by helping the player visualize how much power
    is applied to the panda before it launches into the air.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为熊猫添加一个触摸事件，使其向星星发射。`powerShot`对象将发挥作用，帮助玩家可视化熊猫发射到空中之前施加的力量。
- en: Implement touch events for the panda. Create a local function called `onScreenTouch()`
    with an event parameter.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现熊猫的触摸事件。创建一个名为`onScreenTouch()`的本地函数，带有事件参数。
- en: '[PRE51]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: With `gameIsActive` initiated, add in an `if` statement for when the touch event
    starts by using `event.phase == "began"`. During this event, use the`"crouch"`
    animation set to prepare panda for launch.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`gameIsActive`被启动时，通过使用`event.phase == "began"`添加一个`if`语句，以处理触摸事件开始时的情况。在此事件期间，使用`"crouch"`动画来准备熊猫发射。
- en: '[PRE52]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Add an `elseif` statement for when the touch event ends by using `event.phase
    == "ended"`. Create a new local function called `fling()` that will hold the properties
    of `panda` when it is launched toward the `star` objects. Apply a force opposite
    of where the touch event is dragged. Scale the `powerShot` display object outward
    when the touch event is pulled farther from the character.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`event.phase == "ended"`添加一个`elseif`语句，以处理触摸事件结束时的情况。创建一个新的本地函数`fling()`，它将包含熊猫向`star`对象发射时的属性。应用与触摸事件拖动方向相反的力量。当触摸事件从角色拉远时，将`powerShot`显示对象向外扩展。
- en: '[PRE53]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![Time for action—launching the panda](img/1888_05_06.jpg)'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——发射熊猫](img/1888_05_06.jpg)'
- en: What just happened?
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: Once the game is active and the panda has been loaded on the screen, a touch
    event to launch the panda can begin. The panda will go from a`"static"` physics
    state to a`"dynamic"` physics state. The `powerShot` display object size increases,
    the farther back the panda is pulled by an event touch.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦游戏激活并且熊猫被加载到屏幕上，就可以开始触摸事件以发射熊猫。熊猫将从`"static"`物理状态变为`"dynamic"`物理状态。随着熊猫被事件触摸拉得越远，`powerShot`显示对象的大小会增加。
- en: The force from the panda launch is applied by `local fling = function()`. Force
    launch is created by `xForce` and `yForce`. The panda object is propelled by `panda:applyForce(
    xForce, yForce, panda.x, panda.y )`. Notice that the body type changes to`"dynamic"`
    so gravity can affect the object.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫发射的力量是通过`local fling = function()`应用的。通过`xForce`和`yForce`创建力量发射。通过`panda:applyForce(
    xForce, yForce, panda.x, panda.y )`推动熊猫对象。请注意，身体类型变为`"dynamic"`，这样重力就可以影响该对象了。
- en: Organizing display objects
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织显示对象
- en: When the round has been set, the display hierarchy of the game objects needs
    to be rearranged. The objects of most importance are displayed towards the front
    of the screen.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 当回合被设置后，游戏对象的显示层次结构需要重新排列。最重要的对象显示在屏幕的前方。
- en: Time for action—reordering layers
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——重新排列层次
- en: A new local function, `reorderLayers()` needs to be created to organize the
    display hierarchy of objects on screen during gameplay.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要创建一个新的本地函数`reorderLayers()`，以在游戏过程中组织屏幕上对象的显示层次结构。
- en: '[PRE54]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: What just happened?
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The `gameGroup, hudGroup`, and other display objects are reorganized in the
    display hierarchy of the game screen. The most significant object is set to the
    front, while the least important one is towards the back.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`gameGroup, hudGroup`和其他显示对象在游戏屏幕的显示层次结构中进行了重新组织。最重要的对象被置于最前方，而最不重要的对象则位于后方。'
- en: Create stars
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建星星
- en: The stars will fill the game so that the panda can catch as many as possible.
    The skies will surely be full of them.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 星星将填满游戏，以便熊猫可以尽可能多地捕捉到它们。天空肯定会被它们填满。
- en: Time for action—creating stars in the level
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在关卡中创建星星
- en: We need to add the layout of the stars in the game and have them moving to add
    a little effect that they're active. A collision event will need to be applied
    so they are removed when the panda collides with them.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在游戏中添加星星的布局，并让它们移动以增加它们活跃的视觉效果。需要应用一个碰撞事件，这样当 panda 碰到它们时，它们就会被移除。
- en: Create a new function called `createStars()` and lay out the `star` objects
    in a `for` loop. Add in the`"collision"` event that will be called by `onStarCollision()`
    to remove the stars when they are hit by the panda. Rotate the stars forwards
    and backwards at 10 seconds and 1080 and -1080 degrees each. This will allow the
    stars to rotate three full intervals backwards and forwards. Create the walls
    for the left and right side of the screen.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `createStars()` 的新函数，并通过 `for` 循环布局 `star` 对象。添加一个 `"collision"` 事件，该事件将由
    `onStarCollision()` 调用，当星星被熊猫击中时移除星星。星星在10秒内向前和向后旋转，每次旋转1080度和-1080度。这将允许星星向前和向后旋转三个完整的间隔。为屏幕的左右两侧创建墙壁。
- en: '[PRE55]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: What just happened?
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The amount of stars displayed on screen is set by `numOfRows` and `numOfColumns`.
    A `for` loop is made to display each individual star object and placed in the
    `stars` group. The collision for `star` is detected by an event listener through
    `onStarCollision()`.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上显示的星星数量由 `numOfRows` 和 `numOfColumns` 设置。通过一个 `for` 循环来显示每个单独的星星对象，并将其放置在
    `stars` 组中。`star` 的碰撞通过事件监听器通过 `onStarCollision()` 来检测。
- en: '`leftWall` and `rightWall` have physical properties as well and will take into
    account the collision detection with the panda.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`leftWall` 和 `rightWall` 也有物理属性，并且会考虑到与 panda 的碰撞检测。'
- en: The stars are animated by `starAnimation()` and `starRotation()`. Each function
    rotates each star object for 10 seconds (10000 milliseconds), and alternates between
    1080 and -1080 degrees.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 星星通过 `starAnimation()` 和 `starRotation()` 动画化。每个函数都会在每个星星对象上旋转10秒（10000毫秒），并在1080度和-1080度之间交替。
- en: Have a go hero—creating a movieclip
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄行动——创建 movieclip
- en: Right now the stars have some movement by rotating simultaneously. Try adding
    some more characteristics to the image by having them change in a variety of sizes.
    This can be done by making a series of the same image and changing the size of
    the asset itself, not the image size. An image manipulation software program will
    be needed to accomplish this. Create as many images you see fit, and set them
    into a movieclip function. Let it run during gameplay.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 目前星星通过同时旋转来获得一些运动。尝试通过让它们以各种大小变化来给图像添加更多特性。这可以通过制作一系列相同的图像并改变资产本身的大小（而不是图像大小）来实现。需要使用图像处理软件程序来完成这项工作。创建尽可能多的图像，并将它们设置到
    movieclip 函数中。在游戏过程中运行它。
- en: Starting the game
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始游戏
- en: The game starts when the clock starts counting down and the panda is loaded
    on the screen. Once the panda is set on screen, the player needs to aim and launch
    it quickly so reloading of the panda can occur immediately.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏在时钟开始倒计时并且熊猫加载到屏幕上时开始。一旦熊猫被设置在屏幕上，玩家需要快速瞄准并发射它，以便可以立即重新加载熊猫。
- en: Time for action—initializing the game
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——初始化游戏
- en: The physics and remaining game functions need to be initialized to run the game.
    All game actions need to be delayed until the **Help** screen has left the stage.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 需要初始化物理和剩余的游戏功能以运行游戏。所有游戏动作都需要延迟，直到 **帮助** 屏幕离开舞台。
- en: Start the game by creating a new function called `gameInit()` that will hold
    the `physics` properties and activate the display objects on the stage.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个名为 `gameInit()` 的新函数来开始游戏，该函数将包含 `physics` 属性并激活舞台上的显示对象。
- en: '[PRE56]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Add in a `Runtime` event listener using`"touch"` for `onScreenTouch()`.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `"touch"` 为 `onScreenTouch()` 添加一个 `Runtime` 事件监听器。
- en: '[PRE57]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Have the level and timer start 10 seconds later so the user has time to read
    through the help text. Close the function and start the game with `gameInit()`.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让关卡和计时器晚10秒开始，这样用户就有时间阅读帮助文本。关闭函数，并通过 `gameInit()` 开始游戏。
- en: '[PRE58]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: All the code is complete! Run the game in the simulator and see for yourself
    how it works.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都已完成！在模拟器中运行游戏，亲自看看它是如何工作的。
- en: What just happened?
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The round is initialized through `gameInit()`. The physics engine and remaining
    functions are run at this time. The event listener for `onScreenTouch()` is added
    as well. The `startNewRound()` and `startTimer()` functions initiate 10 seconds
    after launching the application through `timer.performWithDelay`.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`gameInit()`初始化回合。此时运行物理引擎和剩余的功能。同时添加了`onScreenTouch()`的事件监听器。`startNewRound()`和`startTimer()`函数在启动应用程序后10秒通过`timer.performWithDelay()`启动。
- en: Pop quiz—animating graphics
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验——图形动画
- en: What is the proper way to stop the animation of a sprite sheet?
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确停止精灵图集动画的方法是什么？
- en: a. `sprite:stop()`
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `sprite:stop()`
- en: b. `sprite:pause()`
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `sprite:pause()`
- en: c. `sprite:dispose()`
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `sprite:dispose()`
- en: d. None of the above
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 以上都不是
- en: How do you make a movieclip animation loop forever?
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使电影剪辑动画无限循环？
- en: a. `myAnimation:play{ startFrame=1, endFrame=4, loop=1, remove=true }`
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `myAnimation:play{ startFrame=1, endFrame=4, loop=1, remove=true }`
- en: b. `myAnimation:play{ startFrame=1, endFrame=4, loop=-1, remove=true }`
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `myAnimation:play{ startFrame=1, endFrame=4, loop=-1, remove=true }`
- en: c. `myAnimation:play{ startFrame=1, endFrame=4, loop=0, remove=true }`
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `myAnimation:play{ startFrame=1, endFrame=4, loop=0, remove=true }`
- en: d. `myAnimation:play{ startFrame=1, endFrame=4, loop=100, remove=true }`
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. `myAnimation:play{ startFrame=1, endFrame=4, loop=100, remove=true }`
- en: How do you create a new sprite sheet?
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何创建一个新的精灵图集？
- en: a. `spriteSheet = sprite.newSpriteSheetFromData( "myImage.png", spriteData )`
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `spriteSheet = sprite.newSpriteSheetFromData( "myImage.png", spriteData )`
- en: b. `spriteSheet = sprite.newSpriteSheetFromData( "myImage.png", spriteSet )`
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `spriteSheet = sprite.newSpriteSheetFromData( "myImage.png", spriteSet )`
- en: c. `spriteSheet = sprite.newSpriteSheet("myImage.png", frameWidth, frameHeight)`
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `spriteSheet = sprite.newSpriteSheet("myImage.png", frameWidth, frameHeight)`
- en: d. None of the above
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 以上都不是
- en: Summary
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Our second game, Panda Star Catcher is finally completed! We're now getting
    a great grasp on writing more functions and different types of game logic. Now
    we have animation under our belt! Way to go!
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二款游戏，熊猫星捕手终于完成了！我们现在对编写更多函数和不同类型的游戏逻辑有了很好的掌握。现在我们有了动画经验！做得好！
- en: 'We looked at:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了：
- en: Transitions and applying easing techniques in more depth
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入探讨过渡和应用缓动技术
- en: Understanding the difference between movieclips and sprite sheets
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解电影剪辑和精灵图集之间的区别
- en: Creating a game loop for display objects that have to be reloaded continuously
    on screen
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为需要不断在屏幕上重新加载的显示对象创建游戏循环
- en: Applying force to a display object that propels it towards a designated direction
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对显示对象施加力量，使其朝向指定的方向推进
- en: Adding a collision event that switches from one display object to another
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个碰撞事件，从显示对象切换到另一个显示对象
- en: We have pushed through making another game in one whole chapter! Working in
    Corona SDK is so simple and fast to learn. It doesn't even require thousands of
    lines of code to create a simple game.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在整章中完成制作了另一款游戏！在Corona SDK中工作非常简单且易于学习。它甚至不需要数千行代码来创建一个简单的游戏。
- en: In the next chapter, we'll be learning another vital element in creating games,
    sound effects,and music! You're in for a treat.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习创建游戏中的另一个重要元素，音效和音乐！你将有一个美好的体验。
