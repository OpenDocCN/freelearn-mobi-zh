["```kt\n  fun main(args: Array<String>) { \n      val stream = 1.rangeTo(10).asSequence().asStream() \n      val resultantList = stream.skip(5).collect(Collectors.toList()) \n      println(resultantList) \n  } \n```", "```kt\n  fun main(args: Array<String>) { \n      val stream = 1.rangeTo(10).asSequence().asStream() \n       val resultantList = stream.filter{ \n          it%2==0 \n      }.collect(Collectors.toList()) \n      println(resultantList) \n  } \n```", "```kt\n  fun main(args: Array<String>) { \n      val intStream = IntStream.range(1,10) \n      val result = intStream.sum() \n      println(\"The sum of elements is $result\") \n  } \n```", "```kt\n  fun main(args: Array<String>) { \n      val doubleStream = DoubleStream.iterate(1.5,{item ->     item*1.3})//(1) \n      val avg = doubleStream \n              .limit(10)//(2) \n              .peek { \n                  println(\"Item $it\") \n              }.average()//(3) \n      println(\"Average of 10 Items $avg\") \n  } \n```", "```kt\n  fun main(args: Array<String>) { \n      val stream = Stream.builder<String>() \n              .add(\"Item 1\") \n              .add(\"Item 2\") \n              .add(\"Item 3\") \n              .add(\"Item 4\") \n              .add(\"Item 5\") \n              .add(\"Item 6\") \n              .add(\"Item 7\") \n              .add(\"Item 8\") \n              .add(\"Item 9\") \n              .add(\"Item 10\") \n              .build() \n      println(\"The Stream is ${stream.collect(Collectors.toList())}\") \n  } \n```", "```kt\n  fun main(args: Array<String>) { \n      val emptyStream = Stream.empty<String>() \n      val item = emptyStream.findAny() \n      println(\"Item is $item\") \n } \n```", "```kt\n fun main(args: Array<String>) { \n      val stream = Stream.of(\"Item 1\",2,\"Item 3\",4,5.0,\"Item 6\") \n      println(\"Items in Stream =            ${stream.collect(Collectors.toList())}\") \n  } \n```", "```kt\n  fun main(args: Array<String>) { \n      val stream = Stream.generate { \n          //return a random number \n          (1..20).random() \n      } \n      val resultantList = stream \n              .limit(10) \n              .collect(Collectors.toList()) \n      println(\"resultantList = $resultantList\") \n  } \n```", "```kt\nimport java.util.stream.Collectors \n```", "```kt\n  fun main(args: Array<String>) { \n      val resultantSet = (0..10).asSequence().asStream() \n              .collect(Collectors.toCollection{LinkedHashSet<Int>()}) \n      println(\"resultantSet $resultantSet\") \n  } \n```", "```kt\n  fun main(args: Array<String>) { \n      val resultantMap = (0..10).asSequence().asStream() \n              .collect(Collectors.toMap<Int,Int,Int>({ \n                  it \n              },{ \n                  it*it \n              })) \n      println(\"resultantMap = $resultantMap\") \n  } \n```", "```kt\n  fun main(args: Array<String>) { \n      val resultantString = Stream.builder<String>() \n              .add(\"Item 1\") \n              .add(\"Item 2\") \n              .add(\"Item 3\") \n              .add(\"Item 4\") \n              .add(\"Item 5\") \n              .add(\"Item 6\") \n              .build() \n              .collect(Collectors.joining(\" - \",\"Starts Here=>\",\"<=Ends   Here\")) \n\n      println(\"resultantString $resultantString\") \n  } \n```", "```kt\n  fun main(args: Array<String>) { \n      val resultantSet = (1..20).asSequence().asStream() \n              .collect(Collectors.groupingBy<Int,Int> { it%5 }) \n      println(\"resultantSet $resultantSet\") \n  } \n```"]