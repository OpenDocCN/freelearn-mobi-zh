- en: Chapter 8. Using Cloud Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In application development, all the processes cannot be executed on the client
    side. So it's recommended to execute such processes on the cloud end. Parse allows
    users to develop a mobile app, bypassing the server-side coding and management.
    While developing complex applications, users want some business logic to not be
    executed on the client end. So for such applications, Parse provides the Parse
    Cloud, where you can deploy your custom logic, which can be accessed by your application.
  prefs: []
  type: TYPE_NORMAL
- en: The cloud code is required to be written in JavaScript language. The difference
    would be the place of execution; cloud code will be executed on the Parse Cloud
    rather than executing on the mobile device. Once the cloud code is updated, it's
    available for use across all mobile environments instantly. Such features help
    you to change application behavior instantly with ease. In this chapter, we will
    learn about the implementation of the cloud code and its usage on the mobile end.
  prefs: []
  type: TYPE_NORMAL
- en: The cloud code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before getting started with the cloud code, you need to set up the Parse command
    line tool. This tool will help you to manage and deploy your code on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the command-line tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the Parse command-line tool on a Mac/Linux environment, you need
    to execute the following command in your terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The previous line of code will install a tool named `parse` to the`/usr/local/bin/parse`
    directory. To uninstall, you just need to delete the file, as it does not have
    any junk files installed with it.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the cloud code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up the cloud code, create a directory where you want to save your cloud
    code. It's recommended to keep the cloud code in your project workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command `parse new` creates a new directory for you, and prompts for the
    selection of the application for which you are creating the cloud code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to use the e-mail ID and password of the Parse account to log in.
    In case of the `OAuth` login, you need to set a new password from your Parse settings
    to set up the cloud code. After successful execution of the previous command,
    the following file structure will be created for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The explanation of the files mentioned in the preceding section is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The JSON file in the `config` directory should not be edited, it's for Parse
    use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `cloud` directory is the place where you will store your cloud code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initially the `config` folder will contain `main.js`, which holds your cloud
    functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `public` directory will hold the static data content for hosting on Parse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the cloud function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the function on the cloud, you need to add the function to your `cloud`/`main.js`
    file. Let''s take an example of the `cloud` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To deploy the code on the Parse Cloud, run the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once the function is deployed on the cloud, you can check the cloud code in
    your Parse application under the **Cloud Code** section. The deployed code should
    be published there. Now it's time to execute the cloud code on the mobile side.
    Parse provides you with the `callFunctionInBackground:withParameters:block:` method
    to execute the cloud code from the mobile end.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will have to use the following code to execute the cloud code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: So, in this section, we explored how to write and execute the cloud code.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting a website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s easy to host a website on Parse. All the files in your `public` directory
    will be hosted at `your-custom-subdomain.parseapp.com`. The following code will
    illustrate a way to host your site on the Parse Cloud. Open the terminal and execute
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The previous line of code will add `Hello World` in your `index.html` file and
    with the `deploy` command your code will be deployed to the Parse Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: To update your subdomain, navigate to the **Web Hosting** section of your app's
    setting. In the field of **ParseApp name**, provide a unique name, and all your
    website files will be available at `your-custom-subdomain.parseapp.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding complex functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The cloud code is important to reduce the computation on the client side. Let''s
    say, your application requires the average marks of students associated with the
    MBA course. The `Marks` object will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, you should not fetch a long list of data and filter that on the
    client side. You can add a Parse code for filtering the result and providing you
    with the resultant data. The following Parse Cloud code will help you to filter
    the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the following key points to note about the previous `Cloud` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a `cloud` function, and a query on the `Marks` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter the `Marks` objects based on the `course` name provided in `params query.equalTo("course",
    request.params.course);`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then fetch the filtered data and return the average after completing the computation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now to fetch the data using the cloud code on the client side, you need to
    use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The previous code will invoke the `cloud` function with the name `averageMarks`,
    and with the `course` name `MBA` as a parameter. After successful execution of
    the cloud code, you will get `marks` as the response, which will hold the average
    marks of the students who are associated with the MBA course.
  prefs: []
  type: TYPE_NORMAL
- en: Using cloud on the saved code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In case of multiplatform mobile application development, the cloud code saves
    a lot of code to write on the client end. Suppose you have an iOS, Android, or
    Windows environment for application development, then in that case you can avoid
    coding validation on all environments by deploying a validation code on the cloud.
    The Cloud provides you with the `beforeSave` method. The following code will illustrate
    the usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: By this method, Parse allows you to add your custom logic, which will be executed
    before saving the object on the Cloud. In this function you can add your validation
    code on the objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Likewise, Parse provides you with the `afterSave` method as well, which will
    help you to provide custom logic, which will be executed after saving the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The previous code will be executed after saving the object on the cloud. This
    method allows you to add custom logic, which will get executed after saving the
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Using cloud on the deleted code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like saving, you can add the custom code, which will be executed before
    and after deleting any object from Parse. Parse provides you with the `beforeDelete`
    and `afterDelete` methods, which will help you to add your custom logic on these
    events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will illustrate the usage of the `beforeDelete` method.
    Similarly, you can use the `afterDelete` method as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the Parse Cloud code and its various implementations
    to simplify the application development on the mobile end.
  prefs: []
  type: TYPE_NORMAL
- en: We started by exploring the installation process of the command-line tool and
    then we saw the setup of the cloud code on Parse.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about writing the cloud functions and their usage on the client
    side.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we learned about publishing our website on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we explored complex-case scenarios and implementations using the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about error handling and security on Parse.
  prefs: []
  type: TYPE_NORMAL
