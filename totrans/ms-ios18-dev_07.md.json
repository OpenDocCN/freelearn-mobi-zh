["```swift\n import TipKit\n@main\nstruct MyApp: App {\n    init() { <st c=\"6439\">try?</st> <st c=\"6444\">Tips.configure()</st> }\n}\n```", "```swift\n try? Tips.configure([\n  .<st c=\"6794\">datastoreLocation</st>(.groupContainer(identifier:\n    \"MyAppGroupContainer\"))])\n```", "```swift\n struct MarkAsFavoriteTip: Tip {\n    var id: String { \"InlineTipView\"}\n    var title: Text {\n        Text(\"Save as a Favorite\")\n    }\n    var message: Text? {\n        Text(\"You can mark items as Favorite and add them\n          to your favorites list.\")\n    }\n    var image: Image? {\n        Image(systemName: \"star\")\n    }\n}\n```", "```swift\n struct InlineTipView: View { <st c=\"8250\">var tip = MarkAsFavoriteTip()</st> var body: some View {\n        VStack { <st c=\"8311\">TipView(tip)</st> List(workouts) { workout in\n                WorkoutView(workout: workout)\n            }\n        }\n    }\n}\n```", "```swift\n struct PopoverTipView: View { <st c=\"9872\">var tip = PopoverTip()</st> var body: some View {\n        List {\n            // some list information\n        }\n        .navigationTitle(\"Popover Tip\")\n        .toolbar(content: {\n            Button(\"Settings\", systemImage: \"gearshape\") {\n            }\n            .buttonStyle(.plain) <st c=\"10073\">.popoverTip(tip, arrowEdge: .top)</st> })\n    }\n}\n```", "```swift\n List(workouts) { workout in\n                WorkoutView(workout: workout,\n                  onFavoriteButtonTap: { <st c=\"11814\">tip.invalidate(reason:</st>\n <st c=\"11836\">.actionPerformed)</st> })\n            }\n```", "```swift\n var id: String { \"InlineTipView\"}\n```", "```swift\n struct MyApp: App {\n    init() { <st c=\"13418\">try?</st> <st c=\"13423\">Tips.resetDatastore()</st> try? Tips.configure()\n    }\n}\n```", "```swift\n var id: String { \"InlineTipView\"}\n```", "```swift\n var title: Text { Text(\"Save as a Favorite\") }\n```", "```swift\n var title: Text {\n        Text(\"Save as a Favorite\") <st c=\"15970\">.foregroundStyle(.red)</st> }\n```", "```swift\n var title: Text {\n        Text(\"Save as a \") <st c=\"16221\">.fontWeight(.light)</st> +\n        Text(\"Favorite\") <st c=\"16260\">.fontWeight(.bold)</st>\n <st c=\"16278\">.foregroundStyle(.red)</st> }\n```", "```swift\n var image: Image? {\n        Image(systemName:\n          \"externaldrive.fill.badge.icloud\") <st c=\"16621\">.symbolRenderingMode(.multicolor)</st> }\n```", "```swift\n Button(\"Sign In\", action: signIn) <st c=\"18326\">Button</st>) but apply a specific style.\n\t\t\t<st c=\"18363\">In TipKit, we can also define our tip appearance by applying a custom</st> <st c=\"18434\">view style:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"18820\">The View</st> <st c=\"18830\">Style we just created takes a</st> `<st c=\"18860\">Tip</st>` <st c=\"18863\">view and returns a new view with the same content but a different layout and design.</st> <st c=\"18949\">It even adds a new view component, such as a</st> `<st c=\"18994\">Divider</st>` <st c=\"19001\">and</st> `<st c=\"19006\">Spacer</st>` <st c=\"19012\">component.</st> <st c=\"19024\">The magic happens in the</st> `<st c=\"19049\">makeBody</st>` <st c=\"19057\">function, which receives a</st> `<st c=\"19085\">Configuration</st>` <st c=\"19098\">parameter that contains all the</st> <st c=\"19131\">tip information.</st>\n\t\t\t<st c=\"19147\">To apply our new View Style on a tip, we can use the</st> `<st c=\"19201\">tipViewStyle</st>` <st c=\"19213\">method:</st>\n\n```", "```swift\n struct ChangeEmailTip: Tip { <st c=\"20468\">var actions: [Action] {</st>\n <st c=\"20491\">Action(id: \"go-to-settings\", title: \"Go to</st>\n <st c=\"20534\">settings\")</st>\n <st c=\"20545\">Action(id: \"change-now\", title: \"Change email now\")</st>\n <st c=\"20597\">}</st> }\n```", "```swift\n Button(\"Settings\", systemImage: \"gearshape\") {\n                gotoSettings = true\n            }\n            .buttonStyle(.plain)\n            .popoverTip(tip, arrowEdge: .top) <st c=\"21842\">{ action in</st>\n <st c=\"21853\">if action.id == \"go-to-settings\" {</st>\n <st c=\"21888\">gotoSettings = true</st>\n <st c=\"21908\">}</st>\n <st c=\"21910\">}</st>\n```", "```swift\n struct ChangeEmailTip: Tip {\n    // rest of the tip\nvar actions: [Action] {\n        Action(id: <st c=\"22304\">ChangeEmailTip.goToSettingsAction</st>,\n          title: \"Go to settings\")\n        Action(id: ChangeEmailTip.changeEmailAction, title:\n          \"Change email now\")\n    }\n <st c=\"22438\">static let goToSettingsAction = \"go-to-settings\"</st> static let changeEmailAction = \"change-now\"\n}\n…\n.popoverTip(tip, arrowEdge: .top) { action in\n                if action.id == <st c=\"22597\">ChangeEmailTip.goToSettingsAction</st> {\n                    gotoSettings = true\n                }\n            }\n```", "```swift\n List(<st c=\"22882\">configuration.actions</st>) { action in\n                Button(action:{\n                    // perform action\n                }) {\n                    action.label()\n                }\n            }\n```", "```swift\n struct ChangeAppThemeTip: Tip {\n    // rest of the tip implementation <st c=\"25649\">@Parameter</st> static var isPremiumUser: Bool = false\n}\n```", "```swift\n static var $isPremiumUser: Tips.Parameter<Bool> =\n  Tips.Parameter(Self.self, \"+isPremiumUser\", false)\n  {\n    get {\n            $isPremiumUser.wrappedValue\n    }\n    set {\n            $isPremiumUser.wrappedValue = newValue\n    }\n}\n```", "```swift\n struct ChangeAppThemeTip: Tip {\n    @Parameter\n    static var isPremiumUser: Bool = false <st c=\"26947\">var rules: [Rule] {</st>\n <st c=\"26966\">[</st>\n <st c=\"26968\">#Rule(Self.$isPremiumUser) {</st>\n <st c=\"26997\">$0 == true</st>\n <st c=\"27008\">}</st>\n <st c=\"27010\">]</st>\n <st c=\"27012\">}</st> }\n```", "```swift\n let tip = ChangeAppThemeTip()\n    var body: some View {\n        VStack {\n            Button(\"Change isPremium parameter\") { <st c=\"28011\">ChangeAppThemeTip.isPremiumUser.toggle()</st> }\n            TipView(tip)\n        }\n    }\n```", "```swift\n let premiumManager = PremiumPurchaseManager()\nlet premiumStatusSubscription =\n  premiumManager.premiumPurchasePublisher <st c=\"28642\">.assign(to: \\.isPremiumUser, on:</st>\n<st c=\"28796\">isPremiumUser</st> parameter. This is a more elegant way to link the rule logic to our app.\n\t\t\t<st c=\"28882\">Now let’s discuss the other type of rules –</st> <st c=\"28927\">events.</st>\n\t\t\t<st c=\"28934\">Adding a rule based on events</st>\n\t\t\t<st c=\"28964\">When we display a tip based on a state, it’s usually only displayed when the user can use a particular</st> <st c=\"29068\">feature.</st> <st c=\"29077\">However, there are cases when we want to display</st> <st c=\"29126\">a tip when we think the user is ready to take our app to the following</st> <st c=\"29197\">usage level.</st>\n\t\t\t<st c=\"29209\">For example, if we create a music app and the user adds a few songs, maybe it’s a good idea to tell them about making a playlist.</st> <st c=\"29340\">Or, if we are working on a dating app, maybe it is worth suggesting modifying the search filter if the user hasn’t chosen any of the</st> <st c=\"29473\">profiles viewed.</st>\n\t\t\t<st c=\"29489\">For these types of tips, we can create a rule based on tracking events.</st> <st c=\"29562\">The idea is to define an event representing the user’s relevant action.</st> <st c=\"29634\">For example, I can add a task, view a profile, and more.</st> <st c=\"29691\">Afterward, we create a rule based on the number of events tracked within a time frame</st> <st c=\"29777\">or generally.</st>\n\t\t\t<st c=\"29790\">Let’s see a code example for a tip suggesting the user add a list of to-dos.</st> <st c=\"29868\">We’ll start by defining</st> <st c=\"29892\">our tip:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"30065\">The tip goal is to suggest the user add to a list of to-dos.</st> <st c=\"30127\">We create an event called</st> `<st c=\"30153\">didAppTaskEvent</st>` <st c=\"30168\">that helps us track the number of times the user adds a</st> <st c=\"30225\">new to-do.</st>\n\t\t\t<st c=\"30235\">The second thing</st> <st c=\"30253\">we do here is to create a new rule that returns</st> `<st c=\"30301\">true</st>` <st c=\"30305\">if the number of tracked events</st> <st c=\"30338\">exceeds three.</st>\n\t\t\t<st c=\"30352\">This is a different</st> <st c=\"30373\">rule constructor that handles event tracking instead of</st> <st c=\"30429\">a state.</st>\n\t\t\t<st c=\"30437\">The last piece of the puzzle shows the tip and track of</st> <st c=\"30494\">an event:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"30802\">The event</st> <st c=\"30813\">tracking operation is referred to as</st> `<st c=\"30850\">donate()</st>`<st c=\"30858\">, while the</st> <st c=\"30870\">total number of tracked events is known</st> <st c=\"30910\">as</st> **<st c=\"30913\">donations</st>**<st c=\"30922\">.</st>\n\t\t\t<st c=\"30923\">We can also</st> <st c=\"30936\">check for events tracked in a specific</st> <st c=\"30975\">time range:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"31077\">This example checks whether the number of events exceeds three in the last three days or</st> <st c=\"31167\">one week.</st>\n\t\t\t<st c=\"31176\">Now, it’s important to distinguish between the number of events tracked and just checking the database for the number</st> <st c=\"31295\">of to-dos.</st>\n\t\t\t<st c=\"31305\">We could easily check the user’s number of to-dos in their database and change that to a state-based rule.</st> <st c=\"31413\">However, this solves a different use case – not the number of times the user added a task with the app, but rather the number of tasks the user has</st> <st c=\"31561\">in general.</st>\n\t\t\t<st c=\"31572\">Grouping tips with TipGroup</st>\n\t\t\t<st c=\"31600\">When our app becomes more extensive and feature-rich, handling a large set of tips can become</st> <st c=\"31695\">cumbersome.</st> <st c=\"31707\">Trying to coordinate all these tips using rules can lead to a situation wherein tips appear outside the intended order and</st> <st c=\"31830\">even together.</st>\n\t\t\t<st c=\"31844\">To address that, we can use the</st> `<st c=\"31877\">TipGroup</st>` <st c=\"31885\">class to group tips and present them individually in a</st> <st c=\"31941\">particular order.</st>\n\t\t\t<st c=\"31958\">Let’s see an example for a</st> `<st c=\"31986\">TipGroup</st>` <st c=\"31994\">class usage:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"32148\">In this example, we created a state variable called</st> `<st c=\"32201\">tips</st>` <st c=\"32205\">of the TipGroup type.</st> <st c=\"32228\">We passed</st> `<st c=\"32238\">.ordered</st>` <st c=\"32246\">for its priority parameter and added two tips using its builder.</st> <st c=\"32312\">In the code itself, we attached our</st> `<st c=\"32348\">TipGroup</st>` <st c=\"32356\">instance to a button using the</st> `<st c=\"32388\">popoverTip</st>` <st c=\"32398\">view modifier, passing the group’s</st> <st c=\"32434\">current tip.</st>\n\t\t\t<st c=\"32446\">Using the .</st>`<st c=\"32458\">ordered</st>` <st c=\"32466\">parameter ensures that the tips will appear in the order in which we added them to the builder.</st> <st c=\"32563\">TipKit will show the next tip once all the previous tips have</st> <st c=\"32625\">been invalidated.</st>\n\t\t\t<st c=\"32642\">The other parameter we can use is</st> `<st c=\"32677\">firstAvailable</st>`<st c=\"32691\">, which shows the next tip that is eligible</st> <st c=\"32735\">for display.</st>\n\t\t\t<st c=\"32747\">Grouping tips together can help manage a large collection of tips in our project.</st> <st c=\"32830\">However, looking at the code example again, we can see that there might be a problem with the way we implemented the TipGroup in the view.</st> <st c=\"32969\">Imagine we have a TipGroup with a</st> `<st c=\"33003\">SettingsTip</st>` <st c=\"33014\">type and a</st> `<st c=\"33026\">ProfileTip</st>` <st c=\"33036\">type.</st> <st c=\"33043\">When using the TipGroup for settings and profile buttons, we can’t control which tip</st> <st c=\"33128\">appears where.</st>\n\t\t\t<st c=\"33142\">To solve</st> <st c=\"33152\">that, we can cast the</st> `<st c=\"33174\">currentTip</st>` <st c=\"33184\">variable to the desired tip type.</st> <st c=\"33219\">Let’s see that in the</st> <st c=\"33241\">following code:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"33484\">In this code example, we have a TipGroup with two tips – for the settings button and for the</st> <st c=\"33578\">profile button.</st>\n\t\t\t<st c=\"33593\">When we use the</st> `<st c=\"33610\">popoverTip</st>` <st c=\"33620\">view builder, we cast the</st> `<st c=\"33647\">currentTip</st>` <st c=\"33657\">instance to the corresponding type according to the button.</st> <st c=\"33718\">This technique takes advantage of how the</st> `<st c=\"33760\">popoverTip</st>` <st c=\"33770\">signature looks:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"33832\">Since</st> `<st c=\"33839\">popoverTip</st>` <st c=\"33849\">accepts</st> `<st c=\"33858\">nil</st>` <st c=\"33861\">as an argument, we can ensure that only relevant tips will appear from</st> <st c=\"33933\">the TipGroup.</st>\n\t\t\t<st c=\"33946\">Rules are only one aspect of defining the appearance logic.</st> <st c=\"34007\">Another crucial element is determining its frequency.</st> <st c=\"34061\">Let’s see how to customize that</st> <st c=\"34093\">as well.</st>\n\t\t\t<st c=\"34101\">Customizing display frequency</st>\n\t\t\t<st c=\"34131\">I</st><st c=\"34133\">n the previous section, we discussed creating display logic for our tips using rules and tip groups.</st> <st c=\"34234\">However, tips can overwhelm users; there’s a fine line between helping the user and</st> <st c=\"34318\">disturbing them.</st> <st c=\"34335\">Adjusting all the rules to set a reasonable limit on the number of tips the user sees can be challenging.</st> <st c=\"34441\">For that problem, we can manage the frequency at which our</st> <st c=\"34500\">tips display.</st>\n\t\t\t<st c=\"34513\">Let’s start with setting the max display count for</st> <st c=\"34565\">a tip.</st>\n\t\t\t<st c=\"34571\">Setting the max display count for a specific tip</st>\n\t\t\t<st c=\"34620\">The first and essential thing we can do is set the maximum number of a specific tip type that can</st> <st c=\"34719\">be displayed.</st>\n\t\t\t<st c=\"34732\">We do</st> <st c=\"34739\">that by adding a new variable to our tip</st> <st c=\"34780\">called</st> `<st c=\"34787\">options</st>`<st c=\"34794\">:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"34876\">In this code example, we use the</st> `<st c=\"34910\">MaxDisplayCount</st>` <st c=\"34925\">static function of the</st> `<st c=\"34949\">Tips</st>` <st c=\"34953\">namespace.</st> <st c=\"34965\">That definition means that the tip will be displayed a maximum of two times, and afterward, it will be invalidated, overriding the rest of the rule’s logic.</st> <st c=\"35122\">That’s a great way to ensure that a specific tip doesn’t</st> <st c=\"35179\">overwhelm users.</st>\n\t\t\t<st c=\"35195\">However, there’s another excellent way to ensure a calmer user experience:</st> <st c=\"35271\">display frequency.</st>\n\t\t\t<st c=\"35289\">Setting our tips’ display frequency</st>\n\t\t\t<st c=\"35325\">We just learned how to limit a particular tip to a certain number of appearances.</st> <st c=\"35408\">Another</st> <st c=\"35416\">way to handle tip appearance is to define</st> <st c=\"35458\">its frequency.</st>\n\t\t\t<st c=\"35472\">Let’s look at the</st> <st c=\"35491\">following code:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"35588\">The code example shows how we can limit the total number of tips displayed to one</st> <st c=\"35671\">per day.</st>\n\t\t\t<st c=\"35679\">The</st>`<st c=\"35683\">.displayFrequency(.daily)</st>` <st c=\"35708\">expression means that TipKit will show no more than one tip per day.</st> <st c=\"35778\">Obviously, we have additional frequency options: hourly, weekly, monthly,</st> <st c=\"35852\">and immediate.</st>\n\t\t\t<st c=\"35866\">We can configure specific tips to ignore the system</st> <st c=\"35919\">display frequency:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"36028\">In this code example, the</st> `<st c=\"36055\">AddListTip</st>` <st c=\"36065\">tip ignores the system definition for general</st> <st c=\"36112\">display frequency.</st>\n\t\t\t<st c=\"36130\">Setting the max display count for a specific tip and defining a display frequency for all tips is a great way to fine-tune the user’s</st> <st c=\"36265\">tips experience.</st>\n\t\t\t<st c=\"36281\">Summary</st>\n\t\t\t<st c=\"36289\">In this chapter, we discussed the importance of TipKit, added our first tip, customized its design and behavior, learned how to manage tips better by grouping them, and minimized their appearance by setting their display frequency.</st> <st c=\"36522\">By now, we are fully prepared to implement TipKit in</st> <st c=\"36575\">our apps.</st>\n\t\t\t<st c=\"36584\">TipKit touches on a severe app aspect: engagement and feature exploration.</st> <st c=\"36660\">It looks like it supports many</st> <st c=\"36691\">product requirements!</st>\n\t\t\t<st c=\"36712\">In the next chapter, we’ll discuss how to work seamlessly with one of our most important data sources:</st> <st c=\"36816\">the network.</st>\n\n```", "```swift\n\n```"]