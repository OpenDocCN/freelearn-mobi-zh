["```kt\ndata class User(\n    val id: String,\n    val firstName: String,\n    val lastName: String,\n    val email: String\n) {\n    fun getFullName() = \"$firstName $lastName\"\n}\n```", "```kt\ninterface UserRepository {\n    fun getUser(id: String): Flow<User>\n}\n```", "```kt\ninterface UserRemoteDataSource {\n    fun getUser(id: String): Flow<User>\n}\n```", "```kt\nclass UserRepositoryImpl(private val userRemoteDataSource: \n    UserRemoteDataSource) : UserRepository {\n\n    override fun getUser(id: String): Flow<User> = \n        userRemoteDataSource.getUser(id)\n\n}\n```", "```kt\ninterface UserLocalDataSource {\n    suspend fun insertUser(user: User)\n}\n```", "```kt\nclass UserRepositoryImpl(\n    private val userRemoteDataSource: UserRemoteDataSource,\n    private val userLocalDataSource: UserLocalDataSource\n) : UserRepository {\n    override fun getUser(id: String): Flow<User> = \n        userRemoteDataSource.getUser(id)\n        .onEach { \n            userLocalDataSource.insertUser(it)\n        }\n}\n```", "```kt\ninterface UserLocalDataSource {\n    suspend fun insertUser(user: User)\n    fun getUser(id: String): Flow<User>\n}\n```", "```kt\ninterface UserRepository {\n    fun getUser(id: String): Flow<User>\n    fun refreshUser(id: String): Flow<User>\n}\n```", "```kt\nclass UserRepositoryImpl(\n    private val userRemoteDataSource: UserRemoteDataSource,\n    private val userLocalDataSource: UserLocalDataSource\n) : UserRepository {\n    override fun getUser(id: String): Flow<User> = \n        userLocalDataSource.getUser(id)\n    override fun refreshUser(id: String): Flow<User> = \n        userRemoteDataSource.getUser(id)\n        .onEach {\n            userLocalDataSource.insertUser(it)\n        }\n}\n```", "```kt\nclass UserRepositoryImpl(\n    private val userRemoteDataSource: UserRemoteDataSource,\n    private val userLocalDataSource: UserLocalDataSource\n) : UserRepository {\n    private val usersFlow = MutableStateFlow\n        (emptyMap<String, User>().toMutableMap())\n    override fun getUser(id: String): Flow<User> = \n        usersFlow.flatMapLatest {\n        val user = it[id]\n        if (user != null) {\n            flowOf(user)\n        } else {\n            userLocalDataSource.getUser(id)\n                .onEach { persistedUser ->\n                    saveUser(persistedUser)\n                }\n        }\n    }\n    override fun refreshUser(id: String): Flow<User> = \n        userRemoteDataSource.getUser(id)\n        .onEach {\n            saveUser(it)\n            userLocalDataSource.insertUser(it)\n        }\n    private fun saveUser(user: User) {\n        val map = usersFlow.value\n        map[user.id] = user\n        usersFlow.value = map\n    }\n}\n```", "```kt\n    buildscript {\n         …\n        dependencies {\n            classpath gradlePlugins.android\n            classpath gradlePlugins.kotlin\n            classpath gradlePlugins.hilt\n        }\n    }\n    ```", "```kt\n    plugins {\n        id 'com.android.library'\n        id 'kotlin-android'\n        id 'kotlin-kapt'\n        id 'dagger.hilt.android.plugin'\n    }\n    ```", "```kt\n    android {\n        compileSdk defaultCompileSdkVersion\n        defaultConfig {\n            minSdk defaultMinSdkVersion\n            targetSdk defaultTargetSdkVersion\n            …\n        }\n        …\n        compileOptions {\n            sourceCompatibility javaCompileVersion\n            targetCompatibility javaCompileVersion\n        }\n        kotlinOptions {\n            jvmTarget = jvmTarget\n        }\n    }\n    ```", "```kt\n    dependencies {\n        implementation(project(path: \":domain\"))\n        implementation coroutines.coroutinesAndroid\n        implementation di.hiltAndroid\n        kapt di.hiltCompiler\n        testImplementation test.junit\n        testImplementation test.coroutines\n        testImplementation test.mockito\n    }\n    ```", "```kt\n    interface RemoteUserDataSource {\n        fun getUsers(): Flow<List<User>>\n        fun getUser(id: Long): Flow<User>\n    }\n    ```", "```kt\n    interface RemotePostDataSource {\n        fun getPosts(): Flow<List<Post>>\n        fun getPost(id: Long): Flow<Post>\n    }\n    ```", "```kt\n    interface LocalUserDataSource {\n        fun getUsers(): Flow<List<User>>\n        suspend fun addUsers(users: List<User>)\n    }\n    ```", "```kt\n    interface LocalPostDataSource {\n        fun getPosts(): Flow<List<Post>>\n        suspend fun addPosts(posts: List<Post>)\n    }\n    ```", "```kt\n    interface LocalInteractionDataSource {\n        fun getInteraction(): Flow<Interaction>\n        suspend fun saveInteraction(interaction: Interaction)\n    }\n    ```", "```kt\n    class UserRepositoryImpl @Inject constructor(\n        private val remoteUserDataSource: \n            RemoteUserDataSource,\n        private val localUserDataSource: \n            LocalUserDataSource\n    ) : UserRepository {\n        override fun getUsers(): Flow<List<User>> = \n            remoteUserDataSource.getUsers()\n            .onEach {\n                localUserDataSource.addUsers(it)\n            }\n        override fun getUser(id: Long): Flow<User> = remoteUserDataSource.getUser(id)\n            .onEach {\n                localUserDataSource.addUsers(listOf(it))\n            }\n    }\n    ```", "```kt\n    class PostRepositoryImpl @Inject constructor(\n        private val remotePostDataSource: \n            RemotePostDataSource,\n        private val localPostDataSource: \n            LocalPostDataSource\n    ) : PostRepository {\n        override fun getPosts(): Flow<List<Post>> = \n            remotePostDataSource.getPosts()\n            .onEach {\n                localPostDataSource.addPosts(it)\n            }\n        override fun getPost(id: Long): Flow<Post> = \n            remotePostDataSource.getPost(id)\n            .onEach {\n                localPostDataSource.addPosts(listOf(it))\n            }\n    }\n    ```", "```kt\n    class InteractionRepositoryImpl @Inject constructor(\n        private val interactionDataSource: \n            LocalInteractionDataSource\n    ) : InteractionRepository {\n        override fun getInteraction(): Flow<Interaction> = \n            interactionDataSource.getInteraction()\n        override fun saveInteraction(interaction: \n           Interaction): Flow<Interaction> = flow {\n            interactionDataSource.saveInteraction(interaction)\n            this.emit(Unit)\n        }.flatMapLatest {\n            getInteraction()\n        }\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    abstract class RepositoryModule {\n        @Binds\n        abstract fun bindPostRepository(postRepositoryImpl\n            : PostRepositoryImpl): PostRepository\n        @Binds\n        abstract fun bindUserRepository\n            (userRepositoryImpl: UserRepositoryImpl): \n                UserRepository\n        @Binds\n        abstract fun bindInteractionRepository\n            (interactionRepositoryImpl: \n                InteractionRepositoryImpl): \n                    InteractionRepository\n    }\n    ```", "```kt\n    class UserRepositoryImplTest {\n        private val remoteUserDataSource = \n            mock<RemoteUserDataSource>()\n        private val localUserDataSource = \n            mock<LocalUserDataSource>()\n        private val repositoryImpl = UserRepositoryImpl\n            (remoteUserDataSource, localUserDataSource)\n\n    }\n    ```", "```kt\n    class UserRepositoryImplTest {\n         …\n        @ExperimentalCoroutinesApi\n        @Test\n        fun testGetUsers() = runBlockingTest {\n            val users = listOf(User(1, \"name\", \"username\", \n                \"email\"))\n            whenever(remoteUserDataSource.getUsers()).\n                thenReturn(flowOf(users))\n            val result = repositoryImpl.getUsers().first()\n            assertEquals(users, result)\n            verify(localUserDataSource).addUsers(users)\n        }\n        @ExperimentalCoroutinesApi\n        @Test\n        fun testGetUser() = runBlockingTest {\n            val id = 1L\n            val user = User(id, \"name\", \"username\", \n                \"email\"\n    )\n            whenever(remoteUserDataSource.getUser(id))\n                .thenReturn(flowOf(user))\n            val result = repositoryImpl.getUser(id).\n                first()\n            assertEquals(user, result)\n            verify(localUserDataSource).addUsers(listOf(user))\n        }\n    }\n    ```", "```kt\n    class PostRepositoryImplTest {\n        private val remotePostDataSource = \n            mock<RemotePostDataSource>()\n        private val localPostDataSource = \n            mock<LocalPostDataSource>()\n        private val repositoryImpl = PostRepositoryImpl\n            (remotePostDataSource, localPostDataSource)\n    }\n    ```", "```kt\n    class PostRepositoryImplTest {\n        …\n        @ExperimentalCoroutinesApi\n        @Test\n        fun testGetPosts() = runBlockingTest {\n            val posts = listOf(Post(1, 1, \"title\", \n                \"body\"))\n            whenever(remotePostDataSource.getPosts())\n                .thenReturn(flowOf(posts))\n            val result = repositoryImpl.getPosts().first()\n            Assert.assertEquals(posts, result)\n            verify(localPostDataSource).addPosts(posts)\n        }\n        @ExperimentalCoroutinesApi\n        @Test\n        fun testGetPost() = runBlockingTest {\n            val id = 1L\n            val post = Post(id, 1, \"title\", \"body\")\n            whenever(remotePostDataSource.getPost(id)).thenReturn(flowOf(post))\n            val result = \n                repositoryImpl.getPost(id).first()\n            Assert.assertEquals(post, result)\n            verify(localPostDataSource).addPosts(listOf(post))\n        }\n    }\n    ```", "```kt\n    class InteractionRepositoryImplTest {\n        private val localInteractionDataSource = \n            mock<LocalInteractionDataSource>()\n        private val repositoryImpl = \n            InteractionRepositoryImpl\n            (localInteractionDataSource)\n    }\n    ```", "```kt\n    class InteractionRepositoryImplTest {\n        …\n        @ExperimentalCoroutinesApi\n        @Test\n        fun testGetInteraction() = runBlockingTest {\n            val interaction = Interaction(10)\n            whenever(localInteractionDataSource.\n                getInteraction()).\n                    thenReturn(flowOf(interaction))\n            val result = repositoryImpl.getInteraction()\n                .first()\n            assertEquals(interaction, result)\n        }\n        @ExperimentalCoroutinesApi\n        @Test\n        fun testSaveInteraction() = runBlockingTest {\n            val interaction = Interaction(10)\n            whenever(localInteractionDataSource.\n                getInteraction()).thenReturn\n                    (flowOf(interaction))\n            val result = repositoryImpl.saveInteraction\n                (interaction).first()\n            veriy(localInteractionDataSource).\n                 saveInteraction(interaction)\n            assertEquals(interaction, result)\n        }\n    }\n    ```"]