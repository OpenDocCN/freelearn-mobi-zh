- en: Working with Photo Filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focus on creating photos for a restaurant and how to use
    the camera and camera roll. We give the user the ability to take a picture and
    apply a filter to that picture. In the next chapter, we tie the last chapter and
    this chapter all together by completing the work on the review form and enabling
    users to save their reviews. We will also learn how to save photos as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use the camera roll to get pictures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the camera to take pictures and bring them into our app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to apply filters to our pictures and get them ready to save to the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Based on our design, we know that we are going to need to apply filters to a
    photo. Instead of just creating an array of filters, we are going to use a plist
    to load in a set of filters that we want. You can find the `FilterData.plist`
    file inside this chapter's `asset` folder. Drag and drop this file into the `Model`
    folder that is inside the `Review` folder. Make sure that `Copy` items if needed
    is checked and then hit Finish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the plist and see what it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d412f909-485a-41ba-9252-b5de33d3cf94.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This list only has 10 of over 170 filters and effects that you can use. If
    you would like to see a full list of filters, you can find the list at [http://tinyurl.com/coreimage-ios](http://tinyurl.com/coreimage-ios).
    Feel free to add, remove, or update any filters. Now that we have seen what our
    plist looks like, we need to create a model that represents this data. We also
    need to create a `Manager` class to manage our items. Let''s create the model
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Model` folder in the `Review` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Swift File. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `FilterItem` and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to define our struct; therefore, add the following under the
    `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `filter` property will be the class passed to apply the filter; and the
    `name` property will be used as a display.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our `FilterManager` file next:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Photo Filter` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top, and then Swift File. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `FilterManager` and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to define our class definition; therefore, add the following
    under the `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This file uses our `DataManager` base class, which converts our plist data into
    an array of dictionary objects. Once that is complete, we create `FilterItems`
    from that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a file that takes a `FilterItem` and apply a filter
    to an image. Since we are going to do this in numerous places, it is best to have
    all of this code in one place. Therefore, we are going to create a file that handles
    all of this processing for us. Let''s create our `ImageFiltering` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Photo Filter` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Swift File. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `ImageFiltering`, and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your file to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down each section so that we can understand what we are doing
    with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`CoreImage` give us access to the image processing we need for filtering.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating this protocol allows us to have other classes conform to it, therefore
    giving us access to the method and allowing us to use it wherever we want.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This protocol is used when a filter is selected, and when we need the selected
    filter, is passed from one View or View Controller to another. The extension has
    the `apply(filter:originalImage:)` method in it. In this method, we are creating
    an extension and adding all of the code that we are going to use for applying
    filters to images.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our filter scroller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a user selects a photo to use, we present the user with a screen, which
    contains that image. In the following image, we have a scroller, also known as
    a `UIScrollView`, which allows us to create content that scrolls either horizontally
    or vertically. The `UIScrollView` displays an image (thumbnail) with the filter
    applied to it as well as the name of the filter. This image and name represent
    our filters visually to our users.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user taps on the image, the user sees the selected filter change the
    primary image. Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b3ece40-d88f-47b7-a6f2-86b6954ab1c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now going to create the elements inside the `UIScrollView`. Since we
    have created a lot inside storyboard, let''s create the `PhotoItem` entirely in
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Review` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Swift File. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `PhotoItem` and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your file to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add your variables inside of the class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are creating a delegate, which is used to let any class know when something
    happens. We use this delegate when someone taps on the object itself, which allows
    us to pass the `FilterItem` data to a parent class.
  prefs: []
  type: TYPE_NORMAL
- en: You have used this pattern already plenty of times. Table Views and Collection
    Views both have delegates to which you conform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add our `init` methods. Add the following after your variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Whenever you create a `UIView`, you are required to add this method. If you
    do not, it gives you an error, and then you have to add it.
  prefs: []
  type: TYPE_NORMAL
- en: This is a custom `init()` method, which allows us to pass data (here, the frame,
    image, and filter items) when the item gets created. We have a few errors because
    we have not created the methods we added to our `init()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s create an extension and add the following methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Our `setDefaults()` method is used to create a tap gesture. When the item gets
    tapped, we call the `thumbTapped` method. We also set the data and the background
    color of this method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `createThumbnail(image: item:)` is used to create an image and apply a
    filter to the image. Then, we are setting its frame and adding the image to the
    View.'
  prefs: []
  type: TYPE_NORMAL
- en: With our final method, `createLabel(item:)`, we are creating a label and passing
    in the name of the filter. Then, we are setting its frame and adding the label
    to the View.  We have two more methods we need to add to our extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following after the `createLabel(item:)` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `thumbTapped()` method is used to detect taps. When the user taps the item,
    it calls `filterSelected`.
  prefs: []
  type: TYPE_NORMAL
- en: The `filterSelected(item:)` method is the protocol we created earlier; and all
    we are doing is calling the `delegate` method, `filterSelected`. We see what happens
    next when the selected filter gets called.
  prefs: []
  type: TYPE_NORMAL
- en: Our `PhotoItem` is complete; now we need to work on our cell for our `Filter`
    collection view.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a filter cell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already created our cell that we need in the storyboard. However, before
    we create our View Controller, we need to create a filter cell.  This cell is
    used to display all of the available filters.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Photo Filter` folder in the `Controller` folder in the `Review`
    folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Cocoa Touch Class. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `FilterCell`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UICollectionViewCell`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next, and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your file to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Our cell is pretty basic: we are setting an image and giving it rounded corners.'
  prefs: []
  type: TYPE_NORMAL
- en: Open `PhotoFilter.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Outline view, select the Collection View cell. Then, in the Utilities
    panel, under the Identity inspector set the Custom Class to FilterCell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Attributes inspector, set the Identifier to filterCell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, connect your outlets for both `lblName` and `imgThumb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to make sure we can dismiss our modal when we click the Add Photo button.
    We already added the method we needed, but we just need to add this to the storyboard.
    CTL drag from Cancel to the Exit icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea622357-f11c-4373-825e-316424dc4eed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the popup, select `unwindReviewCancelWithSegue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee2ec13c-1429-426a-b9df-fbb1767d4fe8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Navigation controller, select the Navigation bar in the Outline view.
    Then, in the Attributes inspector, uncheck Translucent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/106f8ba6-5457-41b7-a336-22fdb3553868.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding this makes sure our navigation bar is a solid white color and not translucent.
  prefs: []
  type: TYPE_NORMAL
- en: We are done with setting up the cell and storyboard setup. Let's move to creating
    our View Controller.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our apply filter view controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we need to create our `PhotoFilterViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Photo Filter` folder in the `Controller` folder in the `Review`
    folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Cocoa Touch Class. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `PhotoFilterViewController`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UIViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the file opens, delete everything after the `viewDidLoad()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are setting up our variables and our `initialize()` method. You can
    ignore the error, as we fix this next by creating an extension after our class
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We are creating some basic functions that we need.  Our first function is our
    `initialize()` method, which calls three new methods.  Let's create those three
    methods next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following methods after the `initialize()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Our next method, `setupCollectionView()` method, is our basic setup for our
    collection view. We are doing something different with the `delegate` and `dataSource`.
    In the previous chapters, we set this up using the Outlet inspector.  This time,
    I am setting them up in code. Either can be done; there is no right or wrong way,
    but pick one way and stick with it in the entire app. I did both only for demonstration
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: The next method requests user access to their camera or the photo library. The
    `checkSource()`, checks whether you are running this in the simulator or phone.
    If you are running the simulator, you automatically get the photo library since
    there is no camera. If you are on a device, then the user has access to their
    camera. Now, we need to add two more helper methods. Let's add them first and
    then discuss after.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The first method `showApplyFilter()` is used to create the filter content inside
    of our collection view. The `filterItem(at:)` is used when the user selects a
    `filter` item.  We will pass the index position of the Collection View and create
    a filter item from it.  This item is used to display the currently selected filter
    in the larger image above our Collection View.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s work on getting items displayed in our Collection View. As we have done
    in the past, we have a few methods that are required for our Collection View to
    display cells. Add the following extension under our private extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We have done this before, but let's go over the methods again. Our `-collectionView:numberOfItemsInSection:` is
    responsible for the number of items in each section. For this collection view,
    it means the number of filter items we are going to display. Next, we have `-numberOfSectionsInCollectionView:`,
    which tells our Collection View how many sections we have; in our case, we only
    have one. Finally, we have the `-collectionView:cellForItemAtIndexPath:` this
    is the method that gets run for every cell we need to create. In this method,
    we are creating a filter cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our basic collection view set up, we need to make sure our
    Collection View is laid out correctly. Let''s add another extension in this file
    that is responsible for the layout of items for our Collection View. Add the following
    extension and method after the last extension we just added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This extension just sets up our cell size and spacing. Save the file. Next,
    let''s hook up our two `IBOutlets`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `PhotoFilter.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the View Controller in the Outline view, and then the Identity inspector
    in the Utilities panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Custom Class, in the Class drop-down menu, select or type `PhotoFilterViewController`
    and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the Connections inspector in the Utilities panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Outlets, click and drag from the empty circle of each of the components,
    `imgExample`, `collectionView`, and `onPhotoTapped:`, to the `Image View`, `CollectionView
    View`, `Camera Icon (inside Navigation Bar at the top)`, respectively, in the
    scene. Now, please open the `PhotoFilterViewController.swift` file again, and
    let's add some more code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our Collection View is set up, but we need to add some more code before we
    can get everything else working. Next, we need to add two more extensions that
    handle when a user uses the camera and photo library and the second one that is
    for our custom protocol we created earlier. We will need to use `AVFoundation`
    and `MobileCoreServices` in our app. `AVFoundation` is a framework that gives
    us access to the camera and `MobileCoreServices` gives us access to the filters.
    At the top of the file under import `UIKit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the first extension we will need for access to the camera and
    photo library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This extensions that we created for `UIImagePickerControllerDelegate` and `UINavigationControllerDelegate`
    have two methods we need to implement. We also have some custom helper methods
    that we use. The `-imagePickerControllerDidCancel: method()` is called when the
    user hit the Cancel button; therefore, we just dismiss the `Controller` and do
    nothing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-imagePickerController:didFinishPickingMediaWithInfo: method()` is used
    when we get the image from the `Picker` once it is dismissed. We set our thumbnail
    and image values here; then, we apply the `generate()` method in order to get
    them in a smaller size. Finally, we dismiss the `Controller` and then call `showApplyFilter()`
    to add our selected image to our filter view.'
  prefs: []
  type: TYPE_NORMAL
- en: The `showCameraUserInterface()` is used to show the camera interface along with
    the camera controls. As I mentioned earlier, the code first checks to see if you
    are running the simulator and, if so, it shows the photo library. If you are running
    on a device, you see the camera interface.  The `generate(image:ratio:)` method
    is what we use to take the images and crop them to the size we need and return
    an image in a smaller size. The photo library and camera images are quite large.
    Therefore, if we did not use this method, it would take a long time for UI to
    go through and do everything we need.
  prefs: []
  type: TYPE_NORMAL
- en: 'We just have one more extension to add, and that is for the custom protocols
    we created earlier. Add the following extension at the bottom of your `PhotoFilterViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `filterSelected(item:)` gets the selected filter item and applies the filter
    to our `imgExample`. We have an `if` statement that checks to see if the user
    selected `None` and, if so, shows the image without any filters. Before we can
    run it, we need to get the user's permission to use the camera or access the user's
    photo library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting permission
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple requires that, if we use the camera or access the camera roll, we must
    let the user know that we are doing so and why. If you fail to do this, your code
    regarding the camera will not work and your app will be rejected when you submit
    it. Let's take care of this now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Info.plist` file and add the following two keys by hovering over
    any key and hitting the plus icon for the first key and then repeating for the
    second key:'
  prefs: []
  type: TYPE_NORMAL
- en: '`- NSPhotoLibraryUsageDescription`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`- NSCameraUsageDescription`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each key''s value, enter anything you want as an alert that the user will
    see. In the following example, the value is set as `The app uses your camera to
    take pictures`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3c3c983-671b-4a3c-bb33-d738260d8c1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Please make sure if you are submitting this to the store that you put in the
    appropriate verbiage. This verbiage is seen by the user as well as Apple. Let's
    build and run the project by hitting the Play button (or using *cmd* + *R*). You
    should now be able to get a photo from the photo library or use the camera.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/adf72994-dd24-4815-bd02-9284256f4e34.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have a photo, the window dismisses and you can apply a filter and save
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4f95a4a-5447-4595-b21a-fd81402aa6d8.png)'
  prefs: []
  type: TYPE_IMG
- en: We are not actually saving the photo yet. We do this in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot of new things. You learned how to use the
    camera and how to integrate the camera roll when a camera is not available. We
    used a `UICollectionView` horizontally for the first time, to put in a row of
    images. This chapter had a lot of code and there may be some parts that were confusing.
    Review these parts and make sure that you fully understand them. There are numerous
    things in this chapter that you can reuse in many other apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be able to save photos and reviews to restaurants.
  prefs: []
  type: TYPE_NORMAL
