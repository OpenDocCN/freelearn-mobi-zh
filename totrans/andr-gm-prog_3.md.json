["```java\n<intent-filter>\n  <action android:name=\"android.intent.action.MAIN\" />\n  <category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n```", "```java\n<application\n  android:icon=\"@mipmap/ic_launcher\"\n  android:label=\"@string/app_name\"\n  android:theme=\"@style/AppTheme\" >\n  <activity\n    android:screenOrientation=\"sensorLandscape\"\n    android:name=\".YassActivity\"\n    android:label=\"@string/title_activity_yass\" >\n    <intent-filter>\n      <action android:name=\"android.intent.action.MAIN\" />\n      <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n  </activity>\n</application>\n```", "```java\npublic abstract class GameObject {\n  public abstract void startGame();\n  public abstract void onUpdate(long elapsedMillis, GameEngine gameEngine);\n  public abstract void onDraw();\n  public final Runnable mOnAddedRunnable = new Runnable() {\n    @Override\n    public void run() {\n      onAddedToGameUiThread();\n    }\n  };\n\n  public final Runnable mOnRemovedRunnable = new Runnable() {\n    @Override\n    public void run() {\n      onRemovedFromGameUiThread();\n    }\n  };\n\n  public void onRemovedFromGameUiThread(){\n  }\n\n  public void onAddedToGameUiThread(){\n  }\n}\n```", "```java\nprivate List<GameObject> mGameObjects = new ArrayList<GameObject>();\n\nprivate UpdateThread mUpdateThread;\nprivate DrawThread mDrawThread;\n```", "```java\npublic void startGame() {\n  // Stop a game if it is running\n  stopGame();\n\n  // Setup the game objects\n  int numGameObjects = mGameObjects.size();\n  for (int i=0; i<numGameObjects; i++) {\n    mGameObjects.get(i).startGame();\n  }\n\n  // Start the update thread\n  mUpdateThread = new UpdateThread(this);\n  mUpdateThread.start();\n\n  // Start the drawing thread\n  mDrawThread = new DrawThread(this);\n  mDrawThread.start();\n}\n```", "```java\npublic void stopGame() {\n  if (mUpdateThread != null) {\n    mUpdateThread.stopGame();\n  }\n  if (mDrawThread != null) {\n    mDrawThread.stopGame();\n  }\n}\n```", "```java\npublic void addGameObject(final GameObject gameObject) {\n  if (isRunning()){\n    mObjectsToAdd.add(gameObject);\n  }\n  else {\n    mGameObjects.add(gameObject);\n  }\n  mActivity.runOnUiThread(gameObject.mOnAddedRunnable);\n}\n\npublic void removeGameObject(final GameObject gameObject) {\n  mObjectsToRemove.add(gameObject);\n  mActivity.runOnUiThread(gameObject.mOnRemovedRunnable);\n}\n```", "```java\npublic void onUpdate(long elapsedMillis) {\n  int numGameObjects = mGameObjects.size();\n  for (int i=0; i<numGameObjects; i++) {\n    mGameObjects.get(i).onUpdate(elapsedMillis, this);\n  }\n  synchronized (mGameObjects) {\n    while (!mObjectsToRemove.isEmpty()) {\n      mGameObjects.remove(mObjectsToRemove.remove(0));\n    }\n    while (!mObjectsToAdd.isEmpty()) {\n       mGameObjects.add(mObjectsToAdd.remove(0));\n    }\n  }\n}\n```", "```java\nprivate Runnable mDrawRunnable = new Runnable() {\n  @Override\n  public void run() {\n    synchronized (mGameObjects) {\n      int numGameObjects = mGameObjects.size();\n      for (int i = 0; i < numGameObjects; i++) {\n        mGameObjects.get(i).onDraw();\n      }\n    }\n  }\n};\n\npublic void onDraw(Canvas canvas) {\n  mActivity.runOnUiThread(mDrawRunnable);\n}\n```", "```java\n@Override\npublic void run() {\n  long previousTimeMillis;\n  long currentTimeMillis;\n  long elapsedMillis;\n  previousTimeMillis = System.currentTimeMillis();\n\n  while (mGameIsRunning) {\n    currentTimeMillis = System.currentTimeMillis();\n    elapsedMillis = currentTimeMillis - previousTimeMillis;           \n    mGameEngine.onUpdate(elapsedMillis);\n    previousTimeMillis = currentTimeMillis;\n  }\n}\n```", "```java\nwhile (mGameIsRunning) {\n  currentTimeMillis = System.currentTimeMillis();\n  elapsedMillis = currentTimeMillis - previousTimeMillis;\n  if (mPauseGame) {\n    while (mPauseGame) {\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException e) {\n        // We stay on the loop\n      }\n    }\n    currentTimeMillis = System.currentTimeMillis();\n  }\n  mGameEngine.onUpdate(elapsedMillis);\n  previousTimeMillis = currentTimeMillis;\n}\n```", "```java\nwhile (mGameIsRunning) {\n  currentTimeMillis = System.currentTimeMillis();\n  elapsedMillis = currentTimeMillis - previousTimeMillis;\n  if (mPauseGame) {\n    while (mPauseGame) {\n      try {\n        synchronized (mLock) {\n          mLock.wait();\n        }\n      } catch (InterruptedException e) {\n        // We stay on the loop\n      }\n    }\n    currentTimeMillis = System.currentTimeMillis();\n  }\n  mGameEngine.onUpdate(elapsedMillis);\n  previousTimeMillis = currentTimeMillis;\n}\n```", "```java\npublic void resumeGame() {\n  if (mPauseGame == true) {\n    mPauseGame = false;\n    synchronized (mLock) {\n      mLock.notify();\n    }\n  }\n}\n```", "```java\npublic void start() {\n  mGameIsRunning = true;\n  mPauseGame = false;\n  super.start();\n}\n\npublic void stopGame() {\n  mGameIsRunning = false;\n  resumeGame();\n}\n```", "```java\nprivate static int EXPECTED_FPS = 30;\nprivate static final long TIME_BETWEEN_DRAWS = 1000 / EXPECTED_FPS;\n\npublic void start() {\n  stopGame();\n  mTimer = new Timer();\n  mTimer.schedule(new TimerTask() {\n    @Override\n    public void run() {\n      mGameEngine.onDraw();\n    }\n  }, 0, TIME_BETWEEN_DRAWS);\n}\n```", "```java\npublic void stopGame() {\n  if (mTimer != null) {\n    mTimer.cancel();\n    mTimer.purge();\n  }\n}\n\npublic void pauseGame() {\n  stopGame();\n}\n\npublic void resumeGame() {\n  start();\n}\n```", "```java\n<LinearLayout \n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:orientation=\"vertical\"\n  android:padding=\"@dimen/activity_horizontal_margin\"\n  android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n  tools:context=\"com.example.yass.counter.PlaceholderFragment\">\n\n  <TextView\n    android:id=\"@+id/txt_score\"\n   android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/hello_world\" />\n\n  <Button\n    android:id=\"@+id/btn_start_stop\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/start\" />\n\n  <Button\n    android:id=\"@+id/btn_play_pause\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/pause\" />\n</LinearLayout>\n```", "```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n  super.onViewCreated(view, savedInstanceState);\n  mGameEngine = new GameEngine(getActivity());\n  mGameEngine.addGameObject(\n    new ScoreGameObject(view, R.id.txt_score));\n  view.findViewById(R.id.btn_start_stop)\n    .setOnClickListener(this);\n  view.findViewById(R.id.btn_play_pause)\n    .setOnClickListener(this);\n}\n```", "```java\n@Override\npublic void onClick(View v) {\n  if (v.getId() == R.id.btn_play_pause) {\n    playOrPause();\n  }\n  if (v.getId() == R.id.btn_start_stop) {\n    startOrStop();\n  }\n}\n```", "```java\nprivate void playOrPause() {\n  Button button = (Button)\n  getView().findViewById(R.id.btn_play_pause);\n  if (mGameEngine.isPaused()) {\n    mGameEngine.resumeGame();\n    button.setText(R.string.pause);\n  }\n  else {\n    mGameEngine.pauseGame();\n    button.setText(R.string.resume);\n  }\n}\n```", "```java\npublic boolean isPaused() {\n  return mUpdateThread != null && mUpdateThread.isGamePaused();\n}\n```", "```java\nprivate void startOrStop() {\n  Button button = (Button)\n    getView().findViewById(R.id.btn_start_stop);\n  Button playPauseButton = (Button)\n    getView().findViewById(R.id.btn_play_pause);\n  if (mGameEngine.isRunning()) {\n    mGameEngine.stopGame();\n    button.setText(R.string.start);\n    playPauseButton.setEnabled(false);\n  }\n  else {\n    mGameEngine.startGame();\n    button.setText(R.string.stop);\n    playPauseButton.setEnabled(true);\n    playPauseButton.setText(R.string.pause);\n  }\n}\n```", "```java\npublic boolean isRunning() {\n  return mUpdateThread != null && mUpdateThread.isGameRunning();\n}\n```", "```java\npublic class ScoreGameObject extends GameObject {\n\n  private final TextView mText;\n  private long mTotalMilis;\n\n  public ScoreGameObject(View view, int viewResId) {\n    mText = (TextView) view.findViewById(viewResId);\n  }\n\n  @Override\n  public void onUpdate(long elapsedMillis, GameEngine gameEngine)\n  {\n    mTotalMilis += elapsedMillis;\n  }\n\n  @Override\n  public void startGame() {\n    mTotalMilis = 0;\n  }\n\n  @Override\n  public void onDraw() {\n    mText.setText(String.valueOf(mTotalMilis));\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout \n  android:layout_width=\"match_parent\" \n  android:layout_height=\"match_parent\">\n\n  <TextView\n    android:layout_gravity=\"center_horizontal|top\"\n    style=\"@android:style/TextAppearance.DeviceDefault.Large\"\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:text=\"@string/game_title\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\" />\n\n  <Button\n    android:id=\"@+id/btn_start\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_gravity=\"center\"\n    android:text=\"@string/start\" />\n\n</FrameLayout>\n```", "```java\npublic void startGame() {\n  getFragmentManager()\n    .beginTransaction()\n    .replace(R.id.container, new GameFragment(), TAG_FRAGMENT)\n    .addToBackStack(null)\n    .commit();\n}\n```", "```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n  super.onViewCreated(view, savedInstanceState);\n  mGameEngine = new GameEngine(getActivity());\n  mGameEngine.addGameObject(\n    new ScoreGameObject(view, R.id.txt_score));\n  view.findViewById(R.id.btn_play_pause)\n    .setOnClickListener(this);\n  mGameEngine.startGame();\n}\n```", "```java\n@Override\npublic void onClick(View v) {\n  if (v.getId() == R.id.btn_play_pause) {\n    pauseGameAndShowPauseDialog();\n  }\n}\n```", "```java\nprivate void pauseGameAndShowPauseDialog() {\n  mGameEngine.pauseGame();\n  new AlertDialog.Builder(getActivity())\n  .setTitle(R.string.pause_dialog_title)\n  .setMessage(R.string.pause_dialog_message)\n  .setPositiveButton(R.string.resume, \n  new DialogInterface.OnClickListener() {\n    @Override\n    public void onClick(DialogInterface dialog, int which) {\n      dialog.dismiss();\n      mGameEngine.resumeGame();\n    }\n  })\n  .setNegativeButton(R.string.stop, \n    new DialogInterface.OnClickListener() {\n    @Override\n    public void onClick(DialogInterface dialog, int which) {\n      dialog.dismiss();\n      mGameEngine.stopGame();\n      ((MainActivity)getActivity()).navigateBack();\n    }\n  })\n  .create()\n  .show();\n}\n```", "```java\npublic void navigateBack() {\n  super.onBackPressed();\n}\n```", "```java\nnew AlertDialog.Builder(getActivity())\n  [...]\n  .setOnCancelListener(new DialogInterface.OnCancelListener() {\n    @Override\n    public void onCancel(DialogInterface dialog) {\n      mGameEngine.resumeGame();\n    }\n  })\n  .create()\n  show();\n```", "```java\npublic class YassBaseFragment extends Fragment {\n  public boolean onBackPressed() {\n    return false;\n  }\n}\n```", "```java\n@Override\npublic void onBackPressed() {\n  final YassFragment fragment = (YassFragment)\n    getFragmentManager().findFragmentByTag(TAG_FRAGMENT);\n  if (!fragment.onBackPressed()) { \n    super.onBackPressed();\n  }\n}\n```", "```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.activity_yass);\n  if (savedInstanceState == null) {\n    getFragmentManager().beginTransaction()\n      .add(R.id.container, new MainMenuFragment(), TAG_FRAGMENT)\n      .commit();\n  }\n}\n```", "```java\n@Override\npublic boolean onBackPressed() {\n  if (mGameEngine.isRunning()) {\n    pauseGameAndShowPauseDialog();\n    return true;\n  }\n  return false;\n}\n```", "```java\n@Override\npublic void onPause() {\n  super.onPause();\n  if (mGameEngine.isRunning()){\n    pauseGameAndShowPauseDialog();\n  }\n}\n\n@Override\npublic void onDestroy() {\n  super.onDestroy();\n  mGameEngine.stopGame();\n}\n```", "```java\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n  super.onWindowFocusChanged(hasFocus);\n  if (hasFocus) {\n    View decorView = getWindow().getDecorView();\n    decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n      | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n      | View.SYSTEM_UI_FLAG_FULLSCREEN\n      | View.SYSTEM_UI_FLAG_LOW_PROFILE);\n  }\n}\n```", "```java\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n  super.onWindowFocusChanged(hasFocus);\n  if (hasFocus) {\n    View decorView = getWindow().getDecorView();\n    decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n      | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n      | View.SYSTEM_UI_FLAG_FULLSCREEN\n      | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n      | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n      | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n  }\n}\n```", "```java\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n  super.onWindowFocusChanged(hasFocus);\n  if (hasFocus) {\n    View decorView = getWindow().getDecorView();\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n      decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_LOW_PROFILE);\n    }\n    else {\n      decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n    }\n  }\n}\n```", "```java\npublic void onUpdate(long elapsedMillis) {    \n  for (GameObject gameObject : mGameObjects) {\n    gameObject.onUpdate(elapsedMillis, this);\n  }\n}\n```", "```java\npublic void onUpdate(long elapsedMillis) {\n  int numGameObjects = mGameObjects.size();\n  for (int i=0; i<numGameObjects; i++) {\n    mGameObjects.get(i).onUpdate(elapsedMillis, this);\n  }\n}\n```", "```java\nprivate List<GameObject> mGameObjects = new ArrayList<GameObject>();\n```", "```java\npublic class InputController {\n\n  public double mHorizontalFactor;\n  public double mVerticalFactor;\n\n  public boolean mIsFiring;\n\n  public void onStart() {\n  }\n\n  public void onStop() {\n  }\n\n  public void onPause() {\n  }\n\n  public void onResume() {\n  }\n}\n```", "```java\npublic InputController mInputController;\n\npublic void setInputController(InputController controller) {\n  mInputController = controller;\n}\n```", "```java\nmGameEngine = new GameEngine(getActivity());\nmGameEngine.addGameObject(new ScoreGameObject(view, R.id.txt_score));\nview.findViewById(R.id.btn_play_pause).setOnClickListener(this);\nmGameEngine.setInputController(new InputController());\nmGameEngine.addGameObject(new Player(getView()));\nmGameEngine.startGame();\n```", "```java\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  InputController inputController = gameEngine.inputController;\n  mPositionX += mSpeedFactor*inputController.mHorizontalFactor*elapsedMillis;\n  if (mPositionX < 0) {\n    mPositionX = 0;\n  }\n  if (mPositionX > mMaxX) {\n    mPositionX = mMaxX;\n  }\n  mPositionY += mSpeedFactor*inputController.mVerticalFactor*elapsedMillis ;\n  if (mPositionY < 0) {\n    mPositionY = 0;\n  }\n  if (mPositionY > mMaxY) {\n    mPositionY = mMaxY;\n  }\n}\n\n@Override\npublic void onDraw() {\n  mTextView.setText(\"[\"+(int) (mPositionX)+\",\"+(int) (mPositionY)+\"]\");\n}\n```", "```java\npublic Player(final View view) {\n  // We read the size of the view\n  double pixelFactor = view.getHeight() / 400d;\n  mSpeedFactor = pixelFactor * 100d / 1000d;\n  mMaxX = view.getWidth() - view.getPaddingRight() - view.getPaddingRight();\n  mMaxY = view.getHeight() - view.getPaddingTop() - view.getPaddingBottom();\n\n  mTextView = (TextView) view.findViewById(R.id.txt_score);\n}\n```", "```java\n@Override\npublic void startGame() {\n  mPositionX = mMaxX / 2;\n  mPositionY = mMaxY / 2;\n}\n```", "```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n  super.onViewCreated(view, savedInstanceState);\n  view.findViewById(R.id.btn_play_pause).setOnClickListener(this);\n  final ViewTreeObserver obs = view.getViewTreeObserver();\n  obs.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n      @Override\n      public void onGlobalLayout() {\n        if(Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n          obs.removeGlobalOnLayoutListener(this);\n        }\n        else {\n          obs.removeOnGlobalLayoutListener(this);\n        }\n        mGameEngine = new GameEngine(getActivity());\n        mGameEngine.setInputController(new BasicInputController(getView()));\n        mGameEngine.addGameObject(new Player(getView()));\n        mGameEngine.startGame();\n      }\n  });\n}\n```", "```java\npublic Player(final View view) {\n\n  [...]\n\n  // We create an image view and add it to the view\n  mShip = new ImageView(view.getContext());\n  Drawable shipDrawable = view.getContext().getResources()\n    .getDrawable(R.drawable.ship);\n  mShip.setLayoutParams(new ViewGroup.LayoutParams(\n    (int) (shipDrawable.getIntrinsicWidth() * mPixelFactor),\n    (int) (shipDrawable.getIntrinsicHeight() * mPixelFactor)));\n  mShip.setImageDrawable(shipDrawable);\n\n  mMaxX -= (shipDrawable.getIntrinsicWidth()*mPixelFactor);\n  mMaxY -= (shipDrawable.getIntrinsicHeight()*mPixelFactor);\n\n  ((FrameLayout) view).addView(mShip);\n}\n```", "```java\n<FrameLayout \n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:orientation=\"vertical\"\n  android:paddingTop=\"@dimen/activity_vertical_margin\"\n  android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n  android:paddingRight=\"@dimen/activity_horizontal_margin\"\n  tools:context=\"com.plattysoft.yass.counter.GameFragment\">\n\n  <TextView\n    android:layout_gravity=\"top|left\"\n    android:id=\"@+id/txt_score\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/hello_world\" />\n\n  <Button\n    android:layout_gravity=\"top|right\"\n    android:id=\"@+id/btn_play_pause\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/pause\" />\n</FrameLayout>\n```", "```java\n@Override\npublic void onDraw() {\n  mTextView.setText(\"[\"+(int) (mPositionX)+\",\"+(int) (mPositionY)+\"]\");\n  mShip.setTranslationX((int) mPositionX);\n  mShip.setTranslationY((int) mPositionY);\n}\n```", "```java\nList<Bullet> mBullets = new ArrayList<Bullet>();\n\nprivate void initBulletPool() {\n  for (int i=0; i<INITIAL_BULLET_POOL_AMOUNT; i++) {\n    mBullets.add(new Bullet(mPixelFactor));\n  }\n}\n\nprivate Bullet getBullet() {\n  if (mBullets.isEmpty()) {\n    return null;\n  }\n  return mBullets.remove(0);\n}\n\nprivate void releaseBullet(Bullet b) {\n  mBullets.add(b);\n}\n```", "```java\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  updatePosition(elapsedMillis, gameEngine.mInputController);\n  checkFiring(elapsedMillis, gameEngine);\n}\n\nprivate void checkFiring(long elapsedMillis, GameEngine gameEngine) {\n  if (gameEngine.mInputController.mIsFiring\n      && mTimeSinceLastFire > TIME_BETWEEN_BULLETS) {\n    Bullet b = getBullet();\n    if (b == null) {\n      return;\n    }\n    b.init(mPositionX + mShip.getWidth()/2, mPositionY);\n    gameEngine.addGameObject(b);\n    mTimeSinceLastFire = 0;\n  }\n  else {\n    mTimeSinceLastFire += elapsedMillis;\n  }\n}\n```", "```java\npublic Bullet(View view, double pixelFactor) {\n  Context c = view.getContext();\n\n  mSpeedFactor = pixelFactor * -300d / 1000d;\n\n  mImageView = new ImageView(c);\n  Drawable bulletDrawable = c.getResources().getDrawable(R.drawable.bullet);\n\n  mImageHeight = bulletDrawable.getIntrinsicHeight() * pixelFactor;\n  mImageWidth = bulletDrawable.getIntrinsicWidth() * pixelFactor;\n\n  mImageView.setLayoutParams(new ViewGroup.LayoutParams(\n    (int) (mImageWidth),\n    (int) (mImageHeight)));\n  mImageView.setImageDrawable(bulletDrawable);\n\n  mImageView.setVisibility(View.GONE);\n  ((FrameLayout) view).addView(mImageView);\n}\n```", "```java\npublic void init(Player parent, double positionX, double positionY) {\n  mPositionX = positionX - mImageWidth/2;\n  mPositionY = positionY - mImageHeight/2;\n  mParent = parent;\n}\n```", "```java\n@Override\npublic void onRemovedFromGameUiThread() {\n  mImageView.setVisibility(View.GONE);\n}\n\n@Override\npublic void onAddedToGameUiThread() {\n  mImageView.setVisibility(View.VISIBLE);\n}\n```", "```java\n@Override\npublic void onDraw() {\n  mImageView.setTranslationX((int) mPositionX);\n  mImageView.setTranslationY((int) mPositionY);\n}\n```", "```java\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  mPositionY += mSpeedFactor * elapsedMillis;\n  if (mPositionY < -mImageHeight) {\n    gameEngine.removeGameObject(this);\n    // And return it to the pool\n    mParent.releaseBullet(this);\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout \n  android:layout_gravity=\"bottom\"\n  android:padding=\"@dimen/keypad_size\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"wrap_content\">\n\n  <Button\n    android:id=\"@+id/keypad_up\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_toRightOf=\"@+id/keypad_left\"\n    android:layout_width=\"@dimen/keypad_size\"\n    android:layout_height=\"@dimen/keypad_size\" />\n\n  <Button\n    android:id=\"@+id/keypad_down\"\n    android:layout_below=\"@+id/keypad_left\"\n    android:layout_toRightOf=\"@+id/keypad_left\"\n    android:layout_width=\"@dimen/keypad_size\"\n    android:layout_height=\"@dimen/keypad_size\" />\n\n  <Button\n    android:id=\"@+id/keypad_left\"\n    android:layout_alignParentLeft=\"true\"\n    android:layout_below=\"@+id/keypad_up\"\n    android:layout_width=\"@dimen/keypad_size\"\n    android:layout_height=\"@dimen/keypad_size\" />\n\n  <Button\n    android:id=\"@+id/keypad_right\"\n    android:layout_toRightOf=\"@+id/keypad_up\"\n    android:layout_below=\"@+id/keypad_up\"\n    android:layout_width=\"@dimen/keypad_size\"\n    android:layout_height=\"@dimen/keypad_size\" />\n\n  <Button\n    android:id=\"@+id/keypad_fire\"\n    android:layout_alignParentRight=\"true\"\n    android:layout_alignTop=\"@+id/keypad_left\"\n    android:layout_width=\"@dimen/keypad_size\"\n    android:layout_height=\"@dimen/keypad_size\" />\n</RelativeLayout>\n```", "```java\n<FrameLayout \n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:paddingTop=\"@dimen/activity_vertical_margin\"\n  android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n  android:paddingRight=\"@dimen/activity_horizontal_margin\"\n  tools:context=\"com.plattysoft.yass.counter.GameFragment\">\n\n  <TextView\n    android:layout_gravity=\"top|left\"\n    android:id=\"@+id/txt_score\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/hello_world\" />\n\n  <Button\n    android:layout_gravity=\"top|right\"\n    android:id=\"@+id/btn_play_pause\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/pause\" />\n  <include layout=\"@layout/view_keypad\" />\n</FrameLayout>\n```", "```java\npublic BasicInputController(View view) {\n  view.findViewById(R.id.keypad_up).setOnTouchListener(this);\n  view.findViewById(R.id.keypad_down).setOnTouchListener(this);\n  view.findViewById(R.id.keypad_left).setOnTouchListener(this);\n  view.findViewById(R.id.keypad_right).setOnTouchListener(this);\n  view.findViewById(R.id.keypad_fire).setOnTouchListener(this);\n}\n```", "```java\n@Override\npublic boolean onTouch(View v, MotionEvent event) {\n  int action = event.getActionMasked();\n  int id = v.getId();\n  if (action == MotionEvent.ACTION_DOWN) {\n    // User started pressing a key\n    if (id == R.id.keypad_up) {\n      mVerticalFactor -= 1;\n    }\n    else if (id == R.id.keypad_down) {\n      mVerticalFactor += 1;\n    }\n    else if (id == R.id.keypad_left) {\n      mHorizontalFactor -= 1;\n    }\n    else if (id == R.id.keypad_right) {\n      mHorizontalFactor += 1;\n    }\n    else if (id == R.id.keypad_fire) {\n      mIsFiring = false;\n    }\n  }\n  else if (action == MotionEvent.ACTION_UP) {\n    if (id == R.id.keypad_up) {\n      mVerticalFactor += 1;\n    }\n    else if (id == R.id.keypad_down) {\n      mVerticalFactor -= 1;\n    }\n    else if (id == R.id.keypad_left) {\n      mHorizontalFactor += 1;\n    }\n    else if (id == R.id.keypad_right) {\n      mHorizontalFactor -= 1;\n    }\n    else if (id == R.id.keypad_fire) {\n      mIsFiring = false;\n    }\n  }\n  return false;\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout \n  android:orientation=\"horizontal\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\">\n\n  <View android:id=\"@+id/vjoystick_main\"\n    android:layout_height=\"match_parent\"\n    android:layout_width=\"match_parent\"\n    android:layout_weight=\"1\"\n  />\n  <View android:id=\"@+id/vjoystick_touch\"\n    android:layout_height=\"match_parent\"\n    android:layout_width=\"match_parent\"\n    android:layout_weight=\"1\"\n  />\n</LinearLayout>\n```", "```java\npublic VirtualJoystickInputController(View view) {\n  view.findViewById(R.id.vjoystick_main)\n    .setOnTouchListener(new VJoystickTouchListener());\n  view.findViewById(R.id.vjoystick_touch)\n    .setOnTouchListener(new VFireButtonTouchListener());\n\n  double pixelFactor = view.getHeight() / 400d;\n  mMaxDistance = 50*pixelFactor;\n}\n```", "```java\nprivate class VFireButtonTouchListener implements View.OnTouchListener {\n  @Override\n  public boolean onTouch(View v, MotionEvent event) {\n    int action = event.getActionMasked();\n    if (action == MotionEvent.ACTION_DOWN) {\n      mIsFiring = true;\n    }\n    else if (action == MotionEvent.ACTION_UP) {\n      mIsFiring = false;\n    }\n    return true;\n  }\n}\n```", "```java\nprivate class VJoystickTouchListener implements View.OnTouchListener {\n  @Override\n  public boolean onTouch(View v, MotionEvent event) {\n    int action = event.getActionMasked();\n    if (action == MotionEvent.ACTION_DOWN) {\n      mStartingPositionX = event.getX(0);\n      mStartingPositionY = event.getY(0);\n    }\n    else if (action == MotionEvent.ACTION_UP) {\n      mHorizontalFactor = 0;\n      mVerticalFactor = 0;\n    }\n    else if (action == MotionEvent.ACTION_MOVE) {\n      // Get the proportion to the max\n      mHorizontalFactor = (event.getX(0) - mStartingPositionX) / mMaxDistance;\n      if (mHorizontalFactor > 1) {\n        mHorizontalFactor = 1;\n      }\n      else if (mHorizontalFactor < -1) {\n        mHorizontalFactor = -1;\n      }\n      mVerticalFactor = (event.getY(0) - mStartingPositionY) / mMaxDistance;\n      if (mVerticalFactor > 1) {\n        mVerticalFactor = 1;\n      }\n      else if (mVerticalFactor < -1) {\n        mVerticalFactor = -1;\n      }\n    }\n    return true;\n  }\n}\n```", "```java\n<FrameLayout \n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:orientation=\"vertical\"\n  android:paddingTop=\"@dimen/activity_vertical_margin\"\n  android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n  android:paddingRight=\"@dimen/activity_horizontal_margin\"\n  tools:context=\"com.plattysoft.yass.counter.GameFragment\">\n\n  <TextView\n    android:layout_gravity=\"top|left\"\n    android:id=\"@+id/txt_score\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/hello_world\" />\n\n  <Button\n    android:layout_gravity=\"top|right\"\n    android:id=\"@+id/btn_play_pause\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/pause\" />\n\n  <include layout=\"@layout/view_vjoystick\" />\n\n</FrameLayout>\n```", "```java\nmGameEngine = new GameEngine(getActivity());\nmGameEngine.setInputController(new \n VirtualJoystickInputController(get View()));\nmGameEngine.addGameObject(new Player(getView()));\nmGameEngine.startGame();\n```", "```java\npublic interface GamepadControllerListener {\n\n  boolean dispatchGenericMotionEvent(MotionEvent event);\n\n  boolean dispatchKeyEvent(KeyEvent event);\n}\n```", "```java\npublic void setGamepadControllerListener(GamepadControllerListener listener) {\n  mGamepadControllerListener = listener;\n}\n```", "```java\n@Override\npublic boolean dispatchGenericMotionEvent(MotionEvent event) {\n  if (mGamepadControllerListener != null) {\n    if (mGamepadControllerListener.dispatchGenericMotionEvent(event)) {\n      return true;\n    }\n  }\n  return super.dispatchGenericMotionEvent(event);\n}\n\n@Override\npublic boolean dispatchKeyEvent (KeyEvent event) {\n  if (mGamepadControllerListener != null) {\n    if (mGamepadControllerListener.dispatchKeyEvent(event)) {\n      return true;\n    }\n  }\n  return super.dispatchKeyEvent(event);\n}\n```", "```java\npublic class GamepadInputController\n  extends InputController\n  implements GamepadControllerListener {\n\n  public GamepadInputController(YassActivity activity) {\n    mActivity = activity;\n  }\n\n  @Override\n  public void onStart() {\n    mActivity.setGamepadControllerListener(this);\n  }\n\n  @Override\n  public void onStop() {\n    mActivity.setGamepadControllerListener(null);\n  }\n\n  [...]\n}\n```", "```java\n@Override\npublic boolean dispatchGenericMotionEvent(MotionEvent event) {\n  int source = event.getSource();\n\n  if ((source & InputDevice.SOURCE_JOYSTICK) != InputDevice.SOURCE_JOYSTICK) {\n    return false\n  }\n  mHorizontalFactor = event.getAxisValue(MotionEvent.AXIS_X);\n  mVerticalFactor = event.getAxisValue(MotionEvent.AXIS_Y);\n\n  InputDevice device = event.getDevice();\n  MotionRange rangeX = device.getMotionRange(MotionEvent.AXIS_X, source);\n  if (Math.abs(mHorizontalFactor) <= rangeX.getFlat()) {\n    mHorizontalFactor = event.getAxisValue(MotionEvent.AXIS_HAT_X);\n    MotionRange rangeHatX = device.getMotionRange(MotionEvent.AXIS_HAT_X, source);\n    if (Math.abs(mHorizontalFactor) <= rangeHatX.getFlat()) {\n      mHorizontalFactor = 0;\n    }\n  }\n  MotionRange rangeY = device.getMotionRange(MotionEvent.AXIS_Y, source);\n  if (Math.abs(mVerticalFactor) <= rangeY.getFlat()) {\n    mVerticalFactor = event.getAxisValue(MotionEvent.AXIS_HAT_Y);\n    MotionRange rangeHatY = device.getMotionRange(MotionEvent.AXIS_HAT_Y, source);\n    if (Math.abs(mVerticalFactor) <= rangeHatY.getFlat()) {\n      mVerticalFactor = 0;\n    }\n  }\n  return true;\n}\n```", "```java\n@Override\npublic boolean dispatchKeyEvent(KeyEvent event) {\n  int action = event.getAction();\n  int keyCode = event.getKeyCode();\n  if (action == MotionEvent.ACTION_DOWN) {\n    if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {\n      mVerticalFactor -= 1;\n      return true;\n    }\n    else if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {\n      mVerticalFactor += 1;\n      return true;\n    }\n    else if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {\n      mHorizontalFactor -= 1;\n      return true;\n    }\n    else if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {\n      mHorizontalFactor += 1;\n      return true;\n    }\n    else if (keyCode == KeyEvent.KEYCODE_BUTTON_A) {\n      mIsFiring = true;\n      return true;\n    }\n  }\n  else if (action == MotionEvent.ACTION_UP) {\n    if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {\n      mVerticalFactor += 1;\n      return true;\n    }\n    else if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {\n      mVerticalFactor -= 1;\n      return true;\n    }\n    else if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {\n      mHorizontalFactor += 1;\n      return true;\n    }\n    else if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {\n      mHorizontalFactor -= 1;\n      return true;\n    }\n    else if (keyCode == KeyEvent.KEYCODE_BUTTON_A) {\n      mIsFiring = false;\n      return true;\n    }\n    else if (keyCode == KeyEvent.KEYCODE_BUTTON_B) {\n      mActivity.onBackPressed();\n      return true;\n    }\n  }\n  return false;\n}\n```", "```java\n@Override\npublic void onResume() {\n  super.onResume();\n  if (isGameControllerConnected() && shouldDisplayGamepadHelp()) {\n    displayGamepadHelp();\n    // Do not show the dialog again\n    PreferenceManager.getDefaultSharedPreferences(getActivity())\n      .edit()\n      .putBoolean(PREF_SHOULD_DISPLAY_GAMEPAD_HELP, false)\n      .commit();\n  }\n}\n\nprivate boolean shouldDisplayGamepadHelp() {\n  return PreferenceManager.getDefaultSharedPreferences(getActivity())\n    .getBoolean(PREF_SHOULD_DISPLAY_GAMEPAD_HELP, true);\n}\n```", "```java\npublic boolean isGameControllerConnected() {\n  int[] deviceIds = InputDevice.getDeviceIds();\n  for (int deviceId : deviceIds) {\n    InputDevice dev = InputDevice.getDevice(deviceId);\n    int sources = dev.getSources();\n    if (((sources & InputDevice.SOURCE_GAMEPAD) == InputDevice.SOURCE_GAMEPAD) ||\n        ((sources & InputDevice.SOURCE_JOYSTICK) == InputDevice.SOURCE_JOYSTICK)) {\n      return true;\n    }\n  }\n  return false;\n}\n```", "```java\n@Override\npublic void onInputDeviceRemoved(int deviceId) {\n  if (!mGameEngine.isRunning()) {\n    pauseGameAndShowPauseDialog();\n  }\n}\n```", "```java\nprivate void registerListeners() {\n  SensorManager sm = (SensorManager)\n    mActivity.getSystemService(Activity.SENSOR_SERVICE);\n  sm.registerListener(mAccelerometerChangesListener,\n    sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),\n    SensorManager.SENSOR_DELAY_FASTEST);\n  sm.registerListener(mMagneticChangesListener,\n    sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD),\n    SensorManager.SENSOR_DELAY_FASTEST);\n}\n\nprivate void unregisterListeners() {\n  SensorManager sm = (SensorManager)\n    mActivity.getSystemService(Activity.SENSOR_SERVICE);\n  sm.unregisterListener(mAccelerometerChangesListener);\n  sm.unregisterListener(mMagneticChangesListener);\n}\n\n@Override\npublic void onStart() {\n  registerListeners();\n}\n@Override\npublic void onStop() {\n  unregisterListeners();\n}\n@Override\npublic void onResume() {\n  registerListeners();\n}\n@Override\npublic void onPause() {\n  unregisterListeners();\n}\n```", "```java\n@Override\npublic void onSensorChanged(SensorEvent event) {\n  System.arraycopy(event.values, 0, mLastAccels, 0, 3);\n}\n```", "```java\nprivate double getHorizontalAxis() {\n  if (SensorManager.getRotationMatrix(mRotationMatrix, null, mLastAccels, mLastMagFields)) {\n    if (mRotation == Surface.ROTATION_0) {\n      SensorManager.remapCoordinateSystem(mRotationMatrix, SensorManager.AXIS_Y, SensorManager.AXIS_MINUS_X, mRotationMatrix);\n      SensorManager.getOrientation(mRotationMatrix, mOrientation);\n      return mOrientation[1] * DEGREES_PER_RADIAN;\n    }\n    else {\n      SensorManager.getOrientation(mRotationMatrix, mOrientation);\n      return -mOrientation[1] * DEGREES_PER_RADIAN;\n    }\n  }\n  else {\n    // Case for devices which do NOT have magnetic sensors\n    if (mRotation == Surface.ROTATION_0) {\n      return -mLastAccels[0]* 5;\n    }\n    else {\n      return -mLastAccels[1] * -5;\n    }\n  }\n}\n```", "```java\nmRotation = yassActivity.getWindowManager().getDefaultDisplay().getRotation();\n```", "```java\n@Override\npublic void onPreUpdate() {\n  mHorizontalFactor = getHorizontalAxis()/ MAX_ANGLE;\n  if (mHorizontalFactor > 1) {\n    mHorizontalFactor = 1;\n  }\n  else if (mHorizontalFactor < -1) {\n    mHorizontalFactor = -1;\n  }\n  mVerticalFactor = 0;\n}\n```", "```java\npublic void onPreUpdate() {\n  mIsFiring = mGamepadInputController.mIsFiring || mVJoystickInputController.mIsFiring;\n  mHorizontalFactor = mGamepadInputController.mHorizontalFactor + mVJoystickInputController.mHorizontalFactor;\n  mVerticalFactor = mGamepadInputController.mVerticalFactor + mVJoystickInputController.mVerticalFactor;\n}\n```", "```java\npublic interface GameView {\n  void draw();\n  void setGameObjects(List<GameObject> gameObjects);\n  // Generic methods from View\n  int getWidth();\n  int getHeight();\n  int getPaddingLeft();\n  int getPaddingRight();\n  int getPaddingTop();\n  int getPaddingBottom();\n  Context getContext();\n}\n```", "```java\npublic class StandardGameView extends View implements GameView {\n\n  private List<GameObject> mGameObjects;\n\n  public GameView(Context context) {\n    super(context);\n  }\n\n  public GameView(Context context, AttributeSet attrs) {\n    super(context, attrs);\n  }\n\n  public GameView(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n  }\n\n  @Override\n  protected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n    synchronized (mGameObjects) {\n      int numObjects = mGameObjects.size();\n      for (int i = 0; i < numObjects; i++) {\n        mGameObjects.get(i).onDraw(canvas);\n      }\n    }\n  }\n\n  @Override\n  public void draw() {\n    postInvalidate();\n  }\n\n  @Override\n  public void setGameObjects(List<GameObject> gameObjects) {\n    mGameObjects = gameObjects;\n  }\n}\n```", "```java\npublic class SurfaceGameView extends SurfaceView implements SurfaceHolder.Callback, GameView {\n\n  private List<GameObject> mGameObjects;\n  private boolean mReady;\n\n  public SurfaceGameView(Context context) {\n    super(context);\n    getHolder().addCallback(this);\n  }\n\n  public SurfaceGameView(Context context, AttributeSet attrs) {\n    super(context, attrs);\n    getHolder().addCallback(this);\n  }\n\n  public SurfaceGameView(Context c, AttributeSet attrs, int defStyleAttr) {\n    super(c, attrs, defStyleAttr);\n    getHolder().addCallback(this);\n  }\n\n  @Override\n  public void surfaceCreated(SurfaceHolder holder) {\n    mReady = true;\n  }\n\n  @Override\n  public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\n\n  }\n\n  @Override\n  public void surfaceDestroyed(SurfaceHolder holder) {\n    mReady = false;\n  }\n\n  @Override\n  public void setGameObjects(List<GameObject> gameObjects) {\n    mGameObjects = gameObjects;\n  }\n\n  @Override\n  public void draw() {\n    if (!mReady) {\n      return;\n    }\n    Canvas canvas = getHolder().lockCanvas();\n    if (canvas == null) {\n      return;\n    }\n    canvas.drawRGB(0,0,0);\n    synchronized (mGameObjects) {\n      int numObjects = mGameObjects.size();\n      for (int i = 0; i < numObjects; i++) {\n        mGameObjects.get(i).onDraw(canvas);\n      }\n    }\n    getHolder().unlockCanvasAndPost(canvas);\n  }\n}\n```", "```java\npublic GameEngine (Activity a, GameView gameView) {\n  mActivity = a;\n  mGameView = gameView;\n  mGameView.setGameObjects(mGameObjects);\n\n  mWidth = gameView.getWidth()\n    - gameView.getPaddingRight() - gameView.getPaddingRight();\n  mHeight = gameView.getHeight()\n    - gameView.getPaddingTop() - gameView.getPaddingBottom();\n\n  mPixelFactor = mHeight / 400d;\n}\n```", "```java\npublic void onDraw() {\n  mGameView.draw();\n}\n```", "```java\n<FrameLayout \n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:orientation=\"vertical\"\n  tools:context=\"com.example.yass.counter.GameFragment\">\n\n  <com.example.yass.engine.SurfaceGameView\n    android:id=\"@+id/gameView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\" />\n\n  <Button\n    android:layout_gravity=\"top|right\"\n    android:id=\"@+id/btn_play_pause\"\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:layout_marginRight=\"@dimen/activity_vertical_margin\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/pause\" />\n\n  <include layout=\"@layout/view_vjoystick\" />\n\n</FrameLayout>\n```", "```java\nGameView gameView = (GameView) getView().findViewById(R.id.gameView);\nmGameEngine = new GameEngine(getActivity(), gameView);\n```", "```java\n@Override\npublic void run() {\n  long elapsedMillis;\n  long currentTimeMillis;\n  long previousTimeMillis = System.currentTimeMillis();\n\n  while (mGameIsRunning) {\n    currentTimeMillis = System.currentTimeMillis();\n    elapsedMillis = currentTimeMillis - previousTimeMillis;\n    if (mPauseGame) {\n      while (mPauseGame) {\n        try {\n          synchronized (mLock) {\n            mLock.wait();\n          }\n        } catch (InterruptedException e) {\n          // We stay on the loop\n        }\n      }\n      currentTimeMillis = System.currentTimeMillis();\n    }\n    if (elapsedMillis < 20) { // This is 50 fps\n      try {\n        Thread.sleep(20-elapsedMillis);\n      } catch (InterruptedException e) {\n        // We just continue.\n      }\n    }\n    mGameEngine.onDraw();\n    previousTimeMillis = currentTimeMillis;\n  }\n}\n```", "```java\npublic abstract class Sprite extends GameObject {\n\n  protected double mPositionX;\n  protected double mPositionY;\n\n  protected final double mPixelFactor;\n\n  private final Bitmap mBitmap;\n  protected final int mImageHeight;\n  protected final int mImageWidth;\n\n  private final Matrix mMatrix = new Matrix();\n\n  protected Sprite (GameEngine gameEngine, int drawableRes) {\n    Resources r = gameEngine.getContext().getResources();\n    Drawable spriteDrawable = r.getDrawable(drawableRes);\n    mPixelFactor = gameEngine.mPixelFactor;\n\n    mImageHeight = (int) (spriteDrawable.getIntrinsicHeight()*mPixelFactor);\n    mImageWidth = (int) (spriteDrawable.getIntrinsicWidth()*mPixelFactor);\n\n    mBitmap = ((BitmapDrawable) spriteDrawable).getBitmap();\n  }\n\n  @Override\n  public void onDraw(Canvas canvas) {\n    mMatrix.reset();\n    mMatrix.postScale((float) mPixelFactor, (float) mPixelFactor);\n    mMatrix.postTranslate((float) mPositionX, (float) mPositionY);\n    canvas.drawBitmap(mBitmap, mMatrix, null);\n  }\n}\n```", "```java\npublic Player(GameEngine gameEngine) {\n  super(gameEngine, R.drawable.ship);\n  mSpeedFactor = mPixelFactor * 100d / 1000d;\n\n  mMaxX = gameEngine.mWidth - mImageWidth;\n  mMaxY = gameEngine.mHeight - mImageHeight;\n\n  initBulletPool(gameEngine);\n}\n```", "```java\npublic Bullet(GameEngine gameEngine) {\n  super(gameEngine, R.drawable.bullet);\n  mSpeedFactor = gameEngine.mPixelFactor * -300d / 1000d;\n}\n\n```", "```java\npublic class FPSCounter extends GameObject {\n  private final double mPixelFactor;\n  private final float mTextWidth;\n  private final float mTextHeight;\n\n  private Paint mPaint;\n  private long mTotalMillis;\n  private int mDraws;\n  private float mFps;\n\n  private String mFpsText = \"\";\n\n  public FPSCounter(GameEngine gameEngine) {\n    mPaint = new Paint();\n    mPaint.setTextAlign(Paint.Align.CENTER);\n    mTextHeight = (float) (25*gameEngine.mPixelFactor);\n    mTextWidth = (float) (50*gameEngine.mPixelFactor);\n    mPaint.setTextSize(mTextHeight/2);\n  }\n\n  @Override\n  public void startGame() {\n    mTotalMillis = 0;\n  }\n\n  @Override\n  public void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n    mTotalMillis += elapsedMillis;\n    if (mTotalMillis > 1000) {\n      mFps = mDraws*1000 / mTotalMillis;\n      mFpsText = mFps+\" fps\";\n      mTotalMillis = 0;\n      mDraws = 0;\n    }\n  }\n\n  @Override\n  public void onDraw(Canvas canvas) {\n    mPaint.setColor(Color.BLACK);\n    canvas.drawRect(0,(int)(canvas.getHeight()-mTextHeight), mTextWidth, canvas.getHeight(), mPaint);\n    mPaint.setColor(Color.WHITE);\n    canvas.drawText(mFpsText, mTextWidth/2, (int) (canvas.getHeight()-mTextHeight/2), mPaint);\n    mDraws++;\n  }\n}\n```", "```java\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  mCurrentMillis += elapsedMillis;\n  long waveTimestamp = mEnemiesSpawned*TIME_BETWEEN_ENEMIES;\n  if (mCurrentMillis > waveTimestamp) {\n    // Spawn a new enemy\n    Asteroid a = mAsteroidPool.remove(0);\n    a.init(gameEngine);\n    gameEngine.addGameObject(a);\n    mEnemiesSpawned++;\n  }\n}\n\n```", "```java\npublic void init(GameEngine gameEngine) {\n  // They initialize in a [-30, 30] degrees angle\n  double angle = gameEngine.mRandom.nextDouble()*Math.PI/3d-Math.PI/6d;\n  mSpeedX = mSpeed * Math.sin(angle);\n  mSpeedY = mSpeed * Math.cos(angle);\n  // Asteroids initialize in the central 50% of the screen\n  mPositionX = gameEngine.mRandom.nextInt(gameEngine.mWidth/2)+gameEngine.mWidth/4;\n  // They initialize outside of the screen vertically\n  mPositionY = -mImageHeight;\n}\n```", "```java\npublic class Asteroid extends Sprite {\n\n  private final GameController mController;\n\n  private final double mSpeed;\n  private double mSpeedX;\n  private double mSpeedY;\n\n  public Asteroid(GameController gameController, GameEngine gameEngine) {\n    super(gameEngine.getContext(), R.drawable.a10000, gameEngine.mPixelFactor);\n    mSpeed = 200d*mPixelFactor/1000d;\n    mController = gameController;\n  }\n\n  @Override\n  public void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n    mPositionX += mSpeedX * elapsedMillis;\n    mPositionY += mSpeedY * elapsedMillis;\n    // Check of the sprite goes out of the screen\n    if (mPositionY > gameEngine.mHeight) {\n      // Return to the pool\n      gameEngine.removeGameObject(this);\n      mController.returnToPool(this);\n    }\n  }\n\n  public void init(GameEngine gameEngine) {\n    // We already saw that\n  }\n}\n```", "```java\n@Override\npublic void onDraw(Canvas canvas) {\n  mMatrix.reset();\n  mMatrix.postScale((float) mPixelFactor, (float) mPixelFactor);\n  mMatrix.postTranslate((float) mPositionX, (float) mPositionY);\n  mMatrix.postRotate((float) mRotation,\n    (float) (mPositionX + mImageWidth/2),\n    (float) (mPositionY + mImageHeight/2));\n  canvas.drawBitmap(mBitmap, mMatrix, null);\n}\n```", "```java\nmRotation = gameEngine.mRandom.nextInt(360);\n```", "```java\nmRotationSpeed = angle*(180d / Math.PI)/250d;\n```", "```java\nmRotation += mRotationSpeed * elapsedMillis;\nif (mRotation > 360) {\n  mRotation = 0;\n}\nelse if (mRotation < 0) {\n  mRotation = 360;\n}\n```", "```java\n@Override\npublic void onDraw(Canvas canvas) {\n  if (mPositionX > canvas.getWidth()\n      || mPositionY > canvas.getHeight()\n      || mPositionX < -mImageWidth\n      || mPositionY < -mImageHeight) {\n    return;\n  }\n  mMatrix.reset();\n  mMatrix.postScale((float) mPixelFactor, (float) mPixelFactor);\n  mMatrix.postRotate((float) mRotation,\n    (float) mImageWidth/2, (float) mImageHeight/2);\n  mMatrix.postTranslate((float) mPositionX, (float) mPositionY);\n  canvas.drawBitmap(mBitmap, mMatrix, null);\n}\n```", "```java\npublic ParallaxBackground(GameEngine gameEngine, int speed, int drawableResId) {\n  Drawable spriteDrawable = gameEngine.getContext().getResources()\n    .getDrawable(drawableResId);\n  mBitmap = ((BitmapDrawable) spriteDrawable).getBitmap();\n\n  mPixelFactor = gameEngine.mPixelFactor;\n  mSpeedY = speed*mPixelFactor/1000d;\n\n  mImageHeight = spriteDrawable.getIntrinsicHeight()*mPixelFactor;\n  mImageWidth = spriteDrawable.getIntrinsicWidth()*mPixelFactor;\n\n  mScreenHeight = gameEngine.mHeight;\n  mScreenWidth = gameEngine.mWidth;\n\n  mTargetWidth = Math.min(mImageWidth, mScreenWidth);\n}\n```", "```java\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  mPositionY += mSpeedY * elapsedMillis;\n}\n\n@Override\npublic void onDraw(Canvas canvas) {\n  if (mPositionY > 0) {\n    mMatrix.reset();\n    mMatrix.postScale((float) (mPixelFactor), (float) (mPixelFactor));\n    mMatrix.postTranslate(0, (float) (mPositionY - mImageHeight));\n    canvas.drawBitmap(mBitmap, mMatrix, null);\n  }\n  mMatrix.reset();\n  mMatrix.postScale((float) (mPixelFactor), (float) (mPixelFactor));\n  mMatrix.postTranslate(0, (float) mPositionY);\n  canvas.drawBitmap(mBitmap, mMatrix, null);\n\n  if (mPositionY > mScreenHeight) {\n    mPositionY -= mImageHeight;\n  }\n}\n```", "```java\nprivate void efficientDraw(Canvas canvas) {\n  if (mPositionY < 0) {\n    mSrcRect.set(0,\n      (int) (-mPositionY/mPixelFactor),\n      (int) (mTargetWidth/mPixelFactor),\n      (int) ((mScreenHeight - mPositionY)/mPixelFactor));\n    mDstRect.set(0,\n      0,\n      (int) mTargetWidth,\n      (int) mScreenHeight);\n    canvas.drawBitmap(mBitmap, mSrcRect, mDstRect, null);\n  }\n  else {\n    mSrcRect.set(0,\n      0,\n      (int) (mTargetWidth/mPixelFactor),\n      (int) ((mScreenHeight - mPositionY) / mPixelFactor));\n    mDstRect.set(0,\n      (int) mPositionY,\n      (int) mTargetWidth,\n      (int) mScreenHeight);\n    canvas.drawBitmap(mBitmap, mSrcRect, mDstRect, null);\n    // We need to draw the previous block\n    mSrcRect.set(0,\n      (int) ((mImageHeight - mPositionY) / mPixelFactor),\n      (int) (mTargetWidth/mPixelFactor),\n      (int) (mImageHeight/mPixelFactor));\n    mDstRect.set(0,\n      0,\n      (int) mTargetWidth,\n      (int) mPositionY);\n    canvas.drawBitmap(mBitmap, mSrcRect, mDstRect, null);\n  }\n\n  if (mPositionY > mScreenHeight) {\n    mPositionY -= mImageHeight;\n  }\n}\n```", "```java\nmGameEngine = new GameEngine(getActivity(), (GameView) getView().findViewById(R.id.gameView));\nmGameEngine.setInputController(\n  new CompositeInputController(getView(), getYassActivity()));\nmGameEngine.addGameObject(\n  new ParallaxBackground(mGameEngine, 20, R.drawable.seamless_space_0));\nmGameEngine.addGameObject(new GameController(mGameEngine));\nmGameEngine.addGameObject(new Player(mGameEngine));\nmGameEngine.startGame();\n```", "```java\nprivate List<List<GameObject>> mLayers = new ArrayList<List<GameObject>>();\n\npublic GameEngine (Activity a, GameView gameView, int numLayers) {\n  [...]\n  for (int i=0; i<numLayers; i++) {\n    mLayers.add(new ArrayList<GameObject>());\n  }\n}\n```", "```java\npublic void onUpdate(long elapsedMillis) {\n  mInputController.onPreUpdate();\n  int numObjects = mGameObjects.size();\n  for (int i=0; i<numObjects; i++) {\n    mGameObjects.get(i).onUpdate(elapsedMillis, this);\n  }\n  synchronized (mLayers) {\n    while (!mObjectsToRemove.isEmpty()) {\n      GameObject objectToRemove = mObjectsToRemove.remove(0);\n      mGameObjects.remove(objectToRemove);\n      mLayers.get(objectToRemove.mLayer).remove(objectToRemove);\n    }\n    while (!mObjectsToAdd.isEmpty()) {\n      GameObject gameObject = mObjectsToAdd.remove(0);\n      addToLayerNow(gameObject);\n    }\n  }\n}\n```", "```java\npublic void addGameObject(final GameObject gameObject, int layer) {\n  gameObject.mLayer = layer;\n  if (isRunning()){\n    mObjectsToAdd.add(gameObject);\n  }\n  else {\n    addToLayerNow(gameObject);\n  }\n  mActivity.runOnUiThread(gameObject.mOnAddedRunnable);\n}\n```", "```java\nprivate void addToLayerNow (GameObject object) {\n  int layer = object.mLayer;\n  while (mLayers.size() <= layer) {\n    mLayers.add(new ArrayList<GameObject>());\n  }\n  mLayers.get(layer).add(object);\n  mGameObjects.add(object);\n}\n```", "```java\nint numLayers = mLayers.size();\nfor (int i = 0; i < numLayers; i++) {\n  List<GameObject> currentLayer = mLayers.get(i);\n  int numObjects = currentLayer.size();\n  for (int j=0; j<numObjects; j++) {\n    currentLayer.get(j).onDraw(canvas);\n  }\n}\n```", "```java\npublic abstract class ScreenGameObject extends GameObject {\n\n  protected double mX;\n  protected double mY;\n\n  protected int mHeight;\n  protected int mWidth;\n\n  public Rect mBoundingRect = new Rect(-1, -1, -1, -1);\n\n  public boolean checkCollision(ScreenGameObject otherObject) {\n    return false;\n  }\n\n  public void onCollision(GameEngine gameEngine, ScreenGameObject sgo) {\n  }\n}\n```", "```java\nprivate List<ScreenGameObject> mCollisionableObjects;\n```", "```java\nprivate void checkCollisions() {\n  int numObjects = mCollisionableObjects.size();\n  for (int i = 0; i < numObjects; i++) {\n    ScreenGameObject objectA = mCollisionableObjects.get(i);\n    for (int j = i + 1; j < numObjects; j++) {\n      ScreenGameObject objectB = mCollisionableObjects.get(j);\n      if (objectA.checkCollision(objectB)) {\n        objectA.onCollision(gameEngine, objectB);\n        objectB.onCollision(gameEngine, objectA);\n      }\n    }\n  }\n}\n\n```", "```java\npublic void onCollision(GameEngine gameEngine, ScreenGameObject otherObject) {\n  if (otherObject instanceof Asteroid) {\n    // Remove both from the game (and return them to their pools)\n    removeObject(gameEngine);\n    Asteroid a = (Asteroid) otherObject;\n    a.removeObject(gameEngine);\n  }\n}\n```", "```java\npublic void onPostUpdate(GameEngine gameEngine) {\n  mBoundingRect.set(\n    (int) mX,\n    (int) mY,\n    (int) mX + mWidth,\n    (int) mY + mHeight);\n}\n```", "```java\n@Override\npublic boolean checkCollision(ScreenGameObject otherObject) {\n  return checkRectangularCollision(otherObject);\n}\n```", "```java\nprivate boolean checkRectangularCollision(ScreenGameObject other) {\n  return Rect.intersects(mBoundingRect, other.mBoundingRect);\n}\n```", "```java\n@Override\npublic void onDraw(Canvas canvas) {\n  if (mX > canvas.getWidth() || mY > canvas.getHeight()\n    || mX < -mWidth || mY < -mHeight) {\n    return;\n  }\n  mPaint.setColor(Color.YELLOW);\n  canvas.drawRect(mBoundingRect, mPaint);\n\n  mMatrix.reset();\n  [...]\n  canvas.drawBitmap(mBitmap, mMatrix, null);\n}\n```", "```java\nmRadius = Math.max(mHeight, mWidth)/2;\n```", "```java\nprivate boolean checkCircularCollision(ScreenGameObject other) {\n  double distanceX = (mX + mWidth /2) - (other.mX + other.mWidth /2);\n  double distanceY = (mY + mHeight /2) - (other.mY + other.mHeight /2);\n  double squareDistance = distanceX*distanceX + distanceY*distanceY;\n  double collisionDistance = (mRadius + other.mRadius);\n  return squareDistance <= collisionDistance*collisionDistance;\n}\n```", "```java\ncanvas.drawCircle(\n  (int) (mX + mWidth / 2), \n  (int) (mY + mHeight / 2), \n  (int) mRadius, \n  mPaint);\n```", "```java\npublic enum BodyType {\n  None,\n  Circular,\n  Rectangular\n}\n```", "```java\nif (object instanceof ScreenGameObject) {\n  ScreenGameObject sgo = (ScreenGameObject) object;\n  if (sgo.mBodyType != BodyType.None) {\n    mCollisionableObjects.add(sgo);\n  }\n}\n```", "```java\n@Override\npublic boolean checkCollision(ScreenGameObject otherObject) {\n  if (mBodyType == BodyType.Circular \n    && otherObject.mBodyType == BodyType.Circular) {\n    return checkCircularCollision(otherObject);\n  }\n  else if (mBodyType == BodyType.Rectangular \n    && otherObject.mBodyType == BodyType.Rectangular) {\n    return checkRectangularCollision(otherObject);\n  }\n  else {\n    return checkMixedCollision(otherObject);\n  }\n}\n```", "```java\nprivate boolean checkMixedCollision(ScreenGameObject other) {\n  ScreenGameObject circularSprite;\n  ScreenGameObject rectangularSprite;\n  if (mBodyType == BodyType.Rectangular) {\n    circularSprite = this;\n    rectangularSprite = other;\n  }\n  else {\n    circularSprite = other;\n    rectangularSprite = this;\n  }\n\n  double circleCenterX = circularSprite.mX + circularSprite.mWidth /2;\n  double positionXToCheck = circleCenterX;\n  if (circleCenterX < rectangularSprite.mX) {\n    positionXToCheck = rectangularSprite.mX;\n  }\n  else if (circleCenterX > rectangularSprite.mX + rectangularSprite.mWidth) {\n    positionXToCheck = rectangularSprite.mX + rectangularSprite.mWidth;\n  }\n  double distanceX = circleCenterX - positionXToCheck;\n\n  double circleCenterY = circularSprite.mY + circularSprite.mHeight /2;\n  double positionYToCheck = circleCenterY;\n  if (circleCenterY < rectangularSprite.mY) {\n    positionYToCheck = rectangularSprite.mY;\n  }\n  else if (circleCenterY > rectangularSprite.mY + rectangularSprite.mHeight) {\n    positionYToCheck = rectangularSprite.mY + rectangularSprite.mHeight;\n  }\n  double distanceY = circleCenterY - positionYToCheck;\n\n  double squareDistance = distanceX*distanceX + distanceY*distanceY;\n  if (squareDistance <= circularSprite.mRadius*circularSprite.mRadius) {\n    // They are overlapping\n    return true;\n  }\n  return false;\n}\n```", "```java\nmPaint.setColor(Color.YELLOW);\nif (mBodyType == BodyType.Circular) {\n  canvas.drawCircle(\n    (int) (mX + mWidth / 2), \n    (int) (mY + mHeight / 2), \n    (int) mRadius, \n    mPaint);\n}\nelse if (mBodyType == BodyType.Rectangular) {\n  canvas.drawRect(mBoundingRect, mPaint);\n}\n```", "```java\nmQuadTreeRoot.setArea(new Rect(0,0,mWidth, mHeight));\n```", "```java\nprivate void checkCollisions() {\n  mQuadTreeRoot.checkCollisions(this);\n}\n```", "```java\npublic void checkCollisions(GameEngine gameEngine) {\n  int numObjects = mGameObjects.size();\n  if (numObjects > MAX_OBJECTS_TO_CHECK && sQuadTreePool.size() >= 4) {\n    splitAndCheck(gameEngine);\n  }\n  else {\n    for (int i = 0; i < numObjects; i++) {\n      ScreenGameObject objectA = mGameObjects.get(i);\n      for (int j = i + 1; j < numObjects; j++) {\n        ScreenGameObject objectB = mGameObjects.get(j);\n        if (objectA.checkCollision(objectB)) {\n          objectA.onCollision(gameEngine, objectB);\n          objectB.onCollision(gameEngine, objectA);\n        }\n      }\n    }\n  }\n}\n```", "```java\nprivate void splitAndCheck(GameEngine gameEngine) {\n  for (int i=0 ; i<4; i++) {\n    mChildren[i] = sQuadTreePool.remove(0);\n  }\n  for (int i=0 ; i<4; i++) {\n    mChildren[i].setArea(getArea(i));\n    mChildren[i].checkObjects(mGameObjects);\n    mChildren[i].checkCollisions(gameEngine);\n    // Clear and return to the pool\n    mChildren[i].mGameObjects.clear();\n    sQuadTreePool.add(mChildren[i]);\n  }\n}\n```", "```java\nprivate Rect getArea(int area) {\n  int startX = mArea.left;\n  int startY = mArea.top;\n  int width = mArea.width();\n  int height = mArea.height();\n  switch (area) {\n    case 0:\n      mTmpRect.set(startX, startY, \n        startX + width / 2, startY + height / 2);\n      break;\n    case 1:\n      mTmpRect.set(startX + width / 2, startY, \n        startX + width, startY + height / 2);\n      break;\n    case 2:\n      mTmpRect.set(startX, startY + height / 2, \n        startX + width / 2, startY + height);\n      break;\n    case 3:\n      mTmpRect.set(startX + width / 2, startY + height / 2, \n        startX + width, startY + height);\n      break;\n  }\n  return mTmpRect;\n}\n```", "```java\npublic class Collision {\n  private static List<Collision> sCollisionPool = new ArrayList<Collision>();\n\n  public static Collision init(ScreenGameObject objectA, ScreenGameObject objectB) {\n    if (sCollisionPool.isEmpty()) {\n      return new Collision(objectA, objectB);\n    }\n    Collision c = sCollisionPool.remove(0);\n    c.mObjectA = objectA;\n    c.mObjectB = objectB;\n    return c;\n  }\n\n  public static void release(Collision c) {\n    c.mObjectA = null;\n    c.mObjectB = null;\n    sCollisionPool.add(c);\n  }\n\n  public ScreenGameObject mObjectA;\n  public ScreenGameObject mObjectB;\n\n  public Collision(ScreenGameObject objectA, ScreenGameObject objectB) {\n    mObjectA = objectA;\n    mObjectB = objectB;\n  }\n\n  public boolean equals (Collision c) {\n    return (mObjectA == c.mObjectA && mObjectB == c.mObjectB)\n      || (mObjectA == c.mObjectB && mObjectB == c.mObjectA);\n  }\n}\n```", "```java\nprivate List<Collision> mDetectedCollisions = new ArrayList<Collision>();\n\nprivate void checkCollisions() {\n  // Release the collisions from the previous step\n  while (!mDetectedCollisions.isEmpty()) {\n    Collision.release(mDetectedCollisions.remove(0));\n  }\n  mQuadTreeRoot.checkCollisions(this, mDetectedCollisions);\n}\n```", "```java\npublic void checkCollisions(GameEngine gameEngine, List<Collision> detectedCollisions) {\n  int numObjects = mGameObjects.size();\n  if (numObjects > MAX_OBJECTS_TO_CHECK && sQuadTreePool.size() >= 4) {\n    // Split this area in 4\n    splitAndCheck(gameEngine, detectedCollisions);\n  }\n  else {\n    for (int i = 0; i < numObjects; i++) {\n      ScreenGameObject objectA = mGameObjects.get(i);\n      for (int j = i + 1; j < numObjects; j++) {\n        ScreenGameObject objectB = mGameObjects.get(j);\n        if (objectA.checkCollision(objectB)) {\n          Collision c = Collision.init(objectA, objectB);\n          if (!hasBeenDetected(detectedCollisions, c)) {\n            detectedCollisions.add(c);\n            objectA.onCollision(gameEngine, objectB);\n            objectB.onCollision(gameEngine, objectA);\n          }\n        }\n      }\n    }\n  }\n}\n```", "```java\nfloat scaleFactor = (float) (mPixelFactor*mScale);\nmMatrix.reset();\nmMatrix.postScale(scaleFactor, scaleFactor);\nmMatrix.postTranslate((float) mX, (float) mY);\nmMatrix.postRotate((float) mRotation, \n  (float) (mX + mWidth*mScale / 2), \n  (float) (mY + mHeight*mScale / 2));\nmPaint.setAlpha(mAlpha);\ncanvas.drawBitmap(mBitmap, mMatrix, mPaint);\n```", "```java\npublic class Particle extends Sprite {\n\n  private long mTimeToLive;\n  private long mTotalMillis;\n\n  public double mSpeedX;\n  public double mSpeedY;\n\n  public double mRotationSpeed;\n\n  protected Particle(\n    ParticleSystem particleSystem, \n    GameEngine gameEngine, \n    int drawableRes) {\n    super(gameEngine, drawableRes, BodyType.None);\n    mParent = particleSystem;\n  }\n\n  @Override\n  public void removeFromGameEngine(GameEngine gameEngine) {\n    super.removeFromGameEngine(gameEngine);\n    mParent.returnToPool(this);\n  }\n\n  public void activate(\n    GameEngine gameEngine, \n    long timeToLive, \n    double x, \n    double y, \n    ArrayList<ParticleModifier> modifiers\n    int layer) {\n    mTimeToLive = timeToLive;\n    mX = x-mWidth/2;\n    mY = y-mHeight/2;\n    addToGameEngine(gameEngine, layer);\n    mModifiers = modifiers;\n    mTotalMillis = 0;\n  }\n\n  @Override\n  public void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n    mTotalMillis += elapsedMillis;\n    if (mTotalMillis > mTimeToLive) {\n      removeFromGameEngine(gameEngine);\n    }\n    else {\n      mX += mSpeedX*elapsedMillis;\n      mY += mSpeedY*elapsedMillis;\n      mRotation += mRotationSpeed*elapsedMillis/1000d;\n      for (int i=0; i<mModifiers.size(); i++) {\n        mModifiers.get(i).apply(this, mTotalMillis);\n      }\n    }\n  }\n}\n```", "```java\npublic ParticleSystem(\n    GameEngine gameEngine,\n    int maxParticles,\n    int drawableRedId,\n    long timeToLive) {\n  mRandom = new Random();\n\n  mModifiers = new ArrayList<ParticleModifier>();\n  mInitializers = new ArrayList<ParticleInitializer>();\n\n  mTimeToLive = timeToLive;\n  mPixelFactor = gameEngine.mPixelFactor;\n  for (int i=0; i<maxParticles; i++) {\n    mParticlePool.add(new Particle(this, gameEngine, drawableRedId));\n  }\n}\n```", "```java\nprivate void activateParticle(GameEngine gameEngine) {\n  Particle p = mParticlePool.remove(0);        \n  for (int i=0; i<mInitializers.size(); i++) {\n    mInitializers.get(i).initParticle(p, mRandom);\n  }\n  p.activate(gameEngine, mTimeToLive, mX, mY, mModifiers, mLayer);\n  mActivatedParticles++;\n}\n```", "```java\npublic interface ParticleInitializer {\n  void initParticle(Particle p, Random r);\n}\n```", "```java\npublic ParticleSystem setInitialRotationRange (int minAngle, int maxAngle) {\n  mInitializers.add(new RotationInitiazer(minAngle, maxAngle));\n  return this;\n}\n```", "```java\npublic class RotationInitiazer implements ParticleInitializer {\n\n  private int mMinAngle;\n  private int mMaxAngle;\n\n  public RotationInitiazer(int minAngle, int maxAngle) {\n    mMinAngle = minAngle;\n    mMaxAngle = maxAngle;\n  }\n\n  @Override\n  public void initParticle(Particle p, Random r) {\n    int value = r.nextInt(mMaxAngle-mMinAngle)+mMinAngle;\n    p.mRotation = value;\n  }\n}\n```", "```java\npublic class SpeedModuleAndRangeInitializer implements ParticleInitializer {\n\n  private double mSpeedMin;\n  private double mSpeedMax;\n  private int mMinAngle;\n  private int mMaxAngle;\n\n  public SpeedModuleAndRangeInitializer(\n      double speedMin, double speedMax, \n      int minAngle, int maxAngle) {\n    mSpeedMin = speedMin;\n    mSpeedMax = speedMax;\n    mMinAngle = minAngle;\n    mMaxAngle = maxAngle;\n  }\n\n  @Override\n  public void initParticle(Particle p, Random r) {\n    double speed = r.nextDouble()*(mSpeedMax-mSpeedMin) + mSpeedMin;\n    int angle;\n    if (mMaxAngle == mMinAngle) {\n      angle = mMinAngle;\n    }\n    else {\n      angle = r.nextInt(mMaxAngle - mMinAngle) + mMinAngle;\n    }\n    double angleInRads = angle*Math.PI/180d;\n    p.mSpeedX = speed * Math.cos(angleInRads)/1000d;\n    p.mSpeedY = speed * Math.sin(angleInRads)/1000d;\n  }\n}\n```", "```java\npublic interface ParticleModifier {\n  void apply(Particle particle, long milliseconds);\n}\n```", "```java\npublic ParticleSystem setFadeOut(long millisecondsBeforeEnd) {\n  mModifiers.add(\n    new AlphaModifier(255, 0, mTimeToLive-millisecondsBeforeEnd, mTimeToLive));\n  return this;\n}\n```", "```java\npublic ParticleSystem addModifier(ParticleModifier modifier) {\n  mModifiers.add(modifier);\n  return this;\n}\n```", "```java\npublic class AlphaModifier implements ParticleModifier {\n\n  private int mInitialValue;\n  private int mFinalValue;\n  private long mStartTime;\n  private long mEndTime;\n  private float mDuration;\n  private float mValueIncrement;\n\n  public AlphaModifier(int initialValue, int finalValue, long startMilis, long endMilis) {\n    mInitialValue = initialValue;\n    mFinalValue = finalValue;\n    mStartTime = startMilis;\n    mEndTime = endMilis;\n    mDuration = mEndTime - mStartTime;\n    mValueIncrement = mFinalValue-mInitialValue;\n  }\n\n  @Override\n  public void apply(Particle particle, long milliseconds) {\n    if (milliseconds < mStartTime) {\n      particle.mAlpha = mInitialValue;\n    }\n    else if (milliseconds > mEndTime) {\n      particle.mAlpha = mFinalValue;\n    }\n    else {\n      double percentageValue = (miliseconds- mStartTime)*1d/mDuration;\n      int newAlphaValue = (int) (mInitialValue + mValueIncrement*percentageValue);\n      particle.mAlpha = newAlphaValue;\n    }\n  }\n}\n```", "```java\nmGameEngine = new GameEngine(getActivity(), gameView, 4);\nmGameEngine.setInputController(\n  new CompositeInputController(getView(), getYassActivity()));\nnew ParallaxBackground(mGameEngine, 20, R.drawable.seamless_space_0)\n  .addToGameEngine(mGameEngine, 0);\nnew GameController(mGameEngine).addToGameEngine(mGameEngine, 2);\nnew Player(mGameEngine).addToGameEngine(mGameEngine, 3);\nnew FPSCounter(mGameEngine).addToGameEngine(mGameEngine, 2);\n```", "```java\npublic void addToGameEngine (GameEngine gameEngine, int layer) {\n  gameEngine.addGameObject(this, layer);\n}\n\npublic void removeFromGameEngine (GameEngine gameEngine) {\n  gameEngine.removeGameObject(this);\n}\n```", "```java\npublic void oneShot(GameEngine gameEngine, double x, double y,\n    int numParticles) {\n  mX = x;\n  mY = y;\n  mIsEmiting = false;\n  for (int i=0; !mParticlePool.isEmpty() && i<numParticles; i++) {\n    activateParticle(gameEngine);\n  }\n}\n```", "```java\npublic Asteroid(GameController gameController, GameEngine gameEngine) {\n  super(gameEngine, R.drawable.a10000, BodyType.Circular);\n  mSpeed = 200d*mPixelFactor/1000d;\n  mController = gameController;\n  mExplisionParticleSystem = new ParticleSystem(gameEngine, EXPLOSION_PARTICLES, R.drawable.particle_asteroid_1, 700)\n    .setSpeedRange(15, 40)\n    .setFadeOut(300)\n    .setInitialRotationRange(0, 360)\n    .setRotationSpeedRange(-180, 180);\n}\n\npublic void explode(GameEngine gameEngine) {\n  mExplisionParticleSystem.oneShot(gameEngine, mX + mWidth / 2, mY + mHeight / 2, EXPLOSION_PARTICLES);\n}\n```", "```java\n@Override\npublic void onCollision(GameEngine gameEngine, ScreenGameObject otherObject) {\n  if (otherObject instanceof Asteroid) {\n    removeFromGameEngine(gameEngine);\n    Asteroid a = (Asteroid) otherObject;\n    a.explode(gameEngine);\n    a.removeFromGameEngine(gameEngine);\n  }\n}\n```", "```java\nmExplisionParticleSystem1 = new ParticleSystem(gameEngine,\nEXPLOSION_PARTICLES, R.drawable.particle_ship_explosion_1, 600)\n  .setSpeedRange(30, 150)\n  .setInitialRotationRange(0,360)\n  .setFadeOut(200);\nmExplisionParticleSystem2 = new ParticleSystem(gameEngine,\nEXPLOSION_PARTICLES, R.drawable.particle_ship_explosion_2, 600)\n  .setSpeedRange(30, 150)\n  .setInitialRotationRange(0,360)\n  .setFadeOut(200);\n```", "```java\nmExplisionParticleSystem1.oneShot(gameEngine, mX + mWidth / 2, mY+mWidth/2, EXPLOSION_PARTICLES);\nmExplisionParticleSystem2.oneShot(gameEngine, mX+mWidth/2, mY+mWidth/2, EXPLOSION_PARTICLES);\n```", "```java\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  if (!mIsEmiting){\n    return;\n  }\n  mTotalMillis += elapsedMillis;\n  // We have to make sure that we have to keep emiting\n  while ( !mParticlePool.isEmpty() && // We have particles in the pool\n    mActivatedParticles < mParticlesPerMillisecond*mTotalMillis) {\n    // and we are under the number of particles that should be launched\n    // Activate a new particle\n    activateParticle(gameEngine);\n  }\n}\n```", "```java\npublic void emit (int particlesPerSecond) {\n  mActivatedParticles = 0;\n  mTotalMillis = 0;\n  mParticlesPerMillisecond = particlesPerSecond/1000d;\n  mIsEmiting = true;\n}\n```", "```java\npublic void stopEmiting() {\n  mIsEmiting = false;\n}\n```", "```java\nmTrailParticleSystem = new ParticleSystem(gameEngine, 50, R.drawable.particle_dust, 600)\n  .addModifier(new ScaleModifier(1, 2, 200, 600))\n  .setFadeOut(200);\n```", "```java\npublic void init(GameEngine gameEngine) {\n  […] // Standard initialization\n  mTrailParticleSystem.clearInitializers()\n    .setInitialRotationRange(0,360)\n    .setRotationSpeed(mRotationSpeed * 1000);      \n    .setSpeedByComponentsRange(\n      -mSpeedY * 100, mSpeedY * 100, \n      mSpeedX * 100, mSpeedX * 100);\n}\n```", "```java\nmTrailParticleSystem.setPosition(mX + mWidth / 2, mY + mHeight / 2);\n```", "```java\n@Override\npublic void addToGameEngine (GameEngine gameEngine, int layer) {\n  super.addToGameEngine(gameEngine, layer);\n  mTrailParticleSystem.addToGameEngine(gameEngine, mLayer-1);\n  mTrailParticleSystem.emit(15);\n}\n\n@Override\npublic void removeFromGameEngine(GameEngine gameEngine) {\n  super.removeFromGameEngine(gameEngine);\n  mTrailParticleSystem.stopEmiting();\n  mTrailParticleSystem.removeFromGameEngine(gameEngine);\n}\n```", "```java\n@Override\npublic void removeFromGameEngine(GameEngine gameEngine) {\n  super.removeFromGameEngine(gameEngine);\n  mEngineFireParticle.removeFromGameEngine(gameEngine);\n}\n\n@Override\npublic void addToGameEngine(GameEngine gameEngine, int layer) {\n  super.addToGameEngine(gameEngine, layer);\n  mEngineFireParticle.addToGameEngine(gameEngine, mLayer - 1);\n  mEngineFireParticle.emit(12);\n}\n```", "```java\nmEngineFireParticle.setPosition(mX+mWidth/2, mY+mHeight);\n```", "```java\nmEngineFireParticle = new ParticleSystem(gameEngine, 50, R.drawable.particle_smoke, 600)\n  .setInitialRotationRange(0, 360)\n  .setRotationSpeedRange(-30, 30)\n  .setSpeedModuleAndAngleRange(50, 80, 60, 120)\n  .setFadeOut(400);\n```", "```java\nprivate SoundManager mSoundManager;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  [...]\n  setVolumeControlStream(AudioManager.STREAM_MUSIC);\n  mSoundManager = new SoundManager(getApplicationContext());\n}\n\npublic SoundManager getSoundManager() {\n  return mSoundManager;\n}\n```", "```java\nsetVolumeControlStream(AudioManager.STREAM_MUSIC);\n```", "```java\npublic enum GameEvent {\n  AsteroidHit,\n  SpaceshipHit,\n  LaserFired\n}\n```", "```java\npublic void onGameEvent (GameEvent gameEvent) {\n  mSoundManager.playSoundForGameEvent(gameEvent);\n}\n```", "```java\nprivate void checkFiring(long elapsedMillis, GameEngine gameEngine) {\n  if (gameEngine.mInputController.mIsFiring\n    && mTimeSinceLastFire > TIME_BETWEEN_BULLETS) {\n    [...]\n gameEngine.onGameEvent(GameEvent.LaserFired);\n  }\n  else {\n    mTimeSinceLastFire += elapsedMillis;\n  }\n}\n\n@Override\npublic void onCollision(GameEngine gameEngine, ScreenGameObject otherObject) {\n  if (otherObject instanceof Asteroid) {\n    [...]\n gameEngine.onGameEvent(GameEvent.SpaceshipHit);\n  }\n}\n```", "```java\n@Override\npublic void onCollision(GameEngine gameEngine, ScreenGameObject otherObject) {\n  if (otherObject instanceof Asteroid) {\n    [...]\n gameEngine.onGameEvent(GameEvent.AsteroidHit);\n  }\n}\n```", "```java\npublic SoundManager(Context context) {\n  mContext = context;\n  loadSounds();\n}\n```", "```java\nprivate void createSoundPool() {\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n    mSoundPool = new SoundPool(MAX_STREAMS, AudioManager.STREAM_MUSIC, 0);\n  }\n  else {\n    AudioAttributes audioAttributes = new AudioAttributes.Builder()\n      .setUsage(AudioAttributes.USAGE_GAME)\n      .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\n      .build();\n    mSoundPool = new SoundPool.Builder()\n      .setAudioAttributes(audioAttributes)\n      .setMaxStreams(MAX_STREAMS)\n      .build();\n  }\n}\n```", "```java\nprivate HashMap<GameEvent, Integer> mSoundsMap;\n```", "```java\nprivate void loadEventSound(Context context, GameEvent event, String filename) {\n  try {\n    AssetFileDescriptor descriptor = context.getAssets().openFd(\"sfx/\" + filename);\n    int soundId = mSoundPool.load(descriptor, 1);\n    mSoundsMap.put(event, soundId);\n  } catch (IOException e) {\n    e.printStackTrace();\n  }\n}\n```", "```java\nprivate void loadSounds() {\n  createSoundPool();\n  mSoundsMap = new HashMap<GameEvent, Integer>();\n  loadEventSound(mContext, GameEvent.AsteroidHit, \"Asteroid_explosion_1.wav\");\n  loadEventSound(mContext, GameEvent.SpaceshipHit, \"Spaceship_explosion.wav\");\n  loadEventSound(mContext, GameEvent.LaserFired, \"Laser_shoot.wav\");\n}\n```", "```java\nprivate void unloadSounds() {\n  mSoundPool.release();\n  mSoundPool = null;\n  mSoundsMap.clear();\n}\n```", "```java\npublic void playSoundForGameEvent(GameEvent event) {\n  Integer soundId = mSoundsMap.get(event);\n  if (soundId != null) {\n    mSoundPool.play(soundId, 1.0f, 1.0f, 0, 0, 1.0f);\n  }\n}\n```", "```java\nprivate void loadMusic() {\n  try {\n    mBgPlayer = new MediaPlayer();\n    AssetFileDescriptor afd = mContext.getAssets()\n      .openFd(\"sfx/Riccardo_Colombo_-_11_-_Something_mental.mp3\");\n    mBgPlayer.setDataSource(\n      afd.getFileDescriptor(),\n      afd.getStartOffset(),\n      afd.getLength());\n    mBgPlayer.setLooping(true);\n    mBgPlayer.setVolume(DEFAULT_MUSIC_VOLUME, DEFAULT_MUSIC_VOLUME);\n    mBgPlayer.prepare();\n  }\n  catch (IOException e) {\n    e.printStackTrace();\n  }\n}\n\nprivate void unloadMusic() {\n  mBgPlayer.stop();\n  mBgPlayer.release();\n}\n\npublic void pauseBgMusic() {\n  mBgPlayer.pause();\n}\n\npublic void resumeBgMusic() {\n  mBgPlayer.start();\n}\n```", "```java\npublic SoundManager(Context context) {\n  mContext = context;\n  loadSounds();\n loadMusic();\n}\n```", "```java\n@Override\nprotected void onPause() {\n  super.onPause();\n  mSoundManager.pauseBgMusic();\n}\n\n@Override\nprotected void onResume() {\n  super.onResume();\n  mSoundManager.resumeBgMusic();\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout \n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  >\n\n  <TextView\n    style=\"@android:style/TextAppearance.DeviceDefault.Large\"\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:text=\"@string/game_title\"\n    android:layout_centerHorizontal=\"true\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\" />\n\n  <Button\n    android:id=\"@+id/btn_start\"\n    android:layout_centerInParent=\"true\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/start\" />\n\n  <Button\n    android:id=\"@+id/btn_sound\"\n    android:layout_margin=\"@dimen/activity_vertical_margin\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_alignParentRight=\"true\"\n    android:text=\"@string/sound_on\" />\n\n  <Button\n    android:id=\"@+id/btn_music\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignBottom=\"@+id/btn_sound\"\n    android:layout_toLeftOf=\"@+id/btn_sound\"\n    android:text=\"@string/music_on\" />\n</RelativeLayout>\n```", "```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n  super.onViewCreated(view, savedInstanceState);\n  view.findViewById(R.id.btn_start).setOnClickListener(this);\n  view.findViewById(R.id.btn_sound).setOnClickListener(this);\n  view.findViewById(R.id.btn_music).setOnClickListener(this);\n  updateSoundAndMusicButtons();\n}\n```", "```java\n@Override\npublic void onClick(View v) {\n  if (v.getId() == R.id.btn_start){\n    ((YassActivity) getActivity()).startGame();\n  }\n  else if (v.getId() == R.id.btn_music) {\n    SoundManager soundManager = getYassActivity().getSoundManager();\n    soundManager.toggleMusicStatus();\n    updateSoundAndMusicButtons();\n  }\n  else if (v.getId() == R.id.btn_sound) {\n    SoundManager soundManager = getYassActivity().getSoundManager();\n    soundManager.toggleSoundStatus();\n    updateSoundAndMusicButtons();\n  }\n}\n```", "```java\nprivate void updateSoundAndMusicButtons() {\n  SoundManager soundManager = getYassActivity().getSoundManager();\n  TextView btnMusic = (TextView) getView().findViewById(R.id.btn_music);\n  if (soundManager.getMusicStatus()) {\n    btnMusic.setText(R.string.music_on);\n  }\n  else {\n    btnMusic.setText(R.string.music_off);\n  }\n  TextView btnSounds= (TextView) getView().findViewById(R.id.btn_sound);\n  if (soundManager.getSoundStatus()) {\n    btnSounds.setText(R.string.sound_on);\n  }\n  else {\n    btnSounds.setText(R.string.sound_off);\n  }\n}\n```", "```java\nprivate boolean mSoundEnabled;\nprivate boolean mMusicEnabled;\n\npublic SoundManager(Context context) {\n  SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n  mSoundEnabled = prefs.getBoolean(SOUNDS_PREF_KEY, true);\n  mMusicEnabled = prefs.getBoolean(MUSIC_PREF_KEY, true);\n  mContext = context;\n  loadIfNeeded();\n}\n\nprivate void loadIfNeeded () {\n  if (mSoundEnabled) {\n    loadSounds();\n  }\n  if (mMusicEnabled) {\t\n    loadMusic();\n  }\n}\n\npublic boolean getSoundStatus() {\n  return mSoundEnabled;\n}\n\npublic boolean getMusicStatus() {\n  return mMusicEnabled;\n}\n```", "```java\npublic void toggleSoundStatus() {\n  mSoundEnabled = !mSoundEnabled;\n  if (mSoundEnabled) {\n    loadSounds();\n  }\n  else {\n    unloadSounds();\n  }\n  // Save it to preferences\n  PreferenceManager.getDefaultSharedPreferences(mContext).edit()\n    .putBoolean(SOUNDS_PREF_KEY, mSoundEnabled)\n    .commit();\n}\n```", "```java\npublic void toggleMusicStatus() {\n  mMusicEnabled = !mMusicEnabled;\n  if (mMusicEnabled) {\n    loadMusic();\n    resumeBgMusic();\n  }\n  else {\n    unloadMusic();\n  }\n  // Save it to preferences\n  PreferenceManager.getDefaultSharedPreferences(mContext).edit()\n    .putBoolean(MUSIC_PREF_KEY, mMusicEnabled)\n    .commit();\n}\n```", "```java\npublic void playSoundForGameEvent(GameEvent event) {\n  if (!mSoundEnabled) {\n    return;\n  }\n  Integer soundId = mSoundsMap.get(event);\n  if (soundId != null) {\n    mSoundPool.play(soundId, 1.0f, 1.0f, 0, 0, 1.0f);\n  }\n}\n\npublic void pauseBgMusic() {\n  if (mMusicEnabled) {\n    mBgPlayer.pause();\n  }\n}\n\npublic void resumeBgMusic() {\n  if (mMusicEnabled) {\n    mBgPlayer.start();\n  }\n}\n```", "```java\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n  <item name=\"android:soundEffectsEnabled\">false</item>\n</style>\n```", "```java\nprivate Typeface mCustomTypeface;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  [...]\n  mCustomTypeface = Typeface.createFromAsset(getAssets(), \"ttf/Adore64.ttf\");\n}\n```", "```java\npublic void applyTypeface (View view) {\n  if (view instanceof ViewGroup) {\n    // Apply recursively to all the children\n    ViewGroup viewGroup = (ViewGroup) view;\n    for (int i=0; i<viewGroup.getChildCount(); i++) {\n      applyTypeface(viewGroup.getChildAt(i));\n    }\n  }\n  else if (view instanceof TextView) {\n    TextView tv = (TextView) view;\n    tv.setTypeface(mCustomTypeface);\n  }\n}\n```", "```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n  super.onViewCreated(view, savedInstanceState);\n  getYassActivity().applyTypeface(view);\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout \n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\" >\n  <ImageView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:scaleType=\"centerCrop\"\n    android:src=\"img/seamless_space_0\"/>\n[…]\n</RelativeLayout>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector >\n  <item\n    android:drawable=\"@drawable/icon_button_bg_pressed\"\n    android:state_pressed=\"true\"/>\n  <item\n    android:drawable=\"@drawable/icon_button_bg_selected\"\n    android:state_focused=\"true\"/>\n  <item\n    android:drawable=\"@drawable/icon_button_bg_normal\"/>\n</selector>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector >\n  <item\n    android:color=\"@color/btn_pressed\"\n    android:state_pressed=\"true\"/>\n  <item\n    android:color=\"@color/btn_focused\"\n    android:state_selected=\"true\"/>\n  <item\n    android:color=\"@color/btn_normal\"/>\n</selector>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<resources>\n  <color name=\"btn_selected\">#39a29c</color>\n  <color name=\"btn_normal\">#ffffff</color>\n  <color name=\"btn_pressed\">#fdd33f</color>\n</resources>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape\n\n  android:shape=[\"rectangle\" | \"oval\" | \"line\" | \"ring\"] >\n  <corners\n    android:radius=\"integer\"\n    android:topLeftRadius=\"integer\"\n    android:topRightRadius=\"integer\"\n    android:bottomLeftRadius=\"integer\"\n    android:bottomRightRadius=\"integer\" />\n  <gradient\n    android:angle=\"integer\"\n    android:centerX=\"integer\"\n    android:centerY=\"integer\"\n    android:centerColor=\"integer\"\n    android:endColor=\"color\"\n    android:gradientRadius=\"integer\"\n    android:startColor=\"color\"\n    android:type=[\"linear\" | \"radial\" | \"sweep\"]\n    android:useLevel=[\"true\" | \"false\"] />\n  <padding\n    android:left=\"integer\"\n    android:top=\"integer\"\n    android:right=\"integer\"\n    android:bottom=\"integer\" />\n  <size\n    android:width=\"integer\"\n    android:height=\"integer\" />\n  <solid\n    android:color=\"color\" />\n  <stroke\n    android:width=\"integer\"\n    android:color=\"color\"\n    android:dashWidth=\"integer\"\n    android:dashGap=\"integer\" />\n</shape>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape \n  android:shape=\"oval\">\n  <solid\n    android:color=\"@color/btn_backgound\" />\n  <padding android:bottom=\"@dimen/round_button_padding\"\n    android:left=\"@dimen/round_button_padding\"\n    android:right=\"@dimen/round_button_padding\"\n    android:top=\"@dimen/round_button_padding\"/>\n</shape>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape \n  android:shape=\"rectangle\">\n  <solid\n    android:color=\"@color/btn_backgound\" />\n  <padding android:bottom=\"@dimen/square_button_padding\"\n    android:left=\"@dimen/square_button_padding\"\n    android:right=\"@dimen/square_button_padding\"\n    android:top=\"@dimen/square_button_padding\"/>\n  <stroke android:color=\"@color/btn_border\"\n    android:width=\"@dimen/square_button_border\" />\n</shape>\n```", "```java\n<dimen name=\"square_button_padding\">18dp</dimen>\n<dimen name=\"square_button_border\">6dp</dimen>\n<dimen name=\"round_button_padding\">6dp</dimen>\n<dimen name=\"btn_sound_size\">60dp</dimen>\n```", "```java\n<color name=\"text_color\">#FFFFFF</color>\n<color name=\"btn_border\">#AAAAAA</color>\n```", "```java\n<resources>\n  <style name=\"iconButton\" >\n    <item name=\"android:background\">@drawable/icon_button_bg</item>\n    <item name=\"android:layout_width\">@dimen/btn_round_size</item>\n    <item name=\"android:layout_height\">@dimen/btn_round_size</item>\n  </style>\n</resources>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout \n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  >\n\n  <ImageView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:scaleType=\"centerCrop\"\n    android:src=\"img/seamless_space_0\"/>\n\n  <TextView\n    android:textColor=\"@color/text_color\"\n    android:id=\"@+id/main_title\"\n    style=\"@android:style/TextAppearance.DeviceDefault.Large\"\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:text=\"@string/game_title\"\n    android:layout_centerHorizontal=\"true\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\" />\n\n  <TextView\n    android:textColor=\"@color/text_color\"\n    android:layout_below=\"@+id/main_title\"\n    style=\"@android:style/TextAppearance.DeviceDefault.Medium\"\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:text=\"@string/game_subtitle\"\n    android:layout_centerHorizontal=\"true\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\" />\n\n  <Button\n    android:id=\"@+id/btn_start\"\n    android:layout_centerInParent=\"true\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@drawable/button_square_bg\"\n    android:text=\"@string/start\" />\n\n  <ImageView\n    android:background=\"@drawable/button_round_bg\"\n    android:id=\"@+id/btn_sound\"\n    android:layout_margin=\"@dimen/activity_vertical_margin\"\n    android:layout_width=\"@dimen/btn_sound_size\"\n    android:layout_height=\"@dimen/btn_sound_size\"\n    android:src=\"img/sounds_on_no_bg\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_alignParentRight=\"true\"/>\n\n  <ImageView\n    android:background=\"@drawable/button_round_bg\"\n    android:id=\"@+id/btn_music\"\n    android:layout_width=\"@dimen/btn_sound_size\"\n    android:layout_height=\"@dimen/btn_sound_size\"\n    android:layout_alignBottom=\"@+id/btn_sound\"\n    android:src=\"img/music_on_no_bg\"\n    android:layout_toLeftOf=\"@+id/btn_sound\"/>\n</RelativeLayout>\n```", "```java\n<FrameLayout \n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:background=\"@color/background\"\n  tools:context=\"com.plattysoft.yass.counter.GameFragment\">\n\n  <RelativeLayout\n    android:layout_width=\"@dimen/game_menu_width\"\n    android:layout_height=\"match_parent\">\n    <!-- Lives and score go here -->\n  </RelativeLayout>\n\n  <FrameLayout\n    android:background=\"@color/game_view_frame\"\n    android:layout_weight=\"1\"\n    android:padding=\"4dp\"\n    android:layout_marginLeft=\"@dimen/game_menu_width\"\n    android:layout_marginRight=\"@dimen/game_menu_width\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <com.plattysoft.yass.engine.SurfaceGameView\n      android:id=\"@+id/gameView\"\n      android:layout_weight=\"1\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\" />\n  </FrameLayout>\n\n  <include layout=\"@layout/view_vjoystick\" />\n\n  <ImageView\n    style=\"@style/iconButton\"\n    android:layout_gravity=\"top|right\"\n    android:id=\"@+id/btn_play_pause\"\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:layout_marginRight=\"@dimen/activity_vertical_margin\"\n    android:src=\"img/pause\" />\n</FrameLayout>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape \n  android:shape=\"rectangle\">\n  <solid\n    android:color=\"@android:color/transparent\" />\n  <padding android:bottom=\"@dimen/game_frame_width\"\n    android:left=\"@dimen/game_frame_width\"\n    android:right=\"@dimen/game_frame_width\"\n    android:top=\"@dimen/game_frame_width\"/>\n  <stroke android:color=\"@color/game_view_frame\"\n    android:width=\"@dimen/game_frame_width\" />\n</shape>\n```", "```java\npublic void onGameEvent (GameEvent gameEvent) {\n  // We notify all the GameObjects\n  int numObjects = mGameObjects.size();\n  for (int i=0; i<numObjects; i++) {\n    mGameObjects.get(i).onGameEvent(gameEvent);\n  }\n  // Also the sound manager\n  mSoundManager.playSoundForGameEvent(gameEvent);\n}\n```", "```java\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  [...]\n  if (mY > gameEngine.mHeight) {\n    gameEngine.onGameEvent(GameEvent.AsteroidMissed);\n    removeFromGameEngine(gameEngine);\n  }\n}\n```", "```java\n<RelativeLayout\n  android:layout_width=\"@dimen/game_menu_width\"\n  android:layout_height=\"match_parent\">\n  <TextView\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:layout_marginLeft=\"@dimen/menu_margin\"\n    android:id=\"@+id/score_title\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentTop=\"true\"\n    android:textColor=\"@color/text_color\"\n    android:text=\"@string/score\"/>\n  <TextView\n    android:id=\"@+id/score_value\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_marginTop=\"@dimen/menu_margin\"\n    android:layout_below=\"@+id/score_title\"\n    android:layout_alignLeft=\"@+id/score_title\"\n    android:textColor=\"@color/text_color\"\n    android:text=\"000000\"/>\n</RelativeLayout>\n```", "```java\npublic class ScoreGameObject extends GameObject {\n\n  private final TextView mText;\n  private int mPoints;\n  private boolean mPointsHaveChanged;\n\n  private static final int POINTS_LOSS_PER_ASTEROID_MISSED = 1;\n  private static final int POINTS_GAINED_PER_ASTEROID_HIT = 50;\n\n  public ScoreGameObject(View view, int viewResId) {\n    mText = (TextView) view.findViewById(viewResId);\n  }\n\n  @Override\n  public void onUpdate(long elapsedMillis, GameEngine gameEngine) {}\n\n  @Override\n  public void startGame() {\n    mPoints = 0;\n    mText.post(mUpdateTextRunnable);\n  }\n\n  @Override\n  public void onGameEvent(GameEvent gameEvent) {\n    if (gameEvent == GameEvent.AsteroidHit) {\n      mPoints += POINTS_GAINED_PER_ASTEROID_HIT;\n      mPointsHaveChanged = true;\n    }\n    else if (gameEvent == GameEvent.AsteroidMissed) {\n      if (mPoints > 0) {\n        mPoints -= POINTS_LOSS_PER_ASTEROID_MISSED;\n      }\n      mPointsHaveChanged = true;\n    }\n  }\n\n  private Runnable mUpdateTextRunnable = new Runnable() {\n    @Override\n    public void run() {\n      String text = String.format(\"%06d\", mPoints);\n      mText.setText(text);\n    }\n  };\n\n  @Override\n  public void onDraw(Canvas canvas) {\n    if (mPointsHaveChanged) {\n      mText.post(mUpdateTextRunnable);\n      mPointsHaveChanged = false;\n    }\n  }\n}\n```", "```java\nnew ScoreGameObject(getView(),R.id.score_value).addToGameEngine(mGameEngine, 0);\n```", "```java\npublic enum GameControllerState {\n  StoppingWave,\n  SpawningEnemies,\n  PlacingSpaceship,\n  Waiting,\n  GameOver;\n}\n```", "```java\n@Override\npublic void startGame(GameEngine gameEngine) {\n  mCurrentMillis = 0;\n  mEnemiesSpawned = 0;\n  mWaitingTime = 0;\n  for (int i=0; i<INITIAL_LIFES; i++) {\n    gameEngine.onGameEvent(GameEvent.LifeAdded);\n  }\n  mState = GameControllerState.PlacingSpaceship;\n}\n```", "```java\n@Override\npublic void onGameEvent(GameEvent gameEvent) {\n  if (gameEvent == GameEvent.SpaceshipHit) {\n    mState = GameControllerState.StoppingWave;\n    mWaitingTime = 0;\n  }\n  else if (gameEvent == GameEvent.GameOver) {\n    mState = GameControllerState.GameOver;\n  }\n  else if (gameEvent == GameEvent.LifeAdded) {\n    mNumLives++;\n  }\n}\n```", "```java\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  if (mState == GameControllerState.SpawningEnemies) {\n    mCurrentMillis += elapsedMillis;\n    long waveTimestamp = mEnemiesSpawned * TIME_BETWEEN_ENEMIES;\n    if (mCurrentMillis > waveTimestamp) {\n      // Spawn a new enemy\n      Asteroid a = mAsteroidPool.remove(0);\n      a.init(gameEngine);\n      a.addToGameEngine(gameEngine, mLayer);\n      mEnemiesSpawned++;\n      return;\n    }\n  }\n  else if (mState == GameControllerState.StoppingWave) {\n    mWaitingTime += elapsedMillis;\n    if (mWaitingTime > STOPPING_WAVE_WAITING_TIME) {\n      mState = GameControllerState.PlacingSpaceship;\n    }\n  }\n  else if (mState == GameControllerState.PlacingSpaceship) {\n    if (mNumLifes == 0) {\n      gameEngine.onGameEvent(GameEvent.GameOver);\n    }\n    else {\n      mNumLives--;\n      gameEngine.onGameEvent(GameEvent.LifeLost);\n      Player newLife = new Player(gameEngine);\n      newLife.addToGameEngine(gameEngine, 2);\n      newLife.startGame(gameEngine);\n      // We wait to start spawning more enemies\n      mState = GameControllerState.Waiting;\n      mWaitingTime = 0;\n    }\n  }\n  else if (mState == GameControllerState.Waiting) {\n    mWaitingTime += elapsedMillis;\n    if (mWaitingTime > WAITING_TIME) {\n      mState = GameControllerState.SpawningEnemies;\n    }\n  }\n}\n```", "```java\n<RelativeLayout>\n  [...]\n  <TextView\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:id=\"@+id/lives_title\"\n    android:layout_below=\"@+id/score_value\"\n    android:layout_alignLeft=\"@+id/score_value\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:textColor=\"@color/text_color\"\n    android:text=\"@string/lives\" />\n  <LinearLayout\n    android:orientation=\"horizontal\"\n    android:id=\"@+id/lives_value\"\n    android:layout_marginTop=\"@dimen/menu_margin\"\n    android:layout_below=\"@+id/lives_title\"\n    android:layout_alignLeft=\"@+id/lives_title\"\n    android:layout_width=\"@dimen/game_menu_width\"\n    android:layout_height=\"wrap_content\" />\n</RelativeLayout>\n```", "```java\npublic class LivesCounter extends GameObject {\n\n  private final LinearLayout mLayout;\n\n  public LivesCounter(View view, int viewResId) {\n    mLayout = (LinearLayout) view.findViewById(viewResId);\n  }\n\n  @Override\n  public void startGame(GameEngine gameEngine) {}\n\n  @Override\n  public void onUpdate(long elapsedMillis, GameEngine gameEngine) {}\n\n  @Override\n  public void onDraw(Canvas canvas) {}\n\n  @Override\n  public void onGameEvent(GameEvent gameEvent) {\n    if (gameEvent == GameEvent.LifeLost) {\n      mLayout.post(mRemoveLifeRunnable);\n    }\n    else if (gameEvent == GameEvent.LifeAdded) {\n      mLayout.post(mAddLifeRunnable);\n    }\n  }\n\n  private Runnable mRemoveLifeRunnable = new Runnable() {\n    @Override\n    public void run() {\n      // Remove one life from the layout\n      mLayout.removeViewAt(mLayout.getChildCount()-1);\n    }\n  };\n\n  private Runnable mAddLifeRunnable = new Runnable() {\n    @Override\n    public void run() {\n      // Remove one life from the layout\n      View spaceship = View.inflate(mLayout.getContext(), R.layout.view_spaceship, mLayout);\n    }\n  };\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ImageView \n  android:src=\"img/ship\"\n  android:scaleType=\"fitCenter\"\n  android:layout_width=\"@dimen/life_size\"\n  android:layout_height=\"@dimen/life_size\" />\n```", "```java\npublic class BaseCustomDialog implements OnTouchListener {\n\n  private boolean mIsShowing;\n\n  protected final YassActivity mParent;\n  private ViewGroup mRootLayout;\n  private View mRootView;\n\n  public BaseCustomDialog(YassActivity activity) {\n    mParent = activity;\n  }\n\n  protected void onViewClicked() {\n    // Ignore clicks on this view\n  }\n\n  protected void setContentView(int dialogResId) {\n    ViewGroup activityRoot = (ViewGroup) mParent.findViewById(android.R.id.content);\n    mRootView = LayoutInflater.from(mParent).inflate(dialogResId, activityRoot, false);\n    mParent.applyTypeface(mRootView);\n  }\n\n  public void show() {\n    if (mIsShowing) {\n      return;\n    }\n    mIsShowing = true;\n\n    ViewGroup activityRoot = (ViewGroup) mParent.findViewById(android.R.id.content);\n    mRootLayout = (ViewGroup) LayoutInflater.from(mParent).inflate(R.layout.my_overlay_dialog, activityRoot, false);\n    activityRoot.addView(mRootLayout);\n    mRootLayout.setOnTouchListener(this);\n    mRootLayout.addView(mRootView);\n  }\n\n  public void dismiss() {\n    if (!mIsShowing) {\n      return;\n    }\n    mIsShowing = false;\n    hideViews();\n  }\n\n  private void hideViews() {\n    mRootLayout.removeView(mRootView);\n    ViewGroup activityRoot = (ViewGroup) mParent.findViewById(android.R.id.content);\n    activityRoot.removeView(mRootLayout);\n  }\n\n  protected View findViewById(int id) {\n    return mRootView.findViewById(id);\n  }\n\n  @Override\n  public boolean onTouch(View v, MotionEvent event) {\n    // Ignoring touch events on the gray outside\n    return true;\n  }\n\n  public boolean isShowing() {\n    return mIsShowing;\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout \n  android:background=\"#aa000000\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"/>\n```", "```java\nBaseCustomDialog mCurrentDialog;\n\npublic void showDialog (BaseCustomDialog newDialog) {\n  showDialog(newDialog, false);\n}\n\npublic void showDialog (BaseCustomDialog newDialog, boolean dismissOtherDialog) {\n  if (mCurrentDialog != null && mCurrentDialog.isShowing()) {\n    if (dismissOtherDialog) {\n      mCurrentDialog.dismiss();\n    }\n    else {\n      return;\n    }\n  }\n  mCurrentDialog = newDialog;\n  mCurrentDialog.show();\n}\n\npublic boolean onBackPressed() {\n  if (mCurrentDialog != null && mCurrentDialog.isShowing()) {\n    mCurrentDialog.dismiss();\n    return true;\n  }\n  return false;\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout \n  android:layout_gravity=\"center\"\n  android:background=\"@drawable/diablog_bg\"\n  android:layout_width=\"@dimen/dialog_width\"\n  android:layout_height=\"@dimen/dialog_height\">\n\n  <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:textColor=\"@color/text_color\"\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:layout_centerHorizontal=\"true\"\n    style=\"@android:style/TextAppearance.Large\"\n    android:text=\"@string/exit_confirm\"/>\n\n  <LinearLayout\n    android:layout_alignParentBottom=\"true\"\n    android:layout_centerHorizontal=\"true\"\n    android:layout_marginBottom=\"@dimen/activity_vertical_margin\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\">\n    <ImageView\n      style=\"@style/iconButton\"\n      android:layout_marginRight=\"@dimen/btn_sound_size\"\n      android:id=\"@+id/btn_resume\"\n      android:src=\"img/resume\"/>\n\n    <ImageView\n      style=\"@style/iconButton\"\n      android:id=\"@+id/btn_exit\"\n      android:src=\"img/exit\"/>\n  </LinearLayout>\n</RelativeLayout>\n```", "```java\npublic class QuitDialog extends BaseCustomDialog implements View.OnClickListener {\n  private QuitDialogListener mListener;\n\n  public QuitDialog(YassActivity activity) {\n    super(activity);\n    setContentView(R.layout.dialog_quit);\n    findViewById(R.id.btn_exit).setOnClickListener(this);\n    findViewById(R.id.btn_resume).setOnClickListener(this);\n   }\n\n  public void setListener(QuitDialogListener listener) {\n    mListener = listener;\n  }\n\n  @Override\n  public void onClick(View v) {\n    if (v.getId() == R.id.btn_exit) {\n      dismiss();\n      mListener.exit();\n    }\n    else if (v.getId() == R.id.btn_resume) {\n      dismiss();\n    }\n  }\n\n  public interface QuitDialogListener {\n    void exit();\n  }\n}\n```", "```java\n@Override\npublic boolean onBackPressed() {\n  boolean consumed = super.onBackPressed();\n  if (!consumed){\n    QuitDialog quitDialog = new QuitDialog(getYassActivity());\n    quitDialog.setListener(this);\n    showDialog(quitDialog);\n  }\n  return true;\n}\n\n@Override\npublic void exit() {\n  getYassActivity().finish();\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout \n  android:layout_gravity=\"center\"\n  android:background=\"@drawable/diablog_bg\"\n  android:layout_width=\"@dimen/dialog_width\"\n  android:layout_height=\"@dimen/dialog_height\">\n\n  <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:textColor=\"@color/text_color\"\n    android:layout_marginTop=\"@dimen/activity_vertical_margin\"\n    android:layout_centerHorizontal=\"true\"\n    style=\"@android:style/TextAppearance.Large\"\n    android:text=\"@string/pause\"/>\n\n  <ImageView\n    style=\"@style/iconButton\"\n    android:id=\"@+id/btn_resume\"\n    android:layout_margin=\"@dimen/activity_vertical_margin\"\n    android:src=\"img/resume\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_alignParentLeft=\"true\"/>\n\n  <ImageView\n    style=\"@style/iconButton\"\n    android:id=\"@+id/btn_exit\"\n    android:layout_alignBottom=\"@+id/btn_resume\"\n    android:src=\"img/exit\"\n    android:layout_toRightOf=\"@+id/btn_resume\"/>\n\n  <ImageView\n    style=\"@style/iconButton\"\n    android:id=\"@+id/btn_sound\"\n    android:layout_margin=\"@dimen/activity_vertical_margin\"\n    android:src=\"img/sounds_on_no_bg\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_alignParentRight=\"true\"/>\n\n  <ImageView\n    style=\"@style/iconButton\"\n    android:id=\"@+id/btn_music\"\n    android:layout_alignBottom=\"@+id/btn_sound\"\n    android:src=\"img/music_on_no_bg\"\n    android:layout_toLeftOf=\"@+id/btn_sound\"/>\n\n</RelativeLayout>\n```", "```java\npublic class PauseDialog extends BaseCustomDialog implements View.OnClickListener {\n  private PauseDialogListener mListener;\n\n  public PauseDialog(YassActivity activity) {\n    super(activity);\n    setContentView(R.layout.dialog_pause);\n    findViewById(R.id.btn_music).setOnClickListener(this);\n    findViewById(R.id.btn_sound).setOnClickListener(this);\n    findViewById(R.id.btn_exit).setOnClickListener(this);\n    findViewById(R.id.btn_resume).setOnClickListener(this);\n    updateSoundAndMusicButtons();\n  }\n\n  public void setListener(PauseDialogListener listener) {\n    mListener = listener;\n  }\n\n  @Override\n  public void onClick(View v) {\n    if (v.getId() == R.id.btn_sound) {\n      mParent.getSoundManager().toggleSoundStatus();\n      updateSoundAndMusicButtons();\n    }\n    else if (v.getId() == R.id.btn_music) {\n      mParent.getSoundManager().toggleMusicStatus();\n      updateSoundAndMusicButtons();\n    }\n    else if (v.getId() == R.id.btn_exit) {\n      super.dismiss();\n      mListener.exitGame();\n    }\n    else if (v.getId() == R.id.btn_resume) {\n      dismiss();\n    }\n  }\n\n  @Override\n  public void dismiss() {\n    super.dismiss();\n    mListener.resumeGame();\n  }\n\n  public void updateSoundAndMusicButtons() {\n    [...]\n  }\n\n  public interface PauseDialogListener {\n    void exitGame();\n    void resumeGame();\n  }\n}\n```", "```java\n@Override\npublic boolean onBackPressed() {\n  if (mGameEngine.isRunning() && !mGameEngine.isPaused()){\n    pauseGameAndShowPauseDialog();\n    return true;\n  }\n  return super.onBackPressed();\n}\n\nprivate void pauseGameAndShowPauseDialog() {\n  if (mGameEngine.isPaused()) {\n    return;\n  }\n  mGameEngine.pauseGame();\n  PauseDialog dialog = new PauseDialog(getYassActivity());\n  dialog.setListener(this);\n  showDialog(dialog);\n}\n\npublic void resumeGame() {\n  mGameEngine.resumeGame();\n}\n\npublic void exitGame() {\n  mGameEngine.stopGame();\n  getYassActivity().navigateBack();\n}\n```", "```java\npublic interface GameOverDialogListener {\n  void exitGame();\n\n  void startNewGame();\n}\n```", "```java\n@Override\npublic void startNewGame() {\n  // Exit the current game\n  mGameEngine.stopGame();\n  // Start a new one\n  prepareAndStartGame();\n}\n\nprivate void prepareAndStartGame() {\n  GameView gameView = (GameView) getView().findViewById(R.id.gameView);\n  mGameEngine = new GameEngine(getActivity(), gameView, 4);\n  mGameEngine.setInputController(new CompositeInputController(getView(), getYassActivity()));\n  mGameEngine.setSoundManager(getYassActivity().getSoundManager());\n  new ParallaxBackground(mGameEngine, 20, R.drawable.seamless_space_0).addToGameEngine(mGameEngine, 0);\n  new GameController(mGameEngine, GameFragment.this).addToGameEngine(mGameEngine, 2);\n  new FPSCounter(mGameEngine).addToGameEngine(mGameEngine, 2);\n  new ScoreGameObject(getView(), R.id.score_value).addToGameEngine(mGameEngine, 0);\n  new LivesCounter(getView(), R.id.lives_value).addToGameEngine(mGameEngine, 0);\n  mGameEngine.startGame();\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    InputManager inputManager = (InputManager) getActivity().getSystemService(Context.INPUT_SERVICE);\n    inputManager.registerInputDeviceListener(GameFragment.this, null);\n  }\n}\n```", "```java\npublic GameController(GameEngine gameEngine, GameFragment parent) {\n  mParent = parent;\n  […]\n}\n\n@Override\npublic void onGameEvent(GameEvent gameEvent) {\n  [...]\n  else if (gameEvent == GameEvent.GameOver) {\n    mState = GameControllerState.GameOver;\n    showGameOverDialog();\n  }\n}\n\nprivate void showGameOverDialog() {\n  mParent.getActivity().runOnUiThread(new Runnable() {\n    @Override\n    public void run() {\n      GameOverDialog quitDialog = new GameOverDialog(mParent);\n      quitDialog.setListener(mParent);\n      mParent.showDialog(quitDialog);\n    }\n  });\n}\n```", "```java\n<resources>\n  <dimen name=\"square_button_padding\">18dp</dimen>\n  <dimen name=\"square_button_border\">6dp</dimen>\n  <dimen name=\"round_button_padding\">6dp</dimen>\n  <dimen name=\"btn_round_size\">60dp</dimen>\n\n  <dimen name=\"menu_margin\">8dp</dimen>\n  <dimen name=\"game_frame_width\">6dp</dimen>\n  <dimen name=\"game_menu_width\">100dp</dimen>\n\n  <dimen name=\"life_size\">30dp</dimen>\n\n  <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n  <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n  <dimen name=\"dialog_width\">400dp</dimen>\n  <dimen name=\"dialog_height\">250dp</dimen>\n</resources>\n```", "```java\n<dimen name=\"activity_horizontal_margin\">64dp</dimen>\n<dimen name=\"menu_margin\">12dp</dimen>\n\n<dimen name=\"game_menu_width\">150dp</dimen>\n<dimen name=\"life_size\">45dp</dimen>\n\n<dimen name=\"dialog_width\">500dp</dimen>\n<dimen name=\"dialog_height\">300dp</dimen>\n```", "```java\n<dimen name=\"menu_margin\">16dp</dimen>\n\n<dimen name=\"game_menu_width\">200dp</dimen>\n<dimen name=\"life_size\">60dp</dimen>\n\n<dimen name=\"dialog_width\">600dp</dimen>\n<dimen name=\"dialog_height\">400dp</dimen>\n```", "```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n  super.onViewCreated(view, savedInstanceState);\n  getYassActivity().applyTypeface(view);\n  final ViewTreeObserver obs = view.getViewTreeObserver();\n  obs.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n    @Override\n    public synchronized void onGlobalLayout() {\n      ViewTreeObserver viewTreeObserver = getView().getViewTreeObserver();\n      if (viewTreeObserver.isAlive()) {\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n          viewTreeObserver.removeGlobalOnLayoutListener(this);\n        } else {\n          viewTreeObserver.removeOnGlobalLayoutListener(this);\n        }\n        onLayoutCompleted();\n      }\n    }\n  });\n}\n```", "```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n  super.onViewCreated(view, savedInstanceState);\n  view.findViewById(R.id.btn_play_pause).setOnClickListener(this);\n}\n\n@Override\nprotected void onLayoutCompleted() {\n  prepareAndStartGame();\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<animation-list \n  android:oneshot=[\"true\" | \"false\"] >\n  <item\n    android:drawable=\"@[package:]drawable/drawable_resource_name\"\n    android:duration=\"integer\" />\n</animation-list>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<animation-list \n  android:oneshot=\"false\">\n  <item android:drawable=\"@drawable/ship_2\" android:duration=\"600\" />\n  <item android:drawable=\"@drawable/ship_1\" android:duration=\"400\" />\n  <item android:drawable=\"@drawable/ship_2\" android:duration=\"600\" />\n  <item android:drawable=\"@drawable/ship_3\" android:duration=\"400\" />\n</animation-list>\n```", "```java\n<ImageView\n  android:id=\"@+id/ship_animated\"\n  android:layout_width=\"50dp\"\n  android:layout_height=\"50dp\"\n  android:layout_centerHorizontal=\"true\"\n  android:src=\"img/ship_animated\"\n  android:layout_below=\"@+id/btn_start\"\n/>\n```", "```java\n@Override\nprotected void onLayoutCompleted() {\n  ImageView iv = (ImageView) getView().findViewById(R.id.ship_animated);\n  ((AnimationDrawable)iv.getDrawable()).start();\n}\n```", "```java\npublic abstract class AnimatedSprite extends Sprite {\n\n  private final AnimationDrawable mAnimationDrawable;\n  private int mTotalTime;\n  private long mCurrentTime;\n\n  public AnimatedSprite(GameEngine gameEngine, int drawableRes, BodyType bodyType) {\n    super(gameEngine, drawableRes, bodyType);\n    // Now, the drawable must be an animation drawable\n    mAnimationDrawable = (AnimationDrawable) mSpriteDrawable;\n    // Calculate the total time of the animation\n    mTotalTime = 0;\n    for (int i=0; i<mAnimationDrawable.getNumberOfFrames(); i++) {\n      mTotalTime += mAnimationDrawable.getDuration(i);\n    }\n  }\n\n  @Override\n  protected Bitmap obtainDefaultBitmap() {\n    AnimationDrawable ad = (AnimationDrawable) mSpriteDrawable;\n    return ((BitmapDrawable) ad.getFrame(0)).getBitmap();\n  }\n\n  @Override\n  public void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n    mCurrentTime += elapsedMillis;\n    if (mCurrentTime > mTotalTime) {\n      if (mAnimationDrawable.isOneShot()) {\n        return;\n      }\n      else {\n        mCurrentTime = mCurrentTime % mTotalTime;\n      }\n    }\n    long animationElapsedTime = 0;\n    for (int i=0; i<mAnimationDrawable.getNumberOfFrames(); i++) {\n      animationElapsedTime += mAnimationDrawable.getDuration(i);\n      if (animationElapsedTime > mCurrentTime) {\n        mBitmap = ((BitmapDrawable) mAnimationDrawable.getFrame(i)).getBitmap();\n        break;\n      }\n    }\n  }\n}\n```", "```java\npublic class Player extends AnimatedSprite {\n\n  public Player(GameEngine gameEngine) {\n    super(gameEngine, R.drawable.ship_animated, BodyType.Circular);\n    […]\n  }\n\n  @Override\n  public void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n    super.onUpdate(elapsedMillis, gameEngine);\n    […]\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set \n  android:interpolator=\"@[package:]anim/interpolator_resource\"\n  android:shareInterpolator=[\"true\" | \"false\"] >\n  <alpha\n    android:fromAlpha=\"float\"\n    android:toAlpha=\"float\" />\n  <scale\n    android:fromXScale=\"float\"\n    android:toXScale=\"float\"\n    android:fromYScale=\"float\"\n    android:toYScale=\"float\"\n    android:pivotX=\"float\"\n    android:pivotY=\"float\" />\n  <translate\n    android:fromXDelta=\"float\"\n    android:toXDelta=\"float\"\n    android:fromYDelta=\"float\"\n    android:toYDelta=\"float\" />\n  <rotate\n    android:fromDegrees=\"float\"\n    android:toDegrees=\"float\"\n    android:pivotX=\"float\"\n    android:pivotY=\"float\" />\n  <set>\n    ...\n  </set>\n</set>\n```", "```java\npublic void show() {\n  if (mIsShowing) {\n    return;\n  }\n  mIsHiding = true;\n  [...]\n  startShowAnimation();\n}\n\nprivate void startShowAnimation() {\n  Animation dialogIn = AnimationUtils.loadAnimation(mParent, R.animator.dialog_in);\n  mRootView.startAnimation(dialogIn);\n}\n\npublic void dismiss() {\n  if (!mIsShowing) {\n    return;\n  }\n\n  if (mIsHiding) {\n    return;\n  }\n  mIsHiding = true;\n  startHideAnimation();\n}\n\nprivate void startHideAnimation() {\n  Animation dialogOut = AnimationUtils.loadAnimation(mParent, R.animator.dialog_out);\n  dialogOut.setAnimationListener(this);\n  mRootView.startAnimation(dialogOut);\n}\n\n@Override\npublic void onAnimationEnd(Animation paramAnimation) {\n  hideViews();\n  mIsShowing = false;\n  onDismissed();\n}\n\nprotected void onDismissed() {\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<set \n  android:interpolator=\"@android:anim/decelerate_interpolator\"\n  >\n  <scale\n    android:fromXScale=\"0.5\"\n    android:toXScale=\"1.0\"\n    android:fromYScale=\"0.5\"\n    android:toYScale=\"1.0\"\n    android:pivotX=\"50%\"\n    android:pivotY=\"50%\"          \n    android:duration=\"400\"\n  />\n</set>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<set \n  android:interpolator=\"@android:anim/accelerate_interpolator\">\n  <scale\n    android:fromXScale=\"1.0\"\n    android:toXScale=\"0.5\"\n    android:fromYScale=\"1.0\"\n    android:toYScale=\"0.5\"\n    android:pivotX=\"50%\"\n    android:pivotY=\"50%\"\n    android:duration=\"400\"\n  />\n</set>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set \n  android:interpolator=\"@android:anim/overshoot_interpolator\">\n  <translate\n    android:fromYDelta=\"-100%p\"\n    android:toYDelta=\"0%p\"\n    android:duration=\"500\" />\n</set>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set  \n    android:interpolator=\"@android:anim/anticipate_interpolator\">\n  <translate\n    android:fromYDelta=\"0%p\"\n    android:toYDelta=\"-100%p\"\n    android:duration=\"500\" />\n</set>\n```", "```java\n@Override\npublic void onClick(View v) {\n  mSelectedId = v.getId();\n  dismiss();\n}\n\n@Override\nprotected void onDismissed() {\n  if (mSelectedId == R.id.btn_exit) {\n    mListener.exitGame();\n  }\n  else if (mSelectedId == R.id.btn_resume) {\n    mListener.startNewGame();\n  }\n}\n```", "```java\n@Override\npublic void onClick(View v) {\n  [...]\n  else if (v.getId() == R.id.btn_exit) {\n    mSelectedId = v.getId();\n    super.dismiss();\n  }\n  else if (v.getId() == R.id.btn_resume) {\n    mSelectedId = v.getId();\n    super.dismiss();\n  }\n}\n\n@Override\nprotected void onDismissed () {\n  if (mSelectedId == R.id.btn_exit) {\n    mListener.exitGame();\n  }\n  else if (mSelectedId == R.id.btn_resume) {\n    mListener.resumeGame();\n  }\n}\n\n@Override\npublic void dismiss() {\n  super.dismiss();\n  mSelectedId = R.id.btn_resume;\n}\n```", "```java\n@Override\npublic void onClick(View v) {\n  mSelectedId = v.getId();\n  dismiss();\n}\n\n@Override\nprotected void onDismissed() {\n  if (mSelectedId == R.id.btn_exit) {\n    mListener.exit();\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set \n  android:interpolator=\"@android:anim/accelerate_decelerate_interpolator\">\n  <scale\n    android:fromXScale=\"1.0\"\n    android:toXScale=\"1.2\"\n    android:fromYScale=\"1.0\"\n    android:toYScale=\"1.0\"\n    android:pivotX=\"50%\"\n    android:pivotY=\"50%\"\n    android:duration=\"800\"\n    android:repeatMode=\"reverse\"\n    android:repeatCount=\"infinite\"\n  />\n  <scale\n    android:fromXScale=\"1.0\"\n    android:toXScale=\"1.0\"\n    android:fromYScale=\"1.0\"\n    android:toYScale=\"1.1\"\n    android:pivotX=\"50%\"\n    android:pivotY=\"50%\"\n    android:startOffset=\"300\"\n    android:duration=\"500\"\n    android:repeatMode=\"reverse\"\n    android:repeatCount=\"infinite\"\n  />\n</set>\n```", "```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n  super.onViewCreated(view, savedInstanceState);\n  […]\n  Animation pulseAnimation = AnimationUtils.loadAnimation(getActivity(), R.animator.button_pulse);\n  view.findViewById(R.id.btn_start).startAnimation(pulseAnimation);\n}\n```", "```java\nValueAnimator animation = ValueAnimator.ofFloat(0f, 42f);\nanimation.setDuration(1000);\nanimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n  @Override\n  public void onAnimationUpdate(ValueAnimator animation) {\n    Float currentValue = (Float) animation.getAnimatedValue();\n    // Do something with the value\n  }\n});\nanimation.start();\n```", "```java\n@Override\nprotected void onLayoutCompleted() {\n  [...]\n  animateShip();\n}\n\nprivate void animateShip() {\n  View iv = getView().findViewById(R.id.ship_animated);\n  // Get a random position on the screen\n  Random r = new Random();\n  int targetX = r.nextInt(getView().getWidth());\n  int targetY = r.nextInt(getView().getHeight());\n  // Animate\n  iv.animate()\n    .x(targetX)\n    .y(targetY)\n    .setDuration(500)\n    .setInterpolator(new AccelerateDecelerateInterpolator())\n    .setListener(new Animator.AnimatorListener() {\n      @Override\n      public void onAnimationEnd(Animator animation) {\n        animateShip();\n      }\n\n      @Override\n      public void onAnimationStart(Animator animation) {}\n\n      @Override\n      public void onAnimationCancel(Animator animation) {}\n\n      @Override\n      public void onAnimationRepeat(Animator animation) {}\n    });\n}\n```", "```java\n<integer name=\"tittle_start_offset\">400</integer>\n<integer name=\"tittle_duration\">1600</integer>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set \n  android:interpolator=\"@android:anim/bounce_interpolator\">\n  <translate\n    android:startOffset=\"@integer/tittle_start_offset\"\n    android:fromXDelta=\"-100%p\"\n    android:toXDelta=\"0%p\"\n    android:repeatCount=\"0\"\n    android:duration=\"@integer/tittle_duration\" />\n</set>\n```", "```java\nAnimation titleAnimation = AnimationUtils.loadAnimation(getActivity(), R.animator.title_enter);\ntitle.startAnimation(titleAnimation);\n```", "```java\nView title = getView().findViewById(R.id.main_title);\ntitle.setTranslationX(-getView().getWidth());\n\nint duration = getResources().getInteger(R.integer.tittle_duration);\nint startOffset = getResources().getInteger(R.integer.subtitle_start_offset);\n\ntitle.animate()\n  .translationX(0)\n  .setStartDelay(startOffset)\n  .setDuration(duration)\n  .setInterpolator(new BounceInterpolator())\n  .start();\n```", "```java\n<set \n  android:interpolator=\"@android:anim/bounce_interpolator\">\n  <objectAnimator\n    android:interpolator=\"@android:anim/bounce_interpolator\"\n    android:propertyName=\"translationX\"\n    android:valueTo=\"0\"\n    android:startOffset=\"@integer/tittle_start_offset\"\n    android:duration=\"@integer/tittle_duration\" />\n</set>\n```", "```java\ntitle.setTranslationX(-title.getX()-title.getWidth());\n\nAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(getActivity(), R.animator.title_enter_property);\nset.setTarget(title);\nset.start();\n```", "```java\n<integer name=\"subtitle_start_offset\">2000</integer>\n<integer name=\"subtitle_duration\">600</integer>\n```", "```java\n<set >\n  <alpha android:fromAlpha=\"0.0\"\n    android:toAlpha=\"1.0\"\n    android:startOffset=\"@integer/subtitle_start_offset\"\n    android:duration=\"@integer/subtitle_duration\"/>\n</set>\n```", "```java\nAnimation subtitleAnimation = AnimationUtils.loadAnimation(context, R.animator.subtitle_enter);\nsubtitle.startAnimation(subtitleAnimation);\n```", "```java\nView subtitle = getView().findViewById(R.id.main_subtitle);\nsubtitle.setAlpha(0);\n\nint subtitleDuration = getResources().getInteger(R.integer.subtitle_duration);\nint subtitleStartOffset = getResources().getInteger(R.integer.subtitle_start_offset);\n\nsubtitle.animate()\n  .alpha(1)\n  .setDuration(subtitleDuration)\n  .setStartDelay(subtitleStartOffset)\n  .setInterpolator(new DecelerateInterpolator())\n  .start();\n```", "```java\n<set >\n<objectAnimator\n  android:interpolator=\"@android:anim/decelerate_interpolator\"\n  android:propertyName=\"alpha\" \n  android:valueFrom=\"0\"\n  android:valueTo=\"1\"\n  android:startOffset=\"@integer/subtitle_start_offset\"\n  android:duration=\"@integer/subtitle_duration\" />\n</set>\n```", "```java\nsubtitle.setAlpha(0);\nAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(context, R.animator.fade_in_property);\nset.setTarget(subtitle);\nset.start();\n```", "```java\nkeytool -exportcert -alias androiddebugkey -keystore <path-to-debug-keystore> -list -v\n```", "```java\napply plugin: 'com.android.application'\n\ndependencies {\n  compile 'com.android.support:appcompat-v7:22.1.1'\n  compile 'com.google.android.gms:play-services:7.3.0'\n}\n```", "```java\n<application>\n  <meta-data android:name=\"com.google.android.gms.games.APP_ID\" android:value=\"@string/app_id\" />\n  <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\"/>\n  [...]\n</application>\n```", "```java\ndependencies {\n  compile project(':BaseGameUtils')\n  [...]\n}\n```", "```java\npublic void navigateBack() {\n  // Do a pop on the navigation history\n  getFragmentManager().popBackStack();\n}\n```", "```java\n// Should we start the flow to sign the user in automatically on startup? If\n// so, up to\n// how many times in the life of the application?\nstatic final int DEFAULT_MAX_SIGN_IN_ATTEMPTS = 3;\nint mMaxAutoSignInAttempts = DEFAULT_MAX_SIGN_IN_ATTEMPTS;\n```", "```java\ngetGameHelper().setMaxAutoSignInAttempts(1);\n```", "```java\npublic boolean check (GameEngine gameEngine, GameEvent gameEvent) \n{\n}\n```", "```java\nprivate final GoogleApiClient mApiClient;\n\npublic ScoreGameObject(YassBaseFragment parent, View view, int viewResId) {\n  […]\n  mApiClient = parent.getYassActivity().getGameHelper().getApiClient();\n}\n```", "```java\nprivate void unlockSafe(int resId) {\n  if (mApiClient.isConnecting() || mApiClient.isConnected()) {\n    try {\n      Games.Achievements.unlock(mApiClient, getString(resId));\n    } catch (Exception e) {\n      mApiClient.disconnect();\n    }\n  }\n}\n```", "```java\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  mY += mSpeedFactor * elapsedMillis;\n  if (mY < -mHeight) {\n    removeFromGameEngine(gameEngine);\n    gameEngine.onGameEvent(GameEvent.BulletMissed);\n  }\n}\n```", "```java\nprivate void checkAsteroidHitRelatedAchievements() {\n  if (mPoints > 100000) {\n    // Unlock achievement\n    unlockSafe(R.string.achievement_big_score);\n  }\n  if (mConsecutiveHits >= 20) {\n    unlockSafe(R.string.achievement_target_acquired);\n  }\n  // Increment achievement of asteroids hit\n  if (mApiClient.isConnecting() || mApiClient.isConnected()) {\n    try {\n      Games.Achievements.increment(mApiClient, getString(R.string.achievement_asteroid_killer), 1);\n    } catch (Exception e) {\n      mApiClient.disconnect();\n    }\n  }\n}\n```", "```java\npublic void onGameEvent(GameEvent gameEvent) {\n  if (gameEvent == GameEvent.AsteroidHit) {\n    mPoints += POINTS_GAINED_PER_ASTEROID_HIT;\n    mPointsHaveChanged = true;\n    mConsecutiveMisses = 0;\n    mConsecutiveHits++;\n    checkAsteroidHitRelatedAchievements();\n  }\n  else if (gameEvent == GameEvent.BulletMissed) {\n    mConsecutiveMisses++;\n    mConsecutiveHits = 0;\n    if (mConsecutiveMisses >= 20) {\n      unlockSafe(R.string.achievement_target_lost);\n    }\n  }\n  else if (gameEvent == GameEvent.SpaceshipHit) {\n    mTimeWithoutDie = 0;\n  }\n  […]\n}\n```", "```java\n@Override\npublic void startGame(GameEngine gameEngine) {\n  mTimeWithoutDie = 0;\n  […]\n}\n\n@Override\npublic void onUpdate(long elapsedMillis, GameEngine gameEngine) {\n  mTimeWithoutDie += elapsedMillis;\n  if (mTimeWithoutDie > 60000) {\n    unlockSafe(R.string.achievement_survivor);\n  }\n}\n```", "```java\npublic void stopGame() {\n  if (mUpdateThread != null) {\n    synchronized (mLayers) {\n      onGameEvent(GameEvent.GameFinished);\n    }\n    mUpdateThread.stopGame();\n    mUpdateThread = null;\n  }\n  […]\n}\n```", "```java\n@Override\npublic void onGameEvent(GameEvent gameEvent) {\n  […]\n  else if (gameEvent == GameEvent.GameFinished) {\n    // Submit the score\n    if (mApiClient.isConnecting() || mApiClient.isConnected()) {\n      try {\n        Games.Leaderboards.submitScore(mApiClient, getLeaderboardId(), mPoints);\n      }\n      catch (Exception e){\n        mApiClient.disconnect();\n      }\n    }\n  }\n}\n\nprivate String getLeaderboardId() {\n  return mParent.getString(R.string.leaderboard_high_scores);\n}\n```", "```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n  super.onViewCreated(view, savedInstanceState);\n  [...]\n  view.findViewById(R.id.btn_achievements).setOnClickListener(this);\n  view.findViewById(R.id.btn_leaderboards).setOnClickListener(this);\n  view.findViewById(R.id.btn_sign_in).setOnClickListener(this);\n}\n```", "```java\nGoogleApiClient apiClient = getYassActivity().getGameHelper().getApiClient();\n```", "```java\nIntent achievementsIntent = Games.Achievements.getAchievementsIntent(apiClient);\nstartActivityForResult(achievementsIntent, REQUEST_ACHIEVEMENTS);\n```", "```java\nIntent leaderboardsIntent = Games.Leaderboards.getLeaderboardIntent(\n  apiClient,\n  getString(R.string.leaderboard_high_scores));\nstartActivityForResult(leaderboardsIntent, REQUEST_LEADERBOARDS);\n```", "```java\nprivate void updatePlayButtons() {\n  GameHelper gameHelper = getYassActivity().getGameHelper();\n  if (gameHelper.isConnecting() || gameHelper.isSignedIn()) {\n    getView().findViewById(R.id.btn_achievements).setVisibility(View.VISIBLE);\n    getView().findViewById(R.id.btn_leaderboards).setVisibility(View.VISIBLE);\n    getView().findViewById(R.id.btn_sign_in).setVisibility(View.GONE);\n  }\n  else {\n    getView().findViewById(R.id.btn_achievements).setVisibility(View.GONE);\n    getView().findViewById(R.id.btn_leaderboards).setVisibility(View.GONE);\n    getView().findViewById(R.id.btn_sign_in).setVisibility(View.VISIBLE);\n  }\n}\n```", "```java\nelse if (v.getId() == R.id.btn_achievements) {\n  try {\n    GoogleApiClient apiClient = getYassActivity().getGameHelper().getApiClient();\n    Intent achievementsIntent = Games.Achievements.getAchievementsIntent(apiClient);\n    startActivityForResult(achievementsIntent, REQUEST_ACHIEVEMENTS);\n  }\n  catch (Exception e) {\n    GameHelper gameHelper = getYassActivity().getGameHelper();\n    gameHelper.disconnect();\n    gameHelper.beginUserInitiatedSignIn();\n  }\n}\n```", "```java\nif (v.getId() == R.id.btn_sign_in) {\n  getYassActivity().getGameHelper().beginUserInitiatedSignIn();\n}\n```", "```java\nGames.Events.increment(mGoogleApiClient, myEventId, 1);\n```", "```java\nIntent questsIntent = Games.Quests.getQuestsIntent(mGoogleApiClient,\n   Quests.SELECT_ALL_QUESTS);\nstartActivityForResult(questsIntent, QUESTS_INTENT);\n```", "```java\nGames.Quests.registerQuestUpdateListener(mGoogleApiClient, this);\n```", "```java\n@Override\npublic void onQuestCompleted(Quest quest) {\n  // Claim the quest reward.\n  Games.Quests.claim(mGoogleApiClient, quest.getQuestId(),\n    quest.getCurrentMilestone().getMilestoneId());\n  // Process the RewardData to provision a specific reward.\n  String reward = new\n    String(quest.getCurrentMilestone().getCompletionRewardData(),\n    Charset.forName(\"UTF-8\"));\n}\n```", "```java\npublic class YassTvActivity extends YassActivity {\n}\n```", "```java\n<activity\n  android:name=\".YassTvActivity\"\n  android:label=\"@string/app_name\"\n  >\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LEANBACK_LAUNCHER\" />\n  </intent-filter>\n</activity>\n```", "```java\n<activity\n  android:screenOrientation=\"sensorLandscape\"\n  android:name=\".YassActivity\"\n  android:hardwareAccelerated=\"false\"\n  android:label=\"@string/title_activity_main\" >\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n  </intent-filter>\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LEANBACK_LAUNCHER\" />\n  </intent-filter>\n</activity>\n```", "```java\n<application\n  […]\n  android:banner=\"@drawable/banner_small\" >\n```", "```java\n<application\n  […]\n  android:isGame=\"true\">\n```", "```java\n<uses-feature android:name=\"android.software.leanback\"\n  android:required=\"false\" />\n```", "```java\n<uses-feature android:name=\"android.hardware.touchscreen\"\n  android:required=\"false\" />\n```", "```java\ngetPackageManager().hasSystemFeature(\"android.hardware.touchscreen\")\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n  package=\"com.plattysoft.yass\" >\n\n  <application\n    android:icon=\"@mipmap/ic_launcher\"\n    android:label=\"@string/app_name\"\n    android:isGame=\"true\"\n    android:banner=\"@drawable/banner_small\"\n    android:theme=\"@style/AppTheme\" >\n\n    <uses-feature android:name=\"android.software.leanback\"\n      android:required=\"false\" />\n\n    <uses-feature android:name=\"android.hardware.touchscreen\"\n      android:required=\"false\" />\n\n    <meta-data android:name=\"com.google.android.gms.games.APP_ID\"\n      android:value=\"@string/app_id\" />\n    <meta-data android:name=\"com.google.android.gms.version\"\n      android:value=\"@integer/google_play_services_version\"/>\n\n    <activity\n      android:screenOrientation=\"sensorLandscape\"\n      android:name=\".YassActivity\"\n      android:hardwareAccelerated=\"false\"\n      android:label=\"@string/title_activity_main\" >\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n      </intent-filter>\n    </activity>\n\n    <activity\n      android:name=\".YassTvActivity\"\n      android:label=\"@string/app_name\" >\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LEANBACK_LAUNCHER\" />\n      </intent-filter>\n    </activity>\n  </application>\n</manifest>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout \n  android:layout_gravity=\"center\"\n  android:background=\"@drawable/dialog_bg\"\n  android:layout_width=\"@dimen/dialog_width\"\n  android:layout_height=\"@dimen/dialog_height\">\n\n  <ImageView\n    android:id=\"@+id/controller_help_image\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_centerInParent=\"true\"\n    android:src=\"img/controller_help\"/>\n\n</RelativeLayout>\n```", "```java\npublic class ControllerHelpDialog extends BaseCustomDialog implements View.OnClickListener {\n  public ControllerHelpDialog(YassActivity a) {\n    super(a);\n    setContentView(R.layout.dialog_controller_help);\n    findViewById(R.id.controller_help_image).setOnClickListener(this);\n  }\n\n  @Override\n  public void onClick(View v) {\n    dismiss();\n  }\n}\n```", "```java\nprivate void displayGamepadHelp() {\n  showDialog(new ControllerHelpDialog(getYassActivity()));\n}\n\nprivate boolean shouldDisplayGamepadHelp() {\n  PackageManager pm = getYassActivity().getPackageManager();\n  boolean isLeanback = pm.hasSystemFeature(\"android.software.leanback\");\n  if (isLeanback) {\n    boolean shownAlready = YassActivity.sGamepadHelpShown;\n    YassActivity.sGamepadHelpShown = true;\n    return !shownAlready;\n  }\n  if (isGameControllerConnected()) {\n    return PreferenceManager.getDefaultSharedPreferences(getActivity())\n      .getBoolean(PREF_SHOULD_DISPLAY_GAMEPAD_HELP, true);\n  }\n  return false;\n}\n```", "```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.activity_yass);\n  if (savedInstanceState == null) {\n    getFragmentManager().beginTransaction()\n      .add(R.id.container, createMenuFragment(), TAG_FRAGMENT)\n      .commit();\n  }\n  [...]\n}\n\nprotected Fragment createMenuFragment() {\n  return new MainMenuFragment();\n}\n\npublic void startGame() {\n  navigateToFragment(new GameFragment());\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout \n  android:layout_width=\"match_parent\"\n  android:layout_gravity=\"center\"\n  android:paddingTop=\"27dp\"\n  android:paddingLeft=\"48dp\"\n  android:paddingRight=\"48dp\"\n  android:paddingBottom=\"27dp\"\n  android:background=\"@color/background\"\n  android:layout_height=\"match_parent\">\n\n  <include layout=\"@layout/fragment_game\" />\n\n</FrameLayout>\n```", "```java\npublic class GameTvFragment extends GameFragment {\n  @Override\n  public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    return inflater.inflate(R.layout.fragment_game_tv, container, false);\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout \n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\" >\n  <ImageView\n    android:id=\"@+id/main_menu_bg\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:scaleType=\"centerCrop\"\n    android:src=\"img/seamless_space_0\"/>\n\n  <include layout=\"@layout/fragment_main_menu_common\" />\n</FrameLayout>\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout \n  android:layout_width=\"match_parent\"\n  android:layout_gravity=\"center\"\n  android:layout_height=\"match_parent\">\n  <ImageView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:scaleType=\"centerCrop\"\n    android:src=\"img/seamless_space_0\"/>\n\n  <include layout=\"@layout/fragment_main_menu_common\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_marginTop=\"27dp\"\n    android:layout_marginLeft=\"48dp\"\n    android:layout_marginRight=\"48dp\"\n    android:layout_marginBottom=\"27dp\"/>\n</FrameLayout>\n```", "```java\n@Override\npublic final View onCreateView(LayoutInflater inflater, ViewGroup container,\n  Bundle savedInstanceState) {\n  return inflater.inflate(getLayoutResId(), container, false);\n}\n\nprotected int getLayoutResId() {\n  return R.layout.fragment_main_menu;\n}\n```", "```java\npublic class MainMenuTvFragment extends MainMenuFragment {\n  @Override\n  protected int getLayoutResId() {\n    return R.layout.fragment_main_menu_tv;\n  }\n}\n```", "```java\npublic class YassTvActivity extends YassActivity {\n\n  public void startGame() {\n    // Navigate the the game fragment, which makes the start automatically\n    navigateToFragment( new GameTvFragment());\n  }\n\n  protected Fragment createMenuFragment() {\n    return new MainMenuTvFragment();\n  }\n}\n```", "```java\n<style name=\"iconButton\" >\n  <item name=\"android:background\">@drawable/icon_button_bg</item>\n  <item name=\"android:layout_width\">@dimen/btn_round_size</item>\n  <item name=\"android:layout_height\">@dimen/btn_round_size</item>\n  <item name=\"android:padding\">@dimen/round_button_padding</item>\n  <item name=\"android:focusable\">true</item>\n</style>\n```", "```java\npublic void showDialog (BaseCustomDialog newDialog, boolean dismissOtherDialog) {\n  getYassActivity().showDialog(newDialog, dismissOtherDialog);\n}\n```", "```java\n@Override\npublic boolean dispatchKeyEvent (KeyEvent event) {\n  if (mCurrentDialog != null && mCurrentDialog.isShowing()) {\n    if (mCurrentDialog.dispatchKeyEvent(event)) {\n      return true;\n    }\n  }\n  else if (mGamepadControllerListener != null) {\n    if (mGamepadControllerListener.dispatchKeyEvent(event)) {\n      return true;\n    }\n  }\n  return super.dispatchKeyEvent(event);\n}\n```", "```java\n@Override\npublic boolean dispatchGenericMotionEvent(MotionEvent event) {\n  if (mCurrentDialog != null && mCurrentDialog.isShowing()) {\n    if (mCurrentDialog.dispatchGenericMotionEvent(event)) {\n      return true;\n    }\n  }\n  else if (mGamepadControllerListener != null) {\n    if (mGamepadControllerListener.dispatchGenericMotionEvent(event)) {\n      return true;\n    }\n  }\n  return super.dispatchGenericMotionEvent(event);\n}\n```", "```java\n@Override\npublic void onBackPressed() {\n  if (mCurrentDialog != null && mCurrentDialog.isShowing()) {\n    mCurrentDialog.dismiss();\n    return;\n  }\n  final YassBaseFragment fragment = (YassBaseFragment) getFragmentManager().findFragmentByTag(TAG_FRAGMENT);\n  if (fragment == null || !fragment.onBackPressed()) {\n    super.onBackPressed();\n  }\n}\n```", "```java\npublic boolean dispatchKeyEvent(KeyEvent event) {\n  return false;\n}\n\npublic boolean dispatchGenericMotionEvent(MotionEvent event) {\n  return false;\n}\n```", "```java\npublic boolean dispatchKeyEvent(KeyEvent event) {\n  if (event.getKeyCode() == KeyEvent.KEYCODE_BUTTON_A ||\n      event.getKeyCode() == KeyEvent.KEYCODE_ENTER ||\n      event.getKeyCode() == KeyEvent.KEYCODE_DPAD_CENTER) {\n    dismiss();\n    return true;\n  }\n  return false;\n}\n```", "```java\npublic boolean dispatchKeyEvent(KeyEvent event) {\n  if (event.getKeyCode() == KeyEvent.KEYCODE_BUTTON_A ||\n      event.getKeyCode() == KeyEvent.KEYCODE_ENTER ||\n      event.getKeyCode() == KeyEvent.KEYCODE_DPAD_CENTER) {\n    if (findViewById(R.id.btn_resume).isFocused() ||\n        findViewById(R.id.btn_exit).isFocused()) {\n      // Return false, so a proper click is sent\n      return false;\n    }\n    return true;\n  }\n  return false;\n}\n```", "```java\n<ImageView\n  style=\"@style/iconButton\"\n  android:focusable=\"false\"\n  android:layout_gravity=\"top|right\"\n  android:id=\"@+id/btn_play_pause\"\n  android:layout_marginTop=\"@dimen/menu_margin\"\n  android:layout_marginRight=\"@dimen/menu_margin\"\n  android:src=\"img/pause\" />\n```"]