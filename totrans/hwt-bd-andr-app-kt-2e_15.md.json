["```swift\nimplementation 'androidx.lifecycle:\nlifecycle-viewmodel-ktx:2.5.1'\n```", "```swift\nclass MovieViewModel : ViewModel() {\n    private val _movies: MutableStateFlow<List<Movie>>\n    fun movies: StateFlow<List<Movie>> { ... }\n    ...\n}\n```", "```swift\nclass MainActivity : AppCompatActivity() {\n    private val movieViewModel by lazy {\n        ViewModelProvider(this).get(MovieViewModel::\n        class.java)\n    }\n    ...\n}\n```", "```swift\noverride fun onCreate(savedInstanceState: Bundle?) {\n    ...\n    lifecycleScope.launch {\n        repeatOnLifecycle(Lifecycle.State.STARTED) {\n            launch {\n                movieViewModel.popularMovies.collect {\n                movies ->\n                    movieAdapter.addMovies(movies)\n                }\n            }\n        }\n    }\n    ...\n}\n```", "```swift\nbuildFeatures {\n    dataBinding true\n}\n```", "```swift\n<layout xmlns:android=\n    \"http://schemas.android.com/apk/res/android\">\n    <data>\n        <variable name=\"movie\" type=\n        \"com.example.model.Movie\"/>\n    </data>\n    <ConstraintLayout ... />\n</layout>\n```", "```swift\n<TextView\n    ...\n    android:text=\"@{movie.title}\"/>\n```", "```swift\nval binding: ActivityMoviesBinding = DataBindingUtil\n.setContentView(this, R.layout.activity_movies)\n```", "```swift\nval binding: ActivityMoviesBinding = ActivityMoviesBinding\n.inflate(getLayoutInflater())\n```", "```swift\nval movieToDisplay = ...\nbinding.movie = movieToDisplay\n```", "```swift\nbinding.lifeCycleOwner = this\n```", "```swift\n@BindingAdapter(\"list\")\nfun bindMovies(view: RecyclerView, movies: List<Movie>?) {\n    val adapter = view.adapter as MovieAdapter\n    adapter.addMovies(movies ?: emptyList())\n}\n```", "```swift\napp:list=\"@{movies}\"\n```", "```swift\n    buildFeatures {\n        dataBinding true\n    }\n    ```", "```swift\n    plugins {\n        ...\n        id 'kotlin-kapt'\n    }\n    ```", "```swift\n    @BindingAdapter(\"list\")\n    fun bindMovies(view: RecyclerView, movies:\n    List<Movie>?) {\n        val adapter = view.adapter as MovieAdapter\n        adapter.addMovies(movies ?: emptyList())\n    }\n    ```", "```swift\n    <layout xmlns:android=\n        \"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\">\n        <androidx.constraintlayout.widget.ConstraintLayout\n            ... >\n        </androidx.constraintlayout.widget\n        .ConstraintLayout>\n    </layout>\n    ```", "```swift\n    <data>\n        <variable\n            name=\"viewModel\"\n            type=\"com.example.popularmovies\n            .MovieViewModel\" />\n    </data>\n    ```", "```swift\n    app:list=\"@{viewModel.popularMovies}\"\n    ```", "```swift\n    val binding: ActivityMainBinding = DataBindingUtil\n    .setContentView(this, R.layout.activity_main)\n    ```", "```swift\n    binding.viewModel = movieViewModel\n    binding.lifecycleOwner = this\n    ```", "```swift\nimplementation 'com.squareup.retrofit2:retrofit:2.9.0'\n```", "```swift\nimplementation 'com.squareup.retrofit2:\nconverter-moshi:2.9.0'\n```", "```swift\nRetrofit.Builder()\n    ...\n    .addConverterFactory(MoshiConverterFactory.create())\n    ...\n```", "```swift\nclass MovieViewModel(val repository: MovieRepository):\nViewModel() { ...}\n```", "```swift\ninterface MovieRepository {\n    fun getMovies(): List<Movie>\n}\n```", "```swift\nimplementation 'androidx.room:room-runtime:2.4.3'\nimplementation 'androidx.room:room-ktx:2.4.3'\nkapt 'androidx.room:room-compiler:2.4.3'\n```", "```swift\n    implementation 'androidx.room:room-runtime:2.4.3'\n    implementation 'androidx.room:room-ktx:2.4.3'\n    kapt 'androidx.room:room-compiler:2.4.3'\n    ```", "```swift\n    @Entity(tableName = \"movies\",  primaryKeys = [(\"id\")])\n    data class Movie( ... )\n    ```", "```swift\n    @Dao\n    interface MovieDao {\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun addMovies(movies: List<Movie>)\n    @Query(\"SELECT * FROM movies\")\n    fun getMovies(): List<Movie>\n    }\n    ```", "```swift\n    @Database(entities = [Movie::class], version = 1)\n    abstract class MovieDatabase : RoomDatabase() {\n        abstract fun movieDao(): MovieDao\n        companion object {\n            @Volatile\n            private var instance: MovieDatabase? = null\n            fun getInstance(context: Context):\n            MovieDatabase {\n                return instance ?: synchronized(this) {\n                    instance ?: buildDatabase(\n                    context).also { instance = it }\n                }\n            }\n            private fun buildDatabase(context: Context):\n            MovieDatabase {\n                return Room.databaseBuilder(context,\n                MovieDatabase::class.java, \"movie-db\")\n                .build()\n            }\n        }\n    }\n    ```", "```swift\n    class MovieRepository(private val movieService:\n    MovieService, private val movieDatabase:\n    MovieDatabase) { ... }\n    ```", "```swift\n    fun fetchMovies(): Flow<List<Movie>> {\n        return flow {\n            val movieDao: MovieDao =\n                movieDatabase.movieDao()\n            val savedMovies = movieDao.getMovies()\n            if(savedMovies.isEmpty()) {\n                val movies = movieService\n                    .getPopularMovies(apiKey).results\n                movieDao.addMovies(movies)\n                emit(movies)\n            } else {\n                emit(savedMovies)\n            }\n        }.flowOn(Dispatchers.IO)\n    }\n    ```", "```swift\n    val movieDatabase =\n        MovieDatabase.getInstance(applicationContext)\n    movieRepository =\n        MovieRepository(movieService, movieDatabase)\n    ```", "```swift\nimplementation 'androidx.work:work-runtime:2.7.1'\n```", "```swift\n    implementation 'androidx.work:work-runtime:2.7.1'\n    ```", "```swift\n    suspend fun fetchMoviesFromNetwork() {\n        val movieDao: MovieDao = movieDatabase.movieDao()\n        try {\n            val popularMovies = movieService\n                .getPopularMovies(apiKey)\n            val moviesFetched = popularMovies.results\n            movieDao.addMovies(moviesFetched)\n        } catch (exception: Exception) {\n            Log.d(\"MovieRepository\", \"An error occurred:\n                ${exception.message}\")\n        }\n    }\n    ```", "```swift\n    class MovieWorker(private val context: Context,\n    params: WorkerParameters) : Worker(context, params) {\n        override fun doWork(): Result {\n            val movieRepository = (context as\n            MovieApplication).movieRepository\n            CoroutineScope(Dispatchers.IO).launch {\n                movieRepository.fetchMoviesFromNetwork()\n            }\n            return Result.success()\n        }\n    }\n    ```", "```swift\n    override fun onCreate() {\n        ...\n        val constraints =\n            Constraints.Builder().setRequiredNetworkType(\n            NetworkType.CONNECTED).build()\n        val workRequest = PeriodicWorkRequest\n            .Builder(MovieWorker::class.java, 1,\n            TimeUnit.HOURS).setConstraints(constraints)\n            .addTag(\"movie-work\").build()\n        WorkManager.getInstance(\n            applicationContext).enqueue(workRequest)\n    }\n    ```"]