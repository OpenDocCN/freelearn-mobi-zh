["```kt\ninterface Service {\n    fun performService(time: Instant)\n    fun wasServicePerformed(): Boolean\n}\n```", "```kt\ninterface Service {\n    fun performService(time: Instant)\n    fun wasServicePerformed(): Boolean\n}\n```", "```kt\nclass Plumbing : Service {\n    var startedAt: Instant? = null\n    var completedAt: Instant? = null\n    var confirmedAt: Instant? = null\n    override fun performService(time: Instant) {\n        startedAt = time\n    }\n    fun completeService(time: Instant) {\n        completedAt = time\n    }\n    fun confirmService(time: Instant) {\n        confirmedAt = time\n    }\n    override fun wasServicePerformed(): Boolean {\n        return startedAt != null && completedAt != null && confirmedAt != null\n    }\n}\n```", "```kt\nclass Babysitting(val agreedHours: Int) : Service {\n    var startedAt: Instant? = null\n    var endedAt: Instant? = null\n    override fun performService(time: Instant) {\n        startedAt = time\n    }\n    fun endService(time: Instant) {\n        endedAt = time\n    }\n    override fun wasServicePerformed(): Boolean {\n        return if (startedAt == null || endedAt == null) {\n            false\n        } else {\n            Duration.between(startedAt, endedAt).toHours() >= agreedHours\n        }\n    }\n}\n```", "```kt\nclass RoomCleaning(val agreedRooms: Set<String>) : Service {\n    var startedAt: Instant? = null\n    val roomCleaned: MutableSet<String> = mutableSetOf()\n    var endedAt: Instant? = null\n    override fun performService(time: Instant) {\n        startedAt = time\n    }\n    fun cleaned(\n        time: Instant,\n        room: String,\n    ) {\n        roomCleaned.add(room)\n        if (allAgreedRoomsCleaned()) {\n            endedAt = time\n        }\n    }\n    private fun allAgreedRoomsCleaned() = roomCleaned.containsAll(agreedRooms)\n    override fun wasServicePerformed(): Boolean = allAgreedRoomsCleaned()\n}\n```", "```kt\nfun main() {\n    val now = Instant.now()\n    val plumbing = Plumbing()\n    plumbing.performService(now)\n    plumbing.completeService(now.plus(2, HOURS))\n    plumbing.confirmService(now.plus(2, HOURS).plus(3, MINUTES))\n    println(\"Was plumbing service performed? ${plumbing.wasServicePerformed()}\")\n    val babysitting = Babysitting(3)\n    babysitting.performService(now)\n    babysitting.endService(now.plus(3, HOURS))\n    println(\"Was babysitting service performed? ${babysitting.wasServicePerformed()}\")\n    val roomCleaning = RoomCleaning(setOf(\"Kitchen\", \"Bathroom\"))\n    roomCleaning.performService(now)\n    roomCleaning.cleaned(now.plus(3, HOURS), \"Kitchen\")\n    println(\"Was room cleaning service performed? ${roomCleaning.wasServicePerformed()}\")\n}\n```", "```kt\nWas plumbing service performed? true\nWas babysitting service performed? true\nWas room cleaning service performed? false\n```", "```kt\nsealed class Service {\n    var startedAt: Instant? = null\n    fun performService(time: Instant) {\n        startedAt = time\n    }\n    abstract fun wasServicePerformed(): Boolean\n}\n```", "```kt\nclass Plumbing : Service() {\n    var completedAt: Instant? = null\n    var confirmedAt: Instant? = null\n    fun completeService(time: Instant) {\n        completedAt = time\n    }\n    fun confirmService(time: Instant) {\n        confirmedAt = time\n    }\n    override fun wasServicePerformed(): Boolean {\n        return startedAt != null && completedAt != null && confirmedAt != null\n    }\n}\n```", "```kt\nclass Babysitting(val agreedHours: Int) : Service() {\n    var endedAt: Instant? = null\n    fun endService(time: Instant) {\n        endedAt = time\n    }\n    override fun wasServicePerformed(): Boolean {\n        return if (startedAt == null || endedAt == null) {\n            false\n        } else {\n            Duration.between(startedAt, endedAt).toHours() >= agreedHours\n        }\n    }\n}\n```", "```kt\nclass RoomCleaning(val agreedRooms: Set<String>) : Service() {\n    val roomCleaned: MutableSet<String> = mutableSetOf()\n    var endedAt: Instant? = null\n    fun cleaned(\n        time: Instant,\n        room: String,\n    ) {\n        roomCleaned.add(room)\n        if (allAgreedRoomsCleaned()) {\n            endedAt = time\n        }\n    }\n    private fun allAgreedRoomsCleaned() = roomCleaned.containsAll(agreedRooms)\n    override fun wasServicePerformed(): Boolean = allAgreedRoomsCleaned()\n}\n```", "```kt\nsealed class Service {\n    var startedAt: Instant? = null\n    fun performService(time: Instant) {\n        startedAt = time\n    }\n    fun wasServicePerformed(): Boolean {\n        return when (this) {\n            is Babysitting -> durationCoversAgreedHours()\n            is Plumbing -> areAllDatesPresent()\n            is RoomCleaning -> allAgreedRoomsCleaned()\n        }\n    }\n}\n```", "```kt\nclass Plumbing : Service() {\n    var completedAt: Instant? = null\n    var confirmedAt: Instant? = null\n    fun completeService(time: Instant) {\n        completedAt = time\n    }\n    fun confirmService(time: Instant) {\n        confirmedAt = time\n    }\n    internal fun areAllDatesPresent(): Boolean {\n        return startedAt != null && completedAt != null && confirmedAt != null\n    }\n}\n```", "```kt\nclass Babysitting(val agreedHours: Int) : Service() {\n    var endedAt: Instant? = null\n    fun endService(time: Instant) {\n        endedAt = time\n    }\n    internal fun durationCoversAgreedHours(): Boolean {\n        return if (startedAt == null || endedAt == null) {\n            false\n        } else {\n            Duration.between(startedAt, endedAt).toHours() >= agreedHours\n        }\n    }\n}\nclass RoomCleaning(val agreedRooms: Set<String>) : Service() {\n    val roomCleaned: MutableSet<String> = mutableSetOf()\n    var endedAt: Instant? = null\n    fun cleaned(\n        time: Instant,\n        room: String,\n    ) {\n        roomCleaned.add(room)\n        if (allAgreedRoomsCleaned()) {\n            endedAt = time\n        }\n    }\n    internal fun allAgreedRoomsCleaned() = roomCleaned.containsAll(agreedRooms)\n}\n```", "```kt\ninterface ServiceStarter {\n  fun start(time: Instant)\n}\ninterface ServiceChecker {\n  fun wasServicePerformed(): Boolean\n}\nclass Started : ServiceStarter {\n  var startedAt: Instant? = null\n  override fun start(time: Instant) {\n    startedAt = time\n  }\n}\n```", "```kt\ninterface ThreePhaseService : ServiceStarter, ServiceChecker {\n  fun complete(time: Instant)\n  fun confirm(time: Instant)\n}\nclass ThreePhaseServiceImpl(val started: Started = Started()) :\n    ThreePhaseService, ServiceStarter by started {\n  var completedAt: Instant? = null\n  var confirmedAt: Instant? = null\n  override fun complete(time: Instant) {\n    completedAt = time\n  }\n  override fun confirm(time: Instant) {\n    confirmedAt = time\n  }\n  override fun wasServicePerformed(): Boolean {\n    return started.startedAt != null && completedAt != null && confirmedAt != null\n  }\n}\n```", "```kt\nclass Plumbing : ThreePhaseService by ThreePhaseServiceImpl()\n```", "```kt\ninterface HourlyService : ServiceStarter, ServiceChecker {\n  fun end(time: Instant)\n}\nclass HourlyServiceImpl(val agreedHours: Int, val started: Started = Started()) :\n    HourlyService, ServiceStarter by started {\n  var endedAt: Instant? = null\n  override fun end(time: Instant) {\n    endedAt = time\n  }\n  override fun wasServicePerformed(): Boolean =\n    if (started.startedAt == null || endedAt == null) {\n      false\n    } else {\n       Duration.between(started.startedAt, endedAt).toHours() >= agreedHours\n    }\n}\n```", "```kt\nclass Babysitting(agreedHours: Int) : HourlyService by HourlyServiceImpl(agreedHours)\n```", "```kt\ninterface ItemizedService<T> : ServiceStarter, ServiceChecker {\n  fun complete(time: Instant, item: T)\n}\nclass ItemizedServiceImpl<T>(val agreed: Set<T>) : ItemizedService<T>, ServiceStarter by Started() {\n  val completed: MutableSet<T> = mutableSetOf()\n  var endedAt: Instant? = null\n  override fun complete(time: Instant, item: T) {\n    completed.add(item)\n    if (allAgreedItemsCleaned()) {\n      endedAt = time\n    }\n  }\n  private fun allAgreedItemsCleaned() = completed.containsAll(agreed)\n  override fun wasServicePerformed(): Boolean = allAgreedItemsCleaned()\n}\n```", "```kt\nclass RoomCleaning(agreedRooms: Set<String>) :\n    ItemizedService<String> by ItemizedServiceImpl(agreedRooms)\n```", "```kt\nfun main() {\n    val now = Instant.now()\n    val plumbing = Plumbing()\n    plumbing.start(now)\n    plumbing.complete(now.plus(2, HOURS))\n    plumbing.confirm(now.plus(2, HOURS).plus(3, MINUTES))\n    println(\"Was plumbing service performed? ${plumbing.wasServicePerformed()}\")\n    val babysitting = Babysitting(3)\n    babysitting.start(now)\n    babysitting.end(now.plus(3, HOURS))\n    println(\"Was babysitting service performed? ${babysitting.wasServicePerformed()}\")\n    val roomCleaning = RoomCleaning(setOf(\"Kitchen\", \"Bathroom\"))\n    roomCleaning.start(now)\n    roomCleaning.complete(now.plus(10, MINUTES), \"Kitchen\")\n    println(\"Was room cleaning service performed? ${roomCleaning.wasServicePerformed()}\")\n}\n```", "```kt\ndata class Plumbing(\n    val startedAt: Instant? = null,\n    val completedAt: Instant? = null,\n    val confirmedAt: Instant? = null,\n)\ndata class Babysitting(\n    val agreedHours: Int,\n    val startedAt: Instant? = null,\n    val endedAt: Instant? = null,\n)\ndata class RoomCleaning(\n    val agreedRooms: Set<String>,\n    val startedAt: Instant? = null,\n    val completed: Set<String> = emptySet(),\n    val endedAt: Instant? = null,\n)\n```", "```kt\n  val plumbing = Plumbing()\n  val started = plumbing.copy(started = Instant.now())\n```", "```kt\nfun <T> T.start(time: Instant, transform: T.(Instant) -> T): T = transform(time)\n```", "```kt\nPlumbing().start(now) { startedAt -> copy(startedAt = startedAt) }\n```", "```kt\nfun Plumbing.complete(time: Instant): Plumbing = copy(completedAt = time)\nfun Plumbing.confirm(time: Instant): Plumbing = copy(confirmedAt = time)\nfun Babysitting.end(time: Instant): Babysitting = copy(endedAt = time)\nfun RoomCleaning.complete(\n    time: Instant,\n    room: String,\n): RoomCleaning {\n    val newCleaned = completed + room\n    val newEnded = if (completed.containsAll(agreedRooms)) time else endedAt\n    return copy(completed = newCleaned, endedAt = newEnded)\n}\n```", "```kt\nfun Plumbing.wasServicePerformed(): Boolean = startedAt != null && completedAt != null && confirmedAt != null\nfun Babysitting.wasServicePerformed(): Boolean =\n    if (startedAt == null || endedAt == null) {\n        false\n    } else {\n        Duration.between(startedAt, endedAt).toHours() >= agreedHours\n    }\nfun RoomCleaning.wasServicePerformed(): Boolean = endedAt != null\n```", "```kt\nfun main() {\n    val now = Instant.now()\n    val plumbing =\n        Plumbing()\n            .start(now) { startedAt -> copy(startedAt = startedAt) }\n            .complete(now.plus(2, HOURS))\n            .confirm(now.plus(2, HOURS).plus(3, MINUTES))\n    println(\"Was plumbing service performed? ${plumbing.wasServicePerformed()}\")\n    val babysitting =\n        Babysitting(3)\n            .start(now) { startedAt -> copy(startedAt = startedAt) }\n            .end(now.plus(3, HOURS))\n    println(\"Was babysitting service performed? ${babysitting.wasServicePerformed()}\")\n    val roomCleaning =\n        RoomCleaning(setOf(\"Kitchen\", \"Bathroom\"))\n            .start(now) { startedAt -> copy(startedAt = startedAt) }\n            .complete(now.plus(10, MINUTES), \"Kitchen\")\n    println(\"Was room cleaning service performed? ${roomCleaning.wasServicePerformed()}\")\n}\n```", "```kt\n    val babysitting = Babysitting()\n        .withAgreedHoursOf(3)\n        .startAt(startTime)\n        .endAt(endTime)\n```"]