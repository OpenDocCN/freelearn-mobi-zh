- en: '*Chapter 13*: Getting Started with MVC and Collection Views'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you modified the cells inside the **Explore** screen,
    the **Restaurant List** screen, and the **Locations** screen to match the app
    tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*, Setting
    Up the User Interface*. You have completed the initial UI for the *Let's Eat*
    app, and this concludes *Part 2* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter begins *Part 3* of this book, where you will focus on the code
    that makes your app work. In this chapter, you will learn about the **Model-View-Controller
    (MVC)** design pattern and how the different parts of an app interact with one
    another. Then, you'll implement a collection view programmatically (which means
    implementing it using code instead of storyboards) using a playground, to understand
    how collection views work. Finally, you'll revisit the collection views you implemented
    in the **Explore** and **Restaurant List** screens, so you can see what the differences
    are between implementing them in storyboard and implementing them programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll understand the MVC design pattern, learn
    how a create a collection view controller programmatically and learn how to use
    collection view delegates and data source protocols.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Model-View-Controller design pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring controllers and classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter13` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3wsOeCZ](https://bit.ly/3wsOeCZ)'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new playground and call it `CollectionViewBasics`. You can use this
    playground to type in and run all the code in this chapter as you go along. Before
    you do, let's take a look at the Model-View-Controller design pattern, an approach
    commonly used to write iOS apps.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Model-View-Controller design pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Model-View-Controller** (**MVC**) design pattern is a common approach
    used to build iOS apps. MVC divides an app into three different parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This handles data storage and representation, and data processing
    tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This includes all the things that are on the screen that the user
    can interact with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: This manages the flow of information between model and view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One notable feature of MVC is that view and model do not interact with one another;
    instead, all communication is managed by the controller.
  prefs: []
  type: TYPE_NORMAL
- en: For example, imagine you're at a restaurant. You look at a menu and choose something
    you want. Then, a waiter comes, takes your order, and sends it to the cook. The
    cook prepares your order, and, when it is done, the waiter takes the order and
    brings it out to you. In this scenario, the menu is the view, the waiter is the
    controller, and the cook is the model. Also, note that all interactions between
    you and the kitchen are only through the waiter; there is no interaction between
    you and the cook.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To find out more about MVC, go to [https://en.wikipedia.org/wiki/Model–view–controller](https://en.wikipedia.org/wiki/Model-view-controller).
  prefs: []
  type: TYPE_NORMAL
- en: To see how MVC works, let's learn more about controllers and classes. You will
    see what it takes to implement a view controller that is required to manage a
    collection view, which is used in the **Explore** screen and the **Restaurant
    List** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring controllers and classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have implemented view controller scenes in `the Main storyboard
    file` using Interface Builder. You added `ExploreViewController`, a view controller
    that manages the collection view inside the `RestaurantListViewController`, a
    view controller that manages the collection view inside the **Restaurant List**
    screen, to your project. However, you still haven't learned how the code you added
    to each view controller works, so let's look at that now.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You may wish to re-read [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155),
    *Building Your User Interface*, where you created the `ExploreViewController`
    class, and [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171), *Finishing
    Up Your User Interface*, where you created the `RestaurantListViewController`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: When a typical iOS app is launched, the view controller for the first screen
    to be displayed is loaded. The view controller has a `view` property, and automatically
    loads the view instance assigned to its `view` property. That view may have subviews,
    which are also loaded. If one of the subviews is a collection view, it will have
    `dataSource` and `delegate` properties. The `dataSource` property is assigned
    to an object that provides data to the collection view. The `delegate` property
    is assigned to an object that handles user interaction with the collection view.
    Typically, the view controller for the collection view will also be assigned to
    the collection view's `dataSource` and `delegate` properties. The method calls
    that a collection view will send to its view controller are declared in the `UICollectionViewDataSource`
    and `UICollectionViewDelegate` protocols. Remember that protocols only provide
    method declarations; the implementation of those method calls are in the view
    controller. The view controller will then provide the requested data for the collection
    view or handle the user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a closer look at collection views and collection view protocols in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding collection views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A collection view displays an ordered collection of collection view cells using
    customizable layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about collection views, you can refer to [https://developer.apple.com/documentation/uikit/uicollectionview](https://developer.apple.com/documentation/uikit/uicollectionview).
  prefs: []
  type: TYPE_NORMAL
- en: The layout for the collection view is dictated by `UICollectionViewFlowLayout`.
    It determines the flow direction and size of the elements in a collection view.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `UICollectionViewFlowLayout`, you can refer to [https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout](https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout).
  prefs: []
  type: TYPE_NORMAL
- en: The data displayed by a collection view is normally provided by a view controller.
    A view controller providing data for a collection view must conform to the `UICollectionViewDataSource`
    protocol. This protocol declares a list of methods that tells the collection view
    how many cells to display and what to display in each cell. It also covers the
    creation and configuration of supplementary views (such as the collection view
    section header).
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UICollectionViewDataSource` protocol, you can refer
    to [https://developer.apple.com/documentation/uikit/uicollectionviewdatasource](https://developer.apple.com/documentation/uikit/uicollectionviewdatasource).
  prefs: []
  type: TYPE_NORMAL
- en: To provide user interaction, a view controller for a collection view must also
    conform to the `UICollectionViewDelegate` protocol, which declares a list of methods
    which are triggered when a user interacts with the collection view.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UICollectionViewDelegate` protocol, you can refer to
    [https://developer.apple.com/documentation/uikit/uicollectionviewdelegate](https://developer.apple.com/documentation/uikit/uicollectionviewdelegate).
  prefs: []
  type: TYPE_NORMAL
- en: To understand how collection views work, you'll implement a view controller
    that controls a collection view in your `CollectionViewBasics` playground. You
    will then compare this with the implementation for the view controllers in the
    **Explore** and **Restaurant List** screens in the next section. As there is no
    storyboard in the playground, you can't add UI elements the way you have done
    in previous chapters. Instead, you will add them programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: Adding model objects to a collection view will be covered in the next chapter,
    [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*, Getting Data
    into Collection Views*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll start by creating the `CollectionViewExampleController` class, an implementation
    of a view controller that manages a collection view. After that, you''ll create
    an instance of `CollectionViewExampleController` and make it display a collection
    view containing a single collection view cell in the playground''s live view.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `CollectionViewBasics` playground that you have created at the beginning
    of this chapter. At the very top of the playground, remove the `var` statement
    and add an `import PlaygroundSupport` statement. Your playground should now contain
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code after the `import` statements to declare the `CollectionViewExampleController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This class is a subclass of `UIViewController`, a class that Apple provides
    to manage views on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code inside the curly braces to add an optional property,
    `collectionView`, to the `CollectionViewExampleController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An instance of a collection view will be assigned to this property later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that your code looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the next section, you'll learn how to set the number of cells for a collection
    view to display, and how to set the contents of each cell.
  prefs: []
  type: TYPE_NORMAL
- en: Conforming to the UICollectionViewDataSource protocol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A collection view displays a grid of collection view cells on the screen. However,
    before it can do this, it needs to know how many cells to display, and what to
    put in each cell. To provide this information to the collection view, you will
    make the `CollectionViewExampleController` class conform to the `UICollectionViewDataSource`
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'This protocol has two required methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`collectionView(_:numberOfItemsInSection:)` is called by the collection view
    to determine how many collection view cells should be displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collectionView(_:cellForItemAt:)` is called by the collection view to determine
    what to display in each collection view cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s add some code to make `CollectionViewExampleController` conform to the
    `UICollectionViewDataSource` protocol. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make `CollectionViewExampleController` adopt the `UICollectionViewDataSource`
    protocol, type a comma after the superclass declaration and then type `UICollectionViewDataSource`.
    When you are done, your code should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An error will appear because you have not yet implemented the two required
    methods. Click on the error icon:![Figure 13.1: Editing area showing error icon'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_13.01_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 13.1: Editing area showing error icon'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The error message states that the required methods for the `UICollectionViewDataSource`
    protocol are missing. Click on the **Fix** button to add the required methods:![Figure
    13.2: Error explanation and Fix button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_13.02_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 13.2: Error explanation and Fix button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that your code looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a class definition, convention dictates that properties are declared at
    the top of the class, before any method declarations. Rearrange the code so that
    the `collectionView` property declaration is at the top, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `collectionView(_:numberOfItemsInSection:)`, click on the word `code` and
    type `1`. The completed method should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `collectionView(_:cellForItemAt:)`, click on the word `code` and modify
    the method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here is how this method works. Imagine you have 1,000 items to display in a
    collection view. You don't need 1,000 collection view cells; you only need just
    enough to fill the screen. Collection view cells that scroll off the top of the
    screen can be reused to display items that appear at the bottom of the screen.
    To make sure you are using the right type of cell, you use a reuse identifier
    to identify a cell type. The reuse identifier needs to be registered with the
    collection view, which you will do later. The next line of code sets the cell's
    background color to red, and the line after that returns the cell, which is then
    displayed on the screen. The process is repeated for the number of cells given
    in the first method, which, in this case, is 1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that your `CollectionViewExampleController` class looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have completed the implementation of the `CollectionViewExampleController`
    class. In the next section, you'll learn how to create an instance of this class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CollectionViewExampleController instance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you have declared and defined the `CollectionViewExampleController`
    class, you will write a method to create an instance of it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type in the following code after the `collectionView` variable declaration
    to declare a new method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This declares a new method, `createCollectionView()` which you'll use to create
    an instance of a collection view and assign it to the `collectionView` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type in the following code after the opening curly brace to define the body
    of this method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a new collection view instance and assigns it to `collectionView`.
    The dimensions of this collection view are exactly the same as its enclosing view,
    with the default flow layout. The flow layout dictates the order the collection
    view cells are displayed, which is left to right.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the next line, and then type in the following code to set the collection
    view''s `dataSource` property to an instance of `CollectionViewExampleController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `dataSource` property of a collection view will specify which object contains
    the implementation of the required `UIViewControllerDataSource` methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the next line, and then type in the following code to set the collection
    view''s background color to white:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the next line, and then type in the following code to set the identifier
    for the collection view cells in the collection view to `BoxCell`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This identifier will be used in the `collectionView(_:cellForItemAt:)` method
    to identify the type of collection view cells to be reused.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the next line, and then type in the following code to add the collection
    view as a subview to the view of the `CollectionViewExampleController` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When an instance of a view controller is loaded into memory, its view is also
    loaded, along with any subviews. In this case, the `CollectionViewExampleController`
    instance will automatically load its view, and since the collection view is a
    subview of its view, the collection view will also be loaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the completed method looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you need a suitable place to call this method. View controllers have a
    `view` property. The view assigned to the `view` property will be automatically
    loaded when the view controller is loaded. After a view has been loaded successfully,
    the view controller''s `viewDidLoad()` method will be called. You will override
    the `viewDidLoad()` method in your `CollectionViewControllerExample` class to
    call `createCollectionView()`. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type in the following code just before the `createCollectionView()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This sets the size of the live view, creates a collection view instance, assigns
    it to `collectionView` and adds it as a subview to the view of the `CollectionViewExampleController`
    instance. The collection view then calls the data source methods to determine
    how many collection view cells to display, and what to display in each cell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`collectionView(_:numberOfItemsInSection:)` returns `1`, so a single collection
    view cell will be displayed.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`collectionView(_:cellForItemAt:)` creates the cell, sets the background color
    of the cell to red, and returns it for display.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that your completed playground looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now it''s time to see it in action. Type the following after all the other
    code in the playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command creates the instance of `CollectionViewExampleController` and displays
    its view in the playground's live view. The `createCollectionView()` method will
    create a collection view and add it as a subview to the `CollectionViewExampleController`
    instance's view, and it will appear on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the playground. If you don''t see a representation of the collection view
    on your screen, you will need to turn on the playground''s live view. Click the
    Adjust Editor Options button:![Figure 13.3: Adjust Editor Options button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_13.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 13.3: Adjust Editor Options button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make sure that **Live View** is selected:![Figure 13.4: Adjust Editor Options
    menu with Live View selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_13.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 13.4: Adjust Editor Options menu with Live View selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the collection view displaying one red collection view cell in
    the live view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.5: Playground live view showing collection view with one collection
    view cell'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.05_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.5: Playground live view showing collection view with one collection
    view cell'
  prefs: []
  type: TYPE_NORMAL
- en: You've just created a view controller for a collection view, created an instance
    of it and displayed a collection view in the playground's live view. Good job!
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll revisit how collection view controllers are used
    in the **Explore** and **Restaurant List** screens, which you implemented in [*Chapter
    10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*, Building Your User Interface*,
    and [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*, Finishing
    Up Your User Interface*. Using what you have learned in this section as a reference,
    you should be able to understand how they work.
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting the Explore and Restaurant List screens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember the `ExploreViewController` class that you added in [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*,
    Building Your User Interface*, and the `RestaurantListViewController` class that
    you added in[*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*, Finishing
    Up Your User Interface*? Both of these are examples of view controllers that manage
    a collection view. Note that the code in both of them is very similar to that
    in your playground. The differences are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You set the cell background color programmatically in `collectionView(_:cellForItemAt:)`,
    instead of setting it in the Attributes inspector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You created and assigned the collection view to the `collectionView` property
    in `CollectionViewExampleController` programmatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You set the dimensions of the collection view programmatically in `UICollectionView(frame:
    collectionViewLayout:)`, instead of using the Size inspector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You connected the data source outlet to the view controller programmatically,
    instead of using the Connections inspector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You set the background color of the collection view programmatically, instead
    of using the Attributes inspector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You set the reuse identifier for the collection view cell programmatically,
    instead of using the Attributes inspector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You added the collection view as a subview of the view for `CollectionViewExampleController`
    programmatically, instead of dragging in a **Collection View** object from the
    Library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the `LetsEat` project. Review [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*,
    Building Your User Interface* and [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*,
    Finishing Up Your User Interface,* once more, in order to compare and contrast
    the implementation of the collection view using the storyboard, and by doing the
    implementation programmatically as you have done in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the MVC design pattern and collection view
    controllers in detail. You then revisited the collection views used in the **Explore**
    and **Restaurant List** screens and learned how they work.
  prefs: []
  type: TYPE_NORMAL
- en: You should now understand the MVC design pattern, how to create a collection
    view controller, and how to use the collection view data source protocol. This
    will enable you to implement collection view controllers for your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: Up to this point, you have set up the views and view controllers for the `ExploreViewController`
    instance so that it may be displayed by the collection view in the **Explore**
    screen.
  prefs: []
  type: TYPE_NORMAL
