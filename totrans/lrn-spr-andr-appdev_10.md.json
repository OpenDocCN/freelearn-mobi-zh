["```kt\n<!-- This is to implement the testing functions for the spring project -->\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-test</artifactId>\n   <scope>test</scope>\n</dependency>\n```", "```kt\n// Dependencies for local unit tests\ndependencies{\ntestImplementation \"junit:junit:$rootProject.ext.junitVersion\"\n\n// Espresso UI Testing dependencies.\nandroidTestImplementation \"com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion\"\nandroidTestImplementation \"com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion\"\nandroidTestImplementation \"com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion\"\n}\n```", "```kt\nclass JUnitTestClass {\n\n    companion object {\n        @BeforeClass\n        @JvmStatic\n        fun runBeforeClass(){\n            println(\"============ @BeforeClass ============\\n\")\n        }\n\n        @AfterClass\n        @JvmStatic\n        fun runAfterClass(){\n            println(\"============ @AfterClass ============\")\n        }\n    }\n\n    @Before\n    fun runBefore(){\n        println(\"============ @Before ============\")\n    }\n\n    @After\n    fun runAfter(){\n        println(\"============ @After ============\\n\")\n    }\n\n    @Test\n    fun runTest1(){\n        println(\"============ @TEST One ============\")\n    }\n\n    @Test\n    fun runTest2(){\n        println(\"============ @TEST Two ============\")\n    }\n}\n```", "```kt\n@Test\nfun runTest1(){\n    println(\"============ @TEST One Start ============\")\n    assertEquals(6, doSum(3,2))\n    println(\"============ @TEST One End ============\")\n}\n\nprivate fun doSum(num1: Int, num2: Int): Int{\n        return num1 + num2\n    }\n```", "```kt\n@RunWith(SpringRunner::class)\n@DataJpaTest\nclass ProfileRepositoryTest {\n\n    @Autowired\n    private lateinit var entityManager: TestEntityManager\n\n    @Autowired\n    private lateinit var profileRepository: ProfileRepository\n\n    @Test\n    fun getUserTesting(){\n        val newProfile = getNewProfile()\n        val saveProfile = entityManager.merge(newProfile)\n\n        val foundProfile = profileRepository.getOne(saveProfile.id!!)\n\n        assertThat(foundProfile.username)\n                .isEqualTo(saveProfile.username)\n    }\n\n    private fun getNewProfile(): Profile {\n        return Profile( \"naruto\",\n                \"12345\",\n                \"naruto123@gmail.com\",\n                \"Naruto\",\n                \"Uzumak\")\n    }\n  }\n```", "```kt\nval saveProfile = entityManager.merge(newProfile)\n```", "```kt\nval foundProfile = profileRepository.getOne(saveProfile.id!!)\n```", "```kt\n assertThat(foundProfile.username).isEqualTo(saveProfile.username)\n```", "```kt\ntestImplementation 'junit:junit:4.12'\nandroidTestImplementation 'com.android.support.test:runner:1.0.2'\n\n// Espresso UI Testing dependencies.\nandroidTestImplementation \"com.android.support.test.espresso:espresso-core:3.0.2\"\nandroidTestImplementation \"com.android.support.test.espresso:espresso-contrib:3.0.2\"\nandroidTestImplementation \"com.android.support.test.espresso:espresso-intents:3.0.2\"\n```", "```kt\ntestInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n```", "```kt\n----\n----\n userLists.adapter = UserItemAdapter(this, userList)\n----\n----\n```", "```kt\ndata class User(var userID: Int, var username: String)\n```", "```kt\n// User count Matching\n@Test\nfun getCountUser(){\n    onView(withId(R.id.userLists))\n        .check(matches(itemCount(20)))\n}\n```", "```kt\nclass CustomUserMatchers {\n    companion object {\n        fun itemCount(count: Int): Matcher<View>{\n            return object : BoundedMatcher<View, RecyclerView>(RecyclerView::class.java){\n                override fun describeTo(description: Description?) {\n                    description!!.appendText(\"Total User = $count\")\n                }\n\n                override fun matchesSafely(item: RecyclerView?): Boolean {\n                    return item?.adapter?.itemCount == count\n                }\n            }\n        }\n    }\n}\n```", "```kt\n// User Click with a position number\n@Test\nfun getUserPosition(){\n    onView(withId(R.id.userLists))\n        .perform(actionOnItemAtPosition\n        <RecyclerView.ViewHolder>(34, click()))\n}\n```", "```kt\n// User list display test\n@Test\nfun getIsDisplayed(){\n    onView(withId(R.id.userLists))\n        .check(matches(isDisplayed()))\n}\n```", "```kt\n// User list display test\n@Test\nfun getIsClickable(){\n    onView(withId(R.id.userRoot))\n        .check(matches(isClickable()))\n}\n```", "```kt\n// User list scroll to bottom\n@Test\nfun getScrollToBottom(){\n    onView(withId(R.id.userLists))\n        .perform(scrollToPosition<RecyclerView.ViewHolder>(activityTestRule.activity.userLists.adapter!!.itemCount - 1))\n}\n```"]