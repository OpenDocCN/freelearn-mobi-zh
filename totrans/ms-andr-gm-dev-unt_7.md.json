["```kt\n    using System.Collections; \n    using System.Collections.Generic; \n    using UnityEngine; \n\n    using GooglePlayGames; \n    using UnityEngine.SocialPlatforms; \n    using GooglePlayGames.BasicApi; \n\n    using UnityEngine.UI; \n\n    public class mainMenuScript : MonoBehaviour \n    { \n        bool isUserAuthenticated = false; \n\n        // Use this for initialization \n        void Start(){ \n            PlayGamesPlatform.Activate(); \n            PlayGamesPlatform.DebugLogEnabled = true; \n        } \n\n        // Update is called once per frame \n        void Update() \n        { \n            if (!isUserAuthenticated){ \n                Social.localUser.Authenticate((bool success) => { \n                    if (success){ \n                        Debug.Log(\"You've successfully logged in\"); \n                        isUserAuthenticated = true; \n                    } else { \n                        Debug.Log(\"Login failed for some reason\"); \n                    } \n                }); \n            } \n        } \n    }  \n\n```", "```kt\nif (playerHealth <= 0 || enemyHealth <= 0) { \n    bGameover = true; \n\n    gameOverText.enabled = true; \n    resetButton.gameObject.SetActive(true); \n    mainMenuButton.gameObject.SetActive(true); \n\n    Instantiate(particlePrefab); \n    gameplayCount++; \n\n    if (gameplayCount == 1){ \n        Social.ReportProgress (PunchyPunchAchievements. achievement_played_first_time, 100, (bool sucsess) => { }); \n    } else if (gameplayCount == 5) { \n        Social.ReportProgress (PunchyPunchAchievements. achievement_played_5_times, 100, (bool sucsess) => { }); \n    } else if (gameplayCount == 50) { \n        Social.ReportProgress (PunchyPunchAchievements. achievement_played_50_times, 100, (bool sucsess) => { }); \n    } else if (gameplayCount == 100) { \n        Social.ReportProgress (PunchyPunchAchievements. achievement_played_100_times, 100, (bool sucsess) => { }); \n    } else if (gameplayCount == 1000) {\n        Social.ReportProgress (PunchyPunchAchievements. achievement_played_1000_times, 100,(bool sucsess) => { }); \n    } else {\n        ...   \n    } \n    Debug.Log(\" +++++ GAMEOVER +++++\"); \n} \n\n```", "```kt\n    public void openAchievements() { \n        Social.localUser.Authenticate((bool success) => { \n            if (success){ \n                Debug.Log(\"You've successfully logged in\"); \n                Social.ShowAchievementsUI(); \n            } else { \n                Debug.Log(\"Login failed for some reason\"); \n            } \n        });    \n    } \n\n```", "```kt\n    PlayerPrefs.SetInt(\"GameplayCount\", gameplayCount); \n\n```", "```kt\n    int gameplayCount = PlayerPrefs.GetInt(\"GameplayCount\"); \n\n```", "```kt\n    using UnityEngine.Advertisements;   \n\n```", "```kt\n    if (gameplayCount == 1) { \n        Social.ReportProgress (PunchyPunchAchievements. \n        achievement_played_first_time, 100, (bool sucsess) => { }); \n    } \n    else if (gameplayCount == 5) { \n        Social.ReportProgress (PunchyPunchAchievements. \n        achievement_played_5_times, 100, (bool sucsess) => { }); \n    } \n    else if (gameplayCount == 50) { \n        Social.ReportProgress (PunchyPunchAchievements. \n        achievement_played_50_times, 100, (bool sucsess) => { }); \n    }\n    else if (gameplayCount == 100) { \n        Social.ReportProgress (PunchyPunchAchievements. \n        achievement_played_100_times, 100, (bool sucsess) => { }); \n    } \n    else if (gameplayCount == 1000) { \n        Social.ReportProgress (PunchyPunchAchievements. \n        achievement_played_1000_times, 100, (bool sucsess) => { }); \n    } else { \n        if (gameplayCount % 3 == 0){ \n            ShowAd(); \n        } \n    }  \n\n```", "```kt\n    public void ShowAd() \n    { \n        if (Advertisement.IsReady()) \n        { \n            Advertisement.Show(\"video\", new ShowOptions() { \n                resultCallback = adViewResult}); \n        } \n    }  \n\n```", "```kt\n    public void adViewResult(ShowResult result) { \n        switch (result) { \n            case ShowResult.Finished: \n                Debug.Log(\" Player viewed complete Ad\"); break; \n            case ShowResult.Skipped: \n                Debug.Log(\" Player Skipped Ad \"); break; \n            case ShowResult.Failed: \n                Debug.Log(\"Problem showing Ad \"); break;             \n        } \n    } \n\n```", "```kt\n    using System; \n    using System.Collections.Generic; \n    using UnityEngine; \n    using UnityEngine.Purchasing; \n\n    public class IAPManager : MonoBehaviour, IStoreListener \n    { \n        public static IAPManager instance { set; get; } \n\n        private static IStoreController m_StoreController;              \n        private static IExtensionProvider m_StoreExtensionProvider;  \n\n        public static string kRemoveAds = \"removeads\"; // 1 \n\n        void Awake() { \n            instance = this; \n        } \n\n        void Start(){ \n            if (m_StoreController == null){ \n                InitializePurchasing(); \n            } \n        } \n\n        public void InitializePurchasing(){ \n            if (IsInitialized()){ \n                return; \n            } \n            var builder = ConfigurationBuilder.Instance (StandardPurchasingModule.Instance()); \n            builder.AddProduct(kRemoveAds, ProductType.Consumable);// 2 \n            UnityPurchasing.Initialize(this, builder);  \n        } \n\n        private bool IsInitialized(){ \n            return m_StoreController != null && m_StoreExtensionProvider != null; \n        } \n\n        public void BuyRemoveAds(){ \n            BuyProductID(kRemoveAds); \n        } //3 \n\n        void BuyProductID(string productId){ \n            // If Purchasing has been initialized ... \n            if (IsInitialized()){ \n                Product product = m_StoreController. \n                products.WithID(productId); \n\n                if (product != null && product.availableToPurchase){ \n                    Debug.Log(string.Format(\"Purchasing product \n                    asychronously: '{0}'\", product.definition.id)); \n                    m_StoreController.InitiatePurchase(product); \n                } \n                else { \n                    Debug.Log(\"BuyProductID: FAIL. Not purchasing product, either is not found or is not available for purchase\"); \n                } \n            } else { \n                Debug.Log(\"BuyProductID FAIL. Not initialized.\"); \n            } \n        } \n\n        public void RestorePurchases() \n        { \n            // If Purchasing has not yet been set up ... \n            if (!IsInitialized()){ \n                Debug.Log(\"RestorePurchases FAIL. Not initialized.\"); \n                return; \n            } \n\n            if (Application.platform == RuntimePlatform.IPhonePlayer || \n                Application.platform == RuntimePlatform.OSXPlayer) { \n\n                Debug.Log(\"RestorePurchases started ...\"); \n                var apple = m_StoreExtensionProvider. GetExtension<IAppleExtensions>(); \n                apple.RestoreTransactions((result) => { \n\n                Debug.Log(\"RestorePurchases continuing: \" + result + \". If no further messages, no purchases available to restore.\"); \n            }); \n        } else { \n            Debug.Log(\"RestorePurchases FAIL. Not supported on this \n                       platform. Current = \" + Application.platform); \n        } \n    } \n\n    // --- IStoreListener \n    public void OnInitialized (IStoreController controller, \n                               IExtensionProvider extensions) { \n        Debug.Log(\"OnInitialized: PASS\"); \n        m_StoreController = controller; \n        m_StoreExtensionProvider = extensions; \n    } \n    public void OnInitializeFailed(InitializationFailureReason error){ \n        Debug.Log(\"OnInitializeFailed InitializationFailureReason:\" + \n                   error); \n    } \n\n    public PurchaseProcessingResult ProcessPurchase (PurchaseEventArgs args) { \n        if (String.Equals(args.purchasedProduct.definition.id, kRemoveAds, StringComparison.Ordinal)){ \n            Debug.Log(string.Format(\"ProcessPurchase: PASS. Product: '{0}'\", args.purchasedProduct.definition.id)); \n\n            PlayerPrefs.SetInt(\"noads\", 1); //4 \n            mainMenuScript.noAdsButton.gameObject.SetActive(false); \n        } else { \n            Debug.Log(string.Format(\"ProcessPurchase: FAIL. Unrecognized product: '{0}'\", args.purchasedProduct.definition.id)); \n        } \n        return PurchaseProcessingResult.Complete; \n    } \n\n    public void OnPurchaseFailed(Product product, PurchaseFailureReason failureReason) { \n        Debug.Log(string.Format(\"OnPurchaseFailed: FAIL. Product: \n                                 '{0}', PurchaseFailureReason: {1}\", \n                                  0 product.definition.storeSpecificId, \n                                  failureReason)); \n        } \n    } \n\n```", "```kt\n    builder.AddProduct(kRemoveAds, ProductType.Consumable); \n\n```", "```kt\n    public void BuyRemoveAds() { \n        BuyProductID(kRemoveAds); \n    }  \n\n```", "```kt\n    if (String.Equals(args.purchasedProduct.definition.id, kRemoveAds, \n                      StringComparison.Ordinal)) { \n        Debug.Log(string.Format(\"ProcessPurchase: PASS. Product: \n        '{0}'\", args.purchasedProduct.definition.id)); \n\n        PlayerPrefs.SetInt(\"noads\", 1); //4 \n        mainMenuScript.noAdsButton.gameObject.SetActive(false); \n    }\n\n```", "```kt\n    public void noAdsButton() { \n        IAPManager.instance.BuyRemoveAds(); \n    } \n\n```", "```kt\n    using System.Collections; \n    using System.Collections.Generic; \n    using UnityEngine; \n\n    using GooglePlayGames; \n    using UnityEngine.SocialPlatforms; \n    using GooglePlayGames.BasicApi; \n\n    using UnityEngine.UI; \n\n    public class mainMenuScript : MonoBehaviour \n    { \n        bool isUserAuthenticated = false;  \n        public static Button noAdsButton; \n\n        // Use this for initialization \n        void Start() \n        { \n            Debug.Log(\"[Application Launch] Awake\"); \n\n            PlayGamesPlatform.Activate(); \n            PlayGamesPlatform.DebugLogEnabled = true; \n\n            int value = PlayerPrefs.GetInt(\"noads\"); \n            if (value == 1) { \n                noAdsButton.gameObject.SetActive(false); \n            } \n\n        } \n\n        // Update is called once per frame \n        void Update() \n        { \n            if (!isUserAuthenticated) { \n                Social.localUser.Authenticate((bool success) => { \n                    if (success){ \n                        Debug.Log(\"You've successfully logged in\"); \n                        isUserAuthenticated = true; \n                    } else { \n                        Debug.Log(\"Login failed for some reason\"); \n                    } \n                }); \n            } \n        } \n\n```", "```kt\n    using System.Collections; \n    using System.Collections.Generic; \n    using UnityEngine; \n\n    using Facebook.Unity; \n    using System.Linq; \n\n    public class fbManager : MonoBehaviour \n    { \n        void Awake() { \n            if (!FB.IsInitialized) { \n                FB.Init(); \n            } else { \n                FB.ActivateApp(); \n            } \n        } \n\n        public void Share() { \n            if (FB.IsLoggedIn) \n            { \n                FB.ShareLink(contentTitle: \"Growl Games Studio\", \n                    contentURL: new System.Uri  \n                    (\"http://www.growlgamesstudio.com\"), \n                    contentDescription: \"Like and Share my page\", \n                    callback: onShare);  \n            } else { \n                // Debug.Log(\"User Cancelled Login\"); \n                FB.LogInWithReadPermissions(null, callback: onLogin); \n            }         \n        } \n\n        private void onLogin(ILoginResult result) { \n            if (result.Cancelled) \n            { \n                Debug.Log(\" user cancelled login\"); \n            } \n            else { \n                Share(); \n            } \n        } \n\n        private void onShare(IShareResult result) { \n            if (result.Cancelled || !string.IsNullOrEmpty \n               (result.Error)) \n            { \n                Debug.Log(\"sharelink error: \" + result.Error); \n            } else if(!string.IsNullOrEmpty(result.PostId)) { \n                ... \n            } \n        } \n    } // class \n\n```", "```kt\n    public void openTwitter() {\n        string appStoreLink = \n        \"https://play.google.com/store/apps/details? \n        id=com.growlgamesstudio.pizZapMania\"; \n\n        string twitterAddress = \"http://twitter.com/intent/tweet\"; \n        string descriptionParameter = \"Punchy Punch\"; \n        string message = \"GET THIS AWERSOME GAME\";//text string \n\n        Application.OpenURL(twitterAddress + \"?text=\" + \n            WWW.EscapeURL(message + \"n\" + descriptionParameter + \"n\" \n            + appStoreLink)); \n    }  \n\n```"]