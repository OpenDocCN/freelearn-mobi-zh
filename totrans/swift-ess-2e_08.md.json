["```swift\nvar api:GitHubAPI!\nvar users:[String] = []\nvar repos:[String:[[String:String]]] = [:]\nfunc loadReposFor(user:String, fn:([[String:String]])->()) {\n  repos[user] = []\n  api.withUserRepos(user) {\n    results in\n    self.repos[user] = results\n    fn(results)\n  }\n}\nfunc addUser(user:String) {\n  users += [user]\n  users.sortInPlace({ $0 < $1 })\n}\n```", "```swift\napi = GitHubAPI.connect()\naddUser(\"alblue\")\n```", "```swift\nlet delegate = WKExtension.sharedExtension().delegate as! ExtensionDelegate\n```", "```swift\nclass UserRowController: NSObject {\n  @IBOutlet weak var name: WKInterfaceLabel!\n}\n```", "```swift\n  @IBOutlet weak var usersTable: WKInterfaceTable!\n```", "```swift\nlet users = delegate.users\nusersTable.setNumberOfRows(users.count, withRowType: \"user\")\nfor (index,user) in users.enumerate() {\n  let controller = usersTable.rowControllerAtIndex(index) as! UserRowController\n  controller.name.setText(user)\n}\n```", "```swift\nclass UserRowController: NSObject {\n  @IBOutlet weak var name: WKInterfaceLabel!\n  @IBOutlet weak var icon: WKInterfaceImage!\n}\n```", "```swift\ncontroller.name.setText(user) // from before\ndelegate.api.withUserImage(user) {\n  image in controller.icon.setImage(image)\n}\n```", "```swift\nclass RepositoryRowController: NSObject {\n  @IBOutlet weak var name: WKInterfaceLabel!\n}\nclass RepositoryListController: WKInterfaceController {\n  let delegate = WKExtension.sharedExtension().delegate as! ExtensionDelegate\n  @IBOutlet weak var repositoriesTable: WKInterfaceTable!\n}\n```", "```swift\noverride func contextForSegueWithIdentifier(\n segueIdentifier: String,\n inTable table: WKInterfaceTable,\n rowIndex: Int) -> AnyObject? {\n  return delegate.users[rowIndex]\n}\n```", "```swift\noverride func awakeWithContext(context: AnyObject?) {\n  super.awakeWithContext(context)\n  if let user = context as? String {\n    print(\"Showing user \\(user)\")\n  }\n}\n```", "```swift\nif let user = context as? String {\n  delegate.loadReposFor(user) {\n    result in\n    self.repositoriesTable.setNumberOfRows(\n     result.count, withRowType: \"repository\")\n    for (index,repo) in result.enumerate() {\n      let controller = self.repositoriesTable\n       .rowControllerAtIndex(index) as! RepositoryRowController\n      controller.name.setText(repo[\"name\"] ?? \"\")\n  }\n}\n```", "```swift\nclass RepositoryController: WKInterfaceController {\n  @IBOutlet weak var repo: WKInterfaceLabel!\n  @IBOutlet weak var issues: WKInterfaceLabel!\n  @IBOutlet weak var watchers: WKInterfaceLabel!\n  @IBOutlet weak var forks: WKInterfaceLabel!\n}\n```", "```swift\nvar repos = []\noverride func awakeWithContext(context: AnyObject?) {\n  super.awakeWithContext(context)\n  if let user = context as? String {\n    delegate.loadReposFor(user) {\n      // as before\n      self.repos = result\n    }\n  } else {\n    repos = []\n  }\n}\noverride func contextForSegueWithIdentifier(\n segueIdentifier: String,\n  inTable table: WKInterfaceTable,\n  rowIndex: Int) -> AnyObject? {\n  return repos[rowIndex]\n}\n```", "```swift\noverride func awakeWithContext(context: AnyObject?) {\n  if let data = context as? [String:String] {\n    repo.setText(data[\"name\"])\n    issues.setText(data[\"open_issues_count\"])\n    watchers.setText(data[\"watchers_count\"])\n    forks.setText(data[\"forks_count\"])\n  }\n}\n```", "```swift\nclass func connect(url:NSURL) -> GitHubAPI? {\n  if let data = NSData(contentsOfURL:url) {\n    ...\n  }\n}\n```", "```swift\nThreads.runOnBackgroundThread() {\n  if let data = NSData(contentsOfURL:url) {\n    â€¦\n    Threads.runOnUIThread() {\n      // update the UI as before\n    }\n  }\n}\n```"]