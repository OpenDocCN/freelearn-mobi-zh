- en: Chapter 3. Creating the Points Of Interest App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will move to the practical side of creating an app and
    cover the facilities that Xamarin.Android provides developers for creating, executing,
    and debugging applications. This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the sample app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring Xamarin.Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the sample app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and debugging apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sample POIApp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will begin by building a sample **Points Of Interest**
    (**POIApp**) app that will be completed through the remaining chapters of this
    book. This app will allow the user to capture, save, and manage the `POIApp` and
    it supports the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: It captures information about the `POIApp`, including name, description, address,
    latitude, longitude, and photos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It captures the address, latitude, and longitude of the `POIApp` using the devices
    location capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It captures and saves a photo of the `POIApp` using the devices camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It saves details of the `POIApp` on the Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It fetches and displays a list of the `POIApp` from the Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It stores/caches the `POIApp` for offline viewing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Xamarin.Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we move on, we need to get Xamarin.Android installed. This section walks
    you through installing the latest Xamarin development platform (Xamarin.Android
    Version 5.1.3 and Xamarin Studio Version 5.9.3) on the Mac operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing this book, the installation instructions presented in
    this chapter are accurate. However, the tools are being updated rapidly, so these
    instructions may be out of date by the time you read this. You can refer to the
    official Xamarin website for the updated installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: You may choose to install Xamarin.Android and work through the samples on Windows
    OS; in which case, you will encounter only minor deviations in some of the directions.
    If you choose to install on the Windows operating system, you may refer to the
    installation guide from the official Xamarin developer portal at [http://developer.xamarin.com/guides/android/getting_started/installation/windows/](http://developer.xamarin.com/guides/android/getting_started/installation/windows/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Xamarin.Android, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The Xamarin Studio IDE and Xamarin.Android platforms are the prerequisites to
    develop an Android application using Xamarin. Go to the download section of [http://xamarin.com/](http://xamarin.com/),
    fill in your personal details, download the unified installer for your operating
    system, and launch it:![](img/gwSDQ08o.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the installer page and the agreement page until you come to the **Product
    Selection** page. The installer allows the installation of both Xamarin.Android
    and Xamarin.iOS, as shown in the following screenshot:![](img/p4RVHvwp.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Xamarin.iOS will not be needed for the exercises in this book; you may uncheck
    Xamarin.iOS for the installer window and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the installer will proceed to configure the installation directory. You
    may either change the installation location on your computer, or continue with
    the installation:![](img/yQTqASqe.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, the prerequisites for the installation will be listed, as shown in the
    following screenshot. It requires installing the Mono framework, the Android SDK,
    Xamarin Studio, and the Xamarin.Android component. Click on **Continue** to proceed
    with the installation:![](img/MiJEzsQf.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see the Android SDK agreement page. Just accept and click on **Continue**
    for installation. An installation progress page will be displayed depicting the
    component installation in progress:![](img/pE7iykJy.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: During installation of Xamarin.Android, if you're encountering Android SDK download
    issues, please ensure that downloads are not blocked by your corporate network
    or firewall. For such events, you can download and install the standalone Android
    SDK from [https://developer.android.com/sdk/index.html](https://developer.android.com/sdk/index.html).
    Once Android SDK is installed on your computer, you can resume with Xamarin package
    installer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As each component is installed, a check mark will be placed next to the component,
    and once all the items are installed, a final installation completion page will
    be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on **Launch Xamarin Studio**:![](img/bz1WuN11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing platforms and tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android platform installation comes with the Android SDK manager toolkit
    that allows you to select and download the tools and platforms that are required
    to build the Android apps. For example, when a new version of Android is released,
    you can test your application against the new platform by downloading the new
    bundles using the SDK manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Android SDK Manager** can be launched from Xamarin Studio by navigating
    to the **Tools** | **Open Android SDK Manager...** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/RsEs57fP.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the Android SDK Manager has now opened and it lists the following
    options for you to install or delete.
  prefs: []
  type: TYPE_NORMAL
- en: Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Tools** section is one of the core parts of the Android installation.
    This is required to build, install, and debug the Android application on the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/sMawMDQJ.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A brief description of the tools is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android SDK Tools**: These are the development tools that must be installed
    to compile Xamarin.Android applications. When you install the Xamarin platform,
    it automatically gets installed; however, you may need to keep this updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android SDK Platform-tools**: The SDK platform tools are required to connect
    the devices to deploy builds and debug applications. You should always have the
    latest version of the platform tools to ensure compatibility with the latest version
    of the Android APIs; so keep this up to date as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android SDK Build-tools**: Build tools are required to compile the source
    code to the application that can be run on the Android devices or emulators. By
    default, Xamarin Studio installs the most recent version of the build tools. It
    is always recommended that you install the latest version of the SDK build tools
    as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information, you may visit the following official Android documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/tools/revisions/build-tools.html](https://developer.android.com/tools/revisions/build-tools.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.android.com/tools/sdk/tools-notes.html](http://developer.android.com/tools/sdk/tools-notes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Android platform APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each successive release of Android operating system also includes the Android
    framework API for developers to take advantage of the set of new packages, classes
    to build apps. The platform API section lists all the Android API versions along
    with the API levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/GgmQ2Kwt.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A brief description of the various platforms is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SDK Platform**: The SDK Platform for a given API level allows you to compile
    against that version of Android. When a new platform is released, it requires
    the newer version of the SDK Platform tools and SDK tools; and hence, you need
    to keep those up to date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Samples for SDK**: These are Android sample applications for each API level
    developed using Java. They are not required by Xamarin developers. You don''t
    need to install these samples unless you have a specific need or if you want to
    analyze and port the Java samples to C#.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Images**: System images are used with **Android****Virtual Device**
    (**AVD**). All the recent Android versions include both the ARM and x86 system
    images. The x86 images run significantly faster and are preferred over the ARM.
    Notice that some of the system images are prefixed with **Google APIs**. They
    include the Google Play services runtime and are useful for testing the apps that
    use Google Play services features such as map, in-app purchases, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Android platform Extras
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Extras** section includes some of the additional optional tools you may
    require during development, which are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bVX5qBKg.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following section will brief you on some of the important sections of the
    Android platform extra tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android Support Library**: The **Android Support Library** is a set of code
    libraries that are used to provide backward compatibility for new API features
    on older devices. It is considered as a best practice to use the support libraries
    while developing some of the features, as it makes the app compatible with the
    older versions of devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Play services**: The Google Play services runtime provides the set
    of APIs to develop certain Android features such as Google Maps, integrating with
    Google+, Google Play subscription, and so on. All the Android devices include
    the Google Play service runtime. However, the Android emulators don''t include
    the Google Play services runtime by default but it can be installed separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google USB Driver**: If you are running Windows OS, you will need to install
    these drivers to enable USB debugging for Android devices. For some devices, you
    may also need to install the specific device driver''s software provided by the
    device manufacturers. You don''t need to install this driver if you are using
    Mac OS X for development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Android Virtual Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android emulator, also known as **Android Virtual Device** (**AVD**), is
    used to test the Android application in the absence of a device. Emulators get
    installed as part of the Xamarin installation. You can create your own emulator
    or customize an existing one with the required device configurations for the device
    being emulated.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create or modify an existing emulator, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu bar, navigate to **Tools** and open **Google Emulator Manager**.
    It will open the **Android Virtual Device Manager** window:![](img/IbzvPhuY.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a new emulator, click on the **Create** button, on the right-hand
    side panel. Provide the configurations, such as **AVD Name**, **Device**, **Target**,
    **Memory Options**, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To edit an existing emulator, select the emulator you wish to edit and click
    on the **Edit** button:![](img/hK3dxKpi.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the **Target** setting; this specifies the version of the Android platform
    and the API level that will be used for the emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the device skin from the **Device** field drop-down menu. In my case,
    I have selected **Nexus 5**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Target** field to **Android 4.4.2**. If needed, uncheck the **Hardware
    keyboard present** option, and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Use Host GPU** option. This option makes the emulator use the host
    computer's OpenGL implementation, which makes the rendering significantly faster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may select the **Snapshot** option to speed up the emulator's boot time.
    When this option is enabled, it saves a snapshot of its RAM on the first boot
    and restores from that snapshot on future use. You cannot have both the **Snapshot**
    and **Use Host GPU** options enabled at the same time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloning a virtual device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many options that can be modified in order to emulate any device
    and configuration needed. The Android Virtual Device Manager dialog box also has
    a tab named **Device Definitions** that can be used to set up the devices that
    are available when configuring an AVD. The following screenshot shows you what
    can be configured as part of the device definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/K5JFlUIs.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Speeding up the Android emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default Android emulator that comes with the Android development toolkit
    is quite sluggish. It is often disappointing and painful to test an application
    in the Android device emulators. The wiser choice for developers is to have a
    real Android device to test on. However, because the Android ecosystem has various
    form factors and device manufactures, it is practically impossible to buy each
    targeted device to test the app. You have to go for some cost effective solution
    to test your app on all targeted devices.
  prefs: []
  type: TYPE_NORMAL
- en: The following section will guide you through some of the tips to make your Android
    emulator faster and other alternative options available to test Android apps.
  prefs: []
  type: TYPE_NORMAL
- en: Using the x86 emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android provides an x86 emulator that can speed up the development considerably
    due to faster start and execution times for the AVD. The x86 emulator is not a
    part of the base Xamarin installation, but the directions for the installation
    can be found on the Xamarin website as well as the Android developer website.
    A very specific version may be required, particularly if you are using OS X Mavericks,
    so we will not replicate the directions here.
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, you can take advantage of the x86 emulator by the selected Intel
    Atom (x86) for the CPU/ABI when editing an AVD configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party emulator solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The x86 solution should work just fine on the computer with a decent memory.
    Apart from the native Android emulators, you can use some of the third-party tools
    such as the Xamarin Android Player or Genymotion.
  prefs: []
  type: TYPE_NORMAL
- en: The Xamarin Android Player
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Xamarin recently announced its own Android emulator called the Xamarin Android
    Player. The Xamarin Player runs on Android x86 hardware accelerated virtualization
    and OpenGL 2.0 for fast booting and a smooth user interface. This works on both
    the Windows and Mac platforms. Your system requires to have an OpenGL 2.0 compatible
    graphics card with at least 2 GB hard disk space and at least 2 GB or RAM to install
    and run the Xamarin player.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Xamarin Android Player with the player settings
    pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/doyFofN7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Xamarin player settings pane allows you to simulate some of the emulator
    controls, such as battery life, geo locations, volume, and power control.
  prefs: []
  type: TYPE_NORMAL
- en: Genymotion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Genymotion is yet another alternative in the race of faster Android emulators.
    Genymotion is based on the open source project Android VM, developed by a French
    company Genymobile. It also works on all major platforms, including Mac, Windows,
    and Linux. The basic version of Genymotion is free to download; however, the commercial
    version does much more than the free version. The paid version of Genymotion can
    simulate multitouch, camera, GPS, network quality simulation, accelerometer, and
    much more. This can be the best alternative replacement for Android AVD.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Xamarin Android Player on Mac OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/xTCcuSm3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the POI app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we already have our development environment ready, let's begin by building
    the `POIApp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following section will walk you through the several steps involved to create,
    build, and deploy the POI application into the Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **File** menu, navigate to **New** | **Solution**. The **New Solution**
    view will be presented, as shown in the following screenshot:![](img/ok5VFH5B.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Android** section on the left-hand side of the screen, navigate
    to **App** | **Android App**, and then click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the app name as `POIApp` and the application identifier as `com.packt.poiapp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Compatibility** selection, select **Maximum Compatibility** to make
    your application compatible on a full range of devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Themes** drop-down menu, you may select from the range of available
    themes and click on **Next**:![](img/xCa6W6im.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the project location and adjust it if desired. Click on **Create**:![](img/T8KJ7IqJ.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Xamarin Studio will create a solution and the required project folders. The
    project folder will contain a default `MainActivity.cs` class and a `Main.axml`
    layout file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Xamarin Studio IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating `POIApp`, the project will be opened within the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot depicts Xamarin Studio after the project has been
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/PHw0i0FT.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Like any other modern IDE, Xamarin Studio is organized with a set of menus
    at the top of the screen, a context-sensitive toolbar below it, and a series of
    dockable pads for viewing and manipulating various types of content. By default,
    Xamarin Studio is configured with the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Solution** pad is docked on the left-hand side and allows you to explore
    the structure and content contained in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editor windows are in the middle and present the content of files for viewing
    and manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task-specific pads are collapsed on the right-hand side and bottom and can be
    expanded by hovering over the icon and caption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional pads can be accessed by navigating to **View** | **Pads**.
  prefs: []
  type: TYPE_NORMAL
- en: The Project Options view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are numerous options that can be set, which would affect the way the application
    is built and executed. These options can be adjusted from within the **Project
    Options** view. The following section will show you how to use the different options
    available in the Xamarin Studio project explorer to set various project configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the project structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A project is an organizational unit that represents the complete Xamarin Android
    application in the **Solution** pad. It contains not just the source code, but
    also contains the dependent libraries, resources, and other project configurations.
    Before we begin with writing any code, we must understand the Xamarin.Android
    project structure and significance of each folder. The following screenshot depicts
    the different components a Xamarin Android application is composed of:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/q89OffyQ.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Xamarin Studio project wizard creates the default project structure and adds
    the required files and directory to **Solution** pad. The most important building
    blocks of a Xamarin.Android project includes:'
  prefs: []
  type: TYPE_NORMAL
- en: The main project (`POIApp`) is the root directory that contains the entire project
    context. Right-click on the project name to get various options, such as clean,
    build, run, options for project configurations, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `References` directory contains the references to the lists of the base
    class libraries and assemblies used in the application. Right-click on **Edit
    References** to add a base class library or third-party assembly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Components` folder contains reusable pieces of code that are built by community
    developers and shared on the Xamarin component store. A component gives you the
    ability to quickly add new controls and functionality to Xamarin applications.
    For example, if your application uses the database operation, you can quickly
    integrate the SQLite.Net component to perform SQL operations by writing a few
    lines of code. We will discuss how to add a component to your application from
    the Xamarin component store in Chapter 4, *Adding a List View*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Assets` folder contains the raw assets that can be bundled with the application.
    It can contain files such as third-party `.ttf` fonts, game textures, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Properties` folder generally contains two files: the `AndroidManifest.xml`
    and `AssemblyInfo.cs` files. The `AndroidManifest.xml` file contains the metadata
    of the Android application and `AssemblyInfo.cs` contains information about the
    assembly, such as the name, description, version, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Resources` folder is the main building block composed of images (named
    as drawables in Android), layout descriptors, strings, colors, themes, and so
    on. All the resources added are grouped into different folders and are referenced
    with a unique resource ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xamarin Studio automatically creates a new `Resource.designer.cs` file under
    the `Resources` directory. This file holds the unique IDs for each resource. This
    is similar to the `R.java` file that is created automatically in the native Android
    application. This file is maintained by Xamarin.Android and is periodically regenerated
    whenever there is a change made to the application's resources.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following are some of the subdirectories you can create inside the `Resources`
    directory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Resources/drawable-xxx**: The drawable folders are used to hold the images
    such as `.png`, `.jpeg`, and so on. Notice that the default project structure
    contains multiple drawable folder suffixes with qualifiers, such as hdpi, mdpi,
    xhdpi, and so on. The qualifier indicates that the resources inside that directory
    will be used in certain circumstances only. You can create another directory `Resources/drawable`
    to place the images that are not required for different device configurations.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A more detailed discussion on resource qualifiers are explained in Chapter 7,
    *Designing for Multiple Screen Sizes*.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Resources/layout**: This folder contains the XML layout descriptor files.
    In our example, the `Main.axml` file is created.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resources/values**: This folder contains files, such as `string.xml`, to
    declare all the strings used in an app. This is helpful for app localization.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resources/menu**: The menu folder holds the XML-based menu specification
    for each activity.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The application source code can be managed inside multiple different folders.
    By default, the Xamarin Studio project template is created in the `MainActivity.cs`
    file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The newer version of Xamarin Studio creates the `Xamarin.UITest` project, which
    is used for automated UI acceptance testing. The `Xamarin.UITest` framework is
    based on Calabash, using which you can write a test case in C# and NUnit and execute
    for both the Android and iOS platforms. This book covers Android unit testing
    using NUnitLite in Chapter 8, *Creating Data Storage Mechanisms*. For now, if
    you wish, you can safely delete the test project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Xamarin Studio layout designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the `Main.axml` file located at `Resources/layout/Main.axml` from the solution
    explorer. Notice that the graphical layout editor will be the default layout editor.
    Currently, the `Main.axml` layout contains a button inside `LinearLayout`. Let's
    now proceed to understand the different Xamarin Studio layout designer options.
  prefs: []
  type: TYPE_NORMAL
- en: The designer content layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Android Studio layout designer contains two buttons: **Content** and **Source**,
    which are at the bottom of the designer view. These buttons allow you to switch
    between a visual representation of the layout (**Content**) and an XML source
    code view of the layout. This is very useful as some tasks are just quicker to
    edit directly in the XML source view; however, the content view is useful to view
    and arrange widgets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The content view''s usefulness is somewhat limited only because most of the
    time portions of a view must be constructed with the code at runtime; however,
    when the view can be specified completely in XML, the content view is very useful.
    In the content view, you will notice a set of a few useful tools arranged at the
    top of the window, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Z4ACJxVR.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the upper-right corner, you will find a set of zoom controls. These allow
    you to zoom the layout in or out, depending on your monitor's size and the level
    of details you would like to view. At the top of the page, you will find drop-down
    menus that also let you select things, such as the screen size of the device to
    simulate, orientation of the device, and the version of the Android platform to
    simulate.
  prefs: []
  type: TYPE_NORMAL
- en: The Document Outline and Properties pads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the bottom right-hand side of the IDE, you will notice the **Document Outline**
    and **Properties** pads.
  prefs: []
  type: TYPE_NORMAL
- en: The **Document Outline** pad provides a convenient means of navigating and selecting
    widgets, particularly as layouts get more complex. Select **listView1** and then
    click on the **Properties** tab. Activate the **Document Outline** pad to see
    your layout outline, listing all the widgets, Views, or view groups contained
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: Select any view on the designer window and click on the **Properties** tab to
    activate the **Properties** window. The **Properties** window allows you to edit/select
    the attributes for the selected view. Xamarin Studio takes care of generating
    the source code to reflect the changes made in the designer view.
  prefs: []
  type: TYPE_NORMAL
- en: Toolbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Toolbox** pad is organized with the basic widgets at the top of the list
    and container widgets such as ListViews further down the list.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the **Toolbox** pad is displayed on the top right-hand side of the
    Xamarin Studio IDE. There is a search box at the top that allows you to filter
    the widgets in the list, and there are two buttons on the right-hand side of the
    search box that allow you to adjust the way widgets are listed.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the target framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The target framework setting determines which API level will be available to
    you during development and testing. Let's select the automatic setting; use the
    target framework version. In this case, it automatically selected `API level 19
    Android 4.4`.
  prefs: []
  type: TYPE_NORMAL
- en: The minimum SDK version tells you which minimum API level is required for the
    application to run. Based on the value specified in the minimum SDK, the Google
    Play Store prevents the user from installing the application if the system's API
    level is lower than the value specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to set the target framework, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `POIApp` project under the `POIApp` solution in the **Solution**
    pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on it and click on **Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Build** | **General** on the left-hand side of the page:![](img/Z6GYOSY8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Target framework** field, select **Use latest installed platform**
    and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting the app icon and package name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xamarin.Android provides a default icon and package name for apps. The icon
    will be displayed on the Android device's home drawer alongside other application
    lists, as well as on the action bar at the top of each view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to adjust the defaults for these settings, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The application icon images are provided in the `Assets` folder of the code
    bundle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using **Finder/Windows Explorer**, copy `ic_launcher.png` from your computer's
    hard disk to the respective `Resources\drawable` folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From Xamarin Studio, navigate to `Resources\drawable`, right-click on it, and
    click on **Add Files** or alternatively, you can drag and drop the launcher images
    to the Xamarin Studio `Resource/drawable` folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see `ic_launcher.png` listed under `drawable` in the **Solution**
    pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `POIApp` project, right-click on it, and click on **Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Build** | **Android Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the application name to `POIApp`. This will cause the resulting APK file
    to be named `POIApp.apk`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the application icon selection to `@drawable/ic_launcher`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will cover additional options in Chapter 11, *Publishing an App to the App
    Store*, as we prepare the app for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: The launcher activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When an app is launched from the home screen on an Android device, the Android
    OS creates an instance of the activity in the application you have declared to
    be the launcher activity. When developing with the Android SDK, this is specified
    in the `AndroidManifest.xml` file. The following code excerpt from `AndroidManifest.xml`shows
    how to specify an activity as a launcher activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Xamarin.Android provides a more convenient method of specifying this by the
    use of .NET attributes. These .NET attributes are used at build time to construct
    the `ApplicationManifest.xml` file so that you rarely ever need to worry about
    working with the file directly. In the case of specifying the initial activity
    to launch, setting `MainLauncher` to `true` does the job, as seen in the following
    code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Running and debugging the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The way in which you run and debug apps is very important to developers as
    it has a big impact on productivity and timelines. Xamarin Studio and the Android
    emulator team up to make the testing and debugging cycle as painless as possible.
    Let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a debugging session by clicking on the **Play** button on the left-hand
    side of the taskbar, by pressing *F5*, or by navigating to **Run** | **Start Debugging**:![](img/YGX0g1hq.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Nexus 6** (emulator) from the list and click on the **Start emulator**
    button. It might take a little longer for the emulator to start up. Let's wait
    until it is fully loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Nexus 6** at the top of the devices list and click on **OK**. Xamarin
    Studio will deploy the compiled app to the emulator. The progress of the deployment
    can be monitored from the status view in the middle of the toolbar and from the
    **Application Output** pad at the bottom of the IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toggle to the Android emulator and unlock the screen. The POI app will be present:![](img/uoPqTLdR.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The Android emulator is used for testing Android apps during the development
    process. The left-hand side of the screen depicts what would be seen on a device
    and the right-hand side provides keys that replicate the device hardware.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Hello World** button and the app will increment a counter and
    update the button's caption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toggle back to Xamarin Studio and stop the app by clicking on the **Stop** button
    at the extreme left of the toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `MainActivity.cs` and set a breakpoint on line 21 by clicking on the left
    margin of the editor, just to the left of the line number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the app by clicking on the **Start** button. Since the Android emulator
    is still running, you will not need to make a device selection. The app will stop
    at the breakpoint previously set:![](img/XlKlnUGv.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice a set of debug controls present in the toolbar. There are controls
    to continue the execution, namely, step over the current line, step into the current
    function, and step out of the current function:![](img/oJ0HE6fc.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also notice a new set of pads related to the debugging apps present
    at the bottom of the IDE. These pads allow you to view objects, breakpoints, threads,
    and the call stack:![](img/v1pXKN3w.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Step Over** twice to watch the progress of the execution, and then
    click on **Continue** to let the app start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see from this section, Xamarin Studio and the Android emulator facilitate
    a robust and intuitive way of executing and debugging applications.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with an Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apps can be executed and debugged on actual devices with the same simplicity
    of working with an emulator. To prepare for using a physical device, you need
    to perform a few steps as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable USB debugging on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install an appropriate USB driver for the device (Windows only).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling USB debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to enable USB debugging on a device with Android 4.0 and newer, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: For devices running Android 4.2 or newer, there is an extra step; `Developer
    options` are initially hidden. Navigate to **Settings** | **About phone** and
    tap **Build number** seven times. On some configurations, the exact menu structure
    may differ. On my HTC One with Android 4.3, the menu is **Settings** | **About**
    | **Software information** | **More**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Settings** | **Developer** options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **USB debugging**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing a USB driver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows users are required to install a USB driver provided by the device's
    manufacturer. You can refer to the Android developer website under a section titled
    **Using Hardware Devices** for more details or consult your device's manufacturer
    at [http://developer.android.com/tools/device.html](http://developer.android.com/tools/device.html).
  prefs: []
  type: TYPE_NORMAL
- en: OS X users should be good to go.
  prefs: []
  type: TYPE_NORMAL
- en: Running apps on a device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After completing the previous steps, simply connect the device to your development
    computer with a USB cable, start the app from Xamarin Studio, and choose the actual
    hardware device from the device selection view rather than starting an emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Behind the scenes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is interesting at this point to take a quick look at a few of the things
    that go on behind the scenes, which we previously discussed in Chapter 2, *The
    Xamarin.Android Architecture*.
  prefs: []
  type: TYPE_NORMAL
- en: The peer object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the peer object (the proxy object) discussed in Chapter 2,
    *The Xamarin.Android Architecture*. Navigate to the `POIApp\POIApp\obj\Debug\android\src\poiapp`
    directory code bundle in your `Finder/Windows Explorer` window, open `MainActivity.java`
    using Notepad.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet depicts some of the key pieces of the source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: The `MainActivity` class extends `android.app.Activity`, which is what you would
    expect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `onCreate()` proxy method is created that calls the native `n_onCreate()`
    method, which points to the overridden `OnCreate()` method in our managed C# class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `MainActivity` class has a static initialization block and a constructor
    that establishes the link between the Java class and its managed C# peer, including
    initializing `n_onCreate()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AndroidManifest.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to `POIApp\POIApp\obj\Debug\android` in the code bundle and open the
    `AndroidManifest.xml` file. The following code snippet depicts a portion of the
    manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: The minimum SDK is set to `15` in the `&lt;uses-sdk\&gt;` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial activity is set using the `&lt;category\&gt;` element within the
    activity definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We covered a lot about the structure of the Xamarin.Android project created
    using Xamarin Studio. We used Xamarin Studio on the Mac platform to complete all
    the examples in this book. We can confirm that all the previously mentioned project
    configuration options are also available in the Visual Studio IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started with a sample app that we will complete through
    the remaining chapters of the book, and we demonstrated the facilities we have
    for executing and debugging apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start with creating the basic layout and building
    `ListView` to display the `POIApp` fetched from the server.
  prefs: []
  type: TYPE_NORMAL
