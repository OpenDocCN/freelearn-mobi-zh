- en: Chapter 13. Connectivity, Persistence, and URI Schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Internet connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying a persistent Wi-Fi connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referencing an app's common directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching system applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching the Maps application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaring device capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Significant ground has been covered during the course of the book but a few
    topics that we have touched upon deserve a little more attention. In this chapter,
    we will tie up those loose ends by exploring some additional uses for the application
    descriptor file, spending time understanding how to access the device's file system,
    and seeing how to open native iOS apps from Flash.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Internet connectivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a common occurrence for mobile applications to connect to the Internet
    at some point or another. For many, it will be for simple tasks, such as submitting
    a user's score or posting to a social network site. More sophisticated apps may
    attempt, for example, to aggregate data from various sources or even stream video
    from a Flash Media Server.
  prefs: []
  type: TYPE_NORMAL
- en: It is good practice to check that the device has an active Internet connection
    before trying to send or receive data. If an active connection cannot be found,
    then the app can adjust accordingly. For example, a game may hide its online leaderboards
    and remove any facilities for uploading scores.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to use AIR's `URLMonitor` class to check for the
    availability of an URL before calling it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An FLA has been provided as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter13\recipe1\recipe.fla`
    into Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: A dynamic text field named `output` covers the stage. We will write some ActionScript
    to check for Internet connectivity and display the results within the text field.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `URLMonitor` class belongs to the `air.net` package and is not defined in
    the AIR runtime. Instead the class is included in the `aircore.swc` file, which
    must be statically linked to your FLA before it can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Linking the SWC file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let us link `aircore.swc` to the FLA before going on to write this recipe's
    ActionScript.
  prefs: []
  type: TYPE_NORMAL
- en: Select **File** | **ActionScript Settings** from Flash Professional's drop-down
    menu. This will open the ActionScript 3.0 Settings panel where you can add the
    SWC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Library path** tab. Click on the **Add New Path** icon, which is
    represented by a **+** symbol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on the **Browse to SWC file** icon and select `aircore.swc` from
    your Flash installation folder. Its location depends on your version of Flash
    Professional. For CS5, browse to: `Adobe Flash CS5\AIK2.5\frameworks\libs\air\aircore.swc`.
    If you are using CS5.5, it is at: `Adobe Flash CS5.5\AIR2.6\frameworks\libs\air\aircore.swc.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On Microsoft Windows, your installation of Flash Professional can be found at
    `C:\Program Files (x86)\Adobe`. On 32-bit versions of Windows, the path will be
    `C:\Program Files\Adobe`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you are using Mac OS X, then your Flash installation can be found at: `Macintosh
    HD/Applications`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Linking the SWC file](img/1383_14_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The SWC will be added to a list of libraries that will be used when publishing
    your app. Expand the SWC file's entry by clicking the icon to the left of its
    path, and ensure that its **Link Type** option is set to **Merged into code**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking connectivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With `aircore.swc` linked to your FLA, you can now use the API provided by the
    `URLMonitor` class. Okay, now let us write some ActionScript.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following three import statements, and a `URLMonitor` member variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `URLMonitor` instance that checks for the availability of a specific
    HTTP request, and listen for it dispatching `StatusEvent.STATUS:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a handler for the `URLMonitor` object''s `STATUS` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class as `Main.as` and move back to your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Publish the FLA and test the app on your device. The following text should
    be output to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Internet connection available.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Try changing your document class to monitor a URL that doesn''t exist. Republish
    and test your app. This time you will receive the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Internet connection unavailable.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `URLMonitor` class monitors and detects changes in HTTP or HTTPS connectivity
    for a specified URL.
  prefs: []
  type: TYPE_NORMAL
- en: Its constructor accepts a `URLRequest` as a parameter, which contains the URL
    to probe. After creating the `URLMonitor` object, call its `start()` method to
    begin monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: When the URL's availability is determined, the `URLMonitor` object dispatches
    `StatusEvent.STATUS`. You can query the `StatusEvent` object's `available` property
    to determine whether or not a connection to the URL can be made.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring continues until the `URLMonitor.stop()` method is called. It is also
    possible to determine if monitoring is currently taking place by checking the
    `URLMonitor.running` property.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search for `air.net.URLMonitor` within Adobe
    Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is some additional detail.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring sockets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `air.net.SocketMonitor` class is similar to `URLMonitor` but detects connectivity
    changes for a host at a specified port. This is useful for applications, such
    as multiplayer games, where a socket server connection is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `SocketMonitor` class'' constructor expects the name of the host and its
    port to monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once instantiated, the `SocketMonitor` object is used in an identical manner
    to `URLMonitor`.
  prefs: []
  type: TYPE_NORMAL
- en: Polling interval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both `URLMonitor` and `SocketMonitor` provide a `pollInterval` property that
    can be used to specify an interval, measured in milliseconds, for periodically
    polling the server.
  prefs: []
  type: TYPE_NORMAL
- en: By default, its value is `0`, meaning the server is polled immediately after
    `start()` is called, and thereafter only when the network status changes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Specifying a persistent Wi-Fi connection*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying a persistent Wi-Fi connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While many applications periodically connect to the Internet, there are some,
    such as chat clients and multiuser games that require a constant connection. These
    types of applications can be rendered useless if a persistent connection isn't
    available. By editing its application descriptor file, it is possible to stipulate
    that your app requires a persistent connection to a Wi-Fi network.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter13\recipe2\recipe.fla`
    into Flash Professional and work from there. Its document class contains the code
    from the previous recipe, *Monitoring Internet connectivity*. Don't worry if you
    haven't attempted this recipe, as an understanding of it isn't required.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can edit your application descriptor file from an external text editor or
    from Flash Professional. We will use Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: Open the application descriptor file by selecting **File** | **Open** *(Ctrl
    + O* | *Cmd* + *O)* from Flash Professional's drop-down menu. From the file browser,
    select `recipe-app.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down the file until you find the following XML fragment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `CDATA` node, add the following key-value pair to the XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now publish the FLA, and install the resultant `.ipa` to your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before launching the app, stop your device from automatically connecting to
    your Wi-Fi network. From your device's Settings, select **Wi-Fi** then tap on
    the icon to the far-right of your network's name. Doing so will take you to the
    settings page for that network. From here, press the **Forget this Network** button
    followed by **Forget**.![How to do it...](img/1383_14_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now move back to the device's home screen and launch your app. iOS will notice
    that the app requires a persistent Wi-Fi connection and will display a native
    dialog box asking you to **Select a Wireless Network**. Select your network from
    the list and enter its password when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initially your app will report the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Internet connection unavailable.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'But after a brief moment, it will detect your network connection and will update
    its status to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Internet connection available.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your FLA's application descriptor is an XML file that contains a list of iOS
    specific settings. Within the`<iPhone>` node is the`<infoAdditions>` node where
    you can set custom key-value pairs that can't be set within Flash. These are used
    to describe an app or used directly by it when launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this recipe, we used the following key-value pair to alert the user when
    a persistent Wi-Fi connection could not be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When launched, the app detects the presence of this key and, therefore, checks
    to see if the device is connected to an active Wi-Fi network. If not, it will
    perform a search and display a network selection dialog containing a list of active
    Wi-Fi hot spots for the user to select from. Alternatively, if the device is in
    Airplane mode, then a dialog box is displayed informing the user of that fact.
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi hardware can consume significant power. To preserve battery, iOS automatically
    switches off its Wi-Fi hardware after 30 minutes. If your app uses the `UIRequiresPersistentWiFi`
    key, then the Wi-Fi hardware will stay enabled for as long as the app remains
    active. If the device's screen locks, then the app is considered inactive and
    the Wi-Fi connection may be lost.
  prefs: []
  type: TYPE_NORMAL
- en: You can switch the `UIRequiresPersistentWiFi` key off by setting its value to`<false/>`.
    Alternatively, remove the entire entry from the application descriptor file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Editing the application descriptor file, [Chapter 3](ch03.html "Chapter 3. Writing
    your First App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referencing an app's common directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An iOS app resides within its own directory and has access to common sub-directories
    that are contained within it.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to reference each of these directories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use `chapter13\recipe3\recipe.fla` from the book's accompanying code
    bundle as a starting point. Open it into Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: A dynamic text field named `output` can be found on the stage. We will use this
    text field to display the native file path of each of the app's common directories.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `File` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, write each directory''s native path to the `output`
    text field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class and when prompted, name the file `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, publish the FLA and test it on your device. The paths for all four
    directories will be shown on screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The directory that an app is stored within is known as **Application Home**
    and has a path similar to: `/var/mobile/Applications/97C9F144-E97A-40BB-A4CD-82FF31CA2A3C`.
    The string at the end of the path is an ID that uniquely identifies the application
    and is used to name the home directory during installation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `flash.filesystem.File` class makes several constants available that can
    be used to reference Application Home and its various sub-directories. These constants
    let you access the directories in a platform-independent manner, eliminating the
    need to remember lengthy native paths. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`File.userDirectory:` The Application Home directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`File.applicationDirectory:` A read-only directory that contains the application
    binary and any files bundled with it, such as the default launch screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`File.applicationStorageDirectory:` Any local shared object data is stored
    here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`File.documentsDirectory:` Any application-specific data can be written to
    and retrieved from this directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of the four, `applicationDirectory` and `documentsDirectory` are perhaps the
    two that are used most often. Although you can't write to the Application directory,
    you can read from it and even copy files from it to other locations.
  prefs: []
  type: TYPE_NORMAL
- en: The Documents directory is useful for state management, allowing data files
    required by the application to be stored. These files can be anything, from simple
    preference files to images created by the user. This directory's contents are
    backed-up by iTunes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to temporarily store files, then a `tmp` sub-directory is provided
    within Application Home. To reference folders that aren''t provided as constants,
    use the `File` class'' `resolvePath()` method to modify an existing `File` object.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A `nativePath` property is also provided, allowing you to retrieve a directory''s
    native path from a `File` object reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is useful when using an API that expects a native path rather than a `File`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search for `flash.filesystem.File` within Adobe
    Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some more options when working with the `File` class and directories.
  prefs: []
  type: TYPE_NORMAL
- en: Creating directories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As well as referencing existing directories, the `File` class lets you create
    them using its `createDirectory()` method. The following two lines of code create
    a directory named `images` within the app''s Documents directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can also delete a directory using either `deleteDirectory()` or `deleteDirectoryAsync()`.
    Listen for `Event.COMPLETE` when deleting a directory asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing files*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Reading files*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AIR provides a file system API that can be used to write files of any type to
    the device.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how to write a text file containing simple preferences data that
    might, for example, be used by a game.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An FLA has been provided as a starting point for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: From the book's accompanying support files, open `chapter13\recipe4\recipe.fla`
    into Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: Sitting on the stage is a dynamic text field named `output`. We will write some
    preferences data to the device and use the text field to indicate when the data
    has been written.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `flash.filesystem` package contains classes that provide file system access.
    Let us make use of some of those classes to write to the device.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the following classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `File` and `FileStream` member variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method that writes the preferences data to the device, and call it
    from the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a handler that gets called if an error occurs when writing the preferences
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a second handler that gets called once the file has been successfully written
    to the device''s file system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file and when prompted name it `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Publish the FLA and test it on your device. The preferences file will be written
    and the following text will be shown on screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**File Saved**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe took advantage of the `flash.filesystem.File` and `flash.filesystem.FileStream`
    classes to write data to the device's file system. The data was represented by
    a series of name-value pairs that were written to the app's Documents directory
    as a text file.
  prefs: []
  type: TYPE_NORMAL
- en: When writing to a file, a reference representing it must first be obtained using
    the `File` class—this is true even for files that have yet to be created. As well
    as representing files, the `File` class can also be used to represent directories.
    A directory reference can also be refined by using `File.resolvePath()` to target
    a file or sub-folder relative to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line of code shows a `File` object being created for the preferences
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to instantiate a `FileStream` object and use the `openAsync()`
    method to initialize it for writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see above, the `File` object is passed to `openAsync()`. As a second
    argument, the `FileMode.WRITE` constant is also passed, and indicates that data
    is to be written to the file. If the specified file doesn't exist, then `openAsync()`
    will create it. If it already exists, then its contents will be wiped.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `FileStream` class dispatches various events when writing data. It dispatches
    `IOErrorEvent.IO_ERROR` if it can''t create or find the file, and `Event.CLOSE`
    once it has finished writing data to it. Listeners for both events should be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'With the file opened for writing, `writeUTFBytes()` is called to actually write
    text to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is to close the `FileStream` object, preventing any more data
    from being written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: It is important to understand that the file is not guaranteed to have been fully
    written by the time you call the `close()` method. When writing a significant
    amount of data to the device, it may take some time. If this is the case, then
    the `FileStream` object will delay closing the file until after all the data is
    written. Once it is finished, the `FileStream` object will dispatch `Event.CLOSE`.
  prefs: []
  type: TYPE_NORMAL
- en: While you can write files anywhere within the Application Home directory, due
    to sandbox restrictions, you can't write outside of it.
  prefs: []
  type: TYPE_NORMAL
- en: You can obtain more information regarding the `flash.filesystem.FileStream,
    flash.filesystem.File`, and `flash.filesystem.FileMode` classes from Adobe Community
    Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is some more detail that should come in handy when writing to the device's
    local file system.
  prefs: []
  type: TYPE_NORMAL
- en: Working with data formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `FileStream` class provides many methods for writing data. Your choice of
    method depends on the data format you wish to use.
  prefs: []
  type: TYPE_NORMAL
- en: For example, when working with text, you have the `writeUTF(), writeUTFBytes()`,
    and `writeMultiByte()` methods available. If you opt to work with byte arrays,
    then there are `writeByte()` and `writeBytes()` methods. You can even write primitives
    using `writeBoolean(), writeDouble(), writeFloat(), writeInt()`, and `writeShort()`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing synchronously
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe used `openAsync()`, meaning data could be written to the device
    asynchronously. Asynchronous operations take place in the background, allowing
    the execution of your ActionScript to continue rather than being blocked until
    the operation completes.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an alternative to `openAsync()`, the `FileStream` class also provides `open()`,
    which allows data to be handled synchronously. Although execution will be blocked
    until the operation is complete, working synchronously is more straight forward
    as you aren''t required to register for events. In the following code snippet,
    you can see an alternative version of `savePreferences()` method, which writes
    data synchronously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Examples throughout this book that write to the device's file system, do so
    synchronously to help maintain focus on the task at hand.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring progress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When asynchronously writing to a file, the `FileStream` object will periodically
    dispatch `OutputProgressEvent.OUTPUT_PROGRESS`. From this event object, you can
    monitor the progress of the write operation by checking its `bytesPending` and
    `bytesTotal` properties. The `bytesPending` property specifies the number of bytes
    that have still to be written, while `bytesTotal` represents the number of bytes
    that have been written so far.
  prefs: []
  type: TYPE_NORMAL
- en: Persistence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Writing to the file system allows you to save your application's state to the
    device. When the app is re-launched, it can use this saved data to start from
    where it previously left off.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to AIR's file system API you can also use Flash's `SharedObject`
    class to manage state. In addition, small amounts of private data can be stored
    using the `EncryptedLocalStore` class introduced to iOS in AIR 3.0\. Detail regarding
    encrypted local storage can be found within Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to store your data within a local SQLite database and use
    ActionScript to access it. Apple itself uses SQLite databases on iOS devices to
    store information, such as contacts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Relational database theory and the SQLite API are outside the scope of this
    book. However, you can find more information on the subject from Adobe Community
    Help or by visiting the SQLite website at: [sqlite.org](http://sqlite.org).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Saving application state, [Chapter 4](ch04.html "Chapter 4. Porting Flash
    Projects to iOS")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Referencing an app''s common directories*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Reading files*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AIR provides a file system API that can be used to read files of any type from
    the device.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to load a file previously written to the device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you haven't already done so, complete the *Writing files* recipe before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: You can continue to work with the code you wrote during that recipe. Alternatively,
    from the book's accompanying code bundle, open `chapter13\recipe5\recipe.fla`
    into Flash Professional and work from there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us update the FLA's document class to load and display the preferences that
    were written to the device.
  prefs: []
  type: TYPE_NORMAL
- en: Open the document class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a method that will load the preferences data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alter the class'' `fileSaved()` handler, making it call the preceding method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A `COMPLETE` event will be dispatched when the file has been loaded. Add a
    handler for it that parses and displays the file''s preferences data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `fileLoaded()` handler makes use of Flash''s `URLVariables` class to decode
    the preferences data. Add `URLVariables` to the document class'' list of import
    statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the FLA and test it on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app will first write the preferences data to the file system before loading
    it back and displaying the preferences on screen.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps required for reading data from the device's file system are almost
    identical to writing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'First a `File` object is created that references the target file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then a `FileStream` object is instantiated and initialized using the `openAsync()`
    method. When a file is being read rather than written, `FileMode.READ` is passed
    as the method''s second argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: And while `FileSystem.close()` is called immediately after `openAsync()` when
    writing a file, when reading, it shouldn't be called until the file's entire data
    has been obtained. This can be determined by listening for the `FileStream` object
    dispatching `Event.COMPLETE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To actually obtain the data, one of the `FileSystem` class'' read methods is
    required. For this recipe, `readUTFBytes()` was used and the number of bytes to
    read from the file''s buffer was passed to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `FileStream` class' read-only `bytesAvailable` property was used when calling
    `readUTFBytes()`. This property states the size of the file once it is completely
    loaded. Also, notice that the file stream is closed after its data is read as
    there is no longer a need for it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will find AIR's file system API invaluable for many of your iOS projects.
    Before we leave the subject, here are some final pieces of information to take
    with you.
  prefs: []
  type: TYPE_NORMAL
- en: Working with data formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `FileStream` class provides many methods for reading data from a file. Your
    choice of method depends on the format of the data you are reading.
  prefs: []
  type: TYPE_NORMAL
- en: For example, when working with text, the `readUTF(), readUTFBytes(),` and `readMultiBytes()`
    methods are available. If the file contains a byte array, then you can use the
    `readByte()` and `readBytes()` methods. Primitive types can be obtained using
    `readBoolean(), readDouble(), readFloat(), readInt()`, and `readShort().`
  prefs: []
  type: TYPE_NORMAL
- en: Reading synchronously
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with the previous recipe, `openAsync()` was used, meaning the file was handled
    asynchronously. The following code uses the `open()` method instead to synchronously
    read this recipe''s preferences file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Examples throughout this book that read from the device's file system, do so
    synchronously to help maintain focus on the task at hand.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring progress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When asynchronously reading from a file, the `FileStream` object will periodically
    dispatch `ProgressEvent.PROGRESS`. From this event object, you can monitor the
    reading progress by checking its `bytesLoaded` and `bytesTotal` properties. The
    `bytesLoaded` property specifies the number of bytes that have been loaded, while
    `bytesTotal` represents the number of bytes that will be loaded if the file successfully
    loads.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can delete a file using the `File` class' `deleteFile()` or `deleteFileAsync()`
    method. Listen for `Event.COMPLETE` when deleting asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: Other file modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Two other file modes are available: `FileMode.APPEND` and `FileMode.UPDATE`.'
  prefs: []
  type: TYPE_NORMAL
- en: The Append mode always writes to the end of the file, meaning that an existing
    file's data will be added to rather than destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: Update mode lets you both read from and write to a file using a single file
    stream. To successfully manage this, the `FileStream` class provides the `position`
    property, which can be used to determine and set the current position within the
    file. The `position` property is incremented every time a byte is written or read.
    It is also possible to move to any point within a file by setting this property.
    When this is done, the next read or write operation will take place from that
    position.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Referencing an app''s common directories*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Writing files*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching system applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On occasions you may want your app to provide functionality that is already
    available from iOS's system applications. To guarantee a consistent and familiar
    experience, it is possible to launch certain system apps rather than performing
    the task internally within your own. To enable this, iOS supports various URI
    schemes which can be used to launch a specific application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use the `mailto` URI scheme to open and
    send e-mail from the Mail application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, load `chapter13\recipe6\recipe.fla`
    into Flash Professional and use it as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Sitting on its stage is a button with an instance name of `mailBtn`. When pressed,
    it will launch the device's Mail application and pre-populate an e-mail for the
    user to send.
  prefs: []
  type: TYPE_NORMAL
- en: Let us write the ActionScript required to make this happen.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will make use of both Flash's `navigateToURL()` function and `URLRequest`
    class to launch the Mail application.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, listen for the button being pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method that will launch the Mail application and compose an e-mail.
    Within it, initialize strings that represent the recipient''s e-mail address,
    the subject heading, and the e-mail''s body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this code, replace someone `@somewhere.com` with the e-mail address you wish
    to target. For testing purposes, use your own.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Staying within the `sendMail()` method, construct a URL that uses the `mailto`
    URI scheme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, launch the Mail application by passing the URL to Flash''s `navigateToURL()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file and when prompted name it `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the FLA and test the app on your device. Tapping the button will open
    the Mail application, complete with a pre-populated e-mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mailto` URI is used to launch the Mail application and compose an e-mail.
    The URI must be constructed and formatted correctly for the Mail application to
    understand it. Once constructed, pass the request to Flash's `navigateToURL()`
    package-level function to actually launch the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a minimum, the recipient''s e-mail address must be specified within the
    `mailto` URI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also pre-fill fields within the e-mail by adding query string parameters
    to the URI. For example, the following pre-populates the e-mail''s subject and
    body fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The supported query string parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`subject:` The e-mail''s Subject field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body:` The e-mail''s body'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to:` Allows the addition of more than one recipient within the To field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cc:` Allows recipients to be added to the carbon copy field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bcc:` Allows recipients to be added to the blind carbon copy field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When adding multiple recipients to a field, use a comma to separate each address.
  prefs: []
  type: TYPE_NORMAL
- en: 'The e-mail''s body can be specified as plain text or HTML. Here is an example
    using HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `mailto` specification prohibits the selection of an e-mail account within
    the URI. When multiple accounts are associated with a device, the default account
    is always used. Attachments are also unsupported.
  prefs: []
  type: TYPE_NORMAL
- en: Launching a system application forces the current app into the background on
    iOS 4 or above. On pre-iOS 4 devices, the current app is closed completely. It
    is, therefore, advisable to store your app's state before opening a system application.
    When the user is finished using the system application, it will be their responsibility
    to re-launch your app from the device's home screen or from the fast app switcher.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have covered the `mailto` URI scheme, now let us look at a few other applications
    that can be opened by `navigateToURL()`.
  prefs: []
  type: TYPE_NORMAL
- en: Dialing a phone number
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `tel` URI scheme can be used to launch the iPhone''s telephony application
    and dial a specified number. As the following example shows, the formatting of
    the `tel` URI is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Most valid phone numbers are accepted, but to prevent malicious behavior, URIs
    containing the `*` or `#` characters aren't. When using the `tel` URI scheme,
    a phone number must always be specified within the URI.
  prefs: []
  type: TYPE_NORMAL
- en: Sending SMS messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The iPhone''s Messages application can be opened using the `sms` URI scheme.
    An optional phone number can be included, indicating that a new SMS message is
    to be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If the phone number is omitted, then the Messages application will open but
    won't create a message for the user to send.
  prefs: []
  type: TYPE_NORMAL
- en: It is not possible to pre-fill the message with text or specify more than one
    recipient.
  prefs: []
  type: TYPE_NORMAL
- en: Playing a YouTube video
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `navigateToURL()` function can be used to launch the native YouTube application.
    There is no specific URI scheme for this; instead a URL targeting the YouTube
    server is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply construct a URL containing the ID of a video you would like to play.
    The URL should take the following format: `http://www.youtube.com/watch?v=ID`.
    You can obtain a video''s ID by visiting the YouTube website and extracting it
    from the browser''s address bar.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example URL that can be passed to `navigateToURL():`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: URI schemes within HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'URI schemes can also be embedded as links within HTML pages. This allows the
    user to launch system applications from within a `StageWebView` object. For example,
    the following HTML link will initiate a phone call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: For more information regarding the `StageWebView` class, refer to [Chapter 11](ch11.html
    "Chapter 11. Rendering Web Pages").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Exiting gracefully from an app, [Chapter 3](ch03.html "Chapter 3. Writing
    your First App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Opening a web page within Safari, [Chapter 11](ch11.html "Chapter 11. Rendering
    Web Pages")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Launching the App Store*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Launching the Maps application*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Publishers often promote their back catalogue within their latest releases,
    providing direct links to each of their products within the App Store. This not
    only makes the purchase process incredibly easy for the user, but also encourages
    impulse buying.
  prefs: []
  type: TYPE_NORMAL
- en: The App Store can be launched directly from your AIR for iOS app by passing
    a specific iTunes URL to Flash's `navigateToURL()` function. Let us see how to
    do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An FLA has been provided as a starting point for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter13\recipe7\recipe.fla`
    into Flash Professional. Sitting on its stage is a button named `storeBtn`.
  prefs: []
  type: TYPE_NORMAL
- en: Let us write some ActionScript to launch the App Store when this button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will open the App Store page for WeeWorld's WeeMee Avatar Creator app. First
    we will obtain a URL to the app's page, then we will write the actual code to
    link to it from our app.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the app's URL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The URL format is complicated to construct. To simplify the process, Apple has
    created the online Link Maker tool.
  prefs: []
  type: TYPE_NORMAL
- en: Visit its web page at [http://itunes.apple.com/linkmaker](http://itunes.apple.com/linkmaker).![Obtaining
    the app's URL](img/1383_14_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a search by filling in the page's fields. Enter **WeeMee Avatar Creator**
    into the **Search** field, set the country to **USA**, and select **iOS Apps**
    from the **Media Type** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Search** button on the right-hand side of the page to initiate
    a search. A list of matches will be generated and shown at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for **WeeMee Avatar Creator** listed within the **iPhone Apps** section
    and click on **iPhone App Link** on the right-hand side of its entry. A dialog
    box will appear containing details for the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the **Direct Link** URL from the dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linking to the app from ActionScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let us write the ActionScript required to launch the App Store page.
  prefs: []
  type: TYPE_NORMAL
- en: Within Flash Professional, create a new document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the required import statements and listen for `storeBtn` being pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event handler for the button, and within it open the App Store using
    the URL obtained from the Link Maker tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now save the document class' file, and when prompted name it `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish and test the app on your device. Tap the button to open the WeeMee Avatar
    Creator's entry within the App Store application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Passing an app's valid iTunes URL to Flash's `navigateToURL()` package-level
    function will open the App Store application for that app. The URL for a particular
    app can be retrieved from Apple's Link Maker online tool.
  prefs: []
  type: TYPE_NORMAL
- en: It is not just the App Store that can be opened from within your app. The Link
    Maker can create links to content on the iTunes Store and the iBookstore too.
    Simply perform a search for the content in question then obtain its URL.
  prefs: []
  type: TYPE_NORMAL
- en: The various stores can also be launched from an HTML link within a `StageWebView`
    object. The Link Maker provides the required HTML within the same dialog box as
    the **Direct Link** URL. You can copy it from the **HTML With Link** text box.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Rendering a web page within an app, [Chapter 11](ch11.html "Chapter 11. Rendering
    Web Pages")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Launching system applications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Launching the Maps application*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching the Maps application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being location aware, mapping is an integral part of iOS. The native Maps application
    lets you find where you currently are, search for nearby points of interest, and
    obtain turn-by-turn directions. Many developers take advantage of Maps by opening
    it directly from their own app, providing the user with a consistent experience.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter13\recipe8\recipe.fla`
    into Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: Sitting on its stage is a button with an instance name of `mapBtn`. We will
    add code to show the location of Adobe's headquarters when this button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use Flash's `URLRequest` class and `navigateToURL()` function to open
    the Maps application.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the classes required for this recipe and listen for the button being
    pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add an event handler for the button and within it open the Maps application
    at Adobe''s headquarters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class and when prompted name its file `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish and test the app on your device. Tap the button. The native Maps application
    will open and the location of Adobe's headquarters will be shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your app contains address or location information, you can forward that information
    to the Maps application. To do this, construct a URL and pass it to Flash's `navigateToURL()`
    package-level function. The URL should target the Google Maps server and contain
    one or more Google Maps parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this recipe, the Google Maps query parameter was used to map the location
    of Adobe''s headquarters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The Maps application supports many of the Google Maps parameters but not all
    of them. Here is a list of those that are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `q` | The query parameter. Its value is treated as if it had been typed into
    the query box on the Google Maps web page. |'
  prefs: []
  type: TYPE_TB
- en: '| `near` | Can be used as the location part of a query. |'
  prefs: []
  type: TYPE_TB
- en: '| `ll` | The latitude and longitude for the map''s center point. |'
  prefs: []
  type: TYPE_TB
- en: '| `sll` | The latitude and longitude from where a business search should take
    place. |'
  prefs: []
  type: TYPE_TB
- en: '| `spn` | An approximate latitude and longitude span. The zoom level will be
    adjusted to fit. |'
  prefs: []
  type: TYPE_TB
- en: '| `sspn` | A screen span. The zoom level will be adjusted to fit. |'
  prefs: []
  type: TYPE_TB
- en: '| `t` | The type of map to display. Can select m for maps, k for satellite,
    or h for hybrid. |'
  prefs: []
  type: TYPE_TB
- en: '| `z` | The map''s zoom level ranging from 1 to 20. |'
  prefs: []
  type: TYPE_TB
- en: '| `saddr` | The source address to use when generating directions. |'
  prefs: []
  type: TYPE_TB
- en: '| `daddr` | The destination address to use when generating directions. |'
  prefs: []
  type: TYPE_TB
- en: '| `latlng` | A custom ID format used by Google to identify businesses. |'
  prefs: []
  type: TYPE_TB
- en: '| `cid` | Another custom ID format used by Google to identify businesses. |'
  prefs: []
  type: TYPE_TB
- en: Launching the Maps application forces the current app into the background on
    iOS 4 or above. On pre-iOS 4 devices, the current app is closed completely. It
    is, therefore, advisable to store your app's state before opening Maps. When the
    user is finished with the Maps application, it will be their responsibility to
    re-launch your app from the device's home screen or from the fast app switcher.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://mapki.com/wiki/Google_Map_Parameters](http://mapki.com/wiki/Google_Map_Parameters)
    for a comprehensive description of each of the Google Maps parameters.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some other common uses for the Maps application.
  prefs: []
  type: TYPE_NORMAL
- en: Generating directions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can instruct the Maps application to generate directions between two addresses.
    The following ActionScript snippet uses Google Maps'' `saddr` and `daddr` parameters
    to produce driving directions between Adobe''s and Apple''s headquarters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Mapping your current location
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also show the user their current location. This can be done by determining
    their approximate location using AIR's `Geolocation` class and passing that information
    to the Maps application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following ActionScript obtains the latitude and longitude from a `GeolocationEvent`
    object, and constructs a Google Maps URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The `ll` property is used when specifying a location's latitude and longitude.
    Both values are separated by a comma.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Determining your current location, [Chapter 9](ch09.html "Chapter 9. Geolocation
    and Accelerometer APIs")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Launching system applications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Launching the App Store*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaring device capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The hardware and software capabilities of devices vary across the iOS family.
    For example, some feature a built-in camera, whereas others do not. It is important
    that your app can only be downloaded and installed on devices that are compatible
    with it. To enable this, the required capabilities can be explicitly set for your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: You can't specify these capabilities directly from Flash Professional. Instead,
    you need to edit your FLA's application descriptor file. Let us see how to do
    this for an app that requires the presence of the native Messages application
    and an on-board GPS receiver.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter13\recipe9\recipe.fla`
    and work from there. The FLA's stage is empty but its AIR for iOS settings have
    already been applied letting you easily publish once you are ready.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us edit your application descriptor file from within Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: From Flash Professional, select **File** | **Open** and select `recipe-app.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down the file until you find the following XML fragment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `CDATA` node, add the following key-value pair to the XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Publish the FLA. If you have an iOS device that lacks either the native Messages
    application or GPS, then try installing the `.ipa` file. You will receive an error
    message similar to the following one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The app "c13 r9" was not installed because it is not compatible with this
    device.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your FLA's application descriptor is an XML file that contains a list of iOS
    specific settings. Within the`<iPhone>` node is the`<infoAdditions>` node where
    you can set custom key-value pairs that can't be set within Flash. These are used
    to describe an app or used directly by it when launched.
  prefs: []
  type: TYPE_NORMAL
- en: The `UIRequiredDeviceCapabilities` key is used to specify the capabilities required
    by your app. If the device lacks the capabilities, then the app won't be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each capability should be listed within an`<array>` node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This example XML snippet shows the `sms` and `gps` capabilities being listed.
    The `sms` capability stipulates that your app requires the presence of the Messages
    application, while `gps` states that the device should include GPS hardware.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following capabilities can be specified with the `UIRequiredDeviceCapabilities`
    key:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Capability | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `telephony` | The app requires the presence of the Phone application. |'
  prefs: []
  type: TYPE_TB
- en: '| `wifi` | Networking features of the device will be accessed by the app. |'
  prefs: []
  type: TYPE_TB
- en: '| `sms` | The app requires the presence of the Messages application. |'
  prefs: []
  type: TYPE_TB
- en: '| `still-camera` | A camera is required to capture photos. |'
  prefs: []
  type: TYPE_TB
- en: '| `auto-focus-camera` | A camera with auto-focus is required to capture photos.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `front-facing-camera` | The app requires a forward-facing camera. |'
  prefs: []
  type: TYPE_TB
- en: '| `camera-flash` | A camera flash is required for taking photos or shooting
    video. |'
  prefs: []
  type: TYPE_TB
- en: '| `video-camera` | A camera with video capabilities is required on the device.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `accelerometer` | Access to an accelerometer is required. |'
  prefs: []
  type: TYPE_TB
- en: '| `location-services` | The app will attempt to retrieve the device''s current
    location. |'
  prefs: []
  type: TYPE_TB
- en: '| `gps` | The device should include GPS hardware for location tracking. |'
  prefs: []
  type: TYPE_TB
- en: '| `microphone` | A built-in microphone is required by the app. |'
  prefs: []
  type: TYPE_TB
- en: The capabilities listed within the application descriptor file are also used
    by the App Store to prevent users from downloading apps that they can't run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to keep an eye on the official Apple documents as the list of device capabilities
    grows with each new release of iOS: [http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html](http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, whether you can take advantage of any new capabilities will also
    depend on future releases of AIR or any native extensions you decide to use.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A final word regarding device capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Dropped support for ARMv6 devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apps published using AIR 2.6 and above do not support older ARMv6 iOS devices.
    AIR automatically includes the `armv7` and `opengles-2` capabilities in the application
    descriptor file in order to prevent owners of older iOS devices from downloading
    and installing these apps.
  prefs: []
  type: TYPE_NORMAL
- en: You do not need to explicitly add these two capabilities to the application
    descriptor file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Editing the application descriptor file, [Chapter 3](ch03.html "Chapter 3. Writing
    your First App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
