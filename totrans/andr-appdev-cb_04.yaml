- en: Chapter 4. Menus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Options menu
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying menus and menu items during runtime
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Contextual Action Mode for a view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Contextual Batch Mode with a ListView
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pop-up menu
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Android OS is an ever-changing environment. The earliest Android devices
    (prior to Android 3.0), were required to have a hardware menu button. Though a
    hardware button is no longer required, menus are no less important. In fact, the
    **Menu** API has expanded to now support three different types of menus:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**Options Menu and Action Bar**: This is the standard menu, which is used for
    global options of your application. Use this for additional features such as search,
    settings, and so on.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contextual** **Mode** (**Contextual Action Mode**): This is generally activated
    by long press. (Think of this as similar to a right-click on the desktop.) This
    is used to take an action on the pressed item, such as replying to an e-mail or
    deleting a file.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pop-up** **Menu**: This provides a pop-up selection (like a spinner) for
    an additional action. The menu options are not meant to affect the item pressed,
    instead use Contextual Mode as described previously. An example would be hitting
    the share button and getting an additional list of share options.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu resources are similar to other Android UI components; they are generally
    created in XML, but can be created in code as well. Our first recipe, as shown
    in the following section, will show the XML menu format and how to inflate it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Options menu
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we actually create and display a menu, let''s look at a menu to see
    the end result. The following is a screenshot showing the menu section of Chrome:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Options menu](img/B05057_04_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: The most obvious feature to note is that the menu will look different based
    on the screen size. By default, menu items will be added to the Overflow menu—that's
    the menu you see when you press the three dots at the far right edge.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Menus are typically created in resource files using `XML` (like many other
    Android resources) but they are stored in the `res/menu` directory though they
    can also be created in code. To create a menu resource, use the `<menu>` element
    as shown:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `<item>` element defines each individual menu item and is enclosed in the
    `<menu>` element. A basic menu item looks as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The most common `<item>` attributes are the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This is the standard resource identifier'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: This indicates the text to display'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon`: This is a draw-able resource'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`showAsAction`: This has been explained as follows (*see the following paragraph*)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enabled`: This is enabled by default'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at `showAsAction` in more detail.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'The `showAsAction` attribute controls how the menu item is shown. The options
    include the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '`ifRoom`: This menu item should be included in the Action Bar if there''s enough
    space'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withText`: This indicates that both the title and the icon should be shown'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`never`: This indicates that the menu item should never be included in the
    Action Bar; always show in the overflow menu'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`always`: This indicates that the menu item should be always included in the
    Action Bar (use sparingly as space is limited)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Multiple options can be combined using the pipe (|) separator, such as `showAsAction="ifRoom|withText"`.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the fundamentals of the menu resource covered, we are now ready to create
    a standard Options menu and inflate it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use Android Studio to create a new project called `OptionsMenu`. Use the default
    **Phone & Tablet** option and select the **Empty Activity** option when prompted
    for the Activity Type. Since the wizard does not create the `res/menu` folder
    by default, navigate to **File** | **New | Directory** to create it before continuing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the new project created as described in the preceding section, you are
    ready to create a menu. However, first, we will add a string resource to the `strings.xml`
    file for the menu title. We will use the new string for the menu title when we
    create the XML for the menu. Here are the steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening the `strings.xml` file and add the following `<string>` element
    to the `<resources>` element:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a new file in the `res/menu` directory and call it `menu_main.xml`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `menu_main.xml` file and add the following XML to define the menu:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the menu now created, we just have to override the `onCreateOptionsMenu()`
    method in `ActivityMain.java` to inflate the menu:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the program on a device or emulator to see the menu in the Action Bar.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two basic steps here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Define the menu in XML.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inflate the menu when the activity is created.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a good programming habit, we define the string in the `strings.xml` file
    rather than hardcoding it in the `XML`. We then use the standard Android string
    identifier to set the title for the menu in Step 3\. Since this is a "Settings"
    menu item, we don't want this to be shown in the Action Bar. To make sure it is
    never shown, use `showAsAction="never"`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: With the menu defined, we will use the menu inflater in Step 4 to load the menu
    during the Activity creation. Notice the `R.menu.menu_main` menu resource syntax?
    This is why we create the XML in the `res/menu` directory — so the system will
    know this is a menu resource.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'In Step 4, we used `app:showAsAction` rather than Android: `android:showAsAction`.
    This is because we are using the `AppCompat` library (also referred to as the
    Android Support Library). By default, the Android Studio new project wizard includes
    the support library in the project.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you ran the program in Step 5, then you must have seen the **Settings** menu
    item when you pressed the menu overflow button. But that was it. Nothing else
    happened. Obviously, menu items aren't very useful if the application doesn't
    respond to them. Responding to the **Options** menu is done through the `onOptionsItemSelected()`
    callback.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following method to the application to see a Toast when the Settings
    menu is selected:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That's it. You now have a working menu!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As shown in the preceding example, return `true` when you've handled the callback;
    otherwise, call the super class as shown in the `else` statement.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Using a menu item to launch an activity
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we show a Toast so we can see a working example; however, we
    could just as easily launch a new activity if needed. As you did in the *Starting
    a new activity with an Intent object* recipe of [Chapter 1](ch01.html "Chapter 1. Activities"),
    *Activities*, create an Intent and call it with `startActivity()`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Creating sub menus
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Sub menus** are created and accessed in almost exactly the same manner as
    other menu elements and can be placed in any of the provided menus, although they
    cannot be placed within other sub menus. To define a sub menu, include a `<menu>`
    element within an `<item>` element. Here is the XML form this recipe with two
    sub menu items added:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Grouping menu items
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another menu feature that Android supports is grouping menu items. Android
    provides several methods for groups, including the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '`setGroupVisible()`: Show or hide all items'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setGroupEnabled()`: Enable or disable all items'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setGroupCheckable()`: Set the checkable behavior'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android will keep all grouped items with `showAsAction="ifRoom"` together. This
    means all items in the group with `showAsAction="ifRoom"` will be in the Action
    Bar or all items will be in the overflow.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a group, add the `<item>` menu elements to a `<group>` element. Here
    is an example using the menu XML from this recipe with two additional items in
    a group:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: See also
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For complete details on the menu, visit the Android Developer Menu Resources
    site at [http://developer.android.com/guide/topics/resources/menu-resource.html](http://developer.android.com/guide/topics/resources/menu-resource.html)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying menus and menu items during runtime
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though it's been stated many times, it's considered the "best" programming practice
    to create UI in XML rather than in Java. There are still times when you may need
    to do it in code. This is especially true if you wanted a menu item to be visible
    (or enabled) based on some external criteria. Menus can also be included in resource
    folders, but there are times when you need code to perform the logic. One example
    might be if you wanted to offer an upload menu item only if the user is logged
    in to your app.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create and modify the menu only through code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `RuntimeMenu` using the default
    **Phone & Tablet** option. Select the **Empty Activity** option when prompted
    to add an Activity. Since we will create and modify the menu completely in code,
    we will not need to create a `res/menu` directory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start, we will add string resources for our menu items and a button to toggle
    the menu visibility. Open the `res/strings.xml` file and follow these steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two strings to the existing `<resources>` element:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a button to `activity_main.xml` with `onClick()` set to `toggleMenu` as
    shown here:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open `ActivityMain.java` and add the following three lines of code just below
    the class declaration:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following method for the button to call:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When the activity is first created, Android calls `onCreateOptionsMenu()` to
    create the menu. Here is the code to dynamically build the menu:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For best programming practice, don''t use `onCreateOptionsMenu()` to update
    or change your menu; instead, use `onPrepareOptionsMenu()`. Here is the code to
    change the visibility of the **Download** menu item based on our flag:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Though not technically required for this recipe, this `onOptionsItemSelected()`
    code shows how to respond to each menu item:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run the program on a device or emulator to see the menu changes.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created an override for `onCreateOptionsMenu()`, just like we did in the
    previous recipe, *Creating an Options Menu*. But instead of inflating an existing
    menu resource, we created the menu using the `Menu.add()` method. Since we want
    to modify the menu items later as well as respond to the menu item events, we
    have defined our own menu IDs and passed them to the `add()` method.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '`onOptionsItemSelected()` is called for all the menu items, so we get the menu
    ID and use a `switch` statement based on the IDs we created. We return `true`
    if we are handling the menu event, otherwise we pass the event to the super class.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Changing the menu occurs in the `onPrepareOptionsMenu()` method. To simulate
    an external event, we created a button to toggle a Boolean flag. The visibility
    of the **Download** menu is determined by the flag. This is where you would want
    to create your custom code based on whatever criteria you set. Your flag could
    be set using the current player level or maybe when a new level is ready for release;
    you send a Push message, which enables the menu item.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if we wanted this **Download** option to be easily noticed to indicate
    whether it''s available? We could tell Android we want the menu in the Action
    Bar by adding the following code to `onPrepareOptionsMenu()` (before the return
    statement):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now if you run the code, you will see the **Download** menu item in the Action
    Bar, but the behavior isn't correct.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier, when we didn''t have a menu item in the Action Bar, Android called
    `onPrepareOptionsMenu()` each time we opened the overflow menu so the visibility
    was always updated. To correct this behavior, add the following line of code to
    the `toggleMenu()` method called by the button:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `invalidateOptionsMenu()` call tells Android that our option menu is no
    longer valid, which then forces a call to `onPrepareOptionsMenu()` giving us the
    behavior we expect.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android considers the menu as always open if a menu item is displayed in the
    Action Bar.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Contextual Action Mode for a view
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Context Menu provides additional options related to a specific view—the same
    concept as a right-click on the desktop. Android currently supports two different
    approaches: the floating Context Menu and Contextual Mode. Contextual Action Mode
    was introduced in Android 3.0\. The older floating Context Menu could lead to
    confusion since there was no indication of the currently selected item and it
    didn''t support actions on multiple items—such as selecting multiple emails to
    delete in one action.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Floating Context Menu
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to use the old style Context Menu, for example, to support preAndroid
    3.0 devices, it's very similar to the Option Menu API, just different method names.
    To create the menu, use `onCreateContextMenu()` instead of `onCreateOptionsMenu()`.
    To handle the menu item selection, use `onContextItemSelected()` instead of `onOptionsItemSelected()`.
    Finally, call `registerForContextMenu()` to let the system know you want Context
    Menu events for the view.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Since Contextual Mode is considered the preferred way to display context options,
    this recipe will focus on the newer API. Contextual Mode offers the same features
    as the floating Context Menu, but also adds additional functionality by allowing
    multiple item selection when using batch mode.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate the setup of Contextual Mode for a single view.
    Once activated, with a long press, a **Contextual Action Bar** (**CAB**) will
    replace the Action Bar until Contextual Mode is finished.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Contextual Action Bar is not the same as the Action Bar and your activity
    does not need to include an Action Bar.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use Android Studio to create a new project and call it `ContextualMode`. Use
    the default **Phone & Tablet** option and select **Empty Activity** when prompted
    to add an Activity. Create a menu directory (`res/menu`) as we did in the first
    recipe, *Creating an Options menu*, to store the XML for the contextual menu.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create an **ImageView** to serve as the host view to initialize Contextual
    Mode. Since Contextual Mode is usually triggered with a long press, we will set
    up a long click listener in `onCreate()` for the `ImageView`. When called, we
    will start Contextual Mode and pass an `ActionMode` callback to handle the Contextual
    Mode events. Here are the steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by adding two new string resources. Open the `strings.xml` file
    and add the following:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With the strings created, we can now create the menu by creating a new file
    in `res/menu` called `context_menu.xml` using the following XML:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now add an `ImageView` to `activity_main.xml` to serve as the source for initiating
    Contextual Mode. Here is the XML for the ImageView:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With the UI now set up, we can add the code for Contextual Mode. First, we
    need a global variable to store the `ActionMode` instance returned when we call
    `startActionMode()`. Add the following line of code to `MainActivity.java` below
    the class constructor:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, create an `ActionMode` callback to pass to `startActionMode().` Add the
    following code to the `MainActivity` class below the code in the previous step:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With the `ActionMode` callback created, we just need to call `startActionMode()`
    to begin Contextual Mode. Add the following code to the `onCreate()` method to
    set up the long click listener:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run the program on a device or emulator to see the CAB in action.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you saw in Step 2, we have used the same menu XML to define the contextual
    menu as the other menus.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'The main piece of code to understand is the `ActionMode` callback. This is
    where we handle the Contextual Mode events: initializing the menu, handling menu
    item selections, and cleaning up. We start Contextual Mode in the long press event
    with a call to `startActionMode()` by passing in the `ActionMode` callback created
    in Step 5.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: When action mode is triggered, the system calls the `onCreateActionMode()` callback,
    which inflates the menu and displays it in the Contextual Action Bar. The user
    can dismiss the Contextual Action Bar by pressing the back arrow or the back key.
    The CAB is also dismissed when the user makes a menu selection. We show a Toast
    to give a visual feedback for this recipe but this is where you would implement
    your functionality.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we store the `ActionMode` returned from the `startActionMode()`
    call. We use it to prevent a new instance from being created when the Action Mode
    is already active. We could also use this instance to make changes to the Contextual
    Action Bar itself, such as changing the title with the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This is particularly useful when working with multiple item selections as we'll
    see in the next recipe.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the next recipe, *Using Contextual Batch Mode with a ListView*, to work
    with multiple items selection
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Contextual Batch Mode with a ListView
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed in the previous recipe, Contextual Mode supports two forms of
    use: single View mode (as demonstrated) and multiple selection (or batch) mode.
    Batch mode is where Contextual Mode outperforms the old style Context Menu as
    multiple selections were not supported.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''ve ever used an e-mail app such as Gmail or a file browser, you''ve
    probably seen Contextual Mode when selecting multiple items. Here is a screenshot
    from Solid Explorer, which shows an excellent implementation of Material Theme
    and Contextual Mode:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Contextual Batch Mode with a ListView](img/B05057_04_02.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we will create a `ListView` populated with multiple country
    names to demonstrate multiple selections or batch mode. This example will use
    the normal long press event and also the item click event to start Contextual
    Mode.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `ContextualBatchMode`. Use
    the default **Phone & Tablet** option and select **Empty Activity** when prompted
    to add an Activity. Create a menu directory (`res/menu`) for the contextual menu.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the previous recipe, we start by creating a menu in XML to inflate
    when Contextual Mode begins. We need to define `MultiChoiceModeListener` to handle
    batch mode with the `ListView`. We then set up the `ListView` to allow multiple
    selections and pass in the `MultiChoiceModeListener`. Here are the steps:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `strings.xml` file and add two new string resources for the menu items
    as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a new file called `contextual_menu.xml` in the `res/menu` folder with
    the following XML:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Since we need a `ListView`, we will change `MainActivity` to extend from `ListActivity`
    as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a `MultiChoiceModeListener` to handle the Contextual Action Bar events.
    Add the following code to `MainActivity.java` below the class constructor:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we will change the `onCreate()` to set up the `ListView` and populate
    a `ListAdapter` using a string array of country names, as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Run the program on a device or emulator to see the CAB in action.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The three key elements to make Action Mode work in batch mode are:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Contextual Menu to inflate
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining `MultiChoiceModeListener` to pass to `setMultiChoiceModeListener()`
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `ChoiceMode` of the `ListView` to `CHOICE_MODE_MULTIPLE_MODAL`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MultiChoiceModeListener` serves the same purpose as the `ActionMode` callback
    used in single-view Contextual Mode, and in fact, implements `ActionMode.Callback`.
    As with `ActionMode.Callback`, the menu is inflated when `MultiChoiceModeListener`
    calls `onCreateActionMode()`.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: By default, Context Mode is initiated with a long press on an item in the `ListView`.
    We will go a step further by starting Contextual Mode when the item is checked
    using the `onItemClick()` event. If we don't do this, the only way to initiate
    the Contextual Mode would be with a long click, which may leave many users unaware
    of the additional functionality.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned in the introduction to this chapter, your activity does not need
    to include an Action Bar to use a Contextual Action Bar. If you do have an Action
    Bar and it's visible, it will be overlaid with the CAB. If you do not have an
    Action Bar as the default with this recipe, the layout will be redrawn to include
    the CAB (and redrawn again when the CAB is dismissed). If you want the Action
    Bar to be visible, either change the theme for the Activity or change the base
    class and set up the `ListView` manually.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on the `ListView`, refer to [Chapter 2](ch02.html "Chapter 2. Layouts"),
    *Layouts*
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pop-up menu
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A pop-up menu is attached to a view similar to the dropdown on a spinner. The
    idea of a pop-up menu is to provide additional options to complete an action.
    A common example might be a **Reply** button in an e-mail app. When pressed, several
    reply options are shown, such as: **Reply**, **Reply All**, and **Forward**.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the pop-up menu from the recipe:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a pop-up menu](img/B05057_04_03.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: Android will show the menu options below the anchor view if there is room; otherwise,
    it will show them above the view.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A pop-up menu is *not* meant to affect the view itself. That is the purpose
    of a Context Menu. Instead refer to the Floating Menu/Context Mode described in
    the *Enabling Contextual Action Mode for a view* recipe.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create the pop-up menu shown previously, using an `ImageButton`
    as the anchor view.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `PopupMenu`. Use the default
    **Phone & Tablet** option and select **Empty Activity** when prompted to add an
    Activity. As before, create a menu directory (`res/menu`) to store the menu XML.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by creating the XML menu to inflate on the button press. After inflating
    the pop-up menu, we call `setOnMenuItemClickListener()` by passing in the callback
    to handle the menu item selection. Here are the steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following strings to `strings.xml`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a new file in the `res/menu` directory called `menu_popup.xml` using
    the following XML:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create an `ImageButton` in `activity_main.xml` to provide the anchor view for
    the pop-up menu. Create it as shown in the following XML code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Open `MainActivity.java` and add the following `OnMenuItemClickListener` below
    the class constructor:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The final code is to handle the button `onClick()` event, as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run the program on a device or emulator to see the pop-up menu.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have read the previous menu recipes, this will probably look very familiar.
    Basically, we just inflate a pop-up menu when the `ImageButton` is pressed. We
    set up a menu item listener to respond to the menu selection.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: The key is to understand each of the menu options available in Android so you
    can use the correct menu type for a given scenario. This will help your application
    by providing a consistent user experience and reducing the learning curve.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于理解Android中可用的每个菜单选项，这样你就可以为特定场景选择正确的菜单类型。这将通过提供一致的用户体验和降低学习曲线来帮助你的应用程序。
