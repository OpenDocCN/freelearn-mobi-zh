["```swift\nsudo apt-get update\n```", "```swift\nsudo apt-get install \\\n binutils \\\n git \\\n gnupg2 \\\n libc6-dev \\\n libcurl4 \\\n libedit2 \\\n libgcc-9-dev \\\n libpython2.7 \\\n libsqlite3-0 \\\n libstdc++-9-dev \\\n libxml2 \\\n libz3-dev \\\n pkg-config \\\n tzdata \\\n zlib1g-dev\n```", "```swift\nwget https://swift.org/builds/swift-5.3-release/ubuntu2004/swift-5.3-RELEASE/swift-5.3-RELEASE-ubuntu20.04.tar.gz\nwget https://swift.org/builds/swift-5.3-release/ubuntu2004/swift-5.3-RELEASE/swift-5.3-RELEASE-ubuntu20.04.tar.gz.sig\n```", "```swift\nwget -q -O - https://swift.org/keys/all-keys.asc | gpg --import -\n```", "```swift\ngpg --keyserver hkp://pool.sks-keyservers.net --refresh-keys Swift\n```", "```swift\ngpg --verify swift-5.3-RELEASE-ubuntu20.04.tar.gz.sig\n```", "```swift\ntar -xzf swift-5.3-RELEASE-ubuntu20.04.tar.gz\n```", "```swift\nPATH=\"$HOME/bin:$HOME/.local/bin:<path to extracted swift toolchain>/usr/bin:$PATH\"\n```", "```swift\nlet greeting = \"Hello world!\"\n```", "```swift\ngreeting: String = \"Hello world!\"\n```", "```swift\nprint(greeting)\n```", "```swift\nHello world!\n```", "```swift\n:quit\n```", "```swift\nprint(\"Hello world!\")\n```", "```swift\nswiftc HelloWorld.swift -o HelloWorld\n```", "```swift\n> ./HelloWorld\n> Hello world!\n```", "```swift\n// Model.swift\n\nclass Person {\n    let name: String\n    init(name: String) {\n        self.name = name\n    }\n}\n```", "```swift\n// main.swift\n\nlet keith = Person(name: \"Keith\")\nprint(\"Hello \\(keith.name)\")\n```", "```swift\nswiftc Model.swift main.swift -o Greeter\n```", "```swift\n> ./Greeter\n> Hello Keith!\n```", "```swift\nswift --version\n```", "```swift\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```swift\nbrew install vapor\n```", "```swift\nvapor\n```", "```swift\nvapor new TaskAPI\ncd TaskAPI\n```", "```swift\n vapor xcode\n```", "```swift\nimport App\nimport Vapor\n\nvar env = try Environment.detect()\ntry LoggingSystem.bootstrap(from: &env)\nlet app = Application(env)\ndefer { app.shutdown() }\ntry configure(app)\ntry app.run()\n```", "```swift\nimport Vapor\n\n// configures your application\npublic func configure(_ app: Application) throws {\n    // uncomment to serve files from /Public folder\n    // app.middleware.use(FileMiddleware(publicDirectory: \n      // app.directory.publicDirectory))\n\n if let databaseURL = Environment.get(\"DATABASE_URL\"),\n var postgresConfig = PostgresConfiguration(url: databaseURL) {\n postgresConfig.tlsConfiguration =   \n          .forClient(certificateVerification: .none)\n app.databases.use(.postgres(configuration: postgresConfig),\n          as: .psql)\n\n } else {\n\n        app.databases.use(.postgres(\n            hostname: Environment.get(\"DATABASE_HOST\") ?? \"localhost\",\n            port: Environment.get(\"DATABASE_PORT\").flatMap(\n              Int.init(_:)) ?? PostgresConfiguration.ianaPortNumber,\n            username: Environment.get(\"DATABASE_USERNAME\") ?? \n              \"vapor_username\",\n            password: Environment.get(\"DATABASE_PASSWORD\") ?? \n              \"vapor_password\",\n            database: Environment.get(\"DATABASE_NAME\") ?? \n              \"vapor_database\"\n        ), as: .psql)\n\n }\n\napp.migrations.add(CreateTodo())\n    // register routes\n    try routes(app)\n}\n```", "```swift\nimport Vapor\n\nfunc routes(_ app: Application) throws {\n    app.get { req in\n        return \"It works!\"\n    }\n\n    app.get(\"hello\") { req -> String in\n        return \"Hello, world!\"\n    }\n}\n```", "```swift\napp.get(\"hello\") { req -> String in\n    return \"Hello, world!\"\n}\n```", "```swift\nclass Task { \n let id: String \n var description: String\n var category: String\n\n init(id: String, description: String, category: String) {\n self.id = id\n self.description = description\n self.category = category\n }\n}\n```", "```swift\nlet task = Task(id: \"1\", description: \"Remember the milk\", category: \n  \"shopping\")\n```", "```swift\nimport Foundation\nimport Vapor\n\nfinal class Task: Content {\n\n    let id: String = UUID().uuidString\n\n    var description: String\n    var category: String\n\n}\n```", "```swift\nvar tasks = [Task]()\n```", "```swift\napp.post(\"task\") { request -> String in\n    let task = try request.content.decode(Task.self)\n    tasks.append(task)\n    return \"Task Added\"\n}\n\napp.get(\"task\") { request in\n    return tasks\n}\n```", "```swift\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"description\":\"Remember the Eggs\",\"category\":\"Shopping\"}' http://0.0.0.0:8080/task\n```", "```swift\n{\n  \"id\": \"CEC93BB9-2487-4207-97D8-E41196B44D24\",\n  \"category\": \"Shopping\",\n  \"description\": \"Remember the Eggs\"\n}\n```", "```swift\ncurl http://0.0.0.0:8080/task\n```", "```swift\n[\n  {\n    \"id\": \"CEC93BB9-2487-4207-97D8-E41196B44D24\",\n    \"category\": \"shopping\",\n    \"description\": \"Remember the milk\"\n  }\n]\n```", "```swift\nimport Foundation\nimport Vapor\n\nvar tasksByID = [String: Task]()\n\nfinal class TaskControllerAPI {\n\n    typealias Model = Task\n\n    func getTasks(req: Request) -> [String: Task] {\n        return tasksByID\n    }\n\n    func createTasks(request: Request) throws -> String {\n        let task = try request.content.decode(Task.self)\n        tasksByID[task.id] = task\n        return \"Task Added\"\n    }\n\n}\n```", "```swift\nextension TaskControllerAPI: RouteCollection {\n\n    func boot(routes: RoutesBuilder) throws {\n        routes.get(\"task\", use: getTasks)\n        routes.post(\"create\", use: createTasks)\n    }\n\n}\n```", "```swift\ntry app.register(collection: TaskControllerAPI())\n```", "```swift\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"description\":\"Remember the milk\",\"category\":\"shopping\"}' http://0.0.0.0:8080/create\n```", "```swift\ncurl http://0.0.0.0:8080/task\n```", "```swift\nstruct CreateTask: Migration {\n    func prepare(on database: Database) -> EventLoopFuture<Void> {\n        return database.schema(\"task\")\n            .id()\n            .field(\"description\", .string, .required)\n            .field(\"category\", .string, .required)\n            .create()\n    }\n\n    func revert(on database: Database) -> EventLoopFuture<Void> {\n        return database.schema(\"task\").delete()\n    }\n}\n```", "```swift\napp.migrations.add(CreateTask())\n\ntry app.autoMigrate().wait()\n```", "```swift\nimport Fluent\n\nfinal class Task: Content, Model {\n\n    static let schema = \"task\"\n\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"description\")\n    var description: String\n\n    @Field(key: \"category\")\n    var category: String\n\n    init() { }\n\n    init(id: UUID? = nil, description: String, category: String) {\n        self.id = id\n        self.description = description\n        self.category = category\n    }\n\n}\n```", "```swift\n\nfinal class TaskControllerAPI {\n\n    func index(req: Request) throws -> EventLoopFuture<[Task]> {\n        return Task.query(on: req.db).all()\n    }\n\n    func create(req: Request) throws -> EventLoopFuture<Task> {\n let task = try req.content.decode(Task.self)\n return task.save(on: req.db).map { task }\n    }\n\n    func delete(req: Request) throws -> EventLoopFuture<HTTPStatus> {\n return Task.find(req.parameters.get(\"taskID\"), on: req.db)\n .unwrap(or: Abort(.notFound))\n .flatMap { $0.delete(on: req.db) }\n .transform(to: .ok)\n    }\n\n}\n\nextension TaskControllerAPI: RouteCollection {\n\n func boot(routes: RoutesBuilder) throws {\n let tasks = routes.grouped(\"tasks\")\n tasks.get(use: index)\n tasks.post(use: create)\n tasks.group(\":taskID\") { task in\n tasks.delete(use: delete)\n }\n }\n\n}\n\n```", "```swift\n$ docker run --name postgres -e POSTGRES_DB=vapor_database \\\n -e POSTGRES_USER=vapor_username \\\n -e POSTGRES_PASSWORD=vapor_password \\\n -p 5432:5432 -d postgres\n```", "```swift\n$ Unable to find image 'postgres:latest' locally\n$ latest: Pulling from library/postgres\n```", "```swift\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"description\":\"Remember the eggs\",\"category\":\"shopping\"}' http://0.0.0.0:8080/tasks\n```", "```swift\nimport Fluent\n\nfinal class Task: Content, Model {\n\n    static let schema = \"task\"\n\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"description\")\n    var description: String\n\n    @Field(key: \"category\")\n    var category: String\n\n    init() { }\n\n    init(id: UUID? = nil, description: String, category: String) {\n        self.id = id\n        self.description = description\n        self.category = category\n    }\n\n}\n```", "```swift\n@Field(key: \"category\")\nvar category: String\n```", "```swift\nfunc create(req: Request) throws -> EventLoopFuture<Task> {\n let task = try req.content.decode(Task.self)\n return task.save(on: req.db).map { task }\n}\n```", "```swift\nfunc create(req: Request) throws -> EventLoopFuture<Task> {\n    let task = try req.content.decode(Task.self)\n    return task.save(on: req.db).map {\n        task // Closure here is part of the return function, so will be \n          // passed back up\n    }\n}\n```", "```swift\nbrew install heroku\n```", "```swift\nheroku login\n```", "```swift\ngit init\n```", "```swift\ngit add .\n```", "```swift\ngit commit -m \"Initial commit\"\n```", "```swift\nvapor heroku init\n```", "```swift\nheroku git:remote -a afternoon-bastion-18185\n```", "```swift\nheroku addons:create heroku-postgresql:hobby-dev\n```", "```swift\nweb: Run serve --env production\" --hostname 0.0.0.0 --port \\$PORT\n```", "```swift\ngit add . \ngit commit -m \"Added Procfile with databse URL\"\n```", "```swift\ngit push heroku master\n```", "```swift\nhttps://afternoon-bastion-18185.herokuapp.com\n```", "```swift\nPackage.swift\n```", "```swift\nimport PackageDescription\n\nlet package = Package(\n    name: \"TaskAPI\",\n    platforms: [\n       .macOS(.v10_15)\n    ],\n dependencies: [\n // A server-side Swift web framework.\n .package(url: \"https://github.com/vapor/vapor.git\", from: \n          \"4.0.0\"),\n .package(url: \"https://github.com/vapor/fluent.git\", from: \n          \"4.0.0\"),\n .package(url: \"https://github.com/vapor/fluent-postgres-\n           driver.git\", from: \"2.0.0\"),\n    ],\n\n    // ...\n\n)\n```", "```swift\n.package(url: \"https://github.com/vapor/vapor.git\", from: \"4.0.0\"),\n.package(url: \"https://github.com/vapor/fluent.git\", from: \"4.0.0\"),\n.package(url: \"https://github.com/vapor/fluent-postgres-driver.git\", \n  from: \"2.0.0\"),\n.package(url: \"https://github.com/Kitura/BlueSocket.git\", from: \n  \"1.0.0\"),\n```", "```swift\n$ vapor build\n```", "```swift\n.package(url: \"https://github.com/vapor/vapor.git\", from: \"4.0.0\"),\n.package(url: \"https://github.com/vapor/fluent.git\", from: \"4.0.0\"),\n.package(url: \"https://github.com/vapor/fluent-postgres-driver.git\", \n  from: \"2.0.0\"),\n.package(url: \"https://github.com/Kitura/BlueSocket.git\", from: \n  \"1.0.0\"),\n```", "```swift\n.package(url: \"https://github.com/Kitura/BlueSocket.git\", .exact(\"1.2.3\")),\n```", "```swift\n  .package(url: \"https://github.com/Kitura/BlueSocket.git\", \n    .upToNextMajor(\"1.2.3\")),\n  .package(url: \"https://github.com/Kitura/BlueSocket.git\", \n    .upToNextMinor(\"1.2.3\")),\n```", "```swift\n// swift-tools-version:5.2\n```", "```swift\ntargets: [\n .target(\n name: \"App\",\n dependencies: [\n .product(name: \"Fluent\", package: \"fluent\"),\n .product(name: \"FluentPostgresDriver\", package: \"fluent-\n               postgres-driver\"),\n .product(name: \"Vapor\", package: \"vapor\")\n ],\n        swiftSettings: [\n            // Enable better optimizations when building in Release \n              // configuration. Despite the use of\n            // the `.unsafeFlags` construct required by SwiftPM, this\n              // flag is recommended for Release\n            // builds. See <https://github.com/swift-\n               // server/guides#building-for-production> for details.\n            .unsafeFlags([\"-cross-module-optimization\"], \n              .when(configuration: .release))\n        ]\n    )\n\n    // ..\n\n]\n```", "```swift\napp.webSocket(\"talk-back\") { req, ws in\n\n}\n```", "```swift\napp.webSocket(\"talk-back\") { req, ws in\n\n ws.onText { ws, text in\n print(text)\n }\n\n ws.onBinary { (ws, buffer) in\n print(buffer)\n }\n\n}\n```", "```swift\napp.webSocket(\"talk-back\") { req, ws in\n\n    ws.onText { ws, text in\n if text.lowercased() == \"hello\" {\n ws.send(\"Is it me your are looking for...?\")\n }\n    }\n\n}\n```", "```swift\nguard let url = URL(string: \"http://127.0.0.1:8080/talk-back\") else {\n  return }\n```", "```swift\n@IBAction func onSendRequest(_ sender: Any) {\n    socket.write(string: \"Hello\")\n}\n```", "```swift\nws.onPong { (ws) in }\nws.onPing { (ws) in }\n```", "```swift\nWebSocket.connect(to: \"ws://talk-back.websocket.org\", on: eventLoop) {\n  ws in\n    print(ws)\n}\n```", "```swift\nws.send(\"Is it me your are looking for...?\") // Plain \"String\" Text\nws.send([1, 2, 3]) // Binary as UIInt\n```", "```swift\nlet promise = eventLoop.makePromise(of: Void.self)\nws.send(\"Hello\", promise: promise)\npromise.futureResult.whenComplete { result in\n    // Succeeded or failed to send.\n}\n```", "```swift\nws.close()\nws.close(promise: nil)\nws.onClose.whenComplete { result in\n    // Succeeded or failed to close.\n}\n```", "```swift\nimport Foundation\n\nenum Category: String {\n    case shopping = \"shopping\"\n    case work = \"work\"\n}\n\npublic final class TaskViewModel {\n\n    var category: Category?\n    var title: String?\n\n    var imageUrl: URL?\n\n    public convenience init(title: String, category: String) {\n        self.init()\n\n        self.category = Category(rawValue: category)\n        self.title = title\n\n        self.imageUrl = URL(string: \"https://www.test.com/\\(category)\")\n\n    }\n\n}\n```", "```swift\ndependencies: [\n        // A server-side Swift web framework.\n    .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.0.0\"),\n    .package(url: \"https://github.com/vapor/fluent.git\", from: \n      \"4.0.0\"),\n    .package(url: \"https://github.com/vapor/fluent-postgres-\n      driver.git\", from: \"2.0.0\"),\n .package(path: \"/path/to/your/TaskModule\")\n],\ntargets: [\n    .target(\n        name: \"App\",\n        dependencies: [\n            .product(name: \"Fluent\", package: \"fluent\"),\n            .product(name: \"FluentPostgresDriver\", package: \"fluent-\n               postgres-driver\"),\n            .product(name: \"Vapor\", package: \"vapor\"),\n .product(name: \"TaskModule\", package: \"TaskModule\"),\n],\n```", "```swift\nimport TaskModule\n```", "```swift\nlet viewTask = TaskViewModel(title: \"\", category: \"\")\n```", "```swift\n$ git init\n$ git add .\n$ git commit -m \"Initial commit\"\n```", "```swift\nfile:///Users/chris/Source/TaskModule\n```", "```swift\nimport TaskModule\n```", "```swift\nlet _ = TaskViewModel(title: \"\", category: \"\")\n```", "```swift\n#if os(Linux)\nimport LinuxModule\n#else\nimport GlobalModule\n#endif\n```", "```swift\n#if os(macOS)\n#if os(iOS)\n#if os(watchOS)\n#if os(tvOS)\n```"]