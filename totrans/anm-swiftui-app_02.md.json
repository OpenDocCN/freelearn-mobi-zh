["```swift\nstruct ContentView: View {\n    @State private var grow: CGFloat = 1\n    var body: some View {\n        Circle()\n            .frame(width: 100, height: 100)\n            .foregroundColor(.blue)\n            .onTapGesture {\n                self.grow += 0.5\n            }\n            .scaleEffect(grow)\n            .animation(.default, value: grow)\n    }\n}\n```", "```swift\nvar body: some View {\n        Circle()\n••••••••\n            .scaleEffect(grow)\n            .animation(.spring(dampingFraction: 0.3,blendDuration: 0.5),value: grow)\n    }\n```", "```swift\nstruct ContentView: View {\n    @State private var scaleUp: CGFloat = 1\n    var body: some View {\n        Button(action: {\n            //Animate the scale of the view when the button is               tapped\n            withAnimation(.interpolatingSpring(stiffness: 60,               damping: 2)) {\n                scaleUp *= 1.4\n            }\n        }) {\n            Text(\"Scale up\")\n                .scaleEffect(scaleUp)  // explicit animation\n        }\n    }\n}\n```", "```swift\nwithAnimation(.interpolatingSpring(stiffness: 60, damping: 2, duration: 2.5)) { scaleUp *= 1.5 }\n```", "```swift\nwithAnimation(.interpolatingSpring(stiffness: 60, damping: 2).repeatForever(autoreverses: true)) {\n                    scaleUp *= 1.4\n                }\n```", "```swift\nstruct Offset_Example: View {\n    @State private var moveRight = false\n    var body: some View {\n       //MARK: - ANIMATE OFFSET\n        VStack {\n            RoundedRectangle(cornerRadius: 20)\n                .foregroundColor(.blue)\n                .frame(width: 75, height: 75)\n                .offset(x: moveRight ? 150 : 0, y: 350 )\n                .animation(Animation.default, value: moveRight)\n            Spacer()\n            Button(\"Animate\") {\n                moveRight.toggle()\n            }.font(.title2)\n        }\n    }\n}\n```", "```swift\nstruct Hue_Rotation_Example: View {\n    @State private var hueRotate = false\n        var body: some View {\n        //MARK: - ANIMATE HUE ROTATION\n        VStack(spacing: 20) {\n            Text(\"ANIMATE HUE \").font(.title2).bold()\n            // rotate the colors and stop halfway around the               color wheel\n            RoundedRectangle(cornerRadius: 25)\n                .frame(width: 200, height: 200)\n                .foregroundColor(.red)\n                .hueRotation(Angle.degrees(hueRotate ? 180 :                   0))\n                .animation(.easeInOut(duration: 2), value:                   hueRotate)\n            // rotate the colors around the color wheel one               full revolution (360 degrees)\n            Divider().background(Color.black)\n            Text(\"ANIMATE HUE WITH GRADIENT\").font(.title2).              bold()\n            AngularGradient(gradient: Gradient(colors: [Color.              red, Color.blue]), center: .center)\n                .hueRotation(Angle.degrees(hueRotate ? 360 :                   0))\n                .animation(.easeInOut(duration: 2), value:                   hueRotate)\n                .mask(Circle())\n                .frame(width: 200, height: 200)\n            Button(\"Animate\") {\n                hueRotate.toggle()\n            }\n            .font(.title)\n        }\n    }\n}\n```", "```swift\nhueRotate = true\n```", "```swift\nhueRotate.toggle()\n```", "```swift\nstruct Opacity__Example: View {\n    @State private var appear = true\n    var body: some View {\n//MARK: - ANIMATE OPACITY\n        VStack{\n            Text(\"Appear/Disappear\")\n                .font(.title).bold()\n            Circle()\n                .foregroundColor(.purple)\n                .opacity(appear ? 1 : 0)\n                .animation(.easeIn, value: appear)\n                .frame(height: 175)\n            Button(\"Animate\") {\n                appear.toggle()\n            }.font(.title2)\n            //MARK: - OVERLAPPING OPACITY\n            VStack{\n                Text(\"Overlapping Opacity\").bold()\n                    .font(.title)\n                Circle()\n                    .foregroundColor(.yellow)\n                    .frame(height: 100)\n                    .opacity(0.5)\n                Circle()\n                    .foregroundColor(.red)\n                    .frame(height: 100)\n                    .opacity(0.5)\n                    .padding(-60)\n            }.padding(60)\n        }\n    }\n}\n```", "```swift\nstruct Scale_Example_One: View {\n    @State private var scaleCircle = false\n    var body: some View {\n            //MARK: - ANIMATE THE SCALE OF A CIRCLE SHAPE\n            VStack {\n                Text(\"SCALE SHAPE\").font(.title).bold()\n                Circle()\n                    .frame(width: 150)\n                    .foregroundColor(.green)\n                    .scaleEffect(scaleCircle ? 0.1 : 1)\n                    .animation(.default, value: scaleCircle)\n                Button(\"Scale Shape\") {\n                    scaleCircle.toggle()\n                }\n            }.font(.title2)\n        }\n    }\n```", "```swift\nstruct Scale_Example_Two: View {\n    @State private var scaleBug = false\n    var body: some View {\n        //MARK: - ANIMATE THE SCALE OF A SYSTEM IMAGE\n        VStack{\n            Text(\"SCALE IMAGE\").font(.title).bold()\n            Image(systemName: \"ladybug.fill\")\n                .renderingMode(.original) //allows multicolor                   for SF Symbols\n                .resizable()\n                .frame(width: 150, height: 150, alignment:                   .center)\n                .scaleEffect(scaleBug ? 0.1 : 1)\n                .animation(.default, value: scaleBug)\n                .padding(10)\n            Button(\"Scale Image\") {\n                scaleBug.toggle()\n            }\n        }.font(.title2)\n    }\n}\n```", "```swift\nstruct Scale_Example_Three: View {\n    @State private var scaleFromAnchor = true\n    var body: some View {\n                VStack{\n            Text(\"SCALE FROM ANCHOR \").font(.title).bold()\n            Image(systemName: \"heart.fill\")\n                .renderingMode(.original) //allows the use of                   multicolor for SF Symbols\n                .resizable()\n                .frame(width: 150, height: 125, alignment:                   .center)\n                .scaleEffect(scaleFromAnchor ? 1 : 0.2, anchor:                   .bottomTrailing)\n                .animation(.default, value: scaleFromAnchor)\n                .padding(10)\n            Button(\"Scale from Anchor\") {\n                scaleFromAnchor.toggle()\n            }\n        }.font(.title2)\n    }\n}\n```", "```swift\nstruct Stroke_Example: View {\n    @State private var animateStroke = false\n    var body: some View {\n        //MARK: - ANIMATE THE STROKE OF THE ROUNDED RECT\n        VStack{\n            Text(\"ANIMATE STROKE\").font(.title).bold()\n            RoundedRectangle(cornerRadius: 30)\n                .stroke(Color.purple, style:                   StrokeStyle(inewidth: animateStroke ? 25 :                   1))\n                .frame(width: 100, height: 100)\n                .animation(.default, value: animateStroke)\n            Button(\"Animate Stroke\") {\n                animateStroke.toggle()\n            }\n        }.font(.title2)\n    }\n}\n```", "```swift\nstruct Trim_Example: View {\n    @State private var animateTrim = false\n    @State private var circleTrim: CGFloat = 1.0\n\n    var body: some View {\n        //MARK: - ANIMATE THE TRIM MODIFIER OF A CIRCLE\n        VStack {\n            Text(\"ANIMATE TRIM\").font(.title).bold()\n                .padding(.top, 10)\n            Circle()\n                .trim(from: 0, to: circleTrim)\n                .stroke(Color.red, style: StrokeStyle(inewidth:                   30, lineCap: CGLineCap.round))\n                .frame(height: 150)\n                .rotationEffect(.degrees(180))\n                .animation(.default, value: animateTrim)\n                .padding(.bottom, 20)\n            Button(\"Animate Trim\") {\n                animateTrim.toggle()\n                circleTrim = animateTrim ? 0.25 : 1\n            }\n        }.font(.title2)\n    }\n}\n```", "```swift\nstruct Corner_Radius_Example: View {\n    @State private var animateCornerRadius = false\n\n    var body: some View {\n        //MARK: - ANIMATE THE CORNER RADIUS\n        VStack{\n            Text(\"ANIMATE CORNER RADIUS\").font(.title).bold()\n                .padding(.top, 30)\n            Rectangle()\n                .foregroundColor(.green)\n                .frame(width: 150, height: 150)\n            .cornerRadius(animateCornerRadius ? 0 : 75)\n            .animation(.default, value: animateCornerRadius)\n            .padding(.bottom, 20)\n            Button(\"Animate Corner Radius\") {\n                animateCornerRadius.toggle()\n            }\n        }.font(.title2)\n    }\n}\n```", "```swift\n.cornerRadius(animateCornerRadius ? 0 : 75) \n```"]