- en: Building on the Swift Foundation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立在Swift Foundation之上
- en: In the last chapter, we went through the basics of understanding data types
    and how to create variables and constants. Now that we are comfortable with those
    topics, let's look at adding more building blocks. This chapter will build on
    what we learned in the last chapter and get a bit closer to better understanding
    Swift.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了理解数据类型以及如何创建变量和常量的基础知识。现在我们已经对这些主题感到舒适，让我们看看添加更多构建块。本章将基于上一章所学的内容，并更接近于更好地理解Swift。
- en: 'The following will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Type safety and type inference
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型安全和类型推断
- en: Operations with Integers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数运算
- en: '`if` statements'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`语句'
- en: Optionals and optional bindings
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选和可选绑定
- en: Functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Data types are good, but we will need to add some logic to our app. For example,
    we want to be able to control whether someone should see a login screen when they
    launch the app or if they should go right into the app. You will use logic a lot,
    so let's look at what an `if` statement is and how to use it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型是好的，但我们需要在我们的应用中添加一些逻辑。例如，我们希望能够在他们启动应用时控制是否应该看到登录屏幕，或者他们是否应该直接进入应用。你将大量使用逻辑，所以让我们看看`if`语句是什么以及如何使用它。
- en: Creating a Playground project
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个游乐场项目
- en: 'As you learned earlier, launch Xcode and click on Get started with a playground:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如你之前所学的，启动Xcode并点击“使用游乐场开始”：
- en: '![](img/10e726df-ec5e-4fee-9f85-aae4267c1206.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/10e726df-ec5e-4fee-9f85-aae4267c1206.png)'
- en: The Playground template screen will appear. Make sure that you select iOS and
    then choose Blank and hit Next. You will be asked to give your project a name
    and a location to save the file; name your new Playground `iOS11-Programming-for-Beginners-Ch3`.
    You can save the file anywhere that you like. Now, with the project saved, we
    can explore Playgrounds a bit.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场模板屏幕将出现。确保你选择iOS，然后选择空白并点击下一步。你将被要求给你的项目命名并指定保存文件的位置；将你的新游乐场命名为`iOS11-Programming-for-Beginners-Ch3`。你可以将文件保存到任何你喜欢的位置。现在，随着项目的保存，我们可以探索一下游乐场。
- en: The if statements – having fun with logic statements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`if`语句——逻辑语句的乐趣'
- en: 'Let''s add our first piece of logic using an `if` statement. An `if` statement
    is a simple statement to determine whether or not a statement is true. Input the
    following into Xcode:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`if`语句添加我们的第一个逻辑片段。`if`语句是一个简单的语句，用于确定一个语句是否为真。将以下内容输入到Xcode中：
- en: '![](img/8aaccd7a-41ae-4f3f-aa46-bbe702bcb1e8.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8aaccd7a-41ae-4f3f-aa46-bbe702bcb1e8.png)'
- en: 'In the first line of the preceding code, we created a constant named, `isPictureVisible`,
    and we set it to `true`. The next line starts our `if` statement and is read as
    follows: if `isPictureVisible` is `true`, then print `Picture is visible`. When
    we write `if` statements, we must use the curly braces to enclose our logic. It
    is good practice to put the opening curly brace (`{`) on the same line as the
    `if` and the closing curly brace (`}`) on the line immediately after your logic.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一段代码的第一行，我们创建了一个名为`isPictureVisible`的常量，并将其设置为`true`。下一行开始我们的`if`语句，其读法如下：如果`isPictureVisible`为`true`，则打印`Picture
    is visible`。当我们编写`if`语句时，我们必须使用花括号来包含我们的逻辑。将开括号（`{`）放在`if`语句的同一行，并将闭括号（`}`）放在逻辑之后的下一行是一个好的实践。
- en: 'When writing `if` statements using a `bool`, you are always checking for `true`;
    however, if you wanted to check for `false`, you would do the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`bool`编写`if`语句时，你总是在检查`true`；然而，如果你想检查`false`，你会这样做：
- en: '![](img/6da505b5-89ac-4290-ba5d-a7c57852e606.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6da505b5-89ac-4290-ba5d-a7c57852e606.png)'
- en: 'Bools work great with `if` statements, but we also can use them with other
    data types. Let''s try an `if` statement with an `Int` next. Write the following
    into Playgrounds:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bools`与`if`语句配合得很好，但我们也可以将它们与其他数据类型一起使用。让我们尝试一个带有`Int`的`if`语句。将以下内容写入Playgrounds：'
- en: '![](img/b8112d3b-7dae-4167-a501-520c5789b361.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b8112d3b-7dae-4167-a501-520c5789b361.png)'
- en: In the preceding example, we first created another constant with our `Int` set
    to `19`. The next line says—if `drinkingAgeLimit` is less than `21`, then print
    `Since we cannot offer you an adult beverage - would you like a water or soda
    to drink?` When you are using `Int` within `if` statements, you will use the comparison
    operators (`<`, `>`, `<=`, `>=`, `==`, or `!=`). However, our last `if` statement
    feels incomplete, because we are not doing anything for someone over `21`. This
    is where you will utilize an `if...else` statement. You enter an `if...else` statement
    exactly as you did an `if` statement, but, at the end, you add the word else.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们首先使用 `Int` 设置为 `19` 创建了另一个常量。下一行表示——如果 `drinkingAgeLimit` 小于 `21`，则打印
    `Since we cannot offer you an adult beverage - would you like a water or soda
    to drink?` 当你在 `if` 语句中使用 `Int` 时，你将使用比较运算符 (`<`, `>`, `<=`, `>=`, `==`, 或 `!=`)。然而，我们的最后一个
    `if` 语句感觉不完整，因为我们没有对超过 `21` 的人做任何事情。这就是你将利用 `if...else` 语句的地方。你将 `if...else` 语句输入的方式与
    `if` 语句完全一样，但在最后，你添加单词 else。
- en: 'You can add else to both of the `if` statements we have inputted so far, but,
    for now, just add it to the end of our last `if` statement:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 else 添加到我们迄今为止输入的两个 `if` 语句中，但现在，只需将其添加到我们最后的 `if` 语句的末尾：
- en: '![](img/b698287d-0910-43ef-b95b-8621a055e07d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b698287d-0910-43ef-b95b-8621a055e07d.png)'
- en: With else added onto the end of our `if` statement, it turns into an `if...else`
    statement, which now reads—if `drinkingAgeLimit` is less than `21`, then print
    `Since we cannot offer you an adult beverage - would you like a water or soda
    to drink?` Otherwise (or `else`), print `What type of beverage would you like?
    We have adult beverages along with water or soda to drink`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `if` 语句的末尾添加 else 后，它变成了 `if...else` 语句，现在读作——如果 `drinkingAgeLimit` 小于
    `21`，则打印 `Since we cannot offer you an adult beverage - would you like a water
    or soda to drink?` 否则（或 `else`），打印 `What type of beverage would you like? We have
    adult beverages along with water or soda to drink`。
- en: 'Now, our `if...else` statement can handle both conditions. Based on the value
    `19` for our `drinkingAgeLimit`, we can see in the Debug panel: `Since we cannot
    offer you an adult beverage - would you like a water or soda to drink?` If we
    change `drinkingAgeLimit` to `30`, our Debug panel says, `What type of beverage
    would you like? We have adult beverages along with water or soda to drink`. Go
    ahead and change `19` to `30` in Playgrounds:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 `if...else` 语句可以处理两种条件。根据 `drinkingAgeLimit` 的值 `19`，我们可以在调试面板中看到：“Since
    we cannot offer you an adult beverage - would you like a water or soda to drink?”
    如果我们将 `drinkingAgeLimit` 改为 `30`，我们的调试面板会说：“What type of beverage would you like?
    We have adult beverages along with water or soda to drink”。请将 `19` 改为 `30` 在游乐场中：
- en: '![](img/79573220-3eb7-4b7e-a904-885ffdb0c735.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/79573220-3eb7-4b7e-a904-885ffdb0c735.png)'
- en: Note that we got the behavior we wanted in the Debug panel.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在调试面板中得到了我们想要的行为。
- en: 'So far, we have covered using an `if` statement with a `bool` and an `Int`.
    Let''s take a look at one more example using a string. Add this next bit of code
    into Playgrounds:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以到目前为止，我们已经涵盖了使用 `bool` 和 `Int` 的 `if` 语句。让我们看看一个使用字符串的另一个例子。将以下代码段添加到游乐场中：
- en: '![](img/76afaef3-8ba1-4ae5-92bd-aeb37059bc43.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/76afaef3-8ba1-4ae5-92bd-aeb37059bc43.png)'
- en: In programming, we use equals (`=`) when setting data to variables. However,
    in order to compare two data types, we must use the double equals (`==`). Therefore,
    when we write an `if` statement that compares two strings we must use double equals
    (`==`) instead of just equals (`=`) to determine equality.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，我们使用等于号 (`=`) 来设置数据到变量。然而，为了比较两种数据类型，我们必须使用双等于号 (`==`)。因此，当我们编写比较两个字符串的
    `if` 语句时，我们必须使用双等于号 (`==`) 而不是单等于号 (`=`) 来确定相等性。
- en: 'An `if...else` statement only lets us check two conditions, whether they are
    `true` or `not`. If we wanted to add more conditions, we would not be able to
    simply use an `if...else` statement. In order to accomplish this, we would use
    what is called an `if...else...if...else`. This statement gives us the ability
    to add any number of `else-if`s inside of our `if...else` statement. We will not
    go overboard, so let''s just add one. Update your last `if...else` statement to
    the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`if...else` 语句只能让我们检查两个条件，无论它们是 `true` 还是 `not`。如果我们想添加更多条件，我们就不能简单地使用 `if...else`
    语句。为了完成这个任务，我们会使用所谓的 `if...else...if...else`。这个语句让我们能够在 `if...else` 语句内部添加任意数量的
    `else-if`。我们不会做得太过分，所以让我们只添加一个。将你的最后一个 `if...else` 语句更新为以下内容：'
- en: '![](img/2d34e93e-47be-475e-864e-7142a51abd98.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2d34e93e-47be-475e-864e-7142a51abd98.png)'
- en: In this example of an `if...else...if...else` statement, we are checking whether `restaurantName`
    equals `La Bamba`, print `I've only been to La Bamba II!` else, if `restaurantName`
    equals `This restaurant is excellent! else print Oh! I've never heard of that
    restaurant`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`if...else...if...else`语句的例子中，我们正在检查`restaurantName`是否等于`La Bamba`，如果等于，打印`I've
    only been to La Bamba II!`，否则，如果`restaurantName`等于`This restaurant is excellent!`，则打印`Oh!
    I've never heard of that restaurant`。
- en: Using `if`, `if...else` and `if...else if...else` statements really helps you
    create simple or complex logic for your app. Being able to use them with `Strings`,
    `bools`, `Ints`, and floating-point numbers gives you more flexibility.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`if`、`if...else`和`if...else if...else`语句可以帮助你为你的应用创建简单或复杂的逻辑。能够使用它们与`Strings`、`bools`、`Ints`和浮点数一起使用，这为你提供了更多的灵活性。
- en: Optionals and optional bindings
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可选和可选绑定
- en: 'Optionals are used when a value cannot be set. Think of optionals as a container
    that can take either a value or nil. This gives us the ability to check whether
    the value is nil or not. In order to create an optional value, you will have to
    give it a data type followed by a question mark (`?`). Before we do that, let''s
    create a string that is not an optional. Add the following to Playgrounds:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可选值用于无法设置值的情况。将可选值想象成一个可以接受值或nil的容器。这使我们能够检查值是否为nil。为了创建一个可选值，你必须给它一个数据类型，后面跟着一个问号(`?`)。在我们这样做之前，让我们创建一个不是可选的字符串。将以下内容添加到Playgrounds中：
- en: '![](img/ed31aef8-ae52-4799-8244-2661f3462c52.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed31aef8-ae52-4799-8244-2661f3462c52.png)'
- en: 'Now, let''s add an optional to Playgrounds:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在Playgrounds中添加一个可选值：
- en: '![](img/2af14328-97f5-49d5-980a-91ee6b453472.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2af14328-97f5-49d5-980a-91ee6b453472.png)'
- en: 'In this example, we created a string optional, and, if you notice in the Results
    panel, it is nil. But for our `notAnOptional`, we see `This is not an optional`.
    Now, on the next line, let''s set `optional` equal to `This is an optional`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个字符串可选值，如果你注意在结果面板中，它是nil。但对我们来说`notAnOptional`，我们看到`This is not
    an optional`。现在，在下一行，让我们将`optional`设置为`This is an optional`：
- en: '![](img/d30a51c3-e5fa-4ad8-adb9-ec282253ef12.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d30a51c3-e5fa-4ad8-adb9-ec282253ef12.png)'
- en: 'In our Results panel, we see `This is an optional`. Let''s now print both `strNotAnOptional`
    and `strOptional`, as you will see a difference between the two:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的结果面板中，我们看到`This is an optional`。现在，让我们打印`strNotAnOptional`和`strOptional`，正如你将看到这两个之间的区别：
- en: '![](img/d8e086aa-241c-4f20-9509-029c86b032dc.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d8e086aa-241c-4f20-9509-029c86b032dc.png)'
- en: 'Note that our `notAnOptional` variable looks fine, but `optional` has an optional
    wrapped (`""`) around the `String`. This means that, in order for us to access
    the value, we must unwrap the optional. One way we could do this is by force-unwrapping
    the optional using an (`!`). Let''s update our `print` statement and change it
    to the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们的`notAnOptional`变量看起来很好，但`optional`有一个可选的包裹(`""`)在`String`周围。这意味着，为了我们能够访问值，我们必须解包可选值。我们可以通过使用(`!`)强制解包可选值来做到这一点。让我们更新我们的`print`语句，并将其更改为以下内容：
- en: '![](img/4bd5377f-de1c-4b37-81d7-d2894b028da6.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4bd5377f-de1c-4b37-81d7-d2894b028da6.png)'
- en: 'We just force-unwrapped our optional, but this method is not recommended. We
    should use what is called **optional binding**, which is the safe way to access
    the value using an `if...let` statement. Remove the (`!`) from the `print` statement
    and instead write the following optional binding:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是强制解包了我们的可选值，但这种方法并不推荐。我们应该使用所谓的**可选绑定**，这是使用`if...let`语句安全访问值的方法。从`print`语句中移除(`!`)，而是编写以下可选绑定：
- en: '![](img/4d9dfc16-b027-474f-9898-3bad16ebcfd3.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4d9dfc16-b027-474f-9898-3bad16ebcfd3.png)'
- en: This `if...let` statement is saying that if the optional is not nil, set it
    to `strValue`—but, if this optional is nil, ignore it and do nothing. We now do
    not have to worry about anything setting our value and causing our app to crash.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`if...let`语句表示，如果可选值不是nil，则将其设置为`strValue`——但如果这个可选值是nil，则忽略它并什么都不做。现在我们不必担心任何设置我们的值并导致我们的应用崩溃的事情。
- en: Why optionals?
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么需要可选值？
- en: 'So, now you are probably asking: Why do you have to do this? Trust me, when
    I first learned about optionals, I felt the same way. Optionals were actually
    made for your protection. For now, just understand that, when you see a data type
    followed by a question mark, this variable is an optional. As we work with optionals
    more and more throughout the book, it will become clearer to you.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你现在可能想知道：为什么你必须这样做？相信我，当我第一次了解到可选值时，我也有同样的感觉。可选值实际上是为了你的保护而设计的。现在，只需理解，当你看到后面跟着问号的类型时，这个变量是一个可选值。随着我们在整本书中越来越多地使用可选值，这对你来说会变得更加清晰。
- en: Functions
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: 'Now, it is time to get into a really fun part of programming and learn how
    to write functions. Functions are self-contained pieces of code that you want
    to run on something. In Swift 3, Apple has made a change to how you should write
    functions. All of the functions we will write in this chapter will perform an
    action (think of verbs). Let''s create a simple function called `greet()`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候进入编程的真正有趣部分，学习如何编写函数了。函数是包含你想要运行的代码的自包含代码块。在Swift 3中，苹果公司对如何编写函数做了一些改变。我们将在本章中编写的所有函数都将执行一个动作（想想动词）。让我们创建一个简单的函数，名为`greet()`：
- en: '![](img/3bc6f7b8-d786-41ac-ae1c-77065c7b9c27.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3bc6f7b8-d786-41ac-ae1c-77065c7b9c27.png)'
- en: 'This example is a basic function with a `print` statement in it. In programming,
    functions do not actually run until you call them. We call a function simply by
    calling its name. So, let''s call greet:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是一个包含`print`语句的基本函数。在编程中，函数实际上只有在被调用时才会运行。我们通过调用函数的名字来调用一个函数。所以，让我们调用`greet`：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once we add this to the code, this is what we''ll see on the screen:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将这个添加到代码中，屏幕上就会出现以下内容：
- en: '![](img/c4cff64e-3f9d-417d-902d-ac1c713e26eb.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c4cff64e-3f9d-417d-902d-ac1c713e26eb.png)'
- en: 'That''s it! We just created our first function and called it. However, functions
    can do so much more. We can add what is called a parameter to a function. A parameter
    allows us to accept data types inside our parentheses. Doing this allows us to
    build more reusable chunks of code. So, let''s update our `greet()` function to
    accept a parameter called `name`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们刚刚创建并调用了我们的第一个函数。然而，函数可以做更多的事情。我们可以向函数添加一个称为参数的东西。参数允许我们在括号内接受数据类型。这样做允许我们构建更多可重用的代码块。所以，让我们更新我们的`greet()`函数，使其接受一个名为`name`的参数：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After you update the function, you will get an error:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 更新函数后，你会得到一个错误：
- en: '![](img/086d4cf0-3239-4202-ab8d-70d0465d32b2.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/086d4cf0-3239-4202-ab8d-70d0465d32b2.png)'
- en: 'We received this error because we updated our function, but we did not update
    the line where we called it. Let''s update where we call `greet()` to the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到这个错误是因为我们更新了我们的函数，但没有更新调用它的那一行。让我们将调用`greet()`更新为以下内容：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/3bd342cf-538c-4074-a8b2-e542b9cdd337.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3bd342cf-538c-4074-a8b2-e542b9cdd337.png)'
- en: 'This looks good; however, the Debug panel shows us that we are not using the
    name in our greeting. Earlier, you learned how to create a string interpolation.
    So, we just need to append our variable name inside of our `print` statement,
    as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来不错；然而，调试面板显示我们没有在我们的问候语中使用名字。之前，你学习了如何创建字符串插值。所以，我们只需要在我们的`print`语句中添加我们的变量名，如下所示：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is how your code will now look:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你的代码现在应该看起来像的样子：
- en: '![](img/4553f86e-d5e6-4861-a1cf-54278a0af278.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4553f86e-d5e6-4861-a1cf-54278a0af278.png)'
- en: 'Functions can take multiple parameters, so let''s create another `greet()`
    function that takes two parameters, a first name and a last name:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以接受多个参数，所以让我们创建另一个接受两个参数的`greet()`函数，即一个名字和一个姓氏：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, your code and its output should look as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码及其输出应该看起来如下截图所示：
- en: '![](img/ca98edf9-3d67-4761-861c-6452b9b15d88.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ca98edf9-3d67-4761-861c-6452b9b15d88.png)'
- en: 'We also need to update where we called `greet()` to accept multiple parameters
    as well:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更新调用`greet()`的地方，使其能够接受多个参数：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, your code and output screen should look something like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码和输出屏幕应该看起来大致如下：
- en: '![](img/804a1db9-3e9b-4916-8e05-867da5c73673.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/804a1db9-3e9b-4916-8e05-867da5c73673.png)'
- en: We now have a function that accepts multiple parameters.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个接受多个参数的函数。
- en: What would be great is if we could make a function that return the greeting
    to us. Well, we can! Whenever we want our function to return something, we need
    to use a noun as a way to describe what our function will do. We just created
    a function called `greet()` that takes a first and last name and creates a full
    name.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能够创建一个返回问候语的函数那就太好了。我们可以做到！每当我们要让函数返回某些东西时，我们需要使用一个名词来描述我们的函数将要做什么。我们刚刚创建了一个名为`greet()`的函数，它接受一个名字和一个姓氏，并创建一个全名。
- en: 'Now, let''s create another function called `greeting()`, which will return
    a full name back with a greeting. Let''s see what this looks like:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建另一个名为`greeting()`的函数，它将返回一个带有问候语的全名。让我们看看它是什么样子：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is how your code and output screen should look:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你的代码和输出屏幕应该看起来像的样子：
- en: '![](img/02543775-e32b-4802-bafd-496820b31576.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/02543775-e32b-4802-bafd-496820b31576.png)'
- en: 'This function is almost the same as the previous one, but with a couple of
    new things. First `-> String` tells the function that we want to return a string.
    Inside of our function, we return `"Hello \(first) \(last)"`. Since we said that
    we want to return something after our parentheses, then we have to do just that.
    Now, let''s see how we do this. Enter the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数几乎和上一个一样，但有一些新东西。首先`-> String`告诉函数我们想要返回一个字符串。在我们的函数内部，我们返回`"Hello \(first)
    \(last)"`。由于我们说在括号之后要返回一些内容，所以我们必须这样做。现在，让我们看看我们如何做到这一点。输入以下内容：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, this is how your code and output screen should look:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是你的代码和输出屏幕应该看起来像的：
- en: '![](img/b016fa1c-4709-4ae6-9a12-325bdf6c498d.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b016fa1c-4709-4ae6-9a12-325bdf6c498d.png)'
- en: If you notice, in the Debug panel we now have our full name with `Hello` added
    to the beginning. As you start to build on functions, you really start to see
    the power.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到，在调试面板中我们现在有了我们的全名，并在前面添加了`Hello`。当你开始构建函数时，你真的会看到其力量。
- en: These are just the basics of functions. We will cover more advanced functions
    throughout our *Let's Eat* app. The main thing beginning programmers forget is
    that functions should be small. Your function should do one thing and one thing
    only. If your function is too long, then you need to break it up into smaller
    chunks. Sometimes longer functions are unavoidable, but you should always be mindful
    of keeping them as small as possible. Nice work!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是函数的基础。我们将在我们的*Let's Eat*应用程序中涵盖更多高级函数。初学者容易忘记的是，函数应该是小的。你的函数应该只做一件事。如果你的函数太长，那么你需要将其拆分成更小的部分。有时较长的函数是不可避免的，但你应该始终注意尽可能保持它们尽可能小。做得不错！
- en: '**Let''s work**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们开始吧**'
- en: 'We covered a lot in this chapter, and now it is time to put everything we covered
    into practice. Here are two challenges. If you are comfortable with them, then
    work on them on your own. Otherwise, go back into this chapter and you can follow
    along with me and see how to do each one:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中涵盖了大量的内容，现在是将我们所学的一切付诸实践的时候了。这里有两大挑战。如果你对它们感到舒适，那么你可以自己动手做。否则，回到本章，你可以跟随我一起看看如何完成每一个：
- en: '**Challenge 1**: Write a function that accepts and returns a custom greeting
    (other than `Hello`, which we addressed earlier in this chapter) along with your
    first and last name'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挑战1**：编写一个函数，该函数接受并返回一个自定义问候语（除了我们本章早些时候提到的`Hello`之外）以及你的名字和姓氏'
- en: '**Challenge 2**: Write a function that will take two numbers and add, subtract,
    multiply, or divide those two numbers'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挑战2**：编写一个函数，该函数将接受两个数字并将它们相加、相减、相乘或相除'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we learned what type safety is, as well as type inference.
    We also learned about operations with integers as well as working our way through
    `if` statements. Finally, we discussed the power of optionals and learned about
    what functions are and how to use them.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了什么是类型安全，以及类型推断。我们还学习了整数运算以及如何通过`if`语句进行操作。最后，我们讨论了可选性的力量，并了解了函数是什么以及如何使用它们。
- en: In the next chapter, we will move on to some more Swift basics by digging into
    Swift collections. Learning these well will really help you progress in Swift,
    because you will use them all the time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过深入研究Swift集合来继续学习一些更多的Swift基础知识。学好这些内容将真正帮助你进步，因为你会经常用到它们。
