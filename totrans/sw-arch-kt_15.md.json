["```kt\n    fun String.getFirstLetters(): String =\n        split(\" \").joinToString(\".\") {\n            it.first().toString()\n        }\n    ```", "```kt\n    fun List<String>?.concat(): String = this?.joinToString(\",\")?: \"\"\n    ```", "```kt\n    data class Name(val value: String) {\n        fun toJson(): String = \"{\\\"name\\\":\\\"$value\\\"}\"\n    }\n    ```", "```kt\n    fun toJson(name: Name): String = \"{\\\"name\\\":\\\"${name.value}\\\"}\"\n    ```", "```kt\nfun Name.toJson(): String = \"{\\\"name\\\":\\\"$value\\\"}\"\n```", "```kt\nobject NameJsonConverter {\n    fun toJson(name: Name): String = \"{\\\"name\\\":\\\"${name.value}\\\"}\"\n}\n```", "```kt\nprivate fun Name.toJson(): String = \"{\\\"name\\\":\\\"$value\\\"}\"\n```", "```kt\nobject When\n```", "```kt\ntypealias PreCondition = () -> Int\ntypealias Action = (Int) -> Int\n```", "```kt\ninfix fun When.number(n: Int): PreCondition = { n }\ninfix fun PreCondition.then(action: Action): Int = action(this())\n```", "```kt\nobject Square: Action {\n    override fun invoke(p1: Int): Int = p1 * p1\n}\ninfix fun Int.shouldBe(expected: Int) {\n    require(this == expected) {\n        \"Expected: $expected but was $this\"\n    }\n}\n```", "```kt\n((When.number(2)).then(Square)).shouldBe(5)\n```", "```kt\nExpected: 5 but was 4\n```", "```kt\nWhen number 2 then Square shouldBe 5\n```", "```kt\ndata class Name(val value: String)\noperator fun Name.plus(other: Name): Name =\n    Name(\"$value ${other.value}\")\nfun main() { println(Name(\"Sam\") + Name(\"Payne\")) }\n```", "```kt\n+\n```", "```kt\nplus\n```", "```kt\na + b\n```", "```kt\n+\n```", "```kt\nunaryPlus\n```", "```kt\n+a\n```", "```kt\n-\n```", "```kt\nminus\n```", "```kt\na - b\n```", "```kt\n-\n```", "```kt\nunaryMinus\n```", "```kt\n-a\n```", "```kt\n*\n```", "```kt\ntimes\n```", "```kt\na * b\n```", "```kt\n/\n```", "```kt\ndiv\n```", "```kt\na / b\n```", "```kt\n%\n```", "```kt\nrem\n```", "```kt\na % b\n```", "```kt\n==\n```", "```kt\nequals\n```", "```kt\na == b\n```", "```kt\n!=\n```", "```kt\nnotEquals\n```", "```kt\na != b\n```", "```kt\n>\n```", "```kt\ncompareTo\n```", "```kt\na > b\n```", "```kt\n[]\n```", "```kt\nget\n```", "```kt\nval value = a[key]\n```", "```kt\n[]\n```", "```kt\nset\n```", "```kt\na[key] = value\n```", "```kt\n+\n```", "```kt\nunaryPlus\n```", "```kt\n+a\n```", "```kt\n()\n```", "```kt\ninvoke\n```", "```kt\na()\n```", "```kt\n\"3\".let { it + \"5\" }\n\"3\".run { this + \"5\" }\nwith(\"3\") { this + \"5\" }\n```", "```kt\n    \"3\".also { println(it) }\n    \"3\".apply { println(this) }\n```", "```kt\nclass ValidationBuilder {\n    private val failures = mutableListOf<String>()\n    fun evaluate(\n        result: Boolean,\n        failureMessage: () -> String\n    ) {\n        if (!result) failures.add(failureMessage())\n    }\n    fun getErrors() = failures.toList()\n}\n```", "```kt\nfun <T> T.validate(\n    build: ValidationBuilder.(T) -> Unit\n): List<String> =\n    ValidationBuilder()\n        .also { builder -> builder.build(this) }\n        .getErrors()\n```", "```kt\nfun main() {\n    val failures = \"Some very%long nickname\".validate {\n        evaluate(it.length < 20) { \"Must be under 20 characters: \\\"$it\\\"\" }\n        evaluate(it.contains(\"%\").not()) { \"Must not contains % character\"}\n    }\n    println(\"failures: $failures\")\n}\n```", "```kt\nfailures: [Must be under 20 characters: \"Some very%long nickname\", Must not contains % character]\n```", "```kt\nrouting {\n    route(\"/hello\", HttpMethod.Get) {\n        handle {\n            call.respondText(\"Hello\")\n        }\n    }\n}\n```", "```kt\nplugins {\n    kotlin(\"jvm\") version \"2.0.20\"\n}\n```", "```kt\nplugins {\n    id 'org.jetbrains.kotlin.jvm' version '2.0.20'\n}\n```", "```kt\n<properties>\n    <kotlin.version>2.0.20</kotlin.version>\n</properties>\n<plugins>\n    <plugin>\n        <artifactId>kotlin-maven-plugin</artifactId>\n        <groupId>org.jetbrains.kotlin</groupId>\n        <version>2.0.20</version>\n    </plugin>\n</plugins>\n```", "```kt\npublic class Household {\n    private final String name;\n    private final List<String> members = new ArrayList<>();\n    public Household(String name, List<String> members) {\n        this.name = name;\n        this.members.addAll(members);\n    }\n    public String getName() {\n        return name;\n    }\n    public List<String> getMembers() {\n        return new ArrayList(members);\n    }\n}\n```", "```kt\nclass Household(val name: String, members: List<String?>) {\n    private val members: MutableList<String?> = ArrayList()\n    init {\n        this.members.addAll(members)\n    }\n    fun getMembers(): List<String?> {\n        return ArrayList<Any?>(members)\n    }\n}\n```", "```kt\ndata class Household(val name: String, val members: List<String>)\n```", "```kt\npublic record Account(String number, String holderName) {}\n```", "```kt\n@JvmRecord\ndata class Account(val number: String, val holderName: String)\n```"]