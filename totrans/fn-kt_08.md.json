["```kt\npublic fun <T> listOf(vararg elements: T): List<T> \n```", "```kt\nfun main(args: Array<String>) { \n val list = listOf<Int>(1,2,3,4,5,6,7,8,9,10) \n\n    for (i in list) { \n        println(\"Item $i\") \n    } \n} \n```", "```kt\nfun main(args: Array<String>) { \n val emptyList1 = listOf<Any>() val emptyList2 = emptyList<Any>() \n\n    println(\"emptyList1.size = ${emptyList1.size}\") \n    println(\"emptyList2.size = ${emptyList2.size}\") \n} \n```", "```kt\nfun main(args: Array<String>) { \n val list = mutableListOf(1,2,4)//(1) \n\n    for (i in list) { \n        println(\"for1 item $i\") \n    } \n\n    println(\"-----Adding Items-----\") \n\n list.add(5)//(2) list.add(2,3)//(3) list.add(6)//(4) \n\n    for (i in list) { \n        println(\"for2 item $i\") \n    } \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val list = listOf( \n            \"1st Item\", \n            \"2nd Item\", \n            \"3rd Item\", \n            \"4th Item\", \n            \"5th Item\" \n    ) \n\n    println(\"3rd Item on the list - ${list.get(2)}\") \n    println(\"4rd Item on the list - ${list[3]}\") \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val set = mutableSetOf(1,2,3,3,2) \n\n    println(\"set $set\") \n\n    set.add(4) \n    set.add(5) \n    set.add(5) \n    set.add(6) \n\n    println(\"set $set\") \n} \n```", "```kt\ndata class MyDataClass (val someNumericValue:Int, val someStringValue:String)\nclass MyCustomClass (val someNumericValue:Int, val someStringValue:String) {\n    override fun toString(): String {\n      return \"MyCustomClass(someNumericValue=$someNumericValue, someStringValue=$someStringValue)\"\n    }\n  }\nfun main(args: Array<String>) {\n    val dataClassSet = setOf(\n         MyDataClass(1,\"1st obj\"),\n         MyDataClass(2,\"2nd obj\"),\n         MyDataClass(3,\"3rd obj\"),\n         MyDataClass(2,\"2nd obj\"),\n         MyDataClass(4,\"4th obj\"),\n         MyDataClass(5,\"5th obj\"),\n         MyDataClass(2,\"will be added\"),\n         MyDataClass(3,\"3rd obj\")\n    )\n    println(\"Printing items of dataClassSet one by one\")\n    for(item in dataClassSet) {\n      println(item)\n    }\n    val customClassSet = setOf(\n      MyCustomClass(1,\"1st obj\"),\n      MyCustomClass(2,\"2nd obj\"),\n      MyCustomClass(3,\"3rd obj\"),\n      MyCustomClass(2,\"2nd obj\"),\n      MyCustomClass(4,\"4th obj\"),\n      MyCustomClass(5,\"5th obj\"),\n      MyCustomClass(5,\"5th Obj\"),\n      MyCustomClass(3,\"3rd obj\")\n    )\n    println(\"Printing items of customClassSet one by one\")\n    for(item in customClassSet) {\n      println(item)\n    }\n }\n```", "```kt\noverride fun hashCode() = someStringValue.hashCode()+someNumericValue.hashCode() \n\n    override fun equals(other: Any?): Boolean { \n        return other is MyCustomClass && other.someNumericValue == someNumericValue && other.someStringValue==someStringValue \n    } \n```", "```kt\nfun main(args: Array<String>) { \n    val map = mapOf( \n            \"One\".to(1), \n            \"Two\".to(2), \n            \"Three\".to(3), \n            \"Four\".to(4), \n            \"Five\".to(0),//(1) We placed 0 instead of 5 here, will be replaced later \n            \"Six\".to(6), \n            \"Five\".to(5)//(2) This will replace earlier map of \"Five\".to(0) \n            ) \n\n    println(\"The value at Key `Four` is ${map[\"Four\"]}\") \n\n    println(\"Contents in map\") \n    for(entry in map) { \n        println(\"Key ${entry.key}, Value ${entry.value}\") \n    } \n\n    val mutableMap = mutableMapOf<Int,String>() \n\n    mutableMap.put(1,\"Item 1\") \n    mutableMap.put(2,\"Item 2\") \n    mutableMap.put(3,\"Item 3\") \n    mutableMap.put(4,\"Item 4\") \n\n    println(\"Replacing value at key 1 - ${mutableMap.put(1,\"Item 5\")}\")//(3) \n\n    println(\"Contents in mutableMap\") \n    for(entry in mutableMap) { \n        println(\"Key ${entry.key}, Value ${entry.value}\") \n    } \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val list = listOf<Int>(1,2,3,4,5,6,7,8,9,10) \n    val modifiedList = list.map { it*2 } \n\n    println(\"modifiedList -> $modifiedList\") \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val list = 1.until(50).toList()//(1) \n    val filteredListEven = list.filter { it%2==0 }//(2) \n\n    println(\"filteredListEven -> $filteredListEven\") \n\n    val filteredListPSquare = list.filter { \n        val sqroot = sqrt(it.toDouble()).roundToInt() \n        sqroot*sqroot==it \n    }//(3) \n\n    println(\"filteredListPSquare -> $filteredListPSquare\") \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val list = listOf(10,20,30) \n\n    val flatMappedList = list.flatMap { \n        it.rangeTo(it+2).toList() \n    } \n\n    println(\"flatMappedList -> $flatMappedList\") \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val list = 1.until(50).toList() \n\n    println(\"list.drop(25) -> ${list.drop(25)}\")//(1) \n    println(\"list.dropLast(25) -> ${list.dropLast(25)}\")//(2) \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val list = 1.until(50).toList() \n\n    println(\"list.take(25) -> ${list.take(25)}\")//(1) \n    println(\"list.takeLast(25) -> ${list.takeLast(25)}\")//(2) \n    println(\"list.takeWhile { it<=10 } -> ${list.takeWhile { it<=10 }}\")//(3) \n    println(\"list.takeLastWhile { it>=40 } -> ${list.takeLastWhile { it>=40 }}\")//(4) \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val list1 = listOf(1,2,3,4,5) \n    val list2 = listOf( \n            \"Item 1\", \n            \"Item 2\", \n            \"Item 3\", \n            \"Item 4\", \n            \"Item 5\" \n    ) \n\n    val resultantList = list1.zip(list2) \n\n    println(resultantList) \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val list1 = listOf(1,2,3,4,5,6,7,8) \n    val list2 = listOf( \n            \"Item 1\", \n            \"Item 2\", \n            \"Item 3\", \n            \"Item 4\", \n            \"Item 5\" \n    ) \n\n    println(\"list1.zip(list2)-> ${list1.zip(list2)}\") \n\n    println(\"list1.zipWithNext() -> ${list1.zipWithNext()}\") \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val list = 1.rangeTo(50).toList() \n\n    println(list.groupBy { it%5 }) \n} \n```"]