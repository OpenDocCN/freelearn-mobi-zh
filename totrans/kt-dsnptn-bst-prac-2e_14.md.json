["```kt\nval vertxVersion = \"4.1.5\"\n```", "```kt\ndependencies {\n```", "```kt\n    implementation(\"io.vertx:vertx-core:$vertxVersion\")\n```", "```kt\n    implementation(\"io.vertx:vertx-web:$vertxVersion\")\n```", "```kt\n    implementation(\"io.vertx:vertx-lang-\n```", "```kt\n        kotlin:$vertxVersion\")\n```", "```kt\n    implementation(\"io.vertx:vertx-lang-kotlin-\n```", "```kt\n        coroutines:$vertxVersion\")\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nfun main() {\n```", "```kt\n    val vertx = Vertx.vertx()\n```", "```kt\n    vertx.createHttpServer().requestHandler{ ctx ->\n```", "```kt\n        ctx.response().end(\"OK\")\n```", "```kt\n    }.listen(8081)\n```", "```kt\n    println(\"open http://localhost:8081\")\n```", "```kt\n}\n```", "```kt\nval vertx = Vertx.vertx()  \n```", "```kt\nval router = Router.router(vertx) \n```", "```kt\n...\n```", "```kt\nrouter.get(\"/status\").handler { ctx ->\n```", "```kt\n    ctx.response()\n```", "```kt\n        .setStatusCode(200)\n```", "```kt\n        .end(\"OK\")\n```", "```kt\n} \n```", "```kt\nvertx.createHttpServer()\n```", "```kt\n    .requestHandler(router)\n```", "```kt\n    .listen(8081)\n```", "```kt\nval json = json {\n```", "```kt\n    obj(\n```", "```kt\n        \"status\" to \"OK\"\n```", "```kt\n    )\n```", "```kt\n}\n```", "```kt\nctx.response()\n```", "```kt\n    .setStatusCode(200)\n```", "```kt\n    .end(json.toString())\n```", "```kt\nclass ServerVerticle : CoroutineVerticle() {\n```", "```kt\n    override suspend fun start() {\n```", "```kt\n        val router = router()\n```", "```kt\n        vertx.createHttpServer()\n```", "```kt\n            .requestHandler(router)\n```", "```kt\n            .listen(8081)\n```", "```kt\n        println(\"open http://localhost:8081\")\n```", "```kt\n    }\n```", "```kt\n    private fun router(): Router {\n```", "```kt\n        // Our router code comes here now  \n```", "```kt\n        val router = Router.router(vertx)\n```", "```kt\n        ...\n```", "```kt\n        return router\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nfun main() {\n```", "```kt\n    val vertx = Vertx.vertx()\n```", "```kt\n    vertx.deployVerticle(ServerVerticle())\n```", "```kt\n}\n```", "```kt\nfun main() {\n```", "```kt\n    val vertx = Vertx.vertx()\n```", "```kt\n    vertx.deployVerticle(\"ServerVerticle\")\n```", "```kt\n}\n```", "```kt\nrouter.delete(\"/cats/:id\").handler { ctx ->\n```", "```kt\n    // Code for deleting a cat\n```", "```kt\n}\n```", "```kt\nrouter.put(\"/cats/:id\").handler { ctx ->\n```", "```kt\n    // Code for updating a cat\n```", "```kt\n}\n```", "```kt\nval router = Router.router(vertx)\n```", "```kt\nrouter.route().handler(BodyHandler.create())\n```", "```kt\n    private fun catsRouter(): Router {\n        val router = Router.router(vertx)\n        router.delete(\"/:id\").handler { ctx ->\n            // Code for deleting a cat\n        }\n        router.put(\"/:id\").handler { ctx ->\n            // Code for updating a cat\n        }\n        return router\n    }\n    ```", "```kt\n    router.mountSubRouter(\"/cats\", catsRouter())\n    ```", "```kt\ndependencies {\n```", "```kt\n    ...\n```", "```kt\n    testImplementation(\"org.junit.jupiter:junit-jupiter-\n```", "```kt\n        api:5.6.0\")\n```", "```kt\n    testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-\n```", "```kt\n        engine:5.6.0\")\n```", "```kt\n}\n```", "```kt\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n```", "```kt\nclass ServerTest {\n```", "```kt\n    private val vertx: Vertx = Vertx.vertx()\n```", "```kt\n    @BeforeAll\n```", "```kt\n    fun setup() {\n```", "```kt\n        runBlocking {\n```", "```kt\n            vertx.deployVerticle(ServerVerticle()).await()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    @AfterAll\n```", "```kt\n    fun tearDown() {\n```", "```kt\n        // And you want to stop your server once\n```", "```kt\n        vertx.close()\n```", "```kt\n    }\n```", "```kt\n    @Test\n```", "```kt\n    fun `status should return 200`() {\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ntestImplementation(\"io.vertx:vertx-web-client:$vertxVersion\")\n```", "```kt\nlateinit var client: WebClient\n```", "```kt\n@BeforeAll\n```", "```kt\nfun setup() {\n```", "```kt\n    vertx.deployVerticle(ServerVerticle())\n```", "```kt\n    client = WebClient.create(\n```", "```kt\n        vertx,\n```", "```kt\n        WebClientOptions()\n```", "```kt\n            .setDefaultPort(8081)\n```", "```kt\n            .setDefaultHost(\"localhost\")\n```", "```kt\n    )\n```", "```kt\n}\n```", "```kt\n@Test\n```", "```kt\nfun `status should return 200`() {\n```", "```kt\n    runBlocking {\n```", "```kt\n        val response = client.get(\"/status\").send().await()\n```", "```kt\n        assertEquals(201, response.statusCode())\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nimplementation(\"org.postgresql:postgresql:42.3.0\")\n```", "```kt\nimplementation(\"io.vertx:vertx-pg-client:$vertxVersion\")\n```", "```kt\n    object Db {\n        val username = System.getenv(\"DATABASE_USERNAME\")         ?: \"cats_admin\"\n        val password = System.getenv(\"DATABASE_PASSWORD\")         ?: \"abcd1234\"\n        val database = System.getenv(\"DATABASE_NAME\")         ?: \"cats_db\"\n        val host = System.getenv(\"DATABASE_HOST\")         ?: \"localhost\"\n    }\n    ```", "```kt\n    fun connect(vertx: Vertx): SqlClient {\n        val connectOptions = PgConnectOptions()\n            .setPort(5432)\n            .setHost(host)\n            .setDatabase(database)\n            .setUser(username)\n            .setPassword(password)\n\n        val poolOptions = PoolOptions()\n            .setMaxSize(20)\n\n        return PgPool.client(\n            vertx,\n            connectOptions,\n            poolOptions\n        )\n    }\n    ```", "```kt\n    ...\n    lateinit var db: SqlClient\n\n    @BeforeAll\n    fun setup() {\n        runBlocking {\n            ...\n            db = Db.connect(vertx)\n        }\n    }\n    ```", "```kt\n    @Nested\n    inner class `With Cat` {\n        @BeforeEach\n        fun createCats() {\n            ...\n        }\n\n        @AfterEach\n        fun deleteAll() {\n            ...\n        }\n    }\n    ```", "```kt\n    @AfterEach\n    fun deleteAll() {\n        runBlocking {\n            db.preparedQuery(\"DELETE FROM cats\")            .execute().await()\n        }\n    }\n    ```", "```kt\n    lateinit var catRow: Row\n\n    @BeforeEach\n    fun createCats() {\n        runBlocking {\n            val result = db.preparedQuery(\n                \"\"\"INSERT INTO cats (name, age) \n                VALUES ($1, $2) \n                RETURNING ID\"\"\".trimIndent()\n            ).execute(Tuple.of(\"Binky\", 7)).await()\n            catRow = result.first()\n        }\n    }\n    ```", "```kt\n    @Test\n    fun `delete deletes a cat by ID`() {\n        runBlocking {\n            val catId = catRow.getInteger(0)\n            client.delete(\"/cats/${catId}\").send().await()\n\n            val result = db.preparedQuery(\"SELECT * FROM             cats WHERE id = $1\")            .execute(Tuple.of(catId)).await()\n\n            assertEquals(0, result.size())\n        }\n    }\n    ```", "```kt\nval db = Db.connect(vertx)\n```", "```kt\nrouter.delete(\"/:id\").handler { ctx ->\n```", "```kt\n    val id = ctx.request().getParam(\"id\").toInt()\n```", "```kt\n    db.preparedQuery(\"DELETE FROM cats WHERE ID = $1\")        .execute(Tuple.of(id)).await()\n```", "```kt\n    ctx.end()\n```", "```kt\n}\n```", "```kt\nrouter.delete(\"/:id\").handler { ctx ->\n```", "```kt\n    launch {\n```", "```kt\n        val id = ctx.request().getParam(\"id\").toInt()\n```", "```kt\n        db.preparedQuery(\"DELETE FROM cats WHERE ID = $1\")            .execute(Tuple.of(id)).await()\n```", "```kt\n        ctx.end()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nprivate suspend fun router(): Router {\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nprivate suspend fun catsRouter(): Router {\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\n@Test\n```", "```kt\nfun `put updates a cat by ID`() {\n```", "```kt\n    runBlocking {\n```", "```kt\n        val catId = catRow.getInteger(0)\n```", "```kt\n        val requestBody = json {\n```", "```kt\n            obj(\"name\" to \"Meatloaf\", \"age\" to 4)\n```", "```kt\n        }\n```", "```kt\n        client.put(\"/cats/${catId}\")\n```", "```kt\n            .sendBuffer(Buffer.buffer(requestBody.toString()))\n```", "```kt\n            .await()\n```", "```kt\n        val result = db.preparedQuery(\"SELECT * FROM cats \n```", "```kt\n            WHERE id = $1\")\n```", "```kt\n            .execute(Tuple.of(catId)).await()\n```", "```kt\n        assertEquals(\"Meatloaf\",             result.first().getString(\"name\"))\n```", "```kt\n        assertEquals(4, result.first().getInteger(\"age\"))\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nrouter.put(\"/:id\").handler { ctx ->\n```", "```kt\n    launch {\n```", "```kt\n        val id = ctx.request().getParam(\"id\").toInt()\n```", "```kt\n        val body = ctx.bodyAsJson\n```", "```kt\n        db.preparedQuery(\"UPDATE cats SET name = $1, age =             $2 WHERE ID = $3\")\n```", "```kt\n            .execute(\n```", "```kt\n                Tuple.of(\n```", "```kt\n                    body.getString(\"name\"),\n```", "```kt\n                    body.getInteger(\"age\"),\n```", "```kt\n                    id\n```", "```kt\n                )\n```", "```kt\n            ).await()\n```", "```kt\n        ctx.end()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass CatsVerticle : CoroutineVerticle() {\n```", "```kt\n    override suspend fun start() {\n```", "```kt\n        val db = Db.connect(vertx)\n```", "```kt\n        vertx.eventBus().consumer<Int>(\"cats:delete\"){req->\n```", "```kt\n            launch {\n```", "```kt\n                val id = req.body()\n```", "```kt\n                db.preparedQuery(\"DELETE FROM                   cats WHERE ID = $1\")\n```", "```kt\n                    .execute(Tuple.of(id)).await()\n```", "```kt\n                req.reply(null)\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nrouter.delete(\"/:id\").handler { ctx ->\n```", "```kt\n    val id = ctx.request().getParam(\"id\").toInt()\n```", "```kt\n    vertx.eventBus().request<Nothing>(\"cats:delete\", id) {\n```", "```kt\n        ctx.end()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nvertx.deployVerticle(CatsVerticle())\n```", "```kt\nrouter.put(\"/:id\").handler { ctx ->\n```", "```kt\n    launch {\n```", "```kt\n        val id = ctx.request().getParam(\"id\").toInt()\n```", "```kt\n        val body: JsonObject = ctx.bodyAsJson.mergeIn(json{            obj(\"id\" to id)\n```", "```kt\n        })\n```", "```kt\n        vertx.eventBus().request<Int>(\"cats:update\", body) \n```", "```kt\n          { res ->\n```", "```kt\n            ctx.end(res.result().body().toString())\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nvertx.eventBus().consumer<JsonObject>(\"cats:update\"){req ->    launch {\n```", "```kt\n        val body = req.body()\n```", "```kt\n        db.preparedQuery(\"UPDATE cats SET name = $1, age =             $2 WHERE ID = $3\")\n```", "```kt\n            .execute(\n```", "```kt\n                Tuple.of(\n```", "```kt\n                    body.getString(\"name\"),\n```", "```kt\n                    body.getInteger(\"age\"),\n```", "```kt\n                    body.getInteger(\"id\")\n```", "```kt\n                )\n```", "```kt\n            ).await()\n```", "```kt\n        req.reply(body.getInteger(\"id\"))\n```", "```kt\n    }\n```", "```kt\n}\n```"]