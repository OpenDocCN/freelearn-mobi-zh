["```kt\n    <EditText\n        android:id=\"@+id/your_household_name_edit\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"25dp\"\n        android:ems=\"10\"\n        android:text=\"Name\"\n        app:layout_constraintTop_toBottomOf=\"@id/your_household_header\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintBottom_toTopOf=\"@id/your_household_service_edit\" />\n```", "```kt\n    <data>\n        <variable\n            name=\"household\"\n            type=\"com.example.Household\" />\n    </data>\n```", "```kt\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{household.name}\" />\n```", "```kt\ndata class DraftContractInput(\n    val initiator: HouseholdInput,\n    val neighbor: HouseholdInput\n)\ndata class HouseholdInput(\n    val householdName: String,\n    val serviceProvided: String\n)\n```", "```kt\nclass ContractRepository {\n    fun submit(contract: DraftContractInput): Boolean {\n        return true.also {\n            println(\"Persisted contract: $contract\")\n        }\n    }\n}\n```", "```kt\ninterface Controller {\n    fun submitContract(contract: DraftContractInput)\n}\n```", "```kt\nclass MainActivity : AppCompatActivity(), Controller {\n    private val contractRepository: ContractRepository = ContractRepository()\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val contractDraftFragment = ContractDraftFragment()\nsupportFragmentManager.beginTransaction().replace(R.id.fragment_container, contractDraftFragment).commit()\n    }\n```", "```kt\n    override fun submitContract(contract: DraftContractInput) {\n        contractRepository.submit(contract)\n         val bundle = Bundle()\n        bundle.putString(\"yourHouseholdName\", contract.initiator.householdName)\n        bundle.putString(\"yourHouseholdService\", contract.initiator.serviceProvided)\n        bundle.putString(\"yourNeighborName\", contract.neighbor.householdName)\n        bundle.putString(\"yourNeighborService\", contract.neighbor.serviceProvided)\n        val confirmationFragment = ConfirmationFragment()\n        confirmationFragment.arguments = bundle\n        supportFragmentManager.beginTransaction().replace(R.id.fragment_container, confirmationFragment).commit()\n    }\n```", "```kt\nclass ContractDraftFragment : Fragment() {\n    lateinit var controller: Controller\n    lateinit var inflated: View\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        inflated = inflater.inflate(R.layout.fragment_contract_draft, container, false)\n        controller = activity as Controller\n```", "```kt\n        inflated.findViewById<Button>(R.id.submit_button)\n            ?.setOnClickListener {\n                controller.submitContract(\n                    DraftContractInput(\n                        initiator = HouseholdInput(\n                            householdName = inflated.findViewById<EditText>(R.id.your_household_name_edit).text.toString(),\n                            serviceProvided = inflated.findViewById<EditText>(R.id.your_household_service_edit).text.toString(),\n                        ),\n                        neighbor = HouseholdInput(\n                            householdName = inflated.findViewById<EditText>(R.id.your_neighbor_name_edit).text.toString(),\n                            serviceProvided = inflated.findViewById<EditText>(R.id.your_neighbor_service_edit).text.toString(),\n                        )\n                    )\n                )\n            }\n        return inflated\n    }\n}\n```", "```kt\nclass ConfirmationFragment : Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val inflated = inflater.inflate(R.layout.fragment_confirmation, container, false)\n        val yourHouseholdName = arguments?.getString(\"yourHouseholdName\")\n        val yourHouseholdService = arguments?.getString(\"yourHouseholdService\")\n        val yourNeighborName = arguments?.getString(\"yourNeighborName\")\n        val yourNeighborService = arguments?.getString(\"yourNeighborService\")\n        inflated.findViewById<TextView>(R.id.your_household_summary).text =\n            \"Your household \\\"$yourHouseholdName\\\" providing ${yourHouseholdService}\"\n        inflated.findViewById<TextView>(R.id.your_neighbor_summary).text =\n            \"your neighbor \\\"$yourNeighborName\\\" providing ${yourNeighborService}\"\n        return inflated\n    }\n}\n```", "```kt\ninterface Presenter {\n    fun submitContract(contract: DraftContractInput)\n}\n```", "```kt\ntypealias DraftContractSubmittedListener = (DraftContractInput) -> Unit\n```", "```kt\nclass ContractRepository {\n    var onSubmitListener: DraftContractSubmittedListener? = null\n    fun submit(contract: DraftContractInput): Boolean {\n        return true.also {\n            onSubmitListener?.invoke(contract)\n        }.also {\n            println(\"Persisted contract: $contract\")\n        }\n    }\n}\n```", "```kt\n    override fun submitContract(contract: DraftContractInput) {\n        contractRepository.onSubmitListener = {\n            val confirmationFragment = ConfirmationFragment()\n            confirmationFragment.lastSubmittedContract = it           supportFragmentManager.beginTransaction().replace(R.id.fragment_container, confirmationFragment).commit()\n        }\n        contractRepository.submit(contract)\n    }\n```", "```kt\nclass ConfirmationFragment : Fragment() {\n    lateinit var lastSubmittedContract: DraftContractInput\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val inflated = inflater.inflate(R.layout.fragment_confirmation, container, false)\n        lastSubmittedContract?.also {\n            inflated.findViewById<TextView>(R.id.your_household_summary).text =\n                \"Your household \\\"${it.initiator.householdName}\\\" providing ${it.initiator.serviceProvided}\"\n            inflated.findViewById<TextView>(R.id.your_neighbor_summary).text =\n                \"your neighbor \\\"${it.neighbor.householdName}\\\" providing ${it.neighbor.serviceProvided}\"\n        }\n        return inflated\n    }\n}\n```", "```kt\nclass DraftContractViewModel : ViewModel() {\n    var yourHouseholdName: String? = null\n    var yourHouseholdService: String? = null\n    var yourNeighborName: String? = null\n    var yourNeighborService: String? = null\n}\n```", "```kt\nfun DraftContractViewModel.toModel(): DraftContractInput? =\n    if (yourHouseholdName != null\n        && yourHouseholdService != null\n        && yourNeighborName != null\n        && yourNeighborService != null\n    ) {\n        DraftContractInput(\n            initiator = HouseholdInput(\n                householdName = yourHouseholdName!!,\n                serviceProvided = yourHouseholdService!!\n            ),\n            neighbor = HouseholdInput(\n                householdName = yourNeighborName!!,\n                serviceProvided = yourNeighborService!!\n            )\n        )\n    } else {\n        null\n    }\n```", "```kt\n    @Test\n    fun `do not create model if the view model is empty`() {\n        assertNull(DraftContractViewModel().toModel())\n    }\n    @Test\n    fun `create model when all fields are present`() {\n        val viewModel = DraftContractViewModel().apply {\n            yourHouseholdName = \"Smith\"\n            yourHouseholdService = \"Cleaning\"\n            yourNeighborName = \"Lee\"\n            yourNeighborService = \"Cooking\"\n        }\n        val model = DraftContractInput(\n            HouseholdInput(\"Smith\", \"Cleaning\"),\n            HouseholdInput(\"Lee\", \"Cooking\")\n        )\n        assertEquals(model, viewModel.toModel())\n    }\n```", "```kt\nfun EditText.bind(consume: (String) -> Unit) {\n    consume(text.toString())\n    addTextChangedListener {\n        consume(it.toString())\n    }\n}\n```", "```kt\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        val inflated = inflater.inflate(R.layout.fragment_contract_draft, container, false)\n        val command = activity as Command\n        val viewModel = ViewModelProvider(activity as AppCompatActivity).get(DraftContractViewModel::class.java)\n```", "```kt\n        inflated.findViewById<Button>(R.id.submit_button)\n            ?.setOnClickListener {\n                viewModel.toModel()?.let {\n                    command.submitContract(it)\n                }\n            }\n```", "```kt\ninflated.findViewById<EditText>(R.id.your_household_name_edit)?.bind {\n            viewModel.yourHouseholdName = it\n        } inflated.findViewById<EditText>(R.id.your_household_service_edit)?.bind {\n            viewModel.yourHouseholdService = it\n        } inflated.findViewById<EditText>(R.id.your_neighbor_name_edit)?.bind {\n            viewModel.yourNeighborName = it\n        } inflated.findViewById<EditText>(R.id.your_neighbor_service_edit)?.bind {\n            viewModel.yourNeighborService = it\n        }\n        return inflated\n    }\n```", "```kt\nclass ConfirmationFragment : Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val inflated = inflater.inflate(R.layout.fragment_confirmation, container, false)\n        val viewModel = ViewModelProvider(activity as AppCompatActivity).get(DraftContractViewModel::class.java)\n```", "```kt\ninflated.findViewById<TextView>(R.id.your_household_summary).text =\n            \"Your household \\\"${viewModel.yourHouseholdName}\\\" providing ${viewModel.yourHouseholdService}\"\n        inflated.findViewById<TextView>(R.id.your_neighbor_summary).text =\n            \"your neighbor \\\"${viewModel.yourNeighborName}\\\" providing ${viewModel.yourNeighborService}\"\n        return inflated\n    }\n}\n```"]