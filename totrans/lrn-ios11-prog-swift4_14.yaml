- en: Getting Data into Our Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with data is very important, but when working with beginners, I like
    to do this in steps so that this process is a bit easier. In this chapter, we
    are going to work with data that is stored on the device. Later in the book, we
    will work with data that we get from a feed. Feed data means it is coming from
    a website URL. Using data from a feed means you can update the data without having
    to update the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a model?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a plist?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a plist?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with a manager class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the last chapter, we got the Explore listing up, but we have no data. We
    need to create a model that we can use to store information that our cell can
    use to display data.
  prefs: []
  type: TYPE_NORMAL
- en: Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typically, when developing your model, the best way to start when you have
    a design is to look at the data associated with your view. Let''s look at our
    app design again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3c5944b-1723-489d-844e-8c53fdc4138e.png)'
  prefs: []
  type: TYPE_IMG
- en: The items (`UICollectionViewCell`) displayed in the grid are each supported
    by some data. Looking at the design, we see that each item needs an image and
    a name (cuisine). Therefore, we need to create a model called `ExploreItem` with
    two properties, specifically `image` and `name`.
  prefs: []
  type: TYPE_NORMAL
- en: In the model camp, we have three files that we will create—`ExploreData.plist`,
    `ExploreItem.swift`, and `ExploreDataManager.swift`.
  prefs: []
  type: TYPE_NORMAL
- en: ExploreData.plist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first file, `ExploreData.plist`, has already been created for you and can
    be found in your project files for this chapter. This file contains all the data
    we need to have a list of cuisines. Drag this file into your `Model` folder in
    the Navigator panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the file, there is an array of dictionary items. Each item has a cuisine
    name and image for that particular cuisine. Let''s take a look at the first few
    elements of this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e70b77e9-e237-48f3-a32d-05b738d87a8c.png)'
  prefs: []
  type: TYPE_IMG
- en: We will load this file into our Explore list, and this is what we use to filter
    restaurants by a specific cuisine.
  prefs: []
  type: TYPE_NORMAL
- en: ExploreItem.swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we need to create a file to represent our data. Our Explore list displays
    an image and a name that match the corresponding image and name that we see in
    our `Explore.plist` file. Let''s create this `ExploreItem` file now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Model` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the template screen, select iOS at the top and then Swift File. Then,
    hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `ExploreItem`, and then hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The only thing in this file is an `import` statement.
  prefs: []
  type: TYPE_NORMAL
- en: The `import` statement allows us to import other libraries into our file, giving
    us the ability to see inside of these libraries and use properties from them.
    Foundation is one of Apple's core frameworks, and it has a bunch of tools that
    we can use while we program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we do not need to use inheritance, we are going to make this file a `struct`.
    Add the following to your file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have declared it a `struct`, let''s add the two properties we need
    for this file—an image, and a name. For both of these properties, we are going
    to make them String data types. For the title, this makes sense, because it is
    text that we are displaying in our Collection View. However, for the image, using
    a String data type might not seem as obvious. The reason we are making the image
    a data type of String is because, to get it, we have to access it by name. For
    example, `american.png` is the filename for the American cuisine image. Add the
    following to the inside of your curly braces (`{ }`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have now added two properties, one for the image and one for the name, both
    of which are optional. Since we cannot give either of them an initial value, we
    have to make them optional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We next need to add one more thing to this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We take the dictionary data we get from the `plist` and create an `ExploreItem`
    for each item. Our dictionary now looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We need to pass this dictionary object to our `ExploreItem`. When you are passing
    a dictionary object, you are required to create a custom initializer. Our initializer
    takes a dictionary object into it.  Then, we can set each item from the dictionary
    to the data of both of our properties, image, and name.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a struct, by default, you get an `init()` method that has all
    the properties you created in the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, our `ExploreItem` will have a default initializer that looks like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Instead of using this initializer, we will create our own to pass a dictionary
    object into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a **custom initializer**, we are going to use what is called an **extension**,
    which gives us the ability to extend our code and add more functionality to it.
    Inside of your `ExploreItem` file, after the ending curly brace, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s create our custom initializer that takes a dictionary object into
    the parameters. Add the following between the curly braces of the extension we
    just added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now created an `init()` method in the parameters, which accepts a dictionary
    object. As stated in the preceding section, we know that our data looks like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To pass each value, we need to use the dictionary syntax, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s proceed by mapping the dictionary data to our two properties. Add the
    following inside of the `init()` method curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Since our dictionary value is `AnyObject`, we have to specify that our data
    is a String by using the `as? String` at the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have our data item set up for our Explore view (cuisine list), and your
    file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let's now focus on our data manager. We want our data manager to handle parsing
    the plist and giving us the data. Since our data will be coming from a plist,
    we need to have a method that will get the data from the plist first.
  prefs: []
  type: TYPE_NORMAL
- en: ExploreDataManager.swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our app, the data manager is responsible for communicating with a service
    (for example, the Yelp API, which we will discuss later in the book), as well
    as manipulating the data from the service. Once the data from the service is received,
    the data manager will create model objects that we can use for our app.
  prefs: []
  type: TYPE_NORMAL
- en: In some apps, these two jobs are handled by the controller. However, rather
    than putting that responsibility on our controller, we limit the controller from
    talking to the manager so that it never knows anything about the service.
  prefs: []
  type: TYPE_NORMAL
- en: As you get comfortable with programming, you will find that there are a few
    different types of architectures. We are sticking as closely as we can to MVC,
    because it is what Apple uses to build iOS apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `ExploreDataManager` file now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Model` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the template screen, select iOS at the top and then Swift File. Then,
    hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `ExploreDataManager`, and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we need to define our class first, add the following under the `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used a `class` instead of a `struct`, because this is a file that we
    will inherit from later. You do not always necessarily know if you are going to
    inherit from another class or not; therefore, you can just default to a struct
    and then change to a class if you realize that you need to inherit from another
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to load data from the `ExploreData.plist` file. Add the following
    method to our `ExploreDataManager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/878aaae9-02f9-4d11-912a-f7f3334681cd.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Part A**: This  function starts with the `fileprivate` keyword. Think of
    `fileprivate` as a way to give your methods an access level. If you do not use
    `fileprivate`, it defaults to internal, which means anyone can access or use the
    method outside of the class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: Our `loadData()` function is returning something back. The `->`
    states that our function has a return value. The return value for this method
    is an array with dictionary objects. Our dictionary will have a key of a String,
    and the value will be `AnyObject`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`AnyObject` lets us take any data type that comes back. Therefore, we can have
    one item give us an Int, while another gives us back a String.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use `Any`. `Any` can represent an instance of any type at all,
    including functional types and optional types.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part C**: Inside of the function, we are using what is known as a `guard`
    statement. A `guard` statement is designed for exiting a method or function early
    if a given statement returns `false`. Our `guard` checks two statements and both
    need to return `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first statement checks to see if the `ExploreData.plist` file exists in
    our app bundle. If the file is found, the statement returns `true`, and the file
    path is set to the constant path. Our next statement, which is separated by a
    comma, is discussed in *Part D*, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part D**: In this statement, if the first statement returns `true`, we take
    the `path` constant, and then we check the contents inside of the file. Let''s
    take a look at the data in our file again:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/346de2e7-47eb-46dc-9160-86538f2a1592.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look at the root of this plist, you see that its type is an array. `NSArray`
    has a method that we can use to get the data out of our file and put it into an
    array with which we can work.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, plists come in two types, an array or a dictionary. Currently, neither
    the standard array nor dictionary gives us a method that allows us to get data
    out of a file, so we need to utilize `NSArray` (as we are here) or `NSDictionary`,
    respectively, to do that.
  prefs: []
  type: TYPE_NORMAL
- en: This statement now checks to verify that we are, indeed, working with an array,
    and then returns `true` if so. If both conditions return `true`, our array inside
    of our plist is given to us. The array is set to our constant items.
  prefs: []
  type: TYPE_NORMAL
- en: '`NSArray` and `NSDictionary` come from Objective C (Apple''s main programming
    language for building iOS apps); they have some extra features. Just know that
    they are similar to their Swift counterparts without the `NS`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part E**: Here, if any of the conditions are `false`, we return an array
    with an empty dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Otherwise, we run the following `return`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part F**: This `return` gives back an array of dictionary items. Once we
    have our data loaded out of the plist, we can create our `ExploreItem`. Therefore,
    we need a method so that we can access all of our Explore items and return an
    array of items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Getting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get our data out of the plist, add the following method above `loadData()`
    inside of our `ExploreDataManager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `fetch()` method is going to loop through our dictionary data from the
    plist. Here is what your file should look like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1dbfa66-b7e4-4d24-bc8b-927c9e5b8413.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside of your `ExploreViewController.swift` file, delete the previous `print`
    statement that was inside of your `viewDidLoad()` and replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd*+
    *R*). You will notice that, in the Debug panel, every time our loop runs, it gives
    a dictionary object, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7792e79-e6c2-4ec7-b7c4-ec79822ed174.png)'
  prefs: []
  type: TYPE_IMG
- en: This is exactly what we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, inside of `ExploreDataManager`, add the following directly above our `fetch`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, inside of our `fetch()`, update our `for...in` loop by replacing `print(data)`
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Your file should look like mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d52715e-8fba-4f8c-8844-4684c5c84904.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's build and run the project by hitting the Play button (or use *cmd* + *R*).
    In the Debug panel, you should see an array of Explore items.
  prefs: []
  type: TYPE_NORMAL
- en: We currently have our data, and we have cells. However, we need to get our data
    to our cells so that we can see the image and name. Let's open up `Explore.storyboard`
    and update our `exploreCell`.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to our cell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our cell set up, we need to create a file so that we can connect
    to our cells:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `View` folder in the Navigator panel and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the template screen, select iOS at the top, and then Cocoa Touch Class.
    Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see an options screen. Add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `ExploreCell`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UICollectionViewCell`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After hitting Next, you are asked to create this file. Select Create and your
    file should look like mine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Next, open `Explore.storyboard` and select the `exploreCell` in the Outline
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Utilities panel, select the Identity inspector and, under Custom Class,
    type `ExploreCell`. Then, hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hooking up our UI with IBOutlets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access our UI elements, we need to connect them with `IBOutlets`.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ExploreCell.swift` file in the Navigator panel (or use *cmd* + *Shift*
    + *O*, type `ExploreCell`, and then hit *Enter*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside of the class declaration, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Open `Explore.storyboard` and select your `exploreCell` again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Utilities panel, select the Connection inspector. You should see both
    variables we just created, lblName and imgExplore, under Outlets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/107c615f-adf5-4873-b495-399546df0800.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, Ctrl + drag from imgExplore to the UIImageView we put in our cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41e197ca-029e-48fc-977a-720f65e183d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat this step for lblName by CTL dragging from lblName to the UILabel in
    our cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ea14f32-e367-4d52-b549-4fb88c8cbe18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Great! Now that we have our cell set up, let''s pull data into it. In our `ExploreDataManager`,
    add these two methods above the `loadData()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We use the first method, `numberOfItems()`, to update the total number of items
    in our Collection View. The second method, `explore (at index:IndexPath)`, is
    called for each item we create in our Collection View. Then, we use this to pass
    the data to our cell to display the name and the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have these two methods added, let''s open up our `ExploreViewController`
    file. We currently have the following inside of our `viewDidLoad()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s move `let manager` underneath our Collection View so that it is outside
    `viewDidLoad()`; and, therefore, we can access it anywhere within the class as
    opposed to only within the function. You should now have this before `viewDidLoad()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside of `viewDidLoad()`, only `manager.fetch()` remains. Next, we need to
    update our `numberOfItemsInSection()` to say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, instead of returning 20, we are going to get the number of items
    from our plist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, inside of our `cellForItemAt()`, revise the `let` statement in the
    third required method before `return` cell by adding `as! ExploreCell`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following after the code snippet you just added and before `return`
    cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This gets an `ExploreItem` for each cell in our Collection View and passes
    the data to the cell. Finally, for your return, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd* +
    *R*). You should now see your Collection View come to life with images and text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7f013e4-0cc0-453b-b7d3-029f09ec1f7f.png)'
  prefs: []
  type: TYPE_IMG
- en: The images are not perfect, but we will fix them later. Now that we have our
    cells displaying content, we need to make it so that when you select a cell, it
    goes to our restaurant listing.
  prefs: []
  type: TYPE_NORMAL
- en: Let's build and run the project by hitting the Play button (or use *cmd* + *R*).
    You should now be able to select your cell, and it goes to what will be your restaurant
    listing page. This page will be empty for now, so let's work on this next.
  prefs: []
  type: TYPE_NORMAL
- en: Restaurant listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our Explore listing going to our restaurant listing, we need
    to get our Collection View connected to our `RestaurantListViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click inside of the `LetsEat` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the template screen, select iOS at the top and then Cocoa Touch Class.
    Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see an options screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `RestaurantViewController`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UIViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After hitting Next, you will be asked to create this file.
  prefs: []
  type: TYPE_NORMAL
- en: Select Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's delete both `didReceiveMemoryWarning()` and `prepare()` (which has been
    commented out), as we do not need them at this time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `Restaurants.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the `UIViewController` in the Utility panel, and select the Identity
    inspector, which is the third icon from the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Custom Class, and in the Class drop-down menu, select `RestaurantViewController`
    and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your Navigator panel is currently open, close it by clicking on the hide
    navigator toggle or *cmd* + *0*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your Utilities panel is currently open, close it by clicking on the Utilities
    toggle or use *cmd* + *Alt*/*Alt* + *0*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the Assistant editor or use *cmd* + *Alt*/*Alt* + *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see `Restaurants.storyboard` on the left side and `RestaurantListViewController.swift`
    on the right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, add the following after:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: After you create the variable, you see a small circle to the left of the variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you hover over it, you see a plus button appear inside of the circle.
    Click on it and drag this to your Collection View inside of your `UIViewController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you release, you see the circle become filled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5cec34c5-87c8-481c-9e75-6e0ccc8fca85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, it is time to display something inside of our Collection View:'
  prefs: []
  type: TYPE_NORMAL
- en: Use *cmd* + *Shift* + *O*, which opens the Open Quickly search box, and type
    `Restaurant`. Then, hit *Enter* to select the `RestaurantListViewController.swift`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your scene, select your Collection View. Then, in your Utilities panel select
    the Connections inspector, which is the last icon on the right. Under the Outlets
    section, `dataSource` and `delegate`, the same ones we removed earlier, we now
    add them back:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5786b170-a33f-4d08-8a99-1267ad546ca6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to update our class definition inside of the `RestaurantListViewController`.
    You currently have `RestaurantListViewController:UIViewController`—update it to
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'As you learned earlier with our Explore grid, we are required to implement
    `numberOfSections()`, `numberOfItemsInSection()`, and `cellForItemAt()` in order
    to use a Collection View. Therefore, add the following three methods inside of
    our `RestaurantListViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build and run the project by hitting the play button (or use *cmd* +
    *R*) to see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba59b23b-df4e-48d5-a667-e5f5275f5248.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of having a grid, as we did for Explore, our restaurant list displays
    a column of cells. However, when the restaurant list displays on the iPad, it
    shows a grid instead. This is one of the flexibilities from which we benefit by
    using a Collection View. We will further set up our restaurant list cells along
    with displaying the data later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we talked about what a model is and looked at what a plist
    is. We also learned how to create a plist as well as creating our first manager
    class that takes care of the data. In our data manager, we covered getting data
    from a plist and how to represent that data as a model object.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the differences between static and prototype
    Table Views. You will see a lot of similarities between Table Views and Collection
    Views, especially concerning how we get data into them.
  prefs: []
  type: TYPE_NORMAL
