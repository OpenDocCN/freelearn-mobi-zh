["```kt\n@Composable\nfun CheckboxWithLabel(label: String, state: MutableState<Boolean>) {\n  Row(\n    modifier = Modifier.clickable {\n      state.value = !state.value\n    }, verticalAlignment = Alignment.CenterVertically\n  ) {\n    Checkbox(\n      checked = state.value,\n      onCheckedChange = {\n        state.value = it\n      }\n    )\n    Text(\n      text = label,\n      modifier = Modifier.padding(start = 8.dp)\n    )\n  }\n}\n```", "```kt\n@Composable\nfun PredefinedLayoutsDemo() {\n  val red = remember { mutableStateOf(true) }\n  val green = remember { mutableStateOf(true) }\n  val blue = remember { mutableStateOf(true) }\n  Column(\n    modifier = Modifier\n      .fillMaxSize()\n      .padding(16.dp)\n  ) {\n    …\n```", "```kt\nCheckboxWithLabel(\n  label = stringResource(id = R.string.red),\n  state = red\n)\nCheckboxWithLabel(\n  label = stringResource(id = R.string.green),\n  state = green\n)\nCheckboxWithLabel(\n  label = stringResource(id = R.string.blue),\n  state = blue\n)\n```", "```kt\nBox(\n  modifier = Modifier\n    .fillMaxSize()\n    .padding(top = 16.dp)\n) {\n  if (red.value) {\n    Box(\n      modifier = Modifier\n        .fillMaxSize()\n        .background(Color.Red)\n    )\n  }\n  if (green.value) {\n    Box(\n      modifier = Modifier\n        .fillMaxSize()\n        .padding(32.dp)\n        .background(Color.Green)\n    )\n  }\n  if (blue.value) {\n    Box(\n      modifier = Modifier\n        .fillMaxSize()\n        .padding(64.dp)\n        .background(Color.Blue)\n    )\n  }\n}\n```", "```kt\nimplementation \"androidx.constraintlayout:constraintlayout-compose:1.0.0-rc02\"\n```", "```kt\n@Composable\nfun CheckboxWithLabel(\n  label: String,\n  state: MutableState<Boolean>,\n  modifier: Modifier = Modifier\n) {\n  ConstraintLayout(modifier = modifier.clickable {\n    state.value = !state.value\n  }) {\n    val (checkbox, text) = createRefs()\n    Checkbox(\n      checked = state.value,\n      onCheckedChange = {\n        state.value = it\n      },\n      modifier = Modifier.constrainAs(checkbox) {\n      }\n    )\n    Text(\n      text = label,\n      modifier = Modifier.constrainAs(text) {\n        start.linkTo(checkbox.end, margin = 8.dp)\n        top.linkTo(checkbox.top)\n        bottom.linkTo(checkbox.bottom)\n      }\n    )\n  }\n}\n```", "```kt\nstart.linkTo(checkbox.end, margin = 8.dp)\n```", "```kt\n@Composable\nfun ConstraintLayoutDemo() {\n  val red = remember { mutableStateOf(true) }\n  val green = remember { mutableStateOf(true) }\n  val blue = remember { mutableStateOf(true) }\n  ConstraintLayout(\n    modifier = Modifier\n      .fillMaxSize()\n      .padding(16.dp)\n  ) {\n    val (cbRed, cbGreen, cbBlue, boxRed, boxGreen, boxBlue) =\n            createRefs()\n    CheckboxWithLabel(\n      label = stringResource(id = R.string.red),\n      state = red,\n      modifier = Modifier.constrainAs(cbRed) {\n        top.linkTo(parent.top)\n      }\n    )\n    ...\n```", "```kt\nCheckboxWithLabel(\n  label = stringResource(id = R.string.green),\n  state = green,\n  modifier = Modifier.constrainAs(cbGreen) {\n    top.linkTo(cbRed.bottom)\n  }\n)\n```", "```kt\nmodifier = Modifier.constrainAs(cbBlue) {\n  top.linkTo(cbGreen.bottom)\n}\n```", "```kt\nif (red.value) {\n  Box(\n    modifier = Modifier\n      .background(Color.Red)\n      .constrainAs(boxRed) {\n        start.linkTo(parent.start)\n        end.linkTo(parent.end)\n        top.linkTo(cbBlue.bottom, margin = 16.dp)\n        bottom.linkTo(parent.bottom)\n        width = Dimension.fillToConstraints\n        height = Dimension.fillToConstraints\n      }\n  )\n}\n```", "```kt\nconstrainAs(boxGreen) {\n  start.linkTo(parent.start, margin = 32.dp)\n  end.linkTo(parent.end, margin = 32.dp)\n  top.linkTo(cbBlue.bottom, margin = (16 + 32).dp)\n  bottom.linkTo(parent.bottom, margin = 32.dp)\n  width = Dimension.fillToConstraints\n  height = Dimension.fillToConstraints\n}\n```", "```kt\nconstrainAs(boxBlue) {\n  start.linkTo(parent.start, margin = 64.dp)\n  end.linkTo(parent.end, margin = 64.dp)\n  top.linkTo(cbBlue.bottom, margin = (16 + 64).dp)\n  bottom.linkTo(parent.bottom, margin = 64.dp)\n  width = Dimension.fillToConstraints\n  height = Dimension.fillToConstraints\n}\n```", "```kt\n@Composable\n@Preview\nfun ColumnWithTexts() {\n  Column {\n    Text(\n      text = \"Android UI development with Jetpack Compose\",\n      style = MaterialTheme.typography.h3\n    )\n    Text(\n      text = \"Hello Compose\",\n      style = MaterialTheme\n          .typography.h5.merge(TextStyle(color = Color.Red))\n    )\n  }\n}\n```", "```kt\n@Composable\nfun ColoredBox() {\n  Box(\n    modifier = Modifier\n      .border(\n        width = 2.dp,\n        color = Color.Black\n      )\n      .background(randomColor())\n      .width((40 * randomInt123()).dp)\n      .height((10 * randomInt123()).dp)\n  )\n}\n```", "```kt\nprivate fun randomInt123() = Random.nextInt(1, 4)\n```", "```kt\nprivate fun randomColor() = when (randomInt123()) {\n    1 -> Color.Red\n    2 -> Color.Green\n    else -> Color.Blue\n}\n```", "```kt\n@Composable\n@Preview\nfun CustomLayoutDemo() {\n    SimpleFlexBox {\n        for (i in 0..42) {\n            ColoredBox()\n        }\n    }\n}\n```", "```kt\n@Composable\nfun SimpleFlexBox(\n  modifier: Modifier = Modifier,\n  content: @Composable () -> Unit\n) {\n  Layout(\n    modifier = modifier,\n    content = content,\n    measurePolicy = simpleFlexboxMeasurePolicy()\n  )\n}\n```", "```kt\nprivate fun simpleFlexboxMeasurePolicy(): MeasurePolicy =\n  MeasurePolicy { measurables, constraints ->\n    val placeables = measurables.map { measurable ->\n      measurable.measure(constraints)\n    }\n    layout(\n      constraints.maxWidth,\n      constraints.maxHeight\n    ) {\n      var yPos = 0\n      var xPos = 0\n      var maxY = 0\n      placeables.forEach { placeable ->\n        if (xPos + placeable.width >\n          constraints.maxWidth\n        ) {\n          xPos = 0\n          yPos += maxY\n          maxY = 0\n        }\n        placeable.placeRelative(\n          x = xPos,\n          y = yPos\n        )\n        xPos += placeable.width\n        if (maxY < placeable.height) {\n          maxY = placeable.height\n        }\n      }\n    }\n  }\n```"]