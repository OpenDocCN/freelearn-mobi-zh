- en: Monetization and Pricing Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at how we can make revenue from our app. It is
    obviously one of the most important parts of the business model canvas, and also
    the most exciting one. It is not easy to get money for a mobile app. People are
    often less willing to spend money on a mobile device and apps, though games can
    be an exception to this tendency. Fortunately, there are plenty of other possibilities
    to build a profitable app business, and we will see what approaches there are
    to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at multiple ways of monetizing your app. Also, we will examine
    what a smart pricing strategy will be if you want to sell your app, or if you
    want to sell a product within your app (also known as in-app purchases).
  prefs: []
  type: TYPE_NORMAL
- en: 'Summarized, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at what monetization strategies you could apply to your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about pricing strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding out how to apply a pricing strategy to your listing in the App Store
    or Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at how in-app purchases will be implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monetization strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some strategies that you can use to make money. You can sell your
    app, display advertisements, use in-app subscriptions, or sell user data to third
    parties. They all can be a bit tricky to accomplish, but making revenue is always
    a challenge, and you will need to figure out what works best for your app. Do
    not be (too) greedy. People are used to a world in which everything seems to be
    free. In particular, if you plan to sell user data, you need to have a good plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some strategies for app monetization are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Sell your app in the App Store or Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide a light and free version of your app and sell your premium app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show advertisements in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide an in-app purchase product to remove ads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a free app and provide premium features on the web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sell a product or service in the real world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monetize your (user) data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use your app to create value by promoting one of your other products or services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selling or upselling your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sell your app in the App Store or Play Store. This is the most obvious way
    of monetizating your app. This works well only if people are very much aware of
    your app''s existence and great reputation, or if the provided added value of
    your app is very clear. In the early days of the App Store, this problem was solved
    by publishing two apps: a light, free version and a chargeable premium version.
    Today, it has become more common to apply the *freemium model* by using in-app
    purchases (Apple''s term). Google uses the term "In-app Billing" for Android devices.
    The idea is the same, though. Users download the app for free, but they need to
    pay to unlock specific premium content or functionality. Because of their addictive
    nature, this model works very well for games, although it can be applied to more
    serious apps as well. It is a great way to both promote your app and to upsell
    premium features.'
  prefs: []
  type: TYPE_NORMAL
- en: Once users are hooked onto your app and decide they want to continue to use
    the app, they can make a purchase to benefit from its premium features. You have
    to keep in mind that only a small number of your users will be converted into
    paying customers. On an average, the conversion from a freemium to a premium user
    is 1% to 5% at the most. This should not be a problem. The expenses for some apps
    are often near zero (games), but it matters for apps with a backend that needs
    to be hosted, and for apps that require storage of large files (videos). Think,
    for example, of a social app where every user can upload or stream a video.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the cost for cloud storage is not expensive at all, but a lot of
    users will obviously require a lot of storage space. In short, if 1% to 5% of
    your users can cover the expense made for 100% of your (premium and freemium)
    users, you are safe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/371dac07-d88e-4867-998e-cb24d6bd7c19.png)'
  prefs: []
  type: TYPE_IMG
- en: Selling a product or service in the real world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Selling your app in a store is convenient, as the whole payment process will
    be handled for you by Apple or Google. However, it is a pretty expensive process.
    They will charge you 30% for it. So, if you sell your app for a dollar, you will
    get 70 cents, right? It is actually even worse. Depending on the country, the
    **value added tax** (**VAT**) and income tax will make your actual revenue even
    less. So, at a 21% rate for VAT and 30% for income tax, it will look more like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0dd30c1-b026-43ac-bdba-1ddc0adddb13.png)'
  prefs: []
  type: TYPE_IMG
- en: Unless you move to a city such as Dubai, for example, paying taxes is not something
    that can be completely avoided, but what you can do is avoid the 30% store fee.
    That (probably) will only work if you are not selling anything digital (content,
    features, game levels, or inventory). You need to sell a physical product or a
    service in real life.
  prefs: []
  type: TYPE_NORMAL
- en: For example, think of a parking app. The app takes away the hassle of getting
    a parking ticket and coming back before the time expires, and so on. In exchange
    for this service, you will pay an additional fee (25 euro cents here in the Netherlands;
    Parkmobile app, 2016) each time you park using the app. All payments are arranged
    by credit card, and Apple or Google have nothing to do with it.
  prefs: []
  type: TYPE_NORMAL
- en: Offering your app for free and selling your service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you consider your app to be only one of the many channels that your service
    is utilizing, then it would be a good idea to offer your app for free and charge
    for your service; for example, on your website. This will have two benefits. Firstly,
    it will influence the user's price perception in a positive way (as he or she
    will spend money on a website instead of on the app). Secondly, you do not need
    to pay 30% to Apple or Google. This, of course, means you need to handle the payment
    yourself, or find a **payment service provider** (**PSP**) to do this for you.
    However, it certainly will increase your revenue, which is, of course, a good
    thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your app is an app that is using a backend and is suitable for use with
    SaaS, such as CMS, you can offer the premium features of your app on the website
    (larger screen, more bandwidth). Let them use your app for free, but charge for
    access to the website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3e383c3-cfed-4f03-abab-fd8f5b227b16.png)'
  prefs: []
  type: TYPE_IMG
- en: Advertisements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Displaying advertisements is the most well-known way of app monetization. Advertisements
    are annoying to users, but they are necessary to get revenue when your app is
    free. Making money from in-app advertisements only makes sense if your user base
    is large enough. The story goes that it was Flappy Bird's only way to create revenue,
    and apparently that went very well. The developer made 50K a day from it. It is
    a business model that is often combined with in-app purchases. Users can remove
    the advertisement by paying a small fee. This can be a one-time fee, or a subscription
    for a month or year.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, so you want to add some advertisements to your app. For both iOS and Android,
    you can choose from a number of mobile advertising networks, each offering an
    SDK for the platform you are using. The network will serve the advertisements.
    All you need to do is to add the SDK and a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A network may offer multiple advertisement formats and campaign types. The
    most common ones are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mobile ad formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Banner** (appears at the bottom or top of the screen)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interstitial** (full screen)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Native** (integrates smoothly with the content of your app)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Campaign types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cost per action/acquisition** (**CPA**): The advertiser pays for a particular
    action (contact, sign-up, submit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost per click** (**CPC**): The advertiser pays for each click on an advertisement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost per impression** (**CPI**): The advertiser pays for each impression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost per mille** (**CPM**): The advertiser pays for each 1000 (estimated)
    impressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4f1f3aed-0d53-4682-aa03-e081940fe7ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some popular mobile ad networks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: AdMob (acquired by Google)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inmobi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TapJoy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flurry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kiip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MoPub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RevPub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaato
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And there are many others! Be careful when and how you display advertisements
    in your app. Interstitials (using native Facebook ads, for example), covering
    almost the whole screen, are the most annoying ones to the user. For your user,
    the best way to display advertisements will be via banners shown at the bottom
    of the screen. However, that is not necessarily the best spot for you. Maybe the
    conversion for full-screen advertisements will be much better. It depends on the
    nature of your app, and it also could vary from Android to iOS. Perhaps, you can
    run a split test to find out what works best for your situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to provide an option to remove the advertisements, you should consider
    putting a button with a clear call to action near the advertisement. What about
    a Remove ads button just above your bottom ad banner? That way, you create an
    income through advertisements and an income from people willing to get rid of
    them by paying, let''s say, $0.99:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f5c4edf-11e3-479e-8f91-89b97a1db229.png)'
  prefs: []
  type: TYPE_IMG
- en: Monetizing your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a large number of users, you can think of a way to sell data to
    third parties as a way of making money from your app. You have to be careful with
    this strategy, as your users are probably not going to like this option. Always
    make sure that the data that you are selling is anonymous, and again try not be
    too greedy. Don't sell user data to send your users spam messages later.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a large user base where each user has a rich profile, then you can
    create segments from those profiles. In [Chapter 11](774e65d5-5ac0-4ade-9f9e-cffb2a911441.xhtml),
    *Onboarding and Registration*, we have reviewed the process of continuous onboarding.
    Building a large user base combined with rich user profiles increases the value
    of your company and your app, even if you are not selling data to third parties
    immediately; it gives you the option to sell it later. The more you know about
    your users, the more valuable they will be. For example, you can create a dataset
    of middle-aged housewives who frequently travel on particular days within a certain
    area, or you can create a dataset of young people who love to listen to metal
    music. All segmentations you can think of can be of interest, as long as they
    result in a dataset that is large enough.
  prefs: []
  type: TYPE_NORMAL
- en: If you are going for a buyout strategy, a large number of users might be more
    important than the app's profitability. Also, if your app helps to promote or
    to sell another product or service, digitally or physically, it is providing value.
    The revenue will come from selling a product and service. Your app, again, will
    be just a channel that is supporting your sales strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Pricing strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's assume that you want to sell your app, or that you want to add in-app
    purchases. What will your strategy look like? When are you going to charge money?
    Right from the start, enabling the user to download the app in the first place?
    Or will you offer a trial period, allowing the user to evaluate your app first?
    Or will it be an app with premium features that can be unlocked with an in-app
    purchase? The answers to these questions will depend on the nature of your app,
    the region of your users, and the nature of the device operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Price perception
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Price perception is an important element here. Everybody knows about the psychological
    effect of the 99 cents approach. We know that $0.99 is just one cent away from
    $1.00\. Still, it looks cheaper. Apps and games also apply some interesting tricks
    based on the pricing psychology. One of them is the effect of price points; given
    three products, including a cheap product offering minimal value and a ridiculously
    high-priced product makes the product in the middle look like the best deal, even
    when its price is higher than the amount the user originally intended to spend.
    We will see a sample of this later.
  prefs: []
  type: TYPE_NORMAL
- en: 'For games, interesting items to sell are additional lives, coins, or levels.
    The following is an example of the products available for the 8-ball pool game
    app, taking the price points theory to the maximum and do you want a stack, pile,
    wallet, stash, heap, or a vault of coins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56679293-2c21-490b-8c71-bca21c8b2685.png)'
  prefs: []
  type: TYPE_IMG
- en: For games selling coins, this strategy works pretty well. At the start of the
    game, when the player is still discovering things and not addicted to it yet (Remember
    Candy Crush?), there are plenty of coins or credits to spend. Often, the player
    can unlock/gain new credits in the game; but often, the bottom of the virtual
    treasury is seen too early. If that is the case then, for the impatient players,
    there are virtual coins to the rescue. Typically, only 1% to 3% of the players
    will actually make a purchase. That is still enough to make a game very profitable.
  prefs: []
  type: TYPE_NORMAL
- en: 'For apps that are not games, it is more important to think about which features
    should be premium versus freemium. You need to determine what features, in the
    perception of your user, provide additional value. If it is anything other than
    removing ads, then which premium features should your app offer, and which features
    still need to be available for free? You can run some experiments to find the
    answer to this question: What are your users willing to pay for as premium features?'
  prefs: []
  type: TYPE_NORMAL
- en: Although not specific for mobile apps, there is an interesting e-book to read
    about pricing, titled *Don't Just Roll the Dice*. To understand product pricing,
    this book helps you to understand some (but not too much) economics. You can find
    an example and the free PDF download available at [download.red-gate.com/ebooks/DJRTD_eBook.pdf](http://download.red-gate.com/ebooks/DJRTD_eBook.pdf).
    Alternatively, you can do a search for it on Google.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also look at this SlideShare:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.slideshare.net/omohout/lean-pricing-startups](http://www.slideshare.net/omohout/lean-pricing-startups)'
  prefs: []
  type: TYPE_NORMAL
- en: Android or iOS first?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a start-up company, you need to decide on which platform you are going to
    develop first. If it is important to reach an audience as large as possible, then
    Android would probably be your first pick, unless you know that the percentage
    of iOS users amongst your targeted audience is higher. However, if monetization
    by selling your app or selling in-app products is the most important thing to
    you, then iOS probably would be a better first pick. The reason for this is that
    iOS users are more willing to spend money on apps than Android users. On the other
    hand, displaying advertisements seems to work better for the latter. The **click-through
    rates** (**CTR**) are, on average, better for the Android platform.
  prefs: []
  type: TYPE_NORMAL
- en: In-app purchase product types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For iOS, there are four types of in-app purchase products. The iOS in-app purchase
    product types are:'
  prefs: []
  type: TYPE_NORMAL
- en: Consumable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-consumable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-renewing subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Auto-renewing subscription:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/519dfa69-7fd4-4bfa-867c-d53f1bddf336.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Consumable products are consumed in the process; for example, an extra life
    in a game. Non-consumable products can be bought once, and unlock features permanently.
    A subscription unlocks features or a functionality for a particular amount of
    time; for example, to access particular (premium) content. There are also two
    types of subscriptions available: a non-renewing subscription, and an auto-renewing
    subscription.'
  prefs: []
  type: TYPE_NORMAL
- en: You can set up products of each type in iTunes Connect. For each product, you
    can choose a product ID, a reference name (for internal reference), a display
    name, a description name, and a price tier. You can also sell your app or products
    at certain price points. The first tier refers to a price of $0.99; for example,
    it looks like shown later. These are the products of the Empurror app, the sample
    that we are going to have a closer look at later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see [https://developer.apple.com/in-app-purchase/](https://developer.apple.com/in-app-purchase/).
  prefs: []
  type: TYPE_NORMAL
- en: In-app billing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In-app billing products for Android can also be a consumable, non-consumable,
    or a subscription type. From a high-level perspective, there are no large differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can implement In-app billing only in applications that you publish through
    Google Play. You can specify two product types for your In-app billing application:
    managed in-app products, and subscriptions. Google Play handles and tracks ownership
    for in-app products and subscriptions for your application on a per-user basis.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the In-app Billing API, you can also consume managed items
    within your application. You would typically implement consumption for items that
    can be purchased multiple times, such as in-game currency, fuel, or magic spells.
    Once purchased, a managed item cannot be purchased again until you consume the
    item.
  prefs: []
  type: TYPE_NORMAL
- en: A subscription is a product type offered in In-app Billing that lets you sell
    content, services, or features to users from inside your app, with recurring monthly
    or annual billing. You can sell subscriptions to almost any type of digital content,
    from any type of app or game.
  prefs: []
  type: TYPE_NORMAL
- en: To initiate a purchase, your application sends a billing request for a specific
    in-app product. Google Play then handles all of the checkout details for the transaction,
    including requesting and validating the form of payment and processing the financial
    transaction.
  prefs: []
  type: TYPE_NORMAL
- en: When the checkout process is complete, Google Play sends your application the
    purchase details, such as the order number, the order date and time, and the price
    paid. At no point does your application have to handle any financial transactions;
    that role belongs to Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see [https://developer.android.com/google/play/ billing/billing_overview.html](https://developer.android.com/google/play/billing/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: See how in-app purchases can be implemented
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since in-app purchases (iOS) often show higher conversions than those for in-app
    billing (Android), we will have a look at in-app purchases, in particular, using
    the case of the Empurror app.
  prefs: []
  type: TYPE_NORMAL
- en: The case of the Empurror
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Empurror is a little SpriteKit game for iOS that I have worked on previously.
    It is a very simple game about a cat (the Empurror) and many kittens, jumping
    off a roof. In this game, our hero (the player) needs to catch them all in order
    to succeed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00a53fe2-8088-4955-86c7-b17134583370.png)'
  prefs: []
  type: TYPE_IMG
- en: The game comes with three in-app purchases, all donations, not adding any special
    features to the game, other than a view of the Empurror saying thank you. Oh yeah,
    and you can rub his belly to make him purr.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, the in-app purchase view looks as follows. The game offers three products:
    a generous donation (cat food), a massive donation (a nice-looking fish), and
    an amazing donation (a huge turkey). We have added these three types of donations
    to do some experimenting on pricing.'
  prefs: []
  type: TYPE_NORMAL
- en: The first focus is on the middle one, the massive donation. We tried to make
    it look like the best deal. Give that cat a fish if you like the game! The amazing
    donation just seems, well, a little bit too amazing and is obviously overpriced.
    Paying 99 cents only? Your name is not Scrooge, is it? Well then, go for the "Massive
    donation".
  prefs: []
  type: TYPE_NORMAL
- en: 'This is basically what we were trying to do here. Of course, this pricing strategy
    works best with real digital incentives, but you get the picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46074c64-74a4-4183-b4a8-c0a731732a7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we had developed an app that offered in-app purchases, then our products
    for removal could follow the same strategy: a fair deal in the middle, a minor
    one on the left, and an expensive one on the right, just to make the middle one
    look great:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove ads for 1 week for $ 0.99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove ads for 1 month for $ 1.99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove ads for 1 year for $19.99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use the app for at least a year, the best savings will be the third one.
    However, when the options are presented as we have done it, most people will be
    encouraged to choose the middle option. This works for most apps, but there is
    no reason for not getting feedback on this strategy. Measure and figure out what
    product leads to the best conversion. There are analytical tools that will help
    you do this. See [Chapter 13](a62b3753-12c5-4170-808a-e0e1446e6b97.xhtml), *Play
    Store and App Store Hacks*, and [Chapter 14](2ee66b42-cffe-42de-bbce-4fa54fa7fb61.xhtml),
    *A/B Testing Your App*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Now, have a look at the code to see what needs to be done to implement this
    payment model. The following code is for iOS in Objective-C, but it is not hard
    to convert it to Swift (4) if you want to. Also, for Android, things work a little
    bit different, but the main idea remains the same for all cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will define a number of products for your app at iTunes Connect (or Google
    Developer Console) that you need to download when the user navigates to your in-app
    purchase view. Notice the import of StoreKit and the SKProductsRequestDelegate
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When the view appears, we add an event to measure conversion (we use Flurry
    here), and load the products from the store, that is, if we are allowed to do
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have received a response, we can show them to the user, or, as is the
    case here, enable the corresponding buttons allowing the user to make a purchase.
    For each product, a product identifier, a name, and a price will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If the user clicks on an any of the buttons (massive donation!), the purchase
    transaction will be started. There are a couple of transaction states for which
    a callback will be generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the payment succeeded (`SKPaymentTransactionStatePurchased`), we need to
    let the app know to act upon it by calling the `EnablePurchaseProduct` method.
    If the payment failed (`SKPaymentTransactionStateFailed`), or if another event
    occurred, we can act upon that as well if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If a user has made a purchase previously that is non-consumable or otherwise
    still valid (think of a subscription), then a restore option needs to be made
    available. Think of a user who gets a new device, or who has reinstalled the app.
    According to Apple guidelines (Google has something similar), the app needs to
    be able to restore the previous purchase, and it will probably not accept your
    app if it does not have such an option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app calls the `restore` method (because the user clicks on a restore button,
    or something like that), which triggers the `restoreCompletedTransactions` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is where the `SKPaymentTransactionStateRestored` state comes from. The
    app should act upon this just as is the case when a purchase succeeds. In addition
    to this, you can provide some extra feedback to the user about the fact that premium
    features, or other purchases, have been restored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the transaction is finished and the `paymentQueueRestoreCompleted``TransactionsFinished`
    method is triggered. This method is probably even more suitable to respond to
    a restored or a succeeded state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Applying a pricing strategy to your store listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although in-app purchases on average have higher conversion rates, you can also
    charge for your app right away. If you sell your app in the App Store, then the
    most important question is what price tier to pick for it. You can try to figure
    out what is being charged for similar apps in the App Store. Check App Annie,
    for example, to see how other apps are doing. Use your browser to visit [https://www.appannie.com/apps/ios/top](https://www.appannie.com/apps/ios/top)
    to learn more. Charging for an app upfront works well only for those apps that
    a lot of people are aware of, when it has a good reputation, and when it is totally
    clear what the app is offering. Often, there are comparable apps offered for free
    by competitors, so the added value that your app offers must be obvious to the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: If your app is related to a well-known brand, or when you are operating in a
    niche market, then charging before the user can download the app could work as
    well. Otherwise, you should seriously consider the freemium model and make money
    from in-app purchases instead.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of the top paid iOS apps as shown at App Annie (US market,
    Q3, 2016). It is no surprise that there are a lot of Minecraft clone apps in the
    store. A million copies of Minecraft Pocket edition have been sold for almost
    $7 each!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f42ed21-6f27-424d-af82-2c1831ae9e8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, the best way to find the right price point for your app is to run
    some tests. Start with a high price for your app, and lower it later if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c07ba12d-492d-4b69-89c6-67499639d4d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to test if a lower price point increases the number of purchases,
    and if you want to test at what price point the revenue from your app is optimal,
    you should consider offering a special discount for a limited period. If you have
    found that price point, you may apply it to your app permanently. The number of
    sales is not the most important factor here. Instead, find the price point that
    results in the largest revenue. For example, let''s say that if you charge $3.99
    for your app, you can sell 10 copies a month. If you lower the price by one dollar
    to $2.99, you can sell three times as much. What happens if you sell your app
    at the minimum price of $0.99? Wow, you sell 60 copies instead of 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/665418df-f7ce-4216-8b82-ec3382bd1741.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But when you do the math to find out what your revenue is, you will find that
    the price point of $2.99 is the one that you should pick:'
  prefs: []
  type: TYPE_NORMAL
- en: 10 x $3.99 = $39.90
  prefs: []
  type: TYPE_NORMAL
- en: 30 x $2.99 = $87.70
  prefs: []
  type: TYPE_NORMAL
- en: 60 x $0.99 = $59.40
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen multiple ways of monetizing your app. A large
    number of users is nice to have, but a large number of customers is more welcome.
    After all, you have a business to run, right?
  prefs: []
  type: TYPE_NORMAL
- en: We have seen the differences between selling your app and the freemium model,
    where you offer your app for free and where you make money from selling premium
    features. If you do this, your app will become more valuable to the user after
    a certain amount of time. Because of this, a small percentage of users will convert
    to paying customers. Your app probably will be more profitable with the in-app-purchases
    strategy.
  prefs: []
  type: TYPE_NORMAL
- en: We had a look at pricing strategies, and we saw a sample of how to implement
    in-app purchases in an iOS app. You need to test which strategy will work best
    for your app. You can run some A/B tests, and you will have to listen to the feedback
    you get from your users. You need to find out what the premium elements of your
    app are, according to your users. You can have a look at the reviews for your
    app and, if needed, reply to the comments they give.
  prefs: []
  type: TYPE_NORMAL
- en: When you have a look at the reviews in the App Store (or Play Store) then, in
    particular, the negative reviews are interesting. Do not be offended with what
    people write about your app. Apparently, they thought it was worthwhile to give
    you this feedback. If you respond, not just as a comment to their review, but
    also by releasing a new version that solves the issue that they are experiencing,
    you can turn an angry user into a happy one!
  prefs: []
  type: TYPE_NORMAL
- en: You will have to make the feedback loop smaller by releasing early and often.
    What you need is a Continuous Delivery strategy, and that is exactly what you
    will read about in the next chapter!
  prefs: []
  type: TYPE_NORMAL
