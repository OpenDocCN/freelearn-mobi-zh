["```kt\nclass MyActivity : Activity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n    }\n    override fun onStart() {\n        super.onStart()\n    }\n    override fun onResume() {\n        super.onResume()\n    }\n    override fun onPause() {\n        super.onPause()\n    }\n    override fun onStop() {\n        super.onStop()\n    }\n    override fun onDestroy() {\n        super.onDestroy()\n    }\n}\n```", "```kt\ninterface MyListener {\n    fun onChange(newText: String)\n}\nobject MyManager {\n    private val listeners = mutableListOf<MyListener>()\n    fun addListener(listener: MyListener) {\n        listeners.add(listener)\n    }\n    fun performLogic() {\n        listeners.forEach {\n            it.onChange(\"newText\")\n        }\n    }\n}\n```", "```kt\nclass MyActivity : Activity(), MyListener {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        MyManager.addListener(this)\n    }\n    override fun onChange(newText: String) {\n        myTextView.setText(newText)\n    }\n}\n```", "```kt\nobject MyManager {\n    …\n    fun removeListener(listener: MyListener){\n        listeners.remove(listener)\n    }\n    …\n}\nclass MyActivity : Activity(), MyListener {\n    …\n    override fun onDestroy() {\n        MyManager.removeListener(this)\n        super.onDestroy()\n    }\n    …\n}\n```", "```kt\nimplementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0\"\nimplementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.4.0\"\n```", "```kt\nimplementation \"androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0\"\nimplementation \"androidx.compose.runtime:runtime-livedata:2.4.0 \"\n```", "```kt\nclass MyViewModel : ViewModel() {\n    private val _myLiveData = MutableLiveData(\"\")\n    val myLiveData: LiveData<String> = _myLiveData\n    init {\n        _myLiveData.value = \"My new value\"\n    }\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        …\n        val myViewModel : MyViewModel by viewModels()\n        …\n    }\n}\n```", "```kt\n        val myViewModel : MyViewModel by viewModels {\n            object : ViewModelProvider.Factory {\n                override fun <T : ViewModel> \n                    create(modelClass: Class<T>): T {\n                    return MyViewModel() as T\n                }\n            }\n        }\n```", "```kt\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        …\n        super.onCreate(savedInstanceState)\n        val myViewModel: MyViewModel by viewModels()\n        myViewModel.myLiveData.observe(this) { text ->\n            myTextView.text = text\n        }\n        …\n    }\n}\n```", "```kt\n@Composable\nfun MyScreen(viewModel: MyViewModel = viewModel()) {\n    viewModel.myLiveData.observeAsState().value?.let {\n        MyComposable(it)\n    }\n}\n@Composable\nfun MyComposable(text: String){\n    …\n}\n```", "```kt\n        implementation \"androidx.compose.runtime:runtime-livedata:$compose_version\"\n    ```", "```kt\n        <string name=\"total_request_count\">Total request count: %d</string>\n    ```", "```kt\n    class MainTextFormatter(private val \n        applicationContext: Context) {\n        fun getCounterText(count: Int) =\n            applicationContext.getString(R.string.total_request_co\n        unt, count)\n    }\n    ```", "```kt\n    class MainViewModel(\n        …\n        private val mainTextFormatter: MainTextFormatter\n    ) : ViewModel() {\n        …\n        init {\n            viewModelScope.launch {\n                    …\n                    .flatMapConcat { users ->\n                        appDataStore.savedCount.map { \n                            count ->\n                            UiState(\n                                users,\n                               mainTextFormatter.getCounterText(count)\n                            )\n                        }\n                    }\n                    …\n            }\n        }\n    }\n    ```", "```kt\n    class MyApplication : Application() {\n        companion object {\n            …\n            lateinit var mainTextFormatter: \n                MainTextFormatter\n        }\n        override fun onCreate() {\n            super.onCreate()\n            …\n            mainTextFormatter = MainTextFormatter(this)\n        }\n    }\n    ```", "```kt\n    class MainViewModelFactory : ViewModelProvider.Factory {\n        override fun <T : ViewModel> create(modelClass: \n            Class<T>): T =\n            MainViewModel(\n                MyApplication.userService,\n                MyApplication.userDao,\n                MyApplication.appDataStore,\n                MyApplication.mainTextFormatter\n            ) as T\n    }\n    ```", "```kt\n    class MainViewModel(\n        …\n    ) : ViewModel() {\n        private val _uiStateLiveData = \n            MutableLiveData(UiState())\n        val uiStateLiveData: LiveData<UiState> = \n            _uiStateLiveData\n        init {\n            viewModelScope.launch {\n                    …\n                    .collect {\n                        _uiStateLiveData.value = it\n                    }\n            }\n        }\n    }\n    ```", "```kt\n    …\n    @Composable\n    fun Screen(viewModel: MainViewModel = viewModel(factory = MainViewModelFactory())) {\n        viewModel.uiStateLiveData.observeAsState().value?.let {\n            UserList(uiState = it)\n        }\n    }\n    …\n    ```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n        android:id=\"@+id/text_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```", "```kt\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val textView = \n            findViewById<TextView>(R.id.text_view)\n        textView.text = \"Hello new world\"\n    }\n}\n```", "```kt\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            Surface {\n                HelloWorld()\n            }\n        }\n    }\n}\n@Composable\nfun HelloWorld() {\n    Text(text = \"Hello World\")\n}\n```", "```kt\n@Composable\nfun HelloWorld() {\n    val text = remember { mutableStateOf(\"Hello World\") }\n    ShowText(text = text.value) {\n        text.value = text.value + \"0\"\n    }\n}\n@Composable\nfun ShowText(text: String, onClick: () -> Unit) {\n    ClickableText(\n        text = AnnotatedString(text = text),\n        onClick = {\n            onClick()\n        })\n}\n```", "```kt\nLazyColumn(modifier = Modifier.padding(16.dp)) {\n        item(uiState.count) {\n            Column(modifier = Modifier.padding(16.dp)) {\n                Text(text = uiState.count)\n            }\n        }\n        items(uiState.userList) {\n            Column(modifier = Modifier.padding(16.dp)) {\n                Text(text = it.name)\n                Text(text = it.username)\n                Text(text = it.email)\n            }\n        }\n    }\n```", "```kt\n@Composable\nfun Calculator(\n    a: String, onAChanged: (String) -> Unit,\n    b: String, onBChanged: (String) -> Unit,\n    result: String,\n    onButtonClick: () -> Unit\n) {\n    Column(modifier = Modifier.padding(16.dp)) {\n        OutlinedTextField(\n            value = a,\n            onValueChange = onAChanged,\n            keyboardOptions = KeyboardOptions(keyboardType \n                = KeyboardType.Number),\n            label = { Text(\"a\") }\n        )\n        OutlinedTextField(\n            value = b,\n            onValueChange = onBChanged,\n            keyboardOptions = KeyboardOptions(keyboardType \n                = KeyboardType.Number),\n            label = { Text(\"b\") }\n        )\n        Text(text = result)\n        Button(onClick = onButtonClick) {\n            Text(text = \"Calculate\")\n        }\n    }\n}\n```", "```kt\n@Composable\nfun Screen(viewModel: MainViewModel = viewModel(factory = MainViewModelFactory())) {\n    viewModel.uiStateLiveData.observeAsState().value?.let {\n        UserList(uiState = it)\n    }\n}\n```", "```kt\ndependencies {\n    … \n    implementation \"androidx.navigation:navigation-compose:2.4.0-rc01\"\n    …\n}\n```", "```kt\nSurface {\n    val navController = rememberNavController()\n    AppNavigation(navController = navController)\n}\n```", "```kt\n@Composable\nfun AppNavigation(navController: NavHostController) {\n    NavHost(navController, startDestination = \"screen1\") {\n        composable(route = \"screen1\") {\n            Screen1(navController)\n        }\n        composable(\n            route = \"screen2/{param}\",\n            arguments = listOf(navArgument(\"param\") { type \n                = NavType.StringType })\n        ) {\n            Screen2(navController, \n                it.arguments?.getString(\"param\").orEmpty())\n        }\n    }\n}\n```", "```kt\n@Composable\nfun Screen1(navController: NavController) {\n    Column(modifier = Modifier.clickable {\n        navController.navigate(\"screen2/test\")\n    }) {\n        Text(text = \"My text\")\n    }\n}\n```", "```kt\n@Composable\nfun Screen2(navController: NavController, text: String) {\n    Column {\n        Text(text = text)\n    }\n}\n```", "```kt\n    dependencies {\n        … \n        implementation \"androidx.navigation:navigation-compose:2.4.0-rc01\"\n        …\n    }\n    ```", "```kt\n    private const val ROUTE_USERS = \"users\"\n    private const val ROUTE_USER = \"users/%s\"\n    private const val ARG_USER_NAME = \"name\"\n    sealed class AppNavigation(val route: String, val \n        argumentName: String = \"\") {\n        object Users : AppNavigation(ROUTE_USERS)\n        object User : AppNavigation\n            (String.format(ROUTE_USER, \"{$ARG_USER_NAME}\")\n                , ARG_USER_NAME) {\n            fun routeForName(name: String) = \n                String.format(ROUTE_USER, name)\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun Users(\n        navController: NavController,\n        viewModel: MainViewModel = viewModel(factory =  \n            MainViewModelFactory())\n    ) {\n        viewModel.uiStateLiveData.observeAsState().value?.let {\n            UserList(uiState = it, navController)\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun UserList(uiState: UiState, navController: NavController) {\n        LazyColumn(modifier = Modifier.padding(16.dp)) {\n            item(uiState.count) {\n                Column(modifier = Modifier.padding(16.dp)) {\n                    Text(text = uiState.count)\n                }\n            }\n            items(uiState.userList) {\n                Column(modifier = Modifier\n                    .padding(16.dp)\n                    .clickable {\n                        navController.navigate\n                          (AppNavigation.User.routeForName\n                               (it.name))\n                    }) {\n                    Text(text = it.name)\n                    Text(text = it.username)\n                    Text(text = it.email)\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun User(text: String) {\n        Column {\n            Text(text = text)\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun App(navController: NavHostController) {\n        NavHost(navController, startDestination = \n            AppNavigation.Users.route) {\n            composable(route = AppNavigation.Users.route) {\n                Users(navController)\n            }\n            composable(\n                route = AppNavigation.User.route,\n                arguments = listOf(navArgument\n                    (AppNavigation.User.argumentName) {\n                    type = NavType.StringType\n                })\n            ) {\n                User(it.arguments?.getString(AppNavigation.User.argumentName).orEmpty())\n            }\n        }\n    }\n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                Exercise0302Theme { \n            // Replace this with your application's theme\n                    Surface {\n                        val navController = \n                            rememberNavController()\n                        App(navController = navController)\n                    }\n                }\n            }\n        }\n    }\n    ```"]