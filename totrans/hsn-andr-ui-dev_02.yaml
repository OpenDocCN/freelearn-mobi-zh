- en: Designing Form Screens
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计表单屏幕
- en: Form screens are an essential part of user interface design in many ways because
    their history is a lesson in how not to do things. Most applications need to capture
    input from their users at some point, and you need input widgets for that, but
    you should always consider the minimum amount of information you need to ask the
    user for, rather than try to get all the information you may need in the future.
    This approach will keep the user focused on the task they are trying to carry
    out. Presenting them with a wall of input fields is overwhelming to most users
    and breaks their focus, which in turn can lead to them abandoning what they were
    trying to do with your application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，表单屏幕是用户界面设计的重要组成部分，因为它们的历史就是如何不做事情的教训。大多数应用程序在某个时候都需要从用户那里获取输入，你需要输入控件来做到这一点，但你应该始终考虑你需要向用户请求的最少信息量，而不是试图获取你未来可能需要的所有信息。这种方法将使用户专注于他们试图完成的任务。向他们展示一堵输入字段墙会令大多数用户感到不知所措，并打破他们的注意力，这反过来又可能导致他们放弃他们试图用你的应用程序做的事情。
- en: This chapter is focused on form screens, and will walk you through a bit of
    their history before diving into a method for actually designing form screens.
    This approach can and should be reused whenever you need to design a screen for
    an app. It's always important to take a step back from your code work and consider
    how things will look and fit together for the user; it's often the difference
    between a successful app and failure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专注于表单屏幕，将在深入实际设计表单屏幕的方法之前，简要介绍它们的历史。这种方法可以在你需要为应用程序设计屏幕时重复使用。始终从你的代码工作中退一步，考虑事情对用户来说将看起来如何以及如何组合在一起，这往往是成功应用程序和失败之间的区别。
- en: 'In this chapter, we''ll develop a practical form screen using Android Studio
    and the layout editor. Starting from an empty template in a new project, you''ll
    learn the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Android Studio和布局编辑器开发一个实用的表单屏幕。从新项目中的空白模板开始，你将学习以下内容：
- en: How to break up and then arrange a form layout to be most effective for your
    users
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何拆分和重新排列表单布局以最有效地为用户服务
- en: How to use resources to keep your user interface consistent
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用资源来保持用户界面的统一性
- en: How to style widgets to help the user understand what the widget should be used
    for
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置控件样式以帮助用户理解控件应如何使用
- en: How to build drawable resources that respond to state changes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建对状态变化做出响应的可绘制资源
- en: Exploring form screens
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索表单屏幕
- en: While not the most glamorous component of an application's user experience,
    form screens are a long-time staple of software. A form screen can be defined
    as any screen where the user is expected to explicitly enter or change data, as
    opposed to viewing or navigating it. Good examples of form screens are login screens,
    edit profile screens, or the add contact screen from a phonebook app. Over the
    years, the idea of what constitutes a good form screen has changed, with some
    people going as far as to shun them completely. However, you can't capture the
    user's data out of thin air.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管不是应用程序用户体验中最吸引人的组件，但表单屏幕一直是软件的长期支柱。表单屏幕可以定义为任何用户预期明确输入或更改数据的屏幕，而不是查看或导航它。好的表单屏幕例子包括登录屏幕、编辑个人资料屏幕或电话簿应用中的添加联系人屏幕。多年来，关于什么是好的表单屏幕的想法已经发生了变化，有些人甚至完全避开它们。然而，你不能凭空捕捉到用户的数据。
- en: 'The Android standard toolkit provides an excellent and diverse collection of
    widgets and layout structures to facilitate building excellent forms, and in Material
    Design applications, form screens can often double as a *view* screen (what will
    usually be a read-only version of the form screen) thanks to the placement of
    labels. A good way to understand this principle is to consider the evolution of
    textboxes. As soon as you have a blank space to be filled by your user, you need
    to tell the user what to put there, and when we started labeling textboxes, we
    simply copied how we did this on paper forms--by putting a label to the one side
    of the textbox:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android标准工具包提供了一组优秀且多样化的控件和布局结构，以促进构建出色的表单。在Material Design应用中，由于标签的放置，表单屏幕经常可以充当*视图*屏幕（通常是一个只读版本的表单屏幕）。理解这一原则的一个好方法就是考虑文本框的演变。一旦你有了一个需要用户填充空白空间，你就需要告诉用户该放什么，当我们开始对文本框进行标注时，我们只是简单地模仿了在纸质表单上这样做的方式——将标签放在文本框的一侧：
- en: '![](img/eb41dffa-4a42-4750-9e74-d38408ce5176.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb41dffa-4a42-4750-9e74-d38408ce5176.png)'
- en: 'The issue with this is that the label always takes up quite a bit of space,
    and takes up even more if you need to include some validation rules for the user
    (such as date inputs--DD/MM/YYYY). This is where we started adding hints to the
    input boxes. The label will explain what to add in the Date of Birth textbox,
    and a hint within the textbox will tell the user how to input valid data:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的症结在于标签总是占用相当多的空间，如果你需要为用户提供一些验证规则（例如日期输入--DD/MM/YYYY），它还会占用更多的空间。这就是我们开始向输入框添加提示的原因。标签将解释在出生日期文本框中应该添加什么，而文本框内的提示将告诉用户如何输入有效的数据：
- en: '![](img/9ecff562-332e-4c1f-96a7-d9d3f4ff9797.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9ecff562-332e-4c1f-96a7-d9d3f4ff9797.png)'
- en: 'From this pattern, many mobile applications began to drop the label completely
    and instead used the hint/placeholder to contain the data on the theory that from
    the context of the form, the user will be able to infer what data was in each
    of the textboxes. However, this means that the user has to do a bit of extra thinking
    in order to make sense of the screen when they see it for the first time. This
    extra delay can quickly turn to frustration, and reduces how usable your application
    is. For this reason, Material Design text inputs turn their hints into small labels
    that move above the textbox when the user focuses on the textbox, making it easier
    for them to keep track of what information they are entering:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个模式中，许多移动应用程序开始完全放弃标签，转而使用提示/占位符来包含数据，依据的理论是，从表单的上下文中，用户能够推断出每个文本框中包含的数据。然而，这意味着用户在第一次看到屏幕时需要做一点额外的思考才能理解屏幕内容。这种额外的延迟很快就会变成挫败感，并降低应用程序的可用性。因此，Material
    Design 文本输入将提示转换为当用户聚焦于文本框时移动到文本框上方的小标签，这使得他们更容易跟踪他们正在输入的信息：
- en: '![](img/95a44133-8920-4198-9ac4-87937a650d97.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/95a44133-8920-4198-9ac4-87937a650d97.png)'
- en: This also reduces the amount of work that needs to be done on form screens as
    a developer, because you typically won't need to separate the *view* and *edit*
    screens of your application, since the form will always have all of its labeling
    available. However, it's important to avoid overcrowding your screens with input
    widgets. Nobody likes to have to fill in lots of data, even if most of it is optional.
    Instead, always consider the minimum amount of data you need from your user at
    each point in your application. It's also important to consider how you will ask
    the user for their data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这也减少了作为开发者需要在表单屏幕上完成的工作量，因为你通常不需要分离应用程序的*查看*和*编辑*屏幕，因为表单将始终提供所有标签。然而，避免在屏幕上过度拥挤输入小部件非常重要。没有人喜欢填写大量数据，即使其中大部分是可选的。相反，始终考虑在应用程序的每个点上你需要从用户那里获取的最小数据量。同时，考虑你将如何请求用户的数据也同样重要。
- en: We'll start our first form screen as an information capturing screen. We'll
    be building an imaginary app to track someone's travel expenses, allowing them
    to capture, tag, and store each of their expenses to be filtered and reviewed
    later. The first thing we need is a screen where the user can capture an expense
    and any additional information that goes with it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先将第一个表单屏幕作为一个信息收集屏幕。我们将构建一个虚拟应用程序来跟踪某人的旅行费用，允许他们捕捉、标记和存储每一项费用以便稍后过滤和审查。我们首先需要的是一个用户可以捕捉费用及其任何附加信息的屏幕。
- en: As best as possible, you should make input fields optional, but you can always
    encourage people to give more data by telling them how complete something is.
    This is a common technique when dealing with a user profile--"Your profile is
    50% complete", helps encourage the user to provide more data to raise that number.
    This is a simple form of gamification, but it's also very effective.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能地，你应该使输入字段为可选，但你总是可以通过告诉人们某件事的完整性来鼓励他们提供更多数据。这在处理用户资料时是一个常见的技巧--“您的资料完成度为50%”，这有助于鼓励用户提供更多数据以提高该数字。这是一种简单的游戏化形式，但效果也非常显著。
- en: Designing a layout
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计布局
- en: Good user interface design is rooted in some simple rules, and there are processes
    you can follow to design a great user interface. For example, imagine that you're
    building an app to capture travel expenses so that they can be claimed easily
    at a later time. The foremost thing we'll build over here is the screen that captures
    the details of a single claim. This is a perfect example of a modern form screen
    design.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的用户界面设计基于一些简单的规则，并且你可以遵循一些流程来设计出色的用户界面。例如，想象你正在构建一个应用程序来捕捉旅行费用，以便稍后可以轻松地提出索赔。在这里，我们将首先构建的是捕捉单个索赔详情的屏幕。这是一个现代表单屏幕设计的完美例子。
- en: When designing a layout, it's a good idea to use a mockup tool such as Balsamiq
    ([https://balsamiq.com/](https://balsamiq.com/)), or even paper and pencil to
    think about the layout of the screen. Physical index cards make excellent thinking
    spaces as they have similar proportions to a phone or tablet. Using paper, especially,
    helps you think about the arrangement of the screen instead of being distracted
    by the exact colors, fonts, and spacing that should be dealt with in a common
    set of theming rules.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计布局时，使用像Balsamiq（[https://balsamiq.com/](https://balsamiq.com/)）这样的原型工具，或者甚至使用纸和笔来考虑屏幕的布局是个好主意。实物索引卡是出色的思考空间，因为它们的比例与手机或平板电脑相似。特别是使用纸张可以帮助你思考屏幕的布局，而不是被处理在常见主题规则中的确切颜色、字体和间距所分散。
- en: To start designing the screen, we need to consider what data we'll need from
    the user and how we might be able to fill some of it out for them. We also need
    to try and stick to the platform design language so that the application doesn't
    feel out of place to the user. It's also important when designing form screens
    to ensure that the entire input form will fit onto the device's display. Scrolling
    an input screen requires your user to remember what is not on the screen, and
    causes frustration and anxiety. Whenever you design a form screen, ensure that
    all the inputs will fit onto one display. If they don't all immediately fit onto
    the display together, first consider whether you can remove some of them. After
    removing any that aren't absolutely required, consider grouping some on a single
    line, ensuring that you put no more than two inputs per line. More than two input
    fields on a single line implies that you can probably turn them into a single
    input.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始设计屏幕，我们需要考虑我们需要从用户那里获取哪些数据，以及我们可能如何为他们填写一些信息。我们还需要尝试遵守平台设计语言，以便应用程序对用户来说不会显得格格不入。在设计表单屏幕时，确保整个输入表单可以适应设备的显示也很重要。滚动输入屏幕需要用户记住屏幕上没有显示的内容，这会导致挫败感和焦虑。每次设计表单屏幕时，请确保所有输入都可以在一个显示上。如果它们不能立即一起显示在屏幕上，首先考虑是否可以删除其中的一些。在删除任何非绝对必需的信息后，考虑将一些信息分组在单行上，确保每行不超过两个输入。
- en: 'So, to get started, consider what information a user will want to capture for
    a travel expense:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了开始，考虑用户想要记录的旅行费用信息：
- en: How much the expense was
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 费用的金额
- en: Some photos of the invoice, or maybe of the item purchased
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些发票的照片，或者可能是购买的商品的照片
- en: The date that they captured the expense on
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们记录费用的日期
- en: What sort of expense they're capturing such as food, transport, accommodation,
    and more
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们记录的费用类型，如食物、交通、住宿等
- en: A short description to help them remember what the expense was
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简短的描述，帮助他们记住这笔费用的内容
- en: 'Great, that seems like a good starting point, but they''re not in a great order
    and they''re not grouped at all. We need to consider what is most important, and
    what groups logically fit together well on-screen. For starters, let''s focus
    on developing a portrait layout for a phone, since that will be our most common
    use case. So, the next thing to do is group the input components in a way that
    will feel logical and familiar to a user. When looking at an overview of claims,
    the things we''ll want to list are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，这似乎是一个不错的起点，但它们没有很好的顺序，也没有任何分组。我们需要考虑什么是最重要的，以及哪些组在屏幕上逻辑上很好地组合在一起。首先，让我们专注于为手机开发一个肖像布局，因为这将是我们最常见的用例。所以，接下来要做的事情是以一种对用户来说既合理又熟悉的方式对输入组件进行分组。当查看索赔概览时，我们希望列出的内容包括以下内容：
- en: 'The date of the expense:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 费用的日期：
- en: The date that they captured the expense on
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们记录费用的日期
- en: 'The amount the claim is for:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索赔的金额：
- en: How much the expense was
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 费用的金额
- en: Some photos of the invoice, or maybe of the item purchased
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些发票的照片，或者可能是购买的商品的照片
- en: 'The description of the claim:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索赔的描述：
- en: What sort of expense they're capturing such as food, transport, accommodation,
    and more
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们记录的费用类型，如食物、交通、住宿等
- en: A short description to help them remember what the expense was
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简短的描述，帮助他们记住这笔费用的内容
- en: 'So, we''ll group these three fields together, and put them at the top of the
    screen. This particular grouping will feel common to anyone who has used any budget
    or expense tracking software:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将这三个字段组合在一起，并将它们放在屏幕的顶部。这种分组对任何使用过任何预算或费用跟踪软件的人来说都很常见：
- en: '![](img/c4ed0cd5-76ce-46f6-b639-2972e08b2ccb.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c4ed0cd5-76ce-46f6-b639-2972e08b2ccb.jpg)'
- en: 'The Date is a special field, because we can easily populate it with the current
    date. It''s most likely when the user enters this screen that they are capturing
    an expense for the same day. We still need to capture a category and attachments
    for the expense. Attachments will need a large amount of space so that the user
    can preview them without having to open each one to know what it is, so we''ll
    put them at the bottom of the screen and have them take any space left over. That
    just leaves the category. The expense categories are best represented using icons,
    but we need some space for text so that the user knows what each icon means. We
    can do this in one of several ways:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 日期是一个特殊字段，因为我们可以轻松地填充当前日期。最有可能的情况是，当用户进入这个屏幕时，他们正在记录同一天的支出。我们仍然需要记录支出的类别和附件。附件需要大量的空间，以便用户可以预览它们，而无需打开每一个来了解其内容，因此我们将它们放在屏幕底部，并占用任何剩余的空间。这样就只剩下类别了。最佳地表示支出类别的方式是使用图标，但我们需要一些空间来放置文本，以便用户知道每个图标代表什么。我们可以通过几种方式来实现：
- en: 'Place a tiny label above or below each icon:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个图标的上方或下方放置一个微小的标签：
- en: 'Pros: All the labels are always on the screen'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：所有标签始终显示在屏幕上
- en: 'Cons: The labels can be hard to read on smaller screens, and the icons take
    up more screen space:'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：在较小的屏幕上，标签可能难以阅读，图标占用的屏幕空间更多：
- en: '![](img/8d94c91b-2f0d-4ec2-b066-3dfeba6297e1.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8d94c91b-2f0d-4ec2-b066-3dfeba6297e1.jpg)'
- en: 'Create a vertical list of icons and put a nice large label to the right of
    each:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个垂直的图标列表，并在每个图标的右侧放置一个漂亮的、大号的标签：
- en: 'Pros: The labels are easy to read, and always associated with their icons'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：标签易于阅读，并且始终与它们的图标相关联
- en: 'Cons: This will take up lots of the vertical space that is best used to display
    attachment previews:'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：这将占用大量本应用于显示附件预览的垂直空间：
- en: '![](img/e517b489-32be-4772-99ef-1ef8a78a5ebd.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e517b489-32be-4772-99ef-1ef8a78a5ebd.jpg)'
- en: 'Show only the icons, and display the label when the user holds their finger
    over the icon (long presses):'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只显示图标，当用户将手指放在图标上（长按）时显示标签：
- en: 'Pros: The text takes up no screen space'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：文本不占用屏幕空间
- en: 'Cons: This sort of behavior is not intuitive to users, and requires that the
    user selects the category to know what its label is:'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：这种行为对用户来说不直观，需要用户选择类别才能知道其标签：
- en: '![](img/cf46ea5b-a70f-468b-843b-17b09980ffc6.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cf46ea5b-a70f-468b-843b-17b09980ffc6.jpg)'
- en: 'Show the list of icons and the text of the selected category below them:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图标列表下方显示选中类别的文本：
- en: 'Pros: The text label can be large and easy to read, and takes up less screen
    space because only one label is shown at a time'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：文本标签可以很大，易于阅读，并且占用的屏幕空间较少，因为一次只显示一个标签
- en: 'Cons: The user must select the category to know what its label is:'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：用户必须选择类别才能知道其标签：
- en: '![](img/2c7ec26d-e032-4100-aeac-1081746871b6.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2c7ec26d-e032-4100-aeac-1081746871b6.jpg)'
- en: In order to keep the label in a nice, easily readable size, while also drawing
    extra attention to which category is currently selected, this example will show
    you how to create option four, where the currently selected category name is shown
    below a horizontal list of the category icons. We'll also highlight the selected
    icon to help keep a connection between the two user interface elements.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持标签的大小适中、易于阅读，同时也要额外吸引对当前选中类别的注意，以下示例将向您展示如何创建第四种选项，即当前选中的类别名称显示在类别图标水平列表下方。我们还将突出显示选中的图标，以帮助保持两个用户界面元素之间的联系。
- en: 'The one remaining thing that the user needs to be able to do is attach files
    to the expense claim before saving it. There should be a nice, large area at the
    bottom of this layout that will make a perfect area to preview a single attachment,
    and if the user has more than one attachment, they can swipe left and right to
    switch between their previews. However, how can they attach them in the first
    place? This is where a floating action button is an ideal solution. You''ll see
    floating action buttons everywhere in Android applications. They are usually near
    the bottom-right of the screen, where a right-handed person will have their thumb
    if they hold the phone one-handed, and out of the way of most Western content,
    which will be to the left of the screen (normally):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 用户需要能够做到的唯一一件事是在保存之前将文件附加到费用报销单上。在这个布局的底部应该有一个宽敞的区域，这将是一个预览单个附件的完美区域，如果用户有多个附件，他们可以通过左右滑动来切换预览。然而，他们最初如何附加它们呢？这就是浮动操作按钮成为理想解决方案的地方。你会在Android应用程序的各个地方看到浮动操作按钮。它们通常位于屏幕的右下角，如果一个人用一只手握住手机，那么右手的人会在这里用他们的拇指，而且不会妨碍大多数西方内容，这些内容通常位于屏幕的左侧（通常）：
- en: '![](img/3639b7e8-e1db-47ae-b77e-d3f8d6d9a22f.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3639b7e8-e1db-47ae-b77e-d3f8d6d9a22f.png)'
- en: Floating action buttons are normally the most common *creative* (as opposed
    to navigation or destructive) actions on the screen; for example, creating a new
    email in the Gmail or Inbox app, attaching a file, and so on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动操作按钮通常是屏幕上最常见的一种*创造性*（与导航或破坏性相对）操作；例如，在Gmail或Inbox应用程序中创建新电子邮件、附加文件等等。
- en: 'So now, we have the screen broken down into three logical areas, outside of
    the normal decorations:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在，我们将屏幕分解为三个逻辑区域，除了正常的装饰之外：
- en: Claim details
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报销详情
- en: Categorization
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分类
- en: Attachment
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附件
- en: 'Putting them together into a single screen layout concept gives you a wireframe,
    looking something like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们组合成一个单屏布局概念，这将为你提供一个线框，看起来像这样：
- en: '![](img/8ded7bee-080c-4948-8697-efde533a8904.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8ded7bee-080c-4948-8697-efde533a8904.jpg)'
- en: This exercise of wireframing your screens before you start developing them is
    an extremely valuable phase, because it gives you time and space to think about
    each of the choices you could be making, rather than just grabbing the first available
    widgets in the toolbox and putting them onto the screen. Now that you have a wireframe,
    you're ready to get started with building the user interface for the application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始开发之前先进行屏幕线框设计是一项极其有价值的练习，因为它为你提供了时间和空间来思考你可能会做出的每一个选择，而不是仅仅抓取工具箱中可用的第一个小部件并将其放置在屏幕上。现在你已经有了线框，你就可以开始构建应用程序的用户界面了。
- en: Creating a form layout
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表单布局
- en: Once you have a good wireframe to work from, you'll want to start developing
    the user interface screen. For this, we'll use Android Studio and its wonderful
    layout editor.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有一个好的线框可以从中开始工作，你将想要开始开发用户界面屏幕。为此，我们将使用Android Studio及其出色的布局编辑器。
- en: 'Since this is a brand new project, you''ll need to open Android Studio and
    use File | New | New Project to get it started. Then, follow these steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个全新的项目，你需要打开Android Studio，并使用文件 | 新建 | 新建项目来开始它。然后，按照以下步骤操作：
- en: Name the project `Claim`, and leave any non-Java support turned off.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为`Claim`，并保持任何非Java支持关闭。
- en: Target Android 4.1 on Phone & Tablet only.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅针对手机和平板电脑上的Android 4.1。
- en: 'In the Activity Gallery, choose the Basic Activity:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在活动画廊中，选择基本活动：
- en: '![](img/d0e29400-99c6-4672-af9b-07e1fa947b2c.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d0e29400-99c6-4672-af9b-07e1fa947b2c.png)'
- en: 'Name the new Activity `CaptureClaimActivity`, and then change the title to
    `Capture Claim`. Leave the other parameters at their default values:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的活动命名为`CaptureClaimActivity`，然后将标题更改为`Capture Claim`。保留其他参数的默认值：
- en: '![](img/41766382-ac9d-4d3f-b977-6246b36c08eb.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/41766382-ac9d-4d3f-b977-6246b36c08eb.png)'
- en: Finish the New Project wizard, and wait for the project to be generated.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成新建项目向导，并等待项目生成。
- en: When the project has been generated and synchronized, Android Studio will open
    the `content_capture_claim.xml` file in its layout editor.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目生成并同步后，Android Studio将在其布局编辑器中打开`content_capture_claim.xml`文件。
- en: 'By default, Android Studio assumes that you will be using a `ConstraintLayout`
    as the root of your layout. This is an incredibly powerful and flexible tool,
    but also not well suited as the root element of this user interface. You''ll need
    to switch over to the Text view at the bottom of the screen in order to change
    to something more suitable:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Android Studio假设你将使用`ConstraintLayout`作为布局的根元素。这是一个功能强大且灵活的工具，但并不适合作为这个用户界面的根元素。你需要切换到屏幕底部的文本视图，以便更改到更合适的内容：
- en: '![](img/2abfbd02-580d-491d-8a80-72cd70a30a66.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2abfbd02-580d-491d-8a80-72cd70a30a66.png)'
- en: 'The file will currently have something like the following XML in place:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前文件将包含以下类似的XML内容：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Change the `ConstraintLayout` to a simple `LinearLayout`. `LinearLayout` is
    one of the simplest layouts available on Android. It renders each of its children
    in a straight line, either horizontal or vertical, depending on its orientation
    attribute. Replace the whole of the `content_capture_claim.xml` file with the
    following content:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ConstraintLayout`更改为简单的`LinearLayout`。`LinearLayout`是Android上可用的最简单布局之一。它根据其方向属性，将每个子元素渲染成一条直线，水平或垂直。将整个`content_capture_claim.xml`文件替换为以下内容：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Choosing the right layout to use is about more than just keeping your code simple;
    less flexible layouts are much faster at runtime and lead to a much smoother user
    experience. Try to stick to simpler layouts where possible, but also avoid nesting
    layouts too deep (one inside the other), as this also leads to performance problems.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的布局不仅仅是保持代码简单；更不灵活的布局在运行时速度更快，并且能带来更流畅的用户体验。尽可能使用更简单的布局，但也避免布局嵌套过深（一个嵌套在另一个里面），因为这也会导致性能问题。
- en: Change back to the Design view in the layout editor, and you'll notice that
    the Component Tree to the left of the design view now has a LinearLayout (vertical)
    as its only component.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局编辑器中切换回设计视图，你会注意到设计视图左侧的组件树现在只有一个LinearLayout（垂直）作为其唯一组件。
- en: Creating the description box
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建描述框
- en: 'Now that the base layout is set up, it''s time to start adding the widgets
    to the user interface and make it useful. In this next stage, you''ll be using
    several Material Design widgets that help produce great user interfaces, such
    as **CardView** and the **TextInputLayout** widget. Before Material Design, text
    input boxes were just plain `EditText` widgets, which while still available, are
    now generally discouraged in favor of a `TextInputLayout`. The `TextInputLayout`
    is a specialized layout that contains a single `EditText` widget for the user
    to enter text data. The `TextInputLayout` then also provides the floating hint/label
    effect and animations, transitioning the `EditText` widgets hint to a label space
    just above the input area. This means that even when the user has filled in the
    text, the hint for the `EditText` is still visible above their input:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在基本布局已经设置好了，是时候开始向用户界面添加小部件并使其变得有用。在这个下一阶段，你将使用几个帮助创建优秀用户界面的Material Design小部件，例如**CardView**和**TextInputLayout**小部件。在Material
    Design之前，文本输入框只是普通的`EditText`小部件，虽然仍然可用，但现在通常不推荐使用，而是推荐使用`TextInputLayout`。`TextInputLayout`是一个专门布局，包含一个用于用户输入文本数据的单个`EditText`小部件。`TextInputLayout`还提供了浮动提示/标签效果和动画，将`EditText`小部件的提示过渡到输入区域上方的标签空间。这意味着即使用户已经填写了文本，`EditText`的提示仍然可见：
- en: '![](img/2fcc694c-5e37-49f1-a91f-3f3da355b179.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2fcc694c-5e37-49f1-a91f-3f3da355b179.png)'
- en: 'You''ll be wrapping this first group of widgets in a `CardView`, which will
    serve as a visual grouping for the user. Follow these steps to add the description
    input box:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在这个第一个小部件组周围包裹一个`CardView`，这将为用户提供视觉分组。按照以下步骤添加描述输入框：
- en: Open the AppCompat section of the Widget Palette. This contains widgets that
    come from special APIs that are parts of the extended Android platform. They're
    not included on the platform by default, and instead, are included in each application
    they are used in, a bit like static linking a library.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开小部件调色板的AppCompat部分。这部分包含来自特殊API的小部件，这些API是扩展Android平台的一部分。它们不是默认包含在平台中的，而是包含在每个使用它们的应用程序中，有点像静态链接库。
- en: 'Drag and drop a `CardView` into your user interface design; you can drop it
    anywhere on the design canvas. This will serve as the grouping for the description,
    amount, and date input boxes. Ensure that in the Component Tree, the `CardView`
    appears as a child of the LinearLayout (vertical):'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CardView`拖放到你的用户界面设计中；你可以在设计画布的任何位置放置它。这将作为描述、金额和日期输入框的分组。确保在组件树中，`CardView`显示为`LinearLayout`（垂直）的子项：
- en: '![](img/52c6a273-04a3-481d-88f9-caa6497d07d8.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/52c6a273-04a3-481d-88f9-caa6497d07d8.png)'
- en: A `CardView` stacks its widgets on top of each other in layers (back to front).
    This is not what's needed in this case, so you'll need to open the Layouts section
    of the `Palette` and drag a `ConstraintLayout` into the `CardView` on your design.
    Ensure that in the Component Tree, the `ConstraintLayout` appears as a child of
    the `CardView`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CardView`将小部件堆叠在彼此之上，形成层（从后向前）。这在本例中不是所需的，因此你需要打开“Palette”中的布局部分，并将`ConstraintLayout`拖放到你的设计中的`CardView`上。确保在组件树中，`ConstraintLayout`显示为`CardView`的子项。'
- en: Select the new `ConstraintLayout` in the Component Tree.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件树中选择新的`ConstraintLayout`。
- en: 'In the Attributes panel, select the View all attributes button:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，选择“查看所有属性”按钮：
- en: '![](img/bfface80-8164-44d4-b76c-01a96da322a5.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bfface80-8164-44d4-b76c-01a96da322a5.png)'
- en: Open the section titled Layout_Margin.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开标题为“布局_边距”的部分。
- en: 'Click on the resource editor button for the all line, as shown in the screenshot:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如截图所示，点击全行的资源编辑器按钮：
- en: '![](img/cdca666b-c4b2-4e10-8272-08d482a05a38.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cdca666b-c4b2-4e10-8272-08d482a05a38.png)'
- en: In the resource editor, select the Add new resource button in the top-left,
    and choose New dimen value (dimen is short for dimension. A dimension resource
    can be used to specify sizes in non-pixel units, which are then converted according
    to the actual display system on the user's device).
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源编辑器中，点击左上角的“添加新资源”按钮，然后选择“新建维度值”（dimen是维度的缩写。维度资源可以用来指定非像素单位的大小，这些大小随后会根据用户设备上的实际显示系统进行转换）。
- en: 'Name the resource `grid_spacer1`, and give it a value of `8dp`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将资源命名为`grid_spacer1`，并赋予其值为`8dp`：
- en: '![](img/48dd69c2-c5fa-4abf-89b5-0f4c24b99967.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/48dd69c2-c5fa-4abf-89b5-0f4c24b99967.png)'
- en: Material Design interfaces on Android use a spacing grid in an increment of
    **8dp**, which is *8 density-independent pixels*. This is a special unit of measurement
    that varies the actual number of pixels used based on the density of the screen.
    These are also the most common unit of on-screen measurement in Android. A **1dp**
    measurement will be 1 physical pixel on a 160dpi screen, and scaled to 2 pixels
    on a 320dpi screen. This means that by measuring your layout in terms of density-independent
    pixels rather than physical pixels, your user interface will translate better
    over the range of screen densities it might encounter on various devices.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Android上的Material Design界面使用**8dp**的间距网格，这是**8密度无关像素**。这是一个特殊的测量单位，根据屏幕的密度变化实际使用的像素数。这些也是Android中最常见的屏幕测量单位。**1dp**的测量在160dpi屏幕上将是1个物理像素，并在320dpi屏幕上缩放为2个像素。这意味着通过以密度无关像素而不是物理像素来衡量你的布局，你的用户界面将更好地在各种设备上遇到的不同屏幕密度范围内进行转换。
- en: Click OK to create the dimension resource and go back to the layout editor.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”以创建维度资源并返回布局编辑器。
- en: 'Now, you''ll need to start building up the input boxes for the user to fill
    in. The first of these will be the description box. Open the Design section of
    the Palette, and drag a `TextInputLayout` into the Component Tree as a child of
    the ConstraintLayout:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要开始构建用户填写的输入框。第一个将是描述框。打开“Palette”的“设计”部分，并将`TextInputLayout`拖放到组件树中，作为`ConstraintLayout`的子项：
- en: '![](img/b697692b-30c6-43d2-bf30-173147dcb97e.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b697692b-30c6-43d2-bf30-173147dcb97e.png)'
- en: In the Attributes panel, click on the View fewer attributes button (it's the
    same one as View all attributes).
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，点击“查看较少属性”按钮（它与“查看所有属性”按钮相同）。
- en: At the top of the Attributes panel, set the ID of the `TextInputLayout` to `description_layout`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板的顶部，将`TextInputLayout`的ID设置为`description_layout`。
- en: 'Use the Constraint editor (just below the ID attribute) to create connections
    to the left, and above the `TextInputLayout` by clicking on the blue circles with
    the + signs in them. Then, change the constrained margins to zero on both the
    new constraints, as shown:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用约束编辑器（位于ID属性下方）通过点击带有+号的蓝色圆圈来创建到左侧和`TextInputLayout`上方的连接。然后，将两个新约束的约束边距更改为零，如图所示：
- en: '![](img/b42003e1-9ca1-4c2d-9e13-e891710b0c8e.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b42003e1-9ca1-4c2d-9e13-e891710b0c8e.png)'
- en: 'Your `TextInputLayout`, now named `description_layout`, should have snapped
    to the top-left corner of the layout editor:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的 `TextInputLayout`，现在命名为 `description_layout`，应该已经吸附到布局编辑器的左上角：
- en: '![](img/5f7fcde9-2cba-4c1c-bca4-d08e938a1c01.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5f7fcde9-2cba-4c1c-bca4-d08e938a1c01.png)'
- en: Change the `layout_width` attribute to `match_constraint`, and the `layout_height`
    parameter to `wrap_content`. The `TextInputLayout` will shrink to the minimum
    space it can occupy in the top-left corner.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `layout_width` 属性更改为 `match_constraint`，并将 `layout_height` 参数更改为 `wrap_content`。`TextInputLayout`
    将缩小到它可以在左上角占据的最小空间。
- en: Now, using the Component Tree, select the `TextInputEditText` inside the `description_layout`
    `TextInputLayout`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用组件树，选择 `description_layout` 内的 `TextInputEditText`。
- en: In the Attributes panel, change the ID to `description`, since this is the field
    you actually want to capture the contents of.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将 ID 更改为 `description`，因为这是您实际上想要捕获内容的字段。
- en: 'Change the inputType to textCapWords; this will instruct software keyboards
    to place a capital letter at the beginning of each word:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将输入类型更改为 textCapWords；这将指示软件键盘在每个单词的开头放置一个首字母大写：
- en: '![](img/06e8a6a1-ef8b-4b40-a6a1-ebbe4288c98e.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/06e8a6a1-ef8b-4b40-a6a1-ebbe4288c98e.png)'
- en: 'The hint/label for the description box is currently hint, and it''s hardcoded
    into the layout. We want to change it to `Description`, and make it localizable
    (so that it''s easy to translate the app into new languages). Use the edit button
    to open the string resource editor, and choose Add new resource | New string value:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述框的提示/标签目前是 `hint`，并且硬编码在布局中。我们希望将其更改为 `Description`，并使其可本地化（这样就可以轻松地将应用程序翻译成新语言）。使用编辑按钮打开字符串资源编辑器，并选择添加新资源
    | 新字符串值：
- en: '![](img/765fcd4e-1d1b-472d-8544-6a6d60f16391.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/765fcd4e-1d1b-472d-8544-6a6d60f16391.png)'
- en: Fill in the Resource name as `label_description`. You'll notice that this follows
    another prefix rule, which helps when dealing with large numbers of string resources
    in your source code.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写资源名称为 `label_description`。您会注意到这遵循了另一个前缀规则，这有助于在源代码中处理大量字符串资源时。
- en: 'Fill in the Resource value as `Description`, and leave the remaining fields
    unchanged:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源值中填写 `Description`，并保留其余字段不变：
- en: '![](img/5edd0859-c462-446b-a250-4bbc10ec4700.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5edd0859-c462-446b-a250-4bbc10ec4700.png)'
- en: Click on OK to create the new string resource and go back to the layout editor.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定创建新的字符串资源，并返回布局编辑器。
- en: In this section, you created a grouping component (the `CardView`) that will
    serve to visually group the description amount and date fields for the user, and
    you have populated it with its first component--the description box. You have
    also created a dimension resource that can be reused throughout your application
    to represent a single grid spacing unit, allowing you to adjust the size of the
    grid for the entire application. A consistent grid spacing in the application
    helps define a consistent look and feel for the application, and keeping this
    value as a resource provides you with a single place where you can change it if
    required.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您创建了一个分组组件（`CardView`），它将用于视觉上分组描述金额和日期字段，并为用户服务。您已经填充了它的第一个组件——描述框。您还创建了一个维度资源，可以在整个应用程序中重复使用，以表示单个网格间距单位，允许您调整整个应用程序的网格大小。应用程序中一致的网格间距有助于定义应用程序的一致外观和感觉，并将此值作为资源提供，您可以在需要时更改它的单一位置。
- en: Adding the amount and date inputs
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加金额和日期输入
- en: 'In this next section, we''ll finish building the description box by adding
    the `amount` and `date` fields. This will involve using some more complex constraints
    on the widgets you will be adding, as they will need to be positioned relative
    to each other. Follow these steps to finish the description box:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过添加 `amount` 和 `date` 字段来完成描述框的构建。这将涉及到对您将要添加的小部件使用一些更复杂的约束，因为它们需要相互定位。按照以下步骤完成描述框：
- en: Drag another `TextInputLayout` into your design and place it somewhere below
    the Description field. This new box has no constraints as of yet.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将另一个 `TextInputLayout` 拖入您的布局，并将其放置在描述字段下方。这个新框目前还没有约束。
- en: In the Attributes panel, change the ID to `amount_layout`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将 ID 更改为 `amount_layout`。
- en: In the Attributes panel, open the resource editor for `layout_width` as you
    did to create the `grid_spacer1` resource earlier.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，打开 `layout_width` 的资源编辑器，就像您之前创建 `grid_spacer1` 资源时做的那样。
- en: Create a new resource named `input_size_amount`, and set its value as `100sp`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `input_size_amount` 的新资源，并设置其值为 `100sp`。
- en: Much like dp, **sp** (**scale-independent pixels**) is a relative pixel size,
    but unlike density-independent pixels, scale-independent pixels are scaled according
    to the user's font preferences. Normally, these are used to specify font sizes,
    but they can also be useful when specifying fixed sizes for text input widgets.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于dp，**sp**（**无缩放像素**）是一种相对像素大小，但与密度无关像素不同，无缩放像素会根据用户的字体偏好进行缩放。通常，这些用于指定字体大小，但它们在指定文本输入小部件的固定大小时也很有用。
- en: 'Now, drag the right constraint handle to the right of the layout, and then
    drag the top constraint handle to the top of the layout, as shown:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将右侧约束手柄拖动到布局的右侧，然后将顶部约束手柄拖动到布局的顶部，如图所示：
- en: '![](img/0b522956-ecb0-4123-8174-77323826b485.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0b522956-ecb0-4123-8174-77323826b485.png)'
- en: 'Now, zero the margins using the constraint editor in the Attributes panel:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用属性面板中的约束编辑器将边距设置为0。
- en: '![](img/a1d2c65f-8773-4ac8-a755-603688b52eaa.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a1d2c65f-8773-4ac8-a755-603688b52eaa.png)'
- en: Now, use the Component Tree to select the `description_layout` `TextInputLayout`
    widget.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用组件树选择`description_layout` `TextInputLayout`小部件。
- en: When selecting widgets directly in the design view, the editor will pick the
    deepest child of the Component Tree that you clicked on. This means that if you
    click on the Description field directly, you will select the `TextInputEditText`
    box, instead of the `TextInputLayout`. So, when dealing with the `ConstraintLayout`
    in particular, it's often better to select widgets in the Component Tree to ensure
    that you pick the right one.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当在设计视图中直接选择小部件时，编辑器将选择你点击的组件树中最深的子项。这意味着如果你直接点击描述字段，你将选择`TextInputEditText`框，而不是`TextInputLayout`。因此，在处理`ConstraintLayout`时，通常最好在组件树中选择小部件以确保选择正确。
- en: 'In the layout view, drag the right constraint handle of the description `TextInputLayout`
    to meet up with the left constraint handle of the new `amount_layout` and `TextInputLayout`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局视图中，将描述`TextInputLayout`的右侧约束手柄拖动到与新的`amount_layout`和`TextInputLayout`的左侧约束手柄对齐：
- en: '![](img/fc7e0496-e9d3-41b1-98a3-73816950e775.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fc7e0496-e9d3-41b1-98a3-73816950e775.png)'
- en: Click on the new `TextInputEditText` widget in the Component Tree panel.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件树面板中点击新的`TextInputEditText`小部件。
- en: In the Attributes panel, change the ID to `amount`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将ID更改为`amount`。
- en: Use the attribute editor to change the inputType to number.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用属性编辑器将输入类型更改为数字。
- en: For the hint attribute, open the resource editor to create a new string resource.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于提示属性，打开资源编辑器以创建一个新的字符串资源。
- en: 'Name the resource as `label_amount`, and give it a value `Amount`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将资源命名为`label_amount`，并设置其值为`Amount`：
- en: '![](img/91d98fbc-f87e-4a66-b4d8-cd2f6645cb12.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/91d98fbc-f87e-4a66-b4d8-cd2f6645cb12.png)'
- en: Now, we'll add a label for the `Date` input field; in the Palette panel, open
    the Text section and drag a new `TextView` into the layout editor.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为`Date`输入字段添加一个标签；在调色板面板中，打开文本部分，并将新的`TextView`拖动到布局编辑器中。
- en: Using the constraint editor in the Attributes panel, add a constraint to the
    left and right, and then zero their margins.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用属性面板中的约束编辑器，向左右添加约束，然后将其边距设置为0。
- en: 'Change the `layout_width` to `match_constraint` so that the label takes up
    all the available width:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`layout_width`更改为`match_constraint`，以便标签占据所有可用宽度：
- en: '![](img/29d933d6-422e-4d63-837b-c8b00d2958b2.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/29d933d6-422e-4d63-837b-c8b00d2958b2.png)'
- en: The `match_contstraint` value available to the children of a `ConstraintLayout`
    is a special marker attribute that will cause the widget to fill the space made
    available by its constraints. This is similar to how the `match_parent` value
    will cause a widget to take up all the space made available by its parent.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`match_contstraint`值是`ConstraintLayout`子项可用的特殊标记属性，它将使小部件填充其约束提供的空间。这类似于`match_parent`值将使小部件填充其父项提供的所有空间。'
- en: 'Now, drag a new constraint from the top of the new `TextView` to the bottom
    of the Description `TextInputLayout`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从新的`TextView`的顶部拖动一个新的约束到描述`TextInputLayout`的底部：
- en: '![](img/5fefec3a-0b4f-4d6c-b76e-119fbd898924.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5fefec3a-0b4f-4d6c-b76e-119fbd898924.png)'
- en: Use the resource editor to create a new string resource for the text attribute.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用资源编辑器为文本属性创建一个新的字符串资源。
- en: 'Name the new resource `label_date`, and make its value `Date`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新资源命名为`label_date`，并设置其值为`Date`：
- en: '![](img/47baea99-953b-4f38-9088-d945825a3ec9.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/47baea99-953b-4f38-9088-d945825a3ec9.png)'
- en: Still in the Attributes panel, change the textAppearance attribute to `AppCompat.Caption`.
    This is the same textAppearance style used by `TextInputLayout` for the hovering
    label when the cursor is focused on its `EditText`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在属性面板中，将textAppearance属性更改为`AppCompat.Caption`。这是`TextInputLayout`在光标聚焦于其`EditText`时用于悬停标签的相同textAppearance样式。
- en: Now, use the resource selector on the textColor attribute to choose the colorAccent
    color resource. This is the highlight color that is generated by Android Studio
    for you, and is also used by `TextInputLayout`. Your `TextView` should now look
    like the focused label for a `TextInputLayout`, which is exactly what you want,
    because the next widget should look like an `EditText`, but isn't.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用textColor属性的资源选择器选择colorAccent颜色资源。这是Android Studio为您生成的突出显示颜色，也被`TextInputLayout`使用。您的`TextView`现在应看起来像`TextInputLayout`的聚焦标签，这正是您想要的，因为下一个控件应看起来像`EditText`，但实际上不是。
- en: From the Palette panel, drag another `TextView` into the design layout.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从调色板面板中，将另一个`TextView`拖动到设计布局中。
- en: Use the Attributes panel to change its ID to `date`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用属性面板将其ID更改为`date`。
- en: Create left and right constraints, and set them to zero.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建左右约束，并将它们设置为零。
- en: 'Change the `layout_width` to `match_constraint` so that the `date` `TextView`
    takes up all the horizontal space:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`layout_width`更改为`match_constraint`，以便`date` `TextView`占据所有水平空间：
- en: '![](img/41f53141-e338-4ee3-80ae-7f9e6cccf0e7.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41f53141-e338-4ee3-80ae-7f9e6cccf0e7.png)'
- en: 'Drag the constraint handle from the top of the `date` `TextView` to the bottom
    of its `TextView` label:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`date` `TextView`的顶部约束手柄拖动到其`TextView`标签的底部：
- en: '![](img/6bd09ad8-9b72-4aeb-8ad5-3d5a1c1f9190.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bd09ad8-9b72-4aeb-8ad5-3d5a1c1f9190.png)'
- en: At the top of the Attributes panel, use the View all attributes toggle button
    to view all the available attributes.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板的顶部，使用查看所有属性切换按钮查看所有可用属性。
- en: 'Using the Attributes search box, find the style attribute:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用属性搜索框查找样式属性：
- en: '![](img/495ef0a5-3527-4d67-81d2-e69da59b75d4.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/495ef0a5-3527-4d67-81d2-e69da59b75d4.png)'
- en: Open the resource selector for the style attribute.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开样式属性的资源选择器。
- en: 'Using the search box, find the `AppCompat.EditText` style:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用搜索框查找`AppCompat.EditText`样式：
- en: '![](img/b346e2f1-42eb-49b8-92e1-3d3267d1d4f1.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b346e2f1-42eb-49b8-92e1-3d3267d1d4f1.png)'
- en: Clear the search box, and toggle back to the View fewer attributes panel.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除搜索框，并切换回查看较少属性的面板。
- en: Clear the text attribute by deleting its content (this `TextView` should be
    empty in the layout file).
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除文本属性的内容（此`TextView`应在布局文件中为空）。
- en: In the Component Tree, select the `CardView`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件树中选择`CardView`。
- en: In the Attributes panel, change its `layout_height` to `wrap_content`. The `CardView`
    will roll upward, taking up just enough space to contain the widgets that now
    make up the description, amount, and date inputs.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将其`layout_height`更改为`wrap_content`。`CardView`将向上滚动，仅占用足够的空间来容纳现在构成描述、金额和日期输入的控件。
- en: Unlike the description and amount input boxes, the date is actually made up
    of two labels that are styled so that together, they look like a focused `TextInputLayout`
    widget. This is important because the user will populate the date using a calendar
    dialog, rather than typing the date using a keyboard. A calendar dialog is more
    user-friendly, and less error-prone than manual date entry. Also, like this, the
    component looks familiar to the user, giving them a suggestion of how it should
    be used. This sort of styling capability is very important and useful in Android,
    and it's worth learning how standard components are composed together and styled
    so that you can build these sort of emulations.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 与描述和金额输入框不同，日期实际上由两个样式化的标签组成，它们组合在一起看起来像聚焦的`TextInputLayout`小部件。这很重要，因为用户将通过日历对话框来填充日期，而不是使用键盘输入日期。日历对话框比手动输入日期更用户友好，且错误率更低。此外，这样用户会感到熟悉，这为他们提供了如何使用的建议。这种样式能力在Android中非常重要且实用，值得学习标准组件是如何组合在一起以及如何样式的，以便您可以构建这类仿真。
- en: 'Your completed Description, Amount, and Date, so the capture box should look
    like this in the Android Studio layout editor:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您完成描述、金额和日期后，在Android Studio布局编辑器中捕获框应如下所示：
- en: '![](img/85409db6-d79f-4935-9875-b89dc5cc2422.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85409db6-d79f-4935-9875-b89dc5cc2422.png)'
- en: Creating the category chooser
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建类别选择器
- en: 'The category chooser is where the user will select how to file their expense
    claims. There''ll be a fairly small number of these, and they will be represented
    by icons in the user interface. Fortunately for Android developers, Material specifies
    a huge range of standard icons, and Android Studio has features to import them
    as bitmap or vector graphics files. When deciding whether to use bitmap images
    or SVGs, it''s important to consider the trade-off between these two formats,
    specifically in relation to Android. Especially so since in Android, multiple
    copies of a bitmap are often provided for different screen sizes and densities,
    leading to much higher-quality scaling (as most will only ever be scaled down
    slightly). Here''s a quick table to compare them:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 类别选择器是用户选择如何提交他们的费用报销的地方。这些将相对较少，并且它们将在用户界面中以图标的形式表示。幸运的是，对于 Android 开发者来说，Material
    指定了一系列标准图标，并且 Android Studio 有导入它们作为位图或矢量图形文件的功能。在决定是否使用位图图像或 SVG 时，考虑这两种格式之间的权衡，特别是与
    Android 相关的权衡非常重要。特别是在 Android 中，通常为不同的屏幕尺寸和密度提供多个位图副本，这导致高质量的缩放（因为大多数情况下只会稍微缩小）。以下是一个快速表格来比较它们：
- en: '| **Bitmaps** | **Vector Graphics** |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| **位图** | **矢量图形** |'
- en: '| Are supported on all platforms natively | May require a support library to
    work |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 在所有平台上原生支持 | 可能需要支持库才能工作 |'
- en: '| Can be handled by the GPU and rendered with full acceleration | Must be rendered
    into a bitmap before they can be rendered onto the screen, which takes time |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 可以由 GPU 处理并以全速渲染 | 必须在屏幕上渲染之前将它们渲染成位图，这需要时间 |'
- en: '| Take up more space in your app''s APK, especially as you may need to provide
    different copies for different screen sizes and densities | Are stored as binary
    XML files, and take up very little space in the APK |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 在你的应用 APK 中占用更多空间，特别是你可能需要为不同屏幕尺寸和密度提供不同的副本 | 作为二进制 XML 文件存储，在 APK 中占用的空间非常小
    |'
- en: '| Suffer massive loss of quality when scaled up, and loss of detail when scaled
    down | Can be rendered at virtually any size with no perceptible loss of quality
    or detail |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 放大时质量严重下降，缩小时细节丢失 | 可以以几乎任何大小渲染，而不会出现质量或细节的明显损失 |'
- en: 'For the category chooser widget, you''ll be importing vector graphics icons
    and using them as radio buttons. Let''s get things started:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于类别选择器小部件，你将导入矢量图形图标并将它们用作单选按钮。让我们开始吧：
- en: 'In the files view to the extreme left of Android Studio, right-click on the
    res directory and select New, Vector Asset to open the vector import tool:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android Studio 最左侧的文件视图中，右键单击 res 目录并选择新建，矢量资源以打开矢量导入工具：
- en: '![](img/631d4086-a4f6-453f-9ad4-5e74811d1ffc.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/631d4086-a4f6-453f-9ad4-5e74811d1ffc.png)'
- en: Where it says Icon, click on the button with the Android robot.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“图标”处，点击带有 Android 机器人的按钮。
- en: Use the search box at the top-left of the dialog to find the "hotel" icon, and
    select it.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用对话框左上角的搜索框查找“酒店”图标，并选择它。
- en: Click on OK to return to the import tool.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”返回导入工具。
- en: 'The import tool will have changed the proposed name to `ic_hotel_black_24dp`;
    change this to `ic_accommodation_black`:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入工具将建议的名称更改为 `ic_hotel_black_24dp`；将其更改为 `ic_accommodation_black`：
- en: '![](img/3f4c1482-edc2-4fe5-90c3-696e59780450.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f4c1482-edc2-4fe5-90c3-696e59780450.png)'
- en: In the Size boxes, select the Override checkbox and change the size to `32`
    dp X `32` dp.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“大小”框中，选择“覆盖”复选框并将大小更改为 `32` dp X `32` dp。
- en: Click on Next and then on Finish to complete the import.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”然后点击“完成”以完成导入。
- en: Repeat this process, and find the room service icon. Name this one `ic_food_black`,
    and don't forget to change its size to `32` dp X `32` dp.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此过程，找到客房服务图标。将其命名为 `ic_food_black`，并不要忘记将其大小更改为 `32` dp X `32` dp。
- en: Repeat this for the airport shuttle icon. This is `ic_transport_black`, and
    again, change its size to `32` dp X `32` dp.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此过程，找到机场穿梭图标。这个是 `ic_transport_black`，再次，将其大小更改为 `32` dp X `32` dp。
- en: Repeat and find the local movies icon; name this `ic_entertainment_black` and
    remember to change its size to `32` dp X `32` dp.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复并找到本地电影图标；将其命名为 `ic_entertainment_black` 并记得将其大小更改为 `32` dp X `32` dp。
- en: Find the "business center" icon and name it `ic_business_black`; again, change
    its size to `32` dp X `32` dp.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到“商务中心”图标并将其命名为 `ic_business_black`；再次，将其大小更改为 `32` dp X `32` dp。
- en: Finally, find the all inclusive icon, name it `ic_other_black`, and override
    its size to `32` dp X `32` dp.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，找到包含式服务图标，将其命名为 `ic_other_black`，并覆盖其大小为 `32` dp X `32` dp。
- en: Now you have a collection of black icons that will serve as the basis for your
    category selector.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有一系列黑色图标，它们将成为你类别选择器的基础。
- en: Making icons change with state
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使图标随状态变化
- en: 'In Android, images have state; they can change how they look according to the
    widget that is using them. In fact, this is how a button works; it has a background
    image that changes state depending on whether it''s pressed, released, enabled,
    disabled, focused, and so on. For us to show the user which of these categories
    they have actually selected, we need to provide them with a visual indication
    on the icon. This involves some editing:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中，图像具有状态；它们可以根据使用它们的部件如何改变外观。实际上，这就是按钮的工作原理；它有一个背景图像，其状态会根据是否被按下、释放、启用、禁用、聚焦等而改变。为了向用户显示他们实际选择了哪个类别，我们需要在图标上提供视觉指示。这需要一些编辑：
- en: Start by making a copy of the `ic_accommodation_black.xml` file that was generated,
    and name this one `ic_accommodation_white.xml`. Use copy, and then paste the file
    into the same directory to have Android Studio bring up a Copy dialog.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，复制生成的 `ic_accommodation_black.xml` 文件，并将这个文件命名为 `ic_accommodation_white.xml`。使用复制，然后将文件粘贴到同一目录中，以便
    Android Studio 弹出复制对话框。
- en: Vector graphics in Android are XML files representing the various shapes and
    colors that make up the graphic. A vector graphic doesn't contain the pixel data
    like a bitmap image (such as a `.png` or `.jpeg`), but contains instructions for
    how to render the image. This means that by adjusting the coordinates contained
    within the instructions, the image can be made larger or smaller with little or
    no loss of quality.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Android 中的矢量图形是 XML 文件，代表组成图形的各种形状和颜色。矢量图形不包含像素数据，如位图图像（例如 `.png` 或 `.jpeg`），而是包含如何渲染图像的指令。这意味着通过调整指令中包含的坐标，图像可以以几乎不损失质量的方式放大或缩小。
- en: '**Beware**, because by default, Android Studio might have selected the drawable-xhdpi
    directory as the target for the paste operation. If it has, you''ll need to change
    this to `drawable`:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**注意**，因为默认情况下，Android Studio 可能已将 drawable-xhdpi 目录选为粘贴操作的目标。如果是这样，您需要将其更改为
    `drawable`：'
- en: '![](img/f800a39c-18a1-4356-a9e3-4ffb49e6f7fa.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f800a39c-18a1-4356-a9e3-4ffb49e6f7fa.png)'
- en: 'The editor will open with the new copy of the icon, which will still be black.
    The code for the file will look something like this:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑器将以新的图标副本打开，它仍然是黑色的。文件的代码看起来可能像这样：
- en: '[PRE2]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Change the `android:fillColor` attribute from `#FF000000` to `#FFFFFFFF` to
    change the icon from black to white.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `android:fillColor` 属性从 `#FF000000` 更改为 `#FFFFFFFF` 以将图标从黑色更改为白色。
- en: Colors in Android resources are specified using the standard Hexadecimal color
    notation. This is the same notation used on the web in CSS and HTML files. Each
    pair of two characters represents one part of the color component with values
    from 0 to 255 (inclusive). The components are always Alpha, Red, Green, and Blue,
    in that order. Alpha represents how transparent or opaque the color is, zero (00)
    being completely invisible, while 255 (FF) is completely opaque.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 资源中，颜色使用标准的十六进制颜色表示法指定。这与在 CSS 和 HTML 文件中在网页上使用的表示法相同。每一对两个字符代表颜色组件的一部分，其值从
    0 到 255（包含）。组件的顺序始终是 Alpha、红色、绿色和蓝色。Alpha 表示颜色的透明度或不透明度，零（00）是完全不可见，而 255（FF）是完全不透明。
- en: Now, repeat this operation for all the other icons you imported, ensuring that
    each one is copied to the drawable directory, and change its name from `_black`
    to `_white`.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为导入的所有其他图标重复此操作，确保每个图标都复制到 drawable 目录，并将其名称从 `_black` 更改为 `_white`。
- en: You now have a black and white version of each icon; black is perfect to place
    against the white background of a `CardView`, while white is perfect to place
    against the accent color of your application, and shows how the icon has been
    selected by the user. For this, we need even more drawable resources. Right-click
    on the drawable directory and choose New| Drawable resource file.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在有了每个图标的黑白版本；黑色非常适合放置在 `CardView` 的白色背景上，而白色非常适合放置在您应用程序的强调色上，并显示图标是如何被用户选择的。为此，我们需要更多的
    drawable 资源。在 drawable 目录上右键单击并选择“新建| Drawable 资源文件”。
- en: Name this new file `ic_category_accommodation` and click on OK.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个新文件命名为 `ic_category_accommodation` 并点击确定。
- en: 'Android Studio will now open the new file, which will be an empty selector
    file:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android Studio 将现在打开新文件，它将是一个空的选择器文件：
- en: '[PRE3]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A selector element corresponds to a `StateListDrawable` object from the `android.graphics.drawable`
    package. This class attempts to match its own state flags against a list of possible
    visual states (other `drawable` objects). The first item that matches is displayed,
    which means that it's important to consider the order you declare the states in.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器元素对应于 `android.graphics.drawable` 包中的 `StateListDrawable` 对象。此类尝试将其自己的状态标志与可能的可视状态列表（其他
    `drawable` 对象）进行匹配。第一个匹配的项将被显示，这意味着考虑你声明的状态的顺序是很重要的。
- en: 'First, tell the selector that it will always be the same size by setting its
    `constantSize` attribute, and then tell it that it should quickly animate between
    its state changes. This short animation gives the user an indication of these
    changes when choosing a category:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，告诉选择器它将始终保持相同的大小，通过设置其 `constantSize` 属性，然后告诉它应该快速在状态变化之间进行动画。这种简短的动画在用户选择分类时提供了对这些变化的指示：
- en: '[PRE4]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'First, you''ll need to create a state for when the category is selected; you''ll
    use two layers: one will be a simple circle background filled with the accent
    color, and over that you''ll have the white version of the accommodation icon:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个当分类被选中时的状态；你将使用两层：一层将是一个简单的填充强调色的圆形背景，在其上方将是你之前提到的白色住宿图标：
- en: '[PRE5]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, create another `item` that is the default state--the black-filled accommodation
    icon:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建另一个默认状态的 `item`——黑色填充的住宿图标：
- en: '[PRE6]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Repeat this process for each icon you imported so that each one has a stateful,
    drawable icon that you can use in the layout file.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对你导入的每个图标重复此过程，以确保每个图标都有一个状态化的、可绘制的图标，你可以在布局文件中使用。
- en: This process is often repeated, and there may even be more drawable resources
    involved for more varied state lists. Drawable elements are not always nested,
    as you did with the preceding `state_checked` item; they are often written into
    external drawable resources and then imported. This allows them to be reused without
    requiring the resource to be state-aware.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程通常会被重复，甚至可能涉及更多可绘制资源，以实现更多样化的状态列表。可绘制元素不总是嵌套的，就像你在前面的 `state_checked` 项中所做的那样；它们通常写入外部可绘制资源，然后导入。这允许它们在不要求资源具有状态感知的情况下被重用。
- en: Creating the category picker layout
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建分类选择器布局
- en: 'Now, it''s time to go back to the layout editor and start creating the category
    selector box with these icons:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候回到布局编辑器，并开始使用这些图标创建分类选择框：
- en: Reopen the `content_capture_claim.xml` layout file from the `res/layout` directory.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开 `res/layout` 目录中的 `content_capture_claim.xml` 布局文件。
- en: In the Palette panel, open the AppCompat section and drag another `CardView`
    into the layout editor. Drop it below the `CardView` for the description, amount,
    and date input fields.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调色板面板中，打开 AppCompat 部分，并将另一个 `CardView` 拖入布局编辑器。将其放在描述、金额和日期输入字段的 `CardView`
    下方。
- en: In the Attributes panel, use the View all attributes toggle button and search
    box to find the layout margin.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，使用查看所有属性切换按钮和搜索框来查找布局边距。
- en: Open the Layout_Margins attribute group.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Layout_Margins 属性组。
- en: Then, open the resource selector for the top attribute.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开顶部属性的资源选择器。
- en: 'Select the `grid_spacer1` dimension resource you created earlier, and click
    on OK to close the resource selector:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你之前创建的 `grid_spacer1` 尺寸资源，然后点击确定以关闭资源选择器：
- en: '![](img/fb994880-a20d-4800-8d29-987d2f3e5ebf.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fb994880-a20d-4800-8d29-987d2f3e5ebf.png)'
- en: Then, in the Palette, open the Layouts section and drag a LinearLayout (vertical)
    into the new `CardView`.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在调色板中打开布局部分，并将一个垂直的 `LinearLayout` 拖入新的 `CardView`。
- en: In the Attributes panel, use the resource selector to change the all margin
    attribute to `grid_spacer1` to create some padding from the edges of the `CardView`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，使用资源选择器将所有边距属性更改为 `grid_spacer1` 以在 `CardView` 的边缘创建一些填充。
- en: Clear the Attributes panel search box.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除属性面板的搜索框。
- en: Open the Containers section of the Palette, and drag a `RadioGroup` into the
    new `LinearLayout` in the layout editor. A `RadioGroup` is a specialized `LinearLayout`
    that handles the toggling of its child `RadioButton` widgets, which you'll use
    to allow the user to select a category.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开调色板的容器部分，并将 `RadioGroup` 拖入布局编辑器中的新 `LinearLayout`。`RadioGroup` 是一个专门处理其子
    `RadioButton` 小部件切换的 `LinearLayout`，你将使用它来允许用户选择一个分类。
- en: In the Attributes panel, change the id attribute to `categories`.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将 id 属性更改为 `categories`。
- en: In the Attributes panel, use the search box to find the orientation attribute
    and change it to `horizontal`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，使用搜索框查找方向属性并将其更改为 `horizontal`。
- en: Clear the Attributes panel search box, and toggle it back to View fewer attributes.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除属性面板的搜索框，并将其切换回查看较少属性。
- en: Open the Widgets section of the Palette and drag a `RadioButton` into the new
    `RadioGroup`.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开调色板的Widgets部分，并将`RadioButton`拖放到新的`RadioGroup`中。
- en: In the Attributes panel, change the ID to `accommodation`.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将ID更改为`accommodation`。
- en: Clear the layout_weight attribute.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除`layout_weight`属性。
- en: 'Use the resource editor for the button attribute to select the `ic_category_accommodation`
    you created earlier:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用按钮属性的资源编辑器选择你之前创建的`ic_category_accommodation`：
- en: '![](img/15e865bd-2b6f-40c0-8568-3bb3d6e2e4b0.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/15e865bd-2b6f-40c0-8568-3bb3d6e2e4b0.png)'
- en: Clear the text attribute, since these radio buttons won't have any labels.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除文本属性，因为这些单选按钮将没有标签。
- en: You'll then use the contentDescription attribute to store the human readable
    name of the category. Open the resource editor, create a new string resource named
    `description_accommodation`, and give it a value of `Accommodation`.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你将使用`contentDescription`属性来存储类别的可读名称。打开资源编辑器，创建一个名为`description_accommodation`的新字符串资源，并给它赋值为`Accommodation`。
- en: The `contentDescription` attribute is part of the accessibility system, and
    it's used by screen readers and similar aids to describe a component that might
    not have a text label. In this case, it's a perfect place for us to grab the human-readable
    description of a category. It's not an on-screen space, and it also serves users
    with accessibility enabled.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentDescription`属性是可访问性系统的一部分，它被屏幕阅读器和类似辅助工具用来描述可能没有文本标签的组件。在这种情况下，它是一个获取类别可读描述的完美位置。它不是一个屏幕上的空间，同时也服务于启用了可访问性的用户。'
- en: Toggle the Attributes panel to view all the attributes, and then find the layout
    margins.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到属性面板以查看所有属性，然后找到布局边距。
- en: Use the resource selector to change the end margin attribute to `grid_spacer1`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用资源选择器将结束边距属性更改为`grid_spacer1`。
- en: Repeat the process of adding and populating radio buttons for the categories,
    giving each of them a suitable name in their ID and contentDescription attributes.
    Leave the “other” category until last so that it appears to the right of all the
    others.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复添加和填充单选按钮的过程，为每个类别在ID和contentDescription属性中赋予合适的名称。将“其他”类别放在最后，以便它出现在所有其他类别右侧。
- en: In the Component Tree panel, select the RadioGroup.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件树面板中，选择RadioGroup。
- en: In the Attributes panel, change its layout_height to `wrap_content`.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将其`layout_height`更改为`wrap_content`。
- en: From the Palette, open the Text section and drag a `TextView` into place below
    the `RadioGroup`.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从调色板中打开文本部分，并将`TextView`拖放到`RadioGroup`下方。
- en: In the Attributes panel, change the ID to `selected_category`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将ID更改为`selected_category`。
- en: Clear the text attribute.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除文本属性。
- en: Use the drop-down on the textAppearance attribute to select `AppCompat.Medium`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本外观属性的下拉菜单选择`AppCompat.Medium`。
- en: In the Component Tree, select the `CardView` containing the category selection
    components.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件树中，选择包含类别选择组件的`CardView`。
- en: Now in the Attributes panel, change the layout_height to `wrap_content`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在属性面板中，将`layout_height`更改为`wrap_content`。
- en: 'The `CardView` will wrap upward, packing in the radio buttons and the label
    that you will use to display the currently selected category name. The `CardView`,
    again, serves to visually group the categories, and helps the user understand
    how they use this area of the screen:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardView`将向上包裹，包括你将用于显示当前选中类别名称的单选按钮和标签。`CardView`再次用于视觉上分组类别，并帮助用户理解他们如何使用屏幕的这一区域：'
- en: '![](img/1f41b0d7-414d-429c-a551-8cae187805df.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1f41b0d7-414d-429c-a551-8cae187805df.png)'
- en: The use of standard styles and theming, again, helps the user to quickly grasp
    how things work; even though the categories are just a row of icons, they are
    underscored by the selected category name.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用标准样式和主题，有助于用户快速理解事物的工作方式；尽管类别只是一行图标，但它们下面有选中类别名称的下划线。
- en: Adding the attachment preview
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加附件预览
- en: After completing the category selector box, roughly half the available layout
    space should be left empty underneath. This is where the user will be able to
    preview the attachments they have added to the claim. We want the user to be able
    to swipe through these attachments left and right, and the easiest way to allow
    this is a `ViewPager`. A `ViewPager` is a special type of Android widget that
    links to an `Adapter` (other examples are `ListView`, `Spinner`, and `RecylerView`).
    An `Adapter` object turns data (such as rows from a database cursor, or objects
    from a `java.util.List`) into widgets that can be displayed on the screen.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成类别选择框后，大约一半的可用布局空间应该在下方留空。这就是用户将能够预览他们添加到索赔中的附件的地方。我们希望用户能够左右滑动这些附件，而允许这样做最简单的方法是一个
    `ViewPager`。`ViewPager` 是一种特殊的 Android 小部件，它链接到一个 `Adapter`（其他示例包括 `ListView`、`Spinner`
    和 `RecyclerView`）。`Adapter` 对象将数据（例如数据库游标中的行或 `java.util.List` 中的对象）转换为可以在屏幕上显示的小部件。
- en: 'Follow these steps to add it to the layout:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将其添加到布局中：
- en: The `ViewPager` class is not available from the Palette panel, so at the bottom
    of the layout editor, change from Design mode to Text mode, so that you can edit
    the layout XML directly.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ViewPager` 类在调色板面板中不可用，因此请在布局编辑器的底部从设计模式切换到文本模式，以便您可以直接编辑布局 XML。'
- en: Go to the bottom of the file and find the space between where the last `CardView`
    element is closed and where the `LinearLayout` is closed.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件底部找到最后一个 `CardView` 元素关闭处和 `LinearLayout` 关闭处之间的空间。
- en: 'Insert a `ViewPager` element into that space:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该空间中插入一个 `ViewPager` 元素：
- en: '[PRE7]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Change back to the Design view, and you'll note that a new box has been added
    to the layout and blueprints where the empty space was.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回设计视图，你会注意到在布局和蓝图中的空白区域已经添加了一个新的框。
- en: The `clipChildren` and `clipToPadding` attributes in the preceding code change
    how the `ViewPager` and its children treat the space around them when rendering.
    The `CardView` class draws its shadows outside of its boundaries, and by default,
    these are clipped by the graphics system. Turning the clipping off allows the
    shadows and borders to be rendered completely.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`clipChildren` 和 `clipToPadding` 属性改变了 `ViewPager` 及其子小部件在渲染时对待周围空间的方式。`CardView`
    类在其边界之外绘制阴影，默认情况下，这些阴影被图形系统裁剪。关闭裁剪允许阴影和边框完全渲染。
- en: A `ViewPager` doesn't look like anything on its own; its children are the only
    things that make it appear visually. So, until the user has added an attachment
    to a claim, nothing will appear in this space. This is not a problem, since the
    empty area provides a space for the software keyboard to appear when they enter
    the description and amount.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewPager` 本身看起来什么都没有；它的子小部件是使其具有视觉外观的唯一东西。因此，直到用户将附件添加到索赔中，这个空间中不会出现任何东西。这不是问题，因为空白区域为软件键盘在输入描述和金额时出现提供了空间。'
- en: Try it yourself
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 试试看
- en: Using the knowledge you have gained in this chapter, import the attachment icon
    as a vector graphic, change its fill color to white, and set it as the icon of
    the floating action button that appears at the bottom-right of your layout. Once
    you have the icon right, try increasing the size of the floating action button
    to make it more thumb-friendly for your users.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您在本章中获得的知识，将附件图标作为矢量图形导入，将其填充颜色更改为白色，并将其设置为出现在布局底部右边的浮动操作按钮的图标。一旦图标设置正确，尝试增加浮动操作按钮的大小，使其对用户更友好。
- en: Test your knowledge
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: When designing a form screen, what is the first thing you should consider?
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计表单屏幕时，你应该首先考虑什么？
- en: The colors and icons you want to use
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想要使用的颜色和图标
- en: The data you need from your user
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要从用户那里获取的数据
- en: The standard guidelines for Android
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 的标准指南
- en: What is the standard spacing increment in Material design?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 材料设计中的标准间距增量是多少？
- en: 8 Pixels
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8 像素
- en: 8 Density Independent Pixels
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8 密度无关像素
- en: 8 Device Pixels
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8 设备像素
- en: The `ConstraintLayout`, `ViewPager`, and `CardView` are part of the support
    APIs. What does this mean?
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ConstraintLayout`、`ViewPager` 和 `CardView` 是支持 API 的一部分。这意味着什么？'
- en: Their bytecode must be included with your application if you use them
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用它们，它们的字节码必须包含在您的应用程序中
- en: They are also used as part of the Android Studio code base
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们也被用作 Android Studio 代码库的一部分
- en: They can only contain other widgets from the support APIs
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们只能包含来自支持 API 的其他小部件
- en: When building a new layout, your root widget should always be which of these?
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建新布局时，你的根小部件应该是以下哪一个？
- en: A `ConstraintLayout`
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `ConstraintLayout`
- en: A `LinearLayout`
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `LinearLayout`
- en: The simplest widget that makes sense for your layout
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于你的布局来说，最简单的有意义的部件
- en: Summary
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at how to design and then build a form screen in
    detail. These screens are an important part of applications, because they are
    where you users give you their details and as such they need to be especially
    intuitive and quick to use. Nobody likes to spend a lot of time filling in forms,
    and even less if they are using a mobile device. It's always good to remember
    that people normally use apps for relatively short periods of time; "what was
    that email?", is a more common action than "let me draft a letter to someone."
    This viewpoint helps when it comes to designing the user interfaces and overall
    experience you will build for your users.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细探讨了如何设计和构建表单屏幕。这些屏幕是应用程序的重要组成部分，因为它们是用户向你提供详细信息的地方，因此它们需要特别直观且易于使用。没有人喜欢花很多时间填写表格，尤其是当他们使用移动设备时。始终记住，人们通常使用应用程序的时间相对较短；“那封邮件是什么？”比“让我给某人写封信”更常见。这种观点有助于设计你将为用户构建的用户界面和整体体验。
- en: 'It''s always a good idea to sketch out your screen somewhere visually, and
    if you do, use software for it: ensure that it''s something that lets you focus
    on layout and content rather than having to worry about colors, templates, or
    layout systems; always design first and then figure out how you''ll build it.
    Pay attention to apps you enjoy using and that you find useful, look at how they
    do things--imitation is the sincerest form of flattery. Don''t copy people too
    closely, but draw inspiration from good ideas; your users will thank you for it
    as well, because you''ll be presenting them with something familiar, and hopefully
    more innovative at the same time.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 总是在某个视觉上绘制你的屏幕是个好主意，如果你这样做，请使用软件：确保它是一种让你能专注于布局和内容，而不是必须担心颜色、模板或布局系统的工具；总是先设计，然后再考虑如何构建它。注意那些你喜欢的并且觉得有用的应用程序，看看它们是如何做事的——模仿是最真诚的赞美形式。不要过于紧密地模仿他人，但要从好的想法中汲取灵感；你的用户也会为此感谢你，因为你会向他们展示一些熟悉的东西，同时希望也能更加创新。
- en: Try to keep all text, colors, and dimensions as resources, and use generic names
    for these resources wherever possible. It's not uncommon to have an *ok* and *cancel*
    resource defined right under the application's name, because they are commonly
    used throughout applications. Keeping these values in the resource system allows
    for changes to be made far more easily, and keeps the application look and experience
    consistent for your users.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量将所有文本、颜色和尺寸作为资源，并在可能的情况下使用通用名称来命名这些资源。在应用程序名称下方直接定义一个“确定”和“取消”资源是很常见的，因为它们在应用程序中通常会被广泛使用。将这些值保留在资源系统中，可以更容易地进行更改，并保持应用程序的外观和用户体验对用户来说是一致的。
- en: In the next chapter, we'll look at events, the Android event model, and how
    to best deal with events from your user interfaces in a way that provides the
    best user experience, while also being the more flexible to program with.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨事件、Android事件模型以及如何以最佳方式处理来自用户界面的事件，从而提供最佳的用户体验，同时使编程更加灵活。
