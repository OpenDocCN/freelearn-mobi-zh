- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Building a Release Copy of Our Game
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们游戏的发布副本
- en: Building a release copy of our game is a crucial step in the process of submitting
    our game to the app stores. This step involves creating a version of our game
    that is stable and ready for us to release to the public.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 构建我们游戏的发布副本是提交我们的游戏到应用商店过程中的关键步骤。这一步骤涉及创建一个稳定且准备向公众发布的游戏版本。
- en: 'In this chapter, we will walk you through the steps required to build a release
    copy of your game for both iOS and Android devices. We will cover some extra steps
    that need to be taken in order in order for our project to work. We will also
    provide tips and best practices to ensure that your release copy is of the highest
    quality and free from bugs and other issues. So, let’s dive in and get started
    on creating a release copy of your game. This chapter will be split into a number
    of topics. It will contain a simple step-by-step process from beginning to end.
    Here is the outline of our tasks:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将指导你完成为 iOS 和 Android 设备构建游戏发布副本所需的步骤。我们将涵盖一些必须按顺序执行的额外步骤，以确保我们的项目能够正常工作。我们还将提供一些技巧和最佳实践，以确保你的发布副本质量最高，且无错误和其他问题。因此，让我们开始创建游戏发布副本。本章将分为多个主题。它将包含从开始到结束的简单分步过程。以下是我们的任务大纲：
- en: Generating release builds for app stores
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用商店生成发布版本
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the **Unity Editor system requirements** section. To deploy your project, you
    will need an Android or iOS device.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用 Unity 2022.1.0b16 和 Unity Hub 3.3.1，但步骤应该在未来版本的编辑器中只需进行最小改动即可工作。如果你想要下载本书中使用的确切版本，并且有新版本发布，你可以访问
    Unity 的下载存档 [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive)。你还可以在**Unity
    编辑器系统要求**部分找到 Unity 的系统要求 [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)。为了部署你的项目，你需要一个
    Android 或 iOS 设备。
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter13%20and%2014](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter13%20and%2014).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章中存在的代码文件，链接为 [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter13%20and%2014](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter13%20and%2014)。
- en: Generating release builds for app stores
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为应用商店生成发布版本
- en: 'We exported copies of our game previously in [*Chapter 2*](B18868_02.xhtml#_idTextAnchor087),
    *Project Setup for Android and iOS Development*, but there are some additional
    steps that we should do before actually releasing the game on an app store:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第 2 章*](B18868_02.xhtml#_idTextAnchor087)，“Android 和 iOS 开发项目设置”中之前导出了我们游戏的副本，但发布游戏到应用商店之前，我们还需要执行一些额外的步骤：
- en: The first step will be to confirm you are currently ready to deploy your project
    to the mobile platform of choice. You can check this by going into the **Build
    Settings** menu by navigating to **File** | **Build Settings**.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步将是确认你目前是否已经准备好将你的项目部署到所选的移动平台。你可以通过导航到**文件** | **构建设置**来进入**构建设置**菜单进行检查。
- en: 'From there, you should see the Unity logo to the right of the **Android** or
    **iOS** selection depending on the platform you wish to build for. If it is not
    at the correct platform, select that platform you wish to build to and then click
    the **Switch Platform** button and wait for it to finish reimporting the assets
    for the project:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，你应该能看到根据你希望构建的平台，在**Android**或**iOS**选择项右侧的 Unity 标志。如果它不在正确的平台上，请选择你想要构建的平台，然后点击**切换平台**按钮，等待它完成项目资源的重新导入：
- en: "![Figure 13.1 – The Build Settings menu\uFEFF](img/B18868_13_01.jpg)"
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1 – 构建设置菜单](img/B18868_13_01.jpg)'
- en: Figure 13.1 – The Build Settings menu
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 构建设置菜单
- en: After confirming whether we are building for **Android** or **iOS**, open up
    the **Player** settings menu by clicking on the **Player Settings...** button
    from the menu or by going to **Edit** | **Project Settings** | **Player**.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认我们是为 **Android** 或 **iOS** 构建后，通过点击菜单中的 **Player Settings...** 按钮，或通过转到 **编辑**
    | **项目设置** | **Player** 来打开 **Player** 设置菜单。
- en: If you haven’t done so already, set the `JohnPDoran` and `Endless` `Roller`,
    respectively.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请分别设置 `JohnPDoran` 和 `Endless` `Roller`。
- en: 'You’ll then see a `Hi-ResIcon` image from the `Assets` folder and then drag
    and drop it into the **Default Icon** slot. This will cause the **Icon** section
    of the Android settings to automatically scale the image to fit whatever device
    you are targeting:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你将看到来自 `Assets` 文件夹的 `Hi-ResIcon` 图像，然后将其拖放到 **默认图标** 槽中。这将导致 Android 设置中的
    **图标** 部分自动调整图像以适应你正在针对的任何设备：
- en: '![Figure 13.2 – Setting the Default Icon image](img/B18868_13_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2 – 设置默认图标图像](img/B18868_13_02.jpg)'
- en: Figure 13.2 – Setting the Default Icon image
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – 设置默认图标图像
- en: Of course, you can also use your own image, and you can use transparency if
    you would like to.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以使用你自己的图像，并且如果你愿意，可以使用透明度。
- en: Under the **Resolution and Presentation** section, you can enable or disable
    different rotations and aspect ratios as desired. We adjusted the game to fit
    these, but this may be useful to know about as you work on your own projects or
    if you wish to restrict users to one experience or another.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **分辨率和展示** 部分中，你可以根据需要启用或禁用不同的旋转和宽高比。我们调整了游戏以适应这些设置，但当你自己在项目上工作或希望限制用户体验时，了解这一点可能很有用。
- en: The **Splash Image** option can be used to display your own logo in addition
    to Unity’s if you have Unity Personal. If you have a Unity Pro license, you may
    disable it entirely if you wish here by unchecking the **Show Splash** **Screen**
    option.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你拥有 Unity Personal，可以使用 **Splash Image** 选项显示你的自有标志，除了 Unity 的标志。如果你拥有 Unity
    Pro 许可证，你可以通过取消选择 **显示启动屏幕** **选项** 来完全禁用它。
- en: Confirm under `com.CompanyName.GameName`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `com.CompanyName.GameName` 下进行确认。
- en: Next, open up **Publishing Settings**. This is where we will enter information
    about who our game’s publisher is (in this case, I’m assuming it’s you). Whenever
    you build a game for Android, you need a **Keystore**, which allows you to sign
    off the game, approving it for the build process. Click on the **Keystore Manager**
    button. From there, you’ll be brought to a menu.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 **发布设置**。这是我们将输入有关游戏发行者信息的地方（在这种情况下，我假设是你）。无论何时为 Android 构建游戏，你都需要一个
    **密钥库**，它允许你签署游戏，批准构建过程。点击 **密钥库管理器** 按钮。从那里，你将被带到菜单。
- en: From the menu, click on the **Keystore…** drop-down menu and then select **Create
    New** **|** **Anywhere...**, and choose a location for this file.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中，点击 **密钥库…** 下拉菜单，然后选择 **创建新** **|** **任何地方…**，并选择此文件的位置。
- en: Keep in mind where this is going to be located, as you will be using it in the
    future to create new versions of your game
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住这个位置，因为你将来将使用它来创建游戏的新版本。
- en: Then, you’ll need to set a value in the **Password** field that you will need
    to know as you’ll be using it repeatedly. Afterward, in the **Confirm password**
    textbox, you should enter the same thing as you did before.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你需要在 **密码** 字段中设置一个值，你将需要知道，因为你将反复使用它。之后，在 **确认密码** 文本框中，你应该输入之前输入的内容。
- en: 'From there, under the **New Key Values** section, you’ll need to add the same
    information as before—the password with confirmation and then your name and other
    information. You can see what I put down in the following screenshot. Once finished,
    click on the **Add** **Key** button:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，在 **新密钥值** 部分中，你需要添加之前相同的信息——密码及确认，然后是你的名字和其他信息。你可以在下面的屏幕截图中看到我填写的内容。完成后，点击
    **添加** **密钥** 按钮：
- en: "![Figure 13.3 – Creating a keys\uFEFFtore](img/B18868_13_03.jpg)"
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.3 – 创建密钥库](img/B18868_13_03.jpg)'
- en: Figure 13.3 – Creating a keystore
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – 创建密钥库
- en: You’ll have a popup asking whether you’d like to set the new keystore as your
    **Project Keystore** and **Project Key** values. Click on **Yes**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个弹出窗口询问你是否想将新的密钥库设置为你的 **项目密钥库** 和 **项目密钥** 值。点击 **是**。
- en: '![Figure 13.4 – Confirmation window](img/B18868_13_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.4 – 确认窗口](img/B18868_13_04.jpg)'
- en: Figure 13.4 – Confirmation window
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4 – 确认窗口
- en: 'You should then see this screen:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到这个屏幕：
- en: '![Figure 13.5 – Keystore assigned](img/B18868_13_05.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.5 – 分配的密钥库](img/B18868_13_05.jpg)'
- en: Figure 13.5 – Keystore assigned
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5 – 分配的密钥库
- en: At this point, you should be finished for those working on iOS, but for those
    wishing to target Google Play, there are some additional tasks we will need to
    complete.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，为 iOS 工作的人员应该已经完成，但对于希望针对 Google Play 的人来说，还有一些额外的任务需要完成。
- en: Google Play requires a newer version of their Billing Library to be used so
    we will need to update the Unity **In App Purchase** (**IAP**) package.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play 需要使用更新的版本其计费库，因此我们需要更新 Unity 的 **In App Purchase** （**IAP**）包。
- en: 'From the Unity Editor, go to the `Assets` folder, right-click, and select `Packages`
    folder and open the `manifest.json` file in a text editor of your choice. Next,
    find the following line:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Unity 编辑器，转到 `Assets` 文件夹，右键单击，选择 `Packages` 文件夹，并在您选择的文本编辑器中打开 `manifest.json`
    文件。接下来，找到以下行：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Update it to `"``com.unity.purchasing": "4.4.1",`.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '更新为 `"``com.unity.purchasing": "4.4.1",`.'
- en: 'Save the file and return to the Unity Editor, and it should update the package.
    However, this will also introduce a bug to our previous code that will cause the
    ads to not display correctly on our devices. So, with that in mind, open up the
    `UnityAdController` script and add the following code to the class:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并返回到 Unity 编辑器，它应该会更新包。然而，这也会引入一个到我们之前代码的漏洞，导致广告在我们的设备上无法正确显示。因此，考虑到这一点，打开
    `UnityAdController` 脚本并向类中添加以下代码：
- en: '[PRE1]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, update the `ShowAd` function to the following:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将 `ShowAd` 函数更新为以下内容：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are also required to load our ads now ahead of time, so update the `Start`
    function to the following:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在还必须提前加载我们的广告，因此更新 `Start` 函数为以下内容：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On that same line of thinking, `OnUnityAdsShowComplete` now needs to be updated
    to only happen once, so we add a check to see whether the reward was given yet.
    Also, after the ad has been completed, we load a new ad:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照同样的思路，`OnUnityAdsShowComplete` 现在需要只发生一次，因此我们添加了一个检查以查看奖励是否已经发放。广告完成后，我们加载一个新的广告：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Google Play also stipulates that ads cannot be played at the beginning of a
    level, so we will need to adjust our scripts for that. Open up the `PauseScreenBehaviour.cs`
    file and adjust the `Start` function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play 还规定，广告不能在关卡开始时播放，因此我们需要调整我们的脚本以适应这一点。打开 `PauseScreenBehaviour.cs`
    文件并调整 `Start` 函数：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then go to `MainMenuBehaviour` and update the `LoadLevel` script:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，转到 `MainMenuBehaviour` 并更新 `LoadLevel` 脚本：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save all of the scripts we’ve worked on and return to the Unity Editor.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存我们已工作的所有脚本并返回到 Unity 编辑器。
- en: 'In the editor, return to the **Gameplay** level and select the **Resume** button.
    From there, go to the **On Click** event and ensure that the **Show Pause** button
    has a **Set Active** to true event. This way, when we click the **Resume** button,
    we will be able to pause the game again:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中，返回到 **Gameplay** 级别并选择 **Resume** 按钮。从那里，转到 **On Click** 事件并确保 **Show
    Pause** 按钮有一个 **Set Active** 为 true 的事件。这样，当我们点击 **Resume** 按钮时，我们就能再次暂停游戏：
- en: '![Figure 13.6 – Turning on the pause menu](img/B18868_13_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.6 – 打开暂停菜单](img/B18868_13_06.jpg)'
- en: Figure 13.6 – Turning on the pause menu
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.6 – 打开暂停菜单
- en: 'We will also want to make sure that Unity Gaming Services is always initialized.
    One way to do this is by going to **Services** | **In-App Purchasing** | **IAP
    Catalog** and checking the **Automatically initialize Unity Gaming Services**
    property. Otherwise, we may get a bug with the Codeless IAP that we added earlier:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还希望确保 Unity 游戏服务始终初始化。一种方法是通过转到 **服务** | **内联购买** | **IAP 目录** 并检查 **自动初始化
    Unity 游戏服务** 属性。否则，我们可能会遇到我们之前添加的无代码 IAP 的错误：
- en: '![Figure 13.7 – Automatically initializing Unity Gaming Services](img/B18868_13_07.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.7 – 自动初始化 Unity 游戏服务](img/B18868_13_07.jpg)'
- en: Figure 13.7 – Automatically initializing Unity Gaming Services
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.7 – 自动初始化 Unity 游戏服务
- en: The Google Play Store also now requires new apps to be an **Android App Bundle**
    (**AAB**) instead of an **Android Application Package** (**APK**), so we will
    need to configure the application to be an AAB instead.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play 商店现在还要求新应用必须是 **Android App Bundle** （**AAB**）而不是 **Android 应用程序包**
    （**APK**），因此我们需要将应用程序配置为 AAB。
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on why this change, check out [https://android-developers.googleblog.com/2021/06/the-future-of-android-app-bundles-is.html.](https://android-developers.googleblog.com/2021/06/the-future-of-android-app-bundles-is.html
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 关于为什么进行此更改的更多信息，请查看 [https://android-developers.googleblog.com/2021/06/the-future-of-android-app-bundles-is.html.](https://android-developers.googleblog.com/2021/06/the-future-of-android-app-bundles-is.html
- en: )
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: Under **Publishing Settings**, enable **Split** **Application Binary**.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **发布设置** 下，启用 **分割** **应用程序二进制**。
- en: I also set `API level 31` as that is what Google Play is asking applications
    to currently target though it may be a larger number in the future. This may cause
    Unity to ask you to download an update to your Android **software development
    kit** (**SDK**) when you make a build.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我还将 `API 级别 31` 设置为当前 Google Play 要求应用程序的目标，尽管未来可能是一个更大的数字。这可能会导致在构建时 Unity
    要求您下载 Android **软件开发工具包**（**SDK**）的更新。
- en: In addition, Google Play requires us to support ARM64, so to do that, under
    **Configuration**, change **Scripting Backend** to **IL2CPP** to enable the option
    and afterward check the **ARM64** option.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，Google Play 要求我们支持 ARM64，因此为了实现这一点，在 **配置** 下，将 **脚本后端** 改为 **IL2CPP** 以启用选项，之后检查
    **ARM64** 选项。
- en: 'Next, go to **File** | **Build Settings** and enable **Build App Bundle (Google
    Play)**. Also, make sure to uncheck **Development Build** if it is checked; Google
    Play currently does not support development builds:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到 **文件** | **构建设置** 并启用 **构建应用包（Google Play）**。同时，如果已勾选，请确保取消勾选 **开发构建**；目前
    Google Play 不支持开发构建：
- en: '![Figure 13.8 – Build App Bundle](img/B18868_13_08.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.8 – 构建应用包](img/B18868_13_08.jpg)'
- en: Figure 13.8 – Build App Bundle
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.8 – 构建应用包
- en: Lastly, we also will need to disable debugging from the `AndroidManifest` file.
    From the Unity Editor, go to the `Plugins\Android` folder, and open the `AndroidManifest.xml`
    file. From there, search for the `android:debuggable="true"` line and change `"true"`
    to `"false"` and save the file.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们还需要从 `AndroidManifest` 文件中禁用调试。从 Unity 编辑器中，转到 `Plugins\Android` 文件夹，并打开
    `AndroidManifest.xml` 文件。从那里，搜索 `android:debuggable="true"` 行，将其更改为 `"false"`
    并保存文件。
- en: The app manifest is something that every Android project must have, which tells
    Android all of the different components that the app has as well as all the permissions
    that the applications need to have in order for the project to have to work. For
    security reasons, you need to disable debugging before an application can be published
    in Google Play.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序清单是每个 Android 项目都必须拥有的东西，它告诉 Android 应用程序的所有不同组件以及应用程序需要拥有的所有权限，以便项目能够工作。出于安全原因，在应用程序可以发布到
    Google Play 之前，您需要禁用调试。
- en: Go back to the **Build Settings** menu and then hit the **Build** button and
    give your project a name.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 **构建设置** 菜单，然后点击 **构建** 按钮，并为您的项目命名。
- en: If all goes well, you should see the file get created as a `.aab` file, which
    can then be uploaded to the Google Play Store!
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该会看到文件以 `.aab` 文件的形式创建，然后可以将其上传到 Google Play 商店！
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: It is exciting to see all the hard work come together in a finished product
    that is ready to be shared with the world. The process of building a release copy
    of your game and updating the build settings is an important step toward making
    your game ready for distribution.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 看到所有辛勤工作汇聚成成品，准备好与世界分享，这令人兴奋。构建游戏发布副本和更新构建设置的过程是使您的游戏准备好分发的重要步骤。
- en: However, the ultimate goal of any game development project is to release the
    game to the public and have it played by as many people as possible. This is where
    the process of submitting your game to the app stores comes into play. In the
    next chapter, we will delve into the details of how to successfully submit your
    game to both the Google Play Store and the iOS App Store.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，任何游戏开发项目的最终目标是将游戏发布给公众，让尽可能多的人玩到它。这就是将您的游戏提交到应用商店的过程发挥作用的地方。在下一章中，我们将深入探讨如何成功将您的游戏提交到
    Google Play 商店和 iOS 应用商店的细节。
