- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Release Copy of Our Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a release copy of our game is a crucial step in the process of submitting
    our game to the app stores. This step involves creating a version of our game
    that is stable and ready for us to release to the public.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will walk you through the steps required to build a release
    copy of your game for both iOS and Android devices. We will cover some extra steps
    that need to be taken in order in order for our project to work. We will also
    provide tips and best practices to ensure that your release copy is of the highest
    quality and free from bugs and other issues. So, let’s dive in and get started
    on creating a release copy of your game. This chapter will be split into a number
    of topics. It will contain a simple step-by-step process from beginning to end.
    Here is the outline of our tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating release builds for app stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the **Unity Editor system requirements** section. To deploy your project, you
    will need an Android or iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter13%20and%2014](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter13%20and%2014).
  prefs: []
  type: TYPE_NORMAL
- en: Generating release builds for app stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We exported copies of our game previously in [*Chapter 2*](B18868_02.xhtml#_idTextAnchor087),
    *Project Setup for Android and iOS Development*, but there are some additional
    steps that we should do before actually releasing the game on an app store:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step will be to confirm you are currently ready to deploy your project
    to the mobile platform of choice. You can check this by going into the **Build
    Settings** menu by navigating to **File** | **Build Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From there, you should see the Unity logo to the right of the **Android** or
    **iOS** selection depending on the platform you wish to build for. If it is not
    at the correct platform, select that platform you wish to build to and then click
    the **Switch Platform** button and wait for it to finish reimporting the assets
    for the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 13.1 – The Build Settings menu\uFEFF](img/B18868_13_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – The Build Settings menu
  prefs: []
  type: TYPE_NORMAL
- en: After confirming whether we are building for **Android** or **iOS**, open up
    the **Player** settings menu by clicking on the **Player Settings...** button
    from the menu or by going to **Edit** | **Project Settings** | **Player**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you haven’t done so already, set the `JohnPDoran` and `Endless` `Roller`,
    respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll then see a `Hi-ResIcon` image from the `Assets` folder and then drag
    and drop it into the **Default Icon** slot. This will cause the **Icon** section
    of the Android settings to automatically scale the image to fit whatever device
    you are targeting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Setting the Default Icon image](img/B18868_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Setting the Default Icon image
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can also use your own image, and you can use transparency if
    you would like to.
  prefs: []
  type: TYPE_NORMAL
- en: Under the **Resolution and Presentation** section, you can enable or disable
    different rotations and aspect ratios as desired. We adjusted the game to fit
    these, but this may be useful to know about as you work on your own projects or
    if you wish to restrict users to one experience or another.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Splash Image** option can be used to display your own logo in addition
    to Unity’s if you have Unity Personal. If you have a Unity Pro license, you may
    disable it entirely if you wish here by unchecking the **Show Splash** **Screen**
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm under `com.CompanyName.GameName`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open up **Publishing Settings**. This is where we will enter information
    about who our game’s publisher is (in this case, I’m assuming it’s you). Whenever
    you build a game for Android, you need a **Keystore**, which allows you to sign
    off the game, approving it for the build process. Click on the **Keystore Manager**
    button. From there, you’ll be brought to a menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu, click on the **Keystore…** drop-down menu and then select **Create
    New** **|** **Anywhere...**, and choose a location for this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep in mind where this is going to be located, as you will be using it in the
    future to create new versions of your game
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, you’ll need to set a value in the **Password** field that you will need
    to know as you’ll be using it repeatedly. Afterward, in the **Confirm password**
    textbox, you should enter the same thing as you did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From there, under the **New Key Values** section, you’ll need to add the same
    information as before—the password with confirmation and then your name and other
    information. You can see what I put down in the following screenshot. Once finished,
    click on the **Add** **Key** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 13.3 – Creating a keys\uFEFFtore](img/B18868_13_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Creating a keystore
  prefs: []
  type: TYPE_NORMAL
- en: You’ll have a popup asking whether you’d like to set the new keystore as your
    **Project Keystore** and **Project Key** values. Click on **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Confirmation window](img/B18868_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Confirmation window
  prefs: []
  type: TYPE_NORMAL
- en: 'You should then see this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Keystore assigned](img/B18868_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Keystore assigned
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should be finished for those working on iOS, but for those
    wishing to target Google Play, there are some additional tasks we will need to
    complete.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play requires a newer version of their Billing Library to be used so
    we will need to update the Unity **In App Purchase** (**IAP**) package.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Unity Editor, go to the `Assets` folder, right-click, and select `Packages`
    folder and open the `manifest.json` file in a text editor of your choice. Next,
    find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update it to `"``com.unity.purchasing": "4.4.1",`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the file and return to the Unity Editor, and it should update the package.
    However, this will also introduce a bug to our previous code that will cause the
    ads to not display correctly on our devices. So, with that in mind, open up the
    `UnityAdController` script and add the following code to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the `ShowAd` function to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are also required to load our ads now ahead of time, so update the `Start`
    function to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On that same line of thinking, `OnUnityAdsShowComplete` now needs to be updated
    to only happen once, so we add a check to see whether the reward was given yet.
    Also, after the ad has been completed, we load a new ad:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Google Play also stipulates that ads cannot be played at the beginning of a
    level, so we will need to adjust our scripts for that. Open up the `PauseScreenBehaviour.cs`
    file and adjust the `Start` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then go to `MainMenuBehaviour` and update the `LoadLevel` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all of the scripts we’ve worked on and return to the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the editor, return to the **Gameplay** level and select the **Resume** button.
    From there, go to the **On Click** event and ensure that the **Show Pause** button
    has a **Set Active** to true event. This way, when we click the **Resume** button,
    we will be able to pause the game again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Turning on the pause menu](img/B18868_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Turning on the pause menu
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also want to make sure that Unity Gaming Services is always initialized.
    One way to do this is by going to **Services** | **In-App Purchasing** | **IAP
    Catalog** and checking the **Automatically initialize Unity Gaming Services**
    property. Otherwise, we may get a bug with the Codeless IAP that we added earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Automatically initializing Unity Gaming Services](img/B18868_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Automatically initializing Unity Gaming Services
  prefs: []
  type: TYPE_NORMAL
- en: The Google Play Store also now requires new apps to be an **Android App Bundle**
    (**AAB**) instead of an **Android Application Package** (**APK**), so we will
    need to configure the application to be an AAB instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on why this change, check out [https://android-developers.googleblog.com/2021/06/the-future-of-android-app-bundles-is.html.](https://android-developers.googleblog.com/2021/06/the-future-of-android-app-bundles-is.html
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: Under **Publishing Settings**, enable **Split** **Application Binary**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I also set `API level 31` as that is what Google Play is asking applications
    to currently target though it may be a larger number in the future. This may cause
    Unity to ask you to download an update to your Android **software development
    kit** (**SDK**) when you make a build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition, Google Play requires us to support ARM64, so to do that, under
    **Configuration**, change **Scripting Backend** to **IL2CPP** to enable the option
    and afterward check the **ARM64** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, go to **File** | **Build Settings** and enable **Build App Bundle (Google
    Play)**. Also, make sure to uncheck **Development Build** if it is checked; Google
    Play currently does not support development builds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Build App Bundle](img/B18868_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Build App Bundle
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we also will need to disable debugging from the `AndroidManifest` file.
    From the Unity Editor, go to the `Plugins\Android` folder, and open the `AndroidManifest.xml`
    file. From there, search for the `android:debuggable="true"` line and change `"true"`
    to `"false"` and save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app manifest is something that every Android project must have, which tells
    Android all of the different components that the app has as well as all the permissions
    that the applications need to have in order for the project to have to work. For
    security reasons, you need to disable debugging before an application can be published
    in Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the **Build Settings** menu and then hit the **Build** button and
    give your project a name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all goes well, you should see the file get created as a `.aab` file, which
    can then be uploaded to the Google Play Store!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is exciting to see all the hard work come together in a finished product
    that is ready to be shared with the world. The process of building a release copy
    of your game and updating the build settings is an important step toward making
    your game ready for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: However, the ultimate goal of any game development project is to release the
    game to the public and have it played by as many people as possible. This is where
    the process of submitting your game to the app stores comes into play. In the
    next chapter, we will delve into the details of how to successfully submit your
    game to both the Google Play Store and the iOS App Store.
  prefs: []
  type: TYPE_NORMAL
