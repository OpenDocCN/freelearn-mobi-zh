["```java\n    public enum SquareState {\n      Clear,\n      XControl,\n      OControl\n    }\n    ```", "```java\n    public SquareState[] board = new SquareState[9];\n    public bool xTurn = true;\n    ```", "```java\n    public void OnGUI() {\n      float width = 75;\n      float height = 75;\n    ```", "```java\n    for(int y=0;y<3;y++) {\n        for(int x=0;x<3;x++) {\n    ```", "```java\n    int boardIndex = (y * 3) + x;\n    ```", "```java\n    Rect square = new Rect(x * width, y * height, width, height);\n    ```", "```java\n    string owner = board[boardIndex] == SquareState.XControl ? \"X\" : board[boardIndex] == SquareState.OControl ? \"O\" : \"\";\n    ```", "```java\n          if(GUI.Button(square, owner))\n            SetControl(boardIndex);\n        }\n      }\n    }\n    ```", "```java\n    public void SetControl(int boardIndex) {\n      if(boardIndex < 0 || boardIndex >= board.Length) return;\n\n      board[boardIndex] = xTurn ? SquareState.XControl : SquareState.OControl;\n      xTurn = !xTurn;\n    }\n    ```", "```java\n    public enum GameState {\n      Opening,\n      MultiPlayer,\n      GameOver\n    }\n    ```", "```java\n    public void NewGame() {\n      xTurn = true;\n      board = new SquareState[9];\n    }\n    ```", "```java\n    public void OnGUI() {\n      switch(gameState) {\n        case GameState.Opening:\n          DrawOpening();\n          break;\n        case GameState.MultiPlayer:\n          DrawGameBoard();\n          break;\n        case GameState.GameOver:\n          DrawGameOver();\n          break;\n      }\n    }\n    ```", "```java\n    public GameState gameState = GameState.Opening;\n    ```", "```java\n    public void DrawOpening() {\n      Rect titleRect = new Rect(0, 0, 300, 75);\n      GUI.Label(titleRect, \"Tic-Tac-Toe\");\n    ```", "```java\n      Rect multiRect = new Rect(titleRect.x, titleRect.y + titleRect.height, titleRect.width, 75);\n    ```", "```java\n      if(GUI.Button(multiRect, \"New Game\")) {\n        NewGame();\n        gameState = GameState.MultiPlayer;\n      }\n    }\n    ```", "```java\n    public SquareState winner = SquareState.Clear;\n    ```", "```java\n    public void DrawGameOver() {\n      Rect winnerRect = new Rect(0, 0, 300, 75);\n      string winnerTitle = winner == SquareState.XControl ? \"X Wins!\" : winner == SquareState.OControl ? \"O Wins!\" : \"It's A Tie!\";\n      GUI.Label(winnerRect, winnerTitle);\n\n      winnerRect.y += winnerRect.height;\n      if(GUI.Button(winnerRect, \"Main Menu\"))\n        gameState = GameState.Opening;\n    }\n    ```", "```java\n    Rect turnRect = new Rect(300, 0, 100, 100);\n    string turnTitle = xTurn ? \"X's Turn!\" : \"O's Turn!\";\n    GUI.Label(turnRect, turnTitle);\n    ```", "```java\n    if(board[boardIndex] == SquareState.Clear) {\n      if(GUI.Button(square, owner))\n        SetControl(boardIndex);\n    }\n    else GUI.Label(square, owner);\n    ```", "```java\n    public void LateUpdate() {\n      if(gameState != GameState.MultiPlayer) return;\n    ```", "```java\n      for(int i=0;i<3;i++) {\n        if(board[i] != SquareState.Clear && board[i] == board[i + 3] && board[i] == board[i + 6]) {\n          SetWinner(board[i]);\n          return;\n        }\n        else if(board[i * 3] != SquareState.Clear && board[i * 3] == board[(i * 3) + 1] && board[i * 3] == board[(i * 3) + 2]) {\n          SetWinner(board[i * 3]);\n          return;\n        }\n      }\n    ```", "```java\n      if(board[0] != SquareState.Clear && board[0] == board[4] && board[0] == board[8]) {\n        SetWinner(board[0]);\n        return;\n      }\n      else if(board[2] != SquareState.Clear && board[2] == board[4] && board[2] == board[6]) {\n        SetWinner(board[2]);\n        return;\n      }\n    ```", "```java\n      for(int i=0;i<board.Length;i++) {\n        if(board[i] == SquareState.Clear)\n          return;\n      }\n      SetWinner(SquareState.Clear);\n    }\n    ```", "```java\n    public void SetWinner(SquareState toWin) {\n      winner = toWin;\n      gameState = GameState.GameOver;\n    }\n    ```", "```java\n    public GUISkin guiSkin;\n    public Texture2D titleImage;\n    ```", "```java\n    if(guiSkin != null) GUI.skin = guiSkin;\n    ```", "```java\n    else GUI.Label(square, owner, owner + \"Square\");\n    ```", "```java\n    GUI.DrawTexture(titleRect, titleImage);\n    ```", "```java\n    Rect titleRect = new Rect(0, 0, titleImage.width, titleImage.height);\n    ```", "```java\n    Rect groupRect = new Rect((Screen.width / 2) - (titleImage.width / 2), (Screen.height / 2) - ((titleImage.height + 75) / 2), titleImage.width, titleImage.height + 75);\n    ```", "```java\n    GUI.BeginGroup(groupRect);\n    ```", "```java\n    GUI.EndGroup();\n    ```", "```java\n    Rect groupRect = new Rect((Screen.width / 2) - 150, (Screen.height / 2) - 75, 300, 150);\n    GUI.BeginGroup(groupRect);\n    ```", "```java\n    GUI.EndGroup();\n    ```", "```java\n    Rect winnerRect = new Rect(0, 0, groupRect.width, groupRect.height / 2);\n    ```", "```java\n    bool widthSmaller = Screen.width < Screen.height;\n    float smallSide = widthSmaller ? Screen.width : Screen.height;\n    ```", "```java\n    float width = smallSide / 3;\n    float height = width;\n    ```", "```java\n    turnRect.x = widthSmaller ? 0 : smallSide;\n    turnRect.y = widthSmaller ? smallSide : 0;\n    turnRect.width = widthSmaller ? Screen.width : Screen.width - Screen.height;\n    turnRect.height = widthSmaller ? Screen.height - Screen.width : Screen.height;\n    ```", "```java\n    GUIStyle turnStyle = new GUIStyle(GUI.skin.GetStyle(\"label\"));\n    ```", "```java\n    turnStyle.fontSize *= (int)((Screen.width + Screen.height - (smallSide * 2)) / 100);\n    ```", "```java\n    GUI.Label(turnRect, turnTitle, turnStyle);\n    ```"]