["```kt\npackage me.soshin\n```", "```kt\nfun main() {\n```", "```kt\n    println(\"Hello Kotlin\")\n```", "```kt\n}\n```", "```kt\n> Hello Kotlin\n```", "```kt\nclass Main {\n```", "```kt\n    public static void main(String[] args) {\n```", "```kt\n        System.out.println(\"Hello Java\");\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\npublic static void main(String[] args) { ... }\n```", "```kt\nSystem.out.println(\"Semicolon =>\"); \n```", "```kt\nprintln(\"No semicolons! =>\")\n```", "```kt\nvar greeting = \"Hello Kotlin\"\n```", "```kt\nprintln(greeting)\n```", "```kt\nvar greeting = \"Hello Kotlin\"\n```", "```kt\ngreeting = 1 // <- Greeting is a String\n```", "```kt\nvar greeting: String = \"Hello Kotlin\"\n```", "```kt\nfinal String s = \"Hi\";\n```", "```kt\ns = \"Bye\"; // Doesn't work\n```", "```kt\nval greeting = \"Hi\"\n```", "```kt\ngreeting = \"Bye\"// Doesn't work, \"Val cannot be reassigned\"\n```", "```kt\nInteger a = 1000;\n```", "```kt\nInteger b = 1000;\n```", "```kt\nSystem.out.println(a == b);      // false\n```", "```kt\nSystem.out.println(a.equals(b)); // true\n```", "```kt\nval a = 1000\n```", "```kt\nval b = 1000\n```", "```kt\nprintln(a == b)      // true\n```", "```kt\nprintln(a.equals(b)) // true\n```", "```kt\nprintln(a === b) // Still true\n```", "```kt\nfun greet(greeting: String) {\n```", "```kt\n    println(greeting)\n```", "```kt\n}\n```", "```kt\nfun getGreeting(): String { \n```", "```kt\n    return \"Hello, Kotlin!\"\n```", "```kt\n}\n```", "```kt\nfun main() {\n```", "```kt\n    greet(getGreeting())\n```", "```kt\n}\n```", "```kt\nfun getGreeting() = \"Hello, Kotlin!\"\n```", "```kt\nfinal String s = null;\n```", "```kt\nSystem.out.println(s.length()); \n```", "```kt\n// Causes NullPointerException\n```", "```kt\nvar optional = Optional.of(\"I'm not null\");\n```", "```kt\nif (optional.isPresent()) { \n```", "```kt\n    System.out.println(optional.get().length());\n```", "```kt\n}\n```", "```kt\nvoid printLength(Optional<String> optional) {\n```", "```kt\n    if (optional.isPresent()) { // <- Missing null check \n```", "```kt\n      here\n```", "```kt\n        System.out.println(optional.get().length());\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nprintLength (null); // Crashes!\n```", "```kt\nval s: String = null // Won't compile\n```", "```kt\nfun printLength(s: String) { \n```", "```kt\n    println(s.length)\n```", "```kt\n}\n```", "```kt\nprintLength(null) \n```", "```kt\n// Null cannot be a value of a non-null type String\n```", "```kt\nfun printLength(stringOrNull: String?) { ... }\n```", "```kt\nval hobbits = listOf(\"Frodo\", \"Sam\", \"Pippin\", \"Merry\")\n```", "```kt\nval hobbits: List<String> = listOf(\"Frodo\", \"Sam\", \"Pippin\",   \"Merry\")\n```", "```kt\nprintln(hobbits[1]) \n```", "```kt\n> Sam\n```", "```kt\nval footballChampions = setOf(\"France\", \"Germany\", \"Spain\",   \"Italy\", \"Brazil\", \"France\", \"Brazil\", \"Germany\")\n```", "```kt\nprintln(footballChampions) // [France, Germany, Spain,   Italy, Brazil]\n```", "```kt\nprintln(\"Israel\" in footballChampions)\n```", "```kt\nprintln(\"Italy\" in footballChampions) \n```", "```kt\n> false\n```", "```kt\n> true\n```", "```kt\nval movieBatmans = mapOf(\n```", "```kt\n    \"Batman Returns\" to \"Michael Keaton\",\n```", "```kt\n    \"Batman Forever\" to \"Val Kilmer\",\n```", "```kt\n    \"Batman & Robin\" to \"George Clooney\"\n```", "```kt\n)\n```", "```kt\nprintln(movieBatmans) \n```", "```kt\n> {Batman Returns=Michael Keaton, \n```", "```kt\n> Batman Forever=Val Kilmer, \n```", "```kt\n> Batman & Robin=George Clooney}\n```", "```kt\nprintln(movieBatmans[\"Batman Returns\"])\n```", "```kt\n> Michael Keaton\n```", "```kt\nprintln(\" Batman Begins \" !in movieBatmans)\n```", "```kt\n> true\n```", "```kt\nhobbits[0] = \"Bilbo \" // Unresolved reference!\n```", "```kt\nval editableHobbits = mutableListOf(\"Frodo\", \"Sam\",   \"Pippin\", \"Merry\")\n```", "```kt\neditableHobbits.add(\"Bilbo\")\n```", "```kt\nimport java.util.*\n```", "```kt\n// Mutable map that is sorted by its keys \n```", "```kt\nval treeMap = java.util.TreeMap( \n```", "```kt\n    mapOf(\n```", "```kt\n        \"Practical Pig\" to \"bricks\",\n```", "```kt\n        \"Fifer\" to \"straw\",\n```", "```kt\n        \"Fiddler\" to \"sticks\"\n```", "```kt\n    )\n```", "```kt\n)\n```", "```kt\nprintln(treeMap.keys)\n```", "```kt\n> [Fiddler, Fifer, Practical Pig]\n```", "```kt\nval musketeers: Array<String> = arrayOf(\"Athos\", \"Porthos\",   \"Aramis\")\n```", "```kt\nlistOf(1, 2, 3, 5).toTypedArray()\n```", "```kt\nfun main(args: Array<String>) { \n```", "```kt\n    println(args.joinToString(\", \"))\n```", "```kt\n}\n```", "```kt\npublic String getUnixSocketPolling(boolean isBsd) { \n```", "```kt\n    if (isBsd) {\n```", "```kt\n        return \"kqueue\"; \n```", "```kt\n    }\n```", "```kt\n    else {\n```", "```kt\n        return \"epoll\";\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\npublic String getUnixSocketPolling(boolean isBsd) { \n```", "```kt\n    var pollingType = \"epoll\";\n```", "```kt\n    if (isBsd) {\n```", "```kt\n        pollingType = \"kqueue\";\n```", "```kt\n    }\n```", "```kt\n    return pollingType;\n```", "```kt\n}\n```", "```kt\nfun getUnixSocketPolling(isBsd: Boolean): String {\n```", "```kt\n    return if (isBsd) {\n```", "```kt\n        \"kqueue\"\n```", "```kt\n    } else {\n```", "```kt\n        \"epoll\"\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nfun getUnixSocketPolling(isBsd: Boolean): String     = if (isBsd) \"kqueue\" else \"epoll\"\n```", "```kt\nfun archenemy(heroName: String) = when (heroName) {\n```", "```kt\n    \"Batman\" -> \"Joker\"\n```", "```kt\n    \"Superman\" -> \"Lex Luthor\"\n```", "```kt\n    \"Spider-Man\" -> \"Green Goblin\"\n```", "```kt\n    else -> \"Sorry, no idea\"\n```", "```kt\n}\n```", "```kt\nval hero = \"Batman\"\n```", "```kt\nprintln(\"Archenemy of $hero is ${archenemy(hero)}\")\n```", "```kt\n> Archenemy of Batman is Joker\n```", "```kt\nprintln(\"Twinkle, Twinkle Little Bat\\n\" +\n```", "```kt\n    \"How I wonder what you're at!\\n\" +\n```", "```kt\n    \"Up above the world you fly,\\n\" +\n```", "```kt\n    \"Like a tea tray in the sky.\\n\" +\n```", "```kt\n    \"Twinkle, twinkle, little bat!\\n\" +\n```", "```kt\n    \"How I wonder what you're at!\")\n```", "```kt\nprintln(\"\"\"Twinkle, Twinkle Little Bat \n```", "```kt\n           How I wonder what you're at!\n```", "```kt\n           Up above the world you fly,\n```", "```kt\n           Like a tea tray in the sky.\n```", "```kt\n           Twinkle, twinkle, little bat!\n```", "```kt\n           How I wonder what you're at!\"\"\")\n```", "```kt\nprintln(\"\"\"\n```", "```kt\n    Twinkle, Twinkle Little Bat\n```", "```kt\n    How I wonder what you're at! \n```", "```kt\n    \"\"\".trimIndent())\n```", "```kt\nprintln(\"From \\\" Alice's Adventures in Wonderland\\\" \")\n```", "```kt\nprintln(\"\"\" From \" Alice's Adventures in Wonderland\" \"\"\")\n```", "```kt\nfor (c in \"Word\") {\n```", "```kt\n    println(c)\n```", "```kt\n}\n```", "```kt\n>W\n```", "```kt\n>o\n```", "```kt\n>r\n```", "```kt\n>d\n```", "```kt\nval jokers = listOf(\"Heath Ledger\", \"Joaquin Phoenix\",   \"Jack Nicholson\")\n```", "```kt\nfor (j in jokers) {\n```", "```kt\n    println(j)\n```", "```kt\n}\n```", "```kt\n> Heath Ledger\n```", "```kt\n> Joaquin Phoenix\n```", "```kt\n> Jack Nicholson\n```", "```kt\nfor (i in 0..9) {\n```", "```kt\n    println(i)\n```", "```kt\n}\n```", "```kt\nfor (int i = 0; i <= 9; i++) \n```", "```kt\nfor (i in 0 until 10) {\n```", "```kt\n    println(\"for until $i\") \n```", "```kt\n// Same output as the previous \n```", "```kt\n        loop\n```", "```kt\n}\n```", "```kt\nfor (i in 9 downTo 0) {\n```", "```kt\n    println(\"for downTo $i\") // 9, 8, 7...\n```", "```kt\n}\n```", "```kt\nvar x = 0\n```", "```kt\nwhile (x < 10) {\n```", "```kt\n    x++\n```", "```kt\n    println(\"while $x\")\n```", "```kt\n}\n```", "```kt\nvar x = 5 \n```", "```kt\ndo {\n```", "```kt\n    println(\"do while $x\")\n```", "```kt\n    x--\n```", "```kt\n} while (x > 0)\n```", "```kt\nclass Player {\n```", "```kt\n}\n```", "```kt\nval player = Player()\n```", "```kt\nclass Player // Totally fine\n```", "```kt\nclass Player(name: String) \n```", "```kt\nval player = Player()\n```", "```kt\nval player = Player(\"Roland\")\n```", "```kt\nclass Player(name: String) {\n```", "```kt\n    private var name: String = name\n```", "```kt\n    fun getName(): String {\n```", "```kt\n        return name\n```", "```kt\n    }\n```", "```kt\n    fun setName(name: String) {\n```", "```kt\n        this.name = name;\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass Player {\n```", "```kt\n    var name: String = \"\"\n```", "```kt\n}\n```", "```kt\nclass Player(val name: String)\n```", "```kt\nval player = Player(\"Alex\")\n```", "```kt\nprintln(player.name)\n```", "```kt\nplayer.name = \"Alexey\" // value cannot be reassigned\n```", "```kt\nclass Player(val name: String, var score: Int)\n```", "```kt\nclass Player(val name: String) { \n```", "```kt\n    var score: Int = 0\n```", "```kt\n}\n```", "```kt\nplayer.score = -10\n```", "```kt\nclass Player(val name: String) { \n```", "```kt\n    var score: Int = 0\n```", "```kt\n       set(value) {\n```", "```kt\n             field = if (value >= 0) {\n```", "```kt\n                 value\n```", "```kt\n             } else {\n```", "```kt\n                 0\n```", "```kt\n             }\n```", "```kt\n        }\n```", "```kt\n}\n```", "```kt\nset(value) {\n```", "```kt\n    this.score = if (value >= 0) value else 0\n```", "```kt\n}\n```", "```kt\n// This is a pseudocode, not real Kotlin code!\n```", "```kt\n...\n```", "```kt\nfun setValue(value: Int) {\n```", "```kt\n    setValue(value) // Infinite recursion!\n```", "```kt\n}\n```", "```kt\n...\n```", "```kt\n class Player(name: String) {\n```", "```kt\n    val name = name\n```", "```kt\n        get() = field.toUpperCase()\n```", "```kt\n}\n```", "```kt\nprintln(player.name)\n```", "```kt\n> ALEX\n```", "```kt\ninterface DiceRoller {\n```", "```kt\n    fun rollDice(): Int\n```", "```kt\n}\n```", "```kt\nimport kotlin.random.*\n```", "```kt\nclass Player(...) : DiceRoller \n```", "```kt\n{\n```", "```kt\n    ...\n```", "```kt\n    fun rollDice() = Random.nextInt(0, 6)\n```", "```kt\n}\n```", "```kt\ninterface DiceRoller {\n```", "```kt\n    fun rollDice() = Random.nextInt(0, 6)\n```", "```kt\n}\n```", "```kt\nabstract class Moveable() {\n```", "```kt\n    private var x: Int = 0\n```", "```kt\n    private var y: Int = 0\n```", "```kt\n    fun move(x: Int, y: Int) {\n```", "```kt\n        this.x = x\n```", "```kt\n        this.y = y\n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nclass ActivePlayer(name: String) : Moveable(), DiceRoller {\n```", "```kt\n...\n```", "```kt\n}\n```", "```kt\nclass ConfusedPlayer(name: String ): ActivePlayer(name)\n```", "```kt\nopen class ActivePlayer (...) : Moveable(), DiceRoller {\n```", "```kt\n...\n```", "```kt\n}\n```", "```kt\nclass ConfusedPlayer(name : String): Player(name) {\n```", "```kt\n    // move() must be declared open\n```", "```kt\n    override fun move(x: Int, y: Int) {\n```", "```kt\n        this.x = y // must be declared protected\n```", "```kt\n        this.y = x // must be declared protected\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nabstract class Moveable() {\n```", "```kt\nprotected var x: Int = 0\n```", "```kt\nprotected var y: Int = 0\n```", "```kt\nopen fun move(x: Int, y: Int) {\n```", "```kt\n        this.x = x\n```", "```kt\n        this.y = y\n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\ndata class User(val username: String, private val \n```", "```kt\n  password: String)\n```", "```kt\ndata class User(val username: String, private val \n```", "```kt\n  password: String) {\n```", "```kt\n    fun hidePassword() = \"*\".repeat(password.length)\n```", "```kt\n}\n```", "```kt\nval user = User(\"Alexey\", \"abcd1234\")\n```", "```kt\nprintln(user.hidePassword()) // ********\n```", "```kt\npublic record User(String username, String password) {}\n```", "```kt\n@JvmRecord\n```", "```kt\ndata class User(val username: String, val password: String)\n```", "```kt\ndata class Password(val password: String) {\n```", "```kt\n    fun hidePassword() = \"*\".repeat(password.length)\n```", "```kt\n}\n```", "```kt\nfun String.hidePassword() = \"*\".repeat(this.length)\n```", "```kt\nval password: String = \"secretpassword\"\n```", "```kt\nprintln(\"Password: ${password.hidePassword()}\")\n```", "```kt\n> Password: **************\n```", "```kt\n// This is not real Kotlin\n```", "```kt\nfun hidePassword(this: String) {\n```", "```kt\n    \"*\".repeat(this.length)\n```", "```kt\n}\n```", "```kt\nval password: String = \"secretpassword\"\n```", "```kt\nprintln(\"Password: ${hidePassword(password)}\")\n```"]