- en: Chapter 8. Handling Multiple Scenes and Levels
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。处理多个场景和层次
- en: In the previous chapter, we discussed a very significant topic of Sprite Kit,
    that is, particle effects and shaders. We also discussed about the `SKEmitterNode`
    object and the `SKShader` object. We also implemented them in our *Platformer*
    game. Implementation of shaders in our game was the most fun part.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了Sprite Kit的一个非常重大的主题，那就是粒子效果和着色器。我们还讨论了`SKEmitterNode`对象和`SKShader`对象。我们还在我们的*平台游戏*中实现了它们。在我们的游戏中实现着色器是最有趣的部分。
- en: In this chapter, we are going to discuss a very important aspect of a game,
    that is, the addition of multiple levels. Having various levels in a game makes
    the game more exciting as incrementing levels increases the complexity of the
    game, making it more difficult to play. As various levels are added to the game,
    it also becomes important to add a pause button, which will enable the game to
    pause whenever required.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论游戏的一个重要方面，那就是增加多个层次。在游戏中拥有各种层次会使游戏更加有趣，因为随着层次的增加，游戏的复杂性也会增加，使其更具挑战性。随着游戏中增加各种层次，添加暂停按钮也变得很重要，这样游戏就可以在需要时暂停。
- en: Optimizing game levels
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化游戏层次
- en: A game continuously running at the same difficulty will become monotonous, and
    soon the user will lose interest in it. So, how can you make your game interesting,
    exciting, and challenging? If your game keeps on increasing its difficulty and
    adds new challenges for the user, it will remain interesting till the end.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个游戏以相同的难度持续运行，将会变得单调乏味，用户很快就会失去兴趣。那么，你如何让你的游戏保持有趣、刺激和具有挑战性？如果你的游戏不断增加难度并为用户添加新的挑战，它将一直保持到游戏结束。
- en: Different levels in a game are nothing but sections or parts of the game. Normally,
    in most of the games, the game scenes are divided into multiple levels. Levels
    divide a game into small excerpts and only one level is loaded at a time. In a
    game, levels can be denoted by different names, such as rounds, stages, chapters,
    acts, maps, worlds, and so on. Different levels can be represented via names or
    numbers. In case of representing a level by a numbering system, it is a clear
    analogy that the higher the number, the greater the level.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中的不同层次不过是游戏的部分或章节。通常，在大多数游戏中，游戏场景被划分为多个层次。层次将游戏划分为小节，并且一次只加载一个层次。在游戏中，层次可以用不同的名称表示，如回合、阶段、章节、幕、地图、世界等。不同的层次可以通过名称或数字来表示。如果用数字系统来表示层次，那么一个明显的类比是数字越高，层次越高。
- en: 'The names of the levels are the first impressions of a game''s level; it is
    advisable to give a brief thought to this. Let''s discuss about the naming of
    levels:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 层次的名称是游戏层次的第一印象；建议对此进行简要思考。让我们来讨论一下层次的命名：
- en: '**Utilitarian**: This mostly comprises of a number system or any other similar
    analogy. This system gives an idea to the player about their progress.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功利主义**：这主要包含一个数字系统或任何其他类似类比。这个系统给玩家提供了一个关于他们进度感的想法。'
- en: '**Location**: This requires using the location of the level as the level name,
    such as city, village, town, and so on. It gives an idea to the player about what
    he/she will be seeing.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：这需要使用层次的地理位置作为层次名称，如城市、村庄、城镇等。这给玩家一个关于他们将会看到什么的想法。'
- en: '**Descriptive**: These seem more like being chapters of a book. This includes
    names such as airship fortress, green hill zone, pillar of autumn, and so on.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述性**：这些更像是书的章节。这包括诸如飞艇堡垒、绿色山丘区、秋之柱等名称。'
- en: These are the three main ways in which you can name your game's level. Apart
    from this, one more method can be to have puny names for the levels. It all depends
    on you to name your level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可以为你的游戏层次命名的主要三种方式。除此之外，还有一种方法可以为层次起一些俏皮的名字。这完全取决于你如何命名你的层次。
- en: To complete a game level, the user has to pass through some constraints or difficulties,
    such as reaching a certain score point or performing a specific task to reach
    the next level. This is commonly known as game progression.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成一个游戏层次，用户必须通过一些限制或困难，例如达到一定的分数点或执行特定任务以到达下一个层次。这通常被称为游戏进度。
- en: 'Programmers usually create different levels in one of the following two ways:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员通常以以下两种方式之一创建不同的层次：
- en: '**A new scene for a new level**: In this method, there is a new scene created
    for each new level.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新境界，新层次**：在这个方法中，为每个新层次创建一个新的场景。'
- en: '**Multiple levels in a single scene**: If the new level does not have much
    changes in the sprites or other game elements, we can also have the facility of
    multiple levels in a single scene. For the games which preferably have just one
    or two elements altered in each new level, single scene can be a good option.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单个场景中的多级**：如果新级别在精灵或其他游戏元素上没有太多变化，我们也可以在单个场景中实现多级功能。对于每个新级别只改变一个或两个元素的游戏，单个场景可能是一个不错的选择。'
- en: A strategy for multiple levels
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多级策略
- en: The different levels in the game define the difficulty of the game, or some
    hold the point at which the user currently should be, in the game.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中的不同级别定义了游戏的难度，或者某些级别表示用户在游戏中当前应该达到的点。
- en: In most games, level 1 will be the name of the first `SKScene` class for your
    first level. There are also a number of good transitions to choose from when transiting
    from one level to another or depicting any other effect, animation or information,
    as the level increases.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数游戏中，级别1将是第一个级别的第一个`SKScene`类的名称。当从一个级别过渡到另一个级别或描述任何其他效果、动画或信息时，随着级别的增加，也有许多好的过渡选项可供选择。
- en: We can either use an array or a dictionary to store player data, such as items,
    health, levels achieved, and so on. Unless you have large amounts of data to be
    saved, `NSUserDefaults` can be the best option.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用数组或字典来存储玩家数据，例如物品、健康、达到的级别等。除非您有大量数据需要保存，否则`NSUserDefaults`可能是最佳选择。
- en: Core Data
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Core Data
- en: For the larger data storage requirement of a game, we can use separate data
    files. For such types of requirements, Apple provides a powerful tool, that is,
    Core Data. This tool is very useful for storing level information, user information,
    and so on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于游戏较大的数据存储需求，我们可以使用单独的数据文件。对于此类要求，Apple提供了一款强大的工具，即Core Data。这个工具对于存储级别信息、用户信息等非常有用。
- en: What is Core Data? It's a framework by Apple that acts as a bridge between your
    game and SQLite and other storage environments. Just like SQL, you can have tables,
    relationships, and queries. The advantages of Core Data over SQLite are that it
    requires no syntax and represents objects and classes unlike in a relational database.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是Core Data？它是由Apple提供的一个框架，充当游戏与SQLite和其他存储环境之间的桥梁。就像SQL一样，您可以有表、关系和查询。与SQLite相比，Core
    Data的优势在于它不需要语法，并且与关系数据库不同，它表示对象和类。
- en: '![Core Data](img/4201_08_05.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Core Data](img/4201_08_05.jpg)'
- en: 'The important terms in Core Data are listed as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Core Data中的重要术语如下：
- en: '**Managed object model**: It is a tool that allows you to model classes (entities),
    relationships, and queries. (This is used by the Core Data framework).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理对象模型**：这是一个允许您建模类（实体）、关系和查询的工具。（这是由Core Data框架使用的）。'
- en: '**Managed objects [each row will be one object]**: This refers to the objects
    that are created in your game. These are your data classes, such as, player information,
    level information, and so on. Each managed object represents a row in your table
    (entity).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理对象[每行一个对象]**：这指的是在您的游戏中创建的对象。这些是您的数据类，例如玩家信息、级别信息等。每个管理对象代表您表（实体）中的一行。'
- en: '**Managed object context**: This is an important object, since it manages all
    the relationships between the context objects that are defined in the model. It
    also keeps track of the status of the context objects. All interactions with the
    underlying database are done through context. The managed object context requests
    the persistent coordinator for data and tells it to save data when necessary.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理对象上下文**：这是一个重要的对象，因为它管理在模型中定义的所有上下文对象之间的关系。它还跟踪上下文对象的状态。所有与底层数据库的交互都通过上下文进行。管理对象上下文请求持久协调器以获取数据，并在必要时告诉它保存数据。'
- en: '**Persistent store coordinator**: Through the persistent store coordinator,
    we provide a location on the device for data storage.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久存储协调器**：通过持久存储协调器，我们在设备上提供了一个数据存储位置。'
- en: '**Persistent object store**: This is a data storage environment on the device.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久对象存储**：这是设备上的一个数据存储环境。'
- en: Adding levels in our Platformer game
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的平台游戏平台中添加级别
- en: Let's add levels in our *Platformer* game. We are going to add the levels in
    a single scene. For the change in difficulty of the level, we can increase the
    speed of the player that is running and we can specify a distance after which
    the level will be increased.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在*平台游戏*中添加级别。我们将在一个场景中添加级别。对于级别难度的变化，我们可以增加玩家跑步的速度，并可以指定一个距离，在该距离后级别将增加。
- en: Now, before we dive into adding levels in the game, first of all, we should
    know the current level being played. Hence, we are going to add the **Level**
    label in the game scene, so that the user can know about the current level being
    played.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们深入添加游戏中的层级之前，首先，我们应该了解正在玩的游戏层级。因此，我们将在游戏场景中添加**层级**标签，以便用户了解正在玩的游戏层级。
- en: Adding the Level label
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加层级标签
- en: The **Level** label is a simple text that will be displayed on the game scene
    and will act as a bit of information to recognize the level which is being played.
    As discussed earlier, you can have the name of the level as a number, location,
    or description. A number, as a level identifier, is the most common etymology
    in games. In our *Platformer* game, we are using numbers as level labels.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**层级**标签是一个简单的文本，它将在游戏场景中显示，并作为识别正在玩的游戏层级的部分信息。如前所述，层级的名称可以是数字、位置或描述。作为层级标识符的数字，在游戏中是最常见的词源。在我们的*平台游戏*中，我们使用数字作为层级标签。'
- en: 'Add the following code in the `GameScene.swift` file. This code will add the
    `level` label functionality in our game:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GameScene.swift`文件中添加以下代码。此代码将在我们的游戏中添加`level`标签功能：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, we are adding the `level` label using `SKLabelNode` and
    applying the font, `chalkduster`. The initial level is set to `1` and from there,
    it progresses.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用`SKLabelNode`添加了`level`标签，并应用了字体`chalkduster`。初始层级设置为`1`，然后从那里开始递增。
- en: 'This is how the game will look after adding the `label` to identify the **Level:
    l**:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在添加了用于标识**层级：l**的`label`后游戏的外观：
- en: '![Adding the Level label](img/4201_08_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![添加层级标签](img/4201_08_01.jpg)'
- en: Adding levels
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加层级
- en: As the game progresses, the difficulty level increases. Increase of the difficulty
    level can be done based on any number of factors; we can increment the level when
    a player crosses a specific number of blocks, or when the score reaches a certain
    limit, or when the time increases.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 随着游戏的进行，难度级别会增加。难度级别的增加可以根据任何数量的因素进行；我们可以当玩家跨越特定数量的方块时增加层级，或者当分数达到一定限制时，或者当时间增加时增加层级。
- en: 'In our *Platformer* game, we are going to increase difficulty levels based
    on the number of blocks crossed. As a game progresses, we are going to identify
    the need for a next level as shown as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的*平台游戏*中，我们将根据跨越的方块数量增加难度级别。随着游戏的进行，我们将识别出需要下一层的情况，如下所示：
- en: '**Level 1**: This level loads up at the start of the game'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层级 1**：这个层级在游戏开始时加载。'
- en: '**Level 2**: When the player jumps from the fifth block, we are going to start
    the second level'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层级 2**：当玩家从第五个方块跳起时，我们将开始第二层。'
- en: '**Level 3**: When the player jumps from the tenth block, we are going to start
    the third level'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层级 3**：当玩家从第十个方块跳起时，我们将开始第三层。'
- en: '**Last level**: When the player has jumped from 20 blocks, we are going to
    introduce the last level of the *Platformer* game'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最后一层**：当玩家从20个方块跳起时，我们将引入*平台游戏*的最后一层。'
- en: With every increase in level, we will also increase the difficulty of the game.
    In our game, we are going to increase ground speed, which will make the game more
    difficult to play.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 随着层级的每次提升，我们也将增加游戏的难度。在我们的游戏中，我们将增加地面速度，这将使游戏更难玩。
- en: 'The functionality to add levels is to be added in the `blockRunner` method
    in the `GameScene.swift` file. Following is the method with the functionality
    added:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加层级功能，需要在`GameScene.swift`文件中的`blockRunner`方法中添加。以下是添加了功能的代码：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, inside the `else` statement marked `#1`, the code to
    increase the level is added. The code has a nested `if`, `else if` condition where
    we have checked the number of blocks crossed, and based on that, we have increased
    the level and the ground speed of the game.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，在标记为`#1`的`else`语句内部，添加了增加层级的代码。该代码有一个嵌套的`if`，`else if`条件，其中我们检查了跨越的方块数量，并根据这个数量增加了层级和游戏的地面速度。
- en: There are four statements in the preceding code depicting the level and ground
    speed increase. The second level starts once the player crosses 5 blocks, and
    the ground speed also increases. Similarly, the level and ground speed increases
    after 10 and 20 blocks.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码中有四个描述层级和地面速度增加的语句。第二层在玩家跨越5个方块后开始，地面速度也会增加。同样，在跨越10和20个方块后，层级和地面速度也会增加。
- en: Now, we have successfully added the functionality to increase the level once
    a certain number of blocks are crossed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经成功添加了在跨越一定数量的方块后增加层级的函数。
- en: 'Following is how the **Level: 2** label will look when the player crosses five
    blocks:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是如何在玩家穿越五个方块时，**Level: 2** 标签将看起来：'
- en: '![Adding levels](img/4201_08_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![添加关卡](img/4201_08_04.jpg)'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For games with a higher number of levels, it is advisable to make a separate
    file for the level logic code. For example, if we had 10 different levels in our
    game, then we too would have created a separate file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于拥有更多关卡的游戏，建议为关卡逻辑代码创建一个单独的文件。例如，如果我们游戏中拥有10个不同的关卡，那么我们也会创建一个单独的文件。
- en: Adding the pause functionality
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加暂停功能
- en: To pause a game during gameplay is an important functionality. Our game will
    benefit from the `pause` functionality; it will allow the player to continue from
    where they left off previously.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏过程中暂停游戏是一个重要的功能。我们的游戏将受益于 `pause` 功能；它将允许玩家从上次离开的地方继续游戏。
- en: 'Let''s add the `pause` functionality:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加 `pause` 功能：
- en: 'Primarily, we''ll create a **Play**/**Pause** button for `GameScene` and configure
    the position and image for the button. We will add the following lines of code
    inside the `GameScene.swift` class:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要的，我们将为 `GameScene` 创建一个 **Play/**Pause** 按钮，并配置按钮的位置和图像。我们将在 `GameScene.swift`
    类内部添加以下代码行：
- en: '[PRE2]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Set the attributes of the `pauseBtn` label, such as `size`, `position`, and
    so on, as we did earlier for the other labels in the `addPlayPauseButton()` method.
    This is how it will look:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `pauseBtn` 标签的属性，例如 `size`、`position` 等，就像我们在 `addPlayPauseButton()` 方法中为其他标签所做的那样。这将是这样看起来：
- en: '[PRE3]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Please make sure that you call it from the `didMoveToView()` method also.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请确保您也从 `didMoveToView()` 方法中调用它。
- en: 'Now, we have to add the functionality to actually pause the game. We do this
    by adding the following code in the `touchesBegan()` method:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须添加实际暂停游戏的功能。我们通过在 `touchesBegan()` 方法中添加以下代码来实现这一点：
- en: '[PRE4]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code will pause the game when the button is pressed, and if the
    button is pressed again, the game will be resumed.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将在按钮被按下时暂停游戏，如果按钮再次被按下，游戏将继续。
- en: 'The following screenshot shows how the game will look after adding the `pause`
    functionality; a pause button appears in the top right corner of the screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了添加 `pause` 功能后游戏的外观；截图的右上角出现了一个暂停按钮：
- en: '![Adding the pause functionality](img/4201_08_02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![添加暂停功能](img/4201_08_02.jpg)'
- en: Notice the pause button in the top right corner; tapping this button will pause
    the game.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意右上角的暂停按钮；点击此按钮将暂停游戏。
- en: Adding the NODE MENU button
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 NODE MENU 按钮
- en: 'We have created a node menu scene that displays examples of the nodes in a
    game. We are now going to add a button on the main menu, which will allow users
    to access the node menu scene:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个显示游戏节点示例的节点菜单场景。我们现在将在主菜单上添加一个按钮，允许用户访问节点菜单场景：
- en: 'Firstly, we have to create an instance of `NodeMenuScene` in the beginning
    with the following line of code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须在开始时使用以下代码行创建 `NodeMenuScene` 的实例：
- en: '[PRE5]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we have to set attributes of the **NODE MENU** button label, as we did
    for the **Level:** label earlier. For this, add the following code in the `addNodeMenuSceneBtn()`
    method and call it from the `didMoveToView()` method also:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须设置 **NODE MENU** 按钮标签的属性，就像我们之前为 **Level:** 标签所做的那样。为此，在 `addNodeMenuSceneBtn()`
    方法中添加以下代码，并从 `didMoveToView()` 方法中调用它：
- en: '[PRE6]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, add the following code in the `touchesBegan()` method to move for the
    node menu scene with a tap of the `NODEMENU` button we have just created:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `touchesBegan()` 方法中添加以下代码，通过点击我们刚刚创建的 `NODEMENU` 按钮来移动到节点菜单场景：
- en: '[PRE7]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a transition from our present scene using the following code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建从我们当前场景的过渡：
- en: '[PRE8]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we created the method, `goToNodeMenuScene()`, and added
    a transition effect for the scene to go from one to another with the effect of
    flipping horizontally.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了 `goToNodeMenuScene()` 方法，并为场景从一个切换到另一个添加了水平翻转的过渡效果。
- en: 'The following screenshot shows how the main menu will look, after the button
    to the access node menu scene is created:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了创建访问节点菜单场景按钮后，主菜单将看起来如何：
- en: '![Adding the NODE MENU button](img/4201_08_03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![添加 NODE MENU 按钮](img/4201_08_03.jpg)'
- en: When someone taps on the button, **NODE MENU**, the node menu scene will open
    on the screen.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人点击按钮，**NODE MENU**，节点菜单场景将在屏幕上打开。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we added difficulty levels in our *Platformer* game. We updated
    our game by creating a level label and level increment functionality. An important
    feature, *PAUSE*, is now provided. Also, we learned how to add a scene in our
    game by integrating node menu scene through the **NODE MENU** button.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在*平台游戏*中增加了难度级别。我们通过创建关卡标签和关卡递增功能来更新了我们的游戏。现在提供了一个重要功能，*暂停*。此外，我们还学会了如何通过**节点菜单**按钮集成节点菜单场景来在我们的游戏中添加场景。
- en: In the next chapter, we are going to discuss about performance enhancement techniques,
    along with some important extras that are going to be added in our *Platformer*
    game.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论性能提升技术，以及将要添加到我们的*平台游戏*中的重要额外功能。
