- en: Chapter 8. Handling Multiple Scenes and Levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed a very significant topic of Sprite Kit,
    that is, particle effects and shaders. We also discussed about the `SKEmitterNode`
    object and the `SKShader` object. We also implemented them in our *Platformer*
    game. Implementation of shaders in our game was the most fun part.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to discuss a very important aspect of a game,
    that is, the addition of multiple levels. Having various levels in a game makes
    the game more exciting as incrementing levels increases the complexity of the
    game, making it more difficult to play. As various levels are added to the game,
    it also becomes important to add a pause button, which will enable the game to
    pause whenever required.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing game levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A game continuously running at the same difficulty will become monotonous, and
    soon the user will lose interest in it. So, how can you make your game interesting,
    exciting, and challenging? If your game keeps on increasing its difficulty and
    adds new challenges for the user, it will remain interesting till the end.
  prefs: []
  type: TYPE_NORMAL
- en: Different levels in a game are nothing but sections or parts of the game. Normally,
    in most of the games, the game scenes are divided into multiple levels. Levels
    divide a game into small excerpts and only one level is loaded at a time. In a
    game, levels can be denoted by different names, such as rounds, stages, chapters,
    acts, maps, worlds, and so on. Different levels can be represented via names or
    numbers. In case of representing a level by a numbering system, it is a clear
    analogy that the higher the number, the greater the level.
  prefs: []
  type: TYPE_NORMAL
- en: 'The names of the levels are the first impressions of a game''s level; it is
    advisable to give a brief thought to this. Let''s discuss about the naming of
    levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Utilitarian**: This mostly comprises of a number system or any other similar
    analogy. This system gives an idea to the player about their progress.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: This requires using the location of the level as the level name,
    such as city, village, town, and so on. It gives an idea to the player about what
    he/she will be seeing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Descriptive**: These seem more like being chapters of a book. This includes
    names such as airship fortress, green hill zone, pillar of autumn, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the three main ways in which you can name your game's level. Apart
    from this, one more method can be to have puny names for the levels. It all depends
    on you to name your level.
  prefs: []
  type: TYPE_NORMAL
- en: To complete a game level, the user has to pass through some constraints or difficulties,
    such as reaching a certain score point or performing a specific task to reach
    the next level. This is commonly known as game progression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Programmers usually create different levels in one of the following two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A new scene for a new level**: In this method, there is a new scene created
    for each new level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple levels in a single scene**: If the new level does not have much
    changes in the sprites or other game elements, we can also have the facility of
    multiple levels in a single scene. For the games which preferably have just one
    or two elements altered in each new level, single scene can be a good option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A strategy for multiple levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The different levels in the game define the difficulty of the game, or some
    hold the point at which the user currently should be, in the game.
  prefs: []
  type: TYPE_NORMAL
- en: In most games, level 1 will be the name of the first `SKScene` class for your
    first level. There are also a number of good transitions to choose from when transiting
    from one level to another or depicting any other effect, animation or information,
    as the level increases.
  prefs: []
  type: TYPE_NORMAL
- en: We can either use an array or a dictionary to store player data, such as items,
    health, levels achieved, and so on. Unless you have large amounts of data to be
    saved, `NSUserDefaults` can be the best option.
  prefs: []
  type: TYPE_NORMAL
- en: Core Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the larger data storage requirement of a game, we can use separate data
    files. For such types of requirements, Apple provides a powerful tool, that is,
    Core Data. This tool is very useful for storing level information, user information,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: What is Core Data? It's a framework by Apple that acts as a bridge between your
    game and SQLite and other storage environments. Just like SQL, you can have tables,
    relationships, and queries. The advantages of Core Data over SQLite are that it
    requires no syntax and represents objects and classes unlike in a relational database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Core Data](img/4201_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The important terms in Core Data are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Managed object model**: It is a tool that allows you to model classes (entities),
    relationships, and queries. (This is used by the Core Data framework).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managed objects [each row will be one object]**: This refers to the objects
    that are created in your game. These are your data classes, such as, player information,
    level information, and so on. Each managed object represents a row in your table
    (entity).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managed object context**: This is an important object, since it manages all
    the relationships between the context objects that are defined in the model. It
    also keeps track of the status of the context objects. All interactions with the
    underlying database are done through context. The managed object context requests
    the persistent coordinator for data and tells it to save data when necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Persistent store coordinator**: Through the persistent store coordinator,
    we provide a location on the device for data storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Persistent object store**: This is a data storage environment on the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding levels in our Platformer game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add levels in our *Platformer* game. We are going to add the levels in
    a single scene. For the change in difficulty of the level, we can increase the
    speed of the player that is running and we can specify a distance after which
    the level will be increased.
  prefs: []
  type: TYPE_NORMAL
- en: Now, before we dive into adding levels in the game, first of all, we should
    know the current level being played. Hence, we are going to add the **Level**
    label in the game scene, so that the user can know about the current level being
    played.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Level label
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Level** label is a simple text that will be displayed on the game scene
    and will act as a bit of information to recognize the level which is being played.
    As discussed earlier, you can have the name of the level as a number, location,
    or description. A number, as a level identifier, is the most common etymology
    in games. In our *Platformer* game, we are using numbers as level labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code in the `GameScene.swift` file. This code will add the
    `level` label functionality in our game:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are adding the `level` label using `SKLabelNode` and
    applying the font, `chalkduster`. The initial level is set to `1` and from there,
    it progresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the game will look after adding the `label` to identify the **Level:
    l**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Level label](img/4201_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the game progresses, the difficulty level increases. Increase of the difficulty
    level can be done based on any number of factors; we can increment the level when
    a player crosses a specific number of blocks, or when the score reaches a certain
    limit, or when the time increases.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our *Platformer* game, we are going to increase difficulty levels based
    on the number of blocks crossed. As a game progresses, we are going to identify
    the need for a next level as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Level 1**: This level loads up at the start of the game'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 2**: When the player jumps from the fifth block, we are going to start
    the second level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 3**: When the player jumps from the tenth block, we are going to start
    the third level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Last level**: When the player has jumped from 20 blocks, we are going to
    introduce the last level of the *Platformer* game'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With every increase in level, we will also increase the difficulty of the game.
    In our game, we are going to increase ground speed, which will make the game more
    difficult to play.
  prefs: []
  type: TYPE_NORMAL
- en: 'The functionality to add levels is to be added in the `blockRunner` method
    in the `GameScene.swift` file. Following is the method with the functionality
    added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, inside the `else` statement marked `#1`, the code to
    increase the level is added. The code has a nested `if`, `else if` condition where
    we have checked the number of blocks crossed, and based on that, we have increased
    the level and the ground speed of the game.
  prefs: []
  type: TYPE_NORMAL
- en: There are four statements in the preceding code depicting the level and ground
    speed increase. The second level starts once the player crosses 5 blocks, and
    the ground speed also increases. Similarly, the level and ground speed increases
    after 10 and 20 blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have successfully added the functionality to increase the level once
    a certain number of blocks are crossed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is how the **Level: 2** label will look when the player crosses five
    blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding levels](img/4201_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For games with a higher number of levels, it is advisable to make a separate
    file for the level logic code. For example, if we had 10 different levels in our
    game, then we too would have created a separate file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the pause functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To pause a game during gameplay is an important functionality. Our game will
    benefit from the `pause` functionality; it will allow the player to continue from
    where they left off previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the `pause` functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Primarily, we''ll create a **Play**/**Pause** button for `GameScene` and configure
    the position and image for the button. We will add the following lines of code
    inside the `GameScene.swift` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the attributes of the `pauseBtn` label, such as `size`, `position`, and
    so on, as we did earlier for the other labels in the `addPlayPauseButton()` method.
    This is how it will look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please make sure that you call it from the `didMoveToView()` method also.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we have to add the functionality to actually pause the game. We do this
    by adding the following code in the `touchesBegan()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will pause the game when the button is pressed, and if the
    button is pressed again, the game will be resumed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the game will look after adding the `pause`
    functionality; a pause button appears in the top right corner of the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the pause functionality](img/4201_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice the pause button in the top right corner; tapping this button will pause
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the NODE MENU button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have created a node menu scene that displays examples of the nodes in a
    game. We are now going to add a button on the main menu, which will allow users
    to access the node menu scene:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we have to create an instance of `NodeMenuScene` in the beginning
    with the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we have to set attributes of the **NODE MENU** button label, as we did
    for the **Level:** label earlier. For this, add the following code in the `addNodeMenuSceneBtn()`
    method and call it from the `didMoveToView()` method also:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following code in the `touchesBegan()` method to move for the
    node menu scene with a tap of the `NODEMENU` button we have just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a transition from our present scene using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we created the method, `goToNodeMenuScene()`, and added
    a transition effect for the scene to go from one to another with the effect of
    flipping horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the main menu will look, after the button
    to the access node menu scene is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the NODE MENU button](img/4201_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When someone taps on the button, **NODE MENU**, the node menu scene will open
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added difficulty levels in our *Platformer* game. We updated
    our game by creating a level label and level increment functionality. An important
    feature, *PAUSE*, is now provided. Also, we learned how to add a scene in our
    game by integrating node menu scene through the **NODE MENU** button.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to discuss about performance enhancement techniques,
    along with some important extras that are going to be added in our *Platformer*
    game.
  prefs: []
  type: TYPE_NORMAL
