- en: Chapter 1. Getting and Installing the iOS SDK Development Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：获取和安装 iOS SDK 开发工具
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Downloading and installing the iOS SDK
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装 iOS SDK
- en: Using Xcode to create an iOS project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Xcode 创建 iOS 项目
- en: Using Interface Builder to create the user interface
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Interface Builder 创建用户界面
- en: Building the user interface for our application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的应用程序构建用户界面
- en: Creating outlets to Interface Builder objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建连接到 Interface Builder 对象的出口
- en: Creating actions that respond to user actions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建响应用户操作的动作用户界面
- en: Compiling your project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译您的项目
- en: Using the iOS Simulator to test your applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 iOS 模拟器测试您的应用程序
- en: Configuring and using compiler directives
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和使用编译器指令
- en: Debugging your iOS applications using Xcode
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Xcode 调试您的 iOS 应用程序
- en: Using the Clang Static Analyzer to examine your code
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Clang 静态分析器检查您的代码
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Welcome to the exciting world of iOS programming using iOS 6\. This latest release
    of the mobile operating system is packed with some great new features and improvements,
    and comes with over 200 new features as well as an updated SDK featuring over
    1,500 new development APIs that can be incorporated into your applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到使用 iOS 6 的激动人心的 iOS 编程世界。这个移动操作系统的最新版本包含了一些出色的全新功能和改进，并提供了超过 200 个新功能，以及一个更新的
    SDK，其中包含超过 1,500 个新的开发 API，这些 API 可以集成到您的应用程序中。
- en: 'In this chapter, we will look at what **integrated development environments**
    (**IDEs**) and **software development kits** (**SDKs**) are needed to develop
    applications for the iOS platform, Apple''s operating system for mobile devices.
    We will explain the importance of each tool''s role in the development cycle,
    before finally developing our first application. The tools that are required to
    develop applications for the iOS platform are explained, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨开发 iOS 平台应用程序所需的 **集成开发环境（IDE**）和**软件开发工具包（SDK**）。我们将解释每个工具在开发周期中的作用的重要性，最后开发我们的第一个应用程序。以下是开发
    iOS 平台应用程序所需的工具说明：
- en: '**An Intel-based Mac computer running the Snow Leopard (10.6.*), Lion (10.7.*),
    or OS X Mountain Lion (10.8.*) operating system**: The essential development tools
    cannot be installed on any other computer platforms, so if you are running another
    processor type (such as the older Mac G4 or Mac G5), you''re out of luck.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行 Snow Leopard（10.6.*）、Lion（10.7.*）或 OS X Mountain Lion（10.8.*）操作系统的基于 Intel
    的 Mac 计算机**：基本开发工具不能安装在其他计算机平台上，因此如果您正在运行其他处理器类型（如较旧的 Mac G4 或 Mac G5），那么您就没有运气了。'
- en: '**iOS 5 SDK (or higher)**: In order to download the Apple iOS SDK, you must
    be registered as an Apple developer. The iOS SDK consists of the following components:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS 5 SDK（或更高版本）**：为了下载 Apple iOS SDK，您必须注册为 Apple 开发者。iOS SDK 包括以下组件：'
- en: '| Component | Description |'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **组件** | **描述** |'
- en: '| --- | --- |'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Xcode** | This is the main IDE that enables you to develop, edit, and debug
    native applications for the iOS and Mac platforms using the Objective-C programming
    language. |'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **Xcode** | 这是主要的 IDE，允许您使用 Objective-C 编程语言开发、编辑和调试 iOS 和 Mac 平台的原生应用程序。|'
- en: '| **iOS Simulator** | This is a Cocoa-based application that enables you to
    debug your iOS applications on the computer, without the need of having an iOS
    device. There are many iOS features that simply won''t work within the Simulator,
    so a device is required if an application uses those features, that is, the Core
    Location and MapKit frameworks. |'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **iOS 模拟器** | 这是一个基于 Cocoa 的应用程序，它允许您在计算机上调试 iOS 应用程序，而无需拥有 iOS 设备。在模拟器中，许多
    iOS 功能根本无法工作，因此如果应用程序使用这些功能，则需要设备，即 Core Location 和 MapKit 框架。|'
- en: '| **Instruments** | These are the analysis tools that help you optimize your
    applications and monitor for memory leaks during execution of your application
    at real time. |'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **Instruments** | 这些是分析工具，可以帮助您优化应用程序，并在应用程序执行过程中实时监控内存泄漏。|'
- en: '| **Dashcode** | This enables you to develop web-based iOS applications and
    dashboard widgets. |'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **Dashcode** | 这允许您开发基于 Web 的 iOS 应用程序和仪表板小部件。|'
- en: Downloading and installing the iOS SDK
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装 iOS SDK
- en: This recipe includes information on how to sign up to the Apple Developer Program,
    as well as how to download and install the necessary tools needed to develop applications
    using Xcode.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方包括如何注册 Apple 开发者计划的信息，以及如何下载和安装使用 Xcode 开发应用程序所需的必要工具。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before you can start building iOS applications, you must first join up as a
    registered user of the iOS Developer Program in order to download all of the necessary
    components to our computer. At the time of writing, the latest version is 4.5.2,
    and iOS SDK's latest version is 6.x. The registration process is free, and provides
    you access to the iOS SDK and other developer resources that are really useful
    for getting you started.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始构建 iOS 应用程序之前，您必须首先作为 iOS 开发者计划的注册用户加入，以便将所有必要的组件下载到我们的电脑上。在撰写本文时，最新版本是
    4.5.2，iOS SDK 的最新版本是 6.x。注册过程是免费的，并为您提供访问 iOS SDK 和其他对您开始开发非常有用的开发者资源的权限。
- en: 'The following short list outlines some of the things that you will be able
    to access when you become a member of the iOS Developer Program:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下简短列表概述了您成为 iOS 开发者计划的成员后可以访问的一些内容：
- en: Helpful getting started guides to help you get up and running quickly
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有助于快速入门的实用指南
- en: Helpful tips that show you how to submit your apps to the App Store
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示如何将您的应用程序提交到 App Store 的实用技巧
- en: Ability to download current releases of the iOS software
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够下载 iOS 软件的当前版本
- en: Ability to beta test releases of iOS and the iOS SDK
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够测试 iOS 和 iOS SDK 的发布版本
- en: Access to the Apple Developer Forums
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问苹果开发者论坛
- en: Note
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Whether you are developing applications for the iPhone or iPad, these use the
    same **operating system** (**OS**) and iOS SDK to allow you to create universal
    applications that will work with both the iPhone and iPad running on iOS 4.3.*
    and above.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无论您是为 iPhone 还是 iPad 开发应用程序，它们都使用相同的 **操作系统**（**OS**）和 iOS SDK，允许您创建适用于运行 iOS
    4.3.* 及以上版本的 iPhone 和 iPad 的通用应用程序。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To prepare your computer for iOS development, you will need to download and
    install the necessary components in the following order:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备您的电脑进行 iOS 开发，您需要按照以下顺序下载和安装必要的组件：
- en: To sign up to the iOS Developer Program, you will need to go to [https://developer.apple.com/devcenter/ios/index.action](https://developer.apple.com/devcenter/ios/index.action)
    and then click on the **Log in** button to proceed, as shown in the following
    screenshot:![How to do it...](img/3349_01_01.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要注册 iOS 开发者计划，您需要访问 [https://developer.apple.com/devcenter/ios/index.action](https://developer.apple.com/devcenter/ios/index.action)，然后点击
    **登录** 按钮继续，如下面的截图所示：![如何操作...](img/3349_01_01.jpg)
- en: Once you have signed up, you will then be able to download the iOS SDK and proceed
    with installing it onto your computer.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册后，您将能够下载 iOS SDK 并继续将其安装到您的电脑上。
- en: Xcode can also be obtained from the Mac App Store at the following link [http://itunes.apple.com/us/app/xcode/id497799835?mt=12](http://itunes.apple.com/us/app/xcode/id497799835?mt=12),
    depending on whether you have chosen the version for Mac OSX Lion. The installation
    procedure in the remaining steps shows how to go about installing the iOS development
    tools for Snow Leopard.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以从以下链接的 Mac App Store 获取 Xcode [http://itunes.apple.com/us/app/xcode/id497799835?mt=12](http://itunes.apple.com/us/app/xcode/id497799835?mt=12)，具体取决于您是否选择了适用于
    Mac OSX Lion 的版本。以下步骤中的安装过程显示了如何安装 Snow Leopard 的 iOS 开发工具。
- en: Once you have downloaded the SDK for Snow Leopard, you can proceed with installing
    it. You will be required to accept a few licensing agreements. Once you have done
    that, all you need to do is select the destination folder of the installation
    and click on the **Continue** button.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完 Snow Leopard 的 SDK 后，您可以继续安装它。您将需要接受一些许可协议。完成这些后，您需要做的就是选择安装的目标文件夹，然后点击
    **继续** 按钮。
- en: If you select the default settings during the installation phase, the various
    tools will be installed in the `/Developer/Applications` folder. The installation
    process takes you through the custom installation options screen, as shown in
    the following screenshot:![How to do it...](img/3349_01_02.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在安装阶段选择默认设置，各种工具将被安装在 `/Developer/Applications` 文件夹中。安装过程会带您通过自定义安装选项屏幕，如下面的截图所示：![如何操作...](img/3349_01_02.jpg)
- en: These options give you a little more control over the installation process.
    For example, you are able to specify the folder location in which you would like
    to install Xcode, as well as settings for a variety of other options.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项为您提供了对安装过程的一定程度的控制。例如，您可以选择您想要安装 Xcode 的文件夹位置，以及各种其他选项的设置。
- en: How it works...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Now that everything has been installed and is ready to go, our next step is
    to take a look at what each component within the Xcode and iOS SDK is needed for.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都已经安装并准备就绪，我们的下一步是查看 Xcode 和 iOS SDK 中每个组件需要什么。
- en: As mentioned in the *Introduction* section of this chapter, the iOS SDK is made
    up of three important components. The main component, Xcode IDE, is Apple's IDE
    that allows for developing applications for the iOS and Mac platforms, and uses
    Objective-C as the default programming language.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章**简介**部分所述，iOS SDK 由三个重要组件组成。主要组件是 Xcode IDE，这是苹果的 IDE，允许开发 iOS 和 Mac 平台的应用程序，并使用
    Objective-C 作为默认编程语言。
- en: 'This environment allows for better integration and editing of source code,
    and building, compiling, and debugging your applications. It contains a number
    of tools that can help with diagnosing issues with your iOS applications. The
    topic on instruments, will be covered later on in this book. The IDE contains
    a device information window, called **Organizer – Devices**, which is shown in
    the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此环境允许更好地集成和编辑源代码，以及构建、编译和调试您的应用程序。它包含许多可以帮助诊断您的 iOS 应用程序问题的工具。关于仪器的主题将在本书的后面部分介绍。IDE
    包含一个设备信息窗口，称为**组织者 – 设备**，如下面的截图所示：
- en: '![How it works...](img/3349_01_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3349_01_03.jpg)'
- en: This screen is necessary to install the various certificates and provisioning
    profiles that are required for deploying an application onto a device for testing,
    or distribution through the Apple App Store. Using the **Organizer – Devices**
    window, you can view debugging information of your applications, crash logs, as
    well as the ability to take screenshots from the device.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕是安装部署到设备进行测试或在苹果应用商店分发所需的各种证书和配置文件所必需的。使用**组织者 – 设备**窗口，您可以查看您应用程序的调试信息、崩溃日志，以及从设备截取屏幕截图的能力。
- en: '**Interface Builder**: This is the user interface designer that is integrated
    within the IDE. Interface Builder provides you with all the necessary functionality
    to construct an application''s user interface. All of your objects are stored
    within one or more resource files and contain the associated relationship to each
    of the objects. Any changes that you make to the form design are automatically
    synchronized back to your code.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**界面构建器**：这是集成在 IDE 中的用户界面设计器。界面构建器为您提供了构建应用程序用户界面所需的所有必要功能。所有对象都存储在一个或多个资源文件中，并包含与每个对象的关联关系。您对表单设计所做的任何更改都会自动同步回您的代码。'
- en: '**iOS Simulator**: This is an extremely useful tool that acts as a testbed
    for your applications without the need for using an actual device, whether an
    iPad or any other iOS device. Whenever you build and run your application, Xcode
    installs your application on the iOS Simulator and launches this for you automatically.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS 模拟器**：这是一个非常有用的工具，可以作为测试床来测试您的应用程序，而无需使用实际的设备，无论是 iPad 还是任何其他 iOS 设备。每次您构建和运行应用程序时，Xcode
    都会自动将您的应用程序安装到 iOS 模拟器上并启动它。'
- en: The iOS Simulator has the capability of simulating the different iOS versions,
    and this can become extremely useful if your application needs to be installed
    on different iOS platforms, as well as testing and debugging errors reported in
    your applications when run under the different iOS versions.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: iOS 模拟器具有模拟不同 iOS 版本的能力，如果您的应用程序需要安装在不同的 iOS 平台上，或者测试和调试在不同 iOS 版本下运行时应用程序中报告的错误，这将变得极其有用。
- en: There's more…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The following list provides you with the links that contain the tools and information
    for installing them:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表提供了包含安装所需工具和信息的链接：
- en: '**Apple iOS Developer** **Portal**: [https://developer.apple.com/devcenter/ios/index.action](https://developer.apple.com/devcenter/ios/index.action)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**苹果 iOS 开发者门户**：[https://developer.apple.com/devcenter/ios/index.action](https://developer.apple.com/devcenter/ios/index.action)'
- en: '**Apple Developer Tools** **information**: [https://developer.apple.com/technologies/tools/whats-new.html](https://developer.apple.com/technologies/tools/whats-new.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**苹果开发者工具信息**：[https://developer.apple.com/technologies/tools/whats-new.html](https://developer.apple.com/technologies/tools/whats-new.html)'
- en: See also
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Compiling your project* recipe
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编译您的项目**配方'
- en: The *Debugging your iOS applications using Xcode* recipe
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Xcode 调试您的 iOS 应用程序**配方'
- en: The *Using provisioning profiles to install an iOS app on an iOS device* recipe
    in [Chapter 10](ch10.html "Chapter 10. Packaging and Deploying Your Application"),
    *Packaging and Deploying Your Application*
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 10 章*打包和部署您的应用程序*中的*使用配置文件在 iOS 设备上安装 iOS 应用程序*食谱，*打包和部署您的应用程序*，[第 10 章](ch10.html
    "第 10 章。打包和部署您的应用程序")。
- en: The *Submitting an application to the App Store using iTunes Connect* recipe
    in [Chapter 10](ch10.html "Chapter 10. Packaging and Deploying Your Application"),
    *Packaging and Deploying Your Application*
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 10 章*打包和部署您的应用程序*中的*使用 iTunes Connect 提交应用程序到 App Store*食谱，*打包和部署您的应用程序*，[第
    10 章](ch10.html "第 10 章。打包和部署您的应用程序")。
- en: Using Xcode to create an iOS project
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Xcode 创建 iOS 项目
- en: In this recipe, we will see how easy it is to create our very first iOS application
    project using the Xcode IDE.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将看到使用 Xcode IDE 创建我们的第一个 iOS 应用程序项目是多么容易。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Now that we have all of the preliminary components installed, we will start
    to create our very first **HelloWorld** project using Xcode.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有初步组件，我们将开始使用 Xcode 创建我们的第一个**HelloWorld**项目。
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin with creating a new Xcode project, perform the following simple steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建新的 Xcode 项目，请执行以下简单步骤：
- en: Launch Xcode from the `/Developer/Applications` folder.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `/Developer/Applications` 文件夹启动 Xcode。
- en: Choose **Create a new Xcode project**, or **File** | **New Project**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建新的 Xcode 项目**，或**文件** | **新建项目**。
- en: Select **Single View Application** from the list of available templates, as
    shown in the following screenshot:![How to do it...](img/3349_01_04.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用模板列表中选择**单视图应用程序**，如图下所示：![如何操作...](img/3349_01_04.jpg)
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮以继续向导的下一步。
- en: Next, enter `HelloWorld` as the name of your project.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将项目名称输入为 `HelloWorld`。
- en: Select **iPhone** from under the **Devices** drop-down menu.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**设备**下拉菜单中选择**iPhone**。
- en: Ensure that the **Use Storyboards** checkbox has not been checked.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保未勾选**使用 Storyboards**复选框。
- en: Ensure that the **Use Automatic Reference Counting** checkbox has been checked.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已勾选**使用自动引用计数**复选框。
- en: Ensure that the **Include Unit Tests** checkbox has not been checked.![How to
    do it...](img/3349_01_05.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保未勾选**包含单元测试**复选框。![如何操作...](img/3349_01_05.jpg)
- en: Note
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Company Identifier for your app needs to be unique. Apple recommends that
    you use the reverse domain style (for example, `com.domainName.appName`).
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的应用程序的公司标识符需要是唯一的。苹果建议您使用反向域名样式（例如，`com.domainName.appName`）。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮以继续向导的下一步。
- en: Specify the location where you would like to save your project.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定您想要保存项目的位置。
- en: Then, click on the **Create** button to save your project at the specified location.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**创建**按钮以在指定位置保存您的项目。
- en: Once your project has been created, you will be presented with the Xcode development
    environment, along with the project files that the template created for you. If
    you want, you can build and run the application. The iOS Simulator will start
    and show a blank white screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建项目，您将看到 Xcode 开发环境以及模板为您创建的项目文件。如果您愿意，可以构建并运行应用程序。iOS 模拟器将启动并显示一个空白白色屏幕。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now that we have created our **HelloWorld** project, let's take the time to
    see what the template wizard created for us.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的**HelloWorld**项目，让我们花点时间看看模板向导为我们创建了什么。
- en: When Xcode creates a new iOS project, it also creates a series of files. Depending
    on what options have been selected during this process may result in some additional
    files being created.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Xcode 创建新的 iOS 项目时，它也会创建一系列文件。根据在此过程中选择哪些选项，可能会创建一些额外的文件。
- en: 'The following screenshot shows a list of the essentials files that form part
    of an iOS project:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了构成 iOS 项目一部分的基本文件列表：
- en: '![How it works...](img/3349_01_06.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3349_01_06.jpg)'
- en: 'The following are the important files to take a note of:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要注意的重要文件：
- en: '`main.m`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.m`'
- en: '`AppDelegate.h` and `AppDelegate.m`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppDelegate.h` 和 `AppDelegate.m`'
- en: '`ViewController.h` and `ViewController.m`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewController.h` 和 `ViewController.m`'
- en: '`HelloWorld-info.plist`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloWorld-info.plist`'
- en: main.m
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: main.m
- en: The main function is where the runtime lifecycle of your program starts and
    ends. The `UIApplicationMainstarts` function runs the loop that is responsible
    for sending notifications to the application through the `AppDelegate` class,
    and contains the various event handlers that can be overridden. This function
    takes four parameters and uses them to initialize the application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 主函数是程序运行时生命周期开始和结束的地方。`UIApplicationMainstarts` 函数运行循环，负责通过 `AppDelegate` 类向应用程序发送通知，并包含可以覆盖的各种事件处理器。此函数接受四个参数，并使用它们来初始化应用程序。
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There's more…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You will notice that within our main function, it contains `@autoreleasepool`,
    which is an object to support the memory management system for your iOS device.
    Next, we are including the `argc` and `argv[]` parameters. Given that all iOS
    applications run within a graphical interface and don't run from the command line,
    these are simply here so that they conform to the standard ANSI C coding practices.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在我们的主函数中，它包含了 `@autoreleasepool`，这是一个支持你的 iOS 设备内存管理系统的对象。接下来，我们包括了 `argc`
    和 `argv[]` 参数。鉴于所有 iOS 应用都在图形界面中运行，而不是从命令行运行，这些参数只是简单地在这里，以便它们符合标准的 ANSI C 编码实践。
- en: Understanding application delegates
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解应用程序代理
- en: The application delegate implements how your program should react at critical
    points during the application lifecycle. The delegate is responsible for initializing
    a window at application startup and cleaning up at program termination. This class
    is responsible for causing the main view controller to be displayed, as well as
    handling application responsiveness whenever your application suspends or resumes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序代理实现了你的程序在应用程序生命周期中的关键点应该如何反应。代理负责在应用程序启动时初始化窗口，并在程序终止时进行清理。此类负责使主视图控制器显示，以及处理应用程序在挂起或恢复时的响应能力。
- en: Understanding the ViewController class
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 ViewController 类
- en: 'This file implements the views functionality and contains the class methods
    that correspond to the view that is being loaded, as well as the method declarations
    that can be overridden. In the following table, we describe some of the methods
    that are contained within this class:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件实现了视图功能，包含与正在加载的视图相对应的类方法，以及可以覆盖的方法声明。在下面的表中，我们描述了此类中包含的一些方法：
- en: '| Method name | Description |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 方法名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `viewDidLoad` | This method is called whenever the view controller is loaded,
    and is used to set up any additional objects. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `viewDidLoad` | 此方法在视图控制器被加载时被调用，用于设置任何额外的对象。|'
- en: '| `viewDidUnload` | This method is called whenever the view is unloaded from
    memory. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `viewDidUnload` | 此方法在视图从内存中卸载时被调用。|'
- en: '| `viewWillAppear` | This method is called whenever the view is ready to appear
    on the devices'' screen, or that it has fully appeared already. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `viewWillAppear` | 此方法在视图准备好在设备屏幕上出现，或者已经完全出现时被调用。|'
- en: '| `viewDidAppear` | This method is called whenever you want to perform a particular
    action, once the view has fully appeared on screen, such as performing some sort
    of transition animation or sound. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `viewDidAppear` | 此方法在你想在视图完全出现在屏幕上后执行特定操作时被调用，例如执行某种过渡动画或声音。|'
- en: '| `shouldAutorotateToInterfaceOrientation` | This method is normally used whenever
    you want your application to support multiple screen orientations, that is, landscape
    or portrait. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `shouldAutorotateToInterfaceOrientation` | 此方法通常在你想让你的应用程序支持多种屏幕方向时使用，即横屏或竖屏。|'
- en: Understanding ViewController.xib
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 ViewController.xib
- en: The XIB file may not be visible depending on whether you selected to use storyboards
    during the creation of your project. The XIB file is basically an XML file with
    a specific structure that is readable from Interface Builder, and contains various
    information about the user interface, such as the type of controls it contains,
    their properties, outlets, and so on.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: XIB 文件是否可见取决于你在创建项目时是否选择了使用故事板。XIB 文件基本上是一个具有特定结构的 XML 文件，可以从 Interface Builder
    中读取，并包含有关用户界面的各种信息，例如它包含的控件类型、它们的属性、出口等。
- en: Understanding HelloWorld-info.plist
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 HelloWorld-info.plist
- en: 'This file is basically the applications'' settings file and contains the properties
    and their values that define the various settings for an iOS application. These
    settings have information relating to the device orientations that it will support,
    the application icon and the supported iOS versions, as well as what devices the
    application can be installed on. The following screenshot shows the structure
    of this file when it has been double-clicked in the Xcode editor:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件基本上是应用程序的设置文件，包含定义iOS应用程序各种设置的属性及其值。这些设置包含有关它将支持的方向、应用程序图标、支持的iOS版本以及应用程序可以安装的设备的信息。以下截图显示了在Xcode编辑器中双击此文件时的文件结构：
- en: '![Understanding HelloWorld-info.plist](img/3349_01_07.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![理解 HelloWorld-info.plist](img/3349_01_07.jpg)'
- en: See also
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Building the user interface for our application* recipe
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建我们应用程序的用户界面*配方'
- en: The *Creating outlets to Interface Builder objects* recipe
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建到界面构建器对象的出口*配方'
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interfaces – Creating the UI"), *User Interfaces – Creating the UI*
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。用户界面 – 创建UI")中的*添加和自定义视图*配方，*用户界面 – 创建UI*'
- en: Using Interface Builder to create the user interface
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用界面构建器创建用户界面
- en: In this recipe, we will familiarize ourselves with the Interface Builder application.
    Interface Builder is a visual tool that enables you to design the user interface
    for your iOS applications.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将熟悉界面构建器应用程序。界面构建器是一个可视化工具，它使您能够为iOS应用程序设计用户界面。
- en: Using Interface Builder, you are able to drag-and-drop views and objects onto
    your canvas area from the libraries pane. These objects can then be connected
    using outlets and actions so that they can programmatically interact with your
    code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用界面构建器，您可以从库面板中将视图和对象拖放到画布区域。然后，可以使用出口和动作将它们连接起来，以便它们可以与代码进行程序性交互。
- en: How to do it…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To display our view controller within Interface Builder and the Xcode environment,
    perform the following simple steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要在界面构建器和Xcode环境中显示我们的视图控制器，请执行以下简单步骤：
- en: Select the `ViewController.xib` file from the project navigator window.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航窗口中选择`ViewController.xib`文件。
- en: From the Xcode toolbar, select the viewing options, as shown in the following
    screenshot:![How to do it…](img/3349_01_08.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Xcode工具栏中选择查看选项，如图下截图所示：![如何操作…](img/3349_01_08.jpg)
- en: In the preceding screenshot, this shows what Interface Builder looks like when
    an XIB file has been chosen from the project navigator window.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个截图中，这显示了从项目导航窗口中选择XIB文件时界面构建器的样子。
- en: How it works…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Whenever you use Interface Builder to design a user interface, any objects that
    have been used from the library pane will be connected to the Xcode project that
    they belong to.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 每次您使用界面构建器设计用户界面时，从库面板中使用的任何对象都将连接到它们所属的Xcode项目。
- en: 'As you can see from the preceding screenshot, the Interface Builder workspace
    is divided into three main areas. The following table provides a brief description
    of which area is used for what functions:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，界面构建器工作区分为三个主要区域。以下表格简要说明了哪个区域用于哪些功能：
- en: '| Area name | Description |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 区域名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Navigation area | This area displays all files associated with the project.
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 导航区域 | 这个区域显示与项目相关的所有文件。 |'
- en: '| Editor area | This area is where we start to design our user interface from.
    |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 编辑区域 | 这个区域是我们开始设计用户界面的地方。 |'
- en: '| Inspector pane | This area is where we can configure each of our objects.
    |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 检查器面板 | 这个区域是我们配置每个对象的地方。 |'
- en: '| Library pane | This area is where we can locate objects and drag them onto
    our view. Such objects are the `UILabel`, `UIButton`, `UITextField`, and so on.
    |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 库面板 | 这个区域是我们可以定位对象并将它们拖放到视图上的地方。这些对象包括`UILabel`、`UIButton`、`UITextField`等。
    |'
- en: There's more…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: You may have noticed the section called **Simulated Metrics** located on the
    **Attributes** tab within the inspector pane window. This area shows you how our
    interface will look like within the designer, and eventually how it will look
    like when it is deployed and run on the iOS device.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到检查器面板窗口中的**模拟度量**部分，位于**属性**选项卡内。这个区域显示了我们的界面在设计师中的样子，以及最终在iOS设备上部署和运行时的样子。
- en: Here you can specify whether your interface will have a status bar, toolbar,
    or even a navigation bar. It is worth mentioning that, if you set the **Status
    Bar** option to **None**, it does not mean that our application will start without
    a status bar.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以指定您的界面是否具有状态栏、工具栏，甚至导航栏。值得一提的是，如果您将**状态栏**选项设置为**无**，并不意味着我们的应用程序将没有状态栏启动。
- en: Note
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The status bar is the bar that appears at the top of the device's screen and
    displays certain types of information to the user, such as the current time, battery
    status, carrier name, and so forth.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 状态栏是出现在设备屏幕顶部的栏，向用户显示某些类型的信息，例如当前时间、电池状态、运营商名称等等。
- en: See also
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building the user interface for our application* recipe
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建我们应用程序的用户界面* 菜谱'
- en: The *Creating outlets to Interface Builder objects* recipe
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建到Interface Builder对象的出口* 菜谱'
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interfaces – Creating the UI"), *User Interfaces – Creating the UI*
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。用户界面 – 创建UI")的*添加和自定义视图*菜谱中，*用户界面 – 创建UI*
- en: Building the user interface for our application
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们应用程序的用户界面
- en: In this recipe, we will learn how to go about building our user interface and
    how to add controls.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何构建我们的用户界面以及如何添加控件。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Now that we have successfully created our project, we can start building our
    user interface using the Interface Builder designer.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了项目，我们可以开始使用Interface Builder设计器构建我们的用户界面。
- en: How to do it…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Creating the user interface for our application using Interface Builder is
    really easy, and can be achieved by performing the following simple steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Interface Builder创建我们应用程序的用户界面非常简单，可以通过执行以下简单步骤实现：
- en: Select **ViewController.xib** from the project navigator window.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器窗口中选择**ViewController.xib**。
- en: From **Object Library**, drag a (`Label`) control to the view's canvas.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中拖动一个（`Label`）控件到视图的画布上。
- en: Then, from the **Attributes Inspector** section, modify the **Text** property
    to read **Firstname**:.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从**属性检查器**部分，修改**文本**属性为**名字**：。
- en: Next, resize the `Label` control so that the contents of the label fit.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，调整`Label`控件的尺寸，使其内容适应。
- en: Then, from **Object Library**, drag a (`Textfield`) control to the view and
    place it to the right-hand side of the **Firstname** label and resize the `Textfield`
    control so that it is wide enough to fit the field contents.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从**对象库**中拖动一个（`Textfield`）控件到视图中，并将其放置在**名字**标签的右侧，并调整`Textfield`控件的尺寸，使其足够宽，以适应字段内容。
- en: From **Object Library**, drag a (`Label`) control to the view's canvas.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中拖动一个（`Label`）控件到视图的画布上。
- en: From the **Attributes Inspector** section, modify the **Text** property to read
    **Surname:**.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**属性检查器**部分，修改**文本**属性为**姓氏**：。
- en: Next, resize the **Label** control so that the contents of the label fit.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，调整**Label**控件的尺寸，使其内容适应。
- en: Then, from **Object Library**, drag a (`Textfield`) control to the view and
    place it to the right-hand side of the **Surname** label and resize the `Textfield`
    control so that it is wide enough to fit the field contents.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从**对象库**中拖动一个（`Textfield`）控件到视图中，并将其放置在**姓氏**标签的右侧，并调整`Textfield`控件的尺寸，使其足够宽，以适应字段内容。
- en: From **Object Library**, drag a (`Label`) control to the view's canvas and place
    it a bit further down under the **Surname** label.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中拖动一个（`Label`）控件到视图的画布上，并将其放置在**姓氏**标签下方稍远的位置。
- en: From the **Attributes Inspector** section, modify the **Text** property to read
    **Output:**.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**属性检查器**部分，修改**文本**属性为**输出**：。
- en: Next, resize the `Label` control to about the width of the screen.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，调整`Label`控件的尺寸，使其大约与屏幕宽度相同。
- en: Then, from **Object Library**, drag a (`Button`) control to the view and place
    it underneath the `Label` control and centered.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从**对象库**中拖动一个（`Button`）控件到视图中，并将其放置在`Label`控件下方并居中。
- en: Resize the `Button` control so that it is wide enough to fit the field contents.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整`Button`控件的尺寸，使其足够宽，以适应字段内容。
- en: From the **Attributes Inspector** section, modify the **Title** property to
    read **Tap Here**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**属性检查器**部分，修改**标题**属性为**点击此处**。
- en: After adding the button, save the document by selecting **File** | **Save**
    from the menu bar. The main view should now look like the following screenshot:![How
    to do it…](img/3349_01_09.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加按钮后，通过选择菜单栏中的**文件** | **保存**来保存文档。主视图现在应该看起来像以下截图：![如何操作…](img/3349_01_09.jpg)
- en: How it works…
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: As you can see, using Interface Builder is not difficult once you get used to
    it. Whenever you drag objects onto your view, you will notice that a small green
    circled cross appears on the cursor to indicate that it is safe to drop the object
    onto the view.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: From this view, we are also able to resize the control, as well as modify the
    attributes associated with the control.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building the user interface for our application* recipe
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating outlets to Interface Builder objects* recipe
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating actions that respond to user actions* recipe
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating outlets to Interface Builder objects
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a closer look at outlets and how these can be used
    to communicate with our UI.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our previous section, we looked at how to add controls to our `ViewController`
    to form the construction of our user interface as well as set some properties
    to our controls. In this section, we will look at how we can connect these up
    and access these controls within our code.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating outlets to Interface Builder objects is a simple process and can be
    achieved by performing the following simple steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Open the assistant editor by selecting **Navigate** | **Open In Assistant Editor**
    or pressing *option* + *command* + *,*.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the `ViewController.h` interface file is displayed within the assistant
    editor window.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the **Firstname** (`Label`) control, then hold down the *command*
    key and drag it into the `ViewController.h` interface file, within the brackets
    and the `@interface` and `@end` lines.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Outlet** from the **Connection** drop-down menu for the type of connection
    to create.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `lblFirstname` for the name of the outlet property to create.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Strong** from the **Storage** drop-down menu and click on the **Connect**
    button.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the **Firstname** (`Textfield`) control, then hold down the *command*
    key, and drag it into the `ViewController.h` interface file.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Outlet** from the **Connection** drop-down menu for the type of connection
    to create.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `txtFirstname` for the name of the **Outlet** property to create.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Strong** from the **Storage** drop-down menu and click on the **Connect**
    button.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 3 to 9 to add the **Surname**, **Label**, and **Tap Here** button,
    while providing the names such as `lblSurname`, `txtSurname`, `lblOutput`, and
    `btnTapHere` for each.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever you create an outlet, these will need to be created within the curly
    braces `{` `}`. The Interface Builder designer does not create these for you automatically,
    so you will need to add these before you create your outlets.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3349_01_10.jpg)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once you have created the necessary outlets, it would be good to save your project
    by selecting **File** | **Save**, or alternatively pressing *Command* + *S*.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever we use outlets, these simply provide a means of allowing our Interface
    Builder objects to communicate with the code. This is necessary and is the only
    way in which we can access the user interface objects that have been created within
    the Interface Builder designer environment.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们使用出口时，这些只是提供了一种方式，允许我们的界面构建器对象与代码进行通信。这是必要的，也是我们能够访问在界面构建器设计环境中创建的用户界面对象的唯一方式。
- en: There's more…
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: There is another thing that we need to do when declaring outlets and that is
    to create the necessary properties for them. Creating these properties provides
    us access to these controls, and automatically creates the getter and setter methods
    for our objects.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明出口时，我们还需要做另一件事，那就是为它们创建必要的属性。创建这些属性为我们提供了对这些控件访问的权限，并自动为我们的对象创建getter和setter方法。
- en: 'Creating properties to Interface Builder objects is a similar process to adding
    outlets, and can be achieved by performing the following simple steps:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 创建接口构建器对象的属性与添加出口的过程类似，可以通过执行以下简单步骤实现：
- en: Ensure that the `ViewController.h` interface file is displayed within the assistant
    editor window.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在辅助编辑器窗口中显示`ViewController.h`接口文件。
- en: Next, select the **Firstname** (`Label`) control, then hold down the *command*
    key and drag it into the `ViewController.h` interface file at the end of the closing
    curly brace.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**名字**（`Label`）控件，然后按住**command**键，将其拖动到`ViewController.h`接口文件末尾的闭合花括号处。
- en: Choose **Outlet** from the **Connection** drop-down menu for the type of connection
    to create.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**连接**下拉菜单中选择要创建的连接类型**出口**。
- en: Enter `lblFirstname` for the name of the outlet property to create.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`lblFirstname`作为要创建的出口属性名称。
- en: Choose **Strong** from the **Storage** drop-down menu and click on the **Connect**
    button.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**存储**下拉菜单中选择**强**，然后点击**连接**按钮。
- en: Next, select the **Firstname** (`Textfield`) control, then hold down the *command*
    key, and drag it into the `ViewController.h` interface file.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**名字**（`Textfield`）控件，然后按住**command**键，将其拖动到`ViewController.h`接口文件中。
- en: Choose **Outlet** from the **Connection** drop-down menu for the type of connection
    to create.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**连接**下拉菜单中选择要创建的连接类型**出口**。
- en: Enter `txtFirstname` for the name of the outlet property to create.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`txtFirstname`作为要创建的出口属性名称。
- en: Choose **Strong** from the **Storage** drop-down menu and click on the **Connect**
    button.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**存储**下拉菜单中选择**强**，然后点击**连接**按钮。
- en: Repeat steps 3 to 9 to add the **Surname**, **Label**, and **Tap Here** button,
    while providing the names such as `lblSurname`, `txtSurname`, `lblOutput`, and
    `btnTapHere` for each.![There's more…](img/3349_01_11.jpg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤3到9以添加**姓氏**、**标签**和**点击此处**按钮，并为每个提供如`lblSurname`、`txtSurname`、`lblOutput`和`btnTapHere`等名称。![还有更多…](img/3349_01_11.jpg)
- en: 'Once you have created each of the property outlets, the completed `ViewController.h`
    interface file will resemble the following code snippet:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了每个属性出口，完成的`ViewController.h`接口文件将类似于以下代码片段：
- en: '[PRE1]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Since we created our outlets, you will notice that Interface Builder has also
    created each of our outlets and have declared these within our `ViewController.m`
    implementation file, as shown in the following code snippet:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们创建了出口，您会注意到界面构建器也为我们创建了每个出口，并在我们的`ViewController.m`实现文件中声明了这些，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See also
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using Interface Builder to create the user interface* recipe
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用界面构建器创建用户界面*菜谱'
- en: The *Building the user interface for our application* recipe
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建我们应用程序的用户界面*菜谱'
- en: The *Creating actions that respond to user actions* recipe
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建响应用户动作的动作*菜谱'
- en: Creating actions that respond to user actions
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建响应用户动作的动作
- en: In this recipe, we will take a closer look at actions and how these can be used
    to respond to user actions.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将更详细地了解动作以及如何使用它们来响应用户操作。
- en: Getting ready
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In our previous section, we looked at how to add controls to our `ViewController`
    to construct our user interface and connect up each of the outlets, as well as
    create properties for each of our controls. In this section, we will look at how
    we can communicate with these outlets and display a message to the user when the
    **Tap Here** button is clicked.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的章节中，我们探讨了如何向我们的`ViewController`添加控件以构建用户界面，连接每个出口，以及为每个控件创建属性。在本节中，我们将探讨如何与这些出口通信，并在点击**点击此处**按钮时向用户显示消息。
- en: How to do it…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Adding actions to interface objects is a process similar to adding outlets,
    and can be achieved by performing the following simple steps:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 向界面对象添加动作的过程类似于添加出口，可以通过执行以下简单步骤来实现：
- en: Open the assistant editor by selecting **Navigate** | **Open In Assistant Editor**
    or by pressing *option* + *command* + *,*.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**导航** | **在辅助编辑器中打开**或按*option* + *command* + *,*来打开辅助编辑器。
- en: Ensure that the `ViewController.h` interface file is displayed within the assistant
    editor window.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在辅助编辑器窗口中显示`ViewController.h`接口文件。
- en: Next, select the **Tap Here** (`Button`) control, then hold down the *command*
    key, and drag it into the `ViewController.h` interface file.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**点击此处**（按钮）控件，然后按住*command*键，将其拖动到`ViewController.h`接口文件中。
- en: Choose **Action** from the **Connection** drop-down menu for the type of connection
    to create.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**连接**下拉菜单中选择**动作**以创建连接类型。
- en: Enter `btnTapHere` for the name of the action to create and click on the **Connect**
    button.![How to do it…](img/3349_01_12.jpg)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为要创建的动作输入`btnTapHere`作为名称，并单击**连接**按钮。![如何操作…](img/3349_01_12.jpg)
- en: How it works…
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Whenever actions are created in Objective-C, they are responsible for responding
    and executing the associated code behind it. Instead of us hooking up an event
    handler to the `TouchUpInside` event of the button, we have decided to add an
    action to it and handle the output of this ourselves. These types of actions are
    called instance methods.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 每当在Objective-C中创建动作时，它们负责响应和执行其背后的相关代码。我们决定不将事件处理程序连接到按钮的`TouchUpInside`事件，而是将其添加到动作中，并自行处理输出。这类动作被称为实例方法。
- en: There's more…
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'Our next step is to add the code into our `btnTapHere` event method, which
    will display a greeting message to the user when this button is clicked. Perform
    the following steps to do so:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步是向`btnTapHere`事件方法中添加代码，当此按钮被点击时，将向用户显示问候消息。执行以下步骤来完成此操作：
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开`ViewController.m`实现文件。
- en: 'Next, locate the `btnTapHere` event method and enter the following code snippet:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，找到`btnTapHere`事件方法，并输入以下代码片段：
- en: '[PRE3]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In our code snippet, we create an `NSString` object value called greeting, and
    then use the `stringWithFormat` method to concatenate our `firstname` and `surname`
    objects. Next, we assign this variable to our output label and then apply the
    font size and text color.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码片段中，我们创建了一个名为greeting的`NSString`对象值，然后使用`stringWithFormat`方法将我们的`firstname`和`surname`对象连接起来。接下来，我们将这个变量分配给输出标签，并应用字体大小和文本颜色。
- en: See also
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Compiling your project* recipe
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编译您的项目*配方'
- en: The *Debugging your iOS applications using Xcode* recipe
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Xcode调试iOS应用程序*的配方'
- en: The *Using the iOS Simulator to test your applications* recipe
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用iOS模拟器测试您的应用程序*的配方'
- en: Compiling your project
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译您的项目
- en: In this recipe, we will take a look at how we can compile our project with Xcode.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将查看如何使用Xcode编译我们的项目。
- en: Getting ready
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Xcode offers various options for compiling your application. In this section,
    we will take a look at these options.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode为编译您的应用程序提供了各种选项。在本节中，我们将查看这些选项。
- en: How to do it…
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Whenever you want to compile your application, you have the option of choosing
    to have your application run on the iOS device, or within each of the simulators
    for iPad or iPhone. The version number associated with the Simulators is dependent
    on the version of the iOS SDK you have installed on your computer. In Xcode 4,
    whenever you open an existing Xcode project or create a new one, Xcode will automatically
    create a default scheme for you.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您想要编译应用程序时，您可以选择让应用程序在iOS设备上运行，或者在每个iPad或iPhone的模拟器中运行。模拟器版本号取决于您在计算机上安装的iOS
    SDK版本。在Xcode 4中，每次您打开现有的Xcode项目或创建一个新的项目时，Xcode都会自动为您创建一个默认方案。
- en: This scheme allows you to either test your application within the iOS Simulator,
    or have it deployed to an iOS device. Additional schemes can be created, which
    we will shortly take a look at.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 此方案允许您在iOS模拟器中测试您的应用程序，或者将其部署到iOS设备。还可以创建其他方案，我们很快就会查看。
- en: '![How to do it…](img/3349_01_13.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3349_01_13.jpg)'
- en: Schemes are not new to Xcode 4 and they have existed since the early releases
    of Xcode 3\. In previous releases of Xcode, you had to configure each of the items
    separately when setting an active target, a build configuration, or even an executable.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 方案不是Xcode 4的新功能，它们自Xcode 3的早期版本以来就存在了。在Xcode的早期版本中，当设置活动目标、构建配置或甚至可执行文件时，您必须单独配置每个项目。
- en: This posed many issues as all of these were linked to each other. This is where
    defining your own schemes comes in.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有这些都相互关联，这引发了许多问题。这就是定义自己的方案的重要性所在。
- en: 'Schemes can be thought of as separate configurations, meaning that you can
    create a scheme to specify which targets to build, what configuration build to
    use, and what executable environment to use when the product specified by the
    target is launched (this could be if you wanted to target a specific iOS version,
    or if you wanted to have the application launch within the iOS Simulator). Perform
    the following steps:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 方案可以被视为独立的配置，这意味着您可以为指定要构建的目标、要使用的配置构建以及当启动指定的产品时要使用的可执行环境创建方案（这可能是在针对特定的iOS版本，或者您想在iOS模拟器中运行应用程序时）。请执行以下步骤：
- en: To choose a scheme, you can just select it from the scheme pop-up menu, as shown
    in the preceding screenshot. **HelloWorld** is our default scheme that was created
    for us automatically when the project was created.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要选择方案，您只需从方案弹出菜单中选择，如前一张截图所示。**HelloWorld**是我们创建项目时自动为我们创建的默认方案。
- en: In order to create a new scheme, select the **New Scheme…** option. Alternatively,
    if you wanted to edit the active scheme you can choose the **Edit Scheme…** option.
    These options are also available under the **Product** menu.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建一个新的方案，请选择**新建方案…**选项。或者，如果您想编辑活动方案，可以选择**编辑方案…**选项。这些选项也位于**产品**菜单下。
- en: Each scheme can be set to do a specific task. For instance, you may have a scheme
    to do a design build and one to handle the release or distribution. Various types
    of build options are available for building, testing, running, profiling (using
    instruments), and archiving your products, which can then be submitted to the
    App Store. There is no limit on the number of schemes that you can define. However,
    only one scheme can be active at one time.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个方案都可以设置为执行特定任务。例如，您可能有一个用于设计构建的方案和一个用于处理发布或分发的方案。有各种类型的构建选项可用于构建、测试、运行、分析（使用仪器）和存档您的产品，然后可以提交到App
    Store。您可以定义的方案数量没有限制。然而，一次只能有一个方案处于活动状态。
- en: Schemes can also be managed by selecting the **Manage Schemes…** option, or
    similarly from the **Product** menu.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以通过选择**管理方案…**选项或类似地从**产品**菜单来管理方案。
- en: You can specify whether schemes should be stored on a per-project basis, in
    which case these will be made available to every workspace that includes that
    project, or you can choose to have it stored within the workspace environment
    that it's currently in.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以指定方案是否应按项目存储，如果是这样，这些方案将提供给包含该项目的每个工作区，或者您可以选择将其存储在当前工作区环境中。
- en: The following screenshot shows how you can customize the active scheme. You
    can specify the type of build configuration to use, the type of debugger, and
    the current working directory to use. You can also choose to have your product
    run at a higher resolution, which enables you to simulate your application running
    at different display resolutions.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了如何自定义活动方案。您可以指定要使用的构建配置类型、调试器类型以及要使用的当前工作目录。您还可以选择以更高的分辨率运行您的产品，这使您能够模拟应用程序在不同显示分辨率下运行。
- en: '![How to do it…](img/3349_01_14.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3349_01_14.jpg)'
- en: Using the iOS Simulator to test your applications
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用iOS模拟器测试您的应用程序
- en: In this recipe, we will take a look at how we can run our **HelloWorld** application
    using the iOS Simulator.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何使用iOS模拟器运行我们的**HelloWorld**应用程序。
- en: Getting ready
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Now, let's run our application using the iOS Simulator. With the project window
    opened, ensure that you have selected the active scheme configuration to **HelloWorld**
    | **iPhone Simulator**.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用iOS模拟器运行我们的应用程序。确保项目窗口已打开，并且您已选择活动方案配置为**HelloWorld** | **iPhone Simulator**。
- en: How to do it…
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Next, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过从**产品**菜单中选择**运行**或按*command* + *R*来构建和运行应用程序。
- en: When the compilation completes, the iOS Simulator will appear automatically
    and your application that we just created will be displayed. Fill in the text
    fields and then click on the **Tap Here** button to see your result.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，iOS模拟器将自动出现，我们刚刚创建的应用程序将显示出来。填写文本字段，然后点击**点击此处**按钮查看结果。
- en: '![How to do it…](img/3349_01_15.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/3349_01_15.jpg)'
- en: How it works…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The iOS Simulator is a fantastic tool that enables developers to test their
    applications without the need for an actual device. Whenever you use the iOS Simulator
    to build and run your application within the Xcode IDE, Xcode automatically installs
    your application within the iOS Simulator for you.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: iOS模拟器是一个出色的工具，它允许开发者无需实际设备即可测试他们的应用程序。每次您在Xcode IDE中使用iOS模拟器构建和运行应用程序时，Xcode都会自动为您在iOS模拟器中安装应用程序。
- en: One of the other nice features of the iOS Simulator is that it has the capability
    of simulating different iOS versions, and this can be extremely useful if your
    application needs to be installed on different iOS platforms, as well as testing
    and debugging errors reported in your application when run under the different
    iOS versions.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: iOS模拟器的另一个优点是它能够模拟不同的iOS版本，如果您的应用程序需要安装在不同的iOS平台上，以及测试和调试在不同iOS版本下运行时应用程序中报告的错误，这将非常有用。
- en: It is worth mentioning that testing on the iOS Simulator is only good for a
    first round of testing, since it's not even running iOS code and it's more forgiving
    than the real device (for example filenames are case insensitive typically (Mac
    filesystem rules)), you can write files anywhere. Testing on a Simulator is never
    a substitute for testing on a device.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在iOS模拟器上进行测试仅适用于第一轮测试，因为它甚至没有运行iOS代码，并且比实际设备更宽容（例如，通常文件名不区分大小写（遵循Mac文件系统规则）），您可以在任何地方写入文件。在模拟器上的测试永远不能替代在设备上的测试。
- en: In the end, you're just running your application in a Mac OS X application running
    on an Intel processor. It's not even close to running under iOS on a device. It's
    useful for catching obvious errors or doing quick testing during development,
    but you still need to device test.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您只是在运行一个在Intel处理器上运行的Mac OS X应用程序中的应用程序。它与在设备上运行iOS相去甚远。它对于在开发过程中捕获明显错误或进行快速测试很有用，但您仍然需要进行设备测试。
- en: See also
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Compiling your project* recipe
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于*编译您的项目*的配方
- en: The *Debugging your iOS applications using Xcode* recipe
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于*使用Xcode调试iOS应用程序*的配方
- en: The *Registering your iOS devices for testing* recipe in [Chapter 10](ch10.html
    "Chapter 10. Packaging and Deploying Your Application"), *Packaging and Deploying
    Your Application*
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第10章中，关于*注册iOS设备进行测试*的配方，*打包和部署您的应用程序*
- en: The *Creating the development provisioning profiles* recipe in [Chapter 10](ch10.html
    "Chapter 10. Packaging and Deploying Your Application"), *Packaging and Deploying
    Your Application*
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第10章中，关于*创建开发配置文件*的配方，*打包和部署您的应用程序*
- en: The *Using the provisioning profile to install the app on an iOS device* recipe
    in [Chapter 10](ch10.html "Chapter 10. Packaging and Deploying Your Application"),
    *Packaging and Deploying Your Application*
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第10章中，关于*使用配置文件在iOS设备上安装应用程序*的配方，*打包和部署您的应用程序*
- en: Configuring and using compiler directives
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和使用编译器指令
- en: In C/C++, we use directives to include any other header files that our application
    will need to access. This is done by using the `#include` directive. In Objective-C,
    we use the `#import` directive. If you examine the contents of the `ViewController.h`
    file, you will notice that at the top of the file is a `#import` statement.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在C/C++中，我们使用指令来包含应用程序需要访问的任何其他头文件。这是通过使用`#include`指令来完成的。在Objective-C中，我们使用`#import`指令。如果您检查`ViewController.h`文件的内容，您会注意到文件顶部有一个`#import`语句。
- en: '[PRE4]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `#import` statement is known as a preprocessor directive. As mentioned previously,
    in C/C++, you would use the `#include` preprocessor directive to include a file's
    content within the current source file. In Objective-C, you would use the `#import`
    directive statement to achieve the same result, with the exception that the compiler
    ensures that the file is only included once.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`#import`语句被称为预处理器指令。如前所述，在C/C++中，您会使用`#include`预处理器指令将文件内容包含在当前源文件中。在Objective-C中，您会使用`#import`指令语句来实现相同的结果，但编译器确保文件只包含一次。'
- en: To import a header file from one of the Xcode framework libraries, you would
    specify the header filename using the angle brackets (`<>`) within the `#import`
    statement.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Xcode框架库中导入头文件，您需要在`#import`语句中使用尖括号（`<>`）指定头文件名。
- en: 'If you wanted to import one of your own custom-built header files containing
    your own methods, you would specify and make use of the double-quoted marks (`""`),
    as you can see from the following sample code:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想导入包含您自己的方法的自定义构建的头文件，您可以使用双引号（`""`）进行指定和使用，如下面的示例代码所示：
- en: '[PRE5]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this recipe, we will be taking a look at another approach where we can use
    directives to conditionally compile code based on a conditionally set pre-compiler
    flag that you can define yourself. This makes it easy for you to selectively enable
    parts of your application without making your code look messy.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨另一种方法，我们可以使用指令根据您自己定义的条件预处理器标志有条件地编译代码。这使得您能够选择性地启用应用程序的部分，而不会使您的代码看起来杂乱。
- en: Getting ready
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In `HelloWorld-Prefix.pch`, we will start by declaring a few macros (so you
    don't have to litter your code with `#ifdef/#endif` blocks). The `HelloWorld-Prefix.pch`
    file is global in scope, so any functions you define there will be available in
    all of your classes, so this can be very useful.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在`HelloWorld-Prefix.pch`中，我们将首先声明一些宏（这样您就不需要在代码中添加`#ifdef/#endif`块）。`HelloWorld-Prefix.pch`文件具有全局作用域，因此您在那里定义的任何函数都将可用于所有类，这非常有用。
- en: How to do it...
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Declaring compiler directives for your application is a very simple process,
    and can be achieved by performing the following simple steps:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的应用程序声明编译器指令是一个非常简单的过程，可以通过执行以下简单步骤实现：
- en: Open the `HelloWorld-Prefix.pch` implementation file from the project navigator,
    located under the supporting files group.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器中打开位于支持文件组下的`HelloWorld-Prefix.pch`实现文件。
- en: 'Next, enter the following highlighted code snippet to this file:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下高亮代码片段添加到该文件中：
- en: '[PRE6]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we need to modify our `btnTapHere` method to be surrounded by an `#ifdef`
    statement, within our `ViewController.m` implementation file, as follows:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改我们的`btnTapHere`方法，使其被`#ifdef`语句包围，在`ViewController.m`实现文件中，如下所示：
- en: '[PRE7]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Whenever you want to display just the first name of the user, you simply set
    this to `YES` by defining the conditional flag.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 每次您只想显示用户的第一个名字时，您只需通过定义条件标志将其设置为`YES`。
- en: How it works…
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Whenever compiler directives are used in Objective-C, they are responsible for
    responding to and executing the associated snippets of code encapsulated within
    the `#ifdef` and `#endif` tags.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在Objective-C中使用编译器指令时，它们负责响应并执行`#ifdef`和`#endif`标签封装的关联代码片段。
- en: This is particularly handy if you only want to force a set of `NSLog` messages
    or values to be used during testing, and not appear during the final release of
    your application. Some other uses where these types can be used would be, if you
    were creating a game and you wanted to disable some features in the trial or lite
    version of your game.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想在测试期间强制使用一组`NSLog`消息或值，而不在应用程序的最终发布版本中显示，这尤其方便。这些类型可以使用的其他一些场景是，如果您正在创建一个游戏，并且希望在游戏的试用版或轻量版中禁用一些功能。
- en: There's more…
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'In order to have your application use this compiler directive, we need to add
    this preprocessing flag to the **Preprocessor Macros** section, as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您的应用程序使用此编译器指令，我们需要将此预处理器标志添加到**预处理器宏**部分，如下所示：
- en: Select the **HelloWorld** project from the project navigator window.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器窗口中选择**HelloWorld**项目。
- en: Next, select the **HelloWorld** project and then click on the **Build Settings**
    tab.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**HelloWorld**项目，然后单击**构建设置**选项卡。
- en: Then, scroll down to the **Apple LLVM compiler 4.0 – Preprocessing** section.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，滚动到**Apple LLVM编译器 4.0 – 预处理**部分。
- en: Double-click on the **Debug** section and then add the `DISPLAY_FIRSTNAME=YES`
    preprocessor flag.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击**调试**部分，然后添加`DISPLAY_FIRSTNAME=YES`预处理器标志。
- en: Dismiss this window by clicking outside within the project window.![There's
    more…](img/3349_01_18.jpg)
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在项目窗口外部单击来关闭此窗口。![还有更多…](img/3349_01_18.jpg)
- en: That's all there is to it, easy. If you want to turn `DISPLAY_FIRSTNAME` off
    (for example, when you're ready to do your final release build), simply head back
    to this section and remove the flag from your project preferences.
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是全部内容，很简单。如果您想关闭`DISPLAY_FIRSTNAME`（例如，当您准备进行最终发布构建时），只需回到这个部分并从项目首选项中移除该标志。
- en: Next, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R* and entering
    values for both **Firstname** and **Surname**. You should see a welcome message
    showing only your first name.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过从 **Product** 菜单中选择 **Run** 或通过按 *command* + *R* 并输入 **Firstname** 和 **Surname**
    的值来构建并运行应用程序。您应该看到一个只显示您名字的首字母的欢迎信息。
- en: See also
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Compiling your project* recipe
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编译您的项目* 的配方'
- en: The *Debugging your iOS applications using Xcode* recipe
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Xcode 调试您的 iOS 应用程序* 的配方'
- en: The *Using the iOS Simulator to test your applications* recipe
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 iOS 模拟器测试您的应用程序* 的配方'
- en: Debugging your iOS applications using Xcode
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Xcode 调试您的 iOS 应用程序
- en: In this recipe, we will show how easy it is to debug applications within Xcode
    and the iOS Simulator.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将展示如何在 Xcode 和 iOS 模拟器中轻松调试应用程序。
- en: Getting ready
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Xcode 4, provides you with a debugger for debugging your applications either
    using the iOS Simulator or on the actual iOS device. In this recipe, we will see
    how easy it is to debug applications to debug our **HelloWorld** application.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 4 为您提供了一个调试器，用于使用 iOS 模拟器或实际 iOS 设备调试您的应用程序。在本配方中，我们将看到调试 **HelloWorld**
    应用程序是多么容易。
- en: How to do it…
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Debugging your application using the Xcode development environment is a simple
    process, and allows you to monitor changes to your application variables, as well
    as stepping through your source code line by line, and can be achieved by performing
    the following simple steps:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Xcode 开发环境调试您的应用程序是一个简单的过程，它允许您监控应用程序变量的更改，以及逐行执行源代码，可以通过执行以下简单步骤实现：
- en: Open the `ViewController.m` implementation file from the project navigator.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器中打开 `ViewController.m` 实现文件。
- en: Next, locate the `btnTapHere` event method and place a breakpoint within the
    gray gutter, as shown in the following screenshot.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定位到 `btnTapHere` 事件方法，并在如下截图所示的灰色区域中设置一个断点。
- en: You will notice that an arrow appears at the line you placed the marker at.![How
    to do it…](img/3349_01_16.jpg)
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到在您放置标记的行上出现了一个箭头。![如何做到这一点…](img/3349_01_16.jpg)
- en: Next, build and run the application by selecting **Product** | **Run** from
    the **Product** menu, or alternatively by pressing *command* + *R*.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过从 **Product** 菜单中选择 **Run** 或通过按 *command* + *R* 来构建并运行应用程序。
- en: Populate the **Firstname** and **Surname** fields, and click on the **Tap Here**
    button.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填充 **Firstname** 和 **Surname** 字段，并点击 **Tap Here** 按钮。
- en: You will notice that execution of our application has paused, and the debugger
    has stopped at the line where we placed our breakpoint.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到我们的应用程序执行已暂停，调试器已停止在我们设置断点的行。
- en: Hover the mouse over the `greeting` variable in the breakpoint line to see the
    contents of the **greeting** label.![How to do it…](img/3349_01_17.jpg)
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在断点行中的 `greeting` 变量上，以查看 **greeting** 标签的内容。![如何做到这一点…](img/3349_01_17.jpg)
- en: To continue execution of your application, click on the **Continue program execution**
    button.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要继续应用程序的执行，请点击 **继续程序执行** 按钮。
- en: How it works…
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Although you can use the debugger to pause execution of your program at any
    time and view the state of your program variables, it is better to set the breakpoints
    before you run your application.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以使用调试器在任何时候暂停程序的执行并查看程序变量的状态，但在运行应用程序之前设置断点会更好。
- en: A breakpoint is basically an instruction that tells the application to *stop*
    when the breakpoint has been reached. During this phase, the execution of your
    code pauses and waits for further instructions as to what to do next. During this
    phase, you have the opportunity to either inspect the current values of any of
    the properties, or step through the code.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 断点基本上是一条指令，告诉应用程序在达到断点时 *停止*。在此阶段，您的代码执行暂停，等待进一步的指令以确定下一步操作。在此阶段，您有机会检查任何属性的当前值，或者逐行执行代码。
- en: See Also
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: If you would like to find out more information about the debugging features
    of Xcode, you can refer to the Apple developer documentation located at [http://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/Xcode4UserGuide/060-Debug_Your_App/debug_app.html](http://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/Xcode4UserGuide/060-Debug_Your_App/debug_app.html)`#//apple_ref/doc/uid/TP40010215-CH3-SW1.`
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于Xcode调试功能的信息，您可以参考位于[http://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/Xcode4UserGuide/060-Debug_Your_App/debug_app.html](http://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/Xcode4UserGuide/060-Debug_Your_App/debug_app.html)`#//apple_ref/doc/uid/TP40010215-CH3-SW1.`的Apple开发者文档。
- en: Using the Clang Static Analyzer to examine your code
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Clang静态分析器检查您的代码
- en: In this section, we will take a look at how we can use the Clang Static Analyzer
    tool to examine the syntax of our code for bugs.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用Clang静态分析器工具检查我们的代码语法中的错误。
- en: Getting ready
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There may be times when you want to examine the syntax of your code for bugs.
    This is where the Static Analyzer tool comes handy. This tool was first introduced
    back in Xcode 3.x, and opened and displayed the build results in a new window.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候您可能想检查代码语法中的错误。这就是静态分析器工具派上用场的地方。这个工具最初是在Xcode 3.x中引入的，并在新窗口中打开并显示构建结果。
- en: Xcode 4 allows you to perform the analysis of your code, examine the results,
    and apply the fixes to your source files all within the Xcode 4 workspace environment.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 4允许您在Xcode 4工作区环境中执行代码分析、检查结果以及将修复应用到源文件中。
- en: How to do it…
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To run the Static Analyzer, perform the following simple steps:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行静态分析器，请执行以下简单步骤：
- en: Select the **HelloWorld** project from the project navigator window.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器窗口中选择**HelloWorld**项目。
- en: Open the `ViewController.m` implementation file.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ViewController.m`实现文件。
- en: 'Locate the `btnTapHere` method and enter the following modified code snippet:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`btnTapHere`方法，并输入以下修改后的代码片段：
- en: '[PRE8]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Select **Product** | **Analyze** from the **Product** menu, or alternatively
    press down the *Shift* + *command* + *B* key combinations.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**产品**菜单中选择**分析**，或者按住**Shift** + **command** + **B**键组合。
- en: How it works…
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'When the analyzer finishes checking your code for problems, the issues navigator
    opens automatically and shows you a list of issues that were found within your
    project. This is shown in the following screenshot:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当分析器完成对您的代码进行问题检查后，问题导航器会自动打开，并显示在您的项目中找到的问题列表。这可以在以下屏幕截图中看到：
- en: '![How it works…](img/3349_01_19.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3349_01_19.jpg)'
- en: Clicking on an issue within the left-hand pane will open the file in question,
    and display the problem that has been marked with a blue triangle. Clicking on
    this triangle will display the faulty flow of logic that has been identified and
    detected by the static analyzer, as can be seen in the preceding screenshot.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧窗格中单击问题将打开相关文件，并显示用蓝色三角形标记的问题。单击此三角形将显示静态分析器识别和检测到的错误逻辑流程，如前一个屏幕截图所示。
- en: The static analyzer has flagged that the `colorIndex` variable has a potential
    error. This is due to the fact that the variable was not initialized upon declaration
    and contains some random value.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 静态分析器已标记`colorIndex`变量存在潜在错误。这是由于变量在声明时未初始化，并包含一些随机值。
- en: You will also notice that the analyzer provides additional detail when you click
    on the message bubbles, and displays the control flow, as can be seen by the arrows.
    This provides you with a full diagnosis of the bug. Many of the issues that are
    reported by the static analyzer tool have this information and make the analysis
    and fixing of these errors much easier.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到，当您点击消息气泡时，分析器会提供更多详细信息，并显示控制流，如箭头所示。这为您提供了完整的错误诊断。静态分析器工具报告的许多问题都有这些信息，使得分析和修复这些错误变得容易得多。
- en: Note
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information about the Static Analyzer, you
    can refer to the Apple developer documentation located at [http://developer.apple.com/library/ios/#recipes/xcode_help-source_editor/Analyze/Analyze.html](http://developer.apple.com/library/ios/#recipes/xcode_help-source_editor/Analyze/Analyze.html).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于静态分析器的信息，您可以参考位于[http://developer.apple.com/library/ios/#recipes/xcode_help-source_editor/Analyze/Analyze.html](http://developer.apple.com/library/ios/#recipes/xcode_help-source_editor/Analyze/Analyze.html)的Apple开发者文档。
- en: See also
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The Compiling your project recipe
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译您的项目食谱
- en: The Debugging your iOS applications using Xcode recipe
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Xcode调试您的iOS应用的配方
- en: The Using the iOS Simulator to test your applications recipe
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用iOS模拟器测试您的应用的配方
- en: The Registering your iOS devices for testing recipe in [Chapter 10](ch10.html
    "Chapter 10. Packaging and Deploying Your Application"), *Packaging and Deploying
    Your Application*
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[注册您的iOS设备以进行测试](https://ch10.html "第10章。打包和部署您的应用")的配方在*第10章*，*打包和部署您的应用*'
- en: The *Creating the development provisioning profiles* recipe in [Chapter 10](ch10.html
    "Chapter 10. Packaging and Deploying Your Application"), *Packaging and Deploying
    Your Application*
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建开发配置文件](https://ch10.html "第10章。打包和部署您的应用")的配方在*第10章*，*打包和部署您的应用*'
- en: The *Using the provisioning profile to install the app on an iOS device* recipe
    in [Chapter 10](ch10.html "Chapter 10. Packaging and Deploying Your Application"),
    *Packaging and Deploying Your Application*
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用配置文件在iOS设备上安装应用](https://ch10.html "第10章。打包和部署您的应用")的配方在*第10章*，*打包和部署您的应用*'
