["```swift\nlet arrayOne = [1,2,3] \n```", "```swift\nvar arrayTwo = [4,5,6] \n```", "```swift\nvar arrayThree = [Int]()\nvar arrayThree: [Int] = [] \n```", "```swift\nvar arrayOne = [String]()\nvar arrayTwo = [Double]()\nvar arrayThree = [MyObject]() \n```", "```swift\nvar myArray: [Any] = [1,\"Two\"] \n```", "```swift\nvar arrayFour = [Int](repeating: 3, count: 7) \n```", "```swift\nvar multiArrayOne = [[1,2],[3,4],[5,6]]\nvar multiArrayTwo = [[Int]]() \n```", "```swift\nlet arrayOne = [1,2,3,4,5,6]\nprint(arrayOne[0]) //Displays '1'\nprint(arrayOne[3]) //Displays '4' \n```", "```swift\nlet multiArray = [[1,2],[3,4],[5,6]]\nlet arr = multiArray[0]  //arr contains the array [1,2]\nlet value = multiArray[0][1]  //value contains 2 \n```", "```swift\nlet arrayOne = [1,2,3,4,5,6]\nlet first = arrayOne.first    //first contains\nlet last = arrayOne.last    //last contains 6\nlet multiArray = [[1,2],[3,4],[5,6]]\nlet arrFirst1 = multiArray[0].first    //arrFirst1 contains 1\nlet arrFirst2 = multiArray.first    //arrFirst2 contains[1,2]\nlet arrLast1 = multiArray[0].last    //arrLast1 contains 2\nlet arrLast2 = multiArray.last    //arrLast2 contains [5,6] \n```", "```swift\nlet arrayOne = [1,2,3]\nlet multiArrayOne = [[3,4],[5,6],[7,8]]\nprint(arrayOne.count)    //Displays 3\nprint(multiArrayOne.count)    //Displays 3 for the three array\nprint(multiArrayOne[0].count)    //Displays 2 for the two elements \n```", "```swift\nlet arrayOne = [0,1]\nprint(arrayOne[0])     //Displays 0\nprint(arrayOne[1])     //Displays 1\nprint(arrayOne.count)     //Displays 2 \n```", "```swift\n//This example will throw an array index out of range error \nlet arrayOne = [1,2,3,4]\nprint(arrayOne[6])\n//This example will not throw an array index out of range error \nlet arrayTwo = [1,2,3,4]\nif (arrayTwo.count > 6) { \n    print(arrayTwo[6])\n} \n```", "```swift\nvar arrayOne = [1,2]\nvar arrayTwo = [Int]()\narrayOne.isEmpty  //Returns false because the array is not empty\narrayTwo.isEmpty  //Returns true because the array is empty \n```", "```swift\nvar arrayOne = [1,2,3,4,5,6]\narrayOne.shuffle()\nlet shuffledArray = arrayOne.shuffled() \n```", "```swift\nvar arrayOne = [1,2]\narrayOne.append(3)  //arrayOne will now contain 1, 2 and 3 \n```", "```swift\nvar arrayOne = [1,2]\narrayOne += [3,4]    //arrayOne will now contain 1, 2, 3 and 4 \n```", "```swift\nvar arrayOne = [1,2,3,4,5]\narrayOne.insert(10, at: 3)    //arrayOne now contains 1, 2, 3, 10, 4 and 5 \n```", "```swift\nvar arrayOne = [1,2,3]\narrayOne[1] = 10    //arrayOne now contains 1,10,3 \n```", "```swift\nvar arrayOne = [1,2,3,4,5]\narrayOne.removeLast()    //arrayOne now contains 1, 2, 3 and 4\narrayOne.remove(at:2)    //arrayOne now contains 1, 2 and 4\narrayOne.removeAll()    //arrayOne is now empty \n```", "```swift\nvar arrayOne = [1,2,3,4,5]\nvar removed1 = arrayOne.removeLast()  //removed1 contains the value 5\nvar removed = arrayOne.remove(at: 2)  //removed contains the value 3 \n```", "```swift\nlet arrayOne = [1,2] let arrayTwo = [3,4]\nvar combined = arrayOne + arrayTwo   //combine contains 1, 2, 3 and 4 \n```", "```swift\nlet arrayOne = [1,2,3,4,5]\nvar subArray = arrayOne[2...4]    //subArray contains 3, 4 and 5 \n```", "```swift\nlet arrayOne = [1,2,3,4,5]\nvar subArray = arrayOne[2..<4]     //subArray contains 3 and 4 \n```", "```swift\nlet arrayOne = [1,2,3,4,5]\nvar a = arrayOne[..<3]    //subArray contains 1, 2 and 3 \nvar b = arrayOne[...3]    //subArray contains 1, 2, 3 and 4\nvar c = arrayOne[2...]    //subArray contains 3, 4 and 5 \n```", "```swift\nvar numbers = [1,2,3,4,5,6,7,8,9,10]\nlet evenNum = numbers.subranges(where: { $0.isMultiple(of: 2) })\nprint(numbers[evenNum].count)\n//numbers[evenNum] contains 2,4,6,8,10 \n```", "```swift\narrayOne[1...2] = [12,13]  //arrayOne contains 1,12,13,4 and 5 \n```", "```swift\nvar arrayOne = [1,2,3,4,5]\narrayOne[1...3] = [12,13]  //arrayOne now contains 1, 12, 13 and 5 \n```", "```swift\nvar arrayOne = [1,2,3,4,5] \narrayOne[1...3] = [12,13,14,15] \n//arrayOne now contains 1, 12, 13, 14, 15 and 5 (six elements) \n```", "```swift\nvar arrayOne = [9,3,6,2,8,5]\narrayOne.sort(){ $0 < $1 }\n//arrayOne contains 2,3,5,6,8 and 9 \n```", "```swift\nvar arrayOne = [9,3,6,2,8,5]\narrayOne.sort() \n```", "```swift\nvar arrayOne = [9,3,6,2,8,5]\narrayOne.sort(){ $1 < $0 }\n//arrayOne contains 9,8,6,5,3 and 2 \n```", "```swift\nvar arrayTwo = [9,3,6,2,8,5]\narrayTwo.sort(by: <) \n```", "```swift\nvar arrayOne = [9,3,6,2,8,5]\nlet sorted = arrayOne.sorted(){ $0 < $1 }\n//sorted contains 2,3,5,6,8 and 9\n//arrayOne contains 9,3,6,2,8 and 5 \n```", "```swift\nvar arrayOne = [1,2,3,4,5,6,7,8,9]\nlet filtered = arrayOne.filter{$0 > 3 && $0 < 7}\n//filtered contains 4,5 and 6 \n```", "```swift\nvar city = [\"Boston\", \"London\", \"Chicago\", \"Atlanta\"] \nlet filteredCity = city.filter{$0.range(of:\"o\") != nil}\n//filtered contains \"Boston\", \"London\" and \"Chicago\" \n```", "```swift\nvar arrayOne = [10, 20, 30, 40]\nlet applied = arrayOne.map{ $0 / 10}\n//applied contains 1,2,3 and 4 \n```", "```swift\nvar arrayTwo = [1, 2, 3, 4]\nlet applied = arrayTwo.map{ \"num:\\($0)\"}\n//applied contains \"num:1\", \"num:2\", \"num:3\" and \"num:4\" \n```", "```swift\nlet arrayOne = [95, 90, 75, 80,60]\nlet count = arrayOne.filter{ $0 >= 90 }.count \n```", "```swift\nvar city = [\"Boston\", \"London\", \"Chicago\", \"Atlanta\"] \nlet count1 = city.filter{$0.range(of:\"o\") != nil}.count \n```", "```swift\nvar scores1 = [100, 81, 95, 98, 99, 65, 87]\nvar scores2 = [100, 98, 95, 91, 83, 88, 72]\nlet diff2 = scores2.difference(from: scores1)\nvar newArray = scores1.applying(diff2) ?? [] \n```", "```swift\nvar arrayOne = [10, 20, 30, 40]\narrayOne.forEach{ print($0) } \n```", "```swift\n10\n20\n30\n40 \n```", "```swift\nvar arrayOne = [\"one\", \"two\", \"three\"] \nfor item in arrayOne {\n    print(item)\n} \n```", "```swift\none\ntwo\nthree \n```", "```swift\nvar arrayOne = [\"one\", \"two\", \"three\"]\nfor (index,value) in arrayOne.enumerated() { \n    print(\"\\(index) \\(value)\")\n} \n```", "```swift\none\ntwo\nthree \n```", "```swift\nlet countries = [\"US\":\"UnitedStates\",\"IN\":\"India\",\"UK\":\"UnitedKingdom\"] \n```", "```swift\nvar countries = [\"US\":\"UnitedStates\",\"IN\":\"India\",\"UK\":\"UnitedKingdom\"] \n```", "```swift\nvar dic1 = [String:String]()\nvar dic2 = [Int:String]()\nvar dic3 = [String:MyObject]()\nvar dic4: [String:String] = [:]\nvar dic5: [Int:String] = [:] \n```", "```swift\nlet countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"UnitedKingdom\"] \nvar name = countries[\"US\"] \n```", "```swift\nlet countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"] \nvar cnt = countries.count    //cnt contains 3 \n```", "```swift\nlet countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"]\nvar empty = countries.isEmpty \n```", "```swift\nvar countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"]\ncountries[\"UK\"] = \"Great Britain\"\n//The value of UK is now set to \"Great Britain\"\nvar orig = countries.updateValue(\"Britain\", forKey: \"UK\")\n//The value of UK is now set to \"Britain\"\n//The orig variable equals \"Great Britain\" \n```", "```swift\nvar countries = [\"US\":\"United States\", \"IN\":\"India\",\"UK\":\"United Kingdom\"] \ncountries[\"FR\"] = \"France\" //The value of \"FR\" is set to\"France\"\nvar orig = countries.updateValue(\"Germany\", forKey: \"DE\")\n//The value of \"DE\" is set to \"Germany\" and orig is nil \n```", "```swift\nvar countries = [\"US\":\"UnitedStates\",\"IN\":\"India\",\"UK\":\"United Kingdom\"] \ncountries[\"IN\"] = nil //The \"IN\" key/value pair is removed\nvar orig = countries.removeValue(forKey:\"UK\")\n//The \"UK\" key value pair is removed and orig contains \"United Kingdom\"\ncountries.removeAll()\n//Removes all key/value pairs from the countries dictionary \n```", "```swift\n//Initializes an empty set of the String type \nvar mySet = Set<String>()\n//Initializes a mutable set of the String type with initial values \nvar mySet = Set([\"one\", \"two\", \"three\"])\n//Creates an immutable set of the String type. \nlet mySet = Set([\"one\", \"two\", \"three\"]) \n```", "```swift\nvar mySet = Set<String>() \nmySet.insert(\"One\") \nmySet.insert(\"Two\")\nmySet.insert(\"Three\") \n```", "```swift\nvar mySet = Set<String>() \nmySet.insert(\"One\")\nmySet.insert(\"Two\")\nvar results = mySet.insert(\"One\")\nif results.inserted {\n    print(\"Success\")\n} else { \n    print(\"Failed\")\n  } \n```", "```swift\nvar mySet = Set<String>() \nmySet.insert(\"One\") \nmySet.insert(\"Two\")\nmySet.insert(\"Three\")\nprint(\"\\(mySet.count) items\") \n```", "```swift\nvar mySet = Set<String>()\nmySet.insert(\"One\") \nmySet.insert(\"Two\")\nmySet.insert(\"Three\")\nvar contain = mySet.contains(\"Two\") \n```", "```swift\nfor item in mySet { \n    print(item)\n} \n```", "```swift\n//The remove method will return and remove an item from a set \nvar item = mySet.remove(\"Two\")\n//The removeAll method will remove all items from a set \nmySet.removeAll() \n```", "```swift\nvar mySet1 = Set([\"One\", \"Two\", \"Three\", \"abc\"])\nvar mySet2 = Set([\"abc\",\"def\",\"ghi\", \"One\"]) \n```", "```swift\nvar newSetUnion = mySet1.union(mySet2) \n```", "```swift\nmySet1.formUnion(mySet2) \n```", "```swift\nvar newSetSubtract = mySet1.subtracting(mySet2) \n```", "```swift\nmySet1.subtract(mySet2) \n```", "```swift\nvar newSetIntersect = mySet1.intersection(mySet2) \n```", "```swift\nmySet1.formIntersection(mySet2) \n```", "```swift\nvar newSetExclusiveOr = mySet1.symmetricDifference(mySet2) \n```", "```swift\nmySet1.formSymmetricDifference(mySet2) \n```"]