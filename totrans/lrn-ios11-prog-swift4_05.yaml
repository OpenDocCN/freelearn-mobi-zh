- en: Digging into Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last couple of chapters, we reviewed the basics of Swift to get you
    warmed up. Before we start building our app, we need to look at one more programming
    concept—collections. In Swift, we have three primary collection types, which we
    will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dictionaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will dig deeper into each one, but we will start with the most common collection
    type—arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arrays are ordered collections of values and can hold any number of items,
    for example, a list of Strings, Ints, floating-point values, and so on. Arrays
    are stored in an ordered list, starting at `0`. Let''s look at a diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff2059ca-65e0-4487-ae0e-9c1fdd17b085.png)'
  prefs: []
  type: TYPE_IMG
- en: Starting from left to right in the preceding examples, we first have an array
    that holds a collection of Strings. In the second example, we have another array
    that holds a collection of Ints. In our third example, we have an array that holds
    a collection of floating-point values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s review the following diagram, which is a mixed array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5f4a9ba-f462-4a49-861f-5f904f343b7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Since this example contains mixed data types, such as Strings, Ints, and bools,
    we would have to name this an array type of Any. This means that we can have mixed
    data types inside of our array. Until you are really comfortable with arrays,
    I would not recommend using them. Try to stick to arrays with the same data type
    because you know the exact data type of each element.
  prefs: []
  type: TYPE_NORMAL
- en: An array can hold any data type, but making the array strongly typed means every
    element in it must be of the same type.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now create a few arrays in Playgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you may want to remove your prior entries from your Playground,
    so that it makes it easier for you to see each new `print` statement. Do that
    now and input the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5af25f5d-ffa4-4baa-a5bf-264c74d81da6.png)'
  prefs: []
  type: TYPE_IMG
- en: We just created our first two arrays. The data types within each set of brackets
    tells Swift what type of an array we want to create. The first array (integers)
    we created has a data type of Ints, and our second array (strings) has a data
    type of Strings.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an array with initial values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arrays can have initial values when they are created. Let''s see how this would
    look by entering the following in Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90e9eb12-1431-4371-909c-48f02898bd86.png)'
  prefs: []
  type: TYPE_IMG
- en: The array that we just entered uses type inference to declare the data type
    of the array using its initial values. In this case, Swift understands that it
    is an array of Ints, because the values we entered are integers. In addition,
    when we use a constant (`let`) on an array, we are telling Swift that the array
    is an immutable array, which means that the contents or size cannot change once
    it is instantiated.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mutable array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is best practice to make all arrays (and for that matter, collections) immutable,
    but there are some cases where you will need to create an array that is mutable.
    Let''s have some fun and create a mutable array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As an aside, when creating a mutable array (or any variable), note that each
    variable must be unique.
  prefs: []
  type: TYPE_NORMAL
- en: One use for a mutable array is so that we can change an array. Let's look at
    some ways we can do this.
  prefs: []
  type: TYPE_NORMAL
- en: Adding items to an array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add some data to our array. There are a few different convenience methods
    for adding data to an array.
  prefs: []
  type: TYPE_NORMAL
- en: A convenience method is, just as its name implies, a method that makes things
    convenient. A method is a function that lives inside of a class. We will discuss
    classes later in this book. If this is starting to get overwhelming, it is understandable.
    You do not need to worry about every single detail at this time. We will cover
    this again and things will slowly start to click at some point. Everyone learns
    differently, so there is no reason to worry if someone else understands something
    more quickly. Just go at your own pace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first convenience method we will look at is the `append()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code and the output window should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68f2422e-eeb8-47b4-b3ff-b835e5ec8bc0.png)'
  prefs: []
  type: TYPE_IMG
- en: Houston, we have a problem! You will see that we are getting an error. Actually,
    I did this for a couple of reasons. Getting errors is normal and common. Most
    people who start out coding are afraid to make a mistake or get scared about getting
    or seeing errors. Trust me, I have been coding for years and I make mistakes all
    the time. The error is telling us that we tried to add an Int into an array that
    can only hold Strings.
  prefs: []
  type: TYPE_NORMAL
- en: Every developer, from a beginner to an experienced one, will face a time when
    he or she will encounter an error that he or she cannot figure out. This error
    might get you frustrated to the point where you want to throw the computer across
    the room (I have been there a few times). The best advice my boss ever gave me
    was to take a walk for 10-15 minutes or do something to take your mind off of
    it. Sometimes this helps and you will come up with an idea after you walk away.
    Even if you come back and it still takes you hours to figure out what is wrong,
    this is still part of the process. The best errors are the ones that were the
    simplest thing you overlooked and you had to spend hours trying to figure out.
    You might have lost time, but you will have learned a great lesson. Lessons like
    these will stay with you forever and you will never forget the error the next
    time you encounter it. So, if your coding results in an error, even in this book,
    embrace the challenge, because there is no greater feeling than figuring out a
    challenging error.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s correct what we just did by revising the array to show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how your code should now look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd3cf6c2-1ecf-46b3-9c80-92fbbe99fe04.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Results panel, you can actually see the contents of our corrected array.
  prefs: []
  type: TYPE_NORMAL
- en: Since an array can hold any number of items, let's add some more. Earlier, I
    mentioned that we have a variety of ways to add items to an array. The `append()`
    method allows us to add only one item at a time. In order to add multiple items,
    we can use the convenience called `append(contentsOf:)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02254909-89ef-4a4f-900f-22841316295d.png)'
  prefs: []
  type: TYPE_IMG
- en: We added two more items into our array, but, so far, every example we have utilized
    has added items at the end of our array. We have two convenience methods that
    allow us to add items at any index position that is available in the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first method we can use to do this is called `insert(at:)`, which allows
    us to add a single item at a certain index position. We also have `insert(contentsOf:at:)`,
    which allows us to add multiple items into an array at a certain index position.
    Let''s use them both and add `Ohio` after California and then `North Carolina`,
    `South Carolina`, and `Nevada` after `Ohio`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/56af51fa-66ce-4be7-b6c9-b23a66d7a1f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We just added items to our array using `append(contentsOf:)`, but there also
    is a shorthand version of this using the `+=` operator. Let''s add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69019fef-88ed-4309-9bf2-b662f90d42b9.png)'
  prefs: []
  type: TYPE_IMG
- en: This technique for adding items is much more concise and is my preferred way
    of inserting items into an array. Writing less code is not always better but,
    in this case, using the `+=` operator is my go-to method.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the number of elements in an array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are keeping track, we now have nine items in our array. Luckily, we
    do not have to keep track of how many items are in our array, because we have
    a property called `count`. This property will keep track of the current item count
    and give us the total count of our array when we want to check. Let''s look at
    the count for states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d69d069c-5a8d-44c3-8b07-08062fa0fb3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Checking for an empty array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `count` property is not the only property we can use to calculate how many
    items are in an array. The most commonly used property for an array is called
    `isEmpty`. This property uses the `count` property by checking to see if the count
    is greater than `0`. This method will return true or false, depending on whether
    there are any items within our array. Since you learned that `if...else` statements
    work well with bools, let's use this `isEmpty` property in an `if...else` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your code and the output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4790540-2a99-4b12-8f38-f78a879b4092.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, our Debug panel prints: `There are currently total nine items in our array`.'
  prefs: []
  type: TYPE_NORMAL
- en: One thing to remember in programming is that sometimes there are multiple ways
    of writing a piece of code. It is not shocking to meet someone who will approach
    the same problem differently than you did. To me, this is why programming is so
    great. Ultimately, all that matters is that it works as expected, especially when
    you are new to programming.
  prefs: []
  type: TYPE_NORMAL
- en: All programming languages have what is known as a style guide, which is a preferred
    way to write code, and it is no different in Swift. Preferred just means a suggested
    method, but even then, you will notice that most preferred methods vary on certain
    things. For now, you do not need to worry about different style guides, other
    than to know that they exist. In this book, we will follow a style that I have
    adopted into my code.
  prefs: []
  type: TYPE_NORMAL
- en: Once you get comfortable, I recommend that you start to look at style guides
    and adapt them into your code. Knowing different styles helps you to know your
    options as well as to understand what others are doing with their code, even if
    you do not agree with how they write something. If you write your code with a
    certain structure or style throughout a project, it will make it easier for you
    to come back to your code if you, for instance, had to take a break for some reason,
    such as starting another project or just taking some time off.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving a value from an array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We discussed creating arrays as well as adding items into an array. Now, let''s
    turn to retrieving a value from an array. Since arrays are stored by their index,
    we can use their index to retrieve values. Let''s retrieve California:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4240873e-0455-4aaf-8a84-7929ee564baf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Results panels shows North Carolina and not California. Remember, arrays
    start at `0`, not `1`. Therefore, in order for us to get California, we would
    actually need use the index position of `2`. Let''s make that update in Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/31b28d9d-8da0-4d26-b1b7-f40178321c3b.png)'
  prefs: []
  type: TYPE_IMG
- en: There we go!
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have this great list of states, but someone told you that Arizona also
    is amazing. Instead of just adding Arizona to our list, you decide that you''d
    actually prefer to replace South Carolina with Arizona. We could simply look at
    our array and see in which index South Carolina is. This would not be helpful,
    however, if it were to change or if the state for which you were searching did
    not exist. So, the safe way to code this is to check the array for an item, and,
    if that item is found, then Swift will give us its current index position. The
    `index(of:)` method is what we will use to get the index position of South Carolina:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our code and output should now look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa60b336-11e7-4466-99a6-c926b104fdff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have the position, we can replace South Carolina with Arizona,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our code should now look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/07d71cb9-686e-4400-acc3-671ffe8820fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Iterating over an array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It would be nice if we could see a list of the states in our array. Earlier,
    you learned that `for...in` loops work with sequences. Since our array is a sequence,
    we can use `for...in` loops to loop through each element. When working on a project
    that has arrays, it is helpful to use a `print` statement inside of a `for...in`
    loop. This lets us print every item in our array to the Debug panel. So, let''s
    use a `for...in` loop to look at the contents of our array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our code and output should now look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a3b6061-2a4d-4181-b74c-4302f3f54dbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Removing items from an array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it is time to start deleting items from our array. Let''s delete the first
    item from our list. We have a convenience method for removing items from an array,
    called `removeFirst()`. This method will remove the first item from our array,
    which in our case is Florida. Let''s remove Florida and add this line above our
    `for...in` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our code and output should now look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d251ad4e-45c0-46c4-be23-8a91e14c0d6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we removed Florida, all of our states'' index positions will be updated
    to move one position closer to the top of the array. But what if we wanted to
    remove an item that was not first? In order to do this, we can use the `remove(at:)`
    convenience. So, let''s remove North Carolina and New York, which are sitting
    at positions `2` and `4`, respectively. We will add the following above our `for...in`
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our code and output should now look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4a8fdfa-c471-4fe5-83d4-a20adb2d361e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, both North Carolina and New York have been removed. You will see that
    California and Ohio did not move, but Colorado and Nevada moved up closer to the
    top of the list. To remove the remaining six items, we could use `remove(at:)`
    for each one, but instead we will use the simpler method of `removeAll()`. So,
    let''s use `removeAll()` in Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your code should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15cfa34d-96ea-4707-936b-b6119894b292.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we are back to where we started with an empty array. We have only scratched
    the surface for arrays. We will do more with arrays later in this book, but we
    first need to look at the next collection type: dictionaries.'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A dictionary is an unordered collection of values with each one accessed through
    a unique key. Let''s look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98e993db-3266-4852-af82-03cb6afc17cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In our diagram, we have a dictionary of pizzas (**keys**) with their prices
    (**values**). In order to find something inside of a dictionary, we must look
    it up by its key. Let''s look at a dictionary syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating a dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The traditional way of creating a dictionary is to first declare it as a dictionary
    and then, inside angle brackets, declare a type for the key and value. Let''s
    create our first dictionary inside Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b974de7d-7228-4379-931e-e47f73501cf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The immutable dictionary we created earlier has a data type of String for both
    its key and value. We have multiple ways to create a dictionary. Let''s look at
    another by adding the following into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d95235ac-7fda-41e9-b65b-774be606d4e5.png)'
  prefs: []
  type: TYPE_IMG
- en: In this latest example, we created another immutable dictionary, with its key
    having a data type of String and its value having a data type of Int.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to use our pizza diagram, the key would have a data type of a
    String and the value would have a data type of a Double. Let''s create this dictionary
    in Playgrounds, but, this time, we will make it a mutable dictionary and give
    it an initial value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e1c80c4-23b9-47d2-9e27-2cbeb9a0655a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding way is just one way of creating a dictionary for our pizza diagram
    example. Let''s look at a much more common way using type inference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you add this to your code, your code should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/536732c0-3348-4d23-bfe5-78e7164bd539.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a much simpler way to create a dictionary with an initial value. When
    initializing a dictionary, it can have any number of items. In our case, we are
    starting off with just one.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at how we can add more pizzas into our dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and updating dictionary elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add another item to our `dictPizzas` dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you add this line of code, your code snippet should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d1e5c5a-c17b-4960-97cb-242add0104f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the shorthand method for adding an item to a dictionary. After the
    dictionary variable, we add the key inside the brackets. Since the key for this
    dictionary is Strings, we must put this key in quotes. Next, we assign a Double
    to our value. Now, our dictionary has two items. This syntax is also used to update
    a dictionary item. Let''s change the price of meat pizza to `16.99`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Have a look at the code, it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2dadf0ca-476a-443c-a183-67477a13e24a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead of using the shorthand syntax, you can use the `updateValue(_:forKey:)`
    method. This method does almost the same thing as the shorthand syntax. If the
    value does not exist, it creates the item; if it does exist, it will update the
    item. The only difference is that, when using the `updateValue(_:forKey:)`, it
    actually returns the old value after performing the update. Using this method,
    you will get an optional value, because it is possible that no value exists in
    the dictionary. Let''s change the value now from `16.99` to `15.99`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67b0e755-9bfa-4779-b700-8d2b13ec0fd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we do not need the old value, we will just use the shorthand syntax to
    add a couple more pizzas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code and output should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99a290ee-5922-4c9c-82ab-d4d4838a4524.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have some data inside our dictionary, let's see how we can access
    that data.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing an item in a dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When trying to access an item inside a dictionary, you will always receive
    an optional value. The reason for this is that you could potentially receive a
    nil value if the value does not exist. So, you should always use an `if...let`
    statement in order to safeguard your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c187aee1-e7f0-4bda-97eb-f76fc236077f.png)'
  prefs: []
  type: TYPE_IMG
- en: Iterating over dictionary values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like an array, we can iterate through our dictionary; however, there are
    a few differences. Since a dictionary is unordered, each time you loop through,
    the values will never be in the same order. With dictionaries, you can loop through
    both the values and keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s iterate over a dictionary''s values using a `for...in` loop. Add the
    following into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c70bfb5c-c786-4731-863d-eb9fb75151a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Iterating over dictionary keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To iterate over a dictionary''s keys using a `for...in` loop, add the following
    into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code and output should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/347edcf4-63dd-4124-bbc0-c817ec97d8b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Iterating over dictionary keys and values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you need to iterate over both dictionary keys and values using a `for...in`
    loop, you use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code and output should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e41dd27-a09c-49ec-81bb-32b1d3dc66e2.png)'
  prefs: []
  type: TYPE_IMG
- en: So, we have now looked at how to loop through a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the number of items in a dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to keys and values, we have other useful properties. We can see
    the number of items in a dictionary using the `count` property. Let''s try that
    by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your code and output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1802f11-74b8-4c9b-81fa-9161e6870a9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Along with count, we can check whether a dictionary `isEmpty` or not. Let''s
    use this in an `if...else` statement by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your code and output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b480666f-76fb-4b72-a5dc-6746ff5f6e7d.png)'
  prefs: []
  type: TYPE_IMG
- en: This kind of logic is helpful when you want to display something back to the
    user or hide a UI.
  prefs: []
  type: TYPE_NORMAL
- en: Removing items from a dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, let''s learn how to remove an item from a dictionary. When deleting items
    from a dictionary, we have two primary ways of doing this. The first uses `removeValue(forKey:)`.
    Let''s add this right above our `if...else` statement that checks if the dictionary
    `isEmpty`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efea94bb-7bbb-438e-989e-ed9e836c0ccb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at the second way of removing dictionary items, the shorthand syntax.
    Add the following to Playgrounds following the `removeValue(forKey:)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c188068-eb0f-4558-9cbe-f7c70d472b26.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that, just like with `updateValue(_:forKey:)`, `removeValue(forKey:)`
    will return you the value before it is removed. If you do not need the value,
    the shorthand syntax is the preferred method.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we covered arrays and dictionaries, and now we will review one last
    collection: sets.'
  prefs: []
  type: TYPE_NORMAL
- en: Sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A set stores unique values of the same type in a collection without a defined
    order. Let''s look at a diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/626d6661-f395-47b0-981d-1b533e149a75.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, we have two circles, both of which represent a set.
    On the left, we have Craig's favorite movies and on the right, we have Gabe's
    favorite movies.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we create these sets, let''s just create an empty set and see what that
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa760614-256b-4ad3-909f-571b26fcd5cc.png)'
  prefs: []
  type: TYPE_IMG
- en: In this first set, after the equals sign, we create the set and give it a data
    type of String. Then, we use the parentheses to initialize the set.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a set with an array literal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our first set was an empty String set, but we can create a set using an array
    literal. Let''s add the following into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17c38bd2-4877-4913-96c2-f2b4b8d1fe3b.png)'
  prefs: []
  type: TYPE_IMG
- en: This preceding immutable set has a data type of Int, but in the parentheses
    we pass an empty array literal when we used the brackets.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mutable set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are familiar with the way sets are created, let''s create a mutable
    set for Craig''s favorite movies and one for Gabe''s favorite movies. Add the
    following into Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41ee603c-7af3-41a1-a6b8-0d41bde8efb6.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have two mutable sets. The first set is created with an empty array literal
    and the second set is created with some initial values. Let's add some more items
    to both sets.
  prefs: []
  type: TYPE_NORMAL
- en: Adding items into a set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to add an item into a set, we have to use the `insert()` method. Let''s
    use that to add another movie to Gabe''s favorite movies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c7f29e9-c839-47c0-90ba-b8e7ad3c8cb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, Gabe has nine movies and Craig still has none. We added the `gabeFaveMovieSet`
    variable again so that we can see the contents update in the Results panel. In
    order to add multiple items into a set, we can use an array literal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add 10 movies to Craig''s list, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c68f1a98-19cd-4984-b883-3cae32580613.png)'
  prefs: []
  type: TYPE_IMG
- en: Craig's set now has 10 movies. Next, let's see how we can work with sets.
  prefs: []
  type: TYPE_NORMAL
- en: Checking if a set contains an item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we can do with sets is to check if a set contains an item.
    Let''s see if Craig''s movie list has the movie Green Mile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3ad43e4-048c-45f6-9fd2-2ef85d725c27.png)'
  prefs: []
  type: TYPE_IMG
- en: In this preceding example, we used the `contains()` method in order to discover
    whether an item is in the set.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating over a set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want a list of all the movies in Gabe''s list, we can use a `for...loop`.
    Let''s see how that works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cbad11c-d862-41a6-b17d-748f409a57a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have seen a `for...in` loop for all three collections, arrays,
    dictionaries, and sets, you can see that there are a lot of similarities. Remember,
    since sets come unordered, every time we run our `for...in` loop we will get a
    list in a different order. The way around this is to use the `sorted()` method.
    This will ensure that every time we loop through our list, it will always be in
    the same order. Let''s do that on Craig''s movie list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4f4a587-eb69-41a4-9c0a-f4a137b25c79.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our set sorted, let's look at the real power of using sets.
  prefs: []
  type: TYPE_NORMAL
- en: Intersecting two sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following diagram, we see that, if we intersect both sets together,
    we should get a list of any movies they have in common:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d990084c-3e7f-46b3-9780-14d7f4e9bf3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can do the same using the `intersection()` method in our code. Let''s intersect
    both movie lists and see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code and output should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f10ed341-3565-4d64-b332-58f1dcdbff54.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the only two movies these sets have in common are *Winter Solider*
    and *The Illusionist*. In addition to seeing which movies the two sets have in
    common, we also can join the lists to get one consolidated list of the movies
    from both sets.
  prefs: []
  type: TYPE_NORMAL
- en: Joining two sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you look at the following diagram, you can see the two sets joined together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f642f6b6-ccc4-4b55-b6d4-5652dc8053e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the `union()` method, we get a consolidated list of items with no duplicates.
    Let''s try this in Playgrounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65b0ec44-3488-4c33-9c48-a919f7261283.png)'
  prefs: []
  type: TYPE_IMG
- en: We have a combined list of movies that includes all the movies that the two
    sets did not have in common and the two movies that were in common, but only listed
    once. As you can see, sets are really powerful and you can use them to manipulate
    data. Finally, we need to look at how you can remove items from a set.
  prefs: []
  type: TYPE_NORMAL
- en: Removing items from a set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to remove an item from a set, we can use the `remove()` method. When
    we use this method, we just input the item we want to remove in the parentheses.
    Let''s remove *Winter Solider* from Craig''s movie list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cae9ae0-f4de-45a0-8e93-54a458fa5a61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you wanted to remove more than a single item from a set (for instance, all
    of the items), then you can use the `removeAll()` method or give it an empty array
    literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1e67d5d-c0ad-42ae-ba92-1f05a81eff54.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, both sets are empty.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot in this chapter. We now are comfortable with using collections.
    Now that you are familiar with arrays, dictionaries, and sets, take the time to
    practice and work with them as much as you can. Collections are used a ton in
    programming so getting comfortable is very important.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we will touch on these things throughout the creation of the *Let's
    Eat* app, it is best to make sure you are comfortable with what we covered here.
    So, please review as much as you need in order to make sure you feel that you
    are proficient in the topics contained in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start building our *Let's Eat* app. Over the next
    two chapters, we will work on getting our project set up and then we will start
    working on the visual aspects of our app.
  prefs: []
  type: TYPE_NORMAL
