["```java\nLooper mainLooper = Looper.getMainLooper();\n```", "```java\nclass SimpleLooper extends Thread {\n\n       public void run() {\n        // Attach a Looper to the current Thread\n           Looper.prepare();\n        // Start the message processing\n           Looper.loop();\n       }\n}\n```", "```java\npublic class SimpleLooper extends Thread{\n\n    private Handler myHandler;\n\n    @Override\n    public void run() {\n        Looper.prepare();\n        myHandler  =  new MyHandler();\n        Looper.loop();\n    }\n\n    public Handler getHandler(){\n        return myHandler;\n    }\n}\n```", "```java\npublic class MyHandler extends Handler {\n\n    @Override\n    public void handleMessage(Message msg) {\n        // Add here your message handling\n       // processing\n    }\n}\n```", "```java\npublic class StackTraceHandler extends Handler {\n\n    @Override\n    public void handleMessage(Message msg) {\n       // Prints the Stack Trace on the Android Log\n       Thread.currentThread().dumpStack();\n    }\n}\n```", "```java\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    ...\n    Handler handler = new StackTraceHandler();\n    Message msg = handler.obtainMessage();\n    handler.sendMessage(msg);\n}\n```", "```java\n.....StackTraceHandler.handleMessage(StackTraceHandler.java:18)\nandroid.os.Handler.dispatchMessage(Handler.java:99)\nandroid.os.Looper.loop(Looper.java:137)\nandroid.app.ActivityThread.main(ActivityThread.java:4424)\njava.lang.reflect.Method.invokeNative(Native Method)\njava.lang.reflect.Method.invoke(Method.java:511)\n```", "```java\npublic class StackTraceHandler extends Handler {\n\n    StackTraceHandler(Looper looper){\n        super(looper);\n    }\n```", "```java\npublic class SimpleLooper extends Thread{\n    // start condition\n    boolean started = false;\n    Object startMonitor =  new Object();\n    Looper threadLooper = null;\n\n    @Override\n    public void run() {\n        Looper.prepare();\n        threadLooper = Looper.myLooper();\n        synchronized (startMonitor){\n            started = true;\n            startMonitor.notifyAll();\n        }\n        Looper.loop();\n    }\n\n    Looper getLooper(){\n        return threadLooper;\n    }\n    // Threads could wait here for the Looper start\n    void waitforStart(){\n         synchronized (startMonitor){\n             while (!started){\n                 try {\n                    startMonitor.wait(10);\n                 } catch (InterruptedException e) {\n                    ...\n                 }\n             }\n          }\n     }\n```", "```java\nSimpleLooper looper = new SimpleLooper();\nlooper.start();\nlooper.waitforStart();\nHandler handler = new StackTraceHandler(looper.getLooper());\n```", "```java\nMessage msg = handler.obtainMessage();\nhandler.sendMessage(msg);\n```", "```java\nat...activity.StackTraceHandler.handleMessage(StackTraceHandler.java:18)\nat android.os.Handler.dispatchMessage(Handler.java:99)\nat android.os.Looper.loop(Looper.java:137)\nat ...activity.SimpleLooper.run(SimpleLooper.java:23)\n```", "```java\nfinal TextView myTextView = (TextView) findViewById(R.id.myTv);\n// Get the main thread Looper by calling the Context\n// function getMainLooper\nHandler handler = new Handler(getMainLooper());\n\nhandler.post(new Runnable(){\n    public void run() {\n        String result = processSomething();\n        myTextView.setText(result);\n    }\n});\n```", "```java\nhandler.postAtFrontOfQueue(new Runnable(){\npublic void run() {\n      ...\n   }\n});\n```", "```java\npublic class MyRunnable implements Runnable {\n\n    @Override\n    public void run() {\n        // do some work\n    }\n};\n// Defer work in the main Thread\n// by 10 seconds time\n   handler.postDelayed(new MyRunnable(), TimeUnit.SECONDS.toMillis(10));\n```", "```java\n// Work to be run at a specific time\nhandler.postAtTime(new MyRunnable(),\n                   SystemClock. uptimeMillis() +\n                   TimeUnit.SECONDS.toMillis(10));\n```", "```java\npublic class MyActivity extends Activity {\n  // non-static inner class\n  public class MyRunnable implements Runnable {\n\n   @Override\n   public void run() {\n     // do some work\n   }\n  }\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n        ...\n    // Post Inner class instance Runnable\n    handler.postDelayed(new MyRunnable(),\n                         TimeUnit.MINUTES.toMillis(10));\n\n    // Post an Anonymous class instance\n    handler.postDelayed(new Runnable() {\n     @Override\n     public void run() {\n     // do some work\n     }\n    }, TimeUnit.MINUTES.toMillis(20));\n    ...\n    }\n   }\n```", "```java\npublic class MyActivity extends Activity {\n    // static inner class\n    public static class MyRunnable implements Runnable {\n```", "```java\nstatic class MyRunnable implements Runnable {\n       private View view;\n       public MyRunnable(View view) {\n           this.view = view;\n       }\n       public void run() {\n           // ... do something with the view.\n       }\n}\n```", "```java\nstatic class MyRunnable implements Runnable {\n\n    private WeakReference<View> view;\n\n public MyRunnable(View view) {\n   this.view = new WeakReference<View>(view);\n }\n public void run() {\n  View v = view.get(); // might return null\n  if (v != null) {\n    // ... do something with the view.\n    }\n  }\n}\n```", "```java\nprivate static class MyHandler extends Handler {\n    private TextView view;\n    public void attach(TextView view) {\n        this.view = view;\n    }\n    public void detach() {\n        view = null;\n    }\n    @Override\n    public void handleMessage(Message msg) {\n      // handle message\n    }\n}\n\n@Override\nprotected void onResume() {\n  super.onResume();\n  myHandler.attach(myTextView);\n}\n\n@Override\n  protected void onPause() {\n    super.onPause();\n    myHandler.detach();\n}\n```", "```java\nhandler.post(new Runnable(){\n  public void run() {\n    TextView text = (TextView) findViewById(R.id.text);\n    text.setText(\"updated on the UI thread\");\n  }\n});\n```", "```java\npublic void onCreate(Bundle savedInstanceState) {\n    ...\n    // Handler bound to the main Thread\n    final Handler handler = new Handler();\n\n    // Creates an assync line of execution\n    Thread thread = new Thread() {\n        public void run() {\n            final String result = searchSynomym(\"build\");\n            handler.post(new Runnable() {\n                public void run() {\n                    TextView text = (TextView)\n                          findViewById(R.id.text);\n                    text.setText(result);\n                }\n            });\n        }\n    };\n    // Start the background thread with a lower priority\n    thread.setPriority(Thread.MIN_PRIORITY);\n    thread.start();\n```", "```java\nfinal TextView text = (TextView) findViewById(R.id.text);\nThread thread = new Thread(){\n  public void run(){\n   final String result = searchSynonym(\"build\"); \n   // Using the view post capabilities             \n   text.post(new Runnable(){\n     public void run() {\n       text.setText(result);\n       }\n      });\n    }\n   };\nthread.setPriority(Thread.MIN_PRIORITY);\nthread.start();\n```", "```java\nfinal Runnable runnable = new Runnable(){\n  public void run() {\n    // ... do some work\n  }\n};\nhandler.postDelayed(runnable, TimeUnit.SECONDS.toMillis(10));\nButton cancel = (Button) findViewById(R.id.cancel);\ncancel.setOnClickListener(new OnClickListener(){\n  public void onClick(View v) {\n  handler.removeCallbacks(runnable);\n }\n});\n```", "```java\npublic static class SpeakHandler extends Handler {\n\n    public static final int SAY_HELLO = 0;\n    public static final int SAY_BYE = 1;\n\n    @Override\n    public void handleMessage(Message msg) {\n        switch (msg.what) {\n            case SAY_HELLO:\n                sayWord(\"hello\");\n                break;\n            case SAY_BYE:\n                sayWord(\"goodbye\");\n                break;\n            default:\n                super.handleMessage(msg);\n        }\n    }\n    private void sayWord(String word) {\n        // Say word\n    }\n}\n```", "```java\nprivate Handler handler;\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    handler = new SpeakHandler();\n    ...\n}\n```", "```java\n  handler.sendEmptyMessage(SpeakHandler.SAY_HELLO);\n  ...\n  handler.sendEmptyMessage(SpeakHandler.SAY_BYE);\n```", "```java\npublic static class SpeakHandler extends Handler {\n    public static final int SAY_HELLO = 0;\n    public static final int SAY_BYE = 1;\n    public static final int SAY_WORD = 2;\n    @Override\n    public void handleMessage(Message msg) {\n       switch(msg.what) {\n           case SAY_HELLO:\n               sayWord(\"hello\"); break;\n           case SAY_BYE:\n               sayWord(\"goodbye\"); break;\n           case SAY_WORD:\n                //  Get an Object\n               sayWord((String)msg.obj); break;\n           default:\n               super.handleMessage(msg);\n        }\n    }\n    private void sayWord(String word) { ... }\n}\n```", "```java\nMessage msg =  Message.obtain(handler,\n               SpeakHandler.SAY_WORD, \"Welcome!\");\nhandler.sendMessage(msg);\n```", "```java\nhandler.sendMessageAtFrontOfQueue(msg);\nhandler.sendMessageAtTime(msg, time);\nhandler.sendMessageDelayed(msg, delay);\n```", "```java\nhandler.sendEmptyMessageAtTime(what, time);\nhandler.sendEmptyMessageDelayed(what, delay);\n```", "```java\nString myWord = \"Do it now!\";\nhandler.removeMessages(SpeakHandler.SAY_BYE);\nhandler.removeMessages(SpeakHandler.SAY_WORD, myWord);\n```", "```java\nhandler.hasMessages(SpeakHandler.SAY_BYE)\nhandler.hasMessages(SpeakHandler.SAY_WORD, myWord)\n```", "```java\nString stringRef1 = new String(\"Welcome!\");\nString stringRef2 = new String(\"Welcome Home!\");\nMessage msg1 =  Message.obtain(handler,\n                    SpeakHandler.SAY_WORD,stringRef1);\nMessage msg2 =  Message.obtain(handler,\n                    SpeakHandler.SAY_WORD, stringRef2);\n\n// Enqueue the messages to be processed later\nhandler.sendMessageDelayed(msg1,600000);\nhandler.sendMessageDelayed(msg2,600000);\n\n// try to remove the messages\nhandler.removeMessages(SpeakHandler.SAY_WORD,\n                       stringRef1);\nhandler.removeMessages(SpeakHandler.SAY_WORD,\n                       new String(\"Welcome Home!\"));\n// Create a Print Writer to Process StandardOutput\nPrintWriterPrinter out =\n     new PrintWriterPrinter(new PrintWriter(System.out,true));\n\n// Dump the Looper State\nhandler.getLooper().dump(out,\">> Looper Dump \");\n```", "```java\n>> Looper Dump Looper (main, tid 1) {a15844a}\n>> Looper Dump Message 0: { when=+10m0s0ms\n        what=2       \n        obj=Welcome Home! target=...SpeakHandler }\n>> Looper Dump (Total messages: 1,\n        polling=false, quitting=false)\n```", "```java\nboolean handleMessage(Message msg)\n```", "```java\npublic class Speaker implements Handler.Callback {\n\n    public static final int SAY_WELCOME = 2;\n    public static final int SAY_YES = 3;\n    public static final int SAY_NO = 4;\n\n    @Override\n    public boolean handleMessage(Message msg) {\n        switch(msg.what) {\n            case SAY_WELCOME:\n                sayWord(\"welcome\"); break;\n            case SAY_YES:\n                sayWord(\"yes\"); break;\n            case SAY_NO:\n                sayWord(\"no\"); break;\n            default:\n                return false;\n        }\n        return true;\n    }\n    private void sayWord(String word) {  }\n}\n```", "```java\nHandler handler = new SpeakHandler(new Speaker());\n```", "```java\n// will be handled by SpeakHandler Handler\nhandler.sendEmptyMessage(SAY_HELLO);\n// will be handled by Speaker Handler.Callback\nhandler.sendEmptyMessage(SAY_YES);\n```", "```java\npublic class WeatherRetriever extends Handler {\n\n    private final Handler mainHandler;\n\n    public static final int GET_TODAY_FORECAST = 1;\n\n    public WeatherRetriever(Looper looper,Handler mainHandler){\n        super(looper);\n        this.mainHandler = mainHandler;\n    }    \n    // Long Computing Operation \n    String getForecast(){ ... }\n\n    @Override\n    public void handleMessage(Message msg) {\n        switch(msg.what) {\n            case GET_TODAY_FORECAST:\n                ...\n                final String sentence = getForecast();\n                Message resultMsg =\n                    mainHandler.obtainMessage(\n                        WeatherPresenter.TODAY_FORECAST,sentence);\n                this.mainHandler.sendMessage(resultMsg);\n                break;\n        }\n    }\n};\n```", "```java\npublic class WeatherPresenter extends Handler {\n  public static final int TODAY_FORECAST = 1;\n\n  @Override\n  public void handleMessage(Message msg) {\n    switch(msg.what) {\n    case TODAY_FORECAST:\n      readTodayWeather((String) msg.obj); break;\n      ...\n    }\n  }\n  private void readTodayWeather(String word) {\n   // Present the weather forecast on the UI\n   ...\n }\n};\n```", "```java\nHandlerThread thread = new HandlerThread(\"background\",    Process.THREAD_PRIORITY_BACKGROUND);\n```", "```java\nthread.start();\n```", "```java\n// Background Thread    \nprivate HandlerThread thread;\n\nprotected void onCreate(Bundle savedInstanceState) {\n   ...\n   WeatherPresenter presHandler = new WeatherPresenter();\n\n   // Creates a Thread with a looper attached\n   handlerThread = new HandlerThread(\"background\",\n             Process.THREAD_PRIORITY_BACKGROUND);\n   // start The Thread and waits for work\n   handlerThread.start();\n\n   // Creates the Handler to submit requests\n   final WeatherRetriever retHandler =\n       new WeatherRetriever(handlerThread.getLooper(),presHandler);\n```", "```java\ntodayBut.setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View v) {     \n    retHandler.sendEmptyMessage(WeatherRetriever.\n                                GET_TODAY_FORECAST);\n  }\n}\n```", "```java\nI/MTHandler(17666): Retrieving Today Forecast at Thread[background,120]\nI/MTHandler(17666): Presenting Today Forecast at Thread[main,1]\n```", "```java\nprotected void onPause() {\n  super.onPause();\n  if (( handlerThread != null) && (isFinishing()))\n    handlerThread.quit();\n}\n```", "```java\n    ...\n// Creates a Print writer to standard output\nPrintWriterPrinter out= new PrintWriterPrinter(\n   new PrintWriter(System.out,true)\n);\nhandlerThread.getLooper().setMessageLogging(out);\n    ...\nreqHandler.sendEmptyMessageDelayed (\n    WeatherRetriever.GET_TODAY_FORECAST,\n    10000\n);\n```", "```java\n>>>>> Dispatching to Handler (…WeatherRetriever) {a15844a} null: 1\n<<<<< Finished to Handler (...WeatherRetriever) {a15844a} null\n```"]