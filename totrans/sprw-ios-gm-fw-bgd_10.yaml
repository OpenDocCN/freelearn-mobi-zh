- en: Chapter 10. Polishing Our Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In the previous chapter, we added sound and music to our game. We also learned
    about audio file formats and even how to generate our own sound effects.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to polish our game. We will be covering the following
    topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Improving the game over mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a minimalistic tutorial
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading and saving the current state of the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polishing is the process of giving the last finishing touches to the game. There
    is a saying in software development that the last 20 percent of the development
    feels as hard as the first 80 percent. With such motivation, let's polish our
    game, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Adding additional scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our game still feels rough around the edges. Our first order of business is
    to add more scenes, which should make the game feel more rounded, especially when
    starting the game and when the game is over.
  prefs: []
  type: TYPE_NORMAL
- en: The game over scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, the game over mechanism is a bit too minimalistic. While the player
    can lose and win the game, they can't restart the game once it is over. The player
    needs to shut down the application and open it again.
  prefs: []
  type: TYPE_NORMAL
- en: This is counterintuitive as the default behavior of iOS apps is to freeze the
    app instead of shutting it down. So in the worst case, our game with the **Game
    Over** message stays in the memory until the device is rebooted or the user kills
    the application from the app switcher.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the game over scene
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As our first task, we are going to decouple the game over logic and move it
    into a separate scene. Our game over scene should show whether the game was won
    or lost.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – showing the game over scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following steps to create the game over scene:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our Xcode project if it's not already open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Objective-C class inside the `GameScenes` group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call this class `GameOver` it should be a subclass of `Scene`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the `GameOver.h` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the following line of code, add a property called `message`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the following line of code, add another property to indicate whether
    the game was won:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Switch to `GameOver.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `SceneDirector.h`, `Assets.h`, and the `World.h` files, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an initializer for this new scene, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a getter for the `gameWon` property, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the setter for the `gameWon` property, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Switch to `Game.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `GameOver.h` file using the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create an instance of the `GameOver` scene using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the game over instance to the scene director using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Show the game over scene by default using the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the example and we will see the game over scene, as shown in the following
    screenshot:![Time for action – showing the game over scene](img/1509OS_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have done before, we opened our Xcode project. Then, we created a class,
    which is going to be our game over scene. It's called `GameOver` and is a subclass
    of `Scene`.
  prefs: []
  type: TYPE_NORMAL
- en: In the `GameOver` header file, we added two properties in step 5 and 6, respectively.
    The first property is the message that will be displayed on the screen. The second
    is to indicate whether the game was won. We added a custom getter and setter for
    this property later on. We marked this property as non-atomic, as we don't really
    need thread safety and we used only one thread anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `GameOver.m` file, we imported all the necessary headers, which are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The asset manager from `Assets.h`, as it is most likely that we load an asset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scene director from `SceneDirector.h`, because we need to switch to another
    scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `World` class from `World.h`, as we need to reset our in-game values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we added the initializer. Our game over scene consists of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Water as the background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The text field which is the `message` property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reset button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, we used the `SPTextField` factory method (also known as a convenience
    constructor) that lets us define the width, height, text, font name, font size,
    and color in a single step. One thing we need to consider is to keep the font
    size similar to the original bitmap font size. If it's much bigger than the original
    size, the font gets all pixelated and washed out.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a way to get around this though: if we set `SP_NATIVE_FONT_SIZE` as
    the font size for the font instance, it will automatically calculate its actual
    size so that it is displayed as sharp as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: We defined the touch event for the reset button as a block and reset all of
    our in-game values and switched to the pirate cove scene. After this, we added
    all of our display objects to the display tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we defined our custom getter and setter for our `gameWon` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Getter**: This simply returns the internal `_gameWon` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setter**: After we set the property value, we updated the message depending
    on its value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `Game` class, we need to create an instance of the `GameOver` scene,
    which we then added to the scene director. In step 16, we updated the default
    scene to be the game over scene.
  prefs: []
  type: TYPE_NORMAL
- en: When we ran the example in the last step, we saw the game over scene.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the game over scene
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have our game over scene, let's integrate it into the game.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – having the game over scene show up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To incorporate the game over scene into the game, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the `Battlefield.h` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove both the `textGameWon` and `textGameLost` properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the `Battlefield.m` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove all references to the `textGameWon` and `textGameLost` properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `GameOver.m` file, add a `reset` method using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `SceneDirector.h` file, add a property called `currentScene` using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `SceneDirector.m` file, update the `showScene` method to set the `currentScene`
    property, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Switch to the `Battlefield.m` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `reset` method to set the visibility of the ships, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the condition to win the game, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, update the condition to lose the game, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `Game.m`, change the default scene back to the pirate cove.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the example. When we run the example and once we actually lose the game,
    we see the following screen:![Time for action – having the game over scene show
    up](img/1509OS_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `Battlefield` header file, we removed the text field properties that
    show up when the game was won or lost. Then, we removed all code portions that
    reference these properties in `Battlefield.m`.
  prefs: []
  type: TYPE_NORMAL
- en: In step 5, we added a `reset` method for our `GameOver` scene, where we set
    the `gameWon` property to `NO`. The difference between this scene switch is that
    we need to set the `gameWon` property after the scene has been switched. In order
    to facilitate this, we updated the scene director.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, we added a read-only property called `currentScene` that gives
    us a reference to the current scene. After this, we updated the `showScene` method
    to set the current scene. This happened right after we set the current scene to
    be visible and called the `reset` method.
  prefs: []
  type: TYPE_NORMAL
- en: In the battlefield scene, we first updated the visibilities of our ships. If
    we hadn't done this, the enemy ships would stay visible even after we reset the
    game.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 10 and 11, we updated the win and lose conditions. We imported the
    `GameOver.h` file here as well, in order to cast the `currentScene` property to
    a pointer to the `GameOver` class.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we did was change back to the pirate cove scene. When we ran
    the example and when we lost or won the game, the game over scene was shown and
    we were able to restart the game.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a main menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we are going to add a simple main menu.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – integrating the main menu into our game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following steps to add a main menu:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new class called `MainMenu` which should be a subclass of `Scene`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to `MainMenu.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import `Assets.h` and `SceneDirector.h`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the initializer for the main menu, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Switch to `Game.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `MainMenu.h` using the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the following code, create a local variable for the main menu that will
    hold an instance of the `MainMenu` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `mainMenu` instance to the director, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `showScene` call to the main menu scene, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the example and we will see the main menu, as shown in the following screenshot:![Time
    for action – integrating the main menu into our game](img/1509OS_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add a main menu, we needed a class subclassed from `Scene`. Once the class
    was created, we imported the asset management system and the scene director.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 3, we added the initializer. Our main menu consists of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The same background that we used in the battlefield and other scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pirate ship
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button to start a new game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button to continue the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the new game, we used a block for its touch event, which switches to the
    pirate cove scene. The **Continue** button does not have an event yet and is disabled.
    After this, we need to take all our elements to the display tree.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 5 to 9, we added the main menu to our game class in a manner similar
    to how we added the game over scene.
  prefs: []
  type: TYPE_NORMAL
- en: When we ran the example, we saw the main menu.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main menu now only has two buttons. Typically, a main menu offers a bit
    more than this such as buttons to switch to the options menu or the credits screen.
    In some instances, the main menu even has buttons to navigate to social sites.
    Go ahead and add the options and credits screens, which can be opened from the
    main menu.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an intro scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An intro scene is a perfect way to introduce the player to the characters, the
    story or the art style of a game. An intro is not necessary for all games; in
    fact, it's best used if it fits into the overall game and style of the game.
  prefs: []
  type: TYPE_NORMAL
- en: As we don't have a story or characters, we are going to show two ships moving
    near each other, shooting each other, and eventually one of the ships sinks.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating an intro for our game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following steps to add the intro scene:'
  prefs: []
  type: TYPE_NORMAL
- en: This is as good a time as any to move the collision detection code into a separate
    file. Create a new group called `Logic` and add a class inside this group called
    `Collision` which is a subclass of `NSObject`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare this static method in the `Collision` class, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside `Collision.m`, implement the `checkShipCollision` method with the following
    lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order for this code to work, we need to import `Assets.h` and `World.h` in
    the `Collision.m` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Battlefield.m`, delete the collision code, import `Collision.h`, and use
    the new method from the `Collision` class now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the intro scene by subclassing `Scene` and call it `Intro`. This should
    be done inside the `GameScenes` group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Intro.h`, import `Ship.h` and add two instance variables, one for the pirate
    ship and one for the enemy ship, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Switch to `Intro.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an initializer for the `Intro` class with the help of the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the event listener for `onEnterFrame`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a reset method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `MainMenu.m`, show the intro scene if the new game button has been touched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Game.m`, import `Intro.h`, create an instance of the `Intro` class, and
    add it the director.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we start a new game, we see the intro in action, as shown in the following
    code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating an intro for our game](img/1509OS_10_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we needed the collision detection in both the intro and the game itself,
    we moved it into its own class. When we moved the checkShipCollision method, we
    added an additional parameter. This parameter was then passed as a reference to
    the `boundsInSpace` method. We imported the asset management and the `World` class
    for this code snippet to work.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, we updated the collision in the battlefield scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then added a new scene called `Intro`, where we first added two instance
    variables, one for our own ship and one for the pirate ship. In step 9, we added
    the initializer, which perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the water background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initialize both ship instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a button to skip the intro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then added an event listener to skip the event listener and switch to the
    pirate cove scene. We also added an event listener for the enter frame event.
    We then added all elements to the display tree
  prefs: []
  type: TYPE_NORMAL
- en: In step 10, we implemented the `onEnterFrame` event listener, which calls the
    collision method and advances the time of both ships.
  prefs: []
  type: TYPE_NORMAL
- en: The `reset` method calls the `reset` method of these ships and moves the ships
    to the center of the screen. The enemy ship can shoot only once, while the pirate
    ships can shoot multiple times to kill the enemy ship.
  prefs: []
  type: TYPE_NORMAL
- en: We showed the intro scene in the main menu. After this, we added the `Intro`
    class to the game class, and when we ran the example, we saw the intro scene when
    we started a new game.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing tutorial mechanics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many different ways for tutorials to be implemented. It may range
    from just showing an image with controls, to having an interactive experience,
    to displaying a control scheme each time the player is about to perform an action.
    In general, the last two options could be achieved with a finite state machine,
    similar to the one we used for our artificial intelligence.
  prefs: []
  type: TYPE_NORMAL
- en: For our purposes, we will update the intro scene to display hints while the
    animation is playing.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding a tutorial to our intro scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to display hints during the intro:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Intro.h`, add an instance variable called message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Switch to `Intro.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the initializer with the help of the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `reset` method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the example and when we see the intro, we now have hints displayed on the
    screen:![Time for action – adding a tutorial to our intro scene](img/1509OS_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first added an instance variable to display our hints. We then updated the
    initializer to initialize this instance variable and have a black but slightly
    opaque background. We added these two elements to the display tree.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, we updated the `reset` method to change the text of the message to
    show how the core gameplay elements work.
  prefs: []
  type: TYPE_NORMAL
- en: When we ran the example, the hints were displayed during the intro.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and saving the current state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we can play the game, but as soon as we end the game, we have to start
    the game from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – loading and saving the last played game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to load and save the current state:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `World.h`, declare methods to serialize and deserialize data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement these serializers with the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `MainMenu.m`, add `World.h` to the import section and update the initializer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `AppDelegate.m`, we import `World.h` and add a new method, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the example to see the result. When we start the game, we can now continue
    the game:![Time for action – loading and saving the last played game](img/1509OS_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we added the serializer and deserializer methods to our `World` class.
    The serializer takes values from the `World` class and places them in `NSDictionary`.
    The deserializer works the other way around. It takes values from `NSDictionary`
    and updates the values in the `World` class.
  prefs: []
  type: TYPE_NORMAL
- en: In the main menu scene, we checked whether there is already something saved
    and we deserialize the data in case there is any data. We added an event listener
    for our **Continue** button, which directly switches to the pirate cove scene.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, we saved the game data once the application was not active any more.
  prefs: []
  type: TYPE_NORMAL
- en: When we ran the example, we were able to resume the game.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. When we override the font size for a bitmap font in SPTextField, it scales
    to that size.
  prefs: []
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. When is it a good idea to encapsulate code snippets into their own class
    or methods?
  prefs: []
  type: TYPE_NORMAL
- en: Always, even if it's just used a single time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the code snippet is being used multiple times
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Never
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. `NSUserDefaults` provides a way to store data.
  prefs: []
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about polishing our game. Specifically, we covered
    adding more scenes such as a main menu and an intro, and we touched upon tutorial
    mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our game almost feels like an actual game, let's see how we can integrate
    third-party services—which is the topic of the next chapter.
  prefs: []
  type: TYPE_NORMAL
