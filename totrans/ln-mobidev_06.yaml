- en: MVP is Always More Minimal Than You Think
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The M in MVP stands for Minimum, not Maximum. If your idea of MVP incorporates
    every potential use case, every potential mix of audience, all facets of available
    functionality, and creates a backlog that would take a development team longer
    than 90 days to complete, you don't have **Minimum Viable Product**. On the contrary,
    you have a different beast altogether that all too many times bring teams to their
    knees causing unnecessary rework, lost cycles, lost revenue, and all the other
    dysfunctional misery that comes with working on a product that isn't well defined
    and validated with its users.
  prefs: []
  type: TYPE_NORMAL
- en: In written context, the idea of defining MVP seems simple; the challenges surface
    when teams try to outline and define what minimal means in terms of their initial
    product release. "How Minimal is Minimal?", "Can I have multiple core functions?",
    "Are all my use cases covered and accounted for?", and "Can I have more than 12
    buttons on a screen?" All these and many other questions make it difficult to
    know whether our proposed MVP is truly minimal and viable.
  prefs: []
  type: TYPE_NORMAL
- en: This guide is designed to act as a benchmarking tool, and will help ensure that
    you have successfully defined and validated an MVP that's ready for market release.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is MVP?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to define your MVP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail fast/validate everything
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterate and evolve your MVP - from viable to lovable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is MVP?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **Minimum Viable Product** (**MVP**) is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '"The version of a new product which allows a team to collect the maximum amount
    of validated learning about customers with the least effort"'
  prefs: []
  type: TYPE_NORMAL
- en: '- Eric Ries'
  prefs: []
  type: TYPE_NORMAL
- en: 'Applications such as Instagram, Snapchat, and Tinder all share the same thing
    in common: when they were launched, they were a much more simplified version of
    what they are today. The same can be said about smartphones and iPods. At the
    time of their inception, they did one thing and did it well. Clearly, these products
    have matured and after years of capital investment and development, have become
    apps that deliver way beyond their core functionality. What''s important to note
    is that they are great examples of products that were released to market with
    a minimal feature set, targeted at solving a core problem for an initial segment
    of users.'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of MVP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Embracing a Lean MVP product design and development model within your organization
    helps keep costs at a minimum and allows you to test and validate your ideas much
    faster:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Keep it simple**: Focusing on core functionality that delivers immediate
    value/utility allows you to get your product into the market faster, rather than
    committing to endless cycles of development that are needed to deliver a full-blown
    multifeature product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save money**: Reveal the market validity of your product and justify a case
    for further investment and development. Have a working prototype that allows you
    to pivot or persevere with minimal costs or efforts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learn and evolve**: The iterative and evolutionary nature of the MVP model
    is meant to be fast and nimble. It allows you to mature and refine your product
    over time in short sprints, while simultaneously surfacing invaluable user feedback
    and insights that help inform and shape your future iterations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to define your MVP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a lot of controversy surrounding how to define an MVP, as it relates
    to answering the question of "How minimal is minimal?" It's a very subjective
    concept, and every product has its own set of nuances and requirements that make
    it a little different. It's not an all-or-nothing proposition, but there are techniques
    and best practices that can be applied to help you define your offering as a MVP.
    The market demands may require more than one core piece of functionality to define
    MVP.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to build an MVP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bringing components together to form an MVP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying MVP to enterprise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building MVP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following first illustration, it''s clear that the intended MVP was
    to build a vehicle that would allow its users to commute from point A to point
    B, not necessarily how fast, how far, or committing to a motorized vehicle versus
    self-powered, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af83b65a-6da4-4c47-9d33-a8f616b745af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clearly, in the second illustration, multiple use-cases and conditions were
    considered, and as a result this model won''t allow for quick market validation
    and runs the risk of increasing costs and potentially missing the mark with its
    audience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6a0a699-50b3-42e9-99fb-fa3ca0a1d1f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Bringing components together to form an MVP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first illustration, they brought together several components to create
    a skateboard. They needed a board, some wheels, and the truck mounts to connect
    the wheels to the board. All these things together made up the MVP for a commuter
    vehicle. Apply this metaphor and thought process to the MVP that you are defining.
    For example, if your MVP is a CRM software, at the most basic level, it will need
    to provide a central place where users can store customer and prospect contact
    information, share it with colleagues, and track sales progress. Multiple components
    or features will be combined in order to define the MVP. Bringing together the
    functionality for managing customers and the reporting functionality to track
    sales leads is what defines the MVP for our example CRM. Both of these components
    are mini MVPs in and of themselves, and as standalone components don't define
    the MVP for a competitive CRM in the market. Don't forget, the **V** stands for
    **Viable**, and that means having just enough features to start selling.
  prefs: []
  type: TYPE_NORMAL
- en: Applying MVP to enterprise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The traditional enterprise approach to software development is focused around
    delivering the perfect, full-blown and feature-rich product before it is released
    to customers. Neither of this is minimal or viable, as it relates to MVP guidelines
    and best practices. Enterprise teams struggle to define minimal (just the right
    amount of features that add value and utility) and balance it against viable (do
    I have enough features in my product that people are willing to pay for?).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different methods that can be applied to enterprise products that
    help redefine MVP in that space:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data-driven design**: Place data at the center of product decisions. It''s
    easier than ever to use the voice of customers, usage metrics, and existing performance
    reports to create a hierarchy of features that can be prioritized and paired down
    to minimum and viable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Know your market**: You can''t build everything for everyone. Make sure you
    have a clear target market segment and start there, even if that means your customer
    is an enterprise player. Clearly defining who it is you are building your product
    for will help you define a barrier of entry into market and solidify your MVP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum Sellable Product (MSP)**: Once you''ve defined your MVP, don''t forget
    to make sure it''s viable. Test it with your target market to ensure that it has
    the minimal amount of features that your users would be willing to pay for. And
    avoid the common mistake of relying solely on the product manager''s intuition
    and internal assumptions to predict which features drive products. Validate!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply incremental UX**: Bring the concept of MVP down to the component or
    feature level, it''s not an all-or-nothing proposition anymore. The basic idea
    is to have a planned progression (leaving room for improvements through testing)
    of a feature that adds functionality at each stage. This will allow you to get
    to the market faster (viability) and mature your product over time through validated
    learning that saves time and costs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But don't think that everyone will understand this process immediately, especially
    in an enterprise where your colleagues and teams are spread out across the world.
    It requires relentless evangelism. In our company, *Dominion Dealer Solutions*,
    we have offices around the US supported by offshore teams in three different countries.
    To make things more challenging, many of the teams were former acquisitions that
    came with their own inherited cultures and biases. Getting everyone to understand
    and embrace the concept of developing MVPs took a lot of evangelizing by key people
    to develop buy-in. This took many months, but once the idea took hold, it spread
    like wildfire.
  prefs: []
  type: TYPE_NORMAL
- en: Fail fast – validate everything
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core fundamentals of MVP are to get user feedback, do user testing, and
    validate whether users are willing to use (and pay for) the product you are launching
    both before and throughout the entire product life cycle. Unfortunately, some
    teams get caught up with minimum/viable, and forget about validation altogether.
    Validated learning is the critical component that defines MVP, confirms market
    demand, and shapes future iterations and investment of time, revenue, and resources
    into your product. It is the best indicator of whether or not you should pivot
    and abandon a project before losing too much money and burning out resources,
    or persevere and keep forging ahead in the market. MVP is governed by a "fail
    fast and recover quickly" continuous validation model that ensures that teams
    remain hyperefficient in regards to time, resources, and operational capital.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the three things that help us do a good job at failing fast:'
  prefs: []
  type: TYPE_NORMAL
- en: Apply agile prototyping - eliminate tech debt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopt Lean UX cycles - the Build-Measure-Learn feedback loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing methods and best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply agile prototyping - eliminate tech debt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prototypes allow you to explore design ideas, test assumptions, and gather feedback
    from users while minimizing technical debt. For the ones who might not know, technical
    debt refers to future work that builds up over time when a team codes quickly
    to get a product or prototype to market, rather than code well to create the best
    possible solution.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, given today's technology, you can create high-def prototypes
    that require no technical debt at all. Any time savings that might be potentially
    gained by bypassing prototyping is lost many times over in development if your
    MVP interfaces and functions need to be redesigned and recreated after they have
    been committed to code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the advantages and benefits that are gained if you apply agile
    prototyping to your product design and development process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ownership and collaboration**: Increase team consensus and ownership; discover
    potential usability issues and correct them in prototype before programming a
    line of code and potentially assuming tech debt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workflow efficiency**: Reduce and eliminate the need for extensive story
    writing and requirement documentation. It''s much different when everyone can
    click and engage over an actual experience versus imagining and interpreting user
    interactions using wireframes or mockups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validate often**: Gather real-time feedback from users and rapidly evolve
    your MVP quickly, sprint by sprint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lean UX cycles – the Build-Measure-Learn feedback loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A core component of Lean UX is the Build-Measure-Learn feedback loop. The concept
    is originally derived from the book entitled "*The Lean Startup*", by Eric Ries.
    Its goal is to validate uncertainties, assumptions, and potential risks in order
    to guide future MVP iterations and product direction. The loop forms a cycle,
    and the cycle is applied to a sprint in agile development. This approach provides
    a methodology that quickly and effectively proves whether a product vision (MVP)
    will flounder or flourish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63f361b2-e4ec-4e7e-bd9b-a36849a43f0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Advantages of a feedback-focused development model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adopting a data-driven, feedback-focused development model allows organizations
    to manage development costs and resources much more efficiently. Development time
    and labor can immediately be reduced by creating a hi-fi prototype that can be
    used in validation cycles to inform the design process. It's a feast or famine
    digital marketplace out there—invalidated business assumptions are too risky and
    costly to produce in today's digital marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Phases of the Build-Measure-Learn feedback loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three phases to this loop: Build, Measure, and Learn.'
  prefs: []
  type: TYPE_NORMAL
- en: Phase I - Build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is figuring out the problem that needs to be solved and then
    defining and developing an MVP to begin the process of learning as quickly as
    possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ideate**: Develop your idea or concept. Identify what the problem that needs
    solving is in very clear terms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create your prototype**: Think simple and small. It''s best to build the
    smallest possible increment that quickly brings back enough validation to inform
    next steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Define an experiment/test study to prove your hypothesis**: Create question
    sets, consider A/B tests, and task analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phase II - Measure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to gather as much validated learning as you can in an interactive
    cycle, and shape the patterns and insights derived from your testing to drive
    future investments and iterations of your MVP:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initiate your test study**: Conduct interviews, distribute questionnaires,
    and validate your prototype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analyze**: Take a look at your data objectively. What surfaced? Are there
    any common patterns and behaviors?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organize**: Cluster patterns and behaviors that overlap together start shaping
    and surfacing insights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compile**: Take your insights and translate them into actionable items and
    talking points that will help inform potential revisions, future iterations, and
    releases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phase III - Learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is where a decision will need to be made regarding whether to persevere
    or pivot with your MVP. Persevere, in this context, means forging ahead with the
    same goals, while pivot requires at the very least altering, and even potentially
    completely resetting your original MVP vision:'
  prefs: []
  type: TYPE_NORMAL
- en: Establish whether your MVP actually solves a problem for its users. Does my
    MVP meet the needs of my intended target user?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish your MVP viability. Does my MVP provide a feature set that my users
    are willing to pay for?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10 essential UX testing methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validation is the cornerstone of MVP product development. It's the fuel that
    powers the MVP Build-Measure-Learn feedback loop. There are a number of different
    testing methods that can be used to help define MVP and continuously improve UX
    iteratively by applying Build-Measure-Learn cycles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are 10 essential UX testing methods that can be used to help
    validate your MVP:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Survey**: The most cost-effective way to find out who your users are, what
    they want, what they do, what they purchase, where they shop, and what they own
    is to survey them. You can find survey software that is free, so there''s no excuse.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Persona/market segmentation**: Use the survey data and identify meaningful
    patterns and behaviors among your user groups. Surface what functions certain
    segments demand as well as the pain points they experience. Find your MVP market
    sweet spot within your market segment.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Contextual inquiry**: Sometimes it''s difficult for users to communicate
    exactly what they want or what they are trying to achieve. It''s always ideal
    to observe users in their environment performing the tasks and functions that
    are critical to their role. You can probe and survey them while they are performing
    their tasks to discover what works and what needs improving.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**SME/stakeholder interviews**: There''s a lot of information that can be tapped
    internally within your own organization. Interview any SMEs, customer support,
    QA, development, marketing, or sales personnel to find out what needs to be built,
    for whom, and why.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Task analysis**: Measure discoverability, usability, and performance by observing
    users engaged in specific tasks and workflows.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Moderated in-person testing**: This is ideal for mobile device testing, or
    when it''s tough to put prototypes up remotely, test users in a lab, conference
    room, or even a coffee shop to gather invaluable feedback and insight.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Moderated remote testing**: This is the cheapest form of user testing available.
    Using services such as Zoom meetings, Google Forms, and InVision allow you to
    record and moderate user tests anywhere on the internet. Helps expands your recruitment
    base, and doesn''t limit user pools.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A/B testing**: This can be used in many conditions, remote, moderated, and
    so on. Comparatively test layouts, interface controls, buttons, CTAs, colors,
    tasks, performance... the sky''s the limit.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Comparative benchmark study**: Comparatively test the same tasks on competitive
    applications. Use core metrics such as completion rates, time and task difficulty
    as a basis for creating benchmarks. For example, is the checkout process at Zappos
    faster, more efficient, and easier to use than the checkout process at Amazon?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Multivariate testing**: One-variable-at-a-time testing can take a long time,
    and you will quickly burn through your testers a lot faster than expected. If
    you need to test often, performing multivariate tests will allow you to not only
    maximize the returns you get from your testing pool, but also give you a great
    idea of how your experience works as a whole. For instance, changing the color
    of a button will glean some data, but nothing compares to the data you mine when
    you change the location, color, and label of the button and test all the variants
    together. You can do multivariate tests on both live and prototype environments.
    Products such as Optimizely helps you organize and launch multivariate tests in
    live environments with real users.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Iterate and evolve - from viable to lovable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have successfully launched our initial MVP into the market, and
    gathered some validated learning, what's next? How does it scale? Is it just more
    of the same? No, absolutely not. This whole process is all about evolving and
    maturing your product, your users, and your revenue. The goal has become about
    taking your product from viable to lovable, introducing **Minimum Loveable Product**
    (**MLP**).
  prefs: []
  type: TYPE_NORMAL
- en: 'MLP is defined as the version of the product that brings back the maximum amount
    of love from its users with the least amount of effort. We all recognize products
    in our lives that we love and can''t live without: cars, smartphones created by
    remarkable brands such as Apple, Audi, Samsung, and G-Star. We love these products
    because they evoke a positive emotional connection within us. In simple terms,
    they make us smile.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many different ways of making a positive emotional connection with
    your users, but the easiest is through good design.
  prefs: []
  type: TYPE_NORMAL
- en: Five tips to go from viable to lovable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some great insights to help guide your product down a "Loveable" user
    experience path:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Focus on value**: Most often, teams are laser-focused on what they are building,
    not why. Users aren''t motivated to buy the what (lawnmower); they buy the why
    (I need to cut my grass). Build stuff that matters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do one thing really well**: One solid function or feature is much better
    than three mediocre ones. Learn from success stories such as Dropbox and Instagram.
    They created masses of followers that love their products by simply focusing on
    doing one thing really well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validate and iterate often**: Working on moving targets with no end in sight
    equals lost vision, lost opportunity, lost motivation, and lost revenue. Validate
    your designs against short cycles. Timebox your MVP to 90-day increments (12-week
    cycles). 90 days is enough time to deliver on your vision, but not long enough
    to lose sight of it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make the user first**: Zoom in on problems that are real pain points for
    your customer. Have you validated these pain points, or are they your opinion?
    Remember, user-centered product design is an exercise in other-centeredness. It''s
    about your audience''s response to your products, not yours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Talk the talk, walk the walk**: Commit to the objective and stay disciplined
    to the process. If design is important to you, demonstrate it through your actions:
    bring design in early to collaborate on MVP strategy/vision—start wireframes and
    protos early. Don''t just say that your customer is important to you, show it
    through your actions: test and validate your MVP ideas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the concept of MVP and why it's important. We
    covered techniques that will help you define and build your MVP. We outlined a
    Lean Agile UX process to follow, and demonstrated the advantages and benefits
    to validating your MVP. Lastly, we discussed evolving your MVP from viable to
    lovable, and how to evoke an emotional response from your users. Use these building
    blocks to save time and money, and begin building products that you know your
    users will love and need.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will review case studies that illustrate many of the
    ideas discussed here.
  prefs: []
  type: TYPE_NORMAL
- en: USER FIRST + GOOD DESIGN = LOVABLE PRODUCT
  prefs: []
  type: TYPE_NORMAL
