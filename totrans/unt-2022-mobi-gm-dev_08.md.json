["```kt\n    using TMPro; //TextMeshProUGUI\n    ```", "```kt\n    [Header(\"Object References\")]\n    public TextMeshProUGUI scoreText;\n    private float score = 0;\n    public float Score\n    {\n        get\n        {\n            return score;\n        }\n        set\n        {\n            score = value;\n            /* Check if scoreText has been assigned */\n            if (scoreText == null)\n            {\n                Debug.LogError(\"Score Text is not set. \" +\n                    \"Please go to the Inspector and assign\n                        it\");\n                /* If not assigned, don't try to update\n                   it. */\n                return;\n            }\n            /* Update the text to display the whole number\n               portion of the score */\n            scoreText.text = string.Format(\"{0:0}\",\n                score);\n        }\n    }\n    ```", "```kt\n    // Start is called before the first frame update\n    public void Start()\n    {\n        // Get access to our Rigidbody component\n        rb = GetComponent<Rigidbody>();\n        minSwipeDistancePixels = minSwipeDistance *\n            Screen.dpi;\n        joystick =\n            GameObject.FindObjectOfType<MobileJoystick>();\n        Score = 0;\n    }\n    /// <summary>\n    /// FixedUpdate is a prime place to put physics calculations\n    /// happening over a period of time.\n    /// </summary>\n    void FixedUpdate()\n    {\n        /* If the game is paused, don't do anything */\n        if (PauseScreenBehaviour.paused)\n        {\n            return;\n        }\n        Score += Time.deltaTime;\n    // Rest of Update here...\n    ```", "```kt\n    #region Share Score via Twitter\n    /// <summary>\n    /// Web address in order to create a tweet\n    /// </summary>\n    private const string tweetTextAddress = \"http://twitter.com/intent/tweet?text=\";\n    /// <summary>\n    /// Where we want players to visit\n    /// </summary>\n    private string appStoreLink = \"http://johnpdoran.com/\";\n    [Tooltip(\"Reference to the player for the score\")]\n    public PlayerBehaviour player;\n    /// <summary>\n    /// Will open Twitter with a prebuilt tweet. When called on iOS\n    /// or Android will open up Twitter app if installed\n    /// </summary>\n    public void TweetScore()\n    {\n        /* Create contents of the tweet */\n        string tweet = \"I got \" + string.Format(\"{0:0}\",\n            player.Score) + \" points in Endless Roller!\n                Can you do better?\";\n        /* Create the entire message */\n        string message = tweet + \"\\n\" + appStoreLink;\n        /* Ensures string is URL friendly */\n        string url =\n            UnityEngine.Networking.UnityWebRequest\n                .EscapeURL(message);\n        /* Open the URL to create the tweet */\n        Application.OpenURL(tweetTextAddress + url);\n    }\n    #endregion\n    ```", "```kt\n    using UnityEngine;\n    using UnityEngine.SceneManagement; // LoadScene\n    using System.Collections.Generic; // List using Facebook.Unity; // FB\n    ```", "```kt\n    [Header(\"Object References\")] \n    public GameObject mainMenu; \n    public GameObject facebookLogin;\n    ```", "```kt\n    #region Facebook\n    #endregion\n    ```", "```kt\n    public void Awake()\n    {\n        /* We only call FB Init once, so check if it\n        /* has been called already */\n        if (!FB.IsInitialized)\n        {\n            FB.Init(OnInitComplete, OnHideUnity);\n        }\n    }\n```", "```kt\n/// <summary>\n/// Once initialized, will inform if logged in on Facebook\n/// </summary>\nprivate void OnInitComplete()\n{\n    if(FB.IsInitialized)\n    {\n        if (FB.IsLoggedIn)\n        {\n            print(\"Logged into Facebook\");\n            /* Close Login and open Main Menu */\n            ShowMainMenu();\n        }\n    }\n    else\n    {\n        print(\"Failed to init Facebook SDK; open as\n            guest\");\n        ShowMainMenu();\n    }\n}\n    /// <summary>\n    /// Called whenever Unity loses focus\n    /// </summary>\n    /// <param name=\"active\">If the game is currently\n        active</param>\n    private void OnHideUnity(bool active)\n    {\n        /* Set TimeScale based on if the game is\n           paused */\n        Time.timeScale = (active) ? 1 : 0;\n    }\n```", "```kt\n/// <summary>\n/// Attempts to log in on Facebook\n/// </summary>\npublic void FacebookLogin()\n{\n    List<string> permissions = new List<string>();\n    /* Add permissions we want to have here */\n    permissions.Add(\"public_profile\");\n    FB.LogInWithReadPermissions(permissions,\n        FacebookCallback);\n}\n/// <summary>\n/// Called once facebook has logged in, or not\n/// </summary>\n/// <param name=\"result\">The result of our login request</param>\nprivate void FacebookCallback(IResult result)\n{\n    if (result.Error == null)\n    {\n        OnInitComplete();\n    }\n    else\n    {\n        print(result.Error);\n    }\n}\npublic void ShowMainMenu()\n{\n    if (facebookLogin != null && mainMenu != null)\n    {\n        facebookLogin.SetActive(false);\n        mainMenu.SetActive(true);\n    }\n}\n```", "```kt\n    using UnityEngine.UI; // Image\n    using TMPro; //TextMeshProUGUI\n    ```", "```kt\n    [Tooltip(\"Will display the user's Facebook profile pic\")] \n    public Image profilePic;\n    [Tooltip(\"The text object used to display the greeting\")] \n    public TextMeshProUGUI greeting;\n    ```", "```kt\n    public void ShowMainMenu()\n    {\n        if (facebookLogin != null && mainMenu != null)\n        {\n            facebookLogin.SetActive(false);\n            mainMenu.SetActive(true);\n            if (FB.IsLoggedIn)\n            {\n    /* Get information from Facebook profile\n                */\n                FB.API(\"/me?fields=name\",\n                        HttpMethod.GET,\n                        SetName);\n                FB.API(\"/me/picture?width=256&height=256\",\n                        HttpMethod.GET,\n                        SetProfilePic);\n            }\n        }\n    }\n    ```", "```kt\n    private void SetName(IResult result)\n    {\n        if (result.Error != null)\n        {\n            print(result.Error); return;\n        }\n        string playerName =\n            result.ResultDictionary[\"name\"].ToString();\n        if (greeting != null)\n        {\n            greeting.text = \"Hello, \" + playerName + \"!\";\n            greeting.gameObject.SetActive(true);\n        }\n    }\n    private void SetProfilePic(IGraphResult result)\n    {\n        if (result.Error != null)\n        {\n            print(result.Error); return;\n        }\n        // Variable setup\n        int texWidth = result.Texture.width;\n        int texHeight = result.Texture.height;\n        Rect rect = new Rect(0, 0, texWidth, texHeight);\n        Vector2 pivot = Vector2.zero;\n        Texture2D texture = result.Texture;\n        // Create the profile pic\n        Sprite fbImage = Sprite.Create(texture, rect,\n            pivot);\n        if (profilePic != null)\n        {\n            profilePic.sprite = fbImage;\n            profilePic.gameObject.SetActive(true);\n        }\n    }\n    ```"]