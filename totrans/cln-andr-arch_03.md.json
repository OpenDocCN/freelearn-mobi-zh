["```kt\nclass MyClass {\n    fun asyncSum(a: Int, b: Int, callback: (Int) -> Unit) {\n        val handler = Handler(Looper.getMainLooper())\n        Thread(Runnable {\n            val result = a + b\n            handler.post(Runnable {\n                callback(result)\n            })\n        }).start()\n    }\n}\n```", "```kt\n    fun asyncSum(a: Int, b: Int, callback: (Int) -> Unit) {\n        object : AsyncTask<Nothing, Nothing, Int>() {\n            override fun doInBackground(vararg params: \n                Nothing?): Int {\n                return a+b\n            }\n            override fun onPostExecute(result: Int) {\n                super.onPostExecute(result)\n                callback(result)\n            }\n        }.execute()\n    }\n```", "```kt\n    fun asyncComplicatedSum(a: Int, b: Int, c: Int) {\n        asyncSum(a, b) { tempSum ->\n            asyncSum(tempSum, c) { finalSum ->\n                Log.d(this.javaClass.name, \"Final sum \n                    $finalSum\")\n            }\n        }\n    }\n```", "```kt\nfun asyncSum(a: Int, b: Int): Single<Int> {\n        return Single.create<Int> {\n            it.onSuccess(a + b)\n        }.subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n    }\n```", "```kt\nfun asyncComplicatedSum(a: Int, b: Int, c: Int) {\n        val disposable = asyncSum(a, b)\n            .flatMap {\n                asyncSum(it, c)\n            }\n            .subscribe ({\n                Log.d(this.javaClass.name, \"Final sum $it\")\n            },{\n                Log.d(this.javaClass.name, \"Something went \n                    wrong\")\n            })\n    }\n```", "```kt\n   suspend fun asyncSum(a: Int, b: Int): Int {\n        return withContext(Dispatchers.IO) {\n            a + b\n        }\n    }\n```", "```kt\nclass MyClass : CoroutineScope {\n    override val coroutineContext: CoroutineContext\n        get() = Dispatchers.Main + job\n    private lateinit var job: Job\n    fun asyncComplicatedSum(a: Int, b: Int, c: Int) {\n        launch {\n            try {\n                val tempSum = asyncSum(a, b)\n                val finalSum = asyncSum(tempSum, c)\n                Log.d(this.javaClass.name, \"Final sum \n                    $finalSum\")\n            } catch (e: Exception) {\n                Log.d(this.javaClass.name, \"Something went \n                    wrong\")\n            }\n        }\n    }\n    fun create() {\n        job = Job()\n    }\n    fun destroy() {\n        job.cancel()\n    }\n}\n```", "```kt\nclass MyViewModel: ViewModel() {\n    init {\n        viewModelScope.launch {  }\n    }\n}\n```", "```kt\n    @Composable\n    fun Calculator(\n        a: String,\n        onAChanged: (String) -> Unit,\n        b: String,\n        onBChanged: (String) -> Unit,\n        result: String,\n        onButtonClick: () -> Unit\n    ) {\n        Column(modifier = Modifier.padding(16.dp)) {\n            OutlinedTextField(\n                value = a,\n                onValueChange = onAChanged,\n                keyboardOptions = KeyboardOptions\n                    (keyboardType = KeyboardType.Number),\n                label = { Text(\"a\") }\n            )\n            OutlinedTextField(\n                value = b,\n                onValueChange = onBChanged,\n                keyboardOptions = KeyboardOptions\n                    (keyboardType = KeyboardType.Number),\n                label = { Text(\"b\") }\n            )\n            Text(text = result)\n            Button(onClick = onButtonClick) {\n                Text(text = \"Calculate\")\n            }\n        }\n    }\n    ```", "```kt\n    buildscript {\n        ext {\n            compose_version = '1.0.5'\n        }\n        … \n    }\n    ```", "```kt\n    dependencies {\n        implementation 'androidx.core:core-ktx:1.7.0'\n        implementation 'androidx.appcompat:appcompat:1.4.0'\n        implementation 'com.google.android.material:material:1.4.0'\n        implementation \"androidx.compose.ui:ui:$compose_version\"\n        implementation \"androidx.compose.material:material:$compose_version\"\n        implementation \"androidx.compose.ui:ui-tooling-preview:$compose_version\"\n        implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'\n        implementation 'androidx.activity:activity-compose:1.4.0'\n        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'\n        implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0\"\n        implementation \"androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0\"\n        testImplementation 'junit:junit:4.13.2'\n        androidTestImplementation 'androidx.test.ext:junit:1.1.3'\n        androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\n        androidTestImplementation \"androidx.compose.ui:ui-test-junit4:$compose_version\"\n        testImplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0\"\n        debugImplementation \"androidx.compose.ui:ui-tooling:$compose_version\"\n    }\n    ```", "```kt\n    private const val DELAY = 5000\n    class NumberAdder(\n        private val dispatcher: CoroutineDispatcher = \n            Dispatchers.IO,\n        private val delay: Int = DELAY\n    ) {\n        suspend fun add(a: Int, b: Int): Int {\n            return withContext(dispatcher) {\n                delay(delay.toLong())\n                a + b\n            }\n        }\n    }\n    ```", "```kt\n    class DispatcherTestRule : TestRule {\n        @ExperimentalCoroutinesApi\n        val testDispatcher = TestCoroutineDispatcher()\n        @ExperimentalCoroutinesApi\n        override fun apply(base: Statement?, description: \n            Description?): Statement {\n            try {\n                Dispatchers.setMain(testDispatcher)\n                base?.evaluate()\n            } catch (e: Exception) {\n            } finally {\n                Dispatchers.resetMain()\n                testDispatcher.cleanupTestCoroutines()\n            }\n            return base!!\n        }\n    }\n    ```", "```kt\n    class NumberAdderTest {\n        @get:Rule\n        val dispatcherTestRule = DispatcherTestRule()\n        @ExperimentalCoroutinesApi\n        @Test\n        fun testAdd() = runBlockingTest {\n            val adder = NumberAdder(dispatcherTestRule.\n                testDispatcher, 0)\n            assertEquals(5, adder.add(1, 4))\n        }\n    }\n    ```", "```kt\n    class MainViewModel(private val adder: NumberAdder = NumberAdder()) : ViewModel() {\n        var resultState by mutableStateOf(\"0\")\n            private set\n        fun add(a: String, b: String) {\n            viewModelScope.launch {\n                val result = adder.add(a.toInt(), \n                    b.toInt())\n                resultState = result.toString()\n            }\n        }\n    }\n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                Exercise201Theme {\n                    Surface {\n                        Screen()\n                    }\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun Screen(viewModel: MainViewModel = viewModel()) {\n        var a by remember { mutableStateOf(\"\") }\n        var b by remember { mutableStateOf(\"\") }\n        Calculator(\n            a = a,\n            onAChanged = {\n                a = it\n            },\n            b = b,\n            onBChanged = {\n                b = it\n            },\n            result = viewModel.resultState,\n            onButtonClick = {\n                viewModel.add(a, b)\n            })\n    }\n    ```", "```kt\nfun asyncSum(a: Int, b: Int): Flow<Int> {\n        return flow {\n            this.emit(a + b)\n        }.flowOn(Dispatchers.IO)\n    }\n```", "```kt\nclass MyClass : CoroutineScope {\n    override val coroutineContext: CoroutineContext\n        get() = Dispatchers.Main + job\n    private lateinit var job: Job\n    @FlowPreview\n    fun asyncComplicatedSum(a: Int, b: Int, c: Int) {\n        launch {\n            asyncSum(a, b)\n                .flatMapConcat {\n                    asyncSum(it, c)\n                }\n                .catch {\n                    Log.d(this.javaClass.name, \"Something \n                         went wrong\")\n                }\n                .collect {\n                    Log.d(this.javaClass.name, \"Final sum \n                        $it\")\n                }\n        }\n    }\n}\n```", "```kt\n    private const val DELAY = 5000\n    class NumberAdder(\n        private val dispatcher: CoroutineDispatcher = \n            Dispatchers.IO,\n        private val delay: Int = DELAY\n    ) {\n        suspend fun add(a: Int, b: Int): Flow<Int> {\n            return flow {\n                emit(a + b)\n            }.onEach {\n                delay(delay.toLong())\n            }.flowOn(dispatcher)\n        }\n    }\n    ```", "```kt\n    class NumberAdderTest {\n        @get:Rule\n        val dispatcherTestRule = DispatcherTestRule()\n        @ExperimentalCoroutinesApi\n        @Test\n        fun testAdd() = runBlockingTest {\n            val adder = NumberAdder\n                (dispatcherTestRule.testDispatcher, 0)\n            val result = adder.add(1, 4).first()\n            assertEquals(5, result)\n        }\n    }\n    ```", "```kt\n    class MainViewModel(private val adder: NumberAdder = NumberAdder()) : ViewModel() {\n        var resultState by mutableStateOf(\"0\")\n            private set\n        fun add(a: String, b: String) {\n            viewModelScope.launch {\n                adder.add(a.toInt(), b.toInt())\n                    .collect {\n                        resultState = it.toString()\n                    }\n            }\n        }\n    }\n    ```", "```kt\ndependencies {\n    …\n    implementation \"com.squareup.okhttp3:okhttp:4.9.0\"\n    implementation \"com.squareup.retrofit2:retrofit:2.9.0\"\n    …\n}\n```", "```kt\ndependencies {\n    …\n    implementation \"com.squareup.okhttp3:okhttp:4.9.0\"\n    implementation \"com.squareup.retrofit2:retrofit:2.9.0\"\n    implementation \"com.squareup.retrofit2:converter-moshi:2.9.0\"\n    implementation \"com.squareup.moshi:moshi:1.13.0\"\n    …\n}\n```", "```kt\n{\n\"id\": 1,\n    \"name\": \"Leanne Graham\",\n    \"username\": \"Bret\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n      \"street\": \"Kulas Light\",\n      \"suite\": \"Apt. 556\",\n      \"city\": \"Gwenborough\",\n      \"zipcode\": \"92998-3874\",\n      \"geo\": {\n        \"lat\": \"-37.3159\",\n        \"lng\": \"81.1496\"\n      }\n    },\n    \"phone\": \"1-770-736-8031 x56442\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n      \"name\": \"Romaguera-Crona\",\n      \"catchPhrase\": \"Multi-layered client-server neural-\n          net\",\n      \"bs\": \"harness real-time e-markets\"\n    }\n```", "```kt\n    data class User(\n        @Json(name = \"id\") val id: Long,\n        @Json(name = \"name\") val name: String,\n        @Json(name = \"username\") val username: String\n    )\n```", "```kt\n  fun createOkHttpClient() =  OkHttpClient\n        .Builder()\n        .readTimeout(15, TimeUnit.SECONDS)\n        .connectTimeout(15, TimeUnit.SECONDS)\n        .build()\n```", "```kt\nfun createRetrofit(\n        okHttpClient: OkHttpClient\n    ): Retrofit {\n        return Retrofit.Builder()\n            .baseUrl(\"https://jsonplaceholder.typicode.com/\")\n            .client(okHttpClient)\n            .build()\n    }\n```", "```kt\nFun createConverterFactory(): MoshiConverterFactory = MoshiConverterFactory.create()\n```", "```kt\nfun createRetrofit(\n        okHttpClient: OkHttpClient,\n        gsonConverterFactory: MoshiConverterFactory\n    ): Retrofit {\n        return Retrofit.Builder()\n.baseUrl(\"https://jsonplaceholder.typicode.com/\")\n            .client(okHttpClient)\n            .addConverterFactory(gsonConverterFactory)\n            .build()\n    }\n```", "```kt\ninterface UserService {\n        @GET(\"/users\")\n        fun getUsers(): Call<List<User>>\n        @GET(\"/users/{userId}\")\n        fun getUser(@Path(\"userId\") userId: Int): \n            Call<User>\n        @POST(\"/users\")\n        fun createUser(@Body user: User): Call<User>\n        @PUT(\"/users/{userId}\")\n        fun updateUser(@Path(\"userId\") userId: Int, @Body \n            user: User): Call<User>   \n    }\n```", "```kt\ninterface UserService {\n        @GET(\"/users\")\n        suspend fun getUsers(): List<User>\n        @GET(\"/users/{userId}\")\n        suspend fun getUser(@Path(\"userId\") userId: Int): \n            User\n        @POST(\"/users\")\n        suspend fun createUser(@Body user: User): User\n        @PUT(\"/users/{userId}\")\n        suspend fun updateUser(@Path(\"userId\") userId: Int, \n            @Body user: User): User\n    }\n```", "```kt\nfun createUserService(retrofit: Retrofit) = retrofit.create(UserService::class.java)\n```", "```kt\n@Composable\nfun UserList(users: List<User>) {\n    LazyColumn(modifier = Modifier.padding(16.dp)) {\n        items(users) {\n            Column(modifier = Modifier.padding(16.dp)) {\n                Text(text = it.name)\n                Text(text = it.username)\n                Text(text = it.email)\n            }\n        }\n    }\n}\n```", "```kt\n    buildscript {\n        ext {\n            compose_version = '1.0.5'\n        }\n        … \n    }\n    ```", "```kt\n    dependencies {\n        implementation 'androidx.core:core-ktx:1.7.0'\n        implementation 'androidx.appcompat:appcompat:1.4.0'\n        implementation 'com.google.android.material:material:1.4.0'\n        implementation \"androidx.compose.ui:ui:$compose_version\"\n        implementation \"androidx.compose.material:material:$compose_version\"\n        implementation \"androidx.compose.ui:ui-tooling-preview:$compose_version\"\n        implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'\n        implementation 'androidx.activity:activity-compose:1.4.0'\n        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'\n        implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0\"\n        implementation \"androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0\"\n        implementation \"com.squareup.okhttp3:okhttp:4.9.0\"\n        implementation \"com.squareup.retrofit2:retrofit:2.9.0\"\n        implementation \"com.squareup.retrofit2:converter-moshi:2.9.0\"\n        implementation \"com.squareup.moshi:moshi:1.13.0\"\n        implementation \"com.squareup.moshi:moshi-kotlin:1.13.0\"\n        testImplementation 'junit:junit:4.13.2'\n        androidTestImplementation 'androidx.test.ext:junit:1.1.3'\n        androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\n        androidTestImplementation \"androidx.compose.ui:ui-test-junit4:$compose_version\"\n        testImplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0\"\n        debugImplementation \"androidx.compose.ui:ui-tooling:$compose_version\"\n    }\n    ```", "```kt\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    ```", "```kt\n    @JsonClass(generateAdapter = true)\n    data class User(\n        @Json(name = \"id\") val id: Long,\n        @Json(name = \"name\") val name: String,\n        @Json(name = \"username\") val username: String,\n        @Json(name = \"email\") val email: String\n    )\n    ```", "```kt\n    interface UserService {\n        @GET(\"/users\")\n        suspend fun getUsers(): List<User>\n    }\n    ```", "```kt\n    class MyApplication : Application() {\n        companion object {\n            lateinit var userService: UserService\n        }\n        override fun onCreate() {\n            super.onCreate()\n            val okHttpClient = OkHttpClient\n                .Builder()\n                .readTimeout(15, TimeUnit.SECONDS)\n                .connectTimeout(15, TimeUnit.SECONDS)\n                .build()\n            val moshi = Moshi.Builder().\n                add(KotlinJsonAdapterFactory()).build()\n            val retrofit = Retrofit.Builder()\n                .baseUrl(\"https://jsonplaceholder.typicode.com/\")\n                .client(okHttpClient)\n                .addConverterFactory(MoshiConverterFactory.create(moshi))\n                .build()\n            userService = retrofit.create(UserService::class.java)\n        }\n    }\n    ```", "```kt\n      <application\n            …\n            android:name=\".MyApplication\"\n            …>\n    ```", "```kt\n    class MainViewModel(private val userService: \n        UserService) : ViewModel() {\n        var resultState by mutableStateOf\n            <List<User>>(emptyList())\n            private set\n        init {\n            viewModelScope.launch {\n                    val users = userService.getUsers()\n                    resultState = users\n            }\n        }\n    }\n    class MainViewModelFactory : ViewModelProvider.Factory {\n        override fun <T : ViewModel> create(modelClass: \n            Class<T>): T =\n            MainViewModel(MyApplication.userService) as T\n    }\n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                Exercise0203Theme {\n                    Surface {\n                        Screen()\n                    }\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun Screen(viewModel: MainViewModel = viewModel\n        (factory = MainViewModelFactory())) {\n        UserList(users = viewModel.resultState)\n    }\n    ```", "```kt\ndependencies {\n    …\n    implementation \"androidx.room:room-runtime:2.4.0\"\n    kapt \"androidx.room:room-compiler:2.4.0\"\n    …\n}\n```", "```kt\nplugins {\n    …\n    id 'kotlin-kapt'\n}\n```", "```kt\n@Entity(tableName = \"user\")class UserEntity(\n    @PrimaryKey @ColumnInfo(name = \"id\") val id: Long,\n    @ColumnInfo(name = \"name\") val name: String,\n    @ColumnInfo(name = \"username\") val username: String\n)\n```", "```kt\n@Dao\ninterface UserDao {\n    @Query(\"SELECT * FROM user\")\n    fun getAll(): List<UserEntity>\n    @Query(\"SELECT * FROM user WHERE id IN (:userIds)\")\n    fun loadAllByIds(userIds: IntArray): List<UserEntity>\n    @Insert\n    fun insert(vararg users: User)\n    @Update\n    fun update(vararg users: User)\n    @Delete\n    fun delete(user: User)\n}\n```", "```kt\n@Dao\ninterface UserDao {\n    @Query(\"SELECT * FROM user\")\n    suspend fun getAll(): List<UserEntity>\n    @Query(\"SELECT * FROM user WHERE id IN (:userIds)\")\n    suspend fun loadAllByIds(userIds: IntArray): \n        List<UserEntity>\n    @Insert\n    suspend fun insert(vararg users: User)\n    @Update\n    suspend fun update(vararg users: User)\n    @Delete\n    suspend fun delete(user: User)\n}\n```", "```kt\n@Dao\ninterface UserDao {\n    @Query(\"SELECT * FROM user\")\n    fun getAll(): Flow<List<UserEntity>>\n    @Query(\"SELECT * FROM user WHERE id IN (:userIds)\")\n    fun loadAllByIds(userIds: IntArray): \n        Flow<List<UserEntity>>\n}\n```", "```kt\n@Database(entities = [UserEntity::class], version = 1)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun userDao(): UserDao\n}\n```", "```kt\nval db = Room.databaseBuilder(\n            applicationContext,\n            AppDatabase::class.java, \"name\"\n        ).build()\n```", "```kt\n    plugins {\n        …\n        id 'kotlin-kapt'\n    }\n    ```", "```kt\n    dependencies {\n        … \n        implementation \"androidx.room:room-runtime:2.4.0\"\n        implementation \"androidx.room:room-ktx:2.4.0\"\n        kapt \"androidx.room:room-compiler:2.4.0\"\n        …\n    }\n    ```", "```kt\n    @Entity(tableName = \"user\")\n    class UserEntity(\n        @PrimaryKey @ColumnInfo(name = \"id\") val id: Long,\n        @ColumnInfo(name = \"name\") val name: String,\n        @ColumnInfo(name = \"username\") val username:\n            String,\n        @ColumnInfo(name = \"email\") val email: String\n    )\n    ```", "```kt\n    @Dao\n    interface UserDao {\n        @Query(\"SELECT * FROM user\")\n        fun getUsers(): Flow<List<UserEntity>>\n        @Insert(onConflict = OnConflictStrategy.REPLACE)\n        fun insertUsers(users: List<UserEntity>)\n    }\n    ```", "```kt\n    @Database(entities = [UserEntity::class], version = 1)\n    abstract class AppDatabase : RoomDatabase() {\n        abstract fun userDao(): UserDao\n    } \n    ```", "```kt\n    class MyApplication : Application() {\n        companion object {\n            …\n            lateinit var userDao: UserDao \n            …\n        }\n        override fun onCreate() {\n            super.onCreate()\n            …\n            val db = Room.databaseBuilder(\n                applicationContext,\n                AppDatabase::class.java, \"my-database\"\n            ).build()\n            userDao = db.userDao()\n            …\n        }\n    } \n    ```", "```kt\n    class MainViewModel(\n        private val userService: UserService,\n        private val userDao: UserDao\n    ) : ViewModel() {\n        var resultState by mutableStateOf<List<UserEntity>>(emptyList())\n            private set\n        init {\n            viewModelScope.launch {\n                flow { emit(userService.getUsers()) }\n                    .onEach {\n                    val userEntities =\n                        it.map { user -> UserEntity\n    (user.id, user.name, \n                             user.username, user.email) }\n                    userDao.insertUsers(userEntities)\n                }.flatMapConcat { userDao.getUsers() }\n                    .catch { emitAll(userDao.getUsers()) }\n                    .flowOn(Dispatchers.IO)\n                    .collect {\n                        resultState = it\n                    }\n            }\n        } \n    }\n    class MainViewModelFactory : ViewModelProvider.Factory {\n        override fun <T : ViewModel> create(modelClass: Class<T>): T =\n            MainViewModel(MyApplication.userService, MyApplication.userDao) as T\n    } \n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n    …\n    @Composable\n    fun UserList(users: List<UserEntity>) {\n    …\n        }\n    } \n    ```", "```kt\ndependencies {\n    …\n    implementation \"androidx.datastore:datastore-preferences:1.0.0\"\n    …\n} \n```", "```kt\nprivate val KEY_TEXT = stringPreferencesKey(\"key_text\")\nclass AppDataStore(private val dataStore: \n    DataStore<Preferences>) {\n    val savedText: Flow<String> = dataStore.data\n        .map { preferences ->\n            preferences[KEY_TEXT].orEmpty()\n        }\n    suspend fun saveText(text: String) {\n        dataStore.edit { preferences ->\n            preferences[KEY_TEXT] = text\n        }\n    }\n}\n```", "```kt\nval Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = \"my_preferences\")\n```", "```kt\nval appDataStore = AppDataStore(dataStore) \n```", "```kt\n    dependencies {\n        …\n        implementation \"androidx.datastore:datastore-\n            preferences:1.0.0\"\n        …\n    }\n    ```", "```kt\n    private val KEY_COUNT = intPreferencesKey(\"key_count\")\n    class AppDataStore(private val dataStore: \n        DataStore<Preferences>) {\n        val savedCount: Flow<Int> = dataStore.data\n            .map { preferences ->\n                preferences[KEY_COUNT] ?: 0\n            }\n        suspend fun incrementCount() {\n            dataStore.edit { preferences ->\n                val currentValue = preferences[KEY_COUNT] \n                    ?: 0\n                preferences[KEY_COUNT] = currentValue.\n                    inc()\n            }\n        }\n    }}\n    ```", "```kt\n    val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = \"my_preferences\")\n    class MyApplication : Application() {\n        companion object {\n            …\n            lateinit var appDataStore: AppDataStore\n        }\n        override fun onCreate() {\n            super.onCreate()\n            …\n            appDataStore = AppDataStore(dataStore)\n        }\n    }\n    ```", "```kt\n    class MainViewModel(\n        private val userService: UserService,\n        private val userDao: UserDao,\n        private val appDataStore: AppDataStore\n    ) : ViewModel() {\n        var resultState by mutableStateOf(UiState())\n            private set\n        init {\n            viewModelScope.launch {\n                flow { emit(userService.getUsers()) }\n                    .onEach {\n                        val userEntities =\n                            it.map { user -> UserEntity\n                                (user.id, user.name, user.\n                                 username, user.email) }\n                        userDao.insertUsers(userEntities)\n                        appDataStore.incrementCount()\n                    }.flatMapConcat { userDao.getUsers() }\n                    .catch { emitAll(userDao.getUsers()) }\n                    .flatMapConcat { users ->\n    appDataStore.savedCount.map { \n                            count -> UiState(users,  \n                                count.toString()) }\n                    }\n                    .flowOn(Dispatchers.IO)\n                    .collect {\n                        resultState = it\n                    }\n            }\n        }\n    }\n    ```", "```kt\n    data class UiState(\n        val userList: List<UserEntity> = listOf(),\n        val count: String = \"\"\n    )\n    ```", "```kt\n    class MainViewModelFactory : ViewModelProvider.Factory {\n        override fun <T : ViewModel> create(modelClass: \n            Class<T>): T =\n            MainViewModel(\n                MyApplication.userService,\n                MyApplication.userDao,\n                MyApplication.appDataStore\n            ) as T\n    }\n    ```", "```kt\n    @Composable\n    fun UserList(uiState: UiState) {\n        LazyColumn(modifier = Modifier.padding(16.dp)) {\n            item(uiState.count) {\n                Column(modifier = Modifier.padding(16.dp)) {\n                    Text(text = uiState.count)\n                }\n            }\n            items(uiState.userList) {\n                Column(modifier = Modifier.padding(16.dp)) {\n                    Text(text = it.name)\n                    Text(text = it.username)\n                    Text(text = it.email)\n                }\n            }\n        }\n    }\n    ```"]