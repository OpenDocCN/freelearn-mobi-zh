- en: Chapter 9. Adding Menus and Sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is easy to overlook menu design, but the menu provides your game''s first
    impression to the player. When used correctly, your menus reinforce the brand
    of your game and provide a pleasant break in the action that retains the player
    between gameplay. We will add two menus in this chapter: a main menu that shows
    when the game starts, and a retry menu that appears when the player loses a game.'
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, immersive sounds are vital to a great game. Sound is your opportunity
    to support the mood of the game world and emphasize key gameplay mechanics such
    as coin collecting and taking damage. Additionally, every fun game deserves addictive
    background music! We will add background music and sound effects in this chapter
    to complete the mood of the game world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Building the main menu scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the restart game menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding music with `AVAudio`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing sound effects with `SKAction`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the main menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use SpriteKit components to build our main menu. We will create a new
    scene in a new file for our main menu, and then use code to place a background
    sprite node, logo text node, and button sprite nodes. Let's start by adding the
    menu scene to the project and building out the nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the menu scene and menu nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the menu scene, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We will use a new background image for the menu. Let's add it to our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate `Background-menu.png` in the `Backgrounds` folder of the asset bundle.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `Images.xcassets` in Xcode, and then drag and drop `Background-menu.png`
    into `Images.xcassets` to make it available in your project.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new Swift file to your project named `MenuScene.swift`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to create the `MenuScene` scene class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to configure a few scene properties. Add this code inside the
    new scene''s `didMoveToView` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to draw the name of the game near the top of the menu. Add this code
    at the bottom of the `didMoveToView` function to draw "Pierre Penguin Escapes
    the Antarctic":'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we will add the start button. The start button is the combination of a
    `SKSpriteNode` for the button graphic and a `SKLabelNode` for the "Start Game"
    text. Add this code at the bottom of the `didMoveToView` function to create the
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we will make the start button pulse in and out to add movement and
    excitement to the menu. Add this code at the bottom of the `didMoveToView` function
    to fade the button in and out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great work! We have created our `MenuScene` class and added all the nodes we
    need to build the menu. Next, we will update our app to start with the menu instead
    of going directly to the `GameScene` class.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the main menu when the game starts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, our app has launched directly to the `GameScene` class whenever it
    starts. We will now update our view controller to start with the `MenuScene` class
    instead. Follow these steps to launch the menu when the game starts:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GameViewController.swift` and locate the `viewWillLayoutSubviews` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the entire `viewWillLayoutSubviews` function with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the project and you should see the app start with your new main menu, which
    looks something like this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the main menu when the game starts](img/Image_B04532_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Terrific work! Next, we will wire up the **START GAME** button to transition
    to the `GameScene` class.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the START GAME button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like in `GameScene`, we will add a `touchesBegan` function to the `MenuScene`
    class to capture touches on the **START GAME** button. To implement `touchesBegan`,
    open `MenuScene.swift` and, at the bottom of the class, add a new function named
    `touchesBegan`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Run the project and tap the start button. The game should switch to the `GameScene`
    class and gameplay will begin. Congratulations, you have successfully implemented
    your first main menu in SpriteKit. Next, we will add a simple restart menu that
    appears on top of `GameScene` when the player dies.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the restart game menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The restart menu is even simpler to implement. Rather than create a new scene,
    we can extend our existing `HUD` class to display a restart button when the game
    ends. We will also include a smaller button to return the player to the main menu.
    This menu will appear on top of the action, as in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the restart game menu](img/Image_B04532_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Extending the HUD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create and draw our new button nodes in the `HUD` class.
    Follow these steps to add the nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `HUD.swift` file and add two new properties to the `HUD` class, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code at the bottom of the `createHudNodes` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We purposefully did not add these nodes as children of the `HUD` yet, so they
    will not appear on the screen until we are ready. Next, we will add a function
    to make the buttons appear. We will call this function from the `GameScene` class
    when the player dies. Add a function named `showButtons` to the `HUD` class, as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wiring up GameScene for game over
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to tell the `HUD` class to show the restart and main menu buttons once
    the player runs out of health. Open `GameScene.swift` and add a new function to
    the `GameScene` class named `gameOver`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That is all for now – we will add to the `gameOver` function in the next chapter,
    when we implement a high score system.
  prefs: []
  type: TYPE_NORMAL
- en: Informing the GameScene class when the player dies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, the `GameScene` class is oblivious to whether the player is alive or
    dead. We need to change that in order to use our new `gameOver` function. Open
    `Player.swift`, locate the `die` function, and add the following code at the bottom
    of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We access `GameScene` by traveling up the node tree. The `Player` node's parent
    is the `world` node. The world node's parent is the `GameScene` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the project and die. You should see the two new buttons appear after death,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Informing the GameScene class when the player dies](img/Image_B04532_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Good work. The buttons are displaying properly, but nothing happens yet when
    we tap on them. To complete our restart menu, we simply need to implement tap
    events for the two new buttons in the `GameScene` class's `touchesBegan` function.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing touch events for the restart menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our buttons are displaying, we can add touch events in the `GameScene`
    class that are similar to the **START GAME** button in the `MenuScene` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the touch events, open `GameScene.swift` and locate the `touchesBegan`
    function. We will add the restart menu code at the bottom of the `for` loop. I
    am including the entire `touchesBegan` function in the following code, with new
    additions in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To test your new menu, run the project and run out of health on purpose. You
    should now be able to start a new game when you die, or transition back to the
    main menu with a tap on the menu button. Great! You have completed the two basic
    menus required for every game.
  prefs: []
  type: TYPE_NORMAL
- en: These simple steps go a long way towards the overall completion of the game,
    and the penguin game is looking terrific. Next, we will add event sounds and music
    to complete the game world.
  prefs: []
  type: TYPE_NORMAL
- en: Checkpoint 9-A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download my project to this point at this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.thinkingswiftly.com/game-development-with-swift/chapter-9](http://www.thinkingswiftly.com/game-development-with-swift/chapter-9)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding music and sound
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SpriteKit and Swift make it very easy to play sounds in our games. We can drag
    sound files into our project, just like image assets, and trigger playback with
    `SKAction playSoundFileNamed`.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the `AVAudio` class from the `AVFoundation` framework for more
    precise audio control. We will use `AVAudio` to play our background music.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the sound assets to the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Locate the `Sound` directory in the `Assets` folder and add it to your project
    by dragging and dropping it into the project navigator. You should see the `Sound`
    folder show up in your project just like any other asset.
  prefs: []
  type: TYPE_NORMAL
- en: Playing background music
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will add the background music. We want our music to play regardless
    of which scene the player is currently looking at, so we will play the music from
    the view controller itself. To play the music, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `GameViewController.swift` and add the following `import` statement at
    the very top, just below the existing import lines, to allow us access to `AVFoundation`
    classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `GameViewController` class and add the following property to store
    our `AVAudioPlayer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the very bottom of the `viewWillLayoutSubviews` function, add this code
    to play and loop the music:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the project. You should hear the background music as soon as the app starts.
    The music should continue as you move from the main menu to the game and back.
  prefs: []
  type: TYPE_NORMAL
- en: Playing sound effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Playing simple sounds is even easier. We will use `SKAction` objects to play
    sounds on specific events, such as picking up a coin or starting the game.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the coin sound effect to the Coin class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we will add a happy sound each time the player collects a coin. To add
    the coin sound effect, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Coin.swift` and add a new property to the `Coin` class to cache a coin
    sound action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `collect` function and add the following line at the bottom of the
    function to play the sound:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That is all you need to do to play the coin sound every time the player collects
    a coin. You can run the project now to test it out if you like.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid memory-based crashes, it is important to cache each `playSoundFileNamed`
    action object and rerun the same object each time you want to play a sound, rather
    than creating a new instance of a `SKAction` object for each playback.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the power-up and hurt sound effects to the Player class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will play an exciting sound when the player finds the star power-up and
    an injury noise when the player takes damage. Follow these steps to implement
    the sounds:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Player.swift` and add two new properties to the `Player` class to cache
    the sound effects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `takeDamage` function and add this line at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `starPower` function and add this line at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Playing a sound when the game starts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lastly, we will play a sound when the game starts. Follow these steps to play
    this sound:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GameScene.swift`. We will play this sound effect from the `didMoveToView`
    function. Normally, it is vital to cache sound actions in a property, but we do
    not have to cache the game start sound because we will only play it once per scene
    load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this line at the bottom of the `GameScene didMoveToView` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great—we have added all the sound effects for our game. You can now run the
    project to test out each sound.
  prefs: []
  type: TYPE_NORMAL
- en: Checkpoint 9-B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download my project to this point at this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.thinkingswiftly.com/game-development-with-swift/chapter-9](http://www.thinkingswiftly.com/game-development-with-swift/chapter-9)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have taken large steps towards finishing the game in this chapter. We learned
    to create menus in SpriteKit, added the main menu to the game, and gave the player
    a way to restart the game when they run out of health. Then, we enhanced the gameplay
    experience with catchy background music and timely sound effects. The game now
    feels finished; we are very nearly ready to publish our game.
  prefs: []
  type: TYPE_NORMAL
- en: 'One final step remains: we will explore integration with the Apple Game Center
    to track high scores and achievements in [Chapter 10](ch10.html "Chapter 10. Integrating
    with Game Center"), *Integrating with Game Center*. Game Center integration encourages
    your players to keep playing and improving. They will be able to see their own
    best score, view the top scores from around the world, and challenge their friends
    to beat their best effort.'
  prefs: []
  type: TYPE_NORMAL
