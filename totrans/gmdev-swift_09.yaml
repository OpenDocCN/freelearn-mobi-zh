- en: Chapter 9. Adding Menus and Sounds
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：添加菜单和音效
- en: 'It is easy to overlook menu design, but the menu provides your game''s first
    impression to the player. When used correctly, your menus reinforce the brand
    of your game and provide a pleasant break in the action that retains the player
    between gameplay. We will add two menus in this chapter: a main menu that shows
    when the game starts, and a retry menu that appears when the player loses a game.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 容易忽视菜单设计，但菜单提供了游戏给玩家的第一印象。当正确使用时，你的菜单可以加强游戏的品牌，并在动作之间提供愉快的休息，从而让玩家留在游戏中。在本章中，我们将添加两个菜单：一个在游戏开始时显示的主菜单，以及一个在玩家输掉游戏时出现的重试菜单。
- en: Likewise, immersive sounds are vital to a great game. Sound is your opportunity
    to support the mood of the game world and emphasize key gameplay mechanics such
    as coin collecting and taking damage. Additionally, every fun game deserves addictive
    background music! We will add background music and sound effects in this chapter
    to complete the mood of the game world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，沉浸式音效对于一款优秀的游戏至关重要。音效是支持游戏世界氛围和强调关键游戏机制（如收集金币和受到伤害）的机会。此外，每个有趣的游戏都值得有上瘾的背景音乐！我们将在本章中添加背景音乐和音效，以完成游戏世界的氛围。
- en: 'Topics in this chapter include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下主题：
- en: Building the main menu scene
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建主菜单场景
- en: Adding the restart game menu
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加重新开始游戏菜单
- en: Adding music with `AVAudio`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`AVAudio`添加音乐
- en: Playing sound effects with `SKAction`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`SKAction`播放音效
- en: Building the main menu
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建主菜单
- en: We can use SpriteKit components to build our main menu. We will create a new
    scene in a new file for our main menu, and then use code to place a background
    sprite node, logo text node, and button sprite nodes. Let's start by adding the
    menu scene to the project and building out the nodes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用SpriteKit组件来构建我们的主菜单。我们将在新文件中创建一个新的场景用于主菜单，然后使用代码放置背景精灵节点、标志文本节点和按钮精灵节点。让我们首先将菜单场景添加到项目中，并构建出节点。
- en: Creating the menu scene and menu nodes
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建菜单场景和菜单节点
- en: 'To create the menu scene, follow these steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建菜单场景，请按照以下步骤操作：
- en: We will use a new background image for the menu. Let's add it to our project.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为菜单使用一个新的背景图片。让我们将其添加到我们的项目中。
- en: Locate `Background-menu.png` in the `Backgrounds` folder of the asset bundle.
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源包的`Backgrounds`文件夹中定位`Background-menu.png`。
- en: Open `Images.xcassets` in Xcode, and then drag and drop `Background-menu.png`
    into `Images.xcassets` to make it available in your project.
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xcode中打开`Images.xcassets`，然后将`Background-menu.png`拖放到`Images.xcassets`中，使其在项目中可用。
- en: Add a new Swift file to your project named `MenuScene.swift`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中添加一个名为`MenuScene.swift`的新Swift文件。
- en: 'Add the following code to create the `MenuScene` scene class:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以创建`MenuScene`场景类：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we need to configure a few scene properties. Add this code inside the
    new scene''s `didMoveToView` function:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要配置一些场景属性。在新的场景的`didMoveToView`函数内部添加以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need to draw the name of the game near the top of the menu. Add this code
    at the bottom of the `didMoveToView` function to draw "Pierre Penguin Escapes
    the Antarctic":'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在菜单的顶部附近绘制游戏名称。在`didMoveToView`函数的底部添加以下代码来绘制“皮埃尔企鹅逃离南极”：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we will add the start button. The start button is the combination of a
    `SKSpriteNode` for the button graphic and a `SKLabelNode` for the "Start Game"
    text. Add this code at the bottom of the `didMoveToView` function to create the
    button:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将添加开始按钮。开始按钮是由按钮图形的`SKSpriteNode`和“开始游戏”文本的`SKLabelNode`组合而成。在`didMoveToView`函数的底部添加以下代码以创建按钮：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, we will make the start button pulse in and out to add movement and
    excitement to the menu. Add this code at the bottom of the `didMoveToView` function
    to fade the button in and out:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将使开始按钮进行脉冲式进出，以增加菜单的动感和兴奋感。在`didMoveToView`函数的底部添加以下代码以淡入淡出按钮：
- en: '[PRE4]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Great work! We have created our `MenuScene` class and added all the nodes we
    need to build the menu. Next, we will update our app to start with the menu instead
    of going directly to the `GameScene` class.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们已经创建了`MenuScene`类，并添加了构建菜单所需的所有节点。接下来，我们将更新我们的应用，使其从菜单开始，而不是直接跳转到`GameScene`类。
- en: Launching the main menu when the game starts
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏开始时启动主菜单
- en: 'So far, our app has launched directly to the `GameScene` class whenever it
    starts. We will now update our view controller to start with the `MenuScene` class
    instead. Follow these steps to launch the menu when the game starts:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用每次启动时都会直接跳转到`GameScene`类。现在我们将更新我们的视图控制器，使其从`MenuScene`类开始。按照以下步骤在游戏开始时启动菜单：
- en: Open `GameViewController.swift` and locate the `viewWillLayoutSubviews` function.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GameViewController.swift`文件，找到`viewWillLayoutSubviews`函数。
- en: 'Replace the entire `viewWillLayoutSubviews` function with this code:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将整个`viewWillLayoutSubviews`函数替换为以下代码：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the project and you should see the app start with your new main menu, which
    looks something like this screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目，你应该会看到应用以你的新主菜单启动，这看起来就像下面的截图：
- en: '![Launching the main menu when the game starts](img/Image_B04532_09_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![游戏开始时启动主菜单](img/Image_B04532_09_01.jpg)'
- en: Terrific work! Next, we will wire up the **START GAME** button to transition
    to the `GameScene` class.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 了不起的工作！接下来，我们将连接**START GAME**按钮以过渡到`GameScene`类。
- en: Wiring up the START GAME button
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接START GAME按钮
- en: 'Just like in `GameScene`, we will add a `touchesBegan` function to the `MenuScene`
    class to capture touches on the **START GAME** button. To implement `touchesBegan`,
    open `MenuScene.swift` and, at the bottom of the class, add a new function named
    `touchesBegan`, as shown here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在`GameScene`中一样，我们将在`MenuScene`类中添加一个`touchesBegan`函数来捕捉**START GAME**按钮的触摸。要实现`touchesBegan`，打开`MenuScene.swift`文件，在类的底部添加一个名为`touchesBegan`的新函数，如下所示：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run the project and tap the start button. The game should switch to the `GameScene`
    class and gameplay will begin. Congratulations, you have successfully implemented
    your first main menu in SpriteKit. Next, we will add a simple restart menu that
    appears on top of `GameScene` when the player dies.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目并点击开始按钮。游戏应该切换到`GameScene`类，游戏玩法将开始。恭喜你，你已经在SpriteKit中成功实现了你的第一个主菜单。接下来，我们将添加一个简单的重启菜单，当玩家死亡时，它将显示在`GameScene`上方。
- en: Adding the restart game menu
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加重启游戏菜单
- en: 'The restart menu is even simpler to implement. Rather than create a new scene,
    we can extend our existing `HUD` class to display a restart button when the game
    ends. We will also include a smaller button to return the player to the main menu.
    This menu will appear on top of the action, as in this screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重启菜单的实现甚至更简单。我们不需要创建一个新的场景，而是可以通过扩展现有的`HUD`类来在游戏结束时显示重启按钮。我们还将包括一个更小的按钮，用于将玩家返回到主菜单。此菜单将显示在动作上方，如下面的截图所示：
- en: '![Adding the restart game menu](img/Image_B04532_09_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![添加重启游戏菜单](img/Image_B04532_09_02.jpg)'
- en: Extending the HUD
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展HUD
- en: 'First, we need to create and draw our new button nodes in the `HUD` class.
    Follow these steps to add the nodes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`HUD`类中创建和绘制我们新的按钮节点。按照以下步骤添加节点：
- en: 'Open the `HUD.swift` file and add two new properties to the `HUD` class, as
    follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`HUD.swift`文件，并在`HUD`类中添加两个新属性，如下所示：
- en: '[PRE7]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code at the bottom of the `createHudNodes` function:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`createHudNodes`函数的底部添加以下代码：
- en: '[PRE8]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We purposefully did not add these nodes as children of the `HUD` yet, so they
    will not appear on the screen until we are ready. Next, we will add a function
    to make the buttons appear. We will call this function from the `GameScene` class
    when the player dies. Add a function named `showButtons` to the `HUD` class, as
    shown here:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们故意没有将这些节点作为`HUD`的子节点添加，所以它们将不会出现在屏幕上，直到我们准备好。接下来，我们将添加一个使按钮出现的函数。我们将从这个`GameScene`类中调用此函数，当玩家死亡时。在`HUD`类中添加一个名为`showButtons`的函数，如下所示：
- en: '[PRE9]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Wiring up GameScene for game over
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为游戏结束连接GameScene
- en: 'We need to tell the `HUD` class to show the restart and main menu buttons once
    the player runs out of health. Open `GameScene.swift` and add a new function to
    the `GameScene` class named `gameOver`, as shown here:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉`HUD`类，当玩家耗尽生命值时，显示重启和主菜单按钮。打开`GameScene.swift`文件，并在`GameScene`类中添加一个名为`gameOver`的新函数，如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That is all for now – we will add to the `gameOver` function in the next chapter,
    when we implement a high score system.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们将在下一章中添加到`gameOver`函数，当我们实现高分系统时。
- en: Informing the GameScene class when the player dies
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当玩家死亡时通知GameScene类
- en: 'So far, the `GameScene` class is oblivious to whether the player is alive or
    dead. We need to change that in order to use our new `gameOver` function. Open
    `Player.swift`, locate the `die` function, and add the following code at the bottom
    of the function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`GameScene`类对玩家是生是死一无所知。我们需要改变这一点，以便使用我们新的`gameOver`函数。打开`Player.swift`文件，找到`die`函数，并在函数底部添加以下代码：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We access `GameScene` by traveling up the node tree. The `Player` node's parent
    is the `world` node. The world node's parent is the `GameScene` class.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过遍历节点树来访问`GameScene`。`Player`节点的父节点是`world`节点，`world`节点的父节点是`GameScene`类。
- en: 'Run the project and die. You should see the two new buttons appear after death,
    as shown here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目并死亡。你应该会看到死亡后出现两个新按钮，如下所示：
- en: '![Informing the GameScene class when the player dies](img/Image_B04532_09_03.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![通知GameScene类玩家死亡时的画面](img/Image_B04532_09_03.jpg)'
- en: Good work. The buttons are displaying properly, but nothing happens yet when
    we tap on them. To complete our restart menu, we simply need to implement tap
    events for the two new buttons in the `GameScene` class's `touchesBegan` function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好。按钮显示正确，但当我们点击它们时，还没有任何反应。为了完成我们的重启菜单，我们只需在`GameScene`类的`touchesBegan`函数中实现两个新按钮的触摸事件。
- en: Implementing touch events for the restart menu
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现重启菜单的触摸事件
- en: Now that our buttons are displaying, we can add touch events in the `GameScene`
    class that are similar to the **START GAME** button in the `MenuScene` class.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经显示了按钮，我们可以在`GameScene`类中添加类似于`MenuScene`类中**START GAME**按钮的触摸事件。
- en: 'To add the touch events, open `GameScene.swift` and locate the `touchesBegan`
    function. We will add the restart menu code at the bottom of the `for` loop. I
    am including the entire `touchesBegan` function in the following code, with new
    additions in bold:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加触摸事件，打开`GameScene.swift`文件，找到`touchesBegan`函数。我们将在`for`循环的底部添加重启菜单的代码。以下代码包含了整个`touchesBegan`函数，其中新添加的内容用粗体表示：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To test your new menu, run the project and run out of health on purpose. You
    should now be able to start a new game when you die, or transition back to the
    main menu with a tap on the menu button. Great! You have completed the two basic
    menus required for every game.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试你的新菜单，运行项目并故意耗尽生命值。现在，当你死亡时，你应该能够开始新游戏，或者通过点击菜单按钮返回主菜单。太棒了！你已经完成了每个游戏所需的基本两个菜单。
- en: These simple steps go a long way towards the overall completion of the game,
    and the penguin game is looking terrific. Next, we will add event sounds and music
    to complete the game world.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些简单的步骤对于游戏的总体完成度有很大帮助，企鹅游戏看起来非常棒。接下来，我们将添加事件音效和音乐，以完成游戏世界。
- en: Checkpoint 9-A
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点 9-A
- en: 'Download my project to this point at this URL:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在此URL下载到这一点的项目：
- en: '[http://www.thinkingswiftly.com/game-development-with-swift/chapter-9](http://www.thinkingswiftly.com/game-development-with-swift/chapter-9)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.thinkingswiftly.com/game-development-with-swift/chapter-9](http://www.thinkingswiftly.com/game-development-with-swift/chapter-9)'
- en: Adding music and sound
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加音乐和音效
- en: SpriteKit and Swift make it very easy to play sounds in our games. We can drag
    sound files into our project, just like image assets, and trigger playback with
    `SKAction playSoundFileNamed`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: SpriteKit和Swift使得在我们的游戏中播放声音变得非常容易。我们可以像拖放图像资源一样将声音文件拖入项目中，并通过`SKAction playSoundFileNamed`触发播放。
- en: We can also use the `AVAudio` class from the `AVFoundation` framework for more
    precise audio control. We will use `AVAudio` to play our background music.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`AVFoundation`框架中的`AVAudio`类进行更精确的音频控制。我们将使用`AVAudio`来播放我们的背景音乐。
- en: Adding the sound assets to the game
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将音效资源添加到游戏中
- en: Locate the `Sound` directory in the `Assets` folder and add it to your project
    by dragging and dropping it into the project navigator. You should see the `Sound`
    folder show up in your project just like any other asset.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Assets`文件夹中找到`Sound`目录，并通过将其拖放到项目导航器中将其添加到项目中。你应该能看到`Sound`文件夹像其他资源一样出现在你的项目中。
- en: Playing background music
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放背景音乐
- en: 'First, we will add the background music. We want our music to play regardless
    of which scene the player is currently looking at, so we will play the music from
    the view controller itself. To play the music, follow these steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加背景音乐。我们希望音乐无论玩家当前查看哪个场景都能播放，因此我们将从视图控制器本身播放音乐。要播放音乐，请按照以下步骤操作：
- en: 'Open `GameViewController.swift` and add the following `import` statement at
    the very top, just below the existing import lines, to allow us access to `AVFoundation`
    classes:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GameViewController.swift`文件，在现有导入语句下方添加以下`import`语句，以便我们访问`AVFoundation`类：
- en: '[PRE13]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Locate the `GameViewController` class and add the following property to store
    our `AVAudioPlayer`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GameViewController`类中，添加以下属性以存储我们的`AVAudioPlayer`：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At the very bottom of the `viewWillLayoutSubviews` function, add this code
    to play and loop the music:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`viewWillLayoutSubviews`函数的底部，添加以下代码以播放和循环音乐：
- en: '[PRE15]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run the project. You should hear the background music as soon as the app starts.
    The music should continue as you move from the main menu to the game and back.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目。当应用启动时，你应该立即听到背景音乐。当你从主菜单移动到游戏界面再返回时，音乐应该持续播放。
- en: Playing sound effects
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放音效
- en: Playing simple sounds is even easier. We will use `SKAction` objects to play
    sounds on specific events, such as picking up a coin or starting the game.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 播放简单的声音甚至更容易。我们将使用 `SKAction` 对象在特定事件上播放声音，例如捡起硬币或开始游戏。
- en: Adding the coin sound effect to the Coin class
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将硬币音效添加到 Coin 类
- en: 'First, we will add a happy sound each time the player collects a coin. To add
    the coin sound effect, follow these steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在玩家每次捡到硬币时添加一个快乐的声音。要添加硬币音效，请按照以下步骤操作：
- en: 'Open `Coin.swift` and add a new property to the `Coin` class to cache a coin
    sound action:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Coin.swift` 文件，并在 `Coin` 类中添加一个新属性以缓存硬币声音动作：
- en: '[PRE16]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Locate the `collect` function and add the following line at the bottom of the
    function to play the sound:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位 `collect` 函数，并在函数底部添加以下行以播放声音：
- en: '[PRE17]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: That is all you need to do to play the coin sound every time the player collects
    a coin. You can run the project now to test it out if you like.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是每次玩家捡到硬币时播放硬币声音所需做的全部工作。如果您喜欢，现在可以运行项目来测试它。
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To avoid memory-based crashes, it is important to cache each `playSoundFileNamed`
    action object and rerun the same object each time you want to play a sound, rather
    than creating a new instance of a `SKAction` object for each playback.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免基于内存的崩溃，缓存每个 `playSoundFileNamed` 动作对象并在每次想要播放声音时重新运行相同的对象非常重要，而不是为每次播放创建一个新的
    `SKAction` 对象实例。
- en: Adding the power-up and hurt sound effects to the Player class
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将增强效果和受伤声音效果添加到 Player 类
- en: 'We will play an exciting sound when the player finds the star power-up and
    an injury noise when the player takes damage. Follow these steps to implement
    the sounds:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家找到星星增强效果时，我们将播放一个令人兴奋的声音，当玩家受到伤害时，我们将播放一个受伤的声音。按照以下步骤实现声音：
- en: 'Open `Player.swift` and add two new properties to the `Player` class to cache
    the sound effects:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Player.swift` 文件，并在 `Player` 类中添加两个新属性以缓存音效：
- en: '[PRE18]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Find the `takeDamage` function and add this line at the bottom:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位 `takeDamage` 函数，并在底部添加以下行：
- en: '[PRE19]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Find the `starPower` function and add this line at the bottom:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 `starPower` 函数，并在底部添加以下行：
- en: '[PRE20]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Playing a sound when the game starts
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 游戏开始时播放声音
- en: 'Lastly, we will play a sound when the game starts. Follow these steps to play
    this sound:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在游戏开始时播放一个声音。按照以下步骤播放此声音：
- en: Open `GameScene.swift`. We will play this sound effect from the `didMoveToView`
    function. Normally, it is vital to cache sound actions in a property, but we do
    not have to cache the game start sound because we will only play it once per scene
    load.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `GameScene.swift` 文件。我们将从 `didMoveToView` 函数播放这个声音效果。通常，在属性中缓存声音动作是至关重要的，但我们不需要缓存游戏开始的声音，因为我们将在每个场景加载时只播放一次。
- en: 'Add this line at the bottom of the `GameScene didMoveToView` function:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `GameScene didMoveToView` 函数的底部添加以下行：
- en: '[PRE21]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Great—we have added all the sound effects for our game. You can now run the
    project to test out each sound.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了——我们已经为我们的游戏添加了所有音效。现在您可以运行项目来测试每个声音。
- en: Checkpoint 9-B
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点 9-B
- en: 'Download my project to this point at this URL:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 URL 下载我到目前为止的项目：
- en: '[http://www.thinkingswiftly.com/game-development-with-swift/chapter-9](http://www.thinkingswiftly.com/game-development-with-swift/chapter-9)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.thinkingswiftly.com/game-development-with-swift/chapter-9](http://www.thinkingswiftly.com/game-development-with-swift/chapter-9)'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have taken large steps towards finishing the game in this chapter. We learned
    to create menus in SpriteKit, added the main menu to the game, and gave the player
    a way to restart the game when they run out of health. Then, we enhanced the gameplay
    experience with catchy background music and timely sound effects. The game now
    feels finished; we are very nearly ready to publish our game.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们朝着完成游戏迈出了重要的一步。我们学会了在 SpriteKit 中创建菜单，将主菜单添加到游戏中，并在玩家健康耗尽时提供了重新开始游戏的方式。然后，我们通过吸引人的背景音乐和及时的声音效果增强了游戏体验。现在游戏感觉已经完成；我们几乎准备好发布我们的游戏了。
- en: 'One final step remains: we will explore integration with the Apple Game Center
    to track high scores and achievements in [Chapter 10](ch10.html "Chapter 10. Integrating
    with Game Center"), *Integrating with Game Center*. Game Center integration encourages
    your players to keep playing and improving. They will be able to see their own
    best score, view the top scores from around the world, and challenge their friends
    to beat their best effort.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步：我们将探索与 Apple Game Center 的集成，以在 [第 10 章](ch10.html "第 10 章。与 Game Center
    集成") 中跟踪高分和成就，*与 Game Center 集成*。Game Center 集成鼓励玩家继续玩游戏并提高分数。他们可以看到自己的最佳分数，查看全球最高分，并挑战朋友打破他们的最佳成绩。
