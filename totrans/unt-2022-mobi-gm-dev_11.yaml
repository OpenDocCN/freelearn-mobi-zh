- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remote Config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting a new build of your game exported can take quite a bit of time. It takes
    time to actually make the changes in the Unity Editor, and then you have to export
    the game and upload a new version on each of the app stores you are targeting.
    Then, you have to spend time waiting for them to approve the app and for everyone
    to actually download it.
  prefs: []
  type: TYPE_NORMAL
- en: One of the things I talk to my students about is creating projects that can
    be easily changed without having to open the Unity Editor. This can be done using
    data-driven development practices – such as building levels or encounters using
    text files, AssetBundles, or Unity’s **Remote Config** (previously **Remote Settings**)
    menu – allowing us to instantly modify variables in copies of the game that are
    already out.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’re going to see just how easy it is to set up Unity’s Remote
    Config system, and how we can utilize it for a simple example, by changing the
    difficulty of our game by changing the speed at which the player moves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter itself is a simple step-by-step process from beginning to end.
    Here is an outline of our tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Remote Config setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Game Overrides into gameplay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, you can visit Unity’s download
    archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the **Unity Editor system requirements** section. To deploy your project, you
    will need an Android or iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: Remote Config setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order for us to use Remote Config, the first thing we’re going to need to
    do is add the Remote Config package to our project. So, let’s take a look at how
    we can do that using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Unity Editor, open the **Services** window of the Package Manager (shown
    in the top-right part of the next screenshot) by either clicking on the cloud
    button at the top left of the screen or going to **Window** | **General** | **Services**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.1: The location of the Services button](img/B18868_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: The location of the Services button'
  prefs: []
  type: TYPE_NORMAL
- en: 'If all goes well, you should see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2: Package Manager | Services](img/B18868_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Package Manager | Services'
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, scroll down and click on the **Remote Config** package, and then
    click on the **Install** button at the bottom right. If all went well, you should
    see something like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3: The Remote Config packages installed](img/B18868_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: The Remote Config packages installed'
  prefs: []
  type: TYPE_NORMAL
- en: 'Close out of the Package Manager and open the **Remote Config** window by going
    to **Window** | **Remote Config**. This will open a separate window that I will
    then drag and drop next to the Console for ease of use. If all goes well, your
    editor should look similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4: The Remote Config window added](img/B18868_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: The Remote Config window added'
  prefs: []
  type: TYPE_NORMAL
- en: And with that, the Remote Config package is installed correctly!
  prefs: []
  type: TYPE_NORMAL
- en: Just like how in the previous chapter we needed to create a connection between
    Unity Gaming Services and our project in order to use Unity Analytics, we will
    also need to do the same thing to tweak Remote Config values.
  prefs: []
  type: TYPE_NORMAL
- en: Creating key-value pairs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we will need to do is create the variables that we would like
    to change:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Unity Editor, if the **Remote Config** window is open, click on the
    **View in** **Dashboard** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5: The Remote Config page](img/B18868_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: The Remote Config page'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, for those on the Unity dashboard website, you can click on **LiveOps**.
    Once there, on the left-hand side, open up the **Remote Config** section, and
    then click on the **Config** tab located under it.
  prefs: []
  type: TYPE_NORMAL
- en: This section is the location where we can set and modify the values. Just like
    working with dictionaries, the settings are key-value pairs, and while there is
    currently only one configuration now, `production`, it is possible to create many
    other environments. Generally, there are two configurations that can be used –
    `True` from the **Build** **Settings** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `RollSpeed`. Under the **Choose a type** dropdown, select **Float**.
    Lastly, put **5** in the **Float Value** field. Finally, click on the **Add**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6: Adding a key](img/B18868_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Adding a key'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let’s do the same thing for the `DodgeSpeed` variable with a value of
    **5**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7: The DodgeSpeed and RollSpeed keys added](img/B18868_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: The DodgeSpeed and RollSpeed keys added'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s important to note that this doesn’t actually make a change. In fact, you’ll
    see a note above the values saying that there are unpublished changes. Note how
    there is a big blue button that says **Publish**. Click on that to deploy the
    changes. It’ll present a window asking whether you want to confirm the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 11.8: Confirming our change\uFEFF.](img/B18868_11_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: Confirming our change.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have some values to grab, let’s take a look at how we can actually
    do that. Head back into the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Remote Config** window, click on the **Pull** button. If all went
    well, you should see the values added to our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9: The values added to our Remote Config after a pull](img/B18868_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: The values added to our Remote Config after a pull'
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good habit to pull every time that you are about to make changes to your
    remote configs from your project, ensuring that you always have the latest version
    of your properties possible. And with that, we’ve now seen how we can create different
    key-value pairs to add to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Game Overrides into gameplay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we can see how to get those values and how the system works, let’s
    see how we can actually integrate it with our project and have it affect gameplay:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the gameplay scene if it isn’t open already, and create a new GameObject
    by going to `Remote Config Manager` and reset its position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, from the `Assets\Scripts` folder and create a new C# script called `RemoteConfigManager`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the newly created `RemoteConfigManager` component to the `RemoteConfigManager`
    object we created in *step 1*. If all went well, your project should look similar
    to the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10: Adding RemoteConfigManager](img/B18868_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: Adding RemoteConfigManager'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the `RemoteConfigManager` script to open it with the script editor
    of your choice and replace its script with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Awake` function, we utilize the `ConfigManager.FetchConfigs` method
    in order to get the app configuration settings from the remote server. Upon completing
    the fetch operation successfully, the `ConfigManager.FetchCompleted` event is
    triggered. In this case, we added an `ApplyRemoteSettings` function, which should
    also be called when that event triggers, which we then implement.
  prefs: []
  type: TYPE_NORMAL
- en: 'That method takes in a `ConfigResponse` struct that represents the response
    of a `RemoteConfig` fetch. Of note is the `requestOrigin` property, which is an
    enum representing the origin point of the last retrieved configuration settings.
    It can be one of three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Cached`: The config settings loaded in our current session are cached from
    a previous session, so no new configuration settings are loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Default`: There are no configuration settings that are loaded in the current
    session'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Remote`: There are new configuration settings that were loaded from the remote
    server in the current session'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our case, we only need to do something if the value is `Remote`. If this
    is the case, that means that there are new settings that have been loaded, which
    means that we need to update the values that are currently loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we need to go to the `PlayerBehaviour` script and add the following to
    the top section with the rest of the `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Afterward, we need to add the `UpdateRemoteConfigValues` function to the `PlayerBehaviour`
    class because it currently doesn’t exist; otherwise, we will get a compiler error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, we are using the `appConfig` property of `ConfigManager`, which
    is the `RuntimeConfig` object, allowing us to access the current values as they
    are currently set from the cloud for our environment(s). Then, we set the current
    values of our `rollSpeed` and `dodgeSpeed` variables to the values that we retrieved
    from the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the `ConfigManager` class, check out the following:
    [https://docs.unity3d.com/Packages/com.unity.remote-config@0.3/api/Unity.RemoteConfig.ConfigManager.htm](https://docs.unity3d.com/Packages/com.unity.remote-config@0.3/api/Unity.RemoteConfig.ConfigManager.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Save both scripts and return to the Unity Editor. Then, go to the **Hierarchy**
    window, select **Remote Config Manager**, and from the **Inspector** window, assign
    the **Player Behaviour** value to the **Player** object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11: Adding Player Behaviour](img/B18868_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.11: Adding Player Behaviour'
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon playing the game, you should be able to see in the `Debug.Log` statement
    being called, telling us that the value is being updated to whatever we placed
    in **Remote Config**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12: Values are updating correctly](img/B18868_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.12: Values are updating correctly'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the `dodgeSpeed` and `rollSpeed` variables are now being set via the
    `UpdateRemoteConfigValues` function, we can now hide them from the `PlayerBehaviour`
    script so that the class looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we’ve modified the two properties, adding the `[HideInInspector]` tag,
    which will hide the item in the **Inspector** window. We’ve also changed the variables
    to use XML comments instead of tooltips, since they are no longer being displayed
    in the **Inspector** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the script and select the **Player** object. From there, go to the **Inspector**
    window and note that the properties are no longer visible in the **PlayerBehaviour**
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13: Values are hidden in the Inspector window](img/B18868_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.13: Values are hidden in the Inspector window'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the values will be set through the **Remote Config** component, and users
    won’t be confused about why their values are being replaced by what’s in **Player
    Behaviour**.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to tweak these values while the game is live can be incredibly useful
    and allows you to share changes to the game without requiring your users to download
    a new version!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how we can use **Remote Config** to make adjustments
    to our games on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: There’s a lot more that you can do with Remote Settings. You can learn more
    about **Remote Config** and how to use it to work with non-default parameters
    at [https://docs.unity3d.com/Manual/UnityAnalyticsRemoteSettingsComponent.html](https://docs.unity3d.com/Manual/UnityAnalyticsRemoteSettingsComponent.html).
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have all of the implementation details of our game complete, but
    our game right now is pretty bare. In the next chapter, we will look into ways
    to make our game more polished, using features such as particle systems and screen
    shake.
  prefs: []
  type: TYPE_NORMAL
