- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Remote Config
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程配置
- en: Getting a new build of your game exported can take quite a bit of time. It takes
    time to actually make the changes in the Unity Editor, and then you have to export
    the game and upload a new version on each of the app stores you are targeting.
    Then, you have to spend time waiting for them to approve the app and for everyone
    to actually download it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 获取您游戏的新构建版本并导出可能需要相当长的时间。实际上在Unity编辑器中进行更改需要时间，然后您必须导出游戏并在您针对的每个应用商店上上传新版本。然后，您必须花费时间等待它们批准应用，以及让每个人实际下载它。
- en: One of the things I talk to my students about is creating projects that can
    be easily changed without having to open the Unity Editor. This can be done using
    data-driven development practices – such as building levels or encounters using
    text files, AssetBundles, or Unity’s **Remote Config** (previously **Remote Settings**)
    menu – allowing us to instantly modify variables in copies of the game that are
    already out.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我和学生讨论的其中一件事是创建可以轻松更改而无需打开Unity编辑器的项目。这可以通过使用数据驱动开发实践来实现，例如使用文本文件、AssetBundles或Unity的**远程配置**（之前称为**远程设置**）菜单来构建关卡或遭遇，使我们能够即时修改已发布的游戏副本中的变量。
- en: In this chapter, we’re going to see just how easy it is to set up Unity’s Remote
    Config system, and how we can utilize it for a simple example, by changing the
    difficulty of our game by changing the speed at which the player moves.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到设置Unity的远程配置系统有多简单，以及我们如何通过改变玩家移动的速度来改变游戏难度来利用它进行一个简单的示例。
- en: 'The chapter itself is a simple step-by-step process from beginning to end.
    Here is an outline of our tasks:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章本身是一个从头到尾的简单步骤过程。以下是我们的任务概述：
- en: Remote Config setup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程配置设置
- en: Integrating Game Overrides into gameplay
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏覆盖集成到游戏中
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, you can visit Unity’s download
    archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the **Unity Editor system requirements** section. To deploy your project, you
    will need an Android or iOS device.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用Unity 2022.1.0b16和Unity Hub 3.3.1，但步骤应该在未来版本的编辑器中只需进行最小更改即可。如果您想下载本书中使用的确切版本，您可以访问Unity的下载存档[https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive)。您还可以在**Unity编辑器系统要求**部分找到Unity的系统要求[https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)。要部署您的项目，您需要一个Android或iOS设备。
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter11).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章中包含的代码文件，网址为[https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter11)。
- en: Remote Config setup
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程配置设置
- en: 'In order for us to use Remote Config, the first thing we’re going to need to
    do is add the Remote Config package to our project. So, let’s take a look at how
    we can do that using the following steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们使用远程配置，我们首先需要做的是将远程配置包添加到我们的项目中。因此，让我们看看如何通过以下步骤来完成：
- en: From the Unity Editor, open the **Services** window of the Package Manager (shown
    in the top-right part of the next screenshot) by either clicking on the cloud
    button at the top left of the screen or going to **Window** | **General** | **Services**.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Unity编辑器中，通过点击屏幕左上角的云按钮或转到**窗口** | **通用** | **服务**来打开包管理器的**服务**窗口（如图11.1所示）。
- en: '![Figure 11.1: The location of the Services button](img/B18868_11_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1：服务按钮的位置](img/B18868_11_01.jpg)'
- en: 'Figure 11.1: The location of the Services button'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：服务按钮的位置
- en: 'If all goes well, you should see something like the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该会看到以下截图中的内容：
- en: '![Figure 11.2: Package Manager | Services](img/B18868_11_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2：包管理器 | 服务](img/B18868_11_02.jpg)'
- en: 'Figure 11.2: Package Manager | Services'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：包管理器 | 服务
- en: 'From there, scroll down and click on the **Remote Config** package, and then
    click on the **Install** button at the bottom right. If all went well, you should
    see something like the following screenshot:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，向下滚动并点击**远程配置**包，然后点击右下角的**安装**按钮。如果一切顺利，您应该会看到以下截图类似的内容：
- en: '![Figure 11.3: The Remote Config packages installed](img/B18868_11_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3：已安装的远程配置包](img/B18868_11_03.jpg)'
- en: 'Figure 11.3: The Remote Config packages installed'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：已安装的远程配置包
- en: 'Close out of the Package Manager and open the **Remote Config** window by going
    to **Window** | **Remote Config**. This will open a separate window that I will
    then drag and drop next to the Console for ease of use. If all goes well, your
    editor should look similar to the following:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭包管理器，通过转到**窗口** | **远程配置**来打开**远程配置**窗口。这将打开一个独立的窗口，然后我会将其拖放到控制台旁边以便于使用。如果一切顺利，您的编辑器应该看起来类似于以下截图：
- en: '![Figure 11.4: The Remote Config window added](img/B18868_11_04.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图11.4：添加了远程配置窗口](img/B18868_11_04.jpg)'
- en: 'Figure 11.4: The Remote Config window added'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：添加了远程配置窗口
- en: And with that, the Remote Config package is installed correctly!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，就这样，远程配置包被正确安装了！
- en: Just like how in the previous chapter we needed to create a connection between
    Unity Gaming Services and our project in order to use Unity Analytics, we will
    also need to do the same thing to tweak Remote Config values.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在前一章中我们需要创建Unity游戏服务和我们的项目之间的连接以便使用Unity分析一样，我们还需要做同样的事情来调整远程配置值。
- en: Creating key-value pairs
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建键值对
- en: 'The first thing we will need to do is create the variables that we would like
    to change:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要做的是创建我们想要更改的变量：
- en: From the Unity Editor, if the **Remote Config** window is open, click on the
    **View in** **Dashboard** option.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Unity编辑器，如果**远程配置**窗口是打开的，点击**在仪表板中查看**选项。
- en: '![Figure 11.5: The Remote Config page](img/B18868_11_05.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5：远程配置页面](img/B18868_11_05.jpg)'
- en: 'Figure 11.5: The Remote Config page'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5：远程配置页面
- en: Alternatively, for those on the Unity dashboard website, you can click on **LiveOps**.
    Once there, on the left-hand side, open up the **Remote Config** section, and
    then click on the **Config** tab located under it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于在Unity仪表盘网站上的人，您可以点击**LiveOps**。一旦进入，在左侧，打开**远程配置**部分，然后点击位于其下的**配置**标签页。
- en: This section is the location where we can set and modify the values. Just like
    working with dictionaries, the settings are key-value pairs, and while there is
    currently only one configuration now, `production`, it is possible to create many
    other environments. Generally, there are two configurations that can be used –
    `True` from the **Build** **Settings** window.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分是我们设置和修改值的位置。就像使用字典一样，设置是键值对，尽管目前只有一个配置`production`，但可以创建许多其他环境。通常，可以使用两种配置
    - 来自**构建设置**窗口的`True`。
- en: 'Click on the `RollSpeed`. Under the **Choose a type** dropdown, select **Float**.
    Lastly, put **5** in the **Float Value** field. Finally, click on the **Add**
    button:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`RollSpeed`。在**选择类型**下拉菜单中，选择**浮点数**。最后，在**浮点数值**字段中输入**5**。最后，点击**添加**按钮：
- en: '![Figure 11.6: Adding a key](img/B18868_11_06.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图11.6：添加键](img/B18868_11_06.jpg)'
- en: 'Figure 11.6: Adding a key'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6：添加键
- en: 'Then, let’s do the same thing for the `DodgeSpeed` variable with a value of
    **5**:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们为`DodgeSpeed`变量（值为**5**）做同样的事情：
- en: '![Figure 11.7: The DodgeSpeed and RollSpeed keys added](img/B18868_11_07.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7：添加了DodgeSpeed和RollSpeed键](img/B18868_11_07.jpg)'
- en: 'Figure 11.7: The DodgeSpeed and RollSpeed keys added'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7：添加了DodgeSpeed和RollSpeed键
- en: 'It’s important to note that this doesn’t actually make a change. In fact, you’ll
    see a note above the values saying that there are unpublished changes. Note how
    there is a big blue button that says **Publish**. Click on that to deploy the
    changes. It’ll present a window asking whether you want to confirm the changes:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重要的是要注意，这实际上并没有做出任何改变。事实上，您会在值上方看到一个说明，指出有未发布的更改。注意那里有一个大蓝色按钮，上面写着**发布**。点击它以部署更改。它将弹出一个窗口询问您是否要确认更改：
- en: "![Figure 11.8: Confirming our change\uFEFF.](img/B18868_11_08.jpg)"
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8：确认我们的更改](img/B18868_11_08.jpg)'
- en: 'Figure 11.8: Confirming our change.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8：确认我们的更改
- en: Now that we have some values to grab, let’s take a look at how we can actually
    do that. Head back into the Unity Editor.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有一些值可以获取，让我们看看我们实际上如何做到这一点。回到Unity编辑器。
- en: 'In the **Remote Config** window, click on the **Pull** button. If all went
    well, you should see the values added to our project:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**远程配置**窗口中，点击**拉取**按钮。如果一切顺利，你应该能看到添加到我们项目中的值：
- en: '![Figure 11.9: The values added to our Remote Config after a pull](img/B18868_11_09.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图11.9：拉取后添加到我们的远程配置中的值](img/B18868_11_09.jpg)'
- en: 'Figure 11.9: The values added to our Remote Config after a pull'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9：拉取后添加到我们的远程配置中的值
- en: It’s a good habit to pull every time that you are about to make changes to your
    remote configs from your project, ensuring that you always have the latest version
    of your properties possible. And with that, we’ve now seen how we can create different
    key-value pairs to add to our project.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你准备从项目中更改远程配置时，拉取是一个好习惯，确保你总是拥有可能的最新的属性版本。并且，我们已经看到了如何创建不同的键值对添加到我们的项目中。
- en: Integrating Game Overrides into gameplay
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将游戏覆盖集成到游戏玩法中
- en: 'Now that we can see how to get those values and how the system works, let’s
    see how we can actually integrate it with our project and have it affect gameplay:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何获取这些值以及系统是如何工作的，让我们看看我们如何将其集成到我们的项目中并使其影响游戏玩法：
- en: Open up the gameplay scene if it isn’t open already, and create a new GameObject
    by going to `Remote Config Manager` and reset its position.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果游戏玩法场景尚未打开，请打开它，并通过转到`Remote Config Manager`并重置其位置来创建一个新的GameObject。
- en: Then, from the `Assets\Scripts` folder and create a new C# script called `RemoteConfigManager`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从`Assets\Scripts`文件夹中创建一个新的C#脚本，命名为`RemoteConfigManager`。
- en: Attach the newly created `RemoteConfigManager` component to the `RemoteConfigManager`
    object we created in *step 1*. If all went well, your project should look similar
    to the following screenshot.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的`RemoteConfigManager`组件附加到我们在*步骤1*中创建的`RemoteConfigManager`对象上。如果一切顺利，你的项目应该看起来类似于以下截图。
- en: '![Figure 11.10: Adding RemoteConfigManager](img/B18868_11_10.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图11.10：添加RemoteConfigManager](img/B18868_11_10.jpg)'
- en: 'Figure 11.10: Adding RemoteConfigManager'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.10：添加RemoteConfigManager
- en: 'Back in the `RemoteConfigManager` script to open it with the script editor
    of your choice and replace its script with the following:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RemoteConfigManager`脚本中打开它，并用你选择的脚本编辑器替换其脚本，如下所示：
- en: '[PRE0]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the `Awake` function, we utilize the `ConfigManager.FetchConfigs` method
    in order to get the app configuration settings from the remote server. Upon completing
    the fetch operation successfully, the `ConfigManager.FetchCompleted` event is
    triggered. In this case, we added an `ApplyRemoteSettings` function, which should
    also be called when that event triggers, which we then implement.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Awake`函数中，我们使用`ConfigManager.FetchConfigs`方法从远程服务器获取应用程序配置设置。在成功完成获取操作后，将触发`ConfigManager.FetchCompleted`事件。在这种情况下，我们添加了一个`ApplyRemoteSettings`函数，当该事件触发时也应该调用它，然后我们实现它。
- en: 'That method takes in a `ConfigResponse` struct that represents the response
    of a `RemoteConfig` fetch. Of note is the `requestOrigin` property, which is an
    enum representing the origin point of the last retrieved configuration settings.
    It can be one of three options:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受一个`ConfigResponse`结构体，它表示`RemoteConfig`获取的响应。值得注意的是`requestOrigin`属性，它是一个枚举，表示最后检索到的配置设置的来源点。它可以是三个选项之一：
- en: '`Cached`: The config settings loaded in our current session are cached from
    a previous session, so no new configuration settings are loaded'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`缓存`：我们当前会话中加载的配置设置是从之前的会话缓存的，因此没有加载新的配置设置'
- en: '`Default`: There are no configuration settings that are loaded in the current
    session'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`默认`：当前会话中没有加载任何配置设置'
- en: '`Remote`: There are new configuration settings that were loaded from the remote
    server in the current session'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`远程`：当前会话中从远程服务器加载了新的配置设置'
- en: In our case, we only need to do something if the value is `Remote`. If this
    is the case, that means that there are new settings that have been loaded, which
    means that we need to update the values that are currently loaded.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，只有当值是`远程`时，我们才需要做些事情。如果是这种情况，这意味着已经加载了新的设置，这意味着我们需要更新当前加载的值。
- en: 'Then, we need to go to the `PlayerBehaviour` script and add the following to
    the top section with the rest of the `using` statements:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要转到`PlayerBehaviour`脚本，并将以下内容添加到顶部部分，与其余的`using`语句一起：
- en: '[PRE1]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Afterward, we need to add the `UpdateRemoteConfigValues` function to the `PlayerBehaviour`
    class because it currently doesn’t exist; otherwise, we will get a compiler error:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要将`UpdateRemoteConfigValues`函数添加到`PlayerBehaviour`类中，因为它目前不存在；否则，我们将得到编译器错误：
- en: '[PRE2]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, we are using the `appConfig` property of `ConfigManager`, which
    is the `RuntimeConfig` object, allowing us to access the current values as they
    are currently set from the cloud for our environment(s). Then, we set the current
    values of our `rollSpeed` and `dodgeSpeed` variables to the values that we retrieved
    from the cloud.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用`ConfigManager`的`appConfig`属性，即`RuntimeConfig`对象，允许我们访问从云中获取的当前值，这些值是我们环境（s）当前设置的。然后，我们将`rollSpeed`和`dodgeSpeed`变量的当前值设置为从云中检索到的值。
- en: 'For more information on the `ConfigManager` class, check out the following:
    [https://docs.unity3d.com/Packages/com.unity.remote-config@0.3/api/Unity.RemoteConfig.ConfigManager.htm](https://docs.unity3d.com/Packages/com.unity.remote-config@0.3/api/Unity.RemoteConfig.ConfigManager.html)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`ConfigManager`类的更多信息，请查看以下内容：[https://docs.unity3d.com/Packages/com.unity.remote-config@0.3/api/Unity.RemoteConfig.ConfigManager.htm](https://docs.unity3d.com/Packages/com.unity.remote-config@0.3/api/Unity.RemoteConfig.ConfigManager.html)
- en: Save both scripts and return to the Unity Editor. Then, go to the **Hierarchy**
    window, select **Remote Config Manager**, and from the **Inspector** window, assign
    the **Player Behaviour** value to the **Player** object.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存两个脚本并返回到Unity编辑器。然后，转到**层次结构**窗口，选择**远程配置管理器**，并在**检查器**窗口中，将**玩家行为**值分配给**玩家**对象。
- en: '![Figure 11.11: Adding Player Behaviour](img/B18868_11_11.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图11.11：添加玩家行为](img/B18868_11_11.jpg)'
- en: 'Figure 11.11: Adding Player Behaviour'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.11：添加玩家行为
- en: 'Upon playing the game, you should be able to see in the `Debug.Log` statement
    being called, telling us that the value is being updated to whatever we placed
    in **Remote Config**:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游戏开始后，你应该能在`Debug.Log`语句中看到，它告诉我们值正在更新为我们在**远程配置**中放置的内容：
- en: '![Figure 11.12: Values are updating correctly](img/B18868_11_12.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图11.12：值更新正确](img/B18868_11_12.jpg)'
- en: 'Figure 11.12: Values are updating correctly'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.12：值更新正确
- en: 'Since the `dodgeSpeed` and `rollSpeed` variables are now being set via the
    `UpdateRemoteConfigValues` function, we can now hide them from the `PlayerBehaviour`
    script so that the class looks as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`dodgeSpeed`和`rollSpeed`变量现在是通过`UpdateRemoteConfigValues`函数设置的，因此我们现在可以将它们从`PlayerBehaviour`脚本中隐藏起来，使类看起来如下所示：
- en: '[PRE3]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we’ve modified the two properties, adding the `[HideInInspector]` tag,
    which will hide the item in the **Inspector** window. We’ve also changed the variables
    to use XML comments instead of tooltips, since they are no longer being displayed
    in the **Inspector** window.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们修改了两个属性，添加了`[HideInInspector]`标签，这将隐藏项目在**检查器**窗口中。我们还更改了变量，使用XML注释而不是工具提示，因为它们不再在**检查器**窗口中显示。
- en: 'Save the script and select the **Player** object. From there, go to the **Inspector**
    window and note that the properties are no longer visible in the **PlayerBehaviour**
    component:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并选择**玩家**对象。从那里，转到**检查器**窗口，注意属性在**PlayerBehaviour**组件中不再可见：
- en: '![Figure 11.13: Values are hidden in the Inspector window](img/B18868_11_13.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图11.13：值在检查器窗口中隐藏](img/B18868_11_13.jpg)'
- en: 'Figure 11.13: Values are hidden in the Inspector window'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.13：值在检查器窗口中隐藏
- en: Now, the values will be set through the **Remote Config** component, and users
    won’t be confused about why their values are being replaced by what’s in **Player
    Behaviour**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，值将通过**远程配置**组件设置，用户不会对为什么他们的值被**玩家行为**中的内容所替换感到困惑。
- en: Being able to tweak these values while the game is live can be incredibly useful
    and allows you to share changes to the game without requiring your users to download
    a new version!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏运行时调整这些值可以非常实用，并允许你分享游戏更改，而无需要求用户下载新版本！
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how we can use **Remote Config** to make adjustments
    to our games on the fly.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用**远程配置**来实时调整我们的游戏。
- en: Important note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There’s a lot more that you can do with Remote Settings. You can learn more
    about **Remote Config** and how to use it to work with non-default parameters
    at [https://docs.unity3d.com/Manual/UnityAnalyticsRemoteSettingsComponent.html](https://docs.unity3d.com/Manual/UnityAnalyticsRemoteSettingsComponent.html).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用远程设置做更多的事情。你可以了解更多关于**远程配置**以及如何使用它来处理非默认参数的信息，请参阅[https://docs.unity3d.com/Manual/UnityAnalyticsRemoteSettingsComponent.html](https://docs.unity3d.com/Manual/UnityAnalyticsRemoteSettingsComponent.html)。
- en: With this, we have all of the implementation details of our game complete, but
    our game right now is pretty bare. In the next chapter, we will look into ways
    to make our game more polished, using features such as particle systems and screen
    shake.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们游戏的所有实现细节都已经完成，但现在的游戏相当简陋。在下一章中，我们将探讨使用粒子系统、屏幕震动等特性来使我们的游戏更加精致的方法。
