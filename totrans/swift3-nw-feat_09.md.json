["```swift\n<command> [<subcommand>...] [--<option> [<option-value>]]... [argument]...\n\n```", "```swift\n(lldb) breakpoint set -n speakToMe\n\n```", "```swift\n(lldb) help\n\n```", "```swift\n (lldb) help breakpoint \n(lldb) help breakpoint set\n\n```", "```swift\n4> func sayHello(){ \n  5\\.     print(\"Hi\") \n  6\\. } \n  7> sayHello() \nHi \n  8> :breakpoint set --name sayHello \nBreakpoint 1: where = $__lldb_expr5`__lldb_expr_4.sayHello () -> () + 4 at repl.swift:5, address = 0x00000001005c6064 \n\n```", "```swift\n(lldb) breakpoint list \nCurrent breakpoints: \n1: name = 'sayHello', locations = 1, resolved = 1, hit count = 1 \n  1.1: where = $__lldb_expr5`__lldb_expr_4.sayHello () -> () + 4 at repl.swift:5, address = 0x00000001005c6064, resolved, hit count = 1 \n\n```", "```swift\n-D ( --dummy-breakpoints ) : Sets Dummy breakpoints \n\n-T <thread-name> ( --thread-name <thread-name> ) The breakpoint stops only for the thread whose thread name matches this argument. \n\n-c <expr> ( --condition <expr> ) The breakpoint stops only if this condition expression evaluates to true. \n\n-d ( --disable ) Disable the breakpoint. \n\n-e ( --enable )Enable the breakpoint. \n\n-i <count> ( --ignore-count <count> ) Set the number of times this breakpoint is skipped before stopping. \n\n-o <boolean> ( --one-shot <boolean> ) The breakpoint is deleted the first time it stop causes a stop. \n\n-q <queue-name> ( --queue-name <queue-name> ) The breakpoint stops only for threads in the queue whose name is given by this argument. \n\n-t <thread-id> ( --thread-id <thread-id> ) The breakpoint stops only for the thread whose TID matches this argument. \n\n-x <thread-index> ( --thread-index <thread-index> ) The breakpoint stops only for the thread whose index matches this argument. \n\n```", "```swift\n(lldb) breakpoint enable 1.1 \n1 breakpoint enabled. \n\n(lldb) breakpoint disable 1.1 \n1 breakpoint disabled. \n\n```", "```swift\n(lldb) breakpoint delete 1.1 \n\n```"]