["```java\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.5.0'\n        classpath 'com.google.gms:google-services:1.5.0-beta2'\n    }\n}\n..\n```", "```java\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion \"21.1.1\"\n    defaultConfig {\n        applicationId \"com.packpublishing.asynchronousandroid\"\n        minSdkVersion 9\n        targetSdkVersion 23\n    }    \n}\ndependencies {\n  ...\n  compile 'com.google.android.gms:play-services-gcm:8.3.0'\n}\napply plugin: 'com.google.gms.google-services'\n```", "```java\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<!-- Required to wakeup the device and deliver messages --> \n<uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n\n<permission android:name=\"<Package>.permission.C2D_MESSAGE\"\n        android:protectionLevel=\"signature\"/>\n<uses-permission android:name=\"<Package>.permission.C2D_MESSAGE\"/>\n   ...\n</manifest>\n```", "```java\n<receiver\n  android:name=\"com.google.android.gms.gcm.GcmReceiver\"\n  android:exported=\"true\"\n  android:permission=\"com.google.android.c2dm.permission.SEND\" >\n  <intent-filter>\n      <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" />\n      <category android:name=\"<Package>\" />\n  </intent-filter>\n</receiver>\n```", "```java\n  <service android:name=\".chapter10.RegistrationIntentService\"\n           android:exported=\"false\">\n  </service>\n```", "```java\npublic class RegistrationIntentService extends IntentService {\n\n  @Override\n  protected void onHandleIntent(Intent intent) {\n\n    SharedPreferences sharedPreferences = PreferenceManager.\n      getDefaultSharedPreferences(this);\n\n    try {\n      // Get the InstanceID Singleton\n      InstanceID instanceID = InstanceID.getInstance(this);\n\n      Log.i(TAG, \"\\n-----------------------------------------\\n\" +\n                 \" GCM App instance UUID: \" + instanceID.getId() +\n                 \"\\n-----------------------------------------\\n\"\n            );\n\n      // Retrieve the Sender Id from GCM Registration\n      String senderId = getString(R.string.gcm_defaultSenderId);\n\n      // Retrieve a token with a sender ID\n      String token = instanceID.getToken(senderId, \n       GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);\n\n      // Save the Registration to the server\n      sendRegistrationToServer(token);\n\n   sharedPreferences.edit().\n     putBoolean(MyChatActivity.SENT_TOKEN_TO_SERVER, true).\n       apply();\n\n    } catch (Exception e) {\n      Log.d(TAG, \"Failed to get registration token\", e);\n   sharedPreferences.edit().\n     putBoolean(MyChatActivity.SENT_TOKEN_TO_SERVER, false).\n       apply();    \n    }\n  }\n}\n```", "```java\n  private void sendRegistrationToServer(String token) {       \n    Log.i(TAG, \" GCM Registration Token: \" + token );\n  }\n```", "```java\n<service\n  android:name=\".chapter10.MyInstanceIDListenerService\"\n  android:exported=\"false\">\n  <intent-filter>\n   <action android:name=\"com.google.android.gms.iid.InstanceID\" />\n  </intent-filter>\n</service>\n\npublic class MyInstanceIDListenerService \n   extends InstanceIDListenerService {\n   @Override\n   public void onTokenRefresh() { \n     // Starts the Registration Service to obtain a new token\n     Intent intent = new Intent(this, \n                                   RegistrationIntentService.class);\n     startService(intent);     \n     sharedPreferences.edit().\n     putBoolean(MessagingActivity.SENT_TOKEN_TO_SERVER, false).\n     apply();    \n   }\n}\n```", "```java\nvoid  deleteInstanceID()\nvoid  deleteToken(String authorizedEntity, String scope)\n```", "```java\npublic class NotificationGCMHandler extends GcmListenerService {\n\n  public static final int NOTIFICATION_ID =\"GCMNotification\".\n                                            hashCode();\n\n  @Override\n  public void onMessageReceived(String from, Bundle data) {\n\n    String msgType = data.getString(\"type\");\n\n    // Notification Message received from GCM.\n    if ( msgType.startsWith(\"my_notifications\") ) {\n      createNotification(data.getString(\"title\"),\n                         data.getString(\"body\"));\n    }\n  }\n  private void createNotification(String title, String body) {   \n   // Elided for brevity...\n }  \n  }\n```", "```java\n  <service android:name=\".chapter10.NotificationGCMHandler\"\n           android:exported=\"false\" >\n     <intent-filter>\n        <action \n        android:name=\"com.google.android.c2dm.intent.RECEIVE\"/>\n     </intent-filter>\n  </service>\n```", "```java\npublic class MyChatActivity extends Activity {\n  public static final String SENT_TOKEN_TO_SERVER = \"sent2Server\";\n  private final static int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    if (checkPlayServices()) {\n      Log.i(LOG_TAG, \"Registering to GCM\");\n      SharedPreferences sharedPref = PreferenceManager.\n                                     getDefaultSharedPreferences(this);\n      // Registering is started when there is no available token\n      boolean sentToken = sharedPref.\n                          getBoolean(SENT_TOKEN_TO_SERVER, false);\n      if (!sentToken) {\n        //...Print an error\n      }\n      Intent int = new Intent(this, RegistrationIntentService.\n                              class);\n      startService(int);\n    }\n  }\n}\n```", "```java\nprivate boolean checkPlayServices() {\n\n  // Returns the singleton instance of GoogleApiAvailability.\n  GoogleApiAvailability apiAvailability = GoogleApiAvailability.\n                                          getInstance();\n  // Verify if the Google Play Service installed is \n  // installed and compatible with GCM Library used\n  int rc = apiAvailability.isGooglePlayServicesAvailable(this);\n  if ( rc != ConnectionResult.SUCCESS ) {\n\n    // The error can be resolved with a user action\n    if (apiAvailability.isUserResolvableError(rc)) {\n\n      // Shows a user action dialog to resolve the issue\n      apiAvailability.getErrorDialog(this, \n        rc,PLAY_SERVICES_RESOLUTION_REQUEST).show();\n    } else {\n      Log.i(TAG, \"This device is not supported.\");\n     // Finishing the Activiy\n      finish();\n    }\n    return false;\n  }\n  return true;\n}\n```", "```java\nI ...:  GCM Application Instance Identifier: <InstanceId>\nI ...:  GCM Registration Token: <Registration Token>\n```", "```java\n{\n  \"data\": {\n    \"title\": \"Hello from GCM\",\n    \"body\": \"Hello from your fake server\",\n    \"type\": \"my_notifications\"\n   },\n   \"to\": \"<DeviceRegistrationToken>\"\n}\n```", "```java\n$ curl --request POST \\\n    --url https://gcm-http.googleapis.com/gcm/send \\\n    --header 'authorization: key=<Server API Key>' \\\n    --header 'Content-Type: application/json' \\\n    --data '{\"data\":{\"title\":\"Hello from GCM\",\"body\":\"Hello from   \n   your fake server\",\"type\":\"notification\"},\n            \"to\":\"<DeviceRegistrationToken>\"}'\n```", "```java\n{\n  \"multicast_id\": 6425212369847183592,\n  \"success\": 1,\n  \"failure\": 0,\n  \"canonical_ids\": 0,\n  \"results\": [{\n    \"message_id\": \"0:1456441876781708%69ee9872f9fd7ecd\"\n  }]\n}\n```", "```java\n      /topics/[a-zA-Z0-9-_.~%]+\n```", "```java\npublic class RegistrationIntentService extends IntentService {\n\n  private static final String TOPIC_NAME = \"forum\";\n\n  @Override\n  protected void onHandleIntent(Intent intent) {\n    ...\n    // Retrieve the token\n    String token = instanceID.getToken(senderId, \n        GoogleCloudMessaging.INSTANCE_ID_SCOPE,null);\n    ...\n    // Subscribe to Topics\n    subscribeTopics(token);\n  }\n\n  private void subscribeTopics(String token) {\n    GcmPubSub pubSub = GcmPubSub.getInstance(this);\n    try {\n         pubSub.subscribe(token, \"/topics/ \" + TOPIC_NAME, null);\n    } catch (Exception e) {\n        Log.e(TAG, \"Failed to subscribe to \" + TOPIC_NAME, e);\n    }\n  ...\n}\n```", "```java\n{ \n  \"to\": \"/topics/forum\",\n  \"data\": {\n    \"username\": \"heldervasc\",\n    \"text\": \"I need to learn more about Android Development\"\n  }\n}\n```", "```java\npublic class NotificationGCMHandler extends GcmListenerService {\n\n  public static final String FORUM_TOPIC = \"/topics/forum\";\n  public static final String USERNAME_KEY = \"username\";\n  public static final String TEXT_KEY = \"text\";\n  public static final String MSG_DELIVERY = \"asyncforum\";\n\n  @Override\n  public void onMessageReceived(String from, Bundle data) {\n\n       // Verify if it is a forum message\n    if (from.equals(FORUM_TOPIC)) {\n\n     // Build an intent from the forum topic message. \n      Intent intent = new Intent(MSG_DELIVERY);\n      intent.putExtra(USERNAME_KEY, data.getString(USERNAME_KEY));\n      intent.putExtra(TEXT_KEY, data.getString(TEXT_KEY));\n\n\t  // Broadcast the intent to local interested objects\n     LocalBroadcastManager.\n       getInstance(this).sendBroadcast(intent);\n    } else ... {\n      ...\n    }\n  }â€©}\n```", "```java\npublic class MessagingActivity extends Activity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.chat_layout);\n    if (checkPlayServices()) {\n     ...    \n    }\n  }   \n}\n```", "```java\npublic class MessagingActivity extends Activity {\n     ...\n  @Override\n  protected void onResume() {\n    super.onResume();\n\n    // Create an intent filter to receive forum Intents\n    IntentFilter filter = new IntentFilter(\n      NotificationGCMHandler.MSG_DELIVERY);\n\n    // Register the local Receive to receive the Intents\n    LocalBroadcastManager.getInstance(this).\n      registerReceiver(onMessageReceiver, filter);\n  }\n\n  @Override\n  protected void onPause() {\n    super.onPause();\n    // Unregister the Local Receiver\n    LocalBroadcastManager.getInstance(this).\n      unregisterReceiver(onMessageReceiver);\n  }\n}\n```", "```java\nBroadcastReceiver onMessageReceiver = new BroadcastReceiver(){\n\n  @Override\n  public void onReceive(Context context, Intent intent) {\n\n      TextView chatText = (TextView)findViewById(R.id.chatWindow);\n      String username = intent.getStringExtra(\"username\");\n      String bodyText = intent.getStringExtra(\"text\");\n      String line = String.format(\"%s : %s%n\", username,bodyText)\n      // Prepend the message \n      chatText.setText( line + chatText.getText().toString());\n  }\n};\n```", "```java\ncurl --request POST  \\\n--url \"https://gcm-http.googleapis.com/gcm/send\" \\\n--header 'authorization: <SERVER_API_KEY>'  \\\n--header 'Content-Type: application/json'  \\\n--data '{ \"data\": {  \n        \"username\": \"heldervasc\",\n        \"text\": \"Welcome to Asynchronous Android group chat\"\n     },       \n    \"to\": \"/topics/forum\"\n   }'\n```", "```java\nprivate static final String SENDER_ID = \"<YOUR_SENDER_ID>\"; \nprivate static final String SERVER_KEY = \"<SERVER_KEY>\";\n```", "```java\npublic abstract class AsyncJob \n  extends AsyncTask<Void, Void, Result<Void> > {\n\n  @Override\n  protected Result<Void> doInBackground(Void ...args) {\n    Result<Void> result = new Result<Void>();\n    try { runOnBackground() } \n    catch (Throwable e)  { result.error = e; }\n    return result;\n  }\n  @Override\n  protected void onPostExecute(Result<Void> result) {\n    if ( result.error != null ) { onFailure(result.error);} \n    else { onSuccess();}\n  }\n  // Backrgound Execution Task\n  abstract void runOnBackground() throws Exception;\n  // Error Callback\n  abstract void onFailure(Throwable e);\n  // Success Function\n  abstract void onSuccess();\n}\n```", "```java\nOnClickListener sendListener = new OnClickListener() {\n\n  @Override\n  public void onClick(View v) {\n\n    TextView msgText = (TextView) findViewById(R.id.msg);\n    final String msgToSend = msgText.getText().toString();\n    msgText.setText(\"\");\n\n    new AsyncJob() {\n      @Override\n      void runOnBackground() throws Exception {\n\n        // Build the data Bundle wit our key/value pairs\n        Bundle data = new Bundle();\n        data.putString(USERNAME_KEY, \"Helder\");\n        data.putString(EXT_KEY, msgToSend);\n        data.putString(\"topic\", NotificationGCMHandler.\n                                FORUM_TOPIC);\n        // Generate a random message Id\n        String id = Integer.toString(new Random().nextInt());\n\n       // Get the GCMMessaging instance\n        GoogleCloudMessaging gcm = GoogleCloudMessaging.\n          getInstance(MessagingActivity.this);\n\n        // Sends the Message to the GCM platform\n        gcm.send(getString(R.string.gcm_SenderId) + \n                 \"@gcm.googleapis.com\", id, data);\n      }\n      @Override\n      void onFailure(Throwable e) {\n//â€¦ Handle the exception\nLog.e(TAG,\"Failed to send upstream message to forum\",e);\n      }\n      @Override\n      void onSuccess() {\n        //.. No Exception thrown \n}\n    }.execute();\n  }\n};\n```", "```java\nvoid send (String to, String msgId, long timeToLive, Bundle data)\n```", "```java\n    void onMessageSent(String msgId) \n    void onSendError(String msgId, String error)\n```", "```java\npublic class NotificationGCMHandler extends GcmListenerService {\n       ...\n    @Override\n    public void onMessageSent(String msgId) {\n        super.onMessageSent(msgId);\n        Log.i(TAG, \"Message w/ id=\"+msgId+\" send to GCM Server \");\n    }\n\n    @Override\n    public void onSendError(String msgId, String error) {\n        super.onSendError(msgId, error);\n        Log.e(TAG, \"Message w/ id=\" + msgId + \n                   \" send failed with error \"+error);\n    }\n}\n```", "```java\n<service\n  android:name=\".chapter10.MyBackupService\"\n  android:exported=\"true\"\nandroid:permission=\"com.google.android.gms.permission.BIND_NETWORK_TASK_SERVICE\">\n  <intent-filter>\n    <action \n   android:name=\"com.google.android.gms.gcm.ACTION_TASK_READY\"/>\n  </intent-filter>\n</service>\n```", "```java\npublic class AccountSettingsActivity extends Activity {\n\n  public static final String TASK_BACKUP = \"backup\";\n\n  public static long FOUR_HOUR = 3600*4L;\n\n  // Executed when the user taps on save button\n  OnClickListener listener = new OnClickListener() {\n\n    @Override\n    public void onClick(View v) {\n      // Store the details on the default shared preferences file\n      ...\n\t   // Obtain a GCM NM Instance \n      GcmNetworkManager gcmNM = GcmNetworkManager.\n        getInstance(AccountSettingsActivity.this);      \n      OneoffTask task = new OneoffTask.Builder()\n        // Sets the Service to start\n        .setService(MyBackupService.class)\n        // Task Identifier\n        .setTag(TASK_BACKUP)\n           // Will run in the next 4 hours      \n        .setExecutionWindow(0L, FOUR_HOUR)\n        // Requires WIFI Network\n        .setRequiredNetwork(Task.NETWORK_STATE_UNMETERED)\n        // Requires Charging\n        .setRequiresCharging(true)\n           .build();\n\n      gcmNM.schedule(task);\n    }\n  };\n}\n```", "```java\nint onRunTask(TaskParams args);\n```", "```java\npublic class MyBackupService extends GcmTaskService {\n\n  @Override\n  public int onRunTask(TaskParams taskParams) {\n    Log.i(TAG, \"Backing up the account settings\");\n    try {\n\n      // Obtain the default Shared preference object\n      SharedPreferences sp =PreferenceManager.\n        getDefaultSharedPreferences(this);\n\n      // Builds the upstream data bundle\n      Bundle data = new Bundle();\n      data.putString(FIRST_NAME, sp.getString(FIRST_NAME, \"\"));\n      data.putString(LAST_NAME,sp.getString(LAST_NAME, \"\"));\n      data.putString(AGE, sp.getString(AGE, \"\"));\n\n      // Specify the resource to update (Optional)\n      data.putString(\"resource\",\"/account\");\n      data.putString(\"operation\",\"update\");\n\n      String msgId = Integer.toString(new Random().nextInt());\n      GoogleCloudMessaging gcm = GoogleCloudMessaging.\n        getInstance(MyBackupService.this);\n      gcm.send( SENDER_ID + \"@gcm.googleapis.com\", msgId, data);\n    } catch (IOException e) {\n      Log.e(TAG, \"Failed to backup account\", e);\n      return GcmNetworkManager.RESULT_RESCHEDULE;\n    }\n    return GcmNetworkManager.RESULT_SUCCESS;\n  }\n}\n```"]