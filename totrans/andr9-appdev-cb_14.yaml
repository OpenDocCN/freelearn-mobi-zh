- en: Location and Using Geofencing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to get the device location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving problems reported with the `GoogleApiClient` `OnConnectionFailedListener`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and monitoring a Geofence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Location awareness offers many benefits to an app, so many in fact that even
    desktop apps now attempt to get the user's location. Location uses ranges from
    turn-by-turn directions, "find the nearest" applications, alerts based on location,
    and there are now even location-based games that get you out exploring with your
    device.
  prefs: []
  type: TYPE_NORMAL
- en: The Google APIs offer many rich features for creating location-aware applications
    and mapping features. Our first recipe will look at obtaining the last known location
    on the device along with receiving updates as the location changes. If you are
    requesting location updates for a proximity location, take a look at using the
    Geofence option instead in the *Create and monitor a Geofence* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: All the recipes in this chapter use the Google Libraries. If you have not already
    downloaded the SDK Packages, follow the instructions from Google.
  prefs: []
  type: TYPE_NORMAL
- en: Add SDK Packages from [http://developer.android.com/sdk/installing/adding-packages.html](http://developer.android.com/sdk/installing/adding-packages.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have the location, there''s a good chance you''ll want to map
    it as well. This is another area where Google makes this very easy on Android
    using the Google Maps API. When working with Google Maps, take a look at the Google
    Maps Activity option when creating a new project in Android Studio. Instead of
    selecting Empty Activity, as we normally do for these recipes, choose Google Maps
    Activity, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b640cd9c-d765-4293-b587-5bea1f5c7110.png)'
  prefs: []
  type: TYPE_IMG
- en: How to get the device location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This first recipe will show you how to get the last known location. If you've
    worked with the Google Location APIs in the past, then you may notice things have
    changed. This recipe shows you the latest API for getting both the last location
    and updates as the location changes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `GetLocation`. Use the default
    Phone & Tablet options, and select Empty Activity when prompted for Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''ll add the necessary permissions to the Android Manifest, then we''ll
    modify the `TextView` element to include an ID. Finally, we''ll add a method to
    receive the last known location callback. Open the Android Manifest and follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Under the Gradle Scripts section, open the build.gradle (Module: app) file,
    as shown in this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0007bab5-d893-4324-9909-477d610f6440.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following statement to the `dependencies` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `activity_main.xml` and update the existing `TextView` with the following
    XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '6\. Create the `getLocation()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 7. You're ready to run the application on a device or emulator.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This code example uses the latest version (12.0.1, as of this writing) of the
    Google Play service's `getLastLocation()` method. If you've ever used it in the
    past, you may notice significant changes in how this API works. It's actually
    much simpler now as all we have to do is call the `getFusedLocationProviderClient()`
    and pass our listener. Make sure we check the location in the callback to make
    sure it's not null. (There are several scenarios that can result in a null location,
    such as the device not having a location yet, the user disabled the location feature,
    and factory reset.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The accuracy of the location object we receive is based on our permission setting.
    We used `ACCESS_COARSE_LOCATION`, but if we want higher accuracy, we can request `ACCESS_FINE_LOCATION`
    instead, with the following permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to check for the appropriate permission in the `checkSelfPermission()`
    call.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, to keep the code focused on the Location feature, we just do a simple
    permission check. In a production application, you should check and request permission
    as shown in *The Android 6.0 Runtime Permission Model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml),
    *Getting Your App Ready for the Play Store.*
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing the location can be a challenge since it's difficult to actually move
    the device when testing and debugging. Fortunately, we have the ability to simulate
    GPS data with the emulator. (It is possible to create mock locations on a physical
    device as well, but that's not as easy.)
  prefs: []
  type: TYPE_NORMAL
- en: Mock locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several ways to simulate locations with the emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: Location setting through the emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Geo` command through the ADB shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To set a mock location in the emulator, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the more options button (the one with ... at the bottom of the emulator
    control options)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Location tab in the device window
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the GPS coordinates in the Longitude and Latitude boxes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s a screenshot showing the Location tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f876152f-a34e-4e64-9d68-84f1bb91267f.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that simulating the location works by sending GPS data. Therefore, for
    your app to receive the mock location, it will need to be receiving GPS data.
    Testing `lastLocation()` may not send the mock GPS data since it doesn't rely
    solely on the GPS for determining the device location. Try the mock location with
    the *How to get the device location* recipe where we can request the priority.
    (We can't force the system to use any specific location sensor, we can only make
    a request. The system will choose the optimum solution to deliver the results.)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The new Android 6.0 run-time permission model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml),
    *Getting Your App Ready for the Play Store*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Setting up Google Play Services: [https://developers.google.com/android/guides/setup](https://developers.google.com/android/guides/setup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FusedLocationProviderClient interface: [https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderClient](https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderClient)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving problems reported with the GoogleApiClient OnConnectionFailedListener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the constantly changing nature of Google APIs, your users are likely to
    attempt to use your application, but not be able to because their files are out
    of date. We can use the `GoogleApiAvailability` library to display a dialog to
    help the user resolve the problem.
  prefs: []
  type: TYPE_NORMAL
- en: We'll continue with the previous recipe and add code to the `onConnectionFailed()`
    callback. We'll use the error result to display additional information to the
    user to resolve their problem.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `HandleGoogleAPIError`. Use
    the default Phone & Tablet options, and select Empty Activity when prompted for Activity
    Type. Once you've created the project, add the Google Play library reference to
    the project dependencies. (See the previous recipe steps.)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step for this recipe is to add the Google Play Services library to
    the project. From there, we''ll create the classes to handle the Google Client
    callbacks and use toasts to give feedback. To start, open the build.gradle (Module:
    app) file and follow these steps (if you''re not sure which file to open, see
    the screenshot in the previous recipe steps):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following statement to the `dependencies` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `ActivityMain.java` and add the following lines to the global class variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following two classes to handle the callbacks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to the MainActivity class to show the Google API error
    dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to override `onActivityResult()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method to set up the `GoogleApiClient`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add this line of code to the end of the existing `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the code here is standard setup for the `GoogleApiClient` with the main
    addition of setting up the `OnConnectionFailedListener` callback. This is where
    the app goes from simply failing, to actually helping the end user get it working.
    Fortunately for us, Google does most of the work for us by checking the conditions
    that are causing it to fail, as well as presenting the UI to the user. We just
    have to make sure to check the status Google reports back to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `GoogleAPIClient` uses the `connectionResult` to indicate possible courses
    of action. We can call the `hasResolution()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If the response is `true`, then it's something the user can resolve, such as
    enabling the location service. If the response is `false`, we get an instance
    of the `GoogleApiAvailability` and call the `getErrorDialog()` method. When finished,
    our `onActivityResult()` callback is called, where we reset `mResolvingError`
    and, if successful, attempt to reconnect.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have a device with an older Google API for testing, you can try
    testing on an emulator with an older Google API version.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your application is using fragments, you can get a dialog fragment instead,
    using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Accessing Google APIs: [https://developers.google.com/android/guides/api-client](https://developers.google.com/android/guides/api-client)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and monitoring a Geofence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your application needs to know when the user enters or exits a certain location,
    there''s an alternative to continuously checking the user location: Geofencing.
    A Geofence is a location (latitude and longitude) along with a radius. You can
    create a Geofence and let the system notify you when the user enters the location
    proximity you specified. (Android currently allows up to 100 Geofences per user.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Geofence properties include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Location**: The longitude and latitude'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radius**: The size of the circle (in meters)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Loitering delay: How long the user may remain within the radius before sending
    notifications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expiration**: How long until the Geofence automatically expires'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transition** **type**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GEOFENCE_TRANSITION_ENTER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GEOFENCE_TRANSITION_EXIT`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INITIAL_TRIGGER_DWELL`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe will show you how to create a Geofence object and use it to create
    an instance of `GeofencingRequest`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and call it `Geofence`. Use the default
    Phone & Tablet options and select Empty Activity when prompted for Activity Type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We won''t need a layout for this recipe as we''ll use Toasts and Notifications
    for the user interaction. We will need to create an additional Java class for
    `IntentService`, which handles the Geofence alerts. Open the Android Manifest
    and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `build.gradle (Module: app)` file and add the following statement
    to the `dependencies` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Java class called `GeofenceIntentService` and extend the `IntentService`
    class. The declaration will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `onHandleIntent()` to receive the Geofence alert:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the Android manifest and add the following within the `<application>`
    element, at the same level as the `<activity>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `MainActivity.java` and add the following global variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `PendingIntent` with the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Geofence item with the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Geofence Request with the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the existing `onCreate()` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You're ready to run the application on a device or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we add `ACCESS_FINE_LOCATION` permission as this is required for Geofencing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can call the `GeofencingApi.addGeofences()` method, we have to prepare
    two objects:'
  prefs: []
  type: TYPE_NORMAL
- en: Geofence Request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geofence Pending Intent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create the Geofence Request, we use the `GeofencingRequest.Builder`. The
    builder requires the list of Geofence objects, which are created in the `createGeofenceList()`
    method. (Even though we are only creating a single Geofence object, the builder
    requires a list, so we just add our single Geofence to an `ArrayList`.) Here is
    where we set the Geofence properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Only the Loitering delay is optional, but we need it since we are using the
    `DWELL` transition. When calling `setTransitionTypes()`, we can combine multiple
    transition types using the `OR` operator (using the pipe character). Here''s an
    example using `ENTER` and `EXIT` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: For this example, we used the same default latitude and longitude as the emulator.
    Change these values as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Our call to `Geofence.Builder()` creates the Geofence object. With the Geofence
    list ready, we call the `GeofencingRequest.Builder` and set our initial trigger
    to `INITIAL_TRIGGER_DWELL`. (If you change the preceding transition types, you
    may want to change the initial trigger as well or the creation of our Geofence
    may fail.)
  prefs: []
  type: TYPE_NORMAL
- en: The second object we need is a Pending Intent, which is how the system will
    notify our app when the Geofence criteria are met. (Strictly speaking, the Intent
    service is not required and if your app will only be monitoring Geofence responses
    while in the foreground, you may not even need it.) Our example displays a toast
    in response to the Geofence trigger, but this is where you would customize the
    response for your app.
  prefs: []
  type: TYPE_NORMAL
- en: With both objects created, we get a reference to `GeofencingClient` after checking
    for the proper permission. Our example only checks for the necessary permission
    so you need to manually enable location permission through the app settings. A
    production app should prompt the user as needed. (See *The Android 6.0 Runtime
    Permission Model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml), *Getting
    Your App Ready for the Play Store* for a complete example.)
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To stop receiving Geofence notifications, you can call the `removeGeofences()`
    method with either the `RequestID` parameter or `PendingIntent`. The following
    example uses the same `PendingIntent` method we used for the notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `GeofencingClient` class at: [https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingClient](https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingClient)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Geofence.Builder` class at: [https://developers.google.com/android/reference/com/google/android/gms/location/Geofence.Builder.html](https://developers.google.com/android/reference/com/google/android/gms/location/Geofence.Builder.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `GeofencingRequest.Builder` class at: [https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingRequest.Builder](https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingRequest.Builder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
