- en: Location and Using Geofencing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置和地理围栏的使用
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to get the device location
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何获取设备位置
- en: Resolving problems reported with the `GoogleApiClient` `OnConnectionFailedListener`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决`GoogleApiClient` `OnConnectionFailedListener`报告的问题
- en: Creating and monitoring a Geofence
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和监控地理围栏
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Location awareness offers many benefits to an app, so many in fact that even
    desktop apps now attempt to get the user's location. Location uses ranges from
    turn-by-turn directions, "find the nearest" applications, alerts based on location,
    and there are now even location-based games that get you out exploring with your
    device.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 位置感知为应用程序提供了许多好处，实际上如此之多，以至于甚至桌面应用程序现在也试图获取用户的位置。位置的使用范围从路线导航，“查找最近的”应用程序，基于位置的通知，现在甚至有基于位置的游戏，让你用设备探索。
- en: The Google APIs offer many rich features for creating location-aware applications
    and mapping features. Our first recipe will look at obtaining the last known location
    on the device along with receiving updates as the location changes. If you are
    requesting location updates for a proximity location, take a look at using the
    Geofence option instead in the *Create and monitor a Geofence* recipe.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Google API提供了许多丰富的功能，用于创建具有位置感知的应用程序和地图功能。我们的第一个菜谱将探讨如何获取设备上的最后已知位置，并在位置变化时接收更新。如果你正在请求接近位置的位置更新，请查看*创建和监控地理围栏*菜谱中使用的Geofence选项。
- en: All the recipes in this chapter use the Google Libraries. If you have not already
    downloaded the SDK Packages, follow the instructions from Google.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有菜谱都使用Google库。如果你还没有下载SDK包，请按照Google的说明操作。
- en: Add SDK Packages from [http://developer.android.com/sdk/installing/adding-packages.html](http://developer.android.com/sdk/installing/adding-packages.html).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://developer.android.com/sdk/installing/adding-packages.html](http://developer.android.com/sdk/installing/adding-packages.html)添加SDK包。
- en: 'Now that you have the location, there''s a good chance you''ll want to map
    it as well. This is another area where Google makes this very easy on Android
    using the Google Maps API. When working with Google Maps, take a look at the Google
    Maps Activity option when creating a new project in Android Studio. Instead of
    selecting Empty Activity, as we normally do for these recipes, choose Google Maps
    Activity, as shown in this screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经获得了位置，很可能你还会想将其映射出来。这是Google在Android上使用Google Maps API使这一过程变得非常简单的一个领域。当与Google
    Maps一起工作时，在Android Studio中创建新项目时，请查看Google Maps Activity选项。不要选择我们通常用于这些菜谱的Empty
    Activity，而是选择Google Maps Activity，如本截图所示：
- en: '![](img/b640cd9c-d765-4293-b587-5bea1f5c7110.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b640cd9c-d765-4293-b587-5bea1f5c7110.png)'
- en: How to get the device location
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何获取设备位置
- en: This first recipe will show you how to get the last known location. If you've
    worked with the Google Location APIs in the past, then you may notice things have
    changed. This recipe shows you the latest API for getting both the last location
    and updates as the location changes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第一个菜谱将向你展示如何获取最后已知位置。如果你以前使用过Google Location API，那么你可能注意到事情已经发生了变化。这个菜谱展示了获取最后位置和位置变化时更新的最新API。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `GetLocation`. Use the default
    Phone & Tablet options, and select Empty Activity when prompted for Activity Type.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为`GetLocation`。使用默认的Phone & Tablet选项，并在提示活动类型时选择Empty
    Activity。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we''ll add the necessary permissions to the Android Manifest, then we''ll
    modify the `TextView` element to include an ID. Finally, we''ll add a method to
    receive the last known location callback. Open the Android Manifest and follow
    these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将向AndroidManifest添加必要的权限，然后我们将修改`TextView`元素以包含一个ID。最后，我们将添加一个方法来接收最后已知位置回调。打开AndroidManifest并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Under the Gradle Scripts section, open the build.gradle (Module: app) file,
    as shown in this screenshot:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在Gradle脚本部分，打开build.gradle (Module: app)文件，如本截图所示：'
- en: '![](img/0007bab5-d893-4324-9909-477d610f6440.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0007bab5-d893-4324-9909-477d610f6440.png)'
- en: 'Add the following statement to the `dependencies` section:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`dependencies`部分添加以下语句：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open `activity_main.xml` and update the existing `TextView` with the following
    XML:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，并使用以下XML更新现有的`TextView`：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的`onCreate()`方法中：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '6\. Create the `getLocation()` method as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 创建`getLocation()`方法如下：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 7. You're ready to run the application on a device or emulator.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 7. 您已准备好在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This code example uses the latest version (12.0.1, as of this writing) of the
    Google Play service's `getLastLocation()` method. If you've ever used it in the
    past, you may notice significant changes in how this API works. It's actually
    much simpler now as all we have to do is call the `getFusedLocationProviderClient()`
    and pass our listener. Make sure we check the location in the callback to make
    sure it's not null. (There are several scenarios that can result in a null location,
    such as the device not having a location yet, the user disabled the location feature,
    and factory reset.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码示例使用了Google Play服务`getLastLocation()`方法的最新版本（12.0.1，截至本文撰写时）。如果您以前使用过它，您可能会注意到API工作方式的一些重大变化。实际上，现在它变得更简单了，因为我们只需要调用`getFusedLocationProviderClient()`并传递我们的监听器。确保我们在回调中检查位置，以确保它不是null。（有几种情况会导致null位置，例如设备尚未定位，用户禁用了位置功能，或者进行了出厂重置。）
- en: 'The accuracy of the location object we receive is based on our permission setting.
    We used `ACCESS_COARSE_LOCATION`, but if we want higher accuracy, we can request `ACCESS_FINE_LOCATION`
    instead, with the following permission:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到的位置对象精度基于我们的权限设置。我们使用了`ACCESS_COARSE_LOCATION`，但如果我们想要更高的精度，我们可以请求`ACCESS_FINE_LOCATION`，以下是需要此权限：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Make sure to check for the appropriate permission in the `checkSelfPermission()`
    call.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在`checkSelfPermission()`调用中检查适当的权限。
- en: Lastly, to keep the code focused on the Location feature, we just do a simple
    permission check. In a production application, you should check and request permission
    as shown in *The Android 6.0 Runtime Permission Model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml),
    *Getting Your App Ready for the Play Store.*
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了使代码专注于位置功能，我们只进行简单的权限检查。在生产应用中，您应该像在第15章“为Play商店准备您的应用”中的*“Android 6.0运行时权限模型”配方*中所示那样检查和请求权限。
- en: There's more...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Testing the location can be a challenge since it's difficult to actually move
    the device when testing and debugging. Fortunately, we have the ability to simulate
    GPS data with the emulator. (It is possible to create mock locations on a physical
    device as well, but that's not as easy.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 测试位置可能是一个挑战，因为在测试和调试时很难实际移动设备。幸运的是，我们有能力使用模拟器模拟GPS数据。（在物理设备上创建模拟位置也是可能的，但这并不容易。）
- en: Mock locations
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟位置
- en: 'There are several ways to simulate locations with the emulator:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模拟器模拟位置有几种方法：
- en: Location setting through the emulator
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过模拟器设置位置设置
- en: The `Geo` command through the ADB shell
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ADB shell的`Geo`命令
- en: 'To set a mock location in the emulator, follow these steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要在模拟器中设置模拟位置，请按照以下步骤操作：
- en: Click the more options button (the one with ... at the bottom of the emulator
    control options)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击更多选项按钮（位于模拟器控制选项底部的...）
- en: Select the Location tab in the device window
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备窗口中选择位置标签页
- en: Enter the GPS coordinates in the Longitude and Latitude boxes
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在经度和纬度框中输入GPS坐标
- en: 'Here''s a screenshot showing the Location tab:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个显示位置标签页的截图：
- en: '![](img/f876152f-a34e-4e64-9d68-84f1bb91267f.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f876152f-a34e-4e64-9d68-84f1bb91267f.png)'
- en: Note that simulating the location works by sending GPS data. Therefore, for
    your app to receive the mock location, it will need to be receiving GPS data.
    Testing `lastLocation()` may not send the mock GPS data since it doesn't rely
    solely on the GPS for determining the device location. Try the mock location with
    the *How to get the device location* recipe where we can request the priority.
    (We can't force the system to use any specific location sensor, we can only make
    a request. The system will choose the optimum solution to deliver the results.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，模拟位置是通过发送GPS数据来工作的。因此，为了让您的应用接收到模拟位置，它需要接收GPS数据。测试`lastLocation()`可能不会发送模拟GPS数据，因为它并不完全依赖于GPS来确定设备位置。尝试使用*“如何获取设备位置”配方*中的模拟位置，我们可以请求优先级。（我们无法强制系统使用任何特定的位置传感器，我们只能提出请求。系统将选择最佳解决方案来提供结果。）
- en: See also
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '*The new Android 6.0 run-time permission model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml),
    *Getting Your App Ready for the Play Store*'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第15章（98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml）中“为Play商店准备您的应用”的“新的Android
    6.0运行时权限模型”配方*，*获取设备位置*'
- en: 'Setting up Google Play Services: [https://developers.google.com/android/guides/setup](https://developers.google.com/android/guides/setup)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Google Play服务：[https://developers.google.com/android/guides/setup](https://developers.google.com/android/guides/setup)
- en: The FusedLocationProviderClient interface: [https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderClient](https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderClient)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FusedLocationProviderClient 接口：[https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderClient](https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderClient)
- en: Resolving problems reported with the GoogleApiClient OnConnectionFailedListener
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决 GoogleApiClient OnConnectionFailedListener 报告的问题
- en: With the constantly changing nature of Google APIs, your users are likely to
    attempt to use your application, but not be able to because their files are out
    of date. We can use the `GoogleApiAvailability` library to display a dialog to
    help the user resolve the problem.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Google API 的不断变化，用户可能会尝试使用您的应用程序，但由于他们的文件过时而无法使用。我们可以使用 `GoogleApiAvailability`
    库来显示对话框，以帮助用户解决问题。
- en: We'll continue with the previous recipe and add code to the `onConnectionFailed()`
    callback. We'll use the error result to display additional information to the
    user to resolve their problem.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用之前的配方，并向 `onConnectionFailed()` 回调中添加代码。我们将使用错误结果向用户显示额外信息以解决问题。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `HandleGoogleAPIError`. Use
    the default Phone & Tablet options, and select Empty Activity when prompted for Activity
    Type. Once you've created the project, add the Google Play library reference to
    the project dependencies. (See the previous recipe steps.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `HandleGoogleAPIError`。使用默认的 Phone & Tablet 选项，并在提示活动类型时选择 Empty
    Activity。一旦创建项目，将 Google Play 库引用添加到项目依赖项中。（参见之前的配方步骤。）
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The first step for this recipe is to add the Google Play Services library to
    the project. From there, we''ll create the classes to handle the Google Client
    callbacks and use toasts to give feedback. To start, open the build.gradle (Module:
    app) file and follow these steps (if you''re not sure which file to open, see
    the screenshot in the previous recipe steps):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '此配方的第一步是将 Google Play Services 库添加到项目中。从那里，我们将创建处理 Google 客户端回调的类，并使用吐司来提供反馈。首先，打开
    build.gradle (Module: app) 文件，并按照以下步骤操作（如果您不确定要打开哪个文件，请参见之前的配方步骤截图）：'
- en: 'Add the following statement to the `dependencies` section:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下语句添加到 `dependencies` 部分：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open `ActivityMain.java` and add the following lines to the global class variables:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ActivityMain.java` 并将以下行添加到全局类变量中：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following two classes to handle the callbacks:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下两个类来处理回调：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following method to the MainActivity class to show the Google API error
    dialog:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加到 MainActivity 类中，以显示 Google API 错误对话框：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following code to override `onActivityResult()`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以覆盖 `onActivityResult()`：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following method to set up the `GoogleApiClient`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加以设置 `GoogleApiClient`：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, add this line of code to the end of the existing `onCreate()` method:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下行代码添加到现有的 `onCreate()` 方法末尾：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Most of the code here is standard setup for the `GoogleApiClient` with the main
    addition of setting up the `OnConnectionFailedListener` callback. This is where
    the app goes from simply failing, to actually helping the end user get it working.
    Fortunately for us, Google does most of the work for us by checking the conditions
    that are causing it to fail, as well as presenting the UI to the user. We just
    have to make sure to check the status Google reports back to us.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的大部分代码是 `GoogleApiClient` 的标准设置，主要新增了设置 `OnConnectionFailedListener` 回调。这是应用程序从简单地失败到实际上帮助最终用户使其工作的地方。幸运的是，Google
    通过检查导致其失败的条件以及向用户展示 UI 来为我们做了大部分工作。我们只需确保检查 Google 向我们报告的状态。
- en: 'The `GoogleAPIClient` uses the `connectionResult` to indicate possible courses
    of action. We can call the `hasResolution()` method, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`GoogleAPIClient` 使用 `connectionResult` 来指示可能的操作。我们可以调用 `hasResolution()` 方法，如下所示：'
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the response is `true`, then it's something the user can resolve, such as
    enabling the location service. If the response is `false`, we get an instance
    of the `GoogleApiAvailability` and call the `getErrorDialog()` method. When finished,
    our `onActivityResult()` callback is called, where we reset `mResolvingError`
    and, if successful, attempt to reconnect.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应为 `true`，则表示用户可以解决的问题，例如启用位置服务。如果响应为 `false`，我们获取 `GoogleApiAvailability`
    的实例并调用 `getErrorDialog()` 方法。完成后，我们的 `onActivityResult()` 回调被调用，其中重置 `mResolvingError`，如果成功，尝试重新连接。
- en: If you do not have a device with an older Google API for testing, you can try
    testing on an emulator with an older Google API version.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有带有较旧 Google API 的设备进行测试，您可以在具有较旧 Google API 版本的模拟器上尝试测试。
- en: There's more...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If your application is using fragments, you can get a dialog fragment instead,
    using this code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序正在使用片段，您可以使用以下代码获取对话框片段：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See also
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Accessing Google APIs: [https://developers.google.com/android/guides/api-client](https://developers.google.com/android/guides/api-client)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Google API：[https://developers.google.com/android/guides/api-client](https://developers.google.com/android/guides/api-client)
- en: Creating and monitoring a Geofence
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和监控 Geofence
- en: 'If your application needs to know when the user enters or exits a certain location,
    there''s an alternative to continuously checking the user location: Geofencing.
    A Geofence is a location (latitude and longitude) along with a radius. You can
    create a Geofence and let the system notify you when the user enters the location
    proximity you specified. (Android currently allows up to 100 Geofences per user.)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序需要知道用户何时进入或离开某个特定位置，有一种替代方案是持续检查用户的位置：Geofencing。Geofence 是一个位置（纬度和经度）以及一个半径。您可以创建一个
    Geofence，并让系统在用户进入您指定的位置附近时通知您。（Android 目前允许每个用户最多创建 100 个 Geofence。）
- en: 'Geofence properties include:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Geofence 属性包括：
- en: '**Location**: The longitude and latitude'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：经度和纬度'
- en: '**Radius**: The size of the circle (in meters)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**半径**：圆的大小（以米为单位）'
- en: 'Loitering delay: How long the user may remain within the radius before sending
    notifications'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 派待延迟：在发送通知之前用户可以在半径内停留多长时间
- en: '**Expiration**: How long until the Geofence automatically expires'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过期时间**：Geofence 自动过期前的时间'
- en: '**Transition** **type**:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过渡** **类型**：'
- en: '`GEOFENCE_TRANSITION_ENTER`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GEOFENCE_TRANSITION_ENTER`'
- en: '`GEOFENCE_TRANSITION_EXIT`'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GEOFENCE_TRANSITION_EXIT`'
- en: '`INITIAL_TRIGGER_DWELL`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INITIAL_TRIGGER_DWELL`'
- en: This recipe will show you how to create a Geofence object and use it to create
    an instance of `GeofencingRequest`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将向您展示如何创建 Geofence 对象，并使用它来创建 `GeofencingRequest` 的实例。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `Geofence`. Use the default
    Phone & Tablet options and select Empty Activity when prompted for Activity Type.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `Geofence`。使用默认的 Phone & Tablet 选项，并在提示活动类型时选择
    Empty Activity。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We won''t need a layout for this recipe as we''ll use Toasts and Notifications
    for the user interaction. We will need to create an additional Java class for
    `IntentService`, which handles the Geofence alerts. Open the Android Manifest
    and follow these steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要为这个教程创建布局，因为我们将会使用 Toasts 和通知与用户进行交互。我们还需要创建一个额外的 Java 类用于 `IntentService`，该类处理
    Geofence 警报。打开 Android 清单文件，并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open the `build.gradle (Module: app)` file and add the following statement
    to the `dependencies` section:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '打开 `build.gradle (Module: app)` 文件，并在 `dependencies` 部分添加以下语句：'
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a new Java class called `GeofenceIntentService` and extend the `IntentService`
    class. The declaration will look as follows:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `GeofenceIntentService` 的新 Java 类，并扩展 `IntentService` 类。声明如下：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following constructor:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下构造函数：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add `onHandleIntent()` to receive the Geofence alert:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `onHandleIntent()` 以接收 Geofence 警报：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the Android manifest and add the following within the `<application>`
    element, at the same level as the `<activity>` element:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Android 清单文件，并在 `<application>` 元素内添加以下内容，与 `<activity>` 元素处于同一级别：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open `MainActivity.java` and add the following global variable:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 并添加以下全局变量：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a `PendingIntent` with the following method:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方法创建一个 `PendingIntent`：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create the Geofence item with the following method:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方法创建 Geofence 项目：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create the Geofence Request with the following method:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方法创建 Geofence 请求：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following code to the existing `onCreate()` callback:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的 `onCreate()` 回调中：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以开始在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we add `ACCESS_FINE_LOCATION` permission as this is required for Geofencing.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加`ACCESS_FINE_LOCATION`权限，因为这对于地理围栏是必需的。
- en: 'Before we can call the `GeofencingApi.addGeofences()` method, we have to prepare
    two objects:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以调用`GeofencingApi.addGeofences()`方法之前，我们必须准备两个对象：
- en: Geofence Request
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理围栏请求
- en: Geofence Pending Intent
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理围栏挂起Intent
- en: 'To create the Geofence Request, we use the `GeofencingRequest.Builder`. The
    builder requires the list of Geofence objects, which are created in the `createGeofenceList()`
    method. (Even though we are only creating a single Geofence object, the builder
    requires a list, so we just add our single Geofence to an `ArrayList`.) Here is
    where we set the Geofence properties:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建地理围栏请求，我们使用`GeofencingRequest.Builder`。构建器需要地理围栏对象的列表，这些对象是在`createGeofenceList()`方法中创建的。（即使我们只创建了一个地理围栏对象，构建器也需要一个列表，所以我们只需将我们的单个地理围栏添加到`ArrayList`中。）这就是我们设置地理围栏属性的地方：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Only the Loitering delay is optional, but we need it since we are using the
    `DWELL` transition. When calling `setTransitionTypes()`, we can combine multiple
    transition types using the `OR` operator (using the pipe character). Here''s an
    example using `ENTER` and `EXIT` instead:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 只有逗留延迟是可选的，但我们需要它，因为我们正在使用`DWELL`转换。当调用`setTransitionTypes()`时，我们可以使用`OR`运算符（使用管道字符）组合多个转换类型。以下是一个使用`ENTER`和`EXIT`的示例：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For this example, we used the same default latitude and longitude as the emulator.
    Change these values as needed.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们使用了与模拟器相同的默认纬度和经度。根据需要更改这些值。
- en: Our call to `Geofence.Builder()` creates the Geofence object. With the Geofence
    list ready, we call the `GeofencingRequest.Builder` and set our initial trigger
    to `INITIAL_TRIGGER_DWELL`. (If you change the preceding transition types, you
    may want to change the initial trigger as well or the creation of our Geofence
    may fail.)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对`Geofence.Builder()`的调用创建了地理围栏对象。在准备好地理围栏列表后，我们调用`GeofencingRequest.Builder`并设置初始触发器为`INITIAL_TRIGGER_DWELL`。（如果您更改了前面的转换类型，您可能还需要更改初始触发器，否则我们的地理围栏创建可能会失败。）
- en: The second object we need is a Pending Intent, which is how the system will
    notify our app when the Geofence criteria are met. (Strictly speaking, the Intent
    service is not required and if your app will only be monitoring Geofence responses
    while in the foreground, you may not even need it.) Our example displays a toast
    in response to the Geofence trigger, but this is where you would customize the
    response for your app.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的第二个对象是一个挂起Intent，这是系统在地理围栏条件满足时通知我们的应用的方式。（严格来说，Intent服务不是必需的，如果您的应用在后台监控地理围栏响应，您甚至可能不需要它。）我们的示例在地理围栏触发时显示一个吐司，但您可以在您的应用中自定义响应。
- en: With both objects created, we get a reference to `GeofencingClient` after checking
    for the proper permission. Our example only checks for the necessary permission
    so you need to manually enable location permission through the app settings. A
    production app should prompt the user as needed. (See *The Android 6.0 Runtime
    Permission Model* recipe in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml), *Getting
    Your App Ready for the Play Store* for a complete example.)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了这两个对象之后，我们在检查了适当的权限后获得对`GeofencingClient`的引用。我们的示例仅检查必要的权限，因此您需要手动通过应用设置启用位置权限。生产应用应根据需要提示用户。（有关完整示例，请参阅第15章中的*The
    Android 6.0 Runtime Permission Model*配方，*Getting Your App Ready for the Play Store*。）
- en: There's more...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'To stop receiving Geofence notifications, you can call the `removeGeofences()`
    method with either the `RequestID` parameter or `PendingIntent`. The following
    example uses the same `PendingIntent` method we used for the notification:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止接收地理围栏通知，您可以使用`RequestID`参数或`PendingIntent`调用`removeGeofences()`方法。以下示例使用了我们用于通知的相同`PendingIntent`方法：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The `GeofencingClient` class at: [https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingClient](https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingClient)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以下位置查看`GeofencingClient`类：[https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingClient](https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingClient)
- en: 'The `Geofence.Builder` class at: [https://developers.google.com/android/reference/com/google/android/gms/location/Geofence.Builder.html](https://developers.google.com/android/reference/com/google/android/gms/location/Geofence.Builder.html)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以下位置查看`Geofence.Builder`类：[https://developers.google.com/android/reference/com/google/android/gms/location/Geofence.Builder.html](https://developers.google.com/android/reference/com/google/android/gms/location/Geofence.Builder.html)
- en: 'The `GeofencingRequest.Builder` class at: [https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingRequest.Builder](https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingRequest.Builder)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以下位置可以找到`GeofencingRequest.Builder`类：[https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingRequest.Builder](https://developers.google.com/android/reference/com/google/android/gms/location/GeofencingRequest.Builder)
