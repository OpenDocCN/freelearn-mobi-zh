["```swift\n- (void)defineSchema {\n  // define individual properties for keys to be easier to use\n  self.authorKey = [ASDLevelDBKey key:@\"Author name\" withParts:@[\n    @\"A~\",   \n    [ASDLevelDBKey partFromPath:@\"doc.authors.name\"], \n    [ASDLevelDBKey partFromId:@\"doc\"]  ]];\n  self.wordKey = [ASDLevelDBKey key:@\"Words\" withParts:@[\n    @\"W~\", \n    [ASDLevelDBKey partFrom:@\"doc.desc\" \n      valueGenerator:^(NSString* source){ \n        return [Sample09_Model uniqueWordsFromString:source];\n      }], \n    [ASDLevelDBKey partFromId:@\"doc\"]\n  ]];\n  self.docTitleKey = [ASDLevelDBKey key:@\"Document\" withParts:@[\n    @\"D~\", [ASDLevelDBKey partFromPath:@\"doc.title\"], \n    [ASDLevelDBKey partFromId:@\"doc\"]  ]];\n  self.docKey = [ASDLevelDBKey key:@\"doc\" withParts:@[\n    @\"i~\", [ASDLevelDBKey partGeneratingId:@\"doc\"]  ]\n    valueFields:@[\n @\"title\", @\"desc\", @\"fileURL\",\n [ASDLevelDBField multiple:@\"authors\" fields:@[@\"name\"]]\n    ]  ];\n  // now hook everything up so the key paths can reconcile\n  self.schema = [ASDLevelDBSchema schemaWithKeys:@[\n    self.authorKey, self.wordKey, self.docTitleKey, self.docKey\n  ]];\n}\n```", "```swift\n+ (NSArray*) uniqueWordsFromString:(NSString*)src {\n  static NSMutableCharacterSet* seps = Nil;\n  if (seps==Nil) {\n    seps=[NSMutableCharacterSet\n      whitespaceAndNewlineCharacterSet];\n    [seps formUnionWithCharacterSet:\n      [NSMutableCharacterSet punctuationCharacterSet]];\n  }\n  NSArray* words=[src componentsSeparatedByCharactersInSet:seps];\n  NSMutableSet* uw=[NSMutableSet setWithCapacity:[words count]];\n  for (id w in words) {\n     if ([w length]>=3)\n       [uw addObject:[w lowercaseString]];       \n  }\n  return [[uw allObjects] \n    sortedArrayUsingSelector:@selector(localizedCompare:)];\n}\n```", "```swift\n- (void)awakeFromNib {\n  [super awakeFromNib];\n  [self.window registerForDraggedTypes:@[NSURLPboardType]];\n}\n- (BOOL)performDragOperation:(id <NSDraggingInfo>)sender {\n  NSPasteboard *p = [sender draggingPasteboard];  \n  if ( [[p types] containsObject:NSURLPboardType] ) {\n    [self.docURL setStringValue:[NSURL URLFromPasteboard:p]path]];\n    [self.docURL needsDisplay];\n  }\n  return YES;\n}\n- (NSDragOperation)draggingEntered:(id <NSDraggingInfo>)sender {\n  NSDragOperation dragMask = [sender draggingSourceOperationMask];\n  NSPasteboard *p = [sender draggingPasteboard];  \n  if ( [[pboard types] containsObject:NSURLPboardType] ) {\n    if (dragMask & NSDragOperationGeneric) \n      return NSDragOperationGeneric;\n  }\n  return NSDragOperationNone;\n}\n```", "```swift\n- (BOOL)readFromFileWrapper:(NSFileWrapper*)fileWrapper\n   ofType:(NSString*)typeName error:(NSError**)outError {\n  self.db = [APLevelDB levelDBWithPath:[fileWrapper filename] \n    error:outError];\n  return outError == nil;\n}\n\n- (BOOL)writeToURL:(NSURL*)url ofType:(NSString*)typeName\n  error:(NSError**)outError {\n  if (self.db == nil) { // our initial saveDocumentAs\n    self.db = [APLevelDB levelDBWithPath:[url path]\n      error: outError];\n    return outError == nil;\n  }\n  return NO; \n}\n```"]