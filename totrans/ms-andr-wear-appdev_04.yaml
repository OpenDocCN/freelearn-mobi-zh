- en: Chapter 4.  Developing Watch UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"To create something exceptional, your mindset must be relentlessly
    focused on the smallest detail."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Giorgio Armani* |'
  prefs: []
  type: TYPE_TB
- en: In this chapter, we will be extending the `Today` app, we started in the previous
    chapter using the UI components available in the Android Wear SDK. We will also
    be looking into building custom UI components using custom layouts that would
    fit into the watch's form factor.
  prefs: []
  type: TYPE_NORMAL
- en: We will be developing the `Today` app iteratively and incrementally as we go
    through the chapters in this book. We will be introducing various concepts and
    features of Android Wear SDKs and APIs when it's relevant, and utilizing them
    to make this app as feature-rich as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that by no means will the `Today` app be finished when we complete
    this chapter. It will be improved as we introduce more API concepts in further
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code accompanying this chapter is available for reference on GitHub ([https://github.com/siddii/mastering-android-wear/tree/master/Chapter_4](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_4)).
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of brevity, only code snippets are included as needed. The reader
    is encouraged to download the referenced code from GitHub and follow along as
    they progress through the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Wearable UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you probably realize that an Android Wear watch is not just a smaller
    form factor than its predecessors, such as the phone and tablet. There are various
    nuances and characteristics that make the Android Wear watch different to the
    other big screen devices.
  prefs: []
  type: TYPE_NORMAL
- en: First and foremost, there is no such thing as keyboard input, at least, not
    currently. That brings a major challenge in how you design apps for Android Wear
    platform. There is not much of interactivity available from the user due to the
    lack of keyboard (physical or virtual) data inputs.
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, we also don't have the *ubiquitous* back button that is available
    on all other Android devices. The button for going back on the Android platform
    makes navigating inside an app and switching between apps a lot easier. Without
    that, it would be a lot harder to navigate within and between apps. The swipe
    gestures on the Android Wear watch are used like back buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start writing UI components and navigation code for the Android Wear
    app, if you are not very familiar with the Android Wear watch platform component
    and navigation flow, this would be a good time to spend some time on a physical
    device or emulator to see how they work. Poke around various stock apps and see
    how the swipe gestures and navigation work.
  prefs: []
  type: TYPE_NORMAL
- en: The important point to remember here is that, although the Android Wear device
    works differently to phones and tablets, it is running the same Android platform
    (operating system) available on every device. However, not all the UI components
    and widgets will be available or relevant to the Android Wear platform. It will
    be a subset of components, and in some cases, it will be a slimmed-down version
    of what is available on phones and tablets.
  prefs: []
  type: TYPE_NORMAL
- en: The Android manifest file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Today` app currently has two activities. The main activity is called `TodayActivity`,
    and the another one is `DayOfYearActivity`, which is used to display data specific
    to days of the year.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the use of the `uses-feature` tag, which makes it an Android Wear watch
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The TodayActivity activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see what we have in the main activity—`TodayActivity`. In the `onCreate`
    method, we set the `activity_main.xml` layout as the content view. And we have
    `WearableListView`  with `action_list` tied to the `ListViewAdapter` class.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `TodayActivity` activity also implements the click listener for
    the `WearableListView` class, which is why you see the `onClick` handler method
    implemented right next to the `onCreate` method*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the `onClick` listener method is handling only the first item
    in the list view. It launches `DayOfYearActivity` when it''s clicked, and when
    the default `Intent` bundle is passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Actions inside the arrays.xml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The string values for the list view actions are declared inside the `arrays.xml`
    file*.* We can add more actions to this file as we improve or add features to
    this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Main activity layout file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The layout file for the main activity, `activity_main.xml` is pretty simple.
    All it contains is the `WearableListView`  component defined in the layout. As
    we mentioned earlier, the `WearableListView` component is an optimized version
    of the `ListView` method that is suitable for small screen devices. It handles
    all the scrolling and transitions needed while scrolling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When you launch the app using an Android Wear emulator, you should see the
    app listed with a custom launch icon, as shown in the following screenshot. Please
    note the icons for various device resolutions are placed in the `app/src/main/res/mipmap-*`
    folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Main activity layout file](img/image00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The WearableListItemLayout component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `WearableListView` componentis used to display a list of available actions
    in the app, whereas the `WearableListItemLayout` component is used to style or
    layout components in an individual list item.
  prefs: []
  type: TYPE_NORMAL
- en: In this specific case, we have `ImageView` and `TextView` tags*.* Note the usage
    of `android:src="img/wl_circle"` line. It is essentially a drawable file available
    in the `res/drawable/wl_circle.xml` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TextView` tag is used to display individual action strings that come from
    the `arrays.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the implementation of the `WearableListItemLayout` class. It is basically
    an extension of the `LinearLayout` class with some handler methods for the `OnCenterProximityListener`
    component of the `WearableListView` component. Take a moment to understand how
    the `colors` and `alpha` characteristics of the components are updated when the
    list items are scrolled and brought into the center position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a screenshot of the action list we can see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The WearableListItemLayout component](img/image00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The DayOfYearActivity class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DayOfYearActivity` activity is a very simple class that uses Java''s default
    `java.util.Calendar` instance to calculate how many days have passed and how many
    days are remaining until the end of the year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The activity_day_of_year.xml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An interesting thing about the `BoxInsetLayout` component is that it''s a screen-aware
    component that boxes its children in the center square. It''s a safe component
    that tries to fit nicely on square or circular screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the following action in the emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The activity_day_of_year.xml file](img/image00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we build layout components it's a good idea to preview them in both circular
    and square profiles to see how good they look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot to see how the day of year activity
    layout is displayed on a circular screen. Since we used the `BoxInsetLayout` layout
    component, it is rendered pretty decently on both square and circular screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The activity_day_of_year.xml file](img/image00164.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the `DayOfYearActivity` activity in action. You can swipe right to
    go back to the previous activity, which is the main activity in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The activity_day_of_year.xml file](img/image00165.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed how we could utilize list views and layouts that are specific to
    wearable devices. We developed a list of actions in our `Today` app and implemented
    actions for list items. We created an action handler that launches an activity
    from the main activity to display components in the `BoxInsetLayout` layout.
  prefs: []
  type: TYPE_NORMAL
- en: This is just a tiny use case that shows how we can utilize Android Wear UI components
    and customize them for our needs. We couldn't discuss all the files that were
    used in the sample app. Spend some time studying the sample code from this chapter.
    This will help you connect the dots and understand how the individual pieces come
    together.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to step into more advanced topics in Wear development. This
    would be a good time to review the basics of how UI and layout components work
    together in general on the Android platform.
  prefs: []
  type: TYPE_NORMAL
