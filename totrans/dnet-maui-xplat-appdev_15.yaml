- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Deploying and Publishing in App Stores
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用商店中部署和发布
- en: After completing the development work, our aim is to publish our app on various
    app stores. Since .NET MAUI is a cross-platform framework, we can build the same
    source code for Android, iOS, macOS, and Windows. While it’s possible to deploy
    our app to a repository such as GitHub, most users on these platforms rely on
    app stores. As a result, we need to understand how to prepare our app for different
    app stores. That is the focus of this chapter. In this chapter, we will discuss
    the steps required to prepare the application packages before publishing.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成开发工作后，我们的目标是将在各种应用商店发布我们的应用程序。由于.NET MAUI是一个跨平台框架，我们可以为Android、iOS、macOS和Windows构建相同的源代码。虽然可以将我们的应用程序部署到GitHub等仓库，但大多数平台用户依赖于应用商店。因此，我们需要了解如何为不同的应用商店准备我们的应用程序。这正是本章的重点。在本章中，我们将讨论在发布前准备应用程序包所需的步骤。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Preparing application packages for publishing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备应用程序包以供发布
- en: Automating the build process using GitHub Actions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitHub Actions自动化构建过程
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To test and debug the source code in this chapter, we need to install .NET MAUI
    on Windows and macOS. For complete details about environment setup, please refer
    to the *Development environment setup* section in *Chapter 1*, *Getting Started
    with .NET MAUI*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试和调试本章的源代码，我们需要在Windows和macOS上安装.NET MAUI。关于环境设置的完整细节，请参阅第1章“*开始使用.NET MAUI*”中的“*开发环境设置*”部分。
- en: We will build Windows and Android packages using Windows, while iOS and macOS
    packages will be built using macOS.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Windows构建Windows和Android包，而iOS和macOS包将使用macOS构建。
- en: 'The source code for this chapter can be found at the following GitHub repository:
    [https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/tree/main/2nd/chapter12](https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/tree/65b2d502abe294c0e121ef0536b9bd1c6a7b79f3).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在以下GitHub仓库中找到：[https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/tree/main/2nd/chapter12](https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/tree/65b2d502abe294c0e121ef0536b9bd1c6a7b79f3)。
- en: 'To check out the source code for this chapter, use the command below:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看本章的源代码，请使用以下命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For more information about the source code in this book, please refer to the
    *Managing the source code in this book* section in *Chapter 2*, *Building Our
    First .NET MAUI App*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本书中源代码的更多信息，请参阅第2章“*本书源代码的管理*”部分。
- en: Preparing application packages for publishing
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备应用程序包以供发布
- en: In previous chapters, minimal platform-specific knowledge was required for .NET
    MAUI development. However, when preparing to publish our app to individual app
    stores, we cannot avoid addressing platform-specific information. In this chapter,
    we will discuss the necessary steps to prepare the app for publishing, and then
    we will show how to automate the process using GitHub Actions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，进行.NET MAUI开发只需要最少的平台特定知识。然而，当准备将我们的应用程序发布到各个应用商店时，我们无法避免处理平台特定的信息。在本章中，我们将讨论准备应用程序发布所需的必要步骤，然后我们将展示如何使用GitHub
    Actions自动化此过程。
- en: There are numerous CI/CD tools available for automating the build and deployment
    process. For .NET MAUI, both GitHub Actions and Azure DevOps are viable options.
    You can refer to the *Further reading* section for more details about other alternatives.
    However, in this chapter, our primary emphasis will be on employing GitHub Actions
    as a build and deployment instrument.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多CI/CD工具可用于自动化构建和部署过程。对于.NET MAUI，GitHub Actions和Azure DevOps都是可行的选项。您可以参考“*进一步阅读*”部分以获取有关其他替代方案的更多详细信息。然而，在本章中，我们的主要重点是使用GitHub
    Actions作为构建和部署工具。
- en: Preparing for publishing
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备发布
- en: To prepare for publishing, we will focus on the tasks that need to be completed
    before submitting the package to an app store. For information about the actual
    publishing process, please refer to the documentation provided by each app store.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备发布，我们将关注在提交包到应用商店之前需要完成的任务。有关实际发布过程的详细信息，请参阅每个应用商店提供的文档。
- en: 'During the preparation for publishing, we aim to answer the following questions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备发布的过程中，我们的目标是回答以下问题：
- en: How is an app identified in the app store?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序如何在应用商店中识别？
- en: How are the app developers identified?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序开发者是如何被识别的？
- en: Which devices can the app support?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序支持哪些设备？
- en: Building and signing application packages on different platforms require platform-specific
    configurations. In .NET MAUI, the platform-specific information is included in
    the Visual Studio project file and the platform-specific configuration file. Conditional
    compilation is used in the Visual Studio project file to specify platform-specific
    information. Refer to *Table 12.1* for an overview of the necessary changes for
    each platform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同平台上构建和签名应用程序包需要特定平台的配置。在 .NET MAUI 中，特定平台的信息包含在 Visual Studio 项目文件和特定平台的配置文件中。在
    Visual Studio 项目文件中使用条件编译来指定特定平台的信息。请参阅 *表 12.1* 了解每个平台所需更改的概述。
- en: '| **Item** | **Android** | **Windows** | **iOS** | **macOS** |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| **项目** | **Android** | **Windows** | **iOS** | **macOS** |'
- en: '| Package format | `.apk/.aab` | `.msix` | `.ipa` | `.app/.pkg` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 包格式 | `.apk/.aab` | `.msix` | `.ipa` | `.app/.pkg` |'
- en: '| Signing | `Keystore` | Signing certificate`Package.StoreAssociation.xml`
    | Distrubution certificateDistribution profile |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 签名 | `Keystore` | 签名证书`Package.StoreAssociation.xml` | 分发证书分发配置文件 |'
- en: '| ApplicationId | `package="com.passxyz.vault2"` | `Publisher="CN=F81DB 4B-AF4A-473E-ADEA-A55EE7432C05"`
    | `<key>CFBundleIdentifier</key>``<string>com.passxyz.vault2</string>` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 应用标识符 | `package="com.passxyz.vault2"` | `Publisher="CN=F81DB 4B-AF4A-473E-ADEA-A55EE7432C05"`
    | `<key>CFBundleIdentifier</key>``<string>com.passxyz.vault2</string>` |'
- en: '| ApplicationVersion | `android:versionCode="1"` | `Version="0.3.8.0"` | `<key>CFBundleVersion</key>``<string>2</string>`
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 应用版本 | `android:versionCode="1"` | `Version="0.3.8.0"` | `<key>CFBundleVersion</key>``<string>2</string>`
    |'
- en: '| Configuration file | `AndroidManifest.xml` | `Package.appxmanifest` | `Info.plost`
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 配置文件 | `AndroidManifest.xml` | `Package.appxmanifest` | `Info.plist` |'
- en: 'Table 12.1: The build configuration'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12.1：构建配置
- en: '*Table 12.1* outlines how to identify an app using the `ApplicationId` and
    `ApplicationVersion` variables defined in the Visual Studio project file. For
    each platform, a specific platform configuration file is used.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*表 12.1* 列出了如何使用在 Visual Studio 项目文件中定义的 `ApplicationId` 和 `ApplicationVersion`
    变量来识别应用程序。对于每个平台，都使用特定的平台配置文件。'
- en: For Android distribution, either a `.apk` file or `.aab` file is generated.
    The `.apk` file is the original Android package format used to install app packages
    on devices or emulators, while the `.aab` file is used for submission to Google
    Play Store. Before submission, we need to sign the package using a Keystore. `ApplicationId`
    and `ApplicationVersion` are mapped to a package ID and version code in the Android
    configuration file `AndroidManifest.xml`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Android 的分发，会生成一个 `.apk` 文件或 `.aab` 文件。`.apk` 文件是原始的 Android 包格式，用于在设备或模拟器上安装应用程序包，而
    `.aab` 文件用于提交到 Google Play 商店。在提交之前，我们需要使用密钥库对包进行签名。`ApplicationId` 和 `ApplicationVersion`
    映射到 Android 配置文件 `AndroidManifest.xml` 中的包 ID 和版本码。
- en: For iOS or macOS distribution, a `.ipa` file is generated for iOS, and either
    a `.app` or `.pkg` file is generated for macOS. To sign an iOS or macOS package,
    we need a distribution certificate and a distribution profile. The `ApplicationId`
    is mapped to the bundle ID, and `ApplicationVersion` is mapped to the bundle version
    in `Info.plist`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 iOS 或 macOS 的分发，会生成一个 `.ipa` 文件用于 iOS，以及一个 `.app` 或 `.pkg` 文件用于 macOS。为了对
    iOS 或 macOS 的包进行签名，我们需要一个分发证书和一个分发配置文件。`ApplicationId` 映射到包标识符，而 `ApplicationVersion`
    映射到 `Info.plist` 中的包版本。
- en: For Windows distribution, the MSIX package format is used, and the package is
    built with the `.msix` file extension. Windows employs a **universally unique
    identifier** (**UUID**) as the `ApplicationId`, which is generated as `ApplicationGuid`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 的分发，使用 MSIX 包格式，并且使用 `.msix` 文件扩展名构建包。Windows 使用 **全局唯一标识符**（**UUID**）作为
    `ApplicationId`，它作为 `ApplicationGuid` 生成。
- en: The `ApplicationVersion` is mapped to the `Version` attribute of the `Identity`
    tag in `Package.appxmanifest`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplicationVersion` 映射到 `Package.appxmanifest` 中 `Identity` 标签的 `Version`
    属性。'
- en: '**What is MSIX?**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是 MSIX？**'
- en: MSIX is a modern Windows app package format designed for all Windows apps. It
    aims to provide a more reliable and secure installation process, along with enhanced
    system resource usage and simplified updates. MSIX allows developers to package
    and distribute their applications through various channels, including Microsoft
    Store, web, or third-party platforms.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MSIX 是一种为所有 Windows 应用设计的现代 Windows 应用程序包格式。它旨在提供更可靠和安全的安装过程，以及增强的系统资源使用和简化更新。MSIX
    允许开发者通过各种渠道打包和分发他们的应用程序，包括 Microsoft Store、网页或第三方平台。
- en: 'For more information on MSIX, please refer to the Microsoft documentation:
    [https://learn.microsoft.com/en-us/windows/msix/overview](https://learn.microsoft.com/en-us/windows/msix/overview).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 MSIX 的更多信息，请参阅 Microsoft 文档：[https://learn.microsoft.com/en-us/windows/msix/overview](https://learn.microsoft.com/en-us/windows/msix/overview)。
- en: In the following sections, we will explain how to generate release packages
    for each platform. We will build Windows and Android packages on Windows, while
    iOS and macOS packages will be built on macOS. We will demonstrate how to accomplish
    this using both Visual Studio and the command line.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将解释如何为每个平台生成发布包。我们将在 Windows 上构建 Windows 和 Android 包，而 iOS 和 macOS
    包将在 macOS 上构建。我们将演示如何使用 Visual Studio 和命令行来完成此操作。
- en: Publishing to Microsoft Store
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布到 Microsoft Store
- en: We can build a `.msix` package for Microsoft Store using either Visual Studio
    or the command line on Windows.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Visual Studio 或 Windows 命令行来为 Microsoft Store 构建一个 `.msix` 包。
- en: In Visual Studio, we need to set the target framework as `net8.0-windows10.0.19041.0`
    and set the build type to `Release`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，我们需要将目标框架设置为 `net8.0-windows10.0.19041.0` 并将构建类型设置为 `发布`。
- en: After that, we can right-click on the project node and select the `Publish…`
    menu item.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以右键单击项目节点并选择“发布...”菜单项。
- en: 'A window will appear with the **Select distribution method** option (*Figure
    12.1*). Here, select **Microsoft Store under a new app name** and click the **Next**
    button:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现一个带有 **选择分发方法** 选项的窗口 (*图 12.1*)。在此处，选择 **使用新应用名称的 Microsoft Store** 并单击
    **下一步** 按钮：
- en: '![A screenshot of a computer  Description automatically generated](img/B21554_12_01.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图  自动生成的描述](img/B21554_12_01.png)'
- en: 'Figure 12.1: Select distribution method'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1：选择分发方法
- en: Before proceeding to the next step, as shown in *Figure 12.2*, we need to have
    an app name ready.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行下一步之前，如 *图 12.2* 所示，我们需要准备好一个应用名称。
- en: 'To create a new app name, follow these steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的应用名称，请按照以下步骤操作：
- en: 'Visit **Microsoft Store Developer Dashboard** at the following URL: [https://partner.microsoft.com/en-us/dashboard/](https://partner.microsoft.com/en-us/dashboard/).'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问以下 URL 的 **Microsoft Store 开发者仪表板**：[https://partner.microsoft.com/en-us/dashboard/](https://partner.microsoft.com/en-us/dashboard/)。
- en: Register and create a new app name.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册并创建一个新的应用名称。
- en: 'Once we have an app name, we can associate it with our app, as shown in *Figure
    12.2*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了应用名称，我们就可以将其与我们的应用关联，如 *图 12.2* 所示：
- en: '![Figure 12.2: Associating your app with Microsoft Store](img/B21554_12_02.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2：将您的应用与 Microsoft Store 关联](img/B21554_12_02.png)'
- en: 'Figure 12.2: Associating your app with Microsoft Store'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2：将您的应用与 Microsoft Store 关联
- en: 'After clicking the **Next** button, Visual Studio will search for the app name
    in Microsoft Store. The app name created in Microsoft Store, as shown in *Figure
    12.3*, will be retrieved for you to continue the publishing process:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 **下一步** 按钮后，Visual Studio 将在 Microsoft Store 中搜索应用名称。Microsoft Store 中创建的应用名称，如
    *图 12.3* 所示，将被检索以继续发布过程：
- en: '![Figure 12.3: Selecting an app name](img/B21554_12_03.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3：选择应用名称](img/B21554_12_03.png)'
- en: 'Figure 12.3: Selecting an app name'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3：选择应用名称
- en: After selecting the app name, click the **Next** button. A screen to select
    and configure packages will appear, as shown in *Figure 12.4*. Here, we can choose
    the packages for our app and configure additional settings before proceeding with
    the publication process.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 选择应用名称后，单击 **下一步** 按钮。将出现一个选择和配置包的屏幕，如 *图 12.4* 所示。在此处，我们可以选择我们的应用包并配置其他设置，然后再进行发布过程。
- en: '![Figure 12.4: Selecting and configuring packages](img/B21554_12_04.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.4：选择和配置包](img/B21554_12_04.png)'
- en: 'Figure 12.4: Selecting and configuring packages'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4：选择和配置包
- en: 'To continue the process, we need to create a publish profile here. To create
    an MSIX publish profile, follow these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续此过程，我们需要在此处创建一个发布配置文件。要创建 MSIX 发布配置文件，请按照以下步骤操作：
- en: Click on the drop-down menu under **Publishing profile**. A dialog will be displayed,
    as shown in *Figure 12.4*.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **发布配置文件** 下单击下拉菜单。将显示一个对话框，如 *图 12.4* 所示。
- en: Clicking the **OK** button in the dialog box to create a new MSIX publish profile.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框中单击 **确定** 按钮以创建一个新的 MSIX 发布配置文件。
- en: Once we have a publish profile, click on the **Create** button (which will now
    be active) to create the package. The build and package creation process may take
    some time. Upon completion, we will see a screen similar to the one depicted in
    *Figure 12.5*, indicating that the MSIX package is ready for submission.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了发布配置文件，点击**创建**按钮（现在将变为可用状态）以创建包。构建和包创建过程可能需要一些时间。完成后，我们将看到一个类似于*图 12.5*中所示的画面，表明
    MSIX 包已准备好提交。
- en: '![Figure 12.5: An MSIX package](img/B21554_12_05.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5：MSIX 包](img/B21554_12_05.png)'
- en: 'Figure 12.5: An MSIX package'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5：MSIX 包
- en: The location of the new package is shown in *Figure 12.5*. There is an option
    to verify the package by running the **Windows App Certification Kit.**
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 新包的位置如*图 12.5*所示。有一个选项可以通过运行**Windows 应用认证工具包**来验证包。
- en: 'In the preceding steps, two files related to the app’s publication will have
    been created in the `project` folder:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，`project` 文件夹中已经创建了两个与应用程序发布相关的文件：
- en: '`Package.StoreAssociation.xml`: this file associates the app with Microsoft
    Store.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Package.StoreAssociation.xml`：此文件将应用程序与 Microsoft Store 关联。'
- en: '`Properties\PublishProfiles\MSIX-win10-x86.pubxml`: this is the publish profile.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Properties\PublishProfiles\MSIX-win10-x86.pubxml`：这是发布配置文件。'
- en: Both files may contain sensitive information, so they should not be checked
    into the Git repository.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个文件可能包含敏感信息，因此它们不应被检入 Git 仓库。
- en: 'To integrate the build process in the CI/CD environment, we need to execute
    the build process using the command line. To build a `.msix` package using the
    command line, execute the following command from the project folder:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要将构建过程集成到 CI/CD 环境中，我们需要使用命令行执行构建过程。要从项目文件夹中构建 `.msix` 包，请执行以下命令：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once the `.msix` package is built, we can upload it to Microsoft Store in the
    `Packages` section of the app submission.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了 `.msix` 包，我们就可以将其上传到 Microsoft Store 的应用程序提交的“包”部分。
- en: Publishing to Google Play Store
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布到 Google Play 商店
- en: To prepare for submission to Google Play Store, you need to create a new app
    in the Google Play Console. A Google account is required to create a new app in
    the Google Play Console.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备提交到 Google Play 商店，您需要在 Google Play 控制台中创建一个新的应用程序。创建新的应用程序需要 Google 账户。
- en: 'Every Android app has a unique application ID or package ID, which is defined
    in the configuration file, `AndroidManifest.xml`. This configuration file is generated
    by Visual Studio from the project file and can be found at `Platforms/Android/AndroidManifest.xml`.
    Let’s review the `AndroidManifest.xml` of our app in *Listing 12.1*:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Android 应用都有一个独特的应用程序 ID 或包 ID，它在配置文件 `AndroidManifest.xml` 中定义。此配置文件由 Visual
    Studio 从项目文件生成，可在 `Platforms/Android/AndroidManifest.xml` 中找到。让我们回顾一下我们的应用程序的
    `AndroidManifest.xml`，如*清单 12.1*所示：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 12.1: `AndroidManifest.xml` ([https://epa.ms/AndroidManifest12-1](https://epa.ms/AndroidManifest12-1))'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 12.1：`AndroidManifest.xml` ([https://epa.ms/AndroidManifest12-1](https://epa.ms/AndroidManifest12-1))
- en: In our app, the application ID is `"com.passxyz.vault2"` **(1)**, which is generated
    from `ApplicationId`, and the version is the value of `android:versionCode` **(2)**,
    which is generated from `ApplicationVersion`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，应用程序 ID 是 `"com.passxyz.vault2"` **(1**)，它由 `ApplicationId` 生成，版本是
    `android:versionCode` 的值 **(2**)，它由 `ApplicationVersion` 生成。
- en: 'The declaration of the app identifier and version can be found in the `PassXYZ.Vault.csproj`
    project file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序标识符和版本的声明可以在 `PassXYZ.Vault.csproj` 项目文件中找到：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To sign an Android package, we need to create a Keystore file. For information
    on creating a Keystore file and signing an Android app, refer to the following
    Android documentation: [https://developer.android.com/studio/publish/app-signing](https://developer.android.com/studio/publish/app-signing).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要对 Android 包进行签名，我们需要创建一个密钥库文件。有关创建密钥库文件和签名 Android 应用程序的更多信息，请参阅以下 Android
    文档：[https://developer.android.com/studio/publish/app-signing](https://developer.android.com/studio/publish/app-signing)。
- en: 'Once we have a Keystore file and have prepared the required configuration,
    follow these steps in Visual Studio:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了密钥库文件并准备好了所需的配置，请在 Visual Studio 中按照以下步骤操作：
- en: Set the target framework as `net8.0-android` and the build type as `Release`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将目标框架设置为 `net8.0-android`，将构建类型设置为 `Release`。
- en: Right-click the project node and select **Publish…**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目节点，并选择**发布…**。
- en: 'After completing these steps, the build will start, and an archive will be
    created, as shown in *Figure 12.6*:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，构建将开始，并将创建存档，如*图 12.6*所示：
- en: '![Figure 12.6: Creating an archive for Android](img/B21554_12_06.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6：为 Android 创建存档](img/B21554_12_06.png)'
- en: 'Figure 12.6: Creating an archive for Android'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6：为Android创建存档
- en: 'After the package is created, we can sign it by clicking the **Distribute…**
    button. Then, we will need to choose a distribution channel, as shown in *Figure
    12.7*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 包创建完成后，我们可以通过点击**分发…**按钮来签名它。然后，我们需要选择一个分发渠道，如图*图12.7*所示：
- en: '![Figure 12.7: Selecting a channel](img/B21554_12_07.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7：选择渠道](img/B21554_12_07.png)'
- en: 'Figure 12.7: Selecting a channel'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7：选择渠道
- en: Although it is possible to sign and submit the package by selecting **Google
    Play**, we will choose **Ad Hoc** for signing. We will manually submit the signed
    package to Google Play later.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以选择**Google Play**来签名和提交包，但我们将选择**Ad Hoc**进行签名。稍后我们将手动将签名的包提交到Google Play。
- en: 'Upon selecting `Ad Hoc`, we will be presented with a different screen, as shown
    in *Figure 12.8*, where we can proceed with the process of signing our Android
    package:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`Ad Hoc`后，我们将看到一个不同的屏幕，如图*图12.8*所示，在那里我们可以继续签名我们的Android包的过程：
- en: '![Figure 12.8: Signing Identity using a Keystore file](img/B21554_12_08.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8：使用密钥库文件进行签名](img/B21554_12_08.png)'
- en: 'Figure 12.8: Signing Identity using a Keystore file'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8：使用密钥库文件进行签名
- en: As shown in *Figure 12.8*, click the **+** button to add a Keystore file. After
    adding the Keystore file, click the **Save As** button to sign the package.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图12.8*所示，点击**+**按钮添加密钥库文件。添加密钥库文件后，点击**另存为**按钮来签名包。
- en: The signed `.aab` file can be submitted to Google Play Store through the Google
    Play Console.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 签名的`.aab`文件可以通过Google Play Console提交到Google Play Store。
- en: If you don’t have an existing Keystore file, you can follow the guide mentioned
    earlier to create a new one. The default location of Keystore files is `%USERPROFILE%\AppData\Local\Xamarin\Mono
    for Android\Keystore\`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有现有的密钥库文件，你可以按照前面提到的指南创建一个新的。密钥库文件的默认位置是`%USERPROFILE%\AppData\Local\Xamarin\Mono
    for Android\Keystore\`。
- en: It’s critical to securely store your keystore file and password, as they will
    be required again when you submit an updated version of your application to the
    App Store.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 安全存储你的密钥库文件和密码至关重要，因为当你提交应用程序更新版本到App Store时，它们将再次被需要。
- en: 'If you select the **Google Play** option in *Figure 12.7*, the screen displayed
    is as shown in *Figure 12.9*. You will then need to access the Google Play API
    using your **Client Id** and **Client Secret**. Despite the **Google Play** and
    **Ad Hoc** options sharing strong similarities, selecting **Google Play** allows
    you to automatically submit the build result to Google Play Store:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择*图12.7*中的**Google Play**选项，显示的屏幕如图*图12.9*所示。然后，你需要使用你的**客户端ID**和**客户端密钥**访问Google
    Play API。尽管**Google Play**和**Ad Hoc**选项有很强的相似性，但选择**Google Play**允许你自动将构建结果提交到Google
    Play Store：
- en: '![A screenshot of a computer  Description automatically generated](img/B21554_12_09.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图 自动生成描述](img/B21554_12_09.png)'
- en: 'Figure 12.9: Connect to Google Play Store using your Client ID and Client Secret'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9：使用客户端ID和客户端密钥连接到Google Play Store
- en: 'To create the package from the command line, execute the following command
    in the project folder:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行创建包，请在项目文件夹中执行以下命令：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To learn how to upload a signed Android app bundle to Google Play Store, please
    refer to the following Android document: [https://developer.android.com/studio/publish/upload-bundle](https://developer.android.com/studio/publish/upload-bundle).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何将签名的Android应用程序包上传到Google Play Store，请参阅以下Android文档：[https://developer.android.com/studio/publish/upload-bundle](https://developer.android.com/studio/publish/upload-bundle)。
- en: Publishing to Apple’s App Store
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布到苹果的App Store
- en: We can discuss the submission of an iOS or macOS app to the App Store simultaneously,
    since they share many similarities.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以同时讨论将iOS或macOS应用程序提交到App Store的过程，因为它们有很多相似之处。
- en: In this section, we will be discussing the process of building, signing, and
    deploying .NET MAUI apps for iOS and macOS using a macOS environment.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论在macOS环境中构建、签名和部署.NET MAUI应用程序到iOS和macOS的过程。
- en: 'Building, signing, and deploying .NET MAUI apps for iOS or macOS requires specific
    tooling and environments, due to Apple’s requirements. Here’s what you need:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于苹果的要求，构建、签名和部署.NET MAUI应用程序到iOS或macOS需要特定的工具和环境。以下是你需要的：
- en: '**macOS**: Because of Apple’s restrictions, you must build iOS and macOS applications
    on a Mac. This can be a local machine, or you could use a cloud macOS environment
    like GitHub Actions or Azure Pipelines, which offers hosted macOS agents.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS**: 由于 Apple 的限制，您必须在 Mac 上构建 iOS 和 macOS 应用。这可以是一个本地机器，或者您可以使用 GitHub
    Actions 或 Azure Pipelines 等云 macOS 环境，这些环境提供托管 macOS 代理。'
- en: '**Xcode**: Install the latest stable version of Xcode. This is required for
    iOS SDKs and simulators.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xcode**: 安装最新稳定的 Xcode 版本。这是 iOS SDK 和模拟器所必需的。'
- en: '**.NET 8**: .NET MAUI is built on .NET 8, so you will need the .NET 8 SDK installed.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET 8**: .NET MAUI 是基于 .NET 8 构建的，因此您需要安装 .NET 8 SDK。'
- en: '**MAUI**: Install the latest stable version of .NET MAUI, including the .NET
    MAUI workload and templates.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MAUI**: 安装最新稳定的 .NET MAUI 版本，包括 .NET MAUI 工作负载和模板。'
- en: '**Apple Developer account**: To sign and deploy an app to the App Store, you
    will need an Apple Developer account. This requires an annual subscription fee
    but is necessary to distribute your apps to users.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apple 开发者账号**: 要签名并将应用部署到 App Store，您需要一个 Apple 开发者账号。这需要年度订阅费用，但这是将您的应用分发给用户所必需的。'
- en: '**Provisioning profiles and certificates**: To sign your app, you will need
    a provisioning profile and a matching distribution certificate. You can create
    and manage these in the Apple Developer portal or automatically manage them through
    Xcode. For details on how to create a signing certificate and a provisioning profile,
    refer to the following document: [https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/provision](https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/provision).'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置文件和证书**: 要签名您的应用，您需要一个配置文件和相应的分发证书。您可以在 Apple 开发者门户中创建和管理这些文件，或者通过 Xcode
    自动管理它们。有关如何创建签名证书和配置文件的详细信息，请参阅以下文档：[https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/provision](https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/provision)。'
- en: 'To simultaneously fulfill the needs of Xamarin and .NET MAUI builds, you might
    have multiple Xcode installations on your macOS. You can check for all Xcode installations
    on your Mac with the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了同时满足 Xamarin 和 .NET MAUI 构建的需求，您可能在 macOS 上安装了多个 Xcode。您可以使用以下命令检查您 Mac 上的所有
    Xcode 安装：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To check the currently selected Xcode, you can use this command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查当前选定的 Xcode，您可以使用此命令：
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you need to choose a specific Xcode version, the following command can be
    used:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要选择特定的 Xcode 版本，可以使用以下命令：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once these tools are installed and set up, you can build, sign, and deploy your
    .NET MAUI apps for iOS or macOS using the .NET CLI for command-line builds and
    deployments.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装并设置好这些工具，您就可以使用 .NET CLI 进行命令行构建和部署，来构建、签名和部署您的 .NET MAUI iOS 或 macOS 应用。
- en: In iOS or macOS apps, the bundler identifier and bundler version are used to
    identify an app. This information is stored in the `Info.plist` configuration
    file. The bundler identifier is generated from `ApplicationId`, and the bundler
    version is generated from `ApplicationVersion` in the Visual Studio project file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS 或 macOS 应用中，捆绑标识符和捆绑版本用于标识一个应用。这些信息存储在 `Info.plist` 配置文件中。捆绑标识符由 `ApplicationId`
    生成，而捆绑版本由 Visual Studio 项目文件中的 `ApplicationVersion` 生成。
- en: iOS apps can be distributed exclusively through the App Store. The package for
    submission is a file with the `.ipa` extension. Although macOS apps can also be
    distributed through the App Store, their packages can be installed directly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 应用可以通过 App Store 独家分发。提交的包是一个具有 `.ipa` 扩展名的文件。尽管 macOS 应用也可以通过 App Store
    分发，但它们的包可以直接安装。
- en: 'Although some publishing steps can be performed in a Windows environment, you
    still need to connect to a network-accessible macOS computer. To reduce the complexity,
    we use a macOS environment to build both iOS and macOS apps. Before building the
    packages, we need to update the Visual Studio project file to configure our own
    signing certificate and distribution profile:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些发布步骤可以在 Windows 环境中执行，但您仍然需要连接到一个可网络访问的 macOS 计算机。为了减少复杂性，我们使用 macOS 环境来构建
    iOS 和 macOS 应用。在构建包之前，我们需要更新 Visual Studio 项目文件以配置我们自己的签名证书和分发配置文件：
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As shown, you can use conditional configuration for both iOS and macOS builds.
    Different signing certificates and distribution profiles are used for iOS and
    macOS.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，您可以为 iOS 和 macOS 构建使用条件配置。iOS 和 macOS 使用不同的签名证书和分发配置文件。
- en: If you are not sure whether the settings are correct, you can verify them using
    `Xcode`. Creating an app in Xcode involves using the same `"com.passxyz.vault2"`
    bundler ID as our app. After that, check the configuration of **Signing**, as
    shown in *Figure 12.10*. This process allows you to compare the signing configurations
    between your Visual Studio project and the equivalent in Xcode, helping to identify
    any discrepancies or issues with the setup.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定设置是否正确，可以使用`Xcode`进行验证。在Xcode中创建一个应用涉及使用与我们的应用相同的`"com.passxyz.vault2"`捆绑ID。之后，检查**签名**配置，如图12.10所示。这个过程允许您比较Visual
    Studio项目和Xcode中相应的签名配置，帮助识别任何设置上的差异或问题。
- en: '![Figure 12.10: The iOS signing settings in Xcode](img/B21554_12_10.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图12.10：Xcode中的iOS签名设置](img/B21554_12_10.png)'
- en: 'Figure 12.10: The iOS signing settings in Xcode'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10：Xcode中的iOS签名设置
- en: If there are any issues with the signing certificate or provisioning profile,
    error messages will be reported by Xcode. Once the settings are correct in Xcode,
    the same settings can be used in the Visual Studio project without any issues.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果签名证书或配置文件存在问题，Xcode将报告错误信息。一旦Xcode中的设置正确，就可以在Visual Studio项目中使用相同的设置而不会出现任何问题。
- en: 'With all the configurations ready, we can build the `.ipa` file in the project
    folder using the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有配置就绪后，我们可以使用以下命令在项目文件夹中构建`.ipa`文件：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the command executes successfully, an `.ipa` file is generated. We can
    submit this file to the App Store. There are three methods that can be used to
    upload a package to the App Store. For more details, please refer to the following
    documentation: [https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds](https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds).'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令执行成功，将生成一个`.ipa`文件。我们可以将此文件提交到App Store。有三种方法可以用来将包上传到App Store。有关更多详细信息，请参阅以下文档：[https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds](https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds)。
- en: From the documentation, we know that we can use **Xcode**, **altool**, or **Transporter**
    to upload a package.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从文档中我们知道，我们可以使用**Xcode**、**altool**或**Transporter**上传一个包。
- en: As we are not directly utilizing Xcode to construct the .NET MAUI app, we will
    not employ Xcode to upload the build to Apple Store. If the goal is to establish
    a comprehensive CI/CD solution, **altool** can be used to upload the build to
    Apple Store.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有直接使用Xcode来构建.NET MAUI应用，因此我们不会使用Xcode将构建上传到Apple Store。如果目标是建立一个全面的CI/CD解决方案，可以使用**altool**将构建上传到Apple
    Store。
- en: However, in this chapter, our primary focus is on **Continuous Integration**
    (**CI**), leaving **Continuous Delivery** (**CD**) for you to delve into independently.
    The setup for CD often requires more account-specific configurations.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本章中，我们的主要关注点是**持续集成**（**CI**），将**持续交付**（**CD**）留给你独立深入研究。CD的设置通常需要更多的账户特定配置。
- en: 'We will use the Transporter app here. After signing in to the Transporter app,
    we can upload the package to the App Store, as shown in *Figure 12.11*:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里使用Transporter应用。在登录到Transporter应用后，我们可以将包上传到App Store，如图12.11所示：
- en: '![Figure 12.11: Uploading a package using the Transporter app](img/B21554_12_11.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图12.11：使用Transporter应用上传包](img/B21554_12_11.png)'
- en: 'Figure 12.11: Uploading a package using the Transporter app'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11：使用Transporter应用上传包
- en: The building and uploading processes of a macOS package are similar to those
    for an iOS app. There are three different frameworks (AppKit, Mac Catalyst, and
    SwiftUI) that can be employed to build macOS apps. In .NET MAUI, Mac Catalyst
    is used for platform-specific implementation.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: macOS包的构建和上传过程与iOS应用类似。有三种不同的框架（AppKit、Mac Catalyst和SwiftUI）可以用来构建macOS应用。在.NET
    MAUI中，Mac Catalyst用于平台特定的实现。
- en: By default, App Sandbox is not enabled in Mac Catalyst apps, so we need to enable
    it. To enable it in the macOS app, we need to add an `Entitlements.plist` file
    to the build configuration.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Mac Catalyst应用中未启用App沙盒，因此我们需要启用它。要在macOS应用中启用它，我们需要将一个`Entitlements.plist`文件添加到构建配置中。
- en: 'We can review the `Entitlements.plist` file in *Listing 12.2*:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看列表12.2中的`Entitlements.plist`文件：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 12.2: `Entitlements.plist` ([https://epa.ms/Entitlements12-2](https://epa.ms/Entitlements12-2))'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 列表12.2：`Entitlements.plist` ([https://epa.ms/Entitlements12-2](https://epa.ms/Entitlements12-2))
- en: Just like in the iOS build, we can verify the configuration for the macOS build
    in Xcode, as shown in *Figure 12.12*. By doing this, you ensure that the proper
    signing and provisioning setup is in place for our macOS app, before building
    and submitting it to the App Store.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在iOS构建中一样，我们可以在Xcode中验证macOS构建的配置，如图*图12.12*所示。通过这样做，您确保在构建和提交到App Store之前，我们的macOS应用程序已正确设置签名和配置。
- en: '![Figure 12.12: The macOS app’s Signing settings in Xcode](img/B21554_12_12.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图12.12：Xcode中macOS应用程序的签名设置](img/B21554_12_12.png)'
- en: 'Figure 12.12: The macOS app’s Signing settings in Xcode'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12：Xcode中macOS应用程序的签名设置
- en: 'With all configurations ready, we can build the package in our project folder
    using the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有配置就绪后，我们可以使用以下命令在我们的项目文件夹中构建包：
- en: '[PRE11]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After successfully building the package, we can upload the `.pkg` file to the
    App Store using the Transporter app, as shown in *Figure 12.13*. This will demonstrate
    that both iOS and macOS packages have been successfully uploaded to the App Store.
    You can then proceed to App Store Connect to complete the rest of the submission
    process.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功构建包之后，我们可以使用Transporter应用程序将`.pkg`文件上传到App Store，如图*图12.13*所示。这将证明iOS和macOS包已成功上传到App
    Store。然后，您可以继续到App Store Connect完成剩余的提交过程。
- en: '![Figure 12.13: Uploading the macOS app using the Transporter app](img/B21554_12_13.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图12.13：使用Transporter应用程序上传macOS应用程序](img/B21554_12_13.png)'
- en: 'Figure 12.13: Uploading the macOS app using the Transporter app'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13：使用Transporter应用程序上传macOS应用程序
- en: 'After uploading packages to Microsoft Store, Google Play Store, and Apple App
    Store, we can test the uploaded packages before the final release using the testing
    tools provided by the stores:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在将包上传到Microsoft Store、Google Play Store和Apple App Store之后，我们可以在最终发布之前使用商店提供的测试工具测试上传的包：
- en: '**Apple App Store**: **TestFlight** can be used to test iOS/macOS apps before
    the production release'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apple App Store**：**TestFlight**可以在生产发布之前用于测试iOS/macOS应用程序'
- en: '**Google Play Store**: Alpha or beta testing can be set up before the production
    release'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Play Store**：在生产发布之前可以设置Alpha或beta测试'
- en: '**Microsoft Store**: Package flights can be used on Microsoft Store to test
    uploaded packages'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Store**：包航班可以在Microsoft Store上用于测试上传的包'
- en: Now that we have learned the basic steps of preparing application packages for
    supported platforms, we can explore setting up the automated build of .NET MAUI
    app in a `CI/CD` environment, such as GitHub Actions or Azure DevOps. Implementing
    CI/CD can streamline the development and deployment process, ensuring that your
    app is continuously tested, built, and ready for release as you make updates and
    improvements.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了为支持的平台准备应用程序包的基本步骤，我们可以探索在`CI/CD`环境中设置.NET MAUI应用程序的自动化构建，例如GitHub
    Actions或Azure DevOps。实施CI/CD可以简化开发和部署过程，确保您的应用程序在您进行更新和改进时持续进行测试、构建和准备发布。
- en: GitHub Actions
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions
- en: Since our source code is hosted on GitHub, let’s use GitHub Actions as an example
    to introduce you to how to set up CI workflows for .NET MAUI development. GitHub
    Actions is an automation platform that can help streamline and automate essential
    tasks related to your project, like building, testing, and deploying code updates.
    This powerful feature ensures that your code remains verified and ready for deployment
    at any time, allowing developers to focus on writing new features and fixing bugs
    while maintaining quality assurance.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的源代码托管在GitHub上，让我们以GitHub Actions为例，向您介绍如何设置.NET MAUI开发的CI工作流程。GitHub Actions是一个自动化平台，可以帮助简化并自动化与项目相关的关键任务，如构建、测试和部署代码更新。这个强大的功能确保您的代码始终保持验证状态，随时准备部署，使开发者能够专注于编写新功能和修复错误，同时保持质量保证。
- en: Understanding GitHub Actions
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解GitHub Actions
- en: 'For .NET MAUI app development, our target is to build, test, and deploy our
    apps to app stores or specified publishing channels. In this section, we will
    focus on CI using GitHub Actions rather than both CI and CD. To deploy apps to
    various stores, there are many account-specific setup steps; please refer to the
    .NET MAUI document for the details: [https://learn.microsoft.com/en-us/dotnet/maui/deployment/](https://learn.microsoft.com/en-us/dotnet/maui/deployment/).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于.NET MAUI应用程序开发，我们的目标是构建、测试并将我们的应用程序部署到应用商店或指定的发布渠道。在本节中，我们将专注于使用GitHub Actions进行CI，而不是同时进行CI和CD。要将应用程序部署到各种商店，有许多针对特定账户的设置步骤；请参阅.NET
    MAUI文档以获取详细信息：[https://learn.microsoft.com/en-us/dotnet/maui/deployment/](https://learn.microsoft.com/en-us/dotnet/maui/deployment/).
- en: A GitHub Actions workflow is a process that automatically builds and deploys
    the deliverables from a project. The workflow usually starts from an event such
    as a `push` or `pull_request` event, or when an issue is submitted. Once a workflow
    is triggered, the defined jobs will start to perform certain tasks inside a runner.
    Each job consists of one or more steps that either run a script or an action.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions工作流程是一个自动构建和部署项目交付成果的过程。工作流程通常从`push`或`pull_request`事件等事件开始，或者当提交问题。一旦工作流程被触发，定义的作业将在运行者内部开始执行某些任务。每个作业由一个或多个步骤组成，这些步骤要么运行脚本，要么执行操作。
- en: In summary, GitHub Actions includes events, runners, jobs/steps, actions, and
    runners. These components work together to automate various tasks in your development
    and deployment process, making it more efficient and less error prone.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，GitHub Actions 包括事件、运行者、作业/步骤、操作和运行者。这些组件协同工作，以自动化你的开发和部署过程中的各种任务，使其更加高效且错误率更低。
- en: Workflows
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作流程
- en: GitHub Actions workflows are defined by a YAML file in the `.github/workflows`
    directory. YAML is a superset of JSON and provides a more human-readable language.
    A repository can have one or multiple workflows to perform different jobs. Refer
    to *Figure 12.14* to understand the workflow defined in the `PassXYZ.Vault` project.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions工作流程由`.github/workflows`目录中的YAML文件定义。YAML是JSON的超集，提供了一种更易于阅读的语言。一个仓库可以有一个或多个工作流程来执行不同的作业。参考*图12.14*了解`PassXYZ.Vault`项目中定义的工作流程。
- en: '![Figure 12.14: The workflow of Windows runner](img/B21554_12_14.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图12.14：Windows运行者的工作流程](img/B21554_12_14.png)'
- en: 'Figure 12.14: The workflow of Windows runner'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14：Windows运行者的工作流程
- en: As seen in *Figure 12.14*, this example illustrates how a workflow performs
    Android and Windows builds. A workflow is triggered by a `push` or `pull_request`
    event, or manually. It runs inside a Windows runner to perform the builds. When
    the workflow is triggered, two jobs, **Android Build** and **Windows Build**,
    begin execution. Each job includes four steps to perform the build, as depicted
    in *Figure 12.14*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图12.14*所示，此示例说明了工作流程如何执行Android和Windows构建。工作流程由`push`或`pull_request`事件触发，或手动触发。它在一个Windows运行者内部运行以执行构建。当工作流程被触发时，两个作业**Android
    Build**和**Windows Build**开始执行。每个作业包括四个步骤来执行构建，如*图12.14*所示。
- en: 'In our project, we defined the two following workflows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们定义了以下两个工作流程：
- en: '`passxyz-ci-macos.yml`: This is a workflow to build iOS and macOS on a macOS
    runner.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passxyz-ci-macos.yml`: 这是一个在macOS运行者上构建iOS和macOS的工作流程。'
- en: '`passxyz-ci-windows.yml`: This is a workflow to build Android and Windows on
    a Windows runner.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passxyz-ci-windows.yml`: 这是一个在Windows运行者上构建Android和Windows的工作流程。'
- en: 'We can see the YAML files in *Listing 12.3* and *Listing 12.4*:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*列表12.3*和*列表12.4*中看到YAML文件：
- en: '[PRE12]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 12.3: `passxyz-ci-windows.yml` ([https://epa.ms/passxyz-ci-windows12-3](https://epa.ms/passxyz-ci-windows12-3))'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '列表12.3: `passxyz-ci-windows.yml` ([https://epa.ms/passxyz-ci-windows12-3](https://epa.ms/passxyz-ci-windows12-3))'
- en: These workflow files define the steps necessary to automate the build process
    for different target platforms, helping ensure that our .NET MAUI app is always
    ready for deployment.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工作流程文件定义了自动化不同目标平台构建过程的必要步骤，有助于确保我们的.NET MAUI应用始终准备好部署。
- en: In the following sessions, we will now analyze it in detail, providing insights
    into how these workflows help automate the build process for your .NET MAUI app.
    Understanding the structure and functionality of these workflow files will enable
    you to customize and enhance your development pipeline, ensuring that your app
    is always ready for deployment and matches your specific requirements.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的会话中，我们将详细分析它，提供关于这些工作流程如何帮助自动化你的.NET MAUI应用构建过程的见解。了解这些工作流程文件的结构和功能将使你能够自定义和增强你的开发流程，确保你的应用始终准备好部署并满足你的特定要求。
- en: Events
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件
- en: Events are crucial in triggering the workflow, and they are defined after the
    `on:` keyword **(1)**. In the previous workflow, we defined the `push` **(2)**,
    `pull_request` **(3)** and `workflow_dispatch` **(4)** events. For both `push`
    and `pull_request` events, we monitor the activities on the main branch, and we
    also don’t ignore any build-related commits such as markdown files or configuration
    files.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 事件对于触发工作流程至关重要，并且它们在`on:`关键字**（1**）之后定义。在先前的流程中，我们定义了`push`**（2**），`pull_request`**（3**）和`workflow_dispatch`**（4**）事件。对于`push`和`pull_request`事件，我们监控主分支的活动，并且也不忽略任何与构建相关的提交，例如Markdown文件或配置文件。
- en: 'For more information on events that can be used to trigger workflows, please
    refer to the following GitHub documentation: [https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows).'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 有关可用于触发工作流程的事件的更多信息，请参阅以下 GitHub 文档：[https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows)。
- en: Understanding the events triggering workflows enables you to customize when
    specific actions should be executed in response to changes in your project. This
    helps maintain your app’s quality while accommodating the unique needs of your
    development process.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 理解触发工作流程的事件可以使您自定义在项目更改时执行特定操作的时间。这有助于在适应您独特的开发流程需求的同时维护应用程序的质量。
- en: Jobs
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: 'When a workflow is triggered, it initiates the execution of the defined jobs.
    Jobs are defined after the `jobs`: **(5)** keyword. One or more jobs can be defined
    within a workflow, each identified by a job ID, such as `build-android` **(6)**.
    In *Listing 12.3*, there are two jobs, `build-android` and `build-windows`. Each
    job can define a name, a runner, and multiple steps.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '当工作流程被触发时，它将启动定义的任务的执行。任务在 `jobs`: **(5)** 关键字之后定义。一个或多个任务可以在工作流程中定义，每个任务通过一个任务
    ID 来标识，例如 `build-android` **(6)**。在 *Listing 12.3* 中有两个任务，`build-android` 和 `build-windows`。每个任务都可以定义一个名称、一个运行器和多个步骤。'
- en: Jobs are the core components of a workflow, containing a sequence of tasks that
    need to be executed when certain events occur. By defining jobs specific to your
    app’s development needs, you can ensure that the correct actions are taken during
    the build process, leading to a smoother and more efficient development pipeline.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 任务是工作流程的核心组件，包含在特定事件发生时需要执行的任务序列。通过定义针对您应用程序开发需求特定的任务，您可以在构建过程中确保采取正确的操作，从而实现更流畅、更高效的开发流程。
- en: Runners
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行器
- en: 'A runner is the type of platform that runs the job. In our configuration, both
    Android and Windows jobs are executed using Windows runners. The runner is defined
    after the `runs-on`: **(7)** keyword. For more information on the configuration
    of runners, please refer to the GitHub Actions documentation. The runner that
    we use is `windows-latest`, which is the label of the runner image.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '运行器是执行任务的平台类型。在我们的配置中，Android 和 Windows 任务都使用 Windows 运行器执行。运行器在 `runs-on`:
    **(7)** 关键字之后定义。有关运行器配置的更多信息，请参阅 GitHub Actions 文档。我们使用的运行器是 `windows-latest`，这是运行器镜像的标签。'
- en: Choosing the right runner for your jobs is essential for ensuring that your
    app builds correctly and efficiently. By understanding the available runner options
    and their pre-installed tools, you can better tailor your development pipeline
    to the unique needs of your .NET MAUI app.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 选择适合您任务的正确运行器对于确保您的应用程序正确且高效地构建至关重要。通过了解可用的运行器选项及其预安装的工具，您可以更好地根据您的 .NET MAUI
    应用程序的独特需求定制您的开发流程。
- en: Steps
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤
- en: 'Multiple steps can be defined within a job, and they are defined after the
    `steps`: **(8)** keyword. In both Android and Windows builds, there are multiple
    steps: *checkout*, *install .NET MAUI workload*, *restore dependencies*, *build*,
    and *upload*. Each step can run a script or an action. In the checkout step, a
    `checkout` action is used after the `uses:` **(9)** keyword. An action is a custom
    application in the GitHub Actions platform to perform a complex but frequent repeated
    task. Using actions allows for code reuse, similar to how components function
    in object-oriented programming. To use an action, simply specify the action name
    with an optional version number. In our script, we can specify the checkout action
    as `actions/checkout@v3`.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '在任务中可以定义多个步骤，它们在 `steps`: **(8)** 关键字之后定义。在 Android 和 Windows 构建中，存在多个步骤：*checkout*、*install
    .NET MAUI workload*、*restore dependencies*、*build* 和 *upload*。每个步骤都可以运行一个脚本或操作。在
    checkout 步骤中，在 `uses:` **(9)** 关键字之后使用 `checkout` 动作。操作是 GitHub Actions 平台上的自定义应用程序，用于执行复杂但频繁重复的任务。使用操作允许代码重用，类似于面向对象编程中组件的功能。要使用操作，只需指定操作名称和可选的版本号。在我们的脚本中，我们可以将
    checkout 操作指定为 `actions/checkout@v3`。'
- en: 'The source code of the `checkout` action is hosted on GitHub and can be found
    at the following site: [https://github.com/actions/checkout](https://github.com/actions/checkout).'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkout` 动作的源代码托管在 GitHub 上，可以在以下网站找到：[https://github.com/actions/checkout](https://github.com/actions/checkout)。'
- en: 'Once the source code is checked out, we need to install the .NET MAUI workload
    using the following command after the `run`: syntax:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦检出源代码，我们需要在 `run` 语法之后使用以下命令安装 .NET MAUI 工作负载：
- en: '[PRE13]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the restore and build steps, we can run the following `dotnet` command after
    the `run`: syntax:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在恢复和构建步骤中，我们可以在 `run` 语法之后的 `dotnet` 命令运行以下内容：
- en: '[PRE14]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After the build is completed, we can upload the artifact using another `upload-artifact`
    action.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，我们可以使用另一个 `upload-artifact` 动作上传工件。
- en: 'We have introduced the `passxyz-ci-windows.yml` workflow, which performs Android
    and Windows builds. Now, let’s review the `passxyz-ci-macos.yml` workflow, which
    performs iOS and macOS builds, in *Listing 12.4*:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经引入了 `passxyz-ci-windows.yml` 工作流程，该工作流程执行 Android 和 Windows 构建。现在，让我们回顾
    `passxyz-ci-macos.yml` 工作流程，该工作流程执行 iOS 和 macOS 构建，如*清单 12.4*所示：
- en: '[PRE15]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 12.4: `passxyz-ci-macos.yml` ([https://epa.ms/passxyz-ci-macos12-4](https://epa.ms/passxyz-ci-macos12-4))'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 12.4：`passxyz-ci-macos.yml` ([https://epa.ms/passxyz-ci-macos12-4](https://epa.ms/passxyz-ci-macos12-4))
- en: This workflow follows similar principles and includes steps to restore, install,
    build, and upload artifacts for the iOS and macOS versions of our .NET MAUI app.
    The difference here is that the `macos-14` **(1)** runner is used. The rest of
    the steps are similar to a Windows or Android build.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此工作流程遵循类似的原则，包括恢复、安装、构建和上传 iOS 和 macOS 版本的 .NET MAUI 应用的工件步骤。这里的区别在于使用了 `macos-14`
    **(1)** 运行器。其余步骤与 Windows 或 Android 构建类似。
- en: We have now introduced the configuration of all builds in GitHub Actions. You
    can check the build status on GitHub to see how the app builds will progress and
    succeed in our .NET MAUI project. Monitoring build statuses can help you identify
    any potential issues with your app during the development process and maintain
    the quality of your code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经介绍了在 GitHub Actions 中配置所有构建的过程。您可以在 GitHub 上检查构建状态，以查看应用构建在 .NET MAUI
    项目中的进展和成功情况。监控构建状态可以帮助您在开发过程中识别任何潜在的应用问题，并保持代码质量。
- en: '![Figure 12.15: The Android and Windows build status](img/B21554_12_15.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.15：Android 和 Windows 构建状态](img/B21554_12_15.png)'
- en: 'Figure 12.15: The Android and Windows build status'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15：Android 和 Windows 构建状态
- en: As seen in *Figure 12.15*, both the Android and Windows builds are completed
    successfully. The build artifacts can be downloaded from GitHub after the build
    is finished. This ensures you have access to the latest app builds, making it
    easier to distribute them for testing or deployment.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 12.15*所示，Android 和 Windows 构建均成功完成。构建工件可以在构建完成后从 GitHub 下载。这确保了您能够访问最新的应用构建版本，使得分发它们进行测试或部署变得更加容易。
- en: '![Figure 12.16: The iOS and MacCatalyst build status](img/B21554_12_16.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.16：iOS 和 MacCatalyst 构建状态](img/B21554_12_16.png)'
- en: 'Figure 12.16: The iOS and MacCatalyst build status'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.16：iOS 和 MacCatalyst 构建状态
- en: As seen in *Figure 12.16*, both the iOS and Mac Catalyst builds completed successfully.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 12.16*所示，iOS 和 Mac Catalyst 构建均成功完成。
- en: By successfully configuring GitHub Actions for your .NET MAUI project, you can
    maintain a CI process that ensures the quality of your code and streamlines development.
    Furthermore, this automated workflow simplifies the management of app builds and
    allows developers to focus on feature development and bug fixing.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 通过成功配置 GitHub Actions 以支持您的 .NET MAUI 项目，您可以维护一个持续集成（CI）流程，确保代码质量并简化开发过程。此外，这个自动化工作流程简化了应用构建的管理，使开发者能够专注于功能开发和错误修复。
- en: We have now concluded the introduction to packaging our app for app store submissions
    and automating the build process using GitHub Actions. With these techniques in
    place, you can ensure a smoother and more efficient development pipeline for your
    .NET MAUI app, resulting in higher quality code and quicker deployments to the
    app stores.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经介绍了如何使用 GitHub Actions 自动化打包应用以供应用商店提交的过程。有了这些技术，您可以确保您的 .NET MAUI 应用开发流程更加顺畅和高效，从而实现代码质量更高，应用商店部署更快。
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: CI/CD are common practices in today’s development process. In this chapter,
    we introduced how to prepare a build so that the resulting packages can be used
    for the submission to various app stores. The process after the submission of
    build packages is not covered, since they are platform- and account-specific topics.
    Please refer to the *Further reading* section to find out more about how to publish
    applications to Google Play, Apple Store, and Microsoft Store.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 是当今开发过程中的常见实践。在本章中，我们介绍了如何准备构建，以便生成的包可以用于提交到各种应用商店。构建包提交之后的流程没有涵盖，因为这些是特定于平台和账户的话题。请参阅*进一步阅读*部分，了解更多关于如何将应用程序发布到
    Google Play、Apple Store 和 Microsoft Store 的信息。
- en: After discussing the build process of each platform, we demonstrated how to
    automate the process using GitHub Actions.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论了每个平台的构建过程之后，我们展示了如何使用 GitHub Actions 自动化此过程。
- en: With all the skills that you’ve learned from this book, you should be able to
    develop your own .NET MAUI applications and be ready to submit your apps to supported
    app stores. As you continue to grow as a developer, remember to explore new techniques
    and refine your understanding of .NET MAUI to create even better applications
    and streamline your development process.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本书您所学的所有技能，您应该能够开发自己的 .NET MAUI 应用程序，并准备好将您的应用程序提交到支持的 App Store。随着您作为开发者的成长，请记住探索新技术并深化对
    .NET MAUI 的理解，以创建更好的应用程序并简化您的开发流程。
- en: 'Here are some online resources to learn .NET MAUI and stay up to date with
    the latest trends and news:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些在线资源，可以帮助您学习 .NET MAUI 并了解最新的趋势和新闻：
- en: '**Official .NET Blog**: The Microsoft .NET team frequently posts updates and
    tutorials on .NET MAUI.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**官方 .NET 博客**：微软 .NET 团队经常发布关于 .NET MAUI 的更新和教程。'
- en: '**.NET MAUI GitHub repository**: This is the official repository of .NET MAUI.
    You can find the latest code, issues, and discussions about .NET MAUI here.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET MAUI GitHub 仓库**：这是 .NET MAUI 的官方仓库。您在这里可以找到最新的代码、问题和关于 .NET MAUI 的讨论。'
- en: '**Microsoft docs**: This is the official documentation by Microsoft, and it
    provides a comprehensive guide to learning .NET MAUI.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft 文档**：这是微软的官方文档，它提供了学习 .NET MAUI 的全面指南。'
- en: '**Microsoft Learn**: Platform to find various learning paths and modules. You
    can find resources for .NET and possibly future content about .NET MAUI.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Learn**：一个可以找到各种学习路径和模块的平台。您可以找到关于 .NET 的资源，以及可能关于 .NET MAUI 的未来内容。'
- en: '.**NET Community Standups**: Regular community standups hosted by Microsoft
    engineers, where they discuss the latest trends and updates to .NET MAUI.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .**NET 社区站立会议**：由微软工程师主持的定期社区站立会议，他们在这里讨论最新的趋势和 .NET MAUI 的更新。
- en: '**Stack Overflow**: A question and answer site for professional and enthusiast
    programmers.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stack Overflow**：一个专业和爱好者程序员的问答网站。'
- en: '.**NET MAUI YouTube tutorials**: You can learn .NET MAUI by watching step-by-step
    tutorials on YouTube. For example, the Xamarin Developers YouTube channel posts
    tutorials and discussions about .NET MAUI.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .**NET MAUI YouTube 教程**：您可以通过在 YouTube 上观看分步教程来学习 .NET MAUI。例如，Xamarin 开发者
    YouTube 频道发布了关于 .NET MAUI 的教程和讨论。
- en: '**Twitter**: Follow the official .NET account (`@dotnet`) and other Microsoft
    developers for the latest updates and developments.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Twitter**：关注官方 .NET 账号 (`@dotnet`) 和其他微软开发者，获取最新的更新和发展动态。'
- en: Further reading
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Getting Started with DevOps and .NET MAUI: [https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/](https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 DevOps 和 .NET MAUI：[https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/](https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/)
- en: 'Upload your app to the Play Console: [https://developer.android.com/studio/publish/upload-bundle](https://developer.android.com/studio/publish/upload-bundle)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的应用程序上传到 Play Console：[https://developer.android.com/studio/publish/upload-bundle](https://developer.android.com/studio/publish/upload-bundle)
- en: 'Publish a .NET MAUI iOS app: [https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/?view=net-maui-8.0)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布 iOS 平台的 .NET MAUI 应用程序：[https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/?view=net-maui-8.0)
- en: 'Publish a .NET MAUI Mac Catalyst app: [https://learn.microsoft.com/en-us/dotnet/maui/mac-catalyst/deployment/?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/mac-catalyst/deployment/?view=net-maui-8.0)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布 Mac Catalyst 平台的 .NET MAUI 应用程序：[https://learn.microsoft.com/en-us/dotnet/maui/mac-catalyst/deployment/?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/mac-catalyst/deployment/?view=net-maui-8.0)
- en: 'Publish a .NET MAUI app for Android: [https://learn.microsoft.com/en-us/dotnet/maui/android/deployment/overview?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/android/deployment/overview?view=net-maui-8.0)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布 Android 平台的 .NET MAUI 应用程序：[https://learn.microsoft.com/en-us/dotnet/maui/android/deployment/overview?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/android/deployment/overview?view=net-maui-8.0)
- en: 'Publish a .NET MAUI app for Windows: [https://learn.microsoft.com/en-us/dotnet/maui/windows/deployment/overview?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/windows/deployment/overview?view=net-maui-8.0)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布 Windows 平台的 .NET MAUI 应用程序：[https://learn.microsoft.com/en-us/dotnet/maui/windows/deployment/overview?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/windows/deployment/overview?view=net-maui-8.0)
- en: 'Upload iOS builds to Apple Store: [https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds](https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '将 iOS 构建上传到 Apple Store: [https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds](https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds)'
- en: Leave a review!
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 留下评论！
- en: '*Enjoyed this book? Help readers like you by leaving an Amazon review. Scan
    the QR code below for a 40% discount code.*'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*喜欢这本书吗？通过留下亚马逊评论来帮助像你一样的读者。扫描下面的二维码获取 40% 的折扣码。*'
- en: '![](img/Leave_a_review_QR.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Leave_a_review_QR.png)'
- en: '**Limited Offer*'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**限时优惠**'
