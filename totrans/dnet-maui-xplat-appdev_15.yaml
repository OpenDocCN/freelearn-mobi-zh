- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying and Publishing in App Stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After completing the development work, our aim is to publish our app on various
    app stores. Since .NET MAUI is a cross-platform framework, we can build the same
    source code for Android, iOS, macOS, and Windows. While it’s possible to deploy
    our app to a repository such as GitHub, most users on these platforms rely on
    app stores. As a result, we need to understand how to prepare our app for different
    app stores. That is the focus of this chapter. In this chapter, we will discuss
    the steps required to prepare the application packages before publishing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing application packages for publishing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating the build process using GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To test and debug the source code in this chapter, we need to install .NET MAUI
    on Windows and macOS. For complete details about environment setup, please refer
    to the *Development environment setup* section in *Chapter 1*, *Getting Started
    with .NET MAUI*.
  prefs: []
  type: TYPE_NORMAL
- en: We will build Windows and Android packages using Windows, while iOS and macOS
    packages will be built using macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter can be found at the following GitHub repository:
    [https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/tree/main/2nd/chapter12](https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/tree/65b2d502abe294c0e121ef0536b9bd1c6a7b79f3).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To check out the source code for this chapter, use the command below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For more information about the source code in this book, please refer to the
    *Managing the source code in this book* section in *Chapter 2*, *Building Our
    First .NET MAUI App*.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing application packages for publishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, minimal platform-specific knowledge was required for .NET
    MAUI development. However, when preparing to publish our app to individual app
    stores, we cannot avoid addressing platform-specific information. In this chapter,
    we will discuss the necessary steps to prepare the app for publishing, and then
    we will show how to automate the process using GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous CI/CD tools available for automating the build and deployment
    process. For .NET MAUI, both GitHub Actions and Azure DevOps are viable options.
    You can refer to the *Further reading* section for more details about other alternatives.
    However, in this chapter, our primary emphasis will be on employing GitHub Actions
    as a build and deployment instrument.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for publishing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for publishing, we will focus on the tasks that need to be completed
    before submitting the package to an app store. For information about the actual
    publishing process, please refer to the documentation provided by each app store.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the preparation for publishing, we aim to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How is an app identified in the app store?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How are the app developers identified?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which devices can the app support?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and signing application packages on different platforms require platform-specific
    configurations. In .NET MAUI, the platform-specific information is included in
    the Visual Studio project file and the platform-specific configuration file. Conditional
    compilation is used in the Visual Studio project file to specify platform-specific
    information. Refer to *Table 12.1* for an overview of the necessary changes for
    each platform.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Item** | **Android** | **Windows** | **iOS** | **macOS** |'
  prefs: []
  type: TYPE_TB
- en: '| Package format | `.apk/.aab` | `.msix` | `.ipa` | `.app/.pkg` |'
  prefs: []
  type: TYPE_TB
- en: '| Signing | `Keystore` | Signing certificate`Package.StoreAssociation.xml`
    | Distrubution certificateDistribution profile |'
  prefs: []
  type: TYPE_TB
- en: '| ApplicationId | `package="com.passxyz.vault2"` | `Publisher="CN=F81DB 4B-AF4A-473E-ADEA-A55EE7432C05"`
    | `<key>CFBundleIdentifier</key>``<string>com.passxyz.vault2</string>` |'
  prefs: []
  type: TYPE_TB
- en: '| ApplicationVersion | `android:versionCode="1"` | `Version="0.3.8.0"` | `<key>CFBundleVersion</key>``<string>2</string>`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Configuration file | `AndroidManifest.xml` | `Package.appxmanifest` | `Info.plost`
    |'
  prefs: []
  type: TYPE_TB
- en: 'Table 12.1: The build configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '*Table 12.1* outlines how to identify an app using the `ApplicationId` and
    `ApplicationVersion` variables defined in the Visual Studio project file. For
    each platform, a specific platform configuration file is used.'
  prefs: []
  type: TYPE_NORMAL
- en: For Android distribution, either a `.apk` file or `.aab` file is generated.
    The `.apk` file is the original Android package format used to install app packages
    on devices or emulators, while the `.aab` file is used for submission to Google
    Play Store. Before submission, we need to sign the package using a Keystore. `ApplicationId`
    and `ApplicationVersion` are mapped to a package ID and version code in the Android
    configuration file `AndroidManifest.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: For iOS or macOS distribution, a `.ipa` file is generated for iOS, and either
    a `.app` or `.pkg` file is generated for macOS. To sign an iOS or macOS package,
    we need a distribution certificate and a distribution profile. The `ApplicationId`
    is mapped to the bundle ID, and `ApplicationVersion` is mapped to the bundle version
    in `Info.plist`.
  prefs: []
  type: TYPE_NORMAL
- en: For Windows distribution, the MSIX package format is used, and the package is
    built with the `.msix` file extension. Windows employs a **universally unique
    identifier** (**UUID**) as the `ApplicationId`, which is generated as `ApplicationGuid`.
  prefs: []
  type: TYPE_NORMAL
- en: The `ApplicationVersion` is mapped to the `Version` attribute of the `Identity`
    tag in `Package.appxmanifest`.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is MSIX?**'
  prefs: []
  type: TYPE_NORMAL
- en: MSIX is a modern Windows app package format designed for all Windows apps. It
    aims to provide a more reliable and secure installation process, along with enhanced
    system resource usage and simplified updates. MSIX allows developers to package
    and distribute their applications through various channels, including Microsoft
    Store, web, or third-party platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on MSIX, please refer to the Microsoft documentation:
    [https://learn.microsoft.com/en-us/windows/msix/overview](https://learn.microsoft.com/en-us/windows/msix/overview).'
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will explain how to generate release packages
    for each platform. We will build Windows and Android packages on Windows, while
    iOS and macOS packages will be built on macOS. We will demonstrate how to accomplish
    this using both Visual Studio and the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing to Microsoft Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can build a `.msix` package for Microsoft Store using either Visual Studio
    or the command line on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, we need to set the target framework as `net8.0-windows10.0.19041.0`
    and set the build type to `Release`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we can right-click on the project node and select the `Publish…`
    menu item.
  prefs: []
  type: TYPE_NORMAL
- en: 'A window will appear with the **Select distribution method** option (*Figure
    12.1*). Here, select **Microsoft Store under a new app name** and click the **Next**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21554_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Select distribution method'
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding to the next step, as shown in *Figure 12.2*, we need to have
    an app name ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new app name, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit **Microsoft Store Developer Dashboard** at the following URL: [https://partner.microsoft.com/en-us/dashboard/](https://partner.microsoft.com/en-us/dashboard/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register and create a new app name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we have an app name, we can associate it with our app, as shown in *Figure
    12.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2: Associating your app with Microsoft Store](img/B21554_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Associating your app with Microsoft Store'
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the **Next** button, Visual Studio will search for the app name
    in Microsoft Store. The app name created in Microsoft Store, as shown in *Figure
    12.3*, will be retrieved for you to continue the publishing process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3: Selecting an app name](img/B21554_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Selecting an app name'
  prefs: []
  type: TYPE_NORMAL
- en: After selecting the app name, click the **Next** button. A screen to select
    and configure packages will appear, as shown in *Figure 12.4*. Here, we can choose
    the packages for our app and configure additional settings before proceeding with
    the publication process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4: Selecting and configuring packages](img/B21554_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Selecting and configuring packages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To continue the process, we need to create a publish profile here. To create
    an MSIX publish profile, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the drop-down menu under **Publishing profile**. A dialog will be displayed,
    as shown in *Figure 12.4*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking the **OK** button in the dialog box to create a new MSIX publish profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we have a publish profile, click on the **Create** button (which will now
    be active) to create the package. The build and package creation process may take
    some time. Upon completion, we will see a screen similar to the one depicted in
    *Figure 12.5*, indicating that the MSIX package is ready for submission.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5: An MSIX package](img/B21554_12_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: An MSIX package'
  prefs: []
  type: TYPE_NORMAL
- en: The location of the new package is shown in *Figure 12.5*. There is an option
    to verify the package by running the **Windows App Certification Kit.**
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding steps, two files related to the app’s publication will have
    been created in the `project` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Package.StoreAssociation.xml`: this file associates the app with Microsoft
    Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Properties\PublishProfiles\MSIX-win10-x86.pubxml`: this is the publish profile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both files may contain sensitive information, so they should not be checked
    into the Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'To integrate the build process in the CI/CD environment, we need to execute
    the build process using the command line. To build a `.msix` package using the
    command line, execute the following command from the project folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once the `.msix` package is built, we can upload it to Microsoft Store in the
    `Packages` section of the app submission.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing to Google Play Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for submission to Google Play Store, you need to create a new app
    in the Google Play Console. A Google account is required to create a new app in
    the Google Play Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every Android app has a unique application ID or package ID, which is defined
    in the configuration file, `AndroidManifest.xml`. This configuration file is generated
    by Visual Studio from the project file and can be found at `Platforms/Android/AndroidManifest.xml`.
    Let’s review the `AndroidManifest.xml` of our app in *Listing 12.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 12.1: `AndroidManifest.xml` ([https://epa.ms/AndroidManifest12-1](https://epa.ms/AndroidManifest12-1))'
  prefs: []
  type: TYPE_NORMAL
- en: In our app, the application ID is `"com.passxyz.vault2"` **(1)**, which is generated
    from `ApplicationId`, and the version is the value of `android:versionCode` **(2)**,
    which is generated from `ApplicationVersion`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The declaration of the app identifier and version can be found in the `PassXYZ.Vault.csproj`
    project file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To sign an Android package, we need to create a Keystore file. For information
    on creating a Keystore file and signing an Android app, refer to the following
    Android documentation: [https://developer.android.com/studio/publish/app-signing](https://developer.android.com/studio/publish/app-signing).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have a Keystore file and have prepared the required configuration,
    follow these steps in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the target framework as `net8.0-android` and the build type as `Release`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the project node and select **Publish…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing these steps, the build will start, and an archive will be
    created, as shown in *Figure 12.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6: Creating an archive for Android](img/B21554_12_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Creating an archive for Android'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the package is created, we can sign it by clicking the **Distribute…**
    button. Then, we will need to choose a distribution channel, as shown in *Figure
    12.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7: Selecting a channel](img/B21554_12_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: Selecting a channel'
  prefs: []
  type: TYPE_NORMAL
- en: Although it is possible to sign and submit the package by selecting **Google
    Play**, we will choose **Ad Hoc** for signing. We will manually submit the signed
    package to Google Play later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon selecting `Ad Hoc`, we will be presented with a different screen, as shown
    in *Figure 12.8*, where we can proceed with the process of signing our Android
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8: Signing Identity using a Keystore file](img/B21554_12_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.8: Signing Identity using a Keystore file'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 12.8*, click the **+** button to add a Keystore file. After
    adding the Keystore file, click the **Save As** button to sign the package.
  prefs: []
  type: TYPE_NORMAL
- en: The signed `.aab` file can be submitted to Google Play Store through the Google
    Play Console.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have an existing Keystore file, you can follow the guide mentioned
    earlier to create a new one. The default location of Keystore files is `%USERPROFILE%\AppData\Local\Xamarin\Mono
    for Android\Keystore\`.
  prefs: []
  type: TYPE_NORMAL
- en: It’s critical to securely store your keystore file and password, as they will
    be required again when you submit an updated version of your application to the
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select the **Google Play** option in *Figure 12.7*, the screen displayed
    is as shown in *Figure 12.9*. You will then need to access the Google Play API
    using your **Client Id** and **Client Secret**. Despite the **Google Play** and
    **Ad Hoc** options sharing strong similarities, selecting **Google Play** allows
    you to automatically submit the build result to Google Play Store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21554_12_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.9: Connect to Google Play Store using your Client ID and Client Secret'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the package from the command line, execute the following command
    in the project folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn how to upload a signed Android app bundle to Google Play Store, please
    refer to the following Android document: [https://developer.android.com/studio/publish/upload-bundle](https://developer.android.com/studio/publish/upload-bundle).'
  prefs: []
  type: TYPE_NORMAL
- en: Publishing to Apple’s App Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can discuss the submission of an iOS or macOS app to the App Store simultaneously,
    since they share many similarities.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will be discussing the process of building, signing, and
    deploying .NET MAUI apps for iOS and macOS using a macOS environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building, signing, and deploying .NET MAUI apps for iOS or macOS requires specific
    tooling and environments, due to Apple’s requirements. Here’s what you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS**: Because of Apple’s restrictions, you must build iOS and macOS applications
    on a Mac. This can be a local machine, or you could use a cloud macOS environment
    like GitHub Actions or Azure Pipelines, which offers hosted macOS agents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xcode**: Install the latest stable version of Xcode. This is required for
    iOS SDKs and simulators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.NET 8**: .NET MAUI is built on .NET 8, so you will need the .NET 8 SDK installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MAUI**: Install the latest stable version of .NET MAUI, including the .NET
    MAUI workload and templates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apple Developer account**: To sign and deploy an app to the App Store, you
    will need an Apple Developer account. This requires an annual subscription fee
    but is necessary to distribute your apps to users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provisioning profiles and certificates**: To sign your app, you will need
    a provisioning profile and a matching distribution certificate. You can create
    and manage these in the Apple Developer portal or automatically manage them through
    Xcode. For details on how to create a signing certificate and a provisioning profile,
    refer to the following document: [https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/provision](https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/provision).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To simultaneously fulfill the needs of Xamarin and .NET MAUI builds, you might
    have multiple Xcode installations on your macOS. You can check for all Xcode installations
    on your Mac with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To check the currently selected Xcode, you can use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to choose a specific Xcode version, the following command can be
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once these tools are installed and set up, you can build, sign, and deploy your
    .NET MAUI apps for iOS or macOS using the .NET CLI for command-line builds and
    deployments.
  prefs: []
  type: TYPE_NORMAL
- en: In iOS or macOS apps, the bundler identifier and bundler version are used to
    identify an app. This information is stored in the `Info.plist` configuration
    file. The bundler identifier is generated from `ApplicationId`, and the bundler
    version is generated from `ApplicationVersion` in the Visual Studio project file.
  prefs: []
  type: TYPE_NORMAL
- en: iOS apps can be distributed exclusively through the App Store. The package for
    submission is a file with the `.ipa` extension. Although macOS apps can also be
    distributed through the App Store, their packages can be installed directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although some publishing steps can be performed in a Windows environment, you
    still need to connect to a network-accessible macOS computer. To reduce the complexity,
    we use a macOS environment to build both iOS and macOS apps. Before building the
    packages, we need to update the Visual Studio project file to configure our own
    signing certificate and distribution profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As shown, you can use conditional configuration for both iOS and macOS builds.
    Different signing certificates and distribution profiles are used for iOS and
    macOS.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not sure whether the settings are correct, you can verify them using
    `Xcode`. Creating an app in Xcode involves using the same `"com.passxyz.vault2"`
    bundler ID as our app. After that, check the configuration of **Signing**, as
    shown in *Figure 12.10*. This process allows you to compare the signing configurations
    between your Visual Studio project and the equivalent in Xcode, helping to identify
    any discrepancies or issues with the setup.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10: The iOS signing settings in Xcode](img/B21554_12_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.10: The iOS signing settings in Xcode'
  prefs: []
  type: TYPE_NORMAL
- en: If there are any issues with the signing certificate or provisioning profile,
    error messages will be reported by Xcode. Once the settings are correct in Xcode,
    the same settings can be used in the Visual Studio project without any issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'With all the configurations ready, we can build the `.ipa` file in the project
    folder using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command executes successfully, an `.ipa` file is generated. We can
    submit this file to the App Store. There are three methods that can be used to
    upload a package to the App Store. For more details, please refer to the following
    documentation: [https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds](https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds).'
  prefs: []
  type: TYPE_NORMAL
- en: From the documentation, we know that we can use **Xcode**, **altool**, or **Transporter**
    to upload a package.
  prefs: []
  type: TYPE_NORMAL
- en: As we are not directly utilizing Xcode to construct the .NET MAUI app, we will
    not employ Xcode to upload the build to Apple Store. If the goal is to establish
    a comprehensive CI/CD solution, **altool** can be used to upload the build to
    Apple Store.
  prefs: []
  type: TYPE_NORMAL
- en: However, in this chapter, our primary focus is on **Continuous Integration**
    (**CI**), leaving **Continuous Delivery** (**CD**) for you to delve into independently.
    The setup for CD often requires more account-specific configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the Transporter app here. After signing in to the Transporter app,
    we can upload the package to the App Store, as shown in *Figure 12.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11: Uploading a package using the Transporter app](img/B21554_12_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.11: Uploading a package using the Transporter app'
  prefs: []
  type: TYPE_NORMAL
- en: The building and uploading processes of a macOS package are similar to those
    for an iOS app. There are three different frameworks (AppKit, Mac Catalyst, and
    SwiftUI) that can be employed to build macOS apps. In .NET MAUI, Mac Catalyst
    is used for platform-specific implementation.
  prefs: []
  type: TYPE_NORMAL
- en: By default, App Sandbox is not enabled in Mac Catalyst apps, so we need to enable
    it. To enable it in the macOS app, we need to add an `Entitlements.plist` file
    to the build configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can review the `Entitlements.plist` file in *Listing 12.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 12.2: `Entitlements.plist` ([https://epa.ms/Entitlements12-2](https://epa.ms/Entitlements12-2))'
  prefs: []
  type: TYPE_NORMAL
- en: Just like in the iOS build, we can verify the configuration for the macOS build
    in Xcode, as shown in *Figure 12.12*. By doing this, you ensure that the proper
    signing and provisioning setup is in place for our macOS app, before building
    and submitting it to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.12: The macOS app’s Signing settings in Xcode](img/B21554_12_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.12: The macOS app’s Signing settings in Xcode'
  prefs: []
  type: TYPE_NORMAL
- en: 'With all configurations ready, we can build the package in our project folder
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After successfully building the package, we can upload the `.pkg` file to the
    App Store using the Transporter app, as shown in *Figure 12.13*. This will demonstrate
    that both iOS and macOS packages have been successfully uploaded to the App Store.
    You can then proceed to App Store Connect to complete the rest of the submission
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13: Uploading the macOS app using the Transporter app](img/B21554_12_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.13: Uploading the macOS app using the Transporter app'
  prefs: []
  type: TYPE_NORMAL
- en: 'After uploading packages to Microsoft Store, Google Play Store, and Apple App
    Store, we can test the uploaded packages before the final release using the testing
    tools provided by the stores:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apple App Store**: **TestFlight** can be used to test iOS/macOS apps before
    the production release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Play Store**: Alpha or beta testing can be set up before the production
    release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Store**: Package flights can be used on Microsoft Store to test
    uploaded packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have learned the basic steps of preparing application packages for
    supported platforms, we can explore setting up the automated build of .NET MAUI
    app in a `CI/CD` environment, such as GitHub Actions or Azure DevOps. Implementing
    CI/CD can streamline the development and deployment process, ensuring that your
    app is continuously tested, built, and ready for release as you make updates and
    improvements.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since our source code is hosted on GitHub, let’s use GitHub Actions as an example
    to introduce you to how to set up CI workflows for .NET MAUI development. GitHub
    Actions is an automation platform that can help streamline and automate essential
    tasks related to your project, like building, testing, and deploying code updates.
    This powerful feature ensures that your code remains verified and ready for deployment
    at any time, allowing developers to focus on writing new features and fixing bugs
    while maintaining quality assurance.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GitHub Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For .NET MAUI app development, our target is to build, test, and deploy our
    apps to app stores or specified publishing channels. In this section, we will
    focus on CI using GitHub Actions rather than both CI and CD. To deploy apps to
    various stores, there are many account-specific setup steps; please refer to the
    .NET MAUI document for the details: [https://learn.microsoft.com/en-us/dotnet/maui/deployment/](https://learn.microsoft.com/en-us/dotnet/maui/deployment/).'
  prefs: []
  type: TYPE_NORMAL
- en: A GitHub Actions workflow is a process that automatically builds and deploys
    the deliverables from a project. The workflow usually starts from an event such
    as a `push` or `pull_request` event, or when an issue is submitted. Once a workflow
    is triggered, the defined jobs will start to perform certain tasks inside a runner.
    Each job consists of one or more steps that either run a script or an action.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, GitHub Actions includes events, runners, jobs/steps, actions, and
    runners. These components work together to automate various tasks in your development
    and deployment process, making it more efficient and less error prone.
  prefs: []
  type: TYPE_NORMAL
- en: Workflows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GitHub Actions workflows are defined by a YAML file in the `.github/workflows`
    directory. YAML is a superset of JSON and provides a more human-readable language.
    A repository can have one or multiple workflows to perform different jobs. Refer
    to *Figure 12.14* to understand the workflow defined in the `PassXYZ.Vault` project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14: The workflow of Windows runner](img/B21554_12_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.14: The workflow of Windows runner'
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 12.14*, this example illustrates how a workflow performs
    Android and Windows builds. A workflow is triggered by a `push` or `pull_request`
    event, or manually. It runs inside a Windows runner to perform the builds. When
    the workflow is triggered, two jobs, **Android Build** and **Windows Build**,
    begin execution. Each job includes four steps to perform the build, as depicted
    in *Figure 12.14*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our project, we defined the two following workflows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`passxyz-ci-macos.yml`: This is a workflow to build iOS and macOS on a macOS
    runner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passxyz-ci-windows.yml`: This is a workflow to build Android and Windows on
    a Windows runner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can see the YAML files in *Listing 12.3* and *Listing 12.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 12.3: `passxyz-ci-windows.yml` ([https://epa.ms/passxyz-ci-windows12-3](https://epa.ms/passxyz-ci-windows12-3))'
  prefs: []
  type: TYPE_NORMAL
- en: These workflow files define the steps necessary to automate the build process
    for different target platforms, helping ensure that our .NET MAUI app is always
    ready for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sessions, we will now analyze it in detail, providing insights
    into how these workflows help automate the build process for your .NET MAUI app.
    Understanding the structure and functionality of these workflow files will enable
    you to customize and enhance your development pipeline, ensuring that your app
    is always ready for deployment and matches your specific requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Events are crucial in triggering the workflow, and they are defined after the
    `on:` keyword **(1)**. In the previous workflow, we defined the `push` **(2)**,
    `pull_request` **(3)** and `workflow_dispatch` **(4)** events. For both `push`
    and `pull_request` events, we monitor the activities on the main branch, and we
    also don’t ignore any build-related commits such as markdown files or configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on events that can be used to trigger workflows, please
    refer to the following GitHub documentation: [https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the events triggering workflows enables you to customize when
    specific actions should be executed in response to changes in your project. This
    helps maintain your app’s quality while accommodating the unique needs of your
    development process.
  prefs: []
  type: TYPE_NORMAL
- en: Jobs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a workflow is triggered, it initiates the execution of the defined jobs.
    Jobs are defined after the `jobs`: **(5)** keyword. One or more jobs can be defined
    within a workflow, each identified by a job ID, such as `build-android` **(6)**.
    In *Listing 12.3*, there are two jobs, `build-android` and `build-windows`. Each
    job can define a name, a runner, and multiple steps.'
  prefs: []
  type: TYPE_NORMAL
- en: Jobs are the core components of a workflow, containing a sequence of tasks that
    need to be executed when certain events occur. By defining jobs specific to your
    app’s development needs, you can ensure that the correct actions are taken during
    the build process, leading to a smoother and more efficient development pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Runners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A runner is the type of platform that runs the job. In our configuration, both
    Android and Windows jobs are executed using Windows runners. The runner is defined
    after the `runs-on`: **(7)** keyword. For more information on the configuration
    of runners, please refer to the GitHub Actions documentation. The runner that
    we use is `windows-latest`, which is the label of the runner image.'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right runner for your jobs is essential for ensuring that your
    app builds correctly and efficiently. By understanding the available runner options
    and their pre-installed tools, you can better tailor your development pipeline
    to the unique needs of your .NET MAUI app.
  prefs: []
  type: TYPE_NORMAL
- en: Steps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Multiple steps can be defined within a job, and they are defined after the
    `steps`: **(8)** keyword. In both Android and Windows builds, there are multiple
    steps: *checkout*, *install .NET MAUI workload*, *restore dependencies*, *build*,
    and *upload*. Each step can run a script or an action. In the checkout step, a
    `checkout` action is used after the `uses:` **(9)** keyword. An action is a custom
    application in the GitHub Actions platform to perform a complex but frequent repeated
    task. Using actions allows for code reuse, similar to how components function
    in object-oriented programming. To use an action, simply specify the action name
    with an optional version number. In our script, we can specify the checkout action
    as `actions/checkout@v3`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code of the `checkout` action is hosted on GitHub and can be found
    at the following site: [https://github.com/actions/checkout](https://github.com/actions/checkout).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the source code is checked out, we need to install the .NET MAUI workload
    using the following command after the `run`: syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the restore and build steps, we can run the following `dotnet` command after
    the `run`: syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After the build is completed, we can upload the artifact using another `upload-artifact`
    action.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have introduced the `passxyz-ci-windows.yml` workflow, which performs Android
    and Windows builds. Now, let’s review the `passxyz-ci-macos.yml` workflow, which
    performs iOS and macOS builds, in *Listing 12.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 12.4: `passxyz-ci-macos.yml` ([https://epa.ms/passxyz-ci-macos12-4](https://epa.ms/passxyz-ci-macos12-4))'
  prefs: []
  type: TYPE_NORMAL
- en: This workflow follows similar principles and includes steps to restore, install,
    build, and upload artifacts for the iOS and macOS versions of our .NET MAUI app.
    The difference here is that the `macos-14` **(1)** runner is used. The rest of
    the steps are similar to a Windows or Android build.
  prefs: []
  type: TYPE_NORMAL
- en: We have now introduced the configuration of all builds in GitHub Actions. You
    can check the build status on GitHub to see how the app builds will progress and
    succeed in our .NET MAUI project. Monitoring build statuses can help you identify
    any potential issues with your app during the development process and maintain
    the quality of your code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15: The Android and Windows build status](img/B21554_12_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.15: The Android and Windows build status'
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 12.15*, both the Android and Windows builds are completed
    successfully. The build artifacts can be downloaded from GitHub after the build
    is finished. This ensures you have access to the latest app builds, making it
    easier to distribute them for testing or deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.16: The iOS and MacCatalyst build status](img/B21554_12_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.16: The iOS and MacCatalyst build status'
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 12.16*, both the iOS and Mac Catalyst builds completed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: By successfully configuring GitHub Actions for your .NET MAUI project, you can
    maintain a CI process that ensures the quality of your code and streamlines development.
    Furthermore, this automated workflow simplifies the management of app builds and
    allows developers to focus on feature development and bug fixing.
  prefs: []
  type: TYPE_NORMAL
- en: We have now concluded the introduction to packaging our app for app store submissions
    and automating the build process using GitHub Actions. With these techniques in
    place, you can ensure a smoother and more efficient development pipeline for your
    .NET MAUI app, resulting in higher quality code and quicker deployments to the
    app stores.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CI/CD are common practices in today’s development process. In this chapter,
    we introduced how to prepare a build so that the resulting packages can be used
    for the submission to various app stores. The process after the submission of
    build packages is not covered, since they are platform- and account-specific topics.
    Please refer to the *Further reading* section to find out more about how to publish
    applications to Google Play, Apple Store, and Microsoft Store.
  prefs: []
  type: TYPE_NORMAL
- en: After discussing the build process of each platform, we demonstrated how to
    automate the process using GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: With all the skills that you’ve learned from this book, you should be able to
    develop your own .NET MAUI applications and be ready to submit your apps to supported
    app stores. As you continue to grow as a developer, remember to explore new techniques
    and refine your understanding of .NET MAUI to create even better applications
    and streamline your development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some online resources to learn .NET MAUI and stay up to date with
    the latest trends and news:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Official .NET Blog**: The Microsoft .NET team frequently posts updates and
    tutorials on .NET MAUI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.NET MAUI GitHub repository**: This is the official repository of .NET MAUI.
    You can find the latest code, issues, and discussions about .NET MAUI here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft docs**: This is the official documentation by Microsoft, and it
    provides a comprehensive guide to learning .NET MAUI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Learn**: Platform to find various learning paths and modules. You
    can find resources for .NET and possibly future content about .NET MAUI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.**NET Community Standups**: Regular community standups hosted by Microsoft
    engineers, where they discuss the latest trends and updates to .NET MAUI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stack Overflow**: A question and answer site for professional and enthusiast
    programmers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.**NET MAUI YouTube tutorials**: You can learn .NET MAUI by watching step-by-step
    tutorials on YouTube. For example, the Xamarin Developers YouTube channel posts
    tutorials and discussions about .NET MAUI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Twitter**: Follow the official .NET account (`@dotnet`) and other Microsoft
    developers for the latest updates and developments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting Started with DevOps and .NET MAUI: [https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/](https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upload your app to the Play Console: [https://developer.android.com/studio/publish/upload-bundle](https://developer.android.com/studio/publish/upload-bundle)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Publish a .NET MAUI iOS app: [https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/?view=net-maui-8.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Publish a .NET MAUI Mac Catalyst app: [https://learn.microsoft.com/en-us/dotnet/maui/mac-catalyst/deployment/?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/mac-catalyst/deployment/?view=net-maui-8.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Publish a .NET MAUI app for Android: [https://learn.microsoft.com/en-us/dotnet/maui/android/deployment/overview?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/android/deployment/overview?view=net-maui-8.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Publish a .NET MAUI app for Windows: [https://learn.microsoft.com/en-us/dotnet/maui/windows/deployment/overview?view=net-maui-8.0](https://learn.microsoft.com/en-us/dotnet/maui/windows/deployment/overview?view=net-maui-8.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upload iOS builds to Apple Store: [https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds](https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave a review!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Enjoyed this book? Help readers like you by leaving an Amazon review. Scan
    the QR code below for a 40% discount code.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Leave_a_review_QR.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Limited Offer*'
  prefs: []
  type: TYPE_NORMAL
