["```swift\nstruct TitleView: View {\nÂ Â Â Â var body: some View {\nÂ Â Â Â Â Â Â Â HStack {\nÂ Â Â Â Â Â Â Â Â Â Â Â Text(\"Find\").foregroundColor(.red)\nÂ Â Â Â Â Â Â Â Â Â Â Â Text(\"The\").foregroundColor(.green)\nÂ Â Â Â Â Â Â Â Â Â Â Â Text(\"Color\").foregroundColor(.blue)\nÂ Â Â Â Â Â Â Â } .foregroundColor(.blue)\nÂ Â Â Â Â Â Â Â Â Â Â Â .fontWeight(.black)\nÂ Â Â Â Â Â Â Â Â Â Â Â .font(Font.system(size: 35, design: .serif))\nÂ Â Â Â }\n}\n```", "```swift\nstruct ContentView: View {\nÂ Â Â Â var body: some View {\nÂ Â Â Â Â Â Â Â VStack {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â //MARK: - TITLE\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â TitleView().padding()\nÂ Â Â Â Â Â Â Â }\nÂ Â Â Â }\n}\n```", "```swift\nstruct TargetAndGuessCircleView: View {\nÂ Â Â Â //target variables\nÂ Â Â Â @Binding var redTarget: Double\nÂ Â Â Â @Binding var greenTarget: Double\nÂ Â Â Â @Binding var blueTarget: Double\n\nÂ Â Â Â //guess variables\nÂ Â Â Â @Binding var redGuess: Double\nÂ Â Â Â @Binding var greenGuess: Double\nÂ Â Â Â @Binding var blueGuess: Double\n\nÂ Â Â Â //picker variable\nÂ Â Â Â @Binding var selectedPickerIndex: Int\nÂ Â Â Â Â Â Â Â Â Â Â â€¢â€¢â€¢â€¢â€¢â€¢â€¢\n```", "```swift\nstruct TargetAndGuessCircleView_Previews: PreviewProvider {\nÂ Â Â Â static var previews: some View {\nÂ Â Â Â Â Â Â Â TargetAndGuessCircleView(redTarget: .constant(0.3), \nÂ Â Â Â Â Â Â Â greenTarget: .constant(0.2), blueTarget: \nÂ Â Â Â Â Â Â Â .constant(0.7), redGuess: .constant(0.7), \nÂ Â Â Â Â Â Â Â greenGuess: .constant(0.4), blueGuess: \nÂ Â Â Â Â Â Â Â .constant(0.7), selectedPickerIndex: .constant(2))\nÂ Â Â Â }\n}\n```", "```swift\nZStack {\nÂ Â Â Â //MARK: - GUESS CIRCLE\nÂ Â Â Â if selectedPickerIndex == 0 {\nÂ Â Â Â Â Â Â Â Circle()\nÂ Â Â Â Â Â Â Â Â Â Â Â .fill(Color(red: redGuess, green: greenTarget,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â blue: blueTarget, opacity: 1.0))\nÂ Â Â Â Â Â Â Â Â Â Â Â .frame(height: 200)\nÂ Â Â Â }\nÂ Â Â Â else if selectedPickerIndex == 1 {\nÂ Â Â Â Â Â Â Â Circle()\nÂ Â Â Â Â Â Â Â Â Â Â Â .fill(Color(red: redGuess, green: greenGuess,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â blue: blueTarget, opacity: 1.0))\nÂ Â Â Â .frame(height: 200)\nÂ Â Â Â }\nÂ Â Â Â else if selectedPickerIndex == 2 {\nÂ Â Â Â Â Â Â Â Circle()\nÂ Â Â Â Â Â Â Â Â Â Â Â .fill(Color(red: redGuess, green: greenGuess,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â blue: blueGuess, opacity: 1.0))\nÂ Â Â Â Â Â Â Â Â Â Â Â .frame(height: 200)\nÂ Â Â Â }\n\nÂ Â Â Â Â //MARK: - TARGET CIRCLE\nÂ Â Â Â Â Circle()\nÂ Â Â Â Â Â Â Â .fill(Color(red: redTarget, green: greenTarget,\nÂ Â Â Â Â Â Â Â Â Â blue: blueTarget, opacity: 1.0))\nÂ Â Â Â Â Â Â Â .frame(height: 80)\n}\n```", "```swift\n//target variables\nÂ Â Â Â @State var redTarget = Double.random(in: 0..<1)\nÂ Â Â Â @State var greenTarget = Double.random(in: 0..<1)\nÂ Â Â Â @State var blueTarget = Double.random(in: 0..<1)\nÂ Â Â Â //guess variables\nÂ Â Â Â @State var redGuess: Double\nÂ Â Â Â @State var greenGuess: Double\nÂ Â Â Â @State var blueGuess: Double\nÂ Â Â Â //picker variable\nÂ Â Â Â @State var selectedPickerIndex = 1\n```", "```swift\nContentView(redGuess: 0.5, greenGuess: 0.5, blueGuess: 0.5)\n```", "```swift\n@main\nstruct Find_The_ColorApp: App {\nÂ Â var body: some Scene {\nÂ Â Â Â Â Â WindowGroup {\nÂ Â Â Â Â Â Â Â Â Â ContentView(redGuess: 0.5, greenGuess: 0.5,\nÂ Â Â Â Â Â Â Â Â Â Â Â blueGuess: 0.5)\nÂ Â Â Â Â Â }\nÂ Â }\n}\n```", "```swift\n//MARK: - TARGET AND GUESS CIRCLES\nÂ Â Â Â TargetAndGuessCircleView(redTarget: $redTarget,\nÂ Â Â Â Â Â greenTarget: $greenTarget, blueTarget: $blueTarget,\nÂ Â Â Â Â Â redGuess: $redGuess, greenGuess: $greenGuess,\nÂ Â Â Â Â Â blueGuess: $blueGuess, selectedPickerIndex:\nÂ Â Â Â Â Â $selectedPickerIndex)\n```", "```swift\nÂ Â Â Â @Binding var selectedPickerIndex: Int\nÂ Â Â Â @State var levels = [\"Easy ðŸ˜Œ\", \"Hard ðŸ˜“\", \"Extreme! \nÂ Â Â Â Â Â ðŸ¥µ\"]\n```", "```swift\nstruct PickerView_Previews: PreviewProvider {\nÂ Â Â Â static var previews: some View {\nÂ Â Â Â Â Â Â Â PickerView(selectedPickerIndex: .constant(1))\nÂ Â Â Â }\n}\n```", "```swift\n var body: some View {\nÂ Â VStack {\nÂ Â Â Â Â Â Picker(\"Numbers\", selection: $selectedPickerIndex) {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â ForEach(0 ..< levels.count, id: \\.self) { \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â index in\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Text(levels[index])\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â Â Â .pickerStyle(SegmentedPickerStyle())\nÂ Â Â Â Â Â Â Â Â Â .background(Color.yellow)\nÂ Â Â Â Â Â Â Â Â Â .cornerRadius(8)\nÂ Â Â Â Â Â Â Â Â Â .padding(.horizontal)\nÂ Â Â Â Â Â Â Â Â Â .shadow(color: Color.black, radius: 2, y: 4)\nÂ Â Â Â Â Â Â Â Â Â .padding(.top)\n\nÂ Â Â Â Â Â Text(\"Difficulty Level: \" + \nÂ Â Â Â Â Â Â Â \"\\(levels[selectedPickerIndex])\").bold()\nÂ Â Â Â Â Â Â Â Â Â .padding(5)\nÂ Â Â Â Â Â Â Â Â Â .animation(.easeInOut(duration: 0.2), value:\nÂ Â Â Â Â Â Â Â Â Â Â Â selectedPickerIndex)\nÂ Â Â Â Â Â }\nÂ Â }\n}\n```", "```swift\n//MARK: - PICKER\nÂ Â Â Â PickerView(selectedPickerIndex: $selectedPickerIndex)\n```", "```swift\nÂ Â Â Â @Binding var redTarget: Double\nÂ Â Â Â @Binding var greenTarget: Double\nÂ Â Â Â @Binding var blueTarget: Double\nÂ Â Â Â @Binding var redGuess: Double\nÂ Â Â Â @Binding var greenGuess: Double\nÂ Â Â Â @Binding var blueGuess: Double\nÂ Â Â Â @Binding var selectedPickerIndex: Int\n```", "```swift\nvar body: some View {\nÂ Â VStack {\nÂ Â Â Â Â Â HStack {\nÂ Â Â Â Â Â Â Â Â Â //MARK: - TARGET RECTANGLE\nÂ Â Â Â Â Â Â Â Â Â VStack {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Rectangle()\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(Color(red: redTarget,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â green: greenTarget, blue: blueTarget, \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â opacity: 1.0))\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .cornerRadius(5)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .padding(.init(top: 0, leading: 10, \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â bottom: 0, trailing: 0))\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .frame(height: 40)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Text(\"Target Color to Match\").bold()\nÂ Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â Â Â //MARK: - GUESS RECTANGLE\nÂ Â Â Â Â Â Â Â Â Â VStack {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â if selectedPickerIndex == 0 {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Rectangle()\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(Color(red: redGuess,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â green: greenTarget, blue: \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â blueTarget, opacity: 1.0))\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .modifier(rectModifier())\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â Â Â Â Â Â else if selectedPickerIndex == 1 {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Rectangle()\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(Color(red: redGuess,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â green: greenGuess, blue: blueTarget,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â opacity: 1.0))\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .modifier(rectModifier())\nÂ Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â else if selectedPickerIndex == 2 {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Rectangle()\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(Color(red: redGuess,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â green: greenGuess, blue: blueGuess,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â opacity: 1.0))\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .modifier(rectModifier())\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â HStack {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Image(systemName: \"r.circle.fill\")\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(.red)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Text(\"\\(Int(redGuess * 255.0))\")\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .font(.callout)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Image(systemName: \"g.circle.fill\")\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(.green)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Text(\"\\(Int(greenGuess * 255.0))\")\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .font(.callout)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Image(systemName: \"b.circle.fill\")\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(.blue)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Text(\"\\(Int(blueGuess * 255.0))\")\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .font(.callout)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â }\nÂ Â Â Â }\n}\nstruct rectModifier : ViewModifier {\nÂ Â Â Â func body(content: Content) -> some View {\nÂ Â Â Â Â Â Â Â content\nÂ Â Â Â Â Â Â Â Â Â Â Â .cornerRadius(5)\nÂ Â Â Â Â Â Â Â Â Â Â Â .padding(.init(top: 0, leading: 0, bottom: 0,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â trailing: 10))\nÂ Â Â Â Â Â Â Â Â Â Â Â .frame(height: 40)\nÂ Â Â Â }\n}\n```", "```swift\n //MARK: - TARGET AND GUESS RECTANGLES\nÂ Â Â Â TargetAndGuessRectView(redTarget: $redTarget,\nÂ Â Â Â Â Â greenTarget: $greenTarget, blueTarget: $blueTarget,\nÂ Â Â Â Â Â redGuess: $redGuess, greenGuess: $greenGuess,\nÂ Â Â Â Â Â blueGuess: $blueGuess, selectedPickerIndex:\nÂ Â Â Â Â Â $selectedPickerIndex)\n```", "```swift\nÂ Â Â Â @Binding var redGuess: Double\nÂ Â Â Â @Binding var greenGuess: Double\nÂ Â Â Â @Binding var blueGuess: Double\nÂ Â Â Â @Binding var selectedPickerIndex: Int\n```", "```swift\nstruct StyleTheSliders_Previews: PreviewProvider {\nÂ Â Â Â static var previews: some View {\nÂ Â Â Â Â Â Â Â SliderView(redGuess: .constant(0.5), greenGuess: \nÂ Â Â Â Â Â Â Â Â Â .constant(0.5), blueGuess: .constant(0.5), \nÂ Â Â Â Â Â Â Â Â Â selectedPickerIndex: .constant(1))\nÂ Â Â Â }\n}\n```", "```swift\nstruct CreateSlider: View {\nÂ Â Â Â @Binding var value: Double\nÂ Â Â Â var color: Color\nÂ Â Â Â var body: some View {\nÂ Â Â Â Â Â Â Â HStack {\nÂ Â Â Â Â Â Â Â Â Â Â Â Text(\"0\")\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .bold()\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(color)\n\nÂ Â Â Â Â Â Â Â Â Â Â Â Slider(value: $value, in: 0.0...1.0)\nÂ Â Â Â Â Â Â Â Â Â Â Â Text(\"255\")\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .bold()\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(color)\nÂ Â Â Â Â Â Â Â }.padding(.init(top: 10, leading: 10, bottom: 10, \nÂ Â Â Â Â Â Â Â Â Â trailing: 10))\nÂ Â Â Â }\n}\n```", "```swift\nvar body: some View {\nÂ Â Â Â //MARK: - SLIDERS FOR THE GUESS CIRCLE\nÂ Â Â Â VStack {\nÂ Â Â Â Â Â Â Â //red slider - this slider will always be visible\nÂ Â Â Â Â Â Â Â Â Â and represents the \"Easy\" option on the picker\nÂ Â Â Â Â Â Â Â CreateSlider(value: $redGuess, color: .red)\nÂ Â Â Â Â Â Â Â Â Â Â Â .background(Capsule().stroke(Color.red,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â lineWidth: 3))\nÂ Â Â Â Â Â Â Â Â Â Â Â .padding(.horizontal)\nÂ Â Â Â Â Â Â Â Â Â Â Â .accentColor(.red)\nÂ Â Â Â Â Â Â Â Â Â Â Â .padding(5)\n\nÂ Â Â Â Â Â Â Â switch selectedPickerIndex {\nÂ Â Â Â Â Â Â Â case 1:\nÂ Â Â Â Â Â Â Â Â Â Â Â //green slider - shown when the \"Hard\" option \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â is selected\nÂ Â Â Â Â Â Â Â Â Â Â Â CreateSlider(value: $greenGuess, color: .green)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .background(Capsule().stroke(Color.green,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â lineWidth: 4))\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .padding(.horizontal)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .accentColor(.green)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .padding(5)\nÂ Â Â Â Â Â Â Â case 2:\nÂ Â Â Â Â Â Â Â Â Â //blue slider - this is shown when the \nÂ Â Â Â Â Â Â Â Â Â Â Â \"Extreme\" option is selected\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â CreateSlider(value: $greenGuess, color:\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .green)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .background(Capsule().stroke(Color.green,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â lineWidth: 4))\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .padding(.horizontal)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .accentColor(.green)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .padding(5)\n\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â CreateSlider(value: $blueGuess, color: .blue)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .background(Capsule().stroke(Color.blue,\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â lineWidth: 4))\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .padding(.horizontal)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .accentColor(.blue)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .padding(5)\nÂ Â Â Â Â Â Â Â Â Â default:\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â EmptyView()\nÂ Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â }\nÂ Â }\n```", "```swift\n //MARK: - SLIDER\nÂ Â Â Â Spacer()\nÂ Â Â Â SliderView(redGuess: $redGuess, greenGuess: \nÂ Â Â Â Â Â $greenGuess, blueGuess: $blueGuess, \nÂ Â Â Â Â Â selectedPickerIndex: $selectedPickerIndex)\nÂ Â Â Â Â Â Â Â .scaleEffect(1)\nÂ Â Â Â Â Â Â Â .animation(.interactiveSpring(response: 0.4, \nÂ Â Â Â Â Â Â Â Â Â dampingFraction: 0.5, blendDuration: 0.5), value: \nÂ Â Â Â Â Â Â Â Â Â selectedPickerIndex)\nÂ Â Â Â Â Spacer()\n```", "```swift\n //MARK: - BUTTON\nÂ Â Â Â Button(action: {\n\nÂ Â Â Â }) {\nÂ Â Â Â Â Â Â Â Text(\"Check Score\")\nÂ Â Â Â Â Â Â Â Â Â Â Â .foregroundColor(.black)\nÂ Â Â Â Â Â Â Â Â Â Â Â .padding(EdgeInsets(top: 12, leading: 20, \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â bottom: 12, trailing: 20))\nÂ Â Â Â Â Â Â Â Â Â Â Â .background(Color.yellow)\nÂ Â Â Â Â Â Â Â Â Â Â Â .cornerRadius(20)\nÂ Â Â Â Â Â Â Â Â Â Â Â .shadow(color: Color.black, radius: 2, y: 4)\nÂ Â Â Â }\n```", "```swift\nfunc calculateScore() -> Int {\nÂ Â Â Â Â Â Â Â let redDiff = redGuess - redTarget\nÂ Â Â Â Â Â Â Â let greenDiff = greenGuess - greenTarget\nÂ Â Â Â Â Â Â Â let blueDiff = blueGuess - blueTarget\nÂ Â Â Â Â Â Â Â let easyDifference = redDiff * redDiff\nÂ Â Â Â Â Â Â Â let hardDifference = easyDifference + greenDiff * \nÂ Â Â Â Â Â Â Â Â Â greenDiff\nÂ Â Â Â Â Â Â Â let extremeDifference = hardDifference + blueDiff * \nÂ Â Â Â Â Â Â Â Â Â blueDiff\nÂ Â Â Â Â Â Â Â let calculatedDifference: Double\nÂ Â Â Â Â Â Â Â switch selectedPickerIndex {\nÂ Â Â Â Â Â Â Â Â Â Â Â case 0:\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â calculatedDifference = sqrt(easyDifference)\nÂ Â Â Â Â Â Â Â Â Â Â Â case 1:\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â calculatedDifference = sqrt(hardDifference)\nÂ Â Â Â Â Â Â Â Â Â Â Â case 2:\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â calculatedDifference = \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â sqrt(extremeDifference)\nÂ Â Â Â Â Â Â Â Â Â Â Â default:\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â calculatedDifference = 0.0\nÂ Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â return Int((1.0 - calculatedDifference) * 100 + \nÂ Â Â Â Â Â Â Â Â Â 0.5)\nÂ Â Â Â } \n```", "```swift\n//user feedback variable\nÂ Â Â Â @State var showAlert = false\n```", "```swift\n.alert(isPresented: $showAlert) { () -> Alert in\nÂ Â Â Â Â Â Â Â Alert(title: Text(\"Your Score\"), message: Â Â Â Â Â Â Â Â Â Â Text(\"\\(calculateScore())\"),\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â primaryButton: Alert.Button.default(Text(\"New\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Game?\"), action: {\nÂ Â Â Â Â Â Â Â Â Â Â Â // Start a new game?\nÂ Â Â Â Â Â Â Â }),\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â secondaryButton: \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Alert.Button.destructive(Text(\"Continue \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Playing\"), action: {\nÂ Â Â Â Â Â Â Â Â Â Â Â // Continue with the present game\n\nÂ Â Â Â Â Â Â Â }))\nÂ Â Â Â }\n```", "```swift\nÂ Â Â Â Button(action: {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â showAlert = true\nÂ Â Â Â Â Â Â Â Â Â Â Â }) {\n```", "```swift\n //MARK: - RESET THE GAME\nÂ Â Â Â func reset() {\nÂ Â Â Â Â Â Â Â redTarget = Double.random(in: 0..<1)\nÂ Â Â Â Â Â Â Â greenTarget = Double.random(in: 0..<1)\nÂ Â Â Â Â Â Â Â blueTarget = Double.random(in: 0..<1)\nÂ Â Â Â Â Â Â Â redGuess = 0.0\nÂ Â Â Â Â Â Â Â greenGuess = 0.0\nÂ Â Â Â Â Â Â Â blueGuess = 0.0\nÂ Â Â Â }\n```", "```swift\n.alert(isPresented: $showAlert) { () -> Alert in\nÂ Â Alert(title: Text(\"Your Score\"), message:\nÂ Â Â Â Text(\"\\(calculateScore())\"),\nÂ Â Â Â Â Â Â Â primaryButton: Alert.Button.default(Text(\"Continue\nÂ Â Â Â Â Â Â Â Â Â Playing?\"), action: {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }),\nÂ Â Â Â Â Â Â Â secondaryButton: Alert.Button.destructive(Text(\"New \nÂ Â Â Â Â Â Â Â Â Â Game?\"), action: {\nÂ Â Â Â Â Â // Start a new game?\nÂ Â Â Â Â Â reset()\nÂ Â }))\n```", "```swift\n.background(Image(\"background\").resizable().edgesIgnoringSa\nÂ Â feArea(.all))\n```", "```swift\nimport ConfettiSwiftUI\n```", "```swift\n//confetti variable\nÂ Â Â Â @State var counter = 0\n```", "```swift\n//MARK: - CONFETTI CANNON\nÂ Â Â Â .confettiCannon(counter: $counter, num: 100, colors: \nÂ Â Â Â Â Â [.pink, .red, .blue, .purple, .orange], rainHeight: \nÂ Â Â Â Â Â 1800.0, radius: 500.0)\n```", "```swift\n Button(action: {\nÂ Â Â Â Â Â Â Â showAlert = true\nÂ Â Â Â Â Â Â Â //if a score of 100 is achieved, make the confetti \nÂ Â Â Â Â Â Â Â Â Â fall by adding 1 to the counter variable\nÂ Â Â Â Â Â Â Â if calculateScore() == 100 {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â counter += 1\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }\n```"]