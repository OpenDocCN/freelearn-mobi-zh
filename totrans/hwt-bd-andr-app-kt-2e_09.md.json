["```swift\n@Composable\nfun MyTextDisplay(myState: MyState) {\n    Text(text = myState.text, color = myState.color)\n}\ndata class MyState(\n    val text: String,\n    val color: Color\n)\n```", "```swift\n@Composable\nfun MyScreen(){\n    Column {\n        Text(text = \"My Static Text\")\n        TextField(value = \"My Text Field\", onValueChange = {\n        })\n        Button(onClick = { }) { }\n        Icon(painter = painterResource(R.drawable.icon),\n            contentDescription = stringResource(id =\n            R.string.icon_content_description))\n    }\n}\n```", "```swift\n@Composable\nfun MyList(items: List<String>) {\n    Column {\n        items.forEach { item -> Text(text = item) }\n    }\n}\n```", "```swift\n@Composable\nfun MyList(items: List<String>) {\n    LazyColumn {\n        item { Text(text = \"Header\") }\n        items(items){ item-> Text(text = item) }\n        item { Text(text = \"Footer\") }\n    }\n}\n```", "```swift\n@Composable\nfun MyScreen(){\n    Column {\n        Text(text = \"My Static Text\")\n        TextField(value = \"My Text Field\", onValueChange =\n        { }\n}\n```", "```swift\n@Composable\nfun MyScreen() {\n    Column(\n        modifier = Modifier.padding(\n            top = 5.dp, bottom = 5.dp,\n            start = 10.dp, end = 10.dp)\n    ) {\n    }\n}\n```", "```swift\n@Composable\nfun MyScreen() {\n    Column(\n        modifier = Modifier.padding(\n            vertical = 5.dp,\n            horizontal = 10.dp)\n    ) {\n    }\n}\n```", "```swift\n@Composable\nfun MyScreen() {\n    Column(\n        modifier = Modifier.padding(\n            vertical = 5.dp,\n            horizontal = 10.dp\n        ).clickable { }\n    ) { }\n}\n```", "```swift\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent { MyScreen() }\n    }\n}\n```", "```swift\n        <string name=\"enter_number\">Enter a\n            number</string>\n        <string name=\"click_me\">Click Me</string>\n        <string name=\"item_format\">Item %s</string>\n    ```", "```swift\n    @Composable\n    fun MyScreen(\n        items: List<String>\n    ) {\n        LazyColumn {\n            item {\n                Column(modifier = Modifier.padding(16.dp))\n                {\n                    Text(text = stringResource(id =\n                    R.string.enter_number))\n                    TextField(\n                        value = \"\",\n                        keyboardOptions =\n                        KeyboardOptions(keyboardType =\n                        KeyboardType.Number),\n                        onValueChange = {\n                        })\n                    Button(onClick = { }) {\n                        Text(text = stringResource(id =\n                        R.string.click_me))\n                    }\n                }\n            }\n            items(items) { item ->\n                Column(modifier =\n                Modifier.padding(vertical = 4.dp)) {\n                    Text(text = item)\n                }\n            }\n        }\n    }\n    ```", "```swift\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                val items = (1..100).toList().map {\n                    stringResource(id =\n                    R.string.item_format, formatArgs =\n                    arrayOf(\"$it\"))\n                }\n                MyScreen(items)\n            }\n        }\n    }\n    ```", "```swift\n@Composable\nfun MyScreen() {\n    Column { TextField(value = \"\", onValueChange = {}) }\n}\n```", "```swift\n@Composable\nfun MyScreen() {\n    var text by remember { mutableStateOf(\"\") }\n    Column { TextField(value = text, onValueChange = {}) }\n}\n```", "```swift\n@Composable\nfun MyScreen() {\n    var text by remember { mutableStateOf(\"\") }\n    Column {\n        TextField(value = text, onValueChange = { text = it })\n    }\n}\n```", "```swift\n@Composable\nfun MyScreen() {\n    var text by rememberSaveable { mutableStateOf(\"\") }\n    MyScreenContent(text = text, onTextChange = { text = it })\n}\n@Composable\nfun MyScreenContent(text: String, onTextChange: (String) -> Unit) {\n    Column {\n        TextField(value = text, onValueChange =\n            onTextChange)\n    }\n}\n```", "```swift\n@Composable\nfun MyScreenContent() {\n    val context = LocalContext.current\n    LaunchedEffect(anObjectToChange) {\n        Toast.makeText(context, \"Toast text\",\n        Toast.LENGTH_SHORT).show()\n    }\n}\n```", "```swift\n    data class MyScreenState(\n        val itemCount: String = \"\",\n        val items: List<String> = emptyList()\n    )\n    ```", "```swift\n    @Composable\n    fun MyScreenContent(\n        myScreenState: MyScreenState,\n        onItemCountChange: (String) -> Unit,\n        onButtonClick: @Composable () -> Unit\n    ) {\n        LazyColumn {\n            item {\n                Column(modifier = Modifier.padding(16.dp))\n                {\n                    Text(text = stringResource(id =\n                    R.string.enter_number))\n                    TextField(\n                        value = myScreenState.itemCount,\n                        keyboardOptions =\n                        KeyboardOptions(keyboardType =\n                        KeyboardType.Number),\n                        onValueChange =\n                        onItemCountChange\n                    )\n                    Button(onClick = onButtonClick) {\n                        Text(text = stringResource(id =\n                        R.string.click_me))\n                    }\n                }\n            }\n            items(myScreenState.items) { item ->\n                Column(modifier =\n                Modifier.padding(vertical = 4.dp)) {\n                    Text(text = item)\n                }\n            }\n        }\n    }\n    ```", "```swift\n    @Composable\n    fun MyScreen() {\n        var state by remember {\n            mutableStateOf(MyScreenState())\n        }\n        val context = LocalContext.current\n        MyScreenContent(state, {\n            state = state.copy(itemCount = it)\n        }, {\n            state = state.copy(items =\n            (1..state.itemCount.toInt()).toList().map {\n                context.getString(R.string.item_format,\n                \"$it\")\n            })\n        })\n    }\n    ```", "```swift\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                MyScreen()\n            }\n        }\n    }\n    ```", "```swift\n    val Purple200 = Color(0xFFBB86FC)\n    val Purple500 = Color(0xFF6200EE)\n    val Purple700 = Color(0xFF3700B3)\n    val Teal200 = Color(0xFF03DAC5)\n    ```", "```swift\n    val Shapes = Shapes(\n        small = RoundedCornerShape(4.dp),\n        medium = RoundedCornerShape(4.dp),\n        large = RoundedCornerShape(0.dp)\n    )\n    ```", "```swift\n    val Typography = Typography(\n        body1 = TextStyle(\n            fontFamily = FontFamily.Default,\n            fontWeight = FontWeight.Normal,\n            fontSize = 16.sp\n        )\n    )\n    ```", "```swift\n    private val DarkColorPalette = darkColors(\n        primary = Purple200,\n        primaryVariant = Purple700,\n        secondary = Teal200\n    )\n    private val LightColorPalette = lightColors(\n        primary = Purple500,\n        primaryVariant = Purple700,\n        secondary = Teal200\n    )\n    ```", "```swift\n    @Composable\n    fun MyApplicationTheme(\n        darkTheme: Boolean = isSystemInDarkTheme(),\n        content: @Composable () -> Unit\n    ) {\n        val colors = if (darkTheme) {\n            DarkColorPalette\n        } else {\n            LightColorPalette\n        }\n        MaterialTheme(\n            colors = colors,\n            typography = Typography,\n            shapes = Shapes,\n            content = content\n        )\n    }\n    ```", "```swift\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                MyApplicationTheme {\n                    Surface(color =\n                    MaterialTheme.colors.background) { }\n                }\n            }\n        }\n    }\n    ```", "```swift\n@Composable\nfun ParagraphText(text: String) {\n    Text(\n        text = text,\n        style = MaterialTheme.typography.body1,\n        color = MaterialTheme.colors.onBackground\n    )\n}\n```", "```swift\n@Composable\nfun OnBackgroundParagraphText(text: String) {\n    ParagraphText(text = text, color =\n    MaterialTheme.colors.onBackground)\n}\n@Composable\nfun ParagraphText(text: String, color: Color) {\n    Text(\n        text = text,\n        style = MaterialTheme.typography.body1,\n        color = color\n    )\n}\n```", "```swift\n@Composable\nfun MyScreen() {\n    OnBackgroundParagraphText(text = \"My text\")\n}\n```", "```swift\n@Composable\nfun ParagraphText(text: String, color: Color) {\n    Text(\n        text = text,\n        style = MaterialTheme.typography.body2,\n        color = color\n    )\n}\n```", "```swift\nprivate val DarkColorPalette = darkColors(\n    primary = Purple200,\n    primaryVariant = Purple700,\n    secondary = Teal200,\n    onBackground = Color.Red\n)\nprivate val LightColorPalette = lightColors(\n    primary = Purple500,\n    primaryVariant = Purple700,\n    secondary = Teal200,\n    onBackground = Color.Red\n)\n```", "```swift\nimplementation \"androidx.navigation:navigation-compose:2.5.3\n```", "```swift\n@Composable\nfun Screen1(onButtonClick: () -> Unit) {\n    Button(onClick = onButtonClick) {\n        Text(text = \"Click Me\")\n    }\n}\n@Composable\nfun Screen2(input1: String, input2: String) {\n    Text(text = \"My inputs are $input1 and $input2\")\n}\n```", "```swift\n@Composable\nfun MyApp(navController: NavHostController) {\n    NavHost(navController = navController,\n    startDestination = \"screen1\") {\n        composable(\"screen1\") {\n            Screen1 { navController.navigate\n            (\"screen2/Input1?input2=Input2\") }\n        }\n        composable(\n            \"screen2/{input1}?input2={input2}\",\n            arguments = listOf(navArgument(\"input1\") {\n            type = NavType.StringType },\n            navArgument(\"input2\") { type =\n            NavType.StringType }\n            )\n        ) {\n            Screen2(\n                input1 = it.arguments?\n                .getString(\"input1\").orEmpty(),\n                input2 = it.arguments?\n                .getString(\"input2\").orEmpty()\n            )\n        }\n    }\n}\n```", "```swift\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyApplicationTheme {\n                Surface(color =\n                MaterialTheme.colors.background) {\n                    val navController =\n                        rememberNavController()\n                    MyApp(navController)\n                }\n            }\n        }\n    }\n}\n```", "```swift\n    implementation \"androidx.navigation:navigation-compose:2.5.3\"\n    ```", "```swift\n    @Composable\n    fun OnBackgroundTitleText(text: String) {\n        TitleText(text = text, color =\n            MaterialTheme.colors.onBackground)\n    }\n    @Composable\n    fun TitleText(text: String, color: Color) {\n        Text(text = text, style =\n            MaterialTheme.typography.h5, color = color)\n    }\n    ```", "```swift\n    @Composable\n    fun OnBackgroundItemText(text: String) {\n        ItemText(text = text, color =\n            MaterialTheme.colors.onBackground)\n    }\n    @Composable\n    fun ItemText(text: String, color: Color) {\n        Text(text = text, style =\n            MaterialTheme.typography.body1, color = color)\n    }\n    ```", "```swift\n    @Composable\n    fun PrimaryTextButton(text: String, onClick: () ->\n    Unit) {\n        TextButton(text = text, textColor = Color.Red,\n        onClick = onClick)\n    }\n    @Composable\n    fun TextButton(text: String, textColor: Color,\n    onClick: () -> Unit) {\n        Button(\n            onClick = onClick, colors = ButtonDefaults\n            .buttonColors(contentColor = textColor)\n        ) {\n            Text(text = text, style =\n            MaterialTheme.typography.button)\n        }\n    }\n    ```", "```swift\n    data class ItemCountScreenState(\n        val itemCount: String = \"\"\n    )\n    ```", "```swift\n    @Composable\n    fun ItemCountScreenContent(\n        itemCountScreenState: ItemCountScreenState,\n        onItemCountChange: (String) -> Unit,\n        onButtonClick: () -> Unit\n    ) {\n        Column {\n            OnBackgroundTitleText(text = stringResource(id\n                = R.string.enter_number))\n            TextField(\n                value = itemCountScreenState.itemCount,\n                keyboardOptions = KeyboardOptions(\n                keyboardType = KeyboardType.Number),\n                onValueChange = onItemCountChange\n            )\n            PrimaryTextButton(text = stringResource(id =\n            R.string.click_me), onClick = onButtonClick)\n        }\n    }\n    ```", "```swift\n    @Composable\n    fun ItemCountScreen(onButtonClick: (String) -> Unit) {\n        var state by remember {\n            mutableStateOf(ItemCountScreenState())\n        }\n        ItemCountScreenContent(state, {\n            state = state.copy(itemCount = it)\n        }, {\n            onButtonClick(state.itemCount)\n        })\n    }\n    ```", "```swift\n    data class ItemScreenState(\n        val items: List<String> = emptyList()\n    )\n    ```", "```swift\n    @Composable\n    fun ItemScreenContent(\n        itemScreenState: ItemScreenState\n    ) {\n        LazyColumn {\n            items(itemScreenState.items) { item ->\n                Column(modifier =\n                Modifier.padding(vertical = 4.dp)) {\n                    OnBackgroundItemText(text = item)\n                }\n            }\n        }\n    }\n    ```", "```swift\n    @Composable\n    fun ItemScreen(itemCount: String) {\n        ItemScreenContent(itemScreenState =\n        ItemScreenState((1..itemCount.toInt()).toList()\n        .map {\n            stringResource(id = R.string.item_format,\n            formatArgs = arrayOf(\"$it\"))\n        }))\n    }\n    ```", "```swift\n    @Composable\n    fun MyApp(navController: NavHostController) {\n        NavHost(navController = navController,\n        startDestination = \"itemCountScreen\") {\n            composable(\"itemCountScreen\") {\n                ItemCountScreen { navController.navigate(\n                \"itemScreen/?itemCount=$it\") }\n            }\n            composable(\n                \"itemScreen/?itemCount={itemCount}\",\n                arguments =\n                listOf(navArgument(\"itemCount\") {type =\n                NavType.StringType })\n            ) {\n                ItemScreen(\n                    it.arguments?.getString(\"itemCount\")\n                    .orEmpty()\n                )\n            }\n        }\n    }\n    ```", "```swift\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?)\n        {\n            super.onCreate(savedInstanceState)\n            setContent {\n                MyApplicationTheme {\n                    Surface(color =\n                    MaterialTheme.colors.background) {\n                        val navController =\n                            rememberNavController()\n                        Column(modifier =\n                            Modifier.padding(16.dp)) {\n                                MyApp(navController)\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ```", "```swift\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\n      \"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <androidx.compose.ui.platform.ComposeView\n        android:id=\"@+id/compose_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n</LinearLayout>\n```", "```swift\nclass MyFragment : Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(\n        R.layout.my_fragment_layout, container).apply {\n            findViewById<ComposeView>(R.id.compose_view)\n            .apply {\n                setViewCompositionStrategy(\n                ViewCompositionStrategy\n                .DisposeOnViewTreeLifecycleDestroyed)\n                setContent {\n                    MaterialTheme {\n                        Text(\"My Text\")\n                    }\n                }\n            }\n        }\n    }\n}\n```", "```swift\n@Composable\nfun MyCustomisedElement(text: String) {\n    AndroidView(factory = { context ->\n        TextView(context).apply {\n            this.text = text\n        }\n    })\n}\n```", "```swift\n    @Composable\n    fun MyScreen(viewModel: MyViewModel = viewModel()) {\n        Text(text = viewModel.myText)\n    }\n    ```", "```swift\n@Composable\nfun MyScreen(viewModel: MyViewModel = viewModel()) {\n    viewModel.myLiveData.observeAsState()?.let{\n    myLiveDataText->\n        Text(text = myLiveDataText)\n    }\n    viewModel.myObservable.subscribeAsState()?.let{\n     myObservableText->\n        Text(text = myObservableText)\n    }\n    viewModel.myFlow.collectAsState()?.let{\n    myFlowText->\n        Text(text = myFlowText)\n    }\n}\n```", "```swift\n    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'\n    ```"]