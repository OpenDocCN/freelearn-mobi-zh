- en: '*Chapter 7*: Building Data Sources'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue focusing on the data layer by discussing how
    we can implement local and remote data sources and the roles they play in clean
    architecture. First, we will look at how remote data sources can be built and
    how they can fetch data from the internet through calls to Retrofit. Then, we
    will look at implementing local data sources and how they can interact with Room
    and Data Store to persist data locally. In the chapter's exercises, we will continue
    the previous exercises and add the data sources discussed in the chapter, seeing
    how we can connect them to Room and Retrofit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building and using remote data sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and integrating local data sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you will have learned the role of data sources, how
    to implement remote and local data sources that use Retrofit, Room, and Data Store
    to manage an application's data, and how we can separate these data sources in
    separate library modules.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The hardware and software requirements are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio – Arctic Fox | 2020.3.1 Patch 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/Clean-Android-Architecture/tree/main/Chapter7](https://github.com/PacktPublishing/Clean-Android-Architecture/tree/main/Chapter7).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3yOa7jE](https://bit.ly/3yOa7jE)'
  prefs: []
  type: TYPE_NORMAL
- en: Building and using remote data sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at how we can build remote data sources and how
    we can use them in combination with Retrofit to fetch and manipulate data from
    the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapters, we defined abstractions for data sources that repositories
    depend on to manipulate data. This was because we wanted to avoid the repositories
    having dependencies on the data sources and instead have the data sources depend
    on the repositories. For remote data sources, this looks something like the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – A remote data source class diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.01_B18320.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – A remote data source class diagram
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of the remote data source has two roles. It will invoke the
    networking layer to fetch and manipulate data, and it will convert the data to
    either the domain entity or, if necessary, intermediary data required by the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the entity defined in the previous chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the same `User` data class that was defined as part of the domain.
    Now let''s assume we are fetching the following data from the internet in JSON
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have a `UserApiModel` class in which we define the same fields as the
    `User` class and annotate them with the `@Json` annotation, which is part of the
    Moshi library.
  prefs: []
  type: TYPE_NORMAL
- en: 'The remote data source abstraction looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the abstraction we defined in the previous chapter. Before we write
    the implementation of this class, we will first need to specify our Retrofit service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a typical Retrofit service class, which will fetch an `UserApiModel`
    class from the `/users/{userId}` endpoint. We can now create the implementation
    of the data source to fetch the user from `UserService`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, we implement the `UserRemoteDataSource` interface, and in the `getUser`
    method, we invoke the `getUser` method from the `UserService` dependency. Once
    `UserApiModel` is obtained, we then convert it to the `User` class.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at how we can build a remote data source with the
    help of the Retrofit library to manipulate data from the internet. In the section
    that follows, we will look at an exercise that shows how we can implement a remote
    data source.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 07.01 – Building a remote data source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modify *Exercise 06.01 – Creating repositories* so that a new library module
    is created in Android Studio. Name the module `data-remote`. This module will
    depend on `domain` and `data-repository`. The module will be responsible for fetching
    users and posts as JSON from [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The user will have the following JSON representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The post will have the following JSON representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The module will need to implement the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UserApiModel` and `PostApiModel`, which will hold the data from the JSON.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserService`, which will return a list of `UserApiModel` from the `/users`
    URL and `UserApiModel` based on the ID from the `/users/{userId}` URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PostService`, which will return a list of `PostApiModel` from the `/posts`
    URL and `PostApiModel` based on the ID from the `/post/{postId}` URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RemoteUserDataSourceImpl`, which will implement `RemoteUserDataSource`, call
    `UserService`, and return `Flow`, which emits a list of `User` objects or `UseCaseException.UserException`
    if there is an error in the call to `UserService`. The same approach will be taken
    for returning `User` based on the ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RemotePostDataSourceImpl` which will implement `RemotePostDataSource`, call
    `PostService`, and return `Flow`, which emits a list of `Post` objects or `UseCaseException.PostException`
    if there is an error in the call to `PostService`. The same approach will be taken
    for returning a post based on the ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To complete this exercise, you will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `data-remote` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `UserApiModel` and `UserService` classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `PostApiModel` and `PostService` classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the remote data sources implementations for `RemoteUserDataSource` and
    `RemotePostDataSource`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow these steps to complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module named `data-remote`, which will be an Android library module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that in the top-level `build.gradle` file, the following dependencies
    are set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same file, add the networking libraries to the library mappings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `build.gradle` file of the `data-remote` module, make sure that the
    following plugins are present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same file, change the configurations to the ones defined in the top-level
    `build.gradle` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are making sure that the new module will use the same configurations
    with regards to compilation and the minimum and maximum Android version as the
    rest of the project, making it easier to change the configuration across all the
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same file, add the dependencies to the networking libraries and the
    `data-repository` and `domain` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the top-level `gradle.properties`, add the following configuration for `moshi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `AndroidManifest.xml` file in the `data-remote` module, add the internet
    permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `data-remote` module, create a new package called `networking`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `networking` package, create a new package called `user`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `user` package, create a new class called `UserApiModel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same package, create a new interface called `UserService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `networking` package, create a new package called `post`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `post` package, create a new class called `PostApiModel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same package, create a new interface called `PostService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `data-remote` module, create a new package called `source`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `source` package, create a new class called `RemoteUserDataSourceImpl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we invoke the `getUsers` and `getUser` methods from `UserService` and
    then convert the `UserApiModel` objects to `User` objects to avoid the other layers
    depending on the networking-related data. The same principle applies to error
    handling. If there is a network error, such as an `HTTP 404` code, the exception
    will be `HttpException`, which is part of the Retrofit library.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `source` package, create a new class called `RemotePostDataSourceImpl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we follow the same principle as with the `RemoteUserDataSourceImpl` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `data-remote` module, create a new package called `injection`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `injection` package, create a new class called `NetworkModule`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we provide the Retrofit and `OkHttp` dependencies required for networking.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `injection` package, create a class named `RemoteDataSourceModule`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we use Hilt to bind the implementations from this module with the abstractions
    defined in the `data-repository` module.
  prefs: []
  type: TYPE_NORMAL
- en: To unit-test the code, we now need to create a new folder called `resources`
    in the `test` folder of the `data-remote` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `resources` folder, create a folder called `mockito-extensions`;
    inside this folder, create a file named `org.mockito.plugins.MockMaker`; and inside
    this file, add the following text – `mock-maker-inline`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a test class named `RemoteUserDataSourceImplTest`, which will test the
    success scenarios for the methods inside `RemoteUserDataSourceImpl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are mocking the `UserService` interface and providing mock user data,
    which will then be obtained and converted by `RemoteDataSourceImpl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same test class, add the error scenarios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are mocking an error that is thrown by `UserService`, which will then
    be converted by `RemoteUserDataSourceImpl` into `UseCaseException.UserException`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a test class named `RemotePostDataSourceImplTest`, which will have similar
    test methods as `RemoteUserDataSourceImplTest` for posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are doing for posts what we did for users in `RemoteUserDataSourceImplTest`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the error scenarios in `RemotePostDataSourceImplTest`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we run the tests, we should see something like the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Output of the remote data source unit tests'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.02_B18320.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Output of the remote data source unit tests
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we have added a new module to the application, in which we
    can see how we can add a remote data source to the application. To fetch the data,
    we are using libraries such as OkHttp and Retrofit and combining them with the
    data source implementation for fetch users and posts. In the following section,
    we will expand the application to introduce local data sources, in which we will
    persist the data we are fetching here.
  prefs: []
  type: TYPE_NORMAL
- en: Building and integrating local data sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will analyze how we can build local data sources and integrate
    them with libraries such as Room and Data Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Local data sources have a similar structure to remote data sources. The abstractions
    are provided by the layers sitting above, and the implementations are responsible
    for invoking methods from persistence frameworks and converting data into entities,
    like the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – A local data source diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.03_B18320.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – A local data source diagram
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume we have the same `UserEntity` defined in the previous chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make the same assumption about `UserLocalDataSource`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to provide an implementation for this data source that will manipulate
    the data from Room. First, we need to define a user entity for Room:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can define `UserDao`, which queries a user by an ID and inserts a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the implementation of the data source looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here, the local data source invokes `UserDao` to insert and retrieve a user
    and converts the domain entity into a Room entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to use Data Store instead of Room with a local data store implementation,
    we can have something like the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use a key for each of the fields of the `User` object to store the
    data. The `getUser` method doesn't use the ID to search for a user, which shows
    that for this particular use case, Room is the more appropriate method.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at how we can build a local data source with the
    help of the Room and Data Store libraries to be able to query and persist data
    locally on a device. Next, we will look at an exercise to show how we can implement
    a local data store.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 07.02 – Building a local data source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modify *Exercise 07.01 – Building a remote data source* so that a new Android
    library module named `data-local` is created. This module will depend on `domain`
    and `data-repository`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The module will implement the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UserEntity` and `PostEntity`, which will hold data to be persisted from `User`
    and `Post` using Room'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserDao` and `PostDao`, which will be responsible for persisting and fetching
    a list of `UserEntity` and `PostEntity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LocalUserDataSourceImpl` and `LocalPostDataSourceImpl`, which will be responsible
    for invoking the `UserDao` and `PostDao` objects to persist data and for converting
    data to `User` and `Post` objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LocalInteractionDataSourceImpl`, which will be responsible for persisting
    the `Interaction` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To complete this exercise, you will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `data-local` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `UserEntity` and `PostEntity` classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the DAOs for users and posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the data source implementations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow these steps to complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module named `data-local`, which will be an Android library module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that in the top-level `build.gradle` file, the following dependencies
    are set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same file, add the persistence libraries to the library mappings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `build.gradle` file of the `data-local` module, make sure that the following
    plugins are present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same file, change the configurations to the ones defined in the top-level
    `build.gradle` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same file, add the dependencies to the networking libraries and the
    `data-repository` and `domain` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `data-local` module, create a new package called `db`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `db` package, create a new package called `user`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `user` package, create the `UserEntity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same package, create the `UserDao` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `db` package, create a new package called `post`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `post` package, create a new class called `PostEntity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same package, create a new interface called `PostDao`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `db` package, create the `AppDatabase` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `data-local` module, create a new package called `source`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `source` package, create a new class called `LocalUserDataSourceImpl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, in the `getUsers` method, we retrieve a list of `UserEntity` objects from
    `UserDao` and convert them into `User` objects. In the `addUsers` method, we do
    the opposite, by taking a list of `User` objects to be inserted and converting
    them into `UserEntity` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same package, create the `LocalPostDataSourceImpl` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we follow the same approach we used for `LocalUserDataSourceImpl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same package, create the `LocalInteractionDataSourceImpl` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we use the Preference Data Store library to persist the Interaction object,
    by holding different keys for each field in the `Interaction` class, and in this
    case, it will be just one key for the total clicks.
  prefs: []
  type: TYPE_NORMAL
- en: In the `data-local` module, create a new package named `injection`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `injection` package, create a new class named `PersistenceModule`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we provide all the Data Store and Room dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same package, create a new class called `LocalDataSourceModule`, in
    which we connect the abstractions to the bindings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To unit-test the code, we will now need to create a new folder called `resources`
    in the test folder of the `data-local` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `resources` folder, create a folder called `mockito-extensions`;
    inside this folder, create a file named `org.mockito.plugins.MockMaker`; and inside
    this file, add the following text – `mock-maker-inline`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `LocalUserDataSourceImplTest` test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are mocking the `UserDao` class and using it to provide mock data to
    `LocalUserDataSourceImpl`, which will then convert the data to and from the `User`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `LocalPostDataSourceImplTest` test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we perform the same type of tests for posts as we did in `LocalUserDataSourceImplTest`
    for users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `LocalInteractionDataSourceImplTest` test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, in the `testSaveInteraction` method, we need to mock the `updateData`
    method instead of the `edit` method from the `DataStore` class. This is because
    the `edit` method is an extension function that can't be mocked with the current
    libraries we have and instead must rely on the method it invokes, which is `updateData`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the tests, we should see something like the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Output of the local data source unit tests'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.04_B18320.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Output of the local data source unit tests
  prefs: []
  type: TYPE_NORMAL
- en: 'If we draw a diagram of the modules in the exercise, we will see something
    like the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The exercise 07.02 module diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.05_B18320.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – The exercise 07.02 module diagram
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the `:data-remote` and `:data-local` modules are isolated from
    each other. The two modules have different responsibilities and deal with different
    dependencies. `:data-remote` deals with fetching data from the internet, while
    `:data-local` deals with persisting data locally into SQLite using Room and files
    using Data Store. This gives our code more flexibility because we are able to
    change how we fetch data – for example, without impacting how we persist the data.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we have created a new module in the application in which we
    deal with local data sources. To persist data, we have used libraries such as
    Room and Data Store, and we have integrated them with the local data store.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the concept of data sources and the different
    types of data sources we have available in an Android application. We started
    with remote data sources and saw some examples of how we can build a data source
    and combine it with libraries such as Retrofit and OkHttp. The local data source
    followed similar principles as the remote one, and here, we have used libraries
    such as Room and Data Store to implement this.
  prefs: []
  type: TYPE_NORMAL
- en: In the exercises, we implemented the data sources as part of different modules.
    This was to avoid creating any unnecessary dependencies between the other layers
    of the application and the specific frameworks we have used for the data sources.
    In the next chapter, we will look at how we can build the presentation layer and
    show data to the user. We will also explore how we can split the presentation
    layer into separate modules and navigate from a screen in one module to a screen
    in another module, through the introduction of modules that can be shared by other
    presentation modules.
  prefs: []
  type: TYPE_NORMAL
