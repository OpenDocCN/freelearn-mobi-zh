- en: Chapter 1. The Swift Programming Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the core of game development is your game's code. It is the brain of your
    project and outside of the art, sound, and various asset developments. It is where
    you will spend most of your time creating and testing your game. Up until Apple's
    **Worldwide Developers Conference WWDC14** in June of 2014, the code of choice
    for iOS game and app development was **Objective-C**. At *WWDC14*, a new and faster
    programming language, Swift, was announced and is now the recommended language
    for all current and future iOS games and general app creation.
  prefs: []
  type: TYPE_NORMAL
- en: As of the time of writing, you can still use Objective-C to design your games,
    but programmers, both, new and seasoned, will see why writing in Swift is not
    only easier for expressing your game's logic, but even more preformat. Keeping
    your game running at that critical 60 fps is dependent on fast code and logic.
    Engineers at Apple developed the Swift programming language from the ground up
    with performance and readability in mind, so this language can execute certain
    code iterations faster than Objective-C while also keeping code ambiguity to a
    minimum. Swift also uses many of the methodologies and syntaxes found in more
    modern languages, such as Scala, JavaScript, Ruby, and Python.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's dive into the Swift language.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended that some basic knowledge of object-oriented programming (OOP)
    be known previously, but we will try to keep the build-up and explanation of code
    simple and easy to follow as we move on to the more advanced topics related to
    game development.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's somewhat traditional when learning programming languages to begin with
    a **Hello World** example. A Hello World program is simply using your code to
    display or log the text Hello World. It's always been the general starting point
    because sometimes just getting your code environment set up and having your code
    executing correctly is half the battle. At least, this was more the case in older
    programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Swift makes this easier than ever, and without going into the structure of
    a Swift file (which we shall do later on and is also much easier than Objective-C
    and past languages), here''s how you create a Hello World program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That's it! That is all you need to have the text `Hello World` appear in Xcode's
    debug area output.
  prefs: []
  type: TYPE_NORMAL
- en: No more semicolons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Those of us who have been programming for some time might note that the usually
    all-important semicolon (`;`) is missing. This isn't a mistake; in Swift, we don't
    have to use a semicolon to mark the end of an expression. We can if we'd like,
    and some of us might still do it as a force of habit, but Swift has omitted that
    common concern.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of the semicolon to mark the end of an expression stems from the earliest
    days of programming when code was written in simple word processors and needed
    a special character to represent when the code's expression ends and the next
    begins.
  prefs: []
  type: TYPE_NORMAL
- en: Variables, constants, and primitive data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While programming any application, either if new to programming or trying to
    learn a different language, first we should get an understanding of how a language
    handles variables, constants, and various data types, such as Booleans, integers,
    floats, strings, and arrays. You can think of the data in your program as boxes
    or containers of information. Those containers can be of different flavors or
    types. Throughout the life of your game, the data can change (variables, objects,
    and so on) or they can stay the same.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the number of lives a player has would be stored as a variable,
    as that is expected to change during the course of the game. That variable would
    then be of the primitive data type integer, which is basically whole numbers.
    Data that stores, say, the name of a certain weapon or power-up in your game,
    would be stored in what's known as a constant, as the name of that item is never
    going to change. In a game where the player can have interchangeable weapons or
    power-ups, the best way to represent the currently equipped item would be to use
    a variable. A variable is a piece of data that is bound to change. That weapon
    or power-up will also most likely have a bit more information to it than just
    a name or number; the primitive types we mentioned prior. The currently equipped
    item would be made up of properties, such as its name, power, effects, index number,
    and the sprite or 3D model that visually represents it. Thus, the currently equipped
    item wouldn't just be a variable of a primitive data type, but be what is known
    as a type of object. Objects in programming can hold a number of properties and
    functionalities that can be thought of as a *black box* of both function and information.
    The currently equipped item in our case would be a sort of *placeholder* that
    can hold an item of that type and interchange it when needed, fulfilling its purpose
    as a replaceable item.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Swift is what's known as a *type-safe language*, so we should keep track of
    the exact type of data and even it's future usage (that is, if the data is or
    will be `NULL`), as it's very important when working with Swift compared with
    other languages. Apple made Swift behave this way to help keep runtime errors
    and bugs in your applications to a minimum, so we can find them much earlier in
    the development process.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look at how variables are declared in Swift.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Those of us who have been developing in JavaScript will feel right at home here.
    Like JavaScript, we use the keyword `var` to represent a variable, and we named
    the variable `lives`.
  prefs: []
  type: TYPE_NORMAL
- en: The compiler implicitly knows that the type of this variable is a whole number,
    the primitive data type `Int`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The type can be explicitly declared as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also represent lives as the floating point data types double or float,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using a colon after the variable's name declaration allows us to explicitly
    typecast the variable.
  prefs: []
  type: TYPE_NORMAL
- en: Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During your game, there will be points of data that don't change throughout
    the life of the game or the game's current level/scene. These can be various data,
    such as gravity, a text label in the **Heads-Up Display** (**HUD**), the center
    point of character's 2D animation, an event declaration, or the time before your
    game checks for new touches/swipes.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring constants is almost the same as declaring variables.
  prefs: []
  type: TYPE_NORMAL
- en: Using a colon after the variable's name declaration allows us to explicitly
    typecast the variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we use the keyword `let` to declare constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s another example using a string that could represent a message displayed
    on the screen at the start or end of a stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Since the string `stageMessage` is a constant, we cannot change it once it has
    been declared. Something like this would be better as a variable using `var` instead
    of `let`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '"Why don''t we declare everything as a variable?"'
  prefs: []
  type: TYPE_NORMAL
- en: This is a question sometimes asked by new developers and is understandable why
    it's asked, especially since game apps tend to have a large number of variables
    and more interchangeable states than an average application. When the compiler
    is building its internal list of your game's objects and data, more goes on behind
    the scenes with variables than with constants.
  prefs: []
  type: TYPE_NORMAL
- en: Without getting too much into topics, such as the program's stack and other
    details, in short, having objects, events, and data declared as constants with
    the `let` keyword is more efficient than `var`. In a small app on the newest devices
    today, though not recommended, we could possibly get away with this without seeing
    a great deal of loss in app performance. When it comes to video games, however,
    performance is critical. Buying back as much performance as possible can allow
    a better player experience. Apple recommends that when in doubt, always use `let`
    at the time of declaration and have the compiler say when to change to `var`.
  prefs: []
  type: TYPE_NORMAL
- en: More about constants…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of Swift version 1.2, constants can have a conditionally controlled initial
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prior to this update, we had to initialize a constant with a single starting
    value or be forced to make the property a variable. In Xcode 6.3 and newer, we
    can perform the following logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of this in a game could be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'With this functionality, a constant''s initialization can have a layer of variance
    while still keeping it unchangeable, or immutable through its use. Here, the constant
    `stageBoss` can be one of two types based on the game''s difficulty: `Boss.toughBoss()`
    or `Boss.normalBoss()`. The boss won''t change for the course of this stage, so
    it makes sense to keep it as a constant. More on **if and else statements** is
    covered later in the chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays, matrices, sets, and dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Variables and constants can represent a collection of various properties and
    objects. The most common collection types are arrays, matrices, sets, and dictionaries.
    An array is an ordered list of distinct objects; a matrix is, in short, an array
    of arrays; a set is an unordered list of distinct objects; and a dictionary is
    an unordered list that utilizes a *key : value* association with the data.'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s an example of an array in Swift:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The object `stageNames` is a collection of strings representing the names of
    a game's stages. Arrays are ordered by subscripts from `0` to array length `-1`.
    So, `stageNames[0]` would be `Downtown Tokyo`; `stageNames[2]` would be `Nether`;
    and `stageNames[4]` would give an error since that's beyond the limits of the
    array and doesn't exist. We use `[]` brackets around the class type of `stageNames`,
    `[String]`, to tell the compiler that we are dealing with an array of strings.
    Brackets are also used around the individual members of this array.
  prefs: []
  type: TYPE_NORMAL
