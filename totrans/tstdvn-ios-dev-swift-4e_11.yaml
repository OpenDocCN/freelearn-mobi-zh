- en: '*Chapter 8*: Building a Simple Detail View'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often in iOS development, table views or collection views just give a brief
    summary of the presented items. To figure out all the details of the shown items,
    the user has to select an item so that they can be redirected to the details.
    In the details view, the user can often interact with the shown item.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in a mail app, the summary only shows the sender, the subject,
    and the first few lines of the mail. To read the complete mail and to answer it,
    the user has to open it in the details view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will build the details view for our to-do items. The chapter
    is structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding labels, a button, and a map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filling in the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the to-do item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We start by adding the user interface elements to the view.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter08](https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter08)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding labels, a button, and a map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have done this so often already that you might guess what we have to do
    first. That''s right, we need a test case class for our tests. Select the `ToDoItemDetailsViewControllerTests`.
    Make sure that it is added to the unit test target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – The test case needs to be added to the unit test target'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.01_B16497.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – The test case needs to be added to the unit test target
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the two template tests in the created test case class and add `@testable
    import ToDo` below the existing import statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The details view needs some labels to show the information of the to-do item.
    Let''s start with the label for the title. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following property for the system under test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Xcode complains that it **Cannot find type 'ToDoItemDetailsViewController' in
    scope**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `ToDoItemDetailsViewController`. Make it a subclass of **UIViewController**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Options for the view controller class'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.02_B16497.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – Options for the view controller class
  prefs: []
  type: TYPE_NORMAL
- en: Remove the template code inside the created class. Go back to `ToDoItemDetailsViewControllerTests`.
    Xcode should remove the error after a few seconds. If it doesn't, select the **Product**
    | **Build** menu item to compile the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have two choices. One, we could build the user interface in code as we
    did for the table view cells in the previous chapter. Two, we could use a storyboard
    for the user interface. To give you a broader picture in this book, we will use
    the storyboard for the user interface in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `setUpWithError()` and the `tearDownWithError()` methods with the
    following implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The parentheses around `(storyboard.instantiateViewController(withIdentifier:
    "ToDoItemDetailsViewController") as! ToDoItemDetailsViewController)` are needed
    to silence a warning produced by Xcode. Try and see what Xcode tells you do when
    you omit them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the setup and the teardown methods in place, we can write the first test
    of that test case class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This test is not finished yet but we have to pause here because the `titleLabel`
    property is missing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the property to `ToDoItemDetailsViewController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can finish the test method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run all tests to confirm that this new test fails. This test fails in `setUpWithError()`.
    Click the red diamond in the failure message to see what the problem is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The storyboard doesn''t have a view controller with the identifier
    ''ToDoItemDetailsViewController'''
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.03_B16497.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – The storyboard doesn't have a view controller with the identifier
    'ToDoItemDetailsViewController'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the problem shown in *Figure 8.3*, we need to add a new scene for
    that view controller to the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Main.storyboard` file in the Interface Builder in Xcode and click
    the plus (**+**) button in the toolbar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Open the library'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.04_B16497.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – Open the library
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for `view controller` and drag a **View Controller** object onto the
    storyboard. Open the **Identity** inspector by selecting the **View** | **Inspectors**
    | **Identity** menu item. Change **Class** and **Storyboard ID** to **ToDoItemDetailsViewController**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Changing the class and the storyboard ID of the scene'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.05_B16497.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – Changing the class and the storyboard ID of the scene
  prefs: []
  type: TYPE_NORMAL
- en: Run the tests again. The new test still fails because the `titleLabel` property
    is `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add a label to the storyboard scene and connect it with `IBOutlet`.
    Open the library by selecting the `ToDoItemDetailsViewController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – The added label on the To Do Item Details View Controller scene'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.06_B16497.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – The added label on the To Do Item Details View Controller scene
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ToDoItemsDetailsViewController` in the **Assistant** editor. If it
    opens another file, close Xcode and restart it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hold down the *Ctrl* key and drag a connection from the label in the storyboard
    to the `IBOutlet` property in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Connect the label in the scene with the IBOutlet property'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.07_B16497.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – Connect the label in the scene with the IBOutlet property
  prefs: []
  type: TYPE_NORMAL
- en: Run the tests again. All tests pass.
  prefs: []
  type: TYPE_NORMAL
- en: As we have hardly written any code, there is nothing to refactor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way, you can add the labels for the date, the location, and the
    description of the to-do item. We won''t show this here because it works exactly
    the same as adding the label for the title. Follow the steps again with a different
    name for the property. To get you started, here are the three tests for these
    three new labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Add these tests one by one and make them pass. But make sure to only have one
    failing test at any time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need a map view to show the location of the to-do item if the location
    is set. Follow these steps to add it to the view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following test to `ToDoItemDetailsViewControllerTests`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the test to confirm that this new test fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MapKit` import to `ToDoItemDetailsViewController` and add an outlet
    for the `mapView` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the test again. It still fails, but this time because the `mapView` property
    is `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: Open `Main.storyboard` and drag a `IBOutlet` property of the map view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests to confirm that all tests now pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last UI element we have to add to the view is the button to mark an item
    as **Done**. This works the same way as adding the labels previously. So again,
    this is left as an exercise for you. Here is the test to get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Make this test pass by adding a `UIButton` instance to the view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, you should take some time to make this user interface better.
    Move the elements and add layout constraints so that the user interface is more
    pleasing to the eye. When you''ve finished, your result could look similar to
    the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – The user interface for the details view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.08_B16497.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – The user interface for the details view
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the user interface for the details view, we can present the
    data of the to-do item when the details are pushed onto the screen. This is what
    we will implement in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Filling in the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to update the user interface with the data from the to-do
    item:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with a new test. Add the following test method to `ToDoItemDetailsViewControllerTests`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, we get an error from Xcode that **Value of type 'ToDoItemDetailsViewController'
    has no member 'toDoItem'**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `ToDoItemDetailsViewController` and add the `toDoItem` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can finish writing the test by adding the `Assert` call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the tests to confirm that this new test fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the implementation code and replace the property declaration with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the tests again to confirm that all tests now pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tests and the implementation for the other labels work in a similar way,
    and are left for you to do as an exercise. To get you started, here are the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Make these tests pass one by one. Make sure that you never have more than one
    failing test.
  prefs: []
  type: TYPE_NORMAL
- en: 'The map view should show a map of the location of the to-do item when the to-do
    item contains a location with a coordinate. Follow these steps to add that feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following test to `ToDoItemDetailsViewControllerTests`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this test, we test if the center coordinate of the map view is set to the
    coordinate of the location of the to-do item.
  prefs: []
  type: TYPE_NORMAL
- en: Run all tests to confirm that this new test fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this test pass, add the following code to the `didSet` handler of the
    `toDoItem` property in `ToDoItemDetailsViewController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the tests again to confirm that all tests now pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the presented to-do item is already done, the **Done** button should be
    disabled. Follow these steps to implement this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following test to `ToDoItemDetailsViewControllerTests`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the tests to confirm that this new test fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this new test pass, add the following code to the `didSet` handler
    of the `toDoItem` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code makes the test pass. Try it by running all tests. But this line of
    code is clearly wrong because it disables the **Done** button for all to-do items,
    even for those that are not done yet. To fix this bug, we need another test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following test to `ToDoItemDetailsViewControllerTests`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the tests. This new test fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it pass, replace the `doneButton.isEnabled = false` line with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run all tests again to confirm that this code fixes the bug.
  prefs: []
  type: TYPE_NORMAL
- en: Great! We are finished with updating the user interface with the information
    from the to-do item. In the following section, we will implement the functionality
    of the **Done** button.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the to-do item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the user of the app taps the **Done** button, our app has to tell the
    to-do item store to change the item''s status to **Done**. Follow these steps
    to implement that feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following test method to `ToDoItemDetailsViewControllerTests`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ToDoItemDetailsViewController` doesn''t have a property for `toDoItemStore`.
    This means we have to pause writing this test and add this property first.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `ToDoItemDetailsViewController` and add the `toDoItemStore` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can finish the test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the `sut.doneButton.sendActions(for: .touchUpInside)` call, we send the
    `.touchUpInside` action to the target of the `toDoItemStore` was called with the
    `toDoItem` variable of the system under test.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add an action to the `Main.storyboard` file and the `ToDoItemDetailsViewController.swift`
    file side by side. Hold down the *Ctrl* key and drag a connection from the **Done**
    button into the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Drag a connection from the Done button to the code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.09_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – Drag a connection from the Done button to the code
  prefs: []
  type: TYPE_NORMAL
- en: 'Change `checkItem` in the **Name** field, and change **Type** to **UIButton**.
    Then click **Connect**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Options for the button action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B16497.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.10 – Options for the button action
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, change the action code to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run all tests to confirm that this makes all tests pass again.
  prefs: []
  type: TYPE_NORMAL
- en: When the item is checked as **Done**, the **Done** button should be disabled
    to show the user that this task is finished. You will implement this feature in
    the exercises for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a simple detail view controller following test-driven
    development. We learned how to test a view controller that is set up using a storyboard.
    And finally, we figured out what we have to do to test the action of a button.
  prefs: []
  type: TYPE_NORMAL
- en: The skills you gained in this chapter will help you in writing tests for all
    kinds of user interfaces, even those that are more complicated. You are now able
    to test the presence and the interaction of user interface elements with the rest
    of the code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will write tests for a view that is created using SwiftUI.
    For that task, we will have to add a third-party library from GitHub to our test
    target.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the user selects the **Done** button to show the task as finished, the
    **Done** button should be disabled to show the user that this action was successful.
    Implement this feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the code so that the map view is hidden when no coordinate is set in
    the to-do item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
