- en: Chapter 2. Creating the Stuff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have Xcode all set up, I know you are excited to get started on
    developing your awesome new game! However, as you know, we have to start slow!
    All games have assets, such as a 3D model, an image, or super awesome sound effects.
    If you don''t know anything about stuff like this, then you''ve come to the right
    place! In this chapter we are going to discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating or obtaining assets for your game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an optimized asset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing your game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is where you can start to get really creative! Once you start designing
    the building blocks of your awesome new project, the fun really begins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some assets will be easy to create, some will require a little more effort,
    some may involve paying people to create them for you, and some may require downloading
    free assets, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Stuff](img/B03553_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enough intro, let's roll!
  prefs: []
  type: TYPE_NORMAL
- en: Let's talk assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assets are the building blocks of your game. They will essentially make up 100
    percent of your game, regardless of whether you are creating a 3D blockbuster,
    or a 2D platformer as we will in this book.
  prefs: []
  type: TYPE_NORMAL
- en: There are various assets you will either create, purchase, or have created for
    you for your project. Let's break them down.
  prefs: []
  type: TYPE_NORMAL
- en: Sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What?! Don''t worry, not a watery sprite as in, say, Homer''s The Odyssey.
    When it comes to video game assets, sprites are essentially images that are used
    in your game. See that Mario image in the intro of this chapter? That right there
    is a sprite. Sprites can also be used for special effects, such as 2D lens flares
    or particles. Sprites are usually created in sprite sheets containing characters
    and their animations, such as the following image, which is a ripped sprite sheet
    from one of the many Megaman titles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sprites](img/B03553_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sprites can be super easy to create, or they can be massively complex and take
    many hours to draw. Yes, draw. Sprites can be drawn in any imaging software, using
    just the mouse, or a tablet (I highly recommend purchasing one because it makes
    sprite creation a heck of a lot easier).
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, sprites can be rendered using a 3D animation program. I have
    used 3D Studio Max for some of my earlier games, and I was very pleased with the
    results.
  prefs: []
  type: TYPE_NORMAL
- en: '**Best sprite size**: Varies on device, but where a 32x32 px image will look
    good on a 3GS, it will be impossible to see on a retina iPad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File type**: PNGs are usually the best file format (in my personal opinion)
    as they have a great compression (small file sizes = better performance), quality,
    and they support transparency, which is essential when drawing your characters
    as you don''t want a white box surrounding them!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommended software**: I am partial to Adobe Photoshop, but as I''ve mentioned
    numerous times in my other books, there are a lot of free alternatives to it.
    A programs such as Gimp is a perfect example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sound effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BOOM! KABLAMO! PAFF! Well these speech bubbles are not required for games! Sound
    effects are just as important as the sprites you create. Now, sound effects can
    be tricky to create yourself unless you have professional audio recording equipment.
    For me, I search for royalty-free sound effects on the Internet. Believe me, there's
    a plethora of them available for you to use, ranging from cartoon sound effects,
    to gunshots and explosions. [www.freesound.org](http://www.freesound.org) is a
    great site that I've used many times for my games.
  prefs: []
  type: TYPE_NORMAL
- en: File type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The iPhone audio SDK documentation indicates that iPhone supports audio in
    several formats, however there are drawbacks to each:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MP3**: This is a highly compressed, but also high-quality encoding format
    that preserves the richness of music and spoken voice. However, only one single
    MP3 stream can be played at a time on an iPhone because it requires the use of
    the hardware decoder. This excludes MP3 as a format for sound effects, since it
    will interrupt background music and/or any user music being played.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WAV**: iPhone only supports WAV files if they are PCM-encoded and do not
    require any compression codes. While WAV supports many different sampling rates
    and bit-depths, it results in very large files (180k/sec for 16-bit/44.1kHz/stereo
    audio). This large size becomes prohibitive when you have many effects to play
    rapidly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AIFF**: This has similar problems to WAV files—Apple Lossless compression
    is supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom**: You can use iPhone low-level APIs to play your own audio from any
    source, but this seems like overkill for playing a simple sound effect in a game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommended software**: For manipulating sound effects and rewriting/converting
    them, the best software I''ve found to date is **Audacity**. It''s free, easy
    to use, and supports the main audio formats. The following image shows the Audacity
    logo:![File type](img/B03553_02_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Music
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another important asset is music. I love music and wish I could have a song
    playing at all times in my games. However, I understand in many games music can
    be used for setting the mood, and can stir up emotions for the following scene.
    Creation of music isn't difficult, it just takes a good ear and a little bit of
    creativity. You can either create your own music, or you can download royalty-free
    audio. You always want to make sure it's royalty free, or else you could make
    someone very (legally) angry.
  prefs: []
  type: TYPE_NORMAL
- en: Formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, the best format for music is MP3\. It allows only one
    track so it is uninterrupted by other sound effects and provides a high-quality,
    low file size.
  prefs: []
  type: TYPE_NORMAL
- en: Best software
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Garage band for the creation, and for any editing, again use Audacity.
  prefs: []
  type: TYPE_NORMAL
- en: Videos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Personally, I love creating and playing cut scene videos for my games. I feel
    they provide a good break between game play, but, hey, that's just me. I know
    many people just skip them as soon as they begin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image is grabbed from the intro video of one of my projects called
    *LOST*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Videos](img/B03553_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: M4V (many programs, including QuickTime, can convert any video to an M4V, but
    if you want a little more control, use **Handbrake**).
  prefs: []
  type: TYPE_NORMAL
- en: Best software
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I use 3DS Max a lot for my video creations and then I import into **iMovie**
    for manipulating. If you are looking for a 2D solution, try Adobe Flash (I believe
    it used to be called **FlashMX**). For converting the videos use Handbrake, which
    has a huge array of settings you can change to tweak the video for the desired
    quality and file size.
  prefs: []
  type: TYPE_NORMAL
- en: Creating optimized assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with creating optimized sprites for the best performance. How will
    this affect performance? Think of a game as a video, and your device as the DVD
    player, or even your TV. The game plays frame by frame and your device displays
    each frame. However, it has to render each frame. This happens so fast you will
    never notice it, but now imagine your device has to render large images (let's
    think dialup internet loading a huge photo). It can take longer and because the
    device has to work harder, the battery will drain quicker.
  prefs: []
  type: TYPE_NORMAL
- en: This is only one reason that can slow performance; we will discuss other reasons
    further on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following figure, I''ve drawn a character design from my last book,
    and I drew him in Photoshop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating optimized assets](img/B03553_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For your information, his name is **Kevin**. It doesn''t look like much does
    it? Here are the details of the drawing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Image size**: 52px x 52px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color space**: RGB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compression**: None at the moment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File type**: Unsaved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I went ahead and saved the image in three different file types: bitmap, PNG,
    and JPEG. In the following figure we see the different file types, beginning with
    PNG on the left, JPEG in the middle, and bitmap on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating optimized assets](img/B03553_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So what are we looking at here? Let''s break it down. We will start with the
    JPEG, a widely used image format:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File size**: 29KB, quite miniscule when you consider we now have multi-terabyte
    hard drives. However, JPEGs do tout the largest file size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alpha channel**: No, as mentioned before, jpegs do not allow transparency,
    which is ok if you are just creating a sprite that fills the whole box and has
    no background, but for our little character here, a JPEG will do us no good.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other than that, JPEGs are the same as PNG files:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File size**: 9KB, quite a lot smaller then the others, meaning increased
    performance!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alpha channel**: Yes! This guy is a winner here!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then on to the bitmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File size**: 17KB, again very small and in this case the midrange file size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alpha channel**: Again, no'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color profile**: Non-existent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essentially bitmaps are basic image files with not much information regarding
    the actual image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Awesome! So it seems that PNGs are the winner! I went a step further to test
    my theory: I imported these three images into a blank **SpriteKit** project and
    wanted to see the difference between rendering each image. Want to know my findings?
    Of course you do! It''s all about the science!:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BMP**: Cannot be imported into the `Images.xcassets` section the way I did
    with the other two images, so that''s a bummer... But I worked around it. The
    CPU had a high 16 percent usage, memory had a range of 7.6 to 7.8MB (very similar
    to the PNG), and the FPS (or frames per second) dipped when the sprite was created
    at 56FPS, a completely unnoticeable dip.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JPEG**: In Xcode''s debugger, simply rendering the sprite file spinning like
    a top, the CPU seemed to hover around 12 percent usage (I''m using a 16GB iPhone
    5S), memory was clocked at 7.9MB, and the FPS remained steady at 60FPS, the best
    you can get.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PNG**: Again, in the debugger, rendering the PNG image spinning like a top,
    the CPU fluctuated between 11 percent and 12 percent usage, memory ranged between
    7.5 and 7.8MB, a little bit lower then the jpeg but not enough to notice just
    rendering one image, and the FPS was clocked in at a steady 60FPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is what the findings will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating optimized assets](img/B03553_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For each file type, I created about 200 images on the screen, all spinning at
    the same speed, and never saw any hiccups in frame rate, but did see a decent
    increase in **CPU** and **Memory** (an increase of about 5-10 percent).
  prefs: []
  type: TYPE_NORMAL
- en: All in all, not bad figures. It still seemed as though the PNG was easier to
    render than the others, which does make a huge difference when rendering multiple
    objects or images in memory.
  prefs: []
  type: TYPE_NORMAL
- en: Video conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you are converting your videos using a third-party program that doesn''t
    have iOS presets, iOS supports the following formats and settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**H.264 video**: up to 1.5 Mbps, 640 by 480 pixels, 30 frames per second, Low-Complexity
    version of the H.264 Baseline Profile with AAC-LC audio up to 160 Kbps, 48 kHz,
    stereo audio in `.m4v`, `.mp4`, and `.mov` file formats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**H.264 video**: up to 768 Kbps, 320 by 240 pixels, 30 frames per second, Baseline
    Profile up to Level 1.3 with AAC-LC audio up to 160 Kbps, 48 kHz, stereo audio
    in `.m4v`, `.mp4`, and `.mov` file formats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MPEG-4 video**: up to 2.5 Mbps, 640 by 480 pixels, 30 frames per second,
    Simple Profile with AAC-LC audio up to 160 Kbps, 48 kHz, stereo audio in `.m4v`,
    `.mp4`, and `.mov` file formats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, take a look at [https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/MediaLayer/MediaLayer.html](https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/MediaLayer/MediaLayer.html).
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the developer forums and iOS development documentation will be your
    best friend!
  prefs: []
  type: TYPE_NORMAL
- en: Audio conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a fantastic article by Audrey Tam regarding audio encoding for iOS.
    Here''s a quick excerpt from the article found on [raywenderlich.com](http://raywenderlich.com)
    ([http://www.raywenderlich.com/69365/audio-tutorial-ios-file-data-formats-2014-edition](http://www.raywenderlich.com/69365/audio-tutorial-ios-file-data-formats-2014-edition)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"There are actually just a few (formats) that are the preferred encodings
    to use. To know which to use, you have to first keep this in mind:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*You can play linear PCM, IMA4, and a few other formats that are uncompressed
    or simply compressed quite quickly and simultaneously with no issues.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*For more advanced compression methods such as AAC, MP3, and ALAC, the iPhone
    does have hardware support to decompress the data quickly—but the problem is it
    can only handle one file at a time. Therefore, if you play more than one of these
    encodings at a time, they will be decompressed in the software, which is slow.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*So to pick your data format, here are a couple of rules that generally apply:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***If space is not an issue**, just encode everything with linear PCM. Not
    only is this the fastest way for your audio to play, but you can play multiple
    sounds simultaneously without running into any CPU resource issues.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***If space is an issue**, most likely you''ll want to use AAC encoding for
    your background music and IMA4 encoding for your sound effects."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you have a lot of audio files being played throughout your game (who doesn't?),
    you can save a lot of time and guesswork by importing them into iTunes, then right-clicking
    on them and selecting create AAC version. iTunes will then create a new AAC version
    that you can locate and import into your project and it will work 100 percent
    of the time. No guesswork!
  prefs: []
  type: TYPE_NORMAL
- en: I know, it can be confusing at times trying to figure out which format to use
    and how to convert things, but Apple does make things fairly easy by including
    audio conversion right in iTunes.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's talk a little bit about design.
  prefs: []
  type: TYPE_NORMAL
- en: How to design your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Game design can be a lot of fun, especially when you get a really great idea
    and you just keep rolling with it and adding more bits and pieces to it. No doubt
    you already have an idea for your game, but it's always a great idea to put things
    down in writing. I tell people this all the time, write it down, or you'll either
    forget it completely, or certain critical details. I've done it myself, I've had
    a great idea for a new game when I awake at 2am, but I don't write it down and
    by the morning I've completely forgotten my great idea. Not only is it good for
    remembering things, but it's also good for planning and expediting the creation
    and development process. The game we are going to create in this book will be
    in the style of *Contra* in the aspect that it will be a platformer, and we will
    add the ability to allow playing with your friends! But that will come much later
    in the book. We are also going to go through the planning process together. The
    following is be a template game design document that will lay out what we plan
    to do for the game in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Some of these headings will be left out, which is fine because we can figure
    out certain details as we go.
  prefs: []
  type: TYPE_NORMAL
- en: Game design document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using the following pattern when creating the game design document:'
  prefs: []
  type: TYPE_NORMAL
- en: Title page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game name**: Adesa'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Game overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game concept**: A game such as Contra, 2D Platform shooter. The player is
    a cartoon Space Soldier who was launched into space after his ship exploded.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Genre**: Platformer shoot ''em up.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target audience**: Young children to adults (the game will not contain any
    graphic violence).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game flow summary**: The game will be a side scroller and the player will
    be controlled via touch controls, both in the game and in the menu.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Look and feel**: 8-bit 2D goodness.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Gameplay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game progression**: Level by level, no player upgrades'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mission/challenge structure**: Locate lost equipment → find a way off the
    planet'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Puzzle structure**: NA'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objectives**: What are the objectives of the game?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Find lost equipment
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Hunt for food after finding destroyed rations
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Escape inhabitant captivity and reclaim stolen equipment
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Reach communications relay
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Fight communications officer
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Radio home to find out crash was intentional
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Begin salvaging parts to build a ship
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Build ship
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Fight inhabitants to prevent destruction of your ship
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Return home (space gameplay?)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Fight nemesis
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Mechanics**: What are the rules of the game, both implicit and explicit?
    This is the model of the universe that the game works under. Think of it as a
    simulation of a real world, how do all the pieces interact? This can actually
    be a very large section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Physics**: Normal'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Movement in the game**: Run and jump'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objects**: Some moveable by pushing (for example, walking into them)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions, including whatever switches and buttons are used, interacting with
    objects, and what means of communication are used**: Buttons to be pressed (exactly
    how will be figured out as development continues), communication will be via on-screen
    text'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Combat**: Shooting enemies with telefuser (need to remember this name)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Economy**: None'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game options**: Possible difficulty, Facebook integration to post achievements,
    multiplayer'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cheats and Easter Eggs**: To be figured out as development continues'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Story, setting and character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Story and narrative**: Simple and sweet, your ship explodes on a space mission,
    vaulting you into deep space. You land in an unexplored world and have to locate
    your supplies and fight your way back home. You find out the explosion was planned
    as the main enemy wanted your position in the Space Army.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Game world
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'General look and feel of world: Dark and gloomy, almost forest like.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Characters**: Jeff, the main player, is the head of the Space Army. Moly,
    the second in command, is the second playable character. Nemo is your arch nemesis
    who planned the destruction of your ship to take over your place in the Space
    Army.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Levels**: Each level should include a synopsis, the required introductory
    material (and how it is provided), the objectives, and the details of what happens
    in the level. Depending on the game, this may include the physical description
    of the map, the critical path that the player needs to take, and what encounters
    are important or incidental (see section 3.1.4 for level-progression ideas).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Training level**: Locating your equipment will get the player used to the
    controls and gradually dip their feet into combat.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual system**: If you have an HUD, what is on it? Health, lives, and gun
    heat level'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control system**: On-screen touch controls'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Audio, music, sound effects**: To be completed at a later time'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Help system**: Help screen on main menu and training level'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Artificial Intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Opponent and Enemy AI**: Simple pacing planet inhabitant combatants that
    shoot at you on sight'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-combat and friendly characters**: N/A'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target hardware**: iPhone and iPad'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Development hardware and software, including game engine**: SpriteKit'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network requirements**: Bluetooth and possible wireless requirements for
    online activity'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game art**: In development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See? It's not that difficult! It's pretty in-depth but not all of it is required.
    I actually deleted quite a few lines because they weren't applicable to the game
    we are going to be creating. Now that the game is essentially planned, there are
    two other design documents you can make use of. The first is level design sheets,
    and the second is storyboards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Level design sheets provide you with a grid to fill in to create your levels
    on paper:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Game design document](img/B03553_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Blank templates are supplied for you in the resource section of this book.
    I suggest printing them out and putting them in a binder so you can have a "game
    design book" as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Game design document](img/B03553_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I use storyboards for designing cut scenes that will occur throughout the game.
    This is not required but, hey, it's still a good thing to have things planned
    out so the development will run quickly and smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: I love the planning process! I think we are about ready to blast off and get
    into some development don't you? Yeah! That will have to wait until the next chapter
    though, I've rambled enough in this chapter already. There's a lot to take in
    when it comes to device performance and optimization, and it can be pretty confusing.
    I'm all self-taught, so I hope you learned something!
  prefs: []
  type: TYPE_NORMAL
- en: Onwards and upwards, so let's blast off into the development of our awesome
    game!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we discussed asset creation, what programs to use, as well as
    the best formats to use. We then had a great comparison between file type rendering
    to show which file type is more efficient and easier on the system. We then discussed
    the design aspect of game development. We took a look at a game design document,
    as well as level design and storyboard documents. In the next chapter, we begin
    development!
  prefs: []
  type: TYPE_NORMAL
