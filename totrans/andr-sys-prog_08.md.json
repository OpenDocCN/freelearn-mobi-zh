["```kt\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<manifest> \n\n  <remote  name=\"github\" \n           revision=\"refs/tags/android-7.1.1_r4_x86vbox_ch08_r1\" \n           fetch=\".\" /> \n\n  <remote  name=\"aosp\" \n           fetch=\"https://android.googlesource.com/\" /> \n  <default revision=\"refs/tags/android-7.1.1_r4\" \n           remote=\"aosp\" \n           sync-c=\"true\" \n           sync-j=\"1\" /> \n\n  <!-- github/android-7.1.1_r4_ch08 --> \n  <project path=\"kernel\" name=\"goldfish\" remote=\"github\" /> \n  <project path=\"bootable/newinstaller\"   \n  name=\"platform_bootable_newinstaller\" \n  remote=\"github\" /> \n  <project path=\"device/generic/common\" name=\"device_generic_common\" \n  groups=\"pdk\" \n  remote=\"github\" /> \n  <project path=\"device/generic/x86vbox\" name=\"x86vbox\" \n  remote=\"github\" /> \n  <project path=\"bootable/recovery\" name=\"android_bootable_recovery\" \n  remote=\"github\" groups=\"pdk\" /> \n\n  <project path=\"frameworks/base\" name=\"platform_frameworks_base\" \n  groups=\"pdk-cw-fs,pdk-fs\" remote=\"github\" /> \n\n  <project path=\"bionic\" name=\"platform_bionic\" groups=\"pdk\" \n  remote=\"github\" /> \n  <project path=\"device/generic/firmware\" \n  name=\"device_generic_firmware\" \n  remote=\"github\" /> \n  <project path=\"external/alsa-lib\" name=\"platform_external_alsa-lib\" \n  remote=\"github\" /> \n  <project path=\"external/alsa-utils\" \n  name=\"platform_external_alsa-utils\" \n  remote=\"github\" /> \n  <project path=\"external/bluetooth/bluez\" \n  name=\"platform_external_bluetooth_bluez\" remote=\"github\" /> \n  <project path=\"external/bluetooth/glib\" \n  name=\"platform_external_bluetooth_glib\" \n  remote=\"github\" /> \n  <project path=\"external/bluetooth/sbc\" \n  name=\"platform_external_bluetooth_sbc\" \n  remote=\"github\" /> \n  <project path=\"external/busybox\" name=\"platform_external_busybox\" \n  remote=\"github\" /> \n  <project path=\"external/drm_gralloc\" \n  name=\"platform_external_drm_gralloc\" \n  groups=\"drm_gralloc\" remote=\"github\" /> \n  <project path=\"external/drm_hwcomposer\" \n  name=\"platform_external_drm_hwcomposer\" \n  groups=\"drm_hwcomposer\" remote=\"github\" /> \n  <project path=\"external/e2fsprogs\" name=\"platform_external_e2fsprogs\" \n  groups=\"pdk\" remote=\"github\" /> \n  <project path=\"external/ffmpeg\" name=\"platform_external_ffmpeg\" \n  remote=\"github\" /> \n  <project path=\"external/libdrm\" name=\"platform_external_libdrm\" \n  groups=\"pdk\" \n  remote=\"github\" /> \n  <project path=\"external/libtruezip\" \n  name=\"platform_external_libtruezip\" \n  remote=\"github\" /> \n  <project path=\"external/llvm\" name=\"platform_external_llvm\" \n  groups=\"pdk\" \n  remote=\"github\" /> \n  <project path=\"external/mesa\" name=\"platform_external_mesa\" \n  remote=\"github\" /> \n  <project path=\"external/s2tc\" name=\"platform_external_s2tc\" \n  remote=\"github\" /> \n  <project path=\"external/stagefright-plugins\" \n  name=\"platform_external_stagefright-plugins\" remote=\"github\" /> \n  <project path=\"external/v86d\" name=\"platform_external_v86d\" \n  remote=\"github\" /> \n  <project path=\"frameworks/av\" name=\"platform_frameworks_av\" \n  groups=\"pdk\" \n  remote=\"github\" /> \n  <project path=\"frameworks/native\" name=\"platform_frameworks_native\" \n  groups=\"pdk\" remote=\"github\" /> \n  <project path=\"hardware/broadcom/wlan\" \n  name=\"platform_hardware_broadcom_wlan\" \n  groups=\"pdk,broadcom_wlan\" remote=\"github\" /> \n  <project path=\"hardware/gps\" name=\"platform_hardware_gps\" \n  remote=\"github\" /> \n  <project path=\"hardware/intel/audio_media\" \n  name=\"platform_hardware_intel_audio_media\" groups=\"intel\" \n  remote=\"github\" /> \n  <project path=\"hardware/intel/libsensors\" \n  name=\"platform_hardware_intel_libsensors\" remote=\"github\" /> \n  <project path=\"hardware/libaudio\" name=\"platform_hardware_libaudio\" \n  remote=\"github\" /> \n  <project path=\"hardware/libcamera\" name=\"platform_hardware_libcamera\" \n  remote=\"github\" /> \n  <project path=\"hardware/libhardware\" \n  name=\"platform_hardware_libhardware\" \n  groups=\"pdk\" remote=\"github\" /> \n  <project path=\"hardware/libhardware_legacy\" \n  name=\"platform_hardware_libhardware_legacy\" groups=\"pdk\" \n  remote=\"github\" /> \n  <project path=\"hardware/liblights\" name=\"platform_hardware_liblights\" \n  remote=\"github\" /> \n  <project path=\"hardware/libsensors\" \n  name=\"platform_hardware_libsensors\" \n  remote=\"github\" /> \n  <project path=\"hardware/ril\" name=\"platform_hardware_ril\" \n  groups=\"pdk\" \n  remote=\"github\" /> \n  <project path=\"hardware/x86power\" name=\"platform_hardware_x86power\" \n  remote=\"github\" /> \n  <project path=\"system/core\" name=\"platform_system_core\" groups=\"pdk\" \n  remote=\"github\" /> \n\n  <!-- aosp --> \n  <project path=\"build\" name=\"platform/build\" groups=\"pdk,tradefed\" > \n    <copyfile src=\"img/root.mk\" dest=\"Makefile\" /> \n  </project> \n\n... \n</manifest> \n\n```", "```kt\nPRODUCT_MAKEFILES := \\ \n    $(LOCAL_DIR)/x86vbox.mk \n\n```", "```kt\n# includes the base of Android-x86 platform \n$(call inherit-product,device/generic/common/x86.mk) \n\n# Overrides \nPRODUCT_NAME := x86vbox \nPRODUCT_BRAND := Android-x86 \nPRODUCT_DEVICE := x86vbox \nPRODUCT_MODEL := x86vbox_ch8 \n\nTARGET_KERNEL_SOURCE := kernel \nTARGET_KERNEL_CONFIG := android-x86_defconfig \nTARGET_ARCH := x86 \n\nPRODUCT_OUT ?= out/target/product/$(PRODUCT_DEVICE) \n\ninclude $(TARGET_KERNEL_SOURCE)/AndroidKernel.mk \n\n# define build targets for kernel \n.PHONY: $(TARGET_PREBUILT_KERNEL) \n\nLOCAL_KERNEL := $(TARGET_PREBUILT_KERNEL) \n\nPRODUCT_COPY_FILES += \\ \n    $(LOCAL_KERNEL):kernel \\ \n\n```", "```kt\nTARGET_NO_BOOTLOADER := true \n\nTARGET_ARCH := x86 \nTARGET_CPU_ABI := x86 \n\nTARGET_CPU_ABI_LIST_32_BIT := $(TARGET_CPU_ABI) $(TARGET_CPU_ABI2) $(NATIVE_BRIDGE_ABI_LIST_32_BIT) \nTARGET_CPU_ABI_LIST := $(TARGET_CPU_ABI_LIST_32_BIT) \n\nTARGET_USERIMAGES_USE_EXT4 := true \nBOARD_SYSTEMIMAGE_PARTITION_SIZE := 1153433600 \nBOARD_USERDATAIMAGE_PARTITION_SIZE := 419430400 \nBOARD_CACHEIMAGE_PARTITION_SIZE := 69206016 \nBOARD_CACHEIMAGE_FILE_SYSTEM_TYPE := ext4 \nBOARD_FLASH_BLOCK_SIZE := 512 \nTARGET_USERIMAGES_SPARSE_EXT_DISABLED := true \n\nBOARD_SEPOLICY_DIRS += build/target/board/generic/sepolicy \nBOARD_SEPOLICY_DIRS += build/target/board/generic_x86/sepolicy \n\ninclude device/generic/common/BoardConfig.mk \n\n```", "```kt\nTARGET_BOARD_PLATFORM := android-x86 \n\n# Some framework code requires this to enable BT \nBOARD_HAVE_BLUETOOTH := true \n\nBOARD_USE_LEGACY_UI := true \n\n# BOARD_SYSTEMIMAGE_PARTITION_SIZE = $(if $(MKSQUASHFS),0,1610612736) \n\n# customize the malloced address to be 16-byte aligned \nBOARD_MALLOC_ALIGNMENT := 16 \n\n# Enable dex-preoptimization to speed up the first boot sequence \n# of an SDK AVD. Note that this operation only works on Linux for now \nifeq ($(HOST_OS),linux) \nWITH_DEXPREOPT := true \nWITH_DEXPREOPT_PIC := true \nendif \n\n# the following variables could be overridden \nTARGET_PRELINK_MODULE := false \nTARGET_NO_KERNEL ?= false \nTARGET_NO_RECOVERY ?= true \nTARGET_EXTRA_KERNEL_MODULES := tp_smapi \nifneq ($(filter efi_img,$(MAKECMDGOALS)),) \nTARGET_KERNEL_ARCH ?= x86_64 \nendif \nTARGET_USES_64_BIT_BINDER := $(if $(filter x86_64,$(TARGET_ARCH) $(TARGET_KERNEL_ARCH)),true) \n\nBOARD_USES_GENERIC_AUDIO ?= false \nBOARD_USES_ALSA_AUDIO ?= true \n... \n\n```", "```kt\nPRODUCT_PROPERTY_OVERRIDES := \\ \n    ro.com.android.dateformat=MM-dd-yyyy \\ \n\n$(call inherit-product,$(LOCAL_PATH)/device.mk) \n$(call inherit-product,$(LOCAL_PATH)/packages.mk) \n\n# Get a list of languages. \n$(call inherit-product,$(SRC_TARGET_DIR)/product/locales_full.mk) \n\n# Get everything else from the parent package \n$(call inherit-product,$(SRC_TARGET_DIR)/product/full.mk) \n\n```", "```kt\nPRODUCT_PACKAGES := \\ \n    camera.x86 \\ \n    com.android.future.usb.accessory \\ \n    drmserver \\ \n    gps.default \\ \n    gps.huawei \\ \n    hwcomposer.x86 \\ \n    io_switch \\ \n    libGLES_android \\ \n    libhuaweigeneric-ril \\ \n    lights.default \\ \n    power.x86 \\ \n    powerbtnd \\ \n    sensors.hsb \\ \n    tablet-mode \\ \n    v86d \\ \n    wacom-input \\ \n\nPRODUCT_PACKAGES += \\ \n    libwpa_client \\ \n    hostapd \\ \n    wpa_supplicant \\ \n    wpa_supplicant.conf \\ \n\n```", "```kt\nPRODUCT_DIR := $(dir $(lastword $(filter-out device/common/%,$(filter device/%,$(ALL_PRODUCTS))))) \n\nPRODUCT_PROPERTY_OVERRIDES := \\ \n    ro.ril.hsxpa=1 \\ \n    ro.ril.gprsclass=10 \\ \n    keyguard.no_require_sim=true \\ \n    ro.com.android.dataroaming=true \n\nPRODUCT_DEFAULT_PROPERTY_OVERRIDES := \\ \n    ro.arch=x86 \\ \n    persist.rtc_local_time=1 \\ \n\nPRODUCT_COPY_FILES := \\... \nPRODUCT_TAGS += dalvik.gc.type-precise \n\nPRODUCT_CHARACTERISTICS := tablet \n\nPRODUCT_AAPT_CONFIG := normal large xlarge mdpi hdpi \nPRODUCT_AAPT_PREF_CONFIG := mdpi \n\nDEVICE_PACKAGE_OVERLAYS := $(LOCAL_PATH)/overlay \n\n# Get the firmwares \n$(call inherit-product,device/generic/firmware/firmware.mk) \n\n# Get the touchscreen calibration tool \n$(call inherit-product-if-exists,external/tslib/tslib.mk) \n\n# Get the alsa files \n$(call inherit-product-if-exists,hardware/libaudio/alsa.mk) \n\n# Get GPS configuration \n$(call inherit-product-if-exists,device/common/gps/gps_as.mk) \n\n# Get the hardware acceleration libraries \n$(call inherit-product-if-exists,$(LOCAL_PATH)/gpu/gpu_mesa.mk) \n\n# Get the sensors hals \n$(call inherit-product-if-exists,hardware/libsensors/sensors.mk) \n\n# Get tablet dalvik parameters \n$(call inherit-product,frameworks/native/build/tablet-10in-xhdpi-2048-dalvik-heap.mk) \n\n# Get GMS \n$(call inherit-product-if-exists,vendor/google/products/gms.mk) \n\n# Get native bridge settings \n$(call inherit-product-if-exists,$(LOCAL_PATH)/nativebridge/nativebridge.mk) \n\n```", "```kt\n$ repo init https://github.com/shugaoye/manifests -b android-7.1.1_r4_ch08_aosp\n$ repo sync  \n\n```", "```kt\n$ source build/envsetup.sh\n$ lunch x86vbox-eng\n$ make -j4 \n\n```", "```kt\nPATH=/sbin:/bin:/system/bin:/system/xbin; export PATH \n... \n# early boot \nif test x\"$HAS_CTTY\" != x\"Yes\"; then \n    # initialise /proc and /sys \n    busybox mount -t proc proc /proc \n    busybox mount -t sysfs sys /sys \n    # let busybox install all applets as symlinks \n    busybox --install -s \n    # spawn shells on tty 2 and 3 if debug or installer \n    if test -n \"$DEBUG\" || test -n \"$INSTALL\"; then \n        # ensure they can open a controlling tty \n        mknod /dev/tty c 5 0 \n        # create device nodes then spawn on them \n        mknod /dev/tty2 c 4 2 && openvt \n        mknod /dev/tty3 c 4 3 && openvt \n    fi \n    if test -z \"$DEBUG\" || test -n \"$INSTALL\"; then \n        echo 0 0 0 0 > /proc/sys/kernel/printk \n    fi \n    # initialise /dev (first time) \n    mkdir -p /dev/block \n    echo /sbin/mdev > /proc/sys/kernel/hotplug \n    mdev -s \n    # re-run this script with a controlling tty \n    exec env HAS_CTTY=Yes setsid cttyhack /bin/sh \"$0\" \"$@\" \nfi \n... \n\n```", "```kt\n(debug-found)@android:/android # exit  \n\n```", "```kt\n... \n[ -n \"$INSTALL\" ] && do_install \n\nload_modules \nmount_data \nmount_sdcard \nsetup_tslib \nsetup_dpi \npost_detect \n\nif [ 0$DEBUG -gt 1 ]; then \n    echo -e \"\\nUse Alt-F1/F2/F3 to switch between virtual consoles\" \n    echo -e \"Type 'exit' to enter Android...\\n\" \n\n    debug_shell debug-late \nfi \n\n... \n\n```", "```kt\nauto_detect() \n{ \n    tmp=/tmp/dev2mod \n    echo 'dev2mod() { while read dev; do case $dev in' > $tmp \n    sort -r /lib/modules/`uname -r`/modules.alias | \\ \n        sed -n 's/^alias  *\\([^ ]*\\)  *\\(.*\\)/\\1)busybox modprobe \n        \\2;;/p' >> $tmp \n    echo 'esac; done; }' >> $tmp \n    sed -i '/brcmfmac/d' $tmp \n    source $tmp \n    cat /sys/bus/*/devices/*/uevent | grep MODALIAS | sed \n    's/^MODALIAS=//' \n    | sort -u | dev2mod \n    cat /sys/devices/virtual/wmi/*/modalias | dev2mod \n} \n\nload_modules() \n{ \n    if [ -z \"$FOUND\" ]; then \n        auto_detect \n    fi \n\n    # 3G modules \n    for m in $EXTMOD; do \n        busybox modprobe $m \n    done \n} \n\n```", "```kt\n# cat /tmp/dev2mod\ndev2mod() { while read dev; do case $dev in \nxts)busybox modprobe xts;; \nxtea)busybox modprobe tea;; \nxeta)busybox modprobe tea;; \nxcbc)busybox modprobe xcbc;; \nwp512)busybox modprobe wp512;; \nwp384)busybox modprobe wp512;; \nwp256)busybox modprobe wp512;; \n...\nacpi*:80860ABC:*)busybox modprobe intel_lpss_acpi;; \nacpi*:80860AAC:*)busybox modprobe intel_lpss_acpi;; \nacpi*:193C9890:*)busybox modprobe snd_soc_max98090;; \nacpi*:10EC5670:*)busybox modprobe snd_soc_rt5670;; \nacpi*:10EC5650:*)busybox modprobe snd_soc_rt5645;; \nacpi*:10EC5645:*)busybox modprobe snd_soc_rt5645;; \nacpi*:10EC5642:*)busybox modprobe snd_soc_rt5640;; \nacpi*:10EC5640:*)busybox modprobe snd_soc_rt5640;; \nacpi)busybox modprobe acpi_cpufreq;; \nesac; done; }   \n\n```", "```kt\n# cat /sys/bus/*/devices/*/uevent | grep MODALIAS | sed 's/^MODALIAS=//' \n| sort -u\nacpi:ACPI0003: \nacpi:APP0001:SMC-NAPA: \nacpi:LNXCPU: \nacpi:LNXPWRBN: \nacpi:LNXSLPBN: \nacpi:LNXSYBUS: \nacpi:LNXSYSTM: \nacpi:LNXVIDEO: \nacpi:PNP0000: \nacpi:PNP0100: \nacpi:PNP0103:PNP0C01: \nacpi:PNP0200: \nacpi:PNP0303: \nacpi:PNP0400: \nacpi:PNP0501: \nacpi:PNP0700: \nacpi:PNP0A03: \nacpi:PNP0B00: \nacpi:PNP0C02: \nacpi:PNP0C0A: \nacpi:PNP0C0F: \nacpi:PNP0F03: \nacpi:PNP8390: \ncpu:type:x86,ven0000fam0006mod003A:feature:,0000,0001,0002,0003,0004,0005,0006,0\nhdaudio:v83847680r00103401a01 \nhid:b0003g0001v000080EEp00000021 \npci:v0000106Bd0000003Fsv00000000sd00000000bc0Csc03i10 \npci:v00001AF4d00001000sv00001AF4sd00000001bc02sc00i00 \npci:v00008086d00001237sv00000000sd00000000bc06sc00i00 \npci:v00008086d0000265Csv00000000sd00000000bc0Csc03i20 \npci:v00008086d00002668sv00008384sd00007680bc04sc03i00 \npci:v00008086d00007000sv00000000sd00000000bc06sc01i00 \npci:v00008086d00007111sv00000000sd00000000bc01sc01i8A \npci:v00008086d00007113sv00000000sd00000000bc06sc80i00 \npci:v000080EEd0000BEEFsv00000000sd00000000bc03sc00i00 \npci:v000080EEd0000CAFEsv00000000sd00000000bc08sc80i00 \nplatform:alarmtimer \nplatform:goldfish_pdev_bus\nplatform:i8042 \nplatform:microcode \nplatform:pcspkr \nplatform:platform-framebuffer \nplatform:reg-dummy \nplatform:rtc_cmos \nplatform:serial8250 \nscsi:t-0x00 \nscsi:t-0x05 \nserio:ty01pr00id00ex00 \nserio:ty06pr00id00ex00 \nusb:v1D6Bp0001d0404dc09dsc00dp00ic09isc00ip00in00 \nusb:v1D6Bp0002d0404dc09dsc00dp00ic09isc00ip00in00 \nusb:v80EEp0021d0100dc00dsc00dp00ic03isc00ip00in00 \nvirtio:d00000001v00001AF4\n\n```", "```kt\n... \n[ -n \"$DEBUG\" ] && SWITCH=${SWITCH:-chroot} \n\n# We must disable mdev before switching to Android \n# since it conflicts with Android's init \necho > /proc/sys/kernel/hotplug \n\nexec ${SWITCH:-switch_root} /android /init \n... \n\n```", "```kt\n... \nPRODUCT_COPY_FILES := \\ \n    $(if $(wildcard $(PRODUCT_DIR)init.rc),$(PRODUCT_DIR)init.rc:root/init.rc) \\ \n    $(if $(wildcard $(PRODUCT_DIR)init.sh),$(PRODUCT_DIR),$(LOCAL_PATH)/)init.sh:system/etc/init.sh \\  \n... \n    $(if $(wildcard $(PRODUCT_DIR)init.$(TARGET_PRODUCT).rc),$(PRODUCT_DIR)init.$(TARGET_PRODUCT).rc,$(LOCAL_PATH)/init.x86.rc):root/init.$(TARGET_PRODUCT).rc \\ \n    $(if $(wildcard $(PRODUCT_DIR)ueventd.$(TARGET_PRODUCT).rc),$(PRODUCT_DIR)ueventd.$(TARGET_PRODUCT).rc,$(LOCAL_PATH)/ueventd.x86.rc):root/ueventd.$(TARGET_PRODUCT).rc \\ \n... \n\n```", "```kt\non post-fs \n    exec -- /system/bin/logwrapper /system/bin/sh /system/etc/init.sh \n\n```", "```kt\n... \nPATH=/sbin:/system/bin:/system/xbin \n\nDMIPATH=/sys/class/dmi/id \nBOARD=$(cat $DMIPATH/board_name) \nPRODUCT=$(cat $DMIPATH/product_name) \n\n# import cmdline variables \nfor c in `cat /proc/cmdline`; do \n    case $c in \n        BOOT_IMAGE=*|iso-scan/*|*.*=*) \n            ;; \n        *=*) \n            eval $c \n            if [ -z \"$1\" ]; then \n                case $c in \n                    HWACCEL=*) \n                        set_property debug.egl.hw $HWACCEL \n                        ;; \n                    DEBUG=*) \n                        [ -n \"$DEBUG\" ] && set_property debug.logcat 1 \n                        ;; \n                esac \n            fi \n            ;; \n    esac \ndone \n\n[ -n \"$DEBUG\" ] && set -x || exec &> /dev/null \n\n# import the vendor specific script \nhw_sh=/vendor/etc/init.sh \n[ -e $hw_sh ] && source $hw_sh \n\ncase \"$1\" in \n    netconsole) \n        [ -n \"$DEBUG\" ] && do_netconsole \n        ;; \n    bootcomplete) \n        do_bootcomplete \n        ;; \n    hci) \n        do_hci \n        ;; \n    init|\"\") \n        do_init \n        ;; \nesac \n\nreturn 0 \n\n```", "```kt\nfunction do_init() \n{ \n    init_misc \n    init_hal_audio \n    init_hal_bluetooth \n    init_hal_camera \n    init_hal_gps \n    init_hal_gralloc \n    init_hal_hwcomposer \n    init_hal_lights \n    init_hal_power \n    init_hal_sensors \n    init_tscal \n    init_ril \n    post_init \n} \n\n```", "```kt\nfunction init_uvesafb() \n{ \n    case \"$PRODUCT\" in \n        ET2002*) \n            UVESA_MODE=${UVESA_MODE:-1600x900} \n            ;; \n        *) \n            ;; \n    esac \n\n    [ \"$HWACCEL\" = \"0\" ] && bpp=16 || bpp=32 \n    modprobe uvesafb mode_option=${UVESA_MODE:-1024x768}-$bpp \n    ${UVESA_OPTION:-mtrr=3 scroll=redraw} \n} \n\nfunction init_hal_gralloc() \n{ \n    case \"$(cat /proc/fb | head -1)\" in \n        *virtiodrmfb) \n        # set_property ro.hardware.hwcomposer drm \n            ;& \n        0*inteldrmfb|0*radeondrmfb|0*nouveaufb|0*svgadrmfb) \n            set_property ro.hardware.gralloc drm \n            set_drm_mode \n            ;; \n        \"\") \n            init_uvesafb \n            ;& \n        0*) \n            ;; \n    esac \n\n    [ -n \"$DEBUG\" ] && set_property debug.egl.trace error \n} \n\n```"]