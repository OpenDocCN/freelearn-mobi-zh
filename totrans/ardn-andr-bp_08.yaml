- en: Chapter 8. Control an Arduino Board via NFC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see the capabilities of integrating the Arduino **Near
    Field Communications** (**NFC**) shield from Seeed Studio with an NFC-enabled
    Android application that uses the **Android Beam** technology to send a message
    from the Android app to the NFC shield antenna. NFC allows instant communication
    between two devices that are close to each other, which makes it the perfect technology
    to open door locks or for payment services.
  prefs: []
  type: TYPE_NORMAL
- en: We will make a home automation application in this chapter. The NFC shield will
    be connected to the Arduino Uno board, along with the relay. Therefore, we will
    be able to switch the relay on or off depending on the message sent by the Android
    application.
  prefs: []
  type: TYPE_NORMAL
- en: This baseline project will help you develop interesting projects that use NFC
    and will potentially expand the capabilities of such a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following will be the major takeaways from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting an NFC shield to an Arduino board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Android app to communicate with the NFC Arduino shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opening and closing a relay from an Android device via NFC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you will need for this project is an Arduino Uno board.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you need an NFC shield. There are many NFC shields available on the market,
    but for this project, we chose an NFC shield V2.0 from SeeedStudio. We made this
    choice as the shield has good documentation and because some example code was
    already available.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need a relay module. For this project, we used a 5V relay module
    from Polulu.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to make the different electrical connections, you will need some jumper
    wires.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of all hardware parts you will need for this project,
    along with links to find these parts on the Web:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Uno board ([http://www.adafruit.com/product/50](http://www.adafruit.com/product/50))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 5V relay module ([http://www.pololu.com/product/2480](http://www.pololu.com/product/2480))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Arduino NFC shield ([http://www.seeedstudio.com/depot/nfc-shield-v20-p-1370.html](http://www.seeedstudio.com/depot/nfc-shield-v20-p-1370.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The breadboard ([https://www.adafruit.com/product/64](https://www.adafruit.com/product/64))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires ([https://www.adafruit.com/product/758](https://www.adafruit.com/product/758))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the software side, you will of course need the Arduino IDE. You will also
    need the following libraries to make the NFC chip work:'
  prefs: []
  type: TYPE_NORMAL
- en: First, download the PN532 library ([https://github.com/Seeed-Studio/PN532](https://github.com/Seeed-Studio/PN532))
    and put all the folders into your Arduino's `libraries` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, download the NDEF library ([https://github.com/don/NDEF](https://github.com/don/NDEF)),
    and put it in your Arduino's `libraries` folder and rename the folder to `NDEF`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the hardware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's assemble the project. The first step is to simply put the NFC shield
    on top of the Arduino Uno board, and to connect the NFC reader to the shield.
    Note that the NFC can come without the header being soldered; in this case, you
    will need to solder the headers on the shield yourself. To assemble the NFC reader
    to the shield, simply connect the reader via the antenna connector on the shield.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's connect the relay. Simply connect the relay module **VCC** pin to
    the 5V pin of the Arduino board, and the **GND** pin to the **GND** pin of the
    board. Finally, connect the **SIG** pin of the relay to pin number **8** of the
    Arduino board.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is what you should end up with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing the NFC shield
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before writing the application to control the relay via NFC, we will first
    make sure that the shield is functional and that all the libraries were correctly
    installed. To do so, we will write a simple Arduino sketch. The following is the
    complete code for this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now look at the details of this sketch. It starts by including the required
    libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can create an instance of the NFC adapter with these two lines of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `setup()` function of the sketch, we will initialize the serial
    communications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also start the NFC chip, and print a message on the serial monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `loop()` function of the sketch, we will check if an NFC tag is
    present, and we will read it if this is the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all the code for this chapter can be found in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: You can now upload the sketch to the Arduino board and open the serial monitor.
    You should see that the NFC chip is being initialized, and then it starts checking
    for available tags. If you have a simple NFC tag, you can test it now.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, you can also use a simple tag from SeeedStudio ([http://www.seeedstudio.com/depot/MifareOne-RFID-Tag-1356MHz-p-923.html](http://www.seeedstudio.com/depot/MifareOne-RFID-Tag-1356MHz-p-923.html)).
  prefs: []
  type: TYPE_NORMAL
- en: These kinds of tags are actually simpler than the actual RFID technology, but
    they will work just fine to test our project.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Arduino sketch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now write the code that will receive commands from the Android NFC app.
    The goal of this code will be to switch the relay on or off when the NFC shield
    receives a given code from the Android device. As the code for this part is quite
    long, we will split the code into several parts that will be detailed individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code starts by including the required libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also define on which pin the relay is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will define the code that should be received from the Android
    app to switch the relay on or off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to create an instance of the NFC chip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To store data coming from the Android phone via NFC, we will create a `char`
    buffer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `setup()` function of the sketch, we will start the serial communications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also declare the relay pin as an output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `loop()` function, we will constantly check for data coming from
    the phone via NFC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if the message has a size different from zero, we store it, process it,
    and then check if it contains the correct key that we defined before. If this
    is the case, we will switch the state of the relay. The following piece of code
    does exactly the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that all the code for this chapter can be found in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: You can now upload the code to the Arduino board, and move on to the development
    of the Android application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Android app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we will be implementing an Android app that leverages the use
    of the NFC API and hardware allowing us to send a MIME-type message to switch
    on and switch off the relay.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will assume that you will have switched on the `Auto-Import` function within
    your preferences. If not, activate it by going to the **Auto-Import** preferences
    and selecting all available options. The **Auto-Import** preferences are available
    on Mac and Windows as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On a Mac, navigate to **Android Studio** > **Preferences**| **Editor**| **Auto-Import**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, navigate to **File** | **Settings** > **Editor** > **Auto-Import**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With all the necessary settings in place, we will first start off by creating
    a new project, where we will choose the following within the **New Project** setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `Arduino NFC`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum SDK**: `18`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project**: `Blank Activity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity Name**: MainScreen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain**: `arduinoandroid.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to make this project work, we will need to first go over to the Android
    `Manifest` file, which is available at `app` > `src` > `main` > `AndroidManifest.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Laying out the Android user interface and permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we open the file, we need to add permissions for the Android application
    to be able to access the NFC hardware. We will need to add the following two lines
    of code to our `AndroidManifest.xml` file in order to access both the user permissions
    and the actual NFC hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to set up the basic Android layout file. This will allow us
    to implement a user interface consisting of two buttons (switch on and off) and
    a text view.
  prefs: []
  type: TYPE_NORMAL
- en: The text within the TextView will be the message that we will be sending to
    our NFC shield. The first step will be to navigate to the Android layout file,
    which is available at `app` > `src` > `res` > `layout` > `activity_nfc.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are within this layout file, we will switch to the text view of the
    Android layout file, and we will replace the current code with the following lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we should have something that looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Laying out the Android user interface and permissions](img/0389OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Coding the app's internals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will then move on to the `MainScreen.java` file, which is available at `app`
    > `src` > `main` > `java` > `package name` > `NFCActivity.java`.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement the project step by step within our code. Don't worry about
    importing the right statements for our project, as Android Studio will automatically
    import all the statements that we will need for our project if you have the **Auto-Import**
    function switched on. If not, please follow the instructions present in the Android
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow along the project through the GitHub Repository where all
    the source code is available for the readers of our book in its entirety. The
    repository for this chapter is available at [https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter8/ArduinoNFC](https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter8/ArduinoNFC).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first start off by declaring the user interface''s variables and the
    necessary variables to get the NFC up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Within the `onCreate` method, we will implement a number of anonymous classes
    that we will go through step by step.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first part, we will connect the user interface elements to the main
    Android code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Then, in the following code, we need to set `onClickListeners` to our button
    to be able to change the `TextView` part to the right text to beam the message
    to our NFC shield. The term *beam* is used in this code section since **Android
    Beam** is the feature of the Android mobile operating system that allows data
    to be transferred via NFC.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to enhance the user experience, we need to send a message to the users
    that they are unable to use this Android application as they don''t have NFC enabled
    on their device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onCreate()` method, we will also implement our basic NFC callback functions
    to be able to send and receive a message via NFC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to also implement a method known as `Handler`, which will notify the
    user via the NFC status text view as to whether the message has been beamed or
    not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'For the sake of completeness, we will also include the necessary methods to
    be able to read NDEF messages sent via NFC and to improve app performance by not
    including a number of different instances within the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Once you have included all the methods, you should be able to build the app
    and run it on your Android physical device with NFC capabilities, running Android
    4.3 or higher, and with Android Beam activated within the settings.
  prefs: []
  type: TYPE_NORMAL
- en: You can switch on the relay by tapping the **Switch On** button and, holding
    the phone against the NFC shield for at least 5 to 10 seconds, and the user interface
    will get smaller in size. At this point, you need to tap again on the user interface
    to send your message.
  prefs: []
  type: TYPE_NORMAL
- en: How to go further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This project focused mainly on using NFC to transmit a message and have it read
    by the Arduino NFC shield.
  prefs: []
  type: TYPE_NORMAL
- en: The ideal user experience would be the user merely tapping the phone against
    the NFC shield and switching on the light. This could be achieved via **Host-Card
    Emulation** or with further modification of this baseline project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the basic essentials of setting an NFC-enabled Android
    app. This app communicates with Arduino using the NFC shield and the NFC capabilities
    of Android 4.3 and higher.
  prefs: []
  type: TYPE_NORMAL
- en: In this, we highlighted the opportunities available for user-engaging projects
    using NFC. In the next chapter, we will take this to the next level and use Bluetooth
    to give the user the opportunity to control and engage with a robot.
  prefs: []
  type: TYPE_NORMAL
