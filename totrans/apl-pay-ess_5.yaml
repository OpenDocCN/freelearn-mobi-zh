- en: Chapter 5. Designing an Order Management Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 设计订单管理服务器
- en: If you have a business that provides physical goods to your customers, it is
    important that you have a reliable order management server. Depending on your
    customers' needs, you may need to provide access to the server from client apps
    running on web browsers, web servers, or mobile devices. This book focuses on
    client apps running on iPhone and iPad devices, and in the Simulator app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个向客户提供实体商品的业务，拥有一个可靠的订单管理服务器非常重要。根据客户的需求，你可能需要从运行在Web浏览器、Web服务器或移动设备上的客户端应用提供对服务器的访问。本书重点关注运行在iPhone和iPad设备上的客户端应用，以及在模拟器应用中。
- en: 'Generally, a client-/server-based order capture and order processing system
    has these components:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，基于客户端/服务器的订单捕获和订单处理系统具有以下组件：
- en: '**Server**: This runs the order processing web app, database management system,
    and other server-side processes. The web app implements HTTP-based API clients
    that are used to request and submit information. Through this API, the web app
    provides product information to clients, and processes payment and order information
    submitted by clients.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**：运行订单处理Web应用、数据库管理系统和其他服务器端进程。Web应用实现了基于HTTP的API客户端，用于请求和提交信息。通过这个API，Web应用向客户端提供产品信息，并处理客户端提交的支付和订单信息。'
- en: '**Client**: This runs the client app. The client app calls the API that the
    order processing web app provides to request and submit information to the web
    app.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**：运行客户端应用。客户端应用调用订单处理Web应用提供的API，以请求和提交信息到Web应用。'
- en: For the purposes of this book, an *order management web app* is a process that
    responds to HTTP requests. In this book's example project, this process provides
    inventory and shipping method information to clients and processes the payment
    information clients submitted to it (which includes information about the item
    ordered, shipping details, and so on).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，一个*订单管理Web应用*是一个响应HTTP请求的过程。在本书的示例项目中，这个过程向客户端提供库存和运输方式信息，并处理客户端提交给它的支付信息（包括关于订购的项目、运输详情等信息）。
- en: Client apps interact with the server through HTTP requests. In your development
    environment, the order management web app runs on your development computer, and
    the client app runs in a simulator or an iOS device that supports Apple Pay.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用通过HTTP请求与服务器交互。在你的开发环境中，订单管理Web应用运行在你的开发计算机上，而客户端应用则运行在支持Apple Pay的模拟器或iOS设备上。
- en: 'This chapter describes the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述以下内容：
- en: The main characteristics of an order management server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单管理服务器的特点
- en: Its database structure and client API
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其数据库结构和客户端API
- en: Configuring an order management server web app
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置订单管理服务器Web应用
- en: A *web server* is a computer that stores information, modifies it, and provides
    clients with access to it. These clients can request information or ask the server
    to process data in a specific way, which can result in a change to the data stored
    on the server and the client receiving a representation of this data. Practically,
    any computer can be a web server. A web app is a process that runs on a web server
    and serves content to clients through HTTP requests. In production environments,
    web apps run on specially configured web servers, which provide redundancy, replication,
    and other features to ensure robustness, high performance, and safety, among other
    characteristics. However, you do not need a fully fledged web server to run a
    web app. You can run a web app on your development computer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*Web服务器*是一个存储信息、修改信息并向客户端提供访问权限的计算机。这些客户端可以请求信息或要求服务器以特定方式处理数据，这可能导致服务器上存储的数据发生变化，客户端接收到的数据表示也会发生变化。实际上，任何计算机都可以作为Web服务器。Web应用是在Web服务器上运行并通过对客户端的HTTP请求提供服务的过程。在生产环境中，Web应用运行在专门配置的Web服务器上，这些服务器提供冗余、复制和其他功能，以确保稳健性、高性能和安全，以及其他特性。然而，你不需要一个完整的Web服务器来运行Web应用。你可以在你的开发计算机上运行Web应用。
- en: An *order management server* is a web app that runs on a computer that is accessible
    to clients. In your development environment (which is comprised of your computer,
    developer toolset, and iOS devices), the server web app runs on your computer,
    and the client app runs in a simulator on your computer or an iOS device.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*订单管理服务器*是一个运行在可供客户端访问的计算机上的Web应用。在你的开发环境中（由你的计算机、开发工具集和iOS设备组成），服务器Web应用运行在你的计算机上，而客户端应用则运行在你的计算机上的模拟器或iOS设备上。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The hardware and software configurations of the server and clients are numerous.
    This chapter describes a configuration for development on a single Mac using the
    Simulator app and an iOS device that can send HTTP requests to this computer.
    This configuration is not suitable for testing or deployment. Consult a deployment
    engineer when you are ready to test or deploy your apps in more realistic configurations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器和客户端的硬件和软件配置众多。本章描述了在单个 Mac 上使用模拟器应用和可以发送 HTTP 请求到该计算机的 iOS 设备进行开发的配置。此配置不适用于测试或部署。当您准备在更真实的配置中测试或部署应用程序时，请咨询部署工程师。
- en: To exercise all the components of a client app that supports Apple Pay (such
    as this book's example app, the Merchant app), you must run the client app on
    an iOS device. In general, client-side payment gateway software does not operate
    effectively in simulators.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试支持 Apple Pay 的客户端应用程序的所有组件（例如本书的示例应用程序、商家应用程序），您必须在 iOS 设备上运行客户端应用程序。通常，客户端支付网关软件在模拟器中运行效果不佳。
- en: A client app can access the server web app directly (that is, if both processes
    are running on the same computer, such as when the client runs in iOS Simulator),
    through an internal network with the client running on an iOS device (within a
    subnet), or through the Internet using a web server that is accessible through
    the public Internet (either for wide-scale testing or production). The example
    project uses Node.js to implement the server web app. Node.js is an environment
    used to develop server-side apps.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序可以直接访问服务器网络应用程序（即，如果两个进程都在同一台计算机上运行，例如当客户端在 iOS 模拟器中运行时），通过运行在 iOS 设备上的客户端的内部网络（在子网内），或通过使用可通过公共互联网访问的
    Web 服务器（无论是用于大规模测试还是生产）通过互联网访问。示例项目使用 Node.js 实现服务器网络应用程序。Node.js 是用于开发服务器端应用程序的环境。
- en: Defining order management data structures
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义订单管理数据结构
- en: An order management system has, as a minimum, data structures representing products
    available for sale (inventory) and orders. To support the Apple Pay workflow,
    the system should also have a structure representing the supported shipping methods.
    The example project uses a MongoDB database to store this data, and the Mongoose
    data modeling module for Node.js. MongoDB is a document-based database system.
    Mongoose makes it easier to create documents from schemas and access the data
    in these documents.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 订单管理系统至少有表示可供销售的产品（库存）和订单的数据结构。为了支持 Apple Pay 工作流程，系统还应有一个表示支持的运输方式的结构。示例项目使用
    MongoDB 数据库存储这些数据，并使用 Node.js 的 Mongoose 数据建模模块。MongoDB 是一种基于文档的数据库系统。Mongoose
    使得从模式创建文档和访问这些文档中的数据变得更加容易。
- en: 'The database for the example order management system has three collections:
    `Product`, `ShippingMethod`, and `Order`. A collection is similar to a table in
    a relational database system.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 示例订单管理系统数据库有三个集合：`Product`、`ShippingMethod` 和 `Order`。集合在关系型数据库系统中类似于表。
- en: 'The `Product` collection stores information about each product offered for
    sale. The following table shows the fields available for product records within
    the collection:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`Product` 集合存储有关出售的每个产品的信息。下表显示了集合中产品记录可用的字段：'
- en: '| Field name | Description |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 字段名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `name` | This is the name of the product |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 这是产品的名称 |'
- en: '| `description` | This is a phrase describing the product |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `description` | 这是一个描述产品的短语 |'
- en: '| `image_uri` | This is a URI identifying an image of the product |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `image_uri` | 这是一个标识产品图像的 URI |'
- en: '| `quantity_on_hand` | This is the number of units of the product in stock
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `quantity_on_hand` | 这是库存中产品的单位数量 |'
- en: '| `price` | This is the sale price of each unit of the product |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `price` | 这是每个产品单位的销售价格 |'
- en: 'The `ShippingMethod` collection stores information about the shipping methods
    available. The following table shows the fields for shipping records:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`ShippingMethod` 集合存储有关可用运输方式的信息。下表显示了运输记录的字段：'
- en: '| Field name | Description |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 字段名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `name` | This is the name of the shipping method |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 这是运输方式的名称 |'
- en: '| `description` | This is a phrase stating the shipment duration in days |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `description` | 这是一个表示运输持续时间的天数 |'
- en: '| `transit_days` | This is a number stating the shipment duration in days |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `transit_days` | 这是一个表示运输持续时间的天数 |'
- en: '| `price` | This is the price for the shipping method |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `price` | 这是运输方式的费用 |'
- en: 'The `Order` collection stores information about each order processed by the
    order management system. These are the fields for order records:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`Order` 集合存储了订单管理系统处理的每个订单的信息。以下是订单记录的字段：'
- en: '| Field name | Description |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 字段名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `date` | This is the date-time group that the order was processed in |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `date` | 这是订单处理的日期时间组 |'
- en: '| `description` | This is the name of the product sold (one product per order)
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `description` | 这是销售产品的名称（每个订单一个产品） |'
- en: '| `shipping_contact` | This is the name of the person identified as the shipping
    contact |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `shipping_contact` | 这是被标识为运输联系人的姓名 |'
- en: '| `shipping_email` | This is the e-mail address of the shipping contact |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `shipping_email` | 这是运输联系人的电子邮件地址 |'
- en: '| `shipping_street` | This is the street of the shipping address |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `shipping_street` | 这是运输地址的街道 |'
- en: '| `shipping_city` | This is the city of the shipping address |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `shipping_city` | 这是运输地址的城市 |'
- en: '| `shipping_state` | This is the state of the shipping address |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `shipping_state` | 这是运输地址的状态 |'
- en: '| `shipping_zip` | This is the zip code of the shipping address |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `shipping_zip` | 这是运输地址的邮政编码 |'
- en: '| `shipping_method_name` | This is the name of the shipping method used for
    the order |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `shipping_method_name` | 这是用于订单的运输方式名称 |'
- en: 'This is the Node.js code that defines the structure of the three collections:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是定义三个集合结构的Node.js代码：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Providing inventory information to clients
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向客户端提供库存信息
- en: 'The order management system implements three REST APIs (known as middleware
    in Node.js parlance) to provide inventory and shipping method information to clients.
    These are as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 订单管理系统实现了三个REST API（在Node.js术语中称为中间件）以向客户端提供库存和运输方式信息。具体如下：
- en: '`/shipping_methods`: This returns the list of supported shipping methods'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/shipping_methods`: 这将返回支持的运输方式列表'
- en: '`/inventory`: This returns the product catalog'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/inventory`: 这将返回产品目录'
- en: '`/product_image/<image_name>`: This returns the image used to represent a product
    to the user'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/product_image/<image_name>`: 这将返回用于向用户展示产品的图片'
- en: When the client app is launched, it requests the list of shipping methods supported
    by the system (the `application:didFinishLaunchingWithOptions:` method in `AppDelegate.m`).
    Before displaying the list of the available products in the product list screen,
    the app requests the product catalog (the `viewDidLoad` method in `ProductList.m`).
    When the app is about to display the card for a particular product (after the
    user selects a product in the product list screen), it requests the product's
    image from the server (the `viewDidLoad` method in `ProductCard.m`).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端应用程序启动时，它会请求系统支持的运输方式列表（在 `AppDelegate.m` 中的 `application:didFinishLaunchingWithOptions:`
    方法）。在产品列表屏幕上显示可用的产品列表之前，应用程序会请求产品目录（在 `ProductList.m` 中的 `viewDidLoad` 方法）。当应用程序即将显示特定产品的卡片（在用户在产品列表屏幕中选择产品后），它会从服务器请求产品的图片（在
    `ProductCard.m` 中的 `viewDidLoad` 方法）。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For development, the URIs used by the example app (Merchant app) specify a process
    name (but not a real web address) and port number to access the order management
    server web app (for example, `http://red:12345/inventory`). When you deploy your
    app to a production environment (that is, the real world), you must use a real,
    appropriately configured web server to run your web app, and URIs that point to
    a public web address, such as `http://red.com/inventory`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发，示例应用程序（商家应用程序）使用的URI指定了进程名称（但不是实际的Web地址）和端口号，以访问订单管理系统Web应用程序（例如，`http://red:12345/inventory`）。当您将应用程序部署到生产环境（即现实世界）时，您必须使用配置适当的真实Web服务器来运行您的Web应用程序，并使用指向公共Web地址的URI，例如
    `http://red.com/inventory`。
- en: 'This is the Node.js code that implements the middleware introduced earlier
    in this section:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现本节前面介绍的中间件的Node.js代码：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Processing orders from clients
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理来自客户的订单
- en: The example order management system server web app processes orders in a single
    function, `payment` (described in [Chapter 4](ch04.html "Chapter 4. Payment Processing
    Workflow"), *Payment Processing Workflow*), which clients execute through an HTTP
    `POST` request to the `http://red:12345/payment` URI.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 示例订单管理系统服务器Web应用程序通过单个函数 `payment`（在[第4章](ch04.html "第4章。支付处理工作流程")中描述，*支付处理工作流程*）处理订单，客户端通过向
    `http://red:12345/payment` URI 发送HTTP `POST` 请求来执行此函数。
- en: First, the function attempts to charge the customer card. If the charge is successful,
    the function adds a record to the `Order` collection using the order information
    that the client provided. When done, the function returns information about the
    payment transaction and the new order (if it was created) to the client.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，该函数尝试对客户卡片进行收费。如果收费成功，该函数将使用客户端提供的订单信息将一条记录添加到`Order`集合中。完成后，该函数将有关支付交易和新的订单（如果已创建）的信息返回给客户端。
- en: Refer to the *Process Phase* section in [Chapter 4](ch04.html "Chapter 4. Payment
    Processing Workflow"), *Payment Processing Workflow*, for details about the implementation
    of the `payment` function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`payment`函数实现的详细信息，请参阅第4章中的*流程阶段*部分，*支付处理工作流程*。
- en: Implementing secure communication
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现安全通信
- en: The configuration described in the preceding sections is only for development.
    There are several things you need to do when deploying an order management system
    web app for use by real customers. The client apps used by your customers must
    also be secure.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 前几节中描述的配置仅适用于开发。当部署一个用于真实客户使用的订单管理系统Web应用时，你需要做几件事情。你的客户使用的客户端应用也必须是安全的。
- en: Firstly, instead of using a process name and port number in URIs, client apps
    should use URIs based on a web address, such as [http://red.com](http://red.com).
    You should also configure a computer as your publicly accessible web server, which
    runs your server process. Depending on the expected traffic volume, you may configure
    your web server to run several instances of the server web app to process requests
    from several clients concurrently.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，客户端应用在URI中不应使用进程名称和端口号，而应使用基于Web地址的URI，例如[http://red.com](http://red.com)。你还应配置一台计算机作为你的公开可访问的Web服务器，该服务器运行你的服务器进程。根据预期的流量量，你可能需要配置你的Web服务器同时运行多个服务器Web应用的实例来处理来自多个客户端的并发请求。
- en: Secondly, you must ensure that the data transmitted between the server and client
    is secure. By securing data transmission, you ensure that only authorized entities
    receive the data, that the data is not modified in transit, and that the data
    cannot be read by third parties. One way to do this is to use the **HTTPS** (**HTTP
    Secure**) protocol instead of HTTP to transmit messages and data between server
    and client.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你必须确保服务器和客户端之间传输的数据是安全的。通过确保数据传输的安全性，你确保只有授权实体才能接收数据，数据在传输过程中不会被修改，并且数据不能被第三方读取。实现这一目标的一种方法是用**HTTPS**（**HTTP安全**）协议而不是HTTP来在服务器和客户端之间传输消息和数据。
- en: You can learn about adding HTTPS support to client apps in Apple's Developer
    Library. For information about implementing HTTPS in your web server, consult
    the appropriate documentation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在苹果的开发者库中了解如何向客户端应用添加HTTPS支持。有关在Web服务器中实现HTTPS的信息，请参阅相应的文档。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has described the design and implementation of a simple web app
    to serve as an order management system that provides inventory data to client
    apps and processes orders submitted from the client apps running in the iOS Simulator
    app, and on iPhone or iPad devices, which support Apple Pay. The chapter has also
    mentioned the critical security measures you need to implement in web servers
    and client apps to ensure secure communication between them. The next chapter
    will provide essential information about the main Apple Pay API used by client
    apps.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已描述了一个简单Web应用的设计和实现，该应用作为订单管理系统，为客户端应用提供库存数据，并处理在iOS模拟器应用、iPhone或iPad设备上运行的客户端应用提交的订单，这些设备支持Apple
    Pay。本章还提到了在Web服务器和客户端应用中需要实施的临界安全措施，以确保它们之间的安全通信。下一章将提供有关客户端应用使用的Apple Pay主API的基本信息。
