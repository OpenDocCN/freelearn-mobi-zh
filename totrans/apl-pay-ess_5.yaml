- en: Chapter 5. Designing an Order Management Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a business that provides physical goods to your customers, it is
    important that you have a reliable order management server. Depending on your
    customers' needs, you may need to provide access to the server from client apps
    running on web browsers, web servers, or mobile devices. This book focuses on
    client apps running on iPhone and iPad devices, and in the Simulator app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, a client-/server-based order capture and order processing system
    has these components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server**: This runs the order processing web app, database management system,
    and other server-side processes. The web app implements HTTP-based API clients
    that are used to request and submit information. Through this API, the web app
    provides product information to clients, and processes payment and order information
    submitted by clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client**: This runs the client app. The client app calls the API that the
    order processing web app provides to request and submit information to the web
    app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the purposes of this book, an *order management web app* is a process that
    responds to HTTP requests. In this book's example project, this process provides
    inventory and shipping method information to clients and processes the payment
    information clients submitted to it (which includes information about the item
    ordered, shipping details, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Client apps interact with the server through HTTP requests. In your development
    environment, the order management web app runs on your development computer, and
    the client app runs in a simulator or an iOS device that supports Apple Pay.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter describes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The main characteristics of an order management server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its database structure and client API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an order management server web app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A *web server* is a computer that stores information, modifies it, and provides
    clients with access to it. These clients can request information or ask the server
    to process data in a specific way, which can result in a change to the data stored
    on the server and the client receiving a representation of this data. Practically,
    any computer can be a web server. A web app is a process that runs on a web server
    and serves content to clients through HTTP requests. In production environments,
    web apps run on specially configured web servers, which provide redundancy, replication,
    and other features to ensure robustness, high performance, and safety, among other
    characteristics. However, you do not need a fully fledged web server to run a
    web app. You can run a web app on your development computer.
  prefs: []
  type: TYPE_NORMAL
- en: An *order management server* is a web app that runs on a computer that is accessible
    to clients. In your development environment (which is comprised of your computer,
    developer toolset, and iOS devices), the server web app runs on your computer,
    and the client app runs in a simulator on your computer or an iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The hardware and software configurations of the server and clients are numerous.
    This chapter describes a configuration for development on a single Mac using the
    Simulator app and an iOS device that can send HTTP requests to this computer.
    This configuration is not suitable for testing or deployment. Consult a deployment
    engineer when you are ready to test or deploy your apps in more realistic configurations.
  prefs: []
  type: TYPE_NORMAL
- en: To exercise all the components of a client app that supports Apple Pay (such
    as this book's example app, the Merchant app), you must run the client app on
    an iOS device. In general, client-side payment gateway software does not operate
    effectively in simulators.
  prefs: []
  type: TYPE_NORMAL
- en: A client app can access the server web app directly (that is, if both processes
    are running on the same computer, such as when the client runs in iOS Simulator),
    through an internal network with the client running on an iOS device (within a
    subnet), or through the Internet using a web server that is accessible through
    the public Internet (either for wide-scale testing or production). The example
    project uses Node.js to implement the server web app. Node.js is an environment
    used to develop server-side apps.
  prefs: []
  type: TYPE_NORMAL
- en: Defining order management data structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An order management system has, as a minimum, data structures representing products
    available for sale (inventory) and orders. To support the Apple Pay workflow,
    the system should also have a structure representing the supported shipping methods.
    The example project uses a MongoDB database to store this data, and the Mongoose
    data modeling module for Node.js. MongoDB is a document-based database system.
    Mongoose makes it easier to create documents from schemas and access the data
    in these documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The database for the example order management system has three collections:
    `Product`, `ShippingMethod`, and `Order`. A collection is similar to a table in
    a relational database system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Product` collection stores information about each product offered for
    sale. The following table shows the fields available for product records within
    the collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Field name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | This is the name of the product |'
  prefs: []
  type: TYPE_TB
- en: '| `description` | This is a phrase describing the product |'
  prefs: []
  type: TYPE_TB
- en: '| `image_uri` | This is a URI identifying an image of the product |'
  prefs: []
  type: TYPE_TB
- en: '| `quantity_on_hand` | This is the number of units of the product in stock
    |'
  prefs: []
  type: TYPE_TB
- en: '| `price` | This is the sale price of each unit of the product |'
  prefs: []
  type: TYPE_TB
- en: 'The `ShippingMethod` collection stores information about the shipping methods
    available. The following table shows the fields for shipping records:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Field name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | This is the name of the shipping method |'
  prefs: []
  type: TYPE_TB
- en: '| `description` | This is a phrase stating the shipment duration in days |'
  prefs: []
  type: TYPE_TB
- en: '| `transit_days` | This is a number stating the shipment duration in days |'
  prefs: []
  type: TYPE_TB
- en: '| `price` | This is the price for the shipping method |'
  prefs: []
  type: TYPE_TB
- en: 'The `Order` collection stores information about each order processed by the
    order management system. These are the fields for order records:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Field name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `date` | This is the date-time group that the order was processed in |'
  prefs: []
  type: TYPE_TB
- en: '| `description` | This is the name of the product sold (one product per order)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `shipping_contact` | This is the name of the person identified as the shipping
    contact |'
  prefs: []
  type: TYPE_TB
- en: '| `shipping_email` | This is the e-mail address of the shipping contact |'
  prefs: []
  type: TYPE_TB
- en: '| `shipping_street` | This is the street of the shipping address |'
  prefs: []
  type: TYPE_TB
- en: '| `shipping_city` | This is the city of the shipping address |'
  prefs: []
  type: TYPE_TB
- en: '| `shipping_state` | This is the state of the shipping address |'
  prefs: []
  type: TYPE_TB
- en: '| `shipping_zip` | This is the zip code of the shipping address |'
  prefs: []
  type: TYPE_TB
- en: '| `shipping_method_name` | This is the name of the shipping method used for
    the order |'
  prefs: []
  type: TYPE_TB
- en: 'This is the Node.js code that defines the structure of the three collections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Providing inventory information to clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The order management system implements three REST APIs (known as middleware
    in Node.js parlance) to provide inventory and shipping method information to clients.
    These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/shipping_methods`: This returns the list of supported shipping methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/inventory`: This returns the product catalog'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/product_image/<image_name>`: This returns the image used to represent a product
    to the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the client app is launched, it requests the list of shipping methods supported
    by the system (the `application:didFinishLaunchingWithOptions:` method in `AppDelegate.m`).
    Before displaying the list of the available products in the product list screen,
    the app requests the product catalog (the `viewDidLoad` method in `ProductList.m`).
    When the app is about to display the card for a particular product (after the
    user selects a product in the product list screen), it requests the product's
    image from the server (the `viewDidLoad` method in `ProductCard.m`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For development, the URIs used by the example app (Merchant app) specify a process
    name (but not a real web address) and port number to access the order management
    server web app (for example, `http://red:12345/inventory`). When you deploy your
    app to a production environment (that is, the real world), you must use a real,
    appropriately configured web server to run your web app, and URIs that point to
    a public web address, such as `http://red.com/inventory`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the Node.js code that implements the middleware introduced earlier
    in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Processing orders from clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example order management system server web app processes orders in a single
    function, `payment` (described in [Chapter 4](ch04.html "Chapter 4. Payment Processing
    Workflow"), *Payment Processing Workflow*), which clients execute through an HTTP
    `POST` request to the `http://red:12345/payment` URI.
  prefs: []
  type: TYPE_NORMAL
- en: First, the function attempts to charge the customer card. If the charge is successful,
    the function adds a record to the `Order` collection using the order information
    that the client provided. When done, the function returns information about the
    payment transaction and the new order (if it was created) to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Process Phase* section in [Chapter 4](ch04.html "Chapter 4. Payment
    Processing Workflow"), *Payment Processing Workflow*, for details about the implementation
    of the `payment` function.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing secure communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configuration described in the preceding sections is only for development.
    There are several things you need to do when deploying an order management system
    web app for use by real customers. The client apps used by your customers must
    also be secure.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, instead of using a process name and port number in URIs, client apps
    should use URIs based on a web address, such as [http://red.com](http://red.com).
    You should also configure a computer as your publicly accessible web server, which
    runs your server process. Depending on the expected traffic volume, you may configure
    your web server to run several instances of the server web app to process requests
    from several clients concurrently.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, you must ensure that the data transmitted between the server and client
    is secure. By securing data transmission, you ensure that only authorized entities
    receive the data, that the data is not modified in transit, and that the data
    cannot be read by third parties. One way to do this is to use the **HTTPS** (**HTTP
    Secure**) protocol instead of HTTP to transmit messages and data between server
    and client.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn about adding HTTPS support to client apps in Apple's Developer
    Library. For information about implementing HTTPS in your web server, consult
    the appropriate documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has described the design and implementation of a simple web app
    to serve as an order management system that provides inventory data to client
    apps and processes orders submitted from the client apps running in the iOS Simulator
    app, and on iPhone or iPad devices, which support Apple Pay. The chapter has also
    mentioned the critical security measures you need to implement in web servers
    and client apps to ensure secure communication between them. The next chapter
    will provide essential information about the main Apple Pay API used by client
    apps.
  prefs: []
  type: TYPE_NORMAL
