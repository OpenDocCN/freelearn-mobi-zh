- en: Chapter 4. Data Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a SQLite database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for iCloud support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iCloud key/value data storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost every application needs to have permanent data storage on the filesystem.
    In this chapter, we will discuss different ways of storing data. We will see how
    to create a **SQLite database** and manage data with it from within an iPhone
    application. Also, we will learn how to use an already existing database in a
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLite ([http://www.sqlite.org](http://www.sqlite.org)) is a self-contained
    transactional database system. Each database is saved in a standalone file and
    there is no database server. In iOS, SQLite support is native.
  prefs: []
  type: TYPE_NORMAL
- en: Following SQLite, we will have a look at **iCloud storage** and how to incorporate
    it in our apps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create files on the filesystem of iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new iPhone **Single View Application** in Xamarin Studio and name it
    `FileCreationApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the ensuing steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `FileCreationAppViewController.xib` file in Interface Builder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a button and a label on its view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in Xamarin Studio, enter the following code in the `ViewDidLoad` method
    of the controller class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator. Tap the button to fill the label with
    the contents of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As one can see from the preceding code, we can use standard classes from the
    `System.IO namespace`, just like in desktop applications. We will set a path for
    the file we want to save. We will do this in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In iOS, we do not have access to the whole filesystem, not even inside the
    application bundle. An exception will occur if we try to write inside a folder
    we do not have access to. So we use the `static Environment.GetFolderPath(SpecialFolder)`
    method and retrieve the `Personal` special folder, that corresponds to our app''s
    `Documents` folder. Note the use of `Path.Combine(string, string)` that combines
    two strings and returns a path. After that, we create a new instance of the `StreamWriter`
    class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We write some text in the file with its `WriteLine(string)` method. To retrieve
    the text from the file, we create a new instance of the `StreamReader` class and
    read the text with its `ReadLine` method using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Practically, every available class in the `System.IO` namespace will work on
    Xamarin.iOS, as long as we have access to the target folder.
  prefs: []
  type: TYPE_NORMAL
- en: The Documents folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An app bundle''s `Documents` folder is relevant to the app alone. If the app
    is uninstalled from the device, its contents are also removed. Files created in
    this folder are automatically backed up to iCloud, unless we explicitly request
    that a particular file is excluded. This can be done by skipping the backup attribute
    of the file. For example, if we wanted to exclude the `MyFile.txt` file that we
    created, we would have to add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the file does not exist when we call this method, the `error` object will
    contain the appropriate error information.
  prefs: []
  type: TYPE_NORMAL
- en: If we would like to include a file to iCloud backup, we would just have to call
    the preceding method, passing `false` as the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important that we consider skipping the backup attribute for large files.
    Apple will reject apps that contain large files to be backed up to iCloud.
  prefs: []
  type: TYPE_NORMAL
- en: iCloud backup is the automatic procedure of iOS backup feature. It is primarily
    used for restoring a device from iCloud. Other than excluding or including files
    from iCloud backups, we have no other access to it. It is also different from
    iCloud storage, which we have access to and will be discussing later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Caches folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Caches` folder (`Library/Caches/`) can be used for storing application-specific
    data that can be easily recreated by the application. Files in this folder are
    not backed up to iCloud and can be deleted by the system, if there is need for
    more space.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get the full path of the `Caches` folder in an iOS app, through the
    `Environment.SpecialFolder.InternetCache` value, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *iCloud key/value data storage* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a SQLite database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a SQLite database file. We will
    create a table, insert some data into it, and then query the table to display
    the data on screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new iPhone **Single View Application** in Xamarin Studio and name it
    `SQLiteApp`. Add three buttons and a label on the view controller. Do not forget
    to connect them to the outlets.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add references to the assemblies `Mono.Data.Sqlite` and `System.Data`. The following
    screenshot shows how to add a reference to the project:![How to do it...](img/8924OT_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For creating the database and the table, enter the following method in the
    `SQLiteAppViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method for inserting data to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method for querying the data from the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code in the `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator. Tap each button in sequence, to create,
    insert, and query the data from the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'iOS provides native support for SQLite databases. We can access SQLite databases
    with Mono''s `Mono.Data.Sqlite` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `CreateSQLiteDatabase` method, we first check if the file already
    exists using the following code so as to avoid destroying any data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can continue with the creation of the database. We first create the
    file with the `SqliteConnection.CreateFile(string)` static method using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We connect to the newly created file by initializing a `SqliteConnection` object
    and calling its `Open()` method. The connection string for a SQLite database is
    `Data Source =` followed by the filename of the database, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a table in the database, a `SqliteCommand` object is initialized.
    We pass a standard SQL string to its `CommandText` property and call the `ExecuteNonQuery()`
    method to execute the SQL as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To insert data to the database, we use the following code in the `InsertData`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we query the data through a `SELECT` statement and retrieve it with
    the help of `SqliteDataReader`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note the usage of a `try-catch` block. It is provided to display a message to
    the user if something goes wrong with the creation of the database.
  prefs: []
  type: TYPE_NORMAL
- en: SQL table creation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we have created a simple table for our database with the name
    `Customers`. It contains three fields. The `FirstName` and `LastName` parameters
    are of type `VARCHAR(20)` while `ID` is of type `INTEGER` and is also the `PRIMARY
    KEY` of the table.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from using SQL commands to create tables, we can create a SQLite database
    with various commercial or free GUI tools. A simple search on the internet will
    yield various results.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating files* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Displaying data in a table* recipe in [Chapter 5](ch05.html "Chapter 5. Displaying
    Data"), *Displaying Data*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for iCloud support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the release of iOS 5, Apple introduced iCloud. iCloud is a service that
    provides cloud storage to iOS users, in a variety of configurations. For app development,
    we can use iCloud storage to save information that can be shared among different
    instances of our app running on different devices under the same user account.
    In this recipe, we will learn how to prepare an app to provide iCloud storage
    support.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new iPhone **Single View Application** in Xamarin Studio and name it
    `KeyValueApp`. For this recipe, an App ID with iCloud enabled needs to exist on
    the developer account. Refer to [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*, for more information on how to create an App ID.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on the `Entitlements.plist` file to open it in Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Enable iCloud** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it asks you to choose an account, select your Apple developer account from
    the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After enabling iCloud, the **Use key-value store** checkbox should appear. Enable
    it. The **Entitlements.plist** file settings should now look like the following
    screenshot:![How to do it...](img/8924OT_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the project options, under **iPhone Bundle Signing**, select **Entitlements.plist**
    for the **Custom entitlements** field. It is important to perform this step, despite
    the fact that the field might already be set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enabling iCloud support is simply a matter of setting the appropriate setting
    for our project. By checking the **Enable iCloud** and **Use key-value store**
    checkboxes, Xamarin Studio adds the necessary keys in the **Entitlements.plist**
    file, that will allow the app to use iCloud storage.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we can run iCloud-enabled apps on the simulator, the iCloud functionality
    will not work.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating profiles* recipe in [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iCloud key/value storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to save and retrieve small amounts of data
    that are suitable for storing app settings or anything that would be useful to
    be shared among different devices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apps can only store up to a total of 1 MB of data with key/value store, in up
    to 1024 keys. So it cannot be used to back up files or similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need two devices under the same iCloud account to actually see iCloud
    storage in action. On one device we will save some data, and on the second device
    we will load the data. If only one device is available, it is not an issue as
    it will work flawlessly because the data will just be loaded from local storage,
    instead of iCloud.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to complete the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new iPhone **Single View Application** in Xamarin Studio and enable
    it for iCloud, as shown in the previous recipe. Name the project `KeyValueApp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two buttons and one label on the view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the view controller''s `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the device. Tap the **Save** button to save the key
    and value to iCloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Load** button to display the data on the label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there is access to a second device, run the app on it and tap the **Load**
    button. The data will be retrieved from iCloud and displayed on the screen of
    the second device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save key/value pairs to iCloud, we use the `NSUbiquitousKeyValueStore` class,
    which is responsible for handling the data. We retrieve the default key value
    store through the `DefaultStore` static property and call its `Save` method, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling the `Save` method pushes the data in a queue for being saved locally
    and then uploaded to iCloud. The `Synchronize` method syncs the key/value store
    and can basically be used to speed up the process of syncing the data. However,
    calling the method does not mean that the data will be synced right away. iOS
    is responsible for when the data will be synced and we have no control over it.
    However, iCloud is designed to provide a seamless syncing experience, so the delays
    are usually unnoticeable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To load the data from iCloud, we simply call the `GetString` method, passing
    the key for which to retrieve the data using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'iCloud key/value store only accepts a specific set of values, which are of
    the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`double`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bool`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`long`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSObject[]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSDictionary`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSData`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting notified on key/value store changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also get notified of when a key/value pair or set of pairs have been
    changed on another device. To do this, we need to add a notification observer,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NSUbiquitousKeyValueStoreChangeReason` enumeration contains the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ServerChange**: It shows if a value was changed on another device or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**QuotaViolationChange**: The quota limit was reached. Some key/value pairs
    need to be removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InitialSyncChange**: A key/value pair was discarded as the initial iCloud
    setup on the device has not been completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AccountChange**: The user has changed the iCloud account on the device. The
    whole key/value store is replaced with the one from the new iCloud account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Preparing for iCloud* *support* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating profiles* recipe in [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
