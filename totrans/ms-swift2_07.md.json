["```swift\nvar str = \"Hello World\"\nvar error: NSError\n\nvar results = str.writeToFile(path, atomically: true, encoding: NSUTF8StringEncoding, error: &error)\n\nif results {\n  // successful code here\n} else {\n    println(\"Error writing filer:  \\(error)\")\n}\n```", "```swift\nenum MyError: ErrorType {\n    case Minor\n    case Bad\n    case Terrible\n}\n```", "```swift\nenum MyError: ErrorType {\n    case Minor\n    case Bad\n    case Terrible (description: String)\n}\n```", "```swift\nenum PlayerNumberError: ErrorType {\n    case NumberTooHigh(description: String)\n    case NumberTooLow(description: String)\n    case NumberAlreadyAssigned\n}\n```", "```swift\nenum PlayerNumberError: ErrorType {\n    case NumberTooHigh(description: String)\n    case NumberTooLow(description: String)\n    case NumberAlreadyAssigned\n    case NumberDoesNotExist\n}\n```", "```swift\ntypealias BaseballPlayer = (firstName: String, lastName: String, number: Int)\n```", "```swift\n    mutating func addPlayer(player: BaseballPlayer) throws {\n\n        guard player.number < maxNumber else {\n            throw PlayerNumberError.NumberTooHigh(description: \"Max number is \\(maxNumber)\")\n        }\n\n        guard player.number > minNumber else {\n            throw PlayerNumberError.NumberTooLow(description: \"Min number is \\(minNumber)\")\n        }\n\n        guard players[player.number] == nil else {\n            throw PlayerNumberError.NumberAlreadyAssigned\n        }\n        players[player.number] = player\n    }\n```", "```swift\nfunc getPlayerByNumber(number: Int) throws -> BaseballPlayer {\n    if let player = players[number] {\n        return player\n    } else {\n        throw PlayerNumberError.NumberDoesNotExist\n    }\n}\n```", "```swift\ndo {\n    try [Some function that throws]\n    [Any additional code]\n} catch [pattern] {\n    [Code if function threw error]\n}\n```", "```swift\ndo {\n    let player = try myTeam.getPlayerByNumber(34)\n    print(\"Player is \\(player.firstName) \\(player.lastName)\")\n} catch PlayerNumberError.NumberDoesNotExist {\n    print(\"No player has that number\")\n}\n```", "```swift\ndo {\n    // our statements\n} catch {\n    // our error conditions\n}\n\ndo {\n    // our statements\n} catch _ {\n    // our error conditions\n}\n```", "```swift\ndo {\n    // our statements\n} catch let error {\n    print(\"Error:  \\(error)\")\n}\n```", "```swift\ndo {\n    try myTeam.addPlayer((\"David\", \"Ortiz\", 34))\n} catch PlayerNumberError.NumberTooHigh(let description) {\n    print(\"Error: \\(description)\")\n} catch PlayerNumberError.NumberTooLow(let description) {\n    print(\"Error: \\(description)\")\n} catch PlayerNumberError.NumberAlreadyAssigned {\n    print(\"Error: Number already assigned\")\n}\n```", "```swift\ndo {\n    try myTeam.addPlayer((\"David\", \"Ortiz\", 34))\n} catch PlayerNumberError.NumberTooHigh(let description) {\n    print(\"Error: \\(description)\")\n} catch PlayerNumberError.NumberTooLow(let description) {\n    print(\"Error: \\(description)\")\n} catch PlayerNumberError.NumberAlreadyAssigned {\n    print(\"Error: Number already assigned\")\n} catch {\n    print(\"Error: Unknown Error\")\n}\n```", "```swift\nfunc myFunc() throws {\n    try myTeam.addPlayer((\"David\", \"Ortiz\", 34))\n}\n```", "```swift\ndo {\n    let player = try myTeam.getPlayerByNumber(34)\n    print(\"Player is \\(player.firstName) \\(player.lastName)\")\n} catch {}\n```", "```swift\nif let player = try? myTeam.getPlayerByNumber(34) {\n    print(\"Player is \\(player.firstName) \\(player.lastName)\")\n}\n```", "```swift\nfunc deferFunction()  {\n    print(\"Function started\")\n    var str: String?\n\n    defer {\n    print(\"In defer block\")\n        if let s = str {\n            print(\"str is \\(s)\")\n        }\n    }\n\n    str = \"Jon\"\n    print(\"Function finished\")\n}\n```", "```swift\nFunction started\nFunction finished\nIn defer block\nstr is Jon\n```", "```swift\nif #available(iOS 9.0, OSX 10.10, watchOS 2, *) {\n     // Available for iOS 9, OSX 10.10, watchOS 2 or above\n    print(\"Minimum requirements met\")\n} else {\n    //  Block on anything below the above minimum requirements\n    print(\"Minimum requirements not met\")\n}\n```", "```swift\n@available(iOS 9.0, *)\nfunc testAvailability() {\n    // Function only available for iOS 9 or above\n}\n\n@available(iOS 9.0, *)\nstruct TestStruct {\n  // Type only available for iOS 9 or above\n}\n```", "```swift\nif #available(iOS 9.0, *) {\n    testAvailability()\n} else {\n     // Fallback on earlier versions\n}\n```"]